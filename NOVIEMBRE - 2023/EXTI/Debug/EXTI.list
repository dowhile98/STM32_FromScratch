
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015b4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001764  08001764  00011764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017e0  080017e0  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  080017e0  080017e0  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017e0  080017e0  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017e0  080017e0  000117e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017e4  080017e4  000117e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  080017e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c0  2**0
                  CONTENTS
 10 .bss          00000180  200000c0  200000c0  000200c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000240  20000240  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00002373  00000000  00000000  00020133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000009e8  00000000  00000000  000224a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000210  00000000  00000000  00022e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000168  00000000  00000000  000230a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a561  00000000  00000000  00023208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00003323  00000000  00000000  0003d769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008ef93  00000000  00000000  00040a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000e38  00000000  00000000  000cfa20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000d0858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800174c 	.word	0x0800174c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	0800174c 	.word	0x0800174c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <lwbtn_init_ex>:
 * \param[in]       evt_fn: Button event function callback
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwbtn_init_ex(lwbtn_t* lwobj, lwbtn_btn_t* btns, uint16_t btns_cnt, lwbtn_get_state_fn get_state_fn,
              lwbtn_evt_fn evt_fn) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	4613      	mov	r3, r2
 800029e:	80fb      	strh	r3, [r7, #6]
    lwobj = LWBTN_GET_LWOBJ(lwobj);
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <lwbtn_init_ex+0x1a>
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	e000      	b.n	80002ac <lwbtn_init_ex+0x1c>
 80002aa:	4b18      	ldr	r3, [pc, #96]	; (800030c <lwbtn_init_ex+0x7c>)
 80002ac:	60fb      	str	r3, [r7, #12]

    if (btns == NULL || btns_cnt == 0 || evt_fn == NULL
 80002ae:	68bb      	ldr	r3, [r7, #8]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d008      	beq.n	80002c6 <lwbtn_init_ex+0x36>
 80002b4:	88fb      	ldrh	r3, [r7, #6]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d005      	beq.n	80002c6 <lwbtn_init_ex+0x36>
 80002ba:	6a3b      	ldr	r3, [r7, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d002      	beq.n	80002c6 <lwbtn_init_ex+0x36>
#if LWBTN_CFG_GET_STATE_MODE == LWBTN_GET_STATE_MODE_CALLBACK
        || get_state_fn == NULL /* Parameter is a must only in callback-only mode */
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <lwbtn_init_ex+0x3a>
#endif                          /* LWBTN_CFG_GET_STATE_MODE == LWBTN_GET_STATE_MODE_CALLBACK */
    ) {
        return 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	e01b      	b.n	8000302 <lwbtn_init_ex+0x72>
    }

    LWBTN_MEMSET(lwobj, 0x00, sizeof(*lwobj));
 80002ca:	2210      	movs	r2, #16
 80002cc:	2100      	movs	r1, #0
 80002ce:	68f8      	ldr	r0, [r7, #12]
 80002d0:	f000 fcb2 	bl	8000c38 <memset>
    lwobj->btns = btns;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68ba      	ldr	r2, [r7, #8]
 80002d8:	601a      	str	r2, [r3, #0]
    lwobj->btns_cnt = btns_cnt;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	88fa      	ldrh	r2, [r7, #6]
 80002de:	809a      	strh	r2, [r3, #4]
    lwobj->evt_fn = evt_fn;
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	6a3a      	ldr	r2, [r7, #32]
 80002e4:	609a      	str	r2, [r3, #8]
#if LWBTN_CFG_GET_STATE_MODE != LWBTN_GET_STATE_MODE_MANUAL
    lwobj->get_state_fn = get_state_fn;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	683a      	ldr	r2, [r7, #0]
 80002ea:	60da      	str	r2, [r3, #12]
#else
    (void)get_state_fn; /* May be unused */
#endif /* LWBTN_CFG_GET_STATE_MODE != LWBTN_GET_STATE_MODE_MANUAL */

    for (size_t i = 0; i < btns_cnt; ++i) {
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	e002      	b.n	80002f8 <lwbtn_init_ex+0x68>
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	3301      	adds	r3, #1
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	88fb      	ldrh	r3, [r7, #6]
 80002fa:	697a      	ldr	r2, [r7, #20]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d3f8      	bcc.n	80002f2 <lwbtn_init_ex+0x62>
#if LWBTN_CFG_CLICK_MAX_CONSECUTIVE_DYNAMIC
        btns[i].max_consecutive = LWBTN_CFG_CLICK_MAX_CONSECUTIVE;
#endif /* LWBTN_CFG_CLICK_MAX_CONSECUTIVE_DYNAMIC */
    }

    return 1;
 8000300:	2301      	movs	r3, #1
}
 8000302:	4618      	mov	r0, r3
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	200000dc 	.word	0x200000dc

08000310 <tickInc>:
 */
#include "delay.h"

volatile uint32_t ticks = 0;

void tickInc(uint32_t i){
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
    ticks += i;
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <tickInc+0x20>)
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4413      	add	r3, r2
 8000320:	4a03      	ldr	r2, [pc, #12]	; (8000330 <tickInc+0x20>)
 8000322:	6013      	str	r3, [r2, #0]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	200000ec 	.word	0x200000ec

08000334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800033e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000342:	2b00      	cmp	r3, #0
 8000344:	db0b      	blt.n	800035e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	f003 021f 	and.w	r2, r3, #31
 800034c:	4907      	ldr	r1, [pc, #28]	; (800036c <__NVIC_EnableIRQ+0x38>)
 800034e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000352:	095b      	lsrs	r3, r3, #5
 8000354:	2001      	movs	r0, #1
 8000356:	fa00 f202 	lsl.w	r2, r0, r2
 800035a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	e000e100 	.word	0xe000e100

08000370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	4603      	mov	r3, r0
 8000378:	6039      	str	r1, [r7, #0]
 800037a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800037c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000380:	2b00      	cmp	r3, #0
 8000382:	db0a      	blt.n	800039a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	b2da      	uxtb	r2, r3
 8000388:	490c      	ldr	r1, [pc, #48]	; (80003bc <__NVIC_SetPriority+0x4c>)
 800038a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038e:	0112      	lsls	r2, r2, #4
 8000390:	b2d2      	uxtb	r2, r2
 8000392:	440b      	add	r3, r1
 8000394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000398:	e00a      	b.n	80003b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4908      	ldr	r1, [pc, #32]	; (80003c0 <__NVIC_SetPriority+0x50>)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	f003 030f 	and.w	r3, r3, #15
 80003a6:	3b04      	subs	r3, #4
 80003a8:	0112      	lsls	r2, r2, #4
 80003aa:	b2d2      	uxtb	r2, r2
 80003ac:	440b      	add	r3, r1
 80003ae:	761a      	strb	r2, [r3, #24]
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100
 80003c0:	e000ed00 	.word	0xe000ed00

080003c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003d4:	d301      	bcc.n	80003da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003d6:	2301      	movs	r3, #1
 80003d8:	e00f      	b.n	80003fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003da:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <SysTick_Config+0x40>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	3b01      	subs	r3, #1
 80003e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003e2:	210f      	movs	r1, #15
 80003e4:	f04f 30ff 	mov.w	r0, #4294967295
 80003e8:	f7ff ffc2 	bl	8000370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <SysTick_Config+0x40>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003f2:	4b04      	ldr	r3, [pc, #16]	; (8000404 <SysTick_Config+0x40>)
 80003f4:	2207      	movs	r2, #7
 80003f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003f8:	2300      	movs	r3, #0
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	e000e010 	.word	0xe000e010

08000408 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000410:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000414:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000418:	f003 0301 	and.w	r3, r3, #1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d013      	beq.n	8000448 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000420:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000424:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000428:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800042c:	2b00      	cmp	r3, #0
 800042e:	d00b      	beq.n	8000448 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000430:	e000      	b.n	8000434 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000432:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000434:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f9      	beq.n	8000432 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800043e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	b2d2      	uxtb	r2, r2
 8000446:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000448:	687b      	ldr	r3, [r7, #4]
}
 800044a:	4618      	mov	r0, r3
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
	...

08000458 <main>:



/*Main ------------------------------------------*/
int main(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af02      	add	r7, sp, #8
	uint32_t temp;
	/*habilitar el reloj*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;  //1<<3
 800045e:	4b34      	ldr	r3, [pc, #208]	; (8000530 <main+0xd8>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a33      	ldr	r2, [pc, #204]	; (8000530 <main+0xd8>)
 8000464:	f043 0308 	orr.w	r3, r3, #8
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800046a:	4b31      	ldr	r3, [pc, #196]	; (8000530 <main+0xd8>)
 800046c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800046e:	4a30      	ldr	r2, [pc, #192]	; (8000530 <main+0xd8>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	6313      	str	r3, [r2, #48]	; 0x30
	/**
	 * PD12 -> salida
	 *
	 */
	GPIOD->MODER &=~(GPIO_MODER_MODE12); 	//Clear
 8000476:	4b2f      	ldr	r3, [pc, #188]	; (8000534 <main+0xdc>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a2e      	ldr	r2, [pc, #184]	; (8000534 <main+0xdc>)
 800047c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000480:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE12_0;	//Modo salida de proposito general
 8000482:	4b2c      	ldr	r3, [pc, #176]	; (8000534 <main+0xdc>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a2b      	ldr	r2, [pc, #172]	; (8000534 <main+0xdc>)
 8000488:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800048c:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER &=~ GPIO_OTYPER_OT12;		//PUSH PULL
 800048e:	4b29      	ldr	r3, [pc, #164]	; (8000534 <main+0xdc>)
 8000490:	685b      	ldr	r3, [r3, #4]
 8000492:	4a28      	ldr	r2, [pc, #160]	; (8000534 <main+0xdc>)
 8000494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000498:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR &=~ GPIO_OSPEEDER_OSPEEDR12;
 800049a:	4b26      	ldr	r3, [pc, #152]	; (8000534 <main+0xdc>)
 800049c:	689b      	ldr	r3, [r3, #8]
 800049e:	4a25      	ldr	r2, [pc, #148]	; (8000534 <main+0xdc>)
 80004a0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80004a4:	6093      	str	r3, [r2, #8]
	/**
	 * PA0 -> entrada
	 */
	GPIOA->MODER &=~(GPIO_MODER_MODE0); //RESET STATE (INPUT FLOATING)
 80004a6:	4b24      	ldr	r3, [pc, #144]	; (8000538 <main+0xe0>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a23      	ldr	r2, [pc, #140]	; (8000538 <main+0xe0>)
 80004ac:	f023 0303 	bic.w	r3, r3, #3
 80004b0:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &=~ (GPIO_PUPDR_PUPD0); //no pull up /down
 80004b2:	4b21      	ldr	r3, [pc, #132]	; (8000538 <main+0xe0>)
 80004b4:	68db      	ldr	r3, [r3, #12]
 80004b6:	4a20      	ldr	r2, [pc, #128]	; (8000538 <main+0xe0>)
 80004b8:	f023 0303 	bic.w	r3, r3, #3
 80004bc:	60d3      	str	r3, [r2, #12]

	/**
	 * @brief systick
	 * 
	 */
	temp = 16E+6 / 1E+3;
 80004be:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80004c2:	607b      	str	r3, [r7, #4]
	SysTick_Config(temp);
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f7ff ff7d 	bl	80003c4 <SysTick_Config>
	NVIC_SetPriority(SysTick_IRQn, 15);
 80004ca:	210f      	movs	r1, #15
 80004cc:	f04f 30ff 	mov.w	r0, #4294967295
 80004d0:	f7ff ff4e 	bl	8000370 <__NVIC_SetPriority>
	/**
	 * LWBTN
	 */
	lwbtn_init(btns, 3, prv_btn_get_state, prv_btn_event);
 80004d4:	4b19      	ldr	r3, [pc, #100]	; (800053c <main+0xe4>)
 80004d6:	9300      	str	r3, [sp, #0]
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <main+0xe8>)
 80004da:	2203      	movs	r2, #3
 80004dc:	4919      	ldr	r1, [pc, #100]	; (8000544 <main+0xec>)
 80004de:	2000      	movs	r0, #0
 80004e0:	f7ff fed6 	bl	8000290 <lwbtn_init_ex>
	/**
	 * EXTI
	 */
	RCC->AHB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80004e4:	4b12      	ldr	r3, [pc, #72]	; (8000530 <main+0xd8>)
 80004e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004e8:	4a11      	ldr	r2, [pc, #68]	; (8000530 <main+0xd8>)
 80004ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004ee:	6353      	str	r3, [r2, #52]	; 0x34
	EXTI->IMR |= EXTI_IMR_IM0;
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <main+0xf0>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <main+0xf0>)
 80004f6:	f043 0301 	orr.w	r3, r3, #1
 80004fa:	6013      	str	r3, [r2, #0]
	//configurar el borde de disparo
	EXTI->RTSR |= EXTI_RTSR_TR0;					//rising edge
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <main+0xf0>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	4a11      	ldr	r2, [pc, #68]	; (8000548 <main+0xf0>)
 8000502:	f043 0301 	orr.w	r3, r3, #1
 8000506:	6093      	str	r3, [r2, #8]
	//Seleecionar el pin
	SYSCFG->EXTICR[0] &=~(SYSCFG_EXTICR1_EXTI0);	//PA0
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <main+0xf4>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	4a0f      	ldr	r2, [pc, #60]	; (800054c <main+0xf4>)
 800050e:	f023 030f 	bic.w	r3, r3, #15
 8000512:	6093      	str	r3, [r2, #8]
	EXTI->PR |= EXTI_PR_PR0;						//Clear
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <main+0xf0>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <main+0xf0>)
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	6153      	str	r3, [r2, #20]
	//habilitar la interrupcion en la NVIC
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000520:	2006      	movs	r0, #6
 8000522:	f7ff ff07 	bl	8000334 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI0_IRQn, 3);
 8000526:	2103      	movs	r1, #3
 8000528:	2006      	movs	r0, #6
 800052a:	f7ff ff21 	bl	8000370 <__NVIC_SetPriority>


	for(;;){
 800052e:	e7fe      	b.n	800052e <main+0xd6>
 8000530:	40023800 	.word	0x40023800
 8000534:	40020c00 	.word	0x40020c00
 8000538:	40020000 	.word	0x40020000
 800053c:	080005c1 	.word	0x080005c1
 8000540:	0800056d 	.word	0x0800056d
 8000544:	20000004 	.word	0x20000004
 8000548:	40013c00 	.word	0x40013c00
 800054c:	40013800 	.word	0x40013800

08000550 <__io_putchar>:
	}
}


/*Function definition -----------------------------------------*/
int __io_putchar(int ch){
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4618      	mov	r0, r3
 800055c:	f7ff ff54 	bl	8000408 <ITM_SendChar>
	return ch;
 8000560:	687b      	ldr	r3, [r7, #4]
}
 8000562:	4618      	mov	r0, r3
 8000564:	3708      	adds	r7, #8
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <prv_btn_get_state>:

uint8_t
prv_btn_get_state(struct lwbtn* lw, struct lwbtn_btn* btn){
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	uint8_t sw = *((uint8_t*)btn->arg);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	73bb      	strb	r3, [r7, #14]
	uint8_t state = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	73fb      	strb	r3, [r7, #15]
	switch(sw){
 8000582:	7bbb      	ldrb	r3, [r7, #14]
 8000584:	2b02      	cmp	r3, #2
 8000586:	d010      	beq.n	80005aa <prv_btn_get_state+0x3e>
 8000588:	2b02      	cmp	r3, #2
 800058a:	dc0f      	bgt.n	80005ac <prv_btn_get_state+0x40>
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <prv_btn_get_state+0x28>
 8000590:	2b01      	cmp	r3, #1
	case 0:
		state = INPUT_READ(SW);
		break;
	case 1:
		//state = (INPUT_READ(SW1)) ? 0 : 1;
		break;
 8000592:	e00b      	b.n	80005ac <prv_btn_get_state+0x40>
		state = INPUT_READ(SW);
 8000594:	4b09      	ldr	r3, [pc, #36]	; (80005bc <prv_btn_get_state+0x50>)
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	f003 0301 	and.w	r3, r3, #1
 800059c:	2b00      	cmp	r3, #0
 800059e:	bf14      	ite	ne
 80005a0:	2301      	movne	r3, #1
 80005a2:	2300      	moveq	r3, #0
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	73fb      	strb	r3, [r7, #15]
		break;
 80005a8:	e000      	b.n	80005ac <prv_btn_get_state+0x40>
	case 2:
		//state = INPUT_READ(SW2);
		break;
 80005aa:	bf00      	nop
	}
	return state;
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40020000 	.word	0x40020000

080005c0 <prv_btn_event>:

void
prv_btn_event(struct lwbtn* lw, struct lwbtn_btn* btn, lwbtn_evt_t evt){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	4613      	mov	r3, r2
 80005cc:	71fb      	strb	r3, [r7, #7]
	//uint8_t sw = *((uint8_t*)btn->arg);
	uint8_t event = evt;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	75fb      	strb	r3, [r7, #23]
	switch(event){
 80005d2:	7dfb      	ldrb	r3, [r7, #23]
 80005d4:	2b02      	cmp	r3, #2
 80005d6:	d00e      	beq.n	80005f6 <prv_btn_event+0x36>
 80005d8:	2b02      	cmp	r3, #2
 80005da:	dc13      	bgt.n	8000604 <prv_btn_event+0x44>
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <prv_btn_event+0x26>
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d004      	beq.n	80005ee <prv_btn_event+0x2e>
		break;
	case LWBTN_EVT_ONCLICK:
		printf("SW ON CLICK:%d\r\n", btn->click.cnt);
		break;
	}
}
 80005e4:	e00e      	b.n	8000604 <prv_btn_event+0x44>
		printf("SW ON PRESS\r\n");
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <prv_btn_event+0x4c>)
 80005e8:	f000 fa46 	bl	8000a78 <puts>
		break;
 80005ec:	e00a      	b.n	8000604 <prv_btn_event+0x44>
		printf("SW ON RELEASE\r\n");
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <prv_btn_event+0x50>)
 80005f0:	f000 fa42 	bl	8000a78 <puts>
		break;
 80005f4:	e006      	b.n	8000604 <prv_btn_event+0x44>
		printf("SW ON CLICK:%d\r\n", btn->click.cnt);
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	7e1b      	ldrb	r3, [r3, #24]
 80005fa:	4619      	mov	r1, r3
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <prv_btn_event+0x54>)
 80005fe:	f000 f9d5 	bl	80009ac <iprintf>
		break;
 8000602:	bf00      	nop
}
 8000604:	bf00      	nop
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	08001764 	.word	0x08001764
 8000610:	08001774 	.word	0x08001774
 8000614:	08001784 	.word	0x08001784

08000618 <SysTick_Handler>:
#include <stdio.h>

/**
 *
 */
void SysTick_Handler(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
    if(SysTick->CTRL & 1<<16){
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <SysTick_Handler+0x1c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <SysTick_Handler+0x16>
        //todo
        tickInc(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f7ff fe71 	bl	8000310 <tickInc>
    }
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	e000e010 	.word	0xe000e010

08000638 <EXTI0_IRQHandler>:
/**
 *
 */
void EXTI0_IRQHandler(void){
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR0){
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <EXTI0_IRQHandler+0x28>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	2b00      	cmp	r3, #0
 8000646:	d009      	beq.n	800065c <EXTI0_IRQHandler+0x24>
		EXTI->PR |= EXTI_PR_PR0;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <EXTI0_IRQHandler+0x28>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4a04      	ldr	r2, [pc, #16]	; (8000660 <EXTI0_IRQHandler+0x28>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6153      	str	r3, [r2, #20]
		//Todo añadir codigo que se ejecute cuando ocurre la interrupcion
		printf("rising edge detect\r\n");
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <EXTI0_IRQHandler+0x2c>)
 8000656:	f000 fa0f 	bl	8000a78 <puts>

	}
	return;
 800065a:	bf00      	nop
 800065c:	bf00      	nop
}
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40013c00 	.word	0x40013c00
 8000664:	08001798 	.word	0x08001798

08000668 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	60b9      	str	r1, [r7, #8]
 8000672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
 8000678:	e00a      	b.n	8000690 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800067a:	f3af 8000 	nop.w
 800067e:	4601      	mov	r1, r0
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	1c5a      	adds	r2, r3, #1
 8000684:	60ba      	str	r2, [r7, #8]
 8000686:	b2ca      	uxtb	r2, r1
 8000688:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	3301      	adds	r3, #1
 800068e:	617b      	str	r3, [r7, #20]
 8000690:	697a      	ldr	r2, [r7, #20]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	429a      	cmp	r2, r3
 8000696:	dbf0      	blt.n	800067a <_read+0x12>
  }

  return len;
 8000698:	687b      	ldr	r3, [r7, #4]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3718      	adds	r7, #24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b086      	sub	sp, #24
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	60f8      	str	r0, [r7, #12]
 80006aa:	60b9      	str	r1, [r7, #8]
 80006ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e009      	b.n	80006c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	1c5a      	adds	r2, r3, #1
 80006b8:	60ba      	str	r2, [r7, #8]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ff47 	bl	8000550 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	3301      	adds	r3, #1
 80006c6:	617b      	str	r3, [r7, #20]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	dbf1      	blt.n	80006b4 <_write+0x12>
  }
  return len;
 80006d0:	687b      	ldr	r3, [r7, #4]
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3718      	adds	r7, #24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}

080006da <_close>:

int _close(int file)
{
 80006da:	b480      	push	{r7}
 80006dc:	b083      	sub	sp, #12
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000702:	605a      	str	r2, [r3, #4]
  return 0;
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <_isatty>:

int _isatty(int file)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800074c:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <_sbrk+0x5c>)
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <_sbrk+0x60>)
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <_sbrk+0x64>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <_sbrk+0x64>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <_sbrk+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	429a      	cmp	r2, r3
 8000772:	d207      	bcs.n	8000784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000774:	f000 faae 	bl	8000cd4 <__errno>
 8000778:	4603      	mov	r3, r0
 800077a:	220c      	movs	r2, #12
 800077c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	e009      	b.n	8000798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <_sbrk+0x64>)
 8000794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000796:	68fb      	ldr	r3, [r7, #12]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20020000 	.word	0x20020000
 80007a4:	00000400 	.word	0x00000400
 80007a8:	200000f0 	.word	0x200000f0
 80007ac:	20000240 	.word	0x20000240

080007b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <SystemInit+0x20>)
 80007b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <SystemInit+0x20>)
 80007bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d8:	f7ff ffea 	bl	80007b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <LoopForever+0x6>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	; (8000814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <LoopForever+0xe>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <LoopForever+0x12>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	; (8000820 <LoopForever+0x16>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000802:	f000 fa6d 	bl	8000ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000806:	f7ff fe27 	bl	8000458 <main>

0800080a <LoopForever>:

LoopForever:
  b LoopForever
 800080a:	e7fe      	b.n	800080a <LoopForever>
  ldr   r0, =_estack
 800080c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000818:	080017e8 	.word	0x080017e8
  ldr r2, =_sbss
 800081c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000820:	20000240 	.word	0x20000240

08000824 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC_IRQHandler>
	...

08000828 <std>:
 8000828:	2300      	movs	r3, #0
 800082a:	b510      	push	{r4, lr}
 800082c:	4604      	mov	r4, r0
 800082e:	e9c0 3300 	strd	r3, r3, [r0]
 8000832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000836:	6083      	str	r3, [r0, #8]
 8000838:	8181      	strh	r1, [r0, #12]
 800083a:	6643      	str	r3, [r0, #100]	; 0x64
 800083c:	81c2      	strh	r2, [r0, #14]
 800083e:	6183      	str	r3, [r0, #24]
 8000840:	4619      	mov	r1, r3
 8000842:	2208      	movs	r2, #8
 8000844:	305c      	adds	r0, #92	; 0x5c
 8000846:	f000 f9f7 	bl	8000c38 <memset>
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <std+0x58>)
 800084c:	6263      	str	r3, [r4, #36]	; 0x24
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <std+0x5c>)
 8000850:	62a3      	str	r3, [r4, #40]	; 0x28
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <std+0x60>)
 8000854:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <std+0x64>)
 8000858:	6323      	str	r3, [r4, #48]	; 0x30
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <std+0x68>)
 800085c:	6224      	str	r4, [r4, #32]
 800085e:	429c      	cmp	r4, r3
 8000860:	d006      	beq.n	8000870 <std+0x48>
 8000862:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000866:	4294      	cmp	r4, r2
 8000868:	d002      	beq.n	8000870 <std+0x48>
 800086a:	33d0      	adds	r3, #208	; 0xd0
 800086c:	429c      	cmp	r4, r3
 800086e:	d105      	bne.n	800087c <std+0x54>
 8000870:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000878:	f000 ba56 	b.w	8000d28 <__retarget_lock_init_recursive>
 800087c:	bd10      	pop	{r4, pc}
 800087e:	bf00      	nop
 8000880:	08000a89 	.word	0x08000a89
 8000884:	08000aab 	.word	0x08000aab
 8000888:	08000ae3 	.word	0x08000ae3
 800088c:	08000b07 	.word	0x08000b07
 8000890:	200000f4 	.word	0x200000f4

08000894 <stdio_exit_handler>:
 8000894:	4a02      	ldr	r2, [pc, #8]	; (80008a0 <stdio_exit_handler+0xc>)
 8000896:	4903      	ldr	r1, [pc, #12]	; (80008a4 <stdio_exit_handler+0x10>)
 8000898:	4803      	ldr	r0, [pc, #12]	; (80008a8 <stdio_exit_handler+0x14>)
 800089a:	f000 b869 	b.w	8000970 <_fwalk_sglue>
 800089e:	bf00      	nop
 80008a0:	20000064 	.word	0x20000064
 80008a4:	080015d5 	.word	0x080015d5
 80008a8:	20000070 	.word	0x20000070

080008ac <cleanup_stdio>:
 80008ac:	6841      	ldr	r1, [r0, #4]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <cleanup_stdio+0x34>)
 80008b0:	4299      	cmp	r1, r3
 80008b2:	b510      	push	{r4, lr}
 80008b4:	4604      	mov	r4, r0
 80008b6:	d001      	beq.n	80008bc <cleanup_stdio+0x10>
 80008b8:	f000 fe8c 	bl	80015d4 <_fflush_r>
 80008bc:	68a1      	ldr	r1, [r4, #8]
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <cleanup_stdio+0x38>)
 80008c0:	4299      	cmp	r1, r3
 80008c2:	d002      	beq.n	80008ca <cleanup_stdio+0x1e>
 80008c4:	4620      	mov	r0, r4
 80008c6:	f000 fe85 	bl	80015d4 <_fflush_r>
 80008ca:	68e1      	ldr	r1, [r4, #12]
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <cleanup_stdio+0x3c>)
 80008ce:	4299      	cmp	r1, r3
 80008d0:	d004      	beq.n	80008dc <cleanup_stdio+0x30>
 80008d2:	4620      	mov	r0, r4
 80008d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008d8:	f000 be7c 	b.w	80015d4 <_fflush_r>
 80008dc:	bd10      	pop	{r4, pc}
 80008de:	bf00      	nop
 80008e0:	200000f4 	.word	0x200000f4
 80008e4:	2000015c 	.word	0x2000015c
 80008e8:	200001c4 	.word	0x200001c4

080008ec <global_stdio_init.part.0>:
 80008ec:	b510      	push	{r4, lr}
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <global_stdio_init.part.0+0x30>)
 80008f0:	4c0b      	ldr	r4, [pc, #44]	; (8000920 <global_stdio_init.part.0+0x34>)
 80008f2:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <global_stdio_init.part.0+0x38>)
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	4620      	mov	r0, r4
 80008f8:	2200      	movs	r2, #0
 80008fa:	2104      	movs	r1, #4
 80008fc:	f7ff ff94 	bl	8000828 <std>
 8000900:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000904:	2201      	movs	r2, #1
 8000906:	2109      	movs	r1, #9
 8000908:	f7ff ff8e 	bl	8000828 <std>
 800090c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000910:	2202      	movs	r2, #2
 8000912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000916:	2112      	movs	r1, #18
 8000918:	f7ff bf86 	b.w	8000828 <std>
 800091c:	2000022c 	.word	0x2000022c
 8000920:	200000f4 	.word	0x200000f4
 8000924:	08000895 	.word	0x08000895

08000928 <__sfp_lock_acquire>:
 8000928:	4801      	ldr	r0, [pc, #4]	; (8000930 <__sfp_lock_acquire+0x8>)
 800092a:	f000 b9fe 	b.w	8000d2a <__retarget_lock_acquire_recursive>
 800092e:	bf00      	nop
 8000930:	20000235 	.word	0x20000235

08000934 <__sfp_lock_release>:
 8000934:	4801      	ldr	r0, [pc, #4]	; (800093c <__sfp_lock_release+0x8>)
 8000936:	f000 b9f9 	b.w	8000d2c <__retarget_lock_release_recursive>
 800093a:	bf00      	nop
 800093c:	20000235 	.word	0x20000235

08000940 <__sinit>:
 8000940:	b510      	push	{r4, lr}
 8000942:	4604      	mov	r4, r0
 8000944:	f7ff fff0 	bl	8000928 <__sfp_lock_acquire>
 8000948:	6a23      	ldr	r3, [r4, #32]
 800094a:	b11b      	cbz	r3, 8000954 <__sinit+0x14>
 800094c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000950:	f7ff bff0 	b.w	8000934 <__sfp_lock_release>
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <__sinit+0x28>)
 8000956:	6223      	str	r3, [r4, #32]
 8000958:	4b04      	ldr	r3, [pc, #16]	; (800096c <__sinit+0x2c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d1f5      	bne.n	800094c <__sinit+0xc>
 8000960:	f7ff ffc4 	bl	80008ec <global_stdio_init.part.0>
 8000964:	e7f2      	b.n	800094c <__sinit+0xc>
 8000966:	bf00      	nop
 8000968:	080008ad 	.word	0x080008ad
 800096c:	2000022c 	.word	0x2000022c

08000970 <_fwalk_sglue>:
 8000970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000974:	4607      	mov	r7, r0
 8000976:	4688      	mov	r8, r1
 8000978:	4614      	mov	r4, r2
 800097a:	2600      	movs	r6, #0
 800097c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000980:	f1b9 0901 	subs.w	r9, r9, #1
 8000984:	d505      	bpl.n	8000992 <_fwalk_sglue+0x22>
 8000986:	6824      	ldr	r4, [r4, #0]
 8000988:	2c00      	cmp	r4, #0
 800098a:	d1f7      	bne.n	800097c <_fwalk_sglue+0xc>
 800098c:	4630      	mov	r0, r6
 800098e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000992:	89ab      	ldrh	r3, [r5, #12]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d907      	bls.n	80009a8 <_fwalk_sglue+0x38>
 8000998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800099c:	3301      	adds	r3, #1
 800099e:	d003      	beq.n	80009a8 <_fwalk_sglue+0x38>
 80009a0:	4629      	mov	r1, r5
 80009a2:	4638      	mov	r0, r7
 80009a4:	47c0      	blx	r8
 80009a6:	4306      	orrs	r6, r0
 80009a8:	3568      	adds	r5, #104	; 0x68
 80009aa:	e7e9      	b.n	8000980 <_fwalk_sglue+0x10>

080009ac <iprintf>:
 80009ac:	b40f      	push	{r0, r1, r2, r3}
 80009ae:	b507      	push	{r0, r1, r2, lr}
 80009b0:	4906      	ldr	r1, [pc, #24]	; (80009cc <iprintf+0x20>)
 80009b2:	ab04      	add	r3, sp, #16
 80009b4:	6808      	ldr	r0, [r1, #0]
 80009b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80009ba:	6881      	ldr	r1, [r0, #8]
 80009bc:	9301      	str	r3, [sp, #4]
 80009be:	f000 fad9 	bl	8000f74 <_vfiprintf_r>
 80009c2:	b003      	add	sp, #12
 80009c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr
 80009cc:	200000bc 	.word	0x200000bc

080009d0 <_puts_r>:
 80009d0:	6a03      	ldr	r3, [r0, #32]
 80009d2:	b570      	push	{r4, r5, r6, lr}
 80009d4:	6884      	ldr	r4, [r0, #8]
 80009d6:	4605      	mov	r5, r0
 80009d8:	460e      	mov	r6, r1
 80009da:	b90b      	cbnz	r3, 80009e0 <_puts_r+0x10>
 80009dc:	f7ff ffb0 	bl	8000940 <__sinit>
 80009e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009e2:	07db      	lsls	r3, r3, #31
 80009e4:	d405      	bmi.n	80009f2 <_puts_r+0x22>
 80009e6:	89a3      	ldrh	r3, [r4, #12]
 80009e8:	0598      	lsls	r0, r3, #22
 80009ea:	d402      	bmi.n	80009f2 <_puts_r+0x22>
 80009ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009ee:	f000 f99c 	bl	8000d2a <__retarget_lock_acquire_recursive>
 80009f2:	89a3      	ldrh	r3, [r4, #12]
 80009f4:	0719      	lsls	r1, r3, #28
 80009f6:	d513      	bpl.n	8000a20 <_puts_r+0x50>
 80009f8:	6923      	ldr	r3, [r4, #16]
 80009fa:	b18b      	cbz	r3, 8000a20 <_puts_r+0x50>
 80009fc:	3e01      	subs	r6, #1
 80009fe:	68a3      	ldr	r3, [r4, #8]
 8000a00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a04:	3b01      	subs	r3, #1
 8000a06:	60a3      	str	r3, [r4, #8]
 8000a08:	b9e9      	cbnz	r1, 8000a46 <_puts_r+0x76>
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da2e      	bge.n	8000a6c <_puts_r+0x9c>
 8000a0e:	4622      	mov	r2, r4
 8000a10:	210a      	movs	r1, #10
 8000a12:	4628      	mov	r0, r5
 8000a14:	f000 f87b 	bl	8000b0e <__swbuf_r>
 8000a18:	3001      	adds	r0, #1
 8000a1a:	d007      	beq.n	8000a2c <_puts_r+0x5c>
 8000a1c:	250a      	movs	r5, #10
 8000a1e:	e007      	b.n	8000a30 <_puts_r+0x60>
 8000a20:	4621      	mov	r1, r4
 8000a22:	4628      	mov	r0, r5
 8000a24:	f000 f8b0 	bl	8000b88 <__swsetup_r>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d0e7      	beq.n	80009fc <_puts_r+0x2c>
 8000a2c:	f04f 35ff 	mov.w	r5, #4294967295
 8000a30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a32:	07da      	lsls	r2, r3, #31
 8000a34:	d405      	bmi.n	8000a42 <_puts_r+0x72>
 8000a36:	89a3      	ldrh	r3, [r4, #12]
 8000a38:	059b      	lsls	r3, r3, #22
 8000a3a:	d402      	bmi.n	8000a42 <_puts_r+0x72>
 8000a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a3e:	f000 f975 	bl	8000d2c <__retarget_lock_release_recursive>
 8000a42:	4628      	mov	r0, r5
 8000a44:	bd70      	pop	{r4, r5, r6, pc}
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	da04      	bge.n	8000a54 <_puts_r+0x84>
 8000a4a:	69a2      	ldr	r2, [r4, #24]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dc06      	bgt.n	8000a5e <_puts_r+0x8e>
 8000a50:	290a      	cmp	r1, #10
 8000a52:	d004      	beq.n	8000a5e <_puts_r+0x8e>
 8000a54:	6823      	ldr	r3, [r4, #0]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	6022      	str	r2, [r4, #0]
 8000a5a:	7019      	strb	r1, [r3, #0]
 8000a5c:	e7cf      	b.n	80009fe <_puts_r+0x2e>
 8000a5e:	4622      	mov	r2, r4
 8000a60:	4628      	mov	r0, r5
 8000a62:	f000 f854 	bl	8000b0e <__swbuf_r>
 8000a66:	3001      	adds	r0, #1
 8000a68:	d1c9      	bne.n	80009fe <_puts_r+0x2e>
 8000a6a:	e7df      	b.n	8000a2c <_puts_r+0x5c>
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	250a      	movs	r5, #10
 8000a70:	1c5a      	adds	r2, r3, #1
 8000a72:	6022      	str	r2, [r4, #0]
 8000a74:	701d      	strb	r5, [r3, #0]
 8000a76:	e7db      	b.n	8000a30 <_puts_r+0x60>

08000a78 <puts>:
 8000a78:	4b02      	ldr	r3, [pc, #8]	; (8000a84 <puts+0xc>)
 8000a7a:	4601      	mov	r1, r0
 8000a7c:	6818      	ldr	r0, [r3, #0]
 8000a7e:	f7ff bfa7 	b.w	80009d0 <_puts_r>
 8000a82:	bf00      	nop
 8000a84:	200000bc 	.word	0x200000bc

08000a88 <__sread>:
 8000a88:	b510      	push	{r4, lr}
 8000a8a:	460c      	mov	r4, r1
 8000a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a90:	f000 f8fc 	bl	8000c8c <_read_r>
 8000a94:	2800      	cmp	r0, #0
 8000a96:	bfab      	itete	ge
 8000a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8000a9c:	181b      	addge	r3, r3, r0
 8000a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000aa2:	bfac      	ite	ge
 8000aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8000aa6:	81a3      	strhlt	r3, [r4, #12]
 8000aa8:	bd10      	pop	{r4, pc}

08000aaa <__swrite>:
 8000aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000aae:	461f      	mov	r7, r3
 8000ab0:	898b      	ldrh	r3, [r1, #12]
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	4605      	mov	r5, r0
 8000ab6:	460c      	mov	r4, r1
 8000ab8:	4616      	mov	r6, r2
 8000aba:	d505      	bpl.n	8000ac8 <__swrite+0x1e>
 8000abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f000 f8d0 	bl	8000c68 <_lseek_r>
 8000ac8:	89a3      	ldrh	r3, [r4, #12]
 8000aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ad2:	81a3      	strh	r3, [r4, #12]
 8000ad4:	4632      	mov	r2, r6
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4628      	mov	r0, r5
 8000ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ade:	f000 b8e7 	b.w	8000cb0 <_write_r>

08000ae2 <__sseek>:
 8000ae2:	b510      	push	{r4, lr}
 8000ae4:	460c      	mov	r4, r1
 8000ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aea:	f000 f8bd 	bl	8000c68 <_lseek_r>
 8000aee:	1c43      	adds	r3, r0, #1
 8000af0:	89a3      	ldrh	r3, [r4, #12]
 8000af2:	bf15      	itete	ne
 8000af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000afe:	81a3      	strheq	r3, [r4, #12]
 8000b00:	bf18      	it	ne
 8000b02:	81a3      	strhne	r3, [r4, #12]
 8000b04:	bd10      	pop	{r4, pc}

08000b06 <__sclose>:
 8000b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b0a:	f000 b89d 	b.w	8000c48 <_close_r>

08000b0e <__swbuf_r>:
 8000b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b10:	460e      	mov	r6, r1
 8000b12:	4614      	mov	r4, r2
 8000b14:	4605      	mov	r5, r0
 8000b16:	b118      	cbz	r0, 8000b20 <__swbuf_r+0x12>
 8000b18:	6a03      	ldr	r3, [r0, #32]
 8000b1a:	b90b      	cbnz	r3, 8000b20 <__swbuf_r+0x12>
 8000b1c:	f7ff ff10 	bl	8000940 <__sinit>
 8000b20:	69a3      	ldr	r3, [r4, #24]
 8000b22:	60a3      	str	r3, [r4, #8]
 8000b24:	89a3      	ldrh	r3, [r4, #12]
 8000b26:	071a      	lsls	r2, r3, #28
 8000b28:	d525      	bpl.n	8000b76 <__swbuf_r+0x68>
 8000b2a:	6923      	ldr	r3, [r4, #16]
 8000b2c:	b31b      	cbz	r3, 8000b76 <__swbuf_r+0x68>
 8000b2e:	6823      	ldr	r3, [r4, #0]
 8000b30:	6922      	ldr	r2, [r4, #16]
 8000b32:	1a98      	subs	r0, r3, r2
 8000b34:	6963      	ldr	r3, [r4, #20]
 8000b36:	b2f6      	uxtb	r6, r6
 8000b38:	4283      	cmp	r3, r0
 8000b3a:	4637      	mov	r7, r6
 8000b3c:	dc04      	bgt.n	8000b48 <__swbuf_r+0x3a>
 8000b3e:	4621      	mov	r1, r4
 8000b40:	4628      	mov	r0, r5
 8000b42:	f000 fd47 	bl	80015d4 <_fflush_r>
 8000b46:	b9e0      	cbnz	r0, 8000b82 <__swbuf_r+0x74>
 8000b48:	68a3      	ldr	r3, [r4, #8]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	60a3      	str	r3, [r4, #8]
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	6022      	str	r2, [r4, #0]
 8000b54:	701e      	strb	r6, [r3, #0]
 8000b56:	6962      	ldr	r2, [r4, #20]
 8000b58:	1c43      	adds	r3, r0, #1
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d004      	beq.n	8000b68 <__swbuf_r+0x5a>
 8000b5e:	89a3      	ldrh	r3, [r4, #12]
 8000b60:	07db      	lsls	r3, r3, #31
 8000b62:	d506      	bpl.n	8000b72 <__swbuf_r+0x64>
 8000b64:	2e0a      	cmp	r6, #10
 8000b66:	d104      	bne.n	8000b72 <__swbuf_r+0x64>
 8000b68:	4621      	mov	r1, r4
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f000 fd32 	bl	80015d4 <_fflush_r>
 8000b70:	b938      	cbnz	r0, 8000b82 <__swbuf_r+0x74>
 8000b72:	4638      	mov	r0, r7
 8000b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b76:	4621      	mov	r1, r4
 8000b78:	4628      	mov	r0, r5
 8000b7a:	f000 f805 	bl	8000b88 <__swsetup_r>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d0d5      	beq.n	8000b2e <__swbuf_r+0x20>
 8000b82:	f04f 37ff 	mov.w	r7, #4294967295
 8000b86:	e7f4      	b.n	8000b72 <__swbuf_r+0x64>

08000b88 <__swsetup_r>:
 8000b88:	b538      	push	{r3, r4, r5, lr}
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <__swsetup_r+0xac>)
 8000b8c:	4605      	mov	r5, r0
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	460c      	mov	r4, r1
 8000b92:	b118      	cbz	r0, 8000b9c <__swsetup_r+0x14>
 8000b94:	6a03      	ldr	r3, [r0, #32]
 8000b96:	b90b      	cbnz	r3, 8000b9c <__swsetup_r+0x14>
 8000b98:	f7ff fed2 	bl	8000940 <__sinit>
 8000b9c:	89a3      	ldrh	r3, [r4, #12]
 8000b9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ba2:	0718      	lsls	r0, r3, #28
 8000ba4:	d422      	bmi.n	8000bec <__swsetup_r+0x64>
 8000ba6:	06d9      	lsls	r1, r3, #27
 8000ba8:	d407      	bmi.n	8000bba <__swsetup_r+0x32>
 8000baa:	2309      	movs	r3, #9
 8000bac:	602b      	str	r3, [r5, #0]
 8000bae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000bb2:	81a3      	strh	r3, [r4, #12]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	e034      	b.n	8000c24 <__swsetup_r+0x9c>
 8000bba:	0758      	lsls	r0, r3, #29
 8000bbc:	d512      	bpl.n	8000be4 <__swsetup_r+0x5c>
 8000bbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bc0:	b141      	cbz	r1, 8000bd4 <__swsetup_r+0x4c>
 8000bc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d002      	beq.n	8000bd0 <__swsetup_r+0x48>
 8000bca:	4628      	mov	r0, r5
 8000bcc:	f000 f8b0 	bl	8000d30 <_free_r>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	6363      	str	r3, [r4, #52]	; 0x34
 8000bd4:	89a3      	ldrh	r3, [r4, #12]
 8000bd6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000bda:	81a3      	strh	r3, [r4, #12]
 8000bdc:	2300      	movs	r3, #0
 8000bde:	6063      	str	r3, [r4, #4]
 8000be0:	6923      	ldr	r3, [r4, #16]
 8000be2:	6023      	str	r3, [r4, #0]
 8000be4:	89a3      	ldrh	r3, [r4, #12]
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	81a3      	strh	r3, [r4, #12]
 8000bec:	6923      	ldr	r3, [r4, #16]
 8000bee:	b94b      	cbnz	r3, 8000c04 <__swsetup_r+0x7c>
 8000bf0:	89a3      	ldrh	r3, [r4, #12]
 8000bf2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bfa:	d003      	beq.n	8000c04 <__swsetup_r+0x7c>
 8000bfc:	4621      	mov	r1, r4
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f000 fd36 	bl	8001670 <__smakebuf_r>
 8000c04:	89a0      	ldrh	r0, [r4, #12]
 8000c06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c0a:	f010 0301 	ands.w	r3, r0, #1
 8000c0e:	d00a      	beq.n	8000c26 <__swsetup_r+0x9e>
 8000c10:	2300      	movs	r3, #0
 8000c12:	60a3      	str	r3, [r4, #8]
 8000c14:	6963      	ldr	r3, [r4, #20]
 8000c16:	425b      	negs	r3, r3
 8000c18:	61a3      	str	r3, [r4, #24]
 8000c1a:	6923      	ldr	r3, [r4, #16]
 8000c1c:	b943      	cbnz	r3, 8000c30 <__swsetup_r+0xa8>
 8000c1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c22:	d1c4      	bne.n	8000bae <__swsetup_r+0x26>
 8000c24:	bd38      	pop	{r3, r4, r5, pc}
 8000c26:	0781      	lsls	r1, r0, #30
 8000c28:	bf58      	it	pl
 8000c2a:	6963      	ldrpl	r3, [r4, #20]
 8000c2c:	60a3      	str	r3, [r4, #8]
 8000c2e:	e7f4      	b.n	8000c1a <__swsetup_r+0x92>
 8000c30:	2000      	movs	r0, #0
 8000c32:	e7f7      	b.n	8000c24 <__swsetup_r+0x9c>
 8000c34:	200000bc 	.word	0x200000bc

08000c38 <memset>:
 8000c38:	4402      	add	r2, r0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d100      	bne.n	8000c42 <memset+0xa>
 8000c40:	4770      	bx	lr
 8000c42:	f803 1b01 	strb.w	r1, [r3], #1
 8000c46:	e7f9      	b.n	8000c3c <memset+0x4>

08000c48 <_close_r>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	4d06      	ldr	r5, [pc, #24]	; (8000c64 <_close_r+0x1c>)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	4608      	mov	r0, r1
 8000c52:	602b      	str	r3, [r5, #0]
 8000c54:	f7ff fd41 	bl	80006da <_close>
 8000c58:	1c43      	adds	r3, r0, #1
 8000c5a:	d102      	bne.n	8000c62 <_close_r+0x1a>
 8000c5c:	682b      	ldr	r3, [r5, #0]
 8000c5e:	b103      	cbz	r3, 8000c62 <_close_r+0x1a>
 8000c60:	6023      	str	r3, [r4, #0]
 8000c62:	bd38      	pop	{r3, r4, r5, pc}
 8000c64:	20000230 	.word	0x20000230

08000c68 <_lseek_r>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4d07      	ldr	r5, [pc, #28]	; (8000c88 <_lseek_r+0x20>)
 8000c6c:	4604      	mov	r4, r0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	4611      	mov	r1, r2
 8000c72:	2200      	movs	r2, #0
 8000c74:	602a      	str	r2, [r5, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	f7ff fd56 	bl	8000728 <_lseek>
 8000c7c:	1c43      	adds	r3, r0, #1
 8000c7e:	d102      	bne.n	8000c86 <_lseek_r+0x1e>
 8000c80:	682b      	ldr	r3, [r5, #0]
 8000c82:	b103      	cbz	r3, 8000c86 <_lseek_r+0x1e>
 8000c84:	6023      	str	r3, [r4, #0]
 8000c86:	bd38      	pop	{r3, r4, r5, pc}
 8000c88:	20000230 	.word	0x20000230

08000c8c <_read_r>:
 8000c8c:	b538      	push	{r3, r4, r5, lr}
 8000c8e:	4d07      	ldr	r5, [pc, #28]	; (8000cac <_read_r+0x20>)
 8000c90:	4604      	mov	r4, r0
 8000c92:	4608      	mov	r0, r1
 8000c94:	4611      	mov	r1, r2
 8000c96:	2200      	movs	r2, #0
 8000c98:	602a      	str	r2, [r5, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f7ff fce4 	bl	8000668 <_read>
 8000ca0:	1c43      	adds	r3, r0, #1
 8000ca2:	d102      	bne.n	8000caa <_read_r+0x1e>
 8000ca4:	682b      	ldr	r3, [r5, #0]
 8000ca6:	b103      	cbz	r3, 8000caa <_read_r+0x1e>
 8000ca8:	6023      	str	r3, [r4, #0]
 8000caa:	bd38      	pop	{r3, r4, r5, pc}
 8000cac:	20000230 	.word	0x20000230

08000cb0 <_write_r>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	4d07      	ldr	r5, [pc, #28]	; (8000cd0 <_write_r+0x20>)
 8000cb4:	4604      	mov	r4, r0
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	4611      	mov	r1, r2
 8000cba:	2200      	movs	r2, #0
 8000cbc:	602a      	str	r2, [r5, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	f7ff fcef 	bl	80006a2 <_write>
 8000cc4:	1c43      	adds	r3, r0, #1
 8000cc6:	d102      	bne.n	8000cce <_write_r+0x1e>
 8000cc8:	682b      	ldr	r3, [r5, #0]
 8000cca:	b103      	cbz	r3, 8000cce <_write_r+0x1e>
 8000ccc:	6023      	str	r3, [r4, #0]
 8000cce:	bd38      	pop	{r3, r4, r5, pc}
 8000cd0:	20000230 	.word	0x20000230

08000cd4 <__errno>:
 8000cd4:	4b01      	ldr	r3, [pc, #4]	; (8000cdc <__errno+0x8>)
 8000cd6:	6818      	ldr	r0, [r3, #0]
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	200000bc 	.word	0x200000bc

08000ce0 <__libc_init_array>:
 8000ce0:	b570      	push	{r4, r5, r6, lr}
 8000ce2:	4d0d      	ldr	r5, [pc, #52]	; (8000d18 <__libc_init_array+0x38>)
 8000ce4:	4c0d      	ldr	r4, [pc, #52]	; (8000d1c <__libc_init_array+0x3c>)
 8000ce6:	1b64      	subs	r4, r4, r5
 8000ce8:	10a4      	asrs	r4, r4, #2
 8000cea:	2600      	movs	r6, #0
 8000cec:	42a6      	cmp	r6, r4
 8000cee:	d109      	bne.n	8000d04 <__libc_init_array+0x24>
 8000cf0:	4d0b      	ldr	r5, [pc, #44]	; (8000d20 <__libc_init_array+0x40>)
 8000cf2:	4c0c      	ldr	r4, [pc, #48]	; (8000d24 <__libc_init_array+0x44>)
 8000cf4:	f000 fd2a 	bl	800174c <_init>
 8000cf8:	1b64      	subs	r4, r4, r5
 8000cfa:	10a4      	asrs	r4, r4, #2
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	42a6      	cmp	r6, r4
 8000d00:	d105      	bne.n	8000d0e <__libc_init_array+0x2e>
 8000d02:	bd70      	pop	{r4, r5, r6, pc}
 8000d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d08:	4798      	blx	r3
 8000d0a:	3601      	adds	r6, #1
 8000d0c:	e7ee      	b.n	8000cec <__libc_init_array+0xc>
 8000d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d12:	4798      	blx	r3
 8000d14:	3601      	adds	r6, #1
 8000d16:	e7f2      	b.n	8000cfe <__libc_init_array+0x1e>
 8000d18:	080017e0 	.word	0x080017e0
 8000d1c:	080017e0 	.word	0x080017e0
 8000d20:	080017e0 	.word	0x080017e0
 8000d24:	080017e4 	.word	0x080017e4

08000d28 <__retarget_lock_init_recursive>:
 8000d28:	4770      	bx	lr

08000d2a <__retarget_lock_acquire_recursive>:
 8000d2a:	4770      	bx	lr

08000d2c <__retarget_lock_release_recursive>:
 8000d2c:	4770      	bx	lr
	...

08000d30 <_free_r>:
 8000d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d044      	beq.n	8000dc0 <_free_r+0x90>
 8000d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d3a:	9001      	str	r0, [sp, #4]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8000d42:	bfb8      	it	lt
 8000d44:	18e4      	addlt	r4, r4, r3
 8000d46:	f000 f8df 	bl	8000f08 <__malloc_lock>
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <_free_r+0x94>)
 8000d4c:	9801      	ldr	r0, [sp, #4]
 8000d4e:	6813      	ldr	r3, [r2, #0]
 8000d50:	b933      	cbnz	r3, 8000d60 <_free_r+0x30>
 8000d52:	6063      	str	r3, [r4, #4]
 8000d54:	6014      	str	r4, [r2, #0]
 8000d56:	b003      	add	sp, #12
 8000d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000d5c:	f000 b8da 	b.w	8000f14 <__malloc_unlock>
 8000d60:	42a3      	cmp	r3, r4
 8000d62:	d908      	bls.n	8000d76 <_free_r+0x46>
 8000d64:	6825      	ldr	r5, [r4, #0]
 8000d66:	1961      	adds	r1, r4, r5
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	bf01      	itttt	eq
 8000d6c:	6819      	ldreq	r1, [r3, #0]
 8000d6e:	685b      	ldreq	r3, [r3, #4]
 8000d70:	1949      	addeq	r1, r1, r5
 8000d72:	6021      	streq	r1, [r4, #0]
 8000d74:	e7ed      	b.n	8000d52 <_free_r+0x22>
 8000d76:	461a      	mov	r2, r3
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	b10b      	cbz	r3, 8000d80 <_free_r+0x50>
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d9fa      	bls.n	8000d76 <_free_r+0x46>
 8000d80:	6811      	ldr	r1, [r2, #0]
 8000d82:	1855      	adds	r5, r2, r1
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	d10b      	bne.n	8000da0 <_free_r+0x70>
 8000d88:	6824      	ldr	r4, [r4, #0]
 8000d8a:	4421      	add	r1, r4
 8000d8c:	1854      	adds	r4, r2, r1
 8000d8e:	42a3      	cmp	r3, r4
 8000d90:	6011      	str	r1, [r2, #0]
 8000d92:	d1e0      	bne.n	8000d56 <_free_r+0x26>
 8000d94:	681c      	ldr	r4, [r3, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	6053      	str	r3, [r2, #4]
 8000d9a:	440c      	add	r4, r1
 8000d9c:	6014      	str	r4, [r2, #0]
 8000d9e:	e7da      	b.n	8000d56 <_free_r+0x26>
 8000da0:	d902      	bls.n	8000da8 <_free_r+0x78>
 8000da2:	230c      	movs	r3, #12
 8000da4:	6003      	str	r3, [r0, #0]
 8000da6:	e7d6      	b.n	8000d56 <_free_r+0x26>
 8000da8:	6825      	ldr	r5, [r4, #0]
 8000daa:	1961      	adds	r1, r4, r5
 8000dac:	428b      	cmp	r3, r1
 8000dae:	bf04      	itt	eq
 8000db0:	6819      	ldreq	r1, [r3, #0]
 8000db2:	685b      	ldreq	r3, [r3, #4]
 8000db4:	6063      	str	r3, [r4, #4]
 8000db6:	bf04      	itt	eq
 8000db8:	1949      	addeq	r1, r1, r5
 8000dba:	6021      	streq	r1, [r4, #0]
 8000dbc:	6054      	str	r4, [r2, #4]
 8000dbe:	e7ca      	b.n	8000d56 <_free_r+0x26>
 8000dc0:	b003      	add	sp, #12
 8000dc2:	bd30      	pop	{r4, r5, pc}
 8000dc4:	20000238 	.word	0x20000238

08000dc8 <sbrk_aligned>:
 8000dc8:	b570      	push	{r4, r5, r6, lr}
 8000dca:	4e0e      	ldr	r6, [pc, #56]	; (8000e04 <sbrk_aligned+0x3c>)
 8000dcc:	460c      	mov	r4, r1
 8000dce:	6831      	ldr	r1, [r6, #0]
 8000dd0:	4605      	mov	r5, r0
 8000dd2:	b911      	cbnz	r1, 8000dda <sbrk_aligned+0x12>
 8000dd4:	f000 fcaa 	bl	800172c <_sbrk_r>
 8000dd8:	6030      	str	r0, [r6, #0]
 8000dda:	4621      	mov	r1, r4
 8000ddc:	4628      	mov	r0, r5
 8000dde:	f000 fca5 	bl	800172c <_sbrk_r>
 8000de2:	1c43      	adds	r3, r0, #1
 8000de4:	d00a      	beq.n	8000dfc <sbrk_aligned+0x34>
 8000de6:	1cc4      	adds	r4, r0, #3
 8000de8:	f024 0403 	bic.w	r4, r4, #3
 8000dec:	42a0      	cmp	r0, r4
 8000dee:	d007      	beq.n	8000e00 <sbrk_aligned+0x38>
 8000df0:	1a21      	subs	r1, r4, r0
 8000df2:	4628      	mov	r0, r5
 8000df4:	f000 fc9a 	bl	800172c <_sbrk_r>
 8000df8:	3001      	adds	r0, #1
 8000dfa:	d101      	bne.n	8000e00 <sbrk_aligned+0x38>
 8000dfc:	f04f 34ff 	mov.w	r4, #4294967295
 8000e00:	4620      	mov	r0, r4
 8000e02:	bd70      	pop	{r4, r5, r6, pc}
 8000e04:	2000023c 	.word	0x2000023c

08000e08 <_malloc_r>:
 8000e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e0c:	1ccd      	adds	r5, r1, #3
 8000e0e:	f025 0503 	bic.w	r5, r5, #3
 8000e12:	3508      	adds	r5, #8
 8000e14:	2d0c      	cmp	r5, #12
 8000e16:	bf38      	it	cc
 8000e18:	250c      	movcc	r5, #12
 8000e1a:	2d00      	cmp	r5, #0
 8000e1c:	4607      	mov	r7, r0
 8000e1e:	db01      	blt.n	8000e24 <_malloc_r+0x1c>
 8000e20:	42a9      	cmp	r1, r5
 8000e22:	d905      	bls.n	8000e30 <_malloc_r+0x28>
 8000e24:	230c      	movs	r3, #12
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	2600      	movs	r6, #0
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000f04 <_malloc_r+0xfc>
 8000e34:	f000 f868 	bl	8000f08 <__malloc_lock>
 8000e38:	f8d8 3000 	ldr.w	r3, [r8]
 8000e3c:	461c      	mov	r4, r3
 8000e3e:	bb5c      	cbnz	r4, 8000e98 <_malloc_r+0x90>
 8000e40:	4629      	mov	r1, r5
 8000e42:	4638      	mov	r0, r7
 8000e44:	f7ff ffc0 	bl	8000dc8 <sbrk_aligned>
 8000e48:	1c43      	adds	r3, r0, #1
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	d155      	bne.n	8000efa <_malloc_r+0xf2>
 8000e4e:	f8d8 4000 	ldr.w	r4, [r8]
 8000e52:	4626      	mov	r6, r4
 8000e54:	2e00      	cmp	r6, #0
 8000e56:	d145      	bne.n	8000ee4 <_malloc_r+0xdc>
 8000e58:	2c00      	cmp	r4, #0
 8000e5a:	d048      	beq.n	8000eee <_malloc_r+0xe6>
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	4631      	mov	r1, r6
 8000e60:	4638      	mov	r0, r7
 8000e62:	eb04 0903 	add.w	r9, r4, r3
 8000e66:	f000 fc61 	bl	800172c <_sbrk_r>
 8000e6a:	4581      	cmp	r9, r0
 8000e6c:	d13f      	bne.n	8000eee <_malloc_r+0xe6>
 8000e6e:	6821      	ldr	r1, [r4, #0]
 8000e70:	1a6d      	subs	r5, r5, r1
 8000e72:	4629      	mov	r1, r5
 8000e74:	4638      	mov	r0, r7
 8000e76:	f7ff ffa7 	bl	8000dc8 <sbrk_aligned>
 8000e7a:	3001      	adds	r0, #1
 8000e7c:	d037      	beq.n	8000eee <_malloc_r+0xe6>
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	442b      	add	r3, r5
 8000e82:	6023      	str	r3, [r4, #0]
 8000e84:	f8d8 3000 	ldr.w	r3, [r8]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d038      	beq.n	8000efe <_malloc_r+0xf6>
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	42a2      	cmp	r2, r4
 8000e90:	d12b      	bne.n	8000eea <_malloc_r+0xe2>
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	e00f      	b.n	8000eb8 <_malloc_r+0xb0>
 8000e98:	6822      	ldr	r2, [r4, #0]
 8000e9a:	1b52      	subs	r2, r2, r5
 8000e9c:	d41f      	bmi.n	8000ede <_malloc_r+0xd6>
 8000e9e:	2a0b      	cmp	r2, #11
 8000ea0:	d917      	bls.n	8000ed2 <_malloc_r+0xca>
 8000ea2:	1961      	adds	r1, r4, r5
 8000ea4:	42a3      	cmp	r3, r4
 8000ea6:	6025      	str	r5, [r4, #0]
 8000ea8:	bf18      	it	ne
 8000eaa:	6059      	strne	r1, [r3, #4]
 8000eac:	6863      	ldr	r3, [r4, #4]
 8000eae:	bf08      	it	eq
 8000eb0:	f8c8 1000 	streq.w	r1, [r8]
 8000eb4:	5162      	str	r2, [r4, r5]
 8000eb6:	604b      	str	r3, [r1, #4]
 8000eb8:	4638      	mov	r0, r7
 8000eba:	f104 060b 	add.w	r6, r4, #11
 8000ebe:	f000 f829 	bl	8000f14 <__malloc_unlock>
 8000ec2:	f026 0607 	bic.w	r6, r6, #7
 8000ec6:	1d23      	adds	r3, r4, #4
 8000ec8:	1af2      	subs	r2, r6, r3
 8000eca:	d0ae      	beq.n	8000e2a <_malloc_r+0x22>
 8000ecc:	1b9b      	subs	r3, r3, r6
 8000ece:	50a3      	str	r3, [r4, r2]
 8000ed0:	e7ab      	b.n	8000e2a <_malloc_r+0x22>
 8000ed2:	42a3      	cmp	r3, r4
 8000ed4:	6862      	ldr	r2, [r4, #4]
 8000ed6:	d1dd      	bne.n	8000e94 <_malloc_r+0x8c>
 8000ed8:	f8c8 2000 	str.w	r2, [r8]
 8000edc:	e7ec      	b.n	8000eb8 <_malloc_r+0xb0>
 8000ede:	4623      	mov	r3, r4
 8000ee0:	6864      	ldr	r4, [r4, #4]
 8000ee2:	e7ac      	b.n	8000e3e <_malloc_r+0x36>
 8000ee4:	4634      	mov	r4, r6
 8000ee6:	6876      	ldr	r6, [r6, #4]
 8000ee8:	e7b4      	b.n	8000e54 <_malloc_r+0x4c>
 8000eea:	4613      	mov	r3, r2
 8000eec:	e7cc      	b.n	8000e88 <_malloc_r+0x80>
 8000eee:	230c      	movs	r3, #12
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	4638      	mov	r0, r7
 8000ef4:	f000 f80e 	bl	8000f14 <__malloc_unlock>
 8000ef8:	e797      	b.n	8000e2a <_malloc_r+0x22>
 8000efa:	6025      	str	r5, [r4, #0]
 8000efc:	e7dc      	b.n	8000eb8 <_malloc_r+0xb0>
 8000efe:	605b      	str	r3, [r3, #4]
 8000f00:	deff      	udf	#255	; 0xff
 8000f02:	bf00      	nop
 8000f04:	20000238 	.word	0x20000238

08000f08 <__malloc_lock>:
 8000f08:	4801      	ldr	r0, [pc, #4]	; (8000f10 <__malloc_lock+0x8>)
 8000f0a:	f7ff bf0e 	b.w	8000d2a <__retarget_lock_acquire_recursive>
 8000f0e:	bf00      	nop
 8000f10:	20000234 	.word	0x20000234

08000f14 <__malloc_unlock>:
 8000f14:	4801      	ldr	r0, [pc, #4]	; (8000f1c <__malloc_unlock+0x8>)
 8000f16:	f7ff bf09 	b.w	8000d2c <__retarget_lock_release_recursive>
 8000f1a:	bf00      	nop
 8000f1c:	20000234 	.word	0x20000234

08000f20 <__sfputc_r>:
 8000f20:	6893      	ldr	r3, [r2, #8]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	b410      	push	{r4}
 8000f28:	6093      	str	r3, [r2, #8]
 8000f2a:	da08      	bge.n	8000f3e <__sfputc_r+0x1e>
 8000f2c:	6994      	ldr	r4, [r2, #24]
 8000f2e:	42a3      	cmp	r3, r4
 8000f30:	db01      	blt.n	8000f36 <__sfputc_r+0x16>
 8000f32:	290a      	cmp	r1, #10
 8000f34:	d103      	bne.n	8000f3e <__sfputc_r+0x1e>
 8000f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f3a:	f7ff bde8 	b.w	8000b0e <__swbuf_r>
 8000f3e:	6813      	ldr	r3, [r2, #0]
 8000f40:	1c58      	adds	r0, r3, #1
 8000f42:	6010      	str	r0, [r2, #0]
 8000f44:	7019      	strb	r1, [r3, #0]
 8000f46:	4608      	mov	r0, r1
 8000f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <__sfputs_r>:
 8000f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f50:	4606      	mov	r6, r0
 8000f52:	460f      	mov	r7, r1
 8000f54:	4614      	mov	r4, r2
 8000f56:	18d5      	adds	r5, r2, r3
 8000f58:	42ac      	cmp	r4, r5
 8000f5a:	d101      	bne.n	8000f60 <__sfputs_r+0x12>
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	e007      	b.n	8000f70 <__sfputs_r+0x22>
 8000f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f64:	463a      	mov	r2, r7
 8000f66:	4630      	mov	r0, r6
 8000f68:	f7ff ffda 	bl	8000f20 <__sfputc_r>
 8000f6c:	1c43      	adds	r3, r0, #1
 8000f6e:	d1f3      	bne.n	8000f58 <__sfputs_r+0xa>
 8000f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f74 <_vfiprintf_r>:
 8000f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f78:	460d      	mov	r5, r1
 8000f7a:	b09d      	sub	sp, #116	; 0x74
 8000f7c:	4614      	mov	r4, r2
 8000f7e:	4698      	mov	r8, r3
 8000f80:	4606      	mov	r6, r0
 8000f82:	b118      	cbz	r0, 8000f8c <_vfiprintf_r+0x18>
 8000f84:	6a03      	ldr	r3, [r0, #32]
 8000f86:	b90b      	cbnz	r3, 8000f8c <_vfiprintf_r+0x18>
 8000f88:	f7ff fcda 	bl	8000940 <__sinit>
 8000f8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000f8e:	07d9      	lsls	r1, r3, #31
 8000f90:	d405      	bmi.n	8000f9e <_vfiprintf_r+0x2a>
 8000f92:	89ab      	ldrh	r3, [r5, #12]
 8000f94:	059a      	lsls	r2, r3, #22
 8000f96:	d402      	bmi.n	8000f9e <_vfiprintf_r+0x2a>
 8000f98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000f9a:	f7ff fec6 	bl	8000d2a <__retarget_lock_acquire_recursive>
 8000f9e:	89ab      	ldrh	r3, [r5, #12]
 8000fa0:	071b      	lsls	r3, r3, #28
 8000fa2:	d501      	bpl.n	8000fa8 <_vfiprintf_r+0x34>
 8000fa4:	692b      	ldr	r3, [r5, #16]
 8000fa6:	b99b      	cbnz	r3, 8000fd0 <_vfiprintf_r+0x5c>
 8000fa8:	4629      	mov	r1, r5
 8000faa:	4630      	mov	r0, r6
 8000fac:	f7ff fdec 	bl	8000b88 <__swsetup_r>
 8000fb0:	b170      	cbz	r0, 8000fd0 <_vfiprintf_r+0x5c>
 8000fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000fb4:	07dc      	lsls	r4, r3, #31
 8000fb6:	d504      	bpl.n	8000fc2 <_vfiprintf_r+0x4e>
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	b01d      	add	sp, #116	; 0x74
 8000fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fc2:	89ab      	ldrh	r3, [r5, #12]
 8000fc4:	0598      	lsls	r0, r3, #22
 8000fc6:	d4f7      	bmi.n	8000fb8 <_vfiprintf_r+0x44>
 8000fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000fca:	f7ff feaf 	bl	8000d2c <__retarget_lock_release_recursive>
 8000fce:	e7f3      	b.n	8000fb8 <_vfiprintf_r+0x44>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8000fd4:	2320      	movs	r3, #32
 8000fd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000fda:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fde:	2330      	movs	r3, #48	; 0x30
 8000fe0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001194 <_vfiprintf_r+0x220>
 8000fe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000fe8:	f04f 0901 	mov.w	r9, #1
 8000fec:	4623      	mov	r3, r4
 8000fee:	469a      	mov	sl, r3
 8000ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ff4:	b10a      	cbz	r2, 8000ffa <_vfiprintf_r+0x86>
 8000ff6:	2a25      	cmp	r2, #37	; 0x25
 8000ff8:	d1f9      	bne.n	8000fee <_vfiprintf_r+0x7a>
 8000ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8000ffe:	d00b      	beq.n	8001018 <_vfiprintf_r+0xa4>
 8001000:	465b      	mov	r3, fp
 8001002:	4622      	mov	r2, r4
 8001004:	4629      	mov	r1, r5
 8001006:	4630      	mov	r0, r6
 8001008:	f7ff ffa1 	bl	8000f4e <__sfputs_r>
 800100c:	3001      	adds	r0, #1
 800100e:	f000 80a9 	beq.w	8001164 <_vfiprintf_r+0x1f0>
 8001012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001014:	445a      	add	r2, fp
 8001016:	9209      	str	r2, [sp, #36]	; 0x24
 8001018:	f89a 3000 	ldrb.w	r3, [sl]
 800101c:	2b00      	cmp	r3, #0
 800101e:	f000 80a1 	beq.w	8001164 <_vfiprintf_r+0x1f0>
 8001022:	2300      	movs	r3, #0
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800102c:	f10a 0a01 	add.w	sl, sl, #1
 8001030:	9304      	str	r3, [sp, #16]
 8001032:	9307      	str	r3, [sp, #28]
 8001034:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001038:	931a      	str	r3, [sp, #104]	; 0x68
 800103a:	4654      	mov	r4, sl
 800103c:	2205      	movs	r2, #5
 800103e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001042:	4854      	ldr	r0, [pc, #336]	; (8001194 <_vfiprintf_r+0x220>)
 8001044:	f7ff f8d4 	bl	80001f0 <memchr>
 8001048:	9a04      	ldr	r2, [sp, #16]
 800104a:	b9d8      	cbnz	r0, 8001084 <_vfiprintf_r+0x110>
 800104c:	06d1      	lsls	r1, r2, #27
 800104e:	bf44      	itt	mi
 8001050:	2320      	movmi	r3, #32
 8001052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001056:	0713      	lsls	r3, r2, #28
 8001058:	bf44      	itt	mi
 800105a:	232b      	movmi	r3, #43	; 0x2b
 800105c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001060:	f89a 3000 	ldrb.w	r3, [sl]
 8001064:	2b2a      	cmp	r3, #42	; 0x2a
 8001066:	d015      	beq.n	8001094 <_vfiprintf_r+0x120>
 8001068:	9a07      	ldr	r2, [sp, #28]
 800106a:	4654      	mov	r4, sl
 800106c:	2000      	movs	r0, #0
 800106e:	f04f 0c0a 	mov.w	ip, #10
 8001072:	4621      	mov	r1, r4
 8001074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001078:	3b30      	subs	r3, #48	; 0x30
 800107a:	2b09      	cmp	r3, #9
 800107c:	d94d      	bls.n	800111a <_vfiprintf_r+0x1a6>
 800107e:	b1b0      	cbz	r0, 80010ae <_vfiprintf_r+0x13a>
 8001080:	9207      	str	r2, [sp, #28]
 8001082:	e014      	b.n	80010ae <_vfiprintf_r+0x13a>
 8001084:	eba0 0308 	sub.w	r3, r0, r8
 8001088:	fa09 f303 	lsl.w	r3, r9, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	9304      	str	r3, [sp, #16]
 8001090:	46a2      	mov	sl, r4
 8001092:	e7d2      	b.n	800103a <_vfiprintf_r+0xc6>
 8001094:	9b03      	ldr	r3, [sp, #12]
 8001096:	1d19      	adds	r1, r3, #4
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	9103      	str	r1, [sp, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	bfbb      	ittet	lt
 80010a0:	425b      	neglt	r3, r3
 80010a2:	f042 0202 	orrlt.w	r2, r2, #2
 80010a6:	9307      	strge	r3, [sp, #28]
 80010a8:	9307      	strlt	r3, [sp, #28]
 80010aa:	bfb8      	it	lt
 80010ac:	9204      	strlt	r2, [sp, #16]
 80010ae:	7823      	ldrb	r3, [r4, #0]
 80010b0:	2b2e      	cmp	r3, #46	; 0x2e
 80010b2:	d10c      	bne.n	80010ce <_vfiprintf_r+0x15a>
 80010b4:	7863      	ldrb	r3, [r4, #1]
 80010b6:	2b2a      	cmp	r3, #42	; 0x2a
 80010b8:	d134      	bne.n	8001124 <_vfiprintf_r+0x1b0>
 80010ba:	9b03      	ldr	r3, [sp, #12]
 80010bc:	1d1a      	adds	r2, r3, #4
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	9203      	str	r2, [sp, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bfb8      	it	lt
 80010c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80010ca:	3402      	adds	r4, #2
 80010cc:	9305      	str	r3, [sp, #20]
 80010ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80011a4 <_vfiprintf_r+0x230>
 80010d2:	7821      	ldrb	r1, [r4, #0]
 80010d4:	2203      	movs	r2, #3
 80010d6:	4650      	mov	r0, sl
 80010d8:	f7ff f88a 	bl	80001f0 <memchr>
 80010dc:	b138      	cbz	r0, 80010ee <_vfiprintf_r+0x17a>
 80010de:	9b04      	ldr	r3, [sp, #16]
 80010e0:	eba0 000a 	sub.w	r0, r0, sl
 80010e4:	2240      	movs	r2, #64	; 0x40
 80010e6:	4082      	lsls	r2, r0
 80010e8:	4313      	orrs	r3, r2
 80010ea:	3401      	adds	r4, #1
 80010ec:	9304      	str	r3, [sp, #16]
 80010ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010f2:	4829      	ldr	r0, [pc, #164]	; (8001198 <_vfiprintf_r+0x224>)
 80010f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010f8:	2206      	movs	r2, #6
 80010fa:	f7ff f879 	bl	80001f0 <memchr>
 80010fe:	2800      	cmp	r0, #0
 8001100:	d03f      	beq.n	8001182 <_vfiprintf_r+0x20e>
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <_vfiprintf_r+0x228>)
 8001104:	bb1b      	cbnz	r3, 800114e <_vfiprintf_r+0x1da>
 8001106:	9b03      	ldr	r3, [sp, #12]
 8001108:	3307      	adds	r3, #7
 800110a:	f023 0307 	bic.w	r3, r3, #7
 800110e:	3308      	adds	r3, #8
 8001110:	9303      	str	r3, [sp, #12]
 8001112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001114:	443b      	add	r3, r7
 8001116:	9309      	str	r3, [sp, #36]	; 0x24
 8001118:	e768      	b.n	8000fec <_vfiprintf_r+0x78>
 800111a:	fb0c 3202 	mla	r2, ip, r2, r3
 800111e:	460c      	mov	r4, r1
 8001120:	2001      	movs	r0, #1
 8001122:	e7a6      	b.n	8001072 <_vfiprintf_r+0xfe>
 8001124:	2300      	movs	r3, #0
 8001126:	3401      	adds	r4, #1
 8001128:	9305      	str	r3, [sp, #20]
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 0c0a 	mov.w	ip, #10
 8001130:	4620      	mov	r0, r4
 8001132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001136:	3a30      	subs	r2, #48	; 0x30
 8001138:	2a09      	cmp	r2, #9
 800113a:	d903      	bls.n	8001144 <_vfiprintf_r+0x1d0>
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0c6      	beq.n	80010ce <_vfiprintf_r+0x15a>
 8001140:	9105      	str	r1, [sp, #20]
 8001142:	e7c4      	b.n	80010ce <_vfiprintf_r+0x15a>
 8001144:	fb0c 2101 	mla	r1, ip, r1, r2
 8001148:	4604      	mov	r4, r0
 800114a:	2301      	movs	r3, #1
 800114c:	e7f0      	b.n	8001130 <_vfiprintf_r+0x1bc>
 800114e:	ab03      	add	r3, sp, #12
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	462a      	mov	r2, r5
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <_vfiprintf_r+0x22c>)
 8001156:	a904      	add	r1, sp, #16
 8001158:	4630      	mov	r0, r6
 800115a:	f3af 8000 	nop.w
 800115e:	4607      	mov	r7, r0
 8001160:	1c78      	adds	r0, r7, #1
 8001162:	d1d6      	bne.n	8001112 <_vfiprintf_r+0x19e>
 8001164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001166:	07d9      	lsls	r1, r3, #31
 8001168:	d405      	bmi.n	8001176 <_vfiprintf_r+0x202>
 800116a:	89ab      	ldrh	r3, [r5, #12]
 800116c:	059a      	lsls	r2, r3, #22
 800116e:	d402      	bmi.n	8001176 <_vfiprintf_r+0x202>
 8001170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001172:	f7ff fddb 	bl	8000d2c <__retarget_lock_release_recursive>
 8001176:	89ab      	ldrh	r3, [r5, #12]
 8001178:	065b      	lsls	r3, r3, #25
 800117a:	f53f af1d 	bmi.w	8000fb8 <_vfiprintf_r+0x44>
 800117e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001180:	e71c      	b.n	8000fbc <_vfiprintf_r+0x48>
 8001182:	ab03      	add	r3, sp, #12
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	462a      	mov	r2, r5
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <_vfiprintf_r+0x22c>)
 800118a:	a904      	add	r1, sp, #16
 800118c:	4630      	mov	r0, r6
 800118e:	f000 f879 	bl	8001284 <_printf_i>
 8001192:	e7e4      	b.n	800115e <_vfiprintf_r+0x1ea>
 8001194:	080017ac 	.word	0x080017ac
 8001198:	080017b6 	.word	0x080017b6
 800119c:	00000000 	.word	0x00000000
 80011a0:	08000f4f 	.word	0x08000f4f
 80011a4:	080017b2 	.word	0x080017b2

080011a8 <_printf_common>:
 80011a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011ac:	4616      	mov	r6, r2
 80011ae:	4699      	mov	r9, r3
 80011b0:	688a      	ldr	r2, [r1, #8]
 80011b2:	690b      	ldr	r3, [r1, #16]
 80011b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80011b8:	4293      	cmp	r3, r2
 80011ba:	bfb8      	it	lt
 80011bc:	4613      	movlt	r3, r2
 80011be:	6033      	str	r3, [r6, #0]
 80011c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80011c4:	4607      	mov	r7, r0
 80011c6:	460c      	mov	r4, r1
 80011c8:	b10a      	cbz	r2, 80011ce <_printf_common+0x26>
 80011ca:	3301      	adds	r3, #1
 80011cc:	6033      	str	r3, [r6, #0]
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	0699      	lsls	r1, r3, #26
 80011d2:	bf42      	ittt	mi
 80011d4:	6833      	ldrmi	r3, [r6, #0]
 80011d6:	3302      	addmi	r3, #2
 80011d8:	6033      	strmi	r3, [r6, #0]
 80011da:	6825      	ldr	r5, [r4, #0]
 80011dc:	f015 0506 	ands.w	r5, r5, #6
 80011e0:	d106      	bne.n	80011f0 <_printf_common+0x48>
 80011e2:	f104 0a19 	add.w	sl, r4, #25
 80011e6:	68e3      	ldr	r3, [r4, #12]
 80011e8:	6832      	ldr	r2, [r6, #0]
 80011ea:	1a9b      	subs	r3, r3, r2
 80011ec:	42ab      	cmp	r3, r5
 80011ee:	dc26      	bgt.n	800123e <_printf_common+0x96>
 80011f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80011f4:	1e13      	subs	r3, r2, #0
 80011f6:	6822      	ldr	r2, [r4, #0]
 80011f8:	bf18      	it	ne
 80011fa:	2301      	movne	r3, #1
 80011fc:	0692      	lsls	r2, r2, #26
 80011fe:	d42b      	bmi.n	8001258 <_printf_common+0xb0>
 8001200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001204:	4649      	mov	r1, r9
 8001206:	4638      	mov	r0, r7
 8001208:	47c0      	blx	r8
 800120a:	3001      	adds	r0, #1
 800120c:	d01e      	beq.n	800124c <_printf_common+0xa4>
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	6922      	ldr	r2, [r4, #16]
 8001212:	f003 0306 	and.w	r3, r3, #6
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf02      	ittt	eq
 800121a:	68e5      	ldreq	r5, [r4, #12]
 800121c:	6833      	ldreq	r3, [r6, #0]
 800121e:	1aed      	subeq	r5, r5, r3
 8001220:	68a3      	ldr	r3, [r4, #8]
 8001222:	bf0c      	ite	eq
 8001224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001228:	2500      	movne	r5, #0
 800122a:	4293      	cmp	r3, r2
 800122c:	bfc4      	itt	gt
 800122e:	1a9b      	subgt	r3, r3, r2
 8001230:	18ed      	addgt	r5, r5, r3
 8001232:	2600      	movs	r6, #0
 8001234:	341a      	adds	r4, #26
 8001236:	42b5      	cmp	r5, r6
 8001238:	d11a      	bne.n	8001270 <_printf_common+0xc8>
 800123a:	2000      	movs	r0, #0
 800123c:	e008      	b.n	8001250 <_printf_common+0xa8>
 800123e:	2301      	movs	r3, #1
 8001240:	4652      	mov	r2, sl
 8001242:	4649      	mov	r1, r9
 8001244:	4638      	mov	r0, r7
 8001246:	47c0      	blx	r8
 8001248:	3001      	adds	r0, #1
 800124a:	d103      	bne.n	8001254 <_printf_common+0xac>
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001254:	3501      	adds	r5, #1
 8001256:	e7c6      	b.n	80011e6 <_printf_common+0x3e>
 8001258:	18e1      	adds	r1, r4, r3
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	2030      	movs	r0, #48	; 0x30
 800125e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001262:	4422      	add	r2, r4
 8001264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800126c:	3302      	adds	r3, #2
 800126e:	e7c7      	b.n	8001200 <_printf_common+0x58>
 8001270:	2301      	movs	r3, #1
 8001272:	4622      	mov	r2, r4
 8001274:	4649      	mov	r1, r9
 8001276:	4638      	mov	r0, r7
 8001278:	47c0      	blx	r8
 800127a:	3001      	adds	r0, #1
 800127c:	d0e6      	beq.n	800124c <_printf_common+0xa4>
 800127e:	3601      	adds	r6, #1
 8001280:	e7d9      	b.n	8001236 <_printf_common+0x8e>
	...

08001284 <_printf_i>:
 8001284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001288:	7e0f      	ldrb	r7, [r1, #24]
 800128a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800128c:	2f78      	cmp	r7, #120	; 0x78
 800128e:	4691      	mov	r9, r2
 8001290:	4680      	mov	r8, r0
 8001292:	460c      	mov	r4, r1
 8001294:	469a      	mov	sl, r3
 8001296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800129a:	d807      	bhi.n	80012ac <_printf_i+0x28>
 800129c:	2f62      	cmp	r7, #98	; 0x62
 800129e:	d80a      	bhi.n	80012b6 <_printf_i+0x32>
 80012a0:	2f00      	cmp	r7, #0
 80012a2:	f000 80d4 	beq.w	800144e <_printf_i+0x1ca>
 80012a6:	2f58      	cmp	r7, #88	; 0x58
 80012a8:	f000 80c0 	beq.w	800142c <_printf_i+0x1a8>
 80012ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80012b4:	e03a      	b.n	800132c <_printf_i+0xa8>
 80012b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80012ba:	2b15      	cmp	r3, #21
 80012bc:	d8f6      	bhi.n	80012ac <_printf_i+0x28>
 80012be:	a101      	add	r1, pc, #4	; (adr r1, 80012c4 <_printf_i+0x40>)
 80012c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80012c4:	0800131d 	.word	0x0800131d
 80012c8:	08001331 	.word	0x08001331
 80012cc:	080012ad 	.word	0x080012ad
 80012d0:	080012ad 	.word	0x080012ad
 80012d4:	080012ad 	.word	0x080012ad
 80012d8:	080012ad 	.word	0x080012ad
 80012dc:	08001331 	.word	0x08001331
 80012e0:	080012ad 	.word	0x080012ad
 80012e4:	080012ad 	.word	0x080012ad
 80012e8:	080012ad 	.word	0x080012ad
 80012ec:	080012ad 	.word	0x080012ad
 80012f0:	08001435 	.word	0x08001435
 80012f4:	0800135d 	.word	0x0800135d
 80012f8:	080013ef 	.word	0x080013ef
 80012fc:	080012ad 	.word	0x080012ad
 8001300:	080012ad 	.word	0x080012ad
 8001304:	08001457 	.word	0x08001457
 8001308:	080012ad 	.word	0x080012ad
 800130c:	0800135d 	.word	0x0800135d
 8001310:	080012ad 	.word	0x080012ad
 8001314:	080012ad 	.word	0x080012ad
 8001318:	080013f7 	.word	0x080013f7
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	1d1a      	adds	r2, r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	602a      	str	r2, [r5, #0]
 8001324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800132c:	2301      	movs	r3, #1
 800132e:	e09f      	b.n	8001470 <_printf_i+0x1ec>
 8001330:	6820      	ldr	r0, [r4, #0]
 8001332:	682b      	ldr	r3, [r5, #0]
 8001334:	0607      	lsls	r7, r0, #24
 8001336:	f103 0104 	add.w	r1, r3, #4
 800133a:	6029      	str	r1, [r5, #0]
 800133c:	d501      	bpl.n	8001342 <_printf_i+0xbe>
 800133e:	681e      	ldr	r6, [r3, #0]
 8001340:	e003      	b.n	800134a <_printf_i+0xc6>
 8001342:	0646      	lsls	r6, r0, #25
 8001344:	d5fb      	bpl.n	800133e <_printf_i+0xba>
 8001346:	f9b3 6000 	ldrsh.w	r6, [r3]
 800134a:	2e00      	cmp	r6, #0
 800134c:	da03      	bge.n	8001356 <_printf_i+0xd2>
 800134e:	232d      	movs	r3, #45	; 0x2d
 8001350:	4276      	negs	r6, r6
 8001352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001356:	485a      	ldr	r0, [pc, #360]	; (80014c0 <_printf_i+0x23c>)
 8001358:	230a      	movs	r3, #10
 800135a:	e012      	b.n	8001382 <_printf_i+0xfe>
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	6820      	ldr	r0, [r4, #0]
 8001360:	1d19      	adds	r1, r3, #4
 8001362:	6029      	str	r1, [r5, #0]
 8001364:	0605      	lsls	r5, r0, #24
 8001366:	d501      	bpl.n	800136c <_printf_i+0xe8>
 8001368:	681e      	ldr	r6, [r3, #0]
 800136a:	e002      	b.n	8001372 <_printf_i+0xee>
 800136c:	0641      	lsls	r1, r0, #25
 800136e:	d5fb      	bpl.n	8001368 <_printf_i+0xe4>
 8001370:	881e      	ldrh	r6, [r3, #0]
 8001372:	4853      	ldr	r0, [pc, #332]	; (80014c0 <_printf_i+0x23c>)
 8001374:	2f6f      	cmp	r7, #111	; 0x6f
 8001376:	bf0c      	ite	eq
 8001378:	2308      	moveq	r3, #8
 800137a:	230a      	movne	r3, #10
 800137c:	2100      	movs	r1, #0
 800137e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001382:	6865      	ldr	r5, [r4, #4]
 8001384:	60a5      	str	r5, [r4, #8]
 8001386:	2d00      	cmp	r5, #0
 8001388:	bfa2      	ittt	ge
 800138a:	6821      	ldrge	r1, [r4, #0]
 800138c:	f021 0104 	bicge.w	r1, r1, #4
 8001390:	6021      	strge	r1, [r4, #0]
 8001392:	b90e      	cbnz	r6, 8001398 <_printf_i+0x114>
 8001394:	2d00      	cmp	r5, #0
 8001396:	d04b      	beq.n	8001430 <_printf_i+0x1ac>
 8001398:	4615      	mov	r5, r2
 800139a:	fbb6 f1f3 	udiv	r1, r6, r3
 800139e:	fb03 6711 	mls	r7, r3, r1, r6
 80013a2:	5dc7      	ldrb	r7, [r0, r7]
 80013a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80013a8:	4637      	mov	r7, r6
 80013aa:	42bb      	cmp	r3, r7
 80013ac:	460e      	mov	r6, r1
 80013ae:	d9f4      	bls.n	800139a <_printf_i+0x116>
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d10b      	bne.n	80013cc <_printf_i+0x148>
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	07de      	lsls	r6, r3, #31
 80013b8:	d508      	bpl.n	80013cc <_printf_i+0x148>
 80013ba:	6923      	ldr	r3, [r4, #16]
 80013bc:	6861      	ldr	r1, [r4, #4]
 80013be:	4299      	cmp	r1, r3
 80013c0:	bfde      	ittt	le
 80013c2:	2330      	movle	r3, #48	; 0x30
 80013c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80013c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80013cc:	1b52      	subs	r2, r2, r5
 80013ce:	6122      	str	r2, [r4, #16]
 80013d0:	f8cd a000 	str.w	sl, [sp]
 80013d4:	464b      	mov	r3, r9
 80013d6:	aa03      	add	r2, sp, #12
 80013d8:	4621      	mov	r1, r4
 80013da:	4640      	mov	r0, r8
 80013dc:	f7ff fee4 	bl	80011a8 <_printf_common>
 80013e0:	3001      	adds	r0, #1
 80013e2:	d14a      	bne.n	800147a <_printf_i+0x1f6>
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	b004      	add	sp, #16
 80013ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	f043 0320 	orr.w	r3, r3, #32
 80013f4:	6023      	str	r3, [r4, #0]
 80013f6:	4833      	ldr	r0, [pc, #204]	; (80014c4 <_printf_i+0x240>)
 80013f8:	2778      	movs	r7, #120	; 0x78
 80013fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	6829      	ldr	r1, [r5, #0]
 8001402:	061f      	lsls	r7, r3, #24
 8001404:	f851 6b04 	ldr.w	r6, [r1], #4
 8001408:	d402      	bmi.n	8001410 <_printf_i+0x18c>
 800140a:	065f      	lsls	r7, r3, #25
 800140c:	bf48      	it	mi
 800140e:	b2b6      	uxthmi	r6, r6
 8001410:	07df      	lsls	r7, r3, #31
 8001412:	bf48      	it	mi
 8001414:	f043 0320 	orrmi.w	r3, r3, #32
 8001418:	6029      	str	r1, [r5, #0]
 800141a:	bf48      	it	mi
 800141c:	6023      	strmi	r3, [r4, #0]
 800141e:	b91e      	cbnz	r6, 8001428 <_printf_i+0x1a4>
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	f023 0320 	bic.w	r3, r3, #32
 8001426:	6023      	str	r3, [r4, #0]
 8001428:	2310      	movs	r3, #16
 800142a:	e7a7      	b.n	800137c <_printf_i+0xf8>
 800142c:	4824      	ldr	r0, [pc, #144]	; (80014c0 <_printf_i+0x23c>)
 800142e:	e7e4      	b.n	80013fa <_printf_i+0x176>
 8001430:	4615      	mov	r5, r2
 8001432:	e7bd      	b.n	80013b0 <_printf_i+0x12c>
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	6826      	ldr	r6, [r4, #0]
 8001438:	6961      	ldr	r1, [r4, #20]
 800143a:	1d18      	adds	r0, r3, #4
 800143c:	6028      	str	r0, [r5, #0]
 800143e:	0635      	lsls	r5, r6, #24
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	d501      	bpl.n	8001448 <_printf_i+0x1c4>
 8001444:	6019      	str	r1, [r3, #0]
 8001446:	e002      	b.n	800144e <_printf_i+0x1ca>
 8001448:	0670      	lsls	r0, r6, #25
 800144a:	d5fb      	bpl.n	8001444 <_printf_i+0x1c0>
 800144c:	8019      	strh	r1, [r3, #0]
 800144e:	2300      	movs	r3, #0
 8001450:	6123      	str	r3, [r4, #16]
 8001452:	4615      	mov	r5, r2
 8001454:	e7bc      	b.n	80013d0 <_printf_i+0x14c>
 8001456:	682b      	ldr	r3, [r5, #0]
 8001458:	1d1a      	adds	r2, r3, #4
 800145a:	602a      	str	r2, [r5, #0]
 800145c:	681d      	ldr	r5, [r3, #0]
 800145e:	6862      	ldr	r2, [r4, #4]
 8001460:	2100      	movs	r1, #0
 8001462:	4628      	mov	r0, r5
 8001464:	f7fe fec4 	bl	80001f0 <memchr>
 8001468:	b108      	cbz	r0, 800146e <_printf_i+0x1ea>
 800146a:	1b40      	subs	r0, r0, r5
 800146c:	6060      	str	r0, [r4, #4]
 800146e:	6863      	ldr	r3, [r4, #4]
 8001470:	6123      	str	r3, [r4, #16]
 8001472:	2300      	movs	r3, #0
 8001474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001478:	e7aa      	b.n	80013d0 <_printf_i+0x14c>
 800147a:	6923      	ldr	r3, [r4, #16]
 800147c:	462a      	mov	r2, r5
 800147e:	4649      	mov	r1, r9
 8001480:	4640      	mov	r0, r8
 8001482:	47d0      	blx	sl
 8001484:	3001      	adds	r0, #1
 8001486:	d0ad      	beq.n	80013e4 <_printf_i+0x160>
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	079b      	lsls	r3, r3, #30
 800148c:	d413      	bmi.n	80014b6 <_printf_i+0x232>
 800148e:	68e0      	ldr	r0, [r4, #12]
 8001490:	9b03      	ldr	r3, [sp, #12]
 8001492:	4298      	cmp	r0, r3
 8001494:	bfb8      	it	lt
 8001496:	4618      	movlt	r0, r3
 8001498:	e7a6      	b.n	80013e8 <_printf_i+0x164>
 800149a:	2301      	movs	r3, #1
 800149c:	4632      	mov	r2, r6
 800149e:	4649      	mov	r1, r9
 80014a0:	4640      	mov	r0, r8
 80014a2:	47d0      	blx	sl
 80014a4:	3001      	adds	r0, #1
 80014a6:	d09d      	beq.n	80013e4 <_printf_i+0x160>
 80014a8:	3501      	adds	r5, #1
 80014aa:	68e3      	ldr	r3, [r4, #12]
 80014ac:	9903      	ldr	r1, [sp, #12]
 80014ae:	1a5b      	subs	r3, r3, r1
 80014b0:	42ab      	cmp	r3, r5
 80014b2:	dcf2      	bgt.n	800149a <_printf_i+0x216>
 80014b4:	e7eb      	b.n	800148e <_printf_i+0x20a>
 80014b6:	2500      	movs	r5, #0
 80014b8:	f104 0619 	add.w	r6, r4, #25
 80014bc:	e7f5      	b.n	80014aa <_printf_i+0x226>
 80014be:	bf00      	nop
 80014c0:	080017bd 	.word	0x080017bd
 80014c4:	080017ce 	.word	0x080017ce

080014c8 <__sflush_r>:
 80014c8:	898a      	ldrh	r2, [r1, #12]
 80014ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014ce:	4605      	mov	r5, r0
 80014d0:	0710      	lsls	r0, r2, #28
 80014d2:	460c      	mov	r4, r1
 80014d4:	d458      	bmi.n	8001588 <__sflush_r+0xc0>
 80014d6:	684b      	ldr	r3, [r1, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	dc05      	bgt.n	80014e8 <__sflush_r+0x20>
 80014dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80014de:	2b00      	cmp	r3, #0
 80014e0:	dc02      	bgt.n	80014e8 <__sflush_r+0x20>
 80014e2:	2000      	movs	r0, #0
 80014e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014ea:	2e00      	cmp	r6, #0
 80014ec:	d0f9      	beq.n	80014e2 <__sflush_r+0x1a>
 80014ee:	2300      	movs	r3, #0
 80014f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80014f4:	682f      	ldr	r7, [r5, #0]
 80014f6:	6a21      	ldr	r1, [r4, #32]
 80014f8:	602b      	str	r3, [r5, #0]
 80014fa:	d032      	beq.n	8001562 <__sflush_r+0x9a>
 80014fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014fe:	89a3      	ldrh	r3, [r4, #12]
 8001500:	075a      	lsls	r2, r3, #29
 8001502:	d505      	bpl.n	8001510 <__sflush_r+0x48>
 8001504:	6863      	ldr	r3, [r4, #4]
 8001506:	1ac0      	subs	r0, r0, r3
 8001508:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800150a:	b10b      	cbz	r3, 8001510 <__sflush_r+0x48>
 800150c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800150e:	1ac0      	subs	r0, r0, r3
 8001510:	2300      	movs	r3, #0
 8001512:	4602      	mov	r2, r0
 8001514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001516:	6a21      	ldr	r1, [r4, #32]
 8001518:	4628      	mov	r0, r5
 800151a:	47b0      	blx	r6
 800151c:	1c43      	adds	r3, r0, #1
 800151e:	89a3      	ldrh	r3, [r4, #12]
 8001520:	d106      	bne.n	8001530 <__sflush_r+0x68>
 8001522:	6829      	ldr	r1, [r5, #0]
 8001524:	291d      	cmp	r1, #29
 8001526:	d82b      	bhi.n	8001580 <__sflush_r+0xb8>
 8001528:	4a29      	ldr	r2, [pc, #164]	; (80015d0 <__sflush_r+0x108>)
 800152a:	410a      	asrs	r2, r1
 800152c:	07d6      	lsls	r6, r2, #31
 800152e:	d427      	bmi.n	8001580 <__sflush_r+0xb8>
 8001530:	2200      	movs	r2, #0
 8001532:	6062      	str	r2, [r4, #4]
 8001534:	04d9      	lsls	r1, r3, #19
 8001536:	6922      	ldr	r2, [r4, #16]
 8001538:	6022      	str	r2, [r4, #0]
 800153a:	d504      	bpl.n	8001546 <__sflush_r+0x7e>
 800153c:	1c42      	adds	r2, r0, #1
 800153e:	d101      	bne.n	8001544 <__sflush_r+0x7c>
 8001540:	682b      	ldr	r3, [r5, #0]
 8001542:	b903      	cbnz	r3, 8001546 <__sflush_r+0x7e>
 8001544:	6560      	str	r0, [r4, #84]	; 0x54
 8001546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001548:	602f      	str	r7, [r5, #0]
 800154a:	2900      	cmp	r1, #0
 800154c:	d0c9      	beq.n	80014e2 <__sflush_r+0x1a>
 800154e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001552:	4299      	cmp	r1, r3
 8001554:	d002      	beq.n	800155c <__sflush_r+0x94>
 8001556:	4628      	mov	r0, r5
 8001558:	f7ff fbea 	bl	8000d30 <_free_r>
 800155c:	2000      	movs	r0, #0
 800155e:	6360      	str	r0, [r4, #52]	; 0x34
 8001560:	e7c0      	b.n	80014e4 <__sflush_r+0x1c>
 8001562:	2301      	movs	r3, #1
 8001564:	4628      	mov	r0, r5
 8001566:	47b0      	blx	r6
 8001568:	1c41      	adds	r1, r0, #1
 800156a:	d1c8      	bne.n	80014fe <__sflush_r+0x36>
 800156c:	682b      	ldr	r3, [r5, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0c5      	beq.n	80014fe <__sflush_r+0x36>
 8001572:	2b1d      	cmp	r3, #29
 8001574:	d001      	beq.n	800157a <__sflush_r+0xb2>
 8001576:	2b16      	cmp	r3, #22
 8001578:	d101      	bne.n	800157e <__sflush_r+0xb6>
 800157a:	602f      	str	r7, [r5, #0]
 800157c:	e7b1      	b.n	80014e2 <__sflush_r+0x1a>
 800157e:	89a3      	ldrh	r3, [r4, #12]
 8001580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001584:	81a3      	strh	r3, [r4, #12]
 8001586:	e7ad      	b.n	80014e4 <__sflush_r+0x1c>
 8001588:	690f      	ldr	r7, [r1, #16]
 800158a:	2f00      	cmp	r7, #0
 800158c:	d0a9      	beq.n	80014e2 <__sflush_r+0x1a>
 800158e:	0793      	lsls	r3, r2, #30
 8001590:	680e      	ldr	r6, [r1, #0]
 8001592:	bf08      	it	eq
 8001594:	694b      	ldreq	r3, [r1, #20]
 8001596:	600f      	str	r7, [r1, #0]
 8001598:	bf18      	it	ne
 800159a:	2300      	movne	r3, #0
 800159c:	eba6 0807 	sub.w	r8, r6, r7
 80015a0:	608b      	str	r3, [r1, #8]
 80015a2:	f1b8 0f00 	cmp.w	r8, #0
 80015a6:	dd9c      	ble.n	80014e2 <__sflush_r+0x1a>
 80015a8:	6a21      	ldr	r1, [r4, #32]
 80015aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80015ac:	4643      	mov	r3, r8
 80015ae:	463a      	mov	r2, r7
 80015b0:	4628      	mov	r0, r5
 80015b2:	47b0      	blx	r6
 80015b4:	2800      	cmp	r0, #0
 80015b6:	dc06      	bgt.n	80015c6 <__sflush_r+0xfe>
 80015b8:	89a3      	ldrh	r3, [r4, #12]
 80015ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015be:	81a3      	strh	r3, [r4, #12]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	e78e      	b.n	80014e4 <__sflush_r+0x1c>
 80015c6:	4407      	add	r7, r0
 80015c8:	eba8 0800 	sub.w	r8, r8, r0
 80015cc:	e7e9      	b.n	80015a2 <__sflush_r+0xda>
 80015ce:	bf00      	nop
 80015d0:	dfbffffe 	.word	0xdfbffffe

080015d4 <_fflush_r>:
 80015d4:	b538      	push	{r3, r4, r5, lr}
 80015d6:	690b      	ldr	r3, [r1, #16]
 80015d8:	4605      	mov	r5, r0
 80015da:	460c      	mov	r4, r1
 80015dc:	b913      	cbnz	r3, 80015e4 <_fflush_r+0x10>
 80015de:	2500      	movs	r5, #0
 80015e0:	4628      	mov	r0, r5
 80015e2:	bd38      	pop	{r3, r4, r5, pc}
 80015e4:	b118      	cbz	r0, 80015ee <_fflush_r+0x1a>
 80015e6:	6a03      	ldr	r3, [r0, #32]
 80015e8:	b90b      	cbnz	r3, 80015ee <_fflush_r+0x1a>
 80015ea:	f7ff f9a9 	bl	8000940 <__sinit>
 80015ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f3      	beq.n	80015de <_fflush_r+0xa>
 80015f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015f8:	07d0      	lsls	r0, r2, #31
 80015fa:	d404      	bmi.n	8001606 <_fflush_r+0x32>
 80015fc:	0599      	lsls	r1, r3, #22
 80015fe:	d402      	bmi.n	8001606 <_fflush_r+0x32>
 8001600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001602:	f7ff fb92 	bl	8000d2a <__retarget_lock_acquire_recursive>
 8001606:	4628      	mov	r0, r5
 8001608:	4621      	mov	r1, r4
 800160a:	f7ff ff5d 	bl	80014c8 <__sflush_r>
 800160e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001610:	07da      	lsls	r2, r3, #31
 8001612:	4605      	mov	r5, r0
 8001614:	d4e4      	bmi.n	80015e0 <_fflush_r+0xc>
 8001616:	89a3      	ldrh	r3, [r4, #12]
 8001618:	059b      	lsls	r3, r3, #22
 800161a:	d4e1      	bmi.n	80015e0 <_fflush_r+0xc>
 800161c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800161e:	f7ff fb85 	bl	8000d2c <__retarget_lock_release_recursive>
 8001622:	e7dd      	b.n	80015e0 <_fflush_r+0xc>

08001624 <__swhatbuf_r>:
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	460c      	mov	r4, r1
 8001628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800162c:	2900      	cmp	r1, #0
 800162e:	b096      	sub	sp, #88	; 0x58
 8001630:	4615      	mov	r5, r2
 8001632:	461e      	mov	r6, r3
 8001634:	da0d      	bge.n	8001652 <__swhatbuf_r+0x2e>
 8001636:	89a3      	ldrh	r3, [r4, #12]
 8001638:	f013 0f80 	tst.w	r3, #128	; 0x80
 800163c:	f04f 0100 	mov.w	r1, #0
 8001640:	bf0c      	ite	eq
 8001642:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001646:	2340      	movne	r3, #64	; 0x40
 8001648:	2000      	movs	r0, #0
 800164a:	6031      	str	r1, [r6, #0]
 800164c:	602b      	str	r3, [r5, #0]
 800164e:	b016      	add	sp, #88	; 0x58
 8001650:	bd70      	pop	{r4, r5, r6, pc}
 8001652:	466a      	mov	r2, sp
 8001654:	f000 f848 	bl	80016e8 <_fstat_r>
 8001658:	2800      	cmp	r0, #0
 800165a:	dbec      	blt.n	8001636 <__swhatbuf_r+0x12>
 800165c:	9901      	ldr	r1, [sp, #4]
 800165e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001662:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001666:	4259      	negs	r1, r3
 8001668:	4159      	adcs	r1, r3
 800166a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800166e:	e7eb      	b.n	8001648 <__swhatbuf_r+0x24>

08001670 <__smakebuf_r>:
 8001670:	898b      	ldrh	r3, [r1, #12]
 8001672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001674:	079d      	lsls	r5, r3, #30
 8001676:	4606      	mov	r6, r0
 8001678:	460c      	mov	r4, r1
 800167a:	d507      	bpl.n	800168c <__smakebuf_r+0x1c>
 800167c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001680:	6023      	str	r3, [r4, #0]
 8001682:	6123      	str	r3, [r4, #16]
 8001684:	2301      	movs	r3, #1
 8001686:	6163      	str	r3, [r4, #20]
 8001688:	b002      	add	sp, #8
 800168a:	bd70      	pop	{r4, r5, r6, pc}
 800168c:	ab01      	add	r3, sp, #4
 800168e:	466a      	mov	r2, sp
 8001690:	f7ff ffc8 	bl	8001624 <__swhatbuf_r>
 8001694:	9900      	ldr	r1, [sp, #0]
 8001696:	4605      	mov	r5, r0
 8001698:	4630      	mov	r0, r6
 800169a:	f7ff fbb5 	bl	8000e08 <_malloc_r>
 800169e:	b948      	cbnz	r0, 80016b4 <__smakebuf_r+0x44>
 80016a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016a4:	059a      	lsls	r2, r3, #22
 80016a6:	d4ef      	bmi.n	8001688 <__smakebuf_r+0x18>
 80016a8:	f023 0303 	bic.w	r3, r3, #3
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	81a3      	strh	r3, [r4, #12]
 80016b2:	e7e3      	b.n	800167c <__smakebuf_r+0xc>
 80016b4:	89a3      	ldrh	r3, [r4, #12]
 80016b6:	6020      	str	r0, [r4, #0]
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	81a3      	strh	r3, [r4, #12]
 80016be:	9b00      	ldr	r3, [sp, #0]
 80016c0:	6163      	str	r3, [r4, #20]
 80016c2:	9b01      	ldr	r3, [sp, #4]
 80016c4:	6120      	str	r0, [r4, #16]
 80016c6:	b15b      	cbz	r3, 80016e0 <__smakebuf_r+0x70>
 80016c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016cc:	4630      	mov	r0, r6
 80016ce:	f000 f81d 	bl	800170c <_isatty_r>
 80016d2:	b128      	cbz	r0, 80016e0 <__smakebuf_r+0x70>
 80016d4:	89a3      	ldrh	r3, [r4, #12]
 80016d6:	f023 0303 	bic.w	r3, r3, #3
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	81a3      	strh	r3, [r4, #12]
 80016e0:	89a3      	ldrh	r3, [r4, #12]
 80016e2:	431d      	orrs	r5, r3
 80016e4:	81a5      	strh	r5, [r4, #12]
 80016e6:	e7cf      	b.n	8001688 <__smakebuf_r+0x18>

080016e8 <_fstat_r>:
 80016e8:	b538      	push	{r3, r4, r5, lr}
 80016ea:	4d07      	ldr	r5, [pc, #28]	; (8001708 <_fstat_r+0x20>)
 80016ec:	2300      	movs	r3, #0
 80016ee:	4604      	mov	r4, r0
 80016f0:	4608      	mov	r0, r1
 80016f2:	4611      	mov	r1, r2
 80016f4:	602b      	str	r3, [r5, #0]
 80016f6:	f7fe fffc 	bl	80006f2 <_fstat>
 80016fa:	1c43      	adds	r3, r0, #1
 80016fc:	d102      	bne.n	8001704 <_fstat_r+0x1c>
 80016fe:	682b      	ldr	r3, [r5, #0]
 8001700:	b103      	cbz	r3, 8001704 <_fstat_r+0x1c>
 8001702:	6023      	str	r3, [r4, #0]
 8001704:	bd38      	pop	{r3, r4, r5, pc}
 8001706:	bf00      	nop
 8001708:	20000230 	.word	0x20000230

0800170c <_isatty_r>:
 800170c:	b538      	push	{r3, r4, r5, lr}
 800170e:	4d06      	ldr	r5, [pc, #24]	; (8001728 <_isatty_r+0x1c>)
 8001710:	2300      	movs	r3, #0
 8001712:	4604      	mov	r4, r0
 8001714:	4608      	mov	r0, r1
 8001716:	602b      	str	r3, [r5, #0]
 8001718:	f7fe fffb 	bl	8000712 <_isatty>
 800171c:	1c43      	adds	r3, r0, #1
 800171e:	d102      	bne.n	8001726 <_isatty_r+0x1a>
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	b103      	cbz	r3, 8001726 <_isatty_r+0x1a>
 8001724:	6023      	str	r3, [r4, #0]
 8001726:	bd38      	pop	{r3, r4, r5, pc}
 8001728:	20000230 	.word	0x20000230

0800172c <_sbrk_r>:
 800172c:	b538      	push	{r3, r4, r5, lr}
 800172e:	4d06      	ldr	r5, [pc, #24]	; (8001748 <_sbrk_r+0x1c>)
 8001730:	2300      	movs	r3, #0
 8001732:	4604      	mov	r4, r0
 8001734:	4608      	mov	r0, r1
 8001736:	602b      	str	r3, [r5, #0]
 8001738:	f7ff f804 	bl	8000744 <_sbrk>
 800173c:	1c43      	adds	r3, r0, #1
 800173e:	d102      	bne.n	8001746 <_sbrk_r+0x1a>
 8001740:	682b      	ldr	r3, [r5, #0]
 8001742:	b103      	cbz	r3, 8001746 <_sbrk_r+0x1a>
 8001744:	6023      	str	r3, [r4, #0]
 8001746:	bd38      	pop	{r3, r4, r5, pc}
 8001748:	20000230 	.word	0x20000230

0800174c <_init>:
 800174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174e:	bf00      	nop
 8001750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001752:	bc08      	pop	{r3}
 8001754:	469e      	mov	lr, r3
 8001756:	4770      	bx	lr

08001758 <_fini>:
 8001758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175a:	bf00      	nop
 800175c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175e:	bc08      	pop	{r3}
 8001760:	469e      	mov	lr, r3
 8001762:	4770      	bx	lr
