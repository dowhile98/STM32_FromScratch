
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000388  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000530  08000538  00010538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000530  08000530  00010538  2**0
                  CONTENTS
  4 .ARM          00000000  08000530  08000530  00010538  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000530  08000538  00010538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000530  08000530  00010530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000534  08000534  00010534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010538  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010538  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010568  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001497  00000000  00000000  000105ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004e9  00000000  00000000  00011a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000100  00000000  00000000  00011f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000ab  00000000  00000000  00012030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018ff1  00000000  00000000  000120db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001bf4  00000000  00000000  0002b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008c435  00000000  00000000  0002ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000294  00000000  00000000  000b90f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000b938c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000518 	.word	0x08000518

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000518 	.word	0x08000518

080001e8 <tickInc>:
 */
#include "delay.h"

volatile uint32_t ticks = 0;

void tickInc(uint32_t i){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
    ticks += i;
 80001f0:	4b05      	ldr	r3, [pc, #20]	; (8000208 <tickInc+0x20>)
 80001f2:	681a      	ldr	r2, [r3, #0]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	; (8000208 <tickInc+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	2000001c 	.word	0x2000001c

0800020c <getTicks>:
    while ((getTicks() - tickStart) <= delay);
    
    return;
}

uint32_t getTicks(){
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
    return (uint32_t)ticks;
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <getTicks+0x14>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	2000001c 	.word	0x2000001c

08000224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	6039      	str	r1, [r7, #0]
 800022e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000234:	2b00      	cmp	r3, #0
 8000236:	db0a      	blt.n	800024e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2da      	uxtb	r2, r3
 800023c:	490c      	ldr	r1, [pc, #48]	; (8000270 <__NVIC_SetPriority+0x4c>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	0112      	lsls	r2, r2, #4
 8000244:	b2d2      	uxtb	r2, r2
 8000246:	440b      	add	r3, r1
 8000248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800024c:	e00a      	b.n	8000264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4908      	ldr	r1, [pc, #32]	; (8000274 <__NVIC_SetPriority+0x50>)
 8000254:	79fb      	ldrb	r3, [r7, #7]
 8000256:	f003 030f 	and.w	r3, r3, #15
 800025a:	3b04      	subs	r3, #4
 800025c:	0112      	lsls	r2, r2, #4
 800025e:	b2d2      	uxtb	r2, r2
 8000260:	440b      	add	r3, r1
 8000262:	761a      	strb	r2, [r3, #24]
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr
 8000270:	e000e100 	.word	0xe000e100
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3b01      	subs	r3, #1
 8000284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000288:	d301      	bcc.n	800028e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800028a:	2301      	movs	r3, #1
 800028c:	e00f      	b.n	80002ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <SysTick_Config+0x40>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3b01      	subs	r3, #1
 8000294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000296:	210f      	movs	r1, #15
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f7ff ffc2 	bl	8000224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SysTick_Config+0x40>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <SysTick_Config+0x40>)
 80002a8:	2207      	movs	r2, #7
 80002aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002ac:	2300      	movs	r3, #0
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3708      	adds	r7, #8
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	e000e010 	.word	0xe000e010

080002bc <main>:
 */
void SPI_MasterReceiveData(SPI_TypeDef *SPIx,uint8_t *pRxBuffer,uint32_t Len);

/*Main ------------------------------------------*/
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
	uint32_t temp;
	uint32_t ledTicks;
	/*habilitar el reloj*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;  //1<<3
 80002c2:	4b58      	ldr	r3, [pc, #352]	; (8000424 <main+0x168>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c6:	4a57      	ldr	r2, [pc, #348]	; (8000424 <main+0x168>)
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002ce:	4b55      	ldr	r3, [pc, #340]	; (8000424 <main+0x168>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a54      	ldr	r2, [pc, #336]	; (8000424 <main+0x168>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
	/**
	 * PD12 -> salida
	 *
	 */
	GPIOD->MODER &=~(GPIO_MODER_MODE12); 	//Clear
 80002da:	4b53      	ldr	r3, [pc, #332]	; (8000428 <main+0x16c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a52      	ldr	r2, [pc, #328]	; (8000428 <main+0x16c>)
 80002e0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002e4:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE12_0;	//Modo salida de proposito general
 80002e6:	4b50      	ldr	r3, [pc, #320]	; (8000428 <main+0x16c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a4f      	ldr	r2, [pc, #316]	; (8000428 <main+0x16c>)
 80002ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002f0:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER &=~ GPIO_OTYPER_OT12;		//PUSH PULL
 80002f2:	4b4d      	ldr	r3, [pc, #308]	; (8000428 <main+0x16c>)
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	4a4c      	ldr	r2, [pc, #304]	; (8000428 <main+0x16c>)
 80002f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002fc:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR &=~ GPIO_OSPEEDER_OSPEEDR12;
 80002fe:	4b4a      	ldr	r3, [pc, #296]	; (8000428 <main+0x16c>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	4a49      	ldr	r2, [pc, #292]	; (8000428 <main+0x16c>)
 8000304:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000308:	6093      	str	r3, [r2, #8]
	/**
	 * PA0 -> entrada
	 */
	GPIOA->MODER &=~(GPIO_MODER_MODE0); //RESET STATE (INPUT FLOATING)
 800030a:	4b48      	ldr	r3, [pc, #288]	; (800042c <main+0x170>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a47      	ldr	r2, [pc, #284]	; (800042c <main+0x170>)
 8000310:	f023 0303 	bic.w	r3, r3, #3
 8000314:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &=~ (GPIO_PUPDR_PUPD0); //no pull up /down
 8000316:	4b45      	ldr	r3, [pc, #276]	; (800042c <main+0x170>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	4a44      	ldr	r2, [pc, #272]	; (800042c <main+0x170>)
 800031c:	f023 0303 	bic.w	r3, r3, #3
 8000320:	60d3      	str	r3, [r2, #12]

	/**
	 * @brief systick
	 * 
	 */
	temp = 16E+6 / 1E+3;
 8000322:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000326:	607b      	str	r3, [r7, #4]
	SysTick_Config(temp);
 8000328:	6878      	ldr	r0, [r7, #4]
 800032a:	f7ff ffa5 	bl	8000278 <SysTick_Config>
	ledTicks = getTicks();
 800032e:	f7ff ff6d 	bl	800020c <getTicks>
 8000332:	6038      	str	r0, [r7, #0]
	 * PA5 -> SPI1_CLK
	 * PA6 -> SPI1_MISO
	 * PA7 -> SPI1_MOSI
	 * PB6 -> SPI1_NSS
	 */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000334:	4b3b      	ldr	r3, [pc, #236]	; (8000424 <main+0x168>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000338:	4a3a      	ldr	r2, [pc, #232]	; (8000424 <main+0x168>)
 800033a:	f043 0303 	orr.w	r3, r3, #3
 800033e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(SPI1_SCK, 0x2);
 8000340:	4b3a      	ldr	r3, [pc, #232]	; (800042c <main+0x170>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a39      	ldr	r2, [pc, #228]	; (800042c <main+0x170>)
 8000346:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800034a:	6013      	str	r3, [r2, #0]
 800034c:	4b37      	ldr	r3, [pc, #220]	; (800042c <main+0x170>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a36      	ldr	r2, [pc, #216]	; (800042c <main+0x170>)
 8000352:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000356:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(SPI1_MOSI, 0x2);
 8000358:	4b34      	ldr	r3, [pc, #208]	; (800042c <main+0x170>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a33      	ldr	r2, [pc, #204]	; (800042c <main+0x170>)
 800035e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000362:	6013      	str	r3, [r2, #0]
 8000364:	4b31      	ldr	r3, [pc, #196]	; (800042c <main+0x170>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a30      	ldr	r2, [pc, #192]	; (800042c <main+0x170>)
 800036a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800036e:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(SPI1_MISO, 0x2);
 8000370:	4b2e      	ldr	r3, [pc, #184]	; (800042c <main+0x170>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a2d      	ldr	r2, [pc, #180]	; (800042c <main+0x170>)
 8000376:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800037a:	6013      	str	r3, [r2, #0]
 800037c:	4b2b      	ldr	r3, [pc, #172]	; (800042c <main+0x170>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a2a      	ldr	r2, [pc, #168]	; (800042c <main+0x170>)
 8000382:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000386:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(SPI1_NSS, 0x1);
 8000388:	4b29      	ldr	r3, [pc, #164]	; (8000430 <main+0x174>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a28      	ldr	r2, [pc, #160]	; (8000430 <main+0x174>)
 800038e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000392:	6013      	str	r3, [r2, #0]
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <main+0x174>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a25      	ldr	r2, [pc, #148]	; (8000430 <main+0x174>)
 800039a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800039e:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7;
 80003a0:	4b22      	ldr	r3, [pc, #136]	; (800042c <main+0x170>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	4a21      	ldr	r2, [pc, #132]	; (800042c <main+0x170>)
 80003a6:	f443 437c 	orr.w	r3, r3, #64512	; 0xfc00
 80003aa:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[0] = 0;
 80003ac:	4b1f      	ldr	r3, [pc, #124]	; (800042c <main+0x170>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= 5<<GPIO_AFRL_AFSEL5_Pos | 5<<GPIO_AFRL_AFSEL6_Pos | 5<<GPIO_AFRL_AFSEL7_Pos;
 80003b2:	4b1e      	ldr	r3, [pc, #120]	; (800042c <main+0x170>)
 80003b4:	6a1b      	ldr	r3, [r3, #32]
 80003b6:	4a1d      	ldr	r2, [pc, #116]	; (800042c <main+0x170>)
 80003b8:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80003bc:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80003c0:	6213      	str	r3, [r2, #32]

	//SPI
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80003c2:	4b18      	ldr	r3, [pc, #96]	; (8000424 <main+0x168>)
 80003c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003c6:	4a17      	ldr	r2, [pc, #92]	; (8000424 <main+0x168>)
 80003c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003cc:	6453      	str	r3, [r2, #68]	; 0x44

	//Configurar el baudrate
	SPI1->CR1 &=~ SPI_CR1_BR;			//Pclk / 2 -> 8MZ
 80003ce:	4b19      	ldr	r3, [pc, #100]	; (8000434 <main+0x178>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a18      	ldr	r2, [pc, #96]	; (8000434 <main+0x178>)
 80003d4:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80003d8:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_BR_0;			//PCLK / 4 -> 4MZ
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <main+0x178>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a15      	ldr	r2, [pc, #84]	; (8000434 <main+0x178>)
 80003e0:	f043 0308 	orr.w	r3, r3, #8
 80003e4:	6013      	str	r3, [r2, #0]
	//CONFIGURAR LA POLARIDAD Y LA FASE DEL RELOJ
	SPI1->CR1 &=~ (SPI_CR1_CPHA | SPI_CR1_CPOL); //SPI MODO 0
 80003e6:	4b13      	ldr	r3, [pc, #76]	; (8000434 <main+0x178>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a12      	ldr	r2, [pc, #72]	; (8000434 <main+0x178>)
 80003ec:	f023 0303 	bic.w	r3, r3, #3
 80003f0:	6013      	str	r3, [r2, #0]
	//longitud de la trama
	SPI1->CR1 &=~ SPI_CR1_DFF;			//8bit de datos
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <main+0x178>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a0f      	ldr	r2, [pc, #60]	; (8000434 <main+0x178>)
 80003f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80003fc:	6013      	str	r3, [r2, #0]
	//configurar el bit LSBFIRTS
	SPI1->CR1 &=~ SPI_CR1_LSBFIRST;		//MSB
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <main+0x178>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a0c      	ldr	r2, [pc, #48]	; (8000434 <main+0x178>)
 8000404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000408:	6013      	str	r3, [r2, #0]
	//Configurar el manejo del pin NSS
	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI; //software managment
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <main+0x178>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a09      	ldr	r2, [pc, #36]	; (8000434 <main+0x178>)
 8000410:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000414:	6013      	str	r3, [r2, #0]
	//configurar el TI

	//habilitar el spi y habilitar el modo maestro
	SPI1->CR1 |= SPI_CR1_MSTR | SPI_CR1_SPE;
 8000416:	4b07      	ldr	r3, [pc, #28]	; (8000434 <main+0x178>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a06      	ldr	r2, [pc, #24]	; (8000434 <main+0x178>)
 800041c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8000420:	6013      	str	r3, [r2, #0]

	for(;;){
 8000422:	e7fe      	b.n	8000422 <main+0x166>
 8000424:	40023800 	.word	0x40023800
 8000428:	40020c00 	.word	0x40020c00
 800042c:	40020000 	.word	0x40020000
 8000430:	40020400 	.word	0x40020400
 8000434:	40013000 	.word	0x40013000

08000438 <SysTick_Handler>:
 * 
 */
#include "stm32f4xx.h"
#include "delay.h"

void SysTick_Handler(void){
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
    if(SysTick->CTRL & 1<<16){
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <SysTick_Handler+0x1c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000444:	2b00      	cmp	r3, #0
 8000446:	d002      	beq.n	800044e <SysTick_Handler+0x16>
        //todo
        tickInc(1);
 8000448:	2001      	movs	r0, #1
 800044a:	f7ff fecd 	bl	80001e8 <tickInc>
    }
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	e000e010 	.word	0xe000e010

08000458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <SystemInit+0x20>)
 800045e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000462:	4a05      	ldr	r2, [pc, #20]	; (8000478 <SystemInit+0x20>)
 8000464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	e000ed00 	.word	0xe000ed00

0800047c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800047c:	480d      	ldr	r0, [pc, #52]	; (80004b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000480:	f7ff ffea 	bl	8000458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000484:	480c      	ldr	r0, [pc, #48]	; (80004b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000486:	490d      	ldr	r1, [pc, #52]	; (80004bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000488:	4a0d      	ldr	r2, [pc, #52]	; (80004c0 <LoopForever+0xe>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800048c:	e002      	b.n	8000494 <LoopCopyDataInit>

0800048e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000492:	3304      	adds	r3, #4

08000494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000498:	d3f9      	bcc.n	800048e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049a:	4a0a      	ldr	r2, [pc, #40]	; (80004c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800049c:	4c0a      	ldr	r4, [pc, #40]	; (80004c8 <LoopForever+0x16>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a0:	e001      	b.n	80004a6 <LoopFillZerobss>

080004a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a4:	3204      	adds	r2, #4

080004a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a8:	d3fb      	bcc.n	80004a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004aa:	f000 f811 	bl	80004d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ae:	f7ff ff05 	bl	80002bc <main>

080004b2 <LoopForever>:

LoopForever:
  b LoopForever
 80004b2:	e7fe      	b.n	80004b2 <LoopForever>
  ldr   r0, =_estack
 80004b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004c0:	08000538 	.word	0x08000538
  ldr r2, =_sbss
 80004c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004c8:	20000020 	.word	0x20000020

080004cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004cc:	e7fe      	b.n	80004cc <ADC_IRQHandler>
	...

080004d0 <__libc_init_array>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	4d0d      	ldr	r5, [pc, #52]	; (8000508 <__libc_init_array+0x38>)
 80004d4:	4c0d      	ldr	r4, [pc, #52]	; (800050c <__libc_init_array+0x3c>)
 80004d6:	1b64      	subs	r4, r4, r5
 80004d8:	10a4      	asrs	r4, r4, #2
 80004da:	2600      	movs	r6, #0
 80004dc:	42a6      	cmp	r6, r4
 80004de:	d109      	bne.n	80004f4 <__libc_init_array+0x24>
 80004e0:	4d0b      	ldr	r5, [pc, #44]	; (8000510 <__libc_init_array+0x40>)
 80004e2:	4c0c      	ldr	r4, [pc, #48]	; (8000514 <__libc_init_array+0x44>)
 80004e4:	f000 f818 	bl	8000518 <_init>
 80004e8:	1b64      	subs	r4, r4, r5
 80004ea:	10a4      	asrs	r4, r4, #2
 80004ec:	2600      	movs	r6, #0
 80004ee:	42a6      	cmp	r6, r4
 80004f0:	d105      	bne.n	80004fe <__libc_init_array+0x2e>
 80004f2:	bd70      	pop	{r4, r5, r6, pc}
 80004f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f8:	4798      	blx	r3
 80004fa:	3601      	adds	r6, #1
 80004fc:	e7ee      	b.n	80004dc <__libc_init_array+0xc>
 80004fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000502:	4798      	blx	r3
 8000504:	3601      	adds	r6, #1
 8000506:	e7f2      	b.n	80004ee <__libc_init_array+0x1e>
 8000508:	08000530 	.word	0x08000530
 800050c:	08000530 	.word	0x08000530
 8000510:	08000530 	.word	0x08000530
 8000514:	08000534 	.word	0x08000534

08000518 <_init>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr

08000524 <_fini>:
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	bf00      	nop
 8000528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052a:	bc08      	pop	{r3}
 800052c:	469e      	mov	lr, r3
 800052e:	4770      	bx	lr
