
ETH_MQTT_SPI_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010290  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e1c  08010440  08010440  00020440  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801225c  0801225c  00030100  2**0
                  CONTENTS
  4 .ARM          00000008  0801225c  0801225c  0002225c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012264  08012264  00030100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012264  08012264  00022264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012268  08012268  00022268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0801226c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030100  2**0
                  CONTENTS
 10 .bss          0000209c  20000100  20000100  00030100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000219c  2000219c  00030100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030100  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ec67  00000000  00000000  00030173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003711  00000000  00000000  0004edda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016b0  00000000  00000000  000524f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011e0  00000000  00000000  00053ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002018b  00000000  00000000  00054d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001821e  00000000  00000000  00074f0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b2ed8  00000000  00000000  0008d129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008230  00000000  00000000  00140004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  00148234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010428 	.word	0x08010428

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	08010428 	.word	0x08010428

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__gedf2>:
 800086c:	f04f 3cff 	mov.w	ip, #4294967295
 8000870:	e006      	b.n	8000880 <__cmpdf2+0x4>
 8000872:	bf00      	nop

08000874 <__ledf2>:
 8000874:	f04f 0c01 	mov.w	ip, #1
 8000878:	e002      	b.n	8000880 <__cmpdf2+0x4>
 800087a:	bf00      	nop

0800087c <__cmpdf2>:
 800087c:	f04f 0c01 	mov.w	ip, #1
 8000880:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000884:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000888:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800088c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000890:	bf18      	it	ne
 8000892:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000896:	d01b      	beq.n	80008d0 <__cmpdf2+0x54>
 8000898:	b001      	add	sp, #4
 800089a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800089e:	bf0c      	ite	eq
 80008a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008a4:	ea91 0f03 	teqne	r1, r3
 80008a8:	bf02      	ittt	eq
 80008aa:	ea90 0f02 	teqeq	r0, r2
 80008ae:	2000      	moveq	r0, #0
 80008b0:	4770      	bxeq	lr
 80008b2:	f110 0f00 	cmn.w	r0, #0
 80008b6:	ea91 0f03 	teq	r1, r3
 80008ba:	bf58      	it	pl
 80008bc:	4299      	cmppl	r1, r3
 80008be:	bf08      	it	eq
 80008c0:	4290      	cmpeq	r0, r2
 80008c2:	bf2c      	ite	cs
 80008c4:	17d8      	asrcs	r0, r3, #31
 80008c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ca:	f040 0001 	orr.w	r0, r0, #1
 80008ce:	4770      	bx	lr
 80008d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d102      	bne.n	80008e0 <__cmpdf2+0x64>
 80008da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008de:	d107      	bne.n	80008f0 <__cmpdf2+0x74>
 80008e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008e8:	d1d6      	bne.n	8000898 <__cmpdf2+0x1c>
 80008ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ee:	d0d3      	beq.n	8000898 <__cmpdf2+0x1c>
 80008f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdrcmple>:
 80008f8:	4684      	mov	ip, r0
 80008fa:	4610      	mov	r0, r2
 80008fc:	4662      	mov	r2, ip
 80008fe:	468c      	mov	ip, r1
 8000900:	4619      	mov	r1, r3
 8000902:	4663      	mov	r3, ip
 8000904:	e000      	b.n	8000908 <__aeabi_cdcmpeq>
 8000906:	bf00      	nop

08000908 <__aeabi_cdcmpeq>:
 8000908:	b501      	push	{r0, lr}
 800090a:	f7ff ffb7 	bl	800087c <__cmpdf2>
 800090e:	2800      	cmp	r0, #0
 8000910:	bf48      	it	mi
 8000912:	f110 0f00 	cmnmi.w	r0, #0
 8000916:	bd01      	pop	{r0, pc}

08000918 <__aeabi_dcmpeq>:
 8000918:	f84d ed08 	str.w	lr, [sp, #-8]!
 800091c:	f7ff fff4 	bl	8000908 <__aeabi_cdcmpeq>
 8000920:	bf0c      	ite	eq
 8000922:	2001      	moveq	r0, #1
 8000924:	2000      	movne	r0, #0
 8000926:	f85d fb08 	ldr.w	pc, [sp], #8
 800092a:	bf00      	nop

0800092c <__aeabi_dcmplt>:
 800092c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000930:	f7ff ffea 	bl	8000908 <__aeabi_cdcmpeq>
 8000934:	bf34      	ite	cc
 8000936:	2001      	movcc	r0, #1
 8000938:	2000      	movcs	r0, #0
 800093a:	f85d fb08 	ldr.w	pc, [sp], #8
 800093e:	bf00      	nop

08000940 <__aeabi_dcmple>:
 8000940:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000944:	f7ff ffe0 	bl	8000908 <__aeabi_cdcmpeq>
 8000948:	bf94      	ite	ls
 800094a:	2001      	movls	r0, #1
 800094c:	2000      	movhi	r0, #0
 800094e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000952:	bf00      	nop

08000954 <__aeabi_dcmpge>:
 8000954:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000958:	f7ff ffce 	bl	80008f8 <__aeabi_cdrcmple>
 800095c:	bf94      	ite	ls
 800095e:	2001      	movls	r0, #1
 8000960:	2000      	movhi	r0, #0
 8000962:	f85d fb08 	ldr.w	pc, [sp], #8
 8000966:	bf00      	nop

08000968 <__aeabi_dcmpgt>:
 8000968:	f84d ed08 	str.w	lr, [sp, #-8]!
 800096c:	f7ff ffc4 	bl	80008f8 <__aeabi_cdrcmple>
 8000970:	bf34      	ite	cc
 8000972:	2001      	movcc	r0, #1
 8000974:	2000      	movcs	r0, #0
 8000976:	f85d fb08 	ldr.w	pc, [sp], #8
 800097a:	bf00      	nop

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295
 80009d0:	f000 b970 	b.w	8000cb4 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9e08      	ldr	r6, [sp, #32]
 80009f2:	460d      	mov	r5, r1
 80009f4:	4604      	mov	r4, r0
 80009f6:	460f      	mov	r7, r1
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d14a      	bne.n	8000a92 <__udivmoddi4+0xa6>
 80009fc:	428a      	cmp	r2, r1
 80009fe:	4694      	mov	ip, r2
 8000a00:	d965      	bls.n	8000ace <__udivmoddi4+0xe2>
 8000a02:	fab2 f382 	clz	r3, r2
 8000a06:	b143      	cbz	r3, 8000a1a <__udivmoddi4+0x2e>
 8000a08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a0c:	f1c3 0220 	rsb	r2, r3, #32
 8000a10:	409f      	lsls	r7, r3
 8000a12:	fa20 f202 	lsr.w	r2, r0, r2
 8000a16:	4317      	orrs	r7, r2
 8000a18:	409c      	lsls	r4, r3
 8000a1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a1e:	fa1f f58c 	uxth.w	r5, ip
 8000a22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a26:	0c22      	lsrs	r2, r4, #16
 8000a28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a30:	fb01 f005 	mul.w	r0, r1, r5
 8000a34:	4290      	cmp	r0, r2
 8000a36:	d90a      	bls.n	8000a4e <__udivmoddi4+0x62>
 8000a38:	eb1c 0202 	adds.w	r2, ip, r2
 8000a3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a40:	f080 811c 	bcs.w	8000c7c <__udivmoddi4+0x290>
 8000a44:	4290      	cmp	r0, r2
 8000a46:	f240 8119 	bls.w	8000c7c <__udivmoddi4+0x290>
 8000a4a:	3902      	subs	r1, #2
 8000a4c:	4462      	add	r2, ip
 8000a4e:	1a12      	subs	r2, r2, r0
 8000a50:	b2a4      	uxth	r4, r4
 8000a52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a5e:	fb00 f505 	mul.w	r5, r0, r5
 8000a62:	42a5      	cmp	r5, r4
 8000a64:	d90a      	bls.n	8000a7c <__udivmoddi4+0x90>
 8000a66:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a6e:	f080 8107 	bcs.w	8000c80 <__udivmoddi4+0x294>
 8000a72:	42a5      	cmp	r5, r4
 8000a74:	f240 8104 	bls.w	8000c80 <__udivmoddi4+0x294>
 8000a78:	4464      	add	r4, ip
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a80:	1b64      	subs	r4, r4, r5
 8000a82:	2100      	movs	r1, #0
 8000a84:	b11e      	cbz	r6, 8000a8e <__udivmoddi4+0xa2>
 8000a86:	40dc      	lsrs	r4, r3
 8000a88:	2300      	movs	r3, #0
 8000a8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0xbc>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	f000 80ed 	beq.w	8000c76 <__udivmoddi4+0x28a>
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa8:	fab3 f183 	clz	r1, r3
 8000aac:	2900      	cmp	r1, #0
 8000aae:	d149      	bne.n	8000b44 <__udivmoddi4+0x158>
 8000ab0:	42ab      	cmp	r3, r5
 8000ab2:	d302      	bcc.n	8000aba <__udivmoddi4+0xce>
 8000ab4:	4282      	cmp	r2, r0
 8000ab6:	f200 80f8 	bhi.w	8000caa <__udivmoddi4+0x2be>
 8000aba:	1a84      	subs	r4, r0, r2
 8000abc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ac0:	2001      	movs	r0, #1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d0e2      	beq.n	8000a8e <__udivmoddi4+0xa2>
 8000ac8:	e9c6 4700 	strd	r4, r7, [r6]
 8000acc:	e7df      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000ace:	b902      	cbnz	r2, 8000ad2 <__udivmoddi4+0xe6>
 8000ad0:	deff      	udf	#255	; 0xff
 8000ad2:	fab2 f382 	clz	r3, r2
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f040 8090 	bne.w	8000bfc <__udivmoddi4+0x210>
 8000adc:	1a8a      	subs	r2, r1, r2
 8000ade:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae2:	fa1f fe8c 	uxth.w	lr, ip
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000aec:	fb07 2015 	mls	r0, r7, r5, r2
 8000af0:	0c22      	lsrs	r2, r4, #16
 8000af2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000af6:	fb0e f005 	mul.w	r0, lr, r5
 8000afa:	4290      	cmp	r0, r2
 8000afc:	d908      	bls.n	8000b10 <__udivmoddi4+0x124>
 8000afe:	eb1c 0202 	adds.w	r2, ip, r2
 8000b02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b06:	d202      	bcs.n	8000b0e <__udivmoddi4+0x122>
 8000b08:	4290      	cmp	r0, r2
 8000b0a:	f200 80cb 	bhi.w	8000ca4 <__udivmoddi4+0x2b8>
 8000b0e:	4645      	mov	r5, r8
 8000b10:	1a12      	subs	r2, r2, r0
 8000b12:	b2a4      	uxth	r4, r4
 8000b14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b18:	fb07 2210 	mls	r2, r7, r0, r2
 8000b1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b20:	fb0e fe00 	mul.w	lr, lr, r0
 8000b24:	45a6      	cmp	lr, r4
 8000b26:	d908      	bls.n	8000b3a <__udivmoddi4+0x14e>
 8000b28:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x14c>
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	f200 80bb 	bhi.w	8000cae <__udivmoddi4+0x2c2>
 8000b38:	4610      	mov	r0, r2
 8000b3a:	eba4 040e 	sub.w	r4, r4, lr
 8000b3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b42:	e79f      	b.n	8000a84 <__udivmoddi4+0x98>
 8000b44:	f1c1 0720 	rsb	r7, r1, #32
 8000b48:	408b      	lsls	r3, r1
 8000b4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa05 f401 	lsl.w	r4, r5, r1
 8000b56:	fa20 f307 	lsr.w	r3, r0, r7
 8000b5a:	40fd      	lsrs	r5, r7
 8000b5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b60:	4323      	orrs	r3, r4
 8000b62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b66:	fa1f fe8c 	uxth.w	lr, ip
 8000b6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b6e:	0c1c      	lsrs	r4, r3, #16
 8000b70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b74:	fb08 f50e 	mul.w	r5, r8, lr
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b0>
 8000b84:	eb1c 0404 	adds.w	r4, ip, r4
 8000b88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b90:	42a5      	cmp	r5, r4
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b96:	f1a8 0802 	sub.w	r8, r8, #2
 8000b9a:	4464      	add	r4, ip
 8000b9c:	1b64      	subs	r4, r4, r5
 8000b9e:	b29d      	uxth	r5, r3
 8000ba0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bb0:	45a6      	cmp	lr, r4
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x1da>
 8000bb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bbc:	d26c      	bcs.n	8000c98 <__udivmoddi4+0x2ac>
 8000bbe:	45a6      	cmp	lr, r4
 8000bc0:	d96a      	bls.n	8000c98 <__udivmoddi4+0x2ac>
 8000bc2:	3b02      	subs	r3, #2
 8000bc4:	4464      	add	r4, ip
 8000bc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bca:	fba3 9502 	umull	r9, r5, r3, r2
 8000bce:	eba4 040e 	sub.w	r4, r4, lr
 8000bd2:	42ac      	cmp	r4, r5
 8000bd4:	46c8      	mov	r8, r9
 8000bd6:	46ae      	mov	lr, r5
 8000bd8:	d356      	bcc.n	8000c88 <__udivmoddi4+0x29c>
 8000bda:	d053      	beq.n	8000c84 <__udivmoddi4+0x298>
 8000bdc:	b156      	cbz	r6, 8000bf4 <__udivmoddi4+0x208>
 8000bde:	ebb0 0208 	subs.w	r2, r0, r8
 8000be2:	eb64 040e 	sbc.w	r4, r4, lr
 8000be6:	fa04 f707 	lsl.w	r7, r4, r7
 8000bea:	40ca      	lsrs	r2, r1
 8000bec:	40cc      	lsrs	r4, r1
 8000bee:	4317      	orrs	r7, r2
 8000bf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfc:	f1c3 0120 	rsb	r1, r3, #32
 8000c00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c04:	fa20 f201 	lsr.w	r2, r0, r1
 8000c08:	fa25 f101 	lsr.w	r1, r5, r1
 8000c0c:	409d      	lsls	r5, r3
 8000c0e:	432a      	orrs	r2, r5
 8000c10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c20:	0c11      	lsrs	r1, r2, #16
 8000c22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c26:	fb00 f50e 	mul.w	r5, r0, lr
 8000c2a:	428d      	cmp	r5, r1
 8000c2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x258>
 8000c32:	eb1c 0101 	adds.w	r1, ip, r1
 8000c36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c3a:	d22f      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c3c:	428d      	cmp	r5, r1
 8000c3e:	d92d      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c40:	3802      	subs	r0, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1b49      	subs	r1, r1, r5
 8000c46:	b292      	uxth	r2, r2
 8000c48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000c50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c54:	fb05 f10e 	mul.w	r1, r5, lr
 8000c58:	4291      	cmp	r1, r2
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x282>
 8000c5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c64:	d216      	bcs.n	8000c94 <__udivmoddi4+0x2a8>
 8000c66:	4291      	cmp	r1, r2
 8000c68:	d914      	bls.n	8000c94 <__udivmoddi4+0x2a8>
 8000c6a:	3d02      	subs	r5, #2
 8000c6c:	4462      	add	r2, ip
 8000c6e:	1a52      	subs	r2, r2, r1
 8000c70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c74:	e738      	b.n	8000ae8 <__udivmoddi4+0xfc>
 8000c76:	4631      	mov	r1, r6
 8000c78:	4630      	mov	r0, r6
 8000c7a:	e708      	b.n	8000a8e <__udivmoddi4+0xa2>
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e6e6      	b.n	8000a4e <__udivmoddi4+0x62>
 8000c80:	4610      	mov	r0, r2
 8000c82:	e6fb      	b.n	8000a7c <__udivmoddi4+0x90>
 8000c84:	4548      	cmp	r0, r9
 8000c86:	d2a9      	bcs.n	8000bdc <__udivmoddi4+0x1f0>
 8000c88:	ebb9 0802 	subs.w	r8, r9, r2
 8000c8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c90:	3b01      	subs	r3, #1
 8000c92:	e7a3      	b.n	8000bdc <__udivmoddi4+0x1f0>
 8000c94:	4645      	mov	r5, r8
 8000c96:	e7ea      	b.n	8000c6e <__udivmoddi4+0x282>
 8000c98:	462b      	mov	r3, r5
 8000c9a:	e794      	b.n	8000bc6 <__udivmoddi4+0x1da>
 8000c9c:	4640      	mov	r0, r8
 8000c9e:	e7d1      	b.n	8000c44 <__udivmoddi4+0x258>
 8000ca0:	46d0      	mov	r8, sl
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b0>
 8000ca4:	3d02      	subs	r5, #2
 8000ca6:	4462      	add	r2, ip
 8000ca8:	e732      	b.n	8000b10 <__udivmoddi4+0x124>
 8000caa:	4608      	mov	r0, r1
 8000cac:	e70a      	b.n	8000ac4 <__udivmoddi4+0xd8>
 8000cae:	4464      	add	r4, ip
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	e742      	b.n	8000b3a <__udivmoddi4+0x14e>

08000cb4 <__aeabi_idiv0>:
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5100)
/**
@brief  This function writes the data into W5100 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
   WIZCHIP_CRITICAL_ENTER();
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0xF0);
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000cd2:	6a1b      	ldr	r3, [r3, #32]
 8000cd4:	20f0      	movs	r0, #240	; 0xf0
 8000cd6:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000cda:	6a1b      	ldr	r3, [r3, #32]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	0a12      	lsrs	r2, r2, #8
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	4610      	mov	r0, r2
 8000cf0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 8000cf2:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000cf4:	6a1b      	ldr	r3, [r3, #32]
 8000cf6:	78fa      	ldrb	r2, [r7, #3]
 8000cf8:	4610      	mov	r0, r2
 8000cfa:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000d02:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <WIZCHIP_WRITE+0x58>)
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	4798      	blx	r3
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000004 	.word	0x20000004

08000d14 <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5100 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8000d1c:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	200f      	movs	r0, #15
 8000d2e:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	0a12      	lsrs	r2, r2, #8
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d40:	6a1b      	ldr	r3, [r3, #32]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	4610      	mov	r0, r2
 8000d48:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 8000d4a:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4798      	blx	r3
 8000d50:	4603      	mov	r3, r0
 8000d52:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <WIZCHIP_READ+0x58>)
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	4798      	blx	r3
   return ret;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000004 	.word	0x20000004

08000d70 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5100 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	82fb      	strh	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8000d82:	4b21      	ldr	r3, [pc, #132]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000d8a:	695b      	ldr	r3, [r3, #20]
 8000d8c:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  for(i = 0; i < len; i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	82fb      	strh	r3, [r7, #22]
 8000d92:	e02a      	b.n	8000dea <WIZCHIP_WRITE_BUF+0x7a>
  {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8000d94:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000d96:	695b      	ldr	r3, [r3, #20]
 8000d98:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(0xF0);
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000d9c:	6a1b      	ldr	r3, [r3, #32]
 8000d9e:	20f0      	movs	r0, #240	; 0xf0
 8000da0:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 8000da2:	4b19      	ldr	r3, [pc, #100]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000da4:	6a1b      	ldr	r3, [r3, #32]
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	b291      	uxth	r1, r2
 8000daa:	8afa      	ldrh	r2, [r7, #22]
 8000dac:	440a      	add	r2, r1
 8000dae:	b292      	uxth	r2, r2
 8000db0:	0a12      	lsrs	r2, r2, #8
 8000db2:	b292      	uxth	r2, r2
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	4610      	mov	r0, r2
 8000db8:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000dbc:	6a1b      	ldr	r3, [r3, #32]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	b2d1      	uxtb	r1, r2
 8000dc2:	8afa      	ldrh	r2, [r7, #22]
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440a      	add	r2, r1
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	8afa      	ldrh	r2, [r7, #22]
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	440a      	add	r2, r1
 8000dd8:	7812      	ldrb	r2, [r2, #0]
 8000dda:	4610      	mov	r0, r2
 8000ddc:	4798      	blx	r3
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	4798      	blx	r3
  for(i = 0; i < len; i++)
 8000de4:	8afb      	ldrh	r3, [r7, #22]
 8000de6:	3301      	adds	r3, #1
 8000de8:	82fb      	strh	r3, [r7, #22]
 8000dea:	8afa      	ldrh	r2, [r7, #22]
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d3d0      	bcc.n	8000d94 <WIZCHIP_WRITE_BUF+0x24>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 8000df2:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <WIZCHIP_WRITE_BUF+0x98>)
 8000dfa:	691b      	ldr	r3, [r3, #16]
 8000dfc:	4798      	blx	r3
}
 8000dfe:	bf00      	nop
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000004 	.word	0x20000004

08000e0c <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5100 memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	4613      	mov	r3, r2
 8000e18:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	4798      	blx	r3
   
   #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   for(i = 0; i < len; i++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	82fb      	strh	r3, [r7, #22]
 8000e2e:	e02a      	b.n	8000e86 <WIZCHIP_READ_BUF+0x7a>
   {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(0x0F);
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e38:	6a1b      	ldr	r3, [r3, #32]
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e40:	6a1b      	ldr	r3, [r3, #32]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	b291      	uxth	r1, r2
 8000e46:	8afa      	ldrh	r2, [r7, #22]
 8000e48:	440a      	add	r2, r1
 8000e4a:	b292      	uxth	r2, r2
 8000e4c:	0a12      	lsrs	r2, r2, #8
 8000e4e:	b292      	uxth	r2, r2
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	4610      	mov	r0, r2
 8000e54:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e58:	6a1b      	ldr	r3, [r3, #32]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	b2d1      	uxtb	r1, r2
 8000e5e:	8afa      	ldrh	r2, [r7, #22]
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440a      	add	r2, r1
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	4610      	mov	r0, r2
 8000e68:	4798      	blx	r3
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	8afa      	ldrh	r2, [r7, #22]
 8000e70:	68b9      	ldr	r1, [r7, #8]
 8000e72:	188c      	adds	r4, r1, r2
 8000e74:	4798      	blx	r3
 8000e76:	4603      	mov	r3, r0
 8000e78:	7023      	strb	r3, [r4, #0]
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4798      	blx	r3
   for(i = 0; i < len; i++)
 8000e80:	8afb      	ldrh	r3, [r7, #22]
 8000e82:	3301      	adds	r3, #1
 8000e84:	82fb      	strh	r3, [r7, #22]
 8000e86:	8afa      	ldrh	r2, [r7, #22]
 8000e88:	88fb      	ldrh	r3, [r7, #6]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d3d0      	bcc.n	8000e30 <WIZCHIP_READ_BUF+0x24>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <WIZCHIP_READ_BUF+0x98>)
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	4798      	blx	r3
}
 8000e9a:	bf00      	nop
 8000e9c:	371c      	adds	r7, #28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd90      	pop	{r4, r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	81fb      	strh	r3, [r7, #14]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	3320      	adds	r3, #32
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff26 	bl	8000d14 <WIZCHIP_READ>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000ecc:	89bb      	ldrh	r3, [r7, #12]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b29c      	uxth	r4, r3
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	3321      	adds	r3, #33	; 0x21
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff1a 	bl	8000d14 <WIZCHIP_READ>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4423      	add	r3, r4
 8000ee6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000ee8:	89bb      	ldrh	r3, [r7, #12]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d016      	beq.n	8000f1c <getSn_TX_FSR+0x74>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	021b      	lsls	r3, r3, #8
 8000ef4:	3320      	adds	r3, #32
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff ff0c 	bl	8000d14 <WIZCHIP_READ>
 8000efc:	4603      	mov	r3, r0
 8000efe:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000f00:	89fb      	ldrh	r3, [r7, #14]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b29c      	uxth	r4, r3
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	021b      	lsls	r3, r3, #8
 8000f0c:	3321      	adds	r3, #33	; 0x21
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff00 	bl	8000d14 <WIZCHIP_READ>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4423      	add	r3, r4
 8000f1a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000f1c:	89fa      	ldrh	r2, [r7, #14]
 8000f1e:	89bb      	ldrh	r3, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d1ca      	bne.n	8000eba <getSn_TX_FSR+0x12>
   return val;
 8000f24:	89fb      	ldrh	r3, [r7, #14]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3714      	adds	r7, #20
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}

08000f2e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8000f2e:	b590      	push	{r4, r7, lr}
 8000f30:	b085      	sub	sp, #20
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	81fb      	strh	r3, [r7, #14]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	3304      	adds	r3, #4
 8000f44:	021b      	lsls	r3, r3, #8
 8000f46:	3326      	adds	r3, #38	; 0x26
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fee3 	bl	8000d14 <WIZCHIP_READ>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000f52:	89bb      	ldrh	r3, [r7, #12]
 8000f54:	021b      	lsls	r3, r3, #8
 8000f56:	b29c      	uxth	r4, r3
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	3327      	adds	r3, #39	; 0x27
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fed7 	bl	8000d14 <WIZCHIP_READ>
 8000f66:	4603      	mov	r3, r0
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	4423      	add	r3, r4
 8000f6c:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000f6e:	89bb      	ldrh	r3, [r7, #12]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d016      	beq.n	8000fa2 <getSn_RX_RSR+0x74>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	3304      	adds	r3, #4
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	3326      	adds	r3, #38	; 0x26
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fec9 	bl	8000d14 <WIZCHIP_READ>
 8000f82:	4603      	mov	r3, r0
 8000f84:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000f86:	89fb      	ldrh	r3, [r7, #14]
 8000f88:	021b      	lsls	r3, r3, #8
 8000f8a:	b29c      	uxth	r4, r3
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	3304      	adds	r3, #4
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	3327      	adds	r3, #39	; 0x27
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff febd 	bl	8000d14 <WIZCHIP_READ>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	4423      	add	r3, r4
 8000fa0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000fa2:	89fa      	ldrh	r2, [r7, #14]
 8000fa4:	89bb      	ldrh	r3, [r7, #12]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d1ca      	bne.n	8000f40 <getSn_RX_RSR+0x12>
   return val;
 8000faa:	89fb      	ldrh	r3, [r7, #14]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd90      	pop	{r4, r7, pc}

08000fb4 <getSn_RxBASE>:

/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////
uint32_t getSn_RxBASE(uint8_t sn)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t rxbase = _W5100_IO_BASE_ + _WIZCHIP_IO_RXBUF_;
#else   
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 8000fbe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fc2:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e020      	b.n	800100c <getSn_RxBASE+0x58>
      rxbase += getSn_RxMAX(i);
 8000fca:	201a      	movs	r0, #26
 8000fcc:	f7ff fea2 	bl	8000d14 <WIZCHIP_READ>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	ea01 0203 	and.w	r2, r1, r3
 8000fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	fa42 f303 	asr.w	r3, r2, r3
 8000fee:	2201      	movs	r2, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	029b      	lsls	r3, r3, #10
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	3301      	adds	r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	429a      	cmp	r2, r3
 8001014:	dbd9      	blt.n	8000fca <getSn_RxBASE+0x16>

   return rxbase;
 8001016:	68bb      	ldr	r3, [r7, #8]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <getSn_TxBASE>:

uint32_t getSn_TxBASE(uint8_t sn)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t txbase = _W5100_IO_BASE_ + _WIZCHIP_IO_TXBUF_;
#else   
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 800102a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800102e:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e020      	b.n	8001078 <getSn_TxBASE+0x58>
      txbase += getSn_TxMAX(i);
 8001036:	201b      	movs	r0, #27
 8001038:	f7ff fe6c 	bl	8000d14 <WIZCHIP_READ>
 800103c:	4603      	mov	r3, r0
 800103e:	4619      	mov	r1, r3
 8001040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	ea01 0203 	and.w	r2, r1, r3
 8001050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa42 f303 	asr.w	r3, r2, r3
 800105a:	2201      	movs	r2, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	b29b      	uxth	r3, r3
 8001062:	029b      	lsls	r3, r3, #10
 8001064:	461a      	mov	r2, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	4413      	add	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 800106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	3301      	adds	r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	429a      	cmp	r2, r3
 8001080:	dbd9      	blt.n	8001036 <getSn_TxBASE+0x16>
   return txbase;
 8001082:	68bb      	ldr	r3, [r7, #8]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <wiz_send_data>:
the data in transmite buffer. Here also take care of the condition while it exceed
the Tx memory uper-bound of socket.

*/
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 800108c:	b590      	push	{r4, r7, lr}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	4613      	mov	r3, r2
 800109a:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint16_t dst_ptr;

  ptr = getSn_TX_WR(sn);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3304      	adds	r3, #4
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	3324      	adds	r3, #36	; 0x24
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fe35 	bl	8000d14 <WIZCHIP_READ>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b29c      	uxth	r4, r3
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	3304      	adds	r3, #4
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	3325      	adds	r3, #37	; 0x25
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe2a 	bl	8000d14 <WIZCHIP_READ>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4423      	add	r3, r4
 80010c6:	81fb      	strh	r3, [r7, #14]

  dst_mask = ptr & getSn_TxMASK(sn);
 80010c8:	201b      	movs	r0, #27
 80010ca:	f7ff fe23 	bl	8000d14 <WIZCHIP_READ>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4619      	mov	r1, r3
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	ea01 0203 	and.w	r2, r1, r3
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa42 f303 	asr.w	r3, r2, r3
 80010e8:	2201      	movs	r2, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	3b01      	subs	r3, #1
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010fe:	4013      	ands	r3, r2
 8001100:	b21b      	sxth	r3, r3
 8001102:	81bb      	strh	r3, [r7, #12]
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff8a 	bl	8001020 <getSn_TxBASE>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	89bb      	ldrh	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	817b      	strh	r3, [r7, #10]
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 8001116:	89ba      	ldrh	r2, [r7, #12]
 8001118:	88bb      	ldrh	r3, [r7, #4]
 800111a:	18d4      	adds	r4, r2, r3
 800111c:	201b      	movs	r0, #27
 800111e:	f7ff fdf9 	bl	8000d14 <WIZCHIP_READ>
 8001122:	4603      	mov	r3, r0
 8001124:	4619      	mov	r1, r3
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	ea01 0203 	and.w	r2, r1, r3
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa42 f303 	asr.w	r3, r2, r3
 800113c:	2201      	movs	r2, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	b29b      	uxth	r3, r3
 8001144:	029b      	lsls	r3, r3, #10
 8001146:	429c      	cmp	r4, r3
 8001148:	dd33      	ble.n	80011b2 <wiz_send_data+0x126>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 800114a:	201b      	movs	r0, #27
 800114c:	f7ff fde2 	bl	8000d14 <WIZCHIP_READ>
 8001150:	4603      	mov	r3, r0
 8001152:	4619      	mov	r1, r3
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	2203      	movs	r2, #3
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	ea01 0203 	and.w	r2, r1, r3
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa42 f303 	asr.w	r3, r2, r3
 800116a:	2201      	movs	r2, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	b29b      	uxth	r3, r3
 8001172:	029b      	lsls	r3, r3, #10
 8001174:	b29a      	uxth	r2, r3
 8001176:	89bb      	ldrh	r3, [r7, #12]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	813b      	strh	r3, [r7, #8]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 800117c:	897b      	ldrh	r3, [r7, #10]
 800117e:	893a      	ldrh	r2, [r7, #8]
 8001180:	6839      	ldr	r1, [r7, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fdf4 	bl	8000d70 <WIZCHIP_WRITE_BUF>
    wizdata += size;
 8001188:	893b      	ldrh	r3, [r7, #8]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4413      	add	r3, r2
 800118e:	603b      	str	r3, [r7, #0]
    size = len - size;
 8001190:	88ba      	ldrh	r2, [r7, #4]
 8001192:	893b      	ldrh	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	813b      	strh	r3, [r7, #8]
    dst_ptr = getSn_TxBASE(sn);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff40 	bl	8001020 <getSn_TxBASE>
 80011a0:	4603      	mov	r3, r0
 80011a2:	817b      	strh	r3, [r7, #10]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 80011a4:	897b      	ldrh	r3, [r7, #10]
 80011a6:	893a      	ldrh	r2, [r7, #8]
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fde0 	bl	8000d70 <WIZCHIP_WRITE_BUF>
 80011b0:	e005      	b.n	80011be <wiz_send_data+0x132>
  } 
  else
  {
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 80011b2:	897b      	ldrh	r3, [r7, #10]
 80011b4:	88ba      	ldrh	r2, [r7, #4]
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fdd9 	bl	8000d70 <WIZCHIP_WRITE_BUF>
  }

  ptr += len;
 80011be:	89fa      	ldrh	r2, [r7, #14]
 80011c0:	88bb      	ldrh	r3, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	81fb      	strh	r3, [r7, #14]

  setSn_TX_WR(sn, ptr);  
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	3304      	adds	r3, #4
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	3324      	adds	r3, #36	; 0x24
 80011ce:	461a      	mov	r2, r3
 80011d0:	89fb      	ldrh	r3, [r7, #14]
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	4610      	mov	r0, r2
 80011dc:	f7ff fd6c 	bl	8000cb8 <WIZCHIP_WRITE>
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	3304      	adds	r3, #4
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	3325      	adds	r3, #37	; 0x25
 80011e8:	461a      	mov	r2, r3
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4619      	mov	r1, r3
 80011f0:	4610      	mov	r0, r2
 80011f2:	f7ff fd61 	bl	8000cb8 <WIZCHIP_WRITE>
}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}

080011fe <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b085      	sub	sp, #20
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	6039      	str	r1, [r7, #0]
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	4613      	mov	r3, r2
 800120c:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  ptr = getSn_RX_RD(sn);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	3304      	adds	r3, #4
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	3328      	adds	r3, #40	; 0x28
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fd7c 	bl	8000d14 <WIZCHIP_READ>
 800121c:	4603      	mov	r3, r0
 800121e:	b29b      	uxth	r3, r3
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b29c      	uxth	r4, r3
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	3304      	adds	r3, #4
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	3329      	adds	r3, #41	; 0x29
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fd71 	bl	8000d14 <WIZCHIP_READ>
 8001232:	4603      	mov	r3, r0
 8001234:	b29b      	uxth	r3, r3
 8001236:	4423      	add	r3, r4
 8001238:	81fb      	strh	r3, [r7, #14]
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 800123a:	201a      	movs	r0, #26
 800123c:	f7ff fd6a 	bl	8000d14 <WIZCHIP_READ>
 8001240:	4603      	mov	r3, r0
 8001242:	4619      	mov	r1, r3
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	ea01 0203 	and.w	r2, r1, r3
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa42 f303 	asr.w	r3, r2, r3
 800125a:	2201      	movs	r2, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	029b      	lsls	r3, r3, #10
 8001264:	b29b      	uxth	r3, r3
 8001266:	3b01      	subs	r3, #1
 8001268:	b29a      	uxth	r2, r3
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	4013      	ands	r3, r2
 800126e:	81bb      	strh	r3, [r7, #12]
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fe9e 	bl	8000fb4 <getSn_RxBASE>
 8001278:	4603      	mov	r3, r0
 800127a:	b29a      	uxth	r2, r3
 800127c:	89bb      	ldrh	r3, [r7, #12]
 800127e:	4413      	add	r3, r2
 8001280:	817b      	strh	r3, [r7, #10]

  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 8001282:	89ba      	ldrh	r2, [r7, #12]
 8001284:	88bb      	ldrh	r3, [r7, #4]
 8001286:	18d4      	adds	r4, r2, r3
 8001288:	201a      	movs	r0, #26
 800128a:	f7ff fd43 	bl	8000d14 <WIZCHIP_READ>
 800128e:	4603      	mov	r3, r0
 8001290:	4619      	mov	r1, r3
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	ea01 0203 	and.w	r2, r1, r3
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa42 f303 	asr.w	r3, r2, r3
 80012a8:	2201      	movs	r2, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	029b      	lsls	r3, r3, #10
 80012b2:	429c      	cmp	r4, r3
 80012b4:	dd33      	ble.n	800131e <wiz_recv_data+0x120>
  {
    size = getSn_RxMAX(sn) - src_mask;
 80012b6:	201a      	movs	r0, #26
 80012b8:	f7ff fd2c 	bl	8000d14 <WIZCHIP_READ>
 80012bc:	4603      	mov	r3, r0
 80012be:	4619      	mov	r1, r3
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	2203      	movs	r2, #3
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	ea01 0203 	and.w	r2, r1, r3
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa42 f303 	asr.w	r3, r2, r3
 80012d6:	2201      	movs	r2, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	029b      	lsls	r3, r3, #10
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	89bb      	ldrh	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	813b      	strh	r3, [r7, #8]
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 80012e8:	897b      	ldrh	r3, [r7, #10]
 80012ea:	893a      	ldrh	r2, [r7, #8]
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fd8c 	bl	8000e0c <WIZCHIP_READ_BUF>
    wizdata += size;
 80012f4:	893b      	ldrh	r3, [r7, #8]
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	603b      	str	r3, [r7, #0]
    size = len - size;
 80012fc:	88ba      	ldrh	r2, [r7, #4]
 80012fe:	893b      	ldrh	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	813b      	strh	r3, [r7, #8]
	src_ptr = getSn_RxBASE(sn);
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe54 	bl	8000fb4 <getSn_RxBASE>
 800130c:	4603      	mov	r3, r0
 800130e:	817b      	strh	r3, [r7, #10]
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, size);
 8001310:	897b      	ldrh	r3, [r7, #10]
 8001312:	893a      	ldrh	r2, [r7, #8]
 8001314:	6839      	ldr	r1, [r7, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fd78 	bl	8000e0c <WIZCHIP_READ_BUF>
 800131c:	e005      	b.n	800132a <wiz_recv_data+0x12c>
  } 
  else
  {
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 800131e:	897b      	ldrh	r3, [r7, #10]
 8001320:	88ba      	ldrh	r2, [r7, #4]
 8001322:	6839      	ldr	r1, [r7, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fd71 	bl	8000e0c <WIZCHIP_READ_BUF>
  }
    
  ptr += len;
 800132a:	89fa      	ldrh	r2, [r7, #14]
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	81fb      	strh	r3, [r7, #14]
  
  setSn_RX_RD(sn, ptr);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	3304      	adds	r3, #4
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	3328      	adds	r3, #40	; 0x28
 800133a:	461a      	mov	r2, r3
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	b29b      	uxth	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4619      	mov	r1, r3
 8001346:	4610      	mov	r0, r2
 8001348:	f7ff fcb6 	bl	8000cb8 <WIZCHIP_WRITE>
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	3304      	adds	r3, #4
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	3329      	adds	r3, #41	; 0x29
 8001354:	461a      	mov	r2, r3
 8001356:	89fb      	ldrh	r3, [r7, #14]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	4619      	mov	r1, r3
 800135c:	4610      	mov	r0, r2
 800135e:	f7ff fcab 	bl	8000cb8 <WIZCHIP_WRITE>
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	bd90      	pop	{r4, r7, pc}

0800136a <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800136a:	b590      	push	{r4, r7, lr}
 800136c:	b085      	sub	sp, #20
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	460a      	mov	r2, r1
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	4613      	mov	r3, r2
 8001378:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;

  ptr = getSn_RX_RD(sn);
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	3304      	adds	r3, #4
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	3328      	adds	r3, #40	; 0x28
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fcc6 	bl	8000d14 <WIZCHIP_READ>
 8001388:	4603      	mov	r3, r0
 800138a:	b29b      	uxth	r3, r3
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b29c      	uxth	r4, r3
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	3304      	adds	r3, #4
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	3329      	adds	r3, #41	; 0x29
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fcbb 	bl	8000d14 <WIZCHIP_READ>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4423      	add	r3, r4
 80013a4:	81fb      	strh	r3, [r7, #14]
  
  ptr += len;
 80013a6:	89fa      	ldrh	r2, [r7, #14]
 80013a8:	88bb      	ldrh	r3, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	81fb      	strh	r3, [r7, #14]
  setSn_RX_RD(sn,ptr);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	3304      	adds	r3, #4
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	3328      	adds	r3, #40	; 0x28
 80013b6:	461a      	mov	r2, r3
 80013b8:	89fb      	ldrh	r3, [r7, #14]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	b29b      	uxth	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4619      	mov	r1, r3
 80013c2:	4610      	mov	r0, r2
 80013c4:	f7ff fc78 	bl	8000cb8 <WIZCHIP_WRITE>
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	3304      	adds	r3, #4
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	3329      	adds	r3, #41	; 0x29
 80013d0:	461a      	mov	r2, r3
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	4610      	mov	r0, r2
 80013da:	f7ff fc6d 	bl	8000cb8 <WIZCHIP_WRITE>
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
	...

080013e8 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4604      	mov	r4, r0
 80013f0:	4608      	mov	r0, r1
 80013f2:	4611      	mov	r1, r2
 80013f4:	461a      	mov	r2, r3
 80013f6:	4623      	mov	r3, r4
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	4603      	mov	r3, r0
 80013fc:	71bb      	strb	r3, [r7, #6]
 80013fe:	460b      	mov	r3, r1
 8001400:	80bb      	strh	r3, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2b04      	cmp	r3, #4
 800140a:	d902      	bls.n	8001412 <socket+0x2a>
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
 8001410:	e0de      	b.n	80015d0 <socket+0x1e8>
	switch(protocol)
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	2b05      	cmp	r3, #5
 8001416:	d019      	beq.n	800144c <socket+0x64>
 8001418:	2b05      	cmp	r3, #5
 800141a:	dc14      	bgt.n	8001446 <socket+0x5e>
 800141c:	2b01      	cmp	r3, #1
 800141e:	d005      	beq.n	800142c <socket+0x44>
 8001420:	2b00      	cmp	r3, #0
 8001422:	dd10      	ble.n	8001446 <socket+0x5e>
 8001424:	3b02      	subs	r3, #2
 8001426:	2b02      	cmp	r3, #2
 8001428:	d80d      	bhi.n	8001446 <socket+0x5e>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800142a:	e012      	b.n	8001452 <socket+0x6a>
            getSIPR((uint8_t*)&taddr);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2204      	movs	r2, #4
 8001432:	4619      	mov	r1, r3
 8001434:	200f      	movs	r0, #15
 8001436:	f7ff fce9 	bl	8000e0c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d107      	bne.n	8001450 <socket+0x68>
 8001440:	f06f 0302 	mvn.w	r3, #2
 8001444:	e0c4      	b.n	80015d0 <socket+0x1e8>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8001446:	f06f 0304 	mvn.w	r3, #4
 800144a:	e0c1      	b.n	80015d0 <socket+0x1e8>
         break;
 800144c:	bf00      	nop
 800144e:	e000      	b.n	8001452 <socket+0x6a>
	    break;
 8001450:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d002      	beq.n	8001462 <socket+0x7a>
 800145c:	f06f 0305 	mvn.w	r3, #5
 8001460:	e0b6      	b.n	80015d0 <socket+0x1e8>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01c      	beq.n	80014a2 <socket+0xba>
	{
   	switch(protocol)
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d002      	beq.n	8001474 <socket+0x8c>
 800146e:	2b02      	cmp	r3, #2
 8001470:	d008      	beq.n	8001484 <socket+0x9c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8001472:	e016      	b.n	80014a2 <socket+0xba>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10e      	bne.n	800149c <socket+0xb4>
 800147e:	f06f 0305 	mvn.w	r3, #5
 8001482:	e0a5      	b.n	80015d0 <socket+0x1e8>
   	      if(flag & SF_IGMP_VER2)
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	2b00      	cmp	r3, #0
 800148c:	d008      	beq.n	80014a0 <socket+0xb8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800148e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db04      	blt.n	80014a0 <socket+0xb8>
 8001496:	f06f 0305 	mvn.w	r3, #5
 800149a:	e099      	b.n	80015d0 <socket+0x1e8>
   	      break;
 800149c:	bf00      	nop
 800149e:	e000      	b.n	80014a2 <socket+0xba>
   	      break;
 80014a0:	bf00      	nop
   	}
   }
	close(sn);
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f8a1 	bl	80015ec <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	3304      	adds	r3, #4
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	4618      	mov	r0, r3
 80014b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014b6:	f023 030f 	bic.w	r3, r3, #15
 80014ba:	b25a      	sxtb	r2, r3
 80014bc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fbf6 	bl	8000cb8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80014cc:	88bb      	ldrh	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d110      	bne.n	80014f4 <socket+0x10c>
	{
	   port = sock_any_port++;
 80014d2:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <socket+0x1f0>)
 80014d4:	881b      	ldrh	r3, [r3, #0]
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	b291      	uxth	r1, r2
 80014da:	4a3f      	ldr	r2, [pc, #252]	; (80015d8 <socket+0x1f0>)
 80014dc:	8011      	strh	r1, [r2, #0]
 80014de:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80014e0:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <socket+0x1f0>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d103      	bne.n	80014f4 <socket+0x10c>
 80014ec:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <socket+0x1f0>)
 80014ee:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80014f2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	3304      	adds	r3, #4
 80014f8:	021b      	lsls	r3, r3, #8
 80014fa:	3304      	adds	r3, #4
 80014fc:	461a      	mov	r2, r3
 80014fe:	88bb      	ldrh	r3, [r7, #4]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	b29b      	uxth	r3, r3
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4619      	mov	r1, r3
 8001508:	4610      	mov	r0, r2
 800150a:	f7ff fbd5 	bl	8000cb8 <WIZCHIP_WRITE>
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	3304      	adds	r3, #4
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	3305      	adds	r3, #5
 8001516:	461a      	mov	r2, r3
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f7ff fbca 	bl	8000cb8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	3304      	adds	r3, #4
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	3301      	adds	r3, #1
 800152c:	2101      	movs	r1, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fbc2 	bl	8000cb8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001534:	bf00      	nop
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	3304      	adds	r3, #4
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	3301      	adds	r3, #1
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fbe8 	bl	8000d14 <WIZCHIP_READ>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f5      	bne.n	8001536 <socket+0x14e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	2201      	movs	r2, #1
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	b21b      	sxth	r3, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <socket+0x1f4>)
 800155a:	881b      	ldrh	r3, [r3, #0]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4013      	ands	r3, r2
 8001560:	b21b      	sxth	r3, r3
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <socket+0x1f4>)
 8001566:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	f003 0201 	and.w	r2, r3, #1
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	b21a      	sxth	r2, r3
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <socket+0x1f4>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b21b      	sxth	r3, r3
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <socket+0x1f4>)
 8001584:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2201      	movs	r2, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	b21b      	sxth	r3, r3
 8001590:	43db      	mvns	r3, r3
 8001592:	b21a      	sxth	r2, r3
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <socket+0x1f8>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	b21b      	sxth	r3, r3
 800159a:	4013      	ands	r3, r2
 800159c:	b21b      	sxth	r3, r3
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <socket+0x1f8>)
 80015a2:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	4a0f      	ldr	r2, [pc, #60]	; (80015e4 <socket+0x1fc>)
 80015a8:	2100      	movs	r1, #0
 80015aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <socket+0x200>)
 80015b2:	2100      	movs	r1, #0
 80015b4:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80015b6:	bf00      	nop
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	3304      	adds	r3, #4
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	3303      	adds	r3, #3
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fba7 	bl	8000d14 <WIZCHIP_READ>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f5      	beq.n	80015b8 <socket+0x1d0>
   return (int8_t)sn;
 80015cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	2000011c 	.word	0x2000011c
 80015e0:	2000011e 	.word	0x2000011e
 80015e4:	20000120 	.word	0x20000120
 80015e8:	20000128 	.word	0x20000128

080015ec <close>:

int8_t close(uint8_t sn)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d902      	bls.n	8001602 <close+0x16>
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	e04d      	b.n	800169e <close+0xb2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	3304      	adds	r3, #4
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	3301      	adds	r3, #1
 800160a:	2110      	movs	r1, #16
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fb53 	bl	8000cb8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8001612:	bf00      	nop
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	3304      	adds	r3, #4
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	3301      	adds	r3, #1
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb79 	bl	8000d14 <WIZCHIP_READ>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f5      	bne.n	8001614 <close+0x28>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	3304      	adds	r3, #4
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	3302      	adds	r3, #2
 8001630:	21ff      	movs	r1, #255	; 0xff
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fb40 	bl	8000cb8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	2201      	movs	r2, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	b21b      	sxth	r3, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	b21a      	sxth	r2, r3
 8001646:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <close+0xbc>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	b21b      	sxth	r3, r3
 800164c:	4013      	ands	r3, r2
 800164e:	b21b      	sxth	r3, r3
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <close+0xbc>)
 8001654:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2201      	movs	r2, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	b21b      	sxth	r3, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	b21a      	sxth	r2, r3
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <close+0xc0>)
 8001666:	881b      	ldrh	r3, [r3, #0]
 8001668:	b21b      	sxth	r3, r3
 800166a:	4013      	ands	r3, r2
 800166c:	b21b      	sxth	r3, r3
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <close+0xc0>)
 8001672:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <close+0xc4>)
 8001678:	2100      	movs	r1, #0
 800167a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800167e:	79fb      	ldrb	r3, [r7, #7]
 8001680:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <close+0xc8>)
 8001682:	2100      	movs	r1, #0
 8001684:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8001686:	bf00      	nop
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	3304      	adds	r3, #4
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	3303      	adds	r3, #3
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fb3f 	bl	8000d14 <WIZCHIP_READ>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f5      	bne.n	8001688 <close+0x9c>
	return SOCK_OK;
 800169c:	2301      	movs	r3, #1
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2000011c 	.word	0x2000011c
 80016ac:	2000011e 	.word	0x2000011e
 80016b0:	20000120 	.word	0x20000120
 80016b4:	20000128 	.word	0x20000128

080016b8 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
 80016c4:	4613      	mov	r3, r2
 80016c6:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d902      	bls.n	80016d4 <connect+0x1c>
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e0b1      	b.n	8001838 <connect+0x180>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	3304      	adds	r3, #4
 80016d8:	021b      	lsls	r3, r3, #8
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fb1a 	bl	8000d14 <WIZCHIP_READ>
 80016e0:	4603      	mov	r3, r0
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d002      	beq.n	80016f0 <connect+0x38>
 80016ea:	f06f 0304 	mvn.w	r3, #4
 80016ee:	e0a3      	b.n	8001838 <connect+0x180>
   CHECK_SOCKINIT();
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	3304      	adds	r3, #4
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	3303      	adds	r3, #3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fb0b 	bl	8000d14 <WIZCHIP_READ>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b13      	cmp	r3, #19
 8001702:	d002      	beq.n	800170a <connect+0x52>
 8001704:	f06f 0302 	mvn.w	r3, #2
 8001708:	e096      	b.n	8001838 <connect+0x180>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	3201      	adds	r2, #1
 8001718:	7812      	ldrb	r2, [r2, #0]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	021b      	lsls	r3, r3, #8
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	3202      	adds	r2, #2
 8001726:	7812      	ldrb	r2, [r2, #0]
 8001728:	4413      	add	r3, r2
 800172a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	021b      	lsls	r3, r3, #8
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	3203      	adds	r2, #3
 8001734:	7812      	ldrb	r2, [r2, #0]
 8001736:	4413      	add	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d002      	beq.n	8001748 <connect+0x90>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d102      	bne.n	800174e <connect+0x96>
 8001748:	f06f 030b 	mvn.w	r3, #11
 800174c:	e074      	b.n	8001838 <connect+0x180>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <connect+0xa2>
 8001754:	f06f 030a 	mvn.w	r3, #10
 8001758:	e06e      	b.n	8001838 <connect+0x180>
	setSn_DIPR(sn,addr);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	3304      	adds	r3, #4
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	330c      	adds	r3, #12
 8001762:	2204      	movs	r2, #4
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fb02 	bl	8000d70 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	3304      	adds	r3, #4
 8001770:	021b      	lsls	r3, r3, #8
 8001772:	3310      	adds	r3, #16
 8001774:	461a      	mov	r2, r3
 8001776:	88bb      	ldrh	r3, [r7, #4]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	b2db      	uxtb	r3, r3
 800177e:	4619      	mov	r1, r3
 8001780:	4610      	mov	r0, r2
 8001782:	f7ff fa99 	bl	8000cb8 <WIZCHIP_WRITE>
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	3304      	adds	r3, #4
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	3311      	adds	r3, #17
 800178e:	461a      	mov	r2, r3
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f7ff fa8e 	bl	8000cb8 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	3304      	adds	r3, #4
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	3301      	adds	r3, #1
 80017a4:	2104      	movs	r1, #4
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fa86 	bl	8000cb8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80017ac:	bf00      	nop
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	3304      	adds	r3, #4
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	3301      	adds	r3, #1
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff faac 	bl	8000d14 <WIZCHIP_READ>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f5      	bne.n	80017ae <connect+0xf6>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <connect+0x188>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	fa42 f303 	asr.w	r3, r2, r3
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d025      	beq.n	8001822 <connect+0x16a>
 80017d6:	2300      	movs	r3, #0
 80017d8:	e02e      	b.n	8001838 <connect+0x180>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	3304      	adds	r3, #4
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	3302      	adds	r3, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fa96 	bl	8000d14 <WIZCHIP_READ>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00a      	beq.n	8001808 <connect+0x150>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	3304      	adds	r3, #4
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	3302      	adds	r3, #2
 80017fa:	2108      	movs	r1, #8
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fa5b 	bl	8000cb8 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8001802:	f06f 030c 	mvn.w	r3, #12
 8001806:	e017      	b.n	8001838 <connect+0x180>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	3304      	adds	r3, #4
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	3303      	adds	r3, #3
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fa7f 	bl	8000d14 <WIZCHIP_READ>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d102      	bne.n	8001822 <connect+0x16a>
		{
			return SOCKERR_SOCKCLOSED;
 800181c:	f06f 0303 	mvn.w	r3, #3
 8001820:	e00a      	b.n	8001838 <connect+0x180>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	3304      	adds	r3, #4
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	3303      	adds	r3, #3
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fa72 	bl	8000d14 <WIZCHIP_READ>
 8001830:	4603      	mov	r3, r0
 8001832:	2b17      	cmp	r3, #23
 8001834:	d1d1      	bne.n	80017da <connect+0x122>
		}
	}
   
   return SOCK_OK;
 8001836:	2301      	movs	r3, #1
}
 8001838:	4618      	mov	r0, r3
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2000011c 	.word	0x2000011c

08001844 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	2b04      	cmp	r3, #4
 8001852:	d902      	bls.n	800185a <disconnect+0x16>
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
 8001858:	e059      	b.n	800190e <disconnect+0xca>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	3304      	adds	r3, #4
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fa57 	bl	8000d14 <WIZCHIP_READ>
 8001866:	4603      	mov	r3, r0
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	2b01      	cmp	r3, #1
 800186e:	d002      	beq.n	8001876 <disconnect+0x32>
 8001870:	f06f 0304 	mvn.w	r3, #4
 8001874:	e04b      	b.n	800190e <disconnect+0xca>
	setSn_CR(sn,Sn_CR_DISCON);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	3304      	adds	r3, #4
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	3301      	adds	r3, #1
 800187e:	2108      	movs	r1, #8
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fa19 	bl	8000cb8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001886:	bf00      	nop
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	3304      	adds	r3, #4
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	3301      	adds	r3, #1
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fa3f 	bl	8000d14 <WIZCHIP_READ>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1f5      	bne.n	8001888 <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2201      	movs	r2, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <disconnect+0xd4>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <disconnect+0xd4>)
 80018b8:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <disconnect+0xd8>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	fa42 f303 	asr.w	r3, r2, r3
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d014      	beq.n	80018f8 <disconnect+0xb4>
 80018ce:	2300      	movs	r3, #0
 80018d0:	e01d      	b.n	800190e <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	3304      	adds	r3, #4
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	3302      	adds	r3, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fa1a 	bl	8000d14 <WIZCHIP_READ>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d006      	beq.n	80018f8 <disconnect+0xb4>
	   {
	      close(sn);
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fe7d 	bl	80015ec <close>
	      return SOCKERR_TIMEOUT;
 80018f2:	f06f 030c 	mvn.w	r3, #12
 80018f6:	e00a      	b.n	800190e <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	3304      	adds	r3, #4
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	3303      	adds	r3, #3
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fa07 	bl	8000d14 <WIZCHIP_READ>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d1e2      	bne.n	80018d2 <disconnect+0x8e>
	   }
	}
	return SOCK_OK;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000011e 	.word	0x2000011e
 800191c:	2000011c 	.word	0x2000011c

08001920 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	4613      	mov	r3, r2
 800192e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8001930:	2300      	movs	r3, #0
 8001932:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8001934:	2300      	movs	r3, #0
 8001936:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	2b04      	cmp	r3, #4
 800193c:	d902      	bls.n	8001944 <send+0x24>
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e0d8      	b.n	8001af6 <send+0x1d6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	3304      	adds	r3, #4
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f9e2 	bl	8000d14 <WIZCHIP_READ>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	2b01      	cmp	r3, #1
 8001958:	d002      	beq.n	8001960 <send+0x40>
 800195a:	f06f 0304 	mvn.w	r3, #4
 800195e:	e0ca      	b.n	8001af6 <send+0x1d6>
   CHECK_SOCKDATA();
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <send+0x4c>
 8001966:	f06f 030d 	mvn.w	r3, #13
 800196a:	e0c4      	b.n	8001af6 <send+0x1d6>
   tmp = getSn_SR(sn);
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	3304      	adds	r3, #4
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	3303      	adds	r3, #3
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f9cd 	bl	8000d14 <WIZCHIP_READ>
 800197a:	4603      	mov	r3, r0
 800197c:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	2b17      	cmp	r3, #23
 8001982:	d005      	beq.n	8001990 <send+0x70>
 8001984:	7bfb      	ldrb	r3, [r7, #15]
 8001986:	2b1c      	cmp	r3, #28
 8001988:	d002      	beq.n	8001990 <send+0x70>
 800198a:	f06f 0306 	mvn.w	r3, #6
 800198e:	e0b2      	b.n	8001af6 <send+0x1d6>
   if( sock_is_sending & (1<<sn) )
 8001990:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <send+0x1e0>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	fa42 f303 	asr.w	r3, r2, r3
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d033      	beq.n	8001a0c <send+0xec>
   {
      tmp = getSn_IR(sn);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	3304      	adds	r3, #4
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	3302      	adds	r3, #2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff f9b1 	bl	8000d14 <WIZCHIP_READ>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d017      	beq.n	80019f0 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	3304      	adds	r3, #4
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	3302      	adds	r3, #2
 80019c8:	2110      	movs	r1, #16
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f974 	bl	8000cb8 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	2201      	movs	r2, #1
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	b21b      	sxth	r3, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	b21a      	sxth	r2, r3
 80019de:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <send+0x1e0>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	4013      	ands	r3, r2
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b45      	ldr	r3, [pc, #276]	; (8001b00 <send+0x1e0>)
 80019ec:	801a      	strh	r2, [r3, #0]
 80019ee:	e00d      	b.n	8001a0c <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <send+0xe8>
      {
         close(sn);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fdf5 	bl	80015ec <close>
         return SOCKERR_TIMEOUT;
 8001a02:	f06f 030c 	mvn.w	r3, #12
 8001a06:	e076      	b.n	8001af6 <send+0x1d6>
      }
      else return SOCK_BUSY;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	e074      	b.n	8001af6 <send+0x1d6>
   }
   freesize = getSn_TxMAX(sn);
 8001a0c:	201b      	movs	r0, #27
 8001a0e:	f7ff f981 	bl	8000d14 <WIZCHIP_READ>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4619      	mov	r1, r3
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	ea01 0203 	and.w	r2, r1, r3
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa42 f303 	asr.w	r3, r2, r3
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	029b      	lsls	r3, r3, #10
 8001a36:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001a38:	88ba      	ldrh	r2, [r7, #4]
 8001a3a:	89bb      	ldrh	r3, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d901      	bls.n	8001a44 <send+0x124>
 8001a40:	89bb      	ldrh	r3, [r7, #12]
 8001a42:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fa2e 	bl	8000ea8 <getSn_TX_FSR>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	3304      	adds	r3, #4
 8001a54:	021b      	lsls	r3, r3, #8
 8001a56:	3303      	adds	r3, #3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f95b 	bl	8000d14 <WIZCHIP_READ>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
 8001a64:	2b17      	cmp	r3, #23
 8001a66:	d009      	beq.n	8001a7c <send+0x15c>
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	2b1c      	cmp	r3, #28
 8001a6c:	d006      	beq.n	8001a7c <send+0x15c>
      {
         close(sn);
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fdbb 	bl	80015ec <close>
         return SOCKERR_SOCKSTATUS;
 8001a76:	f06f 0306 	mvn.w	r3, #6
 8001a7a:	e03c      	b.n	8001af6 <send+0x1d6>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <send+0x1e4>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	fa42 f303 	asr.w	r3, r2, r3
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d005      	beq.n	8001a9c <send+0x17c>
 8001a90:	88ba      	ldrh	r2, [r7, #4]
 8001a92:	89bb      	ldrh	r3, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d901      	bls.n	8001a9c <send+0x17c>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e02c      	b.n	8001af6 <send+0x1d6>
      if(len <= freesize) break;
 8001a9c:	88ba      	ldrh	r2, [r7, #4]
 8001a9e:	89bb      	ldrh	r3, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d900      	bls.n	8001aa6 <send+0x186>
      freesize = getSn_TX_FSR(sn);
 8001aa4:	e7ce      	b.n	8001a44 <send+0x124>
      if(len <= freesize) break;
 8001aa6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001aa8:	88ba      	ldrh	r2, [r7, #4]
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	6839      	ldr	r1, [r7, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff faec 	bl	800108c <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	3301      	adds	r3, #1
 8001abc:	2120      	movs	r1, #32
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f8fa 	bl	8000cb8 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001ac4:	bf00      	nop
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	3301      	adds	r3, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f920 	bl	8000d14 <WIZCHIP_READ>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f5      	bne.n	8001ac6 <send+0x1a6>
   sock_is_sending |= (1 << sn);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	2201      	movs	r2, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <send+0x1e0>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	4313      	orrs	r3, r2
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <send+0x1e0>)
 8001af2:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001af4:	88bb      	ldrh	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000011e 	.word	0x2000011e
 8001b04:	2000011c 	.word	0x2000011c

08001b08 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	6039      	str	r1, [r7, #0]
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	4613      	mov	r3, r2
 8001b16:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d902      	bls.n	8001b2c <recv+0x24>
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2a:	e0a8      	b.n	8001c7e <recv+0x176>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	3304      	adds	r3, #4
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f8ee 	bl	8000d14 <WIZCHIP_READ>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d002      	beq.n	8001b48 <recv+0x40>
 8001b42:	f06f 0304 	mvn.w	r3, #4
 8001b46:	e09a      	b.n	8001c7e <recv+0x176>
   CHECK_SOCKDATA();
 8001b48:	88bb      	ldrh	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d102      	bne.n	8001b54 <recv+0x4c>
 8001b4e:	f06f 030d 	mvn.w	r3, #13
 8001b52:	e094      	b.n	8001c7e <recv+0x176>
   
   recvsize = getSn_RxMAX(sn);
 8001b54:	201a      	movs	r0, #26
 8001b56:	f7ff f8dd 	bl	8000d14 <WIZCHIP_READ>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	2203      	movs	r2, #3
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	ea01 0203 	and.w	r2, r1, r3
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	fa42 f303 	asr.w	r3, r2, r3
 8001b74:	2201      	movs	r2, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	029b      	lsls	r3, r3, #10
 8001b7e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001b80:	89ba      	ldrh	r2, [r7, #12]
 8001b82:	88bb      	ldrh	r3, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d201      	bcs.n	8001b8c <recv+0x84>
 8001b88:	89bb      	ldrh	r3, [r7, #12]
 8001b8a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f9cd 	bl	8000f2e <getSn_RX_RSR>
 8001b94:	4603      	mov	r3, r0
 8001b96:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f8b7 	bl	8000d14 <WIZCHIP_READ>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b17      	cmp	r3, #23
 8001bae:	d030      	beq.n	8001c12 <recv+0x10a>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	2b1c      	cmp	r3, #28
 8001bb4:	d126      	bne.n	8001c04 <recv+0xfc>
            {
               if(recvsize != 0) break;
 8001bb6:	89bb      	ldrh	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d13d      	bne.n	8001c38 <recv+0x130>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff f972 	bl	8000ea8 <getSn_TX_FSR>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461c      	mov	r4, r3
 8001bc8:	201b      	movs	r0, #27
 8001bca:	f7ff f8a3 	bl	8000d14 <WIZCHIP_READ>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	ea01 0203 	and.w	r2, r1, r3
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa42 f303 	asr.w	r3, r2, r3
 8001be8:	2201      	movs	r2, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	029b      	lsls	r3, r3, #10
 8001bf2:	429c      	cmp	r4, r3
 8001bf4:	d10d      	bne.n	8001c12 <recv+0x10a>
               {
                  close(sn);
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fcf7 	bl	80015ec <close>
                  return SOCKERR_SOCKSTATUS;
 8001bfe:	f06f 0306 	mvn.w	r3, #6
 8001c02:	e03c      	b.n	8001c7e <recv+0x176>
               }
            }
            else
            {
               close(sn);
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fcf0 	bl	80015ec <close>
               return SOCKERR_SOCKSTATUS;
 8001c0c:	f06f 0306 	mvn.w	r3, #6
 8001c10:	e035      	b.n	8001c7e <recv+0x176>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <recv+0x180>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	fa42 f303 	asr.w	r3, r2, r3
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d004      	beq.n	8001c30 <recv+0x128>
 8001c26:	89bb      	ldrh	r3, [r7, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <recv+0x128>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e026      	b.n	8001c7e <recv+0x176>
         if(recvsize != 0) break;
 8001c30:	89bb      	ldrh	r3, [r7, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <recv+0x134>
         recvsize = getSn_RX_RSR(sn);
 8001c36:	e7a9      	b.n	8001b8c <recv+0x84>
               if(recvsize != 0) break;
 8001c38:	bf00      	nop
 8001c3a:	e000      	b.n	8001c3e <recv+0x136>
         if(recvsize != 0) break;
 8001c3c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001c3e:	89ba      	ldrh	r2, [r7, #12]
 8001c40:	88bb      	ldrh	r3, [r7, #4]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d201      	bcs.n	8001c4a <recv+0x142>
 8001c46:	89bb      	ldrh	r3, [r7, #12]
 8001c48:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8001c4a:	88ba      	ldrh	r2, [r7, #4]
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	6839      	ldr	r1, [r7, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fad4 	bl	80011fe <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	2140      	movs	r1, #64	; 0x40
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f829 	bl	8000cb8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001c66:	bf00      	nop
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	3301      	adds	r3, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f84f 	bl	8000d14 <WIZCHIP_READ>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f5      	bne.n	8001c68 <recv+0x160>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001c7c:	88bb      	ldrh	r3, [r7, #4]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
 8001c86:	bf00      	nop
 8001c88:	2000011c 	.word	0x2000011c

08001c8c <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	4603      	mov	r3, r0
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d902      	bls.n	8001cb2 <sendto+0x26>
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb0:	e139      	b.n	8001f26 <sendto+0x29a>
   switch(getSn_MR(sn) & 0x0F)
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f82b 	bl	8000d14 <WIZCHIP_READ>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	3b02      	subs	r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d902      	bls.n	8001cd0 <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001cca:	f06f 0304 	mvn.w	r3, #4
 8001cce:	e12a      	b.n	8001f26 <sendto+0x29a>
         break;
 8001cd0:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001cd2:	89bb      	ldrh	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <sendto+0x52>
 8001cd8:	f06f 030d 	mvn.w	r3, #13
 8001cdc:	e123      	b.n	8001f26 <sendto+0x29a>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	3201      	adds	r2, #1
 8001cec:	7812      	ldrb	r2, [r2, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	3202      	adds	r2, #2
 8001cfa:	7812      	ldrb	r2, [r2, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	3203      	adds	r2, #3
 8001d08:	7812      	ldrb	r2, [r2, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10d      	bne.n	8001d30 <sendto+0xa4>
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	3304      	adds	r3, #4
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fffa 	bl	8000d14 <WIZCHIP_READ>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	d002      	beq.n	8001d30 <sendto+0xa4>
 8001d2a:	f06f 030b 	mvn.w	r3, #11
 8001d2e:	e0fa      	b.n	8001f26 <sendto+0x29a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8001d30:	8c3b      	ldrh	r3, [r7, #32]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10d      	bne.n	8001d52 <sendto+0xc6>
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe ffe9 	bl	8000d14 <WIZCHIP_READ>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d002      	beq.n	8001d52 <sendto+0xc6>
 8001d4c:	f06f 030a 	mvn.w	r3, #10
 8001d50:	e0e9      	b.n	8001f26 <sendto+0x29a>
   tmp = getSn_SR(sn);
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	3304      	adds	r3, #4
 8001d56:	021b      	lsls	r3, r3, #8
 8001d58:	3303      	adds	r3, #3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ffda 	bl	8000d14 <WIZCHIP_READ>
 8001d60:	4603      	mov	r3, r0
 8001d62:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	2b42      	cmp	r3, #66	; 0x42
 8001d68:	d008      	beq.n	8001d7c <sendto+0xf0>
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	2b22      	cmp	r3, #34	; 0x22
 8001d6e:	d005      	beq.n	8001d7c <sendto+0xf0>
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b32      	cmp	r3, #50	; 0x32
 8001d74:	d002      	beq.n	8001d7c <sendto+0xf0>
 8001d76:	f06f 0306 	mvn.w	r3, #6
 8001d7a:	e0d4      	b.n	8001f26 <sendto+0x29a>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	330c      	adds	r3, #12
 8001d84:	2204      	movs	r2, #4
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7fe fff1 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	3304      	adds	r3, #4
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	3310      	adds	r3, #16
 8001d96:	461a      	mov	r2, r3
 8001d98:	8c3b      	ldrh	r3, [r7, #32]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f7fe ff88 	bl	8000cb8 <WIZCHIP_WRITE>
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	3304      	adds	r3, #4
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	3311      	adds	r3, #17
 8001db0:	461a      	mov	r2, r3
 8001db2:	8c3b      	ldrh	r3, [r7, #32]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	4619      	mov	r1, r3
 8001db8:	4610      	mov	r0, r2
 8001dba:	f7fe ff7d 	bl	8000cb8 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8001dbe:	201b      	movs	r0, #27
 8001dc0:	f7fe ffa8 	bl	8000d14 <WIZCHIP_READ>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	ea01 0203 	and.w	r2, r1, r3
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	fa42 f303 	asr.w	r3, r2, r3
 8001dde:	2201      	movs	r2, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	029b      	lsls	r3, r3, #10
 8001de8:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8001dea:	89ba      	ldrh	r2, [r7, #12]
 8001dec:	8abb      	ldrh	r3, [r7, #20]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d901      	bls.n	8001df6 <sendto+0x16a>
 8001df2:	8abb      	ldrh	r3, [r7, #20]
 8001df4:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff f855 	bl	8000ea8 <getSn_TX_FSR>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	3304      	adds	r3, #4
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	3303      	adds	r3, #3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe ff82 	bl	8000d14 <WIZCHIP_READ>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <sendto+0x190>
 8001e16:	f06f 0303 	mvn.w	r3, #3
 8001e1a:	e084      	b.n	8001f26 <sendto+0x29a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8001e1c:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <sendto+0x2a4>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	fa42 f303 	asr.w	r3, r2, r3
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <sendto+0x1b0>
 8001e30:	89ba      	ldrh	r2, [r7, #12]
 8001e32:	8abb      	ldrh	r3, [r7, #20]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d901      	bls.n	8001e3c <sendto+0x1b0>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	e074      	b.n	8001f26 <sendto+0x29a>
      if(len <= freesize) break;
 8001e3c:	89ba      	ldrh	r2, [r7, #12]
 8001e3e:	8abb      	ldrh	r3, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d900      	bls.n	8001e46 <sendto+0x1ba>
      freesize = getSn_TX_FSR(sn);
 8001e44:	e7d7      	b.n	8001df6 <sendto+0x16a>
      if(len <= freesize) break;
 8001e46:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8001e48:	89ba      	ldrh	r2, [r7, #12]
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff f91c 	bl	800108c <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2204      	movs	r2, #4
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	200f      	movs	r0, #15
 8001e5e:	f7fe ffd5 	bl	8000e0c <WIZCHIP_READ_BUF>
      if(taddr == 0)
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10c      	bne.n	8001e82 <sendto+0x1f6>
      {
         getSUBR((uint8_t*)&taddr);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	2005      	movs	r0, #5
 8001e72:	f7fe ffcb 	bl	8000e0c <WIZCHIP_READ_BUF>
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8001e76:	2204      	movs	r2, #4
 8001e78:	492e      	ldr	r1, [pc, #184]	; (8001f34 <sendto+0x2a8>)
 8001e7a:	2005      	movs	r0, #5
 8001e7c:	f7fe ff78 	bl	8000d70 <WIZCHIP_WRITE_BUF>
 8001e80:	e001      	b.n	8001e86 <sendto+0x1fa>
      }
      else taddr = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	2120      	movs	r1, #32
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe ff11 	bl	8000cb8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8001e96:	bf00      	nop
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe ff37 	bl	8000d14 <WIZCHIP_READ>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f5      	bne.n	8001e98 <sendto+0x20c>
   while(1)
   {
      tmp = getSn_IR(sn);
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe ff2d 	bl	8000d14 <WIZCHIP_READ>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00c      	beq.n	8001ee2 <sendto+0x256>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	3302      	adds	r3, #2
 8001ed0:	2110      	movs	r1, #16
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fef0 	bl	8000cb8 <WIZCHIP_WRITE>
         break;
 8001ed8:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d021      	beq.n	8001f24 <sendto+0x298>
 8001ee0:	e019      	b.n	8001f16 <sendto+0x28a>
      else if(tmp & Sn_IR_TIMEOUT)
 8001ee2:	7dfb      	ldrb	r3, [r7, #23]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0df      	beq.n	8001eac <sendto+0x220>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	2108      	movs	r1, #8
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe fede 	bl	8000cb8 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d006      	beq.n	8001f10 <sendto+0x284>
 8001f02:	f107 0310 	add.w	r3, r7, #16
 8001f06:	2204      	movs	r2, #4
 8001f08:	4619      	mov	r1, r3
 8001f0a:	2005      	movs	r0, #5
 8001f0c:	f7fe ff30 	bl	8000d70 <WIZCHIP_WRITE_BUF>
         return SOCKERR_TIMEOUT;
 8001f10:	f06f 030c 	mvn.w	r3, #12
 8001f14:	e007      	b.n	8001f26 <sendto+0x29a>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8001f16:	f107 0310 	add.w	r3, r7, #16
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	2005      	movs	r0, #5
 8001f20:	f7fe ff26 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001f24:	89bb      	ldrh	r3, [r7, #12]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	2000011c 	.word	0x2000011c
 8001f34:	08010440 	.word	0x08010440

08001f38 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	4603      	mov	r3, r0
 8001f44:	73fb      	strb	r3, [r7, #15]
 8001f46:	4613      	mov	r3, r2
 8001f48:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d902      	bls.n	8001f5a <recvfrom+0x22>
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	e1c6      	b.n	80022e8 <recvfrom+0x3b0>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fed7 	bl	8000d14 <WIZCHIP_READ>
 8001f66:	4603      	mov	r3, r0
 8001f68:	777b      	strb	r3, [r7, #29]
 8001f6a:	7f7b      	ldrb	r3, [r7, #29]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	dc02      	bgt.n	8001f7a <recvfrom+0x42>
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	da05      	bge.n	8001f84 <recvfrom+0x4c>
 8001f78:	e001      	b.n	8001f7e <recvfrom+0x46>
 8001f7a:	2b05      	cmp	r3, #5
 8001f7c:	d004      	beq.n	8001f88 <recvfrom+0x50>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8001f7e:	f06f 0304 	mvn.w	r3, #4
 8001f82:	e1b1      	b.n	80022e8 <recvfrom+0x3b0>
         break;
 8001f84:	bf00      	nop
 8001f86:	e000      	b.n	8001f8a <recvfrom+0x52>
         break;
 8001f88:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8001f8a:	89bb      	ldrh	r3, [r7, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <recvfrom+0x5e>
 8001f90:	f06f 030d 	mvn.w	r3, #13
 8001f94:	e1a8      	b.n	80022e8 <recvfrom+0x3b0>
   if(sock_remained_size[sn] == 0)
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	4a82      	ldr	r2, [pc, #520]	; (80021a4 <recvfrom+0x26c>)
 8001f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d126      	bne.n	8001ff0 <recvfrom+0xb8>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe ffc2 	bl	8000f2e <getSn_RX_RSR>
 8001faa:	4603      	mov	r3, r0
 8001fac:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	3303      	adds	r3, #3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe feac 	bl	8000d14 <WIZCHIP_READ>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <recvfrom+0x90>
 8001fc2:	f06f 0303 	mvn.w	r3, #3
 8001fc6:	e18f      	b.n	80022e8 <recvfrom+0x3b0>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8001fc8:	4b77      	ldr	r3, [pc, #476]	; (80021a8 <recvfrom+0x270>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	fa42 f303 	asr.w	r3, r2, r3
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <recvfrom+0xae>
 8001fdc:	8bfb      	ldrh	r3, [r7, #30]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <recvfrom+0xae>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e180      	b.n	80022e8 <recvfrom+0x3b0>
         if(pack_len != 0) break;
 8001fe6:	8bfb      	ldrh	r3, [r7, #30]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d100      	bne.n	8001fee <recvfrom+0xb6>
         pack_len = getSn_RX_RSR(sn);
 8001fec:	e7d9      	b.n	8001fa2 <recvfrom+0x6a>
         if(pack_len != 0) break;
 8001fee:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8001ff0:	7f7b      	ldrb	r3, [r7, #29]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d075      	beq.n	80020e6 <recvfrom+0x1ae>
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	f300 8135 	bgt.w	800226a <recvfrom+0x332>
 8002000:	2b02      	cmp	r3, #2
 8002002:	d003      	beq.n	800200c <recvfrom+0xd4>
 8002004:	2b03      	cmp	r3, #3
 8002006:	f000 80d3 	beq.w	80021b0 <recvfrom+0x278>
 800200a:	e12e      	b.n	800226a <recvfrom+0x332>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <recvfrom+0x26c>)
 8002010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d14e      	bne.n	80020b6 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8002018:	f107 0114 	add.w	r1, r7, #20
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	2208      	movs	r2, #8
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff f8ec 	bl	80011fe <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	3304      	adds	r3, #4
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	3301      	adds	r3, #1
 800202e:	2140      	movs	r1, #64	; 0x40
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fe41 	bl	8000cb8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002036:	bf00      	nop
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	3304      	adds	r3, #4
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	3301      	adds	r3, #1
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fe67 	bl	8000d14 <WIZCHIP_READ>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1f5      	bne.n	8002038 <recvfrom+0x100>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800204c:	7d3a      	ldrb	r2, [r7, #20]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	3301      	adds	r3, #1
 8002056:	7d7a      	ldrb	r2, [r7, #21]
 8002058:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	3302      	adds	r3, #2
 800205e:	7dba      	ldrb	r2, [r7, #22]
 8002060:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3303      	adds	r3, #3
 8002066:	7dfa      	ldrb	r2, [r7, #23]
 8002068:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 800206a:	7e3b      	ldrb	r3, [r7, #24]
 800206c:	b29a      	uxth	r2, r3
 800206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002070:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8002072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	b29a      	uxth	r2, r3
 800207a:	7e7b      	ldrb	r3, [r7, #25]
 800207c:	b29b      	uxth	r3, r3
 800207e:	4413      	add	r3, r2
 8002080:	b29a      	uxth	r2, r3
 8002082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002084:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8002086:	7eba      	ldrb	r2, [r7, #26]
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	b291      	uxth	r1, r2
 800208c:	4a45      	ldr	r2, [pc, #276]	; (80021a4 <recvfrom+0x26c>)
 800208e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	4a43      	ldr	r2, [pc, #268]	; (80021a4 <recvfrom+0x26c>)
 8002096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	b299      	uxth	r1, r3
 800209e:	7efb      	ldrb	r3, [r7, #27]
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	440a      	add	r2, r1
 80020a6:	b291      	uxth	r1, r2
 80020a8:	4a3e      	ldr	r2, [pc, #248]	; (80021a4 <recvfrom+0x26c>)
 80020aa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	4a3e      	ldr	r2, [pc, #248]	; (80021ac <recvfrom+0x274>)
 80020b2:	2180      	movs	r1, #128	; 0x80
 80020b4:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	4a3a      	ldr	r2, [pc, #232]	; (80021a4 <recvfrom+0x26c>)
 80020ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020be:	89ba      	ldrh	r2, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d202      	bcs.n	80020ca <recvfrom+0x192>
 80020c4:	89bb      	ldrh	r3, [r7, #12]
 80020c6:	83fb      	strh	r3, [r7, #30]
 80020c8:	e004      	b.n	80020d4 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	4a35      	ldr	r2, [pc, #212]	; (80021a4 <recvfrom+0x26c>)
 80020ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020d2:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80020d4:	8bfb      	ldrh	r3, [r7, #30]
 80020d6:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80020d8:	8bfa      	ldrh	r2, [r7, #30]
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff f88d 	bl	80011fe <wiz_recv_data>
			break;
 80020e4:	e0cd      	b.n	8002282 <recvfrom+0x34a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	4a2e      	ldr	r2, [pc, #184]	; (80021a4 <recvfrom+0x26c>)
 80020ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d142      	bne.n	8002178 <recvfrom+0x240>
	      {
   			wiz_recv_data(sn, head, 2);
 80020f2:	f107 0114 	add.w	r1, r7, #20
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	2202      	movs	r2, #2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff f87f 	bl	80011fe <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	3304      	adds	r3, #4
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	3301      	adds	r3, #1
 8002108:	2140      	movs	r1, #64	; 0x40
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fdd4 	bl	8000cb8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002110:	bf00      	nop
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	3304      	adds	r3, #4
 8002116:	021b      	lsls	r3, r3, #8
 8002118:	3301      	adds	r3, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fdfa 	bl	8000d14 <WIZCHIP_READ>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f5      	bne.n	8002112 <recvfrom+0x1da>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8002126:	7d3a      	ldrb	r2, [r7, #20]
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	b291      	uxth	r1, r2
 800212c:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <recvfrom+0x26c>)
 800212e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	4a1b      	ldr	r2, [pc, #108]	; (80021a4 <recvfrom+0x26c>)
 8002136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	b29a      	uxth	r2, r3
 800213e:	7d7b      	ldrb	r3, [r7, #21]
 8002140:	b29b      	uxth	r3, r3
 8002142:	4413      	add	r3, r2
 8002144:	b29a      	uxth	r2, r3
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	3a02      	subs	r2, #2
 800214a:	b291      	uxth	r1, r2
 800214c:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <recvfrom+0x26c>)
 800214e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <recvfrom+0x26c>)
 8002156:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800215a:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800215e:	4293      	cmp	r3, r2
 8002160:	d906      	bls.n	8002170 <recvfrom+0x238>
   			{
   			   close(sn);
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fa41 	bl	80015ec <close>
   			   return SOCKFATAL_PACKLEN;
 800216a:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800216e:	e0bb      	b.n	80022e8 <recvfrom+0x3b0>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8002170:	7bfb      	ldrb	r3, [r7, #15]
 8002172:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <recvfrom+0x274>)
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <recvfrom+0x26c>)
 800217c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002180:	89ba      	ldrh	r2, [r7, #12]
 8002182:	429a      	cmp	r2, r3
 8002184:	d202      	bcs.n	800218c <recvfrom+0x254>
 8002186:	89bb      	ldrh	r3, [r7, #12]
 8002188:	83fb      	strh	r3, [r7, #30]
 800218a:	e004      	b.n	8002196 <recvfrom+0x25e>
			else pack_len = sock_remained_size[sn];
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <recvfrom+0x26c>)
 8002190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002194:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8002196:	8bfa      	ldrh	r2, [r7, #30]
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff f82e 	bl	80011fe <wiz_recv_data>
		   break;
 80021a2:	e06e      	b.n	8002282 <recvfrom+0x34a>
 80021a4:	20000120 	.word	0x20000120
 80021a8:	2000011c 	.word	0x2000011c
 80021ac:	20000128 	.word	0x20000128
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	4a4f      	ldr	r2, [pc, #316]	; (80022f0 <recvfrom+0x3b8>)
 80021b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d140      	bne.n	800223e <recvfrom+0x306>
		   {
   			wiz_recv_data(sn, head, 6);
 80021bc:	f107 0114 	add.w	r1, r7, #20
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2206      	movs	r2, #6
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f81a 	bl	80011fe <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	3304      	adds	r3, #4
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	3301      	adds	r3, #1
 80021d2:	2140      	movs	r1, #64	; 0x40
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fd6f 	bl	8000cb8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80021da:	bf00      	nop
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
 80021de:	3304      	adds	r3, #4
 80021e0:	021b      	lsls	r3, r3, #8
 80021e2:	3301      	adds	r3, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fd95 	bl	8000d14 <WIZCHIP_READ>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1f5      	bne.n	80021dc <recvfrom+0x2a4>
   			addr[0] = head[0];
 80021f0:	7d3a      	ldrb	r2, [r7, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3301      	adds	r3, #1
 80021fa:	7d7a      	ldrb	r2, [r7, #21]
 80021fc:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3302      	adds	r3, #2
 8002202:	7dba      	ldrb	r2, [r7, #22]
 8002204:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3303      	adds	r3, #3
 800220a:	7dfa      	ldrb	r2, [r7, #23]
 800220c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800220e:	7e3a      	ldrb	r2, [r7, #24]
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	b291      	uxth	r1, r2
 8002214:	4a36      	ldr	r2, [pc, #216]	; (80022f0 <recvfrom+0x3b8>)
 8002216:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	4a34      	ldr	r2, [pc, #208]	; (80022f0 <recvfrom+0x3b8>)
 800221e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	b299      	uxth	r1, r3
 8002226:	7e7b      	ldrb	r3, [r7, #25]
 8002228:	b29a      	uxth	r2, r3
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	440a      	add	r2, r1
 800222e:	b291      	uxth	r1, r2
 8002230:	4a2f      	ldr	r2, [pc, #188]	; (80022f0 <recvfrom+0x3b8>)
 8002232:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	4a2e      	ldr	r2, [pc, #184]	; (80022f4 <recvfrom+0x3bc>)
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	4a2b      	ldr	r2, [pc, #172]	; (80022f0 <recvfrom+0x3b8>)
 8002242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002246:	89ba      	ldrh	r2, [r7, #12]
 8002248:	429a      	cmp	r2, r3
 800224a:	d202      	bcs.n	8002252 <recvfrom+0x31a>
 800224c:	89bb      	ldrh	r3, [r7, #12]
 800224e:	83fb      	strh	r3, [r7, #30]
 8002250:	e004      	b.n	800225c <recvfrom+0x324>
			else pack_len = sock_remained_size[sn];
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	4a26      	ldr	r2, [pc, #152]	; (80022f0 <recvfrom+0x3b8>)
 8002256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800225a:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800225c:	8bfa      	ldrh	r2, [r7, #30]
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe ffcb 	bl	80011fe <wiz_recv_data>
			break;
 8002268:	e00b      	b.n	8002282 <recvfrom+0x34a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800226a:	8bfa      	ldrh	r2, [r7, #30]
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff f87a 	bl	800136a <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	491d      	ldr	r1, [pc, #116]	; (80022f0 <recvfrom+0x3b8>)
 800227a:	8bfa      	ldrh	r2, [r7, #30]
 800227c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8002280:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	3304      	adds	r3, #4
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	3301      	adds	r3, #1
 800228a:	2140      	movs	r1, #64	; 0x40
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe fd13 	bl	8000cb8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8002292:	bf00      	nop
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	3304      	adds	r3, #4
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	3301      	adds	r3, #1
 800229c:	4618      	mov	r0, r3
 800229e:	f7fe fd39 	bl	8000d14 <WIZCHIP_READ>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d1f5      	bne.n	8002294 <recvfrom+0x35c>
	sock_remained_size[sn] -= pack_len;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <recvfrom+0x3b8>)
 80022ac:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	8bfa      	ldrh	r2, [r7, #30]
 80022b4:	1a8a      	subs	r2, r1, r2
 80022b6:	b291      	uxth	r1, r2
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <recvfrom+0x3b8>)
 80022ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <recvfrom+0x3b8>)
 80022c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <recvfrom+0x3a6>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	4a09      	ldr	r2, [pc, #36]	; (80022f4 <recvfrom+0x3bc>)
 80022ce:	5cd2      	ldrb	r2, [r2, r3]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	b2d1      	uxtb	r1, r2
 80022d8:	4a06      	ldr	r2, [pc, #24]	; (80022f4 <recvfrom+0x3bc>)
 80022da:	54d1      	strb	r1, [r2, r3]
 80022dc:	e003      	b.n	80022e6 <recvfrom+0x3ae>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <recvfrom+0x3bc>)
 80022e2:	2100      	movs	r1, #0
 80022e4:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80022e6:	8bfb      	ldrh	r3, [r7, #30]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20000120 	.word	0x20000120
 80022f4:	20000128 	.word	0x20000128

080022f8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
 800230a:	bf00      	nop
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
 8002318:	bf00      	nop
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	70fb      	strb	r3, [r7, #3]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
 800236c:	2300      	movs	r3, #0
 800236e:	4618      	mov	r0, r3
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <reg_wizchip_cris_cbfunc+0x16>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <reg_wizchip_cris_cbfunc+0x40>)
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <reg_wizchip_cris_cbfunc+0x44>)
 80023aa:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <reg_wizchip_cris_cbfunc+0x40>)
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <reg_wizchip_cris_cbfunc+0x48>)
 80023b0:	611a      	str	r2, [r3, #16]
 80023b2:	e006      	b.n	80023c2 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 80023b4:	4a06      	ldr	r2, [pc, #24]	; (80023d0 <reg_wizchip_cris_cbfunc+0x40>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <reg_wizchip_cris_cbfunc+0x40>)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	6113      	str	r3, [r2, #16]
   }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000004 	.word	0x20000004
 80023d4:	080022f9 	.word	0x080022f9
 80023d8:	08002307 	.word	0x08002307

080023dc <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <reg_wizchip_cs_cbfunc+0x16>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <reg_wizchip_cs_cbfunc+0x40>)
 80023f4:	4a0a      	ldr	r2, [pc, #40]	; (8002420 <reg_wizchip_cs_cbfunc+0x44>)
 80023f6:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <reg_wizchip_cs_cbfunc+0x40>)
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <reg_wizchip_cs_cbfunc+0x48>)
 80023fc:	619a      	str	r2, [r3, #24]
 80023fe:	e006      	b.n	800240e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002400:	4a06      	ldr	r2, [pc, #24]	; (800241c <reg_wizchip_cs_cbfunc+0x40>)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002406:	4a05      	ldr	r2, [pc, #20]	; (800241c <reg_wizchip_cs_cbfunc+0x40>)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6193      	str	r3, [r2, #24]
   }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000004 	.word	0x20000004
 8002420:	08002315 	.word	0x08002315
 8002424:	08002323 	.word	0x08002323

08002428 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002432:	bf00      	nop
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <reg_wizchip_spi_cbfunc+0x4c>)
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f9      	beq.n	8002434 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <reg_wizchip_spi_cbfunc+0x24>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d106      	bne.n	800245a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800244c:	4b09      	ldr	r3, [pc, #36]	; (8002474 <reg_wizchip_spi_cbfunc+0x4c>)
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <reg_wizchip_spi_cbfunc+0x50>)
 8002450:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <reg_wizchip_spi_cbfunc+0x4c>)
 8002454:	4a09      	ldr	r2, [pc, #36]	; (800247c <reg_wizchip_spi_cbfunc+0x54>)
 8002456:	621a      	str	r2, [r3, #32]
 8002458:	e006      	b.n	8002468 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800245a:	4a06      	ldr	r2, [pc, #24]	; (8002474 <reg_wizchip_spi_cbfunc+0x4c>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <reg_wizchip_spi_cbfunc+0x4c>)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	6213      	str	r3, [r2, #32]
   }
}
 8002466:	bf00      	nop
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	20000004 	.word	0x20000004
 8002478:	08002369 	.word	0x08002369
 800247c:	08002379 	.word	0x08002379

08002480 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	6039      	str	r1, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	2b08      	cmp	r3, #8
 8002498:	d863      	bhi.n	8002562 <ctlwizchip+0xe2>
 800249a:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <ctlwizchip+0x20>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	080024c5 	.word	0x080024c5
 80024a4:	080024cb 	.word	0x080024cb
 80024a8:	080024f7 	.word	0x080024f7
 80024ac:	080024eb 	.word	0x080024eb
 80024b0:	08002505 	.word	0x08002505
 80024b4:	08002511 	.word	0x08002511
 80024b8:	08002563 	.word	0x08002563
 80024bc:	08002563 	.word	0x08002563
 80024c0:	0800251f 	.word	0x0800251f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80024c4:	f000 f858 	bl	8002578 <wizchip_sw_reset>
         break;
 80024c8:	e04e      	b.n	8002568 <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	3304      	adds	r3, #4
 80024d8:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4611      	mov	r1, r2
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 f88d 	bl	8002600 <wizchip_init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	e03f      	b.n	800256a <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	881b      	ldrh	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f968 	bl	80027c4 <wizchip_clrinterrupt>
         break;
 80024f4:	e038      	b.n	8002568 <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80024f6:	f000 f988 	bl	800280a <wizchip_getinterrupt>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461a      	mov	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	801a      	strh	r2, [r3, #0]
         break;
 8002502:	e031      	b.n	8002568 <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f9a4 	bl	8002856 <wizchip_setinterruptmask>
         break;         
 800250e:	e02b      	b.n	8002568 <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002510:	f000 f9c1 	bl	8002896 <wizchip_getinterruptmask>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	801a      	strh	r2, [r3, #0]
         break;
 800251c:	e024      	b.n	8002568 <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <ctlwizchip+0xf4>)
 8002520:	789a      	ldrb	r2, [r3, #2]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	3301      	adds	r3, #1
 800252a:	4a12      	ldr	r2, [pc, #72]	; (8002574 <ctlwizchip+0xf4>)
 800252c:	78d2      	ldrb	r2, [r2, #3]
 800252e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	3302      	adds	r3, #2
 8002534:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <ctlwizchip+0xf4>)
 8002536:	7912      	ldrb	r2, [r2, #4]
 8002538:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	3303      	adds	r3, #3
 800253e:	4a0d      	ldr	r2, [pc, #52]	; (8002574 <ctlwizchip+0xf4>)
 8002540:	7952      	ldrb	r2, [r2, #5]
 8002542:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	3304      	adds	r3, #4
 8002548:	4a0a      	ldr	r2, [pc, #40]	; (8002574 <ctlwizchip+0xf4>)
 800254a:	7992      	ldrb	r2, [r2, #6]
 800254c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	3305      	adds	r3, #5
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <ctlwizchip+0xf4>)
 8002554:	79d2      	ldrb	r2, [r2, #7]
 8002556:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	3306      	adds	r3, #6
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
         break;
 8002560:	e002      	b.n	8002568 <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8002562:	f04f 33ff 	mov.w	r3, #4294967295
 8002566:	e000      	b.n	800256a <ctlwizchip+0xea>
   }
   return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000004 	.word	0x20000004

08002578 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	2206      	movs	r2, #6
 8002582:	4619      	mov	r1, r3
 8002584:	2009      	movs	r0, #9
 8002586:	f7fe fc41 	bl	8000e0c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800258a:	f107 0314 	add.w	r3, r7, #20
 800258e:	2204      	movs	r2, #4
 8002590:	4619      	mov	r1, r3
 8002592:	2001      	movs	r0, #1
 8002594:	f7fe fc3a 	bl	8000e0c <WIZCHIP_READ_BUF>
 8002598:	f107 0310 	add.w	r3, r7, #16
 800259c:	2204      	movs	r2, #4
 800259e:	4619      	mov	r1, r3
 80025a0:	2005      	movs	r0, #5
 80025a2:	f7fe fc33 	bl	8000e0c <WIZCHIP_READ_BUF>
 80025a6:	f107 030c 	add.w	r3, r7, #12
 80025aa:	2204      	movs	r2, #4
 80025ac:	4619      	mov	r1, r3
 80025ae:	200f      	movs	r0, #15
 80025b0:	f7fe fc2c 	bl	8000e0c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7fe fb7e 	bl	8000cb8 <WIZCHIP_WRITE>
   getMR(); // for delay
 80025bc:	2000      	movs	r0, #0
 80025be:	f7fe fba9 	bl	8000d14 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2206      	movs	r2, #6
 80025c6:	4619      	mov	r1, r3
 80025c8:	2009      	movs	r0, #9
 80025ca:	f7fe fbd1 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	2204      	movs	r2, #4
 80025d4:	4619      	mov	r1, r3
 80025d6:	2001      	movs	r0, #1
 80025d8:	f7fe fbca 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80025dc:	f107 0310 	add.w	r3, r7, #16
 80025e0:	2204      	movs	r2, #4
 80025e2:	4619      	mov	r1, r3
 80025e4:	2005      	movs	r0, #5
 80025e6:	f7fe fbc3 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80025ea:	f107 030c 	add.w	r3, r7, #12
 80025ee:	2204      	movs	r2, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	200f      	movs	r0, #15
 80025f4:	f7fe fbbc 	bl	8000d70 <WIZCHIP_WRITE_BUF>
}
 80025f8:	bf00      	nop
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	737b      	strb	r3, [r7, #13]
   wizchip_sw_reset();
 800260e:	f7ff ffb3 	bl	8002578 <wizchip_sw_reset>
   if(txsize)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d066      	beq.n	80026e6 <wizchip_init+0xe6>
   {
      tmp = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	737b      	strb	r3, [r7, #13]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800261c:	2300      	movs	r3, #0
 800261e:	73fb      	strb	r3, [r7, #15]
 8002620:	e015      	b.n	800264e <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8002622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	781a      	ldrb	r2, [r3, #0]
 800262c:	7b7b      	ldrb	r3, [r7, #13]
 800262e:	4413      	add	r3, r2
 8002630:	b2db      	uxtb	r3, r3
 8002632:	737b      	strb	r3, [r7, #13]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 8002634:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002638:	2b08      	cmp	r3, #8
 800263a:	dd02      	ble.n	8002642 <wizchip_init+0x42>
 800263c:	f04f 33ff 	mov.w	r3, #4294967295
 8002640:	e0bc      	b.n	80027bc <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	b2db      	uxtb	r3, r3
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002652:	2b03      	cmp	r3, #3
 8002654:	dde5      	ble.n	8002622 <wizchip_init+0x22>
		#else
			if(tmp > 16) return -1;
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e040      	b.n	80026de <wizchip_init+0xde>
		{
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	73bb      	strb	r3, [r7, #14]
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 8002660:	e005      	b.n	800266e <wizchip_init+0x6e>
 8002662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	3301      	adds	r3, #1
 800266a:	b2db      	uxtb	r3, r3
 800266c:	73bb      	strb	r3, [r7, #14]
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800267e:	fa42 f303 	asr.w	r3, r2, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d006      	beq.n	8002694 <wizchip_init+0x94>
 8002686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e6      	bne.n	8002662 <wizchip_init+0x62>
			setSn_TXBUF_SIZE(i, j);
 8002694:	201b      	movs	r0, #27
 8002696:	f7fe fb3d 	bl	8000d14 <WIZCHIP_READ>
 800269a:	4603      	mov	r3, r0
 800269c:	b25a      	sxtb	r2, r3
 800269e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	2103      	movs	r1, #3
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	b25b      	sxtb	r3, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	b25b      	sxtb	r3, r3
 80026b0:	4013      	ands	r3, r2
 80026b2:	b25a      	sxtb	r2, r3
 80026b4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80026b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa01 f303 	lsl.w	r3, r1, r3
 80026c2:	b25b      	sxtb	r3, r3
 80026c4:	4313      	orrs	r3, r2
 80026c6:	b25b      	sxtb	r3, r3
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	4619      	mov	r1, r3
 80026cc:	201b      	movs	r0, #27
 80026ce:	f7fe faf3 	bl	8000cb8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80026d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	3301      	adds	r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	ddba      	ble.n	800265c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d066      	beq.n	80027ba <wizchip_init+0x1ba>
   {
      tmp = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	737b      	strb	r3, [r7, #13]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	e015      	b.n	8002722 <wizchip_init+0x122>
		{
			tmp += rxsize[i];
 80026f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	7b7b      	ldrb	r3, [r7, #13]
 8002702:	4413      	add	r3, r2
 8002704:	b2db      	uxtb	r3, r3
 8002706:	737b      	strb	r3, [r7, #13]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 8002708:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800270c:	2b08      	cmp	r3, #8
 800270e:	dd02      	ble.n	8002716 <wizchip_init+0x116>
 8002710:	f04f 33ff 	mov.w	r3, #4294967295
 8002714:	e052      	b.n	80027bc <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3301      	adds	r3, #1
 800271e:	b2db      	uxtb	r3, r3
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	2b03      	cmp	r3, #3
 8002728:	dde5      	ble.n	80026f6 <wizchip_init+0xf6>
		#else
			if(tmp > 16) return -1;
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
 800272e:	e040      	b.n	80027b2 <wizchip_init+0x1b2>
		{
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	73bb      	strb	r3, [r7, #14]
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 8002734:	e005      	b.n	8002742 <wizchip_init+0x142>
 8002736:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3301      	adds	r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	73bb      	strb	r3, [r7, #14]
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	461a      	mov	r2, r3
 800274e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002752:	fa42 f303 	asr.w	r3, r2, r3
 8002756:	2b01      	cmp	r3, #1
 8002758:	d006      	beq.n	8002768 <wizchip_init+0x168>
 800275a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	4413      	add	r3, r2
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e6      	bne.n	8002736 <wizchip_init+0x136>
			setSn_RXBUF_SIZE(i, j);
 8002768:	201a      	movs	r0, #26
 800276a:	f7fe fad3 	bl	8000d14 <WIZCHIP_READ>
 800276e:	4603      	mov	r3, r0
 8002770:	b25a      	sxtb	r2, r3
 8002772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2103      	movs	r1, #3
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	b25b      	sxtb	r3, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	b25b      	sxtb	r3, r3
 8002784:	4013      	ands	r3, r2
 8002786:	b25a      	sxtb	r2, r3
 8002788:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800278c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa01 f303 	lsl.w	r3, r1, r3
 8002796:	b25b      	sxtb	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	b25b      	sxtb	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	4619      	mov	r1, r3
 80027a0:	201a      	movs	r0, #26
 80027a2:	f7fe fa89 	bl	8000cb8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	3301      	adds	r3, #1
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	ddba      	ble.n	8002730 <wizchip_init+0x130>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	0a1b      	lsrs	r3, r3, #8
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 80027da:	7bfb      	ldrb	r3, [r7, #15]
 80027dc:	f043 0310 	orr.w	r3, r3, #16
 80027e0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   ir |= (1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   sir &= 0x0F;
 80027e2:	7bbb      	ldrb	r3, [r7, #14]
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	73bb      	strb	r3, [r7, #14]
#endif

#if _WIZCHIP_ <= W5100S
   ir |= sir;
 80027ea:	7bfa      	ldrb	r2, [r7, #15]
 80027ec:	7bbb      	ldrb	r3, [r7, #14]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	73fb      	strb	r3, [r7, #15]
   setIR(ir);
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4619      	mov	r1, r3
 80027fc:	2015      	movs	r0, #21
 80027fe:	f7fe fa5b 	bl	8000cb8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
 800281c:	2015      	movs	r0, #21
 800281e:	f7fe fa79 	bl	8000d14 <WIZCHIP_READ>
 8002822:	4603      	mov	r3, r0
 8002824:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 8002828:	71fb      	strb	r3, [r7, #7]
   sir = ir & 0x0F;
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	71bb      	strb	r3, [r7, #6]
#endif         

//M20150601 : For Integrating with W5300
//#if _WIZCHIP_ < W5500
#if _WIZCHIP_ < W5200
   ir &= ~(1<<4); // IK_WOL
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	f023 0310 	bic.w	r3, r3, #16
 8002838:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800283a:	79bb      	ldrb	r3, [r7, #6]
 800283c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800283e:	88bb      	ldrh	r3, [r7, #4]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	b29a      	uxth	r2, r3
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	b29b      	uxth	r3, r3
 8002848:	4413      	add	r3, r2
 800284a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 800284c:	88bb      	ldrh	r3, [r7, #4]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	b29b      	uxth	r3, r3
 800286a:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	f023 0310 	bic.w	r3, r3, #16
 8002872:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   simr &= 0x0F;
 8002874:	7bbb      	ldrb	r3, [r7, #14]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	73bb      	strb	r3, [r7, #14]
   imr |= simr;
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	7bbb      	ldrb	r3, [r7, #14]
 8002880:	4313      	orrs	r3, r2
 8002882:	73fb      	strb	r3, [r7, #15]
   setIMR(imr);
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	4619      	mov	r1, r3
 8002888:	2016      	movs	r0, #22
 800288a:	f7fe fa15 	bl	8000cb8 <WIZCHIP_WRITE>
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
 80028a8:	2016      	movs	r0, #22
 80028aa:	f7fe fa33 	bl	8000d14 <WIZCHIP_READ>
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
   simr = imr & 0x0F;
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	f023 0310 	bic.w	r3, r3, #16
 80028c0:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80028c2:	79bb      	ldrb	r3, [r7, #6]
 80028c4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80028c6:	88bb      	ldrh	r3, [r7, #4]
 80028c8:	021b      	lsls	r3, r3, #8
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	4413      	add	r3, r2
 80028d2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80028d4:	88bb      	ldrh	r3, [r7, #4]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2206      	movs	r2, #6
 80028ec:	4619      	mov	r1, r3
 80028ee:	2009      	movs	r0, #9
 80028f0:	f7fe fa3e 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	330e      	adds	r3, #14
 80028f8:	2204      	movs	r2, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	2001      	movs	r0, #1
 80028fe:	f7fe fa37 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	330a      	adds	r3, #10
 8002906:	2204      	movs	r2, #4
 8002908:	4619      	mov	r1, r3
 800290a:	2005      	movs	r0, #5
 800290c:	f7fe fa30 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3306      	adds	r3, #6
 8002914:	2204      	movs	r2, #4
 8002916:	4619      	mov	r1, r3
 8002918:	200f      	movs	r0, #15
 800291a:	f7fe fa29 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	7c9a      	ldrb	r2, [r3, #18]
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <wizchip_setnetinfo+0x70>)
 8002924:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	7cda      	ldrb	r2, [r3, #19]
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <wizchip_setnetinfo+0x70>)
 800292c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7d1a      	ldrb	r2, [r3, #20]
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <wizchip_setnetinfo+0x70>)
 8002934:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7d5a      	ldrb	r2, [r3, #21]
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <wizchip_setnetinfo+0x70>)
 800293c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	7d9a      	ldrb	r2, [r3, #22]
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <wizchip_setnetinfo+0x74>)
 8002944:	701a      	strb	r2, [r3, #0]
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	2000012c 	.word	0x2000012c
 8002954:	20000130 	.word	0x20000130

08002958 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2206      	movs	r2, #6
 8002964:	4619      	mov	r1, r3
 8002966:	2009      	movs	r0, #9
 8002968:	f7fe fa50 	bl	8000e0c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	330e      	adds	r3, #14
 8002970:	2204      	movs	r2, #4
 8002972:	4619      	mov	r1, r3
 8002974:	2001      	movs	r0, #1
 8002976:	f7fe fa49 	bl	8000e0c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	330a      	adds	r3, #10
 800297e:	2204      	movs	r2, #4
 8002980:	4619      	mov	r1, r3
 8002982:	2005      	movs	r0, #5
 8002984:	f7fe fa42 	bl	8000e0c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3306      	adds	r3, #6
 800298c:	2204      	movs	r2, #4
 800298e:	4619      	mov	r1, r3
 8002990:	200f      	movs	r0, #15
 8002992:	f7fe fa3b 	bl	8000e0c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <wizchip_getnetinfo+0x70>)
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <wizchip_getnetinfo+0x70>)
 80029a0:	785a      	ldrb	r2, [r3, #1]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80029a6:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <wizchip_getnetinfo+0x70>)
 80029a8:	789a      	ldrb	r2, [r3, #2]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <wizchip_getnetinfo+0x70>)
 80029b0:	78da      	ldrb	r2, [r3, #3]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <wizchip_getnetinfo+0x74>)
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	759a      	strb	r2, [r3, #22]
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2000012c 	.word	0x2000012c
 80029cc:	20000130 	.word	0x20000130

080029d0 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 80029d4:	2204      	movs	r2, #4
 80029d6:	4908      	ldr	r1, [pc, #32]	; (80029f8 <default_ip_assign+0x28>)
 80029d8:	200f      	movs	r0, #15
 80029da:	f7fe f9c9 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 80029de:	2204      	movs	r2, #4
 80029e0:	4906      	ldr	r1, [pc, #24]	; (80029fc <default_ip_assign+0x2c>)
 80029e2:	2005      	movs	r0, #5
 80029e4:	f7fe f9c4 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 80029e8:	2204      	movs	r2, #4
 80029ea:	4905      	ldr	r1, [pc, #20]	; (8002a00 <default_ip_assign+0x30>)
 80029ec:	2001      	movs	r0, #1
 80029ee:	f7fe f9bf 	bl	8000d70 <WIZCHIP_WRITE_BUF>
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000140 	.word	0x20000140
 80029fc:	20000148 	.word	0x20000148
 8002a00:	20000144 	.word	0x20000144

08002a04 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8002a08:	2180      	movs	r1, #128	; 0x80
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7fe f954 	bl	8000cb8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe f97f 	bl	8000d14 <WIZCHIP_READ>
   default_ip_assign();
 8002a16:	f7ff ffdb 	bl	80029d0 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8002a1a:	2206      	movs	r2, #6
 8002a1c:	4902      	ldr	r1, [pc, #8]	; (8002a28 <default_ip_update+0x24>)
 8002a1e:	2009      	movs	r0, #9
 8002a20:	f7fe f9a6 	bl	8000d70 <WIZCHIP_WRITE_BUF>
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000160 	.word	0x20000160

08002a2c <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7fe f940 	bl	8000cb8 <WIZCHIP_WRITE>
	getMR(); // for delay
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fe f96b 	bl	8000d14 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8002a3e:	2206      	movs	r2, #6
 8002a40:	4902      	ldr	r1, [pc, #8]	; (8002a4c <default_ip_conflict+0x20>)
 8002a42:	2009      	movs	r0, #9
 8002a44:	f7fe f994 	bl	8000d70 <WIZCHIP_WRITE_BUF>
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000160 	.word	0x20000160

08002a50 <makeDHCPMSG>:
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8002a56:	463b      	mov	r3, r7
 8002a58:	2206      	movs	r2, #6
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	2009      	movs	r0, #9
 8002a5e:	f7fe f9d5 	bl	8000e0c <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8002a62:	4b72      	ldr	r3, [pc, #456]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8002a6a:	4b70      	ldr	r3, [pc, #448]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8002a72:	4b6e      	ldr	r3, [pc, #440]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2206      	movs	r2, #6
 8002a78:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8002a7a:	4b6c      	ldr	r3, [pc, #432]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8002a82:	4b6a      	ldr	r3, [pc, #424]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	3304      	adds	r3, #4
 8002a88:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8002a8a:	4b69      	ldr	r3, [pc, #420]	; (8002c30 <makeDHCPMSG+0x1e0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	0e1b      	lsrs	r3, r3, #24
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8002a96:	4b66      	ldr	r3, [pc, #408]	; (8002c30 <makeDHCPMSG+0x1e0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	0c1a      	lsrs	r2, r3, #16
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8002aa4:	4b62      	ldr	r3, [pc, #392]	; (8002c30 <makeDHCPMSG+0x1e0>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0a1a      	lsrs	r2, r3, #8
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3302      	adds	r3, #2
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8002ab2:	4b5f      	ldr	r3, [pc, #380]	; (8002c30 <makeDHCPMSG+0x1e0>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3303      	adds	r3, #3
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 8002abe:	4b5b      	ldr	r3, [pc, #364]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8002ac6:	4b59      	ldr	r3, [pc, #356]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	330a      	adds	r3, #10
 8002acc:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8002adc:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 8002ae4:	4b51      	ldr	r3, [pc, #324]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8002aec:	4b4f      	ldr	r3, [pc, #316]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2200      	movs	r2, #0
 8002af2:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 8002af4:	4b4d      	ldr	r3, [pc, #308]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2200      	movs	r2, #0
 8002afa:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8002afc:	4b4b      	ldr	r3, [pc, #300]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2200      	movs	r2, #0
 8002b02:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8002b04:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8002b0c:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2200      	movs	r2, #0
 8002b12:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8002b14:	4b45      	ldr	r3, [pc, #276]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8002b1c:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2200      	movs	r2, #0
 8002b22:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8002b24:	4b41      	ldr	r3, [pc, #260]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8002b2c:	4b3f      	ldr	r3, [pc, #252]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8002b34:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8002b3c:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2200      	movs	r2, #0
 8002b42:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8002b44:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8002b4c:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2200      	movs	r2, #0
 8002b52:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8002b54:	4b35      	ldr	r3, [pc, #212]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8002b5c:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a34      	ldr	r2, [pc, #208]	; (8002c34 <makeDHCPMSG+0x1e4>)
 8002b62:	7812      	ldrb	r2, [r2, #0]
 8002b64:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8002b66:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a32      	ldr	r2, [pc, #200]	; (8002c34 <makeDHCPMSG+0x1e4>)
 8002b6c:	7852      	ldrb	r2, [r2, #1]
 8002b6e:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8002b70:	4b2e      	ldr	r3, [pc, #184]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a2f      	ldr	r2, [pc, #188]	; (8002c34 <makeDHCPMSG+0x1e4>)
 8002b76:	7892      	ldrb	r2, [r2, #2]
 8002b78:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8002b7a:	4b2c      	ldr	r3, [pc, #176]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a2d      	ldr	r2, [pc, #180]	; (8002c34 <makeDHCPMSG+0x1e4>)
 8002b80:	78d2      	ldrb	r2, [r2, #3]
 8002b82:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8002b84:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <makeDHCPMSG+0x1e4>)
 8002b8a:	7912      	ldrb	r2, [r2, #4]
 8002b8c:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8002b90:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a27      	ldr	r2, [pc, #156]	; (8002c34 <makeDHCPMSG+0x1e4>)
 8002b96:	7952      	ldrb	r2, [r2, #5]
 8002b98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8002b9c:	2306      	movs	r3, #6
 8002b9e:	73fb      	strb	r3, [r7, #15]
 8002ba0:	e008      	b.n	8002bb4 <makeDHCPMSG+0x164>
 8002ba2:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	4413      	add	r3, r2
 8002baa:	2200      	movs	r2, #0
 8002bac:	771a      	strb	r2, [r3, #28]
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b0f      	cmp	r3, #15
 8002bb8:	d9f3      	bls.n	8002ba2 <makeDHCPMSG+0x152>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	73fb      	strb	r3, [r7, #15]
 8002bbe:	e009      	b.n	8002bd4 <makeDHCPMSG+0x184>
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b3f      	cmp	r3, #63	; 0x3f
 8002bd8:	d9f2      	bls.n	8002bc0 <makeDHCPMSG+0x170>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
 8002bde:	e009      	b.n	8002bf4 <makeDHCPMSG+0x1a4>
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	4413      	add	r3, r2
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
 8002bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	daf1      	bge.n	8002be0 <makeDHCPMSG+0x190>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2263      	movs	r2, #99	; 0x63
 8002c02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2282      	movs	r2, #130	; 0x82
 8002c0c:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2253      	movs	r2, #83	; 0x53
 8002c16:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <makeDHCPMSG+0x1dc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2263      	movs	r2, #99	; 0x63
 8002c20:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	2000015c 	.word	0x2000015c
 8002c30:	20000158 	.word	0x20000158
 8002c34:	20000160 	.word	0x20000160

08002c38 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8002c38:	b5b0      	push	{r4, r5, r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 8002c42:	f7ff ff05 	bl	8002a50 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8002c46:	4b56      	ldr	r3, [pc, #344]	; (8002da0 <send_DHCP_DISCOVER+0x168>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8002c4c:	4b54      	ldr	r3, [pc, #336]	; (8002da0 <send_DHCP_DISCOVER+0x168>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 8002c52:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <send_DHCP_DISCOVER+0x168>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8002c58:	4b51      	ldr	r3, [pc, #324]	; (8002da0 <send_DHCP_DISCOVER+0x168>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8002c5e:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <send_DHCP_DISCOVER+0x16c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8002c64:	4b4f      	ldr	r3, [pc, #316]	; (8002da4 <send_DHCP_DISCOVER+0x16c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8002c6a:	4b4e      	ldr	r3, [pc, #312]	; (8002da4 <send_DHCP_DISCOVER+0x16c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8002c70:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <send_DHCP_DISCOVER+0x16c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8002c76:	2304      	movs	r3, #4
 8002c78:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8002c7a:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	88bb      	ldrh	r3, [r7, #4]
 8002c80:	1c59      	adds	r1, r3, #1
 8002c82:	80b9      	strh	r1, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	2235      	movs	r2, #53	; 0x35
 8002c88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002c8c:	4b46      	ldr	r3, [pc, #280]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	88bb      	ldrh	r3, [r7, #4]
 8002c92:	1c59      	adds	r1, r3, #1
 8002c94:	80b9      	strh	r1, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 8002c9e:	4b42      	ldr	r3, [pc, #264]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	88bb      	ldrh	r3, [r7, #4]
 8002ca4:	1c59      	adds	r1, r3, #1
 8002ca6:	80b9      	strh	r1, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8002cb0:	4b3d      	ldr	r3, [pc, #244]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	88bb      	ldrh	r3, [r7, #4]
 8002cb6:	1c59      	adds	r1, r3, #1
 8002cb8:	80b9      	strh	r1, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	223d      	movs	r2, #61	; 0x3d
 8002cbe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8002cc2:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	88bb      	ldrh	r3, [r7, #4]
 8002cc8:	1c59      	adds	r1, r3, #1
 8002cca:	80b9      	strh	r1, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	2207      	movs	r2, #7
 8002cd0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8002cd4:	4b34      	ldr	r3, [pc, #208]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	88bb      	ldrh	r3, [r7, #4]
 8002cda:	1c59      	adds	r1, r3, #1
 8002cdc:	80b9      	strh	r1, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8002ce6:	4b30      	ldr	r3, [pc, #192]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	88bb      	ldrh	r3, [r7, #4]
 8002cec:	1c59      	adds	r1, r3, #1
 8002cee:	80b9      	strh	r1, [r7, #4]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	4b2e      	ldr	r3, [pc, #184]	; (8002dac <send_DHCP_DISCOVER+0x174>)
 8002cf4:	7819      	ldrb	r1, [r3, #0]
 8002cf6:	1813      	adds	r3, r2, r0
 8002cf8:	460a      	mov	r2, r1
 8002cfa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8002cfe:	4b2a      	ldr	r3, [pc, #168]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	88bb      	ldrh	r3, [r7, #4]
 8002d04:	1c59      	adds	r1, r3, #1
 8002d06:	80b9      	strh	r1, [r7, #4]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	4b28      	ldr	r3, [pc, #160]	; (8002dac <send_DHCP_DISCOVER+0x174>)
 8002d0c:	7859      	ldrb	r1, [r3, #1]
 8002d0e:	1813      	adds	r3, r2, r0
 8002d10:	460a      	mov	r2, r1
 8002d12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8002d16:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	88bb      	ldrh	r3, [r7, #4]
 8002d1c:	1c59      	adds	r1, r3, #1
 8002d1e:	80b9      	strh	r1, [r7, #4]
 8002d20:	4618      	mov	r0, r3
 8002d22:	4b22      	ldr	r3, [pc, #136]	; (8002dac <send_DHCP_DISCOVER+0x174>)
 8002d24:	7899      	ldrb	r1, [r3, #2]
 8002d26:	1813      	adds	r3, r2, r0
 8002d28:	460a      	mov	r2, r1
 8002d2a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8002d2e:	4b1e      	ldr	r3, [pc, #120]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	88bb      	ldrh	r3, [r7, #4]
 8002d34:	1c59      	adds	r1, r3, #1
 8002d36:	80b9      	strh	r1, [r7, #4]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <send_DHCP_DISCOVER+0x174>)
 8002d3c:	78d9      	ldrb	r1, [r3, #3]
 8002d3e:	1813      	adds	r3, r2, r0
 8002d40:	460a      	mov	r2, r1
 8002d42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	88bb      	ldrh	r3, [r7, #4]
 8002d4c:	1c59      	adds	r1, r3, #1
 8002d4e:	80b9      	strh	r1, [r7, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <send_DHCP_DISCOVER+0x174>)
 8002d54:	7919      	ldrb	r1, [r3, #4]
 8002d56:	1813      	adds	r3, r2, r0
 8002d58:	460a      	mov	r2, r1
 8002d5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8002d5e:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	88bb      	ldrh	r3, [r7, #4]
 8002d64:	1c59      	adds	r1, r3, #1
 8002d66:	80b9      	strh	r1, [r7, #4]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	4b10      	ldr	r3, [pc, #64]	; (8002dac <send_DHCP_DISCOVER+0x174>)
 8002d6c:	7959      	ldrb	r1, [r3, #5]
 8002d6e:	1813      	adds	r3, r2, r0
 8002d70:	460a      	mov	r2, r1
 8002d72:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	88bb      	ldrh	r3, [r7, #4]
 8002d7c:	1c59      	adds	r1, r3, #1
 8002d7e:	80b9      	strh	r1, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	220c      	movs	r2, #12
 8002d84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <send_DHCP_DISCOVER+0x170>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	88bb      	ldrh	r3, [r7, #4]
 8002d8e:	1c59      	adds	r1, r3, #1
 8002d90:	80b9      	strh	r1, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	80fb      	strh	r3, [r7, #6]
 8002d9e:	e017      	b.n	8002dd0 <send_DHCP_DISCOVER+0x198>
 8002da0:	20000134 	.word	0x20000134
 8002da4:	20000138 	.word	0x20000138
 8002da8:	2000015c 	.word	0x2000015c
 8002dac:	20000160 	.word	0x20000160
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8002db0:	88f9      	ldrh	r1, [r7, #6]
 8002db2:	4b80      	ldr	r3, [pc, #512]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	88bb      	ldrh	r3, [r7, #4]
 8002db8:	1c58      	adds	r0, r3, #1
 8002dba:	80b8      	strh	r0, [r7, #4]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	4b7e      	ldr	r3, [pc, #504]	; (8002fb8 <send_DHCP_DISCOVER+0x380>)
 8002dc0:	5c59      	ldrb	r1, [r3, r1]
 8002dc2:	1813      	adds	r3, r2, r0
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8002dca:	88fb      	ldrh	r3, [r7, #6]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	80fb      	strh	r3, [r7, #6]
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	4a79      	ldr	r2, [pc, #484]	; (8002fb8 <send_DHCP_DISCOVER+0x380>)
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1ea      	bne.n	8002db0 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8002dda:	4b78      	ldr	r3, [pc, #480]	; (8002fbc <send_DHCP_DISCOVER+0x384>)
 8002ddc:	78db      	ldrb	r3, [r3, #3]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b74      	ldr	r3, [pc, #464]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002de4:	681c      	ldr	r4, [r3, #0]
 8002de6:	88bb      	ldrh	r3, [r7, #4]
 8002de8:	1c59      	adds	r1, r3, #1
 8002dea:	80b9      	strh	r1, [r7, #4]
 8002dec:	461d      	mov	r5, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f001 f94c 	bl	800408c <NibbleToHex>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	1963      	adds	r3, r4, r5
 8002dfa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8002dfe:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <send_DHCP_DISCOVER+0x384>)
 8002e00:	78da      	ldrb	r2, [r3, #3]
 8002e02:	4b6c      	ldr	r3, [pc, #432]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002e04:	681c      	ldr	r4, [r3, #0]
 8002e06:	88bb      	ldrh	r3, [r7, #4]
 8002e08:	1c59      	adds	r1, r3, #1
 8002e0a:	80b9      	strh	r1, [r7, #4]
 8002e0c:	461d      	mov	r5, r3
 8002e0e:	4610      	mov	r0, r2
 8002e10:	f001 f93c 	bl	800408c <NibbleToHex>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461a      	mov	r2, r3
 8002e18:	1963      	adds	r3, r4, r5
 8002e1a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8002e1e:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <send_DHCP_DISCOVER+0x384>)
 8002e20:	791b      	ldrb	r3, [r3, #4]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4b63      	ldr	r3, [pc, #396]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002e28:	681c      	ldr	r4, [r3, #0]
 8002e2a:	88bb      	ldrh	r3, [r7, #4]
 8002e2c:	1c59      	adds	r1, r3, #1
 8002e2e:	80b9      	strh	r1, [r7, #4]
 8002e30:	461d      	mov	r5, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f001 f92a 	bl	800408c <NibbleToHex>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	1963      	adds	r3, r4, r5
 8002e3e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8002e42:	4b5e      	ldr	r3, [pc, #376]	; (8002fbc <send_DHCP_DISCOVER+0x384>)
 8002e44:	791a      	ldrb	r2, [r3, #4]
 8002e46:	4b5b      	ldr	r3, [pc, #364]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002e48:	681c      	ldr	r4, [r3, #0]
 8002e4a:	88bb      	ldrh	r3, [r7, #4]
 8002e4c:	1c59      	adds	r1, r3, #1
 8002e4e:	80b9      	strh	r1, [r7, #4]
 8002e50:	461d      	mov	r5, r3
 8002e52:	4610      	mov	r0, r2
 8002e54:	f001 f91a 	bl	800408c <NibbleToHex>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	1963      	adds	r3, r4, r5
 8002e5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8002e62:	4b56      	ldr	r3, [pc, #344]	; (8002fbc <send_DHCP_DISCOVER+0x384>)
 8002e64:	795b      	ldrb	r3, [r3, #5]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4b52      	ldr	r3, [pc, #328]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002e6c:	681c      	ldr	r4, [r3, #0]
 8002e6e:	88bb      	ldrh	r3, [r7, #4]
 8002e70:	1c59      	adds	r1, r3, #1
 8002e72:	80b9      	strh	r1, [r7, #4]
 8002e74:	461d      	mov	r5, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f001 f908 	bl	800408c <NibbleToHex>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	1963      	adds	r3, r4, r5
 8002e82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8002e86:	4b4d      	ldr	r3, [pc, #308]	; (8002fbc <send_DHCP_DISCOVER+0x384>)
 8002e88:	795a      	ldrb	r2, [r3, #5]
 8002e8a:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002e8c:	681c      	ldr	r4, [r3, #0]
 8002e8e:	88bb      	ldrh	r3, [r7, #4]
 8002e90:	1c59      	adds	r1, r3, #1
 8002e92:	80b9      	strh	r1, [r7, #4]
 8002e94:	461d      	mov	r5, r3
 8002e96:	4610      	mov	r0, r2
 8002e98:	f001 f8f8 	bl	800408c <NibbleToHex>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	1963      	adds	r3, r4, r5
 8002ea2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8002ea6:	88fb      	ldrh	r3, [r7, #6]
 8002ea8:	b2d9      	uxtb	r1, r3
 8002eaa:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	88b8      	ldrh	r0, [r7, #4]
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	3307      	adds	r3, #7
 8002eb4:	1ac3      	subs	r3, r0, r3
 8002eb6:	3106      	adds	r1, #6
 8002eb8:	b2c9      	uxtb	r1, r1
 8002eba:	4413      	add	r3, r2
 8002ebc:	460a      	mov	r2, r1
 8002ebe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8002ec2:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	88bb      	ldrh	r3, [r7, #4]
 8002ec8:	1c59      	adds	r1, r3, #1
 8002eca:	80b9      	strh	r1, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	2237      	movs	r2, #55	; 0x37
 8002ed0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8002ed4:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	88bb      	ldrh	r3, [r7, #4]
 8002eda:	1c59      	adds	r1, r3, #1
 8002edc:	80b9      	strh	r1, [r7, #4]
 8002ede:	4413      	add	r3, r2
 8002ee0:	2206      	movs	r2, #6
 8002ee2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8002ee6:	4b33      	ldr	r3, [pc, #204]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	88bb      	ldrh	r3, [r7, #4]
 8002eec:	1c59      	adds	r1, r3, #1
 8002eee:	80b9      	strh	r1, [r7, #4]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8002ef8:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	88bb      	ldrh	r3, [r7, #4]
 8002efe:	1c59      	adds	r1, r3, #1
 8002f00:	80b9      	strh	r1, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	2203      	movs	r2, #3
 8002f06:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8002f0a:	4b2a      	ldr	r3, [pc, #168]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	88bb      	ldrh	r3, [r7, #4]
 8002f10:	1c59      	adds	r1, r3, #1
 8002f12:	80b9      	strh	r1, [r7, #4]
 8002f14:	4413      	add	r3, r2
 8002f16:	2206      	movs	r2, #6
 8002f18:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	88bb      	ldrh	r3, [r7, #4]
 8002f22:	1c59      	adds	r1, r3, #1
 8002f24:	80b9      	strh	r1, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8002f2e:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	88bb      	ldrh	r3, [r7, #4]
 8002f34:	1c59      	adds	r1, r3, #1
 8002f36:	80b9      	strh	r1, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	223a      	movs	r2, #58	; 0x3a
 8002f3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8002f40:	4b1c      	ldr	r3, [pc, #112]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	88bb      	ldrh	r3, [r7, #4]
 8002f46:	1c59      	adds	r1, r3, #1
 8002f48:	80b9      	strh	r1, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	223b      	movs	r2, #59	; 0x3b
 8002f4e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8002f52:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	88bb      	ldrh	r3, [r7, #4]
 8002f58:	1c59      	adds	r1, r3, #1
 8002f5a:	80b9      	strh	r1, [r7, #4]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	22ff      	movs	r2, #255	; 0xff
 8002f60:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8002f64:	88bb      	ldrh	r3, [r7, #4]
 8002f66:	80fb      	strh	r3, [r7, #6]
 8002f68:	e009      	b.n	8002f7e <send_DHCP_DISCOVER+0x346>
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	88fb      	ldrh	r3, [r7, #6]
 8002f70:	4413      	add	r3, r2
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	80fb      	strh	r3, [r7, #6]
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8002f84:	d3f1      	bcc.n	8002f6a <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8002f86:	23ff      	movs	r3, #255	; 0xff
 8002f88:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8002f8a:	23ff      	movs	r3, #255	; 0xff
 8002f8c:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8002f8e:	23ff      	movs	r3, #255	; 0xff
 8002f90:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8002f92:	23ff      	movs	r3, #255	; 0xff
 8002f94:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8002f96:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <send_DHCP_DISCOVER+0x388>)
 8002f98:	7818      	ldrb	r0, [r3, #0]
 8002f9a:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <send_DHCP_DISCOVER+0x37c>)
 8002f9c:	6819      	ldr	r1, [r3, #0]
 8002f9e:	463b      	mov	r3, r7
 8002fa0:	2243      	movs	r2, #67	; 0x43
 8002fa2:	9200      	str	r2, [sp, #0]
 8002fa4:	f44f 7209 	mov.w	r2, #548	; 0x224
 8002fa8:	f7fe fe70 	bl	8001c8c <sendto>
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb4:	2000015c 	.word	0x2000015c
 8002fb8:	20000038 	.word	0x20000038
 8002fbc:	20000160 	.word	0x20000160
 8002fc0:	20000131 	.word	0x20000131

08002fc4 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8002fc4:	b5b0      	push	{r4, r5, r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8002fce:	f7ff fd3f 	bl	8002a50 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	; (8003040 <send_DHCP_REQUEST+0x7c>)
 8002fd4:	f993 3000 	ldrsb.w	r3, [r3]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d004      	beq.n	8002fe6 <send_DHCP_REQUEST+0x22>
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <send_DHCP_REQUEST+0x7c>)
 8002fde:	f993 3000 	ldrsb.w	r3, [r3]
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d134      	bne.n	8003050 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8002fe6:	4b17      	ldr	r3, [pc, #92]	; (8003044 <send_DHCP_REQUEST+0x80>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	330a      	adds	r3, #10
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <send_DHCP_REQUEST+0x80>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330a      	adds	r3, #10
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <send_DHCP_REQUEST+0x80>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a11      	ldr	r2, [pc, #68]	; (8003048 <send_DHCP_REQUEST+0x84>)
 8003002:	7812      	ldrb	r2, [r2, #0]
 8003004:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8003006:	4b0f      	ldr	r3, [pc, #60]	; (8003044 <send_DHCP_REQUEST+0x80>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a0f      	ldr	r2, [pc, #60]	; (8003048 <send_DHCP_REQUEST+0x84>)
 800300c:	7852      	ldrb	r2, [r2, #1]
 800300e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <send_DHCP_REQUEST+0x80>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a0c      	ldr	r2, [pc, #48]	; (8003048 <send_DHCP_REQUEST+0x84>)
 8003016:	7892      	ldrb	r2, [r2, #2]
 8003018:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800301a:	4b0a      	ldr	r3, [pc, #40]	; (8003044 <send_DHCP_REQUEST+0x80>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a0a      	ldr	r2, [pc, #40]	; (8003048 <send_DHCP_REQUEST+0x84>)
 8003020:	78d2      	ldrb	r2, [r2, #3]
 8003022:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <send_DHCP_REQUEST+0x88>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800302a:	4b08      	ldr	r3, [pc, #32]	; (800304c <send_DHCP_REQUEST+0x88>)
 800302c:	785b      	ldrb	r3, [r3, #1]
 800302e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <send_DHCP_REQUEST+0x88>)
 8003032:	789b      	ldrb	r3, [r3, #2]
 8003034:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <send_DHCP_REQUEST+0x88>)
 8003038:	78db      	ldrb	r3, [r3, #3]
 800303a:	71fb      	strb	r3, [r7, #7]
 800303c:	e010      	b.n	8003060 <send_DHCP_REQUEST+0x9c>
 800303e:	bf00      	nop
 8003040:	20000150 	.word	0x20000150
 8003044:	2000015c 	.word	0x2000015c
 8003048:	20000140 	.word	0x20000140
 800304c:	20000134 	.word	0x20000134
   }
   else
   {
   	ip[0] = 255;
 8003050:	23ff      	movs	r3, #255	; 0xff
 8003052:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8003054:	23ff      	movs	r3, #255	; 0xff
 8003056:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8003058:	23ff      	movs	r3, #255	; 0xff
 800305a:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 800305c:	23ff      	movs	r3, #255	; 0xff
 800305e:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003060:	2304      	movs	r3, #4
 8003062:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003064:	4b8d      	ldr	r3, [pc, #564]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	897b      	ldrh	r3, [r7, #10]
 800306a:	1c59      	adds	r1, r3, #1
 800306c:	8179      	strh	r1, [r7, #10]
 800306e:	4413      	add	r3, r2
 8003070:	2235      	movs	r2, #53	; 0x35
 8003072:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003076:	4b89      	ldr	r3, [pc, #548]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	897b      	ldrh	r3, [r7, #10]
 800307c:	1c59      	adds	r1, r3, #1
 800307e:	8179      	strh	r1, [r7, #10]
 8003080:	4413      	add	r3, r2
 8003082:	2201      	movs	r2, #1
 8003084:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8003088:	4b84      	ldr	r3, [pc, #528]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	897b      	ldrh	r3, [r7, #10]
 800308e:	1c59      	adds	r1, r3, #1
 8003090:	8179      	strh	r1, [r7, #10]
 8003092:	4413      	add	r3, r2
 8003094:	2203      	movs	r2, #3
 8003096:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800309a:	4b80      	ldr	r3, [pc, #512]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	897b      	ldrh	r3, [r7, #10]
 80030a0:	1c59      	adds	r1, r3, #1
 80030a2:	8179      	strh	r1, [r7, #10]
 80030a4:	4413      	add	r3, r2
 80030a6:	223d      	movs	r2, #61	; 0x3d
 80030a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80030ac:	4b7b      	ldr	r3, [pc, #492]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	897b      	ldrh	r3, [r7, #10]
 80030b2:	1c59      	adds	r1, r3, #1
 80030b4:	8179      	strh	r1, [r7, #10]
 80030b6:	4413      	add	r3, r2
 80030b8:	2207      	movs	r2, #7
 80030ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80030be:	4b77      	ldr	r3, [pc, #476]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	1c59      	adds	r1, r3, #1
 80030c6:	8179      	strh	r1, [r7, #10]
 80030c8:	4413      	add	r3, r2
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80030d0:	4b72      	ldr	r3, [pc, #456]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	897b      	ldrh	r3, [r7, #10]
 80030d6:	1c59      	adds	r1, r3, #1
 80030d8:	8179      	strh	r1, [r7, #10]
 80030da:	4618      	mov	r0, r3
 80030dc:	4b70      	ldr	r3, [pc, #448]	; (80032a0 <send_DHCP_REQUEST+0x2dc>)
 80030de:	7819      	ldrb	r1, [r3, #0]
 80030e0:	1813      	adds	r3, r2, r0
 80030e2:	460a      	mov	r2, r1
 80030e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80030e8:	4b6c      	ldr	r3, [pc, #432]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	897b      	ldrh	r3, [r7, #10]
 80030ee:	1c59      	adds	r1, r3, #1
 80030f0:	8179      	strh	r1, [r7, #10]
 80030f2:	4618      	mov	r0, r3
 80030f4:	4b6a      	ldr	r3, [pc, #424]	; (80032a0 <send_DHCP_REQUEST+0x2dc>)
 80030f6:	7859      	ldrb	r1, [r3, #1]
 80030f8:	1813      	adds	r3, r2, r0
 80030fa:	460a      	mov	r2, r1
 80030fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003100:	4b66      	ldr	r3, [pc, #408]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	897b      	ldrh	r3, [r7, #10]
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	8179      	strh	r1, [r7, #10]
 800310a:	4618      	mov	r0, r3
 800310c:	4b64      	ldr	r3, [pc, #400]	; (80032a0 <send_DHCP_REQUEST+0x2dc>)
 800310e:	7899      	ldrb	r1, [r3, #2]
 8003110:	1813      	adds	r3, r2, r0
 8003112:	460a      	mov	r2, r1
 8003114:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003118:	4b60      	ldr	r3, [pc, #384]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	897b      	ldrh	r3, [r7, #10]
 800311e:	1c59      	adds	r1, r3, #1
 8003120:	8179      	strh	r1, [r7, #10]
 8003122:	4618      	mov	r0, r3
 8003124:	4b5e      	ldr	r3, [pc, #376]	; (80032a0 <send_DHCP_REQUEST+0x2dc>)
 8003126:	78d9      	ldrb	r1, [r3, #3]
 8003128:	1813      	adds	r3, r2, r0
 800312a:	460a      	mov	r2, r1
 800312c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003130:	4b5a      	ldr	r3, [pc, #360]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	897b      	ldrh	r3, [r7, #10]
 8003136:	1c59      	adds	r1, r3, #1
 8003138:	8179      	strh	r1, [r7, #10]
 800313a:	4618      	mov	r0, r3
 800313c:	4b58      	ldr	r3, [pc, #352]	; (80032a0 <send_DHCP_REQUEST+0x2dc>)
 800313e:	7919      	ldrb	r1, [r3, #4]
 8003140:	1813      	adds	r3, r2, r0
 8003142:	460a      	mov	r2, r1
 8003144:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003148:	4b54      	ldr	r3, [pc, #336]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	897b      	ldrh	r3, [r7, #10]
 800314e:	1c59      	adds	r1, r3, #1
 8003150:	8179      	strh	r1, [r7, #10]
 8003152:	4618      	mov	r0, r3
 8003154:	4b52      	ldr	r3, [pc, #328]	; (80032a0 <send_DHCP_REQUEST+0x2dc>)
 8003156:	7959      	ldrb	r1, [r3, #5]
 8003158:	1813      	adds	r3, r2, r0
 800315a:	460a      	mov	r2, r1
 800315c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	2bff      	cmp	r3, #255	; 0xff
 8003164:	f040 8084 	bne.w	8003270 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003168:	4b4c      	ldr	r3, [pc, #304]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	897b      	ldrh	r3, [r7, #10]
 800316e:	1c59      	adds	r1, r3, #1
 8003170:	8179      	strh	r1, [r7, #10]
 8003172:	4413      	add	r3, r2
 8003174:	2232      	movs	r2, #50	; 0x32
 8003176:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800317a:	4b48      	ldr	r3, [pc, #288]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	897b      	ldrh	r3, [r7, #10]
 8003180:	1c59      	adds	r1, r3, #1
 8003182:	8179      	strh	r1, [r7, #10]
 8003184:	4413      	add	r3, r2
 8003186:	2204      	movs	r2, #4
 8003188:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800318c:	4b43      	ldr	r3, [pc, #268]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	897b      	ldrh	r3, [r7, #10]
 8003192:	1c59      	adds	r1, r3, #1
 8003194:	8179      	strh	r1, [r7, #10]
 8003196:	4618      	mov	r0, r3
 8003198:	4b42      	ldr	r3, [pc, #264]	; (80032a4 <send_DHCP_REQUEST+0x2e0>)
 800319a:	7819      	ldrb	r1, [r3, #0]
 800319c:	1813      	adds	r3, r2, r0
 800319e:	460a      	mov	r2, r1
 80031a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80031a4:	4b3d      	ldr	r3, [pc, #244]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	897b      	ldrh	r3, [r7, #10]
 80031aa:	1c59      	adds	r1, r3, #1
 80031ac:	8179      	strh	r1, [r7, #10]
 80031ae:	4618      	mov	r0, r3
 80031b0:	4b3c      	ldr	r3, [pc, #240]	; (80032a4 <send_DHCP_REQUEST+0x2e0>)
 80031b2:	7859      	ldrb	r1, [r3, #1]
 80031b4:	1813      	adds	r3, r2, r0
 80031b6:	460a      	mov	r2, r1
 80031b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80031bc:	4b37      	ldr	r3, [pc, #220]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	897b      	ldrh	r3, [r7, #10]
 80031c2:	1c59      	adds	r1, r3, #1
 80031c4:	8179      	strh	r1, [r7, #10]
 80031c6:	4618      	mov	r0, r3
 80031c8:	4b36      	ldr	r3, [pc, #216]	; (80032a4 <send_DHCP_REQUEST+0x2e0>)
 80031ca:	7899      	ldrb	r1, [r3, #2]
 80031cc:	1813      	adds	r3, r2, r0
 80031ce:	460a      	mov	r2, r1
 80031d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80031d4:	4b31      	ldr	r3, [pc, #196]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	897b      	ldrh	r3, [r7, #10]
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	8179      	strh	r1, [r7, #10]
 80031de:	4618      	mov	r0, r3
 80031e0:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <send_DHCP_REQUEST+0x2e0>)
 80031e2:	78d9      	ldrb	r1, [r3, #3]
 80031e4:	1813      	adds	r3, r2, r0
 80031e6:	460a      	mov	r2, r1
 80031e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80031ec:	4b2b      	ldr	r3, [pc, #172]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	897b      	ldrh	r3, [r7, #10]
 80031f2:	1c59      	adds	r1, r3, #1
 80031f4:	8179      	strh	r1, [r7, #10]
 80031f6:	4413      	add	r3, r2
 80031f8:	2236      	movs	r2, #54	; 0x36
 80031fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80031fe:	4b27      	ldr	r3, [pc, #156]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	897b      	ldrh	r3, [r7, #10]
 8003204:	1c59      	adds	r1, r3, #1
 8003206:	8179      	strh	r1, [r7, #10]
 8003208:	4413      	add	r3, r2
 800320a:	2204      	movs	r2, #4
 800320c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003210:	4b22      	ldr	r3, [pc, #136]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	897b      	ldrh	r3, [r7, #10]
 8003216:	1c59      	adds	r1, r3, #1
 8003218:	8179      	strh	r1, [r7, #10]
 800321a:	4618      	mov	r0, r3
 800321c:	4b22      	ldr	r3, [pc, #136]	; (80032a8 <send_DHCP_REQUEST+0x2e4>)
 800321e:	7819      	ldrb	r1, [r3, #0]
 8003220:	1813      	adds	r3, r2, r0
 8003222:	460a      	mov	r2, r1
 8003224:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003228:	4b1c      	ldr	r3, [pc, #112]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	897b      	ldrh	r3, [r7, #10]
 800322e:	1c59      	adds	r1, r3, #1
 8003230:	8179      	strh	r1, [r7, #10]
 8003232:	4618      	mov	r0, r3
 8003234:	4b1c      	ldr	r3, [pc, #112]	; (80032a8 <send_DHCP_REQUEST+0x2e4>)
 8003236:	7859      	ldrb	r1, [r3, #1]
 8003238:	1813      	adds	r3, r2, r0
 800323a:	460a      	mov	r2, r1
 800323c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	897b      	ldrh	r3, [r7, #10]
 8003246:	1c59      	adds	r1, r3, #1
 8003248:	8179      	strh	r1, [r7, #10]
 800324a:	4618      	mov	r0, r3
 800324c:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <send_DHCP_REQUEST+0x2e4>)
 800324e:	7899      	ldrb	r1, [r3, #2]
 8003250:	1813      	adds	r3, r2, r0
 8003252:	460a      	mov	r2, r1
 8003254:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	897b      	ldrh	r3, [r7, #10]
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	8179      	strh	r1, [r7, #10]
 8003262:	4618      	mov	r0, r3
 8003264:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <send_DHCP_REQUEST+0x2e4>)
 8003266:	78d9      	ldrb	r1, [r3, #3]
 8003268:	1813      	adds	r3, r2, r0
 800326a:	460a      	mov	r2, r1
 800326c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	897b      	ldrh	r3, [r7, #10]
 8003276:	1c59      	adds	r1, r3, #1
 8003278:	8179      	strh	r1, [r7, #10]
 800327a:	4413      	add	r3, r2
 800327c:	220c      	movs	r2, #12
 800327e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <send_DHCP_REQUEST+0x2d8>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	897b      	ldrh	r3, [r7, #10]
 8003288:	1c59      	adds	r1, r3, #1
 800328a:	8179      	strh	r1, [r7, #10]
 800328c:	4413      	add	r3, r2
 800328e:	2200      	movs	r2, #0
 8003290:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	e019      	b.n	80032ce <send_DHCP_REQUEST+0x30a>
 800329a:	bf00      	nop
 800329c:	2000015c 	.word	0x2000015c
 80032a0:	20000160 	.word	0x20000160
 80032a4:	20000140 	.word	0x20000140
 80032a8:	20000134 	.word	0x20000134
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80032ac:	4b86      	ldr	r3, [pc, #536]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	897b      	ldrh	r3, [r7, #10]
 80032b2:	1c59      	adds	r1, r3, #1
 80032b4:	8179      	strh	r1, [r7, #10]
 80032b6:	4618      	mov	r0, r3
 80032b8:	4984      	ldr	r1, [pc, #528]	; (80034cc <send_DHCP_REQUEST+0x508>)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	440b      	add	r3, r1
 80032be:	7819      	ldrb	r1, [r3, #0]
 80032c0:	1813      	adds	r3, r2, r0
 80032c2:	460a      	mov	r2, r1
 80032c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	4a7f      	ldr	r2, [pc, #508]	; (80034cc <send_DHCP_REQUEST+0x508>)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1e8      	bne.n	80032ac <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80032da:	4b7d      	ldr	r3, [pc, #500]	; (80034d0 <send_DHCP_REQUEST+0x50c>)
 80032dc:	78db      	ldrb	r3, [r3, #3]
 80032de:	091b      	lsrs	r3, r3, #4
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4b79      	ldr	r3, [pc, #484]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80032e4:	681c      	ldr	r4, [r3, #0]
 80032e6:	897b      	ldrh	r3, [r7, #10]
 80032e8:	1c59      	adds	r1, r3, #1
 80032ea:	8179      	strh	r1, [r7, #10]
 80032ec:	461d      	mov	r5, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f000 fecc 	bl	800408c <NibbleToHex>
 80032f4:	4603      	mov	r3, r0
 80032f6:	461a      	mov	r2, r3
 80032f8:	1963      	adds	r3, r4, r5
 80032fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80032fe:	4b74      	ldr	r3, [pc, #464]	; (80034d0 <send_DHCP_REQUEST+0x50c>)
 8003300:	78da      	ldrb	r2, [r3, #3]
 8003302:	4b71      	ldr	r3, [pc, #452]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003304:	681c      	ldr	r4, [r3, #0]
 8003306:	897b      	ldrh	r3, [r7, #10]
 8003308:	1c59      	adds	r1, r3, #1
 800330a:	8179      	strh	r1, [r7, #10]
 800330c:	461d      	mov	r5, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 febc 	bl	800408c <NibbleToHex>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	1963      	adds	r3, r4, r5
 800331a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800331e:	4b6c      	ldr	r3, [pc, #432]	; (80034d0 <send_DHCP_REQUEST+0x50c>)
 8003320:	791b      	ldrb	r3, [r3, #4]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4b68      	ldr	r3, [pc, #416]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003328:	681c      	ldr	r4, [r3, #0]
 800332a:	897b      	ldrh	r3, [r7, #10]
 800332c:	1c59      	adds	r1, r3, #1
 800332e:	8179      	strh	r1, [r7, #10]
 8003330:	461d      	mov	r5, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f000 feaa 	bl	800408c <NibbleToHex>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	1963      	adds	r3, r4, r5
 800333e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8003342:	4b63      	ldr	r3, [pc, #396]	; (80034d0 <send_DHCP_REQUEST+0x50c>)
 8003344:	791a      	ldrb	r2, [r3, #4]
 8003346:	4b60      	ldr	r3, [pc, #384]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003348:	681c      	ldr	r4, [r3, #0]
 800334a:	897b      	ldrh	r3, [r7, #10]
 800334c:	1c59      	adds	r1, r3, #1
 800334e:	8179      	strh	r1, [r7, #10]
 8003350:	461d      	mov	r5, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f000 fe9a 	bl	800408c <NibbleToHex>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	1963      	adds	r3, r4, r5
 800335e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8003362:	4b5b      	ldr	r3, [pc, #364]	; (80034d0 <send_DHCP_REQUEST+0x50c>)
 8003364:	795b      	ldrb	r3, [r3, #5]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	b2da      	uxtb	r2, r3
 800336a:	4b57      	ldr	r3, [pc, #348]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 800336c:	681c      	ldr	r4, [r3, #0]
 800336e:	897b      	ldrh	r3, [r7, #10]
 8003370:	1c59      	adds	r1, r3, #1
 8003372:	8179      	strh	r1, [r7, #10]
 8003374:	461d      	mov	r5, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f000 fe88 	bl	800408c <NibbleToHex>
 800337c:	4603      	mov	r3, r0
 800337e:	461a      	mov	r2, r3
 8003380:	1963      	adds	r3, r4, r5
 8003382:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8003386:	4b52      	ldr	r3, [pc, #328]	; (80034d0 <send_DHCP_REQUEST+0x50c>)
 8003388:	795a      	ldrb	r2, [r3, #5]
 800338a:	4b4f      	ldr	r3, [pc, #316]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 800338c:	681c      	ldr	r4, [r3, #0]
 800338e:	897b      	ldrh	r3, [r7, #10]
 8003390:	1c59      	adds	r1, r3, #1
 8003392:	8179      	strh	r1, [r7, #10]
 8003394:	461d      	mov	r5, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 fe78 	bl	800408c <NibbleToHex>
 800339c:	4603      	mov	r3, r0
 800339e:	461a      	mov	r2, r3
 80033a0:	1963      	adds	r3, r4, r5
 80033a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	b2d9      	uxtb	r1, r3
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	8978      	ldrh	r0, [r7, #10]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3307      	adds	r3, #7
 80033b4:	1ac3      	subs	r3, r0, r3
 80033b6:	3106      	adds	r1, #6
 80033b8:	b2c9      	uxtb	r1, r1
 80033ba:	4413      	add	r3, r2
 80033bc:	460a      	mov	r2, r1
 80033be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80033c2:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	897b      	ldrh	r3, [r7, #10]
 80033c8:	1c59      	adds	r1, r3, #1
 80033ca:	8179      	strh	r1, [r7, #10]
 80033cc:	4413      	add	r3, r2
 80033ce:	2237      	movs	r2, #55	; 0x37
 80033d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 80033d4:	4b3c      	ldr	r3, [pc, #240]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	897b      	ldrh	r3, [r7, #10]
 80033da:	1c59      	adds	r1, r3, #1
 80033dc:	8179      	strh	r1, [r7, #10]
 80033de:	4413      	add	r3, r2
 80033e0:	2208      	movs	r2, #8
 80033e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80033e6:	4b38      	ldr	r3, [pc, #224]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	897b      	ldrh	r3, [r7, #10]
 80033ec:	1c59      	adds	r1, r3, #1
 80033ee:	8179      	strh	r1, [r7, #10]
 80033f0:	4413      	add	r3, r2
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80033f8:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	897b      	ldrh	r3, [r7, #10]
 80033fe:	1c59      	adds	r1, r3, #1
 8003400:	8179      	strh	r1, [r7, #10]
 8003402:	4413      	add	r3, r2
 8003404:	2203      	movs	r2, #3
 8003406:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800340a:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	897b      	ldrh	r3, [r7, #10]
 8003410:	1c59      	adds	r1, r3, #1
 8003412:	8179      	strh	r1, [r7, #10]
 8003414:	4413      	add	r3, r2
 8003416:	2206      	movs	r2, #6
 8003418:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 800341c:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	897b      	ldrh	r3, [r7, #10]
 8003422:	1c59      	adds	r1, r3, #1
 8003424:	8179      	strh	r1, [r7, #10]
 8003426:	4413      	add	r3, r2
 8003428:	220f      	movs	r2, #15
 800342a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800342e:	4b26      	ldr	r3, [pc, #152]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	897b      	ldrh	r3, [r7, #10]
 8003434:	1c59      	adds	r1, r3, #1
 8003436:	8179      	strh	r1, [r7, #10]
 8003438:	4413      	add	r3, r2
 800343a:	223a      	movs	r2, #58	; 0x3a
 800343c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	897b      	ldrh	r3, [r7, #10]
 8003446:	1c59      	adds	r1, r3, #1
 8003448:	8179      	strh	r1, [r7, #10]
 800344a:	4413      	add	r3, r2
 800344c:	223b      	movs	r2, #59	; 0x3b
 800344e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	1c59      	adds	r1, r3, #1
 800345a:	8179      	strh	r1, [r7, #10]
 800345c:	4413      	add	r3, r2
 800345e:	221f      	movs	r2, #31
 8003460:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8003464:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	897b      	ldrh	r3, [r7, #10]
 800346a:	1c59      	adds	r1, r3, #1
 800346c:	8179      	strh	r1, [r7, #10]
 800346e:	4413      	add	r3, r2
 8003470:	2221      	movs	r2, #33	; 0x21
 8003472:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	897b      	ldrh	r3, [r7, #10]
 800347c:	1c59      	adds	r1, r3, #1
 800347e:	8179      	strh	r1, [r7, #10]
 8003480:	4413      	add	r3, r2
 8003482:	22ff      	movs	r2, #255	; 0xff
 8003484:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003488:	897b      	ldrh	r3, [r7, #10]
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e009      	b.n	80034a2 <send_DHCP_REQUEST+0x4de>
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	4413      	add	r3, r2
 8003496:	33ec      	adds	r3, #236	; 0xec
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	3301      	adds	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80034a8:	dbf1      	blt.n	800348e <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <send_DHCP_REQUEST+0x510>)
 80034ac:	7818      	ldrb	r0, [r3, #0]
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <send_DHCP_REQUEST+0x504>)
 80034b0:	6819      	ldr	r1, [r3, #0]
 80034b2:	1d3b      	adds	r3, r7, #4
 80034b4:	2243      	movs	r2, #67	; 0x43
 80034b6:	9200      	str	r2, [sp, #0]
 80034b8:	f44f 7209 	mov.w	r2, #548	; 0x224
 80034bc:	f7fe fbe6 	bl	8001c8c <sendto>

}
 80034c0:	bf00      	nop
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bdb0      	pop	{r4, r5, r7, pc}
 80034c8:	2000015c 	.word	0x2000015c
 80034cc:	20000038 	.word	0x20000038
 80034d0:	20000160 	.word	0x20000160
 80034d4:	20000131 	.word	0x20000131

080034d8 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80034de:	2300      	movs	r3, #0
 80034e0:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 80034e2:	f7ff fab5 	bl	8002a50 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80034e6:	2304      	movs	r3, #4
 80034e8:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80034ea:	4b9f      	ldr	r3, [pc, #636]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	330a      	adds	r3, #10
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80034f4:	4b9c      	ldr	r3, [pc, #624]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330a      	adds	r3, #10
 80034fa:	3301      	adds	r3, #1
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003500:	4b99      	ldr	r3, [pc, #612]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	897b      	ldrh	r3, [r7, #10]
 8003506:	1c59      	adds	r1, r3, #1
 8003508:	8179      	strh	r1, [r7, #10]
 800350a:	4413      	add	r3, r2
 800350c:	2235      	movs	r2, #53	; 0x35
 800350e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003512:	4b95      	ldr	r3, [pc, #596]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	897b      	ldrh	r3, [r7, #10]
 8003518:	1c59      	adds	r1, r3, #1
 800351a:	8179      	strh	r1, [r7, #10]
 800351c:	4413      	add	r3, r2
 800351e:	2201      	movs	r2, #1
 8003520:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8003524:	4b90      	ldr	r3, [pc, #576]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	897b      	ldrh	r3, [r7, #10]
 800352a:	1c59      	adds	r1, r3, #1
 800352c:	8179      	strh	r1, [r7, #10]
 800352e:	4413      	add	r3, r2
 8003530:	2204      	movs	r2, #4
 8003532:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003536:	4b8c      	ldr	r3, [pc, #560]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	897b      	ldrh	r3, [r7, #10]
 800353c:	1c59      	adds	r1, r3, #1
 800353e:	8179      	strh	r1, [r7, #10]
 8003540:	4413      	add	r3, r2
 8003542:	223d      	movs	r2, #61	; 0x3d
 8003544:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003548:	4b87      	ldr	r3, [pc, #540]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	897b      	ldrh	r3, [r7, #10]
 800354e:	1c59      	adds	r1, r3, #1
 8003550:	8179      	strh	r1, [r7, #10]
 8003552:	4413      	add	r3, r2
 8003554:	2207      	movs	r2, #7
 8003556:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800355a:	4b83      	ldr	r3, [pc, #524]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	897b      	ldrh	r3, [r7, #10]
 8003560:	1c59      	adds	r1, r3, #1
 8003562:	8179      	strh	r1, [r7, #10]
 8003564:	4413      	add	r3, r2
 8003566:	2201      	movs	r2, #1
 8003568:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800356c:	4b7e      	ldr	r3, [pc, #504]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	897b      	ldrh	r3, [r7, #10]
 8003572:	1c59      	adds	r1, r3, #1
 8003574:	8179      	strh	r1, [r7, #10]
 8003576:	4618      	mov	r0, r3
 8003578:	4b7c      	ldr	r3, [pc, #496]	; (800376c <send_DHCP_DECLINE+0x294>)
 800357a:	7819      	ldrb	r1, [r3, #0]
 800357c:	1813      	adds	r3, r2, r0
 800357e:	460a      	mov	r2, r1
 8003580:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003584:	4b78      	ldr	r3, [pc, #480]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	897b      	ldrh	r3, [r7, #10]
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	8179      	strh	r1, [r7, #10]
 800358e:	4618      	mov	r0, r3
 8003590:	4b76      	ldr	r3, [pc, #472]	; (800376c <send_DHCP_DECLINE+0x294>)
 8003592:	7859      	ldrb	r1, [r3, #1]
 8003594:	1813      	adds	r3, r2, r0
 8003596:	460a      	mov	r2, r1
 8003598:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800359c:	4b72      	ldr	r3, [pc, #456]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	897b      	ldrh	r3, [r7, #10]
 80035a2:	1c59      	adds	r1, r3, #1
 80035a4:	8179      	strh	r1, [r7, #10]
 80035a6:	4618      	mov	r0, r3
 80035a8:	4b70      	ldr	r3, [pc, #448]	; (800376c <send_DHCP_DECLINE+0x294>)
 80035aa:	7899      	ldrb	r1, [r3, #2]
 80035ac:	1813      	adds	r3, r2, r0
 80035ae:	460a      	mov	r2, r1
 80035b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80035b4:	4b6c      	ldr	r3, [pc, #432]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	897b      	ldrh	r3, [r7, #10]
 80035ba:	1c59      	adds	r1, r3, #1
 80035bc:	8179      	strh	r1, [r7, #10]
 80035be:	4618      	mov	r0, r3
 80035c0:	4b6a      	ldr	r3, [pc, #424]	; (800376c <send_DHCP_DECLINE+0x294>)
 80035c2:	78d9      	ldrb	r1, [r3, #3]
 80035c4:	1813      	adds	r3, r2, r0
 80035c6:	460a      	mov	r2, r1
 80035c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80035cc:	4b66      	ldr	r3, [pc, #408]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	897b      	ldrh	r3, [r7, #10]
 80035d2:	1c59      	adds	r1, r3, #1
 80035d4:	8179      	strh	r1, [r7, #10]
 80035d6:	4618      	mov	r0, r3
 80035d8:	4b64      	ldr	r3, [pc, #400]	; (800376c <send_DHCP_DECLINE+0x294>)
 80035da:	7919      	ldrb	r1, [r3, #4]
 80035dc:	1813      	adds	r3, r2, r0
 80035de:	460a      	mov	r2, r1
 80035e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80035e4:	4b60      	ldr	r3, [pc, #384]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	897b      	ldrh	r3, [r7, #10]
 80035ea:	1c59      	adds	r1, r3, #1
 80035ec:	8179      	strh	r1, [r7, #10]
 80035ee:	4618      	mov	r0, r3
 80035f0:	4b5e      	ldr	r3, [pc, #376]	; (800376c <send_DHCP_DECLINE+0x294>)
 80035f2:	7959      	ldrb	r1, [r3, #5]
 80035f4:	1813      	adds	r3, r2, r0
 80035f6:	460a      	mov	r2, r1
 80035f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80035fc:	4b5a      	ldr	r3, [pc, #360]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	897b      	ldrh	r3, [r7, #10]
 8003602:	1c59      	adds	r1, r3, #1
 8003604:	8179      	strh	r1, [r7, #10]
 8003606:	4413      	add	r3, r2
 8003608:	2232      	movs	r2, #50	; 0x32
 800360a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 800360e:	4b56      	ldr	r3, [pc, #344]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	897b      	ldrh	r3, [r7, #10]
 8003614:	1c59      	adds	r1, r3, #1
 8003616:	8179      	strh	r1, [r7, #10]
 8003618:	4413      	add	r3, r2
 800361a:	2204      	movs	r2, #4
 800361c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003620:	4b51      	ldr	r3, [pc, #324]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	897b      	ldrh	r3, [r7, #10]
 8003626:	1c59      	adds	r1, r3, #1
 8003628:	8179      	strh	r1, [r7, #10]
 800362a:	4618      	mov	r0, r3
 800362c:	4b50      	ldr	r3, [pc, #320]	; (8003770 <send_DHCP_DECLINE+0x298>)
 800362e:	7819      	ldrb	r1, [r3, #0]
 8003630:	1813      	adds	r3, r2, r0
 8003632:	460a      	mov	r2, r1
 8003634:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003638:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	897b      	ldrh	r3, [r7, #10]
 800363e:	1c59      	adds	r1, r3, #1
 8003640:	8179      	strh	r1, [r7, #10]
 8003642:	4618      	mov	r0, r3
 8003644:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <send_DHCP_DECLINE+0x298>)
 8003646:	7859      	ldrb	r1, [r3, #1]
 8003648:	1813      	adds	r3, r2, r0
 800364a:	460a      	mov	r2, r1
 800364c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003650:	4b45      	ldr	r3, [pc, #276]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	897b      	ldrh	r3, [r7, #10]
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	8179      	strh	r1, [r7, #10]
 800365a:	4618      	mov	r0, r3
 800365c:	4b44      	ldr	r3, [pc, #272]	; (8003770 <send_DHCP_DECLINE+0x298>)
 800365e:	7899      	ldrb	r1, [r3, #2]
 8003660:	1813      	adds	r3, r2, r0
 8003662:	460a      	mov	r2, r1
 8003664:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003668:	4b3f      	ldr	r3, [pc, #252]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	897b      	ldrh	r3, [r7, #10]
 800366e:	1c59      	adds	r1, r3, #1
 8003670:	8179      	strh	r1, [r7, #10]
 8003672:	4618      	mov	r0, r3
 8003674:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <send_DHCP_DECLINE+0x298>)
 8003676:	78d9      	ldrb	r1, [r3, #3]
 8003678:	1813      	adds	r3, r2, r0
 800367a:	460a      	mov	r2, r1
 800367c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003680:	4b39      	ldr	r3, [pc, #228]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	897b      	ldrh	r3, [r7, #10]
 8003686:	1c59      	adds	r1, r3, #1
 8003688:	8179      	strh	r1, [r7, #10]
 800368a:	4413      	add	r3, r2
 800368c:	2236      	movs	r2, #54	; 0x36
 800368e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003692:	4b35      	ldr	r3, [pc, #212]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	897b      	ldrh	r3, [r7, #10]
 8003698:	1c59      	adds	r1, r3, #1
 800369a:	8179      	strh	r1, [r7, #10]
 800369c:	4413      	add	r3, r2
 800369e:	2204      	movs	r2, #4
 80036a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80036a4:	4b30      	ldr	r3, [pc, #192]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	897b      	ldrh	r3, [r7, #10]
 80036aa:	1c59      	adds	r1, r3, #1
 80036ac:	8179      	strh	r1, [r7, #10]
 80036ae:	4618      	mov	r0, r3
 80036b0:	4b30      	ldr	r3, [pc, #192]	; (8003774 <send_DHCP_DECLINE+0x29c>)
 80036b2:	7819      	ldrb	r1, [r3, #0]
 80036b4:	1813      	adds	r3, r2, r0
 80036b6:	460a      	mov	r2, r1
 80036b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80036bc:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	897b      	ldrh	r3, [r7, #10]
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	8179      	strh	r1, [r7, #10]
 80036c6:	4618      	mov	r0, r3
 80036c8:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <send_DHCP_DECLINE+0x29c>)
 80036ca:	7859      	ldrb	r1, [r3, #1]
 80036cc:	1813      	adds	r3, r2, r0
 80036ce:	460a      	mov	r2, r1
 80036d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80036d4:	4b24      	ldr	r3, [pc, #144]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	897b      	ldrh	r3, [r7, #10]
 80036da:	1c59      	adds	r1, r3, #1
 80036dc:	8179      	strh	r1, [r7, #10]
 80036de:	4618      	mov	r0, r3
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <send_DHCP_DECLINE+0x29c>)
 80036e2:	7899      	ldrb	r1, [r3, #2]
 80036e4:	1813      	adds	r3, r2, r0
 80036e6:	460a      	mov	r2, r1
 80036e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80036ec:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <send_DHCP_DECLINE+0x290>)
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	897b      	ldrh	r3, [r7, #10]
 80036f2:	1c59      	adds	r1, r3, #1
 80036f4:	8179      	strh	r1, [r7, #10]
 80036f6:	4618      	mov	r0, r3
 80036f8:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <send_DHCP_DECLINE+0x29c>)
 80036fa:	78d9      	ldrb	r1, [r3, #3]
 80036fc:	1813      	adds	r3, r2, r0
 80036fe:	460a      	mov	r2, r1
 8003700:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8003704:	4b18      	ldr	r3, [pc, #96]	; (8003768 <send_DHCP_DECLINE+0x290>)
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	897b      	ldrh	r3, [r7, #10]
 800370a:	1c59      	adds	r1, r3, #1
 800370c:	8179      	strh	r1, [r7, #10]
 800370e:	4413      	add	r3, r2
 8003710:	22ff      	movs	r2, #255	; 0xff
 8003712:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003716:	897b      	ldrh	r3, [r7, #10]
 8003718:	60fb      	str	r3, [r7, #12]
 800371a:	e009      	b.n	8003730 <send_DHCP_DECLINE+0x258>
 800371c:	4b12      	ldr	r3, [pc, #72]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	33ec      	adds	r3, #236	; 0xec
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003736:	dbf1      	blt.n	800371c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8003738:	23ff      	movs	r3, #255	; 0xff
 800373a:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 800373c:	23ff      	movs	r3, #255	; 0xff
 800373e:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8003740:	23ff      	movs	r3, #255	; 0xff
 8003742:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8003744:	23ff      	movs	r3, #255	; 0xff
 8003746:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <send_DHCP_DECLINE+0x2a0>)
 800374a:	7818      	ldrb	r0, [r3, #0]
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <send_DHCP_DECLINE+0x290>)
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	1d3b      	adds	r3, r7, #4
 8003752:	2243      	movs	r2, #67	; 0x43
 8003754:	9200      	str	r2, [sp, #0]
 8003756:	f44f 7209 	mov.w	r2, #548	; 0x224
 800375a:	f7fe fa97 	bl	8001c8c <sendto>
}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	2000015c 	.word	0x2000015c
 800376c:	20000160 	.word	0x20000160
 8003770:	20000140 	.word	0x20000140
 8003774:	20000134 	.word	0x20000134
 8003778:	20000131 	.word	0x20000131

0800377c <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b089      	sub	sp, #36	; 0x24
 8003780:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8003786:	4ba1      	ldr	r3, [pc, #644]	; (8003a0c <parseDHCPMSG+0x290>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fbcf 	bl	8000f2e <getSn_RX_RSR>
 8003790:	4603      	mov	r3, r0
 8003792:	823b      	strh	r3, [r7, #16]
 8003794:	8a3b      	ldrh	r3, [r7, #16]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d011      	beq.n	80037be <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 800379a:	4b9c      	ldr	r3, [pc, #624]	; (8003a0c <parseDHCPMSG+0x290>)
 800379c:	7818      	ldrb	r0, [r3, #0]
 800379e:	4b9c      	ldr	r3, [pc, #624]	; (8003a10 <parseDHCPMSG+0x294>)
 80037a0:	6819      	ldr	r1, [r3, #0]
 80037a2:	1d3c      	adds	r4, r7, #4
 80037a4:	8a3a      	ldrh	r2, [r7, #16]
 80037a6:	1cbb      	adds	r3, r7, #2
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	4623      	mov	r3, r4
 80037ac:	f7fe fbc4 	bl	8001f38 <recvfrom>
 80037b0:	4603      	mov	r3, r0
 80037b2:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	2b43      	cmp	r3, #67	; 0x43
 80037b8:	f040 81ed 	bne.w	8003b96 <parseDHCPMSG+0x41a>
 80037bc:	e001      	b.n	80037c2 <parseDHCPMSG+0x46>
   else return 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	e1eb      	b.n	8003b9a <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80037c2:	4b93      	ldr	r3, [pc, #588]	; (8003a10 <parseDHCPMSG+0x294>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	7f1a      	ldrb	r2, [r3, #28]
 80037c8:	4b92      	ldr	r3, [pc, #584]	; (8003a14 <parseDHCPMSG+0x298>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d124      	bne.n	800381a <parseDHCPMSG+0x9e>
 80037d0:	4b8f      	ldr	r3, [pc, #572]	; (8003a10 <parseDHCPMSG+0x294>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	7f5a      	ldrb	r2, [r3, #29]
 80037d6:	4b8f      	ldr	r3, [pc, #572]	; (8003a14 <parseDHCPMSG+0x298>)
 80037d8:	785b      	ldrb	r3, [r3, #1]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d11d      	bne.n	800381a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80037de:	4b8c      	ldr	r3, [pc, #560]	; (8003a10 <parseDHCPMSG+0x294>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	7f9a      	ldrb	r2, [r3, #30]
 80037e4:	4b8b      	ldr	r3, [pc, #556]	; (8003a14 <parseDHCPMSG+0x298>)
 80037e6:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d116      	bne.n	800381a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80037ec:	4b88      	ldr	r3, [pc, #544]	; (8003a10 <parseDHCPMSG+0x294>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	7fda      	ldrb	r2, [r3, #31]
 80037f2:	4b88      	ldr	r3, [pc, #544]	; (8003a14 <parseDHCPMSG+0x298>)
 80037f4:	78db      	ldrb	r3, [r3, #3]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d10f      	bne.n	800381a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80037fa:	4b85      	ldr	r3, [pc, #532]	; (8003a10 <parseDHCPMSG+0x294>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003802:	4b84      	ldr	r3, [pc, #528]	; (8003a14 <parseDHCPMSG+0x298>)
 8003804:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d107      	bne.n	800381a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 800380a:	4b81      	ldr	r3, [pc, #516]	; (8003a10 <parseDHCPMSG+0x294>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8003812:	4b80      	ldr	r3, [pc, #512]	; (8003a14 <parseDHCPMSG+0x298>)
 8003814:	795b      	ldrb	r3, [r3, #5]
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 800381a:	2300      	movs	r3, #0
 800381c:	e1bd      	b.n	8003b9a <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 800381e:	4b7e      	ldr	r3, [pc, #504]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10b      	bne.n	800383e <parseDHCPMSG+0xc2>
 8003826:	4b7c      	ldr	r3, [pc, #496]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003828:	785b      	ldrb	r3, [r3, #1]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d107      	bne.n	800383e <parseDHCPMSG+0xc2>
 800382e:	4b7a      	ldr	r3, [pc, #488]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003830:	789b      	ldrb	r3, [r3, #2]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d103      	bne.n	800383e <parseDHCPMSG+0xc2>
 8003836:	4b78      	ldr	r3, [pc, #480]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003838:	78db      	ldrb	r3, [r3, #3]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d029      	beq.n	8003892 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800383e:	793a      	ldrb	r2, [r7, #4]
 8003840:	4b75      	ldr	r3, [pc, #468]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	429a      	cmp	r2, r3
 8003846:	d10e      	bne.n	8003866 <parseDHCPMSG+0xea>
 8003848:	797a      	ldrb	r2, [r7, #5]
 800384a:	4b73      	ldr	r3, [pc, #460]	; (8003a18 <parseDHCPMSG+0x29c>)
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	429a      	cmp	r2, r3
 8003850:	d109      	bne.n	8003866 <parseDHCPMSG+0xea>
 8003852:	79ba      	ldrb	r2, [r7, #6]
 8003854:	4b70      	ldr	r3, [pc, #448]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003856:	789b      	ldrb	r3, [r3, #2]
 8003858:	429a      	cmp	r2, r3
 800385a:	d104      	bne.n	8003866 <parseDHCPMSG+0xea>
 800385c:	79fa      	ldrb	r2, [r7, #7]
 800385e:	4b6e      	ldr	r3, [pc, #440]	; (8003a18 <parseDHCPMSG+0x29c>)
 8003860:	78db      	ldrb	r3, [r3, #3]
 8003862:	429a      	cmp	r2, r3
 8003864:	d015      	beq.n	8003892 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003866:	793a      	ldrb	r2, [r7, #4]
 8003868:	4b6c      	ldr	r3, [pc, #432]	; (8003a1c <parseDHCPMSG+0x2a0>)
 800386a:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800386c:	429a      	cmp	r2, r3
 800386e:	d10e      	bne.n	800388e <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8003870:	797a      	ldrb	r2, [r7, #5]
 8003872:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <parseDHCPMSG+0x2a0>)
 8003874:	785b      	ldrb	r3, [r3, #1]
 8003876:	429a      	cmp	r2, r3
 8003878:	d109      	bne.n	800388e <parseDHCPMSG+0x112>
 800387a:	79ba      	ldrb	r2, [r7, #6]
 800387c:	4b67      	ldr	r3, [pc, #412]	; (8003a1c <parseDHCPMSG+0x2a0>)
 800387e:	789b      	ldrb	r3, [r3, #2]
 8003880:	429a      	cmp	r2, r3
 8003882:	d104      	bne.n	800388e <parseDHCPMSG+0x112>
 8003884:	79fa      	ldrb	r2, [r7, #7]
 8003886:	4b65      	ldr	r3, [pc, #404]	; (8003a1c <parseDHCPMSG+0x2a0>)
 8003888:	78db      	ldrb	r3, [r3, #3]
 800388a:	429a      	cmp	r2, r3
 800388c:	d001      	beq.n	8003892 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 800388e:	2300      	movs	r3, #0
 8003890:	e183      	b.n	8003b9a <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8003892:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <parseDHCPMSG+0x294>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	33f0      	adds	r3, #240	; 0xf0
 800389c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800389e:	8a3b      	ldrh	r3, [r7, #16]
 80038a0:	3bf0      	subs	r3, #240	; 0xf0
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4413      	add	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 80038a8:	e170      	b.n	8003b8c <parseDHCPMSG+0x410>

			switch ( *p ) {
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b36      	cmp	r3, #54	; 0x36
 80038b0:	dc76      	bgt.n	80039a0 <parseDHCPMSG+0x224>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f2c0 815d 	blt.w	8003b72 <parseDHCPMSG+0x3f6>
 80038b8:	2b36      	cmp	r3, #54	; 0x36
 80038ba:	f200 815a 	bhi.w	8003b72 <parseDHCPMSG+0x3f6>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <parseDHCPMSG+0x148>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080039ad 	.word	0x080039ad
 80038c8:	080039cd 	.word	0x080039cd
 80038cc:	08003b73 	.word	0x08003b73
 80038d0:	08003a25 	.word	0x08003a25
 80038d4:	08003b73 	.word	0x08003b73
 80038d8:	08003b73 	.word	0x08003b73
 80038dc:	08003a71 	.word	0x08003a71
 80038e0:	08003b73 	.word	0x08003b73
 80038e4:	08003b73 	.word	0x08003b73
 80038e8:	08003b73 	.word	0x08003b73
 80038ec:	08003b73 	.word	0x08003b73
 80038f0:	08003b73 	.word	0x08003b73
 80038f4:	08003b73 	.word	0x08003b73
 80038f8:	08003b73 	.word	0x08003b73
 80038fc:	08003b73 	.word	0x08003b73
 8003900:	08003b73 	.word	0x08003b73
 8003904:	08003b73 	.word	0x08003b73
 8003908:	08003b73 	.word	0x08003b73
 800390c:	08003b73 	.word	0x08003b73
 8003910:	08003b73 	.word	0x08003b73
 8003914:	08003b73 	.word	0x08003b73
 8003918:	08003b73 	.word	0x08003b73
 800391c:	08003b73 	.word	0x08003b73
 8003920:	08003b73 	.word	0x08003b73
 8003924:	08003b73 	.word	0x08003b73
 8003928:	08003b73 	.word	0x08003b73
 800392c:	08003b73 	.word	0x08003b73
 8003930:	08003b73 	.word	0x08003b73
 8003934:	08003b73 	.word	0x08003b73
 8003938:	08003b73 	.word	0x08003b73
 800393c:	08003b73 	.word	0x08003b73
 8003940:	08003b73 	.word	0x08003b73
 8003944:	08003b73 	.word	0x08003b73
 8003948:	08003b73 	.word	0x08003b73
 800394c:	08003b73 	.word	0x08003b73
 8003950:	08003b73 	.word	0x08003b73
 8003954:	08003b73 	.word	0x08003b73
 8003958:	08003b73 	.word	0x08003b73
 800395c:	08003b73 	.word	0x08003b73
 8003960:	08003b73 	.word	0x08003b73
 8003964:	08003b73 	.word	0x08003b73
 8003968:	08003b73 	.word	0x08003b73
 800396c:	08003b73 	.word	0x08003b73
 8003970:	08003b73 	.word	0x08003b73
 8003974:	08003b73 	.word	0x08003b73
 8003978:	08003b73 	.word	0x08003b73
 800397c:	08003b73 	.word	0x08003b73
 8003980:	08003b73 	.word	0x08003b73
 8003984:	08003b73 	.word	0x08003b73
 8003988:	08003b73 	.word	0x08003b73
 800398c:	08003b73 	.word	0x08003b73
 8003990:	08003abd 	.word	0x08003abd
 8003994:	08003b73 	.word	0x08003b73
 8003998:	080039b5 	.word	0x080039b5
 800399c:	08003b19 	.word	0x08003b19
 80039a0:	2bff      	cmp	r3, #255	; 0xff
 80039a2:	f040 80e6 	bne.w	8003b72 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	617b      	str	r3, [r7, #20]
   				break;
 80039aa:	e0ef      	b.n	8003b8c <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	3301      	adds	r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
   				break;
 80039b2:	e0eb      	b.n	8003b8c <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	3301      	adds	r3, #1
 80039b8:	617b      	str	r3, [r7, #20]
   				p++;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	3301      	adds	r3, #1
 80039be:	617b      	str	r3, [r7, #20]
   				type = *p++;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	617a      	str	r2, [r7, #20]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	74fb      	strb	r3, [r7, #19]
   				break;
 80039ca:	e0df      	b.n	8003b8c <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3301      	adds	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
   				p++;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	3301      	adds	r3, #1
 80039d6:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	617a      	str	r2, [r7, #20]
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <parseDHCPMSG+0x2a4>)
 80039e2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	617a      	str	r2, [r7, #20]
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <parseDHCPMSG+0x2a4>)
 80039ee:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	1c5a      	adds	r2, r3, #1
 80039f4:	617a      	str	r2, [r7, #20]
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <parseDHCPMSG+0x2a4>)
 80039fa:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	617a      	str	r2, [r7, #20]
 8003a02:	781a      	ldrb	r2, [r3, #0]
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <parseDHCPMSG+0x2a4>)
 8003a06:	70da      	strb	r2, [r3, #3]
   				break;
 8003a08:	e0c0      	b.n	8003b8c <parseDHCPMSG+0x410>
 8003a0a:	bf00      	nop
 8003a0c:	20000131 	.word	0x20000131
 8003a10:	2000015c 	.word	0x2000015c
 8003a14:	20000160 	.word	0x20000160
 8003a18:	20000134 	.word	0x20000134
 8003a1c:	20000138 	.word	0x20000138
 8003a20:	20000148 	.word	0x20000148
   			case routersOnSubnet :
   				p++;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	3301      	adds	r3, #1
 8003a28:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	617a      	str	r2, [r7, #20]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	1c5a      	adds	r2, r3, #1
 8003a38:	617a      	str	r2, [r7, #20]
 8003a3a:	781a      	ldrb	r2, [r3, #0]
 8003a3c:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <parseDHCPMSG+0x428>)
 8003a3e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	617a      	str	r2, [r7, #20]
 8003a46:	781a      	ldrb	r2, [r3, #0]
 8003a48:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <parseDHCPMSG+0x428>)
 8003a4a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	617a      	str	r2, [r7, #20]
 8003a52:	781a      	ldrb	r2, [r3, #0]
 8003a54:	4b53      	ldr	r3, [pc, #332]	; (8003ba4 <parseDHCPMSG+0x428>)
 8003a56:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	617a      	str	r2, [r7, #20]
 8003a5e:	781a      	ldrb	r2, [r3, #0]
 8003a60:	4b50      	ldr	r3, [pc, #320]	; (8003ba4 <parseDHCPMSG+0x428>)
 8003a62:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003a64:	7afb      	ldrb	r3, [r7, #11]
 8003a66:	3b04      	subs	r3, #4
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
   				break;
 8003a6e:	e08d      	b.n	8003b8c <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3301      	adds	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	617a      	str	r2, [r7, #20]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	617a      	str	r2, [r7, #20]
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	4b47      	ldr	r3, [pc, #284]	; (8003ba8 <parseDHCPMSG+0x42c>)
 8003a8a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	617a      	str	r2, [r7, #20]
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	4b44      	ldr	r3, [pc, #272]	; (8003ba8 <parseDHCPMSG+0x42c>)
 8003a96:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	617a      	str	r2, [r7, #20]
 8003a9e:	781a      	ldrb	r2, [r3, #0]
 8003aa0:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <parseDHCPMSG+0x42c>)
 8003aa2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	617a      	str	r2, [r7, #20]
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	4b3e      	ldr	r3, [pc, #248]	; (8003ba8 <parseDHCPMSG+0x42c>)
 8003aae:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8003ab0:	7afb      	ldrb	r3, [r7, #11]
 8003ab2:	3b04      	subs	r3, #4
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
   				break;
 8003aba:	e067      	b.n	8003b8c <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	617a      	str	r2, [r7, #20]
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	617a      	str	r2, [r7, #20]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4b35      	ldr	r3, [pc, #212]	; (8003bac <parseDHCPMSG+0x430>)
 8003ad8:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <parseDHCPMSG+0x430>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	021a      	lsls	r2, r3, #8
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	6179      	str	r1, [r7, #20]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	4413      	add	r3, r2
 8003aea:	4a30      	ldr	r2, [pc, #192]	; (8003bac <parseDHCPMSG+0x430>)
 8003aec:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003aee:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <parseDHCPMSG+0x430>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	021a      	lsls	r2, r3, #8
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	1c59      	adds	r1, r3, #1
 8003af8:	6179      	str	r1, [r7, #20]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	4413      	add	r3, r2
 8003afe:	4a2b      	ldr	r2, [pc, #172]	; (8003bac <parseDHCPMSG+0x430>)
 8003b00:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8003b02:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <parseDHCPMSG+0x430>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	021a      	lsls	r2, r3, #8
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	6179      	str	r1, [r7, #20]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	4413      	add	r3, r2
 8003b12:	4a26      	ldr	r2, [pc, #152]	; (8003bac <parseDHCPMSG+0x430>)
 8003b14:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8003b16:	e039      	b.n	8003b8c <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	617a      	str	r2, [r7, #20]
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	617a      	str	r2, [r7, #20]
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	4b1f      	ldr	r3, [pc, #124]	; (8003bb0 <parseDHCPMSG+0x434>)
 8003b32:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	617a      	str	r2, [r7, #20]
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <parseDHCPMSG+0x434>)
 8003b3e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	617a      	str	r2, [r7, #20]
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <parseDHCPMSG+0x434>)
 8003b4a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	617a      	str	r2, [r7, #20]
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <parseDHCPMSG+0x434>)
 8003b56:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8003b58:	793a      	ldrb	r2, [r7, #4]
 8003b5a:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <parseDHCPMSG+0x438>)
 8003b5c:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8003b5e:	797a      	ldrb	r2, [r7, #5]
 8003b60:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <parseDHCPMSG+0x438>)
 8003b62:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8003b64:	79ba      	ldrb	r2, [r7, #6]
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <parseDHCPMSG+0x438>)
 8003b68:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8003b6a:	79fa      	ldrb	r2, [r7, #7]
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <parseDHCPMSG+0x438>)
 8003b6e:	70da      	strb	r2, [r3, #3]
   				break;
 8003b70:	e00c      	b.n	8003b8c <parseDHCPMSG+0x410>
   			default :
   				p++;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	3301      	adds	r3, #1
 8003b76:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	1c5a      	adds	r2, r3, #1
 8003b7c:	617a      	str	r2, [r7, #20]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8003b82:	7afb      	ldrb	r3, [r7, #11]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4413      	add	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]
   				break;
 8003b8a:	bf00      	nop
		while ( p < e ) {
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	f4ff ae8a 	bcc.w	80038aa <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8003b96:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd90      	pop	{r4, r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	20000144 	.word	0x20000144
 8003ba8:	2000014c 	.word	0x2000014c
 8003bac:	20000030 	.word	0x20000030
 8003bb0:	20000134 	.word	0x20000134
 8003bb4:	20000138 	.word	0x20000138

08003bb8 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8003bbe:	4b7e      	ldr	r3, [pc, #504]	; (8003db8 <DHCP_run+0x200>)
 8003bc0:	f993 3000 	ldrsb.w	r3, [r3]
 8003bc4:	2b06      	cmp	r3, #6
 8003bc6:	d101      	bne.n	8003bcc <DHCP_run+0x14>
 8003bc8:	2305      	movs	r3, #5
 8003bca:	e0f1      	b.n	8003db0 <DHCP_run+0x1f8>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8003bcc:	4b7b      	ldr	r3, [pc, #492]	; (8003dbc <DHCP_run+0x204>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	3303      	adds	r3, #3
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd f89c 	bl	8000d14 <WIZCHIP_READ>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b22      	cmp	r3, #34	; 0x22
 8003be0:	d006      	beq.n	8003bf0 <DHCP_run+0x38>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8003be2:	4b76      	ldr	r3, [pc, #472]	; (8003dbc <DHCP_run+0x204>)
 8003be4:	7818      	ldrb	r0, [r3, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	2244      	movs	r2, #68	; 0x44
 8003bea:	2102      	movs	r1, #2
 8003bec:	f7fd fbfc 	bl	80013e8 <socket>

	ret = DHCP_RUNNING;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8003bf4:	f7ff fdc2 	bl	800377c <parseDHCPMSG>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8003bfc:	4b6e      	ldr	r3, [pc, #440]	; (8003db8 <DHCP_run+0x200>)
 8003bfe:	f993 3000 	ldrsb.w	r3, [r3]
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	f200 80d0 	bhi.w	8003da8 <DHCP_run+0x1f0>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <DHCP_run+0x58>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c25 	.word	0x08003c25
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08003c8d 	.word	0x08003c8d
 8003c1c:	08003cdd 	.word	0x08003cdd
 8003c20:	08003d37 	.word	0x08003d37
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8003c24:	4b66      	ldr	r3, [pc, #408]	; (8003dc0 <DHCP_run+0x208>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8003c2a:	4b65      	ldr	r3, [pc, #404]	; (8003dc0 <DHCP_run+0x208>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8003c30:	4b63      	ldr	r3, [pc, #396]	; (8003dc0 <DHCP_run+0x208>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8003c36:	4b62      	ldr	r3, [pc, #392]	; (8003dc0 <DHCP_run+0x208>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8003c3c:	f7fe fffc 	bl	8002c38 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8003c40:	4b5d      	ldr	r3, [pc, #372]	; (8003db8 <DHCP_run+0x200>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
   		break;
 8003c46:	e0b2      	b.n	8003dae <DHCP_run+0x1f6>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8003c48:	79bb      	ldrb	r3, [r7, #6]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d119      	bne.n	8003c82 <DHCP_run+0xca>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8003c4e:	4b5d      	ldr	r3, [pc, #372]	; (8003dc4 <DHCP_run+0x20c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	7c1a      	ldrb	r2, [r3, #16]
 8003c54:	4b5a      	ldr	r3, [pc, #360]	; (8003dc0 <DHCP_run+0x208>)
 8003c56:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8003c58:	4b5a      	ldr	r3, [pc, #360]	; (8003dc4 <DHCP_run+0x20c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	7c5a      	ldrb	r2, [r3, #17]
 8003c5e:	4b58      	ldr	r3, [pc, #352]	; (8003dc0 <DHCP_run+0x208>)
 8003c60:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8003c62:	4b58      	ldr	r3, [pc, #352]	; (8003dc4 <DHCP_run+0x20c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	7c9a      	ldrb	r2, [r3, #18]
 8003c68:	4b55      	ldr	r3, [pc, #340]	; (8003dc0 <DHCP_run+0x208>)
 8003c6a:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8003c6c:	4b55      	ldr	r3, [pc, #340]	; (8003dc4 <DHCP_run+0x20c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	7cda      	ldrb	r2, [r3, #19]
 8003c72:	4b53      	ldr	r3, [pc, #332]	; (8003dc0 <DHCP_run+0x208>)
 8003c74:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8003c76:	f7ff f9a5 	bl	8002fc4 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8003c7a:	4b4f      	ldr	r3, [pc, #316]	; (8003db8 <DHCP_run+0x200>)
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8003c80:	e095      	b.n	8003dae <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 8003c82:	f000 f8c1 	bl	8003e08 <check_DHCP_timeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	71fb      	strb	r3, [r7, #7]
         break;
 8003c8a:	e090      	b.n	8003dae <DHCP_run+0x1f6>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8003c8c:	79bb      	ldrb	r3, [r7, #6]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d116      	bne.n	8003cc0 <DHCP_run+0x108>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8003c92:	f000 f919 	bl	8003ec8 <check_DHCP_leasedIP>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <DHCP_run+0xf6>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8003c9c:	4b4a      	ldr	r3, [pc, #296]	; (8003dc8 <DHCP_run+0x210>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4798      	blx	r3
					reset_DHCP_timeout();
 8003ca2:	f000 f9dd 	bl	8004060 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8003ca6:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <DHCP_run+0x200>)
 8003ca8:	2203      	movs	r2, #3
 8003caa:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 8003cac:	e07f      	b.n	8003dae <DHCP_run+0x1f6>
					reset_DHCP_timeout();
 8003cae:	f000 f9d7 	bl	8004060 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8003cb2:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <DHCP_run+0x214>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8003cb8:	4b3f      	ldr	r3, [pc, #252]	; (8003db8 <DHCP_run+0x200>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
		break;
 8003cbe:	e076      	b.n	8003dae <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 8003cc0:	79bb      	ldrb	r3, [r7, #6]
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d105      	bne.n	8003cd2 <DHCP_run+0x11a>
				reset_DHCP_timeout();
 8003cc6:	f000 f9cb 	bl	8004060 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003cca:	4b3b      	ldr	r3, [pc, #236]	; (8003db8 <DHCP_run+0x200>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	701a      	strb	r2, [r3, #0]
		break;
 8003cd0:	e06d      	b.n	8003dae <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 8003cd2:	f000 f899 	bl	8003e08 <check_DHCP_timeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71fb      	strb	r3, [r7, #7]
		break;
 8003cda:	e068      	b.n	8003dae <DHCP_run+0x1f6>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 8003cdc:	2304      	movs	r3, #4
 8003cde:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8003ce0:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <DHCP_run+0x218>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d060      	beq.n	8003dac <DHCP_run+0x1f4>
 8003cea:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <DHCP_run+0x218>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	085a      	lsrs	r2, r3, #1
 8003cf0:	4b38      	ldr	r3, [pc, #224]	; (8003dd4 <DHCP_run+0x21c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d259      	bcs.n	8003dac <DHCP_run+0x1f4>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8003cfc:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <DHCP_run+0x208>)
 8003cfe:	781a      	ldrb	r2, [r3, #0]
 8003d00:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <DHCP_run+0x220>)
 8003d02:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8003d04:	4b2e      	ldr	r3, [pc, #184]	; (8003dc0 <DHCP_run+0x208>)
 8003d06:	785a      	ldrb	r2, [r3, #1]
 8003d08:	4b33      	ldr	r3, [pc, #204]	; (8003dd8 <DHCP_run+0x220>)
 8003d0a:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8003d0c:	4b2c      	ldr	r3, [pc, #176]	; (8003dc0 <DHCP_run+0x208>)
 8003d0e:	789a      	ldrb	r2, [r3, #2]
 8003d10:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <DHCP_run+0x220>)
 8003d12:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8003d14:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <DHCP_run+0x208>)
 8003d16:	78da      	ldrb	r2, [r3, #3]
 8003d18:	4b2f      	ldr	r3, [pc, #188]	; (8003dd8 <DHCP_run+0x220>)
 8003d1a:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8003d1c:	4b2f      	ldr	r3, [pc, #188]	; (8003ddc <DHCP_run+0x224>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3301      	adds	r3, #1
 8003d22:	4a2e      	ldr	r2, [pc, #184]	; (8003ddc <DHCP_run+0x224>)
 8003d24:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8003d26:	f7ff f94d 	bl	8002fc4 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8003d2a:	f000 f999 	bl	8004060 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 8003d2e:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <DHCP_run+0x200>)
 8003d30:	2204      	movs	r2, #4
 8003d32:	701a      	strb	r2, [r3, #0]
			}
		break;
 8003d34:	e03a      	b.n	8003dac <DHCP_run+0x1f4>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8003d36:	2304      	movs	r3, #4
 8003d38:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8003d3a:	79bb      	ldrb	r3, [r7, #6]
 8003d3c:	2b05      	cmp	r3, #5
 8003d3e:	d125      	bne.n	8003d8c <DHCP_run+0x1d4>
				dhcp_retry_count = 0;
 8003d40:	4b27      	ldr	r3, [pc, #156]	; (8003de0 <DHCP_run+0x228>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <DHCP_run+0x220>)
 8003d48:	781a      	ldrb	r2, [r3, #0]
 8003d4a:	4b1d      	ldr	r3, [pc, #116]	; (8003dc0 <DHCP_run+0x208>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d111      	bne.n	8003d76 <DHCP_run+0x1be>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8003d52:	4b21      	ldr	r3, [pc, #132]	; (8003dd8 <DHCP_run+0x220>)
 8003d54:	785a      	ldrb	r2, [r3, #1]
 8003d56:	4b1a      	ldr	r3, [pc, #104]	; (8003dc0 <DHCP_run+0x208>)
 8003d58:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d10b      	bne.n	8003d76 <DHCP_run+0x1be>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <DHCP_run+0x220>)
 8003d60:	789a      	ldrb	r2, [r3, #2]
 8003d62:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <DHCP_run+0x208>)
 8003d64:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d105      	bne.n	8003d76 <DHCP_run+0x1be>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8003d6a:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <DHCP_run+0x220>)
 8003d6c:	78da      	ldrb	r2, [r3, #3]
 8003d6e:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <DHCP_run+0x208>)
 8003d70:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d004      	beq.n	8003d80 <DHCP_run+0x1c8>
				{
					ret = DHCP_IP_CHANGED;
 8003d76:	2303      	movs	r3, #3
 8003d78:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <DHCP_run+0x22c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8003d80:	f000 f96e 	bl	8004060 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <DHCP_run+0x200>)
 8003d86:	2203      	movs	r2, #3
 8003d88:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8003d8a:	e010      	b.n	8003dae <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 8003d8c:	79bb      	ldrb	r3, [r7, #6]
 8003d8e:	2b06      	cmp	r3, #6
 8003d90:	d105      	bne.n	8003d9e <DHCP_run+0x1e6>
				reset_DHCP_timeout();
 8003d92:	f000 f965 	bl	8004060 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <DHCP_run+0x200>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
	   	break;
 8003d9c:	e007      	b.n	8003dae <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 8003d9e:	f000 f833 	bl	8003e08 <check_DHCP_timeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
	   	break;
 8003da6:	e002      	b.n	8003dae <DHCP_run+0x1f6>
		default :
   		break;
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <DHCP_run+0x1f6>
		break;
 8003dac:	bf00      	nop
	}

	return ret;
 8003dae:	79fb      	ldrb	r3, [r7, #7]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	20000150 	.word	0x20000150
 8003dbc:	20000131 	.word	0x20000131
 8003dc0:	20000140 	.word	0x20000140
 8003dc4:	2000015c 	.word	0x2000015c
 8003dc8:	20000040 	.word	0x20000040
 8003dcc:	20000048 	.word	0x20000048
 8003dd0:	20000030 	.word	0x20000030
 8003dd4:	20000154 	.word	0x20000154
 8003dd8:	2000013c 	.word	0x2000013c
 8003ddc:	20000158 	.word	0x20000158
 8003de0:	20000151 	.word	0x20000151
 8003de4:	20000044 	.word	0x20000044

08003de8 <DHCP_stop>:

void    DHCP_stop(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <DHCP_stop+0x18>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fd fbfb 	bl	80015ec <close>
   dhcp_state = STATE_DHCP_STOP;
 8003df6:	4b03      	ldr	r3, [pc, #12]	; (8003e04 <DHCP_stop+0x1c>)
 8003df8:	2206      	movs	r2, #6
 8003dfa:	701a      	strb	r2, [r3, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	20000131 	.word	0x20000131
 8003e04:	20000150 	.word	0x20000150

08003e08 <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <check_DHCP_timeout+0xb0>)
 8003e14:	f993 3000 	ldrsb.w	r3, [r3]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	dc2d      	bgt.n	8003e78 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8003e1c:	4b27      	ldr	r3, [pc, #156]	; (8003ebc <check_DHCP_timeout+0xb4>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b27      	ldr	r3, [pc, #156]	; (8003ec0 <check_DHCP_timeout+0xb8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d242      	bcs.n	8003eae <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8003e28:	4b26      	ldr	r3, [pc, #152]	; (8003ec4 <check_DHCP_timeout+0xbc>)
 8003e2a:	f993 3000 	ldrsb.w	r3, [r3]
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d00c      	beq.n	8003e4c <check_DHCP_timeout+0x44>
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	dc0d      	bgt.n	8003e52 <check_DHCP_timeout+0x4a>
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d002      	beq.n	8003e40 <check_DHCP_timeout+0x38>
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d003      	beq.n	8003e46 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8003e3e:	e008      	b.n	8003e52 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8003e40:	f7fe fefa 	bl	8002c38 <send_DHCP_DISCOVER>
				break;
 8003e44:	e006      	b.n	8003e54 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8003e46:	f7ff f8bd 	bl	8002fc4 <send_DHCP_REQUEST>
				break;
 8003e4a:	e003      	b.n	8003e54 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8003e4c:	f7ff f8ba 	bl	8002fc4 <send_DHCP_REQUEST>
				break;
 8003e50:	e000      	b.n	8003e54 <check_DHCP_timeout+0x4c>
				break;
 8003e52:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <check_DHCP_timeout+0xb8>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8003e5a:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <check_DHCP_timeout+0xb8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	330a      	adds	r3, #10
 8003e60:	4a16      	ldr	r2, [pc, #88]	; (8003ebc <check_DHCP_timeout+0xb4>)
 8003e62:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8003e64:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <check_DHCP_timeout+0xb0>)
 8003e66:	f993 3000 	ldrsb.w	r3, [r3]
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	b25a      	sxtb	r2, r3
 8003e72:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <check_DHCP_timeout+0xb0>)
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	e01a      	b.n	8003eae <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <check_DHCP_timeout+0xbc>)
 8003e7a:	f993 3000 	ldrsb.w	r3, [r3]
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d00c      	beq.n	8003e9c <check_DHCP_timeout+0x94>
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	dc10      	bgt.n	8003ea8 <check_DHCP_timeout+0xa0>
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d002      	beq.n	8003e90 <check_DHCP_timeout+0x88>
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d006      	beq.n	8003e9c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8003e8e:	e00b      	b.n	8003ea8 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <check_DHCP_timeout+0xbc>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8003e96:	2300      	movs	r3, #0
 8003e98:	71fb      	strb	r3, [r7, #7]
				break;
 8003e9a:	e006      	b.n	8003eaa <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8003e9c:	f7fe fecc 	bl	8002c38 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8003ea0:	4b08      	ldr	r3, [pc, #32]	; (8003ec4 <check_DHCP_timeout+0xbc>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
				break;
 8003ea6:	e000      	b.n	8003eaa <check_DHCP_timeout+0xa2>
				break;
 8003ea8:	bf00      	nop
		}
		reset_DHCP_timeout();
 8003eaa:	f000 f8d9 	bl	8004060 <reset_DHCP_timeout>
	}
	return ret;
 8003eae:	79fb      	ldrb	r3, [r7, #7]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20000151 	.word	0x20000151
 8003ebc:	20000034 	.word	0x20000034
 8003ec0:	20000154 	.word	0x20000154
 8003ec4:	20000150 	.word	0x20000150

08003ec8 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 8003ece:	2019      	movs	r0, #25
 8003ed0:	f7fc ff20 	bl	8000d14 <WIZCHIP_READ>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 8003ed8:	2103      	movs	r1, #3
 8003eda:	2019      	movs	r0, #25
 8003edc:	f7fc feec 	bl	8000cb8 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 8003ee0:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <check_DHCP_leasedIP+0x68>)
 8003ee2:	7818      	ldrb	r0, [r3, #0]
 8003ee4:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <check_DHCP_leasedIP+0x6c>)
 8003eec:	2211      	movs	r2, #17
 8003eee:	4912      	ldr	r1, [pc, #72]	; (8003f38 <check_DHCP_leasedIP+0x70>)
 8003ef0:	f7fd fecc 	bl	8001c8c <sendto>
 8003ef4:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	2019      	movs	r0, #25
 8003efc:	f7fc fedc 	bl	8000cb8 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f113 0f0d 	cmn.w	r3, #13
 8003f06:	d101      	bne.n	8003f0c <check_DHCP_leasedIP+0x44>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e00c      	b.n	8003f26 <check_DHCP_leasedIP+0x5e>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8003f0c:	f7ff fae4 	bl	80034d8 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8003f10:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <check_DHCP_leasedIP+0x74>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8003f16:	bf00      	nop
 8003f18:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <check_DHCP_leasedIP+0x74>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d9f9      	bls.n	8003f18 <check_DHCP_leasedIP+0x50>

		return 0;
 8003f24:	2300      	movs	r3, #0
	}
}	
 8003f26:	4618      	mov	r0, r3
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000131 	.word	0x20000131
 8003f34:	20000140 	.word	0x20000140
 8003f38:	08010448 	.word	0x08010448
 8003f3c:	20000154 	.word	0x20000154

08003f40 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8003f50:	2206      	movs	r2, #6
 8003f52:	493d      	ldr	r1, [pc, #244]	; (8004048 <DHCP_init+0x108>)
 8003f54:	2009      	movs	r0, #9
 8003f56:	f7fc ff59 	bl	8000e0c <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8003f5a:	4b3b      	ldr	r3, [pc, #236]	; (8004048 <DHCP_init+0x108>)
 8003f5c:	781a      	ldrb	r2, [r3, #0]
 8003f5e:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <DHCP_init+0x108>)
 8003f60:	785b      	ldrb	r3, [r3, #1]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	4b38      	ldr	r3, [pc, #224]	; (8004048 <DHCP_init+0x108>)
 8003f68:	789b      	ldrb	r3, [r3, #2]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <DHCP_init+0x108>)
 8003f70:	78db      	ldrb	r3, [r3, #3]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b34      	ldr	r3, [pc, #208]	; (8004048 <DHCP_init+0x108>)
 8003f78:	791b      	ldrb	r3, [r3, #4]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	4b32      	ldr	r3, [pc, #200]	; (8004048 <DHCP_init+0x108>)
 8003f80:	795b      	ldrb	r3, [r3, #5]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <DHCP_init+0x78>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <DHCP_init+0x108>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8003f90:	4b2d      	ldr	r3, [pc, #180]	; (8004048 <DHCP_init+0x108>)
 8003f92:	2208      	movs	r2, #8
 8003f94:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8003f96:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <DHCP_init+0x108>)
 8003f98:	22dc      	movs	r2, #220	; 0xdc
 8003f9a:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8003f9c:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <DHCP_init+0x108>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8003fa2:	4b29      	ldr	r3, [pc, #164]	; (8004048 <DHCP_init+0x108>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8003fa8:	4b27      	ldr	r3, [pc, #156]	; (8004048 <DHCP_init+0x108>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8003fae:	2206      	movs	r2, #6
 8003fb0:	4925      	ldr	r1, [pc, #148]	; (8004048 <DHCP_init+0x108>)
 8003fb2:	2009      	movs	r0, #9
 8003fb4:	f7fc fedc 	bl	8000d70 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8003fb8:	4a24      	ldr	r2, [pc, #144]	; (800404c <DHCP_init+0x10c>)
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8003fbe:	4a24      	ldr	r2, [pc, #144]	; (8004050 <DHCP_init+0x110>)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 8003fc4:	4b23      	ldr	r3, [pc, #140]	; (8004054 <DHCP_init+0x114>)
 8003fc6:	4a24      	ldr	r2, [pc, #144]	; (8004058 <DHCP_init+0x118>)
 8003fc8:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 8003fca:	4b1f      	ldr	r3, [pc, #124]	; (8004048 <DHCP_init+0x108>)
 8003fcc:	78db      	ldrb	r3, [r3, #3]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b20      	ldr	r3, [pc, #128]	; (8004054 <DHCP_init+0x114>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <DHCP_init+0x114>)
 8003fd8:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <DHCP_init+0x108>)
 8003fdc:	791b      	ldrb	r3, [r3, #4]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	4b1c      	ldr	r3, [pc, #112]	; (8004054 <DHCP_init+0x114>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4a1b      	ldr	r2, [pc, #108]	; (8004054 <DHCP_init+0x114>)
 8003fe8:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 8003fea:	4b17      	ldr	r3, [pc, #92]	; (8004048 <DHCP_init+0x108>)
 8003fec:	795b      	ldrb	r3, [r3, #5]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4b18      	ldr	r3, [pc, #96]	; (8004054 <DHCP_init+0x114>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	4a17      	ldr	r2, [pc, #92]	; (8004054 <DHCP_init+0x114>)
 8003ff8:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <DHCP_init+0x108>)
 8003ffc:	78da      	ldrb	r2, [r3, #3]
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <DHCP_init+0x108>)
 8004000:	791b      	ldrb	r3, [r3, #4]
 8004002:	4053      	eors	r3, r2
 8004004:	b2da      	uxtb	r2, r3
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <DHCP_init+0x108>)
 8004008:	795b      	ldrb	r3, [r3, #5]
 800400a:	4053      	eors	r3, r2
 800400c:	b2db      	uxtb	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	4b10      	ldr	r3, [pc, #64]	; (8004054 <DHCP_init+0x114>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4413      	add	r3, r2
 8004016:	4a0f      	ldr	r2, [pc, #60]	; (8004054 <DHCP_init+0x114>)
 8004018:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800401a:	f107 030c 	add.w	r3, r7, #12
 800401e:	2204      	movs	r2, #4
 8004020:	4619      	mov	r1, r3
 8004022:	200f      	movs	r0, #15
 8004024:	f7fc fea4 	bl	8000d70 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8004028:	f107 030c 	add.w	r3, r7, #12
 800402c:	2204      	movs	r2, #4
 800402e:	4619      	mov	r1, r3
 8004030:	2001      	movs	r0, #1
 8004032:	f7fc fe9d 	bl	8000d70 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8004036:	f000 f813 	bl	8004060 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <DHCP_init+0x11c>)
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000160 	.word	0x20000160
 800404c:	20000131 	.word	0x20000131
 8004050:	2000015c 	.word	0x2000015c
 8004054:	20000158 	.word	0x20000158
 8004058:	12345678 	.word	0x12345678
 800405c:	20000150 	.word	0x20000150

08004060 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8004064:	4b06      	ldr	r3, [pc, #24]	; (8004080 <reset_DHCP_timeout+0x20>)
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800406a:	4b06      	ldr	r3, [pc, #24]	; (8004084 <reset_DHCP_timeout+0x24>)
 800406c:	220a      	movs	r2, #10
 800406e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <reset_DHCP_timeout+0x28>)
 8004072:	2200      	movs	r2, #0
 8004074:	701a      	strb	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	20000154 	.word	0x20000154
 8004084:	20000034 	.word	0x20000034
 8004088:	20000151 	.word	0x20000151

0800408c <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	f003 030f 	and.w	r3, r3, #15
 800409c:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2b09      	cmp	r3, #9
 80040a2:	d803      	bhi.n	80040ac <NibbleToHex+0x20>
    return nibble + '0';
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	3330      	adds	r3, #48	; 0x30
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	e002      	b.n	80040b2 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	3337      	adds	r3, #55	; 0x37
 80040b0:	b2db      	uxtb	r3, r3
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 80040be:	b480      	push	{r7}
 80040c0:	b085      	sub	sp, #20
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	89fb      	ldrh	r3, [r7, #14]
 80040dc:	4413      	add	r3, r2
 80040de:	81fb      	strh	r3, [r7, #14]
	return i;
 80040e0:	89fb      	ldrh	r3, [r7, #14]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 80040fa:	887b      	ldrh	r3, [r7, #2]
 80040fc:	0a1b      	lsrs	r3, r3, #8
 80040fe:	b299      	uxth	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	607a      	str	r2, [r7, #4]
 8004106:	b2ca      	uxtb	r2, r1
 8004108:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	887a      	ldrh	r2, [r7, #2]
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]
	return s;
 8004116:	687b      	ldr	r3, [r7, #4]
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8004124:	b480      	push	{r7}
 8004126:	b08b      	sub	sp, #44	; 0x2c
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8004136:	2300      	movs	r3, #0
 8004138:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]

	cp = compressed;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	623a      	str	r2, [r7, #32]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d102      	bne.n	8004158 <parse_name+0x34>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3301      	adds	r3, #1
 8004156:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8004158:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800415a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800415e:	2bc0      	cmp	r3, #192	; 0xc0
 8004160:	d117      	bne.n	8004192 <parse_name+0x6e>
		{
			if (!indirect)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <parse_name+0x4a>
				clen++;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3301      	adds	r3, #1
 800416c:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 800416e:	2301      	movs	r3, #1
 8004170:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8004172:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800417a:	6a3a      	ldr	r2, [r7, #32]
 800417c:	7812      	ldrb	r2, [r2, #0]
 800417e:	4413      	add	r3, r2
 8004180:	461a      	mov	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4413      	add	r3, r2
 8004186:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	623a      	str	r2, [r7, #32]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8004192:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004194:	2b00      	cmp	r3, #0
 8004196:	d02b      	beq.n	80041f0 <parse_name+0xcc>
			break;

		len -= slen + 1;
 8004198:	887a      	ldrh	r2, [r7, #2]
 800419a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 80041a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	da02      	bge.n	80041b4 <parse_name+0x90>
 80041ae:	f04f 33ff 	mov.w	r3, #4294967295
 80041b2:	e038      	b.n	8004226 <parse_name+0x102>

		if (!indirect) clen += slen;
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <parse_name+0xb0>
 80041ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	4413      	add	r3, r2
 80041c0:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 80041c2:	e007      	b.n	80041d4 <parse_name+0xb0>
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	1c53      	adds	r3, r2, #1
 80041c8:	623b      	str	r3, [r7, #32]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	1c59      	adds	r1, r3, #1
 80041ce:	6079      	str	r1, [r7, #4]
 80041d0:	7812      	ldrb	r2, [r2, #0]
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041d6:	1e5a      	subs	r2, r3, #1
 80041d8:	84fa      	strh	r2, [r7, #38]	; 0x26
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f2      	bne.n	80041c4 <parse_name+0xa0>
		*buf++ = '.';
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	222e      	movs	r2, #46	; 0x2e
 80041e6:	701a      	strb	r2, [r3, #0]
		nseg++;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	3301      	adds	r3, #1
 80041ec:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 80041ee:	e7a8      	b.n	8004142 <parse_name+0x1e>
			break;
 80041f0:	bf00      	nop
	}

	if (nseg == 0)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	607a      	str	r2, [r7, #4]
 80041fe:	222e      	movs	r2, #46	; 0x2e
 8004200:	701a      	strb	r2, [r3, #0]
		len--;
 8004202:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29b      	uxth	r3, r3
 800420c:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]
	len--;
 8004218:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29b      	uxth	r3, r3
 8004222:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8004224:	69fb      	ldr	r3, [r7, #28]
}
 8004226:	4618      	mov	r0, r3
 8004228:	372c      	adds	r7, #44	; 0x2c
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b0b4      	sub	sp, #208	; 0xd0
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 800423c:	f107 020c 	add.w	r2, r7, #12
 8004240:	23c0      	movs	r3, #192	; 0xc0
 8004242:	6839      	ldr	r1, [r7, #0]
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ff6d 	bl	8004124 <parse_name>
 800424a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 800424e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d101      	bne.n	800425c <dns_question+0x2a>
 8004258:	2300      	movs	r3, #0
 800425a:	e00b      	b.n	8004274 <dns_question+0x42>

	cp += len;
 800425c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	4413      	add	r3, r2
 8004264:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	3302      	adds	r3, #2
 800426a:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	3302      	adds	r3, #2
 8004270:	603b      	str	r3, [r7, #0]

	return cp;
 8004272:	683b      	ldr	r3, [r7, #0]
}
 8004274:	4618      	mov	r0, r3
 8004276:	37d0      	adds	r7, #208	; 0xd0
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b0b6      	sub	sp, #216	; 0xd8
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8004288:	f107 0210 	add.w	r2, r7, #16
 800428c:	23c0      	movs	r3, #192	; 0xc0
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff ff47 	bl	8004124 <parse_name>
 8004296:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 800429a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d101      	bne.n	80042a8 <dns_answer+0x2c>
 80042a4:	2300      	movs	r3, #0
 80042a6:	e0f9      	b.n	800449c <dns_answer+0x220>

	cp += len;
 80042a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	4413      	add	r3, r2
 80042b0:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 80042b2:	68b8      	ldr	r0, [r7, #8]
 80042b4:	f7ff ff03 	bl	80040be <get16>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3302      	adds	r3, #2
 80042c2:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	3302      	adds	r3, #2
 80042c8:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	3304      	adds	r3, #4
 80042ce:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3302      	adds	r3, #2
 80042d4:	60bb      	str	r3, [r7, #8]


	switch (type)
 80042d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042da:	2b10      	cmp	r3, #16
 80042dc:	f000 80da 	beq.w	8004494 <dns_answer+0x218>
 80042e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	f300 80d7 	bgt.w	8004498 <dns_answer+0x21c>
 80042ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042ee:	2b0f      	cmp	r3, #15
 80042f0:	d07d      	beq.n	80043ee <dns_answer+0x172>
 80042f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80042f6:	2b0f      	cmp	r3, #15
 80042f8:	f300 80ce 	bgt.w	8004498 <dns_answer+0x21c>
 80042fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004300:	2b0c      	cmp	r3, #12
 8004302:	dc26      	bgt.n	8004352 <dns_answer+0xd6>
 8004304:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004308:	2b00      	cmp	r3, #0
 800430a:	f340 80c5 	ble.w	8004498 <dns_answer+0x21c>
 800430e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004312:	2201      	movs	r2, #1
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	f241 32a4 	movw	r2, #5028	; 0x13a4
 800431c:	401a      	ands	r2, r3
 800431e:	2a00      	cmp	r2, #0
 8004320:	bf14      	ite	ne
 8004322:	2201      	movne	r2, #1
 8004324:	2200      	moveq	r2, #0
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	2a00      	cmp	r2, #0
 800432a:	d133      	bne.n	8004394 <dns_answer+0x118>
 800432c:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8004330:	2a00      	cmp	r2, #0
 8004332:	bf14      	ite	ne
 8004334:	2201      	movne	r2, #1
 8004336:	2200      	moveq	r2, #0
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	2a00      	cmp	r2, #0
 800433c:	d170      	bne.n	8004420 <dns_answer+0x1a4>
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf14      	ite	ne
 8004346:	2301      	movne	r3, #1
 8004348:	2300      	moveq	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8004350:	e0a2      	b.n	8004498 <dns_answer+0x21c>
	switch (type)
 8004352:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004356:	2b0d      	cmp	r3, #13
 8004358:	d032      	beq.n	80043c0 <dns_answer+0x144>
		break;
 800435a:	e09d      	b.n	8004498 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	60ba      	str	r2, [r7, #8]
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	1c5a      	adds	r2, r3, #1
 800436c:	60ba      	str	r2, [r7, #8]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	3201      	adds	r2, #1
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	60ba      	str	r2, [r7, #8]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	3202      	adds	r2, #2
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	60ba      	str	r2, [r7, #8]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	3203      	adds	r2, #3
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	7013      	strb	r3, [r2, #0]
		break;
 8004392:	e082      	b.n	800449a <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8004394:	f107 0210 	add.w	r2, r7, #16
 8004398:	23c0      	movs	r3, #192	; 0xc0
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fec1 	bl	8004124 <parse_name>
 80043a2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80043a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	d101      	bne.n	80043b4 <dns_answer+0x138>
 80043b0:	2300      	movs	r3, #0
 80043b2:	e073      	b.n	800449c <dns_answer+0x220>
		cp += len;
 80043b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	4413      	add	r3, r2
 80043bc:	60bb      	str	r3, [r7, #8]
		break;
 80043be:	e06c      	b.n	800449a <dns_answer+0x21e>
		len = *cp++;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	60ba      	str	r2, [r7, #8]
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 80043cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	4413      	add	r3, r2
 80043d4:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	60ba      	str	r2, [r7, #8]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 80043e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	4413      	add	r3, r2
 80043ea:	60bb      	str	r3, [r7, #8]
		break;
 80043ec:	e055      	b.n	800449a <dns_answer+0x21e>
		cp += 2;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	3302      	adds	r3, #2
 80043f2:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 80043f4:	f107 0210 	add.w	r2, r7, #16
 80043f8:	23c0      	movs	r3, #192	; 0xc0
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7ff fe91 	bl	8004124 <parse_name>
 8004402:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8004406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d101      	bne.n	8004414 <dns_answer+0x198>
 8004410:	2300      	movs	r3, #0
 8004412:	e043      	b.n	800449c <dns_answer+0x220>
		cp += len;
 8004414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	4413      	add	r3, r2
 800441c:	60bb      	str	r3, [r7, #8]
		break;
 800441e:	e03c      	b.n	800449a <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 8004420:	f107 0210 	add.w	r2, r7, #16
 8004424:	23c0      	movs	r3, #192	; 0xc0
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f7ff fe7b 	bl	8004124 <parse_name>
 800442e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8004432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d101      	bne.n	8004440 <dns_answer+0x1c4>
 800443c:	2300      	movs	r3, #0
 800443e:	e02d      	b.n	800449c <dns_answer+0x220>
		cp += len;
 8004440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	4413      	add	r3, r2
 8004448:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 800444a:	f107 0210 	add.w	r2, r7, #16
 800444e:	23c0      	movs	r3, #192	; 0xc0
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7ff fe66 	bl	8004124 <parse_name>
 8004458:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 800445c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d101      	bne.n	800446a <dns_answer+0x1ee>
 8004466:	2300      	movs	r3, #0
 8004468:	e018      	b.n	800449c <dns_answer+0x220>
		cp += len;
 800446a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	4413      	add	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	3304      	adds	r3, #4
 8004478:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	3304      	adds	r3, #4
 800447e:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	3304      	adds	r3, #4
 8004484:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	3304      	adds	r3, #4
 800448a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	3304      	adds	r3, #4
 8004490:	60bb      	str	r3, [r7, #8]
		break;
 8004492:	e002      	b.n	800449a <dns_answer+0x21e>
		break;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <dns_answer+0x21e>
		break;
 8004498:	bf00      	nop
	}

	return cp;
 800449a:	68bb      	ldr	r3, [r7, #8]
}
 800449c:	4618      	mov	r0, r3
 800449e:	37d8      	adds	r7, #216	; 0xd8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b088      	sub	sp, #32
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 80044b4:	2212      	movs	r2, #18
 80044b6:	2100      	movs	r1, #0
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f00b f8bb 	bl	800f634 <memset>

	pdhdr->id = get16(&msg[0]);
 80044be:	6978      	ldr	r0, [r7, #20]
 80044c0:	f7ff fdfd 	bl	80040be <get16>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	3302      	adds	r3, #2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fdf4 	bl	80040be <get16>
 80044d6:	4603      	mov	r3, r0
 80044d8:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 80044da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	da02      	bge.n	80044e8 <parseDNSMSG+0x44>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 80044e8:	8a7b      	ldrh	r3, [r7, #18]
 80044ea:	0adb      	lsrs	r3, r3, #11
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 030f 	and.w	r3, r3, #15
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 80044fa:	8a7b      	ldrh	r3, [r7, #18]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <parseDNSMSG+0x66>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 800450a:	8a7b      	ldrh	r3, [r7, #18]
 800450c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <parseDNSMSG+0x76>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2201      	movs	r2, #1
 8004518:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 800451a:	8a7b      	ldrh	r3, [r7, #18]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <parseDNSMSG+0x86>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2201      	movs	r2, #1
 8004528:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 800452a:	8a7b      	ldrh	r3, [r7, #18]
 800452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <parseDNSMSG+0x96>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 800453a:	8a7b      	ldrh	r3, [r7, #18]
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	b2da      	uxtb	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3304      	adds	r3, #4
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fdb6 	bl	80040be <get16>
 8004552:	4603      	mov	r3, r0
 8004554:	461a      	mov	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	3306      	adds	r3, #6
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff fdad 	bl	80040be <get16>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3308      	adds	r3, #8
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fda4 	bl	80040be <get16>
 8004576:	4603      	mov	r3, r0
 8004578:	461a      	mov	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	330a      	adds	r3, #10
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fd9b 	bl	80040be <get16>
 8004588:	4603      	mov	r3, r0
 800458a:	461a      	mov	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	330c      	adds	r3, #12
 8004594:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8004596:	2300      	movs	r3, #0
 8004598:	83fb      	strh	r3, [r7, #30]
 800459a:	e00d      	b.n	80045b8 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 800459c:	69b9      	ldr	r1, [r7, #24]
 800459e:	6978      	ldr	r0, [r7, #20]
 80045a0:	f7ff fe47 	bl	8004232 <dns_question>
 80045a4:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <parseDNSMSG+0x10e>
 80045ac:	f04f 33ff 	mov.w	r3, #4294967295
 80045b0:	e03b      	b.n	800462a <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 80045b2:	8bfb      	ldrh	r3, [r7, #30]
 80045b4:	3301      	adds	r3, #1
 80045b6:	83fb      	strh	r3, [r7, #30]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	895b      	ldrh	r3, [r3, #10]
 80045bc:	8bfa      	ldrh	r2, [r7, #30]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d3ec      	bcc.n	800459c <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 80045c2:	2300      	movs	r3, #0
 80045c4:	83fb      	strh	r3, [r7, #30]
 80045c6:	e00e      	b.n	80045e6 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	6978      	ldr	r0, [r7, #20]
 80045ce:	f7ff fe55 	bl	800427c <dns_answer>
 80045d2:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d102      	bne.n	80045e0 <parseDNSMSG+0x13c>
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	e024      	b.n	800462a <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 80045e0:	8bfb      	ldrh	r3, [r7, #30]
 80045e2:	3301      	adds	r3, #1
 80045e4:	83fb      	strh	r3, [r7, #30]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	899b      	ldrh	r3, [r3, #12]
 80045ea:	8bfa      	ldrh	r2, [r7, #30]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d3eb      	bcc.n	80045c8 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 80045f0:	2300      	movs	r3, #0
 80045f2:	83fb      	strh	r3, [r7, #30]
 80045f4:	e002      	b.n	80045fc <parseDNSMSG+0x158>
 80045f6:	8bfb      	ldrh	r3, [r7, #30]
 80045f8:	3301      	adds	r3, #1
 80045fa:	83fb      	strh	r3, [r7, #30]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	89db      	ldrh	r3, [r3, #14]
 8004600:	8bfa      	ldrh	r2, [r7, #30]
 8004602:	429a      	cmp	r2, r3
 8004604:	d3f7      	bcc.n	80045f6 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8004606:	2300      	movs	r3, #0
 8004608:	83fb      	strh	r3, [r7, #30]
 800460a:	e002      	b.n	8004612 <parseDNSMSG+0x16e>
 800460c:	8bfb      	ldrh	r3, [r7, #30]
 800460e:	3301      	adds	r3, #1
 8004610:	83fb      	strh	r3, [r7, #30]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8a1b      	ldrh	r3, [r3, #16]
 8004616:	8bfa      	ldrh	r2, [r7, #30]
 8004618:	429a      	cmp	r2, r3
 800461a:	d3f7      	bcc.n	800460c <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	7a1b      	ldrb	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <parseDNSMSG+0x184>
 8004624:	2301      	movs	r3, #1
 8004626:	e000      	b.n	800462a <parseDNSMSG+0x186>
	else return 0;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b0b8      	sub	sp, #224	; 0xe0
 8004638:	af00      	add	r7, sp, #0
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
 800463e:	461a      	mov	r2, r3
 8004640:	4603      	mov	r3, r0
 8004642:	81fb      	strh	r3, [r7, #14]
 8004644:	4613      	mov	r3, r2
 8004646:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 800464e:	4b57      	ldr	r3, [pc, #348]	; (80047ac <dns_makequery+0x178>)
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	3301      	adds	r3, #1
 8004654:	b29a      	uxth	r2, r3
 8004656:	4b55      	ldr	r3, [pc, #340]	; (80047ac <dns_makequery+0x178>)
 8004658:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 800465a:	4b54      	ldr	r3, [pc, #336]	; (80047ac <dns_makequery+0x178>)
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	4619      	mov	r1, r3
 8004660:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004664:	f7ff fd43 	bl	80040ee <put16>
 8004668:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 800466c:	89fb      	ldrh	r3, [r7, #14]
 800466e:	02db      	lsls	r3, r3, #11
 8004670:	b21b      	sxth	r3, r3
 8004672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004676:	b21b      	sxth	r3, r3
 8004678:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 800467c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8004680:	4619      	mov	r1, r3
 8004682:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004686:	f7ff fd32 	bl	80040ee <put16>
 800468a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 800468e:	2101      	movs	r1, #1
 8004690:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004694:	f7ff fd2b 	bl	80040ee <put16>
 8004698:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 800469c:	2100      	movs	r1, #0
 800469e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80046a2:	f7ff fd24 	bl	80040ee <put16>
 80046a6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 80046aa:	2100      	movs	r1, #0
 80046ac:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80046b0:	f7ff fd1d 	bl	80040ee <put16>
 80046b4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 80046b8:	2100      	movs	r1, #0
 80046ba:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80046be:	f7ff fd16 	bl	80040ee <put16>
 80046c2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 80046c6:	f107 0310 	add.w	r3, r7, #16
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f00b f8b2 	bl	800f836 <strcpy>
	dname = sname;
 80046d2:	f107 0310 	add.w	r3, r7, #16
 80046d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 80046da:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80046de:	f7fb fdd7 	bl	8000290 <strlen>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 80046e8:	212e      	movs	r1, #46	; 0x2e
 80046ea:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 80046ee:	f00a ffa9 	bl	800f644 <strchr>
 80046f2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 80046f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d006      	beq.n	800470c <dns_makequery+0xd8>
 80046fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004702:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	81bb      	strh	r3, [r7, #12]
 800470a:	e002      	b.n	8004712 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 800470c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8004710:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8004712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800471c:	89ba      	ldrh	r2, [r7, #12]
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8004722:	89bb      	ldrh	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d029      	beq.n	800477c <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8004728:	89bb      	ldrh	r3, [r7, #12]
 800472a:	461a      	mov	r2, r3
 800472c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004730:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004734:	f00a ffa5 	bl	800f682 <strncpy>
		cp += len;
 8004738:	89bb      	ldrh	r3, [r7, #12]
 800473a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800473e:	4413      	add	r3, r2
 8004740:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 8004744:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 800474c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
			break;
 800475a:	e010      	b.n	800477e <dns_makequery+0x14a>
		}
		dname += len+1;
 800475c:	89bb      	ldrh	r3, [r7, #12]
 800475e:	3301      	adds	r3, #1
 8004760:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004764:	4413      	add	r3, r2
 8004766:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 800476a:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 800476e:	89bb      	ldrh	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	b29b      	uxth	r3, r3
 8004774:	3b01      	subs	r3, #1
 8004776:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 800477a:	e7b5      	b.n	80046e8 <dns_makequery+0xb4>
		if (len == 0) break;
 800477c:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 800477e:	2101      	movs	r1, #1
 8004780:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004784:	f7ff fcb3 	bl	80040ee <put16>
 8004788:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 800478c:	2101      	movs	r1, #1
 800478e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004792:	f7ff fcac 	bl	80040ee <put16>
 8004796:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800479a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	b21b      	sxth	r3, r3
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	37e0      	adds	r7, #224	; 0xe0
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	2000016e 	.word	0x2000016e

080047b0 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 80047b4:	4b0f      	ldr	r3, [pc, #60]	; (80047f4 <check_DNS_timeout+0x44>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d914      	bls.n	80047e6 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 80047bc:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <check_DNS_timeout+0x44>)
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <check_DNS_timeout+0x48>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d905      	bls.n	80047d6 <check_DNS_timeout+0x26>
			retry_count = 0;
 80047ca:	4b0b      	ldr	r3, [pc, #44]	; (80047f8 <check_DNS_timeout+0x48>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 80047d0:	f04f 33ff 	mov.w	r3, #4294967295
 80047d4:	e008      	b.n	80047e8 <check_DNS_timeout+0x38>
		}
		retry_count++;
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <check_DNS_timeout+0x48>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	3301      	adds	r3, #1
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <check_DNS_timeout+0x48>)
 80047e0:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 80047e2:	2300      	movs	r3, #0
 80047e4:	e000      	b.n	80047e8 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 80047e6:	2301      	movs	r3, #1
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000170 	.word	0x20000170
 80047f8:	20000174 	.word	0x20000174

080047fc <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	6039      	str	r1, [r7, #0]
 8004806:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8004808:	4a07      	ldr	r2, [pc, #28]	; (8004828 <DNS_init+0x2c>)
 800480a:	79fb      	ldrb	r3, [r7, #7]
 800480c:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 800480e:	4a07      	ldr	r2, [pc, #28]	; (800482c <DNS_init+0x30>)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <DNS_init+0x34>)
 8004816:	f241 1222 	movw	r2, #4386	; 0x1122
 800481a:	801a      	strh	r2, [r3, #0]
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	2000016c 	.word	0x2000016c
 800482c:	20000168 	.word	0x20000168
 8004830:	2000016e 	.word	0x2000016e

08004834 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8004834:	b590      	push	{r4, r7, lr}
 8004836:	b08f      	sub	sp, #60	; 0x3c
 8004838:	af02      	add	r7, sp, #8
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8004840:	4b3b      	ldr	r3, [pc, #236]	; (8004930 <DNS_run+0xfc>)
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 8004846:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <DNS_run+0x100>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 800484c:	4b3a      	ldr	r3, [pc, #232]	; (8004938 <DNS_run+0x104>)
 800484e:	7818      	ldrb	r0, [r3, #0]
 8004850:	2300      	movs	r3, #0
 8004852:	2200      	movs	r2, #0
 8004854:	2102      	movs	r1, #2
 8004856:	f7fc fdc7 	bl	80013e8 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 800485a:	4b38      	ldr	r3, [pc, #224]	; (800493c <DNS_run+0x108>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	2000      	movs	r0, #0
 8004866:	f7ff fee5 	bl	8004634 <dns_makequery>
 800486a:	4603      	mov	r3, r0
 800486c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 800486e:	4b32      	ldr	r3, [pc, #200]	; (8004938 <DNS_run+0x104>)
 8004870:	7818      	ldrb	r0, [r3, #0]
 8004872:	4b32      	ldr	r3, [pc, #200]	; (800493c <DNS_run+0x108>)
 8004874:	6819      	ldr	r1, [r3, #0]
 8004876:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004878:	2335      	movs	r3, #53	; 0x35
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f7fd fa05 	bl	8001c8c <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8004882:	4b2d      	ldr	r3, [pc, #180]	; (8004938 <DNS_run+0x104>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f7fc fb51 	bl	8000f2e <getSn_RX_RSR>
 800488c:	4603      	mov	r3, r0
 800488e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004890:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004892:	2b00      	cmp	r3, #0
 8004894:	d029      	beq.n	80048ea <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8004896:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489c:	d902      	bls.n	80048a4 <DNS_run+0x70>
 800489e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 80048a4:	4b24      	ldr	r3, [pc, #144]	; (8004938 <DNS_run+0x104>)
 80048a6:	7818      	ldrb	r0, [r3, #0]
 80048a8:	4b24      	ldr	r3, [pc, #144]	; (800493c <DNS_run+0x108>)
 80048aa:	6819      	ldr	r1, [r3, #0]
 80048ac:	f107 0414 	add.w	r4, r7, #20
 80048b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80048b2:	f107 0312 	add.w	r3, r7, #18
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	4623      	mov	r3, r4
 80048ba:	f7fd fb3d 	bl	8001f38 <recvfrom>
 80048be:	4603      	mov	r3, r0
 80048c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 80048c2:	4b1e      	ldr	r3, [pc, #120]	; (800493c <DNS_run+0x108>)
 80048c4:	6819      	ldr	r1, [r3, #0]
 80048c6:	f107 0318 	add.w	r3, r7, #24
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff fde9 	bl	80044a4 <parseDNSMSG>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 80048d8:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 80048da:	4b17      	ldr	r3, [pc, #92]	; (8004938 <DNS_run+0x104>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc fe84 	bl	80015ec <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 80048e4:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80048e8:	e01e      	b.n	8004928 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 80048ea:	f7ff ff61 	bl	80047b0 <check_DNS_timeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 80048f4:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	da06      	bge.n	800490a <DNS_run+0xd6>
			close(DNS_SOCKET);
 80048fc:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <DNS_run+0x104>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7fc fe73 	bl	80015ec <close>
			return 0; // timeout occurred
 8004906:	2300      	movs	r3, #0
 8004908:	e00e      	b.n	8004928 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 800490a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1b7      	bne.n	8004882 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <DNS_run+0x104>)
 8004914:	7818      	ldrb	r0, [r3, #0]
 8004916:	4b09      	ldr	r3, [pc, #36]	; (800493c <DNS_run+0x108>)
 8004918:	6819      	ldr	r1, [r3, #0]
 800491a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800491c:	2335      	movs	r3, #53	; 0x35
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f7fd f9b3 	bl	8001c8c <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8004926:	e7ac      	b.n	8004882 <DNS_run+0x4e>
}
 8004928:	4618      	mov	r0, r3
 800492a:	3734      	adds	r7, #52	; 0x34
 800492c:	46bd      	mov	sp, r7
 800492e:	bd90      	pop	{r4, r7, pc}
 8004930:	20000174 	.word	0x20000174
 8004934:	20000170 	.word	0x20000170
 8004938:	2000016c 	.word	0x2000016c
 800493c:	20000168 	.word	0x20000168

08004940 <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004974:	4293      	cmp	r3, r2
 8004976:	d003      	beq.n	8004980 <getNextPacketId+0x1c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3301      	adds	r3, #1
 800497e:	e000      	b.n	8004982 <getNextPacketId+0x1e>
 8004980:	2301      	movs	r3, #1
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
}
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 8004996:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004998:	b087      	sub	sp, #28
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80049a2:	f04f 33ff 	mov.w	r3, #4294967295
 80049a6:	617b      	str	r3, [r7, #20]
        sent = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 80049ac:	e018      	b.n	80049e0 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b2:	689c      	ldr	r4, [r3, #8]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	18d6      	adds	r6, r2, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 fda7 	bl	8005514 <TimerLeftMS>
 80049c6:	4603      	mov	r3, r0
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	4631      	mov	r1, r6
 80049cc:	4628      	mov	r0, r5
 80049ce:	47a0      	blx	r4
 80049d0:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	db0e      	blt.n	80049f6 <sendPacket+0x60>
            break;
        sent += rc;
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	4413      	add	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	da07      	bge.n	80049f8 <sendPacket+0x62>
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fd51 	bl	8005490 <TimerIsExpired>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0dc      	beq.n	80049ae <sendPacket+0x18>
 80049f4:	e000      	b.n	80049f8 <sendPacket+0x62>
            break;
 80049f6:	bf00      	nop
    }
    if (sent == length)
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d10b      	bne.n	8004a18 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	f000 fd69 	bl	80054e4 <TimerCountdown>
        rc = SUCCESSS;
 8004a12:	2300      	movs	r3, #0
 8004a14:	617b      	str	r3, [r7, #20]
 8004a16:	e002      	b.n	8004a1e <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8004a18:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1c:	617b      	str	r3, [r7, #20]
    return rc;
 8004a1e:	697b      	ldr	r3, [r7, #20]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a28 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e009      	b.n	8004a56 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	3304      	adds	r3, #4
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	3301      	adds	r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b04      	cmp	r3, #4
 8004a5a:	ddf2      	ble.n	8004a42 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a3a      	ldr	r2, [r7, #32]
 8004a6c:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a72:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a78:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3354      	adds	r3, #84	; 0x54
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fcec 	bl	8005474 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 8004a9c:	bf00      	nop
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b08b      	sub	sp, #44	; 0x2c
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 8004ab8:	2304      	movs	r3, #4
 8004aba:	61fb      	str	r3, [r7, #28]

    *value = 0;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 8004ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac6:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	3301      	adds	r3, #1
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	6a3a      	ldr	r2, [r7, #32]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	dd03      	ble.n	8004ade <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 8004ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8004ada:	61bb      	str	r3, [r7, #24]
            goto exit;
 8004adc:	e021      	b.n	8004b22 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae2:	685c      	ldr	r4, [r3, #4]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8004ae8:	f107 0117 	add.w	r1, r7, #23
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	47a0      	blx	r4
 8004af2:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d112      	bne.n	8004b20 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b06:	fb01 f303 	mul.w	r3, r1, r3
 8004b0a:	441a      	add	r2, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	01db      	lsls	r3, r3, #7
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 8004b16:	7dfb      	ldrb	r3, [r7, #23]
 8004b18:	b25b      	sxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	dbd1      	blt.n	8004ac2 <decodePacket+0x1e>
exit:
 8004b1e:	e000      	b.n	8004b22 <decodePacket+0x7e>
            goto exit;
 8004b20:	bf00      	nop
    return len;
 8004b22:	6a3b      	ldr	r3, [r7, #32]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	372c      	adds	r7, #44	; 0x2c
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd90      	pop	{r4, r7, pc}

08004b2c <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8004b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b2e:	b089      	sub	sp, #36	; 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295
 8004b3a:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
    int len = 0;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8004b44:	2300      	movs	r3, #0
 8004b46:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4c:	685c      	ldr	r4, [r3, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	695e      	ldr	r6, [r3, #20]
 8004b56:	68b8      	ldr	r0, [r7, #8]
 8004b58:	f000 fcdc 	bl	8005514 <TimerLeftMS>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2201      	movs	r2, #1
 8004b60:	4631      	mov	r1, r6
 8004b62:	4628      	mov	r0, r5
 8004b64:	47a0      	blx	r4
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d13b      	bne.n	8004be4 <readPacket+0xb8>
        goto exit;

    len = 1;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8004b70:	68b8      	ldr	r0, [r7, #8]
 8004b72:	f000 fccf 	bl	8005514 <TimerLeftMS>
 8004b76:	4602      	mov	r2, r0
 8004b78:	f107 0310 	add.w	r3, r7, #16
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f7ff ff90 	bl	8004aa4 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	695b      	ldr	r3, [r3, #20]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 f821 	bl	8005bd6 <MQTTPacket_encode>
 8004b94:	4602      	mov	r2, r0
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4413      	add	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	dd16      	ble.n	8004bd0 <readPacket+0xa4>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ba6:	685c      	ldr	r4, [r3, #4]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	695a      	ldr	r2, [r3, #20]
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	18d6      	adds	r6, r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	607b      	str	r3, [r7, #4]
 8004bb8:	68b8      	ldr	r0, [r7, #8]
 8004bba:	f000 fcab 	bl	8005514 <TimerLeftMS>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	4631      	mov	r1, r6
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	47a0      	blx	r4
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d10b      	bne.n	8004be8 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8004bd8:	7d3b      	ldrb	r3, [r7, #20]
 8004bda:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	e002      	b.n	8004bea <readPacket+0xbe>
        goto exit;
 8004be4:	bf00      	nop
 8004be6:	e000      	b.n	8004bea <readPacket+0xbe>
        goto exit;
 8004be8:	bf00      	nop
exit:
    return rc;
 8004bea:	69fb      	ldr	r3, [r7, #28]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3724      	adds	r7, #36	; 0x24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bf4 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	4413      	add	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 8004c14:	e039      	b.n	8004c8a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b2f      	cmp	r3, #47	; 0x2f
 8004c1c:	d103      	bne.n	8004c26 <isTopicMatched+0x32>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b2f      	cmp	r3, #47	; 0x2f
 8004c24:	d13a      	bne.n	8004c9c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b2b      	cmp	r3, #43	; 0x2b
 8004c2c:	d009      	beq.n	8004c42 <isTopicMatched+0x4e>
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b23      	cmp	r3, #35	; 0x23
 8004c34:	d005      	beq.n	8004c42 <isTopicMatched+0x4e>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	781a      	ldrb	r2, [r3, #0]
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d12e      	bne.n	8004ca0 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b2b      	cmp	r3, #43	; 0x2b
 8004c48:	d112      	bne.n	8004c70 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8004c50:	e005      	b.n	8004c5e <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	3301      	adds	r3, #1
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d20b      	bcs.n	8004c7e <isTopicMatched+0x8a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b2f      	cmp	r3, #47	; 0x2f
 8004c6c:	d1f1      	bne.n	8004c52 <isTopicMatched+0x5e>
 8004c6e:	e006      	b.n	8004c7e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b23      	cmp	r3, #35	; 0x23
 8004c76:	d102      	bne.n	8004c7e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	613b      	str	r3, [r7, #16]
        curf++;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	3301      	adds	r3, #1
 8004c82:	617b      	str	r3, [r7, #20]
        curn++;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	3301      	adds	r3, #1
 8004c88:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <isTopicMatched+0xae>
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d3bd      	bcc.n	8004c16 <isTopicMatched+0x22>
 8004c9a:	e002      	b.n	8004ca2 <isTopicMatched+0xae>
            break;
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <isTopicMatched+0xae>
            break;
 8004ca0:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d105      	bne.n	8004cb6 <isTopicMatched+0xc2>
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <isTopicMatched+0xc2>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e000      	b.n	8004cb8 <isTopicMatched+0xc4>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b08a      	sub	sp, #40	; 0x28
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd6:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
 8004cdc:	e03f      	b.n	8004d5e <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d034      	beq.n	8004d58 <deliverMessage+0x92>
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4413      	add	r3, r2
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68b8      	ldr	r0, [r7, #8]
 8004cfe:	f001 f939 	bl	8005f74 <MQTTPacket_equals>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10c      	bne.n	8004d22 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4413      	add	r3, r2
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68b9      	ldr	r1, [r7, #8]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff ff6c 	bl	8004bf4 <isTopicMatched>
 8004d1c:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d01a      	beq.n	8004d58 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	3304      	adds	r3, #4
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d012      	beq.n	8004d58 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8004d32:	f107 0318 	add.w	r3, r7, #24
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68b9      	ldr	r1, [r7, #8]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff fe00 	bl	8004940 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	3304      	adds	r3, #4
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4413      	add	r3, r2
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f107 0218 	add.w	r2, r7, #24
 8004d50:	4610      	mov	r0, r2
 8004d52:	4798      	blx	r3
                rc = SUCCESSS;
 8004d54:	2300      	movs	r3, #0
 8004d56:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	ddbc      	ble.n	8004cde <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d112      	bne.n	8004d92 <deliverMessage+0xcc>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00e      	beq.n	8004d92 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 8004d74:	f107 0310 	add.w	r3, r7, #16
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	68b9      	ldr	r1, [r7, #8]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff fddf 	bl	8004940 <NewMessageData>
        c->defaultMessageHandler(&md);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d86:	f107 0210 	add.w	r2, r7, #16
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	4798      	blx	r3
        rc = SUCCESSS;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	623b      	str	r3, [r7, #32]
    }

    return rc;
 8004d92:	6a3b      	ldr	r3, [r7, #32]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3728      	adds	r7, #40	; 0x28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <keepalive>:


int keepalive(MQTTClient* c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 8004da4:	f04f 33ff 	mov.w	r3, #4294967295
 8004da8:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d102      	bne.n	8004db8 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
        goto exit;
 8004db6:	e033      	b.n	8004e20 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3354      	adds	r3, #84	; 0x54
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fb67 	bl	8005490 <TimerIsExpired>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d02a      	beq.n	8004e1e <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	7f1b      	ldrb	r3, [r3, #28]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d126      	bne.n	8004e1e <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 8004dd0:	f107 0308 	add.w	r3, r7, #8
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fb4d 	bl	8005474 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 8004dda:	f107 0308 	add.w	r3, r7, #8
 8004dde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 fb6a 	bl	80054bc <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f000 fe23 	bl	8005a3e <MQTTSerialize_pingreq>
 8004df8:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	dd0f      	ble.n	8004e20 <keepalive+0x84>
 8004e00:	f107 0308 	add.w	r3, r7, #8
 8004e04:	461a      	mov	r2, r3
 8004e06:	6939      	ldr	r1, [r7, #16]
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fdc4 	bl	8004996 <sendPacket>
 8004e0e:	6178      	str	r0, [r7, #20]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d104      	bne.n	8004e20 <keepalive+0x84>
                c->ping_outstanding = 1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	771a      	strb	r2, [r3, #28]
 8004e1c:	e000      	b.n	8004e20 <keepalive+0x84>
        }
    }

exit:
 8004e1e:	bf00      	nop
    return rc;
 8004e20:	697b      	ldr	r3, [r7, #20]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3718      	adds	r7, #24
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 8004e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e2e:	b095      	sub	sp, #84	; 0x54
 8004e30:	af06      	add	r7, sp, #24
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 8004e36:	6839      	ldr	r1, [r7, #0]
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7ff fe77 	bl	8004b2c <readPacket>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 8004e42:	2300      	movs	r3, #0
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 8004e46:	2300      	movs	r3, #0
 8004e48:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 8004e4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e4c:	3b02      	subs	r3, #2
 8004e4e:	2b0b      	cmp	r3, #11
 8004e50:	f200 80c0 	bhi.w	8004fd4 <cycle+0x1a8>
 8004e54:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <cycle+0x30>)
 8004e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5a:	bf00      	nop
 8004e5c:	08004fd5 	.word	0x08004fd5
 8004e60:	08004e8d 	.word	0x08004e8d
 8004e64:	08004fd5 	.word	0x08004fd5
 8004e68:	08004f55 	.word	0x08004f55
 8004e6c:	08004fd5 	.word	0x08004fd5
 8004e70:	08004fd5 	.word	0x08004fd5
 8004e74:	08004fd5 	.word	0x08004fd5
 8004e78:	08004fd5 	.word	0x08004fd5
 8004e7c:	08004fd5 	.word	0x08004fd5
 8004e80:	08004fd5 	.word	0x08004fd5
 8004e84:	08004fd5 	.word	0x08004fd5
 8004e88:	08004fc7 	.word	0x08004fc7
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8004e94:	4616      	mov	r6, r2
 8004e96:	f107 0210 	add.w	r2, r7, #16
 8004e9a:	1d15      	adds	r5, r2, #4
 8004e9c:	f107 0210 	add.w	r2, r7, #16
 8004ea0:	1c54      	adds	r4, r2, #1
 8004ea2:	f107 010c 	add.w	r1, r7, #12
 8004ea6:	f107 0210 	add.w	r2, r7, #16
 8004eaa:	1c90      	adds	r0, r2, #2
 8004eac:	9604      	str	r6, [sp, #16]
 8004eae:	9303      	str	r3, [sp, #12]
 8004eb0:	f107 0310 	add.w	r3, r7, #16
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	9302      	str	r3, [sp, #8]
 8004eb8:	f107 0310 	add.w	r3, r7, #16
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	f107 0320 	add.w	r3, r7, #32
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	4622      	mov	r2, r4
 8004eca:	f000 fdc7 	bl	8005a5c <MQTTDeserialize_publish>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	f040 8083 	bne.w	8004fdc <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 8004edc:	f107 0210 	add.w	r2, r7, #16
 8004ee0:	f107 0320 	add.w	r3, r7, #32
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff feed 	bl	8004cc6 <deliverMessage>
            if (msg.qos != QOS0)
 8004eec:	7c3b      	ldrb	r3, [r7, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d06d      	beq.n	8004fce <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 8004ef2:	7c3b      	ldrb	r3, [r7, #16]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d10c      	bne.n	8004f12 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6918      	ldr	r0, [r3, #16]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4619      	mov	r1, r3
 8004f02:	8abb      	ldrh	r3, [r7, #20]
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2300      	movs	r3, #0
 8004f08:	2204      	movs	r2, #4
 8004f0a:	f001 f900 	bl	800610e <MQTTSerialize_ack>
 8004f0e:	6378      	str	r0, [r7, #52]	; 0x34
 8004f10:	e00e      	b.n	8004f30 <cycle+0x104>
                else if (msg.qos == QOS2)
 8004f12:	7c3b      	ldrb	r3, [r7, #16]
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d10b      	bne.n	8004f30 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6918      	ldr	r0, [r3, #16]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4619      	mov	r1, r3
 8004f22:	8abb      	ldrh	r3, [r7, #20]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	2300      	movs	r3, #0
 8004f28:	2205      	movs	r2, #5
 8004f2a:	f001 f8f0 	bl	800610e <MQTTSerialize_ack>
 8004f2e:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 8004f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	dc03      	bgt.n	8004f3e <cycle+0x112>
                    rc = FAILURE;
 8004f36:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f3c:	e005      	b.n	8004f4a <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff fd27 	bl	8004996 <sendPacket>
 8004f48:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8004f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f50:	d13d      	bne.n	8004fce <cycle+0x1a2>
                    goto exit; // there was a problem
 8004f52:	e044      	b.n	8004fde <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	695c      	ldr	r4, [r3, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f107 020a 	add.w	r2, r7, #10
 8004f60:	f107 0109 	add.w	r1, r7, #9
 8004f64:	f107 0008 	add.w	r0, r7, #8
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	4623      	mov	r3, r4
 8004f6c:	f000 fde8 	bl	8005b40 <MQTTDeserialize_ack>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d003      	beq.n	8004f7e <cycle+0x152>
                rc = FAILURE;
 8004f76:	f04f 33ff 	mov.w	r3, #4294967295
 8004f7a:	633b      	str	r3, [r7, #48]	; 0x30
 8004f7c:	e01e      	b.n	8004fbc <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6918      	ldr	r0, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	4619      	mov	r1, r3
 8004f88:	897b      	ldrh	r3, [r7, #10]
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	2206      	movs	r2, #6
 8004f90:	f001 f8bd 	bl	800610e <MQTTSerialize_ack>
 8004f94:	6378      	str	r0, [r7, #52]	; 0x34
 8004f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	dc03      	bgt.n	8004fa4 <cycle+0x178>
                rc = FAILURE;
 8004f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fa2:	e00b      	b.n	8004fbc <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f7ff fcf4 	bl	8004996 <sendPacket>
 8004fae:	6338      	str	r0, [r7, #48]	; 0x30
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <cycle+0x190>
                rc = FAILURE; // there was a problem
 8004fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004fba:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc2:	d106      	bne.n	8004fd2 <cycle+0x1a6>
                goto exit; // there was a problem
 8004fc4:	e00b      	b.n	8004fde <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	771a      	strb	r2, [r3, #28]
            break;
 8004fcc:	e002      	b.n	8004fd4 <cycle+0x1a8>
            break;
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <cycle+0x1a8>
            break;
 8004fd2:	bf00      	nop
    }
    keepalive(c);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fee1 	bl	8004d9c <keepalive>
 8004fda:	e000      	b.n	8004fde <cycle+0x1b2>
                goto exit;
 8004fdc:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <cycle+0x1bc>
        rc = packet_type;
 8004fe4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fe6:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	373c      	adds	r7, #60	; 0x3c
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff2:	bf00      	nop

08004ff4 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
    int rc = SUCCESSS;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8005002:	f107 030c 	add.w	r3, r7, #12
 8005006:	4618      	mov	r0, r3
 8005008:	f000 fa34 	bl	8005474 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	f107 030c 	add.w	r3, r7, #12
 8005012:	4611      	mov	r1, r2
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fa51 	bl	80054bc <TimerCountdownMS>

    if (cycle(c, &timer) == FAILURE)
 800501a:	f107 030c 	add.w	r3, r7, #12
 800501e:	4619      	mov	r1, r3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ff03 	bl	8004e2c <cycle>
 8005026:	4603      	mov	r3, r0
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d102      	bne.n	8005034 <MQTTYield+0x40>
    {
        rc = FAILURE;
 800502e:	f04f 33ff 	mov.w	r3, #4294967295
 8005032:	617b      	str	r3, [r7, #20]
    }

    return rc;
 8005034:	697b      	ldr	r3, [r7, #20]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800504a:	f04f 33ff 	mov.w	r3, #4294967295
 800504e:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 fa1d 	bl	8005490 <TimerIsExpired>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d109      	bne.n	8005070 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f7ff fee4 	bl	8004e2c <cycle>
 8005064:	6178      	str	r0, [r7, #20]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	d1f0      	bne.n	8005050 <waitfor+0x12>
 800506e:	e000      	b.n	8005072 <waitfor+0x34>
            break; // we timed out
 8005070:	bf00      	nop

    return rc;
 8005072:	697b      	ldr	r3, [r7, #20]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b09e      	sub	sp, #120	; 0x78
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 8005086:	f04f 33ff 	mov.w	r3, #4294967295
 800508a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800508c:	4a3d      	ldr	r2, [pc, #244]	; (8005184 <MQTTConnect+0x108>)
 800508e:	f107 0310 	add.w	r3, r7, #16
 8005092:	4611      	mov	r1, r2
 8005094:	2258      	movs	r2, #88	; 0x58
 8005096:	4618      	mov	r0, r3
 8005098:	f00a fbd5 	bl	800f846 <memcpy>
    int len = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d15d      	bne.n	8005164 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 80050a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 f9e1 	bl	8005474 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 f9fd 	bl	80054bc <TimerCountdownMS>

    if (options == 0)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d102      	bne.n	80050ce <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 80050c8:	f107 0310 	add.w	r3, r7, #16
 80050cc:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	8b1b      	ldrh	r3, [r3, #24]
 80050d2:	461a      	mov	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f000 f9fd 	bl	80054e4 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6918      	ldr	r0, [r3, #16]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	4619      	mov	r1, r3
 80050f6:	f000 fb29 	bl	800574c <MQTTSerialize_connect>
 80050fa:	6738      	str	r0, [r7, #112]	; 0x70
 80050fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050fe:	2b00      	cmp	r3, #0
 8005100:	dd32      	ble.n	8005168 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 8005102:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005106:	461a      	mov	r2, r3
 8005108:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff fc43 	bl	8004996 <sendPacket>
 8005110:	6778      	str	r0, [r7, #116]	; 0x74
 8005112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005114:	2b00      	cmp	r3, #0
 8005116:	d129      	bne.n	800516c <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8005118:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800511c:	461a      	mov	r2, r3
 800511e:	2102      	movs	r1, #2
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7ff ff8c 	bl	800503e <waitfor>
 8005126:	4603      	mov	r3, r0
 8005128:	2b02      	cmp	r3, #2
 800512a:	d117      	bne.n	800515c <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 800512c:	23ff      	movs	r3, #255	; 0xff
 800512e:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 8005130:	2300      	movs	r3, #0
 8005132:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f107 010f 	add.w	r1, r7, #15
 8005140:	f107 000e 	add.w	r0, r7, #14
 8005144:	f000 fbee 	bl	8005924 <MQTTDeserialize_connack>
 8005148:	4603      	mov	r3, r0
 800514a:	2b01      	cmp	r3, #1
 800514c:	d102      	bne.n	8005154 <MQTTConnect+0xd8>
            rc = connack_rc;
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	677b      	str	r3, [r7, #116]	; 0x74
 8005152:	e00c      	b.n	800516e <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 8005154:	f04f 33ff 	mov.w	r3, #4294967295
 8005158:	677b      	str	r3, [r7, #116]	; 0x74
 800515a:	e008      	b.n	800516e <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 800515c:	f04f 33ff 	mov.w	r3, #4294967295
 8005160:	677b      	str	r3, [r7, #116]	; 0x74
 8005162:	e004      	b.n	800516e <MQTTConnect+0xf2>
		goto exit;
 8005164:	bf00      	nop
 8005166:	e002      	b.n	800516e <MQTTConnect+0xf2>
        goto exit;
 8005168:	bf00      	nop
 800516a:	e000      	b.n	800516e <MQTTConnect+0xf2>
        goto exit; // there was a problem
 800516c:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 800516e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <MQTTConnect+0xfe>
        c->isconnected = 1;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 800517a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800517c:	4618      	mov	r0, r3
 800517e:	3778      	adds	r7, #120	; 0x78
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	0801045c 	.word	0x0801045c

08005188 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{
 8005188:	b5b0      	push	{r4, r5, r7, lr}
 800518a:	b094      	sub	sp, #80	; 0x50
 800518c:	af04      	add	r7, sp, #16
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	4613      	mov	r3, r2
 8005196:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8005198:	f04f 33ff 	mov.w	r3, #4294967295
 800519c:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 80051a2:	2300      	movs	r3, #0
 80051a4:	623b      	str	r3, [r7, #32]
 80051a6:	2300      	movs	r3, #0
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
 80051aa:	2300      	movs	r3, #0
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
    topic.cstring = (char *)topicFilter;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	623b      	str	r3, [r7, #32]
    // This was added because enum QoS was previously typed to *int which resulted in HardFault and unaligned integer read.
    // This coping below makes sure the parameter for MQTTSerialize_subscribe is always char no matter what compiler is using for enums
    char charQos = (char)qos;
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	77fb      	strb	r3, [r7, #31]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8083 	beq.w	80052c6 <MQTTSubscribe+0x13e>
		goto exit;

    TimerInit(&timer);
 80051c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051c4:	4618      	mov	r0, r3
 80051c6:	f000 f955 	bl	8005474 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051d2:	4611      	mov	r1, r2
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 f971 	bl	80054bc <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, &charQos);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691c      	ldr	r4, [r3, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	461d      	mov	r5, r3
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7ff fbbd 	bl	8004964 <getNextPacketId>
 80051ea:	4603      	mov	r3, r0
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	f107 031f 	add.w	r3, r7, #31
 80051f2:	9302      	str	r3, [sp, #8]
 80051f4:	f107 0320 	add.w	r3, r7, #32
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	2301      	movs	r3, #1
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	4613      	mov	r3, r2
 8005200:	2200      	movs	r2, #0
 8005202:	4629      	mov	r1, r5
 8005204:	4620      	mov	r0, r4
 8005206:	f000 fffe 	bl	8006206 <MQTTSerialize_subscribe>
 800520a:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 800520c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800520e:	2b00      	cmp	r3, #0
 8005210:	dd5b      	ble.n	80052ca <MQTTSubscribe+0x142>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 8005212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005216:	461a      	mov	r2, r3
 8005218:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f7ff fbbb 	bl	8004996 <sendPacket>
 8005220:	63f8      	str	r0, [r7, #60]	; 0x3c
 8005222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005224:	2b00      	cmp	r3, #0
 8005226:	d152      	bne.n	80052ce <MQTTSubscribe+0x146>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8005228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800522c:	461a      	mov	r2, r3
 800522e:	2109      	movs	r1, #9
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f7ff ff04 	bl	800503e <waitfor>
 8005236:	4603      	mov	r3, r0
 8005238:	2b09      	cmp	r3, #9
 800523a:	d140      	bne.n	80052be <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 800523c:	2300      	movs	r3, #0
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	f04f 33ff 	mov.w	r3, #4294967295
 8005244:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	68d2      	ldr	r2, [r2, #12]
 800524e:	4614      	mov	r4, r2
 8005250:	f107 0114 	add.w	r1, r7, #20
 8005254:	f107 0218 	add.w	r2, r7, #24
 8005258:	f107 0012 	add.w	r0, r7, #18
 800525c:	9401      	str	r4, [sp, #4]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	460b      	mov	r3, r1
 8005262:	2101      	movs	r1, #1
 8005264:	f001 f849 	bl	80062fa <MQTTDeserialize_suback>
 8005268:	4603      	mov	r3, r0
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 8005272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005274:	2b80      	cmp	r3, #128	; 0x80
 8005276:	d02b      	beq.n	80052d0 <MQTTSubscribe+0x148>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8005278:	2300      	movs	r3, #0
 800527a:	63bb      	str	r3, [r7, #56]	; 0x38
 800527c:	e01b      	b.n	80052b6 <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	3304      	adds	r3, #4
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4413      	add	r3, r2
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d110      	bne.n	80052b0 <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	3304      	adds	r3, #4
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	3304      	adds	r3, #4
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4413      	add	r3, r2
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	609a      	str	r2, [r3, #8]
                    rc = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 80052ae:	e00f      	b.n	80052d0 <MQTTSubscribe+0x148>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	3301      	adds	r3, #1
 80052b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80052b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	dde0      	ble.n	800527e <MQTTSubscribe+0xf6>
 80052bc:	e008      	b.n	80052d0 <MQTTSubscribe+0x148>
                }
            }
        }
    }
    else
        rc = FAILURE;
 80052be:	f04f 33ff 	mov.w	r3, #4294967295
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c4:	e004      	b.n	80052d0 <MQTTSubscribe+0x148>
		goto exit;
 80052c6:	bf00      	nop
 80052c8:	e002      	b.n	80052d0 <MQTTSubscribe+0x148>
        goto exit;
 80052ca:	bf00      	nop
 80052cc:	e000      	b.n	80052d0 <MQTTSubscribe+0x148>
        goto exit;             // there was a problem
 80052ce:	bf00      	nop

exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 80052d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3740      	adds	r7, #64	; 0x40
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bdb0      	pop	{r4, r5, r7, pc}

080052da <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 80052da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052dc:	b097      	sub	sp, #92	; 0x5c
 80052de:	af08      	add	r7, sp, #32
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ea:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61fb      	str	r3, [r7, #28]
 80052f0:	2300      	movs	r3, #0
 80052f2:	623b      	str	r3, [r7, #32]
 80052f4:	2300      	movs	r3, #0
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	61fb      	str	r3, [r7, #28]
    int len = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a1b      	ldr	r3, [r3, #32]
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 809b 	beq.w	8005440 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 800530a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f8b0 	bl	8005474 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800531c:	4611      	mov	r1, r2
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f8cc 	bl	80054bc <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d003      	beq.n	8005334 <MQTTPublish+0x5a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b02      	cmp	r3, #2
 8005332:	d106      	bne.n	8005342 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff fb15 	bl	8004964 <getNextPacketId>
 800533a:	4603      	mov	r3, r0
 800533c:	b29a      	uxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	469c      	mov	ip, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	469e      	mov	lr, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	785d      	ldrb	r5, [r3, #1]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 8005364:	9206      	str	r2, [sp, #24]
 8005366:	9305      	str	r3, [sp, #20]
 8005368:	ac02      	add	r4, sp, #8
 800536a:	f107 031c 	add.w	r3, r7, #28
 800536e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005372:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005376:	9601      	str	r6, [sp, #4]
 8005378:	9500      	str	r5, [sp, #0]
 800537a:	4673      	mov	r3, lr
 800537c:	2200      	movs	r2, #0
 800537e:	4661      	mov	r1, ip
 8005380:	6838      	ldr	r0, [r7, #0]
 8005382:	f000 fe4e 	bl	8006022 <MQTTSerialize_publish>
 8005386:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8005388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538a:	2b00      	cmp	r3, #0
 800538c:	dd5a      	ble.n	8005444 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 800538e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005392:	461a      	mov	r2, r3
 8005394:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f7ff fafd 	bl	8004996 <sendPacket>
 800539c:	6378      	str	r0, [r7, #52]	; 0x34
 800539e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d151      	bne.n	8005448 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d122      	bne.n	80053f2 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 80053ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053b0:	461a      	mov	r2, r3
 80053b2:	2104      	movs	r1, #4
 80053b4:	68f8      	ldr	r0, [r7, #12]
 80053b6:	f7ff fe42 	bl	800503e <waitfor>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d114      	bne.n	80053ea <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	695c      	ldr	r4, [r3, #20]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f107 021a 	add.w	r2, r7, #26
 80053cc:	f107 0119 	add.w	r1, r7, #25
 80053d0:	f107 0018 	add.w	r0, r7, #24
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	4623      	mov	r3, r4
 80053d8:	f000 fbb2 	bl	8005b40 <MQTTDeserialize_ack>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d035      	beq.n	800544e <MQTTPublish+0x174>
                rc = FAILURE;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
 80053e8:	e031      	b.n	800544e <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 80053ea:	f04f 33ff 	mov.w	r3, #4294967295
 80053ee:	637b      	str	r3, [r7, #52]	; 0x34
 80053f0:	e02d      	b.n	800544e <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d128      	bne.n	800544c <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 80053fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053fe:	461a      	mov	r2, r3
 8005400:	2107      	movs	r1, #7
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f7ff fe1b 	bl	800503e <waitfor>
 8005408:	4603      	mov	r3, r0
 800540a:	2b07      	cmp	r3, #7
 800540c:	d114      	bne.n	8005438 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	695c      	ldr	r4, [r3, #20]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f107 0216 	add.w	r2, r7, #22
 800541a:	f107 0115 	add.w	r1, r7, #21
 800541e:	f107 0014 	add.w	r0, r7, #20
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	4623      	mov	r3, r4
 8005426:	f000 fb8b 	bl	8005b40 <MQTTDeserialize_ack>
 800542a:	4603      	mov	r3, r0
 800542c:	2b01      	cmp	r3, #1
 800542e:	d00e      	beq.n	800544e <MQTTPublish+0x174>
                rc = FAILURE;
 8005430:	f04f 33ff 	mov.w	r3, #4294967295
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
 8005436:	e00a      	b.n	800544e <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 8005438:	f04f 33ff 	mov.w	r3, #4294967295
 800543c:	637b      	str	r3, [r7, #52]	; 0x34
 800543e:	e006      	b.n	800544e <MQTTPublish+0x174>
		goto exit;
 8005440:	bf00      	nop
 8005442:	e004      	b.n	800544e <MQTTPublish+0x174>
        goto exit;
 8005444:	bf00      	nop
 8005446:	e002      	b.n	800544e <MQTTPublish+0x174>
        goto exit; // there was a problem
 8005448:	bf00      	nop
 800544a:	e000      	b.n	800544e <MQTTPublish+0x174>
    }

exit:
 800544c:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800544e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005450:	4618      	mov	r0, r3
 8005452:	373c      	adds	r7, #60	; 0x3c
 8005454:	46bd      	mov	sp, r7
 8005456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005458 <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
	MilliTimer++;
 800545c:	4b04      	ldr	r3, [pc, #16]	; (8005470 <MilliTimer_Handler+0x18>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	4a03      	ldr	r2, [pc, #12]	; (8005470 <MilliTimer_Handler+0x18>)
 8005464:	6013      	str	r3, [r2, #0]
}
 8005466:	bf00      	nop
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000178 	.word	0x20000178

08005474 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	605a      	str	r2, [r3, #4]
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
	...

08005490 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <TimerIsExpired+0x28>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	0fdb      	lsrs	r3, r3, #31
 80054a8:	b2db      	uxtb	r3, r3
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	20000178 	.word	0x20000178

080054bc <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 80054c6:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <TimerCountdownMS+0x24>)
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	441a      	add	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	605a      	str	r2, [r3, #4]
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20000178 	.word	0x20000178

080054e4 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054f4:	fb03 f202 	mul.w	r2, r3, r2
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <TimerCountdown+0x2c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	441a      	add	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	605a      	str	r2, [r3, #4]
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000178 	.word	0x20000178

08005514 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 8005514:	b480      	push	{r7}
 8005516:	b085      	sub	sp, #20
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	4b06      	ldr	r3, [pc, #24]	; (800553c <TimerLeftMS+0x28>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000178 	.word	0x20000178

08005540 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a07      	ldr	r2, [pc, #28]	; (8005570 <NewNetwork+0x30>)
 8005554:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a06      	ldr	r2, [pc, #24]	; (8005574 <NewNetwork+0x34>)
 800555a:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a06      	ldr	r2, [pc, #24]	; (8005578 <NewNetwork+0x38>)
 8005560:	60da      	str	r2, [r3, #12]
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	0800557d 	.word	0x0800557d
 8005574:	080055d3 	.word	0x080055d3
 8005578:	08005617 	.word	0x08005617

0800557c <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3304      	adds	r3, #4
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	3303      	adds	r3, #3
 8005594:	4618      	mov	r0, r3
 8005596:	f7fb fbbd 	bl	8000d14 <WIZCHIP_READ>
 800559a:	4603      	mov	r3, r0
 800559c:	2b17      	cmp	r3, #23
 800559e:	d113      	bne.n	80055c8 <w5x00_read+0x4c>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fb fcc1 	bl	8000f2e <getSn_RX_RSR>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <w5x00_read+0x4c>
		return recv(n->my_socket, buffer, len);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	b292      	uxth	r2, r2
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fc faa2 	bl	8001b08 <recv>
 80055c4:	4603      	mov	r3, r0
 80055c6:	e000      	b.n	80055ca <w5x00_read+0x4e>

	return SOCK_ERROR;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3304      	adds	r3, #4
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	3303      	adds	r3, #3
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fb fb92 	bl	8000d14 <WIZCHIP_READ>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b17      	cmp	r3, #23
 80055f4:	d10a      	bne.n	800560c <w5x00_write+0x3a>
		return send(n->my_socket, buffer, len);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	b292      	uxth	r2, r2
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	4618      	mov	r0, r3
 8005604:	f7fc f98c 	bl	8001920 <send>
 8005608:	4603      	mov	r3, r0
 800560a:	e000      	b.n	800560e <w5x00_write+0x3c>

	return SOCK_ERROR;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	4618      	mov	r0, r3
 8005626:	f7fc f90d 	bl	8001844 <disconnect>
}
 800562a:	bf00      	nop
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	4613      	mov	r3, r2
 800563e:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 8005640:	f243 0339 	movw	r3, #12345	; 0x3039
 8005644:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	b2d8      	uxtb	r0, r3
 800564c:	8afa      	ldrh	r2, [r7, #22]
 800564e:	2300      	movs	r3, #0
 8005650:	2101      	movs	r1, #1
 8005652:	f7fb fec9 	bl	80013e8 <socket>
 8005656:	4603      	mov	r3, r0
 8005658:	461a      	mov	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d001      	beq.n	8005666 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 8005662:	2300      	movs	r3, #0
 8005664:	e00d      	b.n	8005682 <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	88fa      	ldrh	r2, [r7, #6]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	4618      	mov	r0, r3
 8005672:	f7fc f821 	bl	80016b8 <connect>
 8005676:	4603      	mov	r3, r0
 8005678:	2b01      	cmp	r3, #1
 800567a:	d001      	beq.n	8005680 <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 800567c:	2300      	movs	r3, #0
 800567e:	e000      	b.n	8005682 <ConnectNetwork+0x50>

	return SOCK_OK;
 8005680:	2301      	movs	r3, #1
}
 8005682:	4618      	mov	r0, r3
 8005684:	3718      	adds	r7, #24
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800568a:	b590      	push	{r4, r7, lr}
 800568c:	b085      	sub	sp, #20
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
	int len = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	7a1b      	ldrb	r3, [r3, #8]
 800569a:	2b03      	cmp	r3, #3
 800569c:	d102      	bne.n	80056a4 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800569e:	230c      	movs	r3, #12
 80056a0:	60fb      	str	r3, [r7, #12]
 80056a2:	e005      	b.n	80056b0 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	7a1b      	ldrb	r3, [r3, #8]
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d101      	bne.n	80056b0 <MQTTSerialize_connectLength+0x26>
		len = 10;
 80056ac:	230a      	movs	r3, #10
 80056ae:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	330c      	adds	r3, #12
 80056b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056b8:	f000 fc43 	bl	8005f42 <MQTTstrlen>
 80056bc:	4603      	mov	r3, r0
 80056be:	3302      	adds	r3, #2
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	7edb      	ldrb	r3, [r3, #27]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d013      	beq.n	80056f6 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3324      	adds	r3, #36	; 0x24
 80056d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056d6:	f000 fc34 	bl	8005f42 <MQTTstrlen>
 80056da:	4603      	mov	r3, r0
 80056dc:	1c9c      	adds	r4, r3, #2
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	3330      	adds	r3, #48	; 0x30
 80056e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80056e6:	f000 fc2c 	bl	8005f42 <MQTTstrlen>
 80056ea:	4603      	mov	r3, r0
 80056ec:	4423      	add	r3, r4
 80056ee:	3302      	adds	r3, #2
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d103      	bne.n	8005706 <MQTTSerialize_connectLength+0x7c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	3340      	adds	r3, #64	; 0x40
 800570a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800570e:	f000 fc18 	bl	8005f42 <MQTTstrlen>
 8005712:	4603      	mov	r3, r0
 8005714:	3302      	adds	r3, #2
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005720:	2b00      	cmp	r3, #0
 8005722:	d103      	bne.n	800572c <MQTTSerialize_connectLength+0xa2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00a      	beq.n	8005742 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	334c      	adds	r3, #76	; 0x4c
 8005730:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005734:	f000 fc05 	bl	8005f42 <MQTTstrlen>
 8005738:	4603      	mov	r3, r0
 800573a:	3302      	adds	r3, #2
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4413      	add	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8005742:	68fb      	ldr	r3, [r7, #12]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3714      	adds	r7, #20
 8005748:	46bd      	mov	sp, r7
 800574a:	bd90      	pop	{r4, r7, pc}

0800574c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08a      	sub	sp, #40	; 0x28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800575c:	2300      	movs	r3, #0
 800575e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]
	int len = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8005768:	f04f 33ff 	mov.w	r3, #4294967295
 800576c:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff ff8b 	bl	800568a <MQTTSerialize_connectLength>
 8005774:	6238      	str	r0, [r7, #32]
 8005776:	6a38      	ldr	r0, [r7, #32]
 8005778:	f000 fa98 	bl	8005cac <MQTTPacket_len>
 800577c:	4602      	mov	r2, r0
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4293      	cmp	r3, r2
 8005782:	da03      	bge.n	800578c <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8005784:	f06f 0301 	mvn.w	r3, #1
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800578a:	e0c2      	b.n	8005912 <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800578c:	2300      	movs	r3, #0
 800578e:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8005790:	7e3b      	ldrb	r3, [r7, #24]
 8005792:	2201      	movs	r2, #1
 8005794:	f362 1307 	bfi	r3, r2, #4, #4
 8005798:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800579a:	7e3a      	ldrb	r2, [r7, #24]
 800579c:	f107 031c 	add.w	r3, r7, #28
 80057a0:	4611      	mov	r1, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fb11 	bl	8005dca <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	6a39      	ldr	r1, [r7, #32]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fa12 	bl	8005bd6 <MQTTPacket_encode>
 80057b2:	4602      	mov	r2, r0
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	7a1b      	ldrb	r3, [r3, #8]
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d10c      	bne.n	80057dc <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 80057c2:	f107 031c 	add.w	r3, r7, #28
 80057c6:	4955      	ldr	r1, [pc, #340]	; (800591c <MQTTSerialize_connect+0x1d0>)
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fb3c 	bl	8005e46 <writeCString>
		writeChar(&ptr, (char) 4);
 80057ce:	f107 031c 	add.w	r3, r7, #28
 80057d2:	2104      	movs	r1, #4
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 faf8 	bl	8005dca <writeChar>
 80057da:	e00b      	b.n	80057f4 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80057dc:	f107 031c 	add.w	r3, r7, #28
 80057e0:	494f      	ldr	r1, [pc, #316]	; (8005920 <MQTTSerialize_connect+0x1d4>)
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fb2f 	bl	8005e46 <writeCString>
		writeChar(&ptr, (char) 3);
 80057e8:	f107 031c 	add.w	r3, r7, #28
 80057ec:	2103      	movs	r1, #3
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 faeb 	bl	8005dca <writeChar>
	}

	flags.all = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	7e9b      	ldrb	r3, [r3, #26]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	b2da      	uxtb	r2, r3
 8005802:	7d3b      	ldrb	r3, [r7, #20]
 8005804:	f362 0341 	bfi	r3, r2, #1, #1
 8005808:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	7edb      	ldrb	r3, [r3, #27]
 800580e:	2b00      	cmp	r3, #0
 8005810:	bf14      	ite	ne
 8005812:	2301      	movne	r3, #1
 8005814:	2300      	moveq	r3, #0
 8005816:	b2da      	uxtb	r2, r3
 8005818:	7d3b      	ldrb	r3, [r7, #20]
 800581a:	f362 0382 	bfi	r3, r2, #2, #1
 800581e:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8005820:	7d3b      	ldrb	r3, [r7, #20]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d013      	beq.n	8005854 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005832:	f003 0303 	and.w	r3, r3, #3
 8005836:	b2da      	uxtb	r2, r3
 8005838:	7d3b      	ldrb	r3, [r7, #20]
 800583a:	f362 03c4 	bfi	r3, r2, #3, #2
 800583e:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	b2da      	uxtb	r2, r3
 800584c:	7d3b      	ldrb	r3, [r7, #20]
 800584e:	f362 1345 	bfi	r3, r2, #5, #1
 8005852:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d103      	bne.n	8005864 <MQTTSerialize_connect+0x118>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8005864:	7d3b      	ldrb	r3, [r7, #20]
 8005866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800586a:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d103      	bne.n	800587c <MQTTSerialize_connect+0x130>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800587c:	7d3b      	ldrb	r3, [r7, #20]
 800587e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005882:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8005884:	7d3a      	ldrb	r2, [r7, #20]
 8005886:	f107 031c 	add.w	r3, r7, #28
 800588a:	4611      	mov	r1, r2
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fa9c 	bl	8005dca <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8b1b      	ldrh	r3, [r3, #24]
 8005896:	461a      	mov	r2, r3
 8005898:	f107 031c 	add.w	r3, r7, #28
 800589c:	4611      	mov	r1, r2
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 faa8 	bl	8005df4 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f107 001c 	add.w	r0, r7, #28
 80058aa:	330c      	adds	r3, #12
 80058ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058ae:	f000 fae9 	bl	8005e84 <writeMQTTString>
	if (options->willFlag)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	7edb      	ldrb	r3, [r3, #27]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00d      	beq.n	80058d6 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f107 001c 	add.w	r0, r7, #28
 80058c0:	3324      	adds	r3, #36	; 0x24
 80058c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058c4:	f000 fade 	bl	8005e84 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f107 001c 	add.w	r0, r7, #28
 80058ce:	3330      	adds	r3, #48	; 0x30
 80058d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058d2:	f000 fad7 	bl	8005e84 <writeMQTTString>
	}
	if (flags.bits.username)
 80058d6:	7d3b      	ldrb	r3, [r7, #20]
 80058d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d006      	beq.n	80058f0 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f107 001c 	add.w	r0, r7, #28
 80058e8:	3340      	adds	r3, #64	; 0x40
 80058ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058ec:	f000 faca 	bl	8005e84 <writeMQTTString>
	if (flags.bits.password)
 80058f0:	7d3b      	ldrb	r3, [r7, #20]
 80058f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d006      	beq.n	800590a <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f107 001c 	add.w	r0, r7, #28
 8005902:	334c      	adds	r3, #76	; 0x4c
 8005904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005906:	f000 fabd 	bl	8005e84 <writeMQTTString>

	rc = ptr - buf;
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005914:	4618      	mov	r0, r3
 8005916:	3728      	adds	r7, #40	; 0x28
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	080104b4 	.word	0x080104b4
 8005920:	080104bc 	.word	0x080104bc

08005924 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8005932:	2300      	movs	r3, #0
 8005934:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800593a:	2300      	movs	r3, #0
 800593c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800593e:	2300      	movs	r3, #0
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 8005942:	2300      	movs	r3, #0
 8005944:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8005946:	f107 0318 	add.w	r3, r7, #24
 800594a:	4618      	mov	r0, r3
 800594c:	f000 fa29 	bl	8005da2 <readChar>
 8005950:	4603      	mov	r3, r0
 8005952:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 8005954:	7f3b      	ldrb	r3, [r7, #28]
 8005956:	f023 030f 	bic.w	r3, r3, #15
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b20      	cmp	r3, #32
 800595e:	d12e      	bne.n	80059be <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	f107 0214 	add.w	r2, r7, #20
 8005966:	4611      	mov	r1, r2
 8005968:	4618      	mov	r0, r3
 800596a:	f000 f9e9 	bl	8005d40 <MQTTPacket_decodeBuf>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24
 8005970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	4413      	add	r3, r2
 8005976:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4413      	add	r3, r2
 800597e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	6a3a      	ldr	r2, [r7, #32]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	dd1b      	ble.n	80059c2 <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800598a:	f107 0318 	add.w	r3, r7, #24
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fa07 	bl	8005da2 <readChar>
 8005994:	4603      	mov	r3, r0
 8005996:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8005998:	7c3b      	ldrb	r3, [r7, #16]
 800599a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 80059a6:	f107 0318 	add.w	r3, r7, #24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 f9f9 	bl	8005da2 <readChar>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	701a      	strb	r2, [r3, #0]

	rc = 1;
 80059b8:	2301      	movs	r3, #1
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
 80059bc:	e002      	b.n	80059c4 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80059be:	bf00      	nop
 80059c0:	e000      	b.n	80059c4 <MQTTDeserialize_connack+0xa0>
		goto exit;
 80059c2:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3728      	adds	r7, #40	; 0x28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b088      	sub	sp, #32
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	60f8      	str	r0, [r7, #12]
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	4613      	mov	r3, r2
 80059da:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 80059dc:	2300      	movs	r3, #0
 80059de:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 80059e0:	f04f 33ff 	mov.w	r3, #4294967295
 80059e4:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	dc03      	bgt.n	80059f8 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80059f0:	f06f 0301 	mvn.w	r3, #1
 80059f4:	61fb      	str	r3, [r7, #28]
		goto exit;
 80059f6:	e01d      	b.n	8005a34 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 80059fc:	79fb      	ldrb	r3, [r7, #7]
 80059fe:	f003 030f 	and.w	r3, r3, #15
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	7e3b      	ldrb	r3, [r7, #24]
 8005a06:	f362 1307 	bfi	r3, r2, #4, #4
 8005a0a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8005a0c:	7e3a      	ldrb	r2, [r7, #24]
 8005a0e:	f107 0314 	add.w	r3, r7, #20
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 f9d8 	bl	8005dca <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f8d9 	bl	8005bd6 <MQTTPacket_encode>
 8005a24:	4602      	mov	r2, r0
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	4413      	add	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005a34:	69fb      	ldr	r3, [r7, #28]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 8005a48:	220c      	movs	r2, #12
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff ffbe 	bl	80059ce <MQTTSerialize_zero>
 8005a52:	4603      	mov	r3, r0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	; 0x28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8005a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a70:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8005a7e:	f107 0318 	add.w	r3, r7, #24
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 f98d 	bl	8005da2 <readChar>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 8005a8c:	7f3b      	ldrb	r3, [r7, #28]
 8005a8e:	f023 030f 	bic.w	r3, r3, #15
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b30      	cmp	r3, #48	; 0x30
 8005a96:	d14b      	bne.n	8005b30 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8005a98:	7f3b      	ldrb	r3, [r7, #28]
 8005a9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8005aa6:	7f3b      	ldrb	r3, [r7, #28]
 8005aa8:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8005ab4:	7f3b      	ldrb	r3, [r7, #28]
 8005ab6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	f107 0214 	add.w	r2, r7, #20
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f938 	bl	8005d40 <MQTTPacket_decodeBuf>
 8005ad0:	6278      	str	r0, [r7, #36]	; 0x24
 8005ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4413      	add	r3, r2
 8005ae0:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8005ae2:	f107 0318 	add.w	r3, r7, #24
 8005ae6:	6a3a      	ldr	r2, [r7, #32]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aec:	f000 f9f8 	bl	8005ee0 <readMQTTLenString>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d01e      	beq.n	8005b34 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	6a3a      	ldr	r2, [r7, #32]
 8005afa:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	db19      	blt.n	8005b34 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	dd08      	ble.n	8005b1a <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8005b08:	f107 0318 	add.w	r3, r7, #24
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 f92d 	bl	8005d6c <readInt>
 8005b12:	4603      	mov	r3, r0
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	6a3a      	ldr	r2, [r7, #32]
 8005b1e:	1ad2      	subs	r2, r2, r3
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b28:	601a      	str	r2, [r3, #0]
	rc = 1;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2e:	e002      	b.n	8005b36 <MQTTDeserialize_publish+0xda>
		goto exit;
 8005b30:	bf00      	nop
 8005b32:	e000      	b.n	8005b36 <MQTTDeserialize_publish+0xda>
		goto exit;
 8005b34:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3728      	adds	r7, #40	; 0x28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	; 0x28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8005b5e:	f107 0318 	add.w	r3, r7, #24
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 f91d 	bl	8005da2 <readChar>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 8005b6c:	7f3b      	ldrb	r3, [r7, #28]
 8005b6e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 8005b7a:	7f3b      	ldrb	r3, [r7, #28]
 8005b7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	f107 0214 	add.w	r2, r7, #20
 8005b8e:	4611      	mov	r1, r2
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 f8d5 	bl	8005d40 <MQTTPacket_decodeBuf>
 8005b96:	6278      	str	r0, [r7, #36]	; 0x24
 8005b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	dd0b      	ble.n	8005bca <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8005bb2:	f107 0318 	add.w	r3, r7, #24
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 f8d8 	bl	8005d6c <readInt>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc8:	e000      	b.n	8005bcc <MQTTDeserialize_ack+0x8c>
		goto exit;
 8005bca:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3728      	adds	r7, #40	; 0x28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b085      	sub	sp, #20
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
	int rc = 0;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	425a      	negs	r2, r3
 8005be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bf0:	bf58      	it	pl
 8005bf2:	4253      	negpl	r3, r2
 8005bf4:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	da00      	bge.n	8005bfe <MQTTPacket_encode+0x28>
 8005bfc:	337f      	adds	r3, #127	; 0x7f
 8005bfe:	11db      	asrs	r3, r3, #7
 8005c00:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	dd03      	ble.n	8005c10 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8005c08:	7afb      	ldrb	r3, [r7, #11]
 8005c0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c0e:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	60fa      	str	r2, [r7, #12]
 8005c16:	461a      	mov	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	7afa      	ldrb	r2, [r7, #11]
 8005c1e:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	dcde      	bgt.n	8005be4 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8005c26:	68fb      	ldr	r3, [r7, #12]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
	int len = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8005c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c50:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	3301      	adds	r3, #1
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	dd03      	ble.n	8005c66 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8005c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c62:	60fb      	str	r3, [r7, #12]
			goto exit;
 8005c64:	e01d      	b.n	8005ca2 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8005c66:	f107 020b 	add.w	r2, r7, #11
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4798      	blx	r3
 8005c72:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d112      	bne.n	8005ca0 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c84:	6979      	ldr	r1, [r7, #20]
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	441a      	add	r2, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	01db      	lsls	r3, r3, #7
 8005c94:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8005c96:	7afb      	ldrb	r3, [r7, #11]
 8005c98:	b25b      	sxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	dbd6      	blt.n	8005c4c <MQTTPacket_decode+0x18>
exit:
 8005c9e:	e000      	b.n	8005ca2 <MQTTPacket_decode+0x6e>
			goto exit;
 8005ca0:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8005ca2:	693b      	ldr	r3, [r7, #16]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b7f      	cmp	r3, #127	; 0x7f
 8005cbe:	dc03      	bgt.n	8005cc8 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	607b      	str	r3, [r7, #4]
 8005cc6:	e012      	b.n	8005cee <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cce:	da03      	bge.n	8005cd8 <MQTTPacket_len+0x2c>
		rem_len += 2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3302      	adds	r3, #2
 8005cd4:	607b      	str	r3, [r7, #4]
 8005cd6:	e00a      	b.n	8005cee <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <MQTTPacket_len+0x50>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	dc03      	bgt.n	8005ce8 <MQTTPacket_len+0x3c>
		rem_len += 3;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3303      	adds	r3, #3
 8005ce4:	607b      	str	r3, [r7, #4]
 8005ce6:	e002      	b.n	8005cee <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	607b      	str	r3, [r7, #4]
	return rem_len;
 8005cee:	687b      	ldr	r3, [r7, #4]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	001ffffe 	.word	0x001ffffe

08005d00 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	e00a      	b.n	8005d26 <bufchar+0x26>
		*c = *bufptr++;
 8005d10:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <bufchar+0x3c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	4909      	ldr	r1, [pc, #36]	; (8005d3c <bufchar+0x3c>)
 8005d18:	600a      	str	r2, [r1, #0]
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	dbf0      	blt.n	8005d10 <bufchar+0x10>
	return count;
 8005d2e:	683b      	ldr	r3, [r7, #0]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	2000017c 	.word	0x2000017c

08005d40 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8005d4a:	4a06      	ldr	r2, [pc, #24]	; (8005d64 <MQTTPacket_decodeBuf+0x24>)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	4805      	ldr	r0, [pc, #20]	; (8005d68 <MQTTPacket_decodeBuf+0x28>)
 8005d54:	f7ff ff6e 	bl	8005c34 <MQTTPacket_decode>
 8005d58:	4603      	mov	r3, r0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	2000017c 	.word	0x2000017c
 8005d68:	08005d01 	.word	0x08005d01

08005d6c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	3201      	adds	r2, #1
 8005d84:	7812      	ldrb	r2, [r2, #0]
 8005d86:	4413      	add	r3, r2
 8005d88:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	1c9a      	adds	r2, r3, #2
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	601a      	str	r2, [r3, #0]
	return len;
 8005d94:	68bb      	ldr	r3, [r7, #8]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	601a      	str	r2, [r3, #0]
	return c;
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	78fa      	ldrb	r2, [r7, #3]
 8005ddc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	601a      	str	r2, [r3, #0]
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	da00      	bge.n	8005e06 <writeInt+0x12>
 8005e04:	33ff      	adds	r3, #255	; 0xff
 8005e06:	121b      	asrs	r3, r3, #8
 8005e08:	461a      	mov	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	425a      	negs	r2, r3
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	bf58      	it	pl
 8005e26:	4253      	negpl	r3, r2
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	601a      	str	r2, [r3, #0]
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b084      	sub	sp, #16
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
 8005e4e:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8005e50:	6838      	ldr	r0, [r7, #0]
 8005e52:	f7fa fa1d 	bl	8000290 <strlen>
 8005e56:	4603      	mov	r3, r0
 8005e58:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 8005e5a:	68f9      	ldr	r1, [r7, #12]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff ffc9 	bl	8005df4 <writeInt>
	memcpy(*pptr, string, len);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f009 fceb 	bl	800f846 <memcpy>
	*pptr += len;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	441a      	add	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	601a      	str	r2, [r3, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	dd12      	ble.n	8005ebe <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7ff ffa9 	bl	8005df4 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f009 fccb 	bl	800f846 <memcpy>
		*pptr += mqttstring.lenstring.len;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	441a      	add	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 8005ebc:	e00c      	b.n	8005ed8 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f7ff ffbc 	bl	8005e46 <writeCString>
}
 8005ece:	e003      	b.n	8005ed8 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f7ff ff8e 	bl	8005df4 <writeInt>
}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
	int rc = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	dd1a      	ble.n	8005f32 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 8005efc:	68b8      	ldr	r0, [r7, #8]
 8005efe:	f7ff ff35 	bl	8005d6c <readInt>
 8005f02:	4602      	mov	r2, r0
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	6852      	ldr	r2, [r2, #4]
 8005f10:	4413      	add	r3, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d30c      	bcc.n	8005f32 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	6852      	ldr	r2, [r2, #4]
 8005f28:	441a      	add	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	601a      	str	r2, [r3, #0]
			rc = 1;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8005f38:	697b      	ldr	r3, [r7, #20]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b086      	sub	sp, #24
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	1d3b      	adds	r3, r7, #4
 8005f4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d006      	beq.n	8005f66 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fa f998 	bl	8000290 <strlen>
 8005f60:	4603      	mov	r3, r0
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	e001      	b.n	8005f6a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	617b      	str	r3, [r7, #20]
	return rc;
 8005f6a:	697b      	ldr	r3, [r7, #20]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]
		blen = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fa f979 	bl	8000290 <strlen>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	e005      	b.n	8005fb0 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8005fb0:	6838      	ldr	r0, [r7, #0]
 8005fb2:	f7fa f96d 	bl	8000290 <strlen>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d10a      	bne.n	8005fd8 <MQTTPacket_equals+0x64>
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	6938      	ldr	r0, [r7, #16]
 8005fca:	f009 fb48 	bl	800f65e <strncmp>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <MQTTPacket_equals+0x64>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <MQTTPacket_equals+0x66>
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3718      	adds	r7, #24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b086      	sub	sp, #24
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	4638      	mov	r0, r7
 8005fec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8005ff4:	463b      	mov	r3, r7
 8005ff6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ffa:	f7ff ffa2 	bl	8005f42 <MQTTstrlen>
 8005ffe:	4603      	mov	r3, r0
 8006000:	1c9a      	adds	r2, r3, #2
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	4413      	add	r3, r2
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4413      	add	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	dd02      	ble.n	8006018 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	3302      	adds	r3, #2
 8006016:	617b      	str	r3, [r7, #20]
	return len;
 8006018:	697b      	ldr	r3, [r7, #20]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b08a      	sub	sp, #40	; 0x28
 8006026:	af02      	add	r7, sp, #8
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	603b      	str	r3, [r7, #0]
 800602e:	4613      	mov	r3, r2
 8006030:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 8006036:	2300      	movs	r3, #0
 8006038:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 8006042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800604a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800604c:	6838      	ldr	r0, [r7, #0]
 800604e:	f7ff ffc8 	bl	8005fe2 <MQTTSerialize_publishLength>
 8006052:	61b8      	str	r0, [r7, #24]
 8006054:	69b8      	ldr	r0, [r7, #24]
 8006056:	f7ff fe29 	bl	8005cac <MQTTPacket_len>
 800605a:	4602      	mov	r2, r0
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	4293      	cmp	r3, r2
 8006060:	da03      	bge.n	800606a <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8006062:	f06f 0301 	mvn.w	r3, #1
 8006066:	61fb      	str	r3, [r7, #28]
		goto exit;
 8006068:	e04c      	b.n	8006104 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800606a:	7c3b      	ldrb	r3, [r7, #16]
 800606c:	2203      	movs	r2, #3
 800606e:	f362 1307 	bfi	r3, r2, #4, #4
 8006072:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8006074:	79fb      	ldrb	r3, [r7, #7]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	b2da      	uxtb	r2, r3
 800607c:	7c3b      	ldrb	r3, [r7, #16]
 800607e:	f362 03c3 	bfi	r3, r2, #3, #1
 8006082:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	b2da      	uxtb	r2, r3
 800608c:	7c3b      	ldrb	r3, [r7, #16]
 800608e:	f362 0342 	bfi	r3, r2, #1, #2
 8006092:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8006094:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	b2da      	uxtb	r2, r3
 800609e:	7c3b      	ldrb	r3, [r7, #16]
 80060a0:	f362 0300 	bfi	r3, r2, #0, #1
 80060a4:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 80060a6:	7c3a      	ldrb	r2, [r7, #16]
 80060a8:	f107 0314 	add.w	r3, r7, #20
 80060ac:	4611      	mov	r1, r2
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff fe8b 	bl	8005dca <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	69b9      	ldr	r1, [r7, #24]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fd8c 	bl	8005bd6 <MQTTPacket_encode>
 80060be:	4602      	mov	r2, r0
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	4413      	add	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 80060c6:	f107 0014 	add.w	r0, r7, #20
 80060ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060d0:	f7ff fed8 	bl	8005e84 <writeMQTTString>

	if (qos > 0)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	dd06      	ble.n	80060e8 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 80060da:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	4611      	mov	r1, r2
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fe86 	bl	8005df4 <writeInt>

	memcpy(ptr, payload, payloadlen);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060ee:	4618      	mov	r0, r3
 80060f0:	f009 fba9 	bl	800f846 <memcpy>
	ptr += payloadlen;
 80060f4:	697a      	ldr	r2, [r7, #20]
 80060f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060f8:	4413      	add	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8006104:	69fb      	ldr	r3, [r7, #28]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b088      	sub	sp, #32
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	4611      	mov	r1, r2
 800611a:	461a      	mov	r2, r3
 800611c:	460b      	mov	r3, r1
 800611e:	71fb      	strb	r3, [r7, #7]
 8006120:	4613      	mov	r3, r2
 8006122:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8006124:	2300      	movs	r3, #0
 8006126:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8006128:	2300      	movs	r3, #0
 800612a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b03      	cmp	r3, #3
 8006134:	dc03      	bgt.n	800613e <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8006136:	f06f 0301 	mvn.w	r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
		goto exit;
 800613c:	e037      	b.n	80061ae <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	f003 030f 	and.w	r3, r3, #15
 8006144:	b2da      	uxtb	r2, r3
 8006146:	7e3b      	ldrb	r3, [r7, #24]
 8006148:	f362 1307 	bfi	r3, r2, #4, #4
 800614c:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800614e:	79bb      	ldrb	r3, [r7, #6]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	b2da      	uxtb	r2, r3
 8006156:	7e3b      	ldrb	r3, [r7, #24]
 8006158:	f362 03c3 	bfi	r3, r2, #3, #1
 800615c:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	2b06      	cmp	r3, #6
 8006162:	bf0c      	ite	eq
 8006164:	2301      	moveq	r3, #1
 8006166:	2300      	movne	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	b2da      	uxtb	r2, r3
 8006170:	7e3b      	ldrb	r3, [r7, #24]
 8006172:	f362 0342 	bfi	r3, r2, #1, #2
 8006176:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8006178:	7e3a      	ldrb	r2, [r7, #24]
 800617a:	f107 0314 	add.w	r3, r7, #20
 800617e:	4611      	mov	r1, r2
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff fe22 	bl	8005dca <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2102      	movs	r1, #2
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff fd23 	bl	8005bd6 <MQTTPacket_encode>
 8006190:	4602      	mov	r2, r0
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4413      	add	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8006198:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800619a:	f107 0314 	add.w	r3, r7, #20
 800619e:	4611      	mov	r1, r2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff fe27 	bl	8005df4 <writeInt>
	rc = ptr - buf;
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80061ae:	69fb      	ldr	r3, [r7, #28]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3720      	adds	r7, #32
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 80061c2:	2302      	movs	r3, #2
 80061c4:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e013      	b.n	80061f4 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	4613      	mov	r3, r2
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	461a      	mov	r2, r3
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	4413      	add	r3, r2
 80061dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061e0:	f7ff feaf 	bl	8005f42 <MQTTstrlen>
 80061e4:	4603      	mov	r3, r0
 80061e6:	3303      	adds	r3, #3
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	4413      	add	r3, r2
 80061ec:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3301      	adds	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	dbe7      	blt.n	80061cc <MQTTSerialize_subscribeLength+0x14>
	return len;
 80061fc:	68bb      	ldr	r3, [r7, #8]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], char requestedQoSs[])
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b08a      	sub	sp, #40	; 0x28
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	4611      	mov	r1, r2
 8006212:	461a      	mov	r2, r3
 8006214:	460b      	mov	r3, r1
 8006216:	71fb      	strb	r3, [r7, #7]
 8006218:	4613      	mov	r3, r2
 800621a:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8006220:	2300      	movs	r3, #0
 8006222:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 800622c:	2300      	movs	r3, #0
 800622e:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8006230:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006232:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006234:	f7ff ffc0 	bl	80061b8 <MQTTSerialize_subscribeLength>
 8006238:	61f8      	str	r0, [r7, #28]
 800623a:	69f8      	ldr	r0, [r7, #28]
 800623c:	f7ff fd36 	bl	8005cac <MQTTPacket_len>
 8006240:	4602      	mov	r2, r0
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	4293      	cmp	r3, r2
 8006246:	da03      	bge.n	8006250 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8006248:	f06f 0301 	mvn.w	r3, #1
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800624e:	e04f      	b.n	80062f0 <MQTTSerialize_subscribe+0xea>
	}

	header.byte = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8006254:	7d3b      	ldrb	r3, [r7, #20]
 8006256:	2208      	movs	r2, #8
 8006258:	f362 1307 	bfi	r3, r2, #4, #4
 800625c:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800625e:	79fb      	ldrb	r3, [r7, #7]
 8006260:	f003 0301 	and.w	r3, r3, #1
 8006264:	b2da      	uxtb	r2, r3
 8006266:	7d3b      	ldrb	r3, [r7, #20]
 8006268:	f362 03c3 	bfi	r3, r2, #3, #1
 800626c:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800626e:	7d3b      	ldrb	r3, [r7, #20]
 8006270:	2201      	movs	r2, #1
 8006272:	f362 0342 	bfi	r3, r2, #1, #2
 8006276:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8006278:	7d3a      	ldrb	r2, [r7, #20]
 800627a:	f107 0318 	add.w	r3, r7, #24
 800627e:	4611      	mov	r1, r2
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff fda2 	bl	8005dca <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	69f9      	ldr	r1, [r7, #28]
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fca3 	bl	8005bd6 <MQTTPacket_encode>
 8006290:	4602      	mov	r2, r0
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	4413      	add	r3, r2
 8006296:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8006298:	88ba      	ldrh	r2, [r7, #4]
 800629a:	f107 0318 	add.w	r3, r7, #24
 800629e:	4611      	mov	r1, r2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f7ff fda7 	bl	8005df4 <writeInt>

	for (i = 0; i < count; ++i)
 80062a6:	2300      	movs	r3, #0
 80062a8:	623b      	str	r3, [r7, #32]
 80062aa:	e019      	b.n	80062e0 <MQTTSerialize_subscribe+0xda>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 80062ac:	6a3a      	ldr	r2, [r7, #32]
 80062ae:	4613      	mov	r3, r2
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	461a      	mov	r2, r3
 80062b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ba:	4413      	add	r3, r2
 80062bc:	f107 0018 	add.w	r0, r7, #24
 80062c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062c2:	f7ff fddf 	bl	8005e84 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ca:	4413      	add	r3, r2
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	f107 0318 	add.w	r3, r7, #24
 80062d2:	4611      	mov	r1, r2
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff fd78 	bl	8005dca <writeChar>
	for (i = 0; i < count; ++i)
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	3301      	adds	r3, #1
 80062de:	623b      	str	r3, [r7, #32]
 80062e0:	6a3a      	ldr	r2, [r7, #32]
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	429a      	cmp	r2, r3
 80062e6:	dbe1      	blt.n	80062ac <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1ad3      	subs	r3, r2, r3
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3728      	adds	r7, #40	; 0x28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b08a      	sub	sp, #40	; 0x28
 80062fe:	af00      	add	r7, sp, #0
 8006300:	60f8      	str	r0, [r7, #12]
 8006302:	60b9      	str	r1, [r7, #8]
 8006304:	607a      	str	r2, [r7, #4]
 8006306:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8006308:	2300      	movs	r3, #0
 800630a:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8006310:	2300      	movs	r3, #0
 8006312:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8006318:	f107 0318 	add.w	r3, r7, #24
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fd40 	bl	8005da2 <readChar>
 8006322:	4603      	mov	r3, r0
 8006324:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 8006326:	7f3b      	ldrb	r3, [r7, #28]
 8006328:	f023 030f 	bic.w	r3, r3, #15
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b90      	cmp	r3, #144	; 0x90
 8006330:	d142      	bne.n	80063b8 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	f107 0214 	add.w	r2, r7, #20
 8006338:	4611      	mov	r1, r2
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fd00 	bl	8005d40 <MQTTPacket_decodeBuf>
 8006340:	6278      	str	r0, [r7, #36]	; 0x24
 8006342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	4413      	add	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4413      	add	r3, r2
 8006350:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	6a3a      	ldr	r2, [r7, #32]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b01      	cmp	r3, #1
 800635a:	dd2f      	ble.n	80063bc <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 800635c:	f107 0318 	add.w	r3, r7, #24
 8006360:	4618      	mov	r0, r3
 8006362:	f7ff fd03 	bl	8005d6c <readInt>
 8006366:	4603      	mov	r3, r0
 8006368:	b29a      	uxth	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	801a      	strh	r2, [r3, #0]

	*count = 0;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8006374:	e019      	b.n	80063aa <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	429a      	cmp	r2, r3
 800637e:	da03      	bge.n	8006388 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8006380:	f04f 33ff 	mov.w	r3, #4294967295
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 8006386:	e01a      	b.n	80063be <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8006388:	f107 0318 	add.w	r3, r7, #24
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff fd08 	bl	8005da2 <readChar>
 8006392:	4603      	mov	r3, r0
 8006394:	4618      	mov	r0, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	1c59      	adds	r1, r3, #1
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	6011      	str	r1, [r2, #0]
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	4413      	add	r3, r2
 80063a6:	4602      	mov	r2, r0
 80063a8:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	6a3a      	ldr	r2, [r7, #32]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d8e1      	bhi.n	8006376 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 80063b2:	2301      	movs	r3, #1
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
 80063b6:	e002      	b.n	80063be <MQTTDeserialize_suback+0xc4>
		goto exit;
 80063b8:	bf00      	nop
 80063ba:	e000      	b.n	80063be <MQTTDeserialize_suback+0xc4>
		goto exit;
 80063bc:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3728      	adds	r7, #40	; 0x28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <a_mpu6050_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu6050_iic_read(mpu6050_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80063c8:	b590      	push	{r4, r7, lr}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	607a      	str	r2, [r7, #4]
 80063d2:	461a      	mov	r2, r3
 80063d4:	460b      	mov	r3, r1
 80063d6:	72fb      	strb	r3, [r7, #11]
 80063d8:	4613      	mov	r3, r2
 80063da:	813b      	strh	r3, [r7, #8]
    if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	68dc      	ldr	r4, [r3, #12]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	7818      	ldrb	r0, [r3, #0]
 80063e4:	893b      	ldrh	r3, [r7, #8]
 80063e6:	7af9      	ldrb	r1, [r7, #11]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	47a0      	blx	r4
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <a_mpu6050_iic_read+0x2e>
    {
        return 1;                                                                 /* return error */
 80063f2:	2301      	movs	r3, #1
 80063f4:	e000      	b.n	80063f8 <a_mpu6050_iic_read+0x30>
    }
    else
    {
        return 0;                                                                 /* success return 0 */
 80063f6:	2300      	movs	r3, #0
    }
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd90      	pop	{r4, r7, pc}

08006400 <a_mpu6050_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu6050_iic_write(mpu6050_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8006400:	b590      	push	{r4, r7, lr}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	607a      	str	r2, [r7, #4]
 800640a:	461a      	mov	r2, r3
 800640c:	460b      	mov	r3, r1
 800640e:	72fb      	strb	r3, [r7, #11]
 8006410:	4613      	mov	r3, r2
 8006412:	813b      	strh	r3, [r7, #8]
    if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	691c      	ldr	r4, [r3, #16]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	7818      	ldrb	r0, [r3, #0]
 800641c:	893b      	ldrh	r3, [r7, #8]
 800641e:	7af9      	ldrb	r1, [r7, #11]
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	47a0      	blx	r4
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <a_mpu6050_iic_write+0x2e>
    {
        return 1;                                                                  /* return error */
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <a_mpu6050_iic_write+0x30>
    }
    else
    {
        return 0;                                                                  /* success return 0 */
 800642e:	2300      	movs	r3, #0
    }
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	bd90      	pop	{r4, r7, pc}

08006438 <mpu6050_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6050_set_addr_pin(mpu6050_handle_t *handle, mpu6050_address_t addr_pin)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <mpu6050_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 800644a:	2302      	movs	r3, #2
 800644c:	e003      	b.n	8006456 <mpu6050_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	78fa      	ldrb	r2, [r7, #3]
 8006452:	701a      	strb	r2, [r3, #0]

    return 0;                                    /* success return 0 */
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <mpu6050_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu6050_init(mpu6050_handle_t *handle)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;

    if (handle == NULL)                                                             /* check handle */
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <mpu6050_init+0x12>
    {
        return 2;                                                                   /* return error */
 8006472:	2302      	movs	r3, #2
 8006474:	e0bc      	b.n	80065f0 <mpu6050_init+0x18c>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <mpu6050_init+0x1e>
    {
        return 3;                                                                   /* return error */
 800647e:	2303      	movs	r3, #3
 8006480:	e0b6      	b.n	80065f0 <mpu6050_init+0x18c>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d105      	bne.n	8006496 <mpu6050_init+0x32>
    {
        handle->debug_print("mpu6050: iic_init is null.\n");                        /* iic_init is null */
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	485a      	ldr	r0, [pc, #360]	; (80065f8 <mpu6050_init+0x194>)
 8006490:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8006492:	2303      	movs	r3, #3
 8006494:	e0ac      	b.n	80065f0 <mpu6050_init+0x18c>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d105      	bne.n	80064aa <mpu6050_init+0x46>
    {
        handle->debug_print("mpu6050: iic_deinit is null.\n");                      /* iic_deinit is null */
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	4856      	ldr	r0, [pc, #344]	; (80065fc <mpu6050_init+0x198>)
 80064a4:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80064a6:	2303      	movs	r3, #3
 80064a8:	e0a2      	b.n	80065f0 <mpu6050_init+0x18c>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d105      	bne.n	80064be <mpu6050_init+0x5a>
    {
        handle->debug_print("mpu6050: iic_read is null.\n");                        /* iic_read is null */
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	4852      	ldr	r0, [pc, #328]	; (8006600 <mpu6050_init+0x19c>)
 80064b8:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80064ba:	2303      	movs	r3, #3
 80064bc:	e098      	b.n	80065f0 <mpu6050_init+0x18c>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d105      	bne.n	80064d2 <mpu6050_init+0x6e>
    {
        handle->debug_print("mpu6050: iic_write is null.\n");                       /* iic_write is null */
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	484e      	ldr	r0, [pc, #312]	; (8006604 <mpu6050_init+0x1a0>)
 80064cc:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80064ce:	2303      	movs	r3, #3
 80064d0:	e08e      	b.n	80065f0 <mpu6050_init+0x18c>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <mpu6050_init+0x82>
    {
        handle->debug_print("mpu6050: delay_ms is null.\n");                        /* delay_ms is null */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	484a      	ldr	r0, [pc, #296]	; (8006608 <mpu6050_init+0x1a4>)
 80064e0:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80064e2:	2303      	movs	r3, #3
 80064e4:	e084      	b.n	80065f0 <mpu6050_init+0x18c>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	69db      	ldr	r3, [r3, #28]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d105      	bne.n	80064fa <mpu6050_init+0x96>
    {
        handle->debug_print("mpu6050: receive_callback is null.\n");                /* receive_callback is null */
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	4846      	ldr	r0, [pc, #280]	; (800660c <mpu6050_init+0x1a8>)
 80064f4:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80064f6:	2303      	movs	r3, #3
 80064f8:	e07a      	b.n	80065f0 <mpu6050_init+0x18c>
    }

    res = handle->iic_init();                                                       /* iic init */
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	4798      	blx	r3
 8006500:	4603      	mov	r3, r0
 8006502:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8006504:	7afb      	ldrb	r3, [r7, #11]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d005      	beq.n	8006516 <mpu6050_init+0xb2>
    {
        handle->debug_print("mpu6050: iic init failed.\n");                         /* iic init failed */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	4840      	ldr	r0, [pc, #256]	; (8006610 <mpu6050_init+0x1ac>)
 8006510:	4798      	blx	r3

        return 1;                                                                   /* return error */
 8006512:	2301      	movs	r3, #1
 8006514:	e06c      	b.n	80065f0 <mpu6050_init+0x18c>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_WHO_AM_I, &prev, 1);               /* read who am I */
 8006516:	f107 020a 	add.w	r2, r7, #10
 800651a:	2301      	movs	r3, #1
 800651c:	2175      	movs	r1, #117	; 0x75
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff ff52 	bl	80063c8 <a_mpu6050_iic_read>
 8006524:	4603      	mov	r3, r0
 8006526:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8006528:	7afb      	ldrb	r3, [r7, #11]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d008      	beq.n	8006540 <mpu6050_init+0xdc>
    {
        handle->debug_print("mpu6050: read who am i failed.\n");                    /* read who am I failed */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	4838      	ldr	r0, [pc, #224]	; (8006614 <mpu6050_init+0x1b0>)
 8006534:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	4798      	blx	r3

        return 5;                                                                   /* return error */
 800653c:	2305      	movs	r3, #5
 800653e:	e057      	b.n	80065f0 <mpu6050_init+0x18c>
    }
    if (prev != 0x68)                                                               /* check the id */
 8006540:	7abb      	ldrb	r3, [r7, #10]
 8006542:	2b68      	cmp	r3, #104	; 0x68
 8006544:	d008      	beq.n	8006558 <mpu6050_init+0xf4>
    {
        handle->debug_print("mpu6050: id is invalid.\n");                           /* id is invalid */
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	4833      	ldr	r0, [pc, #204]	; (8006618 <mpu6050_init+0x1b4>)
 800654c:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	4798      	blx	r3

        return 5;                                                                   /* return error */
 8006554:	2305      	movs	r3, #5
 8006556:	e04b      	b.n	80065f0 <mpu6050_init+0x18c>
    }

    prev = 1 << 7;                                                                  /* reset the device */
 8006558:	2380      	movs	r3, #128	; 0x80
 800655a:	72bb      	strb	r3, [r7, #10]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 800655c:	f107 020a 	add.w	r2, r7, #10
 8006560:	2301      	movs	r3, #1
 8006562:	216b      	movs	r1, #107	; 0x6b
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff ff4b 	bl	8006400 <a_mpu6050_iic_write>
 800656a:	4603      	mov	r3, r0
 800656c:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 800656e:	7afb      	ldrb	r3, [r7, #11]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d008      	beq.n	8006586 <mpu6050_init+0x122>
    {
        handle->debug_print("mpu6050: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	4828      	ldr	r0, [pc, #160]	; (800661c <mpu6050_init+0x1b8>)
 800657a:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	4798      	blx	r3

        return 4;                                                                   /* return error */
 8006582:	2304      	movs	r3, #4
 8006584:	e034      	b.n	80065f0 <mpu6050_init+0x18c>
    }
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 8006586:	2364      	movs	r3, #100	; 0x64
 8006588:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 800658a:	e029      	b.n	80065e0 <mpu6050_init+0x17c>
    {
        res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);         /* read pwr mgmt 1 */
 800658c:	f107 020a 	add.w	r2, r7, #10
 8006590:	2301      	movs	r3, #1
 8006592:	216b      	movs	r1, #107	; 0x6b
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7ff ff17 	bl	80063c8 <a_mpu6050_iic_read>
 800659a:	4603      	mov	r3, r0
 800659c:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 800659e:	7afb      	ldrb	r3, [r7, #11]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <mpu6050_init+0x152>
        {
            handle->debug_print("mpu6050: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	481d      	ldr	r0, [pc, #116]	; (8006620 <mpu6050_init+0x1bc>)
 80065aa:	4798      	blx	r3
            (void)handle->iic_deinit();                                             /* iic deinit */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	4798      	blx	r3

            return 4;                                                               /* return error */
 80065b2:	2304      	movs	r3, #4
 80065b4:	e01c      	b.n	80065f0 <mpu6050_init+0x18c>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 80065b6:	7abb      	ldrb	r3, [r7, #10]
 80065b8:	b25b      	sxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	db09      	blt.n	80065d2 <mpu6050_init+0x16e>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            handle->dmp_inited = 0;                                                 /* flag closed */
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

            return 0;                                                               /* success return 0 */
 80065ce:	2300      	movs	r3, #0
 80065d0:	e00e      	b.n	80065f0 <mpu6050_init+0x18c>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	200a      	movs	r0, #10
 80065d8:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3b01      	subs	r3, #1
 80065de:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1d2      	bne.n	800658c <mpu6050_init+0x128>
    }

    handle->debug_print("mpu6050: reset failed.\n");                                /* reset failed */
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	480e      	ldr	r0, [pc, #56]	; (8006624 <mpu6050_init+0x1c0>)
 80065ec:	4798      	blx	r3

    return 4;                                                                       /* return error */
 80065ee:	2304      	movs	r3, #4
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	080108e0 	.word	0x080108e0
 80065fc:	080108fc 	.word	0x080108fc
 8006600:	0801091c 	.word	0x0801091c
 8006604:	08010938 	.word	0x08010938
 8006608:	08010958 	.word	0x08010958
 800660c:	08010974 	.word	0x08010974
 8006610:	08010998 	.word	0x08010998
 8006614:	080109b4 	.word	0x080109b4
 8006618:	080109d4 	.word	0x080109d4
 800661c:	080109f0 	.word	0x080109f0
 8006620:	08010a14 	.word	0x08010a14
 8006624:	08010a38 	.word	0x08010a38

08006628 <mpu6050_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu6050_deinit(mpu6050_handle_t *handle)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                             /* check handle */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <mpu6050_deinit+0x12>
    {
        return 2;                                                                   /* return error */
 8006636:	2302      	movs	r3, #2
 8006638:	e031      	b.n	800669e <mpu6050_deinit+0x76>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006640:	2b01      	cmp	r3, #1
 8006642:	d001      	beq.n	8006648 <mpu6050_deinit+0x20>
    {
        return 3;                                                                   /* return error */
 8006644:	2303      	movs	r3, #3
 8006646:	e02a      	b.n	800669e <mpu6050_deinit+0x76>
    }

    prev = (1 << 6) | (1 << 3) | (7 << 0);                                          /* enter sleep mode */
 8006648:	234f      	movs	r3, #79	; 0x4f
 800664a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 800664c:	f107 020e 	add.w	r2, r7, #14
 8006650:	2301      	movs	r3, #1
 8006652:	216b      	movs	r1, #107	; 0x6b
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7ff fed3 	bl	8006400 <a_mpu6050_iic_write>
 800665a:	4603      	mov	r3, r0
 800665c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d005      	beq.n	8006670 <mpu6050_deinit+0x48>
    {
        handle->debug_print("mpu6050: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	480f      	ldr	r0, [pc, #60]	; (80066a8 <mpu6050_deinit+0x80>)
 800666a:	4798      	blx	r3

        return 4;                                                                   /* return error */
 800666c:	2304      	movs	r3, #4
 800666e:	e016      	b.n	800669e <mpu6050_deinit+0x76>
    }
    res = handle->iic_deinit();                                                     /* iic deinit */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	4798      	blx	r3
 8006676:	4603      	mov	r3, r0
 8006678:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d005      	beq.n	800668c <mpu6050_deinit+0x64>
    {
        handle->debug_print("mpu6050: iic deinit failed.\n");                       /* iic deinit failed */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	4809      	ldr	r0, [pc, #36]	; (80066ac <mpu6050_deinit+0x84>)
 8006686:	4798      	blx	r3

        return 1;                                                                   /* return error */
 8006688:	2301      	movs	r3, #1
 800668a:	e008      	b.n	800669e <mpu6050_deinit+0x76>
    }
    handle->inited = 0;                                                             /* flag closed */
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    handle->dmp_inited = 0;                                                         /* flag closed */
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    return 0;                                                                       /* success return 0 */
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	080109f0 	.word	0x080109f0
 80066ac:	08010a50 	.word	0x08010a50

080066b0 <mpu6050_read>:
 *                - 6 fifo conf is error
 * @note          none
 */
uint8_t mpu6050_read(mpu6050_handle_t *handle, int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3], uint16_t *len)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;

    if (handle == NULL)                                                                            /* check handle */
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d102      	bne.n	80066ca <mpu6050_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 80066c4:	2302      	movs	r3, #2
 80066c6:	f000 be7c 	b.w	80073c2 <mpu6050_read+0xd12>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d002      	beq.n	80066da <mpu6050_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 80066d4:	2303      	movs	r3, #3
 80066d6:	f000 be74 	b.w	80073c2 <mpu6050_read+0xd12>
    }
    if ((*len) == 0)                                                                               /* check length */
 80066da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066dc:	881b      	ldrh	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d106      	bne.n	80066f0 <mpu6050_read+0x40>
    {
        handle->debug_print("mpu6050: length is zero.\n");                                         /* length is zero */
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	486a      	ldr	r0, [pc, #424]	; (8006890 <mpu6050_read+0x1e0>)
 80066e8:	4798      	blx	r3

        return 4;                                                                                  /* return error */
 80066ea:	2304      	movs	r3, #4
 80066ec:	f000 be69 	b.w	80073c2 <mpu6050_read+0xd12>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d006      	beq.n	8006708 <mpu6050_read+0x58>
    {
        handle->debug_print("mpu6050: dmp is running.\n");                                         /* dmp is running */
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	4865      	ldr	r0, [pc, #404]	; (8006894 <mpu6050_read+0x1e4>)
 8006700:	4798      	blx	r3

        return 5;                                                                                  /* return error */
 8006702:	2305      	movs	r3, #5
 8006704:	f000 be5d 	b.w	80073c2 <mpu6050_read+0xd12>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);                  /* read config */
 8006708:	f107 0219 	add.w	r2, r7, #25
 800670c:	2301      	movs	r3, #1
 800670e:	216a      	movs	r1, #106	; 0x6a
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f7ff fe59 	bl	80063c8 <a_mpu6050_iic_read>
 8006716:	4603      	mov	r3, r0
 8006718:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 800671a:	7f7b      	ldrb	r3, [r7, #29]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d006      	beq.n	800672e <mpu6050_read+0x7e>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                                  /* read user ctrl failed */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	485c      	ldr	r0, [pc, #368]	; (8006898 <mpu6050_read+0x1e8>)
 8006726:	4798      	blx	r3

        return 1;                                                                                  /* return error */
 8006728:	2301      	movs	r3, #1
 800672a:	f000 be4a 	b.w	80073c2 <mpu6050_read+0xd12>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);         /* read accel config */
 800672e:	f107 0218 	add.w	r2, r7, #24
 8006732:	2301      	movs	r3, #1
 8006734:	211c      	movs	r1, #28
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f7ff fe46 	bl	80063c8 <a_mpu6050_iic_read>
 800673c:	4603      	mov	r3, r0
 800673e:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8006740:	7f7b      	ldrb	r3, [r7, #29]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d006      	beq.n	8006754 <mpu6050_read+0xa4>
    {
        handle->debug_print("mpu6050: read accel config failed.\n");                               /* read accel config failed */
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	4854      	ldr	r0, [pc, #336]	; (800689c <mpu6050_read+0x1ec>)
 800674c:	4798      	blx	r3

        return 1;                                                                                  /* return error */
 800674e:	2301      	movs	r3, #1
 8006750:	f000 be37 	b.w	80073c2 <mpu6050_read+0xd12>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);           /* read gyro config */
 8006754:	f107 0217 	add.w	r2, r7, #23
 8006758:	2301      	movs	r3, #1
 800675a:	211b      	movs	r1, #27
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff fe33 	bl	80063c8 <a_mpu6050_iic_read>
 8006762:	4603      	mov	r3, r0
 8006764:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8006766:	7f7b      	ldrb	r3, [r7, #29]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d006      	beq.n	800677a <mpu6050_read+0xca>
    {
        handle->debug_print("mpu6050: read gyro config failed.\n");                                /* read gyro config failed */
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	484b      	ldr	r0, [pc, #300]	; (80068a0 <mpu6050_read+0x1f0>)
 8006772:	4798      	blx	r3

        return 1;                                                                                  /* return error */
 8006774:	2301      	movs	r3, #1
 8006776:	f000 be24 	b.w	80073c2 <mpu6050_read+0xd12>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 800677a:	7e3b      	ldrb	r3, [r7, #24]
 800677c:	08db      	lsrs	r3, r3, #3
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	b2db      	uxtb	r3, r3
 8006786:	763b      	strb	r3, [r7, #24]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	08db      	lsrs	r3, r3, #3
 800678c:	b2db      	uxtb	r3, r3
 800678e:	f003 0303 	and.w	r3, r3, #3
 8006792:	b2db      	uxtb	r3, r3
 8006794:	75fb      	strb	r3, [r7, #23]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 8006796:	7e7b      	ldrb	r3, [r7, #25]
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 8430 	beq.w	8007002 <mpu6050_read+0x952>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;

        res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&conf, 1);                /* read fifo enable */
 80067a2:	f107 0216 	add.w	r2, r7, #22
 80067a6:	2301      	movs	r3, #1
 80067a8:	2123      	movs	r1, #35	; 0x23
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f7ff fe0c 	bl	80063c8 <a_mpu6050_iic_read>
 80067b0:	4603      	mov	r3, r0
 80067b2:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80067b4:	7f7b      	ldrb	r3, [r7, #29]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d006      	beq.n	80067c8 <mpu6050_read+0x118>
        {
            handle->debug_print("mpu6050: read fifo enable failed.\n");                            /* read fifo enable failed */
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	4839      	ldr	r0, [pc, #228]	; (80068a4 <mpu6050_read+0x1f4>)
 80067c0:	4798      	blx	r3

            return 1;                                                                              /* return error */
 80067c2:	2301      	movs	r3, #1
 80067c4:	f000 bdfd 	b.w	80073c2 <mpu6050_read+0xd12>
        }
        if (conf != 0x78)                                                                          /* check the conf */
 80067c8:	7dbb      	ldrb	r3, [r7, #22]
 80067ca:	2b78      	cmp	r3, #120	; 0x78
 80067cc:	d006      	beq.n	80067dc <mpu6050_read+0x12c>
        {
            handle->debug_print("mpu6050: fifo conf is error.\n");                                 /* fifo conf is error */
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	4835      	ldr	r0, [pc, #212]	; (80068a8 <mpu6050_read+0x1f8>)
 80067d4:	4798      	blx	r3

            return 6;                                                                              /* return error */
 80067d6:	2306      	movs	r3, #6
 80067d8:	f000 bdf3 	b.w	80073c2 <mpu6050_read+0xd12>
        }

        res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_COUNTH, (uint8_t *)buf, 2);              /* read fifo count */
 80067dc:	f107 0214 	add.w	r2, r7, #20
 80067e0:	2302      	movs	r3, #2
 80067e2:	2172      	movs	r1, #114	; 0x72
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7ff fdef 	bl	80063c8 <a_mpu6050_iic_read>
 80067ea:	4603      	mov	r3, r0
 80067ec:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80067ee:	7f7b      	ldrb	r3, [r7, #29]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d006      	beq.n	8006802 <mpu6050_read+0x152>
        {
            handle->debug_print("mpu6050: read fifo count failed.\n");                             /* read fifo count failed */
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	482c      	ldr	r0, [pc, #176]	; (80068ac <mpu6050_read+0x1fc>)
 80067fa:	4798      	blx	r3

            return 1;                                                                              /* return error */
 80067fc:	2301      	movs	r3, #1
 80067fe:	f000 bde0 	b.w	80073c2 <mpu6050_read+0xd12>
        }
        count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                      /* set count */
 8006802:	7d3b      	ldrb	r3, [r7, #20]
 8006804:	021b      	lsls	r3, r3, #8
 8006806:	b21a      	sxth	r2, r3
 8006808:	7d7b      	ldrb	r3, [r7, #21]
 800680a:	b21b      	sxth	r3, r3
 800680c:	4313      	orrs	r3, r2
 800680e:	b21b      	sxth	r3, r3
 8006810:	837b      	strh	r3, [r7, #26]
        count = (count < 1024) ? count : 1024;                                                     /* just the counter */
 8006812:	8b7b      	ldrh	r3, [r7, #26]
 8006814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006818:	bf28      	it	cs
 800681a:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800681e:	837b      	strh	r3, [r7, #26]
        count = (count < ((*len) * 12)) ? count : ((*len) * 12);                                   /* just outer buffer size */
 8006820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	4613      	mov	r3, r2
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	461a      	mov	r2, r3
 8006830:	8b7b      	ldrh	r3, [r7, #26]
 8006832:	4293      	cmp	r3, r2
 8006834:	bfa8      	it	ge
 8006836:	4613      	movge	r3, r2
 8006838:	837b      	strh	r3, [r7, #26]
        count = (count / 12) * 12;                                                                 /* 12 times */
 800683a:	8b7b      	ldrh	r3, [r7, #26]
 800683c:	4a1c      	ldr	r2, [pc, #112]	; (80068b0 <mpu6050_read+0x200>)
 800683e:	fba2 2303 	umull	r2, r3, r2, r3
 8006842:	08db      	lsrs	r3, r3, #3
 8006844:	b29b      	uxth	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	0052      	lsls	r2, r2, #1
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	837b      	strh	r3, [r7, #26]
        *len = count / 12;                                                                         /* set the output length */
 8006850:	8b7b      	ldrh	r3, [r7, #26]
 8006852:	4a17      	ldr	r2, [pc, #92]	; (80068b0 <mpu6050_read+0x200>)
 8006854:	fba2 2303 	umull	r2, r3, r2, r3
 8006858:	08db      	lsrs	r3, r3, #3
 800685a:	b29a      	uxth	r2, r3
 800685c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685e:	801a      	strh	r2, [r3, #0]
        res = a_mpu6050_iic_read(handle, MPU6050_REG_R_W, handle->buf, count);                     /* read data */
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8006866:	8b7b      	ldrh	r3, [r7, #26]
 8006868:	2174      	movs	r1, #116	; 0x74
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f7ff fdac 	bl	80063c8 <a_mpu6050_iic_read>
 8006870:	4603      	mov	r3, r0
 8006872:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006874:	7f7b      	ldrb	r3, [r7, #29]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d006      	beq.n	8006888 <mpu6050_read+0x1d8>
        {
            handle->debug_print("mpu6050: read failed.\n");                                        /* read failed */
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	480d      	ldr	r0, [pc, #52]	; (80068b4 <mpu6050_read+0x204>)
 8006880:	4798      	blx	r3

            return 1;                                                                              /* return error */
 8006882:	2301      	movs	r3, #1
 8006884:	f000 bd9d 	b.w	80073c2 <mpu6050_read+0xd12>
        }
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 8006888:	2300      	movs	r3, #0
 800688a:	83fb      	strh	r3, [r7, #30]
 800688c:	e3b1      	b.n	8006ff2 <mpu6050_read+0x942>
 800688e:	bf00      	nop
 8006890:	08010a70 	.word	0x08010a70
 8006894:	080105d0 	.word	0x080105d0
 8006898:	08010898 	.word	0x08010898
 800689c:	08010850 	.word	0x08010850
 80068a0:	08010874 	.word	0x08010874
 80068a4:	08010a8c 	.word	0x08010a8c
 80068a8:	08010ab0 	.word	0x08010ab0
 80068ac:	080107d4 	.word	0x080107d4
 80068b0:	aaaaaaab 	.word	0xaaaaaaab
 80068b4:	080107f8 	.word	0x080107f8
 80068b8:	46800000 	.word	0x46800000
 80068bc:	46000000 	.word	0x46000000
        {
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) |
 80068c0:	8bfa      	ldrh	r2, [r7, #30]
 80068c2:	4613      	mov	r3, r2
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	461a      	mov	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 1];                                  /* set raw accel x */
 80068d8:	8bfa      	ldrh	r2, [r7, #30]
 80068da:	4613      	mov	r3, r2
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	3301      	adds	r3, #1
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80068ec:	b219      	sxth	r1, r3
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) |
 80068ee:	8bfa      	ldrh	r2, [r7, #30]
 80068f0:	4613      	mov	r3, r2
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	4413      	add	r3, r2
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	461a      	mov	r2, r3
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	4413      	add	r3, r2
 80068fe:	ea40 0201 	orr.w	r2, r0, r1
 8006902:	b212      	sxth	r2, r2
 8006904:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) |
 8006906:	8bfa      	ldrh	r2, [r7, #30]
 8006908:	4613      	mov	r3, r2
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	3302      	adds	r3, #2
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4413      	add	r3, r2
 8006916:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800691a:	021b      	lsls	r3, r3, #8
 800691c:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 3];                                  /* set raw accel y */
 800691e:	8bfa      	ldrh	r2, [r7, #30]
 8006920:	4613      	mov	r3, r2
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	3303      	adds	r3, #3
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4413      	add	r3, r2
 800692e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006932:	b219      	sxth	r1, r3
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) |
 8006934:	8bfa      	ldrh	r2, [r7, #30]
 8006936:	4613      	mov	r3, r2
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	4413      	add	r3, r2
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	461a      	mov	r2, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4413      	add	r3, r2
 8006944:	ea40 0201 	orr.w	r2, r0, r1
 8006948:	b212      	sxth	r2, r2
 800694a:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) |
 800694c:	8bfa      	ldrh	r2, [r7, #30]
 800694e:	4613      	mov	r3, r2
 8006950:	005b      	lsls	r3, r3, #1
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	3304      	adds	r3, #4
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	4413      	add	r3, r2
 800695c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006960:	021b      	lsls	r3, r3, #8
 8006962:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 5];                                  /* set raw accel z */
 8006964:	8bfa      	ldrh	r2, [r7, #30]
 8006966:	4613      	mov	r3, r2
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	3305      	adds	r3, #5
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006978:	b219      	sxth	r1, r3
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) |
 800697a:	8bfa      	ldrh	r2, [r7, #30]
 800697c:	4613      	mov	r3, r2
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	4413      	add	r3, r2
 8006982:	005b      	lsls	r3, r3, #1
 8006984:	461a      	mov	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	4413      	add	r3, r2
 800698a:	ea40 0201 	orr.w	r2, r0, r1
 800698e:	b212      	sxth	r2, r2
 8006990:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) |
 8006992:	8bfa      	ldrh	r2, [r7, #30]
 8006994:	4613      	mov	r3, r2
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	4413      	add	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	3306      	adds	r3, #6
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80069a6:	021b      	lsls	r3, r3, #8
 80069a8:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 7];                                   /* set raw gyro x */
 80069aa:	8bfa      	ldrh	r2, [r7, #30]
 80069ac:	4613      	mov	r3, r2
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	3307      	adds	r3, #7
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80069be:	b219      	sxth	r1, r3
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) |
 80069c0:	8bfa      	ldrh	r2, [r7, #30]
 80069c2:	4613      	mov	r3, r2
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	4413      	add	r3, r2
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	461a      	mov	r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	4413      	add	r3, r2
 80069d0:	ea40 0201 	orr.w	r2, r0, r1
 80069d4:	b212      	sxth	r2, r2
 80069d6:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) |
 80069d8:	8bfa      	ldrh	r2, [r7, #30]
 80069da:	4613      	mov	r3, r2
 80069dc:	005b      	lsls	r3, r3, #1
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	3308      	adds	r3, #8
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80069ec:	021b      	lsls	r3, r3, #8
 80069ee:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 9];                                   /* set raw gyro y */
 80069f0:	8bfa      	ldrh	r2, [r7, #30]
 80069f2:	4613      	mov	r3, r2
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	3309      	adds	r3, #9
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006a04:	b219      	sxth	r1, r3
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) |
 8006a06:	8bfa      	ldrh	r2, [r7, #30]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4413      	add	r3, r2
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	461a      	mov	r2, r3
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	4413      	add	r3, r2
 8006a16:	ea40 0201 	orr.w	r2, r0, r1
 8006a1a:	b212      	sxth	r2, r2
 8006a1c:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) |
 8006a1e:	8bfa      	ldrh	r2, [r7, #30]
 8006a20:	4613      	mov	r3, r2
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	4413      	add	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	330a      	adds	r3, #10
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 11];                                  /* set raw gyro z */
 8006a36:	8bfa      	ldrh	r2, [r7, #30]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	330b      	adds	r3, #11
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4413      	add	r3, r2
 8006a46:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006a4a:	b219      	sxth	r1, r3
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) |
 8006a4c:	8bfa      	ldrh	r2, [r7, #30]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	4413      	add	r3, r2
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	461a      	mov	r2, r3
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	ea40 0201 	orr.w	r2, r0, r1
 8006a60:	b212      	sxth	r2, r2
 8006a62:	809a      	strh	r2, [r3, #4]

            if (accel_conf == 0)                                                                   /* ±2g */
 8006a64:	7e3b      	ldrb	r3, [r7, #24]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d154      	bne.n	8006b14 <mpu6050_read+0x464>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                               /* set accel x */
 8006a6a:	8bfa      	ldrh	r2, [r7, #30]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	005b      	lsls	r3, r3, #1
 8006a70:	4413      	add	r3, r2
 8006a72:	005b      	lsls	r3, r3, #1
 8006a74:	461a      	mov	r2, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a86:	8bfa      	ldrh	r2, [r7, #30]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	461a      	mov	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4413      	add	r3, r2
 8006a96:	ed5f 6a78 	vldr	s13, [pc, #-480]	; 80068b8 <mpu6050_read+0x208>
 8006a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a9e:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                               /* set accel y */
 8006aa2:	8bfa      	ldrh	r2, [r7, #30]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	005b      	lsls	r3, r3, #1
 8006aa8:	4413      	add	r3, r2
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	461a      	mov	r2, r3
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006abe:	8bfa      	ldrh	r2, [r7, #30]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	4413      	add	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	461a      	mov	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4413      	add	r3, r2
 8006ace:	ed5f 6a86 	vldr	s13, [pc, #-536]	; 80068b8 <mpu6050_read+0x208>
 8006ad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ad6:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                               /* set accel z */
 8006ada:	8bfa      	ldrh	r2, [r7, #30]
 8006adc:	4613      	mov	r3, r2
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	4413      	add	r3, r2
 8006ae2:	005b      	lsls	r3, r3, #1
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006af6:	8bfa      	ldrh	r2, [r7, #30]
 8006af8:	4613      	mov	r3, r2
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	4413      	add	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	461a      	mov	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4413      	add	r3, r2
 8006b06:	ed5f 6a94 	vldr	s13, [pc, #-592]	; 80068b8 <mpu6050_read+0x208>
 8006b0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b0e:	edc3 7a02 	vstr	s15, [r3, #8]
 8006b12:	e103      	b.n	8006d1c <mpu6050_read+0x66c>
            }
            else if (accel_conf == 1)                                                              /* ±4g */
 8006b14:	7e3b      	ldrb	r3, [r7, #24]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d154      	bne.n	8006bc4 <mpu6050_read+0x514>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                                /* set accel x */
 8006b1a:	8bfa      	ldrh	r2, [r7, #30]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	4413      	add	r3, r2
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	461a      	mov	r2, r3
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b36:	8bfa      	ldrh	r2, [r7, #30]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	005b      	lsls	r3, r3, #1
 8006b3c:	4413      	add	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	461a      	mov	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4413      	add	r3, r2
 8006b46:	ed5f 6aa3 	vldr	s13, [pc, #-652]	; 80068bc <mpu6050_read+0x20c>
 8006b4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b4e:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                                /* set accel y */
 8006b52:	8bfa      	ldrh	r2, [r7, #30]
 8006b54:	4613      	mov	r3, r2
 8006b56:	005b      	lsls	r3, r3, #1
 8006b58:	4413      	add	r3, r2
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	4413      	add	r3, r2
 8006b62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b6e:	8bfa      	ldrh	r2, [r7, #30]
 8006b70:	4613      	mov	r3, r2
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	461a      	mov	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	ed5f 6ab1 	vldr	s13, [pc, #-708]	; 80068bc <mpu6050_read+0x20c>
 8006b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b86:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                                /* set accel z */
 8006b8a:	8bfa      	ldrh	r2, [r7, #30]
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	005b      	lsls	r3, r3, #1
 8006b90:	4413      	add	r3, r2
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	461a      	mov	r2, r3
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ba6:	8bfa      	ldrh	r2, [r7, #30]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	ed5f 6abf 	vldr	s13, [pc, #-764]	; 80068bc <mpu6050_read+0x20c>
 8006bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bbe:	edc3 7a02 	vstr	s15, [r3, #8]
 8006bc2:	e0ab      	b.n	8006d1c <mpu6050_read+0x66c>
            }
            else if (accel_conf == 2)                                                              /* ±8g */
 8006bc4:	7e3b      	ldrb	r3, [r7, #24]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d154      	bne.n	8006c74 <mpu6050_read+0x5c4>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                                /* set accel x */
 8006bca:	8bfa      	ldrh	r2, [r7, #30]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	4413      	add	r3, r2
 8006bd2:	005b      	lsls	r3, r3, #1
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006bde:	ee07 3a90 	vmov	s15, r3
 8006be2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006be6:	8bfa      	ldrh	r2, [r7, #30]
 8006be8:	4613      	mov	r3, r2
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	eddf 6acd 	vldr	s13, [pc, #820]	; 8006f2c <mpu6050_read+0x87c>
 8006bfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bfe:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                                /* set accel y */
 8006c02:	8bfa      	ldrh	r2, [r7, #30]
 8006c04:	4613      	mov	r3, r2
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	4413      	add	r3, r2
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	4413      	add	r3, r2
 8006c12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c1e:	8bfa      	ldrh	r2, [r7, #30]
 8006c20:	4613      	mov	r3, r2
 8006c22:	005b      	lsls	r3, r3, #1
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	461a      	mov	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	eddf 6abf 	vldr	s13, [pc, #764]	; 8006f2c <mpu6050_read+0x87c>
 8006c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c36:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                                /* set accel z */
 8006c3a:	8bfa      	ldrh	r2, [r7, #30]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	4413      	add	r3, r2
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	461a      	mov	r2, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c56:	8bfa      	ldrh	r2, [r7, #30]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	005b      	lsls	r3, r3, #1
 8006c5c:	4413      	add	r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	461a      	mov	r2, r3
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4413      	add	r3, r2
 8006c66:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8006f2c <mpu6050_read+0x87c>
 8006c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c6e:	edc3 7a02 	vstr	s15, [r3, #8]
 8006c72:	e053      	b.n	8006d1c <mpu6050_read+0x66c>
            }
            else                                                                                   /* ±16g */
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                                /* set accel x */
 8006c74:	8bfa      	ldrh	r2, [r7, #30]
 8006c76:	4613      	mov	r3, r2
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	4413      	add	r3, r2
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4413      	add	r3, r2
 8006c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c88:	ee07 3a90 	vmov	s15, r3
 8006c8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c90:	8bfa      	ldrh	r2, [r7, #30]
 8006c92:	4613      	mov	r3, r2
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8006f30 <mpu6050_read+0x880>
 8006ca4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ca8:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                                /* set accel y */
 8006cac:	8bfa      	ldrh	r2, [r7, #30]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	4413      	add	r3, r2
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cc8:	8bfa      	ldrh	r2, [r7, #30]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	eddf 6a95 	vldr	s13, [pc, #596]	; 8006f30 <mpu6050_read+0x880>
 8006cdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ce0:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                                /* set accel z */
 8006ce4:	8bfa      	ldrh	r2, [r7, #30]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	005b      	lsls	r3, r3, #1
 8006cea:	4413      	add	r3, r2
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	461a      	mov	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006cf8:	ee07 3a90 	vmov	s15, r3
 8006cfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d00:	8bfa      	ldrh	r2, [r7, #30]
 8006d02:	4613      	mov	r3, r2
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4413      	add	r3, r2
 8006d10:	eddf 6a87 	vldr	s13, [pc, #540]	; 8006f30 <mpu6050_read+0x880>
 8006d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d18:	edc3 7a02 	vstr	s15, [r3, #8]
            }

            if (gyro_conf == 0)                                                                    /* ±250dps */
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d154      	bne.n	8006dcc <mpu6050_read+0x71c>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                                 /* set gyro x */
 8006d22:	8bfa      	ldrh	r2, [r7, #30]
 8006d24:	4613      	mov	r3, r2
 8006d26:	005b      	lsls	r3, r3, #1
 8006d28:	4413      	add	r3, r2
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	4413      	add	r3, r2
 8006d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d3e:	8bfa      	ldrh	r2, [r7, #30]
 8006d40:	4613      	mov	r3, r2
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	4413      	add	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	4413      	add	r3, r2
 8006d4e:	eddf 6a79 	vldr	s13, [pc, #484]	; 8006f34 <mpu6050_read+0x884>
 8006d52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d56:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                                 /* set gyro y */
 8006d5a:	8bfa      	ldrh	r2, [r7, #30]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	4413      	add	r3, r2
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	461a      	mov	r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d76:	8bfa      	ldrh	r2, [r7, #30]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	461a      	mov	r2, r3
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	4413      	add	r3, r2
 8006d86:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8006f34 <mpu6050_read+0x884>
 8006d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d8e:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                                 /* set gyro z */
 8006d92:	8bfa      	ldrh	r2, [r7, #30]
 8006d94:	4613      	mov	r3, r2
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	4413      	add	r3, r2
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	4413      	add	r3, r2
 8006da2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006da6:	ee07 3a90 	vmov	s15, r3
 8006daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dae:	8bfa      	ldrh	r2, [r7, #30]
 8006db0:	4613      	mov	r3, r2
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	461a      	mov	r2, r3
 8006dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dbc:	4413      	add	r3, r2
 8006dbe:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8006f34 <mpu6050_read+0x884>
 8006dc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006dc6:	edc3 7a02 	vstr	s15, [r3, #8]
 8006dca:	e10f      	b.n	8006fec <mpu6050_read+0x93c>
            }
            else if (gyro_conf == 1)                                                               /* ±500dps */
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d154      	bne.n	8006e7c <mpu6050_read+0x7cc>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                                  /* set gyro x */
 8006dd2:	8bfa      	ldrh	r2, [r7, #30]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	4413      	add	r3, r2
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	461a      	mov	r2, r3
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	4413      	add	r3, r2
 8006de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dee:	8bfa      	ldrh	r2, [r7, #30]
 8006df0:	4613      	mov	r3, r2
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfc:	4413      	add	r3, r2
 8006dfe:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006f38 <mpu6050_read+0x888>
 8006e02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e06:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                                  /* set gyro y */
 8006e0a:	8bfa      	ldrh	r2, [r7, #30]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	4413      	add	r3, r2
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	461a      	mov	r2, r3
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e26:	8bfa      	ldrh	r2, [r7, #30]
 8006e28:	4613      	mov	r3, r2
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	461a      	mov	r2, r3
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	4413      	add	r3, r2
 8006e36:	eddf 6a40 	vldr	s13, [pc, #256]	; 8006f38 <mpu6050_read+0x888>
 8006e3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e3e:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                                  /* set gyro z */
 8006e42:	8bfa      	ldrh	r2, [r7, #30]
 8006e44:	4613      	mov	r3, r2
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	4413      	add	r3, r2
 8006e4a:	005b      	lsls	r3, r3, #1
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	4413      	add	r3, r2
 8006e52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e5e:	8bfa      	ldrh	r2, [r7, #30]
 8006e60:	4613      	mov	r3, r2
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	4413      	add	r3, r2
 8006e6e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8006f38 <mpu6050_read+0x888>
 8006e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e76:	edc3 7a02 	vstr	s15, [r3, #8]
 8006e7a:	e0b7      	b.n	8006fec <mpu6050_read+0x93c>
            }
            else if (gyro_conf == 2)                                                               /* ±1000dps */
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d160      	bne.n	8006f44 <mpu6050_read+0x894>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                                  /* set gyro x */
 8006e82:	8bfa      	ldrh	r2, [r7, #30]
 8006e84:	4613      	mov	r3, r2
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	4413      	add	r3, r2
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	4413      	add	r3, r2
 8006e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e9e:	8bfa      	ldrh	r2, [r7, #30]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eac:	4413      	add	r3, r2
 8006eae:	eddf 6a23 	vldr	s13, [pc, #140]	; 8006f3c <mpu6050_read+0x88c>
 8006eb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006eb6:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                                  /* set gyro y */
 8006eba:	8bfa      	ldrh	r2, [r7, #30]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	4413      	add	r3, r2
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ece:	ee07 3a90 	vmov	s15, r3
 8006ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ed6:	8bfa      	ldrh	r2, [r7, #30]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	4413      	add	r3, r2
 8006ee6:	eddf 6a15 	vldr	s13, [pc, #84]	; 8006f3c <mpu6050_read+0x88c>
 8006eea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006eee:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                                  /* set gyro z */
 8006ef2:	8bfa      	ldrh	r2, [r7, #30]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	4413      	add	r3, r2
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	461a      	mov	r2, r3
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	4413      	add	r3, r2
 8006f02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006f06:	ee07 3a90 	vmov	s15, r3
 8006f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f0e:	8bfa      	ldrh	r2, [r7, #30]
 8006f10:	4613      	mov	r3, r2
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1c:	4413      	add	r3, r2
 8006f1e:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006f3c <mpu6050_read+0x88c>
 8006f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f26:	edc3 7a02 	vstr	s15, [r3, #8]
 8006f2a:	e05f      	b.n	8006fec <mpu6050_read+0x93c>
 8006f2c:	45800000 	.word	0x45800000
 8006f30:	45000000 	.word	0x45000000
 8006f34:	43030000 	.word	0x43030000
 8006f38:	42830000 	.word	0x42830000
 8006f3c:	42033333 	.word	0x42033333
 8006f40:	41833333 	.word	0x41833333
            }
            else                                                                                   /* ±2000dps */
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                                  /* set gyro x */
 8006f44:	8bfa      	ldrh	r2, [r7, #30]
 8006f46:	4613      	mov	r3, r2
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	4413      	add	r3, r2
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	461a      	mov	r2, r3
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	4413      	add	r3, r2
 8006f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f58:	ee07 3a90 	vmov	s15, r3
 8006f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f60:	8bfa      	ldrh	r2, [r7, #30]
 8006f62:	4613      	mov	r3, r2
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4413      	add	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6e:	4413      	add	r3, r2
 8006f70:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8006f40 <mpu6050_read+0x890>
 8006f74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006f78:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                                  /* set gyro y */
 8006f7c:	8bfa      	ldrh	r2, [r7, #30]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	4413      	add	r3, r2
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	461a      	mov	r2, r3
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006f90:	ee07 3a90 	vmov	s15, r3
 8006f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f98:	8bfa      	ldrh	r2, [r7, #30]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	005b      	lsls	r3, r3, #1
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	4413      	add	r3, r2
 8006fa8:	ed5f 6a1b 	vldr	s13, [pc, #-108]	; 8006f40 <mpu6050_read+0x890>
 8006fac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006fb0:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                                  /* set gyro z */
 8006fb4:	8bfa      	ldrh	r2, [r7, #30]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	4413      	add	r3, r2
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006fc8:	ee07 3a90 	vmov	s15, r3
 8006fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fd0:	8bfa      	ldrh	r2, [r7, #30]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	4413      	add	r3, r2
 8006fe0:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 8006f40 <mpu6050_read+0x890>
 8006fe4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006fe8:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 8006fec:	8bfb      	ldrh	r3, [r7, #30]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	83fb      	strh	r3, [r7, #30]
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	8bfa      	ldrh	r2, [r7, #30]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	f4ff ac61 	bcc.w	80068c0 <mpu6050_read+0x210>
            }
        }

        return 0;                                                                                  /* success return 0 */
 8006ffe:	2300      	movs	r3, #0
 8007000:	e1df      	b.n	80073c2 <mpu6050_read+0xd12>
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 8007002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007004:	2201      	movs	r2, #1
 8007006:	801a      	strh	r2, [r3, #0]
        res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_XOUT_H, handle->buf, 14);               /* read data */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800700e:	230e      	movs	r3, #14
 8007010:	213b      	movs	r1, #59	; 0x3b
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f7ff f9d8 	bl	80063c8 <a_mpu6050_iic_read>
 8007018:	4603      	mov	r3, r0
 800701a:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 800701c:	7f7b      	ldrb	r3, [r7, #29]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <mpu6050_read+0x97e>
        {
            handle->debug_print("mpu6050: read failed.\n");                                        /* read failed */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	48b1      	ldr	r0, [pc, #708]	; (80072ec <mpu6050_read+0xc3c>)
 8007028:	4798      	blx	r3

            return 1;                                                                              /* return error */
 800702a:	2301      	movs	r3, #1
 800702c:	e1c9      	b.n	80073c2 <mpu6050_read+0xd12>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	b21a      	sxth	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800703e:	b21b      	sxth	r3, r3
 8007040:	4313      	orrs	r3, r2
 8007042:	b21a      	sxth	r2, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800704e:	021b      	lsls	r3, r3, #8
 8007050:	b21a      	sxth	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007058:	b21b      	sxth	r3, r3
 800705a:	4313      	orrs	r3, r2
 800705c:	b21a      	sxth	r2, r3
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007068:	021b      	lsls	r3, r3, #8
 800706a:	b21a      	sxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007072:	b21b      	sxth	r3, r3
 8007074:	4313      	orrs	r3, r2
 8007076:	b21a      	sxth	r2, r3
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007082:	021b      	lsls	r3, r3, #8
 8007084:	b21a      	sxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800708c:	b21b      	sxth	r3, r3
 800708e:	4313      	orrs	r3, r2
 8007090:	b21a      	sxth	r2, r3
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	b21a      	sxth	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80070a6:	b21b      	sxth	r3, r3
 80070a8:	4313      	orrs	r3, r2
 80070aa:	b21a      	sxth	r2, r3
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	b21a      	sxth	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80070c0:	b21b      	sxth	r3, r3
 80070c2:	4313      	orrs	r3, r2
 80070c4:	b21a      	sxth	r2, r3
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	809a      	strh	r2, [r3, #4]

        if (accel_conf == 0)                                                                       /* ±2g */
 80070ca:	7e3b      	ldrb	r3, [r7, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d12a      	bne.n	8007126 <mpu6050_read+0xa76>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070de:	eddf 6a84 	vldr	s13, [pc, #528]	; 80072f0 <mpu6050_read+0xc40>
 80070e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070fa:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80072f0 <mpu6050_read+0xc40>
 80070fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007116:	eddf 6a76 	vldr	s13, [pc, #472]	; 80072f0 <mpu6050_read+0xc40>
 800711a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	edc3 7a02 	vstr	s15, [r3, #8]
 8007124:	e085      	b.n	8007232 <mpu6050_read+0xb82>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 8007126:	7e3b      	ldrb	r3, [r7, #24]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d12a      	bne.n	8007182 <mpu6050_read+0xad2>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007132:	ee07 3a90 	vmov	s15, r3
 8007136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800713a:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80072f4 <mpu6050_read+0xc44>
 800713e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007156:	eddf 6a67 	vldr	s13, [pc, #412]	; 80072f4 <mpu6050_read+0xc44>
 800715a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007172:	eddf 6a60 	vldr	s13, [pc, #384]	; 80072f4 <mpu6050_read+0xc44>
 8007176:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	edc3 7a02 	vstr	s15, [r3, #8]
 8007180:	e057      	b.n	8007232 <mpu6050_read+0xb82>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 8007182:	7e3b      	ldrb	r3, [r7, #24]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d12a      	bne.n	80071de <mpu6050_read+0xb2e>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007196:	eddf 6a58 	vldr	s13, [pc, #352]	; 80072f8 <mpu6050_read+0xc48>
 800719a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80071aa:	ee07 3a90 	vmov	s15, r3
 80071ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071b2:	eddf 6a51 	vldr	s13, [pc, #324]	; 80072f8 <mpu6050_read+0xc48>
 80071b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071ce:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80072f8 <mpu6050_read+0xc48>
 80071d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	edc3 7a02 	vstr	s15, [r3, #8]
 80071dc:	e029      	b.n	8007232 <mpu6050_read+0xb82>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071e4:	ee07 3a90 	vmov	s15, r3
 80071e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071ec:	eddf 6a43 	vldr	s13, [pc, #268]	; 80072fc <mpu6050_read+0xc4c>
 80071f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007200:	ee07 3a90 	vmov	s15, r3
 8007204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007208:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80072fc <mpu6050_read+0xc4c>
 800720c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800721c:	ee07 3a90 	vmov	s15, r3
 8007220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007224:	eddf 6a35 	vldr	s13, [pc, #212]	; 80072fc <mpu6050_read+0xc4c>
 8007228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        if (gyro_conf == 0)                                                                        /* ±250dps */
 8007232:	7dfb      	ldrb	r3, [r7, #23]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d12a      	bne.n	800728e <mpu6050_read+0xbde>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007246:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8007300 <mpu6050_read+0xc50>
 800724a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800724e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007250:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007262:	eddf 6a27 	vldr	s13, [pc, #156]	; 8007300 <mpu6050_read+0xc50>
 8007266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800726a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726c:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800727e:	eddf 6a20 	vldr	s13, [pc, #128]	; 8007300 <mpu6050_read+0xc50>
 8007282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007288:	edc3 7a02 	vstr	s15, [r3, #8]
 800728c:	e098      	b.n	80073c0 <mpu6050_read+0xd10>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d13d      	bne.n	8007310 <mpu6050_read+0xc60>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	f9b3 3000 	ldrsh.w	r3, [r3]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072a2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8007304 <mpu6050_read+0xc54>
 80072a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ac:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80072b6:	ee07 3a90 	vmov	s15, r3
 80072ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072be:	eddf 6a11 	vldr	s13, [pc, #68]	; 8007304 <mpu6050_read+0xc54>
 80072c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c8:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80072d2:	ee07 3a90 	vmov	s15, r3
 80072d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80072da:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8007304 <mpu6050_read+0xc54>
 80072de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e4:	edc3 7a02 	vstr	s15, [r3, #8]
 80072e8:	e06a      	b.n	80073c0 <mpu6050_read+0xd10>
 80072ea:	bf00      	nop
 80072ec:	080107f8 	.word	0x080107f8
 80072f0:	46800000 	.word	0x46800000
 80072f4:	46000000 	.word	0x46000000
 80072f8:	45800000 	.word	0x45800000
 80072fc:	45000000 	.word	0x45000000
 8007300:	43030000 	.word	0x43030000
 8007304:	42830000 	.word	0x42830000
 8007308:	42033333 	.word	0x42033333
 800730c:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	2b02      	cmp	r3, #2
 8007314:	d12a      	bne.n	800736c <mpu6050_read+0xcbc>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800731c:	ee07 3a90 	vmov	s15, r3
 8007320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007324:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 8007308 <mpu6050_read+0xc58>
 8007328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800732c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732e:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007338:	ee07 3a90 	vmov	s15, r3
 800733c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007340:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8007308 <mpu6050_read+0xc58>
 8007344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007354:	ee07 3a90 	vmov	s15, r3
 8007358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800735c:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 8007308 <mpu6050_read+0xc58>
 8007360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007366:	edc3 7a02 	vstr	s15, [r3, #8]
 800736a:	e029      	b.n	80073c0 <mpu6050_read+0xd10>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007372:	ee07 3a90 	vmov	s15, r3
 8007376:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800737a:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 800730c <mpu6050_read+0xc5c>
 800737e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007396:	ed5f 6a23 	vldr	s13, [pc, #-140]	; 800730c <mpu6050_read+0xc5c>
 800739a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073b2:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 800730c <mpu6050_read+0xc5c>
 80073b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073bc:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        return 0;                                                                                  /* success return 0 */
 80073c0:	2300      	movs	r3, #0
    }
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop

080073cc <mpu6050_read_temperature>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6050_read_temperature(mpu6050_handle_t *handle, int16_t (*raw), float *degrees)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
    uint8_t res;
    uint8_t buf[2];

    if (handle == NULL)                                                      /* check handle */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <mpu6050_read_temperature+0x16>
    {
        return 2;                                                            /* return error */
 80073de:	2302      	movs	r3, #2
 80073e0:	e034      	b.n	800744c <mpu6050_read_temperature+0x80>
    }
    if (handle->inited != 1)                                                 /* check handle initialization */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d001      	beq.n	80073f0 <mpu6050_read_temperature+0x24>
    {
        return 3;                                                            /* return error */
 80073ec:	2303      	movs	r3, #3
 80073ee:	e02d      	b.n	800744c <mpu6050_read_temperature+0x80>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_TEMP_OUT_H, buf, 2);        /* read data */
 80073f0:	f107 0214 	add.w	r2, r7, #20
 80073f4:	2302      	movs	r3, #2
 80073f6:	2141      	movs	r1, #65	; 0x41
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f7fe ffe5 	bl	80063c8 <a_mpu6050_iic_read>
 80073fe:	4603      	mov	r3, r0
 8007400:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                            /* check result */
 8007402:	7dfb      	ldrb	r3, [r7, #23]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d005      	beq.n	8007414 <mpu6050_read_temperature+0x48>
    {
        handle->debug_print("mpu6050: read failed.\n");                      /* read failed */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	4811      	ldr	r0, [pc, #68]	; (8007454 <mpu6050_read_temperature+0x88>)
 800740e:	4798      	blx	r3

        return 1;                                                            /* return error */
 8007410:	2301      	movs	r3, #1
 8007412:	e01b      	b.n	800744c <mpu6050_read_temperature+0x80>
    }
    *raw = (int16_t)((uint16_t)buf[0] << 8) | buf[1];                        /* get the raw */
 8007414:	7d3b      	ldrb	r3, [r7, #20]
 8007416:	021b      	lsls	r3, r3, #8
 8007418:	b21a      	sxth	r2, r3
 800741a:	7d7b      	ldrb	r3, [r7, #21]
 800741c:	b21b      	sxth	r3, r3
 800741e:	4313      	orrs	r3, r2
 8007420:	b21a      	sxth	r2, r3
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	801a      	strh	r2, [r3, #0]
    *degrees = (float)(*raw) / 340.0f + 36.53f;                              /* convert the degrees */
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800742c:	ee07 3a90 	vmov	s15, r3
 8007430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007434:	eddf 6a08 	vldr	s13, [pc, #32]	; 8007458 <mpu6050_read_temperature+0x8c>
 8007438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800743c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800745c <mpu6050_read_temperature+0x90>
 8007440:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	edc3 7a00 	vstr	s15, [r3]

    return 0;                                                                /* success return 0 */
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	080107f8 	.word	0x080107f8
 8007458:	43aa0000 	.word	0x43aa0000
 800745c:	42121eb8 	.word	0x42121eb8

08007460 <mpu6050_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fifo(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                   /* check handle */
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <mpu6050_set_fifo+0x16>
    {
        return 2;                                                                         /* return error */
 8007472:	2302      	movs	r3, #2
 8007474:	e039      	b.n	80074ea <mpu6050_set_fifo+0x8a>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800747c:	2b01      	cmp	r3, #1
 800747e:	d001      	beq.n	8007484 <mpu6050_set_fifo+0x24>
    {
        return 3;                                                                         /* return error */
 8007480:	2303      	movs	r3, #3
 8007482:	e032      	b.n	80074ea <mpu6050_set_fifo+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8007484:	f107 020e 	add.w	r2, r7, #14
 8007488:	2301      	movs	r3, #1
 800748a:	216a      	movs	r1, #106	; 0x6a
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7fe ff9b 	bl	80063c8 <a_mpu6050_iic_read>
 8007492:	4603      	mov	r3, r0
 8007494:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <mpu6050_set_fifo+0x48>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                         /* read user ctrl failed */
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	4814      	ldr	r0, [pc, #80]	; (80074f4 <mpu6050_set_fifo+0x94>)
 80074a2:	4798      	blx	r3

        return 1;                                                                         /* return error */
 80074a4:	2301      	movs	r3, #1
 80074a6:	e020      	b.n	80074ea <mpu6050_set_fifo+0x8a>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                  /* set config */
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	019b      	lsls	r3, r3, #6
 80074b6:	b25a      	sxtb	r2, r3
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	b25b      	sxtb	r3, r3
 80074bc:	4313      	orrs	r3, r2
 80074be:	b25b      	sxtb	r3, r3
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80074c4:	f107 020e 	add.w	r2, r7, #14
 80074c8:	2301      	movs	r3, #1
 80074ca:	216a      	movs	r1, #106	; 0x6a
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fe ff97 	bl	8006400 <a_mpu6050_iic_write>
 80074d2:	4603      	mov	r3, r0
 80074d4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <mpu6050_set_fifo+0x88>
    {
        handle->debug_print("mpu6050: write user ctrl failed.\n");                        /* write user ctrl failed */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	4805      	ldr	r0, [pc, #20]	; (80074f8 <mpu6050_set_fifo+0x98>)
 80074e2:	4798      	blx	r3

        return 1;                                                                         /* return error */
 80074e4:	2301      	movs	r3, #1
 80074e6:	e000      	b.n	80074ea <mpu6050_set_fifo+0x8a>
    }

    return 0;                                                                             /* success return 0 */
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	08010898 	.word	0x08010898
 80074f8:	080108bc 	.word	0x080108bc

080074fc <mpu6050_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_iic_master(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	460b      	mov	r3, r1
 8007506:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d101      	bne.n	8007512 <mpu6050_set_iic_master+0x16>
    {
        return 2;                                                                        /* return error */
 800750e:	2302      	movs	r3, #2
 8007510:	e039      	b.n	8007586 <mpu6050_set_iic_master+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007518:	2b01      	cmp	r3, #1
 800751a:	d001      	beq.n	8007520 <mpu6050_set_iic_master+0x24>
    {
        return 3;                                                                        /* return error */
 800751c:	2303      	movs	r3, #3
 800751e:	e032      	b.n	8007586 <mpu6050_set_iic_master+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8007520:	f107 020e 	add.w	r2, r7, #14
 8007524:	2301      	movs	r3, #1
 8007526:	216a      	movs	r1, #106	; 0x6a
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7fe ff4d 	bl	80063c8 <a_mpu6050_iic_read>
 800752e:	4603      	mov	r3, r0
 8007530:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d005      	beq.n	8007544 <mpu6050_set_iic_master+0x48>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                        /* read user ctrl failed */
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	4814      	ldr	r0, [pc, #80]	; (8007590 <mpu6050_set_iic_master+0x94>)
 800753e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007540:	2301      	movs	r3, #1
 8007542:	e020      	b.n	8007586 <mpu6050_set_iic_master+0x8a>
    }
    prev &= ~(1 << 5);                                                                   /* clear config */
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	f023 0320 	bic.w	r3, r3, #32
 800754a:	b2db      	uxtb	r3, r3
 800754c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                                 /* set config */
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	015b      	lsls	r3, r3, #5
 8007552:	b25a      	sxtb	r2, r3
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	b25b      	sxtb	r3, r3
 8007558:	4313      	orrs	r3, r2
 800755a:	b25b      	sxtb	r3, r3
 800755c:	b2db      	uxtb	r3, r3
 800755e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8007560:	f107 020e 	add.w	r2, r7, #14
 8007564:	2301      	movs	r3, #1
 8007566:	216a      	movs	r1, #106	; 0x6a
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7fe ff49 	bl	8006400 <a_mpu6050_iic_write>
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d005      	beq.n	8007584 <mpu6050_set_iic_master+0x88>
    {
        handle->debug_print("mpu6050: write user ctrl failed.\n");                       /* write user ctrl failed */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	699b      	ldr	r3, [r3, #24]
 800757c:	4805      	ldr	r0, [pc, #20]	; (8007594 <mpu6050_set_iic_master+0x98>)
 800757e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007580:	2301      	movs	r3, #1
 8007582:	e000      	b.n	8007586 <mpu6050_set_iic_master+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	08010898 	.word	0x08010898
 8007594:	080108bc 	.word	0x080108bc

08007598 <mpu6050_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_clock_source(mpu6050_handle_t *handle, mpu6050_clock_source_t clock_source)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <mpu6050_set_clock_source+0x16>
    {
        return 2;                                                                        /* return error */
 80075aa:	2302      	movs	r3, #2
 80075ac:	e035      	b.n	800761a <mpu6050_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d001      	beq.n	80075bc <mpu6050_set_clock_source+0x24>
    {
        return 3;                                                                        /* return error */
 80075b8:	2303      	movs	r3, #3
 80075ba:	e02e      	b.n	800761a <mpu6050_set_clock_source+0x82>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80075bc:	f107 020e 	add.w	r2, r7, #14
 80075c0:	2301      	movs	r3, #1
 80075c2:	216b      	movs	r1, #107	; 0x6b
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7fe feff 	bl	80063c8 <a_mpu6050_iic_read>
 80075ca:	4603      	mov	r3, r0
 80075cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <mpu6050_set_clock_source+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	4812      	ldr	r0, [pc, #72]	; (8007624 <mpu6050_set_clock_source+0x8c>)
 80075da:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80075dc:	2301      	movs	r3, #1
 80075de:	e01c      	b.n	800761a <mpu6050_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                                 /* clear config */
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	f023 0307 	bic.w	r3, r3, #7
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                           /* set config */
 80075ea:	7bba      	ldrb	r2, [r7, #14]
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80075f4:	f107 020e 	add.w	r2, r7, #14
 80075f8:	2301      	movs	r3, #1
 80075fa:	216b      	movs	r1, #107	; 0x6b
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7fe feff 	bl	8006400 <a_mpu6050_iic_write>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <mpu6050_set_clock_source+0x80>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	4805      	ldr	r0, [pc, #20]	; (8007628 <mpu6050_set_clock_source+0x90>)
 8007612:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007614:	2301      	movs	r3, #1
 8007616:	e000      	b.n	800761a <mpu6050_set_clock_source+0x82>
    }

    return 0;                                                                            /* success return 0 */
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	08010af4 	.word	0x08010af4
 8007628:	08010b20 	.word	0x08010b20

0800762c <mpu6050_set_temperature_sensor>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_temperature_sensor(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <mpu6050_set_temperature_sensor+0x16>
    {
        return 2;                                                                        /* return error */
 800763e:	2302      	movs	r3, #2
 8007640:	e03c      	b.n	80076bc <mpu6050_set_temperature_sensor+0x90>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007648:	2b01      	cmp	r3, #1
 800764a:	d001      	beq.n	8007650 <mpu6050_set_temperature_sensor+0x24>
    {
        return 3;                                                                        /* return error */
 800764c:	2303      	movs	r3, #3
 800764e:	e035      	b.n	80076bc <mpu6050_set_temperature_sensor+0x90>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007650:	f107 020e 	add.w	r2, r7, #14
 8007654:	2301      	movs	r3, #1
 8007656:	216b      	movs	r1, #107	; 0x6b
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7fe feb5 	bl	80063c8 <a_mpu6050_iic_read>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <mpu6050_set_temperature_sensor+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	4815      	ldr	r0, [pc, #84]	; (80076c4 <mpu6050_set_temperature_sensor+0x98>)
 800766e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007670:	2301      	movs	r3, #1
 8007672:	e023      	b.n	80076bc <mpu6050_set_temperature_sensor+0x90>
    }
    prev &= ~(1 << 3);                                                                   /* clear config */
 8007674:	7bbb      	ldrb	r3, [r7, #14]
 8007676:	f023 0308 	bic.w	r3, r3, #8
 800767a:	b2db      	uxtb	r3, r3
 800767c:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                              /* set config */
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <mpu6050_set_temperature_sensor+0x5c>
 8007684:	2208      	movs	r2, #8
 8007686:	e000      	b.n	800768a <mpu6050_set_temperature_sensor+0x5e>
 8007688:	2200      	movs	r2, #0
 800768a:	7bbb      	ldrb	r3, [r7, #14]
 800768c:	b25b      	sxtb	r3, r3
 800768e:	4313      	orrs	r3, r2
 8007690:	b25b      	sxtb	r3, r3
 8007692:	b2db      	uxtb	r3, r3
 8007694:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007696:	f107 020e 	add.w	r2, r7, #14
 800769a:	2301      	movs	r3, #1
 800769c:	216b      	movs	r1, #107	; 0x6b
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7fe feae 	bl	8006400 <a_mpu6050_iic_write>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d005      	beq.n	80076ba <mpu6050_set_temperature_sensor+0x8e>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	4805      	ldr	r0, [pc, #20]	; (80076c8 <mpu6050_set_temperature_sensor+0x9c>)
 80076b4:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80076b6:	2301      	movs	r3, #1
 80076b8:	e000      	b.n	80076bc <mpu6050_set_temperature_sensor+0x90>
    }

    return 0;                                                                            /* success return 0 */
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	08010af4 	.word	0x08010af4
 80076c8:	08010b20 	.word	0x08010b20

080076cc <mpu6050_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_cycle_wake_up(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <mpu6050_set_cycle_wake_up+0x16>
    {
        return 2;                                                                        /* return error */
 80076de:	2302      	movs	r3, #2
 80076e0:	e039      	b.n	8007756 <mpu6050_set_cycle_wake_up+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d001      	beq.n	80076f0 <mpu6050_set_cycle_wake_up+0x24>
    {
        return 3;                                                                        /* return error */
 80076ec:	2303      	movs	r3, #3
 80076ee:	e032      	b.n	8007756 <mpu6050_set_cycle_wake_up+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80076f0:	f107 020e 	add.w	r2, r7, #14
 80076f4:	2301      	movs	r3, #1
 80076f6:	216b      	movs	r1, #107	; 0x6b
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7fe fe65 	bl	80063c8 <a_mpu6050_iic_read>
 80076fe:	4603      	mov	r3, r0
 8007700:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <mpu6050_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	4814      	ldr	r0, [pc, #80]	; (8007760 <mpu6050_set_cycle_wake_up+0x94>)
 800770e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007710:	2301      	movs	r3, #1
 8007712:	e020      	b.n	8007756 <mpu6050_set_cycle_wake_up+0x8a>
    }
    prev &= ~(1 << 5);                                                                   /* clear config */
 8007714:	7bbb      	ldrb	r3, [r7, #14]
 8007716:	f023 0320 	bic.w	r3, r3, #32
 800771a:	b2db      	uxtb	r3, r3
 800771c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                                 /* set config */
 800771e:	78fb      	ldrb	r3, [r7, #3]
 8007720:	015b      	lsls	r3, r3, #5
 8007722:	b25a      	sxtb	r2, r3
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	b25b      	sxtb	r3, r3
 8007728:	4313      	orrs	r3, r2
 800772a:	b25b      	sxtb	r3, r3
 800772c:	b2db      	uxtb	r3, r3
 800772e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007730:	f107 020e 	add.w	r2, r7, #14
 8007734:	2301      	movs	r3, #1
 8007736:	216b      	movs	r1, #107	; 0x6b
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7fe fe61 	bl	8006400 <a_mpu6050_iic_write>
 800773e:	4603      	mov	r3, r0
 8007740:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d005      	beq.n	8007754 <mpu6050_set_cycle_wake_up+0x88>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	4805      	ldr	r0, [pc, #20]	; (8007764 <mpu6050_set_cycle_wake_up+0x98>)
 800774e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007750:	2301      	movs	r3, #1
 8007752:	e000      	b.n	8007756 <mpu6050_set_cycle_wake_up+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	08010af4 	.word	0x08010af4
 8007764:	08010b20 	.word	0x08010b20

08007768 <mpu6050_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_sleep(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <mpu6050_set_sleep+0x16>
    {
        return 2;                                                                        /* return error */
 800777a:	2302      	movs	r3, #2
 800777c:	e039      	b.n	80077f2 <mpu6050_set_sleep+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007784:	2b01      	cmp	r3, #1
 8007786:	d001      	beq.n	800778c <mpu6050_set_sleep+0x24>
    {
        return 3;                                                                        /* return error */
 8007788:	2303      	movs	r3, #3
 800778a:	e032      	b.n	80077f2 <mpu6050_set_sleep+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 800778c:	f107 020e 	add.w	r2, r7, #14
 8007790:	2301      	movs	r3, #1
 8007792:	216b      	movs	r1, #107	; 0x6b
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7fe fe17 	bl	80063c8 <a_mpu6050_iic_read>
 800779a:	4603      	mov	r3, r0
 800779c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <mpu6050_set_sleep+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	4814      	ldr	r0, [pc, #80]	; (80077fc <mpu6050_set_sleep+0x94>)
 80077aa:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80077ac:	2301      	movs	r3, #1
 80077ae:	e020      	b.n	80077f2 <mpu6050_set_sleep+0x8a>
    }
    prev &= ~(1 << 6);                                                                   /* clear config */
 80077b0:	7bbb      	ldrb	r3, [r7, #14]
 80077b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                 /* set config */
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	019b      	lsls	r3, r3, #6
 80077be:	b25a      	sxtb	r2, r3
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	b25b      	sxtb	r3, r3
 80077c4:	4313      	orrs	r3, r2
 80077c6:	b25b      	sxtb	r3, r3
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80077cc:	f107 020e 	add.w	r2, r7, #14
 80077d0:	2301      	movs	r3, #1
 80077d2:	216b      	movs	r1, #107	; 0x6b
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7fe fe13 	bl	8006400 <a_mpu6050_iic_write>
 80077da:	4603      	mov	r3, r0
 80077dc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80077de:	7bfb      	ldrb	r3, [r7, #15]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <mpu6050_set_sleep+0x88>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	4805      	ldr	r0, [pc, #20]	; (8007800 <mpu6050_set_sleep+0x98>)
 80077ea:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <mpu6050_set_sleep+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	08010af4 	.word	0x08010af4
 8007800:	08010b20 	.word	0x08010b20

08007804 <mpu6050_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_standby_mode(mpu6050_handle_t *handle, mpu6050_source_t source, mpu6050_bool_t enable)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	460b      	mov	r3, r1
 800780e:	70fb      	strb	r3, [r7, #3]
 8007810:	4613      	mov	r3, r2
 8007812:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <mpu6050_set_standby_mode+0x1a>
    {
        return 2;                                                                        /* return error */
 800781a:	2302      	movs	r3, #2
 800781c:	e043      	b.n	80078a6 <mpu6050_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007824:	2b01      	cmp	r3, #1
 8007826:	d001      	beq.n	800782c <mpu6050_set_standby_mode+0x28>
    {
        return 3;                                                                        /* return error */
 8007828:	2303      	movs	r3, #3
 800782a:	e03c      	b.n	80078a6 <mpu6050_set_standby_mode+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 800782c:	f107 020e 	add.w	r2, r7, #14
 8007830:	2301      	movs	r3, #1
 8007832:	216c      	movs	r1, #108	; 0x6c
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7fe fdc7 	bl	80063c8 <a_mpu6050_iic_read>
 800783a:	4603      	mov	r3, r0
 800783c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800783e:	7bfb      	ldrb	r3, [r7, #15]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d005      	beq.n	8007850 <mpu6050_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu6050: read power management 2 failed.\n");               /* read power management 2 failed */
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	4819      	ldr	r0, [pc, #100]	; (80078b0 <mpu6050_set_standby_mode+0xac>)
 800784a:	4798      	blx	r3

        return 1;                                                                        /* return error */
 800784c:	2301      	movs	r3, #1
 800784e:	e02a      	b.n	80078a6 <mpu6050_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                              /* clear config */
 8007850:	78fb      	ldrb	r3, [r7, #3]
 8007852:	2201      	movs	r2, #1
 8007854:	fa02 f303 	lsl.w	r3, r2, r3
 8007858:	b25b      	sxtb	r3, r3
 800785a:	43db      	mvns	r3, r3
 800785c:	b25a      	sxtb	r2, r3
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	b25b      	sxtb	r3, r3
 8007862:	4013      	ands	r3, r2
 8007864:	b25b      	sxtb	r3, r3
 8007866:	b2db      	uxtb	r3, r3
 8007868:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                            /* set config */
 800786a:	78ba      	ldrb	r2, [r7, #2]
 800786c:	78fb      	ldrb	r3, [r7, #3]
 800786e:	fa02 f303 	lsl.w	r3, r2, r3
 8007872:	b25a      	sxtb	r2, r3
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	b25b      	sxtb	r3, r3
 8007878:	4313      	orrs	r3, r2
 800787a:	b25b      	sxtb	r3, r3
 800787c:	b2db      	uxtb	r3, r3
 800787e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8007880:	f107 020e 	add.w	r2, r7, #14
 8007884:	2301      	movs	r3, #1
 8007886:	216c      	movs	r1, #108	; 0x6c
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7fe fdb9 	bl	8006400 <a_mpu6050_iic_write>
 800788e:	4603      	mov	r3, r0
 8007890:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007892:	7bfb      	ldrb	r3, [r7, #15]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d005      	beq.n	80078a4 <mpu6050_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu6050: write power management 2 failed.\n");              /* write power management 2 failed */
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	4805      	ldr	r0, [pc, #20]	; (80078b4 <mpu6050_set_standby_mode+0xb0>)
 800789e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80078a0:	2301      	movs	r3, #1
 80078a2:	e000      	b.n	80078a6 <mpu6050_set_standby_mode+0xa2>
    }

    return 0;                                                                            /* success return 0 */
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	08010b4c 	.word	0x08010b4c
 80078b4:	08010b78 	.word	0x08010b78

080078b8 <mpu6050_set_wake_up_frequency>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_wake_up_frequency(mpu6050_handle_t *handle, mpu6050_wake_up_frequency_t frequency)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <mpu6050_set_wake_up_frequency+0x16>
    {
        return 2;                                                                        /* return error */
 80078ca:	2302      	movs	r3, #2
 80078cc:	e039      	b.n	8007942 <mpu6050_set_wake_up_frequency+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d001      	beq.n	80078dc <mpu6050_set_wake_up_frequency+0x24>
    {
        return 3;                                                                        /* return error */
 80078d8:	2303      	movs	r3, #3
 80078da:	e032      	b.n	8007942 <mpu6050_set_wake_up_frequency+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 80078dc:	f107 020e 	add.w	r2, r7, #14
 80078e0:	2301      	movs	r3, #1
 80078e2:	216c      	movs	r1, #108	; 0x6c
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fe fd6f 	bl	80063c8 <a_mpu6050_iic_read>
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <mpu6050_set_wake_up_frequency+0x48>
    {
        handle->debug_print("mpu6050: read power management 2 failed.\n");               /* read power management 2 failed */
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	4814      	ldr	r0, [pc, #80]	; (800794c <mpu6050_set_wake_up_frequency+0x94>)
 80078fa:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80078fc:	2301      	movs	r3, #1
 80078fe:	e020      	b.n	8007942 <mpu6050_set_wake_up_frequency+0x8a>
    }
    prev &= ~(0x3 << 6);                                                                 /* clear config */
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007906:	b2db      	uxtb	r3, r3
 8007908:	73bb      	strb	r3, [r7, #14]
    prev |= frequency << 6;                                                              /* set config */
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	019b      	lsls	r3, r3, #6
 800790e:	b25a      	sxtb	r2, r3
 8007910:	7bbb      	ldrb	r3, [r7, #14]
 8007912:	b25b      	sxtb	r3, r3
 8007914:	4313      	orrs	r3, r2
 8007916:	b25b      	sxtb	r3, r3
 8007918:	b2db      	uxtb	r3, r3
 800791a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 800791c:	f107 020e 	add.w	r2, r7, #14
 8007920:	2301      	movs	r3, #1
 8007922:	216c      	movs	r1, #108	; 0x6c
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7fe fd6b 	bl	8006400 <a_mpu6050_iic_write>
 800792a:	4603      	mov	r3, r0
 800792c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d005      	beq.n	8007940 <mpu6050_set_wake_up_frequency+0x88>
    {
        handle->debug_print("mpu6050: write power management 2 failed.\n");              /* write power management 2 failed */
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	4805      	ldr	r0, [pc, #20]	; (8007950 <mpu6050_set_wake_up_frequency+0x98>)
 800793a:	4798      	blx	r3

        return 1;                                                                        /* return error */
 800793c:	2301      	movs	r3, #1
 800793e:	e000      	b.n	8007942 <mpu6050_set_wake_up_frequency+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	08010b4c 	.word	0x08010b4c
 8007950:	08010b78 	.word	0x08010b78

08007954 <mpu6050_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_sample_rate_divider(mpu6050_handle_t *handle, uint8_t d)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;

    if (handle == NULL)                                                                  /* check handle */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <mpu6050_set_sample_rate_divider+0x16>
    {
        return 2;                                                                        /* return error */
 8007966:	2302      	movs	r3, #2
 8007968:	e018      	b.n	800799c <mpu6050_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007970:	2b01      	cmp	r3, #1
 8007972:	d001      	beq.n	8007978 <mpu6050_set_sample_rate_divider+0x24>
    {
        return 3;                                                                        /* return error */
 8007974:	2303      	movs	r3, #3
 8007976:	e011      	b.n	800799c <mpu6050_set_sample_rate_divider+0x48>
    }

    res = a_mpu6050_iic_write(handle, MPU6050_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 8007978:	1cfa      	adds	r2, r7, #3
 800797a:	2301      	movs	r3, #1
 800797c:	2119      	movs	r1, #25
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fe fd3e 	bl	8006400 <a_mpu6050_iic_write>
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d005      	beq.n	800799a <mpu6050_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu6050: write smprt div failed.\n");                       /* write smprt div failed */
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	4804      	ldr	r0, [pc, #16]	; (80079a4 <mpu6050_set_sample_rate_divider+0x50>)
 8007994:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007996:	2301      	movs	r3, #1
 8007998:	e000      	b.n	800799c <mpu6050_set_sample_rate_divider+0x48>
    }

    return 0;                                                                            /* success return 0 */
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	08010c38 	.word	0x08010c38

080079a8 <mpu6050_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_extern_sync(mpu6050_handle_t *handle, mpu6050_extern_sync_t sync)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                /* check handle */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <mpu6050_set_extern_sync+0x16>
    {
        return 2;                                                                      /* return error */
 80079ba:	2302      	movs	r3, #2
 80079bc:	e039      	b.n	8007a32 <mpu6050_set_extern_sync+0x8a>
    }
    if (handle->inited != 1)                                                           /* check handle initialization */
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d001      	beq.n	80079cc <mpu6050_set_extern_sync+0x24>
    {
        return 3;                                                                      /* return error */
 80079c8:	2303      	movs	r3, #3
 80079ca:	e032      	b.n	8007a32 <mpu6050_set_extern_sync+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 80079cc:	f107 020e 	add.w	r2, r7, #14
 80079d0:	2301      	movs	r3, #1
 80079d2:	211a      	movs	r1, #26
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7fe fcf7 	bl	80063c8 <a_mpu6050_iic_read>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d005      	beq.n	80079f0 <mpu6050_set_extern_sync+0x48>
    {
        handle->debug_print("mpu6050: read config failed.\n");                         /* read config failed */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	4814      	ldr	r0, [pc, #80]	; (8007a3c <mpu6050_set_extern_sync+0x94>)
 80079ea:	4798      	blx	r3

        return 1;                                                                      /* return error */
 80079ec:	2301      	movs	r3, #1
 80079ee:	e020      	b.n	8007a32 <mpu6050_set_extern_sync+0x8a>
    }
    prev &= ~(0x7 << 3);                                                               /* clear config */
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                                 /* set config */
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	b25a      	sxtb	r2, r3
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	b25b      	sxtb	r3, r3
 8007a04:	4313      	orrs	r3, r2
 8007a06:	b25b      	sxtb	r3, r3
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8007a0c:	f107 020e 	add.w	r2, r7, #14
 8007a10:	2301      	movs	r3, #1
 8007a12:	211a      	movs	r1, #26
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7fe fcf3 	bl	8006400 <a_mpu6050_iic_write>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d005      	beq.n	8007a30 <mpu6050_set_extern_sync+0x88>
    {
        handle->debug_print("mpu6050: write config failed.\n");                        /* write config failed */
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	4805      	ldr	r0, [pc, #20]	; (8007a40 <mpu6050_set_extern_sync+0x98>)
 8007a2a:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <mpu6050_set_extern_sync+0x8a>
    }

    return 0;                                                                          /* success return 0 */
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	08010c80 	.word	0x08010c80
 8007a40:	08010ca0 	.word	0x08010ca0

08007a44 <mpu6050_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_low_pass_filter(mpu6050_handle_t *handle, mpu6050_low_pass_filter_t filter)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                /* check handle */
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <mpu6050_set_low_pass_filter+0x16>
    {
        return 2;                                                                      /* return error */
 8007a56:	2302      	movs	r3, #2
 8007a58:	e035      	b.n	8007ac6 <mpu6050_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                           /* check handle initialization */
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d001      	beq.n	8007a68 <mpu6050_set_low_pass_filter+0x24>
    {
        return 3;                                                                      /* return error */
 8007a64:	2303      	movs	r3, #3
 8007a66:	e02e      	b.n	8007ac6 <mpu6050_set_low_pass_filter+0x82>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8007a68:	f107 020e 	add.w	r2, r7, #14
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	211a      	movs	r1, #26
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7fe fca9 	bl	80063c8 <a_mpu6050_iic_read>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 8007a7a:	7bfb      	ldrb	r3, [r7, #15]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d005      	beq.n	8007a8c <mpu6050_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6050: read config failed.\n");                         /* read config failed */
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	4812      	ldr	r0, [pc, #72]	; (8007ad0 <mpu6050_set_low_pass_filter+0x8c>)
 8007a86:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e01c      	b.n	8007ac6 <mpu6050_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                               /* clear config */
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	f023 0307 	bic.w	r3, r3, #7
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                               /* set config */
 8007a96:	7bba      	ldrb	r2, [r7, #14]
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8007aa0:	f107 020e 	add.w	r2, r7, #14
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	211a      	movs	r1, #26
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7fe fca9 	bl	8006400 <a_mpu6050_iic_write>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d005      	beq.n	8007ac4 <mpu6050_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6050: write config failed.\n");                        /* write config failed */
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	4805      	ldr	r0, [pc, #20]	; (8007ad4 <mpu6050_set_low_pass_filter+0x90>)
 8007abe:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e000      	b.n	8007ac6 <mpu6050_set_low_pass_filter+0x82>
    }

    return 0;                                                                          /* success return 0 */
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	08010c80 	.word	0x08010c80
 8007ad4:	08010ca0 	.word	0x08010ca0

08007ad8 <mpu6050_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_gyroscope_test(mpu6050_handle_t *handle, mpu6050_axis_t axis, mpu6050_bool_t enable)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	70fb      	strb	r3, [r7, #3]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <mpu6050_set_gyroscope_test+0x1a>
    {
        return 2;                                                                           /* return error */
 8007aee:	2302      	movs	r3, #2
 8007af0:	e043      	b.n	8007b7a <mpu6050_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d001      	beq.n	8007b00 <mpu6050_set_gyroscope_test+0x28>
    {
        return 3;                                                                           /* return error */
 8007afc:	2303      	movs	r3, #3
 8007afe:	e03c      	b.n	8007b7a <mpu6050_set_gyroscope_test+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8007b00:	f107 020e 	add.w	r2, r7, #14
 8007b04:	2301      	movs	r3, #1
 8007b06:	211b      	movs	r1, #27
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7fe fc5d 	bl	80063c8 <a_mpu6050_iic_read>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <mpu6050_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu6050: read gyroscope config failed.\n");                    /* read gyroscope config failed */
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	4819      	ldr	r0, [pc, #100]	; (8007b84 <mpu6050_set_gyroscope_test+0xac>)
 8007b1e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007b20:	2301      	movs	r3, #1
 8007b22:	e02a      	b.n	8007b7a <mpu6050_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                                   /* clear config */
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	2201      	movs	r2, #1
 8007b28:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2c:	b25b      	sxtb	r3, r3
 8007b2e:	43db      	mvns	r3, r3
 8007b30:	b25a      	sxtb	r2, r3
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	b25b      	sxtb	r3, r3
 8007b36:	4013      	ands	r3, r2
 8007b38:	b25b      	sxtb	r3, r3
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                                 /* set config */
 8007b3e:	78ba      	ldrb	r2, [r7, #2]
 8007b40:	78fb      	ldrb	r3, [r7, #3]
 8007b42:	fa02 f303 	lsl.w	r3, r2, r3
 8007b46:	b25a      	sxtb	r2, r3
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	b25b      	sxtb	r3, r3
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	b25b      	sxtb	r3, r3
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8007b54:	f107 020e 	add.w	r2, r7, #14
 8007b58:	2301      	movs	r3, #1
 8007b5a:	211b      	movs	r1, #27
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7fe fc4f 	bl	8006400 <a_mpu6050_iic_write>
 8007b62:	4603      	mov	r3, r0
 8007b64:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d005      	beq.n	8007b78 <mpu6050_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu6050: write gyroscope config failed.\n");                   /* write gyroscope config failed */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	4805      	ldr	r0, [pc, #20]	; (8007b88 <mpu6050_set_gyroscope_test+0xb0>)
 8007b72:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007b74:	2301      	movs	r3, #1
 8007b76:	e000      	b.n	8007b7a <mpu6050_set_gyroscope_test+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3710      	adds	r7, #16
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	08010cc0 	.word	0x08010cc0
 8007b88:	08010ce8 	.word	0x08010ce8

08007b8c <mpu6050_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_gyroscope_range(mpu6050_handle_t *handle, mpu6050_gyroscope_range_t range)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	460b      	mov	r3, r1
 8007b96:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <mpu6050_set_gyroscope_range+0x16>
    {
        return 2;                                                                           /* return error */
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	e039      	b.n	8007c16 <mpu6050_set_gyroscope_range+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d001      	beq.n	8007bb0 <mpu6050_set_gyroscope_range+0x24>
    {
        return 3;                                                                           /* return error */
 8007bac:	2303      	movs	r3, #3
 8007bae:	e032      	b.n	8007c16 <mpu6050_set_gyroscope_range+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8007bb0:	f107 020e 	add.w	r2, r7, #14
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	211b      	movs	r1, #27
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7fe fc05 	bl	80063c8 <a_mpu6050_iic_read>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <mpu6050_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu6050: read gyroscope config failed.\n");                    /* read gyroscope config failed */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	4814      	ldr	r0, [pc, #80]	; (8007c20 <mpu6050_set_gyroscope_range+0x94>)
 8007bce:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e020      	b.n	8007c16 <mpu6050_set_gyroscope_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                      /* clear config */
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	f023 0318 	bic.w	r3, r3, #24
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                     /* set config */
 8007bde:	78fb      	ldrb	r3, [r7, #3]
 8007be0:	00db      	lsls	r3, r3, #3
 8007be2:	b25a      	sxtb	r2, r3
 8007be4:	7bbb      	ldrb	r3, [r7, #14]
 8007be6:	b25b      	sxtb	r3, r3
 8007be8:	4313      	orrs	r3, r2
 8007bea:	b25b      	sxtb	r3, r3
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8007bf0:	f107 020e 	add.w	r2, r7, #14
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	211b      	movs	r1, #27
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7fe fc01 	bl	8006400 <a_mpu6050_iic_write>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d005      	beq.n	8007c14 <mpu6050_set_gyroscope_range+0x88>
    {
        handle->debug_print("mpu6050: write gyroscope config failed.\n");                   /* write gyroscope config failed */
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	4805      	ldr	r0, [pc, #20]	; (8007c24 <mpu6050_set_gyroscope_range+0x98>)
 8007c0e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <mpu6050_set_gyroscope_range+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	08010cc0 	.word	0x08010cc0
 8007c24:	08010ce8 	.word	0x08010ce8

08007c28 <mpu6050_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_accelerometer_test(mpu6050_handle_t *handle, mpu6050_axis_t axis, mpu6050_bool_t enable)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
 8007c34:	4613      	mov	r3, r2
 8007c36:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <mpu6050_set_accelerometer_test+0x1a>
    {
        return 2;                                                                           /* return error */
 8007c3e:	2302      	movs	r3, #2
 8007c40:	e043      	b.n	8007cca <mpu6050_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d001      	beq.n	8007c50 <mpu6050_set_accelerometer_test+0x28>
    {
        return 3;                                                                           /* return error */
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e03c      	b.n	8007cca <mpu6050_set_accelerometer_test+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8007c50:	f107 020e 	add.w	r2, r7, #14
 8007c54:	2301      	movs	r3, #1
 8007c56:	211c      	movs	r1, #28
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7fe fbb5 	bl	80063c8 <a_mpu6050_iic_read>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d005      	beq.n	8007c74 <mpu6050_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu6050: read accelerometer config failed.\n");                /* read accelerometer config failed */
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	4819      	ldr	r0, [pc, #100]	; (8007cd4 <mpu6050_set_accelerometer_test+0xac>)
 8007c6e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007c70:	2301      	movs	r3, #1
 8007c72:	e02a      	b.n	8007cca <mpu6050_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                                   /* clear config */
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	2201      	movs	r2, #1
 8007c78:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7c:	b25b      	sxtb	r3, r3
 8007c7e:	43db      	mvns	r3, r3
 8007c80:	b25a      	sxtb	r2, r3
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	b25b      	sxtb	r3, r3
 8007c86:	4013      	ands	r3, r2
 8007c88:	b25b      	sxtb	r3, r3
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                                 /* set config */
 8007c8e:	78ba      	ldrb	r2, [r7, #2]
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	fa02 f303 	lsl.w	r3, r2, r3
 8007c96:	b25a      	sxtb	r2, r3
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
 8007c9a:	b25b      	sxtb	r3, r3
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	b25b      	sxtb	r3, r3
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8007ca4:	f107 020e 	add.w	r2, r7, #14
 8007ca8:	2301      	movs	r3, #1
 8007caa:	211c      	movs	r1, #28
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7fe fba7 	bl	8006400 <a_mpu6050_iic_write>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d005      	beq.n	8007cc8 <mpu6050_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu6050: write accelerometer config failed.\n");               /* write accelerometer config failed */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	4805      	ldr	r0, [pc, #20]	; (8007cd8 <mpu6050_set_accelerometer_test+0xb0>)
 8007cc2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e000      	b.n	8007cca <mpu6050_set_accelerometer_test+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	08010700 	.word	0x08010700
 8007cd8:	08010d14 	.word	0x08010d14

08007cdc <mpu6050_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_accelerometer_range(mpu6050_handle_t *handle, mpu6050_accelerometer_range_t range)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d101      	bne.n	8007cf2 <mpu6050_set_accelerometer_range+0x16>
    {
        return 2;                                                                           /* return error */
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e039      	b.n	8007d66 <mpu6050_set_accelerometer_range+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d001      	beq.n	8007d00 <mpu6050_set_accelerometer_range+0x24>
    {
        return 3;                                                                           /* return error */
 8007cfc:	2303      	movs	r3, #3
 8007cfe:	e032      	b.n	8007d66 <mpu6050_set_accelerometer_range+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8007d00:	f107 020e 	add.w	r2, r7, #14
 8007d04:	2301      	movs	r3, #1
 8007d06:	211c      	movs	r1, #28
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7fe fb5d 	bl	80063c8 <a_mpu6050_iic_read>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <mpu6050_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu6050: read accelerometer config failed.\n");                /* read accelerometer config failed */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	4814      	ldr	r0, [pc, #80]	; (8007d70 <mpu6050_set_accelerometer_range+0x94>)
 8007d1e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007d20:	2301      	movs	r3, #1
 8007d22:	e020      	b.n	8007d66 <mpu6050_set_accelerometer_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                      /* clear config */
 8007d24:	7bbb      	ldrb	r3, [r7, #14]
 8007d26:	f023 0318 	bic.w	r3, r3, #24
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                     /* set config */
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	b25a      	sxtb	r2, r3
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	b25b      	sxtb	r3, r3
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	b25b      	sxtb	r3, r3
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8007d40:	f107 020e 	add.w	r2, r7, #14
 8007d44:	2301      	movs	r3, #1
 8007d46:	211c      	movs	r1, #28
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7fe fb59 	bl	8006400 <a_mpu6050_iic_write>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d005      	beq.n	8007d64 <mpu6050_set_accelerometer_range+0x88>
    {
        handle->debug_print("mpu6050: write accelerometer config failed.\n");               /* write accelerometer config failed */
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	4805      	ldr	r0, [pc, #20]	; (8007d74 <mpu6050_set_accelerometer_range+0x98>)
 8007d5e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007d60:	2301      	movs	r3, #1
 8007d62:	e000      	b.n	8007d66 <mpu6050_set_accelerometer_range+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	08010700 	.word	0x08010700
 8007d74:	08010d14 	.word	0x08010d14

08007d78 <mpu6050_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fifo_enable(mpu6050_handle_t *handle, mpu6050_fifo_t fifo, mpu6050_bool_t enable)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
 8007d84:	4613      	mov	r3, r2
 8007d86:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                 /* check handle */
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <mpu6050_set_fifo_enable+0x1a>
    {
        return 2;                                                                       /* return error */
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e043      	b.n	8007e1a <mpu6050_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d001      	beq.n	8007da0 <mpu6050_set_fifo_enable+0x28>
    {
        return 3;                                                                       /* return error */
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e03c      	b.n	8007e1a <mpu6050_set_fifo_enable+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 8007da0:	f107 020e 	add.w	r2, r7, #14
 8007da4:	2301      	movs	r3, #1
 8007da6:	2123      	movs	r1, #35	; 0x23
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7fe fb0d 	bl	80063c8 <a_mpu6050_iic_read>
 8007dae:	4603      	mov	r3, r0
 8007db0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d005      	beq.n	8007dc4 <mpu6050_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu6050: read fifo enable config failed.\n");              /* read fifo enable config failed */
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	4819      	ldr	r0, [pc, #100]	; (8007e24 <mpu6050_set_fifo_enable+0xac>)
 8007dbe:	4798      	blx	r3

        return 1;                                                                       /* return error */
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e02a      	b.n	8007e1a <mpu6050_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                               /* clear config */
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dcc:	b25b      	sxtb	r3, r3
 8007dce:	43db      	mvns	r3, r3
 8007dd0:	b25a      	sxtb	r2, r3
 8007dd2:	7bbb      	ldrb	r3, [r7, #14]
 8007dd4:	b25b      	sxtb	r3, r3
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	b25b      	sxtb	r3, r3
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                             /* set config */
 8007dde:	78ba      	ldrb	r2, [r7, #2]
 8007de0:	78fb      	ldrb	r3, [r7, #3]
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	b25a      	sxtb	r2, r3
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	b25b      	sxtb	r3, r3
 8007dec:	4313      	orrs	r3, r2
 8007dee:	b25b      	sxtb	r3, r3
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 8007df4:	f107 020e 	add.w	r2, r7, #14
 8007df8:	2301      	movs	r3, #1
 8007dfa:	2123      	movs	r1, #35	; 0x23
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7fe faff 	bl	8006400 <a_mpu6050_iic_write>
 8007e02:	4603      	mov	r3, r0
 8007e04:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d005      	beq.n	8007e18 <mpu6050_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu6050: write fifo enable config failed.\n");             /* write fifo enable config failed */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	699b      	ldr	r3, [r3, #24]
 8007e10:	4805      	ldr	r0, [pc, #20]	; (8007e28 <mpu6050_set_fifo_enable+0xb0>)
 8007e12:	4798      	blx	r3

        return 1;                                                                       /* return error */
 8007e14:	2301      	movs	r3, #1
 8007e16:	e000      	b.n	8007e1a <mpu6050_set_fifo_enable+0xa2>
    }

    return 0;                                                                           /* success return 0 */
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	08010d44 	.word	0x08010d44
 8007e28:	08010d70 	.word	0x08010d70

08007e2c <mpu6050_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_level(mpu6050_handle_t *handle, mpu6050_pin_level_t level)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <mpu6050_set_interrupt_level+0x16>
    {
        return 2;                                                                           /* return error */
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e039      	b.n	8007eb6 <mpu6050_set_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d001      	beq.n	8007e50 <mpu6050_set_interrupt_level+0x24>
    {
        return 3;                                                                           /* return error */
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e032      	b.n	8007eb6 <mpu6050_set_interrupt_level+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007e50:	f107 020e 	add.w	r2, r7, #14
 8007e54:	2301      	movs	r3, #1
 8007e56:	2137      	movs	r1, #55	; 0x37
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7fe fab5 	bl	80063c8 <a_mpu6050_iic_read>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d005      	beq.n	8007e74 <mpu6050_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	4814      	ldr	r0, [pc, #80]	; (8007ec0 <mpu6050_set_interrupt_level+0x94>)
 8007e6e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007e70:	2301      	movs	r3, #1
 8007e72:	e020      	b.n	8007eb6 <mpu6050_set_interrupt_level+0x8a>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
 8007e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                     /* set config */
 8007e7e:	78fb      	ldrb	r3, [r7, #3]
 8007e80:	01db      	lsls	r3, r3, #7
 8007e82:	b25a      	sxtb	r2, r3
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	b25b      	sxtb	r3, r3
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	b25b      	sxtb	r3, r3
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007e90:	f107 020e 	add.w	r2, r7, #14
 8007e94:	2301      	movs	r3, #1
 8007e96:	2137      	movs	r1, #55	; 0x37
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f7fe fab1 	bl	8006400 <a_mpu6050_iic_write>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d005      	beq.n	8007eb4 <mpu6050_set_interrupt_level+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	4805      	ldr	r0, [pc, #20]	; (8007ec4 <mpu6050_set_interrupt_level+0x98>)
 8007eae:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <mpu6050_set_interrupt_level+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	08010d9c 	.word	0x08010d9c
 8007ec4:	08010dc4 	.word	0x08010dc4

08007ec8 <mpu6050_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_pin_type(mpu6050_handle_t *handle, mpu6050_pin_type_t type)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <mpu6050_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                           /* return error */
 8007eda:	2302      	movs	r3, #2
 8007edc:	e039      	b.n	8007f52 <mpu6050_set_interrupt_pin_type+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d001      	beq.n	8007eec <mpu6050_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                           /* return error */
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e032      	b.n	8007f52 <mpu6050_set_interrupt_pin_type+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007eec:	f107 020e 	add.w	r2, r7, #14
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	2137      	movs	r1, #55	; 0x37
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f7fe fa67 	bl	80063c8 <a_mpu6050_iic_read>
 8007efa:	4603      	mov	r3, r0
 8007efc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <mpu6050_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	4814      	ldr	r0, [pc, #80]	; (8007f5c <mpu6050_set_interrupt_pin_type+0x94>)
 8007f0a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e020      	b.n	8007f52 <mpu6050_set_interrupt_pin_type+0x8a>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 8007f10:	7bbb      	ldrb	r3, [r7, #14]
 8007f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                      /* set config */
 8007f1a:	78fb      	ldrb	r3, [r7, #3]
 8007f1c:	019b      	lsls	r3, r3, #6
 8007f1e:	b25a      	sxtb	r2, r3
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	b25b      	sxtb	r3, r3
 8007f24:	4313      	orrs	r3, r2
 8007f26:	b25b      	sxtb	r3, r3
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007f2c:	f107 020e 	add.w	r2, r7, #14
 8007f30:	2301      	movs	r3, #1
 8007f32:	2137      	movs	r1, #55	; 0x37
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f7fe fa63 	bl	8006400 <a_mpu6050_iic_write>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d005      	beq.n	8007f50 <mpu6050_set_interrupt_pin_type+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	4805      	ldr	r0, [pc, #20]	; (8007f60 <mpu6050_set_interrupt_pin_type+0x98>)
 8007f4a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e000      	b.n	8007f52 <mpu6050_set_interrupt_pin_type+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	08010d9c 	.word	0x08010d9c
 8007f60:	08010dc4 	.word	0x08010dc4

08007f64 <mpu6050_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_latch(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <mpu6050_set_interrupt_latch+0x16>
    {
        return 2;                                                                           /* return error */
 8007f76:	2302      	movs	r3, #2
 8007f78:	e03c      	b.n	8007ff4 <mpu6050_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d001      	beq.n	8007f88 <mpu6050_set_interrupt_latch+0x24>
    {
        return 3;                                                                           /* return error */
 8007f84:	2303      	movs	r3, #3
 8007f86:	e035      	b.n	8007ff4 <mpu6050_set_interrupt_latch+0x90>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007f88:	f107 020e 	add.w	r2, r7, #14
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	2137      	movs	r1, #55	; 0x37
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7fe fa19 	bl	80063c8 <a_mpu6050_iic_read>
 8007f96:	4603      	mov	r3, r0
 8007f98:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d005      	beq.n	8007fac <mpu6050_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	4815      	ldr	r0, [pc, #84]	; (8007ffc <mpu6050_set_interrupt_latch+0x98>)
 8007fa6:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e023      	b.n	8007ff4 <mpu6050_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                      /* clear config */
 8007fac:	7bbb      	ldrb	r3, [r7, #14]
 8007fae:	f023 0320 	bic.w	r3, r3, #32
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                                 /* set config */
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <mpu6050_set_interrupt_latch+0x5c>
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	e000      	b.n	8007fc2 <mpu6050_set_interrupt_latch+0x5e>
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	7bbb      	ldrb	r3, [r7, #14]
 8007fc4:	b25b      	sxtb	r3, r3
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	b25b      	sxtb	r3, r3
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007fce:	f107 020e 	add.w	r2, r7, #14
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	2137      	movs	r1, #55	; 0x37
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7fe fa12 	bl	8006400 <a_mpu6050_iic_write>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <mpu6050_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	4805      	ldr	r0, [pc, #20]	; (8008000 <mpu6050_set_interrupt_latch+0x9c>)
 8007fec:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e000      	b.n	8007ff4 <mpu6050_set_interrupt_latch+0x90>
    }

    return 0;                                                                               /* success return 0 */
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	08010d9c 	.word	0x08010d9c
 8008000:	08010dc4 	.word	0x08010dc4

08008004 <mpu6050_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_read_clear(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	460b      	mov	r3, r1
 800800e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <mpu6050_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                           /* return error */
 8008016:	2302      	movs	r3, #2
 8008018:	e039      	b.n	800808e <mpu6050_set_interrupt_read_clear+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008020:	2b01      	cmp	r3, #1
 8008022:	d001      	beq.n	8008028 <mpu6050_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                           /* return error */
 8008024:	2303      	movs	r3, #3
 8008026:	e032      	b.n	800808e <mpu6050_set_interrupt_read_clear+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8008028:	f107 020e 	add.w	r2, r7, #14
 800802c:	2301      	movs	r3, #1
 800802e:	2137      	movs	r1, #55	; 0x37
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7fe f9c9 	bl	80063c8 <a_mpu6050_iic_read>
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d005      	beq.n	800804c <mpu6050_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	4814      	ldr	r0, [pc, #80]	; (8008098 <mpu6050_set_interrupt_read_clear+0x94>)
 8008046:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8008048:	2301      	movs	r3, #1
 800804a:	e020      	b.n	800808e <mpu6050_set_interrupt_read_clear+0x8a>
    }
    prev &= ~(1 << 4);                                                                      /* clear config */
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	f023 0310 	bic.w	r3, r3, #16
 8008052:	b2db      	uxtb	r3, r3
 8008054:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                    /* set config */
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	b25a      	sxtb	r2, r3
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	b25b      	sxtb	r3, r3
 8008060:	4313      	orrs	r3, r2
 8008062:	b25b      	sxtb	r3, r3
 8008064:	b2db      	uxtb	r3, r3
 8008066:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008068:	f107 020e 	add.w	r2, r7, #14
 800806c:	2301      	movs	r3, #1
 800806e:	2137      	movs	r1, #55	; 0x37
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7fe f9c5 	bl	8006400 <a_mpu6050_iic_write>
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d005      	beq.n	800808c <mpu6050_set_interrupt_read_clear+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	4805      	ldr	r0, [pc, #20]	; (800809c <mpu6050_set_interrupt_read_clear+0x98>)
 8008086:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8008088:	2301      	movs	r3, #1
 800808a:	e000      	b.n	800808e <mpu6050_set_interrupt_read_clear+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	08010d9c 	.word	0x08010d9c
 800809c:	08010dc4 	.word	0x08010dc4

080080a0 <mpu6050_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fsync_interrupt_level(mpu6050_handle_t *handle, mpu6050_pin_level_t level)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <mpu6050_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                           /* return error */
 80080b2:	2302      	movs	r3, #2
 80080b4:	e039      	b.n	800812a <mpu6050_set_fsync_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d001      	beq.n	80080c4 <mpu6050_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                           /* return error */
 80080c0:	2303      	movs	r3, #3
 80080c2:	e032      	b.n	800812a <mpu6050_set_fsync_interrupt_level+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80080c4:	f107 020e 	add.w	r2, r7, #14
 80080c8:	2301      	movs	r3, #1
 80080ca:	2137      	movs	r1, #55	; 0x37
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7fe f97b 	bl	80063c8 <a_mpu6050_iic_read>
 80080d2:	4603      	mov	r3, r0
 80080d4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d005      	beq.n	80080e8 <mpu6050_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	4814      	ldr	r0, [pc, #80]	; (8008134 <mpu6050_set_fsync_interrupt_level+0x94>)
 80080e2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80080e4:	2301      	movs	r3, #1
 80080e6:	e020      	b.n	800812a <mpu6050_set_fsync_interrupt_level+0x8a>
    }
    prev &= ~(1 << 3);                                                                      /* clear config */
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	f023 0308 	bic.w	r3, r3, #8
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                     /* set config */
 80080f2:	78fb      	ldrb	r3, [r7, #3]
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	b25a      	sxtb	r2, r3
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	b25b      	sxtb	r3, r3
 80080fc:	4313      	orrs	r3, r2
 80080fe:	b25b      	sxtb	r3, r3
 8008100:	b2db      	uxtb	r3, r3
 8008102:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8008104:	f107 020e 	add.w	r2, r7, #14
 8008108:	2301      	movs	r3, #1
 800810a:	2137      	movs	r1, #55	; 0x37
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7fe f977 	bl	8006400 <a_mpu6050_iic_write>
 8008112:	4603      	mov	r3, r0
 8008114:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8008116:	7bfb      	ldrb	r3, [r7, #15]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <mpu6050_set_fsync_interrupt_level+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	4805      	ldr	r0, [pc, #20]	; (8008138 <mpu6050_set_fsync_interrupt_level+0x98>)
 8008122:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8008124:	2301      	movs	r3, #1
 8008126:	e000      	b.n	800812a <mpu6050_set_fsync_interrupt_level+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	08010d9c 	.word	0x08010d9c
 8008138:	08010dc4 	.word	0x08010dc4

0800813c <mpu6050_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fsync_interrupt(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <mpu6050_set_fsync_interrupt+0x16>
    {
        return 2;                                                                           /* return error */
 800814e:	2302      	movs	r3, #2
 8008150:	e039      	b.n	80081c6 <mpu6050_set_fsync_interrupt+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008158:	2b01      	cmp	r3, #1
 800815a:	d001      	beq.n	8008160 <mpu6050_set_fsync_interrupt+0x24>
    {
        return 3;                                                                           /* return error */
 800815c:	2303      	movs	r3, #3
 800815e:	e032      	b.n	80081c6 <mpu6050_set_fsync_interrupt+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8008160:	f107 020e 	add.w	r2, r7, #14
 8008164:	2301      	movs	r3, #1
 8008166:	2137      	movs	r1, #55	; 0x37
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7fe f92d 	bl	80063c8 <a_mpu6050_iic_read>
 800816e:	4603      	mov	r3, r0
 8008170:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8008172:	7bfb      	ldrb	r3, [r7, #15]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d005      	beq.n	8008184 <mpu6050_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	4814      	ldr	r0, [pc, #80]	; (80081d0 <mpu6050_set_fsync_interrupt+0x94>)
 800817e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8008180:	2301      	movs	r3, #1
 8008182:	e020      	b.n	80081c6 <mpu6050_set_fsync_interrupt+0x8a>
    }
    prev &= ~(1 << 2);                                                                      /* clear config */
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	f023 0304 	bic.w	r3, r3, #4
 800818a:	b2db      	uxtb	r3, r3
 800818c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                    /* set config */
 800818e:	78fb      	ldrb	r3, [r7, #3]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	b25a      	sxtb	r2, r3
 8008194:	7bbb      	ldrb	r3, [r7, #14]
 8008196:	b25b      	sxtb	r3, r3
 8008198:	4313      	orrs	r3, r2
 800819a:	b25b      	sxtb	r3, r3
 800819c:	b2db      	uxtb	r3, r3
 800819e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80081a0:	f107 020e 	add.w	r2, r7, #14
 80081a4:	2301      	movs	r3, #1
 80081a6:	2137      	movs	r1, #55	; 0x37
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fe f929 	bl	8006400 <a_mpu6050_iic_write>
 80081ae:	4603      	mov	r3, r0
 80081b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d005      	beq.n	80081c4 <mpu6050_set_fsync_interrupt+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	4805      	ldr	r0, [pc, #20]	; (80081d4 <mpu6050_set_fsync_interrupt+0x98>)
 80081be:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80081c0:	2301      	movs	r3, #1
 80081c2:	e000      	b.n	80081c6 <mpu6050_set_fsync_interrupt+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	08010d9c 	.word	0x08010d9c
 80081d4:	08010dc4 	.word	0x08010dc4

080081d8 <mpu6050_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_iic_bypass(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <mpu6050_set_iic_bypass+0x16>
    {
        return 2;                                                                           /* return error */
 80081ea:	2302      	movs	r3, #2
 80081ec:	e039      	b.n	8008262 <mpu6050_set_iic_bypass+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d001      	beq.n	80081fc <mpu6050_set_iic_bypass+0x24>
    {
        return 3;                                                                           /* return error */
 80081f8:	2303      	movs	r3, #3
 80081fa:	e032      	b.n	8008262 <mpu6050_set_iic_bypass+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 80081fc:	f107 020e 	add.w	r2, r7, #14
 8008200:	2301      	movs	r3, #1
 8008202:	2137      	movs	r1, #55	; 0x37
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7fe f8df 	bl	80063c8 <a_mpu6050_iic_read>
 800820a:	4603      	mov	r3, r0
 800820c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <mpu6050_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	699b      	ldr	r3, [r3, #24]
 8008218:	4814      	ldr	r0, [pc, #80]	; (800826c <mpu6050_set_iic_bypass+0x94>)
 800821a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 800821c:	2301      	movs	r3, #1
 800821e:	e020      	b.n	8008262 <mpu6050_set_iic_bypass+0x8a>
    }
    prev &= ~(1 << 1);                                                                      /* clear config */
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	f023 0302 	bic.w	r3, r3, #2
 8008226:	b2db      	uxtb	r3, r3
 8008228:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                    /* set config */
 800822a:	78fb      	ldrb	r3, [r7, #3]
 800822c:	005b      	lsls	r3, r3, #1
 800822e:	b25a      	sxtb	r2, r3
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	b25b      	sxtb	r3, r3
 8008234:	4313      	orrs	r3, r2
 8008236:	b25b      	sxtb	r3, r3
 8008238:	b2db      	uxtb	r3, r3
 800823a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800823c:	f107 020e 	add.w	r2, r7, #14
 8008240:	2301      	movs	r3, #1
 8008242:	2137      	movs	r1, #55	; 0x37
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7fe f8db 	bl	8006400 <a_mpu6050_iic_write>
 800824a:	4603      	mov	r3, r0
 800824c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d005      	beq.n	8008260 <mpu6050_set_iic_bypass+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	4805      	ldr	r0, [pc, #20]	; (8008270 <mpu6050_set_iic_bypass+0x98>)
 800825a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 800825c:	2301      	movs	r3, #1
 800825e:	e000      	b.n	8008262 <mpu6050_set_iic_bypass+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	08010d9c 	.word	0x08010d9c
 8008270:	08010dc4 	.word	0x08010dc4

08008274 <mpu6050_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt(mpu6050_handle_t *handle, mpu6050_interrupt_t type, mpu6050_bool_t enable)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
 8008280:	4613      	mov	r3, r2
 8008282:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <mpu6050_set_interrupt+0x1a>
    {
        return 2;                                                                           /* return error */
 800828a:	2302      	movs	r3, #2
 800828c:	e043      	b.n	8008316 <mpu6050_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008294:	2b01      	cmp	r3, #1
 8008296:	d001      	beq.n	800829c <mpu6050_set_interrupt+0x28>
    {
        return 3;                                                                           /* return error */
 8008298:	2303      	movs	r3, #3
 800829a:	e03c      	b.n	8008316 <mpu6050_set_interrupt+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 800829c:	f107 020e 	add.w	r2, r7, #14
 80082a0:	2301      	movs	r3, #1
 80082a2:	2138      	movs	r1, #56	; 0x38
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7fe f88f 	bl	80063c8 <a_mpu6050_iic_read>
 80082aa:	4603      	mov	r3, r0
 80082ac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <mpu6050_set_interrupt+0x4c>
    {
        handle->debug_print("mpu6050: read interrupt enable failed.\n");                    /* read interrupt enable failed */
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	4819      	ldr	r0, [pc, #100]	; (8008320 <mpu6050_set_interrupt+0xac>)
 80082ba:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80082bc:	2301      	movs	r3, #1
 80082be:	e02a      	b.n	8008316 <mpu6050_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                                   /* clear config */
 80082c0:	78fb      	ldrb	r3, [r7, #3]
 80082c2:	2201      	movs	r2, #1
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	b25b      	sxtb	r3, r3
 80082ca:	43db      	mvns	r3, r3
 80082cc:	b25a      	sxtb	r2, r3
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	b25b      	sxtb	r3, r3
 80082d2:	4013      	ands	r3, r2
 80082d4:	b25b      	sxtb	r3, r3
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                                 /* set config */
 80082da:	78ba      	ldrb	r2, [r7, #2]
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	fa02 f303 	lsl.w	r3, r2, r3
 80082e2:	b25a      	sxtb	r2, r3
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	b25b      	sxtb	r3, r3
 80082e8:	4313      	orrs	r3, r2
 80082ea:	b25b      	sxtb	r3, r3
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 80082f0:	f107 020e 	add.w	r2, r7, #14
 80082f4:	2301      	movs	r3, #1
 80082f6:	2138      	movs	r1, #56	; 0x38
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7fe f881 	bl	8006400 <a_mpu6050_iic_write>
 80082fe:	4603      	mov	r3, r0
 8008300:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <mpu6050_set_interrupt+0xa0>
    {
        handle->debug_print("mpu6050: write interrupt enable failed.\n");                   /* write interrupt enable failed */
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	4805      	ldr	r0, [pc, #20]	; (8008324 <mpu6050_set_interrupt+0xb0>)
 800830e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8008310:	2301      	movs	r3, #1
 8008312:	e000      	b.n	8008316 <mpu6050_set_interrupt+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	08010dec 	.word	0x08010dec
 8008324:	08010e14 	.word	0x08010e14

08008328 <mpu6050_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu6050_interface_iic_init(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	af00      	add	r7, sp, #0
	I2C1_Init();
 800832c:	f000 fcb6 	bl	8008c9c <I2C1_Init>
    return 0;
 8008330:	2300      	movs	r3, #0
}
 8008332:	4618      	mov	r0, r3
 8008334:	bd80      	pop	{r7, pc}

08008336 <mpu6050_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu6050_interface_iic_deinit(void)
{
 8008336:	b480      	push	{r7}
 8008338:	af00      	add	r7, sp, #0
    return 0;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <mpu6050_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6050_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af02      	add	r7, sp, #8
 800834e:	603a      	str	r2, [r7, #0]
 8008350:	461a      	mov	r2, r3
 8008352:	4603      	mov	r3, r0
 8008354:	71fb      	strb	r3, [r7, #7]
 8008356:	460b      	mov	r3, r1
 8008358:	71bb      	strb	r3, [r7, #6]
 800835a:	4613      	mov	r3, r2
 800835c:	80bb      	strh	r3, [r7, #4]
    return i2c_reg_read(MPU_I2C, addr, reg, buf, len, MPU_TIMOUT);
 800835e:	79ba      	ldrb	r2, [r7, #6]
 8008360:	79f9      	ldrb	r1, [r7, #7]
 8008362:	2364      	movs	r3, #100	; 0x64
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	88bb      	ldrh	r3, [r7, #4]
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	4803      	ldr	r0, [pc, #12]	; (800837c <mpu6050_interface_iic_read+0x34>)
 800836e:	f000 fe05 	bl	8008f7c <i2c_reg_read>
 8008372:	4603      	mov	r3, r0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	40005400 	.word	0x40005400

08008380 <mpu6050_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6050_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af02      	add	r7, sp, #8
 8008386:	603a      	str	r2, [r7, #0]
 8008388:	461a      	mov	r2, r3
 800838a:	4603      	mov	r3, r0
 800838c:	71fb      	strb	r3, [r7, #7]
 800838e:	460b      	mov	r3, r1
 8008390:	71bb      	strb	r3, [r7, #6]
 8008392:	4613      	mov	r3, r2
 8008394:	80bb      	strh	r3, [r7, #4]
    return i2c_reg_write(MPU_I2C, addr, reg, buf, len, MPU_TIMOUT);
 8008396:	79ba      	ldrb	r2, [r7, #6]
 8008398:	79f9      	ldrb	r1, [r7, #7]
 800839a:	2364      	movs	r3, #100	; 0x64
 800839c:	9301      	str	r3, [sp, #4]
 800839e:	88bb      	ldrh	r3, [r7, #4]
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	4803      	ldr	r0, [pc, #12]	; (80083b4 <mpu6050_interface_iic_write+0x34>)
 80083a6:	f000 fd17 	bl	8008dd8 <i2c_reg_write>
 80083aa:	4603      	mov	r3, r0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	40005400 	.word	0x40005400

080083b8 <mpu6050_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void mpu6050_interface_delay_ms(uint32_t ms)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
	delay_ms(ms);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f89d 	bl	8008500 <delay_ms>
}
 80083c6:	bf00      	nop
 80083c8:	3708      	adds	r7, #8
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <mpu6050_interface_debug_print>:
 * @param[in] fmt is the format data
 * @note      none
 */

void mpu6050_interface_debug_print(const char *const fmt, ...)
{
 80083ce:	b40f      	push	{r0, r1, r2, r3}
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b0a2      	sub	sp, #136	; 0x88
 80083d4:	af00      	add	r7, sp, #0
	char str[MPU_DBG_BUFF_SIZE];
	va_list args;
	va_start(args, fmt);
 80083d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80083da:	607b      	str	r3, [r7, #4]
	vsprintf(str, fmt,args);
 80083dc:	f107 0308 	add.w	r3, r7, #8
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80083e6:	4618      	mov	r0, r3
 80083e8:	f007 f86a 	bl	800f4c0 <vsiprintf>
	printf(str);
 80083ec:	f107 0308 	add.w	r3, r7, #8
 80083f0:	4618      	mov	r0, r3
 80083f2:	f006 ff9d 	bl	800f330 <iprintf>
}
 80083f6:	bf00      	nop
 80083f8:	3788      	adds	r7, #136	; 0x88
 80083fa:	46bd      	mov	sp, r7
 80083fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008400:	b004      	add	sp, #16
 8008402:	4770      	bx	lr

08008404 <mpu6050_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type is the irq type
 * @note      none
 */
void mpu6050_interface_receive_callback(uint8_t type)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	71fb      	strb	r3, [r7, #7]
    switch (type)
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	2b06      	cmp	r3, #6
 8008412:	d825      	bhi.n	8008460 <mpu6050_interface_receive_callback+0x5c>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <mpu6050_interface_receive_callback+0x18>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008459 	.word	0x08008459
 8008420:	08008451 	.word	0x08008451
 8008424:	08008461 	.word	0x08008461
 8008428:	08008449 	.word	0x08008449
 800842c:	08008441 	.word	0x08008441
 8008430:	08008461 	.word	0x08008461
 8008434:	08008439 	.word	0x08008439
    {
        case MPU6050_INTERRUPT_MOTION :
        {
            mpu6050_interface_debug_print("mpu6050: irq motion.\n");
 8008438:	480d      	ldr	r0, [pc, #52]	; (8008470 <mpu6050_interface_receive_callback+0x6c>)
 800843a:	f7ff ffc8 	bl	80083ce <mpu6050_interface_debug_print>

            break;
 800843e:	e013      	b.n	8008468 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu6050_interface_debug_print("mpu6050: irq fifo overflow.\n");
 8008440:	480c      	ldr	r0, [pc, #48]	; (8008474 <mpu6050_interface_receive_callback+0x70>)
 8008442:	f7ff ffc4 	bl	80083ce <mpu6050_interface_debug_print>

            break;
 8008446:	e00f      	b.n	8008468 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_I2C_MAST :
        {
            mpu6050_interface_debug_print("mpu6050: irq i2c master.\n");
 8008448:	480b      	ldr	r0, [pc, #44]	; (8008478 <mpu6050_interface_receive_callback+0x74>)
 800844a:	f7ff ffc0 	bl	80083ce <mpu6050_interface_debug_print>

            break;
 800844e:	e00b      	b.n	8008468 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_DMP :
        {
            mpu6050_interface_debug_print("mpu6050: irq dmp\n");
 8008450:	480a      	ldr	r0, [pc, #40]	; (800847c <mpu6050_interface_receive_callback+0x78>)
 8008452:	f7ff ffbc 	bl	80083ce <mpu6050_interface_debug_print>

            break;
 8008456:	e007      	b.n	8008468 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_DATA_READY :
        {
            mpu6050_interface_debug_print("mpu6050: irq data ready\n");
 8008458:	4809      	ldr	r0, [pc, #36]	; (8008480 <mpu6050_interface_receive_callback+0x7c>)
 800845a:	f7ff ffb8 	bl	80083ce <mpu6050_interface_debug_print>

            break;
 800845e:	e003      	b.n	8008468 <mpu6050_interface_receive_callback+0x64>
        }
        default :
        {
            mpu6050_interface_debug_print("mpu6050: irq unknown code.\n");
 8008460:	4808      	ldr	r0, [pc, #32]	; (8008484 <mpu6050_interface_receive_callback+0x80>)
 8008462:	f7ff ffb4 	bl	80083ce <mpu6050_interface_debug_print>

            break;
 8008466:	bf00      	nop
        }
    }
}
 8008468:	bf00      	nop
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	080118b4 	.word	0x080118b4
 8008474:	080118cc 	.word	0x080118cc
 8008478:	080118ec 	.word	0x080118ec
 800847c:	08011908 	.word	0x08011908
 8008480:	0801191c 	.word	0x0801191c
 8008484:	08011938 	.word	0x08011938

08008488 <GetTick>:
/**
 * @brief Retorna el valor de la variabla ticks
 * @param none
 * @return ticks
 */
static uint32_t GetTick(void){
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0

	return uwTick;
 800848c:	4b03      	ldr	r3, [pc, #12]	; (800849c <GetTick+0x14>)
 800848e:	681b      	ldr	r3, [r3, #0]
}
 8008490:	4618      	mov	r0, r3
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	20000180 	.word	0x20000180

080084a0 <delay_init_it>:

/*Function defines ------------------------------------*/
void delay_init_it(void){
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
	uint32_t temp;
	/*deshabilitar la systick*/
	SysTick->CTRL = 0;
 80084a6:	4b13      	ldr	r3, [pc, #76]	; (80084f4 <delay_init_it+0x54>)
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]
	SystemCoreClockUpdate();
 80084ac:	f006 fbca 	bl	800ec44 <SystemCoreClockUpdate>
	temp = SystemCoreClock / 1000UL;
 80084b0:	4b11      	ldr	r3, [pc, #68]	; (80084f8 <delay_init_it+0x58>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a11      	ldr	r2, [pc, #68]	; (80084fc <delay_init_it+0x5c>)
 80084b6:	fba2 2303 	umull	r2, r3, r2, r3
 80084ba:	099b      	lsrs	r3, r3, #6
 80084bc:	607b      	str	r3, [r7, #4]
	SysTick->LOAD = temp - 1;
 80084be:	4a0d      	ldr	r2, [pc, #52]	; (80084f4 <delay_init_it+0x54>)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3b01      	subs	r3, #1
 80084c4:	6053      	str	r3, [r2, #4]
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;	//SYSCLK
 80084c6:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <delay_init_it+0x54>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a0a      	ldr	r2, [pc, #40]	; (80084f4 <delay_init_it+0x54>)
 80084cc:	f043 0304 	orr.w	r3, r3, #4
 80084d0:	6013      	str	r3, [r2, #0]

	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;		//habilitando la IT del systick
 80084d2:	4b08      	ldr	r3, [pc, #32]	; (80084f4 <delay_init_it+0x54>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a07      	ldr	r2, [pc, #28]	; (80084f4 <delay_init_it+0x54>)
 80084d8:	f043 0302 	orr.w	r3, r3, #2
 80084dc:	6013      	str	r3, [r2, #0]

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 80084de:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <delay_init_it+0x54>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a04      	ldr	r2, [pc, #16]	; (80084f4 <delay_init_it+0x54>)
 80084e4:	f043 0301 	orr.w	r3, r3, #1
 80084e8:	6013      	str	r3, [r2, #0]
	return;
 80084ea:	bf00      	nop
}
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	e000e010 	.word	0xe000e010
 80084f8:	200000a0 	.word	0x200000a0
 80084fc:	10624dd3 	.word	0x10624dd3

08008500 <delay_ms>:

/**
 * @brief funcion encargada de generar retardos en ms
 * @param [delay]: tiempo de retado en ms deseado
 */
void delay_ms(uint32_t delay){
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = GetTick();
 8008508:	f7ff ffbe 	bl	8008488 <GetTick>
 800850c:	60f8      	str	r0, [r7, #12]
	uint32_t wait = delay;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	60bb      	str	r3, [r7, #8]
	//generacion del retardo
	while((GetTick() - tickstart)<wait);
 8008512:	bf00      	nop
 8008514:	f7ff ffb8 	bl	8008488 <GetTick>
 8008518:	4602      	mov	r2, r0
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	1ad3      	subs	r3, r2, r3
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	429a      	cmp	r2, r3
 8008522:	d8f7      	bhi.n	8008514 <delay_ms+0x14>

	return;
 8008524:	bf00      	nop
}
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <millis>:

/**
 * @brief funcion similar a la funcion de arduino
 */
uint32_t millis(void){
 800852c:	b580      	push	{r7, lr}
 800852e:	af00      	add	r7, sp, #0
	return GetTick();
 8008530:	f7ff ffaa 	bl	8008488 <GetTick>
 8008534:	4603      	mov	r3, r0
}
 8008536:	4618      	mov	r0, r3
 8008538:	bd80      	pop	{r7, pc}
	...

0800853c <mpu6050_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      none
 */
uint8_t mpu6050_basic_init(mpu6050_address_t addr_pin)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	71fb      	strb	r3, [r7, #7]
    uint8_t res;

    /* link interface function */
    DRIVER_MPU6050_LINK_INIT(&gs_handle, mpu6050_handle_t);
 8008546:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800854a:	2100      	movs	r1, #0
 800854c:	48b0      	ldr	r0, [pc, #704]	; (8008810 <mpu6050_basic_init+0x2d4>)
 800854e:	f007 f871 	bl	800f634 <memset>
    DRIVER_MPU6050_LINK_IIC_INIT(&gs_handle, mpu6050_interface_iic_init);
 8008552:	4baf      	ldr	r3, [pc, #700]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008554:	4aaf      	ldr	r2, [pc, #700]	; (8008814 <mpu6050_basic_init+0x2d8>)
 8008556:	605a      	str	r2, [r3, #4]
    DRIVER_MPU6050_LINK_IIC_DEINIT(&gs_handle, mpu6050_interface_iic_deinit);
 8008558:	4bad      	ldr	r3, [pc, #692]	; (8008810 <mpu6050_basic_init+0x2d4>)
 800855a:	4aaf      	ldr	r2, [pc, #700]	; (8008818 <mpu6050_basic_init+0x2dc>)
 800855c:	609a      	str	r2, [r3, #8]
    DRIVER_MPU6050_LINK_IIC_READ(&gs_handle, mpu6050_interface_iic_read);
 800855e:	4bac      	ldr	r3, [pc, #688]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008560:	4aae      	ldr	r2, [pc, #696]	; (800881c <mpu6050_basic_init+0x2e0>)
 8008562:	60da      	str	r2, [r3, #12]
    DRIVER_MPU6050_LINK_IIC_WRITE(&gs_handle, mpu6050_interface_iic_write);
 8008564:	4baa      	ldr	r3, [pc, #680]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008566:	4aae      	ldr	r2, [pc, #696]	; (8008820 <mpu6050_basic_init+0x2e4>)
 8008568:	611a      	str	r2, [r3, #16]
    DRIVER_MPU6050_LINK_DELAY_MS(&gs_handle, mpu6050_interface_delay_ms);
 800856a:	4ba9      	ldr	r3, [pc, #676]	; (8008810 <mpu6050_basic_init+0x2d4>)
 800856c:	4aad      	ldr	r2, [pc, #692]	; (8008824 <mpu6050_basic_init+0x2e8>)
 800856e:	615a      	str	r2, [r3, #20]
    DRIVER_MPU6050_LINK_DEBUG_PRINT(&gs_handle, mpu6050_interface_debug_print);
 8008570:	4ba7      	ldr	r3, [pc, #668]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008572:	4aad      	ldr	r2, [pc, #692]	; (8008828 <mpu6050_basic_init+0x2ec>)
 8008574:	619a      	str	r2, [r3, #24]
    DRIVER_MPU6050_LINK_RECEIVE_CALLBACK(&gs_handle, mpu6050_interface_receive_callback);
 8008576:	4ba6      	ldr	r3, [pc, #664]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008578:	4aac      	ldr	r2, [pc, #688]	; (800882c <mpu6050_basic_init+0x2f0>)
 800857a:	61da      	str	r2, [r3, #28]

    /* set the addr pin */
    res = mpu6050_set_addr_pin(&gs_handle, addr_pin);
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	4619      	mov	r1, r3
 8008580:	48a3      	ldr	r0, [pc, #652]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008582:	f7fd ff59 	bl	8006438 <mpu6050_set_addr_pin>
 8008586:	4603      	mov	r3, r0
 8008588:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d004      	beq.n	800859a <mpu6050_basic_init+0x5e>
    {
        mpu6050_interface_debug_print("mpu6050: set addr pin failed.\n");
 8008590:	48a7      	ldr	r0, [pc, #668]	; (8008830 <mpu6050_basic_init+0x2f4>)
 8008592:	f7ff ff1c 	bl	80083ce <mpu6050_interface_debug_print>

        return 1;
 8008596:	2301      	movs	r3, #1
 8008598:	e31f      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* init */
    res = mpu6050_init(&gs_handle);
 800859a:	489d      	ldr	r0, [pc, #628]	; (8008810 <mpu6050_basic_init+0x2d4>)
 800859c:	f7fd ff62 	bl	8006464 <mpu6050_init>
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d004      	beq.n	80085b4 <mpu6050_basic_init+0x78>
    {
        mpu6050_interface_debug_print("mpu6050: init failed.\n");
 80085aa:	48a2      	ldr	r0, [pc, #648]	; (8008834 <mpu6050_basic_init+0x2f8>)
 80085ac:	f7ff ff0f 	bl	80083ce <mpu6050_interface_debug_print>

        return 1;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e312      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* delay 100 ms */
    mpu6050_interface_delay_ms(100);
 80085b4:	2064      	movs	r0, #100	; 0x64
 80085b6:	f7ff feff 	bl	80083b8 <mpu6050_interface_delay_ms>

    /* disable sleep */
    res = mpu6050_set_sleep(&gs_handle, MPU6050_BOOL_FALSE);
 80085ba:	2100      	movs	r1, #0
 80085bc:	4894      	ldr	r0, [pc, #592]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80085be:	f7ff f8d3 	bl	8007768 <mpu6050_set_sleep>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d007      	beq.n	80085dc <mpu6050_basic_init+0xa0>
    {
        mpu6050_interface_debug_print("mpu6050: set sleep failed.\n");
 80085cc:	489a      	ldr	r0, [pc, #616]	; (8008838 <mpu6050_basic_init+0x2fc>)
 80085ce:	f7ff fefe 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80085d2:	488f      	ldr	r0, [pc, #572]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80085d4:	f7fe f828 	bl	8006628 <mpu6050_deinit>

        return 1;
 80085d8:	2301      	movs	r3, #1
 80085da:	e2fe      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default clock source */
    res = mpu6050_set_clock_source(&gs_handle, MPU6050_BASIC_DEFAULT_CLOCK_SOURCE);
 80085dc:	2101      	movs	r1, #1
 80085de:	488c      	ldr	r0, [pc, #560]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80085e0:	f7fe ffda 	bl	8007598 <mpu6050_set_clock_source>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d007      	beq.n	80085fe <mpu6050_basic_init+0xc2>
    {
        mpu6050_interface_debug_print("mpu6050: set clock source failed.\n");
 80085ee:	4893      	ldr	r0, [pc, #588]	; (800883c <mpu6050_basic_init+0x300>)
 80085f0:	f7ff feed 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80085f4:	4886      	ldr	r0, [pc, #536]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80085f6:	f7fe f817 	bl	8006628 <mpu6050_deinit>

        return 1;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e2ed      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default rate */
    res = mpu6050_set_sample_rate_divider(&gs_handle, 1000 / (MPU6050_BASIC_DEFAULT_RATE - 1));
 80085fe:	2114      	movs	r1, #20
 8008600:	4883      	ldr	r0, [pc, #524]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008602:	f7ff f9a7 	bl	8007954 <mpu6050_set_sample_rate_divider>
 8008606:	4603      	mov	r3, r0
 8008608:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800860a:	7bfb      	ldrb	r3, [r7, #15]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d007      	beq.n	8008620 <mpu6050_basic_init+0xe4>
    {
        mpu6050_interface_debug_print("mpu6050: set sample rate divider failed.\n");
 8008610:	488b      	ldr	r0, [pc, #556]	; (8008840 <mpu6050_basic_init+0x304>)
 8008612:	f7ff fedc 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008616:	487e      	ldr	r0, [pc, #504]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008618:	f7fe f806 	bl	8006628 <mpu6050_deinit>

        return 1;
 800861c:	2301      	movs	r3, #1
 800861e:	e2dc      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default low pass filter */
    res = mpu6050_set_low_pass_filter(&gs_handle, MPU6050_BASIC_DEFAULT_LOW_PASS_FILTER);
 8008620:	2103      	movs	r1, #3
 8008622:	487b      	ldr	r0, [pc, #492]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008624:	f7ff fa0e 	bl	8007a44 <mpu6050_set_low_pass_filter>
 8008628:	4603      	mov	r3, r0
 800862a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d007      	beq.n	8008642 <mpu6050_basic_init+0x106>
    {
        mpu6050_interface_debug_print("mpu6050: set low pass filter failed.\n");
 8008632:	4884      	ldr	r0, [pc, #528]	; (8008844 <mpu6050_basic_init+0x308>)
 8008634:	f7ff fecb 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008638:	4875      	ldr	r0, [pc, #468]	; (8008810 <mpu6050_basic_init+0x2d4>)
 800863a:	f7fd fff5 	bl	8006628 <mpu6050_deinit>

        return 1;
 800863e:	2301      	movs	r3, #1
 8008640:	e2cb      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* enable temperature sensor */
    res = mpu6050_set_temperature_sensor(&gs_handle, MPU6050_BOOL_TRUE);
 8008642:	2101      	movs	r1, #1
 8008644:	4872      	ldr	r0, [pc, #456]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008646:	f7fe fff1 	bl	800762c <mpu6050_set_temperature_sensor>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d007      	beq.n	8008664 <mpu6050_basic_init+0x128>
    {
        mpu6050_interface_debug_print("mpu6050: set temperature sensor failed.\n");
 8008654:	487c      	ldr	r0, [pc, #496]	; (8008848 <mpu6050_basic_init+0x30c>)
 8008656:	f7ff feba 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800865a:	486d      	ldr	r0, [pc, #436]	; (8008810 <mpu6050_basic_init+0x2d4>)
 800865c:	f7fd ffe4 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008660:	2301      	movs	r3, #1
 8008662:	e2ba      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default cycle wake up */
    res = mpu6050_set_cycle_wake_up(&gs_handle, MPU6050_BASIC_DEFAULT_CYCLE_WAKE_UP);
 8008664:	2100      	movs	r1, #0
 8008666:	486a      	ldr	r0, [pc, #424]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008668:	f7ff f830 	bl	80076cc <mpu6050_set_cycle_wake_up>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d007      	beq.n	8008686 <mpu6050_basic_init+0x14a>
    {
        mpu6050_interface_debug_print("mpu6050: set cycle wake up failed.\n");
 8008676:	4875      	ldr	r0, [pc, #468]	; (800884c <mpu6050_basic_init+0x310>)
 8008678:	f7ff fea9 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800867c:	4864      	ldr	r0, [pc, #400]	; (8008810 <mpu6050_basic_init+0x2d4>)
 800867e:	f7fd ffd3 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008682:	2301      	movs	r3, #1
 8008684:	e2a9      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default wake up frequency */
    res = mpu6050_set_wake_up_frequency(&gs_handle, MPU6050_BASIC_DEFAULT_WAKE_UP_FREQUENCY);
 8008686:	2100      	movs	r1, #0
 8008688:	4861      	ldr	r0, [pc, #388]	; (8008810 <mpu6050_basic_init+0x2d4>)
 800868a:	f7ff f915 	bl	80078b8 <mpu6050_set_wake_up_frequency>
 800868e:	4603      	mov	r3, r0
 8008690:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008692:	7bfb      	ldrb	r3, [r7, #15]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d007      	beq.n	80086a8 <mpu6050_basic_init+0x16c>
    {
        mpu6050_interface_debug_print("mpu6050: set wake up frequency failed.\n");
 8008698:	486d      	ldr	r0, [pc, #436]	; (8008850 <mpu6050_basic_init+0x314>)
 800869a:	f7ff fe98 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800869e:	485c      	ldr	r0, [pc, #368]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80086a0:	f7fd ffc2 	bl	8006628 <mpu6050_deinit>

        return 1;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e298      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* enable acc x */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_X, MPU6050_BOOL_FALSE);
 80086a8:	2200      	movs	r2, #0
 80086aa:	2105      	movs	r1, #5
 80086ac:	4858      	ldr	r0, [pc, #352]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80086ae:	f7ff f8a9 	bl	8007804 <mpu6050_set_standby_mode>
 80086b2:	4603      	mov	r3, r0
 80086b4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d007      	beq.n	80086cc <mpu6050_basic_init+0x190>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 80086bc:	4865      	ldr	r0, [pc, #404]	; (8008854 <mpu6050_basic_init+0x318>)
 80086be:	f7ff fe86 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80086c2:	4853      	ldr	r0, [pc, #332]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80086c4:	f7fd ffb0 	bl	8006628 <mpu6050_deinit>

        return 1;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e286      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* enable acc y */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_Y, MPU6050_BOOL_FALSE);
 80086cc:	2200      	movs	r2, #0
 80086ce:	2104      	movs	r1, #4
 80086d0:	484f      	ldr	r0, [pc, #316]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80086d2:	f7ff f897 	bl	8007804 <mpu6050_set_standby_mode>
 80086d6:	4603      	mov	r3, r0
 80086d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d007      	beq.n	80086f0 <mpu6050_basic_init+0x1b4>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 80086e0:	485c      	ldr	r0, [pc, #368]	; (8008854 <mpu6050_basic_init+0x318>)
 80086e2:	f7ff fe74 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80086e6:	484a      	ldr	r0, [pc, #296]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80086e8:	f7fd ff9e 	bl	8006628 <mpu6050_deinit>

        return 1;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e274      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* enable acc z */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_Z, MPU6050_BOOL_FALSE);
 80086f0:	2200      	movs	r2, #0
 80086f2:	2103      	movs	r1, #3
 80086f4:	4846      	ldr	r0, [pc, #280]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80086f6:	f7ff f885 	bl	8007804 <mpu6050_set_standby_mode>
 80086fa:	4603      	mov	r3, r0
 80086fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d007      	beq.n	8008714 <mpu6050_basic_init+0x1d8>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 8008704:	4853      	ldr	r0, [pc, #332]	; (8008854 <mpu6050_basic_init+0x318>)
 8008706:	f7ff fe62 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800870a:	4841      	ldr	r0, [pc, #260]	; (8008810 <mpu6050_basic_init+0x2d4>)
 800870c:	f7fd ff8c 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008710:	2301      	movs	r3, #1
 8008712:	e262      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* enable gyro x */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_X, MPU6050_BOOL_FALSE);
 8008714:	2200      	movs	r2, #0
 8008716:	2102      	movs	r1, #2
 8008718:	483d      	ldr	r0, [pc, #244]	; (8008810 <mpu6050_basic_init+0x2d4>)
 800871a:	f7ff f873 	bl	8007804 <mpu6050_set_standby_mode>
 800871e:	4603      	mov	r3, r0
 8008720:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008722:	7bfb      	ldrb	r3, [r7, #15]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d007      	beq.n	8008738 <mpu6050_basic_init+0x1fc>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 8008728:	484a      	ldr	r0, [pc, #296]	; (8008854 <mpu6050_basic_init+0x318>)
 800872a:	f7ff fe50 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800872e:	4838      	ldr	r0, [pc, #224]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008730:	f7fd ff7a 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008734:	2301      	movs	r3, #1
 8008736:	e250      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* enable gyro y */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_Y, MPU6050_BOOL_FALSE);
 8008738:	2200      	movs	r2, #0
 800873a:	2101      	movs	r1, #1
 800873c:	4834      	ldr	r0, [pc, #208]	; (8008810 <mpu6050_basic_init+0x2d4>)
 800873e:	f7ff f861 	bl	8007804 <mpu6050_set_standby_mode>
 8008742:	4603      	mov	r3, r0
 8008744:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d007      	beq.n	800875c <mpu6050_basic_init+0x220>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 800874c:	4841      	ldr	r0, [pc, #260]	; (8008854 <mpu6050_basic_init+0x318>)
 800874e:	f7ff fe3e 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008752:	482f      	ldr	r0, [pc, #188]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008754:	f7fd ff68 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008758:	2301      	movs	r3, #1
 800875a:	e23e      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* enable gyro z */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_Z, MPU6050_BOOL_FALSE);
 800875c:	2200      	movs	r2, #0
 800875e:	2100      	movs	r1, #0
 8008760:	482b      	ldr	r0, [pc, #172]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008762:	f7ff f84f 	bl	8007804 <mpu6050_set_standby_mode>
 8008766:	4603      	mov	r3, r0
 8008768:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800876a:	7bfb      	ldrb	r3, [r7, #15]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d007      	beq.n	8008780 <mpu6050_basic_init+0x244>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 8008770:	4838      	ldr	r0, [pc, #224]	; (8008854 <mpu6050_basic_init+0x318>)
 8008772:	f7ff fe2c 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008776:	4826      	ldr	r0, [pc, #152]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008778:	f7fd ff56 	bl	8006628 <mpu6050_deinit>

        return 1;
 800877c:	2301      	movs	r3, #1
 800877e:	e22c      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* disable gyroscope x test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_X, MPU6050_BOOL_FALSE);
 8008780:	2200      	movs	r2, #0
 8008782:	2107      	movs	r1, #7
 8008784:	4822      	ldr	r0, [pc, #136]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008786:	f7ff f9a7 	bl	8007ad8 <mpu6050_set_gyroscope_test>
 800878a:	4603      	mov	r3, r0
 800878c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d007      	beq.n	80087a4 <mpu6050_basic_init+0x268>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 8008794:	4830      	ldr	r0, [pc, #192]	; (8008858 <mpu6050_basic_init+0x31c>)
 8008796:	f7ff fe1a 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800879a:	481d      	ldr	r0, [pc, #116]	; (8008810 <mpu6050_basic_init+0x2d4>)
 800879c:	f7fd ff44 	bl	8006628 <mpu6050_deinit>

        return 1;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e21a      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* disable gyroscope y test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_Y, MPU6050_BOOL_FALSE);
 80087a4:	2200      	movs	r2, #0
 80087a6:	2106      	movs	r1, #6
 80087a8:	4819      	ldr	r0, [pc, #100]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80087aa:	f7ff f995 	bl	8007ad8 <mpu6050_set_gyroscope_test>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d007      	beq.n	80087c8 <mpu6050_basic_init+0x28c>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 80087b8:	4827      	ldr	r0, [pc, #156]	; (8008858 <mpu6050_basic_init+0x31c>)
 80087ba:	f7ff fe08 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80087be:	4814      	ldr	r0, [pc, #80]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80087c0:	f7fd ff32 	bl	8006628 <mpu6050_deinit>

        return 1;
 80087c4:	2301      	movs	r3, #1
 80087c6:	e208      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* disable gyroscope z test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_Z, MPU6050_BOOL_FALSE);
 80087c8:	2200      	movs	r2, #0
 80087ca:	2105      	movs	r1, #5
 80087cc:	4810      	ldr	r0, [pc, #64]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80087ce:	f7ff f983 	bl	8007ad8 <mpu6050_set_gyroscope_test>
 80087d2:	4603      	mov	r3, r0
 80087d4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d007      	beq.n	80087ec <mpu6050_basic_init+0x2b0>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 80087dc:	481e      	ldr	r0, [pc, #120]	; (8008858 <mpu6050_basic_init+0x31c>)
 80087de:	f7ff fdf6 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80087e2:	480b      	ldr	r0, [pc, #44]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80087e4:	f7fd ff20 	bl	8006628 <mpu6050_deinit>

        return 1;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e1f6      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* disable accelerometer x test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_X, MPU6050_BOOL_FALSE);
 80087ec:	2200      	movs	r2, #0
 80087ee:	2107      	movs	r1, #7
 80087f0:	4807      	ldr	r0, [pc, #28]	; (8008810 <mpu6050_basic_init+0x2d4>)
 80087f2:	f7ff fa19 	bl	8007c28 <mpu6050_set_accelerometer_test>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d02f      	beq.n	8008860 <mpu6050_basic_init+0x324>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 8008800:	4816      	ldr	r0, [pc, #88]	; (800885c <mpu6050_basic_init+0x320>)
 8008802:	f7ff fde4 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008806:	4802      	ldr	r0, [pc, #8]	; (8008810 <mpu6050_basic_init+0x2d4>)
 8008808:	f7fd ff0e 	bl	8006628 <mpu6050_deinit>

        return 1;
 800880c:	2301      	movs	r3, #1
 800880e:	e1e4      	b.n	8008bda <mpu6050_basic_init+0x69e>
 8008810:	20000184 	.word	0x20000184
 8008814:	08008329 	.word	0x08008329
 8008818:	08008337 	.word	0x08008337
 800881c:	08008349 	.word	0x08008349
 8008820:	08008381 	.word	0x08008381
 8008824:	080083b9 	.word	0x080083b9
 8008828:	080083cf 	.word	0x080083cf
 800882c:	08008405 	.word	0x08008405
 8008830:	08011af4 	.word	0x08011af4
 8008834:	08011b14 	.word	0x08011b14
 8008838:	08011b2c 	.word	0x08011b2c
 800883c:	08011b48 	.word	0x08011b48
 8008840:	08011b6c 	.word	0x08011b6c
 8008844:	08011b98 	.word	0x08011b98
 8008848:	08011bc0 	.word	0x08011bc0
 800884c:	08011bec 	.word	0x08011bec
 8008850:	08011c10 	.word	0x08011c10
 8008854:	08011c38 	.word	0x08011c38
 8008858:	08011c5c 	.word	0x08011c5c
 800885c:	08011c84 	.word	0x08011c84
    }

    /* disable accelerometer y test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_Y, MPU6050_BOOL_FALSE);
 8008860:	2200      	movs	r2, #0
 8008862:	2106      	movs	r1, #6
 8008864:	48ae      	ldr	r0, [pc, #696]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008866:	f7ff f9df 	bl	8007c28 <mpu6050_set_accelerometer_test>
 800886a:	4603      	mov	r3, r0
 800886c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d007      	beq.n	8008884 <mpu6050_basic_init+0x348>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 8008874:	48ab      	ldr	r0, [pc, #684]	; (8008b24 <mpu6050_basic_init+0x5e8>)
 8008876:	f7ff fdaa 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800887a:	48a9      	ldr	r0, [pc, #676]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 800887c:	f7fd fed4 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008880:	2301      	movs	r3, #1
 8008882:	e1aa      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* disable accelerometer z test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_Z, MPU6050_BOOL_FALSE);
 8008884:	2200      	movs	r2, #0
 8008886:	2105      	movs	r1, #5
 8008888:	48a5      	ldr	r0, [pc, #660]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 800888a:	f7ff f9cd 	bl	8007c28 <mpu6050_set_accelerometer_test>
 800888e:	4603      	mov	r3, r0
 8008890:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d007      	beq.n	80088a8 <mpu6050_basic_init+0x36c>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 8008898:	48a2      	ldr	r0, [pc, #648]	; (8008b24 <mpu6050_basic_init+0x5e8>)
 800889a:	f7ff fd98 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800889e:	48a0      	ldr	r0, [pc, #640]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 80088a0:	f7fd fec2 	bl	8006628 <mpu6050_deinit>

        return 1;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e198      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* disable fifo */
    res = mpu6050_set_fifo(&gs_handle, MPU6050_BOOL_FALSE);
 80088a8:	2100      	movs	r1, #0
 80088aa:	489d      	ldr	r0, [pc, #628]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 80088ac:	f7fe fdd8 	bl	8007460 <mpu6050_set_fifo>
 80088b0:	4603      	mov	r3, r0
 80088b2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d007      	beq.n	80088ca <mpu6050_basic_init+0x38e>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo failed.\n");
 80088ba:	489b      	ldr	r0, [pc, #620]	; (8008b28 <mpu6050_basic_init+0x5ec>)
 80088bc:	f7ff fd87 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80088c0:	4897      	ldr	r0, [pc, #604]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 80088c2:	f7fd feb1 	bl	8006628 <mpu6050_deinit>

        return 1;
 80088c6:	2301      	movs	r3, #1
 80088c8:	e187      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* disable temp fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_TEMP, MPU6050_BOOL_FALSE);
 80088ca:	2200      	movs	r2, #0
 80088cc:	2107      	movs	r1, #7
 80088ce:	4894      	ldr	r0, [pc, #592]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 80088d0:	f7ff fa52 	bl	8007d78 <mpu6050_set_fifo_enable>
 80088d4:	4603      	mov	r3, r0
 80088d6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d007      	beq.n	80088ee <mpu6050_basic_init+0x3b2>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 80088de:	4893      	ldr	r0, [pc, #588]	; (8008b2c <mpu6050_basic_init+0x5f0>)
 80088e0:	f7ff fd75 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80088e4:	488e      	ldr	r0, [pc, #568]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 80088e6:	f7fd fe9f 	bl	8006628 <mpu6050_deinit>

        return 1;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e175      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* disable xg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_XG, MPU6050_BOOL_FALSE);
 80088ee:	2200      	movs	r2, #0
 80088f0:	2106      	movs	r1, #6
 80088f2:	488b      	ldr	r0, [pc, #556]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 80088f4:	f7ff fa40 	bl	8007d78 <mpu6050_set_fifo_enable>
 80088f8:	4603      	mov	r3, r0
 80088fa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <mpu6050_basic_init+0x3d6>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 8008902:	488a      	ldr	r0, [pc, #552]	; (8008b2c <mpu6050_basic_init+0x5f0>)
 8008904:	f7ff fd63 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008908:	4885      	ldr	r0, [pc, #532]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 800890a:	f7fd fe8d 	bl	8006628 <mpu6050_deinit>

        return 1;
 800890e:	2301      	movs	r3, #1
 8008910:	e163      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* disable yg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_YG, MPU6050_BOOL_FALSE);
 8008912:	2200      	movs	r2, #0
 8008914:	2105      	movs	r1, #5
 8008916:	4882      	ldr	r0, [pc, #520]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008918:	f7ff fa2e 	bl	8007d78 <mpu6050_set_fifo_enable>
 800891c:	4603      	mov	r3, r0
 800891e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d007      	beq.n	8008936 <mpu6050_basic_init+0x3fa>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 8008926:	4881      	ldr	r0, [pc, #516]	; (8008b2c <mpu6050_basic_init+0x5f0>)
 8008928:	f7ff fd51 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800892c:	487c      	ldr	r0, [pc, #496]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 800892e:	f7fd fe7b 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008932:	2301      	movs	r3, #1
 8008934:	e151      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* disable zg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_ZG, MPU6050_BOOL_FALSE);
 8008936:	2200      	movs	r2, #0
 8008938:	2104      	movs	r1, #4
 800893a:	4879      	ldr	r0, [pc, #484]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 800893c:	f7ff fa1c 	bl	8007d78 <mpu6050_set_fifo_enable>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <mpu6050_basic_init+0x41e>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 800894a:	4878      	ldr	r0, [pc, #480]	; (8008b2c <mpu6050_basic_init+0x5f0>)
 800894c:	f7ff fd3f 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008950:	4873      	ldr	r0, [pc, #460]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008952:	f7fd fe69 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008956:	2301      	movs	r3, #1
 8008958:	e13f      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* disable accel fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_ACCEL, MPU6050_BOOL_FALSE);
 800895a:	2200      	movs	r2, #0
 800895c:	2103      	movs	r1, #3
 800895e:	4870      	ldr	r0, [pc, #448]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008960:	f7ff fa0a 	bl	8007d78 <mpu6050_set_fifo_enable>
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008968:	7bfb      	ldrb	r3, [r7, #15]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d007      	beq.n	800897e <mpu6050_basic_init+0x442>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 800896e:	486f      	ldr	r0, [pc, #444]	; (8008b2c <mpu6050_basic_init+0x5f0>)
 8008970:	f7ff fd2d 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008974:	486a      	ldr	r0, [pc, #424]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008976:	f7fd fe57 	bl	8006628 <mpu6050_deinit>

        return 1;
 800897a:	2301      	movs	r3, #1
 800897c:	e12d      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default interrupt level */
    res = mpu6050_set_interrupt_level(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 800897e:	2101      	movs	r1, #1
 8008980:	4867      	ldr	r0, [pc, #412]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008982:	f7ff fa53 	bl	8007e2c <mpu6050_set_interrupt_level>
 8008986:	4603      	mov	r3, r0
 8008988:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d007      	beq.n	80089a0 <mpu6050_basic_init+0x464>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt level failed.\n");
 8008990:	4867      	ldr	r0, [pc, #412]	; (8008b30 <mpu6050_basic_init+0x5f4>)
 8008992:	f7ff fd1c 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008996:	4862      	ldr	r0, [pc, #392]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008998:	f7fd fe46 	bl	8006628 <mpu6050_deinit>

        return 1;
 800899c:	2301      	movs	r3, #1
 800899e:	e11c      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default pin type */
    res = mpu6050_set_interrupt_pin_type(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 80089a0:	2100      	movs	r1, #0
 80089a2:	485f      	ldr	r0, [pc, #380]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 80089a4:	f7ff fa90 	bl	8007ec8 <mpu6050_set_interrupt_pin_type>
 80089a8:	4603      	mov	r3, r0
 80089aa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d007      	beq.n	80089c2 <mpu6050_basic_init+0x486>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt pin type failed.\n");
 80089b2:	4860      	ldr	r0, [pc, #384]	; (8008b34 <mpu6050_basic_init+0x5f8>)
 80089b4:	f7ff fd0b 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80089b8:	4859      	ldr	r0, [pc, #356]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 80089ba:	f7fd fe35 	bl	8006628 <mpu6050_deinit>

        return 1;
 80089be:	2301      	movs	r3, #1
 80089c0:	e10b      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default motion interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_MOTION, MPU6050_BASIC_DEFAULT_INTERRUPT_MOTION);
 80089c2:	2200      	movs	r2, #0
 80089c4:	2106      	movs	r1, #6
 80089c6:	4856      	ldr	r0, [pc, #344]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 80089c8:	f7ff fc54 	bl	8008274 <mpu6050_set_interrupt>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d007      	beq.n	80089e6 <mpu6050_basic_init+0x4aa>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 80089d6:	4858      	ldr	r0, [pc, #352]	; (8008b38 <mpu6050_basic_init+0x5fc>)
 80089d8:	f7ff fcf9 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80089dc:	4850      	ldr	r0, [pc, #320]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 80089de:	f7fd fe23 	bl	8006628 <mpu6050_deinit>

        return 1;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e0f9      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default fifo overflow interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_FIFO_OVERFLOW, MPU6050_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 80089e6:	2200      	movs	r2, #0
 80089e8:	2104      	movs	r1, #4
 80089ea:	484d      	ldr	r0, [pc, #308]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 80089ec:	f7ff fc42 	bl	8008274 <mpu6050_set_interrupt>
 80089f0:	4603      	mov	r3, r0
 80089f2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d007      	beq.n	8008a0a <mpu6050_basic_init+0x4ce>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 80089fa:	484f      	ldr	r0, [pc, #316]	; (8008b38 <mpu6050_basic_init+0x5fc>)
 80089fc:	f7ff fce7 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008a00:	4847      	ldr	r0, [pc, #284]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008a02:	f7fd fe11 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e0e7      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default dmp interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_DMP, MPU6050_BASIC_DEFAULT_INTERRUPT_DMP);
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	4844      	ldr	r0, [pc, #272]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008a10:	f7ff fc30 	bl	8008274 <mpu6050_set_interrupt>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d007      	beq.n	8008a2e <mpu6050_basic_init+0x4f2>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 8008a1e:	4846      	ldr	r0, [pc, #280]	; (8008b38 <mpu6050_basic_init+0x5fc>)
 8008a20:	f7ff fcd5 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008a24:	483e      	ldr	r0, [pc, #248]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008a26:	f7fd fdff 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e0d5      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default i2c master interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_I2C_MAST, MPU6050_BASIC_DEFAULT_INTERRUPT_I2C_MAST);
 8008a2e:	2200      	movs	r2, #0
 8008a30:	2103      	movs	r1, #3
 8008a32:	483b      	ldr	r0, [pc, #236]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008a34:	f7ff fc1e 	bl	8008274 <mpu6050_set_interrupt>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d007      	beq.n	8008a52 <mpu6050_basic_init+0x516>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 8008a42:	483d      	ldr	r0, [pc, #244]	; (8008b38 <mpu6050_basic_init+0x5fc>)
 8008a44:	f7ff fcc3 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008a48:	4835      	ldr	r0, [pc, #212]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008a4a:	f7fd fded 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e0c3      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default data ready interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_DATA_READY, MPU6050_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 8008a52:	2200      	movs	r2, #0
 8008a54:	2100      	movs	r1, #0
 8008a56:	4832      	ldr	r0, [pc, #200]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008a58:	f7ff fc0c 	bl	8008274 <mpu6050_set_interrupt>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d007      	beq.n	8008a76 <mpu6050_basic_init+0x53a>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 8008a66:	4834      	ldr	r0, [pc, #208]	; (8008b38 <mpu6050_basic_init+0x5fc>)
 8008a68:	f7ff fcb1 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008a6c:	482c      	ldr	r0, [pc, #176]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008a6e:	f7fd fddb 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e0b1      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default interrupt latch */
    res = mpu6050_set_interrupt_latch(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_LATCH);
 8008a76:	2101      	movs	r1, #1
 8008a78:	4829      	ldr	r0, [pc, #164]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008a7a:	f7ff fa73 	bl	8007f64 <mpu6050_set_interrupt_latch>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d007      	beq.n	8008a98 <mpu6050_basic_init+0x55c>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt latch failed.\n");
 8008a88:	482c      	ldr	r0, [pc, #176]	; (8008b3c <mpu6050_basic_init+0x600>)
 8008a8a:	f7ff fca0 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008a8e:	4824      	ldr	r0, [pc, #144]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008a90:	f7fd fdca 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e0a0      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default interrupt read clear */
    res = mpu6050_set_interrupt_read_clear(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 8008a98:	2101      	movs	r1, #1
 8008a9a:	4821      	ldr	r0, [pc, #132]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008a9c:	f7ff fab2 	bl	8008004 <mpu6050_set_interrupt_read_clear>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d007      	beq.n	8008aba <mpu6050_basic_init+0x57e>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt read clear failed.\n");
 8008aaa:	4825      	ldr	r0, [pc, #148]	; (8008b40 <mpu6050_basic_init+0x604>)
 8008aac:	f7ff fc8f 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008ab0:	481b      	ldr	r0, [pc, #108]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008ab2:	f7fd fdb9 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e08f      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the extern sync */
    res = mpu6050_set_extern_sync(&gs_handle, MPU6050_BASIC_DEFAULT_EXTERN_SYNC);
 8008aba:	2100      	movs	r1, #0
 8008abc:	4818      	ldr	r0, [pc, #96]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008abe:	f7fe ff73 	bl	80079a8 <mpu6050_set_extern_sync>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d007      	beq.n	8008adc <mpu6050_basic_init+0x5a0>
    {
        mpu6050_interface_debug_print("mpu6050: set extern sync failed.\n");
 8008acc:	481d      	ldr	r0, [pc, #116]	; (8008b44 <mpu6050_basic_init+0x608>)
 8008ace:	f7ff fc7e 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008ad2:	4813      	ldr	r0, [pc, #76]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008ad4:	f7fd fda8 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e07e      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default fsync interrupt */
    res = mpu6050_set_fsync_interrupt(&gs_handle, MPU6050_BASIC_DEFAULT_FSYNC_INTERRUPT);
 8008adc:	2100      	movs	r1, #0
 8008ade:	4810      	ldr	r0, [pc, #64]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008ae0:	f7ff fb2c 	bl	800813c <mpu6050_set_fsync_interrupt>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008ae8:	7bfb      	ldrb	r3, [r7, #15]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d007      	beq.n	8008afe <mpu6050_basic_init+0x5c2>
    {
        mpu6050_interface_debug_print("mpu6050: set fsync interrupt failed.\n");
 8008aee:	4816      	ldr	r0, [pc, #88]	; (8008b48 <mpu6050_basic_init+0x60c>)
 8008af0:	f7ff fc6d 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008af4:	480a      	ldr	r0, [pc, #40]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008af6:	f7fd fd97 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e06d      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default fsync interrupt level */
    res = mpu6050_set_fsync_interrupt_level(&gs_handle, MPU6050_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 8008afe:	2101      	movs	r1, #1
 8008b00:	4807      	ldr	r0, [pc, #28]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008b02:	f7ff facd 	bl	80080a0 <mpu6050_set_fsync_interrupt_level>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d01f      	beq.n	8008b50 <mpu6050_basic_init+0x614>
    {
        mpu6050_interface_debug_print("mpu6050: set fsync interrupt level failed.\n");
 8008b10:	480e      	ldr	r0, [pc, #56]	; (8008b4c <mpu6050_basic_init+0x610>)
 8008b12:	f7ff fc5c 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008b16:	4802      	ldr	r0, [pc, #8]	; (8008b20 <mpu6050_basic_init+0x5e4>)
 8008b18:	f7fd fd86 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e05c      	b.n	8008bda <mpu6050_basic_init+0x69e>
 8008b20:	20000184 	.word	0x20000184
 8008b24:	08011c84 	.word	0x08011c84
 8008b28:	08011cb0 	.word	0x08011cb0
 8008b2c:	08011ccc 	.word	0x08011ccc
 8008b30:	08011cf0 	.word	0x08011cf0
 8008b34:	08011d18 	.word	0x08011d18
 8008b38:	08011d44 	.word	0x08011d44
 8008b3c:	08011d64 	.word	0x08011d64
 8008b40:	08011d8c 	.word	0x08011d8c
 8008b44:	08011db8 	.word	0x08011db8
 8008b48:	08011ddc 	.word	0x08011ddc
 8008b4c:	08011e04 	.word	0x08011e04
    }

    /* set the default iic master */
    res = mpu6050_set_iic_master(&gs_handle, MPU6050_BASIC_DEFAULT_IIC_MASTER);
 8008b50:	2100      	movs	r1, #0
 8008b52:	4824      	ldr	r0, [pc, #144]	; (8008be4 <mpu6050_basic_init+0x6a8>)
 8008b54:	f7fe fcd2 	bl	80074fc <mpu6050_set_iic_master>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d007      	beq.n	8008b72 <mpu6050_basic_init+0x636>
    {
        mpu6050_interface_debug_print("mpu6050: set iic master failed.\n");
 8008b62:	4821      	ldr	r0, [pc, #132]	; (8008be8 <mpu6050_basic_init+0x6ac>)
 8008b64:	f7ff fc33 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008b68:	481e      	ldr	r0, [pc, #120]	; (8008be4 <mpu6050_basic_init+0x6a8>)
 8008b6a:	f7fd fd5d 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e033      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default iic bypass */
    res = mpu6050_set_iic_bypass(&gs_handle, MPU6050_BASIC_DEFAULT_IIC_BYPASS);
 8008b72:	2100      	movs	r1, #0
 8008b74:	481b      	ldr	r0, [pc, #108]	; (8008be4 <mpu6050_basic_init+0x6a8>)
 8008b76:	f7ff fb2f 	bl	80081d8 <mpu6050_set_iic_bypass>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d007      	beq.n	8008b94 <mpu6050_basic_init+0x658>
    {
        mpu6050_interface_debug_print("mpu6050: set iic bypass failed.\n");
 8008b84:	4819      	ldr	r0, [pc, #100]	; (8008bec <mpu6050_basic_init+0x6b0>)
 8008b86:	f7ff fc22 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008b8a:	4816      	ldr	r0, [pc, #88]	; (8008be4 <mpu6050_basic_init+0x6a8>)
 8008b8c:	f7fd fd4c 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e022      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default accelerometer range */
    res = mpu6050_set_accelerometer_range(&gs_handle, MPU6050_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 8008b94:	2100      	movs	r1, #0
 8008b96:	4813      	ldr	r0, [pc, #76]	; (8008be4 <mpu6050_basic_init+0x6a8>)
 8008b98:	f7ff f8a0 	bl	8007cdc <mpu6050_set_accelerometer_range>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d007      	beq.n	8008bb6 <mpu6050_basic_init+0x67a>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer range failed.\n");
 8008ba6:	4812      	ldr	r0, [pc, #72]	; (8008bf0 <mpu6050_basic_init+0x6b4>)
 8008ba8:	f7ff fc11 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008bac:	480d      	ldr	r0, [pc, #52]	; (8008be4 <mpu6050_basic_init+0x6a8>)
 8008bae:	f7fd fd3b 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e011      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    /* set the default gyroscope range */
    res = mpu6050_set_gyroscope_range(&gs_handle, MPU6050_BASIC_DEFAULT_GYROSCOPE_RANGE);
 8008bb6:	2103      	movs	r1, #3
 8008bb8:	480a      	ldr	r0, [pc, #40]	; (8008be4 <mpu6050_basic_init+0x6a8>)
 8008bba:	f7fe ffe7 	bl	8007b8c <mpu6050_set_gyroscope_range>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d007      	beq.n	8008bd8 <mpu6050_basic_init+0x69c>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope range failed.\n");
 8008bc8:	480a      	ldr	r0, [pc, #40]	; (8008bf4 <mpu6050_basic_init+0x6b8>)
 8008bca:	f7ff fc00 	bl	80083ce <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8008bce:	4805      	ldr	r0, [pc, #20]	; (8008be4 <mpu6050_basic_init+0x6a8>)
 8008bd0:	f7fd fd2a 	bl	8006628 <mpu6050_deinit>

        return 1;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <mpu6050_basic_init+0x69e>
    }

    return 0;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000184 	.word	0x20000184
 8008be8:	08011e30 	.word	0x08011e30
 8008bec:	08011e54 	.word	0x08011e54
 8008bf0:	08011e78 	.word	0x08011e78
 8008bf4:	08011ea4 	.word	0x08011ea4

08008bf8 <mpu6050_basic_read_temperature>:
 *             - 0 success
 *             - 1 read temperature failed
 * @note       none
 */
uint8_t mpu6050_basic_read_temperature(float *degrees)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
    int16_t raw;

    /* read temperature */
    if (mpu6050_read_temperature(&gs_handle, &raw, degrees) != 0)
 8008c00:	f107 030e 	add.w	r3, r7, #14
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	4619      	mov	r1, r3
 8008c08:	4806      	ldr	r0, [pc, #24]	; (8008c24 <mpu6050_basic_read_temperature+0x2c>)
 8008c0a:	f7fe fbdf 	bl	80073cc <mpu6050_read_temperature>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <mpu6050_basic_read_temperature+0x20>
    {
        return 1;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <mpu6050_basic_read_temperature+0x22>
    }

    return 0;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20000184 	.word	0x20000184

08008c28 <mpu6050_basic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6050_basic_read(float g[3], float dps[3])
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b08e      	sub	sp, #56	; 0x38
 8008c2c:	af02      	add	r7, sp, #8
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
    int16_t gyro_raw[3];
    float accel[3];
    float gyro[3];

    /* set 1 */
    len = 1;
 8008c32:	2301      	movs	r3, #1
 8008c34:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* read data */
    if (mpu6050_read(&gs_handle,
 8008c36:	f107 0020 	add.w	r0, r7, #32
 8008c3a:	f107 0214 	add.w	r2, r7, #20
 8008c3e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008c42:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	f107 0308 	add.w	r3, r7, #8
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	4603      	mov	r3, r0
 8008c50:	4811      	ldr	r0, [pc, #68]	; (8008c98 <mpu6050_basic_read+0x70>)
 8008c52:	f7fd fd2d 	bl	80066b0 <mpu6050_read>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d001      	beq.n	8008c60 <mpu6050_basic_read+0x38>
                    (int16_t (*)[3])&accel_raw, (float (*)[3])&accel,
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                     &len) != 0
                    )
    {
        return 1;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e016      	b.n	8008c8e <mpu6050_basic_read+0x66>
    }

    /* copy the data */
    g[0] = accel[0];
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	601a      	str	r2, [r3, #0]
    g[1] = accel[1];
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	69ba      	ldr	r2, [r7, #24]
 8008c6c:	601a      	str	r2, [r3, #0]
    g[2] = accel[2];
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3308      	adds	r3, #8
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	601a      	str	r2, [r3, #0]
    dps[0] = gyro[0];
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	601a      	str	r2, [r3, #0]
    dps[1] = gyro[1];
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	3304      	adds	r3, #4
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	601a      	str	r2, [r3, #0]
    dps[2] = gyro[2];
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	3308      	adds	r3, #8
 8008c88:	693a      	ldr	r2, [r7, #16]
 8008c8a:	601a      	str	r2, [r3, #0]

    return 0;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3730      	adds	r7, #48	; 0x30
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	20000184 	.word	0x20000184

08008c9c <I2C1_Init>:
 *  Created on: Oct 31, 2023
 *      Author: jeffr
 */
#include "i2c.h"

void I2C1_Init(void){
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
	uint32_t temp;
	RCC->AHB1ENR |= GPIOX_CLOCK(I2C1_SCL);
 8008ca2:	4b48      	ldr	r3, [pc, #288]	; (8008dc4 <I2C1_Init+0x128>)
 8008ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca6:	4a47      	ldr	r2, [pc, #284]	; (8008dc4 <I2C1_Init+0x128>)
 8008ca8:	f043 0302 	orr.w	r3, r3, #2
 8008cac:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_ALTER, I2C1_SCL);
 8008cae:	4b46      	ldr	r3, [pc, #280]	; (8008dc8 <I2C1_Init+0x12c>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008cb6:	4a44      	ldr	r2, [pc, #272]	; (8008dc8 <I2C1_Init+0x12c>)
 8008cb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008cbc:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_ALTER, I2C1_SDA);
 8008cbe:	4b42      	ldr	r3, [pc, #264]	; (8008dc8 <I2C1_Init+0x12c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008cc6:	4a40      	ldr	r2, [pc, #256]	; (8008dc8 <I2C1_Init+0x12c>)
 8008cc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ccc:	6013      	str	r3, [r2, #0]
	GPIOB->OTYPER |= GPIO_OTYPER_OT7 | GPIO_OTYPER_OT6;
 8008cce:	4b3e      	ldr	r3, [pc, #248]	; (8008dc8 <I2C1_Init+0x12c>)
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	4a3d      	ldr	r2, [pc, #244]	; (8008dc8 <I2C1_Init+0x12c>)
 8008cd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cd8:	6053      	str	r3, [r2, #4]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, I2C1_SCL);
 8008cda:	4b3b      	ldr	r3, [pc, #236]	; (8008dc8 <I2C1_Init+0x12c>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	4a3a      	ldr	r2, [pc, #232]	; (8008dc8 <I2C1_Init+0x12c>)
 8008ce0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8008ce4:	6093      	str	r3, [r2, #8]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, I2C1_SDA);//VERY HIGH SPEED
 8008ce6:	4b38      	ldr	r3, [pc, #224]	; (8008dc8 <I2C1_Init+0x12c>)
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	4a37      	ldr	r2, [pc, #220]	; (8008dc8 <I2C1_Init+0x12c>)
 8008cec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cf0:	6093      	str	r3, [r2, #8]
	GPIOX_PUPDR(MODE_PU_UP, I2C1_SCL);
 8008cf2:	4b35      	ldr	r3, [pc, #212]	; (8008dc8 <I2C1_Init+0x12c>)
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008cfa:	4a33      	ldr	r2, [pc, #204]	; (8008dc8 <I2C1_Init+0x12c>)
 8008cfc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008d00:	60d3      	str	r3, [r2, #12]
	GPIOX_PUPDR(MODE_PU_UP, I2C1_SDA);		//Habilita las resitencias pull up internas
 8008d02:	4b31      	ldr	r3, [pc, #196]	; (8008dc8 <I2C1_Init+0x12c>)
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008d0a:	4a2f      	ldr	r2, [pc, #188]	; (8008dc8 <I2C1_Init+0x12c>)
 8008d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d10:	60d3      	str	r3, [r2, #12]
	GPIOX_AFR(4, I2C1_SCL);
 8008d12:	4b2d      	ldr	r3, [pc, #180]	; (8008dc8 <I2C1_Init+0x12c>)
 8008d14:	6a1b      	ldr	r3, [r3, #32]
 8008d16:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8008d1a:	4a2b      	ldr	r2, [pc, #172]	; (8008dc8 <I2C1_Init+0x12c>)
 8008d1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d20:	6213      	str	r3, [r2, #32]
	GPIOX_AFR(4, I2C1_SDA);
 8008d22:	4b29      	ldr	r3, [pc, #164]	; (8008dc8 <I2C1_Init+0x12c>)
 8008d24:	6a1b      	ldr	r3, [r3, #32]
 8008d26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008d2a:	4a27      	ldr	r2, [pc, #156]	; (8008dc8 <I2C1_Init+0x12c>)
 8008d2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d30:	6213      	str	r3, [r2, #32]
	//CONFIGURAR EL I2C1
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8008d32:	4b24      	ldr	r3, [pc, #144]	; (8008dc4 <I2C1_Init+0x128>)
 8008d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d36:	4a23      	ldr	r2, [pc, #140]	; (8008dc4 <I2C1_Init+0x128>)
 8008d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d3c:	6413      	str	r3, [r2, #64]	; 0x40
	//RESET
	I2C1->CR1 |= I2C_CR1_SWRST;
 8008d3e:	4b23      	ldr	r3, [pc, #140]	; (8008dcc <I2C1_Init+0x130>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a22      	ldr	r2, [pc, #136]	; (8008dcc <I2C1_Init+0x130>)
 8008d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d48:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &=~ I2C_CR1_SWRST;
 8008d4a:	4b20      	ldr	r3, [pc, #128]	; (8008dcc <I2C1_Init+0x130>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a1f      	ldr	r2, [pc, #124]	; (8008dcc <I2C1_Init+0x130>)
 8008d50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d54:	6013      	str	r3, [r2, #0]
	/**
	 * PCLK1
	 */
	temp = SystemCoreClock / 1000000;
 8008d56:	4b1e      	ldr	r3, [pc, #120]	; (8008dd0 <I2C1_Init+0x134>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a1e      	ldr	r2, [pc, #120]	; (8008dd4 <I2C1_Init+0x138>)
 8008d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d60:	0c9b      	lsrs	r3, r3, #18
 8008d62:	607b      	str	r3, [r7, #4]
	I2C1->CR2 &=~ (I2C_CR2_FREQ);
 8008d64:	4b19      	ldr	r3, [pc, #100]	; (8008dcc <I2C1_Init+0x130>)
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	4a18      	ldr	r2, [pc, #96]	; (8008dcc <I2C1_Init+0x130>)
 8008d6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008d6e:	6053      	str	r3, [r2, #4]
	I2C1->CR2 |= (temp & 0x3F);
 8008d70:	4b16      	ldr	r3, [pc, #88]	; (8008dcc <I2C1_Init+0x130>)
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d7a:	4914      	ldr	r1, [pc, #80]	; (8008dcc <I2C1_Init+0x130>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	604b      	str	r3, [r1, #4]
	 * CCR = PCLK1 / (3 * 400000)
	 * DUTY == 1
	 * CCR = PCLK1 / (25 * 400000)
	 * ->FAST MODE PLUS
	 */
	temp = 16E+6 / (3 * 400E+3);
 8008d80:	230d      	movs	r3, #13
 8008d82:	607b      	str	r3, [r7, #4]
	I2C1->CCR = temp & 0xFFF;
 8008d84:	4a11      	ldr	r2, [pc, #68]	; (8008dcc <I2C1_Init+0x130>)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d8c:	61d3      	str	r3, [r2, #28]
	I2C1->CCR |= I2C_CCR_FS;
 8008d8e:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <I2C1_Init+0x130>)
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	4a0e      	ldr	r2, [pc, #56]	; (8008dcc <I2C1_Init+0x130>)
 8008d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d98:	61d3      	str	r3, [r2, #28]
	 * SM
	 * TRISE = PCLK1 / 1000000 + 1
	 * FS
	 * TRISE = (PCLK1 * 300) / (1000000000U) + 1
	 */
	temp = ((16E+6) * 300) / (1000000000U) + 1;
 8008d9a:	2305      	movs	r3, #5
 8008d9c:	607b      	str	r3, [r7, #4]
	I2C1->TRISE = temp;
 8008d9e:	4a0b      	ldr	r2, [pc, #44]	; (8008dcc <I2C1_Init+0x130>)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6213      	str	r3, [r2, #32]
	//DIRECCION ESCLAVA DE NUESTRO I2C1
	I2C1->OAR1 = 0x74;
 8008da4:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <I2C1_Init+0x130>)
 8008da6:	2274      	movs	r2, #116	; 0x74
 8008da8:	609a      	str	r2, [r3, #8]
	//habilitar el bus i2c
	I2C1->CR1 |= I2C_CR1_PE;
 8008daa:	4b08      	ldr	r3, [pc, #32]	; (8008dcc <I2C1_Init+0x130>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a07      	ldr	r2, [pc, #28]	; (8008dcc <I2C1_Init+0x130>)
 8008db0:	f043 0301 	orr.w	r3, r3, #1
 8008db4:	6013      	str	r3, [r2, #0]
	return;
 8008db6:	bf00      	nop
}
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
 8008dc2:	bf00      	nop
 8008dc4:	40023800 	.word	0x40023800
 8008dc8:	40020400 	.word	0x40020400
 8008dcc:	40005400 	.word	0x40005400
 8008dd0:	200000a0 	.word	0x200000a0
 8008dd4:	431bde83 	.word	0x431bde83

08008dd8 <i2c_reg_write>:


uint8_t i2c_reg_write(I2C_TypeDef *I2C, uint8_t SlaveADDR, uint8_t regAddr, uint8_t *pData, uint16_t len, uint32_t timeout){
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	607b      	str	r3, [r7, #4]
 8008de2:	460b      	mov	r3, r1
 8008de4:	72fb      	strb	r3, [r7, #11]
 8008de6:	4613      	mov	r3, r2
 8008de8:	72bb      	strb	r3, [r7, #10]
	uint32_t temp= 0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	617b      	str	r3, [r7, #20]
	uint32_t ticks = millis();
 8008dee:	f7ff fb9d 	bl	800852c <millis>
 8008df2:	6138      	str	r0, [r7, #16]
	if(len <= 0 || pData == NULL){
 8008df4:	8c3b      	ldrh	r3, [r7, #32]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <i2c_reg_write+0x28>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <i2c_reg_write+0x2c>
		return 1;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e0b7      	b.n	8008f74 <i2c_reg_write+0x19c>
	}
	//esperar que el bus este desocupado
	do{
		if((millis() - ticks)> timeout){
 8008e04:	f7ff fb92 	bl	800852c <millis>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d201      	bcs.n	8008e18 <i2c_reg_write+0x40>
			return 1;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e0ad      	b.n	8008f74 <i2c_reg_write+0x19c>
		}
	}while(I2C->SR2 & I2C_SR2_BUSY);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	699b      	ldr	r3, [r3, #24]
 8008e1c:	f003 0302 	and.w	r3, r3, #2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1ef      	bne.n	8008e04 <i2c_reg_write+0x2c>
	//generar la condicion de inicio (star)
	I2C->CR1 |= I2C_CR1_START;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	601a      	str	r2, [r3, #0]
	do{
		if((millis() - ticks)> timeout){
 8008e30:	f7ff fb7c 	bl	800852c <millis>
 8008e34:	4602      	mov	r2, r0
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	1ad3      	subs	r3, r2, r3
 8008e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d207      	bcs.n	8008e50 <i2c_reg_write+0x78>
			I2C->CR1 |= I2C_CR1_STOP;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	601a      	str	r2, [r3, #0]
			return 1;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e091      	b.n	8008f74 <i2c_reg_write+0x19c>
		}
	}while(!(I2C->SR1 & I2C_SR1_SB));
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	695b      	ldr	r3, [r3, #20]
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0e9      	beq.n	8008e30 <i2c_reg_write+0x58>

	//enviar la direccion del esclavo
	SlaveADDR = SlaveADDR <<1;					//[A6:A0] [R/W] (W = 0, R = 1)
 8008e5c:	7afb      	ldrb	r3, [r7, #11]
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	72fb      	strb	r3, [r7, #11]
	SlaveADDR &= ~1;
 8008e62:	7afb      	ldrb	r3, [r7, #11]
 8008e64:	f023 0301 	bic.w	r3, r3, #1
 8008e68:	72fb      	strb	r3, [r7, #11]
	I2C->DR = SlaveADDR;
 8008e6a:	7afa      	ldrb	r2, [r7, #11]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	611a      	str	r2, [r3, #16]
	do{
		if((millis() - ticks)> timeout){
 8008e70:	f7ff fb5c 	bl	800852c <millis>
 8008e74:	4602      	mov	r2, r0
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d207      	bcs.n	8008e90 <i2c_reg_write+0xb8>
			I2C->CR1 |= I2C_CR1_STOP;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	601a      	str	r2, [r3, #0]
			return 1;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e071      	b.n	8008f74 <i2c_reg_write+0x19c>
		}
	}while(!(I2C->SR1 & I2C_SR1_ADDR));
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0e9      	beq.n	8008e70 <i2c_reg_write+0x98>
	//Limpiar los registros de estado
	temp = I2C->SR1;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	617b      	str	r3, [r7, #20]
	temp = I2C->SR2;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	617b      	str	r3, [r7, #20]
	(void)temp;

	//enviar la direccion de la region
	do{
		if((millis() - ticks)>timeout){
 8008ea8:	f7ff fb40 	bl	800852c <millis>
 8008eac:	4602      	mov	r2, r0
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d207      	bcs.n	8008ec8 <i2c_reg_write+0xf0>
			I2C->CR1 |= I2C_CR1_STOP;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	601a      	str	r2, [r3, #0]
			return 1;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e055      	b.n	8008f74 <i2c_reg_write+0x19c>
		}
	}while(!(I2C->SR1 & I2C_SR1_TXE));
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0e9      	beq.n	8008ea8 <i2c_reg_write+0xd0>
	I2C->DR = regAddr;
 8008ed4:	7aba      	ldrb	r2, [r7, #10]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	611a      	str	r2, [r3, #16]

	//enviar los n datos
	while(len>0){
 8008eda:	e023      	b.n	8008f24 <i2c_reg_write+0x14c>
		if(I2C->SR1 & I2C_SR1_TXE){
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	695b      	ldr	r3, [r3, #20]
 8008ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00d      	beq.n	8008f04 <i2c_reg_write+0x12c>
			I2C->DR = *pData;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	461a      	mov	r2, r3
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	611a      	str	r2, [r3, #16]
			pData++;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	607b      	str	r3, [r7, #4]
			len--;
 8008ef8:	8c3b      	ldrh	r3, [r7, #32]
 8008efa:	3b01      	subs	r3, #1
 8008efc:	843b      	strh	r3, [r7, #32]
			if(len == 0){
 8008efe:	8c3b      	ldrh	r3, [r7, #32]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d013      	beq.n	8008f2c <i2c_reg_write+0x154>
				break;
			}
		}
		if((millis() - ticks)>timeout){
 8008f04:	f7ff fb12 	bl	800852c <millis>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d207      	bcs.n	8008f24 <i2c_reg_write+0x14c>
			I2C->CR1 |= I2C_CR1_STOP;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	601a      	str	r2, [r3, #0]
			return 1;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e027      	b.n	8008f74 <i2c_reg_write+0x19c>
	while(len>0){
 8008f24:	8c3b      	ldrh	r3, [r7, #32]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1d8      	bne.n	8008edc <i2c_reg_write+0x104>
 8008f2a:	e000      	b.n	8008f2e <i2c_reg_write+0x156>
				break;
 8008f2c:	bf00      	nop
		}
	}
	//wait
	do{
		if((millis() - ticks)>timeout){
 8008f2e:	f7ff fafd 	bl	800852c <millis>
 8008f32:	4602      	mov	r2, r0
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d207      	bcs.n	8008f4e <i2c_reg_write+0x176>
			I2C->CR1 |= I2C_CR1_STOP;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	601a      	str	r2, [r3, #0]
			return 1;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e012      	b.n	8008f74 <i2c_reg_write+0x19c>
		}
	}while(((I2C->SR1 & I2C_SR1_TXE) == 0) &&((I2C->SR1 & I2C_SR1_BTF) == 0));
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d105      	bne.n	8008f66 <i2c_reg_write+0x18e>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	f003 0304 	and.w	r3, r3, #4
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0e3      	beq.n	8008f2e <i2c_reg_write+0x156>

	//stop condition
	I2C->CR1 |= I2C_CR1_STOP;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	601a      	str	r2, [r3, #0]
	return 0;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3718      	adds	r7, #24
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <i2c_reg_read>:

uint8_t i2c_reg_read(I2C_TypeDef *I2C, uint8_t SlaveADDR, uint8_t regAddr, uint8_t *pData, uint16_t len, uint32_t timeout){
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	607b      	str	r3, [r7, #4]
 8008f86:	460b      	mov	r3, r1
 8008f88:	72fb      	strb	r3, [r7, #11]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	72bb      	strb	r3, [r7, #10]
	uint32_t temp= 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	617b      	str	r3, [r7, #20]
	uint32_t ticks = millis();
 8008f92:	f7ff facb 	bl	800852c <millis>
 8008f96:	6138      	str	r0, [r7, #16]

	if(len <= 0 || pData == NULL){
 8008f98:	8c3b      	ldrh	r3, [r7, #32]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d002      	beq.n	8008fa4 <i2c_reg_read+0x28>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <i2c_reg_read+0x2c>
		return 1;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e11f      	b.n	80091e8 <i2c_reg_read+0x26c>
	}
	//esperar que el bus este desocupado
	do{
		if((millis() - ticks)> timeout){
 8008fa8:	f7ff fac0 	bl	800852c <millis>
 8008fac:	4602      	mov	r2, r0
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	1ad3      	subs	r3, r2, r3
 8008fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d201      	bcs.n	8008fbc <i2c_reg_read+0x40>
			return 1;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	e115      	b.n	80091e8 <i2c_reg_read+0x26c>
		}
	}while((I2C->SR2 & I2C_SR2_BUSY));
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	f003 0302 	and.w	r3, r3, #2
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1ef      	bne.n	8008fa8 <i2c_reg_read+0x2c>

	//generar la condicion de inicio (star)
	I2C->CR1 |= I2C_CR1_START;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	601a      	str	r2, [r3, #0]
	do{
		if((millis() - ticks)> timeout){
 8008fd4:	f7ff faaa 	bl	800852c <millis>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d207      	bcs.n	8008ff4 <i2c_reg_read+0x78>
			I2C->CR1 |= I2C_CR1_STOP;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	601a      	str	r2, [r3, #0]
			return 1;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e0f9      	b.n	80091e8 <i2c_reg_read+0x26c>
		}
	}while((I2C->SR1 & I2C_SR1_SB)  == 0);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d0e9      	beq.n	8008fd4 <i2c_reg_read+0x58>

	//enviar la direccion del esclavo
	SlaveADDR = SlaveADDR <<1;					//[A6:A0] [R/W] (W = 0, R = 1)
 8009000:	7afb      	ldrb	r3, [r7, #11]
 8009002:	005b      	lsls	r3, r3, #1
 8009004:	72fb      	strb	r3, [r7, #11]
	SlaveADDR &= ~1;
 8009006:	7afb      	ldrb	r3, [r7, #11]
 8009008:	f023 0301 	bic.w	r3, r3, #1
 800900c:	72fb      	strb	r3, [r7, #11]
	I2C->DR = SlaveADDR;
 800900e:	7afa      	ldrb	r2, [r7, #11]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	611a      	str	r2, [r3, #16]
	//I2C->DR = SlaveADDR;

	do{
		if((millis() - ticks)> timeout){
 8009014:	f7ff fa8a 	bl	800852c <millis>
 8009018:	4602      	mov	r2, r0
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009020:	429a      	cmp	r2, r3
 8009022:	d207      	bcs.n	8009034 <i2c_reg_read+0xb8>
			I2C->CR1 |= I2C_CR1_STOP;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	601a      	str	r2, [r3, #0]
			return 1;
 8009030:	2301      	movs	r3, #1
 8009032:	e0d9      	b.n	80091e8 <i2c_reg_read+0x26c>
		}
	}while((I2C->SR1 & I2C_SR1_ADDR)  == 0);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	f003 0302 	and.w	r3, r3, #2
 800903c:	2b00      	cmp	r3, #0
 800903e:	d0e9      	beq.n	8009014 <i2c_reg_read+0x98>
	//while((I2C->SR1 & I2C_SR1_ADDR) == 0);

	//Limpiar los registros de estado
	temp = I2C->SR1;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	617b      	str	r3, [r7, #20]
	temp = I2C->SR2;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	617b      	str	r3, [r7, #20]
	(void)temp;

	//enviar la direccion base a leerse
	//enviar la direccion de la region
	do{
		if((millis() - ticks)>timeout){
 800904c:	f7ff fa6e 	bl	800852c <millis>
 8009050:	4602      	mov	r2, r0
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009058:	429a      	cmp	r2, r3
 800905a:	d207      	bcs.n	800906c <i2c_reg_read+0xf0>
			I2C->CR1 |= I2C_CR1_STOP;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	601a      	str	r2, [r3, #0]
			return 1;
 8009068:	2301      	movs	r3, #1
 800906a:	e0bd      	b.n	80091e8 <i2c_reg_read+0x26c>
		}
	}while(!(I2C->SR1 & I2C_SR1_TXE));
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009074:	2b00      	cmp	r3, #0
 8009076:	d0e9      	beq.n	800904c <i2c_reg_read+0xd0>
	I2C->DR = regAddr;
 8009078:	7aba      	ldrb	r2, [r7, #10]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	611a      	str	r2, [r3, #16]

	//una nueva condicion de inicio
	//wait
	do{
		if((millis() - ticks)>timeout){
 800907e:	f7ff fa55 	bl	800852c <millis>
 8009082:	4602      	mov	r2, r0
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	1ad3      	subs	r3, r2, r3
 8009088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800908a:	429a      	cmp	r2, r3
 800908c:	d207      	bcs.n	800909e <i2c_reg_read+0x122>
			I2C->CR1 |= I2C_CR1_STOP;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	601a      	str	r2, [r3, #0]
			return 1;
 800909a:	2301      	movs	r3, #1
 800909c:	e0a4      	b.n	80091e8 <i2c_reg_read+0x26c>
		}
	}while(((I2C->SR1 & I2C_SR1_TXE) == 0) && ((I2C->SR1 & I2C_SR1_BTF) == 0));
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	695b      	ldr	r3, [r3, #20]
 80090a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d105      	bne.n	80090b6 <i2c_reg_read+0x13a>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0e3      	beq.n	800907e <i2c_reg_read+0x102>

	//generar la condicion de inicio (star)
	I2C->CR1 |= I2C_CR1_START;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	601a      	str	r2, [r3, #0]
	do{
		if((millis() - ticks)> timeout){
 80090c2:	f7ff fa33 	bl	800852c <millis>
 80090c6:	4602      	mov	r2, r0
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d207      	bcs.n	80090e2 <i2c_reg_read+0x166>
			I2C->CR1 |= I2C_CR1_STOP;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	601a      	str	r2, [r3, #0]
			return 1;
 80090de:	2301      	movs	r3, #1
 80090e0:	e082      	b.n	80091e8 <i2c_reg_read+0x26c>
		}
	}while((I2C->SR1 & I2C_SR1_SB)  == 0);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0e9      	beq.n	80090c2 <i2c_reg_read+0x146>
	//enviar la direccion del esclavo

	SlaveADDR |= 1;
 80090ee:	7afb      	ldrb	r3, [r7, #11]
 80090f0:	f043 0301 	orr.w	r3, r3, #1
 80090f4:	72fb      	strb	r3, [r7, #11]
	I2C->DR = SlaveADDR;
 80090f6:	7afa      	ldrb	r2, [r7, #11]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	611a      	str	r2, [r3, #16]
	do{
		if((millis() - ticks)> timeout){
 80090fc:	f7ff fa16 	bl	800852c <millis>
 8009100:	4602      	mov	r2, r0
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009108:	429a      	cmp	r2, r3
 800910a:	d207      	bcs.n	800911c <i2c_reg_read+0x1a0>
			I2C->CR1 |= I2C_CR1_STOP;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	601a      	str	r2, [r3, #0]
			return 1;
 8009118:	2301      	movs	r3, #1
 800911a:	e065      	b.n	80091e8 <i2c_reg_read+0x26c>
		}
	}while((I2C->SR1 & I2C_SR1_ADDR)  == 0);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0e9      	beq.n	80090fc <i2c_reg_read+0x180>

	//Limpiar los registros de estado
	temp = I2C->SR1;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	617b      	str	r3, [r7, #20]
	temp = I2C->SR2;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	617b      	str	r3, [r7, #20]
	(void)temp;

	//leer bytes
	I2C->CR1  |= I2C_CR1_ACK;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	601a      	str	r2, [r3, #0]

	while(len> 0){
 8009140:	e04e      	b.n	80091e0 <i2c_reg_read+0x264>
		if(len == 1){
 8009142:	8c3b      	ldrh	r3, [r7, #32]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d12a      	bne.n	800919e <i2c_reg_read+0x222>
			I2C->CR1 &=~ I2C_CR1_ACK;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	601a      	str	r2, [r3, #0]

			do{
				if((millis() - ticks)>timeout){
 8009154:	f7ff f9ea 	bl	800852c <millis>
 8009158:	4602      	mov	r2, r0
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	1ad3      	subs	r3, r2, r3
 800915e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009160:	429a      	cmp	r2, r3
 8009162:	d207      	bcs.n	8009174 <i2c_reg_read+0x1f8>
					I2C1->CR1 |= I2C_CR1_STOP;
 8009164:	4b22      	ldr	r3, [pc, #136]	; (80091f0 <i2c_reg_read+0x274>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a21      	ldr	r2, [pc, #132]	; (80091f0 <i2c_reg_read+0x274>)
 800916a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800916e:	6013      	str	r3, [r2, #0]
					return 1;
 8009170:	2301      	movs	r3, #1
 8009172:	e039      	b.n	80091e8 <i2c_reg_read+0x26c>
				}
			}while((I2C->SR1 & I2C_SR1_RXNE) == 0);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800917c:	2b00      	cmp	r3, #0
 800917e:	d0e9      	beq.n	8009154 <i2c_reg_read+0x1d8>

			I2C1->CR1 |= I2C_CR1_STOP;
 8009180:	4b1b      	ldr	r3, [pc, #108]	; (80091f0 <i2c_reg_read+0x274>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a1a      	ldr	r2, [pc, #104]	; (80091f0 <i2c_reg_read+0x274>)
 8009186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800918a:	6013      	str	r3, [r2, #0]

			//LEER
			*pData = I2C->DR;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	b2da      	uxtb	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	701a      	strb	r2, [r3, #0]
			len--;
 8009196:	8c3b      	ldrh	r3, [r7, #32]
 8009198:	3b01      	subs	r3, #1
 800919a:	843b      	strh	r3, [r7, #32]
			break;
 800919c:	e023      	b.n	80091e6 <i2c_reg_read+0x26a>
		}else{
			//wait
			do{
				if((millis() - ticks)>timeout){
 800919e:	f7ff f9c5 	bl	800852c <millis>
 80091a2:	4602      	mov	r2, r0
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	1ad3      	subs	r3, r2, r3
 80091a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d207      	bcs.n	80091be <i2c_reg_read+0x242>
					I2C1->CR1 |= I2C_CR1_STOP;
 80091ae:	4b10      	ldr	r3, [pc, #64]	; (80091f0 <i2c_reg_read+0x274>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a0f      	ldr	r2, [pc, #60]	; (80091f0 <i2c_reg_read+0x274>)
 80091b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80091b8:	6013      	str	r3, [r2, #0]
					return 1;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e014      	b.n	80091e8 <i2c_reg_read+0x26c>
				}
			}while((I2C->SR1 & I2C_SR1_RXNE) == 0);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0e9      	beq.n	800919e <i2c_reg_read+0x222>
			*pData = I2C->DR;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	701a      	strb	r2, [r3, #0]
			pData++;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	3301      	adds	r3, #1
 80091d8:	607b      	str	r3, [r7, #4]
			len--;
 80091da:	8c3b      	ldrh	r3, [r7, #32]
 80091dc:	3b01      	subs	r3, #1
 80091de:	843b      	strh	r3, [r7, #32]
	while(len> 0){
 80091e0:	8c3b      	ldrh	r3, [r7, #32]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1ad      	bne.n	8009142 <i2c_reg_read+0x1c6>
		}
	}

	return 0;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3718      	adds	r7, #24
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	40005400 	.word	0x40005400

080091f4 <_ZN11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringC1EPKc>:

class ZeroTerminatedRamString {
 public:
  static const size_t typeSortKey = 3;

  ZeroTerminatedRamString(const char* str) : str_(str) {}
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	601a      	str	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4618      	mov	r0, r3
 8009208:	370c      	adds	r7, #12
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>:

  bool isNull() const {
 8009212:	b480      	push	{r7}
 8009214:	b083      	sub	sp, #12
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
    return !str_;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	bf0c      	ite	eq
 8009222:	2301      	moveq	r3, #1
 8009224:	2300      	movne	r3, #0
 8009226:	b2db      	uxtb	r3, r3
  }
 8009228:	4618      	mov	r0, r3
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>:

  size_t size() const {
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
    return str_ ? ::strlen(str_) : 0;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d006      	beq.n	8009252 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv+0x1e>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4618      	mov	r0, r3
 800924a:	f7f7 f821 	bl	8000290 <strlen>
 800924e:	4603      	mov	r3, r0
 8009250:	e000      	b.n	8009254 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv+0x20>
 8009252:	2300      	movs	r3, #0
  }
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>:

  char operator[](size_t i) const {
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	4413      	add	r3, r2
 800926e:	781b      	ldrb	r3, [r3, #0]
  }
 8009270:	4618      	mov	r0, r3
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>:

  const char* data() const {
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
    return str_;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
  }
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <_ZN11ArduinoJson8V6213HB26detail19StaticStringAdapterC1EPKc>:
  }
};

class StaticStringAdapter : public ZeroTerminatedRamString {
 public:
  StaticStringAdapter(const char* str) : ZeroTerminatedRamString(str) {}
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7ff ffa6 	bl	80091f4 <_ZN11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringC1EPKc>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>:

  StringStoragePolicy::Link storagePolicy() const {
 80092b2:	b480      	push	{r7}
 80092b4:	b083      	sub	sp, #12
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
    return StringStoragePolicy::Link();
 80092ba:	bf00      	nop
  }
 80092bc:	4618      	mov	r0, r3
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <_ZN11ArduinoJson8V6213HB26detail13StringAdapterIPKcvE5adaptES4_>:

template <>
struct StringAdapter<const char*, void> {
  typedef StaticStringAdapter AdaptedString;

  static AdaptedString adapt(const char* p) {
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
    return AdaptedString(p);
 80092d0:	f107 030c 	add.w	r3, r7, #12
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7ff ffdc 	bl	8009294 <_ZN11ArduinoJson8V6213HB26detail19StaticStringAdapterC1EPKc>
 80092dc:	68fb      	ldr	r3, [r7, #12]
  }
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <_ZN11ArduinoJson8V6213HB26detail14SizedRamStringC1EPKcj>:

class SizedRamString {
 public:
  static const size_t typeSortKey = 2;

  SizedRamString(const char* str, size_t sz) : str_(str), size_(sz) {}
 80092e6:	b480      	push	{r7}
 80092e8:	b085      	sub	sp, #20
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	60f8      	str	r0, [r7, #12]
 80092ee:	60b9      	str	r1, [r7, #8]
 80092f0:	607a      	str	r2, [r7, #4]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	605a      	str	r2, [r3, #4]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	4618      	mov	r0, r3
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <_ZNK11ArduinoJson8V6213HB26detail14SizedRamString4sizeEv>:

  bool isNull() const {
    return !str_;
  }

  size_t size() const {
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
    return size_;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
  }
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamStringixEj>:

  char operator[](size_t i) const {
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(str_ != 0);
    ARDUINOJSON_ASSERT(i <= size());
    return str_[i];
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	4413      	add	r3, r2
 8009336:	781b      	ldrb	r3, [r3, #0]
  }
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>:
  JsonString() : data_(0), size_(0), ownership_(Linked) {}

  JsonString(const char* data, Ownership ownership = Linked)
      : data_(data), size_(data ? ::strlen(data) : 0), ownership_(ownership) {}

  JsonString(const char* data, size_t sz, Ownership ownership = Linked)
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
 8009350:	70fb      	strb	r3, [r7, #3]
      : data_(data), size_(sz), ownership_(ownership) {}
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	68ba      	ldr	r2, [r7, #8]
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	605a      	str	r2, [r3, #4]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	721a      	strb	r2, [r3, #8]
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>:

  // Returns a pointer to the characters.
  const char* c_str() const {
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
    return data_;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
  }
 800937e:	4618      	mov	r0, r3
 8009380:	370c      	adds	r7, #12
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr

0800938a <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>:
    return !data_;
  }

  // Returns true if the string is stored by address.
  // Returns false if the string is stored by copy.
  bool isLinked() const {
 800938a:	b480      	push	{r7}
 800938c:	b083      	sub	sp, #12
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
    return ownership_ == Linked;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	7a1b      	ldrb	r3, [r3, #8]
 8009396:	2b01      	cmp	r3, #1
 8009398:	bf0c      	ite	eq
 800939a:	2301      	moveq	r3, #1
 800939c:	2300      	movne	r3, #0
 800939e:	b2db      	uxtb	r3, r3
  }
 80093a0:	4618      	mov	r0, r3
 80093a2:	370c      	adds	r7, #12
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr

080093ac <_ZNK11ArduinoJson8V6213HB210JsonString4sizeEv>:

  // Returns length of the string.
  size_t size() const {
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
    return size_;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
  }
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>:

  // Returns true if the string is non-null
  explicit operator bool() const {
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
    return data_ != 0;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	bf14      	ite	ne
 80093d4:	2301      	movne	r3, #1
 80093d6:	2300      	moveq	r3, #0
 80093d8:	b2db      	uxtb	r3, r3
  }
 80093da:	4618      	mov	r0, r3
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>:
  VariantSlot* addSlot(MemoryPool*);
  void removeSlot(VariantSlot* slot);

  bool copyFrom(const CollectionData& src, MemoryPool* pool);

  VariantSlot* head() const {
 80093e6:	b480      	push	{r7}
 80093e8:	b083      	sub	sp, #12
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
    return head_;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
  }
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>:
  // - no constructor
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<VariantData*>(&content_);
 8009406:	687b      	ldr	r3, [r7, #4]
  }
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>:

  const VariantData* data() const {
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const VariantData*>(&content_);
 800941c:	687b      	ldr	r3, [r7, #4]
  }
 800941e:	4618      	mov	r0, r3
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>:

  VariantSlot* next() {
 800942a:	b480      	push	{r7}
 800942c:	b083      	sub	sp, #12
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
    return next_ ? this + next_ : 0;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d006      	beq.n	800944a <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv+0x20>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009442:	011b      	lsls	r3, r3, #4
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	4413      	add	r3, r2
 8009448:	e000      	b.n	800944c <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv+0x22>
 800944a:	2300      	movs	r3, #0
  }
 800944c:	4618      	mov	r0, r3
 800944e:	370c      	adds	r7, #12
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>:

  const VariantSlot* next() const {
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
    return const_cast<VariantSlot*>(this)->next();
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff ffe2 	bl	800942a <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 8009466:	4603      	mov	r3, r0
  }
 8009468:	4618      	mov	r0, r3
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_>:

  const VariantSlot* next(size_t distance) const {
    return const_cast<VariantSlot*>(this)->next(distance);
  }

  void setNext(VariantSlot* slot) {
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(!slot || slot - this >=
                                    numeric_limits<VariantSlotDiff>::lowest());
    ARDUINOJSON_ASSERT(!slot || slot - this <=
                                    numeric_limits<VariantSlotDiff>::highest());
    next_ = VariantSlotDiff(slot ? slot - this : 0);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d005      	beq.n	800948c <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_+0x1c>
 8009480:	683a      	ldr	r2, [r7, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	111b      	asrs	r3, r3, #4
 8009488:	b21a      	sxth	r2, r3
 800948a:	e000      	b.n	800948e <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_+0x1e>
 800948c:	2200      	movs	r2, #0
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	815a      	strh	r2, [r3, #10]
  }
 8009492:	bf00      	nop
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <_ZN11ArduinoJson8V6213HB26detail11VariantSlot14setNextNotNullEPS2_>:

  void setNextNotNull(VariantSlot* slot) {
 800949e:	b480      	push	{r7}
 80094a0:	b083      	sub	sp, #12
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(slot != 0);
    ARDUINOJSON_ASSERT(slot - this >=
                       numeric_limits<VariantSlotDiff>::lowest());
    ARDUINOJSON_ASSERT(slot - this <=
                       numeric_limits<VariantSlotDiff>::highest());
    next_ = VariantSlotDiff(slot - this);
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	111b      	asrs	r3, r3, #4
 80094b0:	b21a      	sxth	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	815a      	strh	r2, [r3, #10]
  }
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>:

  void setKey(JsonString k) {
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	60f8      	str	r0, [r7, #12]
 80094ca:	4638      	mov	r0, r7
 80094cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ARDUINOJSON_ASSERT(k);
    if (k.isLinked())
 80094d0:	463b      	mov	r3, r7
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7ff ff59 	bl	800938a <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>
 80094d8:	4603      	mov	r3, r0
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d007      	beq.n	80094ee <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE+0x2c>
      flags_ &= VALUE_MASK;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	7a1b      	ldrb	r3, [r3, #8]
 80094e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	721a      	strb	r2, [r3, #8]
 80094ec:	e006      	b.n	80094fc <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE+0x3a>
    else
      flags_ |= OWNED_KEY_BIT;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	7a1b      	ldrb	r3, [r3, #8]
 80094f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	721a      	strb	r2, [r3, #8]
    key_ = k.c_str();
 80094fc:	463b      	mov	r3, r7
 80094fe:	4618      	mov	r0, r3
 8009500:	f7ff ff37 	bl	8009372 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 8009504:	4602      	mov	r2, r0
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	60da      	str	r2, [r3, #12]
  }
 800950a:	bf00      	nop
 800950c:	3710      	adds	r7, #16
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>:

  const char* key() const {
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
    return key_;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
  }
 800951e:	4618      	mov	r0, r3
 8009520:	370c      	adds	r7, #12
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <_ZN11ArduinoJson8V6213HB26detail11VariantSlot5clearEv>:

  bool ownsKey() const {
    return (flags_ & OWNED_KEY_BIT) != 0;
  }

  void clear() {
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
    next_ = 0;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	815a      	strh	r2, [r3, #10]
    flags_ = 0;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	721a      	strb	r2, [r3, #8]
    key_ = 0;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	60da      	str	r2, [r3, #12]
  }
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj>:
//               ^              ^
//             left_          right_

class MemoryPool {
 public:
  MemoryPool(char* buf, size_t capa)
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
      : begin_(buf),
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	601a      	str	r2, [r3, #0]
        left_(buf),
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	605a      	str	r2, [r3, #4]
        right_(buf ? buf + capa : 0),
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d003      	beq.n	8009576 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x26>
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4413      	add	r3, r2
 8009574:	e000      	b.n	8009578 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x28>
 8009576:	2300      	movs	r3, #0
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	6093      	str	r3, [r2, #8]
        end_(buf ? buf + capa : 0),
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x3a>
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4413      	add	r3, r2
 8009588:	e000      	b.n	800958c <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj+0x3c>
 800958a:	2300      	movs	r3, #0
 800958c:	68fa      	ldr	r2, [r7, #12]
 800958e:	60d3      	str	r3, [r2, #12]
        overflowed_(false) {
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	741a      	strb	r2, [r3, #16]
    ARDUINOJSON_ASSERT(isAligned(begin_));
    ARDUINOJSON_ASSERT(isAligned(right_));
    ARDUINOJSON_ASSERT(isAligned(end_));
  }
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>:

  size_t size() const {
    return size_t(left_ - begin_ + end_ - right_);
  }

  bool overflowed() const {
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
    return overflowed_;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	7c1b      	ldrb	r3, [r3, #16]
  }
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <_ZN11ArduinoJson8V6213HB26detail10MemoryPool12allocVariantEv>:

  VariantSlot* allocVariant() {
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
    return allocRight<VariantSlot>();
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f002 fa71 	bl	800baac <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightINS1_11VariantSlotEEEPT_v>
 80095ca:	4603      	mov	r3, r0
  }
 80095cc:	4618      	mov	r0, r3
 80095ce:	3708      	adds	r7, #8
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool11getFreeZoneEPPcPj>:
      newCopy[n] = 0;  // force null-terminator
    }
    return newCopy;
  }

  void getFreeZone(char** zoneStart, size_t* zoneSize) const {
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
    *zoneStart = left_;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	685a      	ldr	r2, [r3, #4]
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	601a      	str	r2, [r3, #0]
    *zoneSize = size_t(right_ - left_);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	461a      	mov	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	601a      	str	r2, [r3, #0]
  }
 80095f8:	bf00      	nop
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool22saveStringFromFreeZoneEj>:

  const char* saveStringFromFreeZone(size_t len) {
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
#if ARDUINOJSON_ENABLE_STRING_DEDUPLICATION
    const char* dup = findString(adaptString(left_, len));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6859      	ldr	r1, [r3, #4]
 8009612:	f107 0308 	add.w	r3, r7, #8
 8009616:	683a      	ldr	r2, [r7, #0]
 8009618:	4618      	mov	r0, r3
 800961a:	f002 fa54 	bl	800bac6 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>
 800961e:	f107 0308 	add.w	r3, r7, #8
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f002 fa5f 	bl	800bae8 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_>
 800962a:	6178      	str	r0, [r7, #20]
    if (dup)
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d001      	beq.n	8009636 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool22saveStringFromFreeZoneEj+0x32>
      return dup;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	e013      	b.n	800965e <_ZN11ArduinoJson8V6213HB26detail10MemoryPool22saveStringFromFreeZoneEj+0x5a>
#endif

    const char* str = left_;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	613b      	str	r3, [r7, #16]
    left_ += len;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	441a      	add	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	605a      	str	r2, [r3, #4]
    *left_++ = 0;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	1c59      	adds	r1, r3, #1
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	6051      	str	r1, [r2, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	701a      	strb	r2, [r3, #0]
    checkInvariants();
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f83d 	bl	80096d6 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool15checkInvariantsEv>
    return str;
 800965c:	693b      	ldr	r3, [r7, #16]
  }
 800965e:	4618      	mov	r0, r3
 8009660:	3718      	adds	r7, #24
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool16markAsOverflowedEv>:

  void markAsOverflowed() {
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
    overflowed_ = true;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2201      	movs	r2, #1
 8009672:	741a      	strb	r2, [r3, #16]
  }
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool5clearEv>:

  void clear() {
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
    left_ = begin_;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	605a      	str	r2, [r3, #4]
    right_ = end_;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	68da      	ldr	r2, [r3, #12]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	609a      	str	r2, [r3, #8]
    overflowed_ = false;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	741a      	strb	r2, [r3, #16]
  }
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool8canAllocEj>:

  bool canAlloc(size_t bytes) const {
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	6039      	str	r1, [r7, #0]
    return left_ + bytes <= right_;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685a      	ldr	r2, [r3, #4]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	441a      	add	r2, r3
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	bf94      	ite	ls
 80096c4:	2301      	movls	r3, #1
 80096c6:	2300      	movhi	r3, #0
 80096c8:	b2db      	uxtb	r3, r3
  }
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool15checkInvariantsEv>:
    right_ += offset;
    end_ += offset;
  }

 private:
  void checkInvariants() {
 80096d6:	b480      	push	{r7}
 80096d8:	b083      	sub	sp, #12
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(begin_ <= left_);
    ARDUINOJSON_ASSERT(left_ <= right_);
    ARDUINOJSON_ASSERT(right_ <= end_);
    ARDUINOJSON_ASSERT(isAligned(right_));
  }
 80096de:	bf00      	nop
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj>:
  template <typename T>
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b082      	sub	sp, #8
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	6039      	str	r1, [r7, #0]
    if (!canAlloc(bytes)) {
 80096f4:	6839      	ldr	r1, [r7, #0]
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7ff ffd7 	bl	80096aa <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool8canAllocEj>
 80096fc:	4603      	mov	r3, r0
 80096fe:	f083 0301 	eor.w	r3, r3, #1
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b00      	cmp	r3, #0
 8009706:	d004      	beq.n	8009712 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj+0x28>
      overflowed_ = true;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2201      	movs	r2, #1
 800970c:	741a      	strb	r2, [r3, #16]
      return 0;
 800970e:	2300      	movs	r3, #0
 8009710:	e008      	b.n	8009724 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj+0x3a>
    }
    right_ -= bytes;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	689a      	ldr	r2, [r3, #8]
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	425b      	negs	r3, r3
 800971a:	441a      	add	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	609a      	str	r2, [r3, #8]
    return right_;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
  }
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <_ZN11ArduinoJson8V6213HB26detail11VariantDataC1Ev>:
class VariantData {
  VariantContent content_;  // must be first to allow cast from array to variant
  uint8_t flags_;

 public:
  VariantData() : flags_(VALUE_IS_NULL) {}
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2200      	movs	r2, #0
 8009738:	721a      	strb	r2, [r3, #8]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <_ZN11ArduinoJson8V6213HB26detail11VariantData8asObjectEv>:

  const CollectionData* asCollection() const {
    return isCollection() ? &content_.asCollection : 0;
  }

  CollectionData* asObject() {
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
    return isObject() ? &content_.asCollection : 0;
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f829 	bl	80097a8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d001      	beq.n	8009760 <_ZN11ArduinoJson8V6213HB26detail11VariantData8asObjectEv+0x18>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	e000      	b.n	8009762 <_ZN11ArduinoJson8V6213HB26detail11VariantData8asObjectEv+0x1a>
 8009760:	2300      	movs	r3, #0
  }
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <_ZNK11ArduinoJson8V6213HB26detail11VariantData8asObjectEv>:

  const CollectionData* asObject() const {
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
    return const_cast<VariantData*>(this)->asObject();
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7ff ffe8 	bl	8009748 <_ZN11ArduinoJson8V6213HB26detail11VariantData8asObjectEv>
 8009778:	4603      	mov	r3, r0
  }
 800977a:	4618      	mov	r0, r3
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <_ZNK11ArduinoJson8V6213HB26detail11VariantData7isFloatEv>:
      default:
        return false;
    }
  }

  bool isFloat() const {
 8009782:	b480      	push	{r7}
 8009784:	b083      	sub	sp, #12
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
    return (flags_ & NUMBER_BIT) != 0;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	7a1b      	ldrb	r3, [r3, #8]
 800978e:	f003 0308 	and.w	r3, r3, #8
 8009792:	2b00      	cmp	r3, #0
 8009794:	bf14      	ite	ne
 8009796:	2301      	movne	r3, #1
 8009798:	2300      	moveq	r3, #0
 800979a:	b2db      	uxtb	r3, r3
  }
 800979c:	4618      	mov	r0, r3
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>:

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
  }

  bool isObject() const {
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
    return (flags_ & VALUE_IS_OBJECT) != 0;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	7a1b      	ldrb	r3, [r3, #8]
 80097b4:	f003 0320 	and.w	r3, r3, #32
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	bf14      	ite	ne
 80097bc:	2301      	movne	r3, #1
 80097be:	2300      	moveq	r3, #0
 80097c0:	b2db      	uxtb	r3, r3
  }
 80097c2:	4618      	mov	r0, r3
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <_ZNK11ArduinoJson8V6213HB26detail11VariantData6isNullEv>:

  bool isNull() const {
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
    return type() == VALUE_IS_NULL;
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f894 	bl	8009904 <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	bf0c      	ite	eq
 80097e2:	2301      	moveq	r3, #1
 80097e4:	2300      	movne	r3, #0
 80097e6:	b2db      	uxtb	r3, r3
  }
 80097e8:	4618      	mov	r0, r3
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <_ZNK11ArduinoJson8V6213HB26detail11VariantData10isEnclosedEv>:

  bool isEnclosed() const {
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
    return !isFloat();
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff ffc2 	bl	8009782 <_ZNK11ArduinoJson8V6213HB26detail11VariantData7isFloatEv>
 80097fe:	4603      	mov	r3, r0
 8009800:	f083 0301 	eor.w	r3, r3, #1
 8009804:	b2db      	uxtb	r3, r3
  }
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <_ZN11ArduinoJson8V6213HB26detail11VariantData10setBooleanEb>:
  void remove(TAdaptedString key) {
    if (isObject())
      content_.asCollection.removeMember(key);
  }

  void setBoolean(bool value) {
 800980e:	b580      	push	{r7, lr}
 8009810:	b082      	sub	sp, #8
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	460b      	mov	r3, r1
 8009818:	70fb      	strb	r3, [r7, #3]
    setType(VALUE_IS_BOOLEAN);
 800981a:	2106      	movs	r1, #6
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f880 	bl	8009922 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asBoolean = value;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	78fa      	ldrb	r2, [r7, #3]
 8009826:	701a      	strb	r2, [r3, #0]
  }
 8009828:	bf00      	nop
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>:

  void setFloat(JsonFloat value) {
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	ed87 0b00 	vstr	d0, [r7]
    setType(VALUE_IS_FLOAT);
 800983c:	210c      	movs	r1, #12
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f86f 	bl	8009922 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asFloat = value;
 8009844:	68f9      	ldr	r1, [r7, #12]
 8009846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800984a:	e9c1 2300 	strd	r2, r3, [r1]
  }
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}

08009856 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>:
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
    setType(VALUE_IS_SIGNED_INTEGER);
    content_.asSignedInteger = value;
  }

  void setNull() {
 8009856:	b580      	push	{r7, lr}
 8009858:	b082      	sub	sp, #8
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_NULL);
 800985e:	2100      	movs	r1, #0
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f85e 	bl	8009922 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
  }
 8009866:	bf00      	nop
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>:

  void setString(JsonString s) {
 800986e:	b580      	push	{r7, lr}
 8009870:	b084      	sub	sp, #16
 8009872:	af00      	add	r7, sp, #0
 8009874:	60f8      	str	r0, [r7, #12]
 8009876:	4638      	mov	r0, r7
 8009878:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    ARDUINOJSON_ASSERT(s);
    if (s.isLinked())
 800987c:	463b      	mov	r3, r7
 800987e:	4618      	mov	r0, r3
 8009880:	f7ff fd83 	bl	800938a <_ZNK11ArduinoJson8V6213HB210JsonString8isLinkedEv>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d004      	beq.n	8009894 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE+0x26>
      setType(VALUE_IS_LINKED_STRING);
 800988a:	2104      	movs	r1, #4
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 f848 	bl	8009922 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
 8009892:	e003      	b.n	800989c <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE+0x2e>
    else
      setType(VALUE_IS_OWNED_STRING);
 8009894:	2105      	movs	r1, #5
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f000 f843 	bl	8009922 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asString.data = s.c_str();
 800989c:	463b      	mov	r3, r7
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff fd67 	bl	8009372 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 80098a4:	4602      	mov	r2, r0
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	601a      	str	r2, [r3, #0]
    content_.asString.size = s.size();
 80098aa:	463b      	mov	r3, r7
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7ff fd7d 	bl	80093ac <_ZNK11ArduinoJson8V6213HB210JsonString4sizeEv>
 80098b2:	4602      	mov	r2, r0
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	605a      	str	r2, [r3, #4]
  }
 80098b8:	bf00      	nop
 80098ba:	3710      	adds	r7, #16
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <_ZN11ArduinoJson8V6213HB26detail11VariantData7toArrayEv>:

  CollectionData& toArray() {
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_ARRAY);
 80098c8:	2140      	movs	r1, #64	; 0x40
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f829 	bl	8009922 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asCollection.clear();
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 f94e 	bl	8009b74 <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>
    return content_.asCollection;
 80098d8:	687b      	ldr	r3, [r7, #4]
  }
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>:

  CollectionData& toObject() {
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b082      	sub	sp, #8
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
    setType(VALUE_IS_OBJECT);
 80098ea:	2120      	movs	r1, #32
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f818 	bl	8009922 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asCollection.clear();
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 f93d 	bl	8009b74 <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>
    return content_.asCollection;
 80098fa:	687b      	ldr	r3, [r7, #4]
  }
 80098fc:	4618      	mov	r0, r3
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>:
      content_.asString.data += stringDistance;
    if (flags_ & COLLECTION_MASK)
      content_.asCollection.movePointers(stringDistance, variantDistance);
  }

  uint8_t type() const {
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
    return flags_ & VALUE_MASK;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	7a1b      	ldrb	r3, [r3, #8]
 8009910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009914:	b2db      	uxtb	r3, r3
  }
 8009916:	4618      	mov	r0, r3
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>:

    return storeString(pool, value, VariantStringSetter(this));
  }

 private:
  void setType(uint8_t t) {
 8009922:	b480      	push	{r7}
 8009924:	b083      	sub	sp, #12
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	460b      	mov	r3, r1
 800992c:	70fb      	strb	r3, [r7, #3]
    flags_ &= OWNED_KEY_BIT;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7a1b      	ldrb	r3, [r3, #8]
 8009932:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009936:	b2da      	uxtb	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	721a      	strb	r2, [r3, #8]
    flags_ |= t;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	7a1a      	ldrb	r2, [r3, #8]
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	4313      	orrs	r3, r2
 8009944:	b2da      	uxtb	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	721a      	strb	r2, [r3, #8]
  }
 800994a:	bf00      	nop
 800994c:	370c      	adds	r7, #12
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterC1EPS2_>:

  struct VariantStringSetter {
    VariantStringSetter(VariantData* instance) : instance_(instance) {}
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	6039      	str	r1, [r7, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>:
 public:
  // Creates an unbound reference.
  JsonVariantConst() : data_(0) {}

  // INTERNAL USE ONLY
  explicit JsonVariantConst(const detail::VariantData* data) : data_(data) {}
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	683a      	ldr	r2, [r7, #0]
 8009982:	601a      	str	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4618      	mov	r0, r3
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>:
      containsKey(TChar* key) const {
    return variantGetMember(getData(), detail::adaptString(key)) != 0;
  }

 protected:
  const detail::VariantData* getData() const {
 8009992:	b480      	push	{r7}
 8009994:	b083      	sub	sp, #12
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
    return data_;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
  }
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>:
 public:
  // Creates an unbound reference.
  JsonVariant() : data_(0), pool_(0) {}

  // INTERNAL USE ONLY
  JsonVariant(detail::MemoryPool* pool, detail::VariantData* data)
 80099aa:	b480      	push	{r7}
 80099ac:	b085      	sub	sp, #20
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	60b9      	str	r1, [r7, #8]
 80099b4:	607a      	str	r2, [r7, #4]
      : data_(data), pool_(pool) {}
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	605a      	str	r2, [r3, #4]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	4618      	mov	r0, r3
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <_ZN11ArduinoJson8V6213HB29ConverterINS0_16JsonVariantConstEvE8fromJsonES2_>:
struct Converter<JsonVariantConst> : private detail::VariantAttorney {
  static void toJson(JsonVariantConst src, JsonVariant dst) {
    variantCopyFrom(getData(dst), getData(src), getPool(dst));
  }

  static JsonVariantConst fromJson(JsonVariantConst src) {
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  }

  template <typename TClient>
  FORCE_INLINE static typename ResultOfGetData<TClient>::type getData(
      TClient& client) {
    return client.getData();
 80099d8:	1d3b      	adds	r3, r7, #4
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff ffd9 	bl	8009992 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>
 80099e0:	4602      	mov	r2, r0
 80099e2:	bf00      	nop
    return JsonVariantConst(getData(src));
 80099e4:	f107 030c 	add.w	r3, r7, #12
 80099e8:	4611      	mov	r1, r2
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7ff ffc2 	bl	8009974 <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 80099f0:	68fb      	ldr	r3, [r7, #12]
  }
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterC1EPNS1_11VariantSlotE>:
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

struct SlotKeySetter {
  SlotKeySetter(VariantSlot* instance) : instance_(instance) {}
 80099fa:	b480      	push	{r7}
 80099fc:	b083      	sub	sp, #12
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	6039      	str	r1, [r7, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <_ZN11ArduinoJson8V6213HB26detail8slotDataEPNS1_11VariantSlotE>:
    var = var->next();
  }
  return n;
}

inline VariantData* slotData(VariantSlot* slot) {
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<VariantData*>(slot);
 8009a20:	687b      	ldr	r3, [r7, #4]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <_ZN11ArduinoJson8V6213HB212JsonDocument5clearEv>:
    return getVariant().template as<T>();
  }

  // Empties the document and resets the memory pool
  // https://arduinojson.org/v6/api/jsondocument/clear/
  void clear() {
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
    pool_.clear();
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7ff fe21 	bl	8009680 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool5clearEv>
    data_.setNull();
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	3318      	adds	r3, #24
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7ff ff07 	bl	8009856 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
  }
 8009a48:	bf00      	nop
 8009a4a:	3708      	adds	r7, #8
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <_ZN11ArduinoJson8V6213HB212JsonDocumentC1EPcj>:
 protected:
  JsonDocument() : pool_(0, 0) {}

  JsonDocument(detail::MemoryPool pool) : pool_(pool) {}

  JsonDocument(char* buf, size_t capa) : pool_(buf, capa) {}
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	68b9      	ldr	r1, [r7, #8]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7ff fd74 	bl	8009550 <_ZN11ArduinoJson8V6213HB26detail10MemoryPoolC1EPcj>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	3318      	adds	r3, #24
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7ff fe5d 	bl	800972c <_ZN11ArduinoJson8V6213HB26detail11VariantDataC1Ev>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <_ZN11ArduinoJson8V6213HB212JsonDocumentD1Ev>:

  ~JsonDocument() {}
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <_ZNK11ArduinoJson8V6213HB212JsonDocument10getVariantEv>:

  JsonVariant getVariant() {
    return JsonVariant(&pool_, &data_);
  }

  JsonVariantConst getVariant() const {
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b084      	sub	sp, #16
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
    return JsonVariantConst(&data_);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f103 0218 	add.w	r2, r3, #24
 8009aa0:	f107 030c 	add.w	r3, r7, #12
 8009aa4:	4611      	mov	r1, r2
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff ff64 	bl	8009974 <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 8009aac:	68fb      	ldr	r3, [r7, #12]
  }
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3710      	adds	r7, #16
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>:

  detail::MemoryPool pool_;
  detail::VariantData data_;

 protected:
  detail::MemoryPool* getPool() {
 8009ab6:	b480      	push	{r7}
 8009ab8:	b083      	sub	sp, #12
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
    return &pool_;
 8009abe:	687b      	ldr	r3, [r7, #4]
  }
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <_ZN11ArduinoJson8V6213HB212JsonDocument7getDataEv>:

  detail::VariantData* getData() {
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
    return &data_;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3318      	adds	r3, #24
  }
 8009ad8:	4618      	mov	r0, r3
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>:

  const detail::VariantData* getData() const {
    return &data_;
  }

  detail::VariantData* getOrCreateData() {
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
    return &data_;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3318      	adds	r3, #24
  }
 8009af0:	4618      	mov	r0, r3
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>:
#include <ArduinoJson/Strings/StringAdapters.hpp>
#include <ArduinoJson/Variant/VariantData.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = pool->allocVariant();
 8009b06:	6838      	ldr	r0, [r7, #0]
 8009b08:	f7ff fd58 	bl	80095bc <_ZN11ArduinoJson8V6213HB26detail10MemoryPool12allocVariantEv>
 8009b0c:	60f8      	str	r0, [r7, #12]
  if (!slot)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d101      	bne.n	8009b18 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x1c>
    return 0;
 8009b14:	2300      	movs	r3, #0
 8009b16:	e017      	b.n	8009b48 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x4c>

  if (tail_) {
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d009      	beq.n	8009b34 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x38>
    ARDUINOJSON_ASSERT(pool->owns(tail_));  // Can't alter a linked array/object
    tail_->setNextNotNull(slot);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	68f9      	ldr	r1, [r7, #12]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff fcb9 	bl	800949e <_ZN11ArduinoJson8V6213HB26detail11VariantSlot14setNextNotNullEPS2_>
    tail_ = slot;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	605a      	str	r2, [r3, #4]
 8009b32:	e005      	b.n	8009b40 <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE+0x44>
  } else {
    head_ = slot;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	601a      	str	r2, [r3, #0]
    tail_ = slot;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	68fa      	ldr	r2, [r7, #12]
 8009b3e:	605a      	str	r2, [r3, #4]
  }

  slot->clear();
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff fcf2 	bl	800952a <_ZN11ArduinoJson8V6213HB26detail11VariantSlot5clearEv>
  return slot;
 8009b46:	68fb      	ldr	r3, [r7, #12]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10addElementEPNS1_10MemoryPoolE>:

inline VariantData* CollectionData::addElement(MemoryPool* pool) {
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
  return slotData(addSlot(pool));
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff ffcd 	bl	8009afc <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 8009b62:	4603      	mov	r3, r0
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7ff ff57 	bl	8009a18 <_ZN11ArduinoJson8V6213HB26detail8slotDataEPNS1_11VariantSlotE>
 8009b6a:	4603      	mov	r3, r0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <_ZN11ArduinoJson8V6213HB26detail14CollectionData5clearEv>:
    return 0;
  }
  return slot->data();
}

inline void CollectionData::clear() {
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  head_ = 0;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	601a      	str	r2, [r3, #0]
  tail_ = 0;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	605a      	str	r2, [r3, #4]
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE>:
  if (!head_)
    return 0;
  return head_->next(index);
}

inline VariantSlot* CollectionData::getPreviousSlot(VariantSlot* target) const {
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  VariantSlot* current = head_;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	60fb      	str	r3, [r7, #12]
  while (current) {
 8009ba4:	e00b      	b.n	8009bbe <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x2a>
    VariantSlot* next = current->next();
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f7ff fc3f 	bl	800942a <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 8009bac:	60b8      	str	r0, [r7, #8]
    if (next == target)
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d101      	bne.n	8009bba <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x26>
      return current;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	e005      	b.n	8009bc6 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x32>
    current = next;
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	60fb      	str	r3, [r7, #12]
  while (current) {
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1f0      	bne.n	8009ba6 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE+0x12>
  }
  return 0;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE>:
    index--;
  }
  return slotData(slot);
}

inline void CollectionData::removeSlot(VariantSlot* slot) {
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b084      	sub	sp, #16
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]
  if (!slot)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d01a      	beq.n	8009c14 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x46>
    return;
  VariantSlot* prev = getPreviousSlot(slot);
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f7ff ffd7 	bl	8009b94 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData15getPreviousSlotEPNS1_11VariantSlotE>
 8009be6:	60f8      	str	r0, [r7, #12]
  VariantSlot* next = slot->next();
 8009be8:	6838      	ldr	r0, [r7, #0]
 8009bea:	f7ff fc1e 	bl	800942a <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 8009bee:	60b8      	str	r0, [r7, #8]
  if (prev)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d004      	beq.n	8009c00 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x32>
    prev->setNext(next);
 8009bf6:	68b9      	ldr	r1, [r7, #8]
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f7ff fc39 	bl	8009470 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot7setNextEPS2_>
 8009bfe:	e002      	b.n	8009c06 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x38>
  else
    head_ = next;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	601a      	str	r2, [r3, #0]
  if (!next)
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d104      	bne.n	8009c16 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x48>
    tail_ = prev;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	605a      	str	r2, [r3, #4]
 8009c12:	e000      	b.n	8009c16 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE+0x48>
    return;
 8009c14:	bf00      	nop
}
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	4603      	mov	r3, r0
 8009c24:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(true);
 8009c26:	2001      	movs	r0, #1
 8009c28:	f000 f836 	bl	8009c98 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>
 8009c2c:	60f8      	str	r0, [r7, #12]
    while (p[0] && p[1] != c) {
 8009c2e:	e002      	b.n	8009c36 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x1a>
      p += 2;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3302      	adds	r3, #2
 8009c34:	60fb      	str	r3, [r7, #12]
    while (p[0] && p[1] != c) {
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d005      	beq.n	8009c4a <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x2e>
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3301      	adds	r3, #1
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	79fa      	ldrb	r2, [r7, #7]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d1f2      	bne.n	8009c30 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc+0x14>
    }
    return p[0];
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
  }
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3710      	adds	r7, #16
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc>:

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	71fb      	strb	r3, [r7, #7]
    const char* p = escapeTable(false);
 8009c60:	2000      	movs	r0, #0
 8009c62:	f000 f819 	bl	8009c98 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>
 8009c66:	60f8      	str	r0, [r7, #12]
    for (;;) {
      if (p[0] == '\0')
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x1e>
        return 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	e00c      	b.n	8009c8e <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x38>
      if (p[0] == c)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	79fa      	ldrb	r2, [r7, #7]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d103      	bne.n	8009c86 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x30>
        return p[1];
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3301      	adds	r3, #1
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	e003      	b.n	8009c8e <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x38>
      p += 2;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3302      	adds	r3, #2
 8009c8a:	60fb      	str	r3, [r7, #12]
      if (p[0] == '\0')
 8009c8c:	e7ec      	b.n	8009c68 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc+0x12>
    }
  }
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
	...

08009c98 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb>:

 private:
  static const char* escapeTable(bool excludeSolidus) {
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	71fb      	strb	r3, [r7, #7]
    return &"//\"\"\\\\b\bf\fn\nr\rt\t"[excludeSolidus ? 2 : 0];
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x14>
 8009ca8:	2302      	movs	r3, #2
 8009caa:	e000      	b.n	8009cae <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x16>
 8009cac:	2300      	movs	r3, #0
 8009cae:	4a04      	ldr	r2, [pc, #16]	; (8009cc0 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence11escapeTableEb+0x28>)
 8009cb0:	4413      	add	r3, r2
  }
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	08011ecc 	.word	0x08011ecc

08009cc4 <_ZN11ArduinoJson8V6213HB29ConverterIbvE6toJsonEbNS0_11JsonVariantE>:
  }
};

template <>
struct Converter<bool> : private detail::VariantAttorney {
  static void toJson(bool src, JsonVariant dst) {
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	1d3b      	adds	r3, r7, #4
 8009ccc:	e883 0006 	stmia.w	r3, {r1, r2}
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73fb      	strb	r3, [r7, #15]
 8009cd4:	1d3b      	adds	r3, r7, #4
 8009cd6:	613b      	str	r3, [r7, #16]
    return data_;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	bf00      	nop
    auto data = getData(dst);
 8009cde:	617b      	str	r3, [r7, #20]
    if (data)
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d004      	beq.n	8009cf0 <_ZN11ArduinoJson8V6213HB29ConverterIbvE6toJsonEbNS0_11JsonVariantE+0x2c>
      data->setBoolean(src);
 8009ce6:	7bfb      	ldrb	r3, [r7, #15]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6978      	ldr	r0, [r7, #20]
 8009cec:	f7ff fd8f 	bl	800980e <_ZN11ArduinoJson8V6213HB26detail11VariantData10setBooleanEb>
  }
 8009cf0:	bf00      	nop
 8009cf2:	3718      	adds	r7, #24
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <_ZN11ArduinoJson8V6213HB29ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>:
  }
};

template <>
struct Converter<const char*> : private detail::VariantAttorney {
  static void toJson(const char* src, JsonVariant dst) {
 8009cf8:	b590      	push	{r4, r7, lr}
 8009cfa:	b087      	sub	sp, #28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	1d3b      	adds	r3, r7, #4
 8009d02:	e883 0006 	stmia.w	r3, {r1, r2}
 8009d06:	1d3b      	adds	r3, r7, #4
 8009d08:	613b      	str	r3, [r7, #16]
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	681c      	ldr	r4, [r3, #0]
 8009d0e:	bf00      	nop
    variantSetString(getData(dst), detail::adaptString(src), getPool(dst));
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f001 ff2a 	bl	800bb6a <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 8009d16:	4601      	mov	r1, r0
 8009d18:	1d3b      	adds	r3, r7, #4
 8009d1a:	617b      	str	r3, [r7, #20]
    return pool_;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	685b      	ldr	r3, [r3, #4]
    return client.getPool();
 8009d20:	bf00      	nop
 8009d22:	461a      	mov	r2, r3
 8009d24:	4620      	mov	r0, r4
 8009d26:	f001 ff2c 	bl	800bb82 <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE>
  }
 8009d2a:	bf00      	nop
 8009d2c:	371c      	adds	r7, #28
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd90      	pop	{r4, r7, pc}

08009d32 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>:
#include <ArduinoJson/Namespace.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

#ifndef isdigit
inline bool isdigit(char c) {
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	4603      	mov	r3, r0
 8009d3a:	71fb      	strb	r3, [r7, #7]
  return '0' <= c && c <= '9';
 8009d3c:	79fb      	ldrb	r3, [r7, #7]
 8009d3e:	2b2f      	cmp	r3, #47	; 0x2f
 8009d40:	d904      	bls.n	8009d4c <_ZN11ArduinoJson8V6213HB26detail7isdigitEc+0x1a>
 8009d42:	79fb      	ldrb	r3, [r7, #7]
 8009d44:	2b39      	cmp	r3, #57	; 0x39
 8009d46:	d801      	bhi.n	8009d4c <_ZN11ArduinoJson8V6213HB26detail7isdigitEc+0x1a>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	e000      	b.n	8009d4e <_ZN11ArduinoJson8V6213HB26detail7isdigitEc+0x1c>
 8009d4c:	2300      	movs	r3, #0
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	370c      	adds	r7, #12
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
 8009d5a:	0000      	movs	r0, r0
 8009d5c:	0000      	movs	r0, r0
	...

08009d60 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

inline bool parseNumber(const char* s, VariantData& result) {
 8009d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d64:	ed2d 8b02 	vpush	{d8}
 8009d68:	b0a6      	sub	sp, #152	; 0x98
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6578      	str	r0, [r7, #84]	; 0x54
 8009d6e:	6539      	str	r1, [r7, #80]	; 0x50
  typedef choose_largest<traits::mantissa_type, JsonUInt>::type mantissa_t;
  typedef traits::exponent_type exponent_t;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8009d70:	2300      	movs	r3, #0
 8009d72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  switch (*s) {
 8009d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	2b2b      	cmp	r3, #43	; 0x2b
 8009d7c:	d008      	beq.n	8009d90 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x30>
 8009d7e:	2b2d      	cmp	r3, #45	; 0x2d
 8009d80:	d10a      	bne.n	8009d98 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38>
    case '-':
      is_negative = true;
 8009d82:	2301      	movs	r3, #1
 8009d84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      s++;
 8009d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	657b      	str	r3, [r7, #84]	; 0x54
      break;
 8009d8e:	e003      	b.n	8009d98 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38>
    case '+':
      s++;
 8009d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d92:	3301      	adds	r3, #1
 8009d94:	657b      	str	r3, [r7, #84]	; 0x54
      break;
 8009d96:	bf00      	nop
    result.setFloat(is_negative ? -traits::inf() : traits::inf());
    return true;
  }
#endif

  if (!isdigit(*s) && *s != '.')
 8009d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7ff ffc8 	bl	8009d32 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 8009da2:	4603      	mov	r3, r0
 8009da4:	f083 0301 	eor.w	r3, r3, #1
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d005      	beq.n	8009dba <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x5a>
 8009dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	2b2e      	cmp	r3, #46	; 0x2e
 8009db4:	d001      	beq.n	8009dba <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x5a>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e000      	b.n	8009dbc <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x5c>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d001      	beq.n	8009dc4 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x64>
    return false;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	e1d5      	b.n	800a170 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>

  mantissa_t mantissa = 0;
 8009dc4:	f04f 0200 	mov.w	r2, #0
 8009dc8:	f04f 0300 	mov.w	r3, #0
 8009dcc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
  exponent_t exponent_offset = 0;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  const mantissa_t maxUint = JsonUInt(-1);
 8009dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dda:	f04f 33ff 	mov.w	r3, #4294967295
 8009dde:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  while (isdigit(*s)) {
 8009de2:	e054      	b.n	8009e8e <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x12e>
    uint8_t digit = uint8_t(*s - '0');
 8009de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	3b30      	subs	r3, #48	; 0x30
 8009dea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (mantissa > maxUint / 10)
 8009dee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009df2:	f112 3f66 	cmn.w	r2, #1717986918	; 0x66666666
 8009df6:	49ba      	ldr	r1, [pc, #744]	; (800a0e0 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x380>)
 8009df8:	418b      	sbcs	r3, r1
 8009dfa:	d251      	bcs.n	8009ea0 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x140>
      break;
    mantissa *= 10;
 8009dfc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8009e00:	4622      	mov	r2, r4
 8009e02:	462b      	mov	r3, r5
 8009e04:	f04f 0000 	mov.w	r0, #0
 8009e08:	f04f 0100 	mov.w	r1, #0
 8009e0c:	0099      	lsls	r1, r3, #2
 8009e0e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8009e12:	0090      	lsls	r0, r2, #2
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	eb12 0804 	adds.w	r8, r2, r4
 8009e1c:	eb43 0905 	adc.w	r9, r3, r5
 8009e20:	eb18 0308 	adds.w	r3, r8, r8
 8009e24:	61bb      	str	r3, [r7, #24]
 8009e26:	eb49 0309 	adc.w	r3, r9, r9
 8009e2a:	61fb      	str	r3, [r7, #28]
 8009e2c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8009e30:	e9c7 8922 	strd	r8, r9, [r7, #136]	; 0x88
    if (mantissa > maxUint - digit)
 8009e34:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009e38:	2200      	movs	r2, #0
 8009e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8009e3c:	647a      	str	r2, [r7, #68]	; 0x44
 8009e3e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009e42:	460b      	mov	r3, r1
 8009e44:	43db      	mvns	r3, r3
 8009e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e48:	4613      	mov	r3, r2
 8009e4a:	43db      	mvns	r3, r3
 8009e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e4e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009e52:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8009e56:	4621      	mov	r1, r4
 8009e58:	4291      	cmp	r1, r2
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	eb71 0303 	sbcs.w	r3, r1, r3
 8009e60:	d320      	bcc.n	8009ea4 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x144>
      break;
    mantissa += digit;
 8009e62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8009e66:	2200      	movs	r2, #0
 8009e68:	633b      	str	r3, [r7, #48]	; 0x30
 8009e6a:	637a      	str	r2, [r7, #52]	; 0x34
 8009e6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009e70:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009e74:	4621      	mov	r1, r4
 8009e76:	1851      	adds	r1, r2, r1
 8009e78:	6139      	str	r1, [r7, #16]
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	414b      	adcs	r3, r1
 8009e7e:	617b      	str	r3, [r7, #20]
 8009e80:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009e84:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
    s++;
 8009e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	657b      	str	r3, [r7, #84]	; 0x54
  while (isdigit(*s)) {
 8009e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7ff ff4d 	bl	8009d32 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d1a2      	bne.n	8009de4 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x84>
 8009e9e:	e002      	b.n	8009ea6 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x146>
      break;
 8009ea0:	bf00      	nop
 8009ea2:	e000      	b.n	8009ea6 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x146>
      break;
 8009ea4:	bf00      	nop
  }

  if (*s == '\0') {
 8009ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d138      	bne.n	8009f20 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x1c0>
    if (is_negative) {
 8009eae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d01a      	beq.n	8009eec <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x18c>
      const mantissa_t sintMantissaMax = mantissa_t(1)
 8009eb6:	f04f 0200 	mov.w	r2, #0
 8009eba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ebe:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
                                         << (sizeof(JsonInteger) * 8 - 1);
      if (mantissa <= sintMantissaMax) {
 8009ec2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009ec6:	2a01      	cmp	r2, #1
 8009ec8:	f173 4300 	sbcs.w	r3, r3, #2147483648	; 0x80000000
 8009ecc:	d228      	bcs.n	8009f20 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x1c0>
        result.setInteger(JsonInteger(~mantissa + 1));
 8009ece:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4250      	negs	r0, r2
 8009ed6:	62b8      	str	r0, [r7, #40]	; 0x28
 8009ed8:	eb61 0303 	sbc.w	r3, r1, r3
 8009edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ee2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009ee4:	f001 fe86 	bl	800bbf4 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES6_>
        return true;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e141      	b.n	800a170 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>
      }
    } else {
      result.setInteger(JsonUInt(mantissa));
 8009eec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009ef0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009ef2:	f001 fe92 	bl	800bc1a <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES6_>
      return true;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e13a      	b.n	800a170 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>
    }
  }

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 8009efa:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8009efe:	f04f 020a 	mov.w	r2, #10
 8009f02:	f04f 0300 	mov.w	r3, #0
 8009f06:	f7f6 fd59 	bl	80009bc <__aeabi_uldivmod>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    exponent_offset++;
 8009f12:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	3301      	adds	r3, #1
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  while (mantissa > traits::mantissa_max) {
 8009f20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f28:	d2e7      	bcs.n	8009efa <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x19a>
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 8009f2a:	e009      	b.n	8009f40 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x1e0>
    exponent_offset++;
 8009f2c:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	3301      	adds	r3, #1
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    s++;
 8009f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	657b      	str	r3, [r7, #84]	; 0x54
  while (isdigit(*s)) {
 8009f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7ff fef4 	bl	8009d32 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1ed      	bne.n	8009f2c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x1cc>
  }

  if (*s == '.') {
 8009f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	2b2e      	cmp	r3, #46	; 0x2e
 8009f56:	d14c      	bne.n	8009ff2 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x292>
    s++;
 8009f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	657b      	str	r3, [r7, #84]	; 0x54
    while (isdigit(*s)) {
 8009f5e:	e040      	b.n	8009fe2 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x282>
      if (mantissa < traits::mantissa_max / 10) {
 8009f60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009f64:	f1b2 3f99 	cmp.w	r2, #2576980377	; 0x99999999
 8009f68:	495e      	ldr	r1, [pc, #376]	; (800a0e4 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x384>)
 8009f6a:	418b      	sbcs	r3, r1
 8009f6c:	d236      	bcs.n	8009fdc <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x27c>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8009f6e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8009f72:	4622      	mov	r2, r4
 8009f74:	462b      	mov	r3, r5
 8009f76:	f04f 0000 	mov.w	r0, #0
 8009f7a:	f04f 0100 	mov.w	r1, #0
 8009f7e:	0099      	lsls	r1, r3, #2
 8009f80:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8009f84:	0090      	lsls	r0, r2, #2
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	eb12 0a04 	adds.w	sl, r2, r4
 8009f8e:	eb43 0b05 	adc.w	fp, r3, r5
 8009f92:	eb1a 030a 	adds.w	r3, sl, sl
 8009f96:	60bb      	str	r3, [r7, #8]
 8009f98:	eb4b 030b 	adc.w	r3, fp, fp
 8009f9c:	60fb      	str	r3, [r7, #12]
 8009f9e:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009fa2:	4652      	mov	r2, sl
 8009fa4:	465b      	mov	r3, fp
 8009fa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009fa8:	7809      	ldrb	r1, [r1, #0]
 8009faa:	3930      	subs	r1, #48	; 0x30
 8009fac:	b2c9      	uxtb	r1, r1
 8009fae:	b2c9      	uxtb	r1, r1
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	6239      	str	r1, [r7, #32]
 8009fb4:	6278      	str	r0, [r7, #36]	; 0x24
 8009fb6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009fba:	4621      	mov	r1, r4
 8009fbc:	1851      	adds	r1, r2, r1
 8009fbe:	6039      	str	r1, [r7, #0]
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	414b      	adcs	r3, r1
 8009fc4:	607b      	str	r3, [r7, #4]
 8009fc6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009fca:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
        exponent_offset--;
 8009fce:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
      }
      s++;
 8009fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fde:	3301      	adds	r3, #1
 8009fe0:	657b      	str	r3, [r7, #84]	; 0x54
    while (isdigit(*s)) {
 8009fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff fea3 	bl	8009d32 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1b6      	bne.n	8009f60 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x200>
    }
  }

  int exponent = 0;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (*s == 'e' || *s == 'E') {
 8009ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	2b65      	cmp	r3, #101	; 0x65
 8009ffe:	d004      	beq.n	800a00a <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x2aa>
 800a000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	2b45      	cmp	r3, #69	; 0x45
 800a006:	f040 8083 	bne.w	800a110 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x3b0>
    s++;
 800a00a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a00c:	3301      	adds	r3, #1
 800a00e:	657b      	str	r3, [r7, #84]	; 0x54
    bool negative_exponent = false;
 800a010:	2300      	movs	r3, #0
 800a012:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    if (*s == '-') {
 800a016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2b2d      	cmp	r3, #45	; 0x2d
 800a01c:	d106      	bne.n	800a02c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x2cc>
      negative_exponent = true;
 800a01e:	2301      	movs	r3, #1
 800a020:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
      s++;
 800a024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a026:	3301      	adds	r3, #1
 800a028:	657b      	str	r3, [r7, #84]	; 0x54
 800a02a:	e060      	b.n	800a0ee <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38e>
    } else if (*s == '+') {
 800a02c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	2b2b      	cmp	r3, #43	; 0x2b
 800a032:	d15c      	bne.n	800a0ee <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38e>
      s++;
 800a034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a036:	3301      	adds	r3, #1
 800a038:	657b      	str	r3, [r7, #84]	; 0x54
    }

    while (isdigit(*s)) {
 800a03a:	e058      	b.n	800a0ee <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x38e>
      exponent = exponent * 10 + (*s - '0');
 800a03c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a040:	4613      	mov	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	461a      	mov	r2, r3
 800a04a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	3b30      	subs	r3, #48	; 0x30
 800a050:	4413      	add	r3, r2
 800a052:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      if (exponent + exponent_offset > traits::exponent_max) {
 800a056:	f9b7 2086 	ldrsh.w	r2, [r7, #134]	; 0x86
 800a05a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a05e:	4413      	add	r3, r2
 800a060:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800a064:	dd40      	ble.n	800a0e8 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x388>
        if (negative_exponent)
 800a066:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d010      	beq.n	800a090 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x330>
          result.setFloat(is_negative ? -0.0f : 0.0f);
 800a06e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x31c>
 800a076:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a0d0 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x370>
 800a07a:	e001      	b.n	800a080 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x320>
 800a07c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800a0d8 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x378>
 800a080:	eeb0 0a47 	vmov.f32	s0, s14
 800a084:	eef0 0a67 	vmov.f32	s1, s15
 800a088:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a08a:	f7ff fbd1 	bl	8009830 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>
 800a08e:	e01b      	b.n	800a0c8 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x368>
        else
          result.setFloat(is_negative ? -traits::inf() : traits::inf());
 800a090:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00a      	beq.n	800a0ae <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x34e>
 800a098:	f001 fdd2 	bl	800bc40 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE3infEv>
 800a09c:	ec53 2b10 	vmov	r2, r3, d0
 800a0a0:	ee08 2a10 	vmov	s16, r2
 800a0a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a0a8:	ee08 3a90 	vmov	s17, r3
 800a0ac:	e005      	b.n	800a0ba <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x35a>
 800a0ae:	f001 fdc7 	bl	800bc40 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE3infEv>
 800a0b2:	eeb0 8a40 	vmov.f32	s16, s0
 800a0b6:	eef0 8a60 	vmov.f32	s17, s1
 800a0ba:	eeb0 0a48 	vmov.f32	s0, s16
 800a0be:	eef0 0a68 	vmov.f32	s1, s17
 800a0c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a0c4:	f7ff fbb4 	bl	8009830 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>
        return true;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e051      	b.n	800a170 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>
 800a0cc:	f3af 8000 	nop.w
 800a0d0:	00000000 	.word	0x00000000
 800a0d4:	80000000 	.word	0x80000000
	...
 800a0e0:	19999999 	.word	0x19999999
 800a0e4:	00019999 	.word	0x00019999
      }
      s++;
 800a0e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	657b      	str	r3, [r7, #84]	; 0x54
    while (isdigit(*s)) {
 800a0ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff fe1d 	bl	8009d32 <_ZN11ArduinoJson8V6213HB26detail7isdigitEc>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d19e      	bne.n	800a03c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x2dc>
    }
    if (negative_exponent)
 800a0fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800a102:	2b00      	cmp	r3, #0
 800a104:	d004      	beq.n	800a110 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x3b0>
      exponent = -exponent;
 800a106:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a10a:	425b      	negs	r3, r3
 800a10c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  }
  exponent += exponent_offset;
 800a110:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 800a114:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a118:	4413      	add	r3, r2
 800a11a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0')
 800a11e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x3ca>
    return false;
 800a126:	2300      	movs	r3, #0
 800a128:	e022      	b.n	800a170 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x410>

  JsonFloat final_result =
      make_float(static_cast<JsonFloat>(mantissa), exponent);
 800a12a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800a12e:	f7f6 fb67 	bl	8000800 <__aeabi_ul2d>
 800a132:	4602      	mov	r2, r0
 800a134:	460b      	mov	r3, r1
 800a136:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800a13a:	ec43 2b10 	vmov	d0, r2, r3
 800a13e:	f001 fd91 	bl	800bc64 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_>
 800a142:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58

  result.setFloat(is_negative ? -final_result : final_result);
 800a146:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d006      	beq.n	800a15c <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x3fc>
 800a14e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a150:	64bb      	str	r3, [r7, #72]	; 0x48
 800a152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a158:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a15a:	e003      	b.n	800a164 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE+0x404>
 800a15c:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800a160:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 800a164:	ed97 0b12 	vldr	d0, [r7, #72]	; 0x48
 800a168:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a16a:	f7ff fb61 	bl	8009830 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>
  return true;
 800a16e:	2301      	movs	r3, #1
}
 800a170:	4618      	mov	r0, r3
 800a172:	3798      	adds	r7, #152	; 0x98
 800a174:	46bd      	mov	sp, r7
 800a176:	ecbd 8b02 	vpop	{d8}
 800a17a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a17e:	bf00      	nop

0800a180 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1Ev>:
    InvalidInput,
    NoMemory,
    TooDeep
  };

  DeserializationError() {}
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4618      	mov	r0, r3
 800a18c:	370c      	adds	r7, #12
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1ENS1_4CodeE>:
  DeserializationError(Code c) : code_(c) {}
 800a196:	b480      	push	{r7}
 800a198:	b083      	sub	sp, #12
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	70fb      	strb	r3, [r7, #3]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	78fa      	ldrb	r2, [r7, #3]
 800a1a6:	701a      	strb	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	370c      	adds	r7, #12
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr

0800a1b6 <_ZNK11ArduinoJson8V6213HB220DeserializationErrorcvbEv>:
  friend bool operator!=(Code lhs, const DeserializationError& rhs) {
    return lhs != rhs.code_;
  }

  // Returns true if there is an error
  explicit operator bool() const {
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
    return code_ != Ok;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	bf14      	ite	ne
 800a1c6:	2301      	movne	r3, #1
 800a1c8:	2300      	moveq	r3, #0
 800a1ca:	b2db      	uxtb	r3, r3
  }
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter5allowEv>:
};
}  // namespace DeserializationOption

namespace detail {
struct AllowAllFilter {
  bool allow() const {
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
    return true;
 800a1e0:	2301      	movs	r3, #1
  }
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowArrayEv>:

  bool allowArray() const {
 800a1ee:	b480      	push	{r7}
 800a1f0:	b083      	sub	sp, #12
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
    return true;
 800a1f6:	2301      	movs	r3, #1
  }
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter11allowObjectEv>:

  bool allowObject() const {
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
    return true;
 800a20c:	2301      	movs	r3, #1
  }
 800a20e:	4618      	mov	r0, r3
 800a210:	370c      	adds	r7, #12
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>:

  bool allowValue() const {
 800a21a:	b480      	push	{r7}
 800a21c:	b083      	sub	sp, #12
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
    return true;
 800a222:	2301      	movs	r3, #1
  }
 800a224:	4618      	mov	r0, r3
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <_ZN11ArduinoJson8V6213HB221DeserializationOption12NestingLimitC1Ev>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

namespace DeserializationOption {
class NestingLimit {
 public:
  NestingLimit() : value_(ARDUINOJSON_DEFAULT_NESTING_LIMIT) {}
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	220a      	movs	r2, #10
 800a23c:	701a      	strb	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <_ZN11ArduinoJson8V6213HB221DeserializationOption12NestingLimitC1Eh>:
  explicit NestingLimit(uint8_t n) : value_(n) {}
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	78fa      	ldrb	r2, [r7, #3]
 800a25c:	701a      	strb	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>:

  NestingLimit decrement() const {
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(value_ > 0);
    return NestingLimit(static_cast<uint8_t>(value_ - 1));
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	3b01      	subs	r3, #1
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	f107 030c 	add.w	r3, r7, #12
 800a280:	4611      	mov	r1, r2
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff ffe2 	bl	800a24c <_ZN11ArduinoJson8V6213HB221DeserializationOption12NestingLimitC1Eh>
 800a288:	7b3b      	ldrb	r3, [r7, #12]
  }
 800a28a:	4618      	mov	r0, r3
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>:

  bool reached() const {
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
    return value_ == 0;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	bf0c      	ite	eq
 800a2a2:	2301      	moveq	r3, #1
 800a2a4:	2300      	movne	r3, #0
 800a2a6:	b2db      	uxtb	r3, r3
  }
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr

0800a2b4 <_ZN11ArduinoJson8V6213HB26detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>:
    DeserializationOption::NestingLimit nestingLimit, TFilter filter) {
  return {filter, nestingLimit};
}

inline DeserializationOptions<AllowAllFilter> makeDeserializationOptions(
    DeserializationOption::NestingLimit nestingLimit = {}) {
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	7138      	strb	r0, [r7, #4]
  return {{}, nestingLimit};
 800a2bc:	793b      	ldrb	r3, [r7, #4]
 800a2be:	737b      	strb	r3, [r7, #13]
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	7b3a      	ldrb	r2, [r7, #12]
 800a2c4:	f362 0307 	bfi	r3, r2, #0, #8
 800a2c8:	7b7a      	ldrb	r2, [r7, #13]
 800a2ca:	f362 230f 	bfi	r3, r2, #8, #8
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <_ZN11ArduinoJson8V6213HB26detail12StringCopierC1EPNS1_10MemoryPoolE>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

class StringCopier {
 public:
  StringCopier(MemoryPool* pool) : pool_(pool) {}
 800a2da:	b480      	push	{r7}
 800a2dc:	b083      	sub	sp, #12
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	6039      	str	r1, [r7, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	601a      	str	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <_ZN11ArduinoJson8V6213HB26detail12StringCopier11startStringEv>:

  void startString() {
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
    pool_->getFreeZone(&ptr_, &capacity_);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6818      	ldr	r0, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	1d19      	adds	r1, r3, #4
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	330c      	adds	r3, #12
 800a30c:	461a      	mov	r2, r3
 800a30e:	f7ff f961 	bl	80095d4 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool11getFreeZoneEPPcPj>
    size_ = 0;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	609a      	str	r2, [r3, #8]
    if (capacity_ == 0)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d104      	bne.n	800a32a <_ZN11ArduinoJson8V6213HB26detail12StringCopier11startStringEv+0x32>
      pool_->markAsOverflowed();
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4618      	mov	r0, r3
 800a326:	f7ff f99e 	bl	8009666 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool16markAsOverflowedEv>
  }
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <_ZN11ArduinoJson8V6213HB26detail12StringCopier4saveEv>:

  JsonString save() {
 800a332:	b580      	push	{r7, lr}
 800a334:	b082      	sub	sp, #8
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(ptr_);
    ARDUINOJSON_ASSERT(size_ < capacity_);  // needs room for the terminator
    return JsonString(pool_->saveStringFromFreeZone(size_), size_,
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
                      JsonString::Copied);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	4619      	mov	r1, r3
 800a346:	4610      	mov	r0, r2
 800a348:	f7ff f95c 	bl	8009604 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool22saveStringFromFreeZoneEj>
 800a34c:	4601      	mov	r1, r0
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	689a      	ldr	r2, [r3, #8]
 800a352:	2300      	movs	r3, #0
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7fe fff5 	bl	8009344 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  }
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>:
  void append(const char* s, size_t n) {
    while (n-- > 0)
      append(*s++);
  }

  void append(char c) {
 800a362:	b580      	push	{r7, lr}
 800a364:	b082      	sub	sp, #8
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	460b      	mov	r3, r1
 800a36c:	70fb      	strb	r3, [r7, #3]
    if (size_ + 1 < capacity_)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	429a      	cmp	r2, r3
 800a37a:	d20a      	bcs.n	800a392 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc+0x30>
      ptr_[size_++] = c;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685a      	ldr	r2, [r3, #4]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	689b      	ldr	r3, [r3, #8]
 800a384:	1c58      	adds	r0, r3, #1
 800a386:	6879      	ldr	r1, [r7, #4]
 800a388:	6088      	str	r0, [r1, #8]
 800a38a:	4413      	add	r3, r2
 800a38c:	78fa      	ldrb	r2, [r7, #3]
 800a38e:	701a      	strb	r2, [r3, #0]
    else
      pool_->markAsOverflowed();
  }
 800a390:	e004      	b.n	800a39c <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc+0x3a>
      pool_->markAsOverflowed();
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4618      	mov	r0, r3
 800a398:	f7ff f965 	bl	8009666 <_ZN11ArduinoJson8V6213HB26detail10MemoryPool16markAsOverflowedEv>
  }
 800a39c:	bf00      	nop
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier7isValidEv>:

  bool isValid() const {
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
    return !pool_->overflowed();
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7ff f8f7 	bl	80095a4 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	f083 0301 	eor.w	r3, r3, #1
 800a3bc:	b2db      	uxtb	r3, r3
  }
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier3strEv>:

  size_t size() const {
    return size_;
  }

  JsonString str() const {
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
 800a3ce:	6039      	str	r1, [r7, #0]
    ARDUINOJSON_ASSERT(ptr_);
    ARDUINOJSON_ASSERT(size_ < capacity_);
    ptr_[size_] = 0;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	685a      	ldr	r2, [r3, #4]
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	4413      	add	r3, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	701a      	strb	r2, [r3, #0]
    return JsonString(ptr_, size_, JsonString::Copied);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	6859      	ldr	r1, [r3, #4]
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	689a      	ldr	r2, [r3, #8]
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7fe ffab 	bl	8009344 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  }
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf16 {
inline bool isHighSurrogate(uint16_t codeunit) {
 800a3f6:	b480      	push	{r7}
 800a3f8:	b083      	sub	sp, #12
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xD800 && codeunit < 0xDC00;
 800a400:	88fb      	ldrh	r3, [r7, #6]
 800a402:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800a406:	d305      	bcc.n	800a414 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt+0x1e>
 800a408:	88fb      	ldrh	r3, [r7, #6]
 800a40a:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800a40e:	d201      	bcs.n	800a414 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt+0x1e>
 800a410:	2301      	movs	r3, #1
 800a412:	e000      	b.n	800a416 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt+0x20>
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	370c      	adds	r7, #12
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr

0800a422 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt>:

inline bool isLowSurrogate(uint16_t codeunit) {
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	4603      	mov	r3, r0
 800a42a:	80fb      	strh	r3, [r7, #6]
  return codeunit >= 0xDC00 && codeunit < 0xE000;
 800a42c:	88fb      	ldrh	r3, [r7, #6]
 800a42e:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800a432:	d305      	bcc.n	800a440 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt+0x1e>
 800a434:	88fb      	ldrh	r3, [r7, #6]
 800a436:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800a43a:	d201      	bcs.n	800a440 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt+0x1e>
 800a43c:	2301      	movs	r3, #1
 800a43e:	e000      	b.n	800a442 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt+0x20>
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	370c      	adds	r7, #12
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <_ZN11ArduinoJson8V6213HB26detail5Utf169CodepointC1Ev>:

class Codepoint {
 public:
  Codepoint() : highSurrogate_(0), codepoint_(0) {}
 800a44e:	b480      	push	{r7}
 800a450:	b083      	sub	sp, #12
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	801a      	strh	r2, [r3, #0]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	605a      	str	r2, [r3, #4]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt>:

  bool append(uint16_t codeunit) {
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	807b      	strh	r3, [r7, #2]
    if (isHighSurrogate(codeunit)) {
 800a47c:	887b      	ldrh	r3, [r7, #2]
 800a47e:	4618      	mov	r0, r3
 800a480:	f7ff ffb9 	bl	800a3f6 <_ZN11ArduinoJson8V6213HB26detail5Utf1615isHighSurrogateEt>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d007      	beq.n	800a49a <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt+0x2a>
      highSurrogate_ = codeunit & 0x3FF;
 800a48a:	887b      	ldrh	r3, [r7, #2]
 800a48c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a490:	b29a      	uxth	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	801a      	strh	r2, [r3, #0]
      return false;
 800a496:	2300      	movs	r3, #0
 800a498:	e018      	b.n	800a4cc <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt+0x5c>
    }

    if (isLowSurrogate(codeunit)) {
 800a49a:	887b      	ldrh	r3, [r7, #2]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f7ff ffc0 	bl	800a422 <_ZN11ArduinoJson8V6213HB26detail5Utf1614isLowSurrogateEt>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d00d      	beq.n	800a4c4 <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt+0x54>
      codepoint_ =
          uint32_t(0x10000 + ((highSurrogate_ << 10) | (codeunit & 0x3FF)));
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	881b      	ldrh	r3, [r3, #0]
 800a4ac:	029a      	lsls	r2, r3, #10
 800a4ae:	887b      	ldrh	r3, [r7, #2]
 800a4b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a4ba:	461a      	mov	r2, r3
      codepoint_ =
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	605a      	str	r2, [r3, #4]
      return true;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e003      	b.n	800a4cc <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt+0x5c>
    }

    codepoint_ = codeunit;
 800a4c4:	887a      	ldrh	r2, [r7, #2]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	605a      	str	r2, [r3, #4]
    return true;
 800a4ca:	2301      	movs	r3, #1
  }
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3708      	adds	r7, #8
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <_ZNK11ArduinoJson8V6213HB26detail5Utf169Codepoint5valueEv>:

  uint32_t value() const {
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
    return codepoint_;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	685b      	ldr	r3, [r3, #4]
  }
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <main>:
void MQTT_run(void);


/*Main ----------------------------------------------------*/
int main(void)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
	//systick init
	delay_init_it();
 800a4f2:	f7fd ffd5 	bl	80084a0 <delay_init_it>
	//spi init
	SPI1_Init();
 800a4f6:	f000 f8ab 	bl	800a650 <_Z9SPI1_Initv>
	//pinout
	RCC->AHB1ENR |= GPIOX_CLOCK(LED) | GPIOX_CLOCK(ETH_RST) | GPIOX_CLOCK(BUTTON);
 800a4fa:	4b43      	ldr	r3, [pc, #268]	; (800a608 <main+0x11c>)
 800a4fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4fe:	4a42      	ldr	r2, [pc, #264]	; (800a608 <main+0x11c>)
 800a500:	f043 030d 	orr.w	r3, r3, #13
 800a504:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_OUT, ETH_RST);
 800a506:	4b41      	ldr	r3, [pc, #260]	; (800a60c <main+0x120>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a50e:	4a3f      	ldr	r2, [pc, #252]	; (800a60c <main+0x120>)
 800a510:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a514:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_OUT, LED);
 800a516:	4b3e      	ldr	r3, [pc, #248]	; (800a610 <main+0x124>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800a51e:	4a3c      	ldr	r2, [pc, #240]	; (800a610 <main+0x124>)
 800a520:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a524:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_DIGITAL_INPUT, BUTTON);
 800a526:	4b3b      	ldr	r3, [pc, #236]	; (800a614 <main+0x128>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a3a      	ldr	r2, [pc, #232]	; (800a614 <main+0x128>)
 800a52c:	f023 0303 	bic.w	r3, r3, #3
 800a530:	6013      	str	r3, [r2, #0]

	//Ethernet W5100
	reg_wizchip_spi_cbfunc(w5100_ll_read_byte, w5100_ll_write_byte);
 800a532:	4939      	ldr	r1, [pc, #228]	; (800a618 <main+0x12c>)
 800a534:	4839      	ldr	r0, [pc, #228]	; (800a61c <main+0x130>)
 800a536:	f7f7 ff77 	bl	8002428 <reg_wizchip_spi_cbfunc>
	reg_wizchip_cs_cbfunc(w5100_cs_enable, w5100_cs_disable);
 800a53a:	4939      	ldr	r1, [pc, #228]	; (800a620 <main+0x134>)
 800a53c:	4839      	ldr	r0, [pc, #228]	; (800a624 <main+0x138>)
 800a53e:	f7f7 ff4d 	bl	80023dc <reg_wizchip_cs_cbfunc>
	reg_wizchip_cris_cbfunc(w5100_critical_enter, w5100_critical_exit);
 800a542:	4939      	ldr	r1, [pc, #228]	; (800a628 <main+0x13c>)
 800a544:	4839      	ldr	r0, [pc, #228]	; (800a62c <main+0x140>)
 800a546:	f7f7 ff23 	bl	8002390 <reg_wizchip_cris_cbfunc>

	//reset
	w5100_reset();
 800a54a:	f000 f981 	bl	800a850 <_Z11w5100_resetv>
	uint8_t temp = IK_DEST_UNREACH;
 800a54e:	2340      	movs	r3, #64	; 0x40
 800a550:	73fb      	strb	r3, [r7, #15]
	uint8_t W5x00_AdrSet[2][4] = {{2,2,2,2},{2,2,2,2}};
 800a552:	4a37      	ldr	r2, [pc, #220]	; (800a630 <main+0x144>)
 800a554:	1d3b      	adds	r3, r7, #4
 800a556:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a55a:	e883 0003 	stmia.w	r3, {r0, r1}

	if(ctlwizchip(CW_INIT_WIZCHIP, (void*)W5x00_AdrSet) == -1){
 800a55e:	1d3b      	adds	r3, r7, #4
 800a560:	4619      	mov	r1, r3
 800a562:	2001      	movs	r0, #1
 800a564:	f7f7 ff8c 	bl	8002480 <ctlwizchip>
 800a568:	4603      	mov	r3, r0
 800a56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56e:	bf0c      	ite	eq
 800a570:	2301      	moveq	r3, #1
 800a572:	2300      	movne	r3, #0
 800a574:	b2db      	uxtb	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d001      	beq.n	800a57e <main+0x92>
			Error_Handler();
 800a57a:	f000 f98d 	bl	800a898 <_Z13Error_Handlerv>
	}

	if(ctlwizchip(CW_SET_INTRMASK, &temp) == -1){
 800a57e:	f107 030f 	add.w	r3, r7, #15
 800a582:	4619      	mov	r1, r3
 800a584:	2004      	movs	r0, #4
 800a586:	f7f7 ff7b 	bl	8002480 <ctlwizchip>
 800a58a:	4603      	mov	r3, r0
 800a58c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a590:	bf0c      	ite	eq
 800a592:	2301      	moveq	r3, #1
 800a594:	2300      	movne	r3, #0
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d001      	beq.n	800a5a0 <main+0xb4>
		Error_Handler();
 800a59c:	f000 f97c 	bl	800a898 <_Z13Error_Handlerv>
	}
	wizchip_setnetinfo(&gWIZNETINFO);
 800a5a0:	4824      	ldr	r0, [pc, #144]	; (800a634 <main+0x148>)
 800a5a2:	f7f8 f99d 	bl	80028e0 <wizchip_setnetinfo>
	delay_ms(3000);
 800a5a6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a5aa:	f7fd ffa9 	bl	8008500 <delay_ms>

	//DHCP
	DHCP_init(DHCP_SOCKET, ethBuf0);
 800a5ae:	4922      	ldr	r1, [pc, #136]	; (800a638 <main+0x14c>)
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	f7f9 fcc5 	bl	8003f40 <DHCP_init>
	while(1){
		if(proccess_dhcp() == DHCP_IP_LEASED){
 800a5b6:	f001 f899 	bl	800b6ec <_Z13proccess_dhcpv>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b04      	cmp	r3, #4
 800a5be:	bf0c      	ite	eq
 800a5c0:	2301      	moveq	r3, #1
 800a5c2:	2300      	movne	r3, #0
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d100      	bne.n	800a5cc <main+0xe0>
 800a5ca:	e7f4      	b.n	800a5b6 <main+0xca>
		  break;
 800a5cc:	bf00      	nop
		}
	}
	//DNS
	DNS_init(DNS_SOCKET, ethBuf1);
 800a5ce:	491b      	ldr	r1, [pc, #108]	; (800a63c <main+0x150>)
 800a5d0:	2001      	movs	r0, #1
 800a5d2:	f7fa f913 	bl	80047fc <DNS_init>
	IP_TYPE = 0x1c;
 800a5d6:	4b1a      	ldr	r3, [pc, #104]	; (800a640 <main+0x154>)
 800a5d8:	221c      	movs	r2, #28
 800a5da:	701a      	strb	r2, [r3, #0]
	while(1){
	  if(DNS_run(dns_server_ip, URL, mqtt_ip) == 1){
 800a5dc:	4a19      	ldr	r2, [pc, #100]	; (800a644 <main+0x158>)
 800a5de:	491a      	ldr	r1, [pc, #104]	; (800a648 <main+0x15c>)
 800a5e0:	481a      	ldr	r0, [pc, #104]	; (800a64c <main+0x160>)
 800a5e2:	f7fa f927 	bl	8004834 <DNS_run>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	bf0c      	ite	eq
 800a5ec:	2301      	moveq	r3, #1
 800a5ee:	2300      	movne	r3, #0
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d100      	bne.n	800a5f8 <main+0x10c>
 800a5f6:	e7f1      	b.n	800a5dc <main+0xf0>
		  break;
 800a5f8:	bf00      	nop
	  }
	}

	//MPU6050 INIT
	mpu6050_basic_init((mpu6050_address_t)0x68);
 800a5fa:	2068      	movs	r0, #104	; 0x68
 800a5fc:	f7fd ff9e 	bl	800853c <mpu6050_basic_init>
	//MQTT
	MQTT_run();
 800a600:	f001 f9b2 	bl	800b968 <_Z8MQTT_runv>
    /* Loop forever */
	for(;;);
 800a604:	e7fe      	b.n	800a604 <main+0x118>
 800a606:	bf00      	nop
 800a608:	40023800 	.word	0x40023800
 800a60c:	40020800 	.word	0x40020800
 800a610:	40020c00 	.word	0x40020c00
 800a614:	40020000 	.word	0x40020000
 800a618:	0800a7c5 	.word	0x0800a7c5
 800a61c:	0800a771 	.word	0x0800a771
 800a620:	0800a839 	.word	0x0800a839
 800a624:	0800a821 	.word	0x0800a821
 800a628:	0800a887 	.word	0x0800a887
 800a62c:	0800a875 	.word	0x0800a875
 800a630:	08011ef4 	.word	0x08011ef4
 800a634:	2000004c 	.word	0x2000004c
 800a638:	200005b4 	.word	0x200005b4
 800a63c:	20000db4 	.word	0x20000db4
 800a640:	200017b8 	.word	0x200017b8
 800a644:	200015b4 	.word	0x200015b4
 800a648:	20000064 	.word	0x20000064
 800a64c:	20000078 	.word	0x20000078

0800a650 <_Z9SPI1_Initv>:
}


/*Function definition -------------------------------------*/
void SPI1_Init(void){
 800a650:	b480      	push	{r7}
 800a652:	af00      	add	r7, sp, #0
	//PINOUT
	RCC->AHB1ENR |= GPIOX_CLOCK(SPI1_SCK) | GPIOX_CLOCK(SPI1_MISO) | GPIOX_CLOCK(SPI1_MOSI) |\
 800a654:	4b42      	ldr	r3, [pc, #264]	; (800a760 <_Z9SPI1_Initv+0x110>)
 800a656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a658:	4a41      	ldr	r2, [pc, #260]	; (800a760 <_Z9SPI1_Initv+0x110>)
 800a65a:	f043 0303 	orr.w	r3, r3, #3
 800a65e:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOX_CLOCK(SPI1_NSS);
	GPIOX_MODER(MODE_ALTER, SPI1_SCK);
 800a660:	4b40      	ldr	r3, [pc, #256]	; (800a764 <_Z9SPI1_Initv+0x114>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a668:	4a3e      	ldr	r2, [pc, #248]	; (800a764 <_Z9SPI1_Initv+0x114>)
 800a66a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a66e:	6013      	str	r3, [r2, #0]
	GPIOX_AFR(5, SPI1_SCK);
 800a670:	4b3c      	ldr	r3, [pc, #240]	; (800a764 <_Z9SPI1_Initv+0x114>)
 800a672:	6a1b      	ldr	r3, [r3, #32]
 800a674:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a678:	4a3a      	ldr	r2, [pc, #232]	; (800a764 <_Z9SPI1_Initv+0x114>)
 800a67a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800a67e:	6213      	str	r3, [r2, #32]

	GPIOX_MODER(MODE_ALTER, SPI1_MISO);
 800a680:	4b38      	ldr	r3, [pc, #224]	; (800a764 <_Z9SPI1_Initv+0x114>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a688:	4a36      	ldr	r2, [pc, #216]	; (800a764 <_Z9SPI1_Initv+0x114>)
 800a68a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a68e:	6013      	str	r3, [r2, #0]
	GPIOX_AFR(5, SPI1_MISO);
 800a690:	4b34      	ldr	r3, [pc, #208]	; (800a764 <_Z9SPI1_Initv+0x114>)
 800a692:	6a1b      	ldr	r3, [r3, #32]
 800a694:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800a698:	4a32      	ldr	r2, [pc, #200]	; (800a764 <_Z9SPI1_Initv+0x114>)
 800a69a:	f043 63a0 	orr.w	r3, r3, #83886080	; 0x5000000
 800a69e:	6213      	str	r3, [r2, #32]

	GPIOX_MODER(MODE_ALTER, SPI1_MOSI);
 800a6a0:	4b30      	ldr	r3, [pc, #192]	; (800a764 <_Z9SPI1_Initv+0x114>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a6a8:	4a2e      	ldr	r2, [pc, #184]	; (800a764 <_Z9SPI1_Initv+0x114>)
 800a6aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6ae:	6013      	str	r3, [r2, #0]
	GPIOX_AFR(5, SPI1_MOSI);
 800a6b0:	4b2c      	ldr	r3, [pc, #176]	; (800a764 <_Z9SPI1_Initv+0x114>)
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a6b8:	4a2a      	ldr	r2, [pc, #168]	; (800a764 <_Z9SPI1_Initv+0x114>)
 800a6ba:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800a6be:	6213      	str	r3, [r2, #32]

	GPIOX_MODER(MODE_OUT, SPI1_NSS);
 800a6c0:	4b29      	ldr	r3, [pc, #164]	; (800a768 <_Z9SPI1_Initv+0x118>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f023 030c 	bic.w	r3, r3, #12
 800a6c8:	4a27      	ldr	r2, [pc, #156]	; (800a768 <_Z9SPI1_Initv+0x118>)
 800a6ca:	f043 0304 	orr.w	r3, r3, #4
 800a6ce:	6013      	str	r3, [r2, #0]

	//SPI1
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800a6d0:	4b23      	ldr	r3, [pc, #140]	; (800a760 <_Z9SPI1_Initv+0x110>)
 800a6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6d4:	4a22      	ldr	r2, [pc, #136]	; (800a760 <_Z9SPI1_Initv+0x110>)
 800a6d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6da:	6453      	str	r3, [r2, #68]	; 0x44

	//1. configurar el baudrate
	SPI1->CR1 &=~ SPI_CR1_BR;
 800a6dc:	4b23      	ldr	r3, [pc, #140]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a22      	ldr	r2, [pc, #136]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a6e2:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800a6e6:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_BR_0;		//Fpclk / 4 = 4MHZ
 800a6e8:	4b20      	ldr	r3, [pc, #128]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a1f      	ldr	r2, [pc, #124]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a6ee:	f043 0308 	orr.w	r3, r3, #8
 800a6f2:	6013      	str	r3, [r2, #0]

	//2. Configurar la polaridad y la fase del reloj (SPI MODO 0)
	//CPOL
	SPI1->CR1 &=~ SPI_CR1_CPOL;    //CPOL = 0
 800a6f4:	4b1d      	ldr	r3, [pc, #116]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a1c      	ldr	r2, [pc, #112]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a6fa:	f023 0302 	bic.w	r3, r3, #2
 800a6fe:	6013      	str	r3, [r2, #0]
	//CPHA
	SPI1->CR1 &=~ SPI_CR1_CPHA;    //CPHA = 0
 800a700:	4b1a      	ldr	r3, [pc, #104]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a19      	ldr	r2, [pc, #100]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a706:	f023 0301 	bic.w	r3, r3, #1
 800a70a:	6013      	str	r3, [r2, #0]

	//3. configurar la longitud de la trama
	SPI1->CR1 &=~ SPI_CR1_DFF;     //8bits
 800a70c:	4b17      	ldr	r3, [pc, #92]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a16      	ldr	r2, [pc, #88]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a716:	6013      	str	r3, [r2, #0]

	//4. configurar el LSP o MSB firts
	SPI1->CR1 &=~ SPI_CR1_LSBFIRST;//MSB first
 800a718:	4b14      	ldr	r3, [pc, #80]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a13      	ldr	r2, [pc, #76]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a71e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a722:	6013      	str	r3, [r2, #0]

	//5. Configurar el maneno del pin NSS
	SPI1->CR1 |= SPI_CR1_SSM;       //Software managment
 800a724:	4b11      	ldr	r3, [pc, #68]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a10      	ldr	r2, [pc, #64]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a72a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a72e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 |= SPI_CR1_SSI;
 800a730:	4b0e      	ldr	r3, [pc, #56]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a0d      	ldr	r2, [pc, #52]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a73a:	6013      	str	r3, [r2, #0]

	//6. configurar el modo TI si fuera necesario

	//7. habilitar el modo maestro
	SPI1->CR1 |= SPI_CR1_MSTR;
 800a73c:	4b0b      	ldr	r3, [pc, #44]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a0a      	ldr	r2, [pc, #40]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a742:	f043 0304 	orr.w	r3, r3, #4
 800a746:	6013      	str	r3, [r2, #0]

	//8. Habilitar el spi
	SPI1->CR1 |= SPI_CR1_SPE;
 800a748:	4b08      	ldr	r3, [pc, #32]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a07      	ldr	r2, [pc, #28]	; (800a76c <_Z9SPI1_Initv+0x11c>)
 800a74e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a752:	6013      	str	r3, [r2, #0]

	return;
 800a754:	bf00      	nop
}
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	40023800 	.word	0x40023800
 800a764:	40020000 	.word	0x40020000
 800a768:	40020400 	.word	0x40020400
 800a76c:	40013000 	.word	0x40013000

0800a770 <_Z18w5100_ll_read_bytev>:

uint8_t w5100_ll_read_byte(void){
 800a770:	b480      	push	{r7}
 800a772:	af00      	add	r7, sp, #0
	while(!(SPI1->SR & SPI_SR_TXE));
 800a774:	bf00      	nop
 800a776:	4b11      	ldr	r3, [pc, #68]	; (800a7bc <_Z18w5100_ll_read_bytev+0x4c>)
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	f003 0302 	and.w	r3, r3, #2
 800a77e:	2b00      	cmp	r3, #0
 800a780:	bf0c      	ite	eq
 800a782:	2301      	moveq	r3, #1
 800a784:	2300      	movne	r3, #0
 800a786:	b2db      	uxtb	r3, r3
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1f4      	bne.n	800a776 <_Z18w5100_ll_read_bytev+0x6>
	*((__IO uint8_t *)&SPI1->DR) = 0xFF;
 800a78c:	4b0c      	ldr	r3, [pc, #48]	; (800a7c0 <_Z18w5100_ll_read_bytev+0x50>)
 800a78e:	22ff      	movs	r2, #255	; 0xff
 800a790:	701a      	strb	r2, [r3, #0]
	while(!(SPI1->SR & SPI_SR_RXNE));
 800a792:	bf00      	nop
 800a794:	4b09      	ldr	r3, [pc, #36]	; (800a7bc <_Z18w5100_ll_read_bytev+0x4c>)
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	bf0c      	ite	eq
 800a7a0:	2301      	moveq	r3, #1
 800a7a2:	2300      	movne	r3, #0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1f4      	bne.n	800a794 <_Z18w5100_ll_read_bytev+0x24>
	return (uint8_t)(SPI1->DR);
 800a7aa:	4b04      	ldr	r3, [pc, #16]	; (800a7bc <_Z18w5100_ll_read_bytev+0x4c>)
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	b2db      	uxtb	r3, r3
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b8:	4770      	bx	lr
 800a7ba:	bf00      	nop
 800a7bc:	40013000 	.word	0x40013000
 800a7c0:	4001300c 	.word	0x4001300c

0800a7c4 <_Z19w5100_ll_write_byteh>:
void w5100_ll_write_byte(uint8_t byte){
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	while(!(SPI1->SR & SPI_SR_TXE));
 800a7ce:	bf00      	nop
 800a7d0:	4b11      	ldr	r3, [pc, #68]	; (800a818 <_Z19w5100_ll_write_byteh+0x54>)
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	f003 0302 	and.w	r3, r3, #2
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bf0c      	ite	eq
 800a7dc:	2301      	moveq	r3, #1
 800a7de:	2300      	movne	r3, #0
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1f4      	bne.n	800a7d0 <_Z19w5100_ll_write_byteh+0xc>
	*((__IO uint8_t *)&SPI1->DR) = byte;
 800a7e6:	4a0d      	ldr	r2, [pc, #52]	; (800a81c <_Z19w5100_ll_write_byteh+0x58>)
 800a7e8:	79fb      	ldrb	r3, [r7, #7]
 800a7ea:	7013      	strb	r3, [r2, #0]
	while(!(SPI1->SR & SPI_SR_RXNE));
 800a7ec:	bf00      	nop
 800a7ee:	4b0a      	ldr	r3, [pc, #40]	; (800a818 <_Z19w5100_ll_write_byteh+0x54>)
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	bf0c      	ite	eq
 800a7fa:	2301      	moveq	r3, #1
 800a7fc:	2300      	movne	r3, #0
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1f4      	bne.n	800a7ee <_Z19w5100_ll_write_byteh+0x2a>
	temp = SPI1->DR;
 800a804:	4b04      	ldr	r3, [pc, #16]	; (800a818 <_Z19w5100_ll_write_byteh+0x54>)
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	73fb      	strb	r3, [r7, #15]

	(void)temp;
	return;
 800a80a:	bf00      	nop
}
 800a80c:	3714      	adds	r7, #20
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	40013000 	.word	0x40013000
 800a81c:	4001300c 	.word	0x4001300c

0800a820 <_Z15w5100_cs_enablev>:
void w5100_cs_enable(void){
 800a820:	b480      	push	{r7}
 800a822:	af00      	add	r7, sp, #0
	GPIOX_ODR(SPI1_NSS) = 0;
 800a824:	4b03      	ldr	r3, [pc, #12]	; (800a834 <_Z15w5100_cs_enablev+0x14>)
 800a826:	2200      	movs	r2, #0
 800a828:	601a      	str	r2, [r3, #0]
	return;
 800a82a:	bf00      	nop
}
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr
 800a834:	42408284 	.word	0x42408284

0800a838 <_Z16w5100_cs_disablev>:
void w5100_cs_disable(void){
 800a838:	b480      	push	{r7}
 800a83a:	af00      	add	r7, sp, #0
	GPIOX_ODR(SPI1_NSS) = 1;
 800a83c:	4b03      	ldr	r3, [pc, #12]	; (800a84c <_Z16w5100_cs_disablev+0x14>)
 800a83e:	2201      	movs	r2, #1
 800a840:	601a      	str	r2, [r3, #0]
}
 800a842:	bf00      	nop
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	42408284 	.word	0x42408284

0800a850 <_Z11w5100_resetv>:
	GPIOX_ODR(ETH_RST) = 0;
}
void w5100_reset_deassert(void){
	GPIOX_ODR(ETH_RST) = 1;
}
void w5100_reset(void){
 800a850:	b580      	push	{r7, lr}
 800a852:	af00      	add	r7, sp, #0
	GPIOX_ODR(ETH_RST) = 0;
 800a854:	4b06      	ldr	r3, [pc, #24]	; (800a870 <_Z11w5100_resetv+0x20>)
 800a856:	2200      	movs	r2, #0
 800a858:	601a      	str	r2, [r3, #0]
	delay_ms(100);
 800a85a:	2064      	movs	r0, #100	; 0x64
 800a85c:	f7fd fe50 	bl	8008500 <delay_ms>
	GPIOX_ODR(ETH_RST) = 1;
 800a860:	4b03      	ldr	r3, [pc, #12]	; (800a870 <_Z11w5100_resetv+0x20>)
 800a862:	2201      	movs	r2, #1
 800a864:	601a      	str	r2, [r3, #0]
	delay_ms(100);
 800a866:	2064      	movs	r0, #100	; 0x64
 800a868:	f7fd fe4a 	bl	8008500 <delay_ms>
	return;
 800a86c:	bf00      	nop
}
 800a86e:	bd80      	pop	{r7, pc}
 800a870:	42410294 	.word	0x42410294

0800a874 <_Z20w5100_critical_enterv>:
void w5100_critical_enter(void){
 800a874:	b480      	push	{r7}
 800a876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a878:	b672      	cpsid	i
}
 800a87a:	bf00      	nop
	__disable_irq();
}
 800a87c:	bf00      	nop
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr

0800a886 <_Z19w5100_critical_exitv>:
void w5100_critical_exit(void){
 800a886:	b480      	push	{r7}
 800a888:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800a88a:	b662      	cpsie	i
}
 800a88c:	bf00      	nop
	__enable_irq();
}
 800a88e:	bf00      	nop
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <_Z13Error_Handlerv>:

void Error_Handler(void){
 800a898:	b580      	push	{r7, lr}
 800a89a:	af00      	add	r7, sp, #0
	printf("error\r\n");
 800a89c:	4802      	ldr	r0, [pc, #8]	; (800a8a8 <_Z13Error_Handlerv+0x10>)
 800a89e:	f004 fdad 	bl	800f3fc <puts>
  __ASM volatile ("cpsid i" : : : "memory");
 800a8a2:	b672      	cpsid	i
}
 800a8a4:	bf00      	nop
	__disable_irq();
	while(1){
 800a8a6:	e7fe      	b.n	800a8a6 <_Z13Error_Handlerv+0xe>
 800a8a8:	08011efc 	.word	0x08011efc

0800a8ac <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EED1Ev>:

ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// A JsonDocument with a memory pool on the stack.
template <size_t desiredCapacity>
class StaticJsonDocument : public JsonDocument {
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b082      	sub	sp, #8
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7ff f8e0 	bl	8009a7c <_ZN11ArduinoJson8V6213HB212JsonDocumentD1Ev>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <_Z17mqtt_publish_datav>:

	}
}

uint8_t mqtt_publish_data(void){
 800a8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8cc:	ed2d 8b02 	vpush	{d8}
 800a8d0:	f5ad 7d6c 	sub.w	sp, sp, #944	; 0x3b0
 800a8d4:	af00      	add	r7, sp, #0
	std::string buff;
 800a8d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f004 fae5 	bl	800eeaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	StaticJsonDocument<256> doc;
 800a8e0:	f107 0310 	add.w	r3, r7, #16
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f001 fa02 	bl	800bcee <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EEC1Ev>
	MQTTMessage m;
	int rc = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
	//message init
	m.qos = QOS0;
 800a8f0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a8f4:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	701a      	strb	r2, [r3, #0]
	m.retained = 0;
 800a8fc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a900:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800a904:	2200      	movs	r2, #0
 800a906:	705a      	strb	r2, [r3, #1]
	m.dup = 0;
 800a908:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a90c:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800a910:	2200      	movs	r2, #0
 800a912:	709a      	strb	r2, [r3, #2]
 800a914:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a918:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800a91c:	4ad4      	ldr	r2, [pc, #848]	; (800ac70 <_Z17mqtt_publish_datav+0x3a8>)
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800a924:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a928:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a932:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800a936:	f107 0210 	add.w	r2, r7, #16
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a940:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800a944:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800a948:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800a94c:	6812      	ldr	r2, [r2, #0]
 800a94e:	601a      	str	r2, [r3, #0]
      public VariantOperators<MemberProxy<TUpstream, TStringRef>> {
  friend class VariantAttorney;

 public:
  FORCE_INLINE MemberProxy(TUpstream upstream, TStringRef key)
      : upstream_(upstream), key_(key) {}
 800a950:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a954:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800a95e:	f5a2 72fe 	sub.w	r2, r2, #508	; 0x1fc
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a96a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800a974:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 800a978:	6812      	ldr	r2, [r2, #0]
 800a97a:	605a      	str	r2, [r3, #4]
    return {*this, key};
 800a97c:	bf00      	nop
 800a97e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a982:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800a986:	4abb      	ldr	r2, [pc, #748]	; (800ac74 <_Z17mqtt_publish_datav+0x3ac>)
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a98e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800a992:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a99c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800a9a0:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800a9a4:	f5a2 72d6 	sub.w	r2, r2, #428	; 0x1ac
 800a9a8:	6812      	ldr	r2, [r2, #0]
 800a9aa:	601a      	str	r2, [r3, #0]
 800a9ac:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a9b0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800a9b4:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800a9b8:	f5a2 72d8 	sub.w	r2, r2, #432	; 0x1b0
 800a9bc:	6812      	ldr	r2, [r2, #0]
 800a9be:	601a      	str	r2, [r3, #0]
 800a9c0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a9c4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800a9c8:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800a9cc:	f5a2 72dc 	sub.w	r2, r2, #440	; 0x1b8
 800a9d0:	6812      	ldr	r2, [r2, #0]
 800a9d2:	601a      	str	r2, [r3, #0]
  const TDerived& derived() const {
    return static_cast<const TDerived&>(*this);
  }

  FORCE_INLINE MemoryPool* getPool() const {
    return VariantAttorney::getPool(derived());
 800a9d4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a9d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800a9dc:	6818      	ldr	r0, [r3, #0]
 800a9de:	f001 fe18 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a9e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800a9ec:	601a      	str	r2, [r3, #0]
 800a9ee:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800a9f2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800a9f6:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800a9fa:	f5a2 72e0 	sub.w	r2, r2, #448	; 0x1c0
 800a9fe:	6812      	ldr	r2, [r2, #0]
 800aa00:	601a      	str	r2, [r3, #0]
    return *this;
  }

 private:
  FORCE_INLINE MemoryPool* getPool() const {
    return VariantAttorney::getPool(upstream_);
 800aa02:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aa06:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aa12:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800aa16:	601a      	str	r2, [r3, #0]
 800aa18:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aa1c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800aa20:	6818      	ldr	r0, [r3, #0]
 800aa22:	f7ff f848 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800aa26:	4604      	mov	r4, r0
 800aa28:	bf00      	nop
 800aa2a:	bf00      	nop
 800aa2c:	bf00      	nop
 800aa2e:	bf00      	nop
 800aa30:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aa34:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800aa38:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800aa3c:	f5a2 72dc 	sub.w	r2, r2, #440	; 0x1b8
 800aa40:	6812      	ldr	r2, [r2, #0]
 800aa42:	601a      	str	r2, [r3, #0]
  FORCE_INLINE VariantData* getData() const {
    return VariantAttorney::getData(derived());
  }

  FORCE_INLINE VariantData* getOrCreateData() const {
    return VariantAttorney::getOrCreateData(derived());
 800aa44:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aa48:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800aa4c:	6818      	ldr	r0, [r3, #0]
 800aa4e:	f001 fde0 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800aa52:	4602      	mov	r2, r0
 800aa54:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aa58:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aa62:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800aa66:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800aa6a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800aa6e:	6812      	ldr	r2, [r2, #0]
 800aa70:	601a      	str	r2, [r3, #0]
    return variantGetMember(VariantAttorney::getData(upstream_),
                            adaptString(key_));
  }

  FORCE_INLINE VariantData* getOrCreateData() const {
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800aa72:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aa76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aa82:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800aa86:	601a      	str	r2, [r3, #0]
  }

  template <typename TClient>
  FORCE_INLINE static VariantData* getOrCreateData(TClient& client) {
    return client.getOrCreateData();
 800aa88:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aa8c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800aa90:	6818      	ldr	r0, [r3, #0]
 800aa92:	f7ff f827 	bl	8009ae4 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800aa96:	4605      	mov	r5, r0
 800aa98:	bf00      	nop
                                 adaptString(key_),
 800aa9a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aa9e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f001 f85f 	bl	800bb6a <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800aaac:	4606      	mov	r6, r0
 800aaae:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aab2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aabe:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800aac2:	601a      	str	r2, [r3, #0]
    return client.getPool();
 800aac4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aac8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800aacc:	6818      	ldr	r0, [r3, #0]
 800aace:	f7fe fff2 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800aad2:	4603      	mov	r3, r0
 800aad4:	bf00      	nop
 800aad6:	461a      	mov	r2, r3
 800aad8:	4631      	mov	r1, r6
 800aada:	4628      	mov	r0, r5
 800aadc:	f003 faad 	bl	800e03a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800aae0:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 800aae2:	bf00      	nop
    return client.getOrCreateData();
 800aae4:	bf00      	nop
 800aae6:	bf00      	nop
  return JsonVariant(getPool(), getData());
}

template <typename TDerived>
inline JsonVariant VariantRefBase<TDerived>::getOrCreateVariant() const {
  return JsonVariant(getPool(), getOrCreateData());
 800aae8:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800aaec:	4621      	mov	r1, r4
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe ff5b 	bl	80099aa <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T*>::toJson(value, getOrCreateVariant());
 800aaf4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aaf8:	f5a3 7202 	sub.w	r2, r3, #520	; 0x208
 800aafc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ab00:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800ab04:	ca06      	ldmia	r2, {r1, r2}
 800ab06:	6818      	ldr	r0, [r3, #0]
 800ab08:	f7ff f8f6 	bl	8009cf8 <_ZN11ArduinoJson8V6213HB29ConverterIPKcvE6toJsonES3_NS0_11JsonVariantE>
 800ab0c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ab10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800ab14:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ab18:	f5a2 72d8 	sub.w	r2, r2, #432	; 0x1b0
 800ab1c:	6812      	ldr	r2, [r2, #0]
 800ab1e:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(derived());
 800ab20:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ab24:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	f001 fd72 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ab34:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ab3e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800ab42:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ab46:	f5a2 72f2 	sub.w	r2, r2, #484	; 0x1e4
 800ab4a:	6812      	ldr	r2, [r2, #0]
 800ab4c:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(upstream_);
 800ab4e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ab52:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ab5e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ab62:	601a      	str	r2, [r3, #0]
    return client.getPool();
 800ab64:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ab68:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800ab6c:	6818      	ldr	r0, [r3, #0]
 800ab6e:	f7fe ffa2 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800ab72:	4602      	mov	r2, r0
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop
 800ab78:	bf00      	nop
 800ab7a:	bf00      	nop
    MemoryPool* pool = getPool();
 800ab7c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ab80:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800ab84:	601a      	str	r2, [r3, #0]
    return pool && !pool->overflowed();
 800ab86:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ab8a:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <_Z17mqtt_publish_datav+0x2e4>
 800ab94:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ab98:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800ab9c:	6818      	ldr	r0, [r3, #0]
 800ab9e:	f7fe fd01 	bl	80095a4 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800aba2:	4603      	mov	r3, r0
 800aba4:	f083 0301 	eor.w	r3, r3, #1
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800abb0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800abb4:	4a30      	ldr	r2, [pc, #192]	; (800ac78 <_Z17mqtt_publish_datav+0x3b0>)
 800abb6:	601a      	str	r2, [r3, #0]
 800abb8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800abbc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800abc0:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800abca:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800abce:	f107 0210 	add.w	r2, r7, #16
 800abd2:	601a      	str	r2, [r3, #0]
 800abd4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800abd8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800abdc:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800abe0:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 800abe4:	6812      	ldr	r2, [r2, #0]
 800abe6:	601a      	str	r2, [r3, #0]
      : upstream_(upstream), key_(key) {}
 800abe8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800abec:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800abf6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800abfa:	6812      	ldr	r2, [r2, #0]
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ac02:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ac0c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800ac10:	6812      	ldr	r2, [r2, #0]
 800ac12:	605a      	str	r2, [r3, #4]
 800ac14:	bf00      	nop
 800ac16:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ac1a:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800ac1e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 800ac22:	601a      	str	r2, [r3, #0]
 800ac24:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ac28:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ac2c:	4a13      	ldr	r2, [pc, #76]	; (800ac7c <_Z17mqtt_publish_datav+0x3b4>)
 800ac2e:	601a      	str	r2, [r3, #0]
    Converter<T>::toJson(value, getOrCreateVariant());
 800ac30:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ac34:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	781c      	ldrb	r4, [r3, #0]
 800ac3c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ac40:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800ac44:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ac48:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800ac4c:	6812      	ldr	r2, [r2, #0]
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ac54:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800ac58:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ac5c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800ac60:	6812      	ldr	r2, [r2, #0]
 800ac62:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(derived());
 800ac64:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ac68:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800ac6c:	e008      	b.n	800ac80 <_Z17mqtt_publish_datav+0x3b8>
 800ac6e:	bf00      	nop
 800ac70:	08011f04 	.word	0x08011f04
 800ac74:	08011f08 	.word	0x08011f08
 800ac78:	08011f14 	.word	0x08011f14
 800ac7c:	20002028 	.word	0x20002028
 800ac80:	6818      	ldr	r0, [r3, #0]
 800ac82:	f001 fcc6 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800ac86:	4602      	mov	r2, r0
 800ac88:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ac8c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ac96:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800ac9a:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ac9e:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 800aca2:	6812      	ldr	r2, [r2, #0]
 800aca4:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(upstream_);
 800aca6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800acaa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800acb6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800acc0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800acc4:	6818      	ldr	r0, [r3, #0]
 800acc6:	f7fe fef6 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800acca:	4605      	mov	r5, r0
 800accc:	bf00      	nop
 800acce:	bf00      	nop
 800acd0:	bf00      	nop
 800acd2:	bf00      	nop
 800acd4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800acd8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800acdc:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ace0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800ace4:	6812      	ldr	r2, [r2, #0]
 800ace6:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getOrCreateData(derived());
 800ace8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800acec:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800acf0:	6818      	ldr	r0, [r3, #0]
 800acf2:	f001 fc8e 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800acf6:	4602      	mov	r2, r0
 800acf8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800acfc:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ad06:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800ad0a:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ad0e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800ad12:	6812      	ldr	r2, [r2, #0]
 800ad14:	601a      	str	r2, [r3, #0]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800ad16:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ad1a:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ad26:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800ad2a:	601a      	str	r2, [r3, #0]
    return client.getOrCreateData();
 800ad2c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ad30:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800ad34:	6818      	ldr	r0, [r3, #0]
 800ad36:	f7fe fed5 	bl	8009ae4 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	bf00      	nop
                                 adaptString(key_),
 800ad3e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ad42:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 ff0d 	bl	800bb6a <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800ad50:	4680      	mov	r8, r0
 800ad52:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ad56:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ad62:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800ad66:	601a      	str	r2, [r3, #0]
    return client.getPool();
 800ad68:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ad6c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800ad70:	6818      	ldr	r0, [r3, #0]
 800ad72:	f7fe fea0 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800ad76:	4603      	mov	r3, r0
 800ad78:	bf00      	nop
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	4641      	mov	r1, r8
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f003 f95b 	bl	800e03a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800ad84:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 800ad86:	bf00      	nop
    return client.getOrCreateData();
 800ad88:	bf00      	nop
 800ad8a:	bf00      	nop
 800ad8c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800ad90:	4629      	mov	r1, r5
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fe fe09 	bl	80099aa <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 800ad98:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ad9c:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800ada0:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ada4:	4620      	mov	r0, r4
 800ada6:	f7fe ff8d 	bl	8009cc4 <_ZN11ArduinoJson8V6213HB29ConverterIbvE6toJsonEbNS0_11JsonVariantE>
 800adaa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800adae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800adb2:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800adb6:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800adba:	6812      	ldr	r2, [r2, #0]
 800adbc:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(derived());
 800adbe:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800adc2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800adc6:	6818      	ldr	r0, [r3, #0]
 800adc8:	f001 fc23 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800adcc:	4602      	mov	r2, r0
 800adce:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800add2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800add6:	601a      	str	r2, [r3, #0]
 800add8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800addc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800ade0:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ade4:	f5a2 72c6 	sub.w	r2, r2, #396	; 0x18c
 800ade8:	6812      	ldr	r2, [r2, #0]
 800adea:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(upstream_);
 800adec:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800adf0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800adfc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800ae00:	601a      	str	r2, [r3, #0]
    return client.getPool();
 800ae02:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ae06:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800ae0a:	6818      	ldr	r0, [r3, #0]
 800ae0c:	f7fe fe53 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800ae10:	4602      	mov	r2, r0
 800ae12:	bf00      	nop
 800ae14:	bf00      	nop
 800ae16:	bf00      	nop
 800ae18:	bf00      	nop
    MemoryPool* pool = getPool();
 800ae1a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ae1e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800ae22:	601a      	str	r2, [r3, #0]
    return pool && !pool->overflowed();
 800ae24:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ae28:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00b      	beq.n	800ae4a <_Z17mqtt_publish_datav+0x582>
 800ae32:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ae36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800ae3a:	6818      	ldr	r0, [r3, #0]
 800ae3c:	f7fe fbb2 	bl	80095a4 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800ae40:	4603      	mov	r3, r0
 800ae42:	f083 0301 	eor.w	r3, r3, #1
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ae4e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800ae52:	4adb      	ldr	r2, [pc, #876]	; (800b1c0 <_Z17mqtt_publish_datav+0x8f8>)
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800ae5a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ae5e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ae62:	601a      	str	r2, [r3, #0]
 800ae64:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ae68:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800ae6c:	f107 0210 	add.w	r2, r7, #16
 800ae70:	601a      	str	r2, [r3, #0]
 800ae72:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ae76:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800ae7a:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ae7e:	f5a2 72a4 	sub.w	r2, r2, #328	; 0x148
 800ae82:	6812      	ldr	r2, [r2, #0]
 800ae84:	601a      	str	r2, [r3, #0]
      : upstream_(upstream), key_(key) {}
 800ae86:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800ae8a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800ae94:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 800ae98:	6812      	ldr	r2, [r2, #0]
 800ae9a:	601a      	str	r2, [r3, #0]
 800ae9c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aea0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800aeaa:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 800aeae:	6812      	ldr	r2, [r2, #0]
 800aeb0:	605a      	str	r2, [r3, #4]
 800aeb2:	bf00      	nop
 800aeb4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aeb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aebc:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 800aec0:	601a      	str	r2, [r3, #0]
 800aec2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeca:	4abe      	ldr	r2, [pc, #760]	; (800b1c4 <_Z17mqtt_publish_datav+0x8fc>)
 800aecc:	601a      	str	r2, [r3, #0]
    Converter<T>::toJson(value, getOrCreateVariant());
 800aece:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	ed93 8a00 	vldr	s16, [r3]
 800aedc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aee0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800aee4:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800aee8:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800aeec:	6812      	ldr	r2, [r2, #0]
 800aeee:	601a      	str	r2, [r3, #0]
 800aef0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aef4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800aef8:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800aefc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800af00:	6812      	ldr	r2, [r2, #0]
 800af02:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(derived());
 800af04:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800af08:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800af0c:	6818      	ldr	r0, [r3, #0]
 800af0e:	f001 fb80 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800af12:	4602      	mov	r2, r0
 800af14:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800af18:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800af22:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800af26:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800af2a:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 800af2e:	6812      	ldr	r2, [r2, #0]
 800af30:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(upstream_);
 800af32:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800af36:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800af42:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800af46:	601a      	str	r2, [r3, #0]
 800af48:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800af4c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800af50:	6818      	ldr	r0, [r3, #0]
 800af52:	f7fe fdb0 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800af56:	4604      	mov	r4, r0
 800af58:	bf00      	nop
 800af5a:	bf00      	nop
 800af5c:	bf00      	nop
 800af5e:	bf00      	nop
 800af60:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800af64:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800af68:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800af6c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800af70:	6812      	ldr	r2, [r2, #0]
 800af72:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getOrCreateData(derived());
 800af74:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800af78:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800af7c:	6818      	ldr	r0, [r3, #0]
 800af7e:	f001 fb48 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800af82:	4602      	mov	r2, r0
 800af84:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800af88:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800af8c:	601a      	str	r2, [r3, #0]
 800af8e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800af92:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800af96:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800af9a:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 800af9e:	6812      	ldr	r2, [r2, #0]
 800afa0:	601a      	str	r2, [r3, #0]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800afa2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800afa6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800afb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800afb6:	601a      	str	r2, [r3, #0]
    return client.getOrCreateData();
 800afb8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800afbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800afc0:	6818      	ldr	r0, [r3, #0]
 800afc2:	f7fe fd8f 	bl	8009ae4 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800afc6:	4605      	mov	r5, r0
 800afc8:	bf00      	nop
                                 adaptString(key_),
 800afca:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800afce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 fdc7 	bl	800bb6a <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800afdc:	4606      	mov	r6, r0
 800afde:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800afe2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800afee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aff2:	601a      	str	r2, [r3, #0]
    return client.getPool();
 800aff4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800aff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800affc:	6818      	ldr	r0, [r3, #0]
 800affe:	f7fe fd5a 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800b002:	4603      	mov	r3, r0
 800b004:	bf00      	nop
 800b006:	461a      	mov	r2, r3
 800b008:	4631      	mov	r1, r6
 800b00a:	4628      	mov	r0, r5
 800b00c:	f003 f815 	bl	800e03a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800b010:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 800b012:	bf00      	nop
    return client.getOrCreateData();
 800b014:	bf00      	nop
 800b016:	bf00      	nop
 800b018:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800b01c:	4621      	mov	r1, r4
 800b01e:	4618      	mov	r0, r3
 800b020:	f7fe fcc3 	bl	80099aa <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 800b024:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b028:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800b02c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b030:	eeb0 0a48 	vmov.f32	s0, s16
 800b034:	f001 f993 	bl	800c35e <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE>
 800b038:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b03c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b040:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800b044:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800b048:	6812      	ldr	r2, [r2, #0]
 800b04a:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(derived());
 800b04c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b050:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b054:	6818      	ldr	r0, [r3, #0]
 800b056:	f001 fadc 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800b05a:	4602      	mov	r2, r0
 800b05c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b060:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b06a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800b06e:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800b072:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800b076:	6812      	ldr	r2, [r2, #0]
 800b078:	601a      	str	r2, [r3, #0]
    return VariantAttorney::getPool(upstream_);
 800b07a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b07e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b08a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800b08e:	601a      	str	r2, [r3, #0]
    return client.getPool();
 800b090:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b094:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800b098:	6818      	ldr	r0, [r3, #0]
 800b09a:	f7fe fd0c 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	bf00      	nop
 800b0a2:	bf00      	nop
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
    MemoryPool* pool = getPool();
 800b0a8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b0ac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800b0b0:	601a      	str	r2, [r3, #0]
    return pool && !pool->overflowed();
 800b0b2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b0b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d00b      	beq.n	800b0d8 <_Z17mqtt_publish_datav+0x810>
 800b0c0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b0c4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800b0c8:	6818      	ldr	r0, [r3, #0]
 800b0ca:	f7fe fa6b 	bl	80095a4 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	f083 0301 	eor.w	r3, r3, #1
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	4b3b      	ldr	r3, [pc, #236]	; (800b1c8 <_Z17mqtt_publish_datav+0x900>)
 800b0da:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800b0de:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800b0e2:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 800b0e6:	f107 0310 	add.w	r3, r7, #16
 800b0ea:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 800b0ee:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b0f2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800b0f6:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 800b0fa:	601a      	str	r2, [r3, #0]
      : upstream_(upstream), key_(key) {}
 800b0fc:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800b100:	f8d7 22b4 	ldr.w	r2, [r7, #692]	; 0x2b4
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800b10a:	f507 726c 	add.w	r2, r7, #944	; 0x3b0
 800b10e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800b112:	6812      	ldr	r2, [r2, #0]
 800b114:	605a      	str	r2, [r3, #4]
 800b116:	bf00      	nop
 800b118:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800b11c:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 800b120:	4b2a      	ldr	r3, [pc, #168]	; (800b1cc <_Z17mqtt_publish_datav+0x904>)
 800b122:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
    Converter<T>::toJson(value, getOrCreateVariant());
 800b126:	f8d7 32fc 	ldr.w	r3, [r7, #764]	; 0x2fc
 800b12a:	ed93 8a00 	vldr	s16, [r3]
 800b12e:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 800b132:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 800b136:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800b13a:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
    return VariantAttorney::getPool(derived());
 800b13e:	f8d7 02f4 	ldr.w	r0, [r7, #756]	; 0x2f4
 800b142:	f001 fa66 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800b146:	4603      	mov	r3, r0
 800b148:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 800b14c:	f8d7 32f0 	ldr.w	r3, [r7, #752]	; 0x2f0
 800b150:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
    return VariantAttorney::getPool(upstream_);
 800b154:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 800b15e:	f8d7 02e8 	ldr.w	r0, [r7, #744]	; 0x2e8
 800b162:	f7fe fca8 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800b166:	4604      	mov	r4, r0
 800b168:	bf00      	nop
 800b16a:	bf00      	nop
 800b16c:	bf00      	nop
 800b16e:	bf00      	nop
 800b170:	f8d7 32f8 	ldr.w	r3, [r7, #760]	; 0x2f8
 800b174:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
    return VariantAttorney::getOrCreateData(derived());
 800b178:	f8d7 02e4 	ldr.w	r0, [r7, #740]	; 0x2e4
 800b17c:	f001 fa49 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800b180:	4603      	mov	r3, r0
 800b182:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 800b186:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800b18a:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800b18e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
    return client.getOrCreateData();
 800b198:	f8d7 02d8 	ldr.w	r0, [r7, #728]	; 0x2d8
 800b19c:	f7fe fca2 	bl	8009ae4 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	bf00      	nop
                                 adaptString(key_),
 800b1a4:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800b1a8:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f000 fcdd 	bl	800bb6a <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800b1b0:	4606      	mov	r6, r0
 800b1b2:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 800b1bc:	e008      	b.n	800b1d0 <_Z17mqtt_publish_datav+0x908>
 800b1be:	bf00      	nop
 800b1c0:	08011f18 	.word	0x08011f18
 800b1c4:	20002044 	.word	0x20002044
 800b1c8:	08011f24 	.word	0x08011f24
 800b1cc:	2000202c 	.word	0x2000202c
    return client.getPool();
 800b1d0:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 800b1d4:	f7fe fc6f 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	bf00      	nop
 800b1dc:	461a      	mov	r2, r3
 800b1de:	4631      	mov	r1, r6
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f002 ff2a 	bl	800e03a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800b1e6:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 800b1e8:	bf00      	nop
    return client.getOrCreateData();
 800b1ea:	bf00      	nop
 800b1ec:	bf00      	nop
 800b1ee:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fe fbd8 	bl	80099aa <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 800b1fa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b1fe:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800b202:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b206:	eeb0 0a48 	vmov.f32	s0, s16
 800b20a:	f001 f8a8 	bl	800c35e <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE>
 800b20e:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 800b212:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
    return VariantAttorney::getPool(derived());
 800b216:	f8d7 02d0 	ldr.w	r0, [r7, #720]	; 0x2d0
 800b21a:	f001 f9fa 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800b21e:	4603      	mov	r3, r0
 800b220:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 800b224:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800b228:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
    return VariantAttorney::getPool(upstream_);
 800b22c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
    return client.getPool();
 800b236:	f8d7 02c4 	ldr.w	r0, [r7, #708]	; 0x2c4
 800b23a:	f7fe fc3c 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800b23e:	4603      	mov	r3, r0
 800b240:	bf00      	nop
 800b242:	bf00      	nop
 800b244:	bf00      	nop
 800b246:	bf00      	nop
    MemoryPool* pool = getPool();
 800b248:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    return pool && !pool->overflowed();
 800b24c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d008      	beq.n	800b266 <_Z17mqtt_publish_datav+0x99e>
 800b254:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 800b258:	f7fe f9a4 	bl	80095a4 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800b25c:	4603      	mov	r3, r0
 800b25e:	f083 0301 	eor.w	r3, r3, #1
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b00      	cmp	r3, #0
 800b266:	4bdf      	ldr	r3, [pc, #892]	; (800b5e4 <_Z17mqtt_publish_datav+0xd1c>)
 800b268:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800b26c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800b270:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 800b274:	f107 0310 	add.w	r3, r7, #16
 800b278:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 800b27c:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 800b280:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
      : upstream_(upstream), key_(key) {}
 800b284:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 800b288:	f8d7 2308 	ldr.w	r2, [r7, #776]	; 0x308
 800b28c:	601a      	str	r2, [r3, #0]
 800b28e:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 800b292:	f8d7 2304 	ldr.w	r2, [r7, #772]	; 0x304
 800b296:	605a      	str	r2, [r3, #4]
 800b298:	bf00      	nop
 800b29a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800b29e:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 800b2a2:	4bd1      	ldr	r3, [pc, #836]	; (800b5e8 <_Z17mqtt_publish_datav+0xd20>)
 800b2a4:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
    Converter<T>::toJson(value, getOrCreateVariant());
 800b2a8:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800b2ac:	ed93 8a00 	vldr	s16, [r3]
 800b2b0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800b2b4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 800b2b8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800b2bc:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
    return VariantAttorney::getPool(derived());
 800b2c0:	f8d7 0348 	ldr.w	r0, [r7, #840]	; 0x348
 800b2c4:	f001 f9a5 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 800b2ce:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800b2d2:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
    return VariantAttorney::getPool(upstream_);
 800b2d6:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 800b2e0:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 800b2e4:	f7fe fbe7 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	bf00      	nop
 800b2ec:	bf00      	nop
 800b2ee:	bf00      	nop
 800b2f0:	bf00      	nop
 800b2f2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800b2f6:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
    return VariantAttorney::getOrCreateData(derived());
 800b2fa:	f8d7 0338 	ldr.w	r0, [r7, #824]	; 0x338
 800b2fe:	f001 f988 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800b302:	4603      	mov	r3, r0
 800b304:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 800b308:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800b30c:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800b310:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
    return client.getOrCreateData();
 800b31a:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800b31e:	f7fe fbe1 	bl	8009ae4 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800b322:	4605      	mov	r5, r0
 800b324:	bf00      	nop
                                 adaptString(key_),
 800b326:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800b32a:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 fc1c 	bl	800bb6a <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800b332:	4606      	mov	r6, r0
 800b334:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
    return client.getPool();
 800b33e:	f8d7 0328 	ldr.w	r0, [r7, #808]	; 0x328
 800b342:	f7fe fbb8 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800b346:	4603      	mov	r3, r0
 800b348:	bf00      	nop
 800b34a:	461a      	mov	r2, r3
 800b34c:	4631      	mov	r1, r6
 800b34e:	4628      	mov	r0, r5
 800b350:	f002 fe73 	bl	800e03a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800b354:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 800b356:	bf00      	nop
    return client.getOrCreateData();
 800b358:	bf00      	nop
 800b35a:	bf00      	nop
 800b35c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800b360:	4621      	mov	r1, r4
 800b362:	4618      	mov	r0, r3
 800b364:	f7fe fb21 	bl	80099aa <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 800b368:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b36c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 800b370:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b374:	eeb0 0a48 	vmov.f32	s0, s16
 800b378:	f000 fff1 	bl	800c35e <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE>
 800b37c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800b380:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
    return VariantAttorney::getPool(derived());
 800b384:	f8d7 0324 	ldr.w	r0, [r7, #804]	; 0x324
 800b388:	f001 f943 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800b38c:	4603      	mov	r3, r0
 800b38e:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800b392:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 800b396:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
    return VariantAttorney::getPool(upstream_);
 800b39a:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
    return client.getPool();
 800b3a4:	f8d7 0318 	ldr.w	r0, [r7, #792]	; 0x318
 800b3a8:	f7fe fb85 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	bf00      	nop
 800b3b0:	bf00      	nop
 800b3b2:	bf00      	nop
 800b3b4:	bf00      	nop
    MemoryPool* pool = getPool();
 800b3b6:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
    return pool && !pool->overflowed();
 800b3ba:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d008      	beq.n	800b3d4 <_Z17mqtt_publish_datav+0xb0c>
 800b3c2:	f8d7 0314 	ldr.w	r0, [r7, #788]	; 0x314
 800b3c6:	f7fe f8ed 	bl	80095a4 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	f083 0301 	eor.w	r3, r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	4b85      	ldr	r3, [pc, #532]	; (800b5ec <_Z17mqtt_publish_datav+0xd24>)
 800b3d6:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800b3da:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b3de:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 800b3e2:	f107 0310 	add.w	r3, r7, #16
 800b3e6:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800b3ea:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 800b3ee:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
      : upstream_(upstream), key_(key) {}
 800b3f2:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800b3f6:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800b400:	f8d7 2358 	ldr.w	r2, [r7, #856]	; 0x358
 800b404:	605a      	str	r2, [r3, #4]
 800b406:	bf00      	nop
 800b408:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800b40c:	f8c7 33a8 	str.w	r3, [r7, #936]	; 0x3a8
 800b410:	4b77      	ldr	r3, [pc, #476]	; (800b5f0 <_Z17mqtt_publish_datav+0xd28>)
 800b412:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
    Converter<T>::toJson(value, getOrCreateVariant());
 800b416:	f8d7 33a4 	ldr.w	r3, [r7, #932]	; 0x3a4
 800b41a:	ed93 8a00 	vldr	s16, [r3]
 800b41e:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800b422:	f8c7 33a0 	str.w	r3, [r7, #928]	; 0x3a0
 800b426:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800b42a:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
    return VariantAttorney::getPool(derived());
 800b42e:	f8d7 039c 	ldr.w	r0, [r7, #924]	; 0x39c
 800b432:	f001 f8ee 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800b436:	4603      	mov	r3, r0
 800b438:	f8c7 3398 	str.w	r3, [r7, #920]	; 0x398
 800b43c:	f8d7 3398 	ldr.w	r3, [r7, #920]	; 0x398
 800b440:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
    return VariantAttorney::getPool(upstream_);
 800b444:	f8d7 3394 	ldr.w	r3, [r7, #916]	; 0x394
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f8c7 3390 	str.w	r3, [r7, #912]	; 0x390
 800b44e:	f8d7 0390 	ldr.w	r0, [r7, #912]	; 0x390
 800b452:	f7fe fb30 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800b456:	4604      	mov	r4, r0
 800b458:	bf00      	nop
 800b45a:	bf00      	nop
 800b45c:	bf00      	nop
 800b45e:	bf00      	nop
 800b460:	f8d7 33a0 	ldr.w	r3, [r7, #928]	; 0x3a0
 800b464:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
    return VariantAttorney::getOrCreateData(derived());
 800b468:	f8d7 038c 	ldr.w	r0, [r7, #908]	; 0x38c
 800b46c:	f001 f8d1 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800b470:	4603      	mov	r3, r0
 800b472:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 800b476:	f8d7 3388 	ldr.w	r3, [r7, #904]	; 0x388
 800b47a:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800b47e:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380
    return client.getOrCreateData();
 800b488:	f8d7 0380 	ldr.w	r0, [r7, #896]	; 0x380
 800b48c:	f7fe fb2a 	bl	8009ae4 <_ZN11ArduinoJson8V6213HB212JsonDocument15getOrCreateDataEv>
 800b490:	4605      	mov	r5, r0
 800b492:	bf00      	nop
                                 adaptString(key_),
 800b494:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800b498:	685b      	ldr	r3, [r3, #4]
    return variantGetOrAddMember(VariantAttorney::getOrCreateData(upstream_),
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 fb65 	bl	800bb6a <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
    return client.getPool();
 800b4ac:	f8d7 037c 	ldr.w	r0, [r7, #892]	; 0x37c
 800b4b0:	f7fe fb01 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	bf00      	nop
 800b4b8:	461a      	mov	r2, r3
 800b4ba:	4631      	mov	r1, r6
 800b4bc:	4628      	mov	r0, r5
 800b4be:	f002 fdbc 	bl	800e03a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>
 800b4c2:	4602      	mov	r2, r0
                                 VariantAttorney::getPool(upstream_));
 800b4c4:	bf00      	nop
    return client.getOrCreateData();
 800b4c6:	bf00      	nop
 800b4c8:	bf00      	nop
 800b4ca:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fe fa6a 	bl	80099aa <_ZN11ArduinoJson8V6213HB211JsonVariantC1EPNS0_6detail10MemoryPoolEPNS2_11VariantDataE>
    Converter<T>::toJson(value, getOrCreateVariant());
 800b4d6:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b4da:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b4de:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b4e2:	eeb0 0a48 	vmov.f32	s0, s16
 800b4e6:	f000 ff3a 	bl	800c35e <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE>
 800b4ea:	f8d7 33a8 	ldr.w	r3, [r7, #936]	; 0x3a8
 800b4ee:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
    return VariantAttorney::getPool(derived());
 800b4f2:	f8d7 0378 	ldr.w	r0, [r7, #888]	; 0x378
 800b4f6:	f001 f88c 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 800b500:	f8d7 3374 	ldr.w	r3, [r7, #884]	; 0x374
 800b504:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
    return VariantAttorney::getPool(upstream_);
 800b508:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
    return client.getPool();
 800b512:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 800b516:	f7fe face 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800b51a:	4603      	mov	r3, r0
 800b51c:	bf00      	nop
 800b51e:	bf00      	nop
 800b520:	bf00      	nop
 800b522:	bf00      	nop
    MemoryPool* pool = getPool();
 800b524:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
    return pool && !pool->overflowed();
 800b528:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d008      	beq.n	800b542 <_Z17mqtt_publish_datav+0xc7a>
 800b530:	f8d7 0368 	ldr.w	r0, [r7, #872]	; 0x368
 800b534:	f7fe f836 	bl	80095a4 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10overflowedEv>
 800b538:	4603      	mov	r3, r0
 800b53a:	f083 0301 	eor.w	r3, r3, #1
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	2b00      	cmp	r3, #0
    return getVariant();
 800b542:	f107 0310 	add.w	r3, r7, #16
 800b546:	4618      	mov	r0, r3
 800b548:	f7fe faa3 	bl	8009a92 <_ZNK11ArduinoJson8V6213HB212JsonDocument10getVariantEv>
 800b54c:	4603      	mov	r3, r0
 800b54e:	bf00      	nop
 800b550:	461a      	mov	r2, r3
	doc["led"] = led;
	doc["temperature"] = temp;
	doc["ax"] = a[0];
	doc["ay"] = a[1];
	doc["az"] = a[2];
	serializeJson(doc, buff);
 800b552:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b556:	4619      	mov	r1, r3
 800b558:	4610      	mov	r0, r2
 800b55a:	f000 fb2d 	bl	800bbb8 <_ZN11ArduinoJson8V6213HB213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT_>
	//publish data
	m.payload = (void *)buff.c_str();
 800b55e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b562:	4618      	mov	r0, r3
 800b564:	f003 fd08 	bl	800ef78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800b568:	4602      	mov	r2, r0
 800b56a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b56e:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800b572:	609a      	str	r2, [r3, #8]
	m.payloadlen = buff.length();
 800b574:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b578:	4618      	mov	r0, r3
 800b57a:	f003 fca9 	bl	800eed0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 800b57e:	4602      	mov	r2, r0
 800b580:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 800b584:	f5a3 736c 	sub.w	r3, r3, #944	; 0x3b0
 800b588:	60da      	str	r2, [r3, #12]
	rc = MQTTPublish(&c, (const char*)"Led/estado", &m);
 800b58a:	463b      	mov	r3, r7
 800b58c:	461a      	mov	r2, r3
 800b58e:	4919      	ldr	r1, [pc, #100]	; (800b5f4 <_Z17mqtt_publish_datav+0xd2c>)
 800b590:	4819      	ldr	r0, [pc, #100]	; (800b5f8 <_Z17mqtt_publish_datav+0xd30>)
 800b592:	f7f9 fea2 	bl	80052da <MQTTPublish>
 800b596:	f8c7 03ac 	str.w	r0, [r7, #940]	; 0x3ac
	if(rc == SUCCESSS){
 800b59a:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d105      	bne.n	800b5ae <_Z17mqtt_publish_datav+0xce6>
		printf("Published %d\r\n", rc);
 800b5a2:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 800b5a6:	4815      	ldr	r0, [pc, #84]	; (800b5fc <_Z17mqtt_publish_datav+0xd34>)
 800b5a8:	f003 fec2 	bl	800f330 <iprintf>
 800b5ac:	e004      	b.n	800b5b8 <_Z17mqtt_publish_datav+0xcf0>
	}else{
		printf("Published error! %d\r\n", rc);
 800b5ae:	f8d7 13ac 	ldr.w	r1, [r7, #940]	; 0x3ac
 800b5b2:	4813      	ldr	r0, [pc, #76]	; (800b600 <_Z17mqtt_publish_datav+0xd38>)
 800b5b4:	f003 febc 	bl	800f330 <iprintf>
	}
	return rc;
 800b5b8:	f8d7 33ac 	ldr.w	r3, [r7, #940]	; 0x3ac
 800b5bc:	b2dc      	uxtb	r4, r3

}
 800b5be:	f107 0310 	add.w	r3, r7, #16
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7ff f972 	bl	800a8ac <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EED1Ev>
 800b5c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f003 fc73 	bl	800eeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	return rc;
 800b5d2:	4623      	mov	r3, r4
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f507 776c 	add.w	r7, r7, #944	; 0x3b0
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	ecbd 8b02 	vpop	{d8}
 800b5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e4:	08011f28 	.word	0x08011f28
 800b5e8:	20002030 	.word	0x20002030
 800b5ec:	08011f2c 	.word	0x08011f2c
 800b5f0:	20002034 	.word	0x20002034
 800b5f4:	08011f30 	.word	0x08011f30
 800b5f8:	20001fcc 	.word	0x20001fcc
 800b5fc:	08011f3c 	.word	0x08011f3c
 800b600:	08011f4c 	.word	0x08011f4c

0800b604 <_Z25print_network_informationv>:

void print_network_information(void)
{
 800b604:	b5b0      	push	{r4, r5, r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af04      	add	r7, sp, #16
	memset(&gWIZNETINFO,0,sizeof(gWIZNETINFO));
 800b60a:	2217      	movs	r2, #23
 800b60c:	2100      	movs	r1, #0
 800b60e:	4831      	ldr	r0, [pc, #196]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b610:	f004 f810 	bl	800f634 <memset>

	wizchip_getnetinfo(&gWIZNETINFO);
 800b614:	482f      	ldr	r0, [pc, #188]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b616:	f7f7 f99f 	bl	8002958 <wizchip_getnetinfo>
	printf("MAC Address : %02x:%02x:%02x:%02x:%02x:%02x\n\r",gWIZNETINFO.mac[0],gWIZNETINFO.mac[1],gWIZNETINFO.mac[2],gWIZNETINFO.mac[3],gWIZNETINFO.mac[4],gWIZNETINFO.mac[5]);
 800b61a:	4b2e      	ldr	r3, [pc, #184]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	4618      	mov	r0, r3
 800b620:	4b2c      	ldr	r3, [pc, #176]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b622:	785b      	ldrb	r3, [r3, #1]
 800b624:	461c      	mov	r4, r3
 800b626:	4b2b      	ldr	r3, [pc, #172]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b628:	789b      	ldrb	r3, [r3, #2]
 800b62a:	461d      	mov	r5, r3
 800b62c:	4b29      	ldr	r3, [pc, #164]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b62e:	78db      	ldrb	r3, [r3, #3]
 800b630:	461a      	mov	r2, r3
 800b632:	4b28      	ldr	r3, [pc, #160]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b634:	791b      	ldrb	r3, [r3, #4]
 800b636:	4619      	mov	r1, r3
 800b638:	4b26      	ldr	r3, [pc, #152]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b63a:	795b      	ldrb	r3, [r3, #5]
 800b63c:	9302      	str	r3, [sp, #8]
 800b63e:	9101      	str	r1, [sp, #4]
 800b640:	9200      	str	r2, [sp, #0]
 800b642:	462b      	mov	r3, r5
 800b644:	4622      	mov	r2, r4
 800b646:	4601      	mov	r1, r0
 800b648:	4823      	ldr	r0, [pc, #140]	; (800b6d8 <_Z25print_network_informationv+0xd4>)
 800b64a:	f003 fe71 	bl	800f330 <iprintf>
	printf("IP  Address : %d.%d.%d.%d\n\r",gWIZNETINFO.ip[0],gWIZNETINFO.ip[1],gWIZNETINFO.ip[2],gWIZNETINFO.ip[3]);
 800b64e:	4b21      	ldr	r3, [pc, #132]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b650:	799b      	ldrb	r3, [r3, #6]
 800b652:	4619      	mov	r1, r3
 800b654:	4b1f      	ldr	r3, [pc, #124]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b656:	79db      	ldrb	r3, [r3, #7]
 800b658:	461a      	mov	r2, r3
 800b65a:	4b1e      	ldr	r3, [pc, #120]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b65c:	7a1b      	ldrb	r3, [r3, #8]
 800b65e:	4618      	mov	r0, r3
 800b660:	4b1c      	ldr	r3, [pc, #112]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b662:	7a5b      	ldrb	r3, [r3, #9]
 800b664:	9300      	str	r3, [sp, #0]
 800b666:	4603      	mov	r3, r0
 800b668:	481c      	ldr	r0, [pc, #112]	; (800b6dc <_Z25print_network_informationv+0xd8>)
 800b66a:	f003 fe61 	bl	800f330 <iprintf>
	printf("Subnet Mask : %d.%d.%d.%d\n\r",gWIZNETINFO.sn[0],gWIZNETINFO.sn[1],gWIZNETINFO.sn[2],gWIZNETINFO.sn[3]);
 800b66e:	4b19      	ldr	r3, [pc, #100]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b670:	7a9b      	ldrb	r3, [r3, #10]
 800b672:	4619      	mov	r1, r3
 800b674:	4b17      	ldr	r3, [pc, #92]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b676:	7adb      	ldrb	r3, [r3, #11]
 800b678:	461a      	mov	r2, r3
 800b67a:	4b16      	ldr	r3, [pc, #88]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b67c:	7b1b      	ldrb	r3, [r3, #12]
 800b67e:	4618      	mov	r0, r3
 800b680:	4b14      	ldr	r3, [pc, #80]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b682:	7b5b      	ldrb	r3, [r3, #13]
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	4603      	mov	r3, r0
 800b688:	4815      	ldr	r0, [pc, #84]	; (800b6e0 <_Z25print_network_informationv+0xdc>)
 800b68a:	f003 fe51 	bl	800f330 <iprintf>
	printf("Gateway     : %d.%d.%d.%d\n\r",gWIZNETINFO.gw[0],gWIZNETINFO.gw[1],gWIZNETINFO.gw[2],gWIZNETINFO.gw[3]);
 800b68e:	4b11      	ldr	r3, [pc, #68]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b690:	7b9b      	ldrb	r3, [r3, #14]
 800b692:	4619      	mov	r1, r3
 800b694:	4b0f      	ldr	r3, [pc, #60]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b696:	7bdb      	ldrb	r3, [r3, #15]
 800b698:	461a      	mov	r2, r3
 800b69a:	4b0e      	ldr	r3, [pc, #56]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b69c:	7c1b      	ldrb	r3, [r3, #16]
 800b69e:	4618      	mov	r0, r3
 800b6a0:	4b0c      	ldr	r3, [pc, #48]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b6a2:	7c5b      	ldrb	r3, [r3, #17]
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	480e      	ldr	r0, [pc, #56]	; (800b6e4 <_Z25print_network_informationv+0xe0>)
 800b6aa:	f003 fe41 	bl	800f330 <iprintf>
	printf("DNS Server  : %d.%d.%d.%d\n\r",gWIZNETINFO.dns[0],gWIZNETINFO.dns[1],gWIZNETINFO.dns[2],gWIZNETINFO.dns[3]);
 800b6ae:	4b09      	ldr	r3, [pc, #36]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b6b0:	7c9b      	ldrb	r3, [r3, #18]
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4b07      	ldr	r3, [pc, #28]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b6b6:	7cdb      	ldrb	r3, [r3, #19]
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	4b06      	ldr	r3, [pc, #24]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b6bc:	7d1b      	ldrb	r3, [r3, #20]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	4b04      	ldr	r3, [pc, #16]	; (800b6d4 <_Z25print_network_informationv+0xd0>)
 800b6c2:	7d5b      	ldrb	r3, [r3, #21]
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	4807      	ldr	r0, [pc, #28]	; (800b6e8 <_Z25print_network_informationv+0xe4>)
 800b6ca:	f003 fe31 	bl	800f330 <iprintf>
}
 800b6ce:	bf00      	nop
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bdb0      	pop	{r4, r5, r7, pc}
 800b6d4:	2000004c 	.word	0x2000004c
 800b6d8:	08011f64 	.word	0x08011f64
 800b6dc:	08011f94 	.word	0x08011f94
 800b6e0:	08011fb0 	.word	0x08011fb0
 800b6e4:	08011fcc 	.word	0x08011fcc
 800b6e8:	08011fe8 	.word	0x08011fe8

0800b6ec <_Z13proccess_dhcpv>:

int proccess_dhcp(void){
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	71fb      	strb	r3, [r7, #7]
	uint32_t timout = millis();
 800b6f6:	f7fc ff19 	bl	800852c <millis>
 800b6fa:	6038      	str	r0, [r7, #0]
	while(1){
		ret = DHCP_run();
 800b6fc:	f7f8 fa5c 	bl	8003bb8 <DHCP_run>
 800b700:	4603      	mov	r3, r0
 800b702:	71fb      	strb	r3, [r7, #7]

		if(ret == DHCP_IP_LEASED){
 800b704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b708:	2b04      	cmp	r3, #4
 800b70a:	d10a      	bne.n	800b722 <_Z13proccess_dhcpv+0x36>
			//printf information
			memset(&gWIZNETINFO,0,sizeof(gWIZNETINFO));
 800b70c:	2217      	movs	r2, #23
 800b70e:	2100      	movs	r1, #0
 800b710:	480f      	ldr	r0, [pc, #60]	; (800b750 <_Z13proccess_dhcpv+0x64>)
 800b712:	f003 ff8f 	bl	800f634 <memset>

			wizchip_getnetinfo(&gWIZNETINFO);
 800b716:	480e      	ldr	r0, [pc, #56]	; (800b750 <_Z13proccess_dhcpv+0x64>)
 800b718:	f7f7 f91e 	bl	8002958 <wizchip_getnetinfo>
			print_network_information();
 800b71c:	f7ff ff72 	bl	800b604 <_Z25print_network_informationv>
			break;
 800b720:	e00f      	b.n	800b742 <_Z13proccess_dhcpv+0x56>
			//todo

		}

		//check timeout
		if((millis() - timout) >= DHCP_TIMEOUT ){
 800b722:	f7fc ff03 	bl	800852c <millis>
 800b726:	4602      	mov	r2, r0
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	1ad3      	subs	r3, r2, r3
 800b72c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b730:	4293      	cmp	r3, r2
 800b732:	bf8c      	ite	hi
 800b734:	2301      	movhi	r3, #1
 800b736:	2300      	movls	r3, #0
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d0de      	beq.n	800b6fc <_Z13proccess_dhcpv+0x10>
			DHCP_stop();
 800b73e:	f7f8 fb53 	bl	8003de8 <DHCP_stop>
			break;
		}

	}
	return ret;
 800b742:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800b746:	4618      	mov	r0, r3
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	2000004c 	.word	0x2000004c

0800b754 <_Z14messageArrivedP11MessageData>:

void messageArrived(MessageData* md)
{
 800b754:	b5b0      	push	{r4, r5, r7, lr}
 800b756:	b0fa      	sub	sp, #488	; 0x1e8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800b75e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800b762:	6018      	str	r0, [r3, #0]
	StaticJsonDocument<256> doc;
 800b764:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 fac0 	bl	800bcee <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EEC1Ev>
	DeserializationError err;
 800b76e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe fd04 	bl	800a180 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1Ev>
	unsigned char topicSusc[100];
	uint32_t rd_size;
	uint32_t rd_pt;
	uint32_t rdmore_size;

	MQTTMessage* message = md->message;
 800b778:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800b77c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	MQTTString* topic = md->topicName;
 800b788:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800b78c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

	rdmore_size = (int)topic->lenstring.len;
 800b798:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	rd_pt = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

	while(rdmore_size != 0)
 800b7a8:	e035      	b.n	800b816 <_Z14messageArrivedP11MessageData+0xc2>
	{
		if(rdmore_size > sizeof(topicSusc) - 1)
 800b7aa:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800b7ae:	2b63      	cmp	r3, #99	; 0x63
 800b7b0:	d903      	bls.n	800b7ba <_Z14messageArrivedP11MessageData+0x66>
		{
			rd_size = sizeof(topicSusc) - 1;
 800b7b2:	2363      	movs	r3, #99	; 0x63
 800b7b4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800b7b8:	e003      	b.n	800b7c2 <_Z14messageArrivedP11MessageData+0x6e>
		}
		else
		{
			rd_size = rdmore_size;
 800b7ba:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800b7be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		}

		memset(topicSusc, 0, rd_size + 1);
 800b7c2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800b7c6:	1c5a      	adds	r2, r3, #1
 800b7c8:	f107 0320 	add.w	r3, r7, #32
 800b7cc:	2100      	movs	r1, #0
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f003 ff30 	bl	800f634 <memset>

		memcpy(topicSusc, ((char*)topic->lenstring.data) + rd_pt, rd_size);
 800b7d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800b7d8:	689a      	ldr	r2, [r3, #8]
 800b7da:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800b7de:	18d1      	adds	r1, r2, r3
 800b7e0:	f107 0320 	add.w	r3, r7, #32
 800b7e4:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f004 f82c 	bl	800f846 <memcpy>
		printf("SubScribe Topic : %s\r\n", topicSusc);
 800b7ee:	f107 0320 	add.w	r3, r7, #32
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	4854      	ldr	r0, [pc, #336]	; (800b948 <_Z14messageArrivedP11MessageData+0x1f4>)
 800b7f6:	f003 fd9b 	bl	800f330 <iprintf>
		rd_pt += rd_size;
 800b7fa:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800b7fe:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800b802:	4413      	add	r3, r2
 800b804:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
		rdmore_size -= rd_size;
 800b808:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800b80c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
	while(rdmore_size != 0)
 800b816:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d1c5      	bne.n	800b7aa <_Z14messageArrivedP11MessageData+0x56>
	}

	if (opts.nodelimiter)
 800b81e:	4b4b      	ldr	r3, [pc, #300]	; (800b94c <_Z14messageArrivedP11MessageData+0x1f8>)
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00b      	beq.n	800b83e <_Z14messageArrivedP11MessageData+0xea>
	{
		printf("Message 1 : %.*s\r\n", (int)message->payloadlen, (char*)message->payload);
 800b826:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	4619      	mov	r1, r3
 800b82e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	461a      	mov	r2, r3
 800b836:	4846      	ldr	r0, [pc, #280]	; (800b950 <_Z14messageArrivedP11MessageData+0x1fc>)
 800b838:	f003 fd7a 	bl	800f330 <iprintf>
 800b83c:	e00b      	b.n	800b856 <_Z14messageArrivedP11MessageData+0x102>
	}
	else
	{
		printf("Message 2: %.*s%s\r\n", (int)message->payloadlen, (char*)message->payload, opts.delimiter);
 800b83e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	4619      	mov	r1, r3
 800b846:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800b84a:	689a      	ldr	r2, [r3, #8]
 800b84c:	4b3f      	ldr	r3, [pc, #252]	; (800b94c <_Z14messageArrivedP11MessageData+0x1f8>)
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	4840      	ldr	r0, [pc, #256]	; (800b954 <_Z14messageArrivedP11MessageData+0x200>)
 800b852:	f003 fd6d 	bl	800f330 <iprintf>
	}
	//Procesar el json
	std::string msg((char*)message->payload, (int)message->payloadlen);
 800b856:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800b85a:	689c      	ldr	r4, [r3, #8]
 800b85c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800b860:	68dd      	ldr	r5, [r3, #12]
 800b862:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800b866:	4618      	mov	r0, r3
 800b868:	f003 fa95 	bl	800ed96 <_ZNSaIcEC1Ev>
 800b86c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800b870:	f107 0008 	add.w	r0, r7, #8
 800b874:	462a      	mov	r2, r5
 800b876:	4621      	mov	r1, r4
 800b878:	f003 fba4 	bl	800efc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 800b87c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800b880:	4618      	mov	r0, r3
 800b882:	f003 fa89 	bl	800ed98 <_ZNSaIcED1Ev>
	err = deserializeJson(doc, msg);
 800b886:	f107 0208 	add.w	r2, r7, #8
 800b88a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b88e:	4611      	mov	r1, r2
 800b890:	4618      	mov	r0, r3
 800b892:	f000 fa3d 	bl	800bd10 <_ZN11ArduinoJson8V6213HB215deserializeJsonIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENS0_20DeserializationErrorERNS0_12JsonDocumentEDpOT_>
 800b896:	4602      	mov	r2, r0
 800b898:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800b89c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800b8a0:	701a      	strb	r2, [r3, #0]
	if(err){
 800b8a2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f7fe fc85 	bl	800a1b6 <_ZNK11ArduinoJson8V6213HB220DeserializationErrorcvbEv>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d003      	beq.n	800b8ba <_Z14messageArrivedP11MessageData+0x166>
		printf("error deserialize json\r\n");
 800b8b2:	4829      	ldr	r0, [pc, #164]	; (800b958 <_Z14messageArrivedP11MessageData+0x204>)
 800b8b4:	f003 fda2 	bl	800f3fc <puts>
			GPIOX_ODR(LED) = 0;
			led = false;
		}
		mqtt_publish_data();
	}
	return;
 800b8b8:	e036      	b.n	800b928 <_Z14messageArrivedP11MessageData+0x1d4>
 800b8ba:	4b28      	ldr	r3, [pc, #160]	; (800b95c <_Z14messageArrivedP11MessageData+0x208>)
 800b8bc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800b8c0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800b8c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800b8c8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b8cc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800b8d0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800b8d4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
      : upstream_(upstream), key_(key) {}
 800b8d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800b8dc:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800b8e0:	601a      	str	r2, [r3, #0]
 800b8e2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800b8e6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800b8ea:	605a      	str	r2, [r3, #4]
    return {*this, key};
 800b8ec:	bf00      	nop
		if(doc["ledState"] == true){
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	f887 31c3 	strb.w	r3, [r7, #451]	; 0x1c3
 800b8f4:	f207 12c3 	addw	r2, r7, #451	; 0x1c3
 800b8f8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800b8fc:	4611      	mov	r1, r2
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 fa18 	bl	800bd34 <_ZN11ArduinoJson8V6213HB26detaileqIbEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS1_11MemberProxyIRNS0_12JsonDocumentEPKcEERKS6_>
 800b904:	4603      	mov	r3, r0
 800b906:	2b00      	cmp	r3, #0
 800b908:	d006      	beq.n	800b918 <_Z14messageArrivedP11MessageData+0x1c4>
			GPIOX_ODR(LED) = 1;
 800b90a:	4b15      	ldr	r3, [pc, #84]	; (800b960 <_Z14messageArrivedP11MessageData+0x20c>)
 800b90c:	2201      	movs	r2, #1
 800b90e:	601a      	str	r2, [r3, #0]
			led = true;
 800b910:	4b14      	ldr	r3, [pc, #80]	; (800b964 <_Z14messageArrivedP11MessageData+0x210>)
 800b912:	2201      	movs	r2, #1
 800b914:	701a      	strb	r2, [r3, #0]
 800b916:	e005      	b.n	800b924 <_Z14messageArrivedP11MessageData+0x1d0>
			GPIOX_ODR(LED) = 0;
 800b918:	4b11      	ldr	r3, [pc, #68]	; (800b960 <_Z14messageArrivedP11MessageData+0x20c>)
 800b91a:	2200      	movs	r2, #0
 800b91c:	601a      	str	r2, [r3, #0]
			led = false;
 800b91e:	4b11      	ldr	r3, [pc, #68]	; (800b964 <_Z14messageArrivedP11MessageData+0x210>)
 800b920:	2200      	movs	r2, #0
 800b922:	701a      	strb	r2, [r3, #0]
		mqtt_publish_data();
 800b924:	f7fe ffd0 	bl	800a8c8 <_Z17mqtt_publish_datav>
	return;
 800b928:	bf00      	nop
}
 800b92a:	f107 0308 	add.w	r3, r7, #8
 800b92e:	4618      	mov	r0, r3
 800b930:	f003 fac2 	bl	800eeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b934:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b938:	4618      	mov	r0, r3
 800b93a:	f7fe ffb7 	bl	800a8ac <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EED1Ev>
	return;
 800b93e:	bf00      	nop
}
 800b940:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 800b944:	46bd      	mov	sp, r7
 800b946:	bdb0      	pop	{r4, r5, r7, pc}
 800b948:	08012004 	.word	0x08012004
 800b94c:	2000007c 	.word	0x2000007c
 800b950:	0801201c 	.word	0x0801201c
 800b954:	08012030 	.word	0x08012030
 800b958:	08012044 	.word	0x08012044
 800b95c:	0801205c 	.word	0x0801205c
 800b960:	424182b0 	.word	0x424182b0
 800b964:	20002028 	.word	0x20002028

0800b968 <_Z8MQTT_runv>:

void MQTT_run(void){
 800b968:	b580      	push	{r7, lr}
 800b96a:	b09c      	sub	sp, #112	; 0x70
 800b96c:	af04      	add	r7, sp, #16
	int rc = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	65bb      	str	r3, [r7, #88]	; 0x58

	uint32_t ck_timer;

	NewNetwork(&n, MQTT_SOCKET);
 800b972:	2100      	movs	r1, #0
 800b974:	483d      	ldr	r0, [pc, #244]	; (800ba6c <_Z8MQTT_runv+0x104>)
 800b976:	f7f9 fde3 	bl	8005540 <NewNetwork>
	ConnectNetwork(&n, mqtt_ip, mqtt_port);
 800b97a:	f240 725b 	movw	r2, #1883	; 0x75b
 800b97e:	493c      	ldr	r1, [pc, #240]	; (800ba70 <_Z8MQTT_runv+0x108>)
 800b980:	483a      	ldr	r0, [pc, #232]	; (800ba6c <_Z8MQTT_runv+0x104>)
 800b982:	f7f9 fe56 	bl	8005632 <ConnectNetwork>
	MQTTClientInit(&c, &n, 1000, buf, sizeof(buf), tempBuffer, sizeof(tempBuffer));
 800b986:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b98a:	9302      	str	r3, [sp, #8]
 800b98c:	4b39      	ldr	r3, [pc, #228]	; (800ba74 <_Z8MQTT_runv+0x10c>)
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	4b38      	ldr	r3, [pc, #224]	; (800ba78 <_Z8MQTT_runv+0x110>)
 800b998:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b99c:	4933      	ldr	r1, [pc, #204]	; (800ba6c <_Z8MQTT_runv+0x104>)
 800b99e:	4837      	ldr	r0, [pc, #220]	; (800ba7c <_Z8MQTT_runv+0x114>)
 800b9a0:	f7f9 f842 	bl	8004a28 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 800b9a4:	4a36      	ldr	r2, [pc, #216]	; (800ba80 <_Z8MQTT_runv+0x118>)
 800b9a6:	463b      	mov	r3, r7
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	2258      	movs	r2, #88	; 0x58
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f003 ff4a 	bl	800f846 <memcpy>
	data.willFlag = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	76fb      	strb	r3, [r7, #27]
	data.MQTTVersion = 3;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	723b      	strb	r3, [r7, #8]
	data.clientID.cstring = opts.clientid;
 800b9ba:	4b32      	ldr	r3, [pc, #200]	; (800ba84 <_Z8MQTT_runv+0x11c>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	60fb      	str	r3, [r7, #12]
	data.username.cstring = opts.username;
 800b9c0:	4b30      	ldr	r3, [pc, #192]	; (800ba84 <_Z8MQTT_runv+0x11c>)
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	643b      	str	r3, [r7, #64]	; 0x40
	data.password.cstring = opts.password;
 800b9c6:	4b2f      	ldr	r3, [pc, #188]	; (800ba84 <_Z8MQTT_runv+0x11c>)
 800b9c8:	695b      	ldr	r3, [r3, #20]
 800b9ca:	64fb      	str	r3, [r7, #76]	; 0x4c
	data.keepAliveInterval = 60;
 800b9cc:	233c      	movs	r3, #60	; 0x3c
 800b9ce:	833b      	strh	r3, [r7, #24]
	data.cleansession = 1;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	76bb      	strb	r3, [r7, #26]

	if(MQTTConnect(&c, &data) == SUCCESSS){
 800b9d4:	463b      	mov	r3, r7
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	4828      	ldr	r0, [pc, #160]	; (800ba7c <_Z8MQTT_runv+0x114>)
 800b9da:	f7f9 fb4f 	bl	800507c <MQTTConnect>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	bf0c      	ite	eq
 800b9e4:	2301      	moveq	r3, #1
 800b9e6:	2300      	movne	r3, #0
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d003      	beq.n	800b9f6 <_Z8MQTT_runv+0x8e>
		printf("connect server\r\n");
 800b9ee:	4826      	ldr	r0, [pc, #152]	; (800ba88 <_Z8MQTT_runv+0x120>)
 800b9f0:	f003 fd04 	bl	800f3fc <puts>
 800b9f4:	e004      	b.n	800ba00 <_Z8MQTT_runv+0x98>
	}else{
		printf("disconnect\r\n");
 800b9f6:	4825      	ldr	r0, [pc, #148]	; (800ba8c <_Z8MQTT_runv+0x124>)
 800b9f8:	f003 fd00 	bl	800f3fc <puts>
		Error_Handler();
 800b9fc:	f7fe ff4c 	bl	800a898 <_Z13Error_Handlerv>
	}
	opts.showtopics = 1;
 800ba00:	4b20      	ldr	r3, [pc, #128]	; (800ba84 <_Z8MQTT_runv+0x11c>)
 800ba02:	2201      	movs	r2, #1
 800ba04:	621a      	str	r2, [r3, #32]

	printf("Subscribing to %s\r\n", MQTT_TOPIC);
 800ba06:	4922      	ldr	r1, [pc, #136]	; (800ba90 <_Z8MQTT_runv+0x128>)
 800ba08:	4822      	ldr	r0, [pc, #136]	; (800ba94 <_Z8MQTT_runv+0x12c>)
 800ba0a:	f003 fc91 	bl	800f330 <iprintf>
	rc = MQTTSubscribe(&c, ( const char*)MQTT_TOPIC, opts.qos, messageArrived);
 800ba0e:	4b1d      	ldr	r3, [pc, #116]	; (800ba84 <_Z8MQTT_runv+0x11c>)
 800ba10:	7b1a      	ldrb	r2, [r3, #12]
 800ba12:	4b21      	ldr	r3, [pc, #132]	; (800ba98 <_Z8MQTT_runv+0x130>)
 800ba14:	491e      	ldr	r1, [pc, #120]	; (800ba90 <_Z8MQTT_runv+0x128>)
 800ba16:	4819      	ldr	r0, [pc, #100]	; (800ba7c <_Z8MQTT_runv+0x114>)
 800ba18:	f7f9 fbb6 	bl	8005188 <MQTTSubscribe>
 800ba1c:	65b8      	str	r0, [r7, #88]	; 0x58
	printf("Subscribed %d\r\n", rc);
 800ba1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba20:	481e      	ldr	r0, [pc, #120]	; (800ba9c <_Z8MQTT_runv+0x134>)
 800ba22:	f003 fc85 	bl	800f330 <iprintf>



	ck_timer = millis();
 800ba26:	f7fc fd81 	bl	800852c <millis>
 800ba2a:	65f8      	str	r0, [r7, #92]	; 0x5c

	while(1){
		MQTTYield(&c, data.keepAliveInterval);
 800ba2c:	8b3b      	ldrh	r3, [r7, #24]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4812      	ldr	r0, [pc, #72]	; (800ba7c <_Z8MQTT_runv+0x114>)
 800ba32:	f7f9 fadf 	bl	8004ff4 <MQTTYield>

		//publish data

		if((millis() - ck_timer) >= 1000){
 800ba36:	f7fc fd79 	bl	800852c <millis>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ba44:	4293      	cmp	r3, r2
 800ba46:	bf8c      	ite	hi
 800ba48:	2301      	movhi	r3, #1
 800ba4a:	2300      	movls	r3, #0
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d0ec      	beq.n	800ba2c <_Z8MQTT_runv+0xc4>
		     ck_timer = millis();
 800ba52:	f7fc fd6b 	bl	800852c <millis>
 800ba56:	65f8      	str	r0, [r7, #92]	; 0x5c
			 mpu6050_basic_read(a, g);
 800ba58:	4911      	ldr	r1, [pc, #68]	; (800baa0 <_Z8MQTT_runv+0x138>)
 800ba5a:	4812      	ldr	r0, [pc, #72]	; (800baa4 <_Z8MQTT_runv+0x13c>)
 800ba5c:	f7fd f8e4 	bl	8008c28 <mpu6050_basic_read>
			 mpu6050_basic_read_temperature(&temp);
 800ba60:	4811      	ldr	r0, [pc, #68]	; (800baa8 <_Z8MQTT_runv+0x140>)
 800ba62:	f7fd f8c9 	bl	8008bf8 <mpu6050_basic_read_temperature>

			mqtt_publish_data();
 800ba66:	f7fe ff2f 	bl	800a8c8 <_Z17mqtt_publish_datav>
		MQTTYield(&c, data.keepAliveInterval);
 800ba6a:	e7df      	b.n	800ba2c <_Z8MQTT_runv+0xc4>
 800ba6c:	20001fbc 	.word	0x20001fbc
 800ba70:	200015b4 	.word	0x200015b4
 800ba74:	200017bc 	.word	0x200017bc
 800ba78:	200015b8 	.word	0x200015b8
 800ba7c:	20001fcc 	.word	0x20001fcc
 800ba80:	080120a8 	.word	0x080120a8
 800ba84:	2000007c 	.word	0x2000007c
 800ba88:	08012068 	.word	0x08012068
 800ba8c:	08012078 	.word	0x08012078
 800ba90:	08012120 	.word	0x08012120
 800ba94:	08012084 	.word	0x08012084
 800ba98:	0800b755 	.word	0x0800b755
 800ba9c:	08012098 	.word	0x08012098
 800baa0:	20002038 	.word	0x20002038
 800baa4:	2000202c 	.word	0x2000202c
 800baa8:	20002044 	.word	0x20002044

0800baac <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightINS1_11VariantSlotEEEPT_v>:
  T* allocRight() {
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
 800bab4:	2110      	movs	r1, #16
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f7fd fe17 	bl	80096ea <_ZN11ArduinoJson8V6213HB26detail10MemoryPool10allocRightEj>
 800babc:	4603      	mov	r3, r0
  }
 800babe:	4618      	mov	r0, r3
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
  return StringAdapter<TChar*>::adapt(p);
}

template <typename TChar>
typename SizedStringAdapter<TChar*>::AdaptedString adaptString(TChar* p,
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b084      	sub	sp, #16
 800baca:	af00      	add	r7, sp, #0
 800bacc:	60f8      	str	r0, [r7, #12]
 800bace:	60b9      	str	r1, [r7, #8]
 800bad0:	607a      	str	r2, [r7, #4]
                                                               size_t n) {
  return SizedStringAdapter<TChar*>::adapt(p, n);
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	68b9      	ldr	r1, [r7, #8]
 800bad8:	4618      	mov	r0, r3
 800bada:	f000 f970 	bl	800bdbe <_ZN11ArduinoJson8V6213HB26detail18SizedStringAdapterIPcvE5adaptEPKcj>
 800bade:	bf00      	nop
}
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}

0800bae8 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_>:
  const char* findString(const TAdaptedString& str) const {
 800bae8:	b580      	push	{r7, lr}
 800baea:	b086      	sub	sp, #24
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
    size_t n = str.size();
 800baf2:	6838      	ldr	r0, [r7, #0]
 800baf4:	f7fd fc0a 	bl	800930c <_ZNK11ArduinoJson8V6213HB26detail14SizedRamString4sizeEv>
 800baf8:	6138      	str	r0, [r7, #16]
    for (char* next = begin_; next + n < left_; ++next) {
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	617b      	str	r3, [r7, #20]
 800bb00:	e027      	b.n	800bb52 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x6a>
      if (next[n] == '\0' && stringEquals(str, adaptString(next, n)))
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	4413      	add	r3, r2
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d112      	bne.n	800bb34 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x4c>
 800bb0e:	f107 0308 	add.w	r3, r7, #8
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	6979      	ldr	r1, [r7, #20]
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7ff ffd5 	bl	800bac6 <_ZN11ArduinoJson8V6213HB26detail11adaptStringIcEENS1_18SizedStringAdapterIPT_vE13AdaptedStringES5_j>
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	f107 0308 	add.w	r3, r7, #8
 800bb22:	cb0c      	ldmia	r3, {r2, r3}
 800bb24:	c903      	ldmia	r1, {r0, r1}
 800bb26:	f000 f959 	bl	800bddc <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d001      	beq.n	800bb34 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x4c>
 800bb30:	2301      	movs	r3, #1
 800bb32:	e000      	b.n	800bb36 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x4e>
 800bb34:	2300      	movs	r3, #0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d004      	beq.n	800bb44 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x5c>
        return next;
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	e011      	b.n	800bb62 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x7a>
        ++next;
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	3301      	adds	r3, #1
 800bb42:	617b      	str	r3, [r7, #20]
      while (*next)
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1f8      	bne.n	800bb3e <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x56>
    for (char* next = begin_; next + n < left_; ++next) {
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	617b      	str	r3, [r7, #20]
 800bb52:	697a      	ldr	r2, [r7, #20]
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	441a      	add	r2, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d3d0      	bcc.n	800bb02 <_ZNK11ArduinoJson8V6213HB26detail10MemoryPool10findStringINS1_14SizedRamStringEEEPKcRKT_+0x1a>
    return 0;
 800bb60:	2300      	movs	r3, #0
  }
 800bb62:	4618      	mov	r0, r3
 800bb64:	3718      	adds	r7, #24
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>:
typename StringAdapter<TChar*>::AdaptedString adaptString(TChar* p) {
 800bb6a:	b580      	push	{r7, lr}
 800bb6c:	b082      	sub	sp, #8
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	6078      	str	r0, [r7, #4]
  return StringAdapter<TChar*>::adapt(p);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7fd fba8 	bl	80092c8 <_ZN11ArduinoJson8V6213HB26detail13StringAdapterIPKcvE5adaptES4_>
 800bb78:	4603      	mov	r3, r0
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}

0800bb82 <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
    return;
  var->setNull();
}

template <typename TAdaptedString>
inline bool variantSetString(VariantData* var, TAdaptedString value,
 800bb82:	b580      	push	{r7, lr}
 800bb84:	b084      	sub	sp, #16
 800bb86:	af00      	add	r7, sp, #0
 800bb88:	60f8      	str	r0, [r7, #12]
 800bb8a:	60b9      	str	r1, [r7, #8]
 800bb8c:	607a      	str	r2, [r7, #4]
                             MemoryPool* pool) {
  return var != 0 ? var->setString(value, pool) : 0;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d007      	beq.n	800bba4 <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x22>
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	68b9      	ldr	r1, [r7, #8]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 f95f 	bl	800be5e <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE>
 800bba0:	4603      	mov	r3, r0
 800bba2:	e000      	b.n	800bba6 <_ZN11ArduinoJson8V6213HB26detail16variantSetStringINS1_19StaticStringAdapterEEEbPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x24>
 800bba4:	2300      	movs	r3, #0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	bf14      	ite	ne
 800bbaa:	2301      	movne	r3, #1
 800bbac:	2300      	moveq	r3, #0
 800bbae:	b2db      	uxtb	r3, r3
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3710      	adds	r7, #16
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <_ZN11ArduinoJson8V6213HB213serializeJsonINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT_>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// Produces a minified JSON document.
// https://arduinojson.org/v6/api/json/serializejson/
template <typename TDestination>
size_t serializeJson(JsonVariantConst source, TDestination& destination) {
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  using namespace detail;
  return serialize<JsonSerializer>(source, destination);
 800bbc2:	6839      	ldr	r1, [r7, #0]
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f96e 	bl	800bea6 <_ZN11ArduinoJson8V6213HB26detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>
 800bbca:	4603      	mov	r3, r0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3708      	adds	r7, #8
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvEC1Eb>:
struct Comparer<T, typename enable_if<is_integral<T>::value ||
                                      is_floating_point<T>::value>::type>
    : ComparerBase {
  T rhs;

  explicit Comparer(T value) : rhs(value) {}
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	460b      	mov	r3, r1
 800bbde:	70fb      	strb	r3, [r7, #3]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	78fa      	ldrb	r2, [r7, #3]
 800bbe4:	701a      	strb	r2, [r3, #0]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4618      	mov	r0, r3
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeES6_>:
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_SIGNED_INTEGER);
 800bc00:	210a      	movs	r1, #10
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f7fd fe8d 	bl	8009922 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asSignedInteger = value;
 800bc08:	68f9      	ldr	r1, [r7, #12]
 800bc0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc0e:	e9c1 2300 	strd	r2, r3, [r1]
  }
 800bc12:	bf00      	nop
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}

0800bc1a <_ZN11ArduinoJson8V6213HB26detail11VariantData10setIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeES6_>:
  typename enable_if<is_unsigned<T>::value>::type setInteger(T value) {
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b084      	sub	sp, #16
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	60f8      	str	r0, [r7, #12]
 800bc22:	e9c7 2300 	strd	r2, r3, [r7]
    setType(VALUE_IS_UNSIGNED_INTEGER);
 800bc26:	2108      	movs	r1, #8
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f7fd fe7a 	bl	8009922 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setTypeEh>
    content_.asUnsignedInteger = static_cast<JsonUInt>(value);
 800bc2e:	68f9      	ldr	r1, [r7, #12]
 800bc30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc34:	e9c1 2300 	strd	r2, r3, [r1]
  }
 800bc38:	bf00      	nop
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE3infEv>:

  static T nan() {
    return forge(0x7ff8000000000000);
  }

  static T inf() {
 800bc40:	b580      	push	{r7, lr}
 800bc42:	af00      	add	r7, sp, #0
    return forge(0x7ff0000000000000);
 800bc44:	f04f 0000 	mov.w	r0, #0
 800bc48:	4905      	ldr	r1, [pc, #20]	; (800bc60 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE3infEv+0x20>)
 800bc4a:	f000 f957 	bl	800befc <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE5forgeEy>
 800bc4e:	eeb0 7a40 	vmov.f32	s14, s0
 800bc52:	eef0 7a60 	vmov.f32	s15, s1
  }
 800bc56:	eeb0 0a47 	vmov.f32	s0, s14
 800bc5a:	eef0 0a67 	vmov.f32	s1, s15
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	7ff00000 	.word	0x7ff00000

0800bc64 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_>:
    return forge(0xFf7fffff);
  }
};

template <typename TFloat, typename TExponent>
inline TFloat make_float(TFloat m, TExponent e) {
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	ed87 0b02 	vstr	d0, [r7, #8]
 800bc6e:	6078      	str	r0, [r7, #4]
  using traits = FloatTraits<TFloat>;

  auto powersOfTen = e > 0 ? traits::positiveBinaryPowersOfTen()
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	dd04      	ble.n	800bc80 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x1c>
 800bc76:	f000 f955 	bl	800bf24 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	613b      	str	r3, [r7, #16]
 800bc7e:	e003      	b.n	800bc88 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x24>
                           : traits::negativeBinaryPowersOfTen();
 800bc80:	f000 f960 	bl	800bf44 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 800bc84:	4603      	mov	r3, r0
 800bc86:	613b      	str	r3, [r7, #16]
  if (e <= 0)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	dc02      	bgt.n	800bc94 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x30>
    e = TExponent(-e);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	425b      	negs	r3, r3
 800bc92:	607b      	str	r3, [r7, #4]

  for (uint8_t index = 0; e != 0; index++) {
 800bc94:	2300      	movs	r3, #0
 800bc96:	75fb      	strb	r3, [r7, #23]
 800bc98:	e01b      	b.n	800bcd2 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x6e>
    if (e & 1)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f003 0301 	and.w	r3, r3, #1
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d010      	beq.n	800bcc6 <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x62>
      m *= powersOfTen[index];
 800bca4:	7dfa      	ldrb	r2, [r7, #23]
 800bca6:	f107 0310 	add.w	r3, r7, #16
 800bcaa:	4611      	mov	r1, r2
 800bcac:	4618      	mov	r0, r3
 800bcae:	f000 f959 	bl	800bf64 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 800bcb2:	ec53 2b10 	vmov	r2, r3, d0
 800bcb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bcba:	f7f4 faf1 	bl	80002a0 <__aeabi_dmul>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    e >>= 1;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	105b      	asrs	r3, r3, #1
 800bcca:	607b      	str	r3, [r7, #4]
  for (uint8_t index = 0; e != 0; index++) {
 800bccc:	7dfb      	ldrb	r3, [r7, #23]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	75fb      	strb	r3, [r7, #23]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1e0      	bne.n	800bc9a <_ZN11ArduinoJson8V6213HB26detail10make_floatIdiEET_S3_T0_+0x36>
  }
  return m;
 800bcd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bcdc:	ec43 2b17 	vmov	d7, r2, r3
}
 800bce0:	eeb0 0a47 	vmov.f32	s0, s14
 800bce4:	eef0 0a67 	vmov.f32	s1, s15
 800bce8:	3718      	adds	r7, #24
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <_ZN11ArduinoJson8V6213HB218StaticJsonDocumentILj256EEC1Ev>:
  static const size_t capacity_ =
      detail::AddPadding<detail::Max<1, desiredCapacity>::value>::value;

 public:
  StaticJsonDocument() : JsonDocument(buffer_, capacity_) {}
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b082      	sub	sp, #8
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	3328      	adds	r3, #40	; 0x28
 800bcfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd00:	4619      	mov	r1, r3
 800bd02:	f7fd fea5 	bl	8009a50 <_ZN11ArduinoJson8V6213HB212JsonDocumentC1EPcj>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <_ZN11ArduinoJson8V6213HB215deserializeJsonIJRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEENS0_20DeserializationErrorERNS0_12JsonDocumentEDpOT_>:
ARDUINOJSON_BEGIN_PUBLIC_NAMESPACE

// Parses a JSON input, filters, and puts the result in a JsonDocument.
// https://arduinojson.org/v6/api/json/deserializejson/
template <typename... Args>
DeserializationError deserializeJson(JsonDocument& doc, Args&&... args) {
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  using namespace detail;
  return deserialize<JsonDeserializer>(doc, detail::forward<Args>(args)...);
 800bd1a:	6838      	ldr	r0, [r7, #0]
 800bd1c:	f000 f958 	bl	800bfd0 <_ZN11ArduinoJson8V6213HB26detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>
 800bd20:	4603      	mov	r3, r0
 800bd22:	4619      	mov	r1, r3
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f95e 	bl	800bfe6 <_ZN11ArduinoJson8V6213HB26detail11deserializeINS1_16JsonDeserializerERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEvEENS0_20DeserializationErrorERNS0_12JsonDocumentEOT0_DpT1_>
 800bd2a:	4603      	mov	r3, r0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <_ZN11ArduinoJson8V6213HB26detaileqIbEENS1_9enable_ifIXntsrNS1_10is_base_ofINS1_18VariantOperatorTagET_EE5valueEbE4typeENS1_11MemberProxyIRNS0_12JsonDocumentEPKcEERKS6_>:
    return compare(lhs, rhs) == COMPARE_RESULT_EQUAL;
  }
  template <typename T>
  friend
      typename enable_if<!is_base_of<VariantOperatorTag, T>::value, bool>::type
      operator==(TVariant lhs, const T& rhs) {
 800bd34:	b590      	push	{r4, r7, lr}
 800bd36:	b08b      	sub	sp, #44	; 0x2c
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	627b      	str	r3, [r7, #36]	; 0x24
 800bd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd44:	623b      	str	r3, [r7, #32]
 800bd46:	6a3b      	ldr	r3, [r7, #32]
 800bd48:	61fb      	str	r3, [r7, #28]
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	61bb      	str	r3, [r7, #24]
    return VariantAttorney::getData(derived());
 800bd4e:	69b8      	ldr	r0, [r7, #24]
 800bd50:	f000 fc5f 	bl	800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>
 800bd54:	4603      	mov	r3, r0
 800bd56:	617b      	str	r3, [r7, #20]
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	613b      	str	r3, [r7, #16]
    return variantGetMember(VariantAttorney::getData(upstream_),
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	60fb      	str	r3, [r7, #12]
    return client.getData();
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f7fd feb2 	bl	8009acc <_ZN11ArduinoJson8V6213HB212JsonDocument7getDataEv>
 800bd68:	4604      	mov	r4, r0
 800bd6a:	bf00      	nop
                            adaptString(key_));
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	685b      	ldr	r3, [r3, #4]
    return variantGetMember(VariantAttorney::getData(upstream_),
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff fefa 	bl	800bb6a <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800bd76:	4603      	mov	r3, r0
 800bd78:	4619      	mov	r1, r3
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f002 fcc5 	bl	800e70a <_ZN11ArduinoJson8V6213HB26detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>
 800bd80:	4602      	mov	r2, r0
                            adaptString(key_));
 800bd82:	bf00      	nop
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop

 private:
  FORCE_INLINE ArduinoJson::JsonVariant getVariant() const;

  FORCE_INLINE ArduinoJson::JsonVariantConst getVariantConst() const {
    return ArduinoJson::JsonVariantConst(getData());
 800bd88:	f107 0308 	add.w	r3, r7, #8
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fd fdf0 	bl	8009974 <_ZN11ArduinoJson8V6213HB216JsonVariantConstC1EPKNS0_6detail11VariantDataE>
 800bd94:	68bb      	ldr	r3, [r7, #8]
    return Converter<T>::fromJson(getVariantConst());
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fd fe1a 	bl	80099d0 <_ZN11ArduinoJson8V6213HB29ConverterINS0_16JsonVariantConstEvE8fromJsonES2_>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	bf00      	nop
    return as<T>();
 800bda0:	bf00      	nop
    return compare(lhs, rhs) == COMPARE_RESULT_EQUAL;
 800bda2:	6839      	ldr	r1, [r7, #0]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f000 f8f5 	bl	800bf94 <_ZN11ArduinoJson8V6213HB26detail7compareIbEENS1_13CompareResultENS0_16JsonVariantConstERKT_>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	2b01      	cmp	r3, #1
 800bdae:	bf0c      	ite	eq
 800bdb0:	2301      	moveq	r3, #1
 800bdb2:	2300      	movne	r3, #0
 800bdb4:	b2db      	uxtb	r3, r3
  }
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	372c      	adds	r7, #44	; 0x2c
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd90      	pop	{r4, r7, pc}

0800bdbe <_ZN11ArduinoJson8V6213HB26detail18SizedStringAdapterIPcvE5adaptEPKcj>:
template <typename TChar>
struct SizedStringAdapter<TChar*,
                          typename enable_if<IsChar<TChar>::value>::type> {
  typedef SizedRamString AdaptedString;

  static AdaptedString adapt(const TChar* p, size_t n) {
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b084      	sub	sp, #16
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	60f8      	str	r0, [r7, #12]
 800bdc6:	60b9      	str	r1, [r7, #8]
 800bdc8:	607a      	str	r2, [r7, #4]
    return AdaptedString(reinterpret_cast<const char*>(p), n);
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	68b9      	ldr	r1, [r7, #8]
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f7fd fa89 	bl	80092e6 <_ZN11ArduinoJson8V6213HB26detail14SizedRamStringC1EPKcj>
  }
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	3710      	adds	r7, #16
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
}

template <typename TAdaptedString1, typename TAdaptedString2>
typename enable_if<TAdaptedString1::typeSortKey <= TAdaptedString2::typeSortKey,
                   bool>::type
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 800bddc:	b590      	push	{r4, r7, lr}
 800bdde:	b089      	sub	sp, #36	; 0x24
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	f107 0408 	add.w	r4, r7, #8
 800bde6:	e884 0003 	stmia.w	r4, {r0, r1}
 800bdea:	4639      	mov	r1, r7
 800bdec:	e881 000c 	stmia.w	r1, {r2, r3}
  ARDUINOJSON_ASSERT(!s1.isNull());
  ARDUINOJSON_ASSERT(!s2.isNull());
  size_t size1 = s1.size();
 800bdf0:	f107 0308 	add.w	r3, r7, #8
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7fd fa89 	bl	800930c <_ZNK11ArduinoJson8V6213HB26detail14SizedRamString4sizeEv>
 800bdfa:	61b8      	str	r0, [r7, #24]
  size_t size2 = s2.size();
 800bdfc:	463b      	mov	r3, r7
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7fd fa84 	bl	800930c <_ZNK11ArduinoJson8V6213HB26detail14SizedRamString4sizeEv>
 800be04:	6178      	str	r0, [r7, #20]
  if (size1 != size2)
 800be06:	69ba      	ldr	r2, [r7, #24]
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d001      	beq.n	800be12 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x36>
    return false;
 800be0e:	2300      	movs	r3, #0
 800be10:	e021      	b.n	800be56 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x7a>
  for (size_t i = 0; i < size1; i++) {
 800be12:	2300      	movs	r3, #0
 800be14:	61fb      	str	r3, [r7, #28]
 800be16:	e019      	b.n	800be4c <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x70>
    if (s1[i] != s2[i])
 800be18:	f107 0308 	add.w	r3, r7, #8
 800be1c:	69f9      	ldr	r1, [r7, #28]
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fd fa80 	bl	8009324 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamStringixEj>
 800be24:	4603      	mov	r3, r0
 800be26:	461c      	mov	r4, r3
 800be28:	463b      	mov	r3, r7
 800be2a:	69f9      	ldr	r1, [r7, #28]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7fd fa79 	bl	8009324 <_ZNK11ArduinoJson8V6213HB26detail14SizedRamStringixEj>
 800be32:	4603      	mov	r3, r0
 800be34:	429c      	cmp	r4, r3
 800be36:	bf14      	ite	ne
 800be38:	2301      	movne	r3, #1
 800be3a:	2300      	moveq	r3, #0
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d001      	beq.n	800be46 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6a>
      return false;
 800be42:	2300      	movs	r3, #0
 800be44:	e007      	b.n	800be56 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x7a>
  for (size_t i = 0; i < size1; i++) {
 800be46:	69fb      	ldr	r3, [r7, #28]
 800be48:	3301      	adds	r3, #1
 800be4a:	61fb      	str	r3, [r7, #28]
 800be4c:	69fa      	ldr	r2, [r7, #28]
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	429a      	cmp	r2, r3
 800be52:	d3e1      	bcc.n	800be18 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_14SizedRamStringES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x3c>
  }
  return true;
 800be54:	2301      	movs	r3, #1
}
 800be56:	4618      	mov	r0, r3
 800be58:	3724      	adds	r7, #36	; 0x24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd90      	pop	{r4, r7, pc}

0800be5e <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE>:
  inline bool setString(TAdaptedString value, MemoryPool* pool) {
 800be5e:	b580      	push	{r7, lr}
 800be60:	b086      	sub	sp, #24
 800be62:	af00      	add	r7, sp, #0
 800be64:	60f8      	str	r0, [r7, #12]
 800be66:	60b9      	str	r1, [r7, #8]
 800be68:	607a      	str	r2, [r7, #4]
    if (value.isNull()) {
 800be6a:	f107 0308 	add.w	r3, r7, #8
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fd f9cf 	bl	8009212 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d004      	beq.n	800be84 <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE+0x26>
      setNull();
 800be7a:	68f8      	ldr	r0, [r7, #12]
 800be7c:	f7fd fceb 	bl	8009856 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
      return true;
 800be80:	2301      	movs	r3, #1
 800be82:	e00c      	b.n	800be9e <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringINS1_19StaticStringAdapterEEEbT_PNS1_10MemoryPoolE+0x40>
    return storeString(pool, value, VariantStringSetter(this));
 800be84:	f107 0314 	add.w	r3, r7, #20
 800be88:	68f9      	ldr	r1, [r7, #12]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7fd fd63 	bl	8009956 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterC1EPS2_>
 800be90:	697a      	ldr	r2, [r7, #20]
 800be92:	68b9      	ldr	r1, [r7, #8]
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f000 f8fd 	bl	800c094 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_T0_>
 800be9a:	4603      	mov	r3, r0
 800be9c:	bf00      	nop
  }
 800be9e:	4618      	mov	r0, r3
 800bea0:	3718      	adds	r7, #24
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <_ZN11ArduinoJson8V6213HB26detail9serializeINS1_14JsonSerializerENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEjNS0_16JsonVariantConstERT0_>:
  TSerializer<TWriter> serializer(writer);
  return variantAccept(VariantAttorney::getData(source), serializer);
}

template <template <typename> class TSerializer, typename TDestination>
size_t serialize(ArduinoJson::JsonVariantConst source,
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b084      	sub	sp, #16
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
 800beae:	6039      	str	r1, [r7, #0]
                 TDestination& destination) {
  Writer<TDestination> writer(destination);
 800beb0:	f107 030c 	add.w	r3, r7, #12
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f000 f902 	bl	800c0c0 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>
  return doSerialize<TSerializer>(source, writer);
 800bebc:	68f9      	ldr	r1, [r7, #12]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f90d 	bl	800c0de <_ZN11ArduinoJson8V6213HB26detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>
 800bec4:	4603      	mov	r3, r0
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800bece:	b580      	push	{r7, lr}
 800bed0:	b082      	sub	sp, #8
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
 800bed6:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d005      	beq.n	800beea <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x1c>
    return var->accept(visitor);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 f923 	bl	800c12c <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_>
 800bee6:	4603      	mov	r3, r0
 800bee8:	e004      	b.n	800bef4 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_+0x26>
    return visitor.visitNull();
 800beea:	6838      	ldr	r0, [r7, #0]
 800beec:	f000 f913 	bl	800c116 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800bef0:	4603      	mov	r3, r0
 800bef2:	bf00      	nop
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3708      	adds	r7, #8
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE5forgeEy>:
  static T forge(uint64_t bits) {
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	e9c7 0100 	strd	r0, r1, [r7]
    return alias_cast<T>(bits);
 800bf06:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bf0a:	f000 f9f1 	bl	800c2f0 <_ZN11ArduinoJson8V6213HB26detail10alias_castIdyEET_T0_>
 800bf0e:	eeb0 7a40 	vmov.f32	s14, s0
 800bf12:	eef0 7a60 	vmov.f32	s15, s1
  }
 800bf16:	eeb0 0a47 	vmov.f32	s0, s14
 800bf1a:	eef0 0a67 	vmov.f32	s1, s15
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>:
  static pgm_ptr<T> positiveBinaryPowersOfTen() {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b082      	sub	sp, #8
 800bf28:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800bf2a:	1d3b      	adds	r3, r7, #4
 800bf2c:	4904      	ldr	r1, [pc, #16]	; (800bf40 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv+0x1c>)
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f000 f9f4 	bl	800c31c <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>
 800bf34:	687b      	ldr	r3, [r7, #4]
  }
 800bf36:	4618      	mov	r0, r3
 800bf38:	3708      	adds	r7, #8
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	08012130 	.word	0x08012130

0800bf44 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>:
  static pgm_ptr<T> negativeBinaryPowersOfTen() {
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
    return pgm_ptr<T>(reinterpret_cast<const T*>(factors));
 800bf4a:	1d3b      	adds	r3, r7, #4
 800bf4c:	4904      	ldr	r1, [pc, #16]	; (800bf60 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv+0x1c>)
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f000 f9e4 	bl	800c31c <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>
 800bf54:	687b      	ldr	r3, [r7, #4]
  }
 800bf56:	4618      	mov	r0, r3
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	08012178 	.word	0x08012178

0800bf64 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>:
template <typename T>
class pgm_ptr {
 public:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}

  T operator[](intptr_t index) const {
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
    return pgm_read(ptr_ + index);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	00db      	lsls	r3, r3, #3
 800bf76:	4413      	add	r3, r2
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 f9de 	bl	800c33a <_ZN11ArduinoJson8V6213HB26detail8pgm_readIdEET_PKS3_>
 800bf7e:	eeb0 7a40 	vmov.f32	s14, s0
 800bf82:	eef0 7a60 	vmov.f32	s15, s1
  }
 800bf86:	eeb0 0a47 	vmov.f32	s0, s14
 800bf8a:	eef0 0a67 	vmov.f32	s1, s15
 800bf8e:	3708      	adds	r7, #8
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <_ZN11ArduinoJson8V6213HB26detail7compareIbEENS1_13CompareResultENS0_16JsonVariantConstERKT_>:
  explicit Comparer(const T& value)
      : VariantComparer(VariantAttorney::getData(value)) {}
};

template <typename T>
CompareResult compare(ArduinoJson::JsonVariantConst lhs, const T& rhs) {
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	6039      	str	r1, [r7, #0]
  Comparer<T> comparer(rhs);
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	781a      	ldrb	r2, [r3, #0]
 800bfa2:	f107 030c 	add.w	r3, r7, #12
 800bfa6:	4611      	mov	r1, r2
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7ff fe13 	bl	800bbd4 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvEC1Eb>
 800bfae:	1d3b      	adds	r3, r7, #4
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7fd fcee 	bl	8009992 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	bf00      	nop
  return variantAccept(VariantAttorney::getData(lhs), comparer);
 800bfba:	f107 030c 	add.w	r3, r7, #12
 800bfbe:	4619      	mov	r1, r3
 800bfc0:	4610      	mov	r0, r2
 800bfc2:	f7ff ff84 	bl	800bece <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_8ComparerIbvEEEENT_11result_typeEPKNS1_11VariantDataERS5_>
 800bfc6:	4603      	mov	r3, r0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <_ZN11ArduinoJson8V6213HB26detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>:
#include "type_traits.hpp"

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <class T>
T&& forward(typename remove_reference<T>::type& t) noexcept {
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  return static_cast<T&&>(t);
 800bfd8:	687b      	ldr	r3, [r7, #4]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	370c      	adds	r7, #12
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <_ZN11ArduinoJson8V6213HB26detail11deserializeINS1_16JsonDeserializerERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEJEvEENS0_20DeserializationErrorERNS0_12JsonDocumentEOT0_DpT1_>:

template <template <typename, typename> class TDeserializer, typename TStream,
          typename... Args,
          typename = typename enable_if<  // issue #1897
              !is_integral<typename first_or_void<Args...>::type>::value>::type>
DeserializationError deserialize(JsonDocument& doc, TStream&& input,
 800bfe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfe8:	b0ad      	sub	sp, #180	; 0xb4
 800bfea:	af04      	add	r7, sp, #16
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	6039      	str	r1, [r7, #0]
                                 Args... args) {
  auto reader = makeReader(detail::forward<TStream>(input));
 800bff0:	6838      	ldr	r0, [r7, #0]
 800bff2:	f7ff ffed 	bl	800bfd0 <_ZN11ArduinoJson8V6213HB26detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>
 800bff6:	4602      	mov	r2, r0
 800bff8:	f107 0310 	add.w	r3, r7, #16
 800bffc:	4611      	mov	r1, r2
 800bffe:	4618      	mov	r0, r3
 800c000:	f000 f9cc 	bl	800c39c <_ZN11ArduinoJson8V6213HB26detail10makeReaderIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOSC_>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c00a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800c00e:	f7fd fd5d 	bl	8009acc <_ZN11ArduinoJson8V6213HB212JsonDocument7getDataEv>
 800c012:	4603      	mov	r3, r0
 800c014:	bf00      	nop
  auto data = VariantAttorney::getData(doc);
 800c016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return client.getPool();
 800c020:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800c024:	f7fd fd47 	bl	8009ab6 <_ZN11ArduinoJson8V6213HB212JsonDocument7getPoolEv>
 800c028:	4603      	mov	r3, r0
 800c02a:	bf00      	nop
  auto pool = VariantAttorney::getPool(doc);
 800c02c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  auto options = makeDeserializationOptions(args...);
 800c030:	f107 0318 	add.w	r3, r7, #24
 800c034:	4618      	mov	r0, r3
 800c036:	f7fe f8fb 	bl	800a230 <_ZN11ArduinoJson8V6213HB221DeserializationOption12NestingLimitC1Ev>
 800c03a:	7e38      	ldrb	r0, [r7, #24]
 800c03c:	f7fe f93a 	bl	800a2b4 <_ZN11ArduinoJson8V6213HB26detail26makeDeserializationOptionsENS0_21DeserializationOption12NestingLimitE>
 800c040:	4603      	mov	r3, r0
 800c042:	81bb      	strh	r3, [r7, #12]
  doc.clear();
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7fd fcf2 	bl	8009a2e <_ZN11ArduinoJson8V6213HB212JsonDocument5clearEv>
  return makeDeserializer<TDeserializer>(pool, reader,
 800c04a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c04e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	4618      	mov	r0, r3
 800c056:	f000 f9b2 	bl	800c3be <_ZN11ArduinoJson8V6213HB26detail17makeStringStorageINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_12StringCopierERT_PNS1_10MemoryPoolE>
 800c05a:	f107 051c 	add.w	r5, r7, #28
 800c05e:	466c      	mov	r4, sp
 800c060:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800c064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c06a:	f107 0310 	add.w	r3, r7, #16
 800c06e:	cb0c      	ldmia	r3, {r2, r3}
 800c070:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800c074:	4628      	mov	r0, r5
 800c076:	f000 f9b0 	bl	800c3da <_ZN11ArduinoJson8V6213HB26detail16makeDeserializerINS1_16JsonDeserializerENS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEET_IT0_T1_EPNS1_10MemoryPoolESE_SF_>
                                         makeStringStorage(input, pool))
      .parse(*data, options.filter, options.nestingLimit);
 800c07a:	f107 001c 	add.w	r0, r7, #28
 800c07e:	7b7b      	ldrb	r3, [r7, #13]
 800c080:	4632      	mov	r2, r6
 800c082:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800c086:	f000 f9c0 	bl	800c40a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800c08a:	4603      	mov	r3, r0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	37a4      	adds	r7, #164	; 0xa4
 800c090:	46bd      	mov	sp, r7
 800c092:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c094 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_T0_>:
  else
    return storeString(pool, str, StringStoragePolicy::Copy(), callback);
}

template <typename TAdaptedString, typename TCallback>
bool storeString(MemoryPool* pool, TAdaptedString str, TCallback callback) {
 800c094:	b590      	push	{r4, r7, lr}
 800c096:	b085      	sub	sp, #20
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	607a      	str	r2, [r7, #4]
  return storeString(pool, str, str.storagePolicy(), callback);
 800c0a0:	f107 0308 	add.w	r3, r7, #8
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fd f904 	bl	80092b2 <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4622      	mov	r2, r4
 800c0ae:	68b9      	ldr	r1, [r7, #8]
 800c0b0:	68f8      	ldr	r0, [r7, #12]
 800c0b2:	f000 f9e6 	bl	800c482 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>
 800c0b6:	4603      	mov	r3, r0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd90      	pop	{r4, r7, pc}

0800c0c0 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERS8_>:

template <typename TDestination>
class Writer<TDestination,
             typename enable_if<is_std_string<TDestination>::value>::type> {
 public:
  Writer(TDestination& str) : str_(&str) {}
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	683a      	ldr	r2, [r7, #0]
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	370c      	adds	r7, #12
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr

0800c0de <_ZN11ArduinoJson8V6213HB26detail11doSerializeINS1_14JsonSerializerENS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEjNS0_16JsonVariantConstET0_>:
size_t doSerialize(ArduinoJson::JsonVariantConst source, TWriter writer) {
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b084      	sub	sp, #16
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
 800c0e6:	6039      	str	r1, [r7, #0]
  TSerializer<TWriter> serializer(writer);
 800c0e8:	f107 0308 	add.w	r3, r7, #8
 800c0ec:	6839      	ldr	r1, [r7, #0]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 f9f3 	bl	800c4da <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
    return client.getData();
 800c0f4:	1d3b      	adds	r3, r7, #4
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fd fc4b 	bl	8009992 <_ZNK11ArduinoJson8V6213HB216JsonVariantConst7getDataEv>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	bf00      	nop
  return variantAccept(VariantAttorney::getData(source), serializer);
 800c100:	f107 0308 	add.w	r3, r7, #8
 800c104:	4619      	mov	r1, r3
 800c106:	4610      	mov	r0, r2
 800c108:	f000 f9f6 	bl	800c4f8 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_>
 800c10c:	4603      	mov	r3, r0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3710      	adds	r7, #16
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE9visitNullEv>:

  TResult visitSignedInteger(JsonInteger) {
    return TResult();
  }

  TResult visitNull() {
 800c116:	b480      	push	{r7}
 800c118:	b083      	sub	sp, #12
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
    return TResult();
 800c11e:	2300      	movs	r3, #0
  }
 800c120:	4618      	mov	r0, r3
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr

0800c12c <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7fd fbe4 	bl	8009904 <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 800c13c:	4603      	mov	r3, r0
 800c13e:	3b02      	subs	r3, #2
 800c140:	2b3e      	cmp	r3, #62	; 0x3e
 800c142:	f200 80cc 	bhi.w	800c2de <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1b2>
 800c146:	a201      	add	r2, pc, #4	; (adr r2, 800c14c <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x20>)
 800c148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14c:	0800c291 	.word	0x0800c291
 800c150:	0800c291 	.word	0x0800c291
 800c154:	0800c27d 	.word	0x0800c27d
 800c158:	0800c27d 	.word	0x0800c27d
 800c15c:	0800c2c5 	.word	0x0800c2c5
 800c160:	0800c2df 	.word	0x0800c2df
 800c164:	0800c2b5 	.word	0x0800c2b5
 800c168:	0800c2df 	.word	0x0800c2df
 800c16c:	0800c2a5 	.word	0x0800c2a5
 800c170:	0800c2df 	.word	0x0800c2df
 800c174:	0800c249 	.word	0x0800c249
 800c178:	0800c2df 	.word	0x0800c2df
 800c17c:	0800c2df 	.word	0x0800c2df
 800c180:	0800c2df 	.word	0x0800c2df
 800c184:	0800c2df 	.word	0x0800c2df
 800c188:	0800c2df 	.word	0x0800c2df
 800c18c:	0800c2df 	.word	0x0800c2df
 800c190:	0800c2df 	.word	0x0800c2df
 800c194:	0800c2df 	.word	0x0800c2df
 800c198:	0800c2df 	.word	0x0800c2df
 800c19c:	0800c2df 	.word	0x0800c2df
 800c1a0:	0800c2df 	.word	0x0800c2df
 800c1a4:	0800c2df 	.word	0x0800c2df
 800c1a8:	0800c2df 	.word	0x0800c2df
 800c1ac:	0800c2df 	.word	0x0800c2df
 800c1b0:	0800c2df 	.word	0x0800c2df
 800c1b4:	0800c2df 	.word	0x0800c2df
 800c1b8:	0800c2df 	.word	0x0800c2df
 800c1bc:	0800c2df 	.word	0x0800c2df
 800c1c0:	0800c2df 	.word	0x0800c2df
 800c1c4:	0800c26f 	.word	0x0800c26f
 800c1c8:	0800c2df 	.word	0x0800c2df
 800c1cc:	0800c2df 	.word	0x0800c2df
 800c1d0:	0800c2df 	.word	0x0800c2df
 800c1d4:	0800c2df 	.word	0x0800c2df
 800c1d8:	0800c2df 	.word	0x0800c2df
 800c1dc:	0800c2df 	.word	0x0800c2df
 800c1e0:	0800c2df 	.word	0x0800c2df
 800c1e4:	0800c2df 	.word	0x0800c2df
 800c1e8:	0800c2df 	.word	0x0800c2df
 800c1ec:	0800c2df 	.word	0x0800c2df
 800c1f0:	0800c2df 	.word	0x0800c2df
 800c1f4:	0800c2df 	.word	0x0800c2df
 800c1f8:	0800c2df 	.word	0x0800c2df
 800c1fc:	0800c2df 	.word	0x0800c2df
 800c200:	0800c2df 	.word	0x0800c2df
 800c204:	0800c2df 	.word	0x0800c2df
 800c208:	0800c2df 	.word	0x0800c2df
 800c20c:	0800c2df 	.word	0x0800c2df
 800c210:	0800c2df 	.word	0x0800c2df
 800c214:	0800c2df 	.word	0x0800c2df
 800c218:	0800c2df 	.word	0x0800c2df
 800c21c:	0800c2df 	.word	0x0800c2df
 800c220:	0800c2df 	.word	0x0800c2df
 800c224:	0800c2df 	.word	0x0800c2df
 800c228:	0800c2df 	.word	0x0800c2df
 800c22c:	0800c2df 	.word	0x0800c2df
 800c230:	0800c2df 	.word	0x0800c2df
 800c234:	0800c2df 	.word	0x0800c2df
 800c238:	0800c2df 	.word	0x0800c2df
 800c23c:	0800c2df 	.word	0x0800c2df
 800c240:	0800c2df 	.word	0x0800c2df
 800c244:	0800c261 	.word	0x0800c261
        return visitor.visitFloat(content_.asFloat);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	ed93 7b00 	vldr	d7, [r3]
 800c24e:	eeb0 0a47 	vmov.f32	s0, s14
 800c252:	eef0 0a67 	vmov.f32	s1, s15
 800c256:	6838      	ldr	r0, [r7, #0]
 800c258:	f000 f997 	bl	800c58a <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE10visitFloatEd>
 800c25c:	4603      	mov	r3, r0
 800c25e:	e043      	b.n	800c2e8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitArray(content_.asCollection);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4619      	mov	r1, r3
 800c264:	6838      	ldr	r0, [r7, #0]
 800c266:	f000 f984 	bl	800c572 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>
 800c26a:	4603      	mov	r3, r0
 800c26c:	e03c      	b.n	800c2e8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitObject(content_.asCollection);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4619      	mov	r1, r3
 800c272:	6838      	ldr	r0, [r7, #0]
 800c274:	f000 f957 	bl	800c526 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>
 800c278:	4603      	mov	r3, r0
 800c27a:	e035      	b.n	800c2e8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitString(content_.asString.data,
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6819      	ldr	r1, [r3, #0]
                                   content_.asString.size);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(content_.asString.data,
 800c284:	461a      	mov	r2, r3
 800c286:	6838      	ldr	r0, [r7, #0]
 800c288:	f000 f959 	bl	800c53e <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>
 800c28c:	4603      	mov	r3, r0
                                   content_.asString.size);
 800c28e:	e02b      	b.n	800c2e8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitRawJson(content_.asString.data,
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6819      	ldr	r1, [r3, #0]
                                    content_.asString.size);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(content_.asString.data,
 800c298:	461a      	mov	r2, r3
 800c29a:	6838      	ldr	r0, [r7, #0]
 800c29c:	f000 f95c 	bl	800c558 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>
 800c2a0:	4603      	mov	r3, r0
                                    content_.asString.size);
 800c2a2:	e021      	b.n	800c2e8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitSignedInteger(content_.asSignedInteger);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2aa:	6838      	ldr	r0, [r7, #0]
 800c2ac:	f000 f97e 	bl	800c5ac <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE18visitSignedIntegerEx>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	e019      	b.n	800c2e8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitUnsignedInteger(content_.asUnsignedInteger);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ba:	6838      	ldr	r0, [r7, #0]
 800c2bc:	f000 f987 	bl	800c5ce <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE20visitUnsignedIntegerEy>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	e011      	b.n	800c2e8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitBoolean(content_.asBoolean != 0);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	bf14      	ite	ne
 800c2cc:	2301      	movne	r3, #1
 800c2ce:	2300      	moveq	r3, #0
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	6838      	ldr	r0, [r7, #0]
 800c2d6:	f000 f98b 	bl	800c5f0 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE12visitBooleanEb>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	e004      	b.n	800c2e8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_8ComparerIbvEEEENT_11result_typeERS6_+0x1bc>
        return visitor.visitNull();
 800c2de:	6838      	ldr	r0, [r7, #0]
 800c2e0:	f7ff ff19 	bl	800c116 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE9visitNullEv>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	bf00      	nop
  }
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <_ZN11ArduinoJson8V6213HB26detail10alias_castIdyEET_T0_>:
    T data;
  };
};

template <typename T, typename F>
T alias_cast(F raw_data) {
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	e9c7 0100 	strd	r0, r1, [r7]
  alias_cast_t<T, F> ac;
  ac.raw = raw_data;
 800c2fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ac.data;
 800c302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c306:	ec43 2b17 	vmov	d7, r2, r3
}
 800c30a:	eeb0 0a47 	vmov.f32	s0, s14
 800c30e:	eef0 0a67 	vmov.f32	s1, s15
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <_ZN11ArduinoJson8V6213HB26detail7pgm_ptrIdEC1EPKd>:
  explicit pgm_ptr(const T* ptr) : ptr_(ptr) {}
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	683a      	ldr	r2, [r7, #0]
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	4618      	mov	r0, r3
 800c330:	370c      	adds	r7, #12
 800c332:	46bd      	mov	sp, r7
 800c334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c338:	4770      	bx	lr

0800c33a <_ZN11ArduinoJson8V6213HB26detail8pgm_readIdEET_PKS3_>:
inline T pgm_read(const T* p) {
 800c33a:	b480      	push	{r7}
 800c33c:	b083      	sub	sp, #12
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
  return *p;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c348:	ec43 2b17 	vmov	d7, r2, r3
}
 800c34c:	eeb0 0a47 	vmov.f32	s0, s14
 800c350:	eef0 0a67 	vmov.f32	s1, s15
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE>:
  static void toJson(T src, JsonVariant dst) {
 800c35e:	b580      	push	{r7, lr}
 800c360:	b086      	sub	sp, #24
 800c362:	af00      	add	r7, sp, #0
 800c364:	ed87 0a03 	vstr	s0, [r7, #12]
 800c368:	1d3b      	adds	r3, r7, #4
 800c36a:	e883 0003 	stmia.w	r3, {r0, r1}
 800c36e:	1d3b      	adds	r3, r7, #4
 800c370:	613b      	str	r3, [r7, #16]
    return data_;
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	bf00      	nop
    auto data = getData(dst);
 800c378:	617b      	str	r3, [r7, #20]
    if (data)
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d009      	beq.n	800c394 <_ZN11ArduinoJson8V6213HB29ConverterIfvE6toJsonEfNS0_11JsonVariantE+0x36>
      data->setFloat(static_cast<JsonFloat>(src));
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	f7f4 fa1b 	bl	80007bc <__aeabi_f2d>
 800c386:	4602      	mov	r2, r0
 800c388:	460b      	mov	r3, r1
 800c38a:	ec43 2b10 	vmov	d0, r2, r3
 800c38e:	6978      	ldr	r0, [r7, #20]
 800c390:	f7fd fa4e 	bl	8009830 <_ZN11ArduinoJson8V6213HB26detail11VariantData8setFloatEd>
  }
 800c394:	bf00      	nop
 800c396:	3718      	adds	r7, #24
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}

0800c39c <_ZN11ArduinoJson8V6213HB26detail10makeReaderIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_6ReaderINS1_16remove_referenceIT_E4typeEvEEOSC_>:
#endif

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
Reader<typename remove_reference<TInput>::type> makeReader(TInput&& input) {
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	6039      	str	r1, [r7, #0]
  return Reader<typename remove_reference<TInput>::type>{
      detail::forward<TInput>(input)};
 800c3a6:	6838      	ldr	r0, [r7, #0]
 800c3a8:	f7ff fe12 	bl	800bfd0 <_ZN11ArduinoJson8V6213HB26detail7forwardIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNS1_16remove_referenceISA_E4typeE>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f000 f939 	bl	800c628 <_ZN11ArduinoJson8V6213HB26detail6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERKS8_>
}
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <_ZN11ArduinoJson8V6213HB26detail17makeStringStorageINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEENS1_12StringCopierERT_PNS1_10MemoryPoolE>:
#include <ArduinoJson/StringStorage/StringMover.hpp>

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TInput>
StringCopier makeStringStorage(TInput&, MemoryPool* pool) {
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b084      	sub	sp, #16
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	60f8      	str	r0, [r7, #12]
 800c3c6:	60b9      	str	r1, [r7, #8]
 800c3c8:	607a      	str	r2, [r7, #4]
  ARDUINOJSON_ASSERT(pool != 0);
  return StringCopier(pool);
 800c3ca:	6879      	ldr	r1, [r7, #4]
 800c3cc:	68f8      	ldr	r0, [r7, #12]
 800c3ce:	f7fd ff84 	bl	800a2da <_ZN11ArduinoJson8V6213HB26detail12StringCopierC1EPNS1_10MemoryPoolE>
}
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <_ZN11ArduinoJson8V6213HB26detail16makeDeserializerINS1_16JsonDeserializerENS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEET_IT0_T1_EPNS1_10MemoryPoolESE_SF_>:
TDeserializer<TReader, TWriter> makeDeserializer(MemoryPool* pool,
 800c3da:	b590      	push	{r4, r7, lr}
 800c3dc:	b089      	sub	sp, #36	; 0x24
 800c3de:	af04      	add	r7, sp, #16
 800c3e0:	60f8      	str	r0, [r7, #12]
 800c3e2:	60b9      	str	r1, [r7, #8]
 800c3e4:	4639      	mov	r1, r7
 800c3e6:	e881 000c 	stmia.w	r1, {r2, r3}
  return TDeserializer<TReader, TWriter>(pool, reader, writer);
 800c3ea:	466c      	mov	r4, sp
 800c3ec:	f107 0320 	add.w	r3, r7, #32
 800c3f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c3f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c3f6:	463b      	mov	r3, r7
 800c3f8:	cb0c      	ldmia	r3, {r2, r3}
 800c3fa:	68b9      	ldr	r1, [r7, #8]
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f000 f92b 	bl	800c658 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEC1EPNS1_10MemoryPoolESA_SB_>
}
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	3714      	adds	r7, #20
 800c406:	46bd      	mov	sp, r7
 800c408:	bd90      	pop	{r4, r7, pc}

0800c40a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError parse(VariantData& variant, TFilter filter,
 800c40a:	b590      	push	{r4, r7, lr}
 800c40c:	b089      	sub	sp, #36	; 0x24
 800c40e:	af00      	add	r7, sp, #0
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	60b9      	str	r1, [r7, #8]
 800c414:	713a      	strb	r2, [r7, #4]
 800c416:	703b      	strb	r3, [r7, #0]
    err = parseVariant(variant, filter, nestingLimit);
 800c418:	783b      	ldrb	r3, [r7, #0]
 800c41a:	4622      	mov	r2, r4
 800c41c:	68b9      	ldr	r1, [r7, #8]
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f000 f93c 	bl	800c69c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800c424:	4603      	mov	r3, r0
 800c426:	75fb      	strb	r3, [r7, #23]
    if (!err && latch_.last() != 0 && !variant.isEnclosed()) {
 800c428:	7dfb      	ldrb	r3, [r7, #23]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d112      	bne.n	800c454 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4a>
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	3314      	adds	r3, #20
 800c432:	4618      	mov	r0, r3
 800c434:	f000 fa20 	bl	800c878 <_ZNK11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4lastEv>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00a      	beq.n	800c454 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4a>
 800c43e:	68b8      	ldr	r0, [r7, #8]
 800c440:	f7fd f9d6 	bl	80097f0 <_ZNK11ArduinoJson8V6213HB26detail11VariantData10isEnclosedEv>
 800c444:	4603      	mov	r3, r0
 800c446:	f083 0301 	eor.w	r3, r3, #1
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4a>
 800c450:	2301      	movs	r3, #1
 800c452:	e000      	b.n	800c456 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
 800c454:	2300      	movs	r3, #0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d007      	beq.n	800c46a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x60>
      return DeserializationError::InvalidInput;
 800c45a:	f107 0318 	add.w	r3, r7, #24
 800c45e:	2103      	movs	r1, #3
 800c460:	4618      	mov	r0, r3
 800c462:	f7fd fe98 	bl	800a196 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1ENS1_4CodeE>
 800c466:	7e3b      	ldrb	r3, [r7, #24]
 800c468:	e007      	b.n	800c47a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE5parseINS1_14AllowAllFilterEEENS0_20DeserializationErrorERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x70>
    return err;
 800c46a:	7dfa      	ldrb	r2, [r7, #23]
 800c46c:	f107 031c 	add.w	r3, r7, #28
 800c470:	4611      	mov	r1, r2
 800c472:	4618      	mov	r0, r3
 800c474:	f7fd fe8f 	bl	800a196 <_ZN11ArduinoJson8V6213HB220DeserializationErrorC1ENS1_4CodeE>
 800c478:	7f3b      	ldrb	r3, [r7, #28]
  }
 800c47a:	4618      	mov	r0, r3
 800c47c:	3724      	adds	r7, #36	; 0x24
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd90      	pop	{r4, r7, pc}

0800c482 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_11VariantData19VariantStringSetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>:
bool storeString(MemoryPool*, TAdaptedString str, StringStoragePolicy::Link,
 800c482:	b590      	push	{r4, r7, lr}
 800c484:	b089      	sub	sp, #36	; 0x24
 800c486:	af00      	add	r7, sp, #0
 800c488:	60f8      	str	r0, [r7, #12]
 800c48a:	60b9      	str	r1, [r7, #8]
 800c48c:	713a      	strb	r2, [r7, #4]
 800c48e:	603b      	str	r3, [r7, #0]
  JsonString storedString(str.data(), str.size(), JsonString::Linked);
 800c490:	f107 0308 	add.w	r3, r7, #8
 800c494:	4618      	mov	r0, r3
 800c496:	f7fc fef1 	bl	800927c <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>
 800c49a:	4604      	mov	r4, r0
 800c49c:	f107 0308 	add.w	r3, r7, #8
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7fc fec7 	bl	8009234 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	f107 0014 	add.w	r0, r7, #20
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	4621      	mov	r1, r4
 800c4b0:	f7fc ff48 	bl	8009344 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  callback(storedString);
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	f107 0314 	add.w	r3, r7, #20
 800c4ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c4bc:	f000 f9e8 	bl	800c890 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_>
  return !str.isNull();
 800c4c0:	f107 0308 	add.w	r3, r7, #8
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fc fea4 	bl	8009212 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	f083 0301 	eor.w	r3, r3, #1
 800c4d0:	b2db      	uxtb	r3, r3
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3724      	adds	r7, #36	; 0x24
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd90      	pop	{r4, r7, pc}

0800c4da <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
  JsonSerializer(TWriter writer) : formatter_(writer) {}
 800c4da:	b580      	push	{r7, lr}
 800c4dc:	b082      	sub	sp, #8
 800c4de:	af00      	add	r7, sp, #0
 800c4e0:	6078      	str	r0, [r7, #4]
 800c4e2:	6039      	str	r1, [r7, #0]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f000 f9ef 	bl	800c8cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_>:
inline typename TVisitor::result_type variantAccept(const VariantData* var,
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  if (var != 0)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d005      	beq.n	800c514 <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_+0x1c>
    return var->accept(visitor);
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 f9ee 	bl	800c8ec <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>
 800c510:	4603      	mov	r3, r0
 800c512:	e004      	b.n	800c51e <_ZN11ArduinoJson8V6213HB26detail13variantAcceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeEPKNS1_11VariantDataERSD_+0x26>
    return visitor.visitNull();
 800c514:	6838      	ldr	r0, [r7, #0]
 800c516:	f000 faf3 	bl	800cb00 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv>
 800c51a:	4603      	mov	r3, r0
 800c51c:	bf00      	nop
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3708      	adds	r7, #8
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE11visitObjectERKNS1_14CollectionDataE>:

  TResult visitObject(const CollectionData&) {
 800c526:	b480      	push	{r7}
 800c528:	b083      	sub	sp, #12
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	6039      	str	r1, [r7, #0]
    return TResult();
 800c530:	2300      	movs	r3, #0
  }
 800c532:	4618      	mov	r0, r3
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE11visitStringEPKcj>:

  TResult visitRawJson(const char*, size_t) {
    return TResult();
  }

  TResult visitString(const char*, size_t) {
 800c53e:	b480      	push	{r7}
 800c540:	b085      	sub	sp, #20
 800c542:	af00      	add	r7, sp, #0
 800c544:	60f8      	str	r0, [r7, #12]
 800c546:	60b9      	str	r1, [r7, #8]
 800c548:	607a      	str	r2, [r7, #4]
    return TResult();
 800c54a:	2300      	movs	r3, #0
  }
 800c54c:	4618      	mov	r0, r3
 800c54e:	3714      	adds	r7, #20
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE12visitRawJsonEPKcj>:
  TResult visitRawJson(const char*, size_t) {
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
    return TResult();
 800c564:	2300      	movs	r3, #0
  }
 800c566:	4618      	mov	r0, r3
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <_ZN11ArduinoJson8V6213HB26detail7VisitorINS1_13CompareResultEE10visitArrayERKNS1_14CollectionDataE>:
  TResult visitArray(const CollectionData&) {
 800c572:	b480      	push	{r7}
 800c574:	b083      	sub	sp, #12
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
 800c57a:	6039      	str	r1, [r7, #0]
    return TResult();
 800c57c:	2300      	movs	r3, #0
  }
 800c57e:	4618      	mov	r0, r3
 800c580:	370c      	adds	r7, #12
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr

0800c58a <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE10visitFloatEd>:
  CompareResult visitFloat(JsonFloat lhs) {
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b084      	sub	sp, #16
 800c58e:	af00      	add	r7, sp, #0
 800c590:	60f8      	str	r0, [r7, #12]
 800c592:	ed87 0b00 	vstr	d0, [r7]
    return arithmeticCompare(lhs, rhs);
 800c596:	68f9      	ldr	r1, [r7, #12]
 800c598:	463b      	mov	r3, r7
 800c59a:	2200      	movs	r2, #0
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 fb2f 	bl	800cc00 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>
 800c5a2:	4603      	mov	r3, r0
  }
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE18visitSignedIntegerEx>:
  CompareResult visitSignedInteger(JsonInteger lhs) {
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 800c5b8:	68f9      	ldr	r1, [r7, #12]
 800c5ba:	463b      	mov	r3, r7
 800c5bc:	2200      	movs	r2, #0
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fb3f 	bl	800cc42 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>
 800c5c4:	4603      	mov	r3, r0
  }
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE20visitUnsignedIntegerEy>:
  CompareResult visitUnsignedInteger(JsonUInt lhs) {
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b084      	sub	sp, #16
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	60f8      	str	r0, [r7, #12]
 800c5d6:	e9c7 2300 	strd	r2, r3, [r7]
    return arithmeticCompare(lhs, rhs);
 800c5da:	68f9      	ldr	r1, [r7, #12]
 800c5dc:	463b      	mov	r3, r7
 800c5de:	2200      	movs	r2, #0
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f000 fb47 	bl	800cc74 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIybEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>
 800c5e6:	4603      	mov	r3, r0
  }
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3710      	adds	r7, #16
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE12visitBooleanEb>:
  CompareResult visitBoolean(bool lhs) {
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b082      	sub	sp, #8
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	70f9      	strb	r1, [r7, #3]
    return visitUnsignedInteger(static_cast<JsonUInt>(lhs));
 800c5fa:	78f9      	ldrb	r1, [r7, #3]
 800c5fc:	2000      	movs	r0, #0
 800c5fe:	460a      	mov	r2, r1
 800c600:	4603      	mov	r3, r0
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff ffe3 	bl	800c5ce <_ZN11ArduinoJson8V6213HB26detail8ComparerIbvE20visitUnsignedIntegerEy>
 800c608:	4603      	mov	r3, r0
  }
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <_ZNK11ArduinoJson8V6213HB26detail14VariantRefBaseINS1_11MemberProxyIRNS0_12JsonDocumentEPKcEEE7derivedEv>:
  const TDerived& derived() const {
 800c612:	b480      	push	{r7}
 800c614:	b083      	sub	sp, #12
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
    return static_cast<const TDerived&>(*this);
 800c61a:	687b      	ldr	r3, [r7, #4]
  }
 800c61c:	4618      	mov	r0, r3
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <_ZN11ArduinoJson8V6213HB26detail6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEC1ERKS8_>:
};

template <typename TSource>
struct Reader<TSource, typename void_<typename TSource::const_iterator>::type>
    : IteratorReader<typename TSource::const_iterator> {
  explicit Reader(const TSource& source)
 800c628:	b5b0      	push	{r4, r5, r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
      : IteratorReader<typename TSource::const_iterator>(source.begin(),
                                                         source.end()) {}
 800c632:	687c      	ldr	r4, [r7, #4]
 800c634:	6838      	ldr	r0, [r7, #0]
 800c636:	f002 fc45 	bl	800eec4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>
 800c63a:	4605      	mov	r5, r0
 800c63c:	6838      	ldr	r0, [r7, #0]
 800c63e:	f002 fc43 	bl	800eec8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>
 800c642:	4603      	mov	r3, r0
 800c644:	461a      	mov	r2, r3
 800c646:	4629      	mov	r1, r5
 800c648:	4620      	mov	r0, r4
 800c64a:	f000 fb2c 	bl	800cca6 <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ESD_SD_>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bdb0      	pop	{r4, r5, r7, pc}

0800c658 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEEC1EPNS1_10MemoryPoolESA_SB_>:
  JsonDeserializer(MemoryPool* pool, TReader reader,
 800c658:	b590      	push	{r4, r7, lr}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60f8      	str	r0, [r7, #12]
 800c660:	60b9      	str	r1, [r7, #8]
 800c662:	4639      	mov	r1, r7
 800c664:	e881 000c 	stmia.w	r1, {r2, r3}
      : stringStorage_(stringStorage),
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	461c      	mov	r4, r3
 800c66c:	f107 0320 	add.w	r3, r7, #32
 800c670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c672:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        foundSomething_(false),
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2200      	movs	r2, #0
 800c67a:	741a      	strb	r2, [r3, #16]
        latch_(reader),
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f103 0014 	add.w	r0, r3, #20
 800c682:	463b      	mov	r3, r7
 800c684:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c688:	f000 fb20 	bl	800cccc <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>
        pool_(pool) {}
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	621a      	str	r2, [r3, #32]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	4618      	mov	r0, r3
 800c696:	3714      	adds	r7, #20
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd90      	pop	{r4, r7, pc}

0800c69c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseVariant(
 800c69c:	b5b0      	push	{r4, r5, r7, lr}
 800c69e:	b086      	sub	sp, #24
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	713a      	strb	r2, [r7, #4]
 800c6a8:	703b      	strb	r3, [r7, #0]
    err = skipSpacesAndComments();
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f000 fb26 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	75fb      	strb	r3, [r7, #23]
    if (err)
 800c6b4:	7dfb      	ldrb	r3, [r7, #23]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d001      	beq.n	800c6be <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x22>
      return err;
 800c6ba:	7dfb      	ldrb	r3, [r7, #23]
 800c6bc:	e0d2      	b.n	800c864 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
    switch (current()) {
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f000 fb52 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b7b      	cmp	r3, #123	; 0x7b
 800c6c8:	f300 80ba 	bgt.w	800c840 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 800c6cc:	2b5b      	cmp	r3, #91	; 0x5b
 800c6ce:	da04      	bge.n	800c6da <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x3e>
 800c6d0:	2b22      	cmp	r3, #34	; 0x22
 800c6d2:	d07b      	beq.n	800c7cc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 800c6d4:	2b27      	cmp	r3, #39	; 0x27
 800c6d6:	d079      	beq.n	800c7cc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
 800c6d8:	e0b2      	b.n	800c840 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 800c6da:	3b5b      	subs	r3, #91	; 0x5b
 800c6dc:	2b20      	cmp	r3, #32
 800c6de:	f200 80af 	bhi.w	800c840 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1a4>
 800c6e2:	a201      	add	r2, pc, #4	; (adr r2, 800c6e8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>)
 800c6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e8:	0800c76d 	.word	0x0800c76d
 800c6ec:	0800c841 	.word	0x0800c841
 800c6f0:	0800c841 	.word	0x0800c841
 800c6f4:	0800c841 	.word	0x0800c841
 800c6f8:	0800c841 	.word	0x0800c841
 800c6fc:	0800c841 	.word	0x0800c841
 800c700:	0800c841 	.word	0x0800c841
 800c704:	0800c841 	.word	0x0800c841
 800c708:	0800c841 	.word	0x0800c841
 800c70c:	0800c841 	.word	0x0800c841
 800c710:	0800c841 	.word	0x0800c841
 800c714:	0800c813 	.word	0x0800c813
 800c718:	0800c841 	.word	0x0800c841
 800c71c:	0800c841 	.word	0x0800c841
 800c720:	0800c841 	.word	0x0800c841
 800c724:	0800c841 	.word	0x0800c841
 800c728:	0800c841 	.word	0x0800c841
 800c72c:	0800c841 	.word	0x0800c841
 800c730:	0800c841 	.word	0x0800c841
 800c734:	0800c835 	.word	0x0800c835
 800c738:	0800c841 	.word	0x0800c841
 800c73c:	0800c841 	.word	0x0800c841
 800c740:	0800c841 	.word	0x0800c841
 800c744:	0800c841 	.word	0x0800c841
 800c748:	0800c841 	.word	0x0800c841
 800c74c:	0800c7f1 	.word	0x0800c7f1
 800c750:	0800c841 	.word	0x0800c841
 800c754:	0800c841 	.word	0x0800c841
 800c758:	0800c841 	.word	0x0800c841
 800c75c:	0800c841 	.word	0x0800c841
 800c760:	0800c841 	.word	0x0800c841
 800c764:	0800c841 	.word	0x0800c841
 800c768:	0800c79d 	.word	0x0800c79d
        if (filter.allowArray())
 800c76c:	1d3b      	adds	r3, r7, #4
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fd fd3d 	bl	800a1ee <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowArrayEv>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00a      	beq.n	800c790 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0xf4>
          return parseArray(variant.toArray(), filter, nestingLimit);
 800c77a:	68b8      	ldr	r0, [r7, #8]
 800c77c:	f7fd f8a0 	bl	80098c0 <_ZN11ArduinoJson8V6213HB26detail11VariantData7toArrayEv>
 800c780:	4601      	mov	r1, r0
 800c782:	783b      	ldrb	r3, [r7, #0]
 800c784:	462a      	mov	r2, r5
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f000 fb05 	bl	800cd96 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>
 800c78c:	4603      	mov	r3, r0
 800c78e:	e069      	b.n	800c864 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipArray(nestingLimit);
 800c790:	7839      	ldrb	r1, [r7, #0]
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f000 fb85 	bl	800cea2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 800c798:	4603      	mov	r3, r0
 800c79a:	e063      	b.n	800c864 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowObject())
 800c79c:	1d3b      	adds	r3, r7, #4
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7fd fd30 	bl	800a204 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter11allowObjectEv>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00a      	beq.n	800c7c0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x124>
          return parseObject(variant.toObject(), filter, nestingLimit);
 800c7aa:	68b8      	ldr	r0, [r7, #8]
 800c7ac:	f7fd f899 	bl	80098e2 <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>
 800c7b0:	4601      	mov	r1, r0
 800c7b2:	783b      	ldrb	r3, [r7, #0]
 800c7b4:	4622      	mov	r2, r4
 800c7b6:	68f8      	ldr	r0, [r7, #12]
 800c7b8:	f000 fbb6 	bl	800cf28 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	e051      	b.n	800c864 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipObject(nestingLimit);
 800c7c0:	7839      	ldrb	r1, [r7, #0]
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f000 fcac 	bl	800d120 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	e04b      	b.n	800c864 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800c7cc:	1d3b      	adds	r3, r7, #4
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fd fd23 	bl	800a21a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d005      	beq.n	800c7e6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x14a>
          return parseStringValue(variant);
 800c7da:	68b9      	ldr	r1, [r7, #8]
 800c7dc:	68f8      	ldr	r0, [r7, #12]
 800c7de:	f000 fd1f 	bl	800d220 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	e03e      	b.n	800c864 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipQuotedString();
 800c7e6:	68f8      	ldr	r0, [r7, #12]
 800c7e8:	f000 fd3f 	bl	800d26a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	e039      	b.n	800c864 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800c7f0:	1d3b      	adds	r3, r7, #4
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fd fd11 	bl	800a21a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d003      	beq.n	800c806 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x16a>
          variant.setBoolean(true);
 800c7fe:	2101      	movs	r1, #1
 800c800:	68b8      	ldr	r0, [r7, #8]
 800c802:	f7fd f804 	bl	800980e <_ZN11ArduinoJson8V6213HB26detail11VariantData10setBooleanEb>
        return skipKeyword("true");
 800c806:	4919      	ldr	r1, [pc, #100]	; (800c86c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d0>)
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f000 fd63 	bl	800d2d4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800c80e:	4603      	mov	r3, r0
 800c810:	e028      	b.n	800c864 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800c812:	1d3b      	adds	r3, r7, #4
 800c814:	4618      	mov	r0, r3
 800c816:	f7fd fd00 	bl	800a21a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x18c>
          variant.setBoolean(false);
 800c820:	2100      	movs	r1, #0
 800c822:	68b8      	ldr	r0, [r7, #8]
 800c824:	f7fc fff3 	bl	800980e <_ZN11ArduinoJson8V6213HB26detail11VariantData10setBooleanEb>
        return skipKeyword("false");
 800c828:	4911      	ldr	r1, [pc, #68]	; (800c870 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d4>)
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 fd52 	bl	800d2d4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800c830:	4603      	mov	r3, r0
 800c832:	e017      	b.n	800c864 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        return skipKeyword("null");
 800c834:	490f      	ldr	r1, [pc, #60]	; (800c874 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1d8>)
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f000 fd4c 	bl	800d2d4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800c83c:	4603      	mov	r3, r0
 800c83e:	e011      	b.n	800c864 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
        if (filter.allowValue())
 800c840:	1d3b      	adds	r3, r7, #4
 800c842:	4618      	mov	r0, r3
 800c844:	f7fd fce9 	bl	800a21a <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter10allowValueEv>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d005      	beq.n	800c85a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
          return parseNumericValue(variant);
 800c84e:	68b9      	ldr	r1, [r7, #8]
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f000 fd65 	bl	800d320 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE>
 800c856:	4603      	mov	r3, r0
 800c858:	e004      	b.n	800c864 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE+0x1c8>
          return skipNumericValue();
 800c85a:	68f8      	ldr	r0, [r7, #12]
 800c85c:	f000 fda6 	bl	800d3ac <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv>
 800c860:	4603      	mov	r3, r0
 800c862:	bf00      	nop
  }
 800c864:	4618      	mov	r0, r3
 800c866:	3718      	adds	r7, #24
 800c868:	46bd      	mov	sp, r7
 800c86a:	bdb0      	pop	{r4, r5, r7, pc}
 800c86c:	08012100 	.word	0x08012100
 800c870:	08012108 	.word	0x08012108
 800c874:	08012110 	.word	0x08012110

0800c878 <_ZNK11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4lastEv>:

  void clear() {
    loaded_ = false;
  }

  int last() const {
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
    return current_;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	7a1b      	ldrb	r3, [r3, #8]
  }
 800c884:	4618      	mov	r0, r3
 800c886:	370c      	adds	r7, #12
 800c888:	46bd      	mov	sp, r7
 800c88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88e:	4770      	bx	lr

0800c890 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_>:

    template <typename TStoredString>
    void operator()(TStoredString s) {
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	60f8      	str	r0, [r7, #12]
 800c898:	4638      	mov	r0, r7
 800c89a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
      if (s)
 800c89e:	463b      	mov	r3, r7
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7fc fd8f 	bl	80093c4 <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d006      	beq.n	800c8ba <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_+0x2a>
        instance_->setString(s);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6818      	ldr	r0, [r3, #0]
 800c8b0:	463b      	mov	r3, r7
 800c8b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c8b4:	f7fc ffdb 	bl	800986e <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>
      else
        instance_->setNull();
    }
 800c8b8:	e004      	b.n	800c8c4 <_ZN11ArduinoJson8V6213HB26detail11VariantData19VariantStringSetterclINS0_10JsonStringEEEvT_+0x34>
        instance_->setNull();
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fc ffc9 	bl	8009856 <_ZN11ArduinoJson8V6213HB26detail11VariantData7setNullEv>
    }
 800c8c4:	bf00      	nop
 800c8c6:	3710      	adds	r7, #16
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter writer) : writer_(writer) {}
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	463a      	mov	r2, r7
 800c8da:	4611      	mov	r1, r2
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f000 feab 	bl	800d638 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3708      	adds	r7, #8
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>:
  typename TVisitor::result_type accept(TVisitor& visitor) const {
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
    switch (type()) {
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7fd f804 	bl	8009904 <_ZNK11ArduinoJson8V6213HB26detail11VariantData4typeEv>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	3b02      	subs	r3, #2
 800c900:	2b3e      	cmp	r3, #62	; 0x3e
 800c902:	f200 80f4 	bhi.w	800caee <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x202>
 800c906:	a201      	add	r2, pc, #4	; (adr r2, 800c90c <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20>)
 800c908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c90c:	0800caa1 	.word	0x0800caa1
 800c910:	0800caa1 	.word	0x0800caa1
 800c914:	0800ca8d 	.word	0x0800ca8d
 800c918:	0800ca8d 	.word	0x0800ca8d
 800c91c:	0800cad5 	.word	0x0800cad5
 800c920:	0800caef 	.word	0x0800caef
 800c924:	0800cac5 	.word	0x0800cac5
 800c928:	0800caef 	.word	0x0800caef
 800c92c:	0800cab5 	.word	0x0800cab5
 800c930:	0800caef 	.word	0x0800caef
 800c934:	0800ca09 	.word	0x0800ca09
 800c938:	0800caef 	.word	0x0800caef
 800c93c:	0800caef 	.word	0x0800caef
 800c940:	0800caef 	.word	0x0800caef
 800c944:	0800caef 	.word	0x0800caef
 800c948:	0800caef 	.word	0x0800caef
 800c94c:	0800caef 	.word	0x0800caef
 800c950:	0800caef 	.word	0x0800caef
 800c954:	0800caef 	.word	0x0800caef
 800c958:	0800caef 	.word	0x0800caef
 800c95c:	0800caef 	.word	0x0800caef
 800c960:	0800caef 	.word	0x0800caef
 800c964:	0800caef 	.word	0x0800caef
 800c968:	0800caef 	.word	0x0800caef
 800c96c:	0800caef 	.word	0x0800caef
 800c970:	0800caef 	.word	0x0800caef
 800c974:	0800caef 	.word	0x0800caef
 800c978:	0800caef 	.word	0x0800caef
 800c97c:	0800caef 	.word	0x0800caef
 800c980:	0800caef 	.word	0x0800caef
 800c984:	0800ca7f 	.word	0x0800ca7f
 800c988:	0800caef 	.word	0x0800caef
 800c98c:	0800caef 	.word	0x0800caef
 800c990:	0800caef 	.word	0x0800caef
 800c994:	0800caef 	.word	0x0800caef
 800c998:	0800caef 	.word	0x0800caef
 800c99c:	0800caef 	.word	0x0800caef
 800c9a0:	0800caef 	.word	0x0800caef
 800c9a4:	0800caef 	.word	0x0800caef
 800c9a8:	0800caef 	.word	0x0800caef
 800c9ac:	0800caef 	.word	0x0800caef
 800c9b0:	0800caef 	.word	0x0800caef
 800c9b4:	0800caef 	.word	0x0800caef
 800c9b8:	0800caef 	.word	0x0800caef
 800c9bc:	0800caef 	.word	0x0800caef
 800c9c0:	0800caef 	.word	0x0800caef
 800c9c4:	0800caef 	.word	0x0800caef
 800c9c8:	0800caef 	.word	0x0800caef
 800c9cc:	0800caef 	.word	0x0800caef
 800c9d0:	0800caef 	.word	0x0800caef
 800c9d4:	0800caef 	.word	0x0800caef
 800c9d8:	0800caef 	.word	0x0800caef
 800c9dc:	0800caef 	.word	0x0800caef
 800c9e0:	0800caef 	.word	0x0800caef
 800c9e4:	0800caef 	.word	0x0800caef
 800c9e8:	0800caef 	.word	0x0800caef
 800c9ec:	0800caef 	.word	0x0800caef
 800c9f0:	0800caef 	.word	0x0800caef
 800c9f4:	0800caef 	.word	0x0800caef
 800c9f8:	0800caef 	.word	0x0800caef
 800c9fc:	0800caef 	.word	0x0800caef
 800ca00:	0800caef 	.word	0x0800caef
 800ca04:	0800ca21 	.word	0x0800ca21
        return visitor.visitFloat(content_.asFloat);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	ed93 7b00 	vldr	d7, [r3]
 800ca0e:	eeb0 0a47 	vmov.f32	s0, s14
 800ca12:	eef0 0a67 	vmov.f32	s1, s15
 800ca16:	6838      	ldr	r0, [r7, #0]
 800ca18:	f000 fe21 	bl	800d65e <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10visitFloatEd>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	e06b      	b.n	800caf8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitArray(content_.asCollection);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	683a      	ldr	r2, [r7, #0]
 800ca24:	617a      	str	r2, [r7, #20]
 800ca26:	613b      	str	r3, [r7, #16]
    write('[');
 800ca28:	215b      	movs	r1, #91	; 0x5b
 800ca2a:	6978      	ldr	r0, [r7, #20]
 800ca2c:	f001 fa0c 	bl	800de48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    const VariantSlot* slot = array.head();
 800ca30:	6938      	ldr	r0, [r7, #16]
 800ca32:	f7fc fcd8 	bl	80093e6 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>
 800ca36:	60f8      	str	r0, [r7, #12]
    while (slot != 0) {
 800ca38:	e012      	b.n	800ca60 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x174>
      slot->data()->accept(*this);
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	f7fc fcea 	bl	8009414 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800ca40:	4603      	mov	r3, r0
 800ca42:	6979      	ldr	r1, [r7, #20]
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7ff ff51 	bl	800c8ec <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>
      slot = slot->next();
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7fc fd04 	bl	8009458 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800ca50:	60f8      	str	r0, [r7, #12]
      if (slot == 0)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d007      	beq.n	800ca68 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x17c>
      write(',');
 800ca58:	212c      	movs	r1, #44	; 0x2c
 800ca5a:	6978      	ldr	r0, [r7, #20]
 800ca5c:	f001 f9f4 	bl	800de48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slot != 0) {
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e9      	bne.n	800ca3a <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x14e>
 800ca66:	e000      	b.n	800ca6a <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x17e>
        break;
 800ca68:	bf00      	nop
    write(']');
 800ca6a:	215d      	movs	r1, #93	; 0x5d
 800ca6c:	6978      	ldr	r0, [r7, #20]
 800ca6e:	f001 f9eb 	bl	800de48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 800ca72:	6978      	ldr	r0, [r7, #20]
 800ca74:	f000 febd 	bl	800d7f2 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	bf00      	nop
 800ca7c:	e03c      	b.n	800caf8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitObject(content_.asCollection);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	4619      	mov	r1, r3
 800ca82:	6838      	ldr	r0, [r7, #0]
 800ca84:	f000 fdff 	bl	800d686 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	e035      	b.n	800caf8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitString(content_.asString.data,
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	6819      	ldr	r1, [r3, #0]
                                   content_.asString.size);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	685b      	ldr	r3, [r3, #4]
        return visitor.visitString(content_.asString.data,
 800ca94:	461a      	mov	r2, r3
 800ca96:	6838      	ldr	r0, [r7, #0]
 800ca98:	f000 fe34 	bl	800d704 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitStringEPKcj>
 800ca9c:	4603      	mov	r3, r0
                                   content_.asString.size);
 800ca9e:	e02b      	b.n	800caf8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitRawJson(content_.asString.data,
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6819      	ldr	r1, [r3, #0]
                                    content_.asString.size);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	685b      	ldr	r3, [r3, #4]
        return visitor.visitRawJson(content_.asString.data,
 800caa8:	461a      	mov	r2, r3
 800caaa:	6838      	ldr	r0, [r7, #0]
 800caac:	f000 fe3e 	bl	800d72c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitRawJsonEPKcj>
 800cab0:	4603      	mov	r3, r0
                                    content_.asString.size);
 800cab2:	e021      	b.n	800caf8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitSignedInteger(content_.asSignedInteger);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caba:	6838      	ldr	r0, [r7, #0]
 800cabc:	f000 fe4a 	bl	800d754 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE18visitSignedIntegerEx>
 800cac0:	4603      	mov	r3, r0
 800cac2:	e019      	b.n	800caf8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitUnsignedInteger(content_.asUnsignedInteger);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caca:	6838      	ldr	r0, [r7, #0]
 800cacc:	f000 fe56 	bl	800d77c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE20visitUnsignedIntegerEy>
 800cad0:	4603      	mov	r3, r0
 800cad2:	e011      	b.n	800caf8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitBoolean(content_.asBoolean != 0);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	bf14      	ite	ne
 800cadc:	2301      	movne	r3, #1
 800cade:	2300      	moveq	r3, #0
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	4619      	mov	r1, r3
 800cae4:	6838      	ldr	r0, [r7, #0]
 800cae6:	f000 fe5d 	bl	800d7a4 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitBooleanEb>
 800caea:	4603      	mov	r3, r0
 800caec:	e004      	b.n	800caf8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_+0x20c>
        return visitor.visitNull();
 800caee:	6838      	ldr	r0, [r7, #0]
 800caf0:	f000 f806 	bl	800cb00 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv>
 800caf4:	4603      	mov	r3, r0
 800caf6:	bf00      	nop
  }
 800caf8:	4618      	mov	r0, r3
 800cafa:	3718      	adds	r7, #24
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv>:
  size_t visitNull() {
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
    formatter_.writeRaw("null");
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	4906      	ldr	r1, [pc, #24]	; (800cb24 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9visitNullEv+0x24>)
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	f000 fe5d 	bl	800d7cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
    return bytesWritten();
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 fe6d 	bl	800d7f2 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800cb18:	4603      	mov	r3, r0
  }
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	08012110 	.word	0x08012110

0800cb28 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>:
  COMPARE_RESULT_GREATER_OR_EQUAL = 3,
  COMPARE_RESULT_LESS_OR_EQUAL = 5
};

template <typename T>
CompareResult arithmeticCompare(const T& lhs, const T& rhs) {
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  if (lhs < rhs)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3e:	f7f3 fef5 	bl	800092c <__aeabi_dcmplt>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d001      	beq.n	800cb4c <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x24>
    return COMPARE_RESULT_LESS;
 800cb48:	2304      	movs	r3, #4
 800cb4a:	e00d      	b.n	800cb68 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x40>
  else if (lhs > rhs)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb58:	f7f3 ff06 	bl	8000968 <__aeabi_dcmpgt>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x3e>
    return COMPARE_RESULT_GREATER;
 800cb62:	2302      	movs	r3, #2
 800cb64:	e000      	b.n	800cb68 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_+0x40>
  else
    return COMPARE_RESULT_EQUAL;
 800cb66:	2301      	movs	r3, #1
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_>:
CompareResult arithmeticCompare(const T& lhs, const T& rhs) {
 800cb70:	b480      	push	{r7}
 800cb72:	b083      	sub	sp, #12
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
  if (lhs < rhs)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb86:	4290      	cmp	r0, r2
 800cb88:	eb71 0303 	sbcs.w	r3, r1, r3
 800cb8c:	da01      	bge.n	800cb92 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x22>
    return COMPARE_RESULT_LESS;
 800cb8e:	2304      	movs	r3, #4
 800cb90:	e00c      	b.n	800cbac <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x3c>
  else if (lhs > rhs)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb98:	6839      	ldr	r1, [r7, #0]
 800cb9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb9e:	4290      	cmp	r0, r2
 800cba0:	eb71 0303 	sbcs.w	r3, r1, r3
 800cba4:	da01      	bge.n	800cbaa <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x3a>
    return COMPARE_RESULT_GREATER;
 800cba6:	2302      	movs	r3, #2
 800cba8:	e000      	b.n	800cbac <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_+0x3c>
    return COMPARE_RESULT_EQUAL;
 800cbaa:	2301      	movs	r3, #1
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_>:
CompareResult arithmeticCompare(const T& lhs, const T& rhs) {
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
  if (lhs < rhs)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbce:	4290      	cmp	r0, r2
 800cbd0:	eb71 0303 	sbcs.w	r3, r1, r3
 800cbd4:	d201      	bcs.n	800cbda <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x22>
    return COMPARE_RESULT_LESS;
 800cbd6:	2304      	movs	r3, #4
 800cbd8:	e00c      	b.n	800cbf4 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x3c>
  else if (lhs > rhs)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe0:	6839      	ldr	r1, [r7, #0]
 800cbe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbe6:	4290      	cmp	r0, r2
 800cbe8:	eb71 0303 	sbcs.w	r3, r1, r3
 800cbec:	d201      	bcs.n	800cbf2 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x3a>
    return COMPARE_RESULT_GREATER;
 800cbee:	2302      	movs	r3, #2
 800cbf0:	e000      	b.n	800cbf4 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_+0x3c>
    return COMPARE_RESULT_EQUAL;
 800cbf2:	2301      	movs	r3, #1
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	370c      	adds	r7, #12
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXoosrNS1_17is_floating_pointIS4_EE5valuesrNSB_IS7_EE5valueEvE4typeE>:
    return COMPARE_RESULT_LESS;
  return arithmeticCompare<T2>(static_cast<T2>(lhs), rhs);
}

template <typename T1, typename T2>
CompareResult arithmeticCompare(
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b088      	sub	sp, #32
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	60f8      	str	r0, [r7, #12]
 800cc08:	60b9      	str	r1, [r7, #8]
 800cc0a:	607a      	str	r2, [r7, #4]
    const T1& lhs, const T2& rhs,
    typename enable_if<is_floating_point<T1>::value ||
                       is_floating_point<T2>::value>::type* = 0) {
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc12:	e9c7 2304 	strd	r2, r3, [r7, #16]
                                   static_cast<double>(rhs));
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7f3 fdac 	bl	8000778 <__aeabi_ui2d>
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return arithmeticCompare<double>(static_cast<double>(lhs),
 800cc28:	f107 0218 	add.w	r2, r7, #24
 800cc2c:	f107 0310 	add.w	r3, r7, #16
 800cc30:	4611      	mov	r1, r2
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7ff ff78 	bl	800cb28 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIdEENS1_13CompareResultERKT_S6_>
 800cc38:	4603      	mov	r3, r0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3720      	adds	r7, #32
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxbEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>:
CompareResult arithmeticCompare(
 800cc42:	b5b0      	push	{r4, r5, r7, lr}
 800cc44:	b086      	sub	sp, #24
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	60f8      	str	r0, [r7, #12]
 800cc4a:	60b9      	str	r1, [r7, #8]
 800cc4c:	607a      	str	r2, [r7, #4]
  return arithmeticCompare<T1>(lhs, static_cast<T1>(rhs));
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	2200      	movs	r2, #0
 800cc56:	461c      	mov	r4, r3
 800cc58:	4615      	mov	r5, r2
 800cc5a:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800cc5e:	f107 0310 	add.w	r3, r7, #16
 800cc62:	4619      	mov	r1, r3
 800cc64:	68f8      	ldr	r0, [r7, #12]
 800cc66:	f7ff ff83 	bl	800cb70 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIxEENS1_13CompareResultERKT_S6_>
 800cc6a:	4603      	mov	r3, r0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bdb0      	pop	{r4, r5, r7, pc}

0800cc74 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIybEENS1_13CompareResultERKT_RKT0_PNS1_9enable_ifIXaaaasrNS1_11is_integralIS4_EE5valuesrNSB_IS7_EE5valueltstS7_stS4_EvE4typeE>:
CompareResult arithmeticCompare(
 800cc74:	b5b0      	push	{r4, r5, r7, lr}
 800cc76:	b086      	sub	sp, #24
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	60f8      	str	r0, [r7, #12]
 800cc7c:	60b9      	str	r1, [r7, #8]
 800cc7e:	607a      	str	r2, [r7, #4]
  return arithmeticCompare<T1>(lhs, static_cast<T1>(rhs));
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2200      	movs	r2, #0
 800cc88:	461c      	mov	r4, r3
 800cc8a:	4615      	mov	r5, r2
 800cc8c:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800cc90:	f107 0310 	add.w	r3, r7, #16
 800cc94:	4619      	mov	r1, r3
 800cc96:	68f8      	ldr	r0, [r7, #12]
 800cc98:	f7ff ff8e 	bl	800cbb8 <_ZN11ArduinoJson8V6213HB26detail17arithmeticCompareIyEENS1_13CompareResultERKT_S6_>
 800cc9c:	4603      	mov	r3, r0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3718      	adds	r7, #24
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bdb0      	pop	{r4, r5, r7, pc}

0800cca6 <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC1ESD_SD_>:
  explicit IteratorReader(TIterator begin, TIterator end)
 800cca6:	b480      	push	{r7}
 800cca8:	b085      	sub	sp, #20
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	60f8      	str	r0, [r7, #12]
 800ccae:	60b9      	str	r1, [r7, #8]
 800ccb0:	607a      	str	r2, [r7, #4]
      : ptr_(begin), end_(end) {}
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	68ba      	ldr	r2, [r7, #8]
 800ccb6:	601a      	str	r2, [r3, #0]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	605a      	str	r2, [r3, #4]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3714      	adds	r7, #20
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ESA_>:
  Latch(TReader reader) : reader_(reader), loaded_(false) {
 800cccc:	b480      	push	{r7}
 800ccce:	b085      	sub	sp, #20
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	1d3b      	adds	r3, r7, #4
 800ccd6:	e883 0006 	stmia.w	r3, {r1, r2}
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	1d3b      	adds	r3, r7, #4
 800cce0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cce4:	e882 0003 	stmia.w	r2, {r0, r1}
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	725a      	strb	r2, [r3, #9]
  }
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>:
  DeserializationError::Code skipSpacesAndComments() {
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
      switch (current()) {
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 f82f 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d013      	beq.n	800cd38 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x3c>
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	db1d      	blt.n	800cd50 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
 800cd14:	2b20      	cmp	r3, #32
 800cd16:	dc1b      	bgt.n	800cd50 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
 800cd18:	2b09      	cmp	r3, #9
 800cd1a:	db19      	blt.n	800cd50 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
 800cd1c:	3b09      	subs	r3, #9
 800cd1e:	4a11      	ldr	r2, [pc, #68]	; (800cd64 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x68>)
 800cd20:	fa22 f303 	lsr.w	r3, r2, r3
 800cd24:	f003 0301 	and.w	r3, r3, #1
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	bf14      	ite	ne
 800cd2c:	2301      	movne	r3, #1
 800cd2e:	2300      	moveq	r3, #0
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d108      	bne.n	800cd48 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x4c>
 800cd36:	e00b      	b.n	800cd50 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x54>
          return foundSomething_ ? DeserializationError::IncompleteInput
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	7c1b      	ldrb	r3, [r3, #16]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d001      	beq.n	800cd44 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x48>
 800cd40:	2302      	movs	r3, #2
                                 : DeserializationError::EmptyInput;
 800cd42:	e00b      	b.n	800cd5c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
          return foundSomething_ ? DeserializationError::IncompleteInput
 800cd44:	2301      	movs	r3, #1
                                 : DeserializationError::EmptyInput;
 800cd46:	e009      	b.n	800cd5c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
          move();
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f000 fd6f 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
          continue;
 800cd4e:	e004      	b.n	800cd5a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x5e>
          foundSomething_ = true;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2201      	movs	r2, #1
 800cd54:	741a      	strb	r2, [r3, #16]
          return DeserializationError::Ok;
 800cd56:	2300      	movs	r3, #0
 800cd58:	e000      	b.n	800cd5c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x60>
      switch (current()) {
 800cd5a:	e7d3      	b.n	800cd04 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv+0x8>
  }
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	00800013 	.word	0x00800013

0800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>:
  char current() {
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
    return latch_.current();
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3314      	adds	r3, #20
 800cd74:	60fb      	str	r3, [r7, #12]

  FORCE_INLINE char current() {
    if (!loaded_) {
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	7a5b      	ldrb	r3, [r3, #9]
 800cd7a:	f083 0301 	eor.w	r3, r3, #1
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d002      	beq.n	800cd8a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv+0x22>
      load();
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f001 f97c 	bl	800e082 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4loadEv>
    }
    return current_;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	7a1b      	ldrb	r3, [r3, #8]
  }
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3710      	adds	r7, #16
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}

0800cd96 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseArray(
 800cd96:	b590      	push	{r4, r7, lr}
 800cd98:	b089      	sub	sp, #36	; 0x24
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	60f8      	str	r0, [r7, #12]
 800cd9e:	60b9      	str	r1, [r7, #8]
 800cda0:	713a      	strb	r2, [r7, #4]
 800cda2:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800cda4:	463b      	mov	r3, r7
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7fd fa73 	bl	800a292 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d001      	beq.n	800cdb6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 800cdb2:	2305      	movs	r3, #5
 800cdb4:	e071      	b.n	800ce9a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    move();
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f000 fd38 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    err = skipSpacesAndComments();
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f7ff ff9d 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	77fb      	strb	r3, [r7, #31]
    if (err)
 800cdc6:	7ffb      	ldrb	r3, [r7, #31]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d001      	beq.n	800cdd0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x3a>
      return err;
 800cdcc:	7ffb      	ldrb	r3, [r7, #31]
 800cdce:	e064      	b.n	800ce9a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    if (eat(']'))
 800cdd0:	215d      	movs	r1, #93	; 0x5d
 800cdd2:	68f8      	ldr	r0, [r7, #12]
 800cdd4:	f000 fd37 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d001      	beq.n	800cde2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x4c>
      return DeserializationError::Ok;
 800cdde:	2300      	movs	r3, #0
 800cde0:	e05b      	b.n	800ce9a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
    TFilter memberFilter = filter[0UL];
 800cde2:	2300      	movs	r3, #0
 800cde4:	617b      	str	r3, [r7, #20]
 800cde6:	f107 0214 	add.w	r2, r7, #20
 800cdea:	1d3b      	adds	r3, r7, #4
 800cdec:	4611      	mov	r1, r2
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 fd46 	bl	800d880 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilterixImEES2_RKT_>
      if (memberFilter.allow()) {
 800cdf4:	f107 0310 	add.w	r3, r7, #16
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7fd f9ed 	bl	800a1d8 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter5allowEv>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d01c      	beq.n	800ce3e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xa8>
        VariantData* value = array.addElement(pool_);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6a1b      	ldr	r3, [r3, #32]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	68b8      	ldr	r0, [r7, #8]
 800ce0c:	f7fc fea0 	bl	8009b50 <_ZN11ArduinoJson8V6213HB26detail14CollectionData10addElementEPNS1_10MemoryPoolE>
 800ce10:	61b8      	str	r0, [r7, #24]
        if (!value)
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d101      	bne.n	800ce1c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
          return DeserializationError::NoMemory;
 800ce18:	2304      	movs	r3, #4
 800ce1a:	e03e      	b.n	800ce9a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = parseVariant(*value, memberFilter, nestingLimit.decrement());
 800ce1c:	463b      	mov	r3, r7
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fd fa24 	bl	800a26c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 800ce24:	4603      	mov	r3, r0
 800ce26:	4622      	mov	r2, r4
 800ce28:	69b9      	ldr	r1, [r7, #24]
 800ce2a:	68f8      	ldr	r0, [r7, #12]
 800ce2c:	f7ff fc36 	bl	800c69c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800ce30:	4603      	mov	r3, r0
 800ce32:	77fb      	strb	r3, [r7, #31]
        if (err)
 800ce34:	7ffb      	ldrb	r3, [r7, #31]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d011      	beq.n	800ce5e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800ce3a:	7ffb      	ldrb	r3, [r7, #31]
 800ce3c:	e02d      	b.n	800ce9a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
        err = skipVariant(nestingLimit.decrement());
 800ce3e:	463b      	mov	r3, r7
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7fd fa13 	bl	800a26c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 800ce46:	4603      	mov	r3, r0
 800ce48:	4619      	mov	r1, r3
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f000 fd24 	bl	800d898 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800ce50:	4603      	mov	r3, r0
 800ce52:	77fb      	strb	r3, [r7, #31]
        if (err)
 800ce54:	7ffb      	ldrb	r3, [r7, #31]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d001      	beq.n	800ce5e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xc8>
          return err;
 800ce5a:	7ffb      	ldrb	r3, [r7, #31]
 800ce5c:	e01d      	b.n	800ce9a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      err = skipSpacesAndComments();
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f7ff ff4c 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800ce64:	4603      	mov	r3, r0
 800ce66:	77fb      	strb	r3, [r7, #31]
      if (err)
 800ce68:	7ffb      	ldrb	r3, [r7, #31]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d001      	beq.n	800ce72 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xdc>
        return err;
 800ce6e:	7ffb      	ldrb	r3, [r7, #31]
 800ce70:	e013      	b.n	800ce9a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (eat(']'))
 800ce72:	215d      	movs	r1, #93	; 0x5d
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	f000 fce6 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d001      	beq.n	800ce84 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0xee>
        return DeserializationError::Ok;
 800ce80:	2300      	movs	r3, #0
 800ce82:	e00a      	b.n	800ce9a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x104>
      if (!eat(','))
 800ce84:	212c      	movs	r1, #44	; 0x2c
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f000 fcdd 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	f083 0301 	eor.w	r3, r3, #1
 800ce92:	b2db      	uxtb	r3, r3
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d0ad      	beq.n	800cdf4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10parseArrayINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x5e>
        return DeserializationError::InvalidInput;
 800ce98:	2303      	movs	r3, #3
  }
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3724      	adds	r7, #36	; 0x24
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd90      	pop	{r4, r7, pc}

0800cea2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipArray(
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b084      	sub	sp, #16
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
 800ceaa:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 800ceac:	463b      	mov	r3, r7
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7fd f9ef 	bl	800a292 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d001      	beq.n	800cebe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 800ceba:	2305      	movs	r3, #5
 800cebc:	e030      	b.n	800cf20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
    move();
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 fcb4 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      err = skipVariant(nestingLimit.decrement());
 800cec4:	463b      	mov	r3, r7
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fd f9d0 	bl	800a26c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 800cecc:	4603      	mov	r3, r0
 800cece:	4619      	mov	r1, r3
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 fce1 	bl	800d898 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800ced6:	4603      	mov	r3, r0
 800ced8:	73fb      	strb	r3, [r7, #15]
      if (err)
 800ceda:	7bfb      	ldrb	r3, [r7, #15]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d001      	beq.n	800cee4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x42>
        return err;
 800cee0:	7bfb      	ldrb	r3, [r7, #15]
 800cee2:	e01d      	b.n	800cf20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      err = skipSpacesAndComments();
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f7ff ff09 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800ceea:	4603      	mov	r3, r0
 800ceec:	73fb      	strb	r3, [r7, #15]
      if (err)
 800ceee:	7bfb      	ldrb	r3, [r7, #15]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d001      	beq.n	800cef8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x56>
        return err;
 800cef4:	7bfb      	ldrb	r3, [r7, #15]
 800cef6:	e013      	b.n	800cf20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (eat(']'))
 800cef8:	215d      	movs	r1, #93	; 0x5d
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 fca3 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d001      	beq.n	800cf0a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x68>
        return DeserializationError::Ok;
 800cf06:	2300      	movs	r3, #0
 800cf08:	e00a      	b.n	800cf20 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x7e>
      if (!eat(','))
 800cf0a:	212c      	movs	r1, #44	; 0x2c
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 fc9a 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800cf12:	4603      	mov	r3, r0
 800cf14:	f083 0301 	eor.w	r3, r3, #1
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d0d2      	beq.n	800cec4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE+0x22>
        return DeserializationError::InvalidInput;
 800cf1e:	2303      	movs	r3, #3
  }
 800cf20:	4618      	mov	r0, r3
 800cf22:	3710      	adds	r7, #16
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code parseObject(
 800cf28:	b590      	push	{r4, r7, lr}
 800cf2a:	b091      	sub	sp, #68	; 0x44
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	713a      	strb	r2, [r7, #4]
 800cf34:	703b      	strb	r3, [r7, #0]
    if (nestingLimit.reached())
 800cf36:	463b      	mov	r3, r7
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7fd f9aa 	bl	800a292 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d001      	beq.n	800cf48 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x20>
      return DeserializationError::TooDeep;
 800cf44:	2305      	movs	r3, #5
 800cf46:	e0e7      	b.n	800d118 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
    move();
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f000 fc6f 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    err = skipSpacesAndComments();
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	f7ff fed4 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800cf54:	4603      	mov	r3, r0
 800cf56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (err)
 800cf5a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d002      	beq.n	800cf68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x40>
      return err;
 800cf62:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf66:	e0d7      	b.n	800d118 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
    if (eat('}'))
 800cf68:	217d      	movs	r1, #125	; 0x7d
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	f000 fc6b 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800cf70:	4603      	mov	r3, r0
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
      return DeserializationError::Ok;
 800cf76:	2300      	movs	r3, #0
 800cf78:	e0ce      	b.n	800d118 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = parseKey();
 800cf7a:	68f8      	ldr	r0, [r7, #12]
 800cf7c:	f000 fd22 	bl	800d9c4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv>
 800cf80:	4603      	mov	r3, r0
 800cf82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 800cf86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d002      	beq.n	800cf94 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x6c>
        return err;
 800cf8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cf92:	e0c1      	b.n	800d118 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = skipSpacesAndComments();
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f7ff feb1 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 800cfa0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d002      	beq.n	800cfae <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x86>
        return err;
 800cfa8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800cfac:	e0b4      	b.n	800d118 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      if (!eat(':'))
 800cfae:	213a      	movs	r1, #58	; 0x3a
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f000 fc48 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	f083 0301 	eor.w	r3, r3, #1
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x9e>
        return DeserializationError::InvalidInput;
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	e0a8      	b.n	800d118 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      JsonString key = stringStorage_.str();
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	f107 0318 	add.w	r3, r7, #24
 800cfcc:	4611      	mov	r1, r2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fd f9f9 	bl	800a3c6 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier3strEv>
      TFilter memberFilter = filter[key.c_str()];
 800cfd4:	f107 0318 	add.w	r3, r7, #24
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7fc f9ca 	bl	8009372 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	627b      	str	r3, [r7, #36]	; 0x24
 800cfe2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800cfe6:	1d3b      	adds	r3, r7, #4
 800cfe8:	4611      	mov	r1, r2
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 fd0a 	bl	800da04 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilterixIPKcEES2_RKT_>
      if (memberFilter.allow()) {
 800cff0:	f107 0314 	add.w	r3, r7, #20
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7fd f8ef 	bl	800a1d8 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilter5allowEv>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d049      	beq.n	800d094 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x16c>
        VariantData* variant = object.getMember(adaptString(key.c_str()));
 800d000:	f107 0318 	add.w	r3, r7, #24
 800d004:	4618      	mov	r0, r3
 800d006:	f7fc f9b4 	bl	8009372 <_ZNK11ArduinoJson8V6213HB210JsonString5c_strEv>
 800d00a:	4603      	mov	r3, r0
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7fe fdac 	bl	800bb6a <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800d012:	4603      	mov	r3, r0
 800d014:	4619      	mov	r1, r3
 800d016:	68b8      	ldr	r0, [r7, #8]
 800d018:	f000 fd00 	bl	800da1c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_>
 800d01c:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (!variant) {
 800d01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d020:	2b00      	cmp	r3, #0
 800d022:	d123      	bne.n	800d06c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x144>
          key = stringStorage_.save();
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d02a:	4611      	mov	r1, r2
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7fd f980 	bl	800a332 <_ZN11ArduinoJson8V6213HB26detail12StringCopier4saveEv>
 800d032:	f107 0318 	add.w	r3, r7, #24
 800d036:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d03a:	ca07      	ldmia	r2, {r0, r1, r2}
 800d03c:	c303      	stmia	r3!, {r0, r1}
 800d03e:	701a      	strb	r2, [r3, #0]
          VariantSlot* slot = object.addSlot(pool_);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	6a1b      	ldr	r3, [r3, #32]
 800d044:	4619      	mov	r1, r3
 800d046:	68b8      	ldr	r0, [r7, #8]
 800d048:	f7fc fd58 	bl	8009afc <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 800d04c:	6378      	str	r0, [r7, #52]	; 0x34
          if (!slot)
 800d04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d050:	2b00      	cmp	r3, #0
 800d052:	d101      	bne.n	800d058 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x130>
            return DeserializationError::NoMemory;
 800d054:	2304      	movs	r3, #4
 800d056:	e05f      	b.n	800d118 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
          slot->setKey(key);
 800d058:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d05a:	f107 0318 	add.w	r3, r7, #24
 800d05e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d060:	f7fc fa2f 	bl	80094c2 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>
          variant = slot->data();
 800d064:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d066:	f7fc f9ca 	bl	80093fe <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800d06a:	63f8      	str	r0, [r7, #60]	; 0x3c
        err = parseVariant(*variant, memberFilter, nestingLimit.decrement());
 800d06c:	463b      	mov	r3, r7
 800d06e:	4618      	mov	r0, r3
 800d070:	f7fd f8fc 	bl	800a26c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 800d074:	4603      	mov	r3, r0
 800d076:	4622      	mov	r2, r4
 800d078:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	f7ff fb0e 	bl	800c69c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE12parseVariantINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_11VariantDataET_NS0_21DeserializationOption12NestingLimitE>
 800d080:	4603      	mov	r3, r0
 800d082:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (err)
 800d086:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d015      	beq.n	800d0ba <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x192>
          return err;
 800d08e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d092:	e041      	b.n	800d118 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
        err = skipVariant(nestingLimit.decrement());
 800d094:	463b      	mov	r3, r7
 800d096:	4618      	mov	r0, r3
 800d098:	f7fd f8e8 	bl	800a26c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 800d09c:	4603      	mov	r3, r0
 800d09e:	4619      	mov	r1, r3
 800d0a0:	68f8      	ldr	r0, [r7, #12]
 800d0a2:	f000 fbf9 	bl	800d898 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (err)
 800d0ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d002      	beq.n	800d0ba <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x192>
          return err;
 800d0b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d0b8:	e02e      	b.n	800d118 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = skipSpacesAndComments();
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f7ff fe1e 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 800d0c6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d002      	beq.n	800d0d4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1ac>
        return err;
 800d0ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d0d2:	e021      	b.n	800d118 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      if (eat('}'))
 800d0d4:	217d      	movs	r1, #125	; 0x7d
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f000 fbb5 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d001      	beq.n	800d0e6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1be>
        return DeserializationError::Ok;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	e018      	b.n	800d118 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      if (!eat(','))
 800d0e6:	212c      	movs	r1, #44	; 0x2c
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f000 fbac 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	f083 0301 	eor.w	r3, r3, #1
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d001      	beq.n	800d0fe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1d6>
        return DeserializationError::InvalidInput;
 800d0fa:	2303      	movs	r3, #3
 800d0fc:	e00c      	b.n	800d118 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x1f0>
      err = skipSpacesAndComments();
 800d0fe:	68f8      	ldr	r0, [r7, #12]
 800d100:	f7ff fdfc 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800d104:	4603      	mov	r3, r0
 800d106:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      if (err)
 800d10a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f43f af33 	beq.w	800cf7a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11parseObjectINS1_14AllowAllFilterEEENS0_20DeserializationError4CodeERNS1_14CollectionDataET_NS0_21DeserializationOption12NestingLimitE+0x52>
        return err;
 800d114:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
  }
 800d118:	4618      	mov	r0, r3
 800d11a:	3744      	adds	r7, #68	; 0x44
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd90      	pop	{r4, r7, pc}

0800d120 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipObject(
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	7039      	strb	r1, [r7, #0]
    if (nestingLimit.reached())
 800d12a:	463b      	mov	r3, r7
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7fd f8b0 	bl	800a292 <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit7reachedEv>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d001      	beq.n	800d13c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x1c>
      return DeserializationError::TooDeep;
 800d138:	2305      	movs	r3, #5
 800d13a:	e06d      	b.n	800d218 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    move();
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 fb75 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    err = skipSpacesAndComments();
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f7ff fdda 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800d148:	4603      	mov	r3, r0
 800d14a:	73fb      	strb	r3, [r7, #15]
    if (err)
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x36>
      return err;
 800d152:	7bfb      	ldrb	r3, [r7, #15]
 800d154:	e060      	b.n	800d218 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
    if (eat('}'))
 800d156:	217d      	movs	r1, #125	; 0x7d
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 fb74 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d001      	beq.n	800d168 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
      return DeserializationError::Ok;
 800d164:	2300      	movs	r3, #0
 800d166:	e057      	b.n	800d218 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipKey();
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 fc6e 	bl	800da4a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv>
 800d16e:	4603      	mov	r3, r0
 800d170:	73fb      	strb	r3, [r7, #15]
      if (err)
 800d172:	7bfb      	ldrb	r3, [r7, #15]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x5c>
        return err;
 800d178:	7bfb      	ldrb	r3, [r7, #15]
 800d17a:	e04d      	b.n	800d218 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff fdbd 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800d182:	4603      	mov	r3, r0
 800d184:	73fb      	strb	r3, [r7, #15]
      if (err)
 800d186:	7bfb      	ldrb	r3, [r7, #15]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d001      	beq.n	800d190 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x70>
        return err;
 800d18c:	7bfb      	ldrb	r3, [r7, #15]
 800d18e:	e043      	b.n	800d218 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(':'))
 800d190:	213a      	movs	r1, #58	; 0x3a
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 fb57 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800d198:	4603      	mov	r3, r0
 800d19a:	f083 0301 	eor.w	r3, r3, #1
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d001      	beq.n	800d1a8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x88>
        return DeserializationError::InvalidInput;
 800d1a4:	2303      	movs	r3, #3
 800d1a6:	e037      	b.n	800d218 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipVariant(nestingLimit.decrement());
 800d1a8:	463b      	mov	r3, r7
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f7fd f85e 	bl	800a26c <_ZNK11ArduinoJson8V6213HB221DeserializationOption12NestingLimit9decrementEv>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fb6f 	bl	800d898 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	73fb      	strb	r3, [r7, #15]
      if (err)
 800d1be:	7bfb      	ldrb	r3, [r7, #15]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xa8>
        return err;
 800d1c4:	7bfb      	ldrb	r3, [r7, #15]
 800d1c6:	e027      	b.n	800d218 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f7ff fd97 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	73fb      	strb	r3, [r7, #15]
      if (err)
 800d1d2:	7bfb      	ldrb	r3, [r7, #15]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d001      	beq.n	800d1dc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xbc>
        return err;
 800d1d8:	7bfb      	ldrb	r3, [r7, #15]
 800d1da:	e01d      	b.n	800d218 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (eat('}'))
 800d1dc:	217d      	movs	r1, #125	; 0x7d
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 fb31 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d001      	beq.n	800d1ee <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xce>
        return DeserializationError::Ok;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	e014      	b.n	800d218 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      if (!eat(','))
 800d1ee:	212c      	movs	r1, #44	; 0x2c
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fb28 	bl	800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	f083 0301 	eor.w	r3, r3, #1
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d001      	beq.n	800d206 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xe6>
        return DeserializationError::InvalidInput;
 800d202:	2303      	movs	r3, #3
 800d204:	e008      	b.n	800d218 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0xf8>
      err = skipSpacesAndComments();
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f7ff fd78 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800d20c:	4603      	mov	r3, r0
 800d20e:	73fb      	strb	r3, [r7, #15]
      if (err)
 800d210:	7bfb      	ldrb	r3, [r7, #15]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d0a8      	beq.n	800d168 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE+0x48>
        return err;
 800d216:	7bfb      	ldrb	r3, [r7, #15]
  }
 800d218:	4618      	mov	r0, r3
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE>:
  DeserializationError::Code parseStringValue(VariantData& variant) {
 800d220:	b580      	push	{r7, lr}
 800d222:	b086      	sub	sp, #24
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
    stringStorage_.startString();
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7fd f863 	bl	800a2f8 <_ZN11ArduinoJson8V6213HB26detail12StringCopier11startStringEv>
    err = parseQuotedString();
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 fc25 	bl	800da82 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv>
 800d238:	4603      	mov	r3, r0
 800d23a:	75fb      	strb	r3, [r7, #23]
    if (err)
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d001      	beq.n	800d246 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE+0x26>
      return err;
 800d242:	7dfb      	ldrb	r3, [r7, #23]
 800d244:	e00d      	b.n	800d262 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16parseStringValueERNS1_11VariantDataE+0x42>
    variant.setString(stringStorage_.save());
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	f107 0308 	add.w	r3, r7, #8
 800d24c:	4611      	mov	r1, r2
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fd f86f 	bl	800a332 <_ZN11ArduinoJson8V6213HB26detail12StringCopier4saveEv>
 800d254:	f107 0308 	add.w	r3, r7, #8
 800d258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d25a:	6838      	ldr	r0, [r7, #0]
 800d25c:	f7fc fb07 	bl	800986e <_ZN11ArduinoJson8V6213HB26detail11VariantData9setStringENS0_10JsonStringE>
    return DeserializationError::Ok;
 800d260:	2300      	movs	r3, #0
  }
 800d262:	4618      	mov	r0, r3
 800d264:	3718      	adds	r7, #24
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>:
  DeserializationError::Code skipQuotedString() {
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b084      	sub	sp, #16
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
    const char stopChar = current();
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f7ff fd78 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800d278:	4603      	mov	r3, r0
 800d27a:	73fb      	strb	r3, [r7, #15]
    move();
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 fad5 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      char c = current();
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7ff fd70 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800d288:	4603      	mov	r3, r0
 800d28a:	73bb      	strb	r3, [r7, #14]
      move();
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 facd 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      if (c == stopChar)
 800d292:	7bba      	ldrb	r2, [r7, #14]
 800d294:	7bfb      	ldrb	r3, [r7, #15]
 800d296:	429a      	cmp	r2, r3
 800d298:	d016      	beq.n	800d2c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x5e>
      if (c == '\0')
 800d29a:	7bbb      	ldrb	r3, [r7, #14]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d101      	bne.n	800d2a4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x3a>
        return DeserializationError::IncompleteInput;
 800d2a0:	2302      	movs	r3, #2
 800d2a2:	e013      	b.n	800d2cc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x62>
      if (c == '\\') {
 800d2a4:	7bbb      	ldrb	r3, [r7, #14]
 800d2a6:	2b5c      	cmp	r3, #92	; 0x5c
 800d2a8:	d1eb      	bne.n	800d282 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x18>
        if (current() != '\0')
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f7ff fd5c 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	bf14      	ite	ne
 800d2b6:	2301      	movne	r3, #1
 800d2b8:	2300      	moveq	r3, #0
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d0e0      	beq.n	800d282 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x18>
          move();
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 fab3 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    for (;;) {
 800d2c6:	e7dc      	b.n	800d282 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv+0x18>
        break;
 800d2c8:	bf00      	nop
    return DeserializationError::Ok;
 800d2ca:	2300      	movs	r3, #0
  }
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3710      	adds	r7, #16
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>:
  DeserializationError::Code skipKeyword(const char* s) {
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
    while (*s) {
 800d2de:	e016      	b.n	800d30e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x3a>
      char c = current();
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7ff fd41 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	73fb      	strb	r3, [r7, #15]
      if (c == '\0')
 800d2ea:	7bfb      	ldrb	r3, [r7, #15]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d101      	bne.n	800d2f4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x20>
        return DeserializationError::IncompleteInput;
 800d2f0:	2302      	movs	r3, #2
 800d2f2:	e011      	b.n	800d318 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x44>
      if (*s != c)
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	7bfa      	ldrb	r2, [r7, #15]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d001      	beq.n	800d302 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x2e>
        return DeserializationError::InvalidInput;
 800d2fe:	2303      	movs	r3, #3
 800d300:	e00a      	b.n	800d318 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0x44>
      ++s;
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	3301      	adds	r3, #1
 800d306:	603b      	str	r3, [r7, #0]
      move();
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fa8f 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    while (*s) {
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1e4      	bne.n	800d2e0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc+0xc>
    return DeserializationError::Ok;
 800d316:	2300      	movs	r3, #0
  }
 800d318:	4618      	mov	r0, r3
 800d31a:	3710      	adds	r7, #16
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE>:
  DeserializationError::Code parseNumericValue(VariantData& result) {
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
 800d328:	6039      	str	r1, [r7, #0]
    uint8_t n = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	73fb      	strb	r3, [r7, #15]
    char c = current();
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f7ff fd1a 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800d334:	4603      	mov	r3, r0
 800d336:	73bb      	strb	r3, [r7, #14]
    while (canBeInNumber(c) && n < 63) {
 800d338:	e010      	b.n	800d35c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x3c>
      move();
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f000 fa76 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      buffer_[n++] = c;
 800d340:	7bfb      	ldrb	r3, [r7, #15]
 800d342:	1c5a      	adds	r2, r3, #1
 800d344:	73fa      	strb	r2, [r7, #15]
 800d346:	461a      	mov	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	4413      	add	r3, r2
 800d34c:	7bba      	ldrb	r2, [r7, #14]
 800d34e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      c = current();
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f7ff fd08 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800d358:	4603      	mov	r3, r0
 800d35a:	73bb      	strb	r3, [r7, #14]
    while (canBeInNumber(c) && n < 63) {
 800d35c:	7bbb      	ldrb	r3, [r7, #14]
 800d35e:	4618      	mov	r0, r3
 800d360:	f000 fc10 	bl	800db84 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d004      	beq.n	800d374 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x54>
 800d36a:	7bfb      	ldrb	r3, [r7, #15]
 800d36c:	2b3e      	cmp	r3, #62	; 0x3e
 800d36e:	d801      	bhi.n	800d374 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x54>
 800d370:	2301      	movs	r3, #1
 800d372:	e000      	b.n	800d376 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x56>
 800d374:	2300      	movs	r3, #0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1df      	bne.n	800d33a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x1a>
    buffer_[n] = 0;
 800d37a:	7bfb      	ldrb	r3, [r7, #15]
 800d37c:	687a      	ldr	r2, [r7, #4]
 800d37e:	4413      	add	r3, r2
 800d380:	2200      	movs	r2, #0
 800d382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (!parseNumber(buffer_, result))
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	3324      	adds	r3, #36	; 0x24
 800d38a:	6839      	ldr	r1, [r7, #0]
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7fc fce7 	bl	8009d60 <_ZN11ArduinoJson8V6213HB26detail11parseNumberEPKcRNS1_11VariantDataE>
 800d392:	4603      	mov	r3, r0
 800d394:	f083 0301 	eor.w	r3, r3, #1
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d001      	beq.n	800d3a2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x82>
      return DeserializationError::InvalidInput;
 800d39e:	2303      	movs	r3, #3
 800d3a0:	e000      	b.n	800d3a4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseNumericValueERNS1_11VariantDataE+0x84>
    return DeserializationError::Ok;
 800d3a2:	2300      	movs	r3, #0
  }
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv>:
  DeserializationError::Code skipNumericValue() {
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
    char c = current();
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f7ff fcd7 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 800d3be:	e007      	b.n	800d3d0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv+0x24>
      move();
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 fa33 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      c = current();
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7ff fcce 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	73fb      	strb	r3, [r7, #15]
    while (canBeInNumber(c)) {
 800d3d0:	7bfb      	ldrb	r3, [r7, #15]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 fbd6 	bl	800db84 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d1f0      	bne.n	800d3c0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv+0x14>
    return DeserializationError::Ok;
 800d3de:	2300      	movs	r3, #0
  }
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_>:
  void operator()(TStoredString s) {
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	4638      	mov	r0, r7
 800d3f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    if (!s)
 800d3f6:	463b      	mov	r3, r7
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7fb ffe3 	bl	80093c4 <_ZNK11ArduinoJson8V6213HB210JsonStringcvbEv>
 800d3fe:	4603      	mov	r3, r0
 800d400:	f083 0301 	eor.w	r3, r3, #1
 800d404:	b2db      	uxtb	r3, r3
 800d406:	2b00      	cmp	r3, #0
 800d408:	d106      	bne.n	800d418 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_+0x30>
    instance_->setKey(s);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	6818      	ldr	r0, [r3, #0]
 800d40e:	463b      	mov	r3, r7
 800d410:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d412:	f7fc f856 	bl	80094c2 <_ZN11ArduinoJson8V6213HB26detail11VariantSlot6setKeyENS0_10JsonStringE>
 800d416:	e000      	b.n	800d41a <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_+0x32>
      return;
 800d418:	bf00      	nop
  }
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_>:
// Some libraries #define isnan() and isinf() so we need to check before
// using this name

#ifndef isnan
template <typename T>
bool isnan(T x) {
 800d420:	b590      	push	{r4, r7, lr}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	ed87 0b00 	vstr	d0, [r7]
  return x != x;
 800d42a:	2301      	movs	r3, #1
 800d42c:	461c      	mov	r4, r3
 800d42e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d432:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d436:	f7f3 fa6f 	bl	8000918 <__aeabi_dcmpeq>
 800d43a:	4603      	mov	r3, r0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d001      	beq.n	800d444 <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_+0x24>
 800d440:	2300      	movs	r3, #0
 800d442:	461c      	mov	r4, r3
 800d444:	b2e3      	uxtb	r3, r4
}
 800d446:	4618      	mov	r0, r3
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd90      	pop	{r4, r7, pc}

0800d44e <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_>:
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
 800d44e:	b580      	push	{r7, lr}
 800d450:	b082      	sub	sp, #8
 800d452:	af00      	add	r7, sp, #0
 800d454:	ed87 0b00 	vstr	d0, [r7]
  return x != 0.0 && x * 2 == x;
 800d458:	f04f 0200 	mov.w	r2, #0
 800d45c:	f04f 0300 	mov.w	r3, #0
 800d460:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d464:	f7f3 fa58 	bl	8000918 <__aeabi_dcmpeq>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d110      	bne.n	800d490 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x42>
 800d46e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d472:	4602      	mov	r2, r0
 800d474:	460b      	mov	r3, r1
 800d476:	f7f3 f843 	bl	8000500 <__adddf3>
 800d47a:	4602      	mov	r2, r0
 800d47c:	460b      	mov	r3, r1
 800d47e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d482:	f7f3 fa49 	bl	8000918 <__aeabi_dcmpeq>
 800d486:	4603      	mov	r3, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d001      	beq.n	800d490 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x42>
 800d48c:	2301      	movs	r3, #1
 800d48e:	e000      	b.n	800d492 <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_+0x44>
 800d490:	2300      	movs	r3, #0
}
 800d492:	4618      	mov	r0, r3
 800d494:	3708      	adds	r7, #8
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
	...

0800d49c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed>:
  uint32_t integral;
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
 800d49c:	b5b0      	push	{r4, r5, r7, lr}
 800d49e:	b088      	sub	sp, #32
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	60f8      	str	r0, [r7, #12]
 800d4a4:	ed87 0b00 	vstr	d0, [r7]
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
 800d4a8:	4b61      	ldr	r3, [pc, #388]	; (800d630 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x194>)
 800d4aa:	61fb      	str	r3, [r7, #28]
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2209      	movs	r2, #9
 800d4b0:	729a      	strb	r2, [r3, #10]

    exponent = normalize(value);
 800d4b2:	463b      	mov	r3, r7
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f000 fb8b 	bl	800dbd0 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	461a      	mov	r2, r3
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	811a      	strh	r2, [r3, #8]

    integral = uint32_t(value);
 800d4c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4c6:	4610      	mov	r0, r2
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	f7f3 fa57 	bl	800097c <__aeabi_d2uiz>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	601a      	str	r2, [r3, #0]
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	61bb      	str	r3, [r7, #24]
 800d4da:	e014      	b.n	800d506 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x6a>
      maxDecimalPart /= 10;
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	4a55      	ldr	r2, [pc, #340]	; (800d634 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800d4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800d4e4:	08db      	lsrs	r3, r3, #3
 800d4e6:	61fb      	str	r3, [r7, #28]
      decimalPlaces--;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	b25a      	sxtb	r2, r3
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	729a      	strb	r2, [r3, #10]
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 800d4fa:	69bb      	ldr	r3, [r7, #24]
 800d4fc:	4a4d      	ldr	r2, [pc, #308]	; (800d634 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800d4fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d502:	08db      	lsrs	r3, r3, #3
 800d504:	61bb      	str	r3, [r7, #24]
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	2b09      	cmp	r3, #9
 800d50a:	d8e7      	bhi.n	800d4dc <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x40>
    }

    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
 800d50c:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	4618      	mov	r0, r3
 800d516:	f7f3 f92f 	bl	8000778 <__aeabi_ui2d>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	4620      	mov	r0, r4
 800d520:	4629      	mov	r1, r5
 800d522:	f7f2 ffeb 	bl	80004fc <__aeabi_dsub>
 800d526:	4602      	mov	r2, r0
 800d528:	460b      	mov	r3, r1
 800d52a:	4614      	mov	r4, r2
 800d52c:	461d      	mov	r5, r3
 800d52e:	69f8      	ldr	r0, [r7, #28]
 800d530:	f7f3 f922 	bl	8000778 <__aeabi_ui2d>
 800d534:	4602      	mov	r2, r0
 800d536:	460b      	mov	r3, r1
 800d538:	4620      	mov	r0, r4
 800d53a:	4629      	mov	r1, r5
 800d53c:	f7f2 feb0 	bl	80002a0 <__aeabi_dmul>
 800d540:	4602      	mov	r2, r0
 800d542:	460b      	mov	r3, r1
 800d544:	e9c7 2304 	strd	r2, r3, [r7, #16]

    decimal = uint32_t(remainder);
 800d548:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d54c:	f7f3 fa16 	bl	800097c <__aeabi_d2uiz>
 800d550:	4602      	mov	r2, r0
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	605a      	str	r2, [r3, #4]
    remainder = remainder - TFloat(decimal);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7f3 f90c 	bl	8000778 <__aeabi_ui2d>
 800d560:	4602      	mov	r2, r0
 800d562:	460b      	mov	r3, r1
 800d564:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d568:	f7f2 ffc8 	bl	80004fc <__aeabi_dsub>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	e9c7 2304 	strd	r2, r3, [r7, #16]

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	685c      	ldr	r4, [r3, #4]
 800d578:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	f7f2 ffbe 	bl	8000500 <__adddf3>
 800d584:	4602      	mov	r2, r0
 800d586:	460b      	mov	r3, r1
 800d588:	4610      	mov	r0, r2
 800d58a:	4619      	mov	r1, r3
 800d58c:	f7f3 f9f6 	bl	800097c <__aeabi_d2uiz>
 800d590:	4603      	mov	r3, r0
 800d592:	18e2      	adds	r2, r4, r3
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	605a      	str	r2, [r3, #4]
    if (decimal >= maxDecimalPart) {
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	69fa      	ldr	r2, [r7, #28]
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d82e      	bhi.n	800d600 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x164>
      decimal = 0;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	605a      	str	r2, [r3, #4]
      integral++;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	1c5a      	adds	r2, r3, #1
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	601a      	str	r2, [r3, #0]
      if (exponent && integral >= 10) {
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d021      	beq.n	800d600 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x164>
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b09      	cmp	r3, #9
 800d5c2:	d91d      	bls.n	800d600 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x164>
        exponent++;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	b21a      	sxth	r2, r3
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	811a      	strh	r2, [r3, #8]
        integral = 1;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	601a      	str	r2, [r3, #0]
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 800d5dc:	e010      	b.n	800d600 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x164>
      decimal /= 10;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	4a14      	ldr	r2, [pc, #80]	; (800d634 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800d5e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e8:	08da      	lsrs	r2, r3, #3
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	605a      	str	r2, [r3, #4]
      decimalPlaces--;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	b2db      	uxtb	r3, r3
 800d5fa:	b25a      	sxtb	r2, r3
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	729a      	strb	r2, [r3, #10]
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6859      	ldr	r1, [r3, #4]
 800d604:	4b0b      	ldr	r3, [pc, #44]	; (800d634 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x198>)
 800d606:	fba3 2301 	umull	r2, r3, r3, r1
 800d60a:	08da      	lsrs	r2, r3, #3
 800d60c:	4613      	mov	r3, r2
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	4413      	add	r3, r2
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	1aca      	subs	r2, r1, r3
 800d616:	2a00      	cmp	r2, #0
 800d618:	d104      	bne.n	800d624 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x188>
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800d620:	2b00      	cmp	r3, #0
 800d622:	dcdc      	bgt.n	800d5de <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed+0x142>
    }
  }
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	4618      	mov	r0, r3
 800d628:	3720      	adds	r7, #32
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bdb0      	pop	{r4, r5, r7, pc}
 800d62e:	bf00      	nop
 800d630:	3b9aca00 	.word	0x3b9aca00
 800d634:	cccccccd 	.word	0xcccccccd

0800d638 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEC1ERSA_>:
ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

template <typename TWriter>
class CountingDecorator {
 public:
  explicit CountingDecorator(TWriter& writer) : writer_(writer), count_(0) {}
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	683a      	ldr	r2, [r7, #0]
 800d646:	6812      	ldr	r2, [r2, #0]
 800d648:	601a      	str	r2, [r3, #0]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2200      	movs	r2, #0
 800d64e:	605a      	str	r2, [r3, #4]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	4618      	mov	r0, r3
 800d654:	370c      	adds	r7, #12
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr

0800d65e <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10visitFloatEd>:
  size_t visitFloat(JsonFloat value) {
 800d65e:	b580      	push	{r7, lr}
 800d660:	b084      	sub	sp, #16
 800d662:	af00      	add	r7, sp, #0
 800d664:	60f8      	str	r0, [r7, #12]
 800d666:	ed87 0b00 	vstr	d0, [r7]
    formatter_.writeFloat(value);
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	ed97 0b00 	vldr	d0, [r7]
 800d670:	4618      	mov	r0, r3
 800d672:	f000 fb8b 	bl	800dd8c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>
    return bytesWritten();
 800d676:	68f8      	ldr	r0, [r7, #12]
 800d678:	f000 f8bb 	bl	800d7f2 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800d67c:	4603      	mov	r3, r0
  }
 800d67e:	4618      	mov	r0, r3
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE>:
  size_t visitObject(const CollectionData& object) {
 800d686:	b590      	push	{r4, r7, lr}
 800d688:	b085      	sub	sp, #20
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
 800d68e:	6039      	str	r1, [r7, #0]
    write('{');
 800d690:	217b      	movs	r1, #123	; 0x7b
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 fbd8 	bl	800de48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    const VariantSlot* slot = object.head();
 800d698:	6838      	ldr	r0, [r7, #0]
 800d69a:	f7fb fea4 	bl	80093e6 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData4headEv>
 800d69e:	60f8      	str	r0, [r7, #12]
    while (slot != 0) {
 800d6a0:	e01f      	b.n	800d6e2 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x5c>
      formatter_.writeString(slot->key());
 800d6a2:	687c      	ldr	r4, [r7, #4]
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f7fb ff34 	bl	8009512 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	f000 fbda 	bl	800de68 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc>
      write(':');
 800d6b4:	213a      	movs	r1, #58	; 0x3a
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fbc6 	bl	800de48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
      slot->data()->accept(*this);
 800d6bc:	68f8      	ldr	r0, [r7, #12]
 800d6be:	f7fb fea9 	bl	8009414 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	6879      	ldr	r1, [r7, #4]
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7ff f910 	bl	800c8ec <_ZNK11ArduinoJson8V6213HB26detail11VariantData6acceptINS1_14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEEEEENT_11result_typeERSE_>
      slot = slot->next();
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f7fb fec3 	bl	8009458 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800d6d2:	60f8      	str	r0, [r7, #12]
      if (slot == 0)
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d007      	beq.n	800d6ea <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x64>
      write(',');
 800d6da:	212c      	movs	r1, #44	; 0x2c
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f000 fbb3 	bl	800de48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    while (slot != 0) {
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d1dc      	bne.n	800d6a2 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x1c>
 800d6e8:	e000      	b.n	800d6ec <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitObjectERKNS1_14CollectionDataE+0x66>
        break;
 800d6ea:	bf00      	nop
    write('}');
 800d6ec:	217d      	movs	r1, #125	; 0x7d
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 fbaa 	bl	800de48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>
    return bytesWritten();
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f87c 	bl	800d7f2 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800d6fa:	4603      	mov	r3, r0
  }
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3714      	adds	r7, #20
 800d700:	46bd      	mov	sp, r7
 800d702:	bd90      	pop	{r4, r7, pc}

0800d704 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11visitStringEPKcj>:
  size_t visitString(const char* value, size_t n) {
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	60b9      	str	r1, [r7, #8]
 800d70e:	607a      	str	r2, [r7, #4]
    formatter_.writeString(value, n);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	687a      	ldr	r2, [r7, #4]
 800d714:	68b9      	ldr	r1, [r7, #8]
 800d716:	4618      	mov	r0, r3
 800d718:	f000 fbc4 	bl	800dea4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>
    return bytesWritten();
 800d71c:	68f8      	ldr	r0, [r7, #12]
 800d71e:	f000 f868 	bl	800d7f2 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800d722:	4603      	mov	r3, r0
  }
 800d724:	4618      	mov	r0, r3
 800d726:	3710      	adds	r7, #16
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitRawJsonEPKcj>:
  size_t visitRawJson(const char* data, size_t n) {
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	60f8      	str	r0, [r7, #12]
 800d734:	60b9      	str	r1, [r7, #8]
 800d736:	607a      	str	r2, [r7, #4]
    formatter_.writeRaw(data, n);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	68b9      	ldr	r1, [r7, #8]
 800d73e:	4618      	mov	r0, r3
 800d740:	f000 fbd5 	bl	800deee <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>
    return bytesWritten();
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f000 f854 	bl	800d7f2 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800d74a:	4603      	mov	r3, r0
  }
 800d74c:	4618      	mov	r0, r3
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE18visitSignedIntegerEx>:
  size_t visitSignedInteger(JsonInteger value) {
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 800d760:	68f9      	ldr	r1, [r7, #12]
 800d762:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d766:	4608      	mov	r0, r1
 800d768:	f000 fbd1 	bl	800df0e <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f000 f840 	bl	800d7f2 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800d772:	4603      	mov	r3, r0
  }
 800d774:	4618      	mov	r0, r3
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE20visitUnsignedIntegerEy>:
  size_t visitUnsignedInteger(JsonUInt value) {
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	e9c7 2300 	strd	r2, r3, [r7]
    formatter_.writeInteger(value);
 800d788:	68f9      	ldr	r1, [r7, #12]
 800d78a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d78e:	4608      	mov	r0, r1
 800d790:	f000 fbe1 	bl	800df56 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    return bytesWritten();
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f000 f82c 	bl	800d7f2 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800d79a:	4603      	mov	r3, r0
  }
 800d79c:	4618      	mov	r0, r3
 800d79e:	3710      	adds	r7, #16
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12visitBooleanEb>:
  size_t visitBoolean(bool value) {
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	70fb      	strb	r3, [r7, #3]
    formatter_.writeBoolean(value);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	78fa      	ldrb	r2, [r7, #3]
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f000 fc02 	bl	800dfc0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>
    return bytesWritten();
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 f818 	bl	800d7f2 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800d7c2:	4603      	mov	r3, r0
  }
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char* s) {
 800d7cc:	b590      	push	{r4, r7, lr}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
    writer_.write(reinterpret_cast<const uint8_t*>(s), strlen(s));
 800d7d6:	687c      	ldr	r4, [r7, #4]
 800d7d8:	6838      	ldr	r0, [r7, #0]
 800d7da:	f7f2 fd59 	bl	8000290 <strlen>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	6839      	ldr	r1, [r7, #0]
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	f000 fc05 	bl	800dff4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 800d7ea:	bf00      	nop
 800d7ec:	370c      	adds	r7, #12
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd90      	pop	{r4, r7, pc}

0800d7f2 <_ZNK11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b082      	sub	sp, #8
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
    return formatter_.bytesWritten();
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f000 fc0f 	bl	800e020 <_ZNK11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>
 800d802:	4603      	mov	r3, r0
  }
 800d804:	4618      	mov	r0, r3
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4618      	mov	r0, r3
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>:
  void move() {
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
    latch_.clear();
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	3314      	adds	r3, #20
 800d838:	4618      	mov	r0, r3
 800d83a:	f000 fc15 	bl	800e068 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5clearEv>
  }
 800d83e:	bf00      	nop
 800d840:	3708      	adds	r7, #8
 800d842:	46bd      	mov	sp, r7
 800d844:	bd80      	pop	{r7, pc}

0800d846 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc>:
  bool eat(char charToSkip) {
 800d846:	b580      	push	{r7, lr}
 800d848:	b082      	sub	sp, #8
 800d84a:	af00      	add	r7, sp, #0
 800d84c:	6078      	str	r0, [r7, #4]
 800d84e:	460b      	mov	r3, r1
 800d850:	70fb      	strb	r3, [r7, #3]
    if (current() != charToSkip)
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7ff fa88 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800d858:	4603      	mov	r3, r0
 800d85a:	461a      	mov	r2, r3
 800d85c:	78fb      	ldrb	r3, [r7, #3]
 800d85e:	4293      	cmp	r3, r2
 800d860:	bf14      	ite	ne
 800d862:	2301      	movne	r3, #1
 800d864:	2300      	moveq	r3, #0
 800d866:	b2db      	uxtb	r3, r3
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d001      	beq.n	800d870 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc+0x2a>
      return false;
 800d86c:	2300      	movs	r3, #0
 800d86e:	e003      	b.n	800d878 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE3eatEc+0x32>
    move();
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f7ff ffdb 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    return true;
 800d876:	2301      	movs	r3, #1
  }
 800d878:	4618      	mov	r0, r3
 800d87a:	3708      	adds	r7, #8
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilterixImEES2_RKT_>:

  template <typename TKey>
  AllowAllFilter operator[](const TKey&) const {
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 800d88a:	bf00      	nop
  }
 800d88c:	4618      	mov	r0, r3
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE>:
  DeserializationError::Code skipVariant(
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	7039      	strb	r1, [r7, #0]
    err = skipSpacesAndComments();
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7ff fa2a 	bl	800ccfc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE21skipSpacesAndCommentsEv>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	73fb      	strb	r3, [r7, #15]
    if (err)
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d001      	beq.n	800d8b6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x1e>
      return err;
 800d8b2:	7bfb      	ldrb	r3, [r7, #15]
 800d8b4:	e07c      	b.n	800d9b0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
    switch (current()) {
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f7ff fa56 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b7b      	cmp	r3, #123	; 0x7b
 800d8c0:	dc71      	bgt.n	800d9a6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 800d8c2:	2b5b      	cmp	r3, #91	; 0x5b
 800d8c4:	da04      	bge.n	800d8d0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x38>
 800d8c6:	2b22      	cmp	r3, #34	; 0x22
 800d8c8:	d056      	beq.n	800d978 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 800d8ca:	2b27      	cmp	r3, #39	; 0x27
 800d8cc:	d054      	beq.n	800d978 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0xe0>
 800d8ce:	e06a      	b.n	800d9a6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 800d8d0:	3b5b      	subs	r3, #91	; 0x5b
 800d8d2:	2b20      	cmp	r3, #32
 800d8d4:	d867      	bhi.n	800d9a6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x10e>
 800d8d6:	a201      	add	r2, pc, #4	; (adr r2, 800d8dc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x44>)
 800d8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8dc:	0800d961 	.word	0x0800d961
 800d8e0:	0800d9a7 	.word	0x0800d9a7
 800d8e4:	0800d9a7 	.word	0x0800d9a7
 800d8e8:	0800d9a7 	.word	0x0800d9a7
 800d8ec:	0800d9a7 	.word	0x0800d9a7
 800d8f0:	0800d9a7 	.word	0x0800d9a7
 800d8f4:	0800d9a7 	.word	0x0800d9a7
 800d8f8:	0800d9a7 	.word	0x0800d9a7
 800d8fc:	0800d9a7 	.word	0x0800d9a7
 800d900:	0800d9a7 	.word	0x0800d9a7
 800d904:	0800d9a7 	.word	0x0800d9a7
 800d908:	0800d98f 	.word	0x0800d98f
 800d90c:	0800d9a7 	.word	0x0800d9a7
 800d910:	0800d9a7 	.word	0x0800d9a7
 800d914:	0800d9a7 	.word	0x0800d9a7
 800d918:	0800d9a7 	.word	0x0800d9a7
 800d91c:	0800d9a7 	.word	0x0800d9a7
 800d920:	0800d9a7 	.word	0x0800d9a7
 800d924:	0800d9a7 	.word	0x0800d9a7
 800d928:	0800d99b 	.word	0x0800d99b
 800d92c:	0800d9a7 	.word	0x0800d9a7
 800d930:	0800d9a7 	.word	0x0800d9a7
 800d934:	0800d9a7 	.word	0x0800d9a7
 800d938:	0800d9a7 	.word	0x0800d9a7
 800d93c:	0800d9a7 	.word	0x0800d9a7
 800d940:	0800d983 	.word	0x0800d983
 800d944:	0800d9a7 	.word	0x0800d9a7
 800d948:	0800d9a7 	.word	0x0800d9a7
 800d94c:	0800d9a7 	.word	0x0800d9a7
 800d950:	0800d9a7 	.word	0x0800d9a7
 800d954:	0800d9a7 	.word	0x0800d9a7
 800d958:	0800d9a7 	.word	0x0800d9a7
 800d95c:	0800d96d 	.word	0x0800d96d
        return skipArray(nestingLimit);
 800d960:	7839      	ldrb	r1, [r7, #0]
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7ff fa9d 	bl	800cea2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9skipArrayENS0_21DeserializationOption12NestingLimitE>
 800d968:	4603      	mov	r3, r0
 800d96a:	e021      	b.n	800d9b0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipObject(nestingLimit);
 800d96c:	7839      	ldrb	r1, [r7, #0]
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7ff fbd6 	bl	800d120 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE10skipObjectENS0_21DeserializationOption12NestingLimitE>
 800d974:	4603      	mov	r3, r0
 800d976:	e01b      	b.n	800d9b0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipQuotedString();
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff fc76 	bl	800d26a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>
 800d97e:	4603      	mov	r3, r0
 800d980:	e016      	b.n	800d9b0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("true");
 800d982:	490d      	ldr	r1, [pc, #52]	; (800d9b8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x120>)
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f7ff fca5 	bl	800d2d4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800d98a:	4603      	mov	r3, r0
 800d98c:	e010      	b.n	800d9b0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("false");
 800d98e:	490b      	ldr	r1, [pc, #44]	; (800d9bc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x124>)
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f7ff fc9f 	bl	800d2d4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800d996:	4603      	mov	r3, r0
 800d998:	e00a      	b.n	800d9b0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipKeyword("null");
 800d99a:	4909      	ldr	r1, [pc, #36]	; (800d9c0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x128>)
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff fc99 	bl	800d2d4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipKeywordEPKc>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	e004      	b.n	800d9b0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE11skipVariantENS0_21DeserializationOption12NestingLimitE+0x118>
        return skipNumericValue();
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f7ff fd00 	bl	800d3ac <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipNumericValueEv>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	bf00      	nop
  }
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3710      	adds	r7, #16
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	08012100 	.word	0x08012100
 800d9bc:	08012108 	.word	0x08012108
 800d9c0:	08012110 	.word	0x08012110

0800d9c4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv>:
  DeserializationError::Code parseKey() {
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
    stringStorage_.startString();
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f7fc fc92 	bl	800a2f8 <_ZN11ArduinoJson8V6213HB26detail12StringCopier11startStringEv>
    if (isQuote(current())) {
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f7ff f9c7 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f000 fb66 	bl	800e0ae <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d004      	beq.n	800d9f2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv+0x2e>
      return parseQuotedString();
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f000 f84a 	bl	800da82 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	e004      	b.n	800d9fc <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE8parseKeyEv+0x38>
      return parseNonQuotedString();
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fb6f 	bl	800e0d6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	bf00      	nop
  }
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <_ZNK11ArduinoJson8V6213HB26detail14AllowAllFilterixIPKcEES2_RKT_>:
  AllowAllFilter operator[](const TKey&) const {
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	6039      	str	r1, [r7, #0]
    return AllowAllFilter();
 800da0e:	bf00      	nop
  }
 800da10:	4618      	mov	r0, r3
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_>:
inline VariantData* CollectionData::getMember(TAdaptedString key) const {
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
  VariantSlot* slot = getSlot(key);
 800da26:	6839      	ldr	r1, [r7, #0]
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 fb8d 	bl	800e148 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>
 800da2e:	60f8      	str	r0, [r7, #12]
  return slot ? slot->data() : 0;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d004      	beq.n	800da40 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_+0x24>
 800da36:	68f8      	ldr	r0, [r7, #12]
 800da38:	f7fb fce1 	bl	80093fe <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800da3c:	4603      	mov	r3, r0
 800da3e:	e000      	b.n	800da42 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_+0x26>
 800da40:	2300      	movs	r3, #0
}
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv>:
  DeserializationError::Code skipKey() {
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b082      	sub	sp, #8
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
    if (isQuote(current())) {
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7ff f988 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800da58:	4603      	mov	r3, r0
 800da5a:	4618      	mov	r0, r3
 800da5c:	f000 fb27 	bl	800e0ae <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d004      	beq.n	800da70 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv+0x26>
      return skipQuotedString();
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7ff fbff 	bl	800d26a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE16skipQuotedStringEv>
 800da6c:	4603      	mov	r3, r0
 800da6e:	e004      	b.n	800da7a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7skipKeyEv+0x30>
      return skipNonQuotedString();
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 fb98 	bl	800e1a6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv>
 800da76:	4603      	mov	r3, r0
 800da78:	bf00      	nop
  }
 800da7a:	4618      	mov	r0, r3
 800da7c:	3708      	adds	r7, #8
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv>:
  DeserializationError::Code parseQuotedString() {
 800da82:	b580      	push	{r7, lr}
 800da84:	b086      	sub	sp, #24
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
    Utf16::Codepoint codepoint;
 800da8a:	f107 030c 	add.w	r3, r7, #12
 800da8e:	4618      	mov	r0, r3
 800da90:	f7fc fcdd 	bl	800a44e <_ZN11ArduinoJson8V6213HB26detail5Utf169CodepointC1Ev>
    const char stopChar = current();
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7ff f967 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800da9a:	4603      	mov	r3, r0
 800da9c:	75bb      	strb	r3, [r7, #22]
    move();
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f7ff fec4 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      char c = current();
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7ff f95f 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800daaa:	4603      	mov	r3, r0
 800daac:	75fb      	strb	r3, [r7, #23]
      move();
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7ff febc 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      if (c == stopChar)
 800dab4:	7dfa      	ldrb	r2, [r7, #23]
 800dab6:	7dbb      	ldrb	r3, [r7, #22]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d051      	beq.n	800db60 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xde>
      if (c == '\0')
 800dabc:	7dfb      	ldrb	r3, [r7, #23]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d101      	bne.n	800dac6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x44>
        return DeserializationError::IncompleteInput;
 800dac2:	2302      	movs	r3, #2
 800dac4:	e05a      	b.n	800db7c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
      if (c == '\\') {
 800dac6:	7dfb      	ldrb	r3, [r7, #23]
 800dac8:	2b5c      	cmp	r3, #92	; 0x5c
 800daca:	d140      	bne.n	800db4e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xcc>
        c = current();
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f7ff f94b 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800dad2:	4603      	mov	r3, r0
 800dad4:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 800dad6:	7dfb      	ldrb	r3, [r7, #23]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d101      	bne.n	800dae0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x5e>
          return DeserializationError::IncompleteInput;
 800dadc:	2302      	movs	r3, #2
 800dade:	e04d      	b.n	800db7c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
        if (c == 'u') {
 800dae0:	7dfb      	ldrb	r3, [r7, #23]
 800dae2:	2b75      	cmp	r3, #117	; 0x75
 800dae4:	d125      	bne.n	800db32 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xb0>
          move();
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f7ff fea0 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
          err = parseHex4(codeunit);
 800daec:	f107 030a 	add.w	r3, r7, #10
 800daf0:	4619      	mov	r1, r3
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 fb75 	bl	800e1e2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt>
 800daf8:	4603      	mov	r3, r0
 800dafa:	757b      	strb	r3, [r7, #21]
          if (err)
 800dafc:	7d7b      	ldrb	r3, [r7, #21]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d001      	beq.n	800db06 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x84>
            return err;
 800db02:	7d7b      	ldrb	r3, [r7, #21]
 800db04:	e03a      	b.n	800db7c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
          if (codepoint.append(codeunit))
 800db06:	897a      	ldrh	r2, [r7, #10]
 800db08:	f107 030c 	add.w	r3, r7, #12
 800db0c:	4611      	mov	r1, r2
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fc fcae 	bl	800a470 <_ZN11ArduinoJson8V6213HB26detail5Utf169Codepoint6appendEt>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d020      	beq.n	800db5c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xda>
            Utf8::encodeCodepoint(codepoint.value(), stringStorage_);
 800db1a:	f107 030c 	add.w	r3, r7, #12
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fc fcd8 	bl	800a4d4 <_ZNK11ArduinoJson8V6213HB26detail5Utf169Codepoint5valueEv>
 800db24:	4602      	mov	r2, r0
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	4619      	mov	r1, r3
 800db2a:	4610      	mov	r0, r2
 800db2c:	f000 fb92 	bl	800e254 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_>
 800db30:	e7b8      	b.n	800daa4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x22>
        c = EscapeSequence::unescapeChar(c);
 800db32:	7dfb      	ldrb	r3, [r7, #23]
 800db34:	4618      	mov	r0, r3
 800db36:	f7fc f88e 	bl	8009c56 <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence12unescapeCharEc>
 800db3a:	4603      	mov	r3, r0
 800db3c:	75fb      	strb	r3, [r7, #23]
        if (c == '\0')
 800db3e:	7dfb      	ldrb	r3, [r7, #23]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d101      	bne.n	800db48 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xc6>
          return DeserializationError::InvalidInput;
 800db44:	2303      	movs	r3, #3
 800db46:	e019      	b.n	800db7c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
        move();
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7ff fe6f 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      stringStorage_.append(c);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	7dfa      	ldrb	r2, [r7, #23]
 800db52:	4611      	mov	r1, r2
 800db54:	4618      	mov	r0, r3
 800db56:	f7fc fc04 	bl	800a362 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>
 800db5a:	e7a3      	b.n	800daa4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x22>
          continue;
 800db5c:	bf00      	nop
    for (;;) {
 800db5e:	e7a1      	b.n	800daa4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0x22>
        break;
 800db60:	bf00      	nop
    if (!stringStorage_.isValid())
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4618      	mov	r0, r3
 800db66:	f7fc fc1d 	bl	800a3a4 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier7isValidEv>
 800db6a:	4603      	mov	r3, r0
 800db6c:	f083 0301 	eor.w	r3, r3, #1
 800db70:	b2db      	uxtb	r3, r3
 800db72:	2b00      	cmp	r3, #0
 800db74:	d001      	beq.n	800db7a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xf8>
      return DeserializationError::NoMemory;
 800db76:	2304      	movs	r3, #4
 800db78:	e000      	b.n	800db7c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE17parseQuotedStringEv+0xfa>
    return DeserializationError::Ok;
 800db7a:	2300      	movs	r3, #0
  }
 800db7c:	4618      	mov	r0, r3
 800db7e:	3718      	adds	r7, #24
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}

0800db84 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc>:
  static inline bool canBeInNumber(char c) {
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	4603      	mov	r3, r0
 800db8c:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 800db8e:	79fb      	ldrb	r3, [r7, #7]
 800db90:	2239      	movs	r2, #57	; 0x39
 800db92:	2130      	movs	r1, #48	; 0x30
 800db94:	4618      	mov	r0, r3
 800db96:	f000 fbdb 	bl	800e350 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 800db9a:	4603      	mov	r3, r0
           c == 'e' || c == 'E';
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d10e      	bne.n	800dbbe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
    return isBetween(c, '0', '9') || c == '+' || c == '-' || c == '.' ||
 800dba0:	79fb      	ldrb	r3, [r7, #7]
 800dba2:	2b2b      	cmp	r3, #43	; 0x2b
 800dba4:	d00b      	beq.n	800dbbe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
 800dba6:	79fb      	ldrb	r3, [r7, #7]
 800dba8:	2b2d      	cmp	r3, #45	; 0x2d
 800dbaa:	d008      	beq.n	800dbbe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
 800dbac:	79fb      	ldrb	r3, [r7, #7]
 800dbae:	2b2e      	cmp	r3, #46	; 0x2e
 800dbb0:	d005      	beq.n	800dbbe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
 800dbb2:	79fb      	ldrb	r3, [r7, #7]
 800dbb4:	2b65      	cmp	r3, #101	; 0x65
 800dbb6:	d002      	beq.n	800dbbe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3a>
           c == 'e' || c == 'E';
 800dbb8:	79fb      	ldrb	r3, [r7, #7]
 800dbba:	2b45      	cmp	r3, #69	; 0x45
 800dbbc:	d101      	bne.n	800dbc2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x3e>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e000      	b.n	800dbc4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE13canBeInNumberEc+0x40>
 800dbc2:	2300      	movs	r3, #0
  }
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	0000      	movs	r0, r0
	...

0800dbd0 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd>:

  static int16_t normalize(TFloat& value) {
 800dbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbd2:	b089      	sub	sp, #36	; 0x24
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	83fb      	strh	r3, [r7, #30]

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 800dbdc:	2308      	movs	r3, #8
 800dbde:	777b      	strb	r3, [r7, #29]
    int bit = 1 << index;
 800dbe0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dbe4:	2201      	movs	r2, #1
 800dbe6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbea:	61bb      	str	r3, [r7, #24]

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dbf2:	a362      	add	r3, pc, #392	; (adr r3, 800dd7c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1ac>)
 800dbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf8:	f7f2 feac 	bl	8000954 <__aeabi_dcmpge>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d04a      	beq.n	800dc98 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xc8>
      for (; index >= 0; index--) {
 800dc02:	e045      	b.n	800dc90 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xc0>
        if (value >= traits::positiveBinaryPowersOfTen()[index]) {
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	e9d3 4500 	ldrd	r4, r5, [r3]
 800dc0a:	f7fe f98b 	bl	800bf24 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	60bb      	str	r3, [r7, #8]
 800dc12:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800dc16:	f107 0308 	add.w	r3, r7, #8
 800dc1a:	4611      	mov	r1, r2
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7fe f9a1 	bl	800bf64 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 800dc22:	ec53 2b10 	vmov	r2, r3, d0
 800dc26:	2101      	movs	r1, #1
 800dc28:	460e      	mov	r6, r1
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	4629      	mov	r1, r5
 800dc2e:	f7f2 fe91 	bl	8000954 <__aeabi_dcmpge>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d101      	bne.n	800dc3c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x6c>
 800dc38:	2300      	movs	r3, #0
 800dc3a:	461e      	mov	r6, r3
 800dc3c:	b2f3      	uxtb	r3, r6
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d01d      	beq.n	800dc7e <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xae>
          value *= traits::negativeBinaryPowersOfTen()[index];
 800dc42:	f7fe f97f 	bl	800bf44 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 800dc46:	4603      	mov	r3, r0
 800dc48:	60fb      	str	r3, [r7, #12]
 800dc4a:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800dc4e:	f107 030c 	add.w	r3, r7, #12
 800dc52:	4611      	mov	r1, r2
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7fe f985 	bl	800bf64 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 800dc5a:	ec51 0b10 	vmov	r0, r1, d0
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc64:	f7f2 fb1c 	bl	80002a0 <__aeabi_dmul>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	6879      	ldr	r1, [r7, #4]
 800dc6e:	e9c1 2300 	strd	r2, r3, [r1]
          powersOf10 = int16_t(powersOf10 + bit);
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	b29a      	uxth	r2, r3
 800dc76:	8bfb      	ldrh	r3, [r7, #30]
 800dc78:	4413      	add	r3, r2
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	83fb      	strh	r3, [r7, #30]
        }
        bit >>= 1;
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	105b      	asrs	r3, r3, #1
 800dc82:	61bb      	str	r3, [r7, #24]
      for (; index >= 0; index--) {
 800dc84:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	777b      	strb	r3, [r7, #29]
 800dc90:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	dab5      	bge.n	800dc04 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x34>
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dc9e:	f04f 0200 	mov.w	r2, #0
 800dca2:	f04f 0300 	mov.w	r3, #0
 800dca6:	f7f2 fe5f 	bl	8000968 <__aeabi_dcmpgt>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d05c      	beq.n	800dd6a <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x19a>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800dcb6:	a333      	add	r3, pc, #204	; (adr r3, 800dd84 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1b4>)
 800dcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbc:	f7f2 fe40 	bl	8000940 <__aeabi_dcmple>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d051      	beq.n	800dd6a <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x19a>
      for (; index >= 0; index--) {
 800dcc6:	e04c      	b.n	800dd62 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x192>
        if (value < traits::negativeBinaryPowersOfTen()[index] * 10) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	e9d3 4500 	ldrd	r4, r5, [r3]
 800dcce:	f7fe f939 	bl	800bf44 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25negativeBinaryPowersOfTenEv>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	613b      	str	r3, [r7, #16]
 800dcd6:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800dcda:	f107 0310 	add.w	r3, r7, #16
 800dcde:	4611      	mov	r1, r2
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7fe f93f 	bl	800bf64 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 800dce6:	ec51 0b10 	vmov	r0, r1, d0
 800dcea:	f04f 0200 	mov.w	r2, #0
 800dcee:	4b22      	ldr	r3, [pc, #136]	; (800dd78 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x1a8>)
 800dcf0:	f7f2 fad6 	bl	80002a0 <__aeabi_dmul>
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	460e      	mov	r6, r1
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	4629      	mov	r1, r5
 800dd00:	f7f2 fe14 	bl	800092c <__aeabi_dcmplt>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d101      	bne.n	800dd0e <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x13e>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	461e      	mov	r6, r3
 800dd0e:	b2f3      	uxtb	r3, r6
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d01d      	beq.n	800dd50 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0x180>
          value *= traits::positiveBinaryPowersOfTen()[index];
 800dd14:	f7fe f906 	bl	800bf24 <_ZN11ArduinoJson8V6213HB26detail11FloatTraitsIdLj8EE25positiveBinaryPowersOfTenEv>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	617b      	str	r3, [r7, #20]
 800dd1c:	f997 201d 	ldrsb.w	r2, [r7, #29]
 800dd20:	f107 0314 	add.w	r3, r7, #20
 800dd24:	4611      	mov	r1, r2
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7fe f91c 	bl	800bf64 <_ZNK11ArduinoJson8V6213HB26detail7pgm_ptrIdEixEi>
 800dd2c:	ec51 0b10 	vmov	r0, r1, d0
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd36:	f7f2 fab3 	bl	80002a0 <__aeabi_dmul>
 800dd3a:	4602      	mov	r2, r0
 800dd3c:	460b      	mov	r3, r1
 800dd3e:	6879      	ldr	r1, [r7, #4]
 800dd40:	e9c1 2300 	strd	r2, r3, [r1]
          powersOf10 = int16_t(powersOf10 - bit);
 800dd44:	8bfa      	ldrh	r2, [r7, #30]
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	1ad3      	subs	r3, r2, r3
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	83fb      	strh	r3, [r7, #30]
        }
        bit >>= 1;
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	105b      	asrs	r3, r3, #1
 800dd54:	61bb      	str	r3, [r7, #24]
      for (; index >= 0; index--) {
 800dd56:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	b2db      	uxtb	r3, r3
 800dd60:	777b      	strb	r3, [r7, #29]
 800dd62:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	daae      	bge.n	800dcc8 <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdE9normalizeERd+0xf8>
      }
    }

    return powersOf10;
 800dd6a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
  }
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3724      	adds	r7, #36	; 0x24
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd76:	bf00      	nop
 800dd78:	40240000 	.word	0x40240000
 800dd7c:	00000000 	.word	0x00000000
 800dd80:	416312d0 	.word	0x416312d0
 800dd84:	88e368f1 	.word	0x88e368f1
 800dd88:	3ee4f8b5 	.word	0x3ee4f8b5

0800dd8c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_>:
  void writeFloat(T value) {
 800dd8c:	b5b0      	push	{r4, r5, r7, lr}
 800dd8e:	b088      	sub	sp, #32
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	ed87 0b00 	vstr	d0, [r7]
    if (isnan(value))
 800dd98:	ed97 0b00 	vldr	d0, [r7]
 800dd9c:	f7ff fb40 	bl	800d420 <_ZN11ArduinoJson8V6213HB26detail5isnanIdEEbT_>
 800dda0:	4603      	mov	r3, r0
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d004      	beq.n	800ddb0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x24>
      return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 800dda6:	4927      	ldr	r1, [pc, #156]	; (800de44 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb8>)
 800dda8:	68f8      	ldr	r0, [r7, #12]
 800ddaa:	f7ff fd0f 	bl	800d7cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 800ddae:	e045      	b.n	800de3c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb0>
    if (isinf(value))
 800ddb0:	ed97 0b00 	vldr	d0, [r7]
 800ddb4:	f7ff fb4b 	bl	800d44e <_ZN11ArduinoJson8V6213HB26detail5isinfIdEEbT_>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d004      	beq.n	800ddc8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x3c>
      return writeRaw("null");
 800ddbe:	4921      	ldr	r1, [pc, #132]	; (800de44 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb8>)
 800ddc0:	68f8      	ldr	r0, [r7, #12]
 800ddc2:	f7ff fd03 	bl	800d7cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
 800ddc6:	e039      	b.n	800de3c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb0>
    if (value < 0.0) {
 800ddc8:	f04f 0200 	mov.w	r2, #0
 800ddcc:	f04f 0300 	mov.w	r3, #0
 800ddd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ddd4:	f7f2 fdaa 	bl	800092c <__aeabi_dcmplt>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d009      	beq.n	800ddf2 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x66>
      writeRaw('-');
 800ddde:	212d      	movs	r1, #45	; 0x2d
 800dde0:	68f8      	ldr	r0, [r7, #12]
 800dde2:	f000 facf 	bl	800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      value = -value;
 800dde6:	683c      	ldr	r4, [r7, #0]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800ddee:	e9c7 4500 	strd	r4, r5, [r7]
    FloatParts<T> parts(value);
 800ddf2:	f107 0314 	add.w	r3, r7, #20
 800ddf6:	ed97 0b00 	vldr	d0, [r7]
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f7ff fb4e 	bl	800d49c <_ZN11ArduinoJson8V6213HB26detail10FloatPartsIdEC1Ed>
    writeInteger(parts.integral);
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	4619      	mov	r1, r3
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f000 facd 	bl	800e3a4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
    if (parts.decimalPlaces)
 800de0a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d006      	beq.n	800de20 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0x94>
      writeDecimals(parts.decimal, parts.decimalPlaces);
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	f997 201e 	ldrsb.w	r2, [r7, #30]
 800de18:	4619      	mov	r1, r3
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f000 faf4 	bl	800e408 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>
    if (parts.exponent) {
 800de20:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d009      	beq.n	800de3c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE10writeFloatIdEEvT_+0xb0>
      writeRaw('e');
 800de28:	2165      	movs	r1, #101	; 0x65
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	f000 faaa 	bl	800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeInteger(parts.exponent);
 800de30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800de34:	4619      	mov	r1, r3
 800de36:	68f8      	ldr	r0, [r7, #12]
 800de38:	f000 fb2a 	bl	800e490 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>
  }
 800de3c:	3720      	adds	r7, #32
 800de3e:	46bd      	mov	sp, r7
 800de40:	bdb0      	pop	{r4, r5, r7, pc}
 800de42:	bf00      	nop
 800de44:	08012110 	.word	0x08012110

0800de48 <_ZN11ArduinoJson8V6213HB26detail14JsonSerializerINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEc>:
  void write(char c) {
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	460b      	mov	r3, r1
 800de52:	70fb      	strb	r3, [r7, #3]
    formatter_.writeRaw(c);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	78fa      	ldrb	r2, [r7, #3]
 800de58:	4611      	mov	r1, r2
 800de5a:	4618      	mov	r0, r3
 800de5c:	f000 fa92 	bl	800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 800de60:	bf00      	nop
 800de62:	3708      	adds	r7, #8
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc>:
  void writeString(const char* value) {
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
    writeRaw('\"');
 800de72:	2122      	movs	r1, #34	; 0x22
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 fa85 	bl	800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (*value)
 800de7a:	e007      	b.n	800de8c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc+0x24>
      writeChar(*value++);
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	1c5a      	adds	r2, r3, #1
 800de80:	603a      	str	r2, [r7, #0]
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	4619      	mov	r1, r3
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 fb20 	bl	800e4cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (*value)
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d1f3      	bne.n	800de7c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKc+0x14>
    writeRaw('\"');
 800de94:	2122      	movs	r1, #34	; 0x22
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 fa74 	bl	800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 800de9c:	bf00      	nop
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj>:
  void writeString(const char* value, size_t n) {
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	607a      	str	r2, [r7, #4]
    writeRaw('\"');
 800deb0:	2122      	movs	r1, #34	; 0x22
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f000 fa66 	bl	800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
    while (n--)
 800deb8:	e007      	b.n	800deca <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x26>
      writeChar(*value++);
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	1c5a      	adds	r2, r3, #1
 800debe:	60ba      	str	r2, [r7, #8]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	4619      	mov	r1, r3
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f000 fb01 	bl	800e4cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>
    while (n--)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	1e5a      	subs	r2, r3, #1
 800dece:	607a      	str	r2, [r7, #4]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	bf14      	ite	ne
 800ded4:	2301      	movne	r3, #1
 800ded6:	2300      	moveq	r3, #0
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d1ed      	bne.n	800deba <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE11writeStringEPKcj+0x16>
    writeRaw('\"');
 800dede:	2122      	movs	r1, #34	; 0x22
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f000 fa4f 	bl	800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 800dee6:	bf00      	nop
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcj>:

  void writeRaw(const char* s, size_t n) {
 800deee:	b580      	push	{r7, lr}
 800def0:	b084      	sub	sp, #16
 800def2:	af00      	add	r7, sp, #0
 800def4:	60f8      	str	r0, [r7, #12]
 800def6:	60b9      	str	r1, [r7, #8]
 800def8:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(s), n);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	68b9      	ldr	r1, [r7, #8]
 800df00:	4618      	mov	r0, r3
 800df02:	f000 f877 	bl	800dff4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 800df06:	bf00      	nop
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
 800df0e:	b5b0      	push	{r4, r5, r7, lr}
 800df10:	b086      	sub	sp, #24
 800df12:	af00      	add	r7, sp, #0
 800df14:	60f8      	str	r0, [r7, #12]
 800df16:	e9c7 2300 	strd	r2, r3, [r7]
    if (value < 0) {
 800df1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	da0c      	bge.n	800df3c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x2e>
      writeRaw('-');
 800df22:	212d      	movs	r1, #45	; 0x2d
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f000 fa2d 	bl	800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 800df2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df2e:	2100      	movs	r1, #0
 800df30:	4254      	negs	r4, r2
 800df32:	eb61 0503 	sbc.w	r5, r1, r3
 800df36:	e9c7 4504 	strd	r4, r5, [r7, #16]
 800df3a:	e003      	b.n	800df44 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIxEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x36>
      unsigned_value = unsigned_type(value);
 800df3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    writeInteger(unsigned_value);
 800df44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f000 f804 	bl	800df56 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 800df4e:	bf00      	nop
 800df50:	3718      	adds	r7, #24
 800df52:	46bd      	mov	sp, r7
 800df54:	bdb0      	pop	{r4, r5, r7, pc}

0800df56 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 800df56:	b580      	push	{r7, lr}
 800df58:	b08c      	sub	sp, #48	; 0x30
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	60f8      	str	r0, [r7, #12]
 800df5e:	e9c7 2300 	strd	r2, r3, [r7]
    char* end = buffer + sizeof(buffer);
 800df62:	f107 0310 	add.w	r3, r7, #16
 800df66:	3316      	adds	r3, #22
 800df68:	62bb      	str	r3, [r7, #40]	; 0x28
    char* begin = end;
 800df6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      *--begin = char(value % 10 + '0');
 800df6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df72:	f04f 020a 	mov.w	r2, #10
 800df76:	f04f 0300 	mov.w	r3, #0
 800df7a:	f7f2 fd1f 	bl	80009bc <__aeabi_uldivmod>
 800df7e:	b2d3      	uxtb	r3, r2
 800df80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df82:	3a01      	subs	r2, #1
 800df84:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df86:	3330      	adds	r3, #48	; 0x30
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8c:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 800df8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df92:	f04f 020a 	mov.w	r2, #10
 800df96:	f04f 0300 	mov.w	r3, #0
 800df9a:	f7f2 fd0f 	bl	80009bc <__aeabi_uldivmod>
 800df9e:	4602      	mov	r2, r0
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	e9c7 2300 	strd	r2, r3, [r7]
    } while (value);
 800dfa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	d1df      	bne.n	800df6e <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIyEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 800dfae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f000 fab6 	bl	800e524 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 800dfb8:	bf00      	nop
 800dfba:	3730      	adds	r7, #48	; 0x30
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb>:
  void writeBoolean(bool value) {
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	460b      	mov	r3, r1
 800dfca:	70fb      	strb	r3, [r7, #3]
    if (value)
 800dfcc:	78fb      	ldrb	r3, [r7, #3]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d004      	beq.n	800dfdc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x1c>
      writeRaw("true");
 800dfd2:	4906      	ldr	r1, [pc, #24]	; (800dfec <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x2c>)
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7ff fbf9 	bl	800d7cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 800dfda:	e003      	b.n	800dfe4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x24>
      writeRaw("false");
 800dfdc:	4904      	ldr	r1, [pc, #16]	; (800dff0 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeBooleanEb+0x30>)
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff fbf4 	bl	800d7cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 800dfe4:	bf00      	nop
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	08012100 	.word	0x08012100
 800dff0:	08012108 	.word	0x08012108

0800dff4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>:

  void write(uint8_t c) {
    count_ += writer_.write(c);
  }

  void write(const uint8_t* s, size_t n) {
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
    count_ += writer_.write(s, n);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	68b9      	ldr	r1, [r7, #8]
 800e006:	4618      	mov	r0, r3
 800e008:	f000 fa9e 	bl	800e548 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>
 800e00c:	4602      	mov	r2, r0
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	441a      	add	r2, r3
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	605a      	str	r2, [r3, #4]
  }
 800e018:	bf00      	nop
 800e01a:	3710      	adds	r7, #16
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <_ZNK11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12bytesWrittenEv>:
  size_t bytesWritten() const {
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
    return writer_.count();
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 fa9e 	bl	800e56c <_ZNK11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>
 800e030:	4603      	mov	r3, r0
  }
 800e032:	4618      	mov	r0, r3
 800e034:	3708      	adds	r7, #8
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}

0800e03a <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE>:
    return 0;
  return var->getMember(key);
}

template <typename TAdaptedString>
VariantData* variantGetOrAddMember(VariantData* var, TAdaptedString key,
 800e03a:	b580      	push	{r7, lr}
 800e03c:	b084      	sub	sp, #16
 800e03e:	af00      	add	r7, sp, #0
 800e040:	60f8      	str	r0, [r7, #12]
 800e042:	60b9      	str	r1, [r7, #8]
 800e044:	607a      	str	r2, [r7, #4]
                                   MemoryPool* pool) {
  if (!var)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d101      	bne.n	800e050 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE+0x16>
    return 0;
 800e04c:	2300      	movs	r3, #0
 800e04e:	e007      	b.n	800e060 <_ZN11ArduinoJson8V6213HB26detail21variantGetOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataES5_T_PNS1_10MemoryPoolE+0x26>
  return var->getOrAddMember(key, pool);
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	68b9      	ldr	r1, [r7, #8]
 800e056:	4618      	mov	r0, r3
 800e058:	f000 fa94 	bl	800e584 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE>
 800e05c:	4603      	mov	r3, r0
 800e05e:	bf00      	nop
}
 800e060:	4618      	mov	r0, r3
 800e062:	3710      	adds	r7, #16
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5clearEv>:
  void clear() {
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
    loaded_ = false;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	725a      	strb	r2, [r3, #9]
  }
 800e076:	bf00      	nop
 800e078:	370c      	adds	r7, #12
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <_ZN11ArduinoJson8V6213HB26detail5LatchINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE4loadEv>:
  }

 private:
  void load() {
 800e082:	b580      	push	{r7, lr}
 800e084:	b084      	sub	sp, #16
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
    ARDUINOJSON_ASSERT(!ended_);
    int c = reader_.read();
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4618      	mov	r0, r3
 800e08e:	f000 fa9f 	bl	800e5d0 <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv>
 800e092:	60f8      	str	r0, [r7, #12]
#if ARDUINOJSON_DEBUG
    if (c <= 0)
      ended_ = true;
#endif
    current_ = static_cast<char>(c > 0 ? c : 0);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e09a:	b2da      	uxtb	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	721a      	strb	r2, [r3, #8]
    loaded_ = true;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	725a      	strb	r2, [r3, #9]
  }
 800e0a6:	bf00      	nop
 800e0a8:	3710      	adds	r7, #16
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc>:
  static inline bool isQuote(char c) {
 800e0ae:	b480      	push	{r7}
 800e0b0:	b083      	sub	sp, #12
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	71fb      	strb	r3, [r7, #7]
    return c == '\'' || c == '\"';
 800e0b8:	79fb      	ldrb	r3, [r7, #7]
 800e0ba:	2b27      	cmp	r3, #39	; 0x27
 800e0bc:	d002      	beq.n	800e0c4 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc+0x16>
 800e0be:	79fb      	ldrb	r3, [r7, #7]
 800e0c0:	2b22      	cmp	r3, #34	; 0x22
 800e0c2:	d101      	bne.n	800e0c8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc+0x1a>
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	e000      	b.n	800e0ca <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7isQuoteEc+0x1c>
 800e0c8:	2300      	movs	r3, #0
  }
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	370c      	adds	r7, #12
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr

0800e0d6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv>:
  DeserializationError::Code parseNonQuotedString() {
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b084      	sub	sp, #16
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
    char c = current();
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f7fe fe42 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73fb      	strb	r3, [r7, #15]
    if (canBeInNonQuotedString(c)) {  // no quotes
 800e0e8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 fa93 	bl	800e616 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d015      	beq.n	800e122 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x4c>
        move();
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f7ff fb98 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
        stringStorage_.append(c);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	7bfa      	ldrb	r2, [r7, #15]
 800e100:	4611      	mov	r1, r2
 800e102:	4618      	mov	r0, r3
 800e104:	f7fc f92d 	bl	800a362 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>
        c = current();
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7fe fe2d 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800e10e:	4603      	mov	r3, r0
 800e110:	73fb      	strb	r3, [r7, #15]
      } while (canBeInNonQuotedString(c));
 800e112:	7bfb      	ldrb	r3, [r7, #15]
 800e114:	4618      	mov	r0, r3
 800e116:	f000 fa7e 	bl	800e616 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>
 800e11a:	4603      	mov	r3, r0
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1ea      	bne.n	800e0f6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x20>
 800e120:	e001      	b.n	800e126 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x50>
      return DeserializationError::InvalidInput;
 800e122:	2303      	movs	r3, #3
 800e124:	e00c      	b.n	800e140 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x6a>
    if (!stringStorage_.isValid())
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fc f93b 	bl	800a3a4 <_ZNK11ArduinoJson8V6213HB26detail12StringCopier7isValidEv>
 800e12e:	4603      	mov	r3, r0
 800e130:	f083 0301 	eor.w	r3, r3, #1
 800e134:	b2db      	uxtb	r3, r3
 800e136:	2b00      	cmp	r3, #0
 800e138:	d001      	beq.n	800e13e <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x68>
      return DeserializationError::NoMemory;
 800e13a:	2304      	movs	r3, #4
 800e13c:	e000      	b.n	800e140 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE20parseNonQuotedStringEv+0x6a>
    return DeserializationError::Ok;
 800e13e:	2300      	movs	r3, #0
  }
 800e140:	4618      	mov	r0, r3
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>:
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  if (key.isNull())
 800e152:	463b      	mov	r3, r7
 800e154:	4618      	mov	r0, r3
 800e156:	f7fb f85c 	bl	8009212 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d001      	beq.n	800e164 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x1c>
    return 0;
 800e160:	2300      	movs	r3, #0
 800e162:	e01c      	b.n	800e19e <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x56>
  VariantSlot* slot = head_;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	60fb      	str	r3, [r7, #12]
  while (slot) {
 800e16a:	e012      	b.n	800e192 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x4a>
    if (stringEquals(key, adaptString(slot->key())))
 800e16c:	68f8      	ldr	r0, [r7, #12]
 800e16e:	f7fb f9d0 	bl	8009512 <_ZNK11ArduinoJson8V6213HB26detail11VariantSlot3keyEv>
 800e172:	4603      	mov	r3, r0
 800e174:	4618      	mov	r0, r3
 800e176:	f7fd fcf8 	bl	800bb6a <_ZN11ArduinoJson8V6213HB26detail11adaptStringIKcEENS1_13StringAdapterIPT_vE13AdaptedStringES6_>
 800e17a:	4603      	mov	r3, r0
 800e17c:	4619      	mov	r1, r3
 800e17e:	6838      	ldr	r0, [r7, #0]
 800e180:	f000 fa70 	bl	800e664 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	d107      	bne.n	800e19a <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x52>
    slot = slot->next();
 800e18a:	68f8      	ldr	r0, [r7, #12]
 800e18c:	f7fb f94d 	bl	800942a <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4nextEv>
 800e190:	60f8      	str	r0, [r7, #12]
  while (slot) {
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1e9      	bne.n	800e16c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x24>
 800e198:	e000      	b.n	800e19c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_+0x54>
      break;
 800e19a:	bf00      	nop
  return slot;
 800e19c:	68fb      	ldr	r3, [r7, #12]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv>:
  DeserializationError::Code skipNonQuotedString() {
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b084      	sub	sp, #16
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
    char c = current();
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7fe fdda 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 800e1b8:	e007      	b.n	800e1ca <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv+0x24>
      move();
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff fb36 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
      c = current();
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f7fe fdd1 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	73fb      	strb	r3, [r7, #15]
    while (canBeInNonQuotedString(c)) {
 800e1ca:	7bfb      	ldrb	r3, [r7, #15]
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f000 fa22 	bl	800e616 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d1f0      	bne.n	800e1ba <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE19skipNonQuotedStringEv+0x14>
    return DeserializationError::Ok;
 800e1d8:	2300      	movs	r3, #0
  }
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt>:
  DeserializationError::Code parseHex4(uint16_t& result) {
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	b084      	sub	sp, #16
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
 800e1ea:	6039      	str	r1, [r7, #0]
    result = 0;
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; ++i) {
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73fb      	strb	r3, [r7, #15]
 800e1f6:	e025      	b.n	800e244 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x62>
      char digit = current();
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7fe fdb5 	bl	800cd68 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE7currentEv>
 800e1fe:	4603      	mov	r3, r0
 800e200:	73bb      	strb	r3, [r7, #14]
      if (!digit)
 800e202:	7bbb      	ldrb	r3, [r7, #14]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d101      	bne.n	800e20c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x2a>
        return DeserializationError::IncompleteInput;
 800e208:	2302      	movs	r3, #2
 800e20a:	e01f      	b.n	800e24c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x6a>
      uint8_t value = decodeHex(digit);
 800e20c:	7bbb      	ldrb	r3, [r7, #14]
 800e20e:	4618      	mov	r0, r3
 800e210:	f000 fa62 	bl	800e6d8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc>
 800e214:	4603      	mov	r3, r0
 800e216:	737b      	strb	r3, [r7, #13]
      if (value > 0x0F)
 800e218:	7b7b      	ldrb	r3, [r7, #13]
 800e21a:	2b0f      	cmp	r3, #15
 800e21c:	d901      	bls.n	800e222 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x40>
        return DeserializationError::InvalidInput;
 800e21e:	2303      	movs	r3, #3
 800e220:	e014      	b.n	800e24c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x6a>
      result = uint16_t((result << 4) | value);
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	881b      	ldrh	r3, [r3, #0]
 800e226:	011b      	lsls	r3, r3, #4
 800e228:	b21a      	sxth	r2, r3
 800e22a:	7b7b      	ldrb	r3, [r7, #13]
 800e22c:	b21b      	sxth	r3, r3
 800e22e:	4313      	orrs	r3, r2
 800e230:	b21b      	sxth	r3, r3
 800e232:	b29a      	uxth	r2, r3
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	801a      	strh	r2, [r3, #0]
      move();
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f7ff faf7 	bl	800d82c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE4moveEv>
    for (uint8_t i = 0; i < 4; ++i) {
 800e23e:	7bfb      	ldrb	r3, [r7, #15]
 800e240:	3301      	adds	r3, #1
 800e242:	73fb      	strb	r3, [r7, #15]
 800e244:	7bfb      	ldrb	r3, [r7, #15]
 800e246:	2b03      	cmp	r3, #3
 800e248:	d9d6      	bls.n	800e1f8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9parseHex4ERt+0x16>
    return DeserializationError::Ok;
 800e24a:	2300      	movs	r3, #0
  }
 800e24c:	4618      	mov	r0, r3
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_>:

ARDUINOJSON_BEGIN_PRIVATE_NAMESPACE

namespace Utf8 {
template <typename TStringBuilder>
inline void encodeCodepoint(uint32_t codepoint32, TStringBuilder& str) {
 800e254:	b580      	push	{r7, lr}
 800e256:	b086      	sub	sp, #24
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  // this function was optimize for code size on AVR

  if (codepoint32 < 0x80) {
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b7f      	cmp	r3, #127	; 0x7f
 800e262:	d806      	bhi.n	800e272 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0x1e>
    str.append(char(codepoint32));
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	b2db      	uxtb	r3, r3
 800e268:	4619      	mov	r1, r3
 800e26a:	6838      	ldr	r0, [r7, #0]
 800e26c:	f7fc f879 	bl	800a362 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>

    while (*(--p)) {
      str.append(*p);
    }
  }
}
 800e270:	e06a      	b.n	800e348 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xf4>
    char* p = buf;
 800e272:	f107 030c 	add.w	r3, r7, #12
 800e276:	617b      	str	r3, [r7, #20]
    *(p++) = 0;
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	1c5a      	adds	r2, r3, #1
 800e27c:	617a      	str	r2, [r7, #20]
 800e27e:	2200      	movs	r2, #0
 800e280:	701a      	strb	r2, [r3, #0]
    *(p++) = char((codepoint32 | 0x80) & 0xBF);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	b2db      	uxtb	r3, r3
 800e286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	1c59      	adds	r1, r3, #1
 800e290:	6179      	str	r1, [r7, #20]
 800e292:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e296:	b2d2      	uxtb	r2, r2
 800e298:	701a      	strb	r2, [r3, #0]
    uint16_t codepoint16 = uint16_t(codepoint32 >> 6);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	099b      	lsrs	r3, r3, #6
 800e29e:	827b      	strh	r3, [r7, #18]
    if (codepoint16 < 0x20) {  // 0x800
 800e2a0:	8a7b      	ldrh	r3, [r7, #18]
 800e2a2:	2b1f      	cmp	r3, #31
 800e2a4:	d809      	bhi.n	800e2ba <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0x66>
      *(p++) = char(codepoint16 | 0xC0);
 800e2a6:	8a7b      	ldrh	r3, [r7, #18]
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	1c59      	adds	r1, r3, #1
 800e2ae:	6179      	str	r1, [r7, #20]
 800e2b0:	f062 023f 	orn	r2, r2, #63	; 0x3f
 800e2b4:	b2d2      	uxtb	r2, r2
 800e2b6:	701a      	strb	r2, [r3, #0]
 800e2b8:	e03a      	b.n	800e330 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xdc>
      *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800e2ba:	8a7b      	ldrh	r3, [r7, #18]
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2c2:	b2da      	uxtb	r2, r3
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	1c59      	adds	r1, r3, #1
 800e2c8:	6179      	str	r1, [r7, #20]
 800e2ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e2ce:	b2d2      	uxtb	r2, r2
 800e2d0:	701a      	strb	r2, [r3, #0]
      codepoint16 = uint16_t(codepoint16 >> 6);
 800e2d2:	8a7b      	ldrh	r3, [r7, #18]
 800e2d4:	099b      	lsrs	r3, r3, #6
 800e2d6:	827b      	strh	r3, [r7, #18]
      if (codepoint16 < 0x10) {  // 0x10000
 800e2d8:	8a7b      	ldrh	r3, [r7, #18]
 800e2da:	2b0f      	cmp	r3, #15
 800e2dc:	d809      	bhi.n	800e2f2 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0x9e>
        *(p++) = char(codepoint16 | 0xE0);
 800e2de:	8a7b      	ldrh	r3, [r7, #18]
 800e2e0:	b2da      	uxtb	r2, r3
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	1c59      	adds	r1, r3, #1
 800e2e6:	6179      	str	r1, [r7, #20]
 800e2e8:	f062 021f 	orn	r2, r2, #31
 800e2ec:	b2d2      	uxtb	r2, r2
 800e2ee:	701a      	strb	r2, [r3, #0]
 800e2f0:	e01e      	b.n	800e330 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xdc>
        *(p++) = char((codepoint16 | 0x80) & 0xBF);
 800e2f2:	8a7b      	ldrh	r3, [r7, #18]
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2fa:	b2da      	uxtb	r2, r3
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	1c59      	adds	r1, r3, #1
 800e300:	6179      	str	r1, [r7, #20]
 800e302:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800e306:	b2d2      	uxtb	r2, r2
 800e308:	701a      	strb	r2, [r3, #0]
        codepoint16 = uint16_t(codepoint16 >> 6);
 800e30a:	8a7b      	ldrh	r3, [r7, #18]
 800e30c:	099b      	lsrs	r3, r3, #6
 800e30e:	827b      	strh	r3, [r7, #18]
        *(p++) = char(codepoint16 | 0xF0);
 800e310:	8a7b      	ldrh	r3, [r7, #18]
 800e312:	b2da      	uxtb	r2, r3
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	1c59      	adds	r1, r3, #1
 800e318:	6179      	str	r1, [r7, #20]
 800e31a:	f062 020f 	orn	r2, r2, #15
 800e31e:	b2d2      	uxtb	r2, r2
 800e320:	701a      	strb	r2, [r3, #0]
    while (*(--p)) {
 800e322:	e005      	b.n	800e330 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xdc>
      str.append(*p);
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	4619      	mov	r1, r3
 800e32a:	6838      	ldr	r0, [r7, #0]
 800e32c:	f7fc f819 	bl	800a362 <_ZN11ArduinoJson8V6213HB26detail12StringCopier6appendEc>
    while (*(--p)) {
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	3b01      	subs	r3, #1
 800e334:	617b      	str	r3, [r7, #20]
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	bf14      	ite	ne
 800e33e:	2301      	movne	r3, #1
 800e340:	2300      	moveq	r3, #0
 800e342:	b2db      	uxtb	r3, r3
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1ed      	bne.n	800e324 <_ZN11ArduinoJson8V6213HB26detail4Utf815encodeCodepointINS1_12StringCopierEEEvmRT_+0xd0>
}
 800e348:	bf00      	nop
 800e34a:	3718      	adds	r7, #24
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>:
  static inline bool isBetween(char c, char min, char max) {
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	4603      	mov	r3, r0
 800e358:	71fb      	strb	r3, [r7, #7]
 800e35a:	460b      	mov	r3, r1
 800e35c:	71bb      	strb	r3, [r7, #6]
 800e35e:	4613      	mov	r3, r2
 800e360:	717b      	strb	r3, [r7, #5]
    return min <= c && c <= max;
 800e362:	79ba      	ldrb	r2, [r7, #6]
 800e364:	79fb      	ldrb	r3, [r7, #7]
 800e366:	429a      	cmp	r2, r3
 800e368:	d805      	bhi.n	800e376 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc+0x26>
 800e36a:	79fa      	ldrb	r2, [r7, #7]
 800e36c:	797b      	ldrb	r3, [r7, #5]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d801      	bhi.n	800e376 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc+0x26>
 800e372:	2301      	movs	r3, #1
 800e374:	e000      	b.n	800e378 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc+0x28>
 800e376:	2300      	movs	r3, #0
  }
 800e378:	4618      	mov	r0, r3
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    writer_.write(reinterpret_cast<const uint8_t*>(s), N - 1);
  }
  void writeRaw(char c) {
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	460b      	mov	r3, r1
 800e38e:	70fb      	strb	r3, [r7, #3]
    writer_.write(static_cast<uint8_t>(c));
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	78fa      	ldrb	r2, [r7, #3]
 800e394:	4611      	mov	r1, r2
 800e396:	4618      	mov	r0, r3
 800e398:	f000 f9cc 	bl	800e734 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>
  }
 800e39c:	bf00      	nop
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}

0800e3a4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b08a      	sub	sp, #40	; 0x28
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
 800e3ac:	6039      	str	r1, [r7, #0]
    char* end = buffer + sizeof(buffer);
 800e3ae:	f107 0308 	add.w	r3, r7, #8
 800e3b2:	3316      	adds	r3, #22
 800e3b4:	623b      	str	r3, [r7, #32]
    char* begin = end;
 800e3b6:	6a3b      	ldr	r3, [r7, #32]
 800e3b8:	627b      	str	r3, [r7, #36]	; 0x24
      *--begin = char(value % 10 + '0');
 800e3ba:	6839      	ldr	r1, [r7, #0]
 800e3bc:	4b11      	ldr	r3, [pc, #68]	; (800e404 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 800e3be:	fba3 2301 	umull	r2, r3, r3, r1
 800e3c2:	08da      	lsrs	r2, r3, #3
 800e3c4:	4613      	mov	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4413      	add	r3, r2
 800e3ca:	005b      	lsls	r3, r3, #1
 800e3cc:	1aca      	subs	r2, r1, r3
 800e3ce:	b2d3      	uxtb	r3, r2
 800e3d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3d2:	3a01      	subs	r2, #1
 800e3d4:	627a      	str	r2, [r7, #36]	; 0x24
 800e3d6:	3330      	adds	r3, #48	; 0x30
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3dc:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	4a08      	ldr	r2, [pc, #32]	; (800e404 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x60>)
 800e3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3e6:	08db      	lsrs	r3, r3, #3
 800e3e8:	603b      	str	r3, [r7, #0]
    } while (value);
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d1e4      	bne.n	800e3ba <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerImEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x16>
    writeRaw(begin, end);
 800e3f0:	6a3a      	ldr	r2, [r7, #32]
 800e3f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f895 	bl	800e524 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 800e3fa:	bf00      	nop
 800e3fc:	3728      	adds	r7, #40	; 0x28
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	cccccccd 	.word	0xcccccccd

0800e408 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma>:
  void writeDecimals(uint32_t value, int8_t width) {
 800e408:	b580      	push	{r7, lr}
 800e40a:	b08a      	sub	sp, #40	; 0x28
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	4613      	mov	r3, r2
 800e414:	71fb      	strb	r3, [r7, #7]
    char* end = buffer + sizeof(buffer);
 800e416:	f107 0310 	add.w	r3, r7, #16
 800e41a:	3310      	adds	r3, #16
 800e41c:	623b      	str	r3, [r7, #32]
    char* begin = end;
 800e41e:	6a3b      	ldr	r3, [r7, #32]
 800e420:	627b      	str	r3, [r7, #36]	; 0x24
    while (width--) {
 800e422:	e017      	b.n	800e454 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x4c>
      *--begin = char(value % 10 + '0');
 800e424:	68b9      	ldr	r1, [r7, #8]
 800e426:	4b19      	ldr	r3, [pc, #100]	; (800e48c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 800e428:	fba3 2301 	umull	r2, r3, r3, r1
 800e42c:	08da      	lsrs	r2, r3, #3
 800e42e:	4613      	mov	r3, r2
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	4413      	add	r3, r2
 800e434:	005b      	lsls	r3, r3, #1
 800e436:	1aca      	subs	r2, r1, r3
 800e438:	b2d3      	uxtb	r3, r2
 800e43a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e43c:	3a01      	subs	r2, #1
 800e43e:	627a      	str	r2, [r7, #36]	; 0x24
 800e440:	3330      	adds	r3, #48	; 0x30
 800e442:	b2da      	uxtb	r2, r3
 800e444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e446:	701a      	strb	r2, [r3, #0]
      value /= 10;
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	4a10      	ldr	r2, [pc, #64]	; (800e48c <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x84>)
 800e44c:	fba2 2303 	umull	r2, r3, r2, r3
 800e450:	08db      	lsrs	r3, r3, #3
 800e452:	60bb      	str	r3, [r7, #8]
    while (width--) {
 800e454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e458:	b2da      	uxtb	r2, r3
 800e45a:	3a01      	subs	r2, #1
 800e45c:	b2d2      	uxtb	r2, r2
 800e45e:	71fa      	strb	r2, [r7, #7]
 800e460:	2b00      	cmp	r3, #0
 800e462:	bf14      	ite	ne
 800e464:	2301      	movne	r3, #1
 800e466:	2300      	moveq	r3, #0
 800e468:	b2db      	uxtb	r3, r3
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1da      	bne.n	800e424 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE13writeDecimalsEma+0x1c>
    *--begin = '.';
 800e46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e470:	3b01      	subs	r3, #1
 800e472:	627b      	str	r3, [r7, #36]	; 0x24
 800e474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e476:	222e      	movs	r2, #46	; 0x2e
 800e478:	701a      	strb	r2, [r3, #0]
    writeRaw(begin, end);
 800e47a:	6a3a      	ldr	r2, [r7, #32]
 800e47c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e47e:	68f8      	ldr	r0, [r7, #12]
 800e480:	f000 f850 	bl	800e524 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 800e484:	bf00      	nop
 800e486:	3728      	adds	r7, #40	; 0x28
 800e488:	46bd      	mov	sp, r7
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	cccccccd 	.word	0xcccccccd

0800e490 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_signed<T>::value>::type writeInteger(T value) {
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	460b      	mov	r3, r1
 800e49a:	807b      	strh	r3, [r7, #2]
    if (value < 0) {
 800e49c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	da07      	bge.n	800e4b4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x24>
      writeRaw('-');
 800e4a4:	212d      	movs	r1, #45	; 0x2d
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f7ff ff6c 	bl	800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      unsigned_value = unsigned_type(unsigned_type(~value) + 1);
 800e4ac:	887b      	ldrh	r3, [r7, #2]
 800e4ae:	425b      	negs	r3, r3
 800e4b0:	81fb      	strh	r3, [r7, #14]
 800e4b2:	e001      	b.n	800e4b8 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerIsEENS1_9enable_ifIXsrNS1_9is_signedIT_EE5valueEvE4typeESF_+0x28>
      unsigned_value = unsigned_type(value);
 800e4b4:	887b      	ldrh	r3, [r7, #2]
 800e4b6:	81fb      	strh	r3, [r7, #14]
    writeInteger(unsigned_value);
 800e4b8:	89fb      	ldrh	r3, [r7, #14]
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 f94f 	bl	800e760 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>
  }
 800e4c2:	bf00      	nop
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
	...

0800e4cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc>:
  void writeChar(char c) {
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	70fb      	strb	r3, [r7, #3]
    char specialChar = EscapeSequence::escapeChar(c);
 800e4d8:	78fb      	ldrb	r3, [r7, #3]
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fb fb9e 	bl	8009c1c <_ZN11ArduinoJson8V6213HB26detail14EscapeSequence10escapeCharEc>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	73fb      	strb	r3, [r7, #15]
    if (specialChar) {
 800e4e4:	7bfb      	ldrb	r3, [r7, #15]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d009      	beq.n	800e4fe <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x32>
      writeRaw('\\');
 800e4ea:	215c      	movs	r1, #92	; 0x5c
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f7ff ff49 	bl	800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
      writeRaw(specialChar);
 800e4f2:	7bfb      	ldrb	r3, [r7, #15]
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f7ff ff44 	bl	800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 800e4fc:	e00c      	b.n	800e518 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
    } else if (c) {
 800e4fe:	78fb      	ldrb	r3, [r7, #3]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d005      	beq.n	800e510 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x44>
      writeRaw(c);
 800e504:	78fb      	ldrb	r3, [r7, #3]
 800e506:	4619      	mov	r1, r3
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f7ff ff3b 	bl	800e384 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEc>
  }
 800e50e:	e003      	b.n	800e518 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x4c>
      writeRaw("\\u0000");
 800e510:	4903      	ldr	r1, [pc, #12]	; (800e520 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE9writeCharEc+0x54>)
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f7ff f95a 	bl	800d7cc <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKc>
  }
 800e518:	bf00      	nop
 800e51a:	3710      	adds	r7, #16
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}
 800e520:	08012118 	.word	0x08012118

0800e524 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>:
  void writeRaw(const char* begin, const char* end) {
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	607a      	str	r2, [r7, #4]
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 800e530:	68f8      	ldr	r0, [r7, #12]
                  static_cast<size_t>(end - begin));
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	1ad3      	subs	r3, r2, r3
    writer_.write(reinterpret_cast<const uint8_t*>(begin),
 800e538:	461a      	mov	r2, r3
 800e53a:	68b9      	ldr	r1, [r7, #8]
 800e53c:	f7ff fd5a 	bl	800dff4 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEPKhj>
  }
 800e540:	bf00      	nop
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEPKhj>:
  size_t write(uint8_t c) {
    str_->push_back(static_cast<char>(c));
    return 1;
  }

  size_t write(const uint8_t* s, size_t n) {
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	60f8      	str	r0, [r7, #12]
 800e550:	60b9      	str	r1, [r7, #8]
 800e552:	607a      	str	r2, [r7, #4]
    str_->append(reinterpret_cast<const char*>(s), n);
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	687a      	ldr	r2, [r7, #4]
 800e55a:	68b9      	ldr	r1, [r7, #8]
 800e55c:	4618      	mov	r0, r3
 800e55e:	f000 fcfb 	bl	800ef58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
    return n;
 800e562:	687b      	ldr	r3, [r7, #4]
  }
 800e564:	4618      	mov	r0, r3
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <_ZNK11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5countEv>:

  size_t count() const {
 800e56c:	b480      	push	{r7}
 800e56e:	b083      	sub	sp, #12
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
    return count_;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	685b      	ldr	r3, [r3, #4]
  }
 800e578:	4618      	mov	r0, r3
 800e57a:	370c      	adds	r7, #12
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr

0800e584 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE>:
  VariantData* getOrAddMember(TAdaptedString key, MemoryPool* pool) {
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
    if (isNull())
 800e590:	68f8      	ldr	r0, [r7, #12]
 800e592:	f7fb f91c 	bl	80097ce <_ZNK11ArduinoJson8V6213HB26detail11VariantData6isNullEv>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x1e>
      toObject();
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f7fb f9a0 	bl	80098e2 <_ZN11ArduinoJson8V6213HB26detail11VariantData8toObjectEv>
    if (!isObject())
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f7fb f900 	bl	80097a8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData8isObjectEv>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	f083 0301 	eor.w	r3, r3, #1
 800e5ae:	b2db      	uxtb	r3, r3
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d001      	beq.n	800e5b8 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x34>
      return 0;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	e007      	b.n	800e5c8 <_ZN11ArduinoJson8V6213HB26detail11VariantData14getOrAddMemberINS1_19StaticStringAdapterEEEPS2_T_PNS1_10MemoryPoolE+0x44>
    return content_.asCollection.getOrAddMember(key, pool);
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	68b9      	ldr	r1, [r7, #8]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f000 f902 	bl	800e7c8 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	bf00      	nop
  }
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	3710      	adds	r7, #16
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv>:
  int read() {
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
    if (ptr_ < end_)
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	3304      	adds	r3, #4
 800e5de:	4619      	mov	r1, r3
 800e5e0:	4610      	mov	r0, r2
 800e5e2:	f000 f919 	bl	800e818 <_ZN9__gnu_cxxltIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d00e      	beq.n	800e60a <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv+0x3a>
      return static_cast<unsigned char>(*ptr_++);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f000 f929 	bl	800e848 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEi>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	60fb      	str	r3, [r7, #12]
 800e5fa:	f107 030c 	add.w	r3, r7, #12
 800e5fe:	4618      	mov	r0, r3
 800e600:	f000 f93a 	bl	800e878 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>
 800e604:	4603      	mov	r3, r0
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	e001      	b.n	800e60e <_ZN11ArduinoJson8V6213HB26detail14IteratorReaderIN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE4readEv+0x3e>
      return -1;
 800e60a:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800e60e:	4618      	mov	r0, r3
 800e610:	3710      	adds	r7, #16
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}

0800e616 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc>:
  static inline bool canBeInNonQuotedString(char c) {
 800e616:	b580      	push	{r7, lr}
 800e618:	b082      	sub	sp, #8
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	4603      	mov	r3, r0
 800e61e:	71fb      	strb	r3, [r7, #7]
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800e620:	79fb      	ldrb	r3, [r7, #7]
 800e622:	2239      	movs	r2, #57	; 0x39
 800e624:	2130      	movs	r1, #48	; 0x30
 800e626:	4618      	mov	r0, r3
 800e628:	f7ff fe92 	bl	800e350 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 800e62c:	4603      	mov	r3, r0
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d111      	bne.n	800e656 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x40>
 800e632:	79fb      	ldrb	r3, [r7, #7]
 800e634:	227a      	movs	r2, #122	; 0x7a
 800e636:	215f      	movs	r1, #95	; 0x5f
 800e638:	4618      	mov	r0, r3
 800e63a:	f7ff fe89 	bl	800e350 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d108      	bne.n	800e656 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x40>
           isBetween(c, 'A', 'Z');
 800e644:	79fb      	ldrb	r3, [r7, #7]
 800e646:	225a      	movs	r2, #90	; 0x5a
 800e648:	2141      	movs	r1, #65	; 0x41
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7ff fe80 	bl	800e350 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9isBetweenEccc>
 800e650:	4603      	mov	r3, r0
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
 800e652:	2b00      	cmp	r3, #0
 800e654:	d001      	beq.n	800e65a <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x44>
 800e656:	2301      	movs	r3, #1
 800e658:	e000      	b.n	800e65c <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE22canBeInNonQuotedStringEc+0x46>
 800e65a:	2300      	movs	r3, #0
  }
 800e65c:	4618      	mov	r0, r3
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_>:
stringEquals(TAdaptedString1 s1, TAdaptedString2 s2) {
 800e664:	b590      	push	{r4, r7, lr}
 800e666:	b087      	sub	sp, #28
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	6039      	str	r1, [r7, #0]
  size_t size1 = s1.size();
 800e66e:	1d3b      	adds	r3, r7, #4
 800e670:	4618      	mov	r0, r3
 800e672:	f7fa fddf 	bl	8009234 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 800e676:	6138      	str	r0, [r7, #16]
  size_t size2 = s2.size();
 800e678:	463b      	mov	r3, r7
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7fa fdda 	bl	8009234 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 800e680:	60f8      	str	r0, [r7, #12]
  if (size1 != size2)
 800e682:	693a      	ldr	r2, [r7, #16]
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	429a      	cmp	r2, r3
 800e688:	d001      	beq.n	800e68e <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x2a>
    return false;
 800e68a:	2300      	movs	r3, #0
 800e68c:	e020      	b.n	800e6d0 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
  for (size_t i = 0; i < size1; i++) {
 800e68e:	2300      	movs	r3, #0
 800e690:	617b      	str	r3, [r7, #20]
 800e692:	e018      	b.n	800e6c6 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x62>
    if (s1[i] != s2[i])
 800e694:	1d3b      	adds	r3, r7, #4
 800e696:	6979      	ldr	r1, [r7, #20]
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fa fddf 	bl	800925c <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	461c      	mov	r4, r3
 800e6a2:	463b      	mov	r3, r7
 800e6a4:	6979      	ldr	r1, [r7, #20]
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7fa fdd8 	bl	800925c <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamStringixEj>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	429c      	cmp	r4, r3
 800e6b0:	bf14      	ite	ne
 800e6b2:	2301      	movne	r3, #1
 800e6b4:	2300      	moveq	r3, #0
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d001      	beq.n	800e6c0 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x5c>
      return false;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	e007      	b.n	800e6d0 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x6c>
  for (size_t i = 0; i < size1; i++) {
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	617b      	str	r3, [r7, #20]
 800e6c6:	697a      	ldr	r2, [r7, #20]
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d3e2      	bcc.n	800e694 <_ZN11ArduinoJson8V6213HB26detail12stringEqualsINS1_19StaticStringAdapterES3_EENS1_9enable_ifIXlesrT_11typeSortKeysrT0_11typeSortKeyEbE4typeES5_S6_+0x30>
  return true;
 800e6ce:	2301      	movs	r3, #1
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	371c      	adds	r7, #28
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd90      	pop	{r4, r7, pc}

0800e6d8 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc>:
  static inline uint8_t decodeHex(char c) {
 800e6d8:	b480      	push	{r7}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	4603      	mov	r3, r0
 800e6e0:	71fb      	strb	r3, [r7, #7]
    if (c < 'A')
 800e6e2:	79fb      	ldrb	r3, [r7, #7]
 800e6e4:	2b40      	cmp	r3, #64	; 0x40
 800e6e6:	d803      	bhi.n	800e6f0 <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc+0x18>
      return uint8_t(c - '0');
 800e6e8:	79fb      	ldrb	r3, [r7, #7]
 800e6ea:	3b30      	subs	r3, #48	; 0x30
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	e006      	b.n	800e6fe <_ZN11ArduinoJson8V6213HB26detail16JsonDeserializerINS1_6ReaderINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEENS1_12StringCopierEE9decodeHexEc+0x26>
    c = char(c & ~0x20);  // uppercase
 800e6f0:	79fb      	ldrb	r3, [r7, #7]
 800e6f2:	f023 0320 	bic.w	r3, r3, #32
 800e6f6:	71fb      	strb	r3, [r7, #7]
    return uint8_t(c - 'A' + 10);
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	3b37      	subs	r3, #55	; 0x37
 800e6fc:	b2db      	uxtb	r3, r3
  }
 800e6fe:	4618      	mov	r0, r3
 800e700:	370c      	adds	r7, #12
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr

0800e70a <_ZN11ArduinoJson8V6213HB26detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_>:
VariantData* variantGetMember(const VariantData* var, TAdaptedString key) {
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b082      	sub	sp, #8
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	6039      	str	r1, [r7, #0]
  if (!var)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d101      	bne.n	800e71e <_ZN11ArduinoJson8V6213HB26detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_+0x14>
    return 0;
 800e71a:	2300      	movs	r3, #0
 800e71c:	e006      	b.n	800e72c <_ZN11ArduinoJson8V6213HB26detail16variantGetMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataEPKS4_T_+0x22>
  return var->getMember(key);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6839      	ldr	r1, [r7, #0]
 800e722:	4618      	mov	r0, r3
 800e724:	f000 f8b4 	bl	800e890 <_ZNK11ArduinoJson8V6213HB26detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_>
 800e728:	4603      	mov	r3, r0
 800e72a:	bf00      	nop
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3708      	adds	r7, #8
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <_ZN11ArduinoJson8V6213HB26detail17CountingDecoratorINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE5writeEh>:
  void write(uint8_t c) {
 800e734:	b580      	push	{r7, lr}
 800e736:	b082      	sub	sp, #8
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	460b      	mov	r3, r1
 800e73e:	70fb      	strb	r3, [r7, #3]
    count_ += writer_.write(c);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	78fa      	ldrb	r2, [r7, #3]
 800e744:	4611      	mov	r1, r2
 800e746:	4618      	mov	r0, r3
 800e748:	f000 f8ba 	bl	800e8c0 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>
 800e74c:	4602      	mov	r2, r0
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	441a      	add	r2, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	605a      	str	r2, [r3, #4]
  }
 800e758:	bf00      	nop
 800e75a:	3708      	adds	r7, #8
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_>:
  typename enable_if<is_unsigned<T>::value>::type writeInteger(T value) {
 800e760:	b580      	push	{r7, lr}
 800e762:	b08a      	sub	sp, #40	; 0x28
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	460b      	mov	r3, r1
 800e76a:	807b      	strh	r3, [r7, #2]
    char* end = buffer + sizeof(buffer);
 800e76c:	f107 0308 	add.w	r3, r7, #8
 800e770:	3316      	adds	r3, #22
 800e772:	623b      	str	r3, [r7, #32]
    char* begin = end;
 800e774:	6a3b      	ldr	r3, [r7, #32]
 800e776:	627b      	str	r3, [r7, #36]	; 0x24
      *--begin = char(value % 10 + '0');
 800e778:	887a      	ldrh	r2, [r7, #2]
 800e77a:	4b12      	ldr	r3, [pc, #72]	; (800e7c4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 800e77c:	fba3 1302 	umull	r1, r3, r3, r2
 800e780:	08d9      	lsrs	r1, r3, #3
 800e782:	460b      	mov	r3, r1
 800e784:	009b      	lsls	r3, r3, #2
 800e786:	440b      	add	r3, r1
 800e788:	005b      	lsls	r3, r3, #1
 800e78a:	1ad3      	subs	r3, r2, r3
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e792:	3a01      	subs	r2, #1
 800e794:	627a      	str	r2, [r7, #36]	; 0x24
 800e796:	3330      	adds	r3, #48	; 0x30
 800e798:	b2da      	uxtb	r2, r3
 800e79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79c:	701a      	strb	r2, [r3, #0]
      value = T(value / 10);
 800e79e:	887b      	ldrh	r3, [r7, #2]
 800e7a0:	4a08      	ldr	r2, [pc, #32]	; (800e7c4 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x64>)
 800e7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e7a6:	08db      	lsrs	r3, r3, #3
 800e7a8:	807b      	strh	r3, [r7, #2]
    } while (value);
 800e7aa:	887b      	ldrh	r3, [r7, #2]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d1e3      	bne.n	800e778 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE12writeIntegerItEENS1_9enable_ifIXsrNS1_11is_unsignedIT_EE5valueEvE4typeESF_+0x18>
    writeRaw(begin, end);
 800e7b0:	6a3a      	ldr	r2, [r7, #32]
 800e7b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f7ff feb5 	bl	800e524 <_ZN11ArduinoJson8V6213HB26detail13TextFormatterINS1_6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvEEE8writeRawEPKcSD_>
  }
 800e7ba:	bf00      	nop
 800e7bc:	3728      	adds	r7, #40	; 0x28
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}
 800e7c2:	bf00      	nop
 800e7c4:	cccccccd 	.word	0xcccccccd

0800e7c8 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline VariantData* CollectionData::getOrAddMember(TAdaptedString key,
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
  if (key.isNull())
 800e7d4:	f107 0308 	add.w	r3, r7, #8
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f7fa fd1a 	bl	8009212 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 800e7de:	4603      	mov	r3, r0
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d001      	beq.n	800e7e8 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x20>
    return 0;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	e013      	b.n	800e810 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x48>
  VariantSlot* slot = getSlot(key);
 800e7e8:	68b9      	ldr	r1, [r7, #8]
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	f7ff fcac 	bl	800e148 <_ZNK11ArduinoJson8V6213HB26detail14CollectionData7getSlotINS1_19StaticStringAdapterEEEPNS1_11VariantSlotET_>
 800e7f0:	6178      	str	r0, [r7, #20]
  if (slot)
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d004      	beq.n	800e802 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x3a>
    return slot->data();
 800e7f8:	6978      	ldr	r0, [r7, #20]
 800e7fa:	f7fa fe00 	bl	80093fe <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800e7fe:	4603      	mov	r3, r0
 800e800:	e006      	b.n	800e810 <_ZN11ArduinoJson8V6213HB26detail14CollectionData14getOrAddMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x48>
  return addMember(key, pool);
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	68b9      	ldr	r1, [r7, #8]
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f000 f86c 	bl	800e8e4 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>
 800e80c:	4603      	mov	r3, r0
 800e80e:	bf00      	nop
}
 800e810:	4618      	mov	r0, r3
 800e812:	3718      	adds	r7, #24
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <_ZN9__gnu_cxxltIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e818:	b590      	push	{r4, r7, lr}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() < __rhs.base(); }
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f000 f883 	bl	800e92e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800e828:	4603      	mov	r3, r0
 800e82a:	681c      	ldr	r4, [r3, #0]
 800e82c:	6838      	ldr	r0, [r7, #0]
 800e82e:	f000 f87e 	bl	800e92e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>
 800e832:	4603      	mov	r3, r0
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	429c      	cmp	r4, r3
 800e838:	bf34      	ite	cc
 800e83a:	2301      	movcc	r3, #1
 800e83c:	2300      	movcs	r3, #0
 800e83e:	b2db      	uxtb	r3, r3
 800e840:	4618      	mov	r0, r3
 800e842:	370c      	adds	r7, #12
 800e844:	46bd      	mov	sp, r7
 800e846:	bd90      	pop	{r4, r7, pc}

0800e848 <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEppEi>:
      operator++(int) _GLIBCXX_NOEXCEPT
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current++); }
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	1c59      	adds	r1, r3, #1
 800e858:	687a      	ldr	r2, [r7, #4]
 800e85a:	6011      	str	r1, [r2, #0]
 800e85c:	60fb      	str	r3, [r7, #12]
 800e85e:	f107 020c 	add.w	r2, r7, #12
 800e862:	f107 0308 	add.w	r3, r7, #8
 800e866:	4611      	mov	r1, r2
 800e868:	4618      	mov	r0, r3
 800e86a:	f7fe ffcf 	bl	800d80c <_ZN9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC1ERKS2_>
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	4618      	mov	r0, r3
 800e872:	3710      	adds	r7, #16
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4618      	mov	r0, r3
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <_ZNK11ArduinoJson8V6213HB26detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_>:
  VariantData* getMember(TAdaptedString key) const {
 800e890:	b580      	push	{r7, lr}
 800e892:	b084      	sub	sp, #16
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
 800e898:	6039      	str	r1, [r7, #0]
    const CollectionData* col = asObject();
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7fa ff65 	bl	800976a <_ZNK11ArduinoJson8V6213HB26detail11VariantData8asObjectEv>
 800e8a0:	60f8      	str	r0, [r7, #12]
    return col ? col->getMember(key) : 0;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d006      	beq.n	800e8b6 <_ZNK11ArduinoJson8V6213HB26detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_+0x26>
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	6839      	ldr	r1, [r7, #0]
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7ff f8b5 	bl	800da1c <_ZNK11ArduinoJson8V6213HB26detail14CollectionData9getMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	e000      	b.n	800e8b8 <_ZNK11ArduinoJson8V6213HB26detail11VariantData9getMemberINS1_19StaticStringAdapterEEEPS2_T_+0x28>
 800e8b6:	2300      	movs	r3, #0
  }
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3710      	adds	r7, #16
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <_ZN11ArduinoJson8V6213HB26detail6WriterINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEvE5writeEh>:
  size_t write(uint8_t c) {
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b082      	sub	sp, #8
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
 800e8c8:	460b      	mov	r3, r1
 800e8ca:	70fb      	strb	r3, [r7, #3]
    str_->push_back(static_cast<char>(c));
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	78fa      	ldrb	r2, [r7, #3]
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f000 fafd 	bl	800eed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
    return 1;
 800e8da:	2301      	movs	r3, #1
  }
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE>:
inline VariantData* CollectionData::addMember(TAdaptedString key,
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	607a      	str	r2, [r7, #4]
  VariantSlot* slot = addSlot(pool);
 800e8f0:	6879      	ldr	r1, [r7, #4]
 800e8f2:	68f8      	ldr	r0, [r7, #12]
 800e8f4:	f7fb f902 	bl	8009afc <_ZN11ArduinoJson8V6213HB26detail14CollectionData7addSlotEPNS1_10MemoryPoolE>
 800e8f8:	6178      	str	r0, [r7, #20]
  if (!slotSetKey(slot, key, pool)) {
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	68b9      	ldr	r1, [r7, #8]
 800e8fe:	6978      	ldr	r0, [r7, #20]
 800e900:	f000 f820 	bl	800e944 <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE>
 800e904:	4603      	mov	r3, r0
 800e906:	f083 0301 	eor.w	r3, r3, #1
 800e90a:	b2db      	uxtb	r3, r3
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d005      	beq.n	800e91c <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x38>
    removeSlot(slot);
 800e910:	6979      	ldr	r1, [r7, #20]
 800e912:	68f8      	ldr	r0, [r7, #12]
 800e914:	f7fb f95b 	bl	8009bce <_ZN11ArduinoJson8V6213HB26detail14CollectionData10removeSlotEPNS1_11VariantSlotE>
    return 0;
 800e918:	2300      	movs	r3, #0
 800e91a:	e004      	b.n	800e926 <_ZN11ArduinoJson8V6213HB26detail14CollectionData9addMemberINS1_19StaticStringAdapterEEEPNS1_11VariantDataET_PNS1_10MemoryPoolE+0x42>
  return slot->data();
 800e91c:	6978      	ldr	r0, [r7, #20]
 800e91e:	f7fa fd6e 	bl	80093fe <_ZN11ArduinoJson8V6213HB26detail11VariantSlot4dataEv>
 800e922:	4603      	mov	r3, r0
 800e924:	bf00      	nop
}
 800e926:	4618      	mov	r0, r3
 800e928:	3718      	adds	r7, #24
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}

0800e92e <_ZNK9__gnu_cxx17__normal_iteratorIPKcNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e92e:	b480      	push	{r7}
 800e930:	b083      	sub	sp, #12
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	4618      	mov	r0, r3
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE>:
inline bool slotSetKey(VariantSlot* var, TAdaptedString key, MemoryPool* pool) {
 800e944:	b580      	push	{r7, lr}
 800e946:	b086      	sub	sp, #24
 800e948:	af00      	add	r7, sp, #0
 800e94a:	60f8      	str	r0, [r7, #12]
 800e94c:	60b9      	str	r1, [r7, #8]
 800e94e:	607a      	str	r2, [r7, #4]
  if (!var)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE+0x16>
    return false;
 800e956:	2300      	movs	r3, #0
 800e958:	e00c      	b.n	800e974 <_ZN11ArduinoJson8V6213HB26detail10slotSetKeyINS1_19StaticStringAdapterEEEbPNS1_11VariantSlotET_PNS1_10MemoryPoolE+0x30>
  return storeString(pool, key, SlotKeySetter(var));
 800e95a:	f107 0314 	add.w	r3, r7, #20
 800e95e:	68f9      	ldr	r1, [r7, #12]
 800e960:	4618      	mov	r0, r3
 800e962:	f7fb f84a 	bl	80099fa <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterC1EPNS1_11VariantSlotE>
 800e966:	697a      	ldr	r2, [r7, #20]
 800e968:	68b9      	ldr	r1, [r7, #8]
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 f806 	bl	800e97c <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_T0_>
 800e970:	4603      	mov	r3, r0
 800e972:	bf00      	nop
}
 800e974:	4618      	mov	r0, r3
 800e976:	3718      	adds	r7, #24
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_T0_>:
bool storeString(MemoryPool* pool, TAdaptedString str, TCallback callback) {
 800e97c:	b590      	push	{r4, r7, lr}
 800e97e:	b085      	sub	sp, #20
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
  return storeString(pool, str, str.storagePolicy(), callback);
 800e988:	f107 0308 	add.w	r3, r7, #8
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7fa fc90 	bl	80092b2 <_ZNK11ArduinoJson8V6213HB26detail19StaticStringAdapter13storagePolicyEv>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4622      	mov	r2, r4
 800e996:	68b9      	ldr	r1, [r7, #8]
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f000 f805 	bl	800e9a8 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>
 800e99e:	4603      	mov	r3, r0
}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3714      	adds	r7, #20
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd90      	pop	{r4, r7, pc}

0800e9a8 <_ZN11ArduinoJson8V6213HB26detail11storeStringINS1_19StaticStringAdapterENS1_13SlotKeySetterEEEbPNS1_10MemoryPoolET_NS1_19StringStoragePolicy4LinkET0_>:
bool storeString(MemoryPool*, TAdaptedString str, StringStoragePolicy::Link,
 800e9a8:	b590      	push	{r4, r7, lr}
 800e9aa:	b089      	sub	sp, #36	; 0x24
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	713a      	strb	r2, [r7, #4]
 800e9b4:	603b      	str	r3, [r7, #0]
  JsonString storedString(str.data(), str.size(), JsonString::Linked);
 800e9b6:	f107 0308 	add.w	r3, r7, #8
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f7fa fc5e 	bl	800927c <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4dataEv>
 800e9c0:	4604      	mov	r4, r0
 800e9c2:	f107 0308 	add.w	r3, r7, #8
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7fa fc34 	bl	8009234 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString4sizeEv>
 800e9cc:	4602      	mov	r2, r0
 800e9ce:	f107 0014 	add.w	r0, r7, #20
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	4621      	mov	r1, r4
 800e9d6:	f7fa fcb5 	bl	8009344 <_ZN11ArduinoJson8V6213HB210JsonStringC1EPKcjNS1_9OwnershipE>
  callback(storedString);
 800e9da:	4638      	mov	r0, r7
 800e9dc:	f107 0314 	add.w	r3, r7, #20
 800e9e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e9e2:	f7fe fd01 	bl	800d3e8 <_ZN11ArduinoJson8V6213HB26detail13SlotKeySetterclINS0_10JsonStringEEEvT_>
  return !str.isNull();
 800e9e6:	f107 0308 	add.w	r3, r7, #8
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f7fa fc11 	bl	8009212 <_ZNK11ArduinoJson8V6213HB26detail23ZeroTerminatedRamString6isNullEv>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	f083 0301 	eor.w	r3, r3, #1
 800e9f6:	b2db      	uxtb	r3, r3
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3724      	adds	r7, #36	; 0x24
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd90      	pop	{r4, r7, pc}

0800ea00 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800ea08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800ea0c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800ea10:	f003 0301 	and.w	r3, r3, #1
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d013      	beq.n	800ea40 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800ea18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800ea1c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800ea20:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d00b      	beq.n	800ea40 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800ea28:	e000      	b.n	800ea2c <ITM_SendChar+0x2c>
    {
      __NOP();
 800ea2a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800ea2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d0f9      	beq.n	800ea2a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800ea36:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	b2d2      	uxtb	r2, r2
 800ea3e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800ea40:	687b      	ldr	r3, [r7, #4]
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	370c      	adds	r7, #12
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr

0800ea4e <__io_putchar>:
 *  Created on: Oct 25, 2023
 *      Author: jeffr
 */

#include "stm32f4xx.h"
int __io_putchar(int ch){
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b082      	sub	sp, #8
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7ff ffd1 	bl	800ea00 <ITM_SendChar>
	return ch;
 800ea5e:	687b      	ldr	r3, [r7, #4]
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <SysTick_Handler>:
#include <MQTT/mqtt_interface.h>

extern volatile uint32_t uwTick;
/*ISR---------------------------------------*/

void SysTick_Handler(void){
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	af00      	add	r7, sp, #0
	if(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk){
 800ea6c:	4b07      	ldr	r3, [pc, #28]	; (800ea8c <SysTick_Handler+0x24>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d007      	beq.n	800ea88 <SysTick_Handler+0x20>
		uwTick += 1;
 800ea78:	4b05      	ldr	r3, [pc, #20]	; (800ea90 <SysTick_Handler+0x28>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	4a04      	ldr	r2, [pc, #16]	; (800ea90 <SysTick_Handler+0x28>)
 800ea80:	6013      	str	r3, [r2, #0]
		//mqtt inteface tick counter
		MilliTimer_Handler();
 800ea82:	f7f6 fce9 	bl	8005458 <MilliTimer_Handler>
	}
	return;
 800ea86:	bf00      	nop
 800ea88:	bf00      	nop
}
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	e000e010 	.word	0xe000e010
 800ea90:	20000180 	.word	0x20000180

0800ea94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ea94:	b480      	push	{r7}
 800ea96:	af00      	add	r7, sp, #0
  return 1;
 800ea98:	2301      	movs	r3, #1
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <_kill>:

int _kill(int pid, int sig)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800eaae:	f000 fe95 	bl	800f7dc <__errno>
 800eab2:	4603      	mov	r3, r0
 800eab4:	2216      	movs	r2, #22
 800eab6:	601a      	str	r2, [r3, #0]
  return -1;
 800eab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3708      	adds	r7, #8
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <_exit>:

void _exit (int status)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800eacc:	f04f 31ff 	mov.w	r1, #4294967295
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f7ff ffe7 	bl	800eaa4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ead6:	e7fe      	b.n	800ead6 <_exit+0x12>

0800ead8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eae4:	2300      	movs	r3, #0
 800eae6:	617b      	str	r3, [r7, #20]
 800eae8:	e00a      	b.n	800eb00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800eaea:	f3af 8000 	nop.w
 800eaee:	4601      	mov	r1, r0
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	1c5a      	adds	r2, r3, #1
 800eaf4:	60ba      	str	r2, [r7, #8]
 800eaf6:	b2ca      	uxtb	r2, r1
 800eaf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	3301      	adds	r3, #1
 800eafe:	617b      	str	r3, [r7, #20]
 800eb00:	697a      	ldr	r2, [r7, #20]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	dbf0      	blt.n	800eaea <_read+0x12>
  }

  return len;
 800eb08:	687b      	ldr	r3, [r7, #4]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3718      	adds	r7, #24
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b086      	sub	sp, #24
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	60f8      	str	r0, [r7, #12]
 800eb1a:	60b9      	str	r1, [r7, #8]
 800eb1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eb1e:	2300      	movs	r3, #0
 800eb20:	617b      	str	r3, [r7, #20]
 800eb22:	e009      	b.n	800eb38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	1c5a      	adds	r2, r3, #1
 800eb28:	60ba      	str	r2, [r7, #8]
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7ff ff8e 	bl	800ea4e <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	3301      	adds	r3, #1
 800eb36:	617b      	str	r3, [r7, #20]
 800eb38:	697a      	ldr	r2, [r7, #20]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	dbf1      	blt.n	800eb24 <_write+0x12>
  }
  return len;
 800eb40:	687b      	ldr	r3, [r7, #4]
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3718      	adds	r7, #24
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <_close>:

int _close(int file)
{
 800eb4a:	b480      	push	{r7}
 800eb4c:	b083      	sub	sp, #12
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800eb52:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	370c      	adds	r7, #12
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb60:	4770      	bx	lr

0800eb62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800eb62:	b480      	push	{r7}
 800eb64:	b083      	sub	sp, #12
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
 800eb6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eb72:	605a      	str	r2, [r3, #4]
  return 0;
 800eb74:	2300      	movs	r3, #0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <_isatty>:

int _isatty(int file)
{
 800eb82:	b480      	push	{r7}
 800eb84:	b083      	sub	sp, #12
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800eb8a:	2301      	movs	r3, #1
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800eba4:	2300      	movs	r3, #0
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3714      	adds	r7, #20
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
	...

0800ebb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b086      	sub	sp, #24
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ebbc:	4a14      	ldr	r2, [pc, #80]	; (800ec10 <_sbrk+0x5c>)
 800ebbe:	4b15      	ldr	r3, [pc, #84]	; (800ec14 <_sbrk+0x60>)
 800ebc0:	1ad3      	subs	r3, r2, r3
 800ebc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ebc8:	4b13      	ldr	r3, [pc, #76]	; (800ec18 <_sbrk+0x64>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d102      	bne.n	800ebd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ebd0:	4b11      	ldr	r3, [pc, #68]	; (800ec18 <_sbrk+0x64>)
 800ebd2:	4a12      	ldr	r2, [pc, #72]	; (800ec1c <_sbrk+0x68>)
 800ebd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ebd6:	4b10      	ldr	r3, [pc, #64]	; (800ec18 <_sbrk+0x64>)
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4413      	add	r3, r2
 800ebde:	693a      	ldr	r2, [r7, #16]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d207      	bcs.n	800ebf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ebe4:	f000 fdfa 	bl	800f7dc <__errno>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	220c      	movs	r2, #12
 800ebec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ebee:	f04f 33ff 	mov.w	r3, #4294967295
 800ebf2:	e009      	b.n	800ec08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ebf4:	4b08      	ldr	r3, [pc, #32]	; (800ec18 <_sbrk+0x64>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ebfa:	4b07      	ldr	r3, [pc, #28]	; (800ec18 <_sbrk+0x64>)
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	4413      	add	r3, r2
 800ec02:	4a05      	ldr	r2, [pc, #20]	; (800ec18 <_sbrk+0x64>)
 800ec04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ec06:	68fb      	ldr	r3, [r7, #12]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	3718      	adds	r7, #24
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	20020000 	.word	0x20020000
 800ec14:	00000400 	.word	0x00000400
 800ec18:	20002048 	.word	0x20002048
 800ec1c:	200021a0 	.word	0x200021a0

0800ec20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ec20:	b480      	push	{r7}
 800ec22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ec24:	4b06      	ldr	r3, [pc, #24]	; (800ec40 <SystemInit+0x20>)
 800ec26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec2a:	4a05      	ldr	r2, [pc, #20]	; (800ec40 <SystemInit+0x20>)
 800ec2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ec34:	bf00      	nop
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr
 800ec3e:	bf00      	nop
 800ec40:	e000ed00 	.word	0xe000ed00

0800ec44 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b087      	sub	sp, #28
 800ec48:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	613b      	str	r3, [r7, #16]
 800ec4e:	2300      	movs	r3, #0
 800ec50:	617b      	str	r3, [r7, #20]
 800ec52:	2302      	movs	r3, #2
 800ec54:	60fb      	str	r3, [r7, #12]
 800ec56:	2300      	movs	r3, #0
 800ec58:	60bb      	str	r3, [r7, #8]
 800ec5a:	2302      	movs	r3, #2
 800ec5c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800ec5e:	4b34      	ldr	r3, [pc, #208]	; (800ed30 <SystemCoreClockUpdate+0xec>)
 800ec60:	689b      	ldr	r3, [r3, #8]
 800ec62:	f003 030c 	and.w	r3, r3, #12
 800ec66:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800ec68:	693b      	ldr	r3, [r7, #16]
 800ec6a:	2b08      	cmp	r3, #8
 800ec6c:	d011      	beq.n	800ec92 <SystemCoreClockUpdate+0x4e>
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	2b08      	cmp	r3, #8
 800ec72:	d844      	bhi.n	800ecfe <SystemCoreClockUpdate+0xba>
 800ec74:	693b      	ldr	r3, [r7, #16]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d003      	beq.n	800ec82 <SystemCoreClockUpdate+0x3e>
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	2b04      	cmp	r3, #4
 800ec7e:	d004      	beq.n	800ec8a <SystemCoreClockUpdate+0x46>
 800ec80:	e03d      	b.n	800ecfe <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800ec82:	4b2c      	ldr	r3, [pc, #176]	; (800ed34 <SystemCoreClockUpdate+0xf0>)
 800ec84:	4a2c      	ldr	r2, [pc, #176]	; (800ed38 <SystemCoreClockUpdate+0xf4>)
 800ec86:	601a      	str	r2, [r3, #0]
      break;
 800ec88:	e03d      	b.n	800ed06 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800ec8a:	4b2a      	ldr	r3, [pc, #168]	; (800ed34 <SystemCoreClockUpdate+0xf0>)
 800ec8c:	4a2b      	ldr	r2, [pc, #172]	; (800ed3c <SystemCoreClockUpdate+0xf8>)
 800ec8e:	601a      	str	r2, [r3, #0]
      break;
 800ec90:	e039      	b.n	800ed06 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800ec92:	4b27      	ldr	r3, [pc, #156]	; (800ed30 <SystemCoreClockUpdate+0xec>)
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	0d9b      	lsrs	r3, r3, #22
 800ec98:	f003 0301 	and.w	r3, r3, #1
 800ec9c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ec9e:	4b24      	ldr	r3, [pc, #144]	; (800ed30 <SystemCoreClockUpdate+0xec>)
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eca6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d00c      	beq.n	800ecc8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800ecae:	4a23      	ldr	r2, [pc, #140]	; (800ed3c <SystemCoreClockUpdate+0xf8>)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecb6:	4a1e      	ldr	r2, [pc, #120]	; (800ed30 <SystemCoreClockUpdate+0xec>)
 800ecb8:	6852      	ldr	r2, [r2, #4]
 800ecba:	0992      	lsrs	r2, r2, #6
 800ecbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ecc0:	fb02 f303 	mul.w	r3, r2, r3
 800ecc4:	617b      	str	r3, [r7, #20]
 800ecc6:	e00b      	b.n	800ece0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800ecc8:	4a1b      	ldr	r2, [pc, #108]	; (800ed38 <SystemCoreClockUpdate+0xf4>)
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecd0:	4a17      	ldr	r2, [pc, #92]	; (800ed30 <SystemCoreClockUpdate+0xec>)
 800ecd2:	6852      	ldr	r2, [r2, #4]
 800ecd4:	0992      	lsrs	r2, r2, #6
 800ecd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ecda:	fb02 f303 	mul.w	r3, r2, r3
 800ecde:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800ece0:	4b13      	ldr	r3, [pc, #76]	; (800ed30 <SystemCoreClockUpdate+0xec>)
 800ece2:	685b      	ldr	r3, [r3, #4]
 800ece4:	0c1b      	lsrs	r3, r3, #16
 800ece6:	f003 0303 	and.w	r3, r3, #3
 800ecea:	3301      	adds	r3, #1
 800ecec:	005b      	lsls	r3, r3, #1
 800ecee:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800ecf0:	697a      	ldr	r2, [r7, #20]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecf8:	4a0e      	ldr	r2, [pc, #56]	; (800ed34 <SystemCoreClockUpdate+0xf0>)
 800ecfa:	6013      	str	r3, [r2, #0]
      break;
 800ecfc:	e003      	b.n	800ed06 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800ecfe:	4b0d      	ldr	r3, [pc, #52]	; (800ed34 <SystemCoreClockUpdate+0xf0>)
 800ed00:	4a0d      	ldr	r2, [pc, #52]	; (800ed38 <SystemCoreClockUpdate+0xf4>)
 800ed02:	601a      	str	r2, [r3, #0]
      break;
 800ed04:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800ed06:	4b0a      	ldr	r3, [pc, #40]	; (800ed30 <SystemCoreClockUpdate+0xec>)
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	091b      	lsrs	r3, r3, #4
 800ed0c:	f003 030f 	and.w	r3, r3, #15
 800ed10:	4a0b      	ldr	r2, [pc, #44]	; (800ed40 <SystemCoreClockUpdate+0xfc>)
 800ed12:	5cd3      	ldrb	r3, [r2, r3]
 800ed14:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800ed16:	4b07      	ldr	r3, [pc, #28]	; (800ed34 <SystemCoreClockUpdate+0xf0>)
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	fa22 f303 	lsr.w	r3, r2, r3
 800ed20:	4a04      	ldr	r2, [pc, #16]	; (800ed34 <SystemCoreClockUpdate+0xf0>)
 800ed22:	6013      	str	r3, [r2, #0]
}
 800ed24:	bf00      	nop
 800ed26:	371c      	adds	r7, #28
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr
 800ed30:	40023800 	.word	0x40023800
 800ed34:	200000a0 	.word	0x200000a0
 800ed38:	00f42400 	.word	0x00f42400
 800ed3c:	017d7840 	.word	0x017d7840
 800ed40:	080121c0 	.word	0x080121c0

0800ed44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ed44:	480d      	ldr	r0, [pc, #52]	; (800ed7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ed46:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800ed48:	f7ff ff6a 	bl	800ec20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ed4c:	480c      	ldr	r0, [pc, #48]	; (800ed80 <LoopForever+0x6>)
  ldr r1, =_edata
 800ed4e:	490d      	ldr	r1, [pc, #52]	; (800ed84 <LoopForever+0xa>)
  ldr r2, =_sidata
 800ed50:	4a0d      	ldr	r2, [pc, #52]	; (800ed88 <LoopForever+0xe>)
  movs r3, #0
 800ed52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ed54:	e002      	b.n	800ed5c <LoopCopyDataInit>

0800ed56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ed56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ed58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ed5a:	3304      	adds	r3, #4

0800ed5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ed5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ed5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ed60:	d3f9      	bcc.n	800ed56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ed62:	4a0a      	ldr	r2, [pc, #40]	; (800ed8c <LoopForever+0x12>)
  ldr r4, =_ebss
 800ed64:	4c0a      	ldr	r4, [pc, #40]	; (800ed90 <LoopForever+0x16>)
  movs r3, #0
 800ed66:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ed68:	e001      	b.n	800ed6e <LoopFillZerobss>

0800ed6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ed6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ed6c:	3204      	adds	r2, #4

0800ed6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ed6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ed70:	d3fb      	bcc.n	800ed6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800ed72:	f000 fd39 	bl	800f7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800ed76:	f7fb fbb9 	bl	800a4ec <main>

0800ed7a <LoopForever>:

LoopForever:
  b LoopForever
 800ed7a:	e7fe      	b.n	800ed7a <LoopForever>
  ldr   r0, =_estack
 800ed7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ed80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800ed84:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800ed88:	0801226c 	.word	0x0801226c
  ldr r2, =_sbss
 800ed8c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 800ed90:	2000219c 	.word	0x2000219c

0800ed94 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ed94:	e7fe      	b.n	800ed94 <ADC_IRQHandler>

0800ed96 <_ZNSaIcEC1Ev>:
 800ed96:	4770      	bx	lr

0800ed98 <_ZNSaIcED1Ev>:
 800ed98:	4770      	bx	lr

0800ed9a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800ed9a:	b10a      	cbz	r2, 800eda0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800ed9c:	f000 bd53 	b.w	800f846 <memcpy>
 800eda0:	4770      	bx	lr
	...

0800eda4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800eda4:	b508      	push	{r3, lr}
 800eda6:	680b      	ldr	r3, [r1, #0]
 800eda8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edac:	d302      	bcc.n	800edb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800edae:	480d      	ldr	r0, [pc, #52]	; (800ede4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800edb0:	f000 f92d 	bl	800f00e <_ZSt20__throw_length_errorPKc>
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d90b      	bls.n	800edd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800edb8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800edbc:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800edc0:	d206      	bcs.n	800edd0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800edc2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800edc6:	bf2a      	itet	cs
 800edc8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800edcc:	6008      	strcc	r0, [r1, #0]
 800edce:	600b      	strcs	r3, [r1, #0]
 800edd0:	6808      	ldr	r0, [r1, #0]
 800edd2:	3001      	adds	r0, #1
 800edd4:	d501      	bpl.n	800edda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800edd6:	f000 f914 	bl	800f002 <_ZSt17__throw_bad_allocv>
 800edda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800edde:	f000 b8ff 	b.w	800efe0 <_Znwj>
 800ede2:	bf00      	nop
 800ede4:	080121d0 	.word	0x080121d0

0800ede8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800ede8:	f850 3b08 	ldr.w	r3, [r0], #8
 800edec:	4283      	cmp	r3, r0
 800edee:	d002      	beq.n	800edf6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800edf0:	4618      	mov	r0, r3
 800edf2:	f000 b8f3 	b.w	800efdc <_ZdlPv>
 800edf6:	4770      	bx	lr

0800edf8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800edf8:	6840      	ldr	r0, [r0, #4]
 800edfa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800edfe:	3901      	subs	r1, #1
 800ee00:	1a09      	subs	r1, r1, r0
 800ee02:	4291      	cmp	r1, r2
 800ee04:	b508      	push	{r3, lr}
 800ee06:	d202      	bcs.n	800ee0e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f000 f900 	bl	800f00e <_ZSt20__throw_length_errorPKc>
 800ee0e:	bd08      	pop	{r3, pc}

0800ee10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800ee10:	2a01      	cmp	r2, #1
 800ee12:	b410      	push	{r4}
 800ee14:	d104      	bne.n	800ee20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800ee16:	780a      	ldrb	r2, [r1, #0]
 800ee18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee1c:	7002      	strb	r2, [r0, #0]
 800ee1e:	4770      	bx	lr
 800ee20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee24:	f7ff bfb9 	b.w	800ed9a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800ee28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800ee28:	b508      	push	{r3, lr}
 800ee2a:	1a52      	subs	r2, r2, r1
 800ee2c:	f7ff fff0 	bl	800ee10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ee30:	bd08      	pop	{r3, pc}

0800ee32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800ee32:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee36:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ee38:	461f      	mov	r7, r3
 800ee3a:	6843      	ldr	r3, [r0, #4]
 800ee3c:	eb01 0802 	add.w	r8, r1, r2
 800ee40:	1ab2      	subs	r2, r6, r2
 800ee42:	441a      	add	r2, r3
 800ee44:	eba3 0908 	sub.w	r9, r3, r8
 800ee48:	4603      	mov	r3, r0
 800ee4a:	9201      	str	r2, [sp, #4]
 800ee4c:	f853 2b08 	ldr.w	r2, [r3], #8
 800ee50:	429a      	cmp	r2, r3
 800ee52:	bf18      	it	ne
 800ee54:	6882      	ldrne	r2, [r0, #8]
 800ee56:	460d      	mov	r5, r1
 800ee58:	bf08      	it	eq
 800ee5a:	220f      	moveq	r2, #15
 800ee5c:	a901      	add	r1, sp, #4
 800ee5e:	4604      	mov	r4, r0
 800ee60:	f7ff ffa0 	bl	800eda4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800ee64:	4682      	mov	sl, r0
 800ee66:	b11d      	cbz	r5, 800ee70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800ee68:	6821      	ldr	r1, [r4, #0]
 800ee6a:	462a      	mov	r2, r5
 800ee6c:	f7ff ffd0 	bl	800ee10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ee70:	b137      	cbz	r7, 800ee80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800ee72:	b12e      	cbz	r6, 800ee80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800ee74:	4632      	mov	r2, r6
 800ee76:	4639      	mov	r1, r7
 800ee78:	eb0a 0005 	add.w	r0, sl, r5
 800ee7c:	f7ff ffc8 	bl	800ee10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ee80:	f1b9 0f00 	cmp.w	r9, #0
 800ee84:	d007      	beq.n	800ee96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800ee86:	6821      	ldr	r1, [r4, #0]
 800ee88:	4435      	add	r5, r6
 800ee8a:	464a      	mov	r2, r9
 800ee8c:	4441      	add	r1, r8
 800ee8e:	eb0a 0005 	add.w	r0, sl, r5
 800ee92:	f7ff ffbd 	bl	800ee10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ee96:	4620      	mov	r0, r4
 800ee98:	f7ff ffa6 	bl	800ede8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800ee9c:	9b01      	ldr	r3, [sp, #4]
 800ee9e:	f8c4 a000 	str.w	sl, [r4]
 800eea2:	60a3      	str	r3, [r4, #8]
 800eea4:	b002      	add	sp, #8
 800eea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800eeaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800eeaa:	f100 0208 	add.w	r2, r0, #8
 800eeae:	6002      	str	r2, [r0, #0]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	6042      	str	r2, [r0, #4]
 800eeb4:	7202      	strb	r2, [r0, #8]
 800eeb6:	4770      	bx	lr

0800eeb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800eeb8:	b510      	push	{r4, lr}
 800eeba:	4604      	mov	r4, r0
 800eebc:	f7ff ff94 	bl	800ede8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800eec0:	4620      	mov	r0, r4
 800eec2:	bd10      	pop	{r4, pc}

0800eec4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5beginEv>:
 800eec4:	6800      	ldr	r0, [r0, #0]
 800eec6:	4770      	bx	lr

0800eec8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE3endEv>:
 800eec8:	e9d0 2000 	ldrd	r2, r0, [r0]
 800eecc:	4410      	add	r0, r2
 800eece:	4770      	bx	lr

0800eed0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 800eed0:	6840      	ldr	r0, [r0, #4]
 800eed2:	4770      	bx	lr

0800eed4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 800eed4:	4603      	mov	r3, r0
 800eed6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eed8:	f853 2b08 	ldr.w	r2, [r3], #8
 800eedc:	6846      	ldr	r6, [r0, #4]
 800eede:	429a      	cmp	r2, r3
 800eee0:	bf18      	it	ne
 800eee2:	6883      	ldrne	r3, [r0, #8]
 800eee4:	f106 0501 	add.w	r5, r6, #1
 800eee8:	bf08      	it	eq
 800eeea:	230f      	moveq	r3, #15
 800eeec:	429d      	cmp	r5, r3
 800eeee:	4604      	mov	r4, r0
 800eef0:	460f      	mov	r7, r1
 800eef2:	d906      	bls.n	800ef02 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 800eef4:	2301      	movs	r3, #1
 800eef6:	9300      	str	r3, [sp, #0]
 800eef8:	2300      	movs	r3, #0
 800eefa:	461a      	mov	r2, r3
 800eefc:	4631      	mov	r1, r6
 800eefe:	f7ff ff98 	bl	800ee32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800ef02:	6823      	ldr	r3, [r4, #0]
 800ef04:	559f      	strb	r7, [r3, r6]
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	6065      	str	r5, [r4, #4]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	555a      	strb	r2, [r3, r5]
 800ef0e:	b003      	add	sp, #12
 800ef10:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800ef12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef14:	4604      	mov	r4, r0
 800ef16:	4623      	mov	r3, r4
 800ef18:	6840      	ldr	r0, [r0, #4]
 800ef1a:	f853 6b08 	ldr.w	r6, [r3], #8
 800ef1e:	429e      	cmp	r6, r3
 800ef20:	bf18      	it	ne
 800ef22:	68a3      	ldrne	r3, [r4, #8]
 800ef24:	eb00 0502 	add.w	r5, r0, r2
 800ef28:	bf08      	it	eq
 800ef2a:	230f      	moveq	r3, #15
 800ef2c:	429d      	cmp	r5, r3
 800ef2e:	d80a      	bhi.n	800ef46 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800ef30:	b112      	cbz	r2, 800ef38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800ef32:	4430      	add	r0, r6
 800ef34:	f7ff ff6c 	bl	800ee10 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800ef38:	6823      	ldr	r3, [r4, #0]
 800ef3a:	6065      	str	r5, [r4, #4]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	4620      	mov	r0, r4
 800ef40:	555a      	strb	r2, [r3, r5]
 800ef42:	b002      	add	sp, #8
 800ef44:	bd70      	pop	{r4, r5, r6, pc}
 800ef46:	9200      	str	r2, [sp, #0]
 800ef48:	460b      	mov	r3, r1
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	4601      	mov	r1, r0
 800ef4e:	4620      	mov	r0, r4
 800ef50:	f7ff ff6f 	bl	800ee32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800ef54:	e7f0      	b.n	800ef38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
	...

0800ef58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 800ef58:	b570      	push	{r4, r5, r6, lr}
 800ef5a:	4b06      	ldr	r3, [pc, #24]	; (800ef74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	460d      	mov	r5, r1
 800ef60:	4616      	mov	r6, r2
 800ef62:	2100      	movs	r1, #0
 800ef64:	f7ff ff48 	bl	800edf8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800ef68:	4632      	mov	r2, r6
 800ef6a:	4629      	mov	r1, r5
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	f7ff ffd0 	bl	800ef12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800ef72:	bd70      	pop	{r4, r5, r6, pc}
 800ef74:	080121e8 	.word	0x080121e8

0800ef78 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800ef78:	6800      	ldr	r0, [r0, #0]
 800ef7a:	4770      	bx	lr

0800ef7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800ef7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef7e:	4604      	mov	r4, r0
 800ef80:	4616      	mov	r6, r2
 800ef82:	460d      	mov	r5, r1
 800ef84:	b919      	cbnz	r1, 800ef8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800ef86:	b112      	cbz	r2, 800ef8e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800ef88:	480d      	ldr	r0, [pc, #52]	; (800efc0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800ef8a:	f000 f83d 	bl	800f008 <_ZSt19__throw_logic_errorPKc>
 800ef8e:	1b73      	subs	r3, r6, r5
 800ef90:	2b0f      	cmp	r3, #15
 800ef92:	9301      	str	r3, [sp, #4]
 800ef94:	d907      	bls.n	800efa6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800ef96:	2200      	movs	r2, #0
 800ef98:	a901      	add	r1, sp, #4
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	f7ff ff02 	bl	800eda4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800efa0:	9b01      	ldr	r3, [sp, #4]
 800efa2:	6020      	str	r0, [r4, #0]
 800efa4:	60a3      	str	r3, [r4, #8]
 800efa6:	4632      	mov	r2, r6
 800efa8:	4629      	mov	r1, r5
 800efaa:	6820      	ldr	r0, [r4, #0]
 800efac:	f7ff ff3c 	bl	800ee28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800efb0:	9b01      	ldr	r3, [sp, #4]
 800efb2:	6822      	ldr	r2, [r4, #0]
 800efb4:	6063      	str	r3, [r4, #4]
 800efb6:	2100      	movs	r1, #0
 800efb8:	54d1      	strb	r1, [r2, r3]
 800efba:	b002      	add	sp, #8
 800efbc:	bd70      	pop	{r4, r5, r6, pc}
 800efbe:	bf00      	nop
 800efc0:	080121fd 	.word	0x080121fd

0800efc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 800efc4:	b510      	push	{r4, lr}
 800efc6:	f100 0308 	add.w	r3, r0, #8
 800efca:	4604      	mov	r4, r0
 800efcc:	6003      	str	r3, [r0, #0]
 800efce:	440a      	add	r2, r1
 800efd0:	f04f 0300 	mov.w	r3, #0
 800efd4:	f7ff ffd2 	bl	800ef7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800efd8:	4620      	mov	r0, r4
 800efda:	bd10      	pop	{r4, pc}

0800efdc <_ZdlPv>:
 800efdc:	f000 b832 	b.w	800f044 <free>

0800efe0 <_Znwj>:
 800efe0:	2801      	cmp	r0, #1
 800efe2:	bf38      	it	cc
 800efe4:	2001      	movcc	r0, #1
 800efe6:	b510      	push	{r4, lr}
 800efe8:	4604      	mov	r4, r0
 800efea:	4620      	mov	r0, r4
 800efec:	f000 f822 	bl	800f034 <malloc>
 800eff0:	b100      	cbz	r0, 800eff4 <_Znwj+0x14>
 800eff2:	bd10      	pop	{r4, pc}
 800eff4:	f000 f80e 	bl	800f014 <_ZSt15get_new_handlerv>
 800eff8:	b908      	cbnz	r0, 800effe <_Znwj+0x1e>
 800effa:	f000 f813 	bl	800f024 <abort>
 800effe:	4780      	blx	r0
 800f000:	e7f3      	b.n	800efea <_Znwj+0xa>

0800f002 <_ZSt17__throw_bad_allocv>:
 800f002:	b508      	push	{r3, lr}
 800f004:	f000 f80e 	bl	800f024 <abort>

0800f008 <_ZSt19__throw_logic_errorPKc>:
 800f008:	b508      	push	{r3, lr}
 800f00a:	f000 f80b 	bl	800f024 <abort>

0800f00e <_ZSt20__throw_length_errorPKc>:
 800f00e:	b508      	push	{r3, lr}
 800f010:	f000 f808 	bl	800f024 <abort>

0800f014 <_ZSt15get_new_handlerv>:
 800f014:	4b02      	ldr	r3, [pc, #8]	; (800f020 <_ZSt15get_new_handlerv+0xc>)
 800f016:	6818      	ldr	r0, [r3, #0]
 800f018:	f3bf 8f5b 	dmb	ish
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	2000204c 	.word	0x2000204c

0800f024 <abort>:
 800f024:	b508      	push	{r3, lr}
 800f026:	2006      	movs	r0, #6
 800f028:	f000 fb66 	bl	800f6f8 <raise>
 800f02c:	2001      	movs	r0, #1
 800f02e:	f7ff fd49 	bl	800eac4 <_exit>
	...

0800f034 <malloc>:
 800f034:	4b02      	ldr	r3, [pc, #8]	; (800f040 <malloc+0xc>)
 800f036:	4601      	mov	r1, r0
 800f038:	6818      	ldr	r0, [r3, #0]
 800f03a:	f000 b82b 	b.w	800f094 <_malloc_r>
 800f03e:	bf00      	nop
 800f040:	200000fc 	.word	0x200000fc

0800f044 <free>:
 800f044:	4b02      	ldr	r3, [pc, #8]	; (800f050 <free+0xc>)
 800f046:	4601      	mov	r1, r0
 800f048:	6818      	ldr	r0, [r3, #0]
 800f04a:	f000 bc0b 	b.w	800f864 <_free_r>
 800f04e:	bf00      	nop
 800f050:	200000fc 	.word	0x200000fc

0800f054 <sbrk_aligned>:
 800f054:	b570      	push	{r4, r5, r6, lr}
 800f056:	4e0e      	ldr	r6, [pc, #56]	; (800f090 <sbrk_aligned+0x3c>)
 800f058:	460c      	mov	r4, r1
 800f05a:	6831      	ldr	r1, [r6, #0]
 800f05c:	4605      	mov	r5, r0
 800f05e:	b911      	cbnz	r1, 800f066 <sbrk_aligned+0x12>
 800f060:	f000 fb9a 	bl	800f798 <_sbrk_r>
 800f064:	6030      	str	r0, [r6, #0]
 800f066:	4621      	mov	r1, r4
 800f068:	4628      	mov	r0, r5
 800f06a:	f000 fb95 	bl	800f798 <_sbrk_r>
 800f06e:	1c43      	adds	r3, r0, #1
 800f070:	d00a      	beq.n	800f088 <sbrk_aligned+0x34>
 800f072:	1cc4      	adds	r4, r0, #3
 800f074:	f024 0403 	bic.w	r4, r4, #3
 800f078:	42a0      	cmp	r0, r4
 800f07a:	d007      	beq.n	800f08c <sbrk_aligned+0x38>
 800f07c:	1a21      	subs	r1, r4, r0
 800f07e:	4628      	mov	r0, r5
 800f080:	f000 fb8a 	bl	800f798 <_sbrk_r>
 800f084:	3001      	adds	r0, #1
 800f086:	d101      	bne.n	800f08c <sbrk_aligned+0x38>
 800f088:	f04f 34ff 	mov.w	r4, #4294967295
 800f08c:	4620      	mov	r0, r4
 800f08e:	bd70      	pop	{r4, r5, r6, pc}
 800f090:	20002054 	.word	0x20002054

0800f094 <_malloc_r>:
 800f094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f098:	1ccd      	adds	r5, r1, #3
 800f09a:	f025 0503 	bic.w	r5, r5, #3
 800f09e:	3508      	adds	r5, #8
 800f0a0:	2d0c      	cmp	r5, #12
 800f0a2:	bf38      	it	cc
 800f0a4:	250c      	movcc	r5, #12
 800f0a6:	2d00      	cmp	r5, #0
 800f0a8:	4607      	mov	r7, r0
 800f0aa:	db01      	blt.n	800f0b0 <_malloc_r+0x1c>
 800f0ac:	42a9      	cmp	r1, r5
 800f0ae:	d905      	bls.n	800f0bc <_malloc_r+0x28>
 800f0b0:	230c      	movs	r3, #12
 800f0b2:	603b      	str	r3, [r7, #0]
 800f0b4:	2600      	movs	r6, #0
 800f0b6:	4630      	mov	r0, r6
 800f0b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f0bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f190 <_malloc_r+0xfc>
 800f0c0:	f000 f868 	bl	800f194 <__malloc_lock>
 800f0c4:	f8d8 3000 	ldr.w	r3, [r8]
 800f0c8:	461c      	mov	r4, r3
 800f0ca:	bb5c      	cbnz	r4, 800f124 <_malloc_r+0x90>
 800f0cc:	4629      	mov	r1, r5
 800f0ce:	4638      	mov	r0, r7
 800f0d0:	f7ff ffc0 	bl	800f054 <sbrk_aligned>
 800f0d4:	1c43      	adds	r3, r0, #1
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	d155      	bne.n	800f186 <_malloc_r+0xf2>
 800f0da:	f8d8 4000 	ldr.w	r4, [r8]
 800f0de:	4626      	mov	r6, r4
 800f0e0:	2e00      	cmp	r6, #0
 800f0e2:	d145      	bne.n	800f170 <_malloc_r+0xdc>
 800f0e4:	2c00      	cmp	r4, #0
 800f0e6:	d048      	beq.n	800f17a <_malloc_r+0xe6>
 800f0e8:	6823      	ldr	r3, [r4, #0]
 800f0ea:	4631      	mov	r1, r6
 800f0ec:	4638      	mov	r0, r7
 800f0ee:	eb04 0903 	add.w	r9, r4, r3
 800f0f2:	f000 fb51 	bl	800f798 <_sbrk_r>
 800f0f6:	4581      	cmp	r9, r0
 800f0f8:	d13f      	bne.n	800f17a <_malloc_r+0xe6>
 800f0fa:	6821      	ldr	r1, [r4, #0]
 800f0fc:	1a6d      	subs	r5, r5, r1
 800f0fe:	4629      	mov	r1, r5
 800f100:	4638      	mov	r0, r7
 800f102:	f7ff ffa7 	bl	800f054 <sbrk_aligned>
 800f106:	3001      	adds	r0, #1
 800f108:	d037      	beq.n	800f17a <_malloc_r+0xe6>
 800f10a:	6823      	ldr	r3, [r4, #0]
 800f10c:	442b      	add	r3, r5
 800f10e:	6023      	str	r3, [r4, #0]
 800f110:	f8d8 3000 	ldr.w	r3, [r8]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d038      	beq.n	800f18a <_malloc_r+0xf6>
 800f118:	685a      	ldr	r2, [r3, #4]
 800f11a:	42a2      	cmp	r2, r4
 800f11c:	d12b      	bne.n	800f176 <_malloc_r+0xe2>
 800f11e:	2200      	movs	r2, #0
 800f120:	605a      	str	r2, [r3, #4]
 800f122:	e00f      	b.n	800f144 <_malloc_r+0xb0>
 800f124:	6822      	ldr	r2, [r4, #0]
 800f126:	1b52      	subs	r2, r2, r5
 800f128:	d41f      	bmi.n	800f16a <_malloc_r+0xd6>
 800f12a:	2a0b      	cmp	r2, #11
 800f12c:	d917      	bls.n	800f15e <_malloc_r+0xca>
 800f12e:	1961      	adds	r1, r4, r5
 800f130:	42a3      	cmp	r3, r4
 800f132:	6025      	str	r5, [r4, #0]
 800f134:	bf18      	it	ne
 800f136:	6059      	strne	r1, [r3, #4]
 800f138:	6863      	ldr	r3, [r4, #4]
 800f13a:	bf08      	it	eq
 800f13c:	f8c8 1000 	streq.w	r1, [r8]
 800f140:	5162      	str	r2, [r4, r5]
 800f142:	604b      	str	r3, [r1, #4]
 800f144:	4638      	mov	r0, r7
 800f146:	f104 060b 	add.w	r6, r4, #11
 800f14a:	f000 f829 	bl	800f1a0 <__malloc_unlock>
 800f14e:	f026 0607 	bic.w	r6, r6, #7
 800f152:	1d23      	adds	r3, r4, #4
 800f154:	1af2      	subs	r2, r6, r3
 800f156:	d0ae      	beq.n	800f0b6 <_malloc_r+0x22>
 800f158:	1b9b      	subs	r3, r3, r6
 800f15a:	50a3      	str	r3, [r4, r2]
 800f15c:	e7ab      	b.n	800f0b6 <_malloc_r+0x22>
 800f15e:	42a3      	cmp	r3, r4
 800f160:	6862      	ldr	r2, [r4, #4]
 800f162:	d1dd      	bne.n	800f120 <_malloc_r+0x8c>
 800f164:	f8c8 2000 	str.w	r2, [r8]
 800f168:	e7ec      	b.n	800f144 <_malloc_r+0xb0>
 800f16a:	4623      	mov	r3, r4
 800f16c:	6864      	ldr	r4, [r4, #4]
 800f16e:	e7ac      	b.n	800f0ca <_malloc_r+0x36>
 800f170:	4634      	mov	r4, r6
 800f172:	6876      	ldr	r6, [r6, #4]
 800f174:	e7b4      	b.n	800f0e0 <_malloc_r+0x4c>
 800f176:	4613      	mov	r3, r2
 800f178:	e7cc      	b.n	800f114 <_malloc_r+0x80>
 800f17a:	230c      	movs	r3, #12
 800f17c:	603b      	str	r3, [r7, #0]
 800f17e:	4638      	mov	r0, r7
 800f180:	f000 f80e 	bl	800f1a0 <__malloc_unlock>
 800f184:	e797      	b.n	800f0b6 <_malloc_r+0x22>
 800f186:	6025      	str	r5, [r4, #0]
 800f188:	e7dc      	b.n	800f144 <_malloc_r+0xb0>
 800f18a:	605b      	str	r3, [r3, #4]
 800f18c:	deff      	udf	#255	; 0xff
 800f18e:	bf00      	nop
 800f190:	20002050 	.word	0x20002050

0800f194 <__malloc_lock>:
 800f194:	4801      	ldr	r0, [pc, #4]	; (800f19c <__malloc_lock+0x8>)
 800f196:	f000 bb4c 	b.w	800f832 <__retarget_lock_acquire_recursive>
 800f19a:	bf00      	nop
 800f19c:	20002198 	.word	0x20002198

0800f1a0 <__malloc_unlock>:
 800f1a0:	4801      	ldr	r0, [pc, #4]	; (800f1a8 <__malloc_unlock+0x8>)
 800f1a2:	f000 bb47 	b.w	800f834 <__retarget_lock_release_recursive>
 800f1a6:	bf00      	nop
 800f1a8:	20002198 	.word	0x20002198

0800f1ac <std>:
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	b510      	push	{r4, lr}
 800f1b0:	4604      	mov	r4, r0
 800f1b2:	e9c0 3300 	strd	r3, r3, [r0]
 800f1b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f1ba:	6083      	str	r3, [r0, #8]
 800f1bc:	8181      	strh	r1, [r0, #12]
 800f1be:	6643      	str	r3, [r0, #100]	; 0x64
 800f1c0:	81c2      	strh	r2, [r0, #14]
 800f1c2:	6183      	str	r3, [r0, #24]
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	2208      	movs	r2, #8
 800f1c8:	305c      	adds	r0, #92	; 0x5c
 800f1ca:	f000 fa33 	bl	800f634 <memset>
 800f1ce:	4b0d      	ldr	r3, [pc, #52]	; (800f204 <std+0x58>)
 800f1d0:	6263      	str	r3, [r4, #36]	; 0x24
 800f1d2:	4b0d      	ldr	r3, [pc, #52]	; (800f208 <std+0x5c>)
 800f1d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f1d6:	4b0d      	ldr	r3, [pc, #52]	; (800f20c <std+0x60>)
 800f1d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f1da:	4b0d      	ldr	r3, [pc, #52]	; (800f210 <std+0x64>)
 800f1dc:	6323      	str	r3, [r4, #48]	; 0x30
 800f1de:	4b0d      	ldr	r3, [pc, #52]	; (800f214 <std+0x68>)
 800f1e0:	6224      	str	r4, [r4, #32]
 800f1e2:	429c      	cmp	r4, r3
 800f1e4:	d006      	beq.n	800f1f4 <std+0x48>
 800f1e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f1ea:	4294      	cmp	r4, r2
 800f1ec:	d002      	beq.n	800f1f4 <std+0x48>
 800f1ee:	33d0      	adds	r3, #208	; 0xd0
 800f1f0:	429c      	cmp	r4, r3
 800f1f2:	d105      	bne.n	800f200 <std+0x54>
 800f1f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1fc:	f000 bb18 	b.w	800f830 <__retarget_lock_init_recursive>
 800f200:	bd10      	pop	{r4, pc}
 800f202:	bf00      	nop
 800f204:	0800f40d 	.word	0x0800f40d
 800f208:	0800f42f 	.word	0x0800f42f
 800f20c:	0800f467 	.word	0x0800f467
 800f210:	0800f48b 	.word	0x0800f48b
 800f214:	20002058 	.word	0x20002058

0800f218 <stdio_exit_handler>:
 800f218:	4a02      	ldr	r2, [pc, #8]	; (800f224 <stdio_exit_handler+0xc>)
 800f21a:	4903      	ldr	r1, [pc, #12]	; (800f228 <stdio_exit_handler+0x10>)
 800f21c:	4803      	ldr	r0, [pc, #12]	; (800f22c <stdio_exit_handler+0x14>)
 800f21e:	f000 b869 	b.w	800f2f4 <_fwalk_sglue>
 800f222:	bf00      	nop
 800f224:	200000a4 	.word	0x200000a4
 800f228:	08010261 	.word	0x08010261
 800f22c:	200000b0 	.word	0x200000b0

0800f230 <cleanup_stdio>:
 800f230:	6841      	ldr	r1, [r0, #4]
 800f232:	4b0c      	ldr	r3, [pc, #48]	; (800f264 <cleanup_stdio+0x34>)
 800f234:	4299      	cmp	r1, r3
 800f236:	b510      	push	{r4, lr}
 800f238:	4604      	mov	r4, r0
 800f23a:	d001      	beq.n	800f240 <cleanup_stdio+0x10>
 800f23c:	f001 f810 	bl	8010260 <_fflush_r>
 800f240:	68a1      	ldr	r1, [r4, #8]
 800f242:	4b09      	ldr	r3, [pc, #36]	; (800f268 <cleanup_stdio+0x38>)
 800f244:	4299      	cmp	r1, r3
 800f246:	d002      	beq.n	800f24e <cleanup_stdio+0x1e>
 800f248:	4620      	mov	r0, r4
 800f24a:	f001 f809 	bl	8010260 <_fflush_r>
 800f24e:	68e1      	ldr	r1, [r4, #12]
 800f250:	4b06      	ldr	r3, [pc, #24]	; (800f26c <cleanup_stdio+0x3c>)
 800f252:	4299      	cmp	r1, r3
 800f254:	d004      	beq.n	800f260 <cleanup_stdio+0x30>
 800f256:	4620      	mov	r0, r4
 800f258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f25c:	f001 b800 	b.w	8010260 <_fflush_r>
 800f260:	bd10      	pop	{r4, pc}
 800f262:	bf00      	nop
 800f264:	20002058 	.word	0x20002058
 800f268:	200020c0 	.word	0x200020c0
 800f26c:	20002128 	.word	0x20002128

0800f270 <global_stdio_init.part.0>:
 800f270:	b510      	push	{r4, lr}
 800f272:	4b0b      	ldr	r3, [pc, #44]	; (800f2a0 <global_stdio_init.part.0+0x30>)
 800f274:	4c0b      	ldr	r4, [pc, #44]	; (800f2a4 <global_stdio_init.part.0+0x34>)
 800f276:	4a0c      	ldr	r2, [pc, #48]	; (800f2a8 <global_stdio_init.part.0+0x38>)
 800f278:	601a      	str	r2, [r3, #0]
 800f27a:	4620      	mov	r0, r4
 800f27c:	2200      	movs	r2, #0
 800f27e:	2104      	movs	r1, #4
 800f280:	f7ff ff94 	bl	800f1ac <std>
 800f284:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f288:	2201      	movs	r2, #1
 800f28a:	2109      	movs	r1, #9
 800f28c:	f7ff ff8e 	bl	800f1ac <std>
 800f290:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f294:	2202      	movs	r2, #2
 800f296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f29a:	2112      	movs	r1, #18
 800f29c:	f7ff bf86 	b.w	800f1ac <std>
 800f2a0:	20002190 	.word	0x20002190
 800f2a4:	20002058 	.word	0x20002058
 800f2a8:	0800f219 	.word	0x0800f219

0800f2ac <__sfp_lock_acquire>:
 800f2ac:	4801      	ldr	r0, [pc, #4]	; (800f2b4 <__sfp_lock_acquire+0x8>)
 800f2ae:	f000 bac0 	b.w	800f832 <__retarget_lock_acquire_recursive>
 800f2b2:	bf00      	nop
 800f2b4:	20002199 	.word	0x20002199

0800f2b8 <__sfp_lock_release>:
 800f2b8:	4801      	ldr	r0, [pc, #4]	; (800f2c0 <__sfp_lock_release+0x8>)
 800f2ba:	f000 babb 	b.w	800f834 <__retarget_lock_release_recursive>
 800f2be:	bf00      	nop
 800f2c0:	20002199 	.word	0x20002199

0800f2c4 <__sinit>:
 800f2c4:	b510      	push	{r4, lr}
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	f7ff fff0 	bl	800f2ac <__sfp_lock_acquire>
 800f2cc:	6a23      	ldr	r3, [r4, #32]
 800f2ce:	b11b      	cbz	r3, 800f2d8 <__sinit+0x14>
 800f2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2d4:	f7ff bff0 	b.w	800f2b8 <__sfp_lock_release>
 800f2d8:	4b04      	ldr	r3, [pc, #16]	; (800f2ec <__sinit+0x28>)
 800f2da:	6223      	str	r3, [r4, #32]
 800f2dc:	4b04      	ldr	r3, [pc, #16]	; (800f2f0 <__sinit+0x2c>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d1f5      	bne.n	800f2d0 <__sinit+0xc>
 800f2e4:	f7ff ffc4 	bl	800f270 <global_stdio_init.part.0>
 800f2e8:	e7f2      	b.n	800f2d0 <__sinit+0xc>
 800f2ea:	bf00      	nop
 800f2ec:	0800f231 	.word	0x0800f231
 800f2f0:	20002190 	.word	0x20002190

0800f2f4 <_fwalk_sglue>:
 800f2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2f8:	4607      	mov	r7, r0
 800f2fa:	4688      	mov	r8, r1
 800f2fc:	4614      	mov	r4, r2
 800f2fe:	2600      	movs	r6, #0
 800f300:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f304:	f1b9 0901 	subs.w	r9, r9, #1
 800f308:	d505      	bpl.n	800f316 <_fwalk_sglue+0x22>
 800f30a:	6824      	ldr	r4, [r4, #0]
 800f30c:	2c00      	cmp	r4, #0
 800f30e:	d1f7      	bne.n	800f300 <_fwalk_sglue+0xc>
 800f310:	4630      	mov	r0, r6
 800f312:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f316:	89ab      	ldrh	r3, [r5, #12]
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d907      	bls.n	800f32c <_fwalk_sglue+0x38>
 800f31c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f320:	3301      	adds	r3, #1
 800f322:	d003      	beq.n	800f32c <_fwalk_sglue+0x38>
 800f324:	4629      	mov	r1, r5
 800f326:	4638      	mov	r0, r7
 800f328:	47c0      	blx	r8
 800f32a:	4306      	orrs	r6, r0
 800f32c:	3568      	adds	r5, #104	; 0x68
 800f32e:	e7e9      	b.n	800f304 <_fwalk_sglue+0x10>

0800f330 <iprintf>:
 800f330:	b40f      	push	{r0, r1, r2, r3}
 800f332:	b507      	push	{r0, r1, r2, lr}
 800f334:	4906      	ldr	r1, [pc, #24]	; (800f350 <iprintf+0x20>)
 800f336:	ab04      	add	r3, sp, #16
 800f338:	6808      	ldr	r0, [r1, #0]
 800f33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f33e:	6881      	ldr	r1, [r0, #8]
 800f340:	9301      	str	r3, [sp, #4]
 800f342:	f000 fc5d 	bl	800fc00 <_vfiprintf_r>
 800f346:	b003      	add	sp, #12
 800f348:	f85d eb04 	ldr.w	lr, [sp], #4
 800f34c:	b004      	add	sp, #16
 800f34e:	4770      	bx	lr
 800f350:	200000fc 	.word	0x200000fc

0800f354 <_puts_r>:
 800f354:	6a03      	ldr	r3, [r0, #32]
 800f356:	b570      	push	{r4, r5, r6, lr}
 800f358:	6884      	ldr	r4, [r0, #8]
 800f35a:	4605      	mov	r5, r0
 800f35c:	460e      	mov	r6, r1
 800f35e:	b90b      	cbnz	r3, 800f364 <_puts_r+0x10>
 800f360:	f7ff ffb0 	bl	800f2c4 <__sinit>
 800f364:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f366:	07db      	lsls	r3, r3, #31
 800f368:	d405      	bmi.n	800f376 <_puts_r+0x22>
 800f36a:	89a3      	ldrh	r3, [r4, #12]
 800f36c:	0598      	lsls	r0, r3, #22
 800f36e:	d402      	bmi.n	800f376 <_puts_r+0x22>
 800f370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f372:	f000 fa5e 	bl	800f832 <__retarget_lock_acquire_recursive>
 800f376:	89a3      	ldrh	r3, [r4, #12]
 800f378:	0719      	lsls	r1, r3, #28
 800f37a:	d513      	bpl.n	800f3a4 <_puts_r+0x50>
 800f37c:	6923      	ldr	r3, [r4, #16]
 800f37e:	b18b      	cbz	r3, 800f3a4 <_puts_r+0x50>
 800f380:	3e01      	subs	r6, #1
 800f382:	68a3      	ldr	r3, [r4, #8]
 800f384:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f388:	3b01      	subs	r3, #1
 800f38a:	60a3      	str	r3, [r4, #8]
 800f38c:	b9e9      	cbnz	r1, 800f3ca <_puts_r+0x76>
 800f38e:	2b00      	cmp	r3, #0
 800f390:	da2e      	bge.n	800f3f0 <_puts_r+0x9c>
 800f392:	4622      	mov	r2, r4
 800f394:	210a      	movs	r1, #10
 800f396:	4628      	mov	r0, r5
 800f398:	f000 f89c 	bl	800f4d4 <__swbuf_r>
 800f39c:	3001      	adds	r0, #1
 800f39e:	d007      	beq.n	800f3b0 <_puts_r+0x5c>
 800f3a0:	250a      	movs	r5, #10
 800f3a2:	e007      	b.n	800f3b4 <_puts_r+0x60>
 800f3a4:	4621      	mov	r1, r4
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	f000 f8d2 	bl	800f550 <__swsetup_r>
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d0e7      	beq.n	800f380 <_puts_r+0x2c>
 800f3b0:	f04f 35ff 	mov.w	r5, #4294967295
 800f3b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3b6:	07da      	lsls	r2, r3, #31
 800f3b8:	d405      	bmi.n	800f3c6 <_puts_r+0x72>
 800f3ba:	89a3      	ldrh	r3, [r4, #12]
 800f3bc:	059b      	lsls	r3, r3, #22
 800f3be:	d402      	bmi.n	800f3c6 <_puts_r+0x72>
 800f3c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3c2:	f000 fa37 	bl	800f834 <__retarget_lock_release_recursive>
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	bd70      	pop	{r4, r5, r6, pc}
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	da04      	bge.n	800f3d8 <_puts_r+0x84>
 800f3ce:	69a2      	ldr	r2, [r4, #24]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	dc06      	bgt.n	800f3e2 <_puts_r+0x8e>
 800f3d4:	290a      	cmp	r1, #10
 800f3d6:	d004      	beq.n	800f3e2 <_puts_r+0x8e>
 800f3d8:	6823      	ldr	r3, [r4, #0]
 800f3da:	1c5a      	adds	r2, r3, #1
 800f3dc:	6022      	str	r2, [r4, #0]
 800f3de:	7019      	strb	r1, [r3, #0]
 800f3e0:	e7cf      	b.n	800f382 <_puts_r+0x2e>
 800f3e2:	4622      	mov	r2, r4
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	f000 f875 	bl	800f4d4 <__swbuf_r>
 800f3ea:	3001      	adds	r0, #1
 800f3ec:	d1c9      	bne.n	800f382 <_puts_r+0x2e>
 800f3ee:	e7df      	b.n	800f3b0 <_puts_r+0x5c>
 800f3f0:	6823      	ldr	r3, [r4, #0]
 800f3f2:	250a      	movs	r5, #10
 800f3f4:	1c5a      	adds	r2, r3, #1
 800f3f6:	6022      	str	r2, [r4, #0]
 800f3f8:	701d      	strb	r5, [r3, #0]
 800f3fa:	e7db      	b.n	800f3b4 <_puts_r+0x60>

0800f3fc <puts>:
 800f3fc:	4b02      	ldr	r3, [pc, #8]	; (800f408 <puts+0xc>)
 800f3fe:	4601      	mov	r1, r0
 800f400:	6818      	ldr	r0, [r3, #0]
 800f402:	f7ff bfa7 	b.w	800f354 <_puts_r>
 800f406:	bf00      	nop
 800f408:	200000fc 	.word	0x200000fc

0800f40c <__sread>:
 800f40c:	b510      	push	{r4, lr}
 800f40e:	460c      	mov	r4, r1
 800f410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f414:	f000 f99a 	bl	800f74c <_read_r>
 800f418:	2800      	cmp	r0, #0
 800f41a:	bfab      	itete	ge
 800f41c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f41e:	89a3      	ldrhlt	r3, [r4, #12]
 800f420:	181b      	addge	r3, r3, r0
 800f422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f426:	bfac      	ite	ge
 800f428:	6563      	strge	r3, [r4, #84]	; 0x54
 800f42a:	81a3      	strhlt	r3, [r4, #12]
 800f42c:	bd10      	pop	{r4, pc}

0800f42e <__swrite>:
 800f42e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f432:	461f      	mov	r7, r3
 800f434:	898b      	ldrh	r3, [r1, #12]
 800f436:	05db      	lsls	r3, r3, #23
 800f438:	4605      	mov	r5, r0
 800f43a:	460c      	mov	r4, r1
 800f43c:	4616      	mov	r6, r2
 800f43e:	d505      	bpl.n	800f44c <__swrite+0x1e>
 800f440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f444:	2302      	movs	r3, #2
 800f446:	2200      	movs	r2, #0
 800f448:	f000 f96e 	bl	800f728 <_lseek_r>
 800f44c:	89a3      	ldrh	r3, [r4, #12]
 800f44e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f456:	81a3      	strh	r3, [r4, #12]
 800f458:	4632      	mov	r2, r6
 800f45a:	463b      	mov	r3, r7
 800f45c:	4628      	mov	r0, r5
 800f45e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f462:	f000 b9a9 	b.w	800f7b8 <_write_r>

0800f466 <__sseek>:
 800f466:	b510      	push	{r4, lr}
 800f468:	460c      	mov	r4, r1
 800f46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f46e:	f000 f95b 	bl	800f728 <_lseek_r>
 800f472:	1c43      	adds	r3, r0, #1
 800f474:	89a3      	ldrh	r3, [r4, #12]
 800f476:	bf15      	itete	ne
 800f478:	6560      	strne	r0, [r4, #84]	; 0x54
 800f47a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f47e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f482:	81a3      	strheq	r3, [r4, #12]
 800f484:	bf18      	it	ne
 800f486:	81a3      	strhne	r3, [r4, #12]
 800f488:	bd10      	pop	{r4, pc}

0800f48a <__sclose>:
 800f48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f48e:	f000 b93b 	b.w	800f708 <_close_r>
	...

0800f494 <_vsiprintf_r>:
 800f494:	b500      	push	{lr}
 800f496:	b09b      	sub	sp, #108	; 0x6c
 800f498:	9100      	str	r1, [sp, #0]
 800f49a:	9104      	str	r1, [sp, #16]
 800f49c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f4a0:	9105      	str	r1, [sp, #20]
 800f4a2:	9102      	str	r1, [sp, #8]
 800f4a4:	4905      	ldr	r1, [pc, #20]	; (800f4bc <_vsiprintf_r+0x28>)
 800f4a6:	9103      	str	r1, [sp, #12]
 800f4a8:	4669      	mov	r1, sp
 800f4aa:	f000 fa81 	bl	800f9b0 <_svfiprintf_r>
 800f4ae:	9b00      	ldr	r3, [sp, #0]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	701a      	strb	r2, [r3, #0]
 800f4b4:	b01b      	add	sp, #108	; 0x6c
 800f4b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f4ba:	bf00      	nop
 800f4bc:	ffff0208 	.word	0xffff0208

0800f4c0 <vsiprintf>:
 800f4c0:	4613      	mov	r3, r2
 800f4c2:	460a      	mov	r2, r1
 800f4c4:	4601      	mov	r1, r0
 800f4c6:	4802      	ldr	r0, [pc, #8]	; (800f4d0 <vsiprintf+0x10>)
 800f4c8:	6800      	ldr	r0, [r0, #0]
 800f4ca:	f7ff bfe3 	b.w	800f494 <_vsiprintf_r>
 800f4ce:	bf00      	nop
 800f4d0:	200000fc 	.word	0x200000fc

0800f4d4 <__swbuf_r>:
 800f4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4d6:	460e      	mov	r6, r1
 800f4d8:	4614      	mov	r4, r2
 800f4da:	4605      	mov	r5, r0
 800f4dc:	b118      	cbz	r0, 800f4e6 <__swbuf_r+0x12>
 800f4de:	6a03      	ldr	r3, [r0, #32]
 800f4e0:	b90b      	cbnz	r3, 800f4e6 <__swbuf_r+0x12>
 800f4e2:	f7ff feef 	bl	800f2c4 <__sinit>
 800f4e6:	69a3      	ldr	r3, [r4, #24]
 800f4e8:	60a3      	str	r3, [r4, #8]
 800f4ea:	89a3      	ldrh	r3, [r4, #12]
 800f4ec:	071a      	lsls	r2, r3, #28
 800f4ee:	d525      	bpl.n	800f53c <__swbuf_r+0x68>
 800f4f0:	6923      	ldr	r3, [r4, #16]
 800f4f2:	b31b      	cbz	r3, 800f53c <__swbuf_r+0x68>
 800f4f4:	6823      	ldr	r3, [r4, #0]
 800f4f6:	6922      	ldr	r2, [r4, #16]
 800f4f8:	1a98      	subs	r0, r3, r2
 800f4fa:	6963      	ldr	r3, [r4, #20]
 800f4fc:	b2f6      	uxtb	r6, r6
 800f4fe:	4283      	cmp	r3, r0
 800f500:	4637      	mov	r7, r6
 800f502:	dc04      	bgt.n	800f50e <__swbuf_r+0x3a>
 800f504:	4621      	mov	r1, r4
 800f506:	4628      	mov	r0, r5
 800f508:	f000 feaa 	bl	8010260 <_fflush_r>
 800f50c:	b9e0      	cbnz	r0, 800f548 <__swbuf_r+0x74>
 800f50e:	68a3      	ldr	r3, [r4, #8]
 800f510:	3b01      	subs	r3, #1
 800f512:	60a3      	str	r3, [r4, #8]
 800f514:	6823      	ldr	r3, [r4, #0]
 800f516:	1c5a      	adds	r2, r3, #1
 800f518:	6022      	str	r2, [r4, #0]
 800f51a:	701e      	strb	r6, [r3, #0]
 800f51c:	6962      	ldr	r2, [r4, #20]
 800f51e:	1c43      	adds	r3, r0, #1
 800f520:	429a      	cmp	r2, r3
 800f522:	d004      	beq.n	800f52e <__swbuf_r+0x5a>
 800f524:	89a3      	ldrh	r3, [r4, #12]
 800f526:	07db      	lsls	r3, r3, #31
 800f528:	d506      	bpl.n	800f538 <__swbuf_r+0x64>
 800f52a:	2e0a      	cmp	r6, #10
 800f52c:	d104      	bne.n	800f538 <__swbuf_r+0x64>
 800f52e:	4621      	mov	r1, r4
 800f530:	4628      	mov	r0, r5
 800f532:	f000 fe95 	bl	8010260 <_fflush_r>
 800f536:	b938      	cbnz	r0, 800f548 <__swbuf_r+0x74>
 800f538:	4638      	mov	r0, r7
 800f53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f53c:	4621      	mov	r1, r4
 800f53e:	4628      	mov	r0, r5
 800f540:	f000 f806 	bl	800f550 <__swsetup_r>
 800f544:	2800      	cmp	r0, #0
 800f546:	d0d5      	beq.n	800f4f4 <__swbuf_r+0x20>
 800f548:	f04f 37ff 	mov.w	r7, #4294967295
 800f54c:	e7f4      	b.n	800f538 <__swbuf_r+0x64>
	...

0800f550 <__swsetup_r>:
 800f550:	b538      	push	{r3, r4, r5, lr}
 800f552:	4b2a      	ldr	r3, [pc, #168]	; (800f5fc <__swsetup_r+0xac>)
 800f554:	4605      	mov	r5, r0
 800f556:	6818      	ldr	r0, [r3, #0]
 800f558:	460c      	mov	r4, r1
 800f55a:	b118      	cbz	r0, 800f564 <__swsetup_r+0x14>
 800f55c:	6a03      	ldr	r3, [r0, #32]
 800f55e:	b90b      	cbnz	r3, 800f564 <__swsetup_r+0x14>
 800f560:	f7ff feb0 	bl	800f2c4 <__sinit>
 800f564:	89a3      	ldrh	r3, [r4, #12]
 800f566:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f56a:	0718      	lsls	r0, r3, #28
 800f56c:	d422      	bmi.n	800f5b4 <__swsetup_r+0x64>
 800f56e:	06d9      	lsls	r1, r3, #27
 800f570:	d407      	bmi.n	800f582 <__swsetup_r+0x32>
 800f572:	2309      	movs	r3, #9
 800f574:	602b      	str	r3, [r5, #0]
 800f576:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f57a:	81a3      	strh	r3, [r4, #12]
 800f57c:	f04f 30ff 	mov.w	r0, #4294967295
 800f580:	e034      	b.n	800f5ec <__swsetup_r+0x9c>
 800f582:	0758      	lsls	r0, r3, #29
 800f584:	d512      	bpl.n	800f5ac <__swsetup_r+0x5c>
 800f586:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f588:	b141      	cbz	r1, 800f59c <__swsetup_r+0x4c>
 800f58a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f58e:	4299      	cmp	r1, r3
 800f590:	d002      	beq.n	800f598 <__swsetup_r+0x48>
 800f592:	4628      	mov	r0, r5
 800f594:	f000 f966 	bl	800f864 <_free_r>
 800f598:	2300      	movs	r3, #0
 800f59a:	6363      	str	r3, [r4, #52]	; 0x34
 800f59c:	89a3      	ldrh	r3, [r4, #12]
 800f59e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f5a2:	81a3      	strh	r3, [r4, #12]
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	6063      	str	r3, [r4, #4]
 800f5a8:	6923      	ldr	r3, [r4, #16]
 800f5aa:	6023      	str	r3, [r4, #0]
 800f5ac:	89a3      	ldrh	r3, [r4, #12]
 800f5ae:	f043 0308 	orr.w	r3, r3, #8
 800f5b2:	81a3      	strh	r3, [r4, #12]
 800f5b4:	6923      	ldr	r3, [r4, #16]
 800f5b6:	b94b      	cbnz	r3, 800f5cc <__swsetup_r+0x7c>
 800f5b8:	89a3      	ldrh	r3, [r4, #12]
 800f5ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f5be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5c2:	d003      	beq.n	800f5cc <__swsetup_r+0x7c>
 800f5c4:	4621      	mov	r1, r4
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f000 fe98 	bl	80102fc <__smakebuf_r>
 800f5cc:	89a0      	ldrh	r0, [r4, #12]
 800f5ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f5d2:	f010 0301 	ands.w	r3, r0, #1
 800f5d6:	d00a      	beq.n	800f5ee <__swsetup_r+0x9e>
 800f5d8:	2300      	movs	r3, #0
 800f5da:	60a3      	str	r3, [r4, #8]
 800f5dc:	6963      	ldr	r3, [r4, #20]
 800f5de:	425b      	negs	r3, r3
 800f5e0:	61a3      	str	r3, [r4, #24]
 800f5e2:	6923      	ldr	r3, [r4, #16]
 800f5e4:	b943      	cbnz	r3, 800f5f8 <__swsetup_r+0xa8>
 800f5e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f5ea:	d1c4      	bne.n	800f576 <__swsetup_r+0x26>
 800f5ec:	bd38      	pop	{r3, r4, r5, pc}
 800f5ee:	0781      	lsls	r1, r0, #30
 800f5f0:	bf58      	it	pl
 800f5f2:	6963      	ldrpl	r3, [r4, #20]
 800f5f4:	60a3      	str	r3, [r4, #8]
 800f5f6:	e7f4      	b.n	800f5e2 <__swsetup_r+0x92>
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	e7f7      	b.n	800f5ec <__swsetup_r+0x9c>
 800f5fc:	200000fc 	.word	0x200000fc

0800f600 <memmove>:
 800f600:	4288      	cmp	r0, r1
 800f602:	b510      	push	{r4, lr}
 800f604:	eb01 0402 	add.w	r4, r1, r2
 800f608:	d902      	bls.n	800f610 <memmove+0x10>
 800f60a:	4284      	cmp	r4, r0
 800f60c:	4623      	mov	r3, r4
 800f60e:	d807      	bhi.n	800f620 <memmove+0x20>
 800f610:	1e43      	subs	r3, r0, #1
 800f612:	42a1      	cmp	r1, r4
 800f614:	d008      	beq.n	800f628 <memmove+0x28>
 800f616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f61a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f61e:	e7f8      	b.n	800f612 <memmove+0x12>
 800f620:	4402      	add	r2, r0
 800f622:	4601      	mov	r1, r0
 800f624:	428a      	cmp	r2, r1
 800f626:	d100      	bne.n	800f62a <memmove+0x2a>
 800f628:	bd10      	pop	{r4, pc}
 800f62a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f62e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f632:	e7f7      	b.n	800f624 <memmove+0x24>

0800f634 <memset>:
 800f634:	4402      	add	r2, r0
 800f636:	4603      	mov	r3, r0
 800f638:	4293      	cmp	r3, r2
 800f63a:	d100      	bne.n	800f63e <memset+0xa>
 800f63c:	4770      	bx	lr
 800f63e:	f803 1b01 	strb.w	r1, [r3], #1
 800f642:	e7f9      	b.n	800f638 <memset+0x4>

0800f644 <strchr>:
 800f644:	b2c9      	uxtb	r1, r1
 800f646:	4603      	mov	r3, r0
 800f648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f64c:	b11a      	cbz	r2, 800f656 <strchr+0x12>
 800f64e:	428a      	cmp	r2, r1
 800f650:	d1f9      	bne.n	800f646 <strchr+0x2>
 800f652:	4618      	mov	r0, r3
 800f654:	4770      	bx	lr
 800f656:	2900      	cmp	r1, #0
 800f658:	bf18      	it	ne
 800f65a:	2300      	movne	r3, #0
 800f65c:	e7f9      	b.n	800f652 <strchr+0xe>

0800f65e <strncmp>:
 800f65e:	b510      	push	{r4, lr}
 800f660:	b16a      	cbz	r2, 800f67e <strncmp+0x20>
 800f662:	3901      	subs	r1, #1
 800f664:	1884      	adds	r4, r0, r2
 800f666:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f66a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f66e:	429a      	cmp	r2, r3
 800f670:	d103      	bne.n	800f67a <strncmp+0x1c>
 800f672:	42a0      	cmp	r0, r4
 800f674:	d001      	beq.n	800f67a <strncmp+0x1c>
 800f676:	2a00      	cmp	r2, #0
 800f678:	d1f5      	bne.n	800f666 <strncmp+0x8>
 800f67a:	1ad0      	subs	r0, r2, r3
 800f67c:	bd10      	pop	{r4, pc}
 800f67e:	4610      	mov	r0, r2
 800f680:	e7fc      	b.n	800f67c <strncmp+0x1e>

0800f682 <strncpy>:
 800f682:	b510      	push	{r4, lr}
 800f684:	3901      	subs	r1, #1
 800f686:	4603      	mov	r3, r0
 800f688:	b132      	cbz	r2, 800f698 <strncpy+0x16>
 800f68a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f68e:	f803 4b01 	strb.w	r4, [r3], #1
 800f692:	3a01      	subs	r2, #1
 800f694:	2c00      	cmp	r4, #0
 800f696:	d1f7      	bne.n	800f688 <strncpy+0x6>
 800f698:	441a      	add	r2, r3
 800f69a:	2100      	movs	r1, #0
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d100      	bne.n	800f6a2 <strncpy+0x20>
 800f6a0:	bd10      	pop	{r4, pc}
 800f6a2:	f803 1b01 	strb.w	r1, [r3], #1
 800f6a6:	e7f9      	b.n	800f69c <strncpy+0x1a>

0800f6a8 <_raise_r>:
 800f6a8:	291f      	cmp	r1, #31
 800f6aa:	b538      	push	{r3, r4, r5, lr}
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	460d      	mov	r5, r1
 800f6b0:	d904      	bls.n	800f6bc <_raise_r+0x14>
 800f6b2:	2316      	movs	r3, #22
 800f6b4:	6003      	str	r3, [r0, #0]
 800f6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f6ba:	bd38      	pop	{r3, r4, r5, pc}
 800f6bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f6be:	b112      	cbz	r2, 800f6c6 <_raise_r+0x1e>
 800f6c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f6c4:	b94b      	cbnz	r3, 800f6da <_raise_r+0x32>
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	f000 f864 	bl	800f794 <_getpid_r>
 800f6cc:	462a      	mov	r2, r5
 800f6ce:	4601      	mov	r1, r0
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6d6:	f000 b84b 	b.w	800f770 <_kill_r>
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d00a      	beq.n	800f6f4 <_raise_r+0x4c>
 800f6de:	1c59      	adds	r1, r3, #1
 800f6e0:	d103      	bne.n	800f6ea <_raise_r+0x42>
 800f6e2:	2316      	movs	r3, #22
 800f6e4:	6003      	str	r3, [r0, #0]
 800f6e6:	2001      	movs	r0, #1
 800f6e8:	e7e7      	b.n	800f6ba <_raise_r+0x12>
 800f6ea:	2400      	movs	r4, #0
 800f6ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	4798      	blx	r3
 800f6f4:	2000      	movs	r0, #0
 800f6f6:	e7e0      	b.n	800f6ba <_raise_r+0x12>

0800f6f8 <raise>:
 800f6f8:	4b02      	ldr	r3, [pc, #8]	; (800f704 <raise+0xc>)
 800f6fa:	4601      	mov	r1, r0
 800f6fc:	6818      	ldr	r0, [r3, #0]
 800f6fe:	f7ff bfd3 	b.w	800f6a8 <_raise_r>
 800f702:	bf00      	nop
 800f704:	200000fc 	.word	0x200000fc

0800f708 <_close_r>:
 800f708:	b538      	push	{r3, r4, r5, lr}
 800f70a:	4d06      	ldr	r5, [pc, #24]	; (800f724 <_close_r+0x1c>)
 800f70c:	2300      	movs	r3, #0
 800f70e:	4604      	mov	r4, r0
 800f710:	4608      	mov	r0, r1
 800f712:	602b      	str	r3, [r5, #0]
 800f714:	f7ff fa19 	bl	800eb4a <_close>
 800f718:	1c43      	adds	r3, r0, #1
 800f71a:	d102      	bne.n	800f722 <_close_r+0x1a>
 800f71c:	682b      	ldr	r3, [r5, #0]
 800f71e:	b103      	cbz	r3, 800f722 <_close_r+0x1a>
 800f720:	6023      	str	r3, [r4, #0]
 800f722:	bd38      	pop	{r3, r4, r5, pc}
 800f724:	20002194 	.word	0x20002194

0800f728 <_lseek_r>:
 800f728:	b538      	push	{r3, r4, r5, lr}
 800f72a:	4d07      	ldr	r5, [pc, #28]	; (800f748 <_lseek_r+0x20>)
 800f72c:	4604      	mov	r4, r0
 800f72e:	4608      	mov	r0, r1
 800f730:	4611      	mov	r1, r2
 800f732:	2200      	movs	r2, #0
 800f734:	602a      	str	r2, [r5, #0]
 800f736:	461a      	mov	r2, r3
 800f738:	f7ff fa2e 	bl	800eb98 <_lseek>
 800f73c:	1c43      	adds	r3, r0, #1
 800f73e:	d102      	bne.n	800f746 <_lseek_r+0x1e>
 800f740:	682b      	ldr	r3, [r5, #0]
 800f742:	b103      	cbz	r3, 800f746 <_lseek_r+0x1e>
 800f744:	6023      	str	r3, [r4, #0]
 800f746:	bd38      	pop	{r3, r4, r5, pc}
 800f748:	20002194 	.word	0x20002194

0800f74c <_read_r>:
 800f74c:	b538      	push	{r3, r4, r5, lr}
 800f74e:	4d07      	ldr	r5, [pc, #28]	; (800f76c <_read_r+0x20>)
 800f750:	4604      	mov	r4, r0
 800f752:	4608      	mov	r0, r1
 800f754:	4611      	mov	r1, r2
 800f756:	2200      	movs	r2, #0
 800f758:	602a      	str	r2, [r5, #0]
 800f75a:	461a      	mov	r2, r3
 800f75c:	f7ff f9bc 	bl	800ead8 <_read>
 800f760:	1c43      	adds	r3, r0, #1
 800f762:	d102      	bne.n	800f76a <_read_r+0x1e>
 800f764:	682b      	ldr	r3, [r5, #0]
 800f766:	b103      	cbz	r3, 800f76a <_read_r+0x1e>
 800f768:	6023      	str	r3, [r4, #0]
 800f76a:	bd38      	pop	{r3, r4, r5, pc}
 800f76c:	20002194 	.word	0x20002194

0800f770 <_kill_r>:
 800f770:	b538      	push	{r3, r4, r5, lr}
 800f772:	4d07      	ldr	r5, [pc, #28]	; (800f790 <_kill_r+0x20>)
 800f774:	2300      	movs	r3, #0
 800f776:	4604      	mov	r4, r0
 800f778:	4608      	mov	r0, r1
 800f77a:	4611      	mov	r1, r2
 800f77c:	602b      	str	r3, [r5, #0]
 800f77e:	f7ff f991 	bl	800eaa4 <_kill>
 800f782:	1c43      	adds	r3, r0, #1
 800f784:	d102      	bne.n	800f78c <_kill_r+0x1c>
 800f786:	682b      	ldr	r3, [r5, #0]
 800f788:	b103      	cbz	r3, 800f78c <_kill_r+0x1c>
 800f78a:	6023      	str	r3, [r4, #0]
 800f78c:	bd38      	pop	{r3, r4, r5, pc}
 800f78e:	bf00      	nop
 800f790:	20002194 	.word	0x20002194

0800f794 <_getpid_r>:
 800f794:	f7ff b97e 	b.w	800ea94 <_getpid>

0800f798 <_sbrk_r>:
 800f798:	b538      	push	{r3, r4, r5, lr}
 800f79a:	4d06      	ldr	r5, [pc, #24]	; (800f7b4 <_sbrk_r+0x1c>)
 800f79c:	2300      	movs	r3, #0
 800f79e:	4604      	mov	r4, r0
 800f7a0:	4608      	mov	r0, r1
 800f7a2:	602b      	str	r3, [r5, #0]
 800f7a4:	f7ff fa06 	bl	800ebb4 <_sbrk>
 800f7a8:	1c43      	adds	r3, r0, #1
 800f7aa:	d102      	bne.n	800f7b2 <_sbrk_r+0x1a>
 800f7ac:	682b      	ldr	r3, [r5, #0]
 800f7ae:	b103      	cbz	r3, 800f7b2 <_sbrk_r+0x1a>
 800f7b0:	6023      	str	r3, [r4, #0]
 800f7b2:	bd38      	pop	{r3, r4, r5, pc}
 800f7b4:	20002194 	.word	0x20002194

0800f7b8 <_write_r>:
 800f7b8:	b538      	push	{r3, r4, r5, lr}
 800f7ba:	4d07      	ldr	r5, [pc, #28]	; (800f7d8 <_write_r+0x20>)
 800f7bc:	4604      	mov	r4, r0
 800f7be:	4608      	mov	r0, r1
 800f7c0:	4611      	mov	r1, r2
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	602a      	str	r2, [r5, #0]
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	f7ff f9a3 	bl	800eb12 <_write>
 800f7cc:	1c43      	adds	r3, r0, #1
 800f7ce:	d102      	bne.n	800f7d6 <_write_r+0x1e>
 800f7d0:	682b      	ldr	r3, [r5, #0]
 800f7d2:	b103      	cbz	r3, 800f7d6 <_write_r+0x1e>
 800f7d4:	6023      	str	r3, [r4, #0]
 800f7d6:	bd38      	pop	{r3, r4, r5, pc}
 800f7d8:	20002194 	.word	0x20002194

0800f7dc <__errno>:
 800f7dc:	4b01      	ldr	r3, [pc, #4]	; (800f7e4 <__errno+0x8>)
 800f7de:	6818      	ldr	r0, [r3, #0]
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	200000fc 	.word	0x200000fc

0800f7e8 <__libc_init_array>:
 800f7e8:	b570      	push	{r4, r5, r6, lr}
 800f7ea:	4d0d      	ldr	r5, [pc, #52]	; (800f820 <__libc_init_array+0x38>)
 800f7ec:	4c0d      	ldr	r4, [pc, #52]	; (800f824 <__libc_init_array+0x3c>)
 800f7ee:	1b64      	subs	r4, r4, r5
 800f7f0:	10a4      	asrs	r4, r4, #2
 800f7f2:	2600      	movs	r6, #0
 800f7f4:	42a6      	cmp	r6, r4
 800f7f6:	d109      	bne.n	800f80c <__libc_init_array+0x24>
 800f7f8:	4d0b      	ldr	r5, [pc, #44]	; (800f828 <__libc_init_array+0x40>)
 800f7fa:	4c0c      	ldr	r4, [pc, #48]	; (800f82c <__libc_init_array+0x44>)
 800f7fc:	f000 fe14 	bl	8010428 <_init>
 800f800:	1b64      	subs	r4, r4, r5
 800f802:	10a4      	asrs	r4, r4, #2
 800f804:	2600      	movs	r6, #0
 800f806:	42a6      	cmp	r6, r4
 800f808:	d105      	bne.n	800f816 <__libc_init_array+0x2e>
 800f80a:	bd70      	pop	{r4, r5, r6, pc}
 800f80c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f810:	4798      	blx	r3
 800f812:	3601      	adds	r6, #1
 800f814:	e7ee      	b.n	800f7f4 <__libc_init_array+0xc>
 800f816:	f855 3b04 	ldr.w	r3, [r5], #4
 800f81a:	4798      	blx	r3
 800f81c:	3601      	adds	r6, #1
 800f81e:	e7f2      	b.n	800f806 <__libc_init_array+0x1e>
 800f820:	08012264 	.word	0x08012264
 800f824:	08012264 	.word	0x08012264
 800f828:	08012264 	.word	0x08012264
 800f82c:	08012268 	.word	0x08012268

0800f830 <__retarget_lock_init_recursive>:
 800f830:	4770      	bx	lr

0800f832 <__retarget_lock_acquire_recursive>:
 800f832:	4770      	bx	lr

0800f834 <__retarget_lock_release_recursive>:
 800f834:	4770      	bx	lr

0800f836 <strcpy>:
 800f836:	4603      	mov	r3, r0
 800f838:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f83c:	f803 2b01 	strb.w	r2, [r3], #1
 800f840:	2a00      	cmp	r2, #0
 800f842:	d1f9      	bne.n	800f838 <strcpy+0x2>
 800f844:	4770      	bx	lr

0800f846 <memcpy>:
 800f846:	440a      	add	r2, r1
 800f848:	4291      	cmp	r1, r2
 800f84a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f84e:	d100      	bne.n	800f852 <memcpy+0xc>
 800f850:	4770      	bx	lr
 800f852:	b510      	push	{r4, lr}
 800f854:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f858:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f85c:	4291      	cmp	r1, r2
 800f85e:	d1f9      	bne.n	800f854 <memcpy+0xe>
 800f860:	bd10      	pop	{r4, pc}
	...

0800f864 <_free_r>:
 800f864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f866:	2900      	cmp	r1, #0
 800f868:	d044      	beq.n	800f8f4 <_free_r+0x90>
 800f86a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f86e:	9001      	str	r0, [sp, #4]
 800f870:	2b00      	cmp	r3, #0
 800f872:	f1a1 0404 	sub.w	r4, r1, #4
 800f876:	bfb8      	it	lt
 800f878:	18e4      	addlt	r4, r4, r3
 800f87a:	f7ff fc8b 	bl	800f194 <__malloc_lock>
 800f87e:	4a1e      	ldr	r2, [pc, #120]	; (800f8f8 <_free_r+0x94>)
 800f880:	9801      	ldr	r0, [sp, #4]
 800f882:	6813      	ldr	r3, [r2, #0]
 800f884:	b933      	cbnz	r3, 800f894 <_free_r+0x30>
 800f886:	6063      	str	r3, [r4, #4]
 800f888:	6014      	str	r4, [r2, #0]
 800f88a:	b003      	add	sp, #12
 800f88c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f890:	f7ff bc86 	b.w	800f1a0 <__malloc_unlock>
 800f894:	42a3      	cmp	r3, r4
 800f896:	d908      	bls.n	800f8aa <_free_r+0x46>
 800f898:	6825      	ldr	r5, [r4, #0]
 800f89a:	1961      	adds	r1, r4, r5
 800f89c:	428b      	cmp	r3, r1
 800f89e:	bf01      	itttt	eq
 800f8a0:	6819      	ldreq	r1, [r3, #0]
 800f8a2:	685b      	ldreq	r3, [r3, #4]
 800f8a4:	1949      	addeq	r1, r1, r5
 800f8a6:	6021      	streq	r1, [r4, #0]
 800f8a8:	e7ed      	b.n	800f886 <_free_r+0x22>
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	b10b      	cbz	r3, 800f8b4 <_free_r+0x50>
 800f8b0:	42a3      	cmp	r3, r4
 800f8b2:	d9fa      	bls.n	800f8aa <_free_r+0x46>
 800f8b4:	6811      	ldr	r1, [r2, #0]
 800f8b6:	1855      	adds	r5, r2, r1
 800f8b8:	42a5      	cmp	r5, r4
 800f8ba:	d10b      	bne.n	800f8d4 <_free_r+0x70>
 800f8bc:	6824      	ldr	r4, [r4, #0]
 800f8be:	4421      	add	r1, r4
 800f8c0:	1854      	adds	r4, r2, r1
 800f8c2:	42a3      	cmp	r3, r4
 800f8c4:	6011      	str	r1, [r2, #0]
 800f8c6:	d1e0      	bne.n	800f88a <_free_r+0x26>
 800f8c8:	681c      	ldr	r4, [r3, #0]
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	6053      	str	r3, [r2, #4]
 800f8ce:	440c      	add	r4, r1
 800f8d0:	6014      	str	r4, [r2, #0]
 800f8d2:	e7da      	b.n	800f88a <_free_r+0x26>
 800f8d4:	d902      	bls.n	800f8dc <_free_r+0x78>
 800f8d6:	230c      	movs	r3, #12
 800f8d8:	6003      	str	r3, [r0, #0]
 800f8da:	e7d6      	b.n	800f88a <_free_r+0x26>
 800f8dc:	6825      	ldr	r5, [r4, #0]
 800f8de:	1961      	adds	r1, r4, r5
 800f8e0:	428b      	cmp	r3, r1
 800f8e2:	bf04      	itt	eq
 800f8e4:	6819      	ldreq	r1, [r3, #0]
 800f8e6:	685b      	ldreq	r3, [r3, #4]
 800f8e8:	6063      	str	r3, [r4, #4]
 800f8ea:	bf04      	itt	eq
 800f8ec:	1949      	addeq	r1, r1, r5
 800f8ee:	6021      	streq	r1, [r4, #0]
 800f8f0:	6054      	str	r4, [r2, #4]
 800f8f2:	e7ca      	b.n	800f88a <_free_r+0x26>
 800f8f4:	b003      	add	sp, #12
 800f8f6:	bd30      	pop	{r4, r5, pc}
 800f8f8:	20002050 	.word	0x20002050

0800f8fc <__ssputs_r>:
 800f8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f900:	688e      	ldr	r6, [r1, #8]
 800f902:	461f      	mov	r7, r3
 800f904:	42be      	cmp	r6, r7
 800f906:	680b      	ldr	r3, [r1, #0]
 800f908:	4682      	mov	sl, r0
 800f90a:	460c      	mov	r4, r1
 800f90c:	4690      	mov	r8, r2
 800f90e:	d82c      	bhi.n	800f96a <__ssputs_r+0x6e>
 800f910:	898a      	ldrh	r2, [r1, #12]
 800f912:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f916:	d026      	beq.n	800f966 <__ssputs_r+0x6a>
 800f918:	6965      	ldr	r5, [r4, #20]
 800f91a:	6909      	ldr	r1, [r1, #16]
 800f91c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f920:	eba3 0901 	sub.w	r9, r3, r1
 800f924:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f928:	1c7b      	adds	r3, r7, #1
 800f92a:	444b      	add	r3, r9
 800f92c:	106d      	asrs	r5, r5, #1
 800f92e:	429d      	cmp	r5, r3
 800f930:	bf38      	it	cc
 800f932:	461d      	movcc	r5, r3
 800f934:	0553      	lsls	r3, r2, #21
 800f936:	d527      	bpl.n	800f988 <__ssputs_r+0x8c>
 800f938:	4629      	mov	r1, r5
 800f93a:	f7ff fbab 	bl	800f094 <_malloc_r>
 800f93e:	4606      	mov	r6, r0
 800f940:	b360      	cbz	r0, 800f99c <__ssputs_r+0xa0>
 800f942:	6921      	ldr	r1, [r4, #16]
 800f944:	464a      	mov	r2, r9
 800f946:	f7ff ff7e 	bl	800f846 <memcpy>
 800f94a:	89a3      	ldrh	r3, [r4, #12]
 800f94c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f954:	81a3      	strh	r3, [r4, #12]
 800f956:	6126      	str	r6, [r4, #16]
 800f958:	6165      	str	r5, [r4, #20]
 800f95a:	444e      	add	r6, r9
 800f95c:	eba5 0509 	sub.w	r5, r5, r9
 800f960:	6026      	str	r6, [r4, #0]
 800f962:	60a5      	str	r5, [r4, #8]
 800f964:	463e      	mov	r6, r7
 800f966:	42be      	cmp	r6, r7
 800f968:	d900      	bls.n	800f96c <__ssputs_r+0x70>
 800f96a:	463e      	mov	r6, r7
 800f96c:	6820      	ldr	r0, [r4, #0]
 800f96e:	4632      	mov	r2, r6
 800f970:	4641      	mov	r1, r8
 800f972:	f7ff fe45 	bl	800f600 <memmove>
 800f976:	68a3      	ldr	r3, [r4, #8]
 800f978:	1b9b      	subs	r3, r3, r6
 800f97a:	60a3      	str	r3, [r4, #8]
 800f97c:	6823      	ldr	r3, [r4, #0]
 800f97e:	4433      	add	r3, r6
 800f980:	6023      	str	r3, [r4, #0]
 800f982:	2000      	movs	r0, #0
 800f984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f988:	462a      	mov	r2, r5
 800f98a:	f000 fd15 	bl	80103b8 <_realloc_r>
 800f98e:	4606      	mov	r6, r0
 800f990:	2800      	cmp	r0, #0
 800f992:	d1e0      	bne.n	800f956 <__ssputs_r+0x5a>
 800f994:	6921      	ldr	r1, [r4, #16]
 800f996:	4650      	mov	r0, sl
 800f998:	f7ff ff64 	bl	800f864 <_free_r>
 800f99c:	230c      	movs	r3, #12
 800f99e:	f8ca 3000 	str.w	r3, [sl]
 800f9a2:	89a3      	ldrh	r3, [r4, #12]
 800f9a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9a8:	81a3      	strh	r3, [r4, #12]
 800f9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ae:	e7e9      	b.n	800f984 <__ssputs_r+0x88>

0800f9b0 <_svfiprintf_r>:
 800f9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b4:	4698      	mov	r8, r3
 800f9b6:	898b      	ldrh	r3, [r1, #12]
 800f9b8:	061b      	lsls	r3, r3, #24
 800f9ba:	b09d      	sub	sp, #116	; 0x74
 800f9bc:	4607      	mov	r7, r0
 800f9be:	460d      	mov	r5, r1
 800f9c0:	4614      	mov	r4, r2
 800f9c2:	d50e      	bpl.n	800f9e2 <_svfiprintf_r+0x32>
 800f9c4:	690b      	ldr	r3, [r1, #16]
 800f9c6:	b963      	cbnz	r3, 800f9e2 <_svfiprintf_r+0x32>
 800f9c8:	2140      	movs	r1, #64	; 0x40
 800f9ca:	f7ff fb63 	bl	800f094 <_malloc_r>
 800f9ce:	6028      	str	r0, [r5, #0]
 800f9d0:	6128      	str	r0, [r5, #16]
 800f9d2:	b920      	cbnz	r0, 800f9de <_svfiprintf_r+0x2e>
 800f9d4:	230c      	movs	r3, #12
 800f9d6:	603b      	str	r3, [r7, #0]
 800f9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9dc:	e0d0      	b.n	800fb80 <_svfiprintf_r+0x1d0>
 800f9de:	2340      	movs	r3, #64	; 0x40
 800f9e0:	616b      	str	r3, [r5, #20]
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800f9e6:	2320      	movs	r3, #32
 800f9e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9f0:	2330      	movs	r3, #48	; 0x30
 800f9f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fb98 <_svfiprintf_r+0x1e8>
 800f9f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9fa:	f04f 0901 	mov.w	r9, #1
 800f9fe:	4623      	mov	r3, r4
 800fa00:	469a      	mov	sl, r3
 800fa02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa06:	b10a      	cbz	r2, 800fa0c <_svfiprintf_r+0x5c>
 800fa08:	2a25      	cmp	r2, #37	; 0x25
 800fa0a:	d1f9      	bne.n	800fa00 <_svfiprintf_r+0x50>
 800fa0c:	ebba 0b04 	subs.w	fp, sl, r4
 800fa10:	d00b      	beq.n	800fa2a <_svfiprintf_r+0x7a>
 800fa12:	465b      	mov	r3, fp
 800fa14:	4622      	mov	r2, r4
 800fa16:	4629      	mov	r1, r5
 800fa18:	4638      	mov	r0, r7
 800fa1a:	f7ff ff6f 	bl	800f8fc <__ssputs_r>
 800fa1e:	3001      	adds	r0, #1
 800fa20:	f000 80a9 	beq.w	800fb76 <_svfiprintf_r+0x1c6>
 800fa24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa26:	445a      	add	r2, fp
 800fa28:	9209      	str	r2, [sp, #36]	; 0x24
 800fa2a:	f89a 3000 	ldrb.w	r3, [sl]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f000 80a1 	beq.w	800fb76 <_svfiprintf_r+0x1c6>
 800fa34:	2300      	movs	r3, #0
 800fa36:	f04f 32ff 	mov.w	r2, #4294967295
 800fa3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa3e:	f10a 0a01 	add.w	sl, sl, #1
 800fa42:	9304      	str	r3, [sp, #16]
 800fa44:	9307      	str	r3, [sp, #28]
 800fa46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa4a:	931a      	str	r3, [sp, #104]	; 0x68
 800fa4c:	4654      	mov	r4, sl
 800fa4e:	2205      	movs	r2, #5
 800fa50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa54:	4850      	ldr	r0, [pc, #320]	; (800fb98 <_svfiprintf_r+0x1e8>)
 800fa56:	f7f0 fbcb 	bl	80001f0 <memchr>
 800fa5a:	9a04      	ldr	r2, [sp, #16]
 800fa5c:	b9d8      	cbnz	r0, 800fa96 <_svfiprintf_r+0xe6>
 800fa5e:	06d0      	lsls	r0, r2, #27
 800fa60:	bf44      	itt	mi
 800fa62:	2320      	movmi	r3, #32
 800fa64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa68:	0711      	lsls	r1, r2, #28
 800fa6a:	bf44      	itt	mi
 800fa6c:	232b      	movmi	r3, #43	; 0x2b
 800fa6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa72:	f89a 3000 	ldrb.w	r3, [sl]
 800fa76:	2b2a      	cmp	r3, #42	; 0x2a
 800fa78:	d015      	beq.n	800faa6 <_svfiprintf_r+0xf6>
 800fa7a:	9a07      	ldr	r2, [sp, #28]
 800fa7c:	4654      	mov	r4, sl
 800fa7e:	2000      	movs	r0, #0
 800fa80:	f04f 0c0a 	mov.w	ip, #10
 800fa84:	4621      	mov	r1, r4
 800fa86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa8a:	3b30      	subs	r3, #48	; 0x30
 800fa8c:	2b09      	cmp	r3, #9
 800fa8e:	d94d      	bls.n	800fb2c <_svfiprintf_r+0x17c>
 800fa90:	b1b0      	cbz	r0, 800fac0 <_svfiprintf_r+0x110>
 800fa92:	9207      	str	r2, [sp, #28]
 800fa94:	e014      	b.n	800fac0 <_svfiprintf_r+0x110>
 800fa96:	eba0 0308 	sub.w	r3, r0, r8
 800fa9a:	fa09 f303 	lsl.w	r3, r9, r3
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	9304      	str	r3, [sp, #16]
 800faa2:	46a2      	mov	sl, r4
 800faa4:	e7d2      	b.n	800fa4c <_svfiprintf_r+0x9c>
 800faa6:	9b03      	ldr	r3, [sp, #12]
 800faa8:	1d19      	adds	r1, r3, #4
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	9103      	str	r1, [sp, #12]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	bfbb      	ittet	lt
 800fab2:	425b      	neglt	r3, r3
 800fab4:	f042 0202 	orrlt.w	r2, r2, #2
 800fab8:	9307      	strge	r3, [sp, #28]
 800faba:	9307      	strlt	r3, [sp, #28]
 800fabc:	bfb8      	it	lt
 800fabe:	9204      	strlt	r2, [sp, #16]
 800fac0:	7823      	ldrb	r3, [r4, #0]
 800fac2:	2b2e      	cmp	r3, #46	; 0x2e
 800fac4:	d10c      	bne.n	800fae0 <_svfiprintf_r+0x130>
 800fac6:	7863      	ldrb	r3, [r4, #1]
 800fac8:	2b2a      	cmp	r3, #42	; 0x2a
 800faca:	d134      	bne.n	800fb36 <_svfiprintf_r+0x186>
 800facc:	9b03      	ldr	r3, [sp, #12]
 800face:	1d1a      	adds	r2, r3, #4
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	9203      	str	r2, [sp, #12]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	bfb8      	it	lt
 800fad8:	f04f 33ff 	movlt.w	r3, #4294967295
 800fadc:	3402      	adds	r4, #2
 800fade:	9305      	str	r3, [sp, #20]
 800fae0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800fba8 <_svfiprintf_r+0x1f8>
 800fae4:	7821      	ldrb	r1, [r4, #0]
 800fae6:	2203      	movs	r2, #3
 800fae8:	4650      	mov	r0, sl
 800faea:	f7f0 fb81 	bl	80001f0 <memchr>
 800faee:	b138      	cbz	r0, 800fb00 <_svfiprintf_r+0x150>
 800faf0:	9b04      	ldr	r3, [sp, #16]
 800faf2:	eba0 000a 	sub.w	r0, r0, sl
 800faf6:	2240      	movs	r2, #64	; 0x40
 800faf8:	4082      	lsls	r2, r0
 800fafa:	4313      	orrs	r3, r2
 800fafc:	3401      	adds	r4, #1
 800fafe:	9304      	str	r3, [sp, #16]
 800fb00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb04:	4825      	ldr	r0, [pc, #148]	; (800fb9c <_svfiprintf_r+0x1ec>)
 800fb06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb0a:	2206      	movs	r2, #6
 800fb0c:	f7f0 fb70 	bl	80001f0 <memchr>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	d038      	beq.n	800fb86 <_svfiprintf_r+0x1d6>
 800fb14:	4b22      	ldr	r3, [pc, #136]	; (800fba0 <_svfiprintf_r+0x1f0>)
 800fb16:	bb1b      	cbnz	r3, 800fb60 <_svfiprintf_r+0x1b0>
 800fb18:	9b03      	ldr	r3, [sp, #12]
 800fb1a:	3307      	adds	r3, #7
 800fb1c:	f023 0307 	bic.w	r3, r3, #7
 800fb20:	3308      	adds	r3, #8
 800fb22:	9303      	str	r3, [sp, #12]
 800fb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb26:	4433      	add	r3, r6
 800fb28:	9309      	str	r3, [sp, #36]	; 0x24
 800fb2a:	e768      	b.n	800f9fe <_svfiprintf_r+0x4e>
 800fb2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb30:	460c      	mov	r4, r1
 800fb32:	2001      	movs	r0, #1
 800fb34:	e7a6      	b.n	800fa84 <_svfiprintf_r+0xd4>
 800fb36:	2300      	movs	r3, #0
 800fb38:	3401      	adds	r4, #1
 800fb3a:	9305      	str	r3, [sp, #20]
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	f04f 0c0a 	mov.w	ip, #10
 800fb42:	4620      	mov	r0, r4
 800fb44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb48:	3a30      	subs	r2, #48	; 0x30
 800fb4a:	2a09      	cmp	r2, #9
 800fb4c:	d903      	bls.n	800fb56 <_svfiprintf_r+0x1a6>
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d0c6      	beq.n	800fae0 <_svfiprintf_r+0x130>
 800fb52:	9105      	str	r1, [sp, #20]
 800fb54:	e7c4      	b.n	800fae0 <_svfiprintf_r+0x130>
 800fb56:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	e7f0      	b.n	800fb42 <_svfiprintf_r+0x192>
 800fb60:	ab03      	add	r3, sp, #12
 800fb62:	9300      	str	r3, [sp, #0]
 800fb64:	462a      	mov	r2, r5
 800fb66:	4b0f      	ldr	r3, [pc, #60]	; (800fba4 <_svfiprintf_r+0x1f4>)
 800fb68:	a904      	add	r1, sp, #16
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	f3af 8000 	nop.w
 800fb70:	1c42      	adds	r2, r0, #1
 800fb72:	4606      	mov	r6, r0
 800fb74:	d1d6      	bne.n	800fb24 <_svfiprintf_r+0x174>
 800fb76:	89ab      	ldrh	r3, [r5, #12]
 800fb78:	065b      	lsls	r3, r3, #25
 800fb7a:	f53f af2d 	bmi.w	800f9d8 <_svfiprintf_r+0x28>
 800fb7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb80:	b01d      	add	sp, #116	; 0x74
 800fb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb86:	ab03      	add	r3, sp, #12
 800fb88:	9300      	str	r3, [sp, #0]
 800fb8a:	462a      	mov	r2, r5
 800fb8c:	4b05      	ldr	r3, [pc, #20]	; (800fba4 <_svfiprintf_r+0x1f4>)
 800fb8e:	a904      	add	r1, sp, #16
 800fb90:	4638      	mov	r0, r7
 800fb92:	f000 f9bd 	bl	800ff10 <_printf_i>
 800fb96:	e7eb      	b.n	800fb70 <_svfiprintf_r+0x1c0>
 800fb98:	08012227 	.word	0x08012227
 800fb9c:	08012231 	.word	0x08012231
 800fba0:	00000000 	.word	0x00000000
 800fba4:	0800f8fd 	.word	0x0800f8fd
 800fba8:	0801222d 	.word	0x0801222d

0800fbac <__sfputc_r>:
 800fbac:	6893      	ldr	r3, [r2, #8]
 800fbae:	3b01      	subs	r3, #1
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	b410      	push	{r4}
 800fbb4:	6093      	str	r3, [r2, #8]
 800fbb6:	da08      	bge.n	800fbca <__sfputc_r+0x1e>
 800fbb8:	6994      	ldr	r4, [r2, #24]
 800fbba:	42a3      	cmp	r3, r4
 800fbbc:	db01      	blt.n	800fbc2 <__sfputc_r+0x16>
 800fbbe:	290a      	cmp	r1, #10
 800fbc0:	d103      	bne.n	800fbca <__sfputc_r+0x1e>
 800fbc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbc6:	f7ff bc85 	b.w	800f4d4 <__swbuf_r>
 800fbca:	6813      	ldr	r3, [r2, #0]
 800fbcc:	1c58      	adds	r0, r3, #1
 800fbce:	6010      	str	r0, [r2, #0]
 800fbd0:	7019      	strb	r1, [r3, #0]
 800fbd2:	4608      	mov	r0, r1
 800fbd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbd8:	4770      	bx	lr

0800fbda <__sfputs_r>:
 800fbda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbdc:	4606      	mov	r6, r0
 800fbde:	460f      	mov	r7, r1
 800fbe0:	4614      	mov	r4, r2
 800fbe2:	18d5      	adds	r5, r2, r3
 800fbe4:	42ac      	cmp	r4, r5
 800fbe6:	d101      	bne.n	800fbec <__sfputs_r+0x12>
 800fbe8:	2000      	movs	r0, #0
 800fbea:	e007      	b.n	800fbfc <__sfputs_r+0x22>
 800fbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbf0:	463a      	mov	r2, r7
 800fbf2:	4630      	mov	r0, r6
 800fbf4:	f7ff ffda 	bl	800fbac <__sfputc_r>
 800fbf8:	1c43      	adds	r3, r0, #1
 800fbfa:	d1f3      	bne.n	800fbe4 <__sfputs_r+0xa>
 800fbfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fc00 <_vfiprintf_r>:
 800fc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc04:	460d      	mov	r5, r1
 800fc06:	b09d      	sub	sp, #116	; 0x74
 800fc08:	4614      	mov	r4, r2
 800fc0a:	4698      	mov	r8, r3
 800fc0c:	4606      	mov	r6, r0
 800fc0e:	b118      	cbz	r0, 800fc18 <_vfiprintf_r+0x18>
 800fc10:	6a03      	ldr	r3, [r0, #32]
 800fc12:	b90b      	cbnz	r3, 800fc18 <_vfiprintf_r+0x18>
 800fc14:	f7ff fb56 	bl	800f2c4 <__sinit>
 800fc18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc1a:	07d9      	lsls	r1, r3, #31
 800fc1c:	d405      	bmi.n	800fc2a <_vfiprintf_r+0x2a>
 800fc1e:	89ab      	ldrh	r3, [r5, #12]
 800fc20:	059a      	lsls	r2, r3, #22
 800fc22:	d402      	bmi.n	800fc2a <_vfiprintf_r+0x2a>
 800fc24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc26:	f7ff fe04 	bl	800f832 <__retarget_lock_acquire_recursive>
 800fc2a:	89ab      	ldrh	r3, [r5, #12]
 800fc2c:	071b      	lsls	r3, r3, #28
 800fc2e:	d501      	bpl.n	800fc34 <_vfiprintf_r+0x34>
 800fc30:	692b      	ldr	r3, [r5, #16]
 800fc32:	b99b      	cbnz	r3, 800fc5c <_vfiprintf_r+0x5c>
 800fc34:	4629      	mov	r1, r5
 800fc36:	4630      	mov	r0, r6
 800fc38:	f7ff fc8a 	bl	800f550 <__swsetup_r>
 800fc3c:	b170      	cbz	r0, 800fc5c <_vfiprintf_r+0x5c>
 800fc3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc40:	07dc      	lsls	r4, r3, #31
 800fc42:	d504      	bpl.n	800fc4e <_vfiprintf_r+0x4e>
 800fc44:	f04f 30ff 	mov.w	r0, #4294967295
 800fc48:	b01d      	add	sp, #116	; 0x74
 800fc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc4e:	89ab      	ldrh	r3, [r5, #12]
 800fc50:	0598      	lsls	r0, r3, #22
 800fc52:	d4f7      	bmi.n	800fc44 <_vfiprintf_r+0x44>
 800fc54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc56:	f7ff fded 	bl	800f834 <__retarget_lock_release_recursive>
 800fc5a:	e7f3      	b.n	800fc44 <_vfiprintf_r+0x44>
 800fc5c:	2300      	movs	r3, #0
 800fc5e:	9309      	str	r3, [sp, #36]	; 0x24
 800fc60:	2320      	movs	r3, #32
 800fc62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fc66:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc6a:	2330      	movs	r3, #48	; 0x30
 800fc6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fe20 <_vfiprintf_r+0x220>
 800fc70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc74:	f04f 0901 	mov.w	r9, #1
 800fc78:	4623      	mov	r3, r4
 800fc7a:	469a      	mov	sl, r3
 800fc7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc80:	b10a      	cbz	r2, 800fc86 <_vfiprintf_r+0x86>
 800fc82:	2a25      	cmp	r2, #37	; 0x25
 800fc84:	d1f9      	bne.n	800fc7a <_vfiprintf_r+0x7a>
 800fc86:	ebba 0b04 	subs.w	fp, sl, r4
 800fc8a:	d00b      	beq.n	800fca4 <_vfiprintf_r+0xa4>
 800fc8c:	465b      	mov	r3, fp
 800fc8e:	4622      	mov	r2, r4
 800fc90:	4629      	mov	r1, r5
 800fc92:	4630      	mov	r0, r6
 800fc94:	f7ff ffa1 	bl	800fbda <__sfputs_r>
 800fc98:	3001      	adds	r0, #1
 800fc9a:	f000 80a9 	beq.w	800fdf0 <_vfiprintf_r+0x1f0>
 800fc9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fca0:	445a      	add	r2, fp
 800fca2:	9209      	str	r2, [sp, #36]	; 0x24
 800fca4:	f89a 3000 	ldrb.w	r3, [sl]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	f000 80a1 	beq.w	800fdf0 <_vfiprintf_r+0x1f0>
 800fcae:	2300      	movs	r3, #0
 800fcb0:	f04f 32ff 	mov.w	r2, #4294967295
 800fcb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcb8:	f10a 0a01 	add.w	sl, sl, #1
 800fcbc:	9304      	str	r3, [sp, #16]
 800fcbe:	9307      	str	r3, [sp, #28]
 800fcc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fcc4:	931a      	str	r3, [sp, #104]	; 0x68
 800fcc6:	4654      	mov	r4, sl
 800fcc8:	2205      	movs	r2, #5
 800fcca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcce:	4854      	ldr	r0, [pc, #336]	; (800fe20 <_vfiprintf_r+0x220>)
 800fcd0:	f7f0 fa8e 	bl	80001f0 <memchr>
 800fcd4:	9a04      	ldr	r2, [sp, #16]
 800fcd6:	b9d8      	cbnz	r0, 800fd10 <_vfiprintf_r+0x110>
 800fcd8:	06d1      	lsls	r1, r2, #27
 800fcda:	bf44      	itt	mi
 800fcdc:	2320      	movmi	r3, #32
 800fcde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fce2:	0713      	lsls	r3, r2, #28
 800fce4:	bf44      	itt	mi
 800fce6:	232b      	movmi	r3, #43	; 0x2b
 800fce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fcec:	f89a 3000 	ldrb.w	r3, [sl]
 800fcf0:	2b2a      	cmp	r3, #42	; 0x2a
 800fcf2:	d015      	beq.n	800fd20 <_vfiprintf_r+0x120>
 800fcf4:	9a07      	ldr	r2, [sp, #28]
 800fcf6:	4654      	mov	r4, sl
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	f04f 0c0a 	mov.w	ip, #10
 800fcfe:	4621      	mov	r1, r4
 800fd00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd04:	3b30      	subs	r3, #48	; 0x30
 800fd06:	2b09      	cmp	r3, #9
 800fd08:	d94d      	bls.n	800fda6 <_vfiprintf_r+0x1a6>
 800fd0a:	b1b0      	cbz	r0, 800fd3a <_vfiprintf_r+0x13a>
 800fd0c:	9207      	str	r2, [sp, #28]
 800fd0e:	e014      	b.n	800fd3a <_vfiprintf_r+0x13a>
 800fd10:	eba0 0308 	sub.w	r3, r0, r8
 800fd14:	fa09 f303 	lsl.w	r3, r9, r3
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	9304      	str	r3, [sp, #16]
 800fd1c:	46a2      	mov	sl, r4
 800fd1e:	e7d2      	b.n	800fcc6 <_vfiprintf_r+0xc6>
 800fd20:	9b03      	ldr	r3, [sp, #12]
 800fd22:	1d19      	adds	r1, r3, #4
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	9103      	str	r1, [sp, #12]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	bfbb      	ittet	lt
 800fd2c:	425b      	neglt	r3, r3
 800fd2e:	f042 0202 	orrlt.w	r2, r2, #2
 800fd32:	9307      	strge	r3, [sp, #28]
 800fd34:	9307      	strlt	r3, [sp, #28]
 800fd36:	bfb8      	it	lt
 800fd38:	9204      	strlt	r2, [sp, #16]
 800fd3a:	7823      	ldrb	r3, [r4, #0]
 800fd3c:	2b2e      	cmp	r3, #46	; 0x2e
 800fd3e:	d10c      	bne.n	800fd5a <_vfiprintf_r+0x15a>
 800fd40:	7863      	ldrb	r3, [r4, #1]
 800fd42:	2b2a      	cmp	r3, #42	; 0x2a
 800fd44:	d134      	bne.n	800fdb0 <_vfiprintf_r+0x1b0>
 800fd46:	9b03      	ldr	r3, [sp, #12]
 800fd48:	1d1a      	adds	r2, r3, #4
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	9203      	str	r2, [sp, #12]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	bfb8      	it	lt
 800fd52:	f04f 33ff 	movlt.w	r3, #4294967295
 800fd56:	3402      	adds	r4, #2
 800fd58:	9305      	str	r3, [sp, #20]
 800fd5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fe30 <_vfiprintf_r+0x230>
 800fd5e:	7821      	ldrb	r1, [r4, #0]
 800fd60:	2203      	movs	r2, #3
 800fd62:	4650      	mov	r0, sl
 800fd64:	f7f0 fa44 	bl	80001f0 <memchr>
 800fd68:	b138      	cbz	r0, 800fd7a <_vfiprintf_r+0x17a>
 800fd6a:	9b04      	ldr	r3, [sp, #16]
 800fd6c:	eba0 000a 	sub.w	r0, r0, sl
 800fd70:	2240      	movs	r2, #64	; 0x40
 800fd72:	4082      	lsls	r2, r0
 800fd74:	4313      	orrs	r3, r2
 800fd76:	3401      	adds	r4, #1
 800fd78:	9304      	str	r3, [sp, #16]
 800fd7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd7e:	4829      	ldr	r0, [pc, #164]	; (800fe24 <_vfiprintf_r+0x224>)
 800fd80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd84:	2206      	movs	r2, #6
 800fd86:	f7f0 fa33 	bl	80001f0 <memchr>
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	d03f      	beq.n	800fe0e <_vfiprintf_r+0x20e>
 800fd8e:	4b26      	ldr	r3, [pc, #152]	; (800fe28 <_vfiprintf_r+0x228>)
 800fd90:	bb1b      	cbnz	r3, 800fdda <_vfiprintf_r+0x1da>
 800fd92:	9b03      	ldr	r3, [sp, #12]
 800fd94:	3307      	adds	r3, #7
 800fd96:	f023 0307 	bic.w	r3, r3, #7
 800fd9a:	3308      	adds	r3, #8
 800fd9c:	9303      	str	r3, [sp, #12]
 800fd9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fda0:	443b      	add	r3, r7
 800fda2:	9309      	str	r3, [sp, #36]	; 0x24
 800fda4:	e768      	b.n	800fc78 <_vfiprintf_r+0x78>
 800fda6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdaa:	460c      	mov	r4, r1
 800fdac:	2001      	movs	r0, #1
 800fdae:	e7a6      	b.n	800fcfe <_vfiprintf_r+0xfe>
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	3401      	adds	r4, #1
 800fdb4:	9305      	str	r3, [sp, #20]
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	f04f 0c0a 	mov.w	ip, #10
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdc2:	3a30      	subs	r2, #48	; 0x30
 800fdc4:	2a09      	cmp	r2, #9
 800fdc6:	d903      	bls.n	800fdd0 <_vfiprintf_r+0x1d0>
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d0c6      	beq.n	800fd5a <_vfiprintf_r+0x15a>
 800fdcc:	9105      	str	r1, [sp, #20]
 800fdce:	e7c4      	b.n	800fd5a <_vfiprintf_r+0x15a>
 800fdd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdd4:	4604      	mov	r4, r0
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e7f0      	b.n	800fdbc <_vfiprintf_r+0x1bc>
 800fdda:	ab03      	add	r3, sp, #12
 800fddc:	9300      	str	r3, [sp, #0]
 800fdde:	462a      	mov	r2, r5
 800fde0:	4b12      	ldr	r3, [pc, #72]	; (800fe2c <_vfiprintf_r+0x22c>)
 800fde2:	a904      	add	r1, sp, #16
 800fde4:	4630      	mov	r0, r6
 800fde6:	f3af 8000 	nop.w
 800fdea:	4607      	mov	r7, r0
 800fdec:	1c78      	adds	r0, r7, #1
 800fdee:	d1d6      	bne.n	800fd9e <_vfiprintf_r+0x19e>
 800fdf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fdf2:	07d9      	lsls	r1, r3, #31
 800fdf4:	d405      	bmi.n	800fe02 <_vfiprintf_r+0x202>
 800fdf6:	89ab      	ldrh	r3, [r5, #12]
 800fdf8:	059a      	lsls	r2, r3, #22
 800fdfa:	d402      	bmi.n	800fe02 <_vfiprintf_r+0x202>
 800fdfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fdfe:	f7ff fd19 	bl	800f834 <__retarget_lock_release_recursive>
 800fe02:	89ab      	ldrh	r3, [r5, #12]
 800fe04:	065b      	lsls	r3, r3, #25
 800fe06:	f53f af1d 	bmi.w	800fc44 <_vfiprintf_r+0x44>
 800fe0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fe0c:	e71c      	b.n	800fc48 <_vfiprintf_r+0x48>
 800fe0e:	ab03      	add	r3, sp, #12
 800fe10:	9300      	str	r3, [sp, #0]
 800fe12:	462a      	mov	r2, r5
 800fe14:	4b05      	ldr	r3, [pc, #20]	; (800fe2c <_vfiprintf_r+0x22c>)
 800fe16:	a904      	add	r1, sp, #16
 800fe18:	4630      	mov	r0, r6
 800fe1a:	f000 f879 	bl	800ff10 <_printf_i>
 800fe1e:	e7e4      	b.n	800fdea <_vfiprintf_r+0x1ea>
 800fe20:	08012227 	.word	0x08012227
 800fe24:	08012231 	.word	0x08012231
 800fe28:	00000000 	.word	0x00000000
 800fe2c:	0800fbdb 	.word	0x0800fbdb
 800fe30:	0801222d 	.word	0x0801222d

0800fe34 <_printf_common>:
 800fe34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe38:	4616      	mov	r6, r2
 800fe3a:	4699      	mov	r9, r3
 800fe3c:	688a      	ldr	r2, [r1, #8]
 800fe3e:	690b      	ldr	r3, [r1, #16]
 800fe40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fe44:	4293      	cmp	r3, r2
 800fe46:	bfb8      	it	lt
 800fe48:	4613      	movlt	r3, r2
 800fe4a:	6033      	str	r3, [r6, #0]
 800fe4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fe50:	4607      	mov	r7, r0
 800fe52:	460c      	mov	r4, r1
 800fe54:	b10a      	cbz	r2, 800fe5a <_printf_common+0x26>
 800fe56:	3301      	adds	r3, #1
 800fe58:	6033      	str	r3, [r6, #0]
 800fe5a:	6823      	ldr	r3, [r4, #0]
 800fe5c:	0699      	lsls	r1, r3, #26
 800fe5e:	bf42      	ittt	mi
 800fe60:	6833      	ldrmi	r3, [r6, #0]
 800fe62:	3302      	addmi	r3, #2
 800fe64:	6033      	strmi	r3, [r6, #0]
 800fe66:	6825      	ldr	r5, [r4, #0]
 800fe68:	f015 0506 	ands.w	r5, r5, #6
 800fe6c:	d106      	bne.n	800fe7c <_printf_common+0x48>
 800fe6e:	f104 0a19 	add.w	sl, r4, #25
 800fe72:	68e3      	ldr	r3, [r4, #12]
 800fe74:	6832      	ldr	r2, [r6, #0]
 800fe76:	1a9b      	subs	r3, r3, r2
 800fe78:	42ab      	cmp	r3, r5
 800fe7a:	dc26      	bgt.n	800feca <_printf_common+0x96>
 800fe7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fe80:	1e13      	subs	r3, r2, #0
 800fe82:	6822      	ldr	r2, [r4, #0]
 800fe84:	bf18      	it	ne
 800fe86:	2301      	movne	r3, #1
 800fe88:	0692      	lsls	r2, r2, #26
 800fe8a:	d42b      	bmi.n	800fee4 <_printf_common+0xb0>
 800fe8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe90:	4649      	mov	r1, r9
 800fe92:	4638      	mov	r0, r7
 800fe94:	47c0      	blx	r8
 800fe96:	3001      	adds	r0, #1
 800fe98:	d01e      	beq.n	800fed8 <_printf_common+0xa4>
 800fe9a:	6823      	ldr	r3, [r4, #0]
 800fe9c:	6922      	ldr	r2, [r4, #16]
 800fe9e:	f003 0306 	and.w	r3, r3, #6
 800fea2:	2b04      	cmp	r3, #4
 800fea4:	bf02      	ittt	eq
 800fea6:	68e5      	ldreq	r5, [r4, #12]
 800fea8:	6833      	ldreq	r3, [r6, #0]
 800feaa:	1aed      	subeq	r5, r5, r3
 800feac:	68a3      	ldr	r3, [r4, #8]
 800feae:	bf0c      	ite	eq
 800feb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800feb4:	2500      	movne	r5, #0
 800feb6:	4293      	cmp	r3, r2
 800feb8:	bfc4      	itt	gt
 800feba:	1a9b      	subgt	r3, r3, r2
 800febc:	18ed      	addgt	r5, r5, r3
 800febe:	2600      	movs	r6, #0
 800fec0:	341a      	adds	r4, #26
 800fec2:	42b5      	cmp	r5, r6
 800fec4:	d11a      	bne.n	800fefc <_printf_common+0xc8>
 800fec6:	2000      	movs	r0, #0
 800fec8:	e008      	b.n	800fedc <_printf_common+0xa8>
 800feca:	2301      	movs	r3, #1
 800fecc:	4652      	mov	r2, sl
 800fece:	4649      	mov	r1, r9
 800fed0:	4638      	mov	r0, r7
 800fed2:	47c0      	blx	r8
 800fed4:	3001      	adds	r0, #1
 800fed6:	d103      	bne.n	800fee0 <_printf_common+0xac>
 800fed8:	f04f 30ff 	mov.w	r0, #4294967295
 800fedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fee0:	3501      	adds	r5, #1
 800fee2:	e7c6      	b.n	800fe72 <_printf_common+0x3e>
 800fee4:	18e1      	adds	r1, r4, r3
 800fee6:	1c5a      	adds	r2, r3, #1
 800fee8:	2030      	movs	r0, #48	; 0x30
 800feea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800feee:	4422      	add	r2, r4
 800fef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fef8:	3302      	adds	r3, #2
 800fefa:	e7c7      	b.n	800fe8c <_printf_common+0x58>
 800fefc:	2301      	movs	r3, #1
 800fefe:	4622      	mov	r2, r4
 800ff00:	4649      	mov	r1, r9
 800ff02:	4638      	mov	r0, r7
 800ff04:	47c0      	blx	r8
 800ff06:	3001      	adds	r0, #1
 800ff08:	d0e6      	beq.n	800fed8 <_printf_common+0xa4>
 800ff0a:	3601      	adds	r6, #1
 800ff0c:	e7d9      	b.n	800fec2 <_printf_common+0x8e>
	...

0800ff10 <_printf_i>:
 800ff10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff14:	7e0f      	ldrb	r7, [r1, #24]
 800ff16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ff18:	2f78      	cmp	r7, #120	; 0x78
 800ff1a:	4691      	mov	r9, r2
 800ff1c:	4680      	mov	r8, r0
 800ff1e:	460c      	mov	r4, r1
 800ff20:	469a      	mov	sl, r3
 800ff22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ff26:	d807      	bhi.n	800ff38 <_printf_i+0x28>
 800ff28:	2f62      	cmp	r7, #98	; 0x62
 800ff2a:	d80a      	bhi.n	800ff42 <_printf_i+0x32>
 800ff2c:	2f00      	cmp	r7, #0
 800ff2e:	f000 80d4 	beq.w	80100da <_printf_i+0x1ca>
 800ff32:	2f58      	cmp	r7, #88	; 0x58
 800ff34:	f000 80c0 	beq.w	80100b8 <_printf_i+0x1a8>
 800ff38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ff40:	e03a      	b.n	800ffb8 <_printf_i+0xa8>
 800ff42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ff46:	2b15      	cmp	r3, #21
 800ff48:	d8f6      	bhi.n	800ff38 <_printf_i+0x28>
 800ff4a:	a101      	add	r1, pc, #4	; (adr r1, 800ff50 <_printf_i+0x40>)
 800ff4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ff50:	0800ffa9 	.word	0x0800ffa9
 800ff54:	0800ffbd 	.word	0x0800ffbd
 800ff58:	0800ff39 	.word	0x0800ff39
 800ff5c:	0800ff39 	.word	0x0800ff39
 800ff60:	0800ff39 	.word	0x0800ff39
 800ff64:	0800ff39 	.word	0x0800ff39
 800ff68:	0800ffbd 	.word	0x0800ffbd
 800ff6c:	0800ff39 	.word	0x0800ff39
 800ff70:	0800ff39 	.word	0x0800ff39
 800ff74:	0800ff39 	.word	0x0800ff39
 800ff78:	0800ff39 	.word	0x0800ff39
 800ff7c:	080100c1 	.word	0x080100c1
 800ff80:	0800ffe9 	.word	0x0800ffe9
 800ff84:	0801007b 	.word	0x0801007b
 800ff88:	0800ff39 	.word	0x0800ff39
 800ff8c:	0800ff39 	.word	0x0800ff39
 800ff90:	080100e3 	.word	0x080100e3
 800ff94:	0800ff39 	.word	0x0800ff39
 800ff98:	0800ffe9 	.word	0x0800ffe9
 800ff9c:	0800ff39 	.word	0x0800ff39
 800ffa0:	0800ff39 	.word	0x0800ff39
 800ffa4:	08010083 	.word	0x08010083
 800ffa8:	682b      	ldr	r3, [r5, #0]
 800ffaa:	1d1a      	adds	r2, r3, #4
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	602a      	str	r2, [r5, #0]
 800ffb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ffb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ffb8:	2301      	movs	r3, #1
 800ffba:	e09f      	b.n	80100fc <_printf_i+0x1ec>
 800ffbc:	6820      	ldr	r0, [r4, #0]
 800ffbe:	682b      	ldr	r3, [r5, #0]
 800ffc0:	0607      	lsls	r7, r0, #24
 800ffc2:	f103 0104 	add.w	r1, r3, #4
 800ffc6:	6029      	str	r1, [r5, #0]
 800ffc8:	d501      	bpl.n	800ffce <_printf_i+0xbe>
 800ffca:	681e      	ldr	r6, [r3, #0]
 800ffcc:	e003      	b.n	800ffd6 <_printf_i+0xc6>
 800ffce:	0646      	lsls	r6, r0, #25
 800ffd0:	d5fb      	bpl.n	800ffca <_printf_i+0xba>
 800ffd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ffd6:	2e00      	cmp	r6, #0
 800ffd8:	da03      	bge.n	800ffe2 <_printf_i+0xd2>
 800ffda:	232d      	movs	r3, #45	; 0x2d
 800ffdc:	4276      	negs	r6, r6
 800ffde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffe2:	485a      	ldr	r0, [pc, #360]	; (801014c <_printf_i+0x23c>)
 800ffe4:	230a      	movs	r3, #10
 800ffe6:	e012      	b.n	801000e <_printf_i+0xfe>
 800ffe8:	682b      	ldr	r3, [r5, #0]
 800ffea:	6820      	ldr	r0, [r4, #0]
 800ffec:	1d19      	adds	r1, r3, #4
 800ffee:	6029      	str	r1, [r5, #0]
 800fff0:	0605      	lsls	r5, r0, #24
 800fff2:	d501      	bpl.n	800fff8 <_printf_i+0xe8>
 800fff4:	681e      	ldr	r6, [r3, #0]
 800fff6:	e002      	b.n	800fffe <_printf_i+0xee>
 800fff8:	0641      	lsls	r1, r0, #25
 800fffa:	d5fb      	bpl.n	800fff4 <_printf_i+0xe4>
 800fffc:	881e      	ldrh	r6, [r3, #0]
 800fffe:	4853      	ldr	r0, [pc, #332]	; (801014c <_printf_i+0x23c>)
 8010000:	2f6f      	cmp	r7, #111	; 0x6f
 8010002:	bf0c      	ite	eq
 8010004:	2308      	moveq	r3, #8
 8010006:	230a      	movne	r3, #10
 8010008:	2100      	movs	r1, #0
 801000a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801000e:	6865      	ldr	r5, [r4, #4]
 8010010:	60a5      	str	r5, [r4, #8]
 8010012:	2d00      	cmp	r5, #0
 8010014:	bfa2      	ittt	ge
 8010016:	6821      	ldrge	r1, [r4, #0]
 8010018:	f021 0104 	bicge.w	r1, r1, #4
 801001c:	6021      	strge	r1, [r4, #0]
 801001e:	b90e      	cbnz	r6, 8010024 <_printf_i+0x114>
 8010020:	2d00      	cmp	r5, #0
 8010022:	d04b      	beq.n	80100bc <_printf_i+0x1ac>
 8010024:	4615      	mov	r5, r2
 8010026:	fbb6 f1f3 	udiv	r1, r6, r3
 801002a:	fb03 6711 	mls	r7, r3, r1, r6
 801002e:	5dc7      	ldrb	r7, [r0, r7]
 8010030:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010034:	4637      	mov	r7, r6
 8010036:	42bb      	cmp	r3, r7
 8010038:	460e      	mov	r6, r1
 801003a:	d9f4      	bls.n	8010026 <_printf_i+0x116>
 801003c:	2b08      	cmp	r3, #8
 801003e:	d10b      	bne.n	8010058 <_printf_i+0x148>
 8010040:	6823      	ldr	r3, [r4, #0]
 8010042:	07de      	lsls	r6, r3, #31
 8010044:	d508      	bpl.n	8010058 <_printf_i+0x148>
 8010046:	6923      	ldr	r3, [r4, #16]
 8010048:	6861      	ldr	r1, [r4, #4]
 801004a:	4299      	cmp	r1, r3
 801004c:	bfde      	ittt	le
 801004e:	2330      	movle	r3, #48	; 0x30
 8010050:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010054:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010058:	1b52      	subs	r2, r2, r5
 801005a:	6122      	str	r2, [r4, #16]
 801005c:	f8cd a000 	str.w	sl, [sp]
 8010060:	464b      	mov	r3, r9
 8010062:	aa03      	add	r2, sp, #12
 8010064:	4621      	mov	r1, r4
 8010066:	4640      	mov	r0, r8
 8010068:	f7ff fee4 	bl	800fe34 <_printf_common>
 801006c:	3001      	adds	r0, #1
 801006e:	d14a      	bne.n	8010106 <_printf_i+0x1f6>
 8010070:	f04f 30ff 	mov.w	r0, #4294967295
 8010074:	b004      	add	sp, #16
 8010076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801007a:	6823      	ldr	r3, [r4, #0]
 801007c:	f043 0320 	orr.w	r3, r3, #32
 8010080:	6023      	str	r3, [r4, #0]
 8010082:	4833      	ldr	r0, [pc, #204]	; (8010150 <_printf_i+0x240>)
 8010084:	2778      	movs	r7, #120	; 0x78
 8010086:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801008a:	6823      	ldr	r3, [r4, #0]
 801008c:	6829      	ldr	r1, [r5, #0]
 801008e:	061f      	lsls	r7, r3, #24
 8010090:	f851 6b04 	ldr.w	r6, [r1], #4
 8010094:	d402      	bmi.n	801009c <_printf_i+0x18c>
 8010096:	065f      	lsls	r7, r3, #25
 8010098:	bf48      	it	mi
 801009a:	b2b6      	uxthmi	r6, r6
 801009c:	07df      	lsls	r7, r3, #31
 801009e:	bf48      	it	mi
 80100a0:	f043 0320 	orrmi.w	r3, r3, #32
 80100a4:	6029      	str	r1, [r5, #0]
 80100a6:	bf48      	it	mi
 80100a8:	6023      	strmi	r3, [r4, #0]
 80100aa:	b91e      	cbnz	r6, 80100b4 <_printf_i+0x1a4>
 80100ac:	6823      	ldr	r3, [r4, #0]
 80100ae:	f023 0320 	bic.w	r3, r3, #32
 80100b2:	6023      	str	r3, [r4, #0]
 80100b4:	2310      	movs	r3, #16
 80100b6:	e7a7      	b.n	8010008 <_printf_i+0xf8>
 80100b8:	4824      	ldr	r0, [pc, #144]	; (801014c <_printf_i+0x23c>)
 80100ba:	e7e4      	b.n	8010086 <_printf_i+0x176>
 80100bc:	4615      	mov	r5, r2
 80100be:	e7bd      	b.n	801003c <_printf_i+0x12c>
 80100c0:	682b      	ldr	r3, [r5, #0]
 80100c2:	6826      	ldr	r6, [r4, #0]
 80100c4:	6961      	ldr	r1, [r4, #20]
 80100c6:	1d18      	adds	r0, r3, #4
 80100c8:	6028      	str	r0, [r5, #0]
 80100ca:	0635      	lsls	r5, r6, #24
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	d501      	bpl.n	80100d4 <_printf_i+0x1c4>
 80100d0:	6019      	str	r1, [r3, #0]
 80100d2:	e002      	b.n	80100da <_printf_i+0x1ca>
 80100d4:	0670      	lsls	r0, r6, #25
 80100d6:	d5fb      	bpl.n	80100d0 <_printf_i+0x1c0>
 80100d8:	8019      	strh	r1, [r3, #0]
 80100da:	2300      	movs	r3, #0
 80100dc:	6123      	str	r3, [r4, #16]
 80100de:	4615      	mov	r5, r2
 80100e0:	e7bc      	b.n	801005c <_printf_i+0x14c>
 80100e2:	682b      	ldr	r3, [r5, #0]
 80100e4:	1d1a      	adds	r2, r3, #4
 80100e6:	602a      	str	r2, [r5, #0]
 80100e8:	681d      	ldr	r5, [r3, #0]
 80100ea:	6862      	ldr	r2, [r4, #4]
 80100ec:	2100      	movs	r1, #0
 80100ee:	4628      	mov	r0, r5
 80100f0:	f7f0 f87e 	bl	80001f0 <memchr>
 80100f4:	b108      	cbz	r0, 80100fa <_printf_i+0x1ea>
 80100f6:	1b40      	subs	r0, r0, r5
 80100f8:	6060      	str	r0, [r4, #4]
 80100fa:	6863      	ldr	r3, [r4, #4]
 80100fc:	6123      	str	r3, [r4, #16]
 80100fe:	2300      	movs	r3, #0
 8010100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010104:	e7aa      	b.n	801005c <_printf_i+0x14c>
 8010106:	6923      	ldr	r3, [r4, #16]
 8010108:	462a      	mov	r2, r5
 801010a:	4649      	mov	r1, r9
 801010c:	4640      	mov	r0, r8
 801010e:	47d0      	blx	sl
 8010110:	3001      	adds	r0, #1
 8010112:	d0ad      	beq.n	8010070 <_printf_i+0x160>
 8010114:	6823      	ldr	r3, [r4, #0]
 8010116:	079b      	lsls	r3, r3, #30
 8010118:	d413      	bmi.n	8010142 <_printf_i+0x232>
 801011a:	68e0      	ldr	r0, [r4, #12]
 801011c:	9b03      	ldr	r3, [sp, #12]
 801011e:	4298      	cmp	r0, r3
 8010120:	bfb8      	it	lt
 8010122:	4618      	movlt	r0, r3
 8010124:	e7a6      	b.n	8010074 <_printf_i+0x164>
 8010126:	2301      	movs	r3, #1
 8010128:	4632      	mov	r2, r6
 801012a:	4649      	mov	r1, r9
 801012c:	4640      	mov	r0, r8
 801012e:	47d0      	blx	sl
 8010130:	3001      	adds	r0, #1
 8010132:	d09d      	beq.n	8010070 <_printf_i+0x160>
 8010134:	3501      	adds	r5, #1
 8010136:	68e3      	ldr	r3, [r4, #12]
 8010138:	9903      	ldr	r1, [sp, #12]
 801013a:	1a5b      	subs	r3, r3, r1
 801013c:	42ab      	cmp	r3, r5
 801013e:	dcf2      	bgt.n	8010126 <_printf_i+0x216>
 8010140:	e7eb      	b.n	801011a <_printf_i+0x20a>
 8010142:	2500      	movs	r5, #0
 8010144:	f104 0619 	add.w	r6, r4, #25
 8010148:	e7f5      	b.n	8010136 <_printf_i+0x226>
 801014a:	bf00      	nop
 801014c:	08012238 	.word	0x08012238
 8010150:	08012249 	.word	0x08012249

08010154 <__sflush_r>:
 8010154:	898a      	ldrh	r2, [r1, #12]
 8010156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801015a:	4605      	mov	r5, r0
 801015c:	0710      	lsls	r0, r2, #28
 801015e:	460c      	mov	r4, r1
 8010160:	d458      	bmi.n	8010214 <__sflush_r+0xc0>
 8010162:	684b      	ldr	r3, [r1, #4]
 8010164:	2b00      	cmp	r3, #0
 8010166:	dc05      	bgt.n	8010174 <__sflush_r+0x20>
 8010168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801016a:	2b00      	cmp	r3, #0
 801016c:	dc02      	bgt.n	8010174 <__sflush_r+0x20>
 801016e:	2000      	movs	r0, #0
 8010170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010176:	2e00      	cmp	r6, #0
 8010178:	d0f9      	beq.n	801016e <__sflush_r+0x1a>
 801017a:	2300      	movs	r3, #0
 801017c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010180:	682f      	ldr	r7, [r5, #0]
 8010182:	6a21      	ldr	r1, [r4, #32]
 8010184:	602b      	str	r3, [r5, #0]
 8010186:	d032      	beq.n	80101ee <__sflush_r+0x9a>
 8010188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801018a:	89a3      	ldrh	r3, [r4, #12]
 801018c:	075a      	lsls	r2, r3, #29
 801018e:	d505      	bpl.n	801019c <__sflush_r+0x48>
 8010190:	6863      	ldr	r3, [r4, #4]
 8010192:	1ac0      	subs	r0, r0, r3
 8010194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010196:	b10b      	cbz	r3, 801019c <__sflush_r+0x48>
 8010198:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801019a:	1ac0      	subs	r0, r0, r3
 801019c:	2300      	movs	r3, #0
 801019e:	4602      	mov	r2, r0
 80101a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101a2:	6a21      	ldr	r1, [r4, #32]
 80101a4:	4628      	mov	r0, r5
 80101a6:	47b0      	blx	r6
 80101a8:	1c43      	adds	r3, r0, #1
 80101aa:	89a3      	ldrh	r3, [r4, #12]
 80101ac:	d106      	bne.n	80101bc <__sflush_r+0x68>
 80101ae:	6829      	ldr	r1, [r5, #0]
 80101b0:	291d      	cmp	r1, #29
 80101b2:	d82b      	bhi.n	801020c <__sflush_r+0xb8>
 80101b4:	4a29      	ldr	r2, [pc, #164]	; (801025c <__sflush_r+0x108>)
 80101b6:	410a      	asrs	r2, r1
 80101b8:	07d6      	lsls	r6, r2, #31
 80101ba:	d427      	bmi.n	801020c <__sflush_r+0xb8>
 80101bc:	2200      	movs	r2, #0
 80101be:	6062      	str	r2, [r4, #4]
 80101c0:	04d9      	lsls	r1, r3, #19
 80101c2:	6922      	ldr	r2, [r4, #16]
 80101c4:	6022      	str	r2, [r4, #0]
 80101c6:	d504      	bpl.n	80101d2 <__sflush_r+0x7e>
 80101c8:	1c42      	adds	r2, r0, #1
 80101ca:	d101      	bne.n	80101d0 <__sflush_r+0x7c>
 80101cc:	682b      	ldr	r3, [r5, #0]
 80101ce:	b903      	cbnz	r3, 80101d2 <__sflush_r+0x7e>
 80101d0:	6560      	str	r0, [r4, #84]	; 0x54
 80101d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80101d4:	602f      	str	r7, [r5, #0]
 80101d6:	2900      	cmp	r1, #0
 80101d8:	d0c9      	beq.n	801016e <__sflush_r+0x1a>
 80101da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80101de:	4299      	cmp	r1, r3
 80101e0:	d002      	beq.n	80101e8 <__sflush_r+0x94>
 80101e2:	4628      	mov	r0, r5
 80101e4:	f7ff fb3e 	bl	800f864 <_free_r>
 80101e8:	2000      	movs	r0, #0
 80101ea:	6360      	str	r0, [r4, #52]	; 0x34
 80101ec:	e7c0      	b.n	8010170 <__sflush_r+0x1c>
 80101ee:	2301      	movs	r3, #1
 80101f0:	4628      	mov	r0, r5
 80101f2:	47b0      	blx	r6
 80101f4:	1c41      	adds	r1, r0, #1
 80101f6:	d1c8      	bne.n	801018a <__sflush_r+0x36>
 80101f8:	682b      	ldr	r3, [r5, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d0c5      	beq.n	801018a <__sflush_r+0x36>
 80101fe:	2b1d      	cmp	r3, #29
 8010200:	d001      	beq.n	8010206 <__sflush_r+0xb2>
 8010202:	2b16      	cmp	r3, #22
 8010204:	d101      	bne.n	801020a <__sflush_r+0xb6>
 8010206:	602f      	str	r7, [r5, #0]
 8010208:	e7b1      	b.n	801016e <__sflush_r+0x1a>
 801020a:	89a3      	ldrh	r3, [r4, #12]
 801020c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010210:	81a3      	strh	r3, [r4, #12]
 8010212:	e7ad      	b.n	8010170 <__sflush_r+0x1c>
 8010214:	690f      	ldr	r7, [r1, #16]
 8010216:	2f00      	cmp	r7, #0
 8010218:	d0a9      	beq.n	801016e <__sflush_r+0x1a>
 801021a:	0793      	lsls	r3, r2, #30
 801021c:	680e      	ldr	r6, [r1, #0]
 801021e:	bf08      	it	eq
 8010220:	694b      	ldreq	r3, [r1, #20]
 8010222:	600f      	str	r7, [r1, #0]
 8010224:	bf18      	it	ne
 8010226:	2300      	movne	r3, #0
 8010228:	eba6 0807 	sub.w	r8, r6, r7
 801022c:	608b      	str	r3, [r1, #8]
 801022e:	f1b8 0f00 	cmp.w	r8, #0
 8010232:	dd9c      	ble.n	801016e <__sflush_r+0x1a>
 8010234:	6a21      	ldr	r1, [r4, #32]
 8010236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010238:	4643      	mov	r3, r8
 801023a:	463a      	mov	r2, r7
 801023c:	4628      	mov	r0, r5
 801023e:	47b0      	blx	r6
 8010240:	2800      	cmp	r0, #0
 8010242:	dc06      	bgt.n	8010252 <__sflush_r+0xfe>
 8010244:	89a3      	ldrh	r3, [r4, #12]
 8010246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801024a:	81a3      	strh	r3, [r4, #12]
 801024c:	f04f 30ff 	mov.w	r0, #4294967295
 8010250:	e78e      	b.n	8010170 <__sflush_r+0x1c>
 8010252:	4407      	add	r7, r0
 8010254:	eba8 0800 	sub.w	r8, r8, r0
 8010258:	e7e9      	b.n	801022e <__sflush_r+0xda>
 801025a:	bf00      	nop
 801025c:	dfbffffe 	.word	0xdfbffffe

08010260 <_fflush_r>:
 8010260:	b538      	push	{r3, r4, r5, lr}
 8010262:	690b      	ldr	r3, [r1, #16]
 8010264:	4605      	mov	r5, r0
 8010266:	460c      	mov	r4, r1
 8010268:	b913      	cbnz	r3, 8010270 <_fflush_r+0x10>
 801026a:	2500      	movs	r5, #0
 801026c:	4628      	mov	r0, r5
 801026e:	bd38      	pop	{r3, r4, r5, pc}
 8010270:	b118      	cbz	r0, 801027a <_fflush_r+0x1a>
 8010272:	6a03      	ldr	r3, [r0, #32]
 8010274:	b90b      	cbnz	r3, 801027a <_fflush_r+0x1a>
 8010276:	f7ff f825 	bl	800f2c4 <__sinit>
 801027a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d0f3      	beq.n	801026a <_fflush_r+0xa>
 8010282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010284:	07d0      	lsls	r0, r2, #31
 8010286:	d404      	bmi.n	8010292 <_fflush_r+0x32>
 8010288:	0599      	lsls	r1, r3, #22
 801028a:	d402      	bmi.n	8010292 <_fflush_r+0x32>
 801028c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801028e:	f7ff fad0 	bl	800f832 <__retarget_lock_acquire_recursive>
 8010292:	4628      	mov	r0, r5
 8010294:	4621      	mov	r1, r4
 8010296:	f7ff ff5d 	bl	8010154 <__sflush_r>
 801029a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801029c:	07da      	lsls	r2, r3, #31
 801029e:	4605      	mov	r5, r0
 80102a0:	d4e4      	bmi.n	801026c <_fflush_r+0xc>
 80102a2:	89a3      	ldrh	r3, [r4, #12]
 80102a4:	059b      	lsls	r3, r3, #22
 80102a6:	d4e1      	bmi.n	801026c <_fflush_r+0xc>
 80102a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80102aa:	f7ff fac3 	bl	800f834 <__retarget_lock_release_recursive>
 80102ae:	e7dd      	b.n	801026c <_fflush_r+0xc>

080102b0 <__swhatbuf_r>:
 80102b0:	b570      	push	{r4, r5, r6, lr}
 80102b2:	460c      	mov	r4, r1
 80102b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102b8:	2900      	cmp	r1, #0
 80102ba:	b096      	sub	sp, #88	; 0x58
 80102bc:	4615      	mov	r5, r2
 80102be:	461e      	mov	r6, r3
 80102c0:	da0d      	bge.n	80102de <__swhatbuf_r+0x2e>
 80102c2:	89a3      	ldrh	r3, [r4, #12]
 80102c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80102c8:	f04f 0100 	mov.w	r1, #0
 80102cc:	bf0c      	ite	eq
 80102ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80102d2:	2340      	movne	r3, #64	; 0x40
 80102d4:	2000      	movs	r0, #0
 80102d6:	6031      	str	r1, [r6, #0]
 80102d8:	602b      	str	r3, [r5, #0]
 80102da:	b016      	add	sp, #88	; 0x58
 80102dc:	bd70      	pop	{r4, r5, r6, pc}
 80102de:	466a      	mov	r2, sp
 80102e0:	f000 f848 	bl	8010374 <_fstat_r>
 80102e4:	2800      	cmp	r0, #0
 80102e6:	dbec      	blt.n	80102c2 <__swhatbuf_r+0x12>
 80102e8:	9901      	ldr	r1, [sp, #4]
 80102ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80102ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80102f2:	4259      	negs	r1, r3
 80102f4:	4159      	adcs	r1, r3
 80102f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102fa:	e7eb      	b.n	80102d4 <__swhatbuf_r+0x24>

080102fc <__smakebuf_r>:
 80102fc:	898b      	ldrh	r3, [r1, #12]
 80102fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010300:	079d      	lsls	r5, r3, #30
 8010302:	4606      	mov	r6, r0
 8010304:	460c      	mov	r4, r1
 8010306:	d507      	bpl.n	8010318 <__smakebuf_r+0x1c>
 8010308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801030c:	6023      	str	r3, [r4, #0]
 801030e:	6123      	str	r3, [r4, #16]
 8010310:	2301      	movs	r3, #1
 8010312:	6163      	str	r3, [r4, #20]
 8010314:	b002      	add	sp, #8
 8010316:	bd70      	pop	{r4, r5, r6, pc}
 8010318:	ab01      	add	r3, sp, #4
 801031a:	466a      	mov	r2, sp
 801031c:	f7ff ffc8 	bl	80102b0 <__swhatbuf_r>
 8010320:	9900      	ldr	r1, [sp, #0]
 8010322:	4605      	mov	r5, r0
 8010324:	4630      	mov	r0, r6
 8010326:	f7fe feb5 	bl	800f094 <_malloc_r>
 801032a:	b948      	cbnz	r0, 8010340 <__smakebuf_r+0x44>
 801032c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010330:	059a      	lsls	r2, r3, #22
 8010332:	d4ef      	bmi.n	8010314 <__smakebuf_r+0x18>
 8010334:	f023 0303 	bic.w	r3, r3, #3
 8010338:	f043 0302 	orr.w	r3, r3, #2
 801033c:	81a3      	strh	r3, [r4, #12]
 801033e:	e7e3      	b.n	8010308 <__smakebuf_r+0xc>
 8010340:	89a3      	ldrh	r3, [r4, #12]
 8010342:	6020      	str	r0, [r4, #0]
 8010344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010348:	81a3      	strh	r3, [r4, #12]
 801034a:	9b00      	ldr	r3, [sp, #0]
 801034c:	6163      	str	r3, [r4, #20]
 801034e:	9b01      	ldr	r3, [sp, #4]
 8010350:	6120      	str	r0, [r4, #16]
 8010352:	b15b      	cbz	r3, 801036c <__smakebuf_r+0x70>
 8010354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010358:	4630      	mov	r0, r6
 801035a:	f000 f81d 	bl	8010398 <_isatty_r>
 801035e:	b128      	cbz	r0, 801036c <__smakebuf_r+0x70>
 8010360:	89a3      	ldrh	r3, [r4, #12]
 8010362:	f023 0303 	bic.w	r3, r3, #3
 8010366:	f043 0301 	orr.w	r3, r3, #1
 801036a:	81a3      	strh	r3, [r4, #12]
 801036c:	89a3      	ldrh	r3, [r4, #12]
 801036e:	431d      	orrs	r5, r3
 8010370:	81a5      	strh	r5, [r4, #12]
 8010372:	e7cf      	b.n	8010314 <__smakebuf_r+0x18>

08010374 <_fstat_r>:
 8010374:	b538      	push	{r3, r4, r5, lr}
 8010376:	4d07      	ldr	r5, [pc, #28]	; (8010394 <_fstat_r+0x20>)
 8010378:	2300      	movs	r3, #0
 801037a:	4604      	mov	r4, r0
 801037c:	4608      	mov	r0, r1
 801037e:	4611      	mov	r1, r2
 8010380:	602b      	str	r3, [r5, #0]
 8010382:	f7fe fbee 	bl	800eb62 <_fstat>
 8010386:	1c43      	adds	r3, r0, #1
 8010388:	d102      	bne.n	8010390 <_fstat_r+0x1c>
 801038a:	682b      	ldr	r3, [r5, #0]
 801038c:	b103      	cbz	r3, 8010390 <_fstat_r+0x1c>
 801038e:	6023      	str	r3, [r4, #0]
 8010390:	bd38      	pop	{r3, r4, r5, pc}
 8010392:	bf00      	nop
 8010394:	20002194 	.word	0x20002194

08010398 <_isatty_r>:
 8010398:	b538      	push	{r3, r4, r5, lr}
 801039a:	4d06      	ldr	r5, [pc, #24]	; (80103b4 <_isatty_r+0x1c>)
 801039c:	2300      	movs	r3, #0
 801039e:	4604      	mov	r4, r0
 80103a0:	4608      	mov	r0, r1
 80103a2:	602b      	str	r3, [r5, #0]
 80103a4:	f7fe fbed 	bl	800eb82 <_isatty>
 80103a8:	1c43      	adds	r3, r0, #1
 80103aa:	d102      	bne.n	80103b2 <_isatty_r+0x1a>
 80103ac:	682b      	ldr	r3, [r5, #0]
 80103ae:	b103      	cbz	r3, 80103b2 <_isatty_r+0x1a>
 80103b0:	6023      	str	r3, [r4, #0]
 80103b2:	bd38      	pop	{r3, r4, r5, pc}
 80103b4:	20002194 	.word	0x20002194

080103b8 <_realloc_r>:
 80103b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103bc:	4680      	mov	r8, r0
 80103be:	4614      	mov	r4, r2
 80103c0:	460e      	mov	r6, r1
 80103c2:	b921      	cbnz	r1, 80103ce <_realloc_r+0x16>
 80103c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103c8:	4611      	mov	r1, r2
 80103ca:	f7fe be63 	b.w	800f094 <_malloc_r>
 80103ce:	b92a      	cbnz	r2, 80103dc <_realloc_r+0x24>
 80103d0:	f7ff fa48 	bl	800f864 <_free_r>
 80103d4:	4625      	mov	r5, r4
 80103d6:	4628      	mov	r0, r5
 80103d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103dc:	f000 f81b 	bl	8010416 <_malloc_usable_size_r>
 80103e0:	4284      	cmp	r4, r0
 80103e2:	4607      	mov	r7, r0
 80103e4:	d802      	bhi.n	80103ec <_realloc_r+0x34>
 80103e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80103ea:	d812      	bhi.n	8010412 <_realloc_r+0x5a>
 80103ec:	4621      	mov	r1, r4
 80103ee:	4640      	mov	r0, r8
 80103f0:	f7fe fe50 	bl	800f094 <_malloc_r>
 80103f4:	4605      	mov	r5, r0
 80103f6:	2800      	cmp	r0, #0
 80103f8:	d0ed      	beq.n	80103d6 <_realloc_r+0x1e>
 80103fa:	42bc      	cmp	r4, r7
 80103fc:	4622      	mov	r2, r4
 80103fe:	4631      	mov	r1, r6
 8010400:	bf28      	it	cs
 8010402:	463a      	movcs	r2, r7
 8010404:	f7ff fa1f 	bl	800f846 <memcpy>
 8010408:	4631      	mov	r1, r6
 801040a:	4640      	mov	r0, r8
 801040c:	f7ff fa2a 	bl	800f864 <_free_r>
 8010410:	e7e1      	b.n	80103d6 <_realloc_r+0x1e>
 8010412:	4635      	mov	r5, r6
 8010414:	e7df      	b.n	80103d6 <_realloc_r+0x1e>

08010416 <_malloc_usable_size_r>:
 8010416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801041a:	1f18      	subs	r0, r3, #4
 801041c:	2b00      	cmp	r3, #0
 801041e:	bfbc      	itt	lt
 8010420:	580b      	ldrlt	r3, [r1, r0]
 8010422:	18c0      	addlt	r0, r0, r3
 8010424:	4770      	bx	lr
	...

08010428 <_init>:
 8010428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042a:	bf00      	nop
 801042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801042e:	bc08      	pop	{r3}
 8010430:	469e      	mov	lr, r3
 8010432:	4770      	bx	lr

08010434 <_fini>:
 8010434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010436:	bf00      	nop
 8010438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801043a:	bc08      	pop	{r3}
 801043c:	469e      	mov	lr, r3
 801043e:	4770      	bx	lr
