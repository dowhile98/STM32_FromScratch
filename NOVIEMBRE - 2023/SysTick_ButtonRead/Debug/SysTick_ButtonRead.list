
SysTick_ButtonRead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000170c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080018bc  080018bc  000118bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001920  08001920  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  08001920  08001920  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001920  08001920  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001920  08001920  00011920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001924  08001924  00011924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08001928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200c0  2**0
                  CONTENTS
 10 .bss          00000180  200000c0  200000c0  000200c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000240  20000240  000200c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00002214  00000000  00000000  00020133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000009e2  00000000  00000000  00022347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000200  00000000  00000000  00022d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000015c  00000000  00000000  00022f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a48b  00000000  00000000  0002308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000031f1  00000000  00000000  0003d517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008ef48  00000000  00000000  00040708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000df4  00000000  00000000  000cf650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  000d0444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080018a4 	.word	0x080018a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	080018a4 	.word	0x080018a4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <prv_process_btn>:
 * \param[in]       lwobj: LwBTN instance. Set to `NULL` to use default one
 * \param[in]       btn: Button instance to process
 * \param[in]       mstime: Current milliseconds system time
 */
void
prv_process_btn(lwbtn_t* lwobj, lwbtn_btn_t* btn, uint32_t mstime) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
    uint8_t new_state;

    /* Get button state */
    new_state = LWBTN_BTN_GET_STATE(lwobj, btn);
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	68db      	ldr	r3, [r3, #12]
 80002a0:	68b9      	ldr	r1, [r7, #8]
 80002a2:	68f8      	ldr	r0, [r7, #12]
 80002a4:	4798      	blx	r3
 80002a6:	4603      	mov	r3, r0
 80002a8:	75fb      	strb	r3, [r7, #23]

    /* Button state has just changed */
    if (new_state != btn->old_state) {
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	789b      	ldrb	r3, [r3, #2]
 80002ae:	7dfa      	ldrb	r2, [r7, #23]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d003      	beq.n	80002bc <prv_process_btn+0x2c>
        btn->time_state_change = mstime;
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	e0b3      	b.n	8000424 <prv_process_btn+0x194>
    }

    /* Button is still pressed */
    else if (new_state) {
 80002bc:	7dfb      	ldrb	r3, [r7, #23]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d03d      	beq.n	800033e <prv_process_btn+0xae>
        /* 
         * Handle debounce and send on-press event
         *
         * This is when we detect valid press
         */
        if (!(btn->flags & LWBTN_FLAG_ONPRESS_SENT)) {
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d12f      	bne.n	800032e <prv_process_btn+0x9e>
             *
             * - Runtime mode is enabled -> user sets its own config for debounce
             * - Config debounce time for press is more than `0`
             */
#if LWBTN_CFG_TIME_DEBOUNCE_PRESS_DYNAMIC || LWBTN_CFG_TIME_DEBOUNCE_PRESS > 0
            if ((mstime - btn->time_state_change) >= LWBTN_TIME_DEBOUNCE_PRESS_GET_MIN(btn))
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	2b13      	cmp	r3, #19
 80002d8:	f240 80a4 	bls.w	8000424 <prv_process_btn+0x194>
                    btn->click.cnt = 0;
                }
#endif /* !LWBTN_CFG_CLICK_MAX_CONSECUTIVE_SEND_IMMEDIATELY */

                /* Start with new on-press */
                btn->flags |= LWBTN_FLAG_ONPRESS_SENT;
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	881b      	ldrh	r3, [r3, #0]
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	b29a      	uxth	r2, r3
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	801a      	strh	r2, [r3, #0]
                lwobj->evt_fn(lwobj, btn, LWBTN_EVT_ONPRESS);
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	2200      	movs	r2, #0
 80002f0:	68b9      	ldr	r1, [r7, #8]
 80002f2:	68f8      	ldr	r0, [r7, #12]
 80002f4:	4798      	blx	r3
#if LWBTN_CFG_USE_KEEPALIVE
                /* Set keep alive time */
                btn->keepalive.last_time = mstime;
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	60da      	str	r2, [r3, #12]
                btn->keepalive.cnt = 0;
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	2200      	movs	r2, #0
 8000300:	821a      	strh	r2, [r3, #16]
#endif /* LWBTN_CFG_USE_KEEPALIVE */

                btn->time_change = mstime; /* Button state has now changed */
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	605a      	str	r2, [r3, #4]
 8000308:	e08c      	b.n	8000424 <prv_process_btn+0x194>
         * Keep alive is sent when valid press is being detected
         */
        else {
#if LWBTN_CFG_USE_KEEPALIVE
            while ((mstime - btn->keepalive.last_time) >= LWBTN_TIME_KEEPALIVE_PERIOD(btn)) {
                btn->keepalive.last_time += LWBTN_TIME_KEEPALIVE_PERIOD(btn);
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	68db      	ldr	r3, [r3, #12]
 800030e:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	60da      	str	r2, [r3, #12]
                ++btn->keepalive.cnt;
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	8a1b      	ldrh	r3, [r3, #16]
 800031a:	3301      	adds	r3, #1
 800031c:	b29a      	uxth	r2, r3
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	821a      	strh	r2, [r3, #16]
                lwobj->evt_fn(lwobj, btn, LWBTN_EVT_KEEPALIVE);
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	2203      	movs	r2, #3
 8000328:	68b9      	ldr	r1, [r7, #8]
 800032a:	68f8      	ldr	r0, [r7, #12]
 800032c:	4798      	blx	r3
            while ((mstime - btn->keepalive.last_time) >= LWBTN_TIME_KEEPALIVE_PERIOD(btn)) {
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	68db      	ldr	r3, [r3, #12]
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	1ad3      	subs	r3, r2, r3
 8000336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800033a:	d2e6      	bcs.n	800030a <prv_process_btn+0x7a>
 800033c:	e072      	b.n	8000424 <prv_process_btn+0x194>
        /*
         * We only need to react if on-press event has even been started.
         *
         * Do nothing if that was not the case
         */
        if (btn->flags & LWBTN_FLAG_ONPRESS_SENT) {
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	881b      	ldrh	r3, [r3, #0]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d058      	beq.n	80003fc <prv_process_btn+0x16c>
#if LWBTN_CFG_TIME_DEBOUNCE_RELEASE_DYNAMIC || LWBTN_CFG_TIME_DEBOUNCE_RELEASE > 0
            if ((mstime - btn->time_state_change) >= LWBTN_TIME_DEBOUNCE_RELEASE_GET_MIN(btn))
#endif /* LWBTN_CFG_TIME_DEBOUNCE_RELEASE_DYNAMIC || LWBTN_CFG_TIME_DEBOUNCE_RELEASE > 0 */
            {
                /* Handle on-release event */
                btn->flags &= ~LWBTN_FLAG_ONPRESS_SENT;
 800034a:	68bb      	ldr	r3, [r7, #8]
 800034c:	881b      	ldrh	r3, [r3, #0]
 800034e:	f023 0301 	bic.w	r3, r3, #1
 8000352:	b29a      	uxth	r2, r3
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	801a      	strh	r2, [r3, #0]
                lwobj->evt_fn(lwobj, btn, LWBTN_EVT_ONRELEASE);
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	2201      	movs	r2, #1
 800035e:	68b9      	ldr	r1, [r7, #8]
 8000360:	68f8      	ldr	r0, [r7, #12]
 8000362:	4798      	blx	r3

                /* Check time validity for click event */
                if ((mstime - btn->time_change) >= LWBTN_TIME_CLICK_GET_PRESSED_MIN(btn)
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	1ad3      	subs	r3, r2, r3
 800036c:	2b13      	cmp	r3, #19
 800036e:	d92d      	bls.n	80003cc <prv_process_btn+0x13c>
                    && (mstime - btn->time_change) <= LWBTN_TIME_CLICK_GET_PRESSED_MAX(btn)) {
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	1ad3      	subs	r3, r2, r3
 8000378:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800037c:	d826      	bhi.n	80003cc <prv_process_btn+0x13c>
                     * Increase consecutive clicks if max not reached yet
                     * and if time between two clicks is not long enough
                     * 
                     * Otherwise we consider click as fresh one
                     */
                    if (btn->click.cnt > 0 && btn->click.cnt < LWBTN_CLICK_MAX_CONSECUTIVE(btn)
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	7e1b      	ldrb	r3, [r3, #24]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d011      	beq.n	80003aa <prv_process_btn+0x11a>
 8000386:	68bb      	ldr	r3, [r7, #8]
 8000388:	7e1b      	ldrb	r3, [r3, #24]
 800038a:	2b02      	cmp	r3, #2
 800038c:	d80d      	bhi.n	80003aa <prv_process_btn+0x11a>
                        && (mstime - btn->click.last_time) < LWBTN_TIME_CLICK_MAX_MULTI(btn)) {
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	1ad3      	subs	r3, r2, r3
 8000396:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800039a:	d206      	bcs.n	80003aa <prv_process_btn+0x11a>
                        ++btn->click.cnt;
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	7e1b      	ldrb	r3, [r3, #24]
 80003a0:	3301      	adds	r3, #1
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	761a      	strb	r2, [r3, #24]
 80003a8:	e00c      	b.n	80003c4 <prv_process_btn+0x134>
                         * This can only happen, if onpress started earlier than max consecutive time,
                         * while onrelease happened later than maximum consecutive time.
                         * 
                         * In this case simply report previous state before setting new click.
                         */
                        if (btn->click.cnt > 0) {
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	7e1b      	ldrb	r3, [r3, #24]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d005      	beq.n	80003be <prv_process_btn+0x12e>
                            lwobj->evt_fn(lwobj, btn, LWBTN_EVT_ONCLICK);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	2202      	movs	r2, #2
 80003b8:	68b9      	ldr	r1, [r7, #8]
 80003ba:	68f8      	ldr	r0, [r7, #12]
 80003bc:	4798      	blx	r3
                        }
                        btn->click.cnt = 1;
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	2201      	movs	r2, #1
 80003c2:	761a      	strb	r2, [r3, #24]
                    }
                    btn->click.last_time = mstime;
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	615a      	str	r2, [r3, #20]
 80003ca:	e002      	b.n	80003d2 <prv_process_btn+0x142>
                     * There was an on-release event, but timing
                     * for click event detection is outside allowed window.
                     * 
                     * Reset clicks counter -> not valid sequence for click event.
                     */
                    btn->click.cnt = 0;
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	2200      	movs	r2, #0
 80003d0:	761a      	strb	r2, [r3, #24]
                /* 
                 * Depending on the configuration,
                 * this part will send on-click event immediately after release event,
                 * if maximum number of consecutive clicks has been reached.
                 */
                if (btn->click.cnt > 0 && btn->click.cnt == LWBTN_CLICK_MAX_CONSECUTIVE(btn)) {
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	7e1b      	ldrb	r3, [r3, #24]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d00c      	beq.n	80003f4 <prv_process_btn+0x164>
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	7e1b      	ldrb	r3, [r3, #24]
 80003de:	2b03      	cmp	r3, #3
 80003e0:	d108      	bne.n	80003f4 <prv_process_btn+0x164>
                    lwobj->evt_fn(lwobj, btn, LWBTN_EVT_ONCLICK);
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	2202      	movs	r2, #2
 80003e8:	68b9      	ldr	r1, [r7, #8]
 80003ea:	68f8      	ldr	r0, [r7, #12]
 80003ec:	4798      	blx	r3
                    btn->click.cnt = 0;
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	2200      	movs	r2, #0
 80003f2:	761a      	strb	r2, [r3, #24]
                }
#endif                                     /* LWBTN_CFG_CLICK_MAX_CONSECUTIVE_SEND_IMMEDIATELY */
                btn->time_change = mstime; /* Button state has now changed */
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	605a      	str	r2, [r3, #4]
 80003fa:	e013      	b.n	8000424 <prv_process_btn+0x194>
             * 
             * This feature is useful if users prefers multi-click feature
             * that is reported only after last click event happened,
             * including number of clicks made by user
             */
            if (btn->click.cnt > 0) {
 80003fc:	68bb      	ldr	r3, [r7, #8]
 80003fe:	7e1b      	ldrb	r3, [r3, #24]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d00f      	beq.n	8000424 <prv_process_btn+0x194>
                if ((mstime - btn->click.last_time) >= LWBTN_TIME_CLICK_MAX_MULTI(btn)) {
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	1ad3      	subs	r3, r2, r3
 800040c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000410:	d308      	bcc.n	8000424 <prv_process_btn+0x194>
                    lwobj->evt_fn(lwobj, btn, LWBTN_EVT_ONCLICK);
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	2202      	movs	r2, #2
 8000418:	68b9      	ldr	r1, [r7, #8]
 800041a:	68f8      	ldr	r0, [r7, #12]
 800041c:	4798      	blx	r3
                    btn->click.cnt = 0;
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	2200      	movs	r2, #0
 8000422:	761a      	strb	r2, [r3, #24]
                }
            }
        }
    }

    btn->old_state = new_state;
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	7dfa      	ldrb	r2, [r7, #23]
 8000428:	709a      	strb	r2, [r3, #2]
}
 800042a:	bf00      	nop
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <lwbtn_init_ex>:
 * \param[in]       evt_fn: Button event function callback
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwbtn_init_ex(lwbtn_t* lwobj, lwbtn_btn_t* btns, uint16_t btns_cnt, lwbtn_get_state_fn get_state_fn,
              lwbtn_evt_fn evt_fn) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	60f8      	str	r0, [r7, #12]
 800043c:	60b9      	str	r1, [r7, #8]
 800043e:	603b      	str	r3, [r7, #0]
 8000440:	4613      	mov	r3, r2
 8000442:	80fb      	strh	r3, [r7, #6]
    lwobj = LWBTN_GET_LWOBJ(lwobj);
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <lwbtn_init_ex+0x1a>
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	e000      	b.n	8000450 <lwbtn_init_ex+0x1c>
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <lwbtn_init_ex+0x7c>)
 8000450:	60fb      	str	r3, [r7, #12]

    if (btns == NULL || btns_cnt == 0 || evt_fn == NULL
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d008      	beq.n	800046a <lwbtn_init_ex+0x36>
 8000458:	88fb      	ldrh	r3, [r7, #6]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d005      	beq.n	800046a <lwbtn_init_ex+0x36>
 800045e:	6a3b      	ldr	r3, [r7, #32]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d002      	beq.n	800046a <lwbtn_init_ex+0x36>
#if LWBTN_CFG_GET_STATE_MODE == LWBTN_GET_STATE_MODE_CALLBACK
        || get_state_fn == NULL /* Parameter is a must only in callback-only mode */
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d101      	bne.n	800046e <lwbtn_init_ex+0x3a>
#endif                          /* LWBTN_CFG_GET_STATE_MODE == LWBTN_GET_STATE_MODE_CALLBACK */
    ) {
        return 0;
 800046a:	2300      	movs	r3, #0
 800046c:	e01b      	b.n	80004a6 <lwbtn_init_ex+0x72>
    }

    LWBTN_MEMSET(lwobj, 0x00, sizeof(*lwobj));
 800046e:	2210      	movs	r2, #16
 8000470:	2100      	movs	r1, #0
 8000472:	68f8      	ldr	r0, [r7, #12]
 8000474:	f000 fc8c 	bl	8000d90 <memset>
    lwobj->btns = btns;
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	68ba      	ldr	r2, [r7, #8]
 800047c:	601a      	str	r2, [r3, #0]
    lwobj->btns_cnt = btns_cnt;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	88fa      	ldrh	r2, [r7, #6]
 8000482:	809a      	strh	r2, [r3, #4]
    lwobj->evt_fn = evt_fn;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	6a3a      	ldr	r2, [r7, #32]
 8000488:	609a      	str	r2, [r3, #8]
#if LWBTN_CFG_GET_STATE_MODE != LWBTN_GET_STATE_MODE_MANUAL
    lwobj->get_state_fn = get_state_fn;
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	683a      	ldr	r2, [r7, #0]
 800048e:	60da      	str	r2, [r3, #12]
#else
    (void)get_state_fn; /* May be unused */
#endif /* LWBTN_CFG_GET_STATE_MODE != LWBTN_GET_STATE_MODE_MANUAL */

    for (size_t i = 0; i < btns_cnt; ++i) {
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	e002      	b.n	800049c <lwbtn_init_ex+0x68>
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	3301      	adds	r3, #1
 800049a:	617b      	str	r3, [r7, #20]
 800049c:	88fb      	ldrh	r3, [r7, #6]
 800049e:	697a      	ldr	r2, [r7, #20]
 80004a0:	429a      	cmp	r2, r3
 80004a2:	d3f8      	bcc.n	8000496 <lwbtn_init_ex+0x62>
#if LWBTN_CFG_CLICK_MAX_CONSECUTIVE_DYNAMIC
        btns[i].max_consecutive = LWBTN_CFG_CLICK_MAX_CONSECUTIVE;
#endif /* LWBTN_CFG_CLICK_MAX_CONSECUTIVE_DYNAMIC */
    }

    return 1;
 80004a4:	2301      	movs	r3, #1
}
 80004a6:	4618      	mov	r0, r3
 80004a8:	3718      	adds	r7, #24
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	200000dc 	.word	0x200000dc

080004b4 <lwbtn_process_ex>:
 * \param[in]       lwobj: LwBTN instance. Set to `NULL` to use default one
 * \param[in]       mstime: Current time in milliseconds
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwbtn_process_ex(lwbtn_t* lwobj, uint32_t mstime) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	6039      	str	r1, [r7, #0]
    lwobj = LWBTN_GET_LWOBJ(lwobj);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <lwbtn_process_ex+0x14>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	e000      	b.n	80004ca <lwbtn_process_ex+0x16>
 80004c8:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <lwbtn_process_ex+0x50>)
 80004ca:	607b      	str	r3, [r7, #4]

    /* Process all buttons */
    for (size_t index = 0; index < lwobj->btns_cnt; ++index) {
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	e00c      	b.n	80004ec <lwbtn_process_ex+0x38>
        prv_process_btn(lwobj, &lwobj->btns[index], mstime);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	015b      	lsls	r3, r3, #5
 80004da:	4413      	add	r3, r2
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	4619      	mov	r1, r3
 80004e0:	6878      	ldr	r0, [r7, #4]
 80004e2:	f7ff fed5 	bl	8000290 <prv_process_btn>
    for (size_t index = 0; index < lwobj->btns_cnt; ++index) {
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	3301      	adds	r3, #1
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	889b      	ldrh	r3, [r3, #4]
 80004f0:	461a      	mov	r2, r3
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d3ec      	bcc.n	80004d2 <lwbtn_process_ex+0x1e>
    }
    return 1;
 80004f8:	2301      	movs	r3, #1
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	200000dc 	.word	0x200000dc

08000508 <tickInc>:
 */
#include "delay.h"

volatile uint32_t ticks = 0;

void tickInc(uint32_t i){
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
    ticks += i;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <tickInc+0x20>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4413      	add	r3, r2
 8000518:	4a03      	ldr	r2, [pc, #12]	; (8000528 <tickInc+0x20>)
 800051a:	6013      	str	r3, [r2, #0]
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	200000ec 	.word	0x200000ec

0800052c <getTicks>:
    while ((getTicks() - tickStart) <= delay);
    
    return;
}

uint32_t getTicks(){
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
    return (uint32_t)ticks;
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <getTicks+0x14>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4618      	mov	r0, r3
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	200000ec 	.word	0x200000ec

08000544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	db0a      	blt.n	800056e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	490c      	ldr	r1, [pc, #48]	; (8000590 <__NVIC_SetPriority+0x4c>)
 800055e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000562:	0112      	lsls	r2, r2, #4
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	440b      	add	r3, r1
 8000568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800056c:	e00a      	b.n	8000584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4908      	ldr	r1, [pc, #32]	; (8000594 <__NVIC_SetPriority+0x50>)
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f003 030f 	and.w	r3, r3, #15
 800057a:	3b04      	subs	r3, #4
 800057c:	0112      	lsls	r2, r2, #4
 800057e:	b2d2      	uxtb	r2, r2
 8000580:	440b      	add	r3, r1
 8000582:	761a      	strb	r2, [r3, #24]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	e000e100 	.word	0xe000e100
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80005a8:	d301      	bcc.n	80005ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005aa:	2301      	movs	r3, #1
 80005ac:	e00f      	b.n	80005ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005ae:	4a0a      	ldr	r2, [pc, #40]	; (80005d8 <SysTick_Config+0x40>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005b6:	210f      	movs	r1, #15
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f7ff ffc2 	bl	8000544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005c0:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <SysTick_Config+0x40>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005c6:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <SysTick_Config+0x40>)
 80005c8:	2207      	movs	r2, #7
 80005ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	e000e010 	.word	0xe000e010

080005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	e000      	b.n	8000608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000612:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <main>:
void
prv_btn_event(struct lwbtn* lw, struct lwbtn_btn* btn, lwbtn_evt_t evt);

/*Main ------------------------------------------*/
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af02      	add	r7, sp, #8
	uint32_t temp;
	/*habilitar el reloj*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;  //1<<3
 8000632:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <main+0x94>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <main+0x94>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <main+0x94>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a1f      	ldr	r2, [pc, #124]	; (80006c0 <main+0x94>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
	/**
	 * PD12 -> salida
	 *
	 */
	GPIOD->MODER &=~(GPIO_MODER_MODE12); 	//Clear
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <main+0x98>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a1d      	ldr	r2, [pc, #116]	; (80006c4 <main+0x98>)
 8000650:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000654:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE12_0;	//Modo salida de proposito general
 8000656:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <main+0x98>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <main+0x98>)
 800065c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000660:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER &=~ GPIO_OTYPER_OT12;		//PUSH PULL
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <main+0x98>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <main+0x98>)
 8000668:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800066c:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR &=~ GPIO_OSPEEDER_OSPEEDR12;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <main+0x98>)
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <main+0x98>)
 8000674:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000678:	6093      	str	r3, [r2, #8]
	/**
	 * PA0 -> entrada
	 */
	GPIOA->MODER &=~(GPIO_MODER_MODE0); //RESET STATE (INPUT FLOATING)
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <main+0x9c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <main+0x9c>)
 8000680:	f023 0303 	bic.w	r3, r3, #3
 8000684:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &=~ (GPIO_PUPDR_PUPD0); //no pull up /down
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <main+0x9c>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <main+0x9c>)
 800068c:	f023 0303 	bic.w	r3, r3, #3
 8000690:	60d3      	str	r3, [r2, #12]

	/**
	 * @brief systick
	 * 
	 */
	temp = 16E+6 / 1E+3;
 8000692:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000696:	607b      	str	r3, [r7, #4]
	SysTick_Config(temp);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ff7d 	bl	8000598 <SysTick_Config>
	/**
	 * LWBTN
	 */
	lwbtn_init(btns, 3, prv_btn_get_state, prv_btn_event);
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <main+0xa0>)
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <main+0xa4>)
 80006a4:	2203      	movs	r2, #3
 80006a6:	490b      	ldr	r1, [pc, #44]	; (80006d4 <main+0xa8>)
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff fec3 	bl	8000434 <lwbtn_init_ex>
	for(;;){
		lwbtn_process(getTicks());
 80006ae:	f7ff ff3d 	bl	800052c <getTicks>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4619      	mov	r1, r3
 80006b6:	2000      	movs	r0, #0
 80006b8:	f7ff fefc 	bl	80004b4 <lwbtn_process_ex>
 80006bc:	e7f7      	b.n	80006ae <main+0x82>
 80006be:	bf00      	nop
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40020c00 	.word	0x40020c00
 80006c8:	40020000 	.word	0x40020000
 80006cc:	08000749 	.word	0x08000749
 80006d0:	080006f5 	.word	0x080006f5
 80006d4:	20000004 	.word	0x20000004

080006d8 <__io_putchar>:
	}
}


/*Function definition -----------------------------------------*/
int __io_putchar(int ch){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff ff7a 	bl	80005dc <ITM_SendChar>
	return ch;
 80006e8:	687b      	ldr	r3, [r7, #4]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <prv_btn_get_state>:

uint8_t
prv_btn_get_state(struct lwbtn* lw, struct lwbtn_btn* btn){
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	uint8_t sw = *((uint8_t*)btn->arg);
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	69db      	ldr	r3, [r3, #28]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	73bb      	strb	r3, [r7, #14]
	uint8_t state = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	73fb      	strb	r3, [r7, #15]
	switch(sw){
 800070a:	7bbb      	ldrb	r3, [r7, #14]
 800070c:	2b02      	cmp	r3, #2
 800070e:	d010      	beq.n	8000732 <prv_btn_get_state+0x3e>
 8000710:	2b02      	cmp	r3, #2
 8000712:	dc0f      	bgt.n	8000734 <prv_btn_get_state+0x40>
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <prv_btn_get_state+0x28>
 8000718:	2b01      	cmp	r3, #1
	case 0:
		state = INPUT_READ(SW);
		break;
	case 1:
		//state = (INPUT_READ(SW1)) ? 0 : 1;
		break;
 800071a:	e00b      	b.n	8000734 <prv_btn_get_state+0x40>
		state = INPUT_READ(SW);
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <prv_btn_get_state+0x50>)
 800071e:	691b      	ldr	r3, [r3, #16]
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	2b00      	cmp	r3, #0
 8000726:	bf14      	ite	ne
 8000728:	2301      	movne	r3, #1
 800072a:	2300      	moveq	r3, #0
 800072c:	b2db      	uxtb	r3, r3
 800072e:	73fb      	strb	r3, [r7, #15]
		break;
 8000730:	e000      	b.n	8000734 <prv_btn_get_state+0x40>
	case 2:
		//state = INPUT_READ(SW2);
		break;
 8000732:	bf00      	nop
	}
	return state;
 8000734:	7bfb      	ldrb	r3, [r7, #15]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40020000 	.word	0x40020000

08000748 <prv_btn_event>:

void
prv_btn_event(struct lwbtn* lw, struct lwbtn_btn* btn, lwbtn_evt_t evt){
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	4613      	mov	r3, r2
 8000754:	71fb      	strb	r3, [r7, #7]
	//uint8_t sw = *((uint8_t*)btn->arg);
	uint8_t event = evt;
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	75fb      	strb	r3, [r7, #23]
	switch(event){
 800075a:	7dfb      	ldrb	r3, [r7, #23]
 800075c:	2b02      	cmp	r3, #2
 800075e:	d00e      	beq.n	800077e <prv_btn_event+0x36>
 8000760:	2b02      	cmp	r3, #2
 8000762:	dc13      	bgt.n	800078c <prv_btn_event+0x44>
 8000764:	2b00      	cmp	r3, #0
 8000766:	d002      	beq.n	800076e <prv_btn_event+0x26>
 8000768:	2b01      	cmp	r3, #1
 800076a:	d004      	beq.n	8000776 <prv_btn_event+0x2e>
		break;
	case LWBTN_EVT_ONCLICK:
		printf("SW ON CLICK:%d\r\n", btn->click.cnt);
		break;
	}
}
 800076c:	e00e      	b.n	800078c <prv_btn_event+0x44>
		printf("SW ON PRESS\r\n");
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <prv_btn_event+0x4c>)
 8000770:	f000 fa2e 	bl	8000bd0 <puts>
		break;
 8000774:	e00a      	b.n	800078c <prv_btn_event+0x44>
		printf("SW ON RELEASE\r\n");
 8000776:	4808      	ldr	r0, [pc, #32]	; (8000798 <prv_btn_event+0x50>)
 8000778:	f000 fa2a 	bl	8000bd0 <puts>
		break;
 800077c:	e006      	b.n	800078c <prv_btn_event+0x44>
		printf("SW ON CLICK:%d\r\n", btn->click.cnt);
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	7e1b      	ldrb	r3, [r3, #24]
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	; (800079c <prv_btn_event+0x54>)
 8000786:	f000 f9bd 	bl	8000b04 <iprintf>
		break;
 800078a:	bf00      	nop
}
 800078c:	bf00      	nop
 800078e:	3718      	adds	r7, #24
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	080018bc 	.word	0x080018bc
 8000798:	080018cc 	.word	0x080018cc
 800079c:	080018dc 	.word	0x080018dc

080007a0 <SysTick_Handler>:
 * 
 */
#include "stm32f4xx.h"
#include "delay.h"

void SysTick_Handler(void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
    if(SysTick->CTRL & 1<<16){
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <SysTick_Handler+0x1c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d002      	beq.n	80007b6 <SysTick_Handler+0x16>
        //todo
        tickInc(1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff fea9 	bl	8000508 <tickInc>
    }
}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	e000e010 	.word	0xe000e010

080007c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	e00a      	b.n	80007e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007d2:	f3af 8000 	nop.w
 80007d6:	4601      	mov	r1, r0
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	60ba      	str	r2, [r7, #8]
 80007de:	b2ca      	uxtb	r2, r1
 80007e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3301      	adds	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dbf0      	blt.n	80007d2 <_read+0x12>
  }

  return len;
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007fa:	b580      	push	{r7, lr}
 80007fc:	b086      	sub	sp, #24
 80007fe:	af00      	add	r7, sp, #0
 8000800:	60f8      	str	r0, [r7, #12]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	e009      	b.n	8000820 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	60ba      	str	r2, [r7, #8]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff5f 	bl	80006d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3301      	adds	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697a      	ldr	r2, [r7, #20]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	429a      	cmp	r2, r3
 8000826:	dbf1      	blt.n	800080c <_write+0x12>
  }
  return len;
 8000828:	687b      	ldr	r3, [r7, #4]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <_close>:

int _close(int file)
{
 8000832:	b480      	push	{r7}
 8000834:	b083      	sub	sp, #12
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085a:	605a      	str	r2, [r3, #4]
  return 0;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_isatty>:

int _isatty(int file)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	60f8      	str	r0, [r7, #12]
 8000888:	60b9      	str	r1, [r7, #8]
 800088a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a4:	4a14      	ldr	r2, [pc, #80]	; (80008f8 <_sbrk+0x5c>)
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <_sbrk+0x60>)
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b0:	4b13      	ldr	r3, [pc, #76]	; (8000900 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d102      	bne.n	80008be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <_sbrk+0x64>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	; (8000904 <_sbrk+0x68>)
 80008bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008be:	4b10      	ldr	r3, [pc, #64]	; (8000900 <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d207      	bcs.n	80008dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008cc:	f000 faae 	bl	8000e2c <__errno>
 80008d0:	4603      	mov	r3, r0
 80008d2:	220c      	movs	r2, #12
 80008d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008d6:	f04f 33ff 	mov.w	r3, #4294967295
 80008da:	e009      	b.n	80008f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e2:	4b07      	ldr	r3, [pc, #28]	; (8000900 <_sbrk+0x64>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4413      	add	r3, r2
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <_sbrk+0x64>)
 80008ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20020000 	.word	0x20020000
 80008fc:	00000400 	.word	0x00000400
 8000900:	200000f0 	.word	0x200000f0
 8000904:	20000240 	.word	0x20000240

08000908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <SystemInit+0x20>)
 800090e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000912:	4a05      	ldr	r2, [pc, #20]	; (8000928 <SystemInit+0x20>)
 8000914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000930:	f7ff ffea 	bl	8000908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <LoopForever+0x6>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	; (800096c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <LoopForever+0xe>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	; (8000978 <LoopForever+0x16>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800095a:	f000 fa6d 	bl	8000e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fe65 	bl	800062c <main>

08000962 <LoopForever>:

LoopForever:
  b LoopForever
 8000962:	e7fe      	b.n	8000962 <LoopForever>
  ldr   r0, =_estack
 8000964:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000970:	08001928 	.word	0x08001928
  ldr r2, =_sbss
 8000974:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000978:	20000240 	.word	0x20000240

0800097c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC_IRQHandler>
	...

08000980 <std>:
 8000980:	2300      	movs	r3, #0
 8000982:	b510      	push	{r4, lr}
 8000984:	4604      	mov	r4, r0
 8000986:	e9c0 3300 	strd	r3, r3, [r0]
 800098a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800098e:	6083      	str	r3, [r0, #8]
 8000990:	8181      	strh	r1, [r0, #12]
 8000992:	6643      	str	r3, [r0, #100]	; 0x64
 8000994:	81c2      	strh	r2, [r0, #14]
 8000996:	6183      	str	r3, [r0, #24]
 8000998:	4619      	mov	r1, r3
 800099a:	2208      	movs	r2, #8
 800099c:	305c      	adds	r0, #92	; 0x5c
 800099e:	f000 f9f7 	bl	8000d90 <memset>
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <std+0x58>)
 80009a4:	6263      	str	r3, [r4, #36]	; 0x24
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <std+0x5c>)
 80009a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <std+0x60>)
 80009ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <std+0x64>)
 80009b0:	6323      	str	r3, [r4, #48]	; 0x30
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <std+0x68>)
 80009b4:	6224      	str	r4, [r4, #32]
 80009b6:	429c      	cmp	r4, r3
 80009b8:	d006      	beq.n	80009c8 <std+0x48>
 80009ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80009be:	4294      	cmp	r4, r2
 80009c0:	d002      	beq.n	80009c8 <std+0x48>
 80009c2:	33d0      	adds	r3, #208	; 0xd0
 80009c4:	429c      	cmp	r4, r3
 80009c6:	d105      	bne.n	80009d4 <std+0x54>
 80009c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80009cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009d0:	f000 ba56 	b.w	8000e80 <__retarget_lock_init_recursive>
 80009d4:	bd10      	pop	{r4, pc}
 80009d6:	bf00      	nop
 80009d8:	08000be1 	.word	0x08000be1
 80009dc:	08000c03 	.word	0x08000c03
 80009e0:	08000c3b 	.word	0x08000c3b
 80009e4:	08000c5f 	.word	0x08000c5f
 80009e8:	200000f4 	.word	0x200000f4

080009ec <stdio_exit_handler>:
 80009ec:	4a02      	ldr	r2, [pc, #8]	; (80009f8 <stdio_exit_handler+0xc>)
 80009ee:	4903      	ldr	r1, [pc, #12]	; (80009fc <stdio_exit_handler+0x10>)
 80009f0:	4803      	ldr	r0, [pc, #12]	; (8000a00 <stdio_exit_handler+0x14>)
 80009f2:	f000 b869 	b.w	8000ac8 <_fwalk_sglue>
 80009f6:	bf00      	nop
 80009f8:	20000064 	.word	0x20000064
 80009fc:	0800172d 	.word	0x0800172d
 8000a00:	20000070 	.word	0x20000070

08000a04 <cleanup_stdio>:
 8000a04:	6841      	ldr	r1, [r0, #4]
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <cleanup_stdio+0x34>)
 8000a08:	4299      	cmp	r1, r3
 8000a0a:	b510      	push	{r4, lr}
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	d001      	beq.n	8000a14 <cleanup_stdio+0x10>
 8000a10:	f000 fe8c 	bl	800172c <_fflush_r>
 8000a14:	68a1      	ldr	r1, [r4, #8]
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <cleanup_stdio+0x38>)
 8000a18:	4299      	cmp	r1, r3
 8000a1a:	d002      	beq.n	8000a22 <cleanup_stdio+0x1e>
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	f000 fe85 	bl	800172c <_fflush_r>
 8000a22:	68e1      	ldr	r1, [r4, #12]
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <cleanup_stdio+0x3c>)
 8000a26:	4299      	cmp	r1, r3
 8000a28:	d004      	beq.n	8000a34 <cleanup_stdio+0x30>
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a30:	f000 be7c 	b.w	800172c <_fflush_r>
 8000a34:	bd10      	pop	{r4, pc}
 8000a36:	bf00      	nop
 8000a38:	200000f4 	.word	0x200000f4
 8000a3c:	2000015c 	.word	0x2000015c
 8000a40:	200001c4 	.word	0x200001c4

08000a44 <global_stdio_init.part.0>:
 8000a44:	b510      	push	{r4, lr}
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <global_stdio_init.part.0+0x30>)
 8000a48:	4c0b      	ldr	r4, [pc, #44]	; (8000a78 <global_stdio_init.part.0+0x34>)
 8000a4a:	4a0c      	ldr	r2, [pc, #48]	; (8000a7c <global_stdio_init.part.0+0x38>)
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	4620      	mov	r0, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	2104      	movs	r1, #4
 8000a54:	f7ff ff94 	bl	8000980 <std>
 8000a58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2109      	movs	r1, #9
 8000a60:	f7ff ff8e 	bl	8000980 <std>
 8000a64:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000a68:	2202      	movs	r2, #2
 8000a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a6e:	2112      	movs	r1, #18
 8000a70:	f7ff bf86 	b.w	8000980 <std>
 8000a74:	2000022c 	.word	0x2000022c
 8000a78:	200000f4 	.word	0x200000f4
 8000a7c:	080009ed 	.word	0x080009ed

08000a80 <__sfp_lock_acquire>:
 8000a80:	4801      	ldr	r0, [pc, #4]	; (8000a88 <__sfp_lock_acquire+0x8>)
 8000a82:	f000 b9fe 	b.w	8000e82 <__retarget_lock_acquire_recursive>
 8000a86:	bf00      	nop
 8000a88:	20000235 	.word	0x20000235

08000a8c <__sfp_lock_release>:
 8000a8c:	4801      	ldr	r0, [pc, #4]	; (8000a94 <__sfp_lock_release+0x8>)
 8000a8e:	f000 b9f9 	b.w	8000e84 <__retarget_lock_release_recursive>
 8000a92:	bf00      	nop
 8000a94:	20000235 	.word	0x20000235

08000a98 <__sinit>:
 8000a98:	b510      	push	{r4, lr}
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	f7ff fff0 	bl	8000a80 <__sfp_lock_acquire>
 8000aa0:	6a23      	ldr	r3, [r4, #32]
 8000aa2:	b11b      	cbz	r3, 8000aac <__sinit+0x14>
 8000aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aa8:	f7ff bff0 	b.w	8000a8c <__sfp_lock_release>
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <__sinit+0x28>)
 8000aae:	6223      	str	r3, [r4, #32]
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__sinit+0x2c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f5      	bne.n	8000aa4 <__sinit+0xc>
 8000ab8:	f7ff ffc4 	bl	8000a44 <global_stdio_init.part.0>
 8000abc:	e7f2      	b.n	8000aa4 <__sinit+0xc>
 8000abe:	bf00      	nop
 8000ac0:	08000a05 	.word	0x08000a05
 8000ac4:	2000022c 	.word	0x2000022c

08000ac8 <_fwalk_sglue>:
 8000ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000acc:	4607      	mov	r7, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	4614      	mov	r4, r2
 8000ad2:	2600      	movs	r6, #0
 8000ad4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ad8:	f1b9 0901 	subs.w	r9, r9, #1
 8000adc:	d505      	bpl.n	8000aea <_fwalk_sglue+0x22>
 8000ade:	6824      	ldr	r4, [r4, #0]
 8000ae0:	2c00      	cmp	r4, #0
 8000ae2:	d1f7      	bne.n	8000ad4 <_fwalk_sglue+0xc>
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aea:	89ab      	ldrh	r3, [r5, #12]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d907      	bls.n	8000b00 <_fwalk_sglue+0x38>
 8000af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000af4:	3301      	adds	r3, #1
 8000af6:	d003      	beq.n	8000b00 <_fwalk_sglue+0x38>
 8000af8:	4629      	mov	r1, r5
 8000afa:	4638      	mov	r0, r7
 8000afc:	47c0      	blx	r8
 8000afe:	4306      	orrs	r6, r0
 8000b00:	3568      	adds	r5, #104	; 0x68
 8000b02:	e7e9      	b.n	8000ad8 <_fwalk_sglue+0x10>

08000b04 <iprintf>:
 8000b04:	b40f      	push	{r0, r1, r2, r3}
 8000b06:	b507      	push	{r0, r1, r2, lr}
 8000b08:	4906      	ldr	r1, [pc, #24]	; (8000b24 <iprintf+0x20>)
 8000b0a:	ab04      	add	r3, sp, #16
 8000b0c:	6808      	ldr	r0, [r1, #0]
 8000b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b12:	6881      	ldr	r1, [r0, #8]
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	f000 fad9 	bl	80010cc <_vfiprintf_r>
 8000b1a:	b003      	add	sp, #12
 8000b1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b20:	b004      	add	sp, #16
 8000b22:	4770      	bx	lr
 8000b24:	200000bc 	.word	0x200000bc

08000b28 <_puts_r>:
 8000b28:	6a03      	ldr	r3, [r0, #32]
 8000b2a:	b570      	push	{r4, r5, r6, lr}
 8000b2c:	6884      	ldr	r4, [r0, #8]
 8000b2e:	4605      	mov	r5, r0
 8000b30:	460e      	mov	r6, r1
 8000b32:	b90b      	cbnz	r3, 8000b38 <_puts_r+0x10>
 8000b34:	f7ff ffb0 	bl	8000a98 <__sinit>
 8000b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b3a:	07db      	lsls	r3, r3, #31
 8000b3c:	d405      	bmi.n	8000b4a <_puts_r+0x22>
 8000b3e:	89a3      	ldrh	r3, [r4, #12]
 8000b40:	0598      	lsls	r0, r3, #22
 8000b42:	d402      	bmi.n	8000b4a <_puts_r+0x22>
 8000b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b46:	f000 f99c 	bl	8000e82 <__retarget_lock_acquire_recursive>
 8000b4a:	89a3      	ldrh	r3, [r4, #12]
 8000b4c:	0719      	lsls	r1, r3, #28
 8000b4e:	d513      	bpl.n	8000b78 <_puts_r+0x50>
 8000b50:	6923      	ldr	r3, [r4, #16]
 8000b52:	b18b      	cbz	r3, 8000b78 <_puts_r+0x50>
 8000b54:	3e01      	subs	r6, #1
 8000b56:	68a3      	ldr	r3, [r4, #8]
 8000b58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	60a3      	str	r3, [r4, #8]
 8000b60:	b9e9      	cbnz	r1, 8000b9e <_puts_r+0x76>
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	da2e      	bge.n	8000bc4 <_puts_r+0x9c>
 8000b66:	4622      	mov	r2, r4
 8000b68:	210a      	movs	r1, #10
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f000 f87b 	bl	8000c66 <__swbuf_r>
 8000b70:	3001      	adds	r0, #1
 8000b72:	d007      	beq.n	8000b84 <_puts_r+0x5c>
 8000b74:	250a      	movs	r5, #10
 8000b76:	e007      	b.n	8000b88 <_puts_r+0x60>
 8000b78:	4621      	mov	r1, r4
 8000b7a:	4628      	mov	r0, r5
 8000b7c:	f000 f8b0 	bl	8000ce0 <__swsetup_r>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d0e7      	beq.n	8000b54 <_puts_r+0x2c>
 8000b84:	f04f 35ff 	mov.w	r5, #4294967295
 8000b88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b8a:	07da      	lsls	r2, r3, #31
 8000b8c:	d405      	bmi.n	8000b9a <_puts_r+0x72>
 8000b8e:	89a3      	ldrh	r3, [r4, #12]
 8000b90:	059b      	lsls	r3, r3, #22
 8000b92:	d402      	bmi.n	8000b9a <_puts_r+0x72>
 8000b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b96:	f000 f975 	bl	8000e84 <__retarget_lock_release_recursive>
 8000b9a:	4628      	mov	r0, r5
 8000b9c:	bd70      	pop	{r4, r5, r6, pc}
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	da04      	bge.n	8000bac <_puts_r+0x84>
 8000ba2:	69a2      	ldr	r2, [r4, #24]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dc06      	bgt.n	8000bb6 <_puts_r+0x8e>
 8000ba8:	290a      	cmp	r1, #10
 8000baa:	d004      	beq.n	8000bb6 <_puts_r+0x8e>
 8000bac:	6823      	ldr	r3, [r4, #0]
 8000bae:	1c5a      	adds	r2, r3, #1
 8000bb0:	6022      	str	r2, [r4, #0]
 8000bb2:	7019      	strb	r1, [r3, #0]
 8000bb4:	e7cf      	b.n	8000b56 <_puts_r+0x2e>
 8000bb6:	4622      	mov	r2, r4
 8000bb8:	4628      	mov	r0, r5
 8000bba:	f000 f854 	bl	8000c66 <__swbuf_r>
 8000bbe:	3001      	adds	r0, #1
 8000bc0:	d1c9      	bne.n	8000b56 <_puts_r+0x2e>
 8000bc2:	e7df      	b.n	8000b84 <_puts_r+0x5c>
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	250a      	movs	r5, #10
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	6022      	str	r2, [r4, #0]
 8000bcc:	701d      	strb	r5, [r3, #0]
 8000bce:	e7db      	b.n	8000b88 <_puts_r+0x60>

08000bd0 <puts>:
 8000bd0:	4b02      	ldr	r3, [pc, #8]	; (8000bdc <puts+0xc>)
 8000bd2:	4601      	mov	r1, r0
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	f7ff bfa7 	b.w	8000b28 <_puts_r>
 8000bda:	bf00      	nop
 8000bdc:	200000bc 	.word	0x200000bc

08000be0 <__sread>:
 8000be0:	b510      	push	{r4, lr}
 8000be2:	460c      	mov	r4, r1
 8000be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000be8:	f000 f8fc 	bl	8000de4 <_read_r>
 8000bec:	2800      	cmp	r0, #0
 8000bee:	bfab      	itete	ge
 8000bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8000bf4:	181b      	addge	r3, r3, r0
 8000bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000bfa:	bfac      	ite	ge
 8000bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8000bfe:	81a3      	strhlt	r3, [r4, #12]
 8000c00:	bd10      	pop	{r4, pc}

08000c02 <__swrite>:
 8000c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c06:	461f      	mov	r7, r3
 8000c08:	898b      	ldrh	r3, [r1, #12]
 8000c0a:	05db      	lsls	r3, r3, #23
 8000c0c:	4605      	mov	r5, r0
 8000c0e:	460c      	mov	r4, r1
 8000c10:	4616      	mov	r6, r2
 8000c12:	d505      	bpl.n	8000c20 <__swrite+0x1e>
 8000c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c18:	2302      	movs	r3, #2
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f000 f8d0 	bl	8000dc0 <_lseek_r>
 8000c20:	89a3      	ldrh	r3, [r4, #12]
 8000c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c2a:	81a3      	strh	r3, [r4, #12]
 8000c2c:	4632      	mov	r2, r6
 8000c2e:	463b      	mov	r3, r7
 8000c30:	4628      	mov	r0, r5
 8000c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c36:	f000 b8e7 	b.w	8000e08 <_write_r>

08000c3a <__sseek>:
 8000c3a:	b510      	push	{r4, lr}
 8000c3c:	460c      	mov	r4, r1
 8000c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c42:	f000 f8bd 	bl	8000dc0 <_lseek_r>
 8000c46:	1c43      	adds	r3, r0, #1
 8000c48:	89a3      	ldrh	r3, [r4, #12]
 8000c4a:	bf15      	itete	ne
 8000c4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8000c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c56:	81a3      	strheq	r3, [r4, #12]
 8000c58:	bf18      	it	ne
 8000c5a:	81a3      	strhne	r3, [r4, #12]
 8000c5c:	bd10      	pop	{r4, pc}

08000c5e <__sclose>:
 8000c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c62:	f000 b89d 	b.w	8000da0 <_close_r>

08000c66 <__swbuf_r>:
 8000c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c68:	460e      	mov	r6, r1
 8000c6a:	4614      	mov	r4, r2
 8000c6c:	4605      	mov	r5, r0
 8000c6e:	b118      	cbz	r0, 8000c78 <__swbuf_r+0x12>
 8000c70:	6a03      	ldr	r3, [r0, #32]
 8000c72:	b90b      	cbnz	r3, 8000c78 <__swbuf_r+0x12>
 8000c74:	f7ff ff10 	bl	8000a98 <__sinit>
 8000c78:	69a3      	ldr	r3, [r4, #24]
 8000c7a:	60a3      	str	r3, [r4, #8]
 8000c7c:	89a3      	ldrh	r3, [r4, #12]
 8000c7e:	071a      	lsls	r2, r3, #28
 8000c80:	d525      	bpl.n	8000cce <__swbuf_r+0x68>
 8000c82:	6923      	ldr	r3, [r4, #16]
 8000c84:	b31b      	cbz	r3, 8000cce <__swbuf_r+0x68>
 8000c86:	6823      	ldr	r3, [r4, #0]
 8000c88:	6922      	ldr	r2, [r4, #16]
 8000c8a:	1a98      	subs	r0, r3, r2
 8000c8c:	6963      	ldr	r3, [r4, #20]
 8000c8e:	b2f6      	uxtb	r6, r6
 8000c90:	4283      	cmp	r3, r0
 8000c92:	4637      	mov	r7, r6
 8000c94:	dc04      	bgt.n	8000ca0 <__swbuf_r+0x3a>
 8000c96:	4621      	mov	r1, r4
 8000c98:	4628      	mov	r0, r5
 8000c9a:	f000 fd47 	bl	800172c <_fflush_r>
 8000c9e:	b9e0      	cbnz	r0, 8000cda <__swbuf_r+0x74>
 8000ca0:	68a3      	ldr	r3, [r4, #8]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	60a3      	str	r3, [r4, #8]
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	6022      	str	r2, [r4, #0]
 8000cac:	701e      	strb	r6, [r3, #0]
 8000cae:	6962      	ldr	r2, [r4, #20]
 8000cb0:	1c43      	adds	r3, r0, #1
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__swbuf_r+0x5a>
 8000cb6:	89a3      	ldrh	r3, [r4, #12]
 8000cb8:	07db      	lsls	r3, r3, #31
 8000cba:	d506      	bpl.n	8000cca <__swbuf_r+0x64>
 8000cbc:	2e0a      	cmp	r6, #10
 8000cbe:	d104      	bne.n	8000cca <__swbuf_r+0x64>
 8000cc0:	4621      	mov	r1, r4
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	f000 fd32 	bl	800172c <_fflush_r>
 8000cc8:	b938      	cbnz	r0, 8000cda <__swbuf_r+0x74>
 8000cca:	4638      	mov	r0, r7
 8000ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cce:	4621      	mov	r1, r4
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	f000 f805 	bl	8000ce0 <__swsetup_r>
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	d0d5      	beq.n	8000c86 <__swbuf_r+0x20>
 8000cda:	f04f 37ff 	mov.w	r7, #4294967295
 8000cde:	e7f4      	b.n	8000cca <__swbuf_r+0x64>

08000ce0 <__swsetup_r>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <__swsetup_r+0xac>)
 8000ce4:	4605      	mov	r5, r0
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	460c      	mov	r4, r1
 8000cea:	b118      	cbz	r0, 8000cf4 <__swsetup_r+0x14>
 8000cec:	6a03      	ldr	r3, [r0, #32]
 8000cee:	b90b      	cbnz	r3, 8000cf4 <__swsetup_r+0x14>
 8000cf0:	f7ff fed2 	bl	8000a98 <__sinit>
 8000cf4:	89a3      	ldrh	r3, [r4, #12]
 8000cf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000cfa:	0718      	lsls	r0, r3, #28
 8000cfc:	d422      	bmi.n	8000d44 <__swsetup_r+0x64>
 8000cfe:	06d9      	lsls	r1, r3, #27
 8000d00:	d407      	bmi.n	8000d12 <__swsetup_r+0x32>
 8000d02:	2309      	movs	r3, #9
 8000d04:	602b      	str	r3, [r5, #0]
 8000d06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000d0a:	81a3      	strh	r3, [r4, #12]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	e034      	b.n	8000d7c <__swsetup_r+0x9c>
 8000d12:	0758      	lsls	r0, r3, #29
 8000d14:	d512      	bpl.n	8000d3c <__swsetup_r+0x5c>
 8000d16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000d18:	b141      	cbz	r1, 8000d2c <__swsetup_r+0x4c>
 8000d1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d002      	beq.n	8000d28 <__swsetup_r+0x48>
 8000d22:	4628      	mov	r0, r5
 8000d24:	f000 f8b0 	bl	8000e88 <_free_r>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	6363      	str	r3, [r4, #52]	; 0x34
 8000d2c:	89a3      	ldrh	r3, [r4, #12]
 8000d2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000d32:	81a3      	strh	r3, [r4, #12]
 8000d34:	2300      	movs	r3, #0
 8000d36:	6063      	str	r3, [r4, #4]
 8000d38:	6923      	ldr	r3, [r4, #16]
 8000d3a:	6023      	str	r3, [r4, #0]
 8000d3c:	89a3      	ldrh	r3, [r4, #12]
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	81a3      	strh	r3, [r4, #12]
 8000d44:	6923      	ldr	r3, [r4, #16]
 8000d46:	b94b      	cbnz	r3, 8000d5c <__swsetup_r+0x7c>
 8000d48:	89a3      	ldrh	r3, [r4, #12]
 8000d4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d52:	d003      	beq.n	8000d5c <__swsetup_r+0x7c>
 8000d54:	4621      	mov	r1, r4
 8000d56:	4628      	mov	r0, r5
 8000d58:	f000 fd36 	bl	80017c8 <__smakebuf_r>
 8000d5c:	89a0      	ldrh	r0, [r4, #12]
 8000d5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d62:	f010 0301 	ands.w	r3, r0, #1
 8000d66:	d00a      	beq.n	8000d7e <__swsetup_r+0x9e>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60a3      	str	r3, [r4, #8]
 8000d6c:	6963      	ldr	r3, [r4, #20]
 8000d6e:	425b      	negs	r3, r3
 8000d70:	61a3      	str	r3, [r4, #24]
 8000d72:	6923      	ldr	r3, [r4, #16]
 8000d74:	b943      	cbnz	r3, 8000d88 <__swsetup_r+0xa8>
 8000d76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d7a:	d1c4      	bne.n	8000d06 <__swsetup_r+0x26>
 8000d7c:	bd38      	pop	{r3, r4, r5, pc}
 8000d7e:	0781      	lsls	r1, r0, #30
 8000d80:	bf58      	it	pl
 8000d82:	6963      	ldrpl	r3, [r4, #20]
 8000d84:	60a3      	str	r3, [r4, #8]
 8000d86:	e7f4      	b.n	8000d72 <__swsetup_r+0x92>
 8000d88:	2000      	movs	r0, #0
 8000d8a:	e7f7      	b.n	8000d7c <__swsetup_r+0x9c>
 8000d8c:	200000bc 	.word	0x200000bc

08000d90 <memset>:
 8000d90:	4402      	add	r2, r0
 8000d92:	4603      	mov	r3, r0
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d100      	bne.n	8000d9a <memset+0xa>
 8000d98:	4770      	bx	lr
 8000d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8000d9e:	e7f9      	b.n	8000d94 <memset+0x4>

08000da0 <_close_r>:
 8000da0:	b538      	push	{r3, r4, r5, lr}
 8000da2:	4d06      	ldr	r5, [pc, #24]	; (8000dbc <_close_r+0x1c>)
 8000da4:	2300      	movs	r3, #0
 8000da6:	4604      	mov	r4, r0
 8000da8:	4608      	mov	r0, r1
 8000daa:	602b      	str	r3, [r5, #0]
 8000dac:	f7ff fd41 	bl	8000832 <_close>
 8000db0:	1c43      	adds	r3, r0, #1
 8000db2:	d102      	bne.n	8000dba <_close_r+0x1a>
 8000db4:	682b      	ldr	r3, [r5, #0]
 8000db6:	b103      	cbz	r3, 8000dba <_close_r+0x1a>
 8000db8:	6023      	str	r3, [r4, #0]
 8000dba:	bd38      	pop	{r3, r4, r5, pc}
 8000dbc:	20000230 	.word	0x20000230

08000dc0 <_lseek_r>:
 8000dc0:	b538      	push	{r3, r4, r5, lr}
 8000dc2:	4d07      	ldr	r5, [pc, #28]	; (8000de0 <_lseek_r+0x20>)
 8000dc4:	4604      	mov	r4, r0
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	4611      	mov	r1, r2
 8000dca:	2200      	movs	r2, #0
 8000dcc:	602a      	str	r2, [r5, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	f7ff fd56 	bl	8000880 <_lseek>
 8000dd4:	1c43      	adds	r3, r0, #1
 8000dd6:	d102      	bne.n	8000dde <_lseek_r+0x1e>
 8000dd8:	682b      	ldr	r3, [r5, #0]
 8000dda:	b103      	cbz	r3, 8000dde <_lseek_r+0x1e>
 8000ddc:	6023      	str	r3, [r4, #0]
 8000dde:	bd38      	pop	{r3, r4, r5, pc}
 8000de0:	20000230 	.word	0x20000230

08000de4 <_read_r>:
 8000de4:	b538      	push	{r3, r4, r5, lr}
 8000de6:	4d07      	ldr	r5, [pc, #28]	; (8000e04 <_read_r+0x20>)
 8000de8:	4604      	mov	r4, r0
 8000dea:	4608      	mov	r0, r1
 8000dec:	4611      	mov	r1, r2
 8000dee:	2200      	movs	r2, #0
 8000df0:	602a      	str	r2, [r5, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	f7ff fce4 	bl	80007c0 <_read>
 8000df8:	1c43      	adds	r3, r0, #1
 8000dfa:	d102      	bne.n	8000e02 <_read_r+0x1e>
 8000dfc:	682b      	ldr	r3, [r5, #0]
 8000dfe:	b103      	cbz	r3, 8000e02 <_read_r+0x1e>
 8000e00:	6023      	str	r3, [r4, #0]
 8000e02:	bd38      	pop	{r3, r4, r5, pc}
 8000e04:	20000230 	.word	0x20000230

08000e08 <_write_r>:
 8000e08:	b538      	push	{r3, r4, r5, lr}
 8000e0a:	4d07      	ldr	r5, [pc, #28]	; (8000e28 <_write_r+0x20>)
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	4608      	mov	r0, r1
 8000e10:	4611      	mov	r1, r2
 8000e12:	2200      	movs	r2, #0
 8000e14:	602a      	str	r2, [r5, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	f7ff fcef 	bl	80007fa <_write>
 8000e1c:	1c43      	adds	r3, r0, #1
 8000e1e:	d102      	bne.n	8000e26 <_write_r+0x1e>
 8000e20:	682b      	ldr	r3, [r5, #0]
 8000e22:	b103      	cbz	r3, 8000e26 <_write_r+0x1e>
 8000e24:	6023      	str	r3, [r4, #0]
 8000e26:	bd38      	pop	{r3, r4, r5, pc}
 8000e28:	20000230 	.word	0x20000230

08000e2c <__errno>:
 8000e2c:	4b01      	ldr	r3, [pc, #4]	; (8000e34 <__errno+0x8>)
 8000e2e:	6818      	ldr	r0, [r3, #0]
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	200000bc 	.word	0x200000bc

08000e38 <__libc_init_array>:
 8000e38:	b570      	push	{r4, r5, r6, lr}
 8000e3a:	4d0d      	ldr	r5, [pc, #52]	; (8000e70 <__libc_init_array+0x38>)
 8000e3c:	4c0d      	ldr	r4, [pc, #52]	; (8000e74 <__libc_init_array+0x3c>)
 8000e3e:	1b64      	subs	r4, r4, r5
 8000e40:	10a4      	asrs	r4, r4, #2
 8000e42:	2600      	movs	r6, #0
 8000e44:	42a6      	cmp	r6, r4
 8000e46:	d109      	bne.n	8000e5c <__libc_init_array+0x24>
 8000e48:	4d0b      	ldr	r5, [pc, #44]	; (8000e78 <__libc_init_array+0x40>)
 8000e4a:	4c0c      	ldr	r4, [pc, #48]	; (8000e7c <__libc_init_array+0x44>)
 8000e4c:	f000 fd2a 	bl	80018a4 <_init>
 8000e50:	1b64      	subs	r4, r4, r5
 8000e52:	10a4      	asrs	r4, r4, #2
 8000e54:	2600      	movs	r6, #0
 8000e56:	42a6      	cmp	r6, r4
 8000e58:	d105      	bne.n	8000e66 <__libc_init_array+0x2e>
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}
 8000e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e60:	4798      	blx	r3
 8000e62:	3601      	adds	r6, #1
 8000e64:	e7ee      	b.n	8000e44 <__libc_init_array+0xc>
 8000e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e6a:	4798      	blx	r3
 8000e6c:	3601      	adds	r6, #1
 8000e6e:	e7f2      	b.n	8000e56 <__libc_init_array+0x1e>
 8000e70:	08001920 	.word	0x08001920
 8000e74:	08001920 	.word	0x08001920
 8000e78:	08001920 	.word	0x08001920
 8000e7c:	08001924 	.word	0x08001924

08000e80 <__retarget_lock_init_recursive>:
 8000e80:	4770      	bx	lr

08000e82 <__retarget_lock_acquire_recursive>:
 8000e82:	4770      	bx	lr

08000e84 <__retarget_lock_release_recursive>:
 8000e84:	4770      	bx	lr
	...

08000e88 <_free_r>:
 8000e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e8a:	2900      	cmp	r1, #0
 8000e8c:	d044      	beq.n	8000f18 <_free_r+0x90>
 8000e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e92:	9001      	str	r0, [sp, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f1a1 0404 	sub.w	r4, r1, #4
 8000e9a:	bfb8      	it	lt
 8000e9c:	18e4      	addlt	r4, r4, r3
 8000e9e:	f000 f8df 	bl	8001060 <__malloc_lock>
 8000ea2:	4a1e      	ldr	r2, [pc, #120]	; (8000f1c <_free_r+0x94>)
 8000ea4:	9801      	ldr	r0, [sp, #4]
 8000ea6:	6813      	ldr	r3, [r2, #0]
 8000ea8:	b933      	cbnz	r3, 8000eb8 <_free_r+0x30>
 8000eaa:	6063      	str	r3, [r4, #4]
 8000eac:	6014      	str	r4, [r2, #0]
 8000eae:	b003      	add	sp, #12
 8000eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000eb4:	f000 b8da 	b.w	800106c <__malloc_unlock>
 8000eb8:	42a3      	cmp	r3, r4
 8000eba:	d908      	bls.n	8000ece <_free_r+0x46>
 8000ebc:	6825      	ldr	r5, [r4, #0]
 8000ebe:	1961      	adds	r1, r4, r5
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	bf01      	itttt	eq
 8000ec4:	6819      	ldreq	r1, [r3, #0]
 8000ec6:	685b      	ldreq	r3, [r3, #4]
 8000ec8:	1949      	addeq	r1, r1, r5
 8000eca:	6021      	streq	r1, [r4, #0]
 8000ecc:	e7ed      	b.n	8000eaa <_free_r+0x22>
 8000ece:	461a      	mov	r2, r3
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	b10b      	cbz	r3, 8000ed8 <_free_r+0x50>
 8000ed4:	42a3      	cmp	r3, r4
 8000ed6:	d9fa      	bls.n	8000ece <_free_r+0x46>
 8000ed8:	6811      	ldr	r1, [r2, #0]
 8000eda:	1855      	adds	r5, r2, r1
 8000edc:	42a5      	cmp	r5, r4
 8000ede:	d10b      	bne.n	8000ef8 <_free_r+0x70>
 8000ee0:	6824      	ldr	r4, [r4, #0]
 8000ee2:	4421      	add	r1, r4
 8000ee4:	1854      	adds	r4, r2, r1
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	6011      	str	r1, [r2, #0]
 8000eea:	d1e0      	bne.n	8000eae <_free_r+0x26>
 8000eec:	681c      	ldr	r4, [r3, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	6053      	str	r3, [r2, #4]
 8000ef2:	440c      	add	r4, r1
 8000ef4:	6014      	str	r4, [r2, #0]
 8000ef6:	e7da      	b.n	8000eae <_free_r+0x26>
 8000ef8:	d902      	bls.n	8000f00 <_free_r+0x78>
 8000efa:	230c      	movs	r3, #12
 8000efc:	6003      	str	r3, [r0, #0]
 8000efe:	e7d6      	b.n	8000eae <_free_r+0x26>
 8000f00:	6825      	ldr	r5, [r4, #0]
 8000f02:	1961      	adds	r1, r4, r5
 8000f04:	428b      	cmp	r3, r1
 8000f06:	bf04      	itt	eq
 8000f08:	6819      	ldreq	r1, [r3, #0]
 8000f0a:	685b      	ldreq	r3, [r3, #4]
 8000f0c:	6063      	str	r3, [r4, #4]
 8000f0e:	bf04      	itt	eq
 8000f10:	1949      	addeq	r1, r1, r5
 8000f12:	6021      	streq	r1, [r4, #0]
 8000f14:	6054      	str	r4, [r2, #4]
 8000f16:	e7ca      	b.n	8000eae <_free_r+0x26>
 8000f18:	b003      	add	sp, #12
 8000f1a:	bd30      	pop	{r4, r5, pc}
 8000f1c:	20000238 	.word	0x20000238

08000f20 <sbrk_aligned>:
 8000f20:	b570      	push	{r4, r5, r6, lr}
 8000f22:	4e0e      	ldr	r6, [pc, #56]	; (8000f5c <sbrk_aligned+0x3c>)
 8000f24:	460c      	mov	r4, r1
 8000f26:	6831      	ldr	r1, [r6, #0]
 8000f28:	4605      	mov	r5, r0
 8000f2a:	b911      	cbnz	r1, 8000f32 <sbrk_aligned+0x12>
 8000f2c:	f000 fcaa 	bl	8001884 <_sbrk_r>
 8000f30:	6030      	str	r0, [r6, #0]
 8000f32:	4621      	mov	r1, r4
 8000f34:	4628      	mov	r0, r5
 8000f36:	f000 fca5 	bl	8001884 <_sbrk_r>
 8000f3a:	1c43      	adds	r3, r0, #1
 8000f3c:	d00a      	beq.n	8000f54 <sbrk_aligned+0x34>
 8000f3e:	1cc4      	adds	r4, r0, #3
 8000f40:	f024 0403 	bic.w	r4, r4, #3
 8000f44:	42a0      	cmp	r0, r4
 8000f46:	d007      	beq.n	8000f58 <sbrk_aligned+0x38>
 8000f48:	1a21      	subs	r1, r4, r0
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	f000 fc9a 	bl	8001884 <_sbrk_r>
 8000f50:	3001      	adds	r0, #1
 8000f52:	d101      	bne.n	8000f58 <sbrk_aligned+0x38>
 8000f54:	f04f 34ff 	mov.w	r4, #4294967295
 8000f58:	4620      	mov	r0, r4
 8000f5a:	bd70      	pop	{r4, r5, r6, pc}
 8000f5c:	2000023c 	.word	0x2000023c

08000f60 <_malloc_r>:
 8000f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f64:	1ccd      	adds	r5, r1, #3
 8000f66:	f025 0503 	bic.w	r5, r5, #3
 8000f6a:	3508      	adds	r5, #8
 8000f6c:	2d0c      	cmp	r5, #12
 8000f6e:	bf38      	it	cc
 8000f70:	250c      	movcc	r5, #12
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	4607      	mov	r7, r0
 8000f76:	db01      	blt.n	8000f7c <_malloc_r+0x1c>
 8000f78:	42a9      	cmp	r1, r5
 8000f7a:	d905      	bls.n	8000f88 <_malloc_r+0x28>
 8000f7c:	230c      	movs	r3, #12
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	2600      	movs	r6, #0
 8000f82:	4630      	mov	r0, r6
 8000f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800105c <_malloc_r+0xfc>
 8000f8c:	f000 f868 	bl	8001060 <__malloc_lock>
 8000f90:	f8d8 3000 	ldr.w	r3, [r8]
 8000f94:	461c      	mov	r4, r3
 8000f96:	bb5c      	cbnz	r4, 8000ff0 <_malloc_r+0x90>
 8000f98:	4629      	mov	r1, r5
 8000f9a:	4638      	mov	r0, r7
 8000f9c:	f7ff ffc0 	bl	8000f20 <sbrk_aligned>
 8000fa0:	1c43      	adds	r3, r0, #1
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	d155      	bne.n	8001052 <_malloc_r+0xf2>
 8000fa6:	f8d8 4000 	ldr.w	r4, [r8]
 8000faa:	4626      	mov	r6, r4
 8000fac:	2e00      	cmp	r6, #0
 8000fae:	d145      	bne.n	800103c <_malloc_r+0xdc>
 8000fb0:	2c00      	cmp	r4, #0
 8000fb2:	d048      	beq.n	8001046 <_malloc_r+0xe6>
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	4631      	mov	r1, r6
 8000fb8:	4638      	mov	r0, r7
 8000fba:	eb04 0903 	add.w	r9, r4, r3
 8000fbe:	f000 fc61 	bl	8001884 <_sbrk_r>
 8000fc2:	4581      	cmp	r9, r0
 8000fc4:	d13f      	bne.n	8001046 <_malloc_r+0xe6>
 8000fc6:	6821      	ldr	r1, [r4, #0]
 8000fc8:	1a6d      	subs	r5, r5, r1
 8000fca:	4629      	mov	r1, r5
 8000fcc:	4638      	mov	r0, r7
 8000fce:	f7ff ffa7 	bl	8000f20 <sbrk_aligned>
 8000fd2:	3001      	adds	r0, #1
 8000fd4:	d037      	beq.n	8001046 <_malloc_r+0xe6>
 8000fd6:	6823      	ldr	r3, [r4, #0]
 8000fd8:	442b      	add	r3, r5
 8000fda:	6023      	str	r3, [r4, #0]
 8000fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d038      	beq.n	8001056 <_malloc_r+0xf6>
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	42a2      	cmp	r2, r4
 8000fe8:	d12b      	bne.n	8001042 <_malloc_r+0xe2>
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	e00f      	b.n	8001010 <_malloc_r+0xb0>
 8000ff0:	6822      	ldr	r2, [r4, #0]
 8000ff2:	1b52      	subs	r2, r2, r5
 8000ff4:	d41f      	bmi.n	8001036 <_malloc_r+0xd6>
 8000ff6:	2a0b      	cmp	r2, #11
 8000ff8:	d917      	bls.n	800102a <_malloc_r+0xca>
 8000ffa:	1961      	adds	r1, r4, r5
 8000ffc:	42a3      	cmp	r3, r4
 8000ffe:	6025      	str	r5, [r4, #0]
 8001000:	bf18      	it	ne
 8001002:	6059      	strne	r1, [r3, #4]
 8001004:	6863      	ldr	r3, [r4, #4]
 8001006:	bf08      	it	eq
 8001008:	f8c8 1000 	streq.w	r1, [r8]
 800100c:	5162      	str	r2, [r4, r5]
 800100e:	604b      	str	r3, [r1, #4]
 8001010:	4638      	mov	r0, r7
 8001012:	f104 060b 	add.w	r6, r4, #11
 8001016:	f000 f829 	bl	800106c <__malloc_unlock>
 800101a:	f026 0607 	bic.w	r6, r6, #7
 800101e:	1d23      	adds	r3, r4, #4
 8001020:	1af2      	subs	r2, r6, r3
 8001022:	d0ae      	beq.n	8000f82 <_malloc_r+0x22>
 8001024:	1b9b      	subs	r3, r3, r6
 8001026:	50a3      	str	r3, [r4, r2]
 8001028:	e7ab      	b.n	8000f82 <_malloc_r+0x22>
 800102a:	42a3      	cmp	r3, r4
 800102c:	6862      	ldr	r2, [r4, #4]
 800102e:	d1dd      	bne.n	8000fec <_malloc_r+0x8c>
 8001030:	f8c8 2000 	str.w	r2, [r8]
 8001034:	e7ec      	b.n	8001010 <_malloc_r+0xb0>
 8001036:	4623      	mov	r3, r4
 8001038:	6864      	ldr	r4, [r4, #4]
 800103a:	e7ac      	b.n	8000f96 <_malloc_r+0x36>
 800103c:	4634      	mov	r4, r6
 800103e:	6876      	ldr	r6, [r6, #4]
 8001040:	e7b4      	b.n	8000fac <_malloc_r+0x4c>
 8001042:	4613      	mov	r3, r2
 8001044:	e7cc      	b.n	8000fe0 <_malloc_r+0x80>
 8001046:	230c      	movs	r3, #12
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4638      	mov	r0, r7
 800104c:	f000 f80e 	bl	800106c <__malloc_unlock>
 8001050:	e797      	b.n	8000f82 <_malloc_r+0x22>
 8001052:	6025      	str	r5, [r4, #0]
 8001054:	e7dc      	b.n	8001010 <_malloc_r+0xb0>
 8001056:	605b      	str	r3, [r3, #4]
 8001058:	deff      	udf	#255	; 0xff
 800105a:	bf00      	nop
 800105c:	20000238 	.word	0x20000238

08001060 <__malloc_lock>:
 8001060:	4801      	ldr	r0, [pc, #4]	; (8001068 <__malloc_lock+0x8>)
 8001062:	f7ff bf0e 	b.w	8000e82 <__retarget_lock_acquire_recursive>
 8001066:	bf00      	nop
 8001068:	20000234 	.word	0x20000234

0800106c <__malloc_unlock>:
 800106c:	4801      	ldr	r0, [pc, #4]	; (8001074 <__malloc_unlock+0x8>)
 800106e:	f7ff bf09 	b.w	8000e84 <__retarget_lock_release_recursive>
 8001072:	bf00      	nop
 8001074:	20000234 	.word	0x20000234

08001078 <__sfputc_r>:
 8001078:	6893      	ldr	r3, [r2, #8]
 800107a:	3b01      	subs	r3, #1
 800107c:	2b00      	cmp	r3, #0
 800107e:	b410      	push	{r4}
 8001080:	6093      	str	r3, [r2, #8]
 8001082:	da08      	bge.n	8001096 <__sfputc_r+0x1e>
 8001084:	6994      	ldr	r4, [r2, #24]
 8001086:	42a3      	cmp	r3, r4
 8001088:	db01      	blt.n	800108e <__sfputc_r+0x16>
 800108a:	290a      	cmp	r1, #10
 800108c:	d103      	bne.n	8001096 <__sfputc_r+0x1e>
 800108e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001092:	f7ff bde8 	b.w	8000c66 <__swbuf_r>
 8001096:	6813      	ldr	r3, [r2, #0]
 8001098:	1c58      	adds	r0, r3, #1
 800109a:	6010      	str	r0, [r2, #0]
 800109c:	7019      	strb	r1, [r3, #0]
 800109e:	4608      	mov	r0, r1
 80010a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <__sfputs_r>:
 80010a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a8:	4606      	mov	r6, r0
 80010aa:	460f      	mov	r7, r1
 80010ac:	4614      	mov	r4, r2
 80010ae:	18d5      	adds	r5, r2, r3
 80010b0:	42ac      	cmp	r4, r5
 80010b2:	d101      	bne.n	80010b8 <__sfputs_r+0x12>
 80010b4:	2000      	movs	r0, #0
 80010b6:	e007      	b.n	80010c8 <__sfputs_r+0x22>
 80010b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010bc:	463a      	mov	r2, r7
 80010be:	4630      	mov	r0, r6
 80010c0:	f7ff ffda 	bl	8001078 <__sfputc_r>
 80010c4:	1c43      	adds	r3, r0, #1
 80010c6:	d1f3      	bne.n	80010b0 <__sfputs_r+0xa>
 80010c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080010cc <_vfiprintf_r>:
 80010cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010d0:	460d      	mov	r5, r1
 80010d2:	b09d      	sub	sp, #116	; 0x74
 80010d4:	4614      	mov	r4, r2
 80010d6:	4698      	mov	r8, r3
 80010d8:	4606      	mov	r6, r0
 80010da:	b118      	cbz	r0, 80010e4 <_vfiprintf_r+0x18>
 80010dc:	6a03      	ldr	r3, [r0, #32]
 80010de:	b90b      	cbnz	r3, 80010e4 <_vfiprintf_r+0x18>
 80010e0:	f7ff fcda 	bl	8000a98 <__sinit>
 80010e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010e6:	07d9      	lsls	r1, r3, #31
 80010e8:	d405      	bmi.n	80010f6 <_vfiprintf_r+0x2a>
 80010ea:	89ab      	ldrh	r3, [r5, #12]
 80010ec:	059a      	lsls	r2, r3, #22
 80010ee:	d402      	bmi.n	80010f6 <_vfiprintf_r+0x2a>
 80010f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010f2:	f7ff fec6 	bl	8000e82 <__retarget_lock_acquire_recursive>
 80010f6:	89ab      	ldrh	r3, [r5, #12]
 80010f8:	071b      	lsls	r3, r3, #28
 80010fa:	d501      	bpl.n	8001100 <_vfiprintf_r+0x34>
 80010fc:	692b      	ldr	r3, [r5, #16]
 80010fe:	b99b      	cbnz	r3, 8001128 <_vfiprintf_r+0x5c>
 8001100:	4629      	mov	r1, r5
 8001102:	4630      	mov	r0, r6
 8001104:	f7ff fdec 	bl	8000ce0 <__swsetup_r>
 8001108:	b170      	cbz	r0, 8001128 <_vfiprintf_r+0x5c>
 800110a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800110c:	07dc      	lsls	r4, r3, #31
 800110e:	d504      	bpl.n	800111a <_vfiprintf_r+0x4e>
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	b01d      	add	sp, #116	; 0x74
 8001116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800111a:	89ab      	ldrh	r3, [r5, #12]
 800111c:	0598      	lsls	r0, r3, #22
 800111e:	d4f7      	bmi.n	8001110 <_vfiprintf_r+0x44>
 8001120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001122:	f7ff feaf 	bl	8000e84 <__retarget_lock_release_recursive>
 8001126:	e7f3      	b.n	8001110 <_vfiprintf_r+0x44>
 8001128:	2300      	movs	r3, #0
 800112a:	9309      	str	r3, [sp, #36]	; 0x24
 800112c:	2320      	movs	r3, #32
 800112e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001132:	f8cd 800c 	str.w	r8, [sp, #12]
 8001136:	2330      	movs	r3, #48	; 0x30
 8001138:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80012ec <_vfiprintf_r+0x220>
 800113c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001140:	f04f 0901 	mov.w	r9, #1
 8001144:	4623      	mov	r3, r4
 8001146:	469a      	mov	sl, r3
 8001148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800114c:	b10a      	cbz	r2, 8001152 <_vfiprintf_r+0x86>
 800114e:	2a25      	cmp	r2, #37	; 0x25
 8001150:	d1f9      	bne.n	8001146 <_vfiprintf_r+0x7a>
 8001152:	ebba 0b04 	subs.w	fp, sl, r4
 8001156:	d00b      	beq.n	8001170 <_vfiprintf_r+0xa4>
 8001158:	465b      	mov	r3, fp
 800115a:	4622      	mov	r2, r4
 800115c:	4629      	mov	r1, r5
 800115e:	4630      	mov	r0, r6
 8001160:	f7ff ffa1 	bl	80010a6 <__sfputs_r>
 8001164:	3001      	adds	r0, #1
 8001166:	f000 80a9 	beq.w	80012bc <_vfiprintf_r+0x1f0>
 800116a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800116c:	445a      	add	r2, fp
 800116e:	9209      	str	r2, [sp, #36]	; 0x24
 8001170:	f89a 3000 	ldrb.w	r3, [sl]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80a1 	beq.w	80012bc <_vfiprintf_r+0x1f0>
 800117a:	2300      	movs	r3, #0
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001184:	f10a 0a01 	add.w	sl, sl, #1
 8001188:	9304      	str	r3, [sp, #16]
 800118a:	9307      	str	r3, [sp, #28]
 800118c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001190:	931a      	str	r3, [sp, #104]	; 0x68
 8001192:	4654      	mov	r4, sl
 8001194:	2205      	movs	r2, #5
 8001196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800119a:	4854      	ldr	r0, [pc, #336]	; (80012ec <_vfiprintf_r+0x220>)
 800119c:	f7ff f828 	bl	80001f0 <memchr>
 80011a0:	9a04      	ldr	r2, [sp, #16]
 80011a2:	b9d8      	cbnz	r0, 80011dc <_vfiprintf_r+0x110>
 80011a4:	06d1      	lsls	r1, r2, #27
 80011a6:	bf44      	itt	mi
 80011a8:	2320      	movmi	r3, #32
 80011aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011ae:	0713      	lsls	r3, r2, #28
 80011b0:	bf44      	itt	mi
 80011b2:	232b      	movmi	r3, #43	; 0x2b
 80011b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011b8:	f89a 3000 	ldrb.w	r3, [sl]
 80011bc:	2b2a      	cmp	r3, #42	; 0x2a
 80011be:	d015      	beq.n	80011ec <_vfiprintf_r+0x120>
 80011c0:	9a07      	ldr	r2, [sp, #28]
 80011c2:	4654      	mov	r4, sl
 80011c4:	2000      	movs	r0, #0
 80011c6:	f04f 0c0a 	mov.w	ip, #10
 80011ca:	4621      	mov	r1, r4
 80011cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011d0:	3b30      	subs	r3, #48	; 0x30
 80011d2:	2b09      	cmp	r3, #9
 80011d4:	d94d      	bls.n	8001272 <_vfiprintf_r+0x1a6>
 80011d6:	b1b0      	cbz	r0, 8001206 <_vfiprintf_r+0x13a>
 80011d8:	9207      	str	r2, [sp, #28]
 80011da:	e014      	b.n	8001206 <_vfiprintf_r+0x13a>
 80011dc:	eba0 0308 	sub.w	r3, r0, r8
 80011e0:	fa09 f303 	lsl.w	r3, r9, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	9304      	str	r3, [sp, #16]
 80011e8:	46a2      	mov	sl, r4
 80011ea:	e7d2      	b.n	8001192 <_vfiprintf_r+0xc6>
 80011ec:	9b03      	ldr	r3, [sp, #12]
 80011ee:	1d19      	adds	r1, r3, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	9103      	str	r1, [sp, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bfbb      	ittet	lt
 80011f8:	425b      	neglt	r3, r3
 80011fa:	f042 0202 	orrlt.w	r2, r2, #2
 80011fe:	9307      	strge	r3, [sp, #28]
 8001200:	9307      	strlt	r3, [sp, #28]
 8001202:	bfb8      	it	lt
 8001204:	9204      	strlt	r2, [sp, #16]
 8001206:	7823      	ldrb	r3, [r4, #0]
 8001208:	2b2e      	cmp	r3, #46	; 0x2e
 800120a:	d10c      	bne.n	8001226 <_vfiprintf_r+0x15a>
 800120c:	7863      	ldrb	r3, [r4, #1]
 800120e:	2b2a      	cmp	r3, #42	; 0x2a
 8001210:	d134      	bne.n	800127c <_vfiprintf_r+0x1b0>
 8001212:	9b03      	ldr	r3, [sp, #12]
 8001214:	1d1a      	adds	r2, r3, #4
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	9203      	str	r2, [sp, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bfb8      	it	lt
 800121e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001222:	3402      	adds	r4, #2
 8001224:	9305      	str	r3, [sp, #20]
 8001226:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80012fc <_vfiprintf_r+0x230>
 800122a:	7821      	ldrb	r1, [r4, #0]
 800122c:	2203      	movs	r2, #3
 800122e:	4650      	mov	r0, sl
 8001230:	f7fe ffde 	bl	80001f0 <memchr>
 8001234:	b138      	cbz	r0, 8001246 <_vfiprintf_r+0x17a>
 8001236:	9b04      	ldr	r3, [sp, #16]
 8001238:	eba0 000a 	sub.w	r0, r0, sl
 800123c:	2240      	movs	r2, #64	; 0x40
 800123e:	4082      	lsls	r2, r0
 8001240:	4313      	orrs	r3, r2
 8001242:	3401      	adds	r4, #1
 8001244:	9304      	str	r3, [sp, #16]
 8001246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800124a:	4829      	ldr	r0, [pc, #164]	; (80012f0 <_vfiprintf_r+0x224>)
 800124c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001250:	2206      	movs	r2, #6
 8001252:	f7fe ffcd 	bl	80001f0 <memchr>
 8001256:	2800      	cmp	r0, #0
 8001258:	d03f      	beq.n	80012da <_vfiprintf_r+0x20e>
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <_vfiprintf_r+0x228>)
 800125c:	bb1b      	cbnz	r3, 80012a6 <_vfiprintf_r+0x1da>
 800125e:	9b03      	ldr	r3, [sp, #12]
 8001260:	3307      	adds	r3, #7
 8001262:	f023 0307 	bic.w	r3, r3, #7
 8001266:	3308      	adds	r3, #8
 8001268:	9303      	str	r3, [sp, #12]
 800126a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800126c:	443b      	add	r3, r7
 800126e:	9309      	str	r3, [sp, #36]	; 0x24
 8001270:	e768      	b.n	8001144 <_vfiprintf_r+0x78>
 8001272:	fb0c 3202 	mla	r2, ip, r2, r3
 8001276:	460c      	mov	r4, r1
 8001278:	2001      	movs	r0, #1
 800127a:	e7a6      	b.n	80011ca <_vfiprintf_r+0xfe>
 800127c:	2300      	movs	r3, #0
 800127e:	3401      	adds	r4, #1
 8001280:	9305      	str	r3, [sp, #20]
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 0c0a 	mov.w	ip, #10
 8001288:	4620      	mov	r0, r4
 800128a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800128e:	3a30      	subs	r2, #48	; 0x30
 8001290:	2a09      	cmp	r2, #9
 8001292:	d903      	bls.n	800129c <_vfiprintf_r+0x1d0>
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0c6      	beq.n	8001226 <_vfiprintf_r+0x15a>
 8001298:	9105      	str	r1, [sp, #20]
 800129a:	e7c4      	b.n	8001226 <_vfiprintf_r+0x15a>
 800129c:	fb0c 2101 	mla	r1, ip, r1, r2
 80012a0:	4604      	mov	r4, r0
 80012a2:	2301      	movs	r3, #1
 80012a4:	e7f0      	b.n	8001288 <_vfiprintf_r+0x1bc>
 80012a6:	ab03      	add	r3, sp, #12
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	462a      	mov	r2, r5
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <_vfiprintf_r+0x22c>)
 80012ae:	a904      	add	r1, sp, #16
 80012b0:	4630      	mov	r0, r6
 80012b2:	f3af 8000 	nop.w
 80012b6:	4607      	mov	r7, r0
 80012b8:	1c78      	adds	r0, r7, #1
 80012ba:	d1d6      	bne.n	800126a <_vfiprintf_r+0x19e>
 80012bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012be:	07d9      	lsls	r1, r3, #31
 80012c0:	d405      	bmi.n	80012ce <_vfiprintf_r+0x202>
 80012c2:	89ab      	ldrh	r3, [r5, #12]
 80012c4:	059a      	lsls	r2, r3, #22
 80012c6:	d402      	bmi.n	80012ce <_vfiprintf_r+0x202>
 80012c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012ca:	f7ff fddb 	bl	8000e84 <__retarget_lock_release_recursive>
 80012ce:	89ab      	ldrh	r3, [r5, #12]
 80012d0:	065b      	lsls	r3, r3, #25
 80012d2:	f53f af1d 	bmi.w	8001110 <_vfiprintf_r+0x44>
 80012d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80012d8:	e71c      	b.n	8001114 <_vfiprintf_r+0x48>
 80012da:	ab03      	add	r3, sp, #12
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	462a      	mov	r2, r5
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <_vfiprintf_r+0x22c>)
 80012e2:	a904      	add	r1, sp, #16
 80012e4:	4630      	mov	r0, r6
 80012e6:	f000 f879 	bl	80013dc <_printf_i>
 80012ea:	e7e4      	b.n	80012b6 <_vfiprintf_r+0x1ea>
 80012ec:	080018ed 	.word	0x080018ed
 80012f0:	080018f7 	.word	0x080018f7
 80012f4:	00000000 	.word	0x00000000
 80012f8:	080010a7 	.word	0x080010a7
 80012fc:	080018f3 	.word	0x080018f3

08001300 <_printf_common>:
 8001300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001304:	4616      	mov	r6, r2
 8001306:	4699      	mov	r9, r3
 8001308:	688a      	ldr	r2, [r1, #8]
 800130a:	690b      	ldr	r3, [r1, #16]
 800130c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001310:	4293      	cmp	r3, r2
 8001312:	bfb8      	it	lt
 8001314:	4613      	movlt	r3, r2
 8001316:	6033      	str	r3, [r6, #0]
 8001318:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800131c:	4607      	mov	r7, r0
 800131e:	460c      	mov	r4, r1
 8001320:	b10a      	cbz	r2, 8001326 <_printf_common+0x26>
 8001322:	3301      	adds	r3, #1
 8001324:	6033      	str	r3, [r6, #0]
 8001326:	6823      	ldr	r3, [r4, #0]
 8001328:	0699      	lsls	r1, r3, #26
 800132a:	bf42      	ittt	mi
 800132c:	6833      	ldrmi	r3, [r6, #0]
 800132e:	3302      	addmi	r3, #2
 8001330:	6033      	strmi	r3, [r6, #0]
 8001332:	6825      	ldr	r5, [r4, #0]
 8001334:	f015 0506 	ands.w	r5, r5, #6
 8001338:	d106      	bne.n	8001348 <_printf_common+0x48>
 800133a:	f104 0a19 	add.w	sl, r4, #25
 800133e:	68e3      	ldr	r3, [r4, #12]
 8001340:	6832      	ldr	r2, [r6, #0]
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	42ab      	cmp	r3, r5
 8001346:	dc26      	bgt.n	8001396 <_printf_common+0x96>
 8001348:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800134c:	1e13      	subs	r3, r2, #0
 800134e:	6822      	ldr	r2, [r4, #0]
 8001350:	bf18      	it	ne
 8001352:	2301      	movne	r3, #1
 8001354:	0692      	lsls	r2, r2, #26
 8001356:	d42b      	bmi.n	80013b0 <_printf_common+0xb0>
 8001358:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800135c:	4649      	mov	r1, r9
 800135e:	4638      	mov	r0, r7
 8001360:	47c0      	blx	r8
 8001362:	3001      	adds	r0, #1
 8001364:	d01e      	beq.n	80013a4 <_printf_common+0xa4>
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	6922      	ldr	r2, [r4, #16]
 800136a:	f003 0306 	and.w	r3, r3, #6
 800136e:	2b04      	cmp	r3, #4
 8001370:	bf02      	ittt	eq
 8001372:	68e5      	ldreq	r5, [r4, #12]
 8001374:	6833      	ldreq	r3, [r6, #0]
 8001376:	1aed      	subeq	r5, r5, r3
 8001378:	68a3      	ldr	r3, [r4, #8]
 800137a:	bf0c      	ite	eq
 800137c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001380:	2500      	movne	r5, #0
 8001382:	4293      	cmp	r3, r2
 8001384:	bfc4      	itt	gt
 8001386:	1a9b      	subgt	r3, r3, r2
 8001388:	18ed      	addgt	r5, r5, r3
 800138a:	2600      	movs	r6, #0
 800138c:	341a      	adds	r4, #26
 800138e:	42b5      	cmp	r5, r6
 8001390:	d11a      	bne.n	80013c8 <_printf_common+0xc8>
 8001392:	2000      	movs	r0, #0
 8001394:	e008      	b.n	80013a8 <_printf_common+0xa8>
 8001396:	2301      	movs	r3, #1
 8001398:	4652      	mov	r2, sl
 800139a:	4649      	mov	r1, r9
 800139c:	4638      	mov	r0, r7
 800139e:	47c0      	blx	r8
 80013a0:	3001      	adds	r0, #1
 80013a2:	d103      	bne.n	80013ac <_printf_common+0xac>
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ac:	3501      	adds	r5, #1
 80013ae:	e7c6      	b.n	800133e <_printf_common+0x3e>
 80013b0:	18e1      	adds	r1, r4, r3
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	2030      	movs	r0, #48	; 0x30
 80013b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80013ba:	4422      	add	r2, r4
 80013bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80013c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80013c4:	3302      	adds	r3, #2
 80013c6:	e7c7      	b.n	8001358 <_printf_common+0x58>
 80013c8:	2301      	movs	r3, #1
 80013ca:	4622      	mov	r2, r4
 80013cc:	4649      	mov	r1, r9
 80013ce:	4638      	mov	r0, r7
 80013d0:	47c0      	blx	r8
 80013d2:	3001      	adds	r0, #1
 80013d4:	d0e6      	beq.n	80013a4 <_printf_common+0xa4>
 80013d6:	3601      	adds	r6, #1
 80013d8:	e7d9      	b.n	800138e <_printf_common+0x8e>
	...

080013dc <_printf_i>:
 80013dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013e0:	7e0f      	ldrb	r7, [r1, #24]
 80013e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80013e4:	2f78      	cmp	r7, #120	; 0x78
 80013e6:	4691      	mov	r9, r2
 80013e8:	4680      	mov	r8, r0
 80013ea:	460c      	mov	r4, r1
 80013ec:	469a      	mov	sl, r3
 80013ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80013f2:	d807      	bhi.n	8001404 <_printf_i+0x28>
 80013f4:	2f62      	cmp	r7, #98	; 0x62
 80013f6:	d80a      	bhi.n	800140e <_printf_i+0x32>
 80013f8:	2f00      	cmp	r7, #0
 80013fa:	f000 80d4 	beq.w	80015a6 <_printf_i+0x1ca>
 80013fe:	2f58      	cmp	r7, #88	; 0x58
 8001400:	f000 80c0 	beq.w	8001584 <_printf_i+0x1a8>
 8001404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001408:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800140c:	e03a      	b.n	8001484 <_printf_i+0xa8>
 800140e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001412:	2b15      	cmp	r3, #21
 8001414:	d8f6      	bhi.n	8001404 <_printf_i+0x28>
 8001416:	a101      	add	r1, pc, #4	; (adr r1, 800141c <_printf_i+0x40>)
 8001418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800141c:	08001475 	.word	0x08001475
 8001420:	08001489 	.word	0x08001489
 8001424:	08001405 	.word	0x08001405
 8001428:	08001405 	.word	0x08001405
 800142c:	08001405 	.word	0x08001405
 8001430:	08001405 	.word	0x08001405
 8001434:	08001489 	.word	0x08001489
 8001438:	08001405 	.word	0x08001405
 800143c:	08001405 	.word	0x08001405
 8001440:	08001405 	.word	0x08001405
 8001444:	08001405 	.word	0x08001405
 8001448:	0800158d 	.word	0x0800158d
 800144c:	080014b5 	.word	0x080014b5
 8001450:	08001547 	.word	0x08001547
 8001454:	08001405 	.word	0x08001405
 8001458:	08001405 	.word	0x08001405
 800145c:	080015af 	.word	0x080015af
 8001460:	08001405 	.word	0x08001405
 8001464:	080014b5 	.word	0x080014b5
 8001468:	08001405 	.word	0x08001405
 800146c:	08001405 	.word	0x08001405
 8001470:	0800154f 	.word	0x0800154f
 8001474:	682b      	ldr	r3, [r5, #0]
 8001476:	1d1a      	adds	r2, r3, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	602a      	str	r2, [r5, #0]
 800147c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001484:	2301      	movs	r3, #1
 8001486:	e09f      	b.n	80015c8 <_printf_i+0x1ec>
 8001488:	6820      	ldr	r0, [r4, #0]
 800148a:	682b      	ldr	r3, [r5, #0]
 800148c:	0607      	lsls	r7, r0, #24
 800148e:	f103 0104 	add.w	r1, r3, #4
 8001492:	6029      	str	r1, [r5, #0]
 8001494:	d501      	bpl.n	800149a <_printf_i+0xbe>
 8001496:	681e      	ldr	r6, [r3, #0]
 8001498:	e003      	b.n	80014a2 <_printf_i+0xc6>
 800149a:	0646      	lsls	r6, r0, #25
 800149c:	d5fb      	bpl.n	8001496 <_printf_i+0xba>
 800149e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80014a2:	2e00      	cmp	r6, #0
 80014a4:	da03      	bge.n	80014ae <_printf_i+0xd2>
 80014a6:	232d      	movs	r3, #45	; 0x2d
 80014a8:	4276      	negs	r6, r6
 80014aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014ae:	485a      	ldr	r0, [pc, #360]	; (8001618 <_printf_i+0x23c>)
 80014b0:	230a      	movs	r3, #10
 80014b2:	e012      	b.n	80014da <_printf_i+0xfe>
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	6820      	ldr	r0, [r4, #0]
 80014b8:	1d19      	adds	r1, r3, #4
 80014ba:	6029      	str	r1, [r5, #0]
 80014bc:	0605      	lsls	r5, r0, #24
 80014be:	d501      	bpl.n	80014c4 <_printf_i+0xe8>
 80014c0:	681e      	ldr	r6, [r3, #0]
 80014c2:	e002      	b.n	80014ca <_printf_i+0xee>
 80014c4:	0641      	lsls	r1, r0, #25
 80014c6:	d5fb      	bpl.n	80014c0 <_printf_i+0xe4>
 80014c8:	881e      	ldrh	r6, [r3, #0]
 80014ca:	4853      	ldr	r0, [pc, #332]	; (8001618 <_printf_i+0x23c>)
 80014cc:	2f6f      	cmp	r7, #111	; 0x6f
 80014ce:	bf0c      	ite	eq
 80014d0:	2308      	moveq	r3, #8
 80014d2:	230a      	movne	r3, #10
 80014d4:	2100      	movs	r1, #0
 80014d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80014da:	6865      	ldr	r5, [r4, #4]
 80014dc:	60a5      	str	r5, [r4, #8]
 80014de:	2d00      	cmp	r5, #0
 80014e0:	bfa2      	ittt	ge
 80014e2:	6821      	ldrge	r1, [r4, #0]
 80014e4:	f021 0104 	bicge.w	r1, r1, #4
 80014e8:	6021      	strge	r1, [r4, #0]
 80014ea:	b90e      	cbnz	r6, 80014f0 <_printf_i+0x114>
 80014ec:	2d00      	cmp	r5, #0
 80014ee:	d04b      	beq.n	8001588 <_printf_i+0x1ac>
 80014f0:	4615      	mov	r5, r2
 80014f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80014f6:	fb03 6711 	mls	r7, r3, r1, r6
 80014fa:	5dc7      	ldrb	r7, [r0, r7]
 80014fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001500:	4637      	mov	r7, r6
 8001502:	42bb      	cmp	r3, r7
 8001504:	460e      	mov	r6, r1
 8001506:	d9f4      	bls.n	80014f2 <_printf_i+0x116>
 8001508:	2b08      	cmp	r3, #8
 800150a:	d10b      	bne.n	8001524 <_printf_i+0x148>
 800150c:	6823      	ldr	r3, [r4, #0]
 800150e:	07de      	lsls	r6, r3, #31
 8001510:	d508      	bpl.n	8001524 <_printf_i+0x148>
 8001512:	6923      	ldr	r3, [r4, #16]
 8001514:	6861      	ldr	r1, [r4, #4]
 8001516:	4299      	cmp	r1, r3
 8001518:	bfde      	ittt	le
 800151a:	2330      	movle	r3, #48	; 0x30
 800151c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001520:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001524:	1b52      	subs	r2, r2, r5
 8001526:	6122      	str	r2, [r4, #16]
 8001528:	f8cd a000 	str.w	sl, [sp]
 800152c:	464b      	mov	r3, r9
 800152e:	aa03      	add	r2, sp, #12
 8001530:	4621      	mov	r1, r4
 8001532:	4640      	mov	r0, r8
 8001534:	f7ff fee4 	bl	8001300 <_printf_common>
 8001538:	3001      	adds	r0, #1
 800153a:	d14a      	bne.n	80015d2 <_printf_i+0x1f6>
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	b004      	add	sp, #16
 8001542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	f043 0320 	orr.w	r3, r3, #32
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	4833      	ldr	r0, [pc, #204]	; (800161c <_printf_i+0x240>)
 8001550:	2778      	movs	r7, #120	; 0x78
 8001552:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	6829      	ldr	r1, [r5, #0]
 800155a:	061f      	lsls	r7, r3, #24
 800155c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001560:	d402      	bmi.n	8001568 <_printf_i+0x18c>
 8001562:	065f      	lsls	r7, r3, #25
 8001564:	bf48      	it	mi
 8001566:	b2b6      	uxthmi	r6, r6
 8001568:	07df      	lsls	r7, r3, #31
 800156a:	bf48      	it	mi
 800156c:	f043 0320 	orrmi.w	r3, r3, #32
 8001570:	6029      	str	r1, [r5, #0]
 8001572:	bf48      	it	mi
 8001574:	6023      	strmi	r3, [r4, #0]
 8001576:	b91e      	cbnz	r6, 8001580 <_printf_i+0x1a4>
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	f023 0320 	bic.w	r3, r3, #32
 800157e:	6023      	str	r3, [r4, #0]
 8001580:	2310      	movs	r3, #16
 8001582:	e7a7      	b.n	80014d4 <_printf_i+0xf8>
 8001584:	4824      	ldr	r0, [pc, #144]	; (8001618 <_printf_i+0x23c>)
 8001586:	e7e4      	b.n	8001552 <_printf_i+0x176>
 8001588:	4615      	mov	r5, r2
 800158a:	e7bd      	b.n	8001508 <_printf_i+0x12c>
 800158c:	682b      	ldr	r3, [r5, #0]
 800158e:	6826      	ldr	r6, [r4, #0]
 8001590:	6961      	ldr	r1, [r4, #20]
 8001592:	1d18      	adds	r0, r3, #4
 8001594:	6028      	str	r0, [r5, #0]
 8001596:	0635      	lsls	r5, r6, #24
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	d501      	bpl.n	80015a0 <_printf_i+0x1c4>
 800159c:	6019      	str	r1, [r3, #0]
 800159e:	e002      	b.n	80015a6 <_printf_i+0x1ca>
 80015a0:	0670      	lsls	r0, r6, #25
 80015a2:	d5fb      	bpl.n	800159c <_printf_i+0x1c0>
 80015a4:	8019      	strh	r1, [r3, #0]
 80015a6:	2300      	movs	r3, #0
 80015a8:	6123      	str	r3, [r4, #16]
 80015aa:	4615      	mov	r5, r2
 80015ac:	e7bc      	b.n	8001528 <_printf_i+0x14c>
 80015ae:	682b      	ldr	r3, [r5, #0]
 80015b0:	1d1a      	adds	r2, r3, #4
 80015b2:	602a      	str	r2, [r5, #0]
 80015b4:	681d      	ldr	r5, [r3, #0]
 80015b6:	6862      	ldr	r2, [r4, #4]
 80015b8:	2100      	movs	r1, #0
 80015ba:	4628      	mov	r0, r5
 80015bc:	f7fe fe18 	bl	80001f0 <memchr>
 80015c0:	b108      	cbz	r0, 80015c6 <_printf_i+0x1ea>
 80015c2:	1b40      	subs	r0, r0, r5
 80015c4:	6060      	str	r0, [r4, #4]
 80015c6:	6863      	ldr	r3, [r4, #4]
 80015c8:	6123      	str	r3, [r4, #16]
 80015ca:	2300      	movs	r3, #0
 80015cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015d0:	e7aa      	b.n	8001528 <_printf_i+0x14c>
 80015d2:	6923      	ldr	r3, [r4, #16]
 80015d4:	462a      	mov	r2, r5
 80015d6:	4649      	mov	r1, r9
 80015d8:	4640      	mov	r0, r8
 80015da:	47d0      	blx	sl
 80015dc:	3001      	adds	r0, #1
 80015de:	d0ad      	beq.n	800153c <_printf_i+0x160>
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	079b      	lsls	r3, r3, #30
 80015e4:	d413      	bmi.n	800160e <_printf_i+0x232>
 80015e6:	68e0      	ldr	r0, [r4, #12]
 80015e8:	9b03      	ldr	r3, [sp, #12]
 80015ea:	4298      	cmp	r0, r3
 80015ec:	bfb8      	it	lt
 80015ee:	4618      	movlt	r0, r3
 80015f0:	e7a6      	b.n	8001540 <_printf_i+0x164>
 80015f2:	2301      	movs	r3, #1
 80015f4:	4632      	mov	r2, r6
 80015f6:	4649      	mov	r1, r9
 80015f8:	4640      	mov	r0, r8
 80015fa:	47d0      	blx	sl
 80015fc:	3001      	adds	r0, #1
 80015fe:	d09d      	beq.n	800153c <_printf_i+0x160>
 8001600:	3501      	adds	r5, #1
 8001602:	68e3      	ldr	r3, [r4, #12]
 8001604:	9903      	ldr	r1, [sp, #12]
 8001606:	1a5b      	subs	r3, r3, r1
 8001608:	42ab      	cmp	r3, r5
 800160a:	dcf2      	bgt.n	80015f2 <_printf_i+0x216>
 800160c:	e7eb      	b.n	80015e6 <_printf_i+0x20a>
 800160e:	2500      	movs	r5, #0
 8001610:	f104 0619 	add.w	r6, r4, #25
 8001614:	e7f5      	b.n	8001602 <_printf_i+0x226>
 8001616:	bf00      	nop
 8001618:	080018fe 	.word	0x080018fe
 800161c:	0800190f 	.word	0x0800190f

08001620 <__sflush_r>:
 8001620:	898a      	ldrh	r2, [r1, #12]
 8001622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001626:	4605      	mov	r5, r0
 8001628:	0710      	lsls	r0, r2, #28
 800162a:	460c      	mov	r4, r1
 800162c:	d458      	bmi.n	80016e0 <__sflush_r+0xc0>
 800162e:	684b      	ldr	r3, [r1, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	dc05      	bgt.n	8001640 <__sflush_r+0x20>
 8001634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	dc02      	bgt.n	8001640 <__sflush_r+0x20>
 800163a:	2000      	movs	r0, #0
 800163c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001642:	2e00      	cmp	r6, #0
 8001644:	d0f9      	beq.n	800163a <__sflush_r+0x1a>
 8001646:	2300      	movs	r3, #0
 8001648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800164c:	682f      	ldr	r7, [r5, #0]
 800164e:	6a21      	ldr	r1, [r4, #32]
 8001650:	602b      	str	r3, [r5, #0]
 8001652:	d032      	beq.n	80016ba <__sflush_r+0x9a>
 8001654:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001656:	89a3      	ldrh	r3, [r4, #12]
 8001658:	075a      	lsls	r2, r3, #29
 800165a:	d505      	bpl.n	8001668 <__sflush_r+0x48>
 800165c:	6863      	ldr	r3, [r4, #4]
 800165e:	1ac0      	subs	r0, r0, r3
 8001660:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001662:	b10b      	cbz	r3, 8001668 <__sflush_r+0x48>
 8001664:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001666:	1ac0      	subs	r0, r0, r3
 8001668:	2300      	movs	r3, #0
 800166a:	4602      	mov	r2, r0
 800166c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800166e:	6a21      	ldr	r1, [r4, #32]
 8001670:	4628      	mov	r0, r5
 8001672:	47b0      	blx	r6
 8001674:	1c43      	adds	r3, r0, #1
 8001676:	89a3      	ldrh	r3, [r4, #12]
 8001678:	d106      	bne.n	8001688 <__sflush_r+0x68>
 800167a:	6829      	ldr	r1, [r5, #0]
 800167c:	291d      	cmp	r1, #29
 800167e:	d82b      	bhi.n	80016d8 <__sflush_r+0xb8>
 8001680:	4a29      	ldr	r2, [pc, #164]	; (8001728 <__sflush_r+0x108>)
 8001682:	410a      	asrs	r2, r1
 8001684:	07d6      	lsls	r6, r2, #31
 8001686:	d427      	bmi.n	80016d8 <__sflush_r+0xb8>
 8001688:	2200      	movs	r2, #0
 800168a:	6062      	str	r2, [r4, #4]
 800168c:	04d9      	lsls	r1, r3, #19
 800168e:	6922      	ldr	r2, [r4, #16]
 8001690:	6022      	str	r2, [r4, #0]
 8001692:	d504      	bpl.n	800169e <__sflush_r+0x7e>
 8001694:	1c42      	adds	r2, r0, #1
 8001696:	d101      	bne.n	800169c <__sflush_r+0x7c>
 8001698:	682b      	ldr	r3, [r5, #0]
 800169a:	b903      	cbnz	r3, 800169e <__sflush_r+0x7e>
 800169c:	6560      	str	r0, [r4, #84]	; 0x54
 800169e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016a0:	602f      	str	r7, [r5, #0]
 80016a2:	2900      	cmp	r1, #0
 80016a4:	d0c9      	beq.n	800163a <__sflush_r+0x1a>
 80016a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016aa:	4299      	cmp	r1, r3
 80016ac:	d002      	beq.n	80016b4 <__sflush_r+0x94>
 80016ae:	4628      	mov	r0, r5
 80016b0:	f7ff fbea 	bl	8000e88 <_free_r>
 80016b4:	2000      	movs	r0, #0
 80016b6:	6360      	str	r0, [r4, #52]	; 0x34
 80016b8:	e7c0      	b.n	800163c <__sflush_r+0x1c>
 80016ba:	2301      	movs	r3, #1
 80016bc:	4628      	mov	r0, r5
 80016be:	47b0      	blx	r6
 80016c0:	1c41      	adds	r1, r0, #1
 80016c2:	d1c8      	bne.n	8001656 <__sflush_r+0x36>
 80016c4:	682b      	ldr	r3, [r5, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0c5      	beq.n	8001656 <__sflush_r+0x36>
 80016ca:	2b1d      	cmp	r3, #29
 80016cc:	d001      	beq.n	80016d2 <__sflush_r+0xb2>
 80016ce:	2b16      	cmp	r3, #22
 80016d0:	d101      	bne.n	80016d6 <__sflush_r+0xb6>
 80016d2:	602f      	str	r7, [r5, #0]
 80016d4:	e7b1      	b.n	800163a <__sflush_r+0x1a>
 80016d6:	89a3      	ldrh	r3, [r4, #12]
 80016d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016dc:	81a3      	strh	r3, [r4, #12]
 80016de:	e7ad      	b.n	800163c <__sflush_r+0x1c>
 80016e0:	690f      	ldr	r7, [r1, #16]
 80016e2:	2f00      	cmp	r7, #0
 80016e4:	d0a9      	beq.n	800163a <__sflush_r+0x1a>
 80016e6:	0793      	lsls	r3, r2, #30
 80016e8:	680e      	ldr	r6, [r1, #0]
 80016ea:	bf08      	it	eq
 80016ec:	694b      	ldreq	r3, [r1, #20]
 80016ee:	600f      	str	r7, [r1, #0]
 80016f0:	bf18      	it	ne
 80016f2:	2300      	movne	r3, #0
 80016f4:	eba6 0807 	sub.w	r8, r6, r7
 80016f8:	608b      	str	r3, [r1, #8]
 80016fa:	f1b8 0f00 	cmp.w	r8, #0
 80016fe:	dd9c      	ble.n	800163a <__sflush_r+0x1a>
 8001700:	6a21      	ldr	r1, [r4, #32]
 8001702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001704:	4643      	mov	r3, r8
 8001706:	463a      	mov	r2, r7
 8001708:	4628      	mov	r0, r5
 800170a:	47b0      	blx	r6
 800170c:	2800      	cmp	r0, #0
 800170e:	dc06      	bgt.n	800171e <__sflush_r+0xfe>
 8001710:	89a3      	ldrh	r3, [r4, #12]
 8001712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001716:	81a3      	strh	r3, [r4, #12]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	e78e      	b.n	800163c <__sflush_r+0x1c>
 800171e:	4407      	add	r7, r0
 8001720:	eba8 0800 	sub.w	r8, r8, r0
 8001724:	e7e9      	b.n	80016fa <__sflush_r+0xda>
 8001726:	bf00      	nop
 8001728:	dfbffffe 	.word	0xdfbffffe

0800172c <_fflush_r>:
 800172c:	b538      	push	{r3, r4, r5, lr}
 800172e:	690b      	ldr	r3, [r1, #16]
 8001730:	4605      	mov	r5, r0
 8001732:	460c      	mov	r4, r1
 8001734:	b913      	cbnz	r3, 800173c <_fflush_r+0x10>
 8001736:	2500      	movs	r5, #0
 8001738:	4628      	mov	r0, r5
 800173a:	bd38      	pop	{r3, r4, r5, pc}
 800173c:	b118      	cbz	r0, 8001746 <_fflush_r+0x1a>
 800173e:	6a03      	ldr	r3, [r0, #32]
 8001740:	b90b      	cbnz	r3, 8001746 <_fflush_r+0x1a>
 8001742:	f7ff f9a9 	bl	8000a98 <__sinit>
 8001746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f3      	beq.n	8001736 <_fflush_r+0xa>
 800174e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001750:	07d0      	lsls	r0, r2, #31
 8001752:	d404      	bmi.n	800175e <_fflush_r+0x32>
 8001754:	0599      	lsls	r1, r3, #22
 8001756:	d402      	bmi.n	800175e <_fflush_r+0x32>
 8001758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800175a:	f7ff fb92 	bl	8000e82 <__retarget_lock_acquire_recursive>
 800175e:	4628      	mov	r0, r5
 8001760:	4621      	mov	r1, r4
 8001762:	f7ff ff5d 	bl	8001620 <__sflush_r>
 8001766:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001768:	07da      	lsls	r2, r3, #31
 800176a:	4605      	mov	r5, r0
 800176c:	d4e4      	bmi.n	8001738 <_fflush_r+0xc>
 800176e:	89a3      	ldrh	r3, [r4, #12]
 8001770:	059b      	lsls	r3, r3, #22
 8001772:	d4e1      	bmi.n	8001738 <_fflush_r+0xc>
 8001774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001776:	f7ff fb85 	bl	8000e84 <__retarget_lock_release_recursive>
 800177a:	e7dd      	b.n	8001738 <_fflush_r+0xc>

0800177c <__swhatbuf_r>:
 800177c:	b570      	push	{r4, r5, r6, lr}
 800177e:	460c      	mov	r4, r1
 8001780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001784:	2900      	cmp	r1, #0
 8001786:	b096      	sub	sp, #88	; 0x58
 8001788:	4615      	mov	r5, r2
 800178a:	461e      	mov	r6, r3
 800178c:	da0d      	bge.n	80017aa <__swhatbuf_r+0x2e>
 800178e:	89a3      	ldrh	r3, [r4, #12]
 8001790:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001794:	f04f 0100 	mov.w	r1, #0
 8001798:	bf0c      	ite	eq
 800179a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800179e:	2340      	movne	r3, #64	; 0x40
 80017a0:	2000      	movs	r0, #0
 80017a2:	6031      	str	r1, [r6, #0]
 80017a4:	602b      	str	r3, [r5, #0]
 80017a6:	b016      	add	sp, #88	; 0x58
 80017a8:	bd70      	pop	{r4, r5, r6, pc}
 80017aa:	466a      	mov	r2, sp
 80017ac:	f000 f848 	bl	8001840 <_fstat_r>
 80017b0:	2800      	cmp	r0, #0
 80017b2:	dbec      	blt.n	800178e <__swhatbuf_r+0x12>
 80017b4:	9901      	ldr	r1, [sp, #4]
 80017b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80017ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80017be:	4259      	negs	r1, r3
 80017c0:	4159      	adcs	r1, r3
 80017c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c6:	e7eb      	b.n	80017a0 <__swhatbuf_r+0x24>

080017c8 <__smakebuf_r>:
 80017c8:	898b      	ldrh	r3, [r1, #12]
 80017ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80017cc:	079d      	lsls	r5, r3, #30
 80017ce:	4606      	mov	r6, r0
 80017d0:	460c      	mov	r4, r1
 80017d2:	d507      	bpl.n	80017e4 <__smakebuf_r+0x1c>
 80017d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80017d8:	6023      	str	r3, [r4, #0]
 80017da:	6123      	str	r3, [r4, #16]
 80017dc:	2301      	movs	r3, #1
 80017de:	6163      	str	r3, [r4, #20]
 80017e0:	b002      	add	sp, #8
 80017e2:	bd70      	pop	{r4, r5, r6, pc}
 80017e4:	ab01      	add	r3, sp, #4
 80017e6:	466a      	mov	r2, sp
 80017e8:	f7ff ffc8 	bl	800177c <__swhatbuf_r>
 80017ec:	9900      	ldr	r1, [sp, #0]
 80017ee:	4605      	mov	r5, r0
 80017f0:	4630      	mov	r0, r6
 80017f2:	f7ff fbb5 	bl	8000f60 <_malloc_r>
 80017f6:	b948      	cbnz	r0, 800180c <__smakebuf_r+0x44>
 80017f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017fc:	059a      	lsls	r2, r3, #22
 80017fe:	d4ef      	bmi.n	80017e0 <__smakebuf_r+0x18>
 8001800:	f023 0303 	bic.w	r3, r3, #3
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	81a3      	strh	r3, [r4, #12]
 800180a:	e7e3      	b.n	80017d4 <__smakebuf_r+0xc>
 800180c:	89a3      	ldrh	r3, [r4, #12]
 800180e:	6020      	str	r0, [r4, #0]
 8001810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001814:	81a3      	strh	r3, [r4, #12]
 8001816:	9b00      	ldr	r3, [sp, #0]
 8001818:	6163      	str	r3, [r4, #20]
 800181a:	9b01      	ldr	r3, [sp, #4]
 800181c:	6120      	str	r0, [r4, #16]
 800181e:	b15b      	cbz	r3, 8001838 <__smakebuf_r+0x70>
 8001820:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001824:	4630      	mov	r0, r6
 8001826:	f000 f81d 	bl	8001864 <_isatty_r>
 800182a:	b128      	cbz	r0, 8001838 <__smakebuf_r+0x70>
 800182c:	89a3      	ldrh	r3, [r4, #12]
 800182e:	f023 0303 	bic.w	r3, r3, #3
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	81a3      	strh	r3, [r4, #12]
 8001838:	89a3      	ldrh	r3, [r4, #12]
 800183a:	431d      	orrs	r5, r3
 800183c:	81a5      	strh	r5, [r4, #12]
 800183e:	e7cf      	b.n	80017e0 <__smakebuf_r+0x18>

08001840 <_fstat_r>:
 8001840:	b538      	push	{r3, r4, r5, lr}
 8001842:	4d07      	ldr	r5, [pc, #28]	; (8001860 <_fstat_r+0x20>)
 8001844:	2300      	movs	r3, #0
 8001846:	4604      	mov	r4, r0
 8001848:	4608      	mov	r0, r1
 800184a:	4611      	mov	r1, r2
 800184c:	602b      	str	r3, [r5, #0]
 800184e:	f7fe fffc 	bl	800084a <_fstat>
 8001852:	1c43      	adds	r3, r0, #1
 8001854:	d102      	bne.n	800185c <_fstat_r+0x1c>
 8001856:	682b      	ldr	r3, [r5, #0]
 8001858:	b103      	cbz	r3, 800185c <_fstat_r+0x1c>
 800185a:	6023      	str	r3, [r4, #0]
 800185c:	bd38      	pop	{r3, r4, r5, pc}
 800185e:	bf00      	nop
 8001860:	20000230 	.word	0x20000230

08001864 <_isatty_r>:
 8001864:	b538      	push	{r3, r4, r5, lr}
 8001866:	4d06      	ldr	r5, [pc, #24]	; (8001880 <_isatty_r+0x1c>)
 8001868:	2300      	movs	r3, #0
 800186a:	4604      	mov	r4, r0
 800186c:	4608      	mov	r0, r1
 800186e:	602b      	str	r3, [r5, #0]
 8001870:	f7fe fffb 	bl	800086a <_isatty>
 8001874:	1c43      	adds	r3, r0, #1
 8001876:	d102      	bne.n	800187e <_isatty_r+0x1a>
 8001878:	682b      	ldr	r3, [r5, #0]
 800187a:	b103      	cbz	r3, 800187e <_isatty_r+0x1a>
 800187c:	6023      	str	r3, [r4, #0]
 800187e:	bd38      	pop	{r3, r4, r5, pc}
 8001880:	20000230 	.word	0x20000230

08001884 <_sbrk_r>:
 8001884:	b538      	push	{r3, r4, r5, lr}
 8001886:	4d06      	ldr	r5, [pc, #24]	; (80018a0 <_sbrk_r+0x1c>)
 8001888:	2300      	movs	r3, #0
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	602b      	str	r3, [r5, #0]
 8001890:	f7ff f804 	bl	800089c <_sbrk>
 8001894:	1c43      	adds	r3, r0, #1
 8001896:	d102      	bne.n	800189e <_sbrk_r+0x1a>
 8001898:	682b      	ldr	r3, [r5, #0]
 800189a:	b103      	cbz	r3, 800189e <_sbrk_r+0x1a>
 800189c:	6023      	str	r3, [r4, #0]
 800189e:	bd38      	pop	{r3, r4, r5, pc}
 80018a0:	20000230 	.word	0x20000230

080018a4 <_init>:
 80018a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a6:	bf00      	nop
 80018a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018aa:	bc08      	pop	{r3}
 80018ac:	469e      	mov	lr, r3
 80018ae:	4770      	bx	lr

080018b0 <_fini>:
 80018b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b2:	bf00      	nop
 80018b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018b6:	bc08      	pop	{r3}
 80018b8:	469e      	mov	lr, r3
 80018ba:	4770      	bx	lr
