
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000204  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ac  080003b4  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ac  080003ac  000103b4  2**0
                  CONTENTS
  4 .ARM          00000000  080003ac  080003ac  000103b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ac  080003b4  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ac  080003ac  000103ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103b4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103b4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000103e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000ae2  00000000  00000000  00010427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000029d  00000000  00000000  00010f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000080  00000000  00000000  000111a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000053  00000000  00000000  00011228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018e31  00000000  00000000  0001127b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000dd5  00000000  00000000  0002a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008bddd  00000000  00000000  0002ae81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000f8  00000000  00000000  000b6c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000b6d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000394 	.word	0x08000394

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000394 	.word	0x08000394

080001e8 <main>:
#define PIN(x)	OUT_##x##_Pin


/*Main ------------------------------------------*/
int main(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	/*habilitar el reloj*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;  //1<<3
 80001ec:	4b36      	ldr	r3, [pc, #216]	; (80002c8 <main+0xe0>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a35      	ldr	r2, [pc, #212]	; (80002c8 <main+0xe0>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80001f8:	4b33      	ldr	r3, [pc, #204]	; (80002c8 <main+0xe0>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fc:	4a32      	ldr	r2, [pc, #200]	; (80002c8 <main+0xe0>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6313      	str	r3, [r2, #48]	; 0x30
	/**
	 * PD12 -> salida
	 *
	 */
	GPIOD->MODER &=~(GPIO_MODER_MODE12); 	//Clear
 8000204:	4b31      	ldr	r3, [pc, #196]	; (80002cc <main+0xe4>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a30      	ldr	r2, [pc, #192]	; (80002cc <main+0xe4>)
 800020a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800020e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE12_0;	//Modo salida de proposito general
 8000210:	4b2e      	ldr	r3, [pc, #184]	; (80002cc <main+0xe4>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a2d      	ldr	r2, [pc, #180]	; (80002cc <main+0xe4>)
 8000216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800021a:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER &=~ GPIO_OTYPER_OT12;		//PUSH PULL
 800021c:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <main+0xe4>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	4a2a      	ldr	r2, [pc, #168]	; (80002cc <main+0xe4>)
 8000222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000226:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR &=~ GPIO_OSPEEDER_OSPEEDR12;
 8000228:	4b28      	ldr	r3, [pc, #160]	; (80002cc <main+0xe4>)
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	4a27      	ldr	r2, [pc, #156]	; (80002cc <main+0xe4>)
 800022e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000232:	6093      	str	r3, [r2, #8]
	/**
	 * PA0 -> entrada
	 */
	GPIOA->MODER &=~(GPIO_MODER_MODE0); //RESET STATE (INPUT FLOATING)
 8000234:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <main+0xe8>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a25      	ldr	r2, [pc, #148]	; (80002d0 <main+0xe8>)
 800023a:	f023 0303 	bic.w	r3, r3, #3
 800023e:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &=~ (GPIO_PUPDR_PUPD0); //no pull up /down
 8000240:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <main+0xe8>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	4a22      	ldr	r2, [pc, #136]	; (80002d0 <main+0xe8>)
 8000246:	f023 0303 	bic.w	r3, r3, #3
 800024a:	60d3      	str	r3, [r2, #12]

	//ponen en uno solo el bit12
	GPIOD->ODR |= GPIO_ODR_OD12; 		//ODR | 1<<12
 800024c:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <main+0xe4>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a1e      	ldr	r2, [pc, #120]	; (80002cc <main+0xe4>)
 8000252:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000256:	6153      	str	r3, [r2, #20]
	GPIOD->BSRR|= GPIO_BSRR_BS12; 		//BSRR | 1<<12
 8000258:	4b1c      	ldr	r3, [pc, #112]	; (80002cc <main+0xe4>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a1b      	ldr	r2, [pc, #108]	; (80002cc <main+0xe4>)
 800025e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000262:	6193      	str	r3, [r2, #24]

	//poner en o solo el bit13
	GPIOD->ODR &=~ GPIO_ODR_OD12; 		//ODR &(~(1<<12)
 8000264:	4b19      	ldr	r3, [pc, #100]	; (80002cc <main+0xe4>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	4a18      	ldr	r2, [pc, #96]	; (80002cc <main+0xe4>)
 800026a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800026e:	6153      	str	r3, [r2, #20]
	GPIOD->BSRR |= GPIO_BSRR_BR12;		//BSRR | 1<<(16 + 12)
 8000270:	4b16      	ldr	r3, [pc, #88]	; (80002cc <main+0xe4>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a15      	ldr	r2, [pc, #84]	; (80002cc <main+0xe4>)
 8000276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800027a:	6193      	str	r3, [r2, #24]

	//BIT12
	SET_BIT(GPIOD->ODR, 1<<12);
 800027c:	4b13      	ldr	r3, [pc, #76]	; (80002cc <main+0xe4>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a12      	ldr	r2, [pc, #72]	; (80002cc <main+0xe4>)
 8000282:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000286:	6153      	str	r3, [r2, #20]


	GPIOX_MODER(LED, 0b01);
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <main+0xe4>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0f      	ldr	r2, [pc, #60]	; (80002cc <main+0xe4>)
 800028e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <main+0xe4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a0c      	ldr	r2, [pc, #48]	; (80002cc <main+0xe4>)
 800029a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800029e:	6013      	str	r3, [r2, #0]
	for(;;){
		if(INPUT_READ(SW) == 1){
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <main+0xe8>)
 80002a2:	691b      	ldr	r3, [r3, #16]
 80002a4:	f003 0301 	and.w	r3, r3, #1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d006      	beq.n	80002ba <main+0xd2>
			OUTPUT_SET(LED);
 80002ac:	4b07      	ldr	r3, [pc, #28]	; (80002cc <main+0xe4>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <main+0xe4>)
 80002b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	e7f2      	b.n	80002a0 <main+0xb8>
		}else{
			OUTPUT_RESET(LED);
 80002ba:	4b04      	ldr	r3, [pc, #16]	; (80002cc <main+0xe4>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	4a03      	ldr	r2, [pc, #12]	; (80002cc <main+0xe4>)
 80002c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002c4:	6153      	str	r3, [r2, #20]
		if(INPUT_READ(SW) == 1){
 80002c6:	e7eb      	b.n	80002a0 <main+0xb8>
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40020c00 	.word	0x40020c00
 80002d0:	40020000 	.word	0x40020000

080002d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <SystemInit+0x20>)
 80002da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002de:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <SystemInit+0x20>)
 80002e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	; (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002fc:	f7ff ffea 	bl	80002d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	; (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	; (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	; (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	; (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 f811 	bl	800034c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ff5d 	bl	80001e8 <main>

0800032e <LoopForever>:

LoopForever:
  b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800033c:	080003b4 	.word	0x080003b4
  ldr r2, =_sbss
 8000340:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000344:	2000001c 	.word	0x2000001c

08000348 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <__libc_init_array>:
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	4d0d      	ldr	r5, [pc, #52]	; (8000384 <__libc_init_array+0x38>)
 8000350:	4c0d      	ldr	r4, [pc, #52]	; (8000388 <__libc_init_array+0x3c>)
 8000352:	1b64      	subs	r4, r4, r5
 8000354:	10a4      	asrs	r4, r4, #2
 8000356:	2600      	movs	r6, #0
 8000358:	42a6      	cmp	r6, r4
 800035a:	d109      	bne.n	8000370 <__libc_init_array+0x24>
 800035c:	4d0b      	ldr	r5, [pc, #44]	; (800038c <__libc_init_array+0x40>)
 800035e:	4c0c      	ldr	r4, [pc, #48]	; (8000390 <__libc_init_array+0x44>)
 8000360:	f000 f818 	bl	8000394 <_init>
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	10a4      	asrs	r4, r4, #2
 8000368:	2600      	movs	r6, #0
 800036a:	42a6      	cmp	r6, r4
 800036c:	d105      	bne.n	800037a <__libc_init_array+0x2e>
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f855 3b04 	ldr.w	r3, [r5], #4
 8000374:	4798      	blx	r3
 8000376:	3601      	adds	r6, #1
 8000378:	e7ee      	b.n	8000358 <__libc_init_array+0xc>
 800037a:	f855 3b04 	ldr.w	r3, [r5], #4
 800037e:	4798      	blx	r3
 8000380:	3601      	adds	r6, #1
 8000382:	e7f2      	b.n	800036a <__libc_init_array+0x1e>
 8000384:	080003ac 	.word	0x080003ac
 8000388:	080003ac 	.word	0x080003ac
 800038c:	080003ac 	.word	0x080003ac
 8000390:	080003b0 	.word	0x080003b0

08000394 <_init>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr

080003a0 <_fini>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr
