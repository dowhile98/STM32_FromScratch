/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/**
 * LED1 -> PD12
 * LED2 -> PD15
 *
 * SW -> PA0
 *
 * NUCLEO 64
 * LED  -> PA5
 * SW   -> PC13
 * COM -> USART2
 */
/**
 * SET  ->Habilitar un bit o un grupo de bits
 * |
 * PORT = 0x12 -> 0b0001 0010 | 1<<7 -> 0b1001 0010
 * PORT |= 1<<7
 * PORT = PORT | 1<<7
 *
 * RESET->borrar el estado del bit o de un grupo de bits
 * & ~
 * PORT = 0x82 -> 0b1000 0010
 * 0x82 & ( ~(0x02))
 *            ~(0b0000 0010) ->1111 1101
 *
 * 0b1000 0010 & 0b1111 1101 ->1000 0000 ->0x80
 * PORT = PORT &~(1<<1)
 * PORT &=~(1<<1)
 */
/*Includes --------------------------------------*/
#include <stdint.h>
#include "stm32f4xx.h"
#include <stdio.h>



/*defines ---------------------------------------*/
/**
 * ##
 */
#define LED			D, 12
#define SW			A, 0

#define GPIOX_MODER_(a, b, c)	{GPIO ## a ->MODER &=~ (0x3<<(2 * b)) ; \
								GPIO ## a ->MODER |= c <<( 2 * b); }
#define GPIOX_MODER(a, b)		GPIOX_MODER_(a, b)

#define INPUT_READ_(a, b)		(GPIO ## a -> IDR & 1<<b) ? 1 : 0
#define INPUT_READ(a)			INPUT_READ_(a)

#define OUTPUT_SET_(a, b)		GPIO ## a -> ODR |= 1<<b
#define OUTPUT_SET(a)			OUTPUT_SET_(a)
/**
 * OUT_1 -> PB12
 * OUT_1_GPIO_Port
 * OUT_1_Pin
 */
#define Q1   1

#define PORT(x)	OUT_##x##_GPIO_Port //PORT(1) -> OUT_1_GPIO_Port
#define PIN(x)	OUT_##x##_Pin


/*Main ------------------------------------------*/
int main(void)
{
	/*habilitar el reloj*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;  //1<<3
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
	/**
	 * PD12 -> salida
	 *
	 */
	GPIOD->MODER &=~(GPIO_MODER_MODE12); 	//Clear
	GPIOD->MODER |= GPIO_MODER_MODE12_0;	//Modo salida de proposito general
	GPIOD->OTYPER &=~ GPIO_OTYPER_OT12;		//PUSH PULL
	GPIOD->OSPEEDR &=~ GPIO_OSPEEDER_OSPEEDR12;
	/**
	 * PA0 -> entrada
	 */
	GPIOA->MODER &=~(GPIO_MODER_MODE0); //RESET STATE (INPUT FLOATING)
	GPIOA->PUPDR &=~ (GPIO_PUPDR_PUPD0); //no pull up /down

	//ponen en uno solo el bit12
	GPIOD->ODR |= GPIO_ODR_OD12; 		//ODR | 1<<12
	GPIOD->BSRR|= GPIO_BSRR_BS12; 		//BSRR | 1<<12

	//poner en o solo el bit13
	GPIOD->ODR &=~ GPIO_ODR_OD12; 		//ODR &(~(1<<12)
	GPIOD->BSRR |= GPIO_BSRR_BR12;		//BSRR | 1<<(16 + 12)

	//BIT12
	SET_BIT(GPIOD->ODR, 1<<12);


	GPIOX_MODER(LED, 0b01);
	for(;;){
		if(INPUT_READ(SW) == 1){
			OUTPUT_SET(LED);
		}
	}
}


/*Function definition -----------------------------------------*/
int __io_putchar(int ch){
	ITM_SendChar(ch);
	return ch;
}
