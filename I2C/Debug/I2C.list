
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08002d00  08002d00  00012d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002db8  08002db8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002db8  08002db8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000008c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003330  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b27  00000000  00000000  000233c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000268  00000000  00000000  00023ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001f0  00000000  00000000  00024158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a4b3  00000000  00000000  00024348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003333  00000000  00000000  0003e7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f47e  00000000  00000000  00041b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d0fac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001110  00000000  00000000  000d0ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002ce8 	.word	0x08002ce8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002ce8 	.word	0x08002ce8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <mpu6050_set_standby_mode>:
#define MPU6050_ACCE_SENS_2			((float) 16384)
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)
/*Private function --------------------------------------------------*/
static MPU6050_Result_t mpu6050_set_standby_mode(MPU6050_t *dev, uint8_t sourse, uint8_t enable){
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b087      	sub	sp, #28
 8000a70:	af02      	add	r7, sp, #8
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	70bb      	strb	r3, [r7, #2]
	uint8_t temp;
	if(dev->read(dev->mpuI2C, dev->dev_addr, MPU6050_PWR_MGMT_2, &temp, 1, 100) != true){
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681c      	ldr	r4, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68d8      	ldr	r0, [r3, #12]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	7c19      	ldrb	r1, [r3, #16]
 8000a88:	f107 030f 	add.w	r3, r7, #15
 8000a8c:	2264      	movs	r2, #100	; 0x64
 8000a8e:	9201      	str	r2, [sp, #4]
 8000a90:	2201      	movs	r2, #1
 8000a92:	9200      	str	r2, [sp, #0]
 8000a94:	226c      	movs	r2, #108	; 0x6c
 8000a96:	47a0      	blx	r4
 8000a98:	4603      	mov	r3, r0
 8000a9a:	f083 0301 	eor.w	r3, r3, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <mpu6050_set_standby_mode+0x3c>
		return MPU6050_Result_Error;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e02e      	b.n	8000b06 <mpu6050_set_standby_mode+0x9a>
	}
	temp &=~ (1<<sourse);
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	2201      	movs	r2, #1
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	b25a      	sxtb	r2, r3
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	4013      	ands	r3, r2
 8000abc:	b25b      	sxtb	r3, r3
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	73fb      	strb	r3, [r7, #15]
	temp |= enable << sourse;
 8000ac2:	78ba      	ldrb	r2, [r7, #2]
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	b25a      	sxtb	r2, r3
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
 8000ace:	b25b      	sxtb	r3, r3
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	73fb      	strb	r3, [r7, #15]
	if(dev->write(dev->mpuI2C, dev->dev_addr, MPU6050_PWR_MGMT_2, &temp, 1, 100 ) != true){
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685c      	ldr	r4, [r3, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68d8      	ldr	r0, [r3, #12]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	7c19      	ldrb	r1, [r3, #16]
 8000ae4:	f107 030f 	add.w	r3, r7, #15
 8000ae8:	2264      	movs	r2, #100	; 0x64
 8000aea:	9201      	str	r2, [sp, #4]
 8000aec:	2201      	movs	r2, #1
 8000aee:	9200      	str	r2, [sp, #0]
 8000af0:	226c      	movs	r2, #108	; 0x6c
 8000af2:	47a0      	blx	r4
 8000af4:	4603      	mov	r3, r0
 8000af6:	f083 0301 	eor.w	r3, r3, #1
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <mpu6050_set_standby_mode+0x98>
		return MPU6050_Result_Error;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e000      	b.n	8000b06 <mpu6050_set_standby_mode+0x9a>
	}
	return MPU6050_Result_Ok;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd90      	pop	{r4, r7, pc}

08000b0e <MPU6050_Init>:
 * @param  GyroscopeSensitivity: Set gyroscope sensitivity. This parameter can be a value of @ref TM_MPU6050_Gyroscope_t enumeration
 * @retval Initialization status:
 *            - TM_MPU6050_Result_t: Everything OK
 *            - Other member: in other cases
 */
MPU6050_Result_t MPU6050_Init(MPU6050_t* DataStruct, MPU6050_Device_t DeviceNumber){
 8000b0e:	b590      	push	{r4, r7, lr}
 8000b10:	b087      	sub	sp, #28
 8000b12:	af02      	add	r7, sp, #8
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	460b      	mov	r3, r1
 8000b18:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	uint8_t timout = 100;
 8000b1a:	2364      	movs	r3, #100	; 0x64
 8000b1c:	73fb      	strb	r3, [r7, #15]
	DataStruct->dev_addr = DeviceNumber;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	78fa      	ldrb	r2, [r7, #3]
 8000b22:	741a      	strb	r2, [r3, #16]
	if(DataStruct->isConnected(DataStruct->mpuI2C, DataStruct->dev_addr, 1000) != true){
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	68d0      	ldr	r0, [r2, #12]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	7c11      	ldrb	r1, [r2, #16]
 8000b30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b34:	4798      	blx	r3
 8000b36:	4603      	mov	r3, r0
 8000b38:	f083 0301 	eor.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MPU6050_Init+0x38>
		return MPU6050_Result_DeviceNotConnected;
 8000b42:	2302      	movs	r3, #2
 8000b44:	e154      	b.n	8000df0 <MPU6050_Init+0x2e2>
	}
	/*Check who am i*/
	if(DataStruct->read(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_WHO_AM_I, &temp, 1, 1000)){
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681c      	ldr	r4, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68d8      	ldr	r0, [r3, #12]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7c19      	ldrb	r1, [r3, #16]
 8000b52:	f107 030e 	add.w	r3, r7, #14
 8000b56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b5a:	9201      	str	r2, [sp, #4]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	9200      	str	r2, [sp, #0]
 8000b60:	2275      	movs	r2, #117	; 0x75
 8000b62:	47a0      	blx	r4
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d004      	beq.n	8000b74 <MPU6050_Init+0x66>
		if(temp != MPU6050_I_AM){
 8000b6a:	7bbb      	ldrb	r3, [r7, #14]
 8000b6c:	2b68      	cmp	r3, #104	; 0x68
 8000b6e:	d001      	beq.n	8000b74 <MPU6050_Init+0x66>
			return MPU6050_Result_DeviceInvalid;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e13d      	b.n	8000df0 <MPU6050_Init+0x2e2>
		}
	}
	temp = 1<<7;
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	73bb      	strb	r3, [r7, #14]
	DataStruct->write(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_PWR_MGMT_1,&temp, 1, 1000 );
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685c      	ldr	r4, [r3, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	68d8      	ldr	r0, [r3, #12]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7c19      	ldrb	r1, [r3, #16]
 8000b84:	f107 030e 	add.w	r3, r7, #14
 8000b88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b8c:	9201      	str	r2, [sp, #4]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	9200      	str	r2, [sp, #0]
 8000b92:	226b      	movs	r2, #107	; 0x6b
 8000b94:	47a0      	blx	r4
	while(timout != 0 ){
 8000b96:	e01f      	b.n	8000bd8 <MPU6050_Init+0xca>
		if(DataStruct->read(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_PWR_MGMT_1, &temp, 1, 10) != true){
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681c      	ldr	r4, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68d8      	ldr	r0, [r3, #12]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7c19      	ldrb	r1, [r3, #16]
 8000ba4:	f107 030e 	add.w	r3, r7, #14
 8000ba8:	220a      	movs	r2, #10
 8000baa:	9201      	str	r2, [sp, #4]
 8000bac:	2201      	movs	r2, #1
 8000bae:	9200      	str	r2, [sp, #0]
 8000bb0:	226b      	movs	r2, #107	; 0x6b
 8000bb2:	47a0      	blx	r4
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f083 0301 	eor.w	r3, r3, #1
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MPU6050_Init+0xb6>
			return MPU6050_Result_Error;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e115      	b.n	8000df0 <MPU6050_Init+0x2e2>
		}
		if((temp &(1<<7)) == 0){
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da09      	bge.n	8000be0 <MPU6050_Init+0xd2>
			break;
		}
		delay_ms(10);
 8000bcc:	200a      	movs	r0, #10
 8000bce:	f000 fb6d 	bl	80012ac <delay_ms>
		timout--;
 8000bd2:	7bfb      	ldrb	r3, [r7, #15]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	73fb      	strb	r3, [r7, #15]
	while(timout != 0 ){
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d1dc      	bne.n	8000b98 <MPU6050_Init+0x8a>
 8000bde:	e000      	b.n	8000be2 <MPU6050_Init+0xd4>
			break;
 8000be0:	bf00      	nop
	}
	/*delay 100ms*/
	delay_ms(100);
 8000be2:	2064      	movs	r0, #100	; 0x64
 8000be4:	f000 fb62 	bl	80012ac <delay_ms>
	/*Disable sleep*/
	if(DataStruct->read(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_PWR_MGMT_1, &temp, 1, 100) != true){
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681c      	ldr	r4, [r3, #0]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	68d8      	ldr	r0, [r3, #12]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7c19      	ldrb	r1, [r3, #16]
 8000bf4:	f107 030e 	add.w	r3, r7, #14
 8000bf8:	2264      	movs	r2, #100	; 0x64
 8000bfa:	9201      	str	r2, [sp, #4]
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	9200      	str	r2, [sp, #0]
 8000c00:	226b      	movs	r2, #107	; 0x6b
 8000c02:	47a0      	blx	r4
 8000c04:	4603      	mov	r3, r0
 8000c06:	f083 0301 	eor.w	r3, r3, #1
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MPU6050_Init+0x106>
		return MPU6050_Result_Error;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e0ed      	b.n	8000df0 <MPU6050_Init+0x2e2>
	}
	temp &= (1<<6);
 8000c14:	7bbb      	ldrb	r3, [r7, #14]
 8000c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	73bb      	strb	r3, [r7, #14]
	DataStruct->write(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_PWR_MGMT_1, &temp, 1, 100);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685c      	ldr	r4, [r3, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68d8      	ldr	r0, [r3, #12]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	7c19      	ldrb	r1, [r3, #16]
 8000c2a:	f107 030e 	add.w	r3, r7, #14
 8000c2e:	2264      	movs	r2, #100	; 0x64
 8000c30:	9201      	str	r2, [sp, #4]
 8000c32:	2201      	movs	r2, #1
 8000c34:	9200      	str	r2, [sp, #0]
 8000c36:	226b      	movs	r2, #107	; 0x6b
 8000c38:	47a0      	blx	r4
	/*Set clock source*/
	if(DataStruct->read(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_PWR_MGMT_1, &temp, 1,100) != true){
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681c      	ldr	r4, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	68d8      	ldr	r0, [r3, #12]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7c19      	ldrb	r1, [r3, #16]
 8000c46:	f107 030e 	add.w	r3, r7, #14
 8000c4a:	2264      	movs	r2, #100	; 0x64
 8000c4c:	9201      	str	r2, [sp, #4]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	9200      	str	r2, [sp, #0]
 8000c52:	226b      	movs	r2, #107	; 0x6b
 8000c54:	47a0      	blx	r4
 8000c56:	4603      	mov	r3, r0
 8000c58:	f083 0301 	eor.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MPU6050_Init+0x158>
		return MPU6050_Result_Error;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e0c4      	b.n	8000df0 <MPU6050_Init+0x2e2>
	}
	temp &=~ (0x7<<0);
 8000c66:	7bbb      	ldrb	r3, [r7, #14]
 8000c68:	f023 0307 	bic.w	r3, r3, #7
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	73bb      	strb	r3, [r7, #14]
	temp |= DataStruct->confg.clk;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	73bb      	strb	r3, [r7, #14]
	if(DataStruct->write(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_PWR_MGMT_1, &temp, 1, 100) != true){
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685c      	ldr	r4, [r3, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68d8      	ldr	r0, [r3, #12]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7c19      	ldrb	r1, [r3, #16]
 8000c8a:	f107 030e 	add.w	r3, r7, #14
 8000c8e:	2264      	movs	r2, #100	; 0x64
 8000c90:	9201      	str	r2, [sp, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	9200      	str	r2, [sp, #0]
 8000c96:	226b      	movs	r2, #107	; 0x6b
 8000c98:	47a0      	blx	r4
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f083 0301 	eor.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MPU6050_Init+0x19c>
		return MPU6050_Result_Error;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e0a2      	b.n	8000df0 <MPU6050_Init+0x2e2>
	}

	/*Sample read*/
	temp = DataStruct->confg.DataRate;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8000cb0:	73bb      	strb	r3, [r7, #14]
	MPU6050_SetDataRate(DataStruct, temp);
 8000cb2:	7bbb      	ldrb	r3, [r7, #14]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f000 f966 	bl	8000f88 <MPU6050_SetDataRate>
	/*Set low pass filter*/
	if(DataStruct->read(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_CONFIG, &temp, 1, 100) != true){
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681c      	ldr	r4, [r3, #0]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	68d8      	ldr	r0, [r3, #12]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7c19      	ldrb	r1, [r3, #16]
 8000cc8:	f107 030e 	add.w	r3, r7, #14
 8000ccc:	2264      	movs	r2, #100	; 0x64
 8000cce:	9201      	str	r2, [sp, #4]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	9200      	str	r2, [sp, #0]
 8000cd4:	221a      	movs	r2, #26
 8000cd6:	47a0      	blx	r4
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f083 0301 	eor.w	r3, r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MPU6050_Init+0x1da>
		return MPU6050_Result_Error;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	e083      	b.n	8000df0 <MPU6050_Init+0x2e2>
	}
	temp &=~ (0x7U);
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	f023 0307 	bic.w	r3, r3, #7
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	73bb      	strb	r3, [r7, #14]
	temp |= DataStruct->confg.filter;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8000cf8:	7bbb      	ldrb	r3, [r7, #14]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	73bb      	strb	r3, [r7, #14]
	if(DataStruct->write(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_CONFIG, &temp, 1, 100) != true){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685c      	ldr	r4, [r3, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68d8      	ldr	r0, [r3, #12]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7c19      	ldrb	r1, [r3, #16]
 8000d0c:	f107 030e 	add.w	r3, r7, #14
 8000d10:	2264      	movs	r2, #100	; 0x64
 8000d12:	9201      	str	r2, [sp, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	9200      	str	r2, [sp, #0]
 8000d18:	221a      	movs	r2, #26
 8000d1a:	47a0      	blx	r4
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	f083 0301 	eor.w	r3, r3, #1
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MPU6050_Init+0x21e>
		return MPU6050_Result_Error;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e061      	b.n	8000df0 <MPU6050_Init+0x2e2>
	}
	/*Enable temperatura sensor*/
	if(DataStruct->read(DataStruct->mpuI2C,DataStruct->dev_addr, MPU6050_PWR_MGMT_1, &temp, 1, 100 ) != true){
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681c      	ldr	r4, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	68d8      	ldr	r0, [r3, #12]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7c19      	ldrb	r1, [r3, #16]
 8000d38:	f107 030e 	add.w	r3, r7, #14
 8000d3c:	2264      	movs	r2, #100	; 0x64
 8000d3e:	9201      	str	r2, [sp, #4]
 8000d40:	2201      	movs	r2, #1
 8000d42:	9200      	str	r2, [sp, #0]
 8000d44:	226b      	movs	r2, #107	; 0x6b
 8000d46:	47a0      	blx	r4
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f083 0301 	eor.w	r3, r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MPU6050_Init+0x24a>
		return MPU6050_Result_Error;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e04b      	b.n	8000df0 <MPU6050_Init+0x2e2>
	}
	temp &=~ (1<<3);
 8000d58:	7bbb      	ldrb	r3, [r7, #14]
 8000d5a:	f023 0308 	bic.w	r3, r3, #8
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	73bb      	strb	r3, [r7, #14]
	if(DataStruct->write(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_PWR_MGMT_1, &temp, 1, 100) != true ){
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685c      	ldr	r4, [r3, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68d8      	ldr	r0, [r3, #12]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7c19      	ldrb	r1, [r3, #16]
 8000d6e:	f107 030e 	add.w	r3, r7, #14
 8000d72:	2264      	movs	r2, #100	; 0x64
 8000d74:	9201      	str	r2, [sp, #4]
 8000d76:	2201      	movs	r2, #1
 8000d78:	9200      	str	r2, [sp, #0]
 8000d7a:	226b      	movs	r2, #107	; 0x6b
 8000d7c:	47a0      	blx	r4
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f083 0301 	eor.w	r3, r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MPU6050_Init+0x280>
		return MPU6050_Result_Error;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e030      	b.n	8000df0 <MPU6050_Init+0x2e2>
	}
	/*enable accel	 */
	mpu6050_set_standby_mode(DataStruct, 5, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2105      	movs	r1, #5
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f7ff fe6a 	bl	8000a6c <mpu6050_set_standby_mode>
	mpu6050_set_standby_mode(DataStruct, 4, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2104      	movs	r1, #4
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f7ff fe65 	bl	8000a6c <mpu6050_set_standby_mode>
	mpu6050_set_standby_mode(DataStruct, 3, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2103      	movs	r1, #3
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fe60 	bl	8000a6c <mpu6050_set_standby_mode>
	/*enable gyro*/
	mpu6050_set_standby_mode(DataStruct, 2, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2102      	movs	r1, #2
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff fe5b 	bl	8000a6c <mpu6050_set_standby_mode>
	mpu6050_set_standby_mode(DataStruct, 1, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2101      	movs	r1, #1
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fe56 	bl	8000a6c <mpu6050_set_standby_mode>
	mpu6050_set_standby_mode(DataStruct, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff fe51 	bl	8000a6c <mpu6050_set_standby_mode>
	/*Acelerometro*/
	temp = DataStruct->confg.AccelerometerSensitivity;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8000dd0:	73bb      	strb	r3, [r7, #14]
	MPU6050_SetAccelerometer(DataStruct, temp);
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 f874 	bl	8000ec4 <MPU6050_SetAccelerometer>
	/*Giroscopio*/
	temp = DataStruct->confg.GyroscopeSensitivity;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8000de2:	73bb      	strb	r3, [r7, #14]
	MPU6050_SetGyroscope(DataStruct, temp);
 8000de4:	7bbb      	ldrb	r3, [r7, #14]
 8000de6:	4619      	mov	r1, r3
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f805 	bl	8000df8 <MPU6050_SetGyroscope>

	/*return ok*/
	return MPU6050_Result_Ok;
 8000dee:	2300      	movs	r3, #0
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd90      	pop	{r4, r7, pc}

08000df8 <MPU6050_SetGyroscope>:
 * @brief  Sets gyroscope sensitivity
 * @param  *DataStruct: Pointer to @ref TM_MPU6050_t structure indicating MPU6050 device
 * @param  GyroscopeSensitivity: Gyro sensitivity value. This parameter can be a value of @ref TM_MPU6050_Gyroscope_t enumeration
 * @retval Member of @ref TM_MPU6050_Result_t enumeration
 */
MPU6050_Result_t MPU6050_SetGyroscope(MPU6050_t* DataStruct, MPU6050_Gyroscope_t GyroscopeSensitivity){
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	/*read*/
	DataStruct->read(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_GYRO_CONFIG, &temp, 1, 1000);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681c      	ldr	r4, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68d8      	ldr	r0, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	7c19      	ldrb	r1, [r3, #16]
 8000e10:	f107 030f 	add.w	r3, r7, #15
 8000e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e18:	9201      	str	r2, [sp, #4]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	9200      	str	r2, [sp, #0]
 8000e1e:	221b      	movs	r2, #27
 8000e20:	47a0      	blx	r4
	temp = (temp & 0xEF) | (uint8_t)GyroscopeSensitivity;
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	f023 0310 	bic.w	r3, r3, #16
 8000e2a:	b25a      	sxtb	r2, r3
 8000e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	73fb      	strb	r3, [r7, #15]
	if(DataStruct->write(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_GYRO_CONFIG, &temp, 1, 1000) != true){
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685c      	ldr	r4, [r3, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68d8      	ldr	r0, [r3, #12]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	7c19      	ldrb	r1, [r3, #16]
 8000e44:	f107 030f 	add.w	r3, r7, #15
 8000e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e4c:	9201      	str	r2, [sp, #4]
 8000e4e:	2201      	movs	r2, #1
 8000e50:	9200      	str	r2, [sp, #0]
 8000e52:	221b      	movs	r2, #27
 8000e54:	47a0      	blx	r4
 8000e56:	4603      	mov	r3, r0
 8000e58:	f083 0301 	eor.w	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MPU6050_SetGyroscope+0x6e>
		return MPU6050_Result_Error;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e021      	b.n	8000eaa <MPU6050_SetGyroscope+0xb2>
	}
	temp = GyroscopeSensitivity;
 8000e66:	78fb      	ldrb	r3, [r7, #3]
 8000e68:	73fb      	strb	r3, [r7, #15]
	switch(temp){
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d81b      	bhi.n	8000ea8 <MPU6050_SetGyroscope+0xb0>
 8000e70:	a201      	add	r2, pc, #4	; (adr r2, 8000e78 <MPU6050_SetGyroscope+0x80>)
 8000e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e76:	bf00      	nop
 8000e78:	08000e89 	.word	0x08000e89
 8000e7c:	08000e91 	.word	0x08000e91
 8000e80:	08000e99 	.word	0x08000e99
 8000e84:	08000ea1 	.word	0x08000ea1
	case MPU6050_Gyroscope_250s:
		DataStruct->g.sensitivy = 1.0 / MPU6050_GYRO_SENS_250;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <MPU6050_SetGyroscope+0xbc>)
 8000e8c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000e8e:	e00b      	b.n	8000ea8 <MPU6050_SetGyroscope+0xb0>
	case MPU6050_Gyroscope_500s:
		DataStruct->g.sensitivy = 1.0 / MPU6050_GYRO_SENS_500;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <MPU6050_SetGyroscope+0xc0>)
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000e96:	e007      	b.n	8000ea8 <MPU6050_SetGyroscope+0xb0>
	case MPU6050_Gyroscope_1000s:
		DataStruct->g.sensitivy = 1.0 / MPU6050_GYRO_SENS_1000;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <MPU6050_SetGyroscope+0xc4>)
 8000e9c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000e9e:	e003      	b.n	8000ea8 <MPU6050_SetGyroscope+0xb0>
	case MPU6050_Gyroscope_2000s:
		DataStruct->g.sensitivy = 1.0 / MPU6050_GYRO_SENS_2000;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <MPU6050_SetGyroscope+0xc8>)
 8000ea4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8000ea6:	bf00      	nop
	}
	return MPU6050_Result_Ok;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	3bfa232d 	.word	0x3bfa232d
 8000eb8:	3c7a232d 	.word	0x3c7a232d
 8000ebc:	3cf9c190 	.word	0x3cf9c190
 8000ec0:	3d79c190 	.word	0x3d79c190

08000ec4 <MPU6050_SetAccelerometer>:
 * @brief  Sets accelerometer sensitivity
 * @param  *DataStruct: Pointer to @ref TM_MPU6050_t structure indicating MPU6050 device
 * @param  AccelerometerSensitivity: Gyro sensitivity value. This parameter can be a value of @ref TM_MPU6050_Accelerometer_t enumeration
 * @retval Member of @ref TM_MPU6050_Result_t enumeration
 */
MPU6050_Result_t MPU6050_SetAccelerometer(MPU6050_t* DataStruct, MPU6050_Accelerometer_t AccelerometerSensitivity){
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af02      	add	r7, sp, #8
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]
	uint8_t temp;
	/*leer*/
	DataStruct->read(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_ACCEL_CONFIG, &temp, 1, 1000);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681c      	ldr	r4, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68d8      	ldr	r0, [r3, #12]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7c19      	ldrb	r1, [r3, #16]
 8000edc:	f107 030f 	add.w	r3, r7, #15
 8000ee0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ee4:	9201      	str	r2, [sp, #4]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	9200      	str	r2, [sp, #0]
 8000eea:	221c      	movs	r2, #28
 8000eec:	47a0      	blx	r4
	temp = (temp & 0xEF) | (uint8_t)AccelerometerSensitivity;
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	b25b      	sxtb	r3, r3
 8000ef2:	f023 0310 	bic.w	r3, r3, #16
 8000ef6:	b25a      	sxtb	r2, r3
 8000ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	73fb      	strb	r3, [r7, #15]
	if(DataStruct->write(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_ACCEL_CONFIG, &temp,1, 1000) != true){
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685c      	ldr	r4, [r3, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68d8      	ldr	r0, [r3, #12]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7c19      	ldrb	r1, [r3, #16]
 8000f10:	f107 030f 	add.w	r3, r7, #15
 8000f14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f18:	9201      	str	r2, [sp, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	9200      	str	r2, [sp, #0]
 8000f1e:	221c      	movs	r2, #28
 8000f20:	47a0      	blx	r4
 8000f22:	4603      	mov	r3, r0
 8000f24:	f083 0301 	eor.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MPU6050_SetAccelerometer+0x6e>
		return MPU6050_Result_Error;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e025      	b.n	8000f7e <MPU6050_SetAccelerometer+0xba>
	}
	temp = AccelerometerSensitivity;
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	73fb      	strb	r3, [r7, #15]
	switch(temp){
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d81f      	bhi.n	8000f7c <MPU6050_SetAccelerometer+0xb8>
 8000f3c:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <MPU6050_SetAccelerometer+0x80>)
 8000f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f42:	bf00      	nop
 8000f44:	08000f55 	.word	0x08000f55
 8000f48:	08000f5f 	.word	0x08000f5f
 8000f4c:	08000f69 	.word	0x08000f69
 8000f50:	08000f73 	.word	0x08000f73
	case MPU6050_Accelerometer_2G:
		DataStruct->a.sensitivy = 1.0 / MPU6050_ACCE_SENS_2;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000f5c:	e00e      	b.n	8000f7c <MPU6050_SetAccelerometer+0xb8>
	case MPU6050_Accelerometer_4G:
		DataStruct->a.sensitivy = 1.0 / MPU6050_ACCE_SENS_4;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000f66:	e009      	b.n	8000f7c <MPU6050_SetAccelerometer+0xb8>
	case MPU6050_Accelerometer_8G:
		DataStruct->a.sensitivy = 1.0 / MPU6050_ACCE_SENS_8;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000f70:	e004      	b.n	8000f7c <MPU6050_SetAccelerometer+0xb8>
	case MPU6050_Accelerometer_16G:
		DataStruct->a.sensitivy = 1.0 / MPU6050_ACCE_SENS_16;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8000f78:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000f7a:	bf00      	nop
	}
	return MPU6050_Result_Ok;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd90      	pop	{r4, r7, pc}
 8000f86:	bf00      	nop

08000f88 <MPU6050_SetDataRate>:
 * @brief  Sets output data rate
 * @param  *DataStruct: Pointer to @ref TM_MPU6050_t structure indicating MPU6050 device
 * @param  rate: Data rate value. An 8-bit value for prescaler value
 * @retval Member of @ref TM_MPU6050_Result_t enumeration
 */
MPU6050_Result_t MPU6050_SetDataRate(MPU6050_t* DataStruct, uint8_t rate){
 8000f88:	b590      	push	{r4, r7, lr}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
	if(DataStruct->write(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_SMPLRT_DIV, &rate, 1, 1000) == true){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685c      	ldr	r4, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68d8      	ldr	r0, [r3, #12]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	7c19      	ldrb	r1, [r3, #16]
 8000fa0:	1cfb      	adds	r3, r7, #3
 8000fa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fa6:	9201      	str	r2, [sp, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	9200      	str	r2, [sp, #0]
 8000fac:	2219      	movs	r2, #25
 8000fae:	47a0      	blx	r4
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MPU6050_SetDataRate+0x32>
		return MPU6050_Result_Ok;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e000      	b.n	8000fbc <MPU6050_SetDataRate+0x34>
	}
	return MPU6050_Result_Error;
 8000fba:	2301      	movs	r3, #1
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd90      	pop	{r4, r7, pc}

08000fc4 <MPU6050_EnableInterrupts>:
/**
 * @brief  Enables interrupts
 * @param  *DataStruct: Pointer to @ref TM_MPU6050_t structure indicating MPU6050 device
 * @retval Member of @ref TM_MPU6050_Result_t enumeration
 */
MPU6050_Result_t MPU6050_EnableInterrupts(MPU6050_t* DataStruct){
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
	uint8_t temp;

	/*Level and pin type*/
	if(DataStruct->read(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_INT_PIN_CFG, &temp, 1, 1000) != true){
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681c      	ldr	r4, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68d8      	ldr	r0, [r3, #12]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7c19      	ldrb	r1, [r3, #16]
 8000fd8:	f107 030f 	add.w	r3, r7, #15
 8000fdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fe0:	9201      	str	r2, [sp, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	9200      	str	r2, [sp, #0]
 8000fe6:	2237      	movs	r2, #55	; 0x37
 8000fe8:	47a0      	blx	r4
 8000fea:	4603      	mov	r3, r0
 8000fec:	f083 0301 	eor.w	r3, r3, #1
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MPU6050_EnableInterrupts+0x36>
		return MPU6050_Result_Error;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e058      	b.n	80010ac <MPU6050_EnableInterrupts+0xe8>
	}
	temp &=~ (1<<7 | 1<<6 | 1<<5);
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f003 031f 	and.w	r3, r3, #31
 8001000:	b2db      	uxtb	r3, r3
 8001002:	73fb      	strb	r3, [r7, #15]
	temp |= 0x10;
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	f043 0310 	orr.w	r3, r3, #16
 800100a:	b2db      	uxtb	r3, r3
 800100c:	73fb      	strb	r3, [r7, #15]
	temp |= DataStruct->ITconfg.level<<7 | DataStruct->ITconfg.pin_type<<6;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001014:	01db      	lsls	r3, r3, #7
 8001016:	b25a      	sxtb	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800101e:	019b      	lsls	r3, r3, #6
 8001020:	b25b      	sxtb	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b25a      	sxtb	r2, r3
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	b25b      	sxtb	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b25b      	sxtb	r3, r3
 800102e:	b2db      	uxtb	r3, r3
 8001030:	73fb      	strb	r3, [r7, #15]
	DataStruct->write(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_INT_PIN_CFG, &temp, 1, 1000);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685c      	ldr	r4, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68d8      	ldr	r0, [r3, #12]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7c19      	ldrb	r1, [r3, #16]
 800103e:	f107 030f 	add.w	r3, r7, #15
 8001042:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	2201      	movs	r2, #1
 800104a:	9200      	str	r2, [sp, #0]
 800104c:	2237      	movs	r2, #55	; 0x37
 800104e:	47a0      	blx	r4
	/*Enable interrupt*/
	if(DataStruct->read(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_INT_ENABLE, &temp, 1, 1000) != true){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681c      	ldr	r4, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68d8      	ldr	r0, [r3, #12]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7c19      	ldrb	r1, [r3, #16]
 800105c:	f107 030f 	add.w	r3, r7, #15
 8001060:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001064:	9201      	str	r2, [sp, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	9200      	str	r2, [sp, #0]
 800106a:	2238      	movs	r2, #56	; 0x38
 800106c:	47a0      	blx	r4
 800106e:	4603      	mov	r3, r0
 8001070:	f083 0301 	eor.w	r3, r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MPU6050_EnableInterrupts+0xba>
		return MPU6050_Result_Error;
 800107a:	2301      	movs	r3, #1
 800107c:	e016      	b.n	80010ac <MPU6050_EnableInterrupts+0xe8>
	}
	temp |= DataStruct->ITconfg.it_type;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 204f 	ldrb.w	r2, [r3, #79]	; 0x4f
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	4313      	orrs	r3, r2
 8001088:	b2db      	uxtb	r3, r3
 800108a:	73fb      	strb	r3, [r7, #15]

	DataStruct->write(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_INT_ENABLE, &temp, 1, 1000);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685c      	ldr	r4, [r3, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68d8      	ldr	r0, [r3, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	7c19      	ldrb	r1, [r3, #16]
 8001098:	f107 030f 	add.w	r3, r7, #15
 800109c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a0:	9201      	str	r2, [sp, #4]
 80010a2:	2201      	movs	r2, #1
 80010a4:	9200      	str	r2, [sp, #0]
 80010a6:	2238      	movs	r2, #56	; 0x38
 80010a8:	47a0      	blx	r4

	return MPU6050_Result_Error;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd90      	pop	{r4, r7, pc}

080010b4 <MPU6050_ReadInterrupts>:
 * @brief  Reads and clears interrupts
 * @param  *DataStruct: Pointer to @ref TM_MPU6050_t structure indicating MPU6050 device
 * @param  *InterruptsStruct: Pointer to @ref TM_MPU6050_Interrupt_t structure to store status in
 * @retval Member of @ref TM_MPU6050_Result_t enumeration
 */
MPU6050_Result_t MPU6050_ReadInterrupts(MPU6050_t* DataStruct, MPU6050_Interrupt_t* InterruptsStruct){
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b087      	sub	sp, #28
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	uint8_t read;
	InterruptsStruct->Status = 0;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
	if(DataStruct->read(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_INT_STATUS, &read, 1, 100) != true){
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681c      	ldr	r4, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68d8      	ldr	r0, [r3, #12]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7c19      	ldrb	r1, [r3, #16]
 80010d0:	f107 030f 	add.w	r3, r7, #15
 80010d4:	2264      	movs	r2, #100	; 0x64
 80010d6:	9201      	str	r2, [sp, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	9200      	str	r2, [sp, #0]
 80010dc:	223a      	movs	r2, #58	; 0x3a
 80010de:	47a0      	blx	r4
 80010e0:	4603      	mov	r3, r0
 80010e2:	f083 0301 	eor.w	r3, r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MPU6050_ReadInterrupts+0x3c>
		return MPU6050_Result_Error;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e003      	b.n	80010f8 <MPU6050_ReadInterrupts+0x44>
	}
	InterruptsStruct->Status = read;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	701a      	strb	r2, [r3, #0]

	return MPU6050_Result_Ok;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd90      	pop	{r4, r7, pc}

08001100 <MPU6050_ReadAll>:
 * @param  *DataStruct: Pointer to @ref TM_MPU6050_t structure to store data to
 * @retval Member of @ref TM_MPU6050_Result_t:
 *            - TM_MPU6050_Result_Ok: everything is OK
 *            - Other: in other cases
 */
MPU6050_Result_t MPU6050_ReadAll(MPU6050_t* DataStruct){
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af02      	add	r7, sp, #8
 8001106:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	int16_t temp;
	if(DataStruct->read(DataStruct->mpuI2C, DataStruct->dev_addr, MPU6050_ACCEL_XOUT_H, data, 14, 100) != true){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681c      	ldr	r4, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68d8      	ldr	r0, [r3, #12]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7c19      	ldrb	r1, [r3, #16]
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	2264      	movs	r2, #100	; 0x64
 800111a:	9201      	str	r2, [sp, #4]
 800111c:	220e      	movs	r2, #14
 800111e:	9200      	str	r2, [sp, #0]
 8001120:	223b      	movs	r2, #59	; 0x3b
 8001122:	47a0      	blx	r4
 8001124:	4603      	mov	r3, r0
 8001126:	f083 0301 	eor.w	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MPU6050_ReadAll+0x34>
		return MPU6050_Result_Error;
 8001130:	2301      	movs	r3, #1
 8001132:	e04e      	b.n	80011d2 <MPU6050_ReadAll+0xd2>
	}
	DataStruct->a.x = (int16_t)(data[0] << 8 | data[1]);
 8001134:	7a3b      	ldrb	r3, [r7, #8]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21a      	sxth	r2, r3
 800113a:	7a7b      	ldrb	r3, [r7, #9]
 800113c:	b21b      	sxth	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b21a      	sxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	829a      	strh	r2, [r3, #20]
	DataStruct->a.y = (int16_t)(data[2] << 8 | data[3]);
 8001146:	7abb      	ldrb	r3, [r7, #10]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b21a      	sxth	r2, r3
 800114c:	7afb      	ldrb	r3, [r7, #11]
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21a      	sxth	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	82da      	strh	r2, [r3, #22]
	DataStruct->a.z = (int16_t)(data[4] << 8 | data[5]);
 8001158:	7b3b      	ldrb	r3, [r7, #12]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	7b7b      	ldrb	r3, [r7, #13]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21a      	sxth	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	831a      	strh	r2, [r3, #24]
	temp = (data[6] << 8 | data[7]);
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	82fb      	strh	r3, [r7, #22]
	DataStruct->temp = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001178:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800117c:	ee07 3a90 	vmov	s15, r3
 8001180:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001184:	eddf 6a15 	vldr	s13, [pc, #84]	; 80011dc <MPU6050_ReadAll+0xdc>
 8001188:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80011e0 <MPU6050_ReadAll+0xe0>
 8001190:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	DataStruct->g.x = (int16_t)(data[8] << 8 | data[9]);
 800119a:	7c3b      	ldrb	r3, [r7, #16]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	7c7b      	ldrb	r3, [r7, #17]
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21a      	sxth	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	859a      	strh	r2, [r3, #44]	; 0x2c
	DataStruct->g.y = (int16_t)(data[10] << 8 | data[11]);
 80011ac:	7cbb      	ldrb	r3, [r7, #18]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	7cfb      	ldrb	r3, [r7, #19]
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b21a      	sxth	r2, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	85da      	strh	r2, [r3, #46]	; 0x2e
	DataStruct->g.z = (int16_t)(data[12] << 8 | data[13]);
 80011be:	7d3b      	ldrb	r3, [r7, #20]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b21a      	sxth	r2, r3
 80011c4:	7d7b      	ldrb	r3, [r7, #21]
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	4313      	orrs	r3, r2
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	861a      	strh	r2, [r3, #48]	; 0x30

	return MPU6050_Result_Ok;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	371c      	adds	r7, #28
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}
 80011da:	bf00      	nop
 80011dc:	43aa0000 	.word	0x43aa0000
 80011e0:	42121eb8 	.word	0x42121eb8

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <SysTickInit>:

/*Global variables -------------------------------------------------*/
volatile uint32_t uwTick = 0;


void SysTickInit(void){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
	uint32_t temp;
	SystemCoreClockUpdate();
 800123e:	f000 fce9 	bl	8001c14 <SystemCoreClockUpdate>
	//1. deshabilitar el conteo de la systick
	SysTick->CTRL &=~ SysTick_CTRL_ENABLE_Msk;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <SysTickInit+0x68>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <SysTickInit+0x68>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	6013      	str	r3, [r2, #0]
	//2. configurar el valor del registro reload
	SystemCoreClockUpdate();
 800124e:	f000 fce1 	bl	8001c14 <SystemCoreClockUpdate>
	temp = SystemCoreClock / 1000 - 1;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <SysTickInit+0x6c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <SysTickInit+0x70>)
 8001258:	fba2 2303 	umull	r2, r3, r2, r3
 800125c:	099b      	lsrs	r3, r3, #6
 800125e:	3b01      	subs	r3, #1
 8001260:	607b      	str	r3, [r7, #4]
	SysTick->LOAD = temp;
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <SysTickInit+0x68>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6053      	str	r3, [r2, #4]
	//3. Configuras el registro de control y habilitas el conteo
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; 			//system core clock
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <SysTickInit+0x68>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <SysTickInit+0x68>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6013      	str	r3, [r2, #0]

	//configurar la IT
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;				//habilita la IT
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <SysTickInit+0x68>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <SysTickInit+0x68>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(SysTick_IRQn, 15);
 8001280:	210f      	movs	r1, #15
 8001282:	f04f 30ff 	mov.w	r0, #4294967295
 8001286:	f7ff ffad 	bl	80011e4 <__NVIC_SetPriority>

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;				//habilita el conteo
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SysTickInit+0x68>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <SysTickInit+0x68>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6013      	str	r3, [r2, #0]

	return;
 8001296:	bf00      	nop
}
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010
 80012a4:	20000000 	.word	0x20000000
 80012a8:	10624dd3 	.word	0x10624dd3

080012ac <delay_ms>:


/**
 * @brief funcion para generar retardos en ms
 */
void delay_ms(uint32_t delay){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = GetTicks();
 80012b4:	f000 f810 	bl	80012d8 <GetTicks>
 80012b8:	60f8      	str	r0, [r7, #12]
	uint32_t wait = delay;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	60bb      	str	r3, [r7, #8]
	//generacion del retardo
	while((GetTicks() - tickstart)<wait);
 80012be:	bf00      	nop
 80012c0:	f000 f80a 	bl	80012d8 <GetTicks>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <delay_ms+0x14>
	return;
 80012d0:	bf00      	nop
}
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <GetTicks>:
/**
 * @brief retorna el ticks generado por la SysTick
 * @return uint32_t
 */
uint32_t GetTicks(void){
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
	return (uint32_t)uwTick;
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <GetTicks+0x14>)
 80012de:	681b      	ldr	r3, [r3, #0]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000084 	.word	0x20000084

080012f0 <TickInc_Callback>:


void TickInc_Callback(void){
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
	uwTick += 1;
 80012f4:	4b04      	ldr	r3, [pc, #16]	; (8001308 <TickInc_Callback+0x18>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3301      	adds	r3, #1
 80012fa:	4a03      	ldr	r2, [pc, #12]	; (8001308 <TickInc_Callback+0x18>)
 80012fc:	6013      	str	r3, [r2, #0]
	return;
 80012fe:	bf00      	nop
}
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	20000084 	.word	0x20000084

0800130c <__NVIC_EnableIRQ>:
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	2b00      	cmp	r3, #0
 800131c:	db0b      	blt.n	8001336 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f003 021f 	and.w	r2, r3, #31
 8001324:	4907      	ldr	r1, [pc, #28]	; (8001344 <__NVIC_EnableIRQ+0x38>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	095b      	lsrs	r3, r3, #5
 800132c:	2001      	movs	r0, #1
 800132e:	fa00 f202 	lsl.w	r2, r0, r2
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000e100 	.word	0xe000e100

08001348 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001350:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001354:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d013      	beq.n	8001388 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001360:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001364:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001368:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00b      	beq.n	8001388 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001370:	e000      	b.n	8001374 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001372:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001374:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f9      	beq.n	8001372 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800137e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <main>:

bool I2C_isDeviceConnected(I2C_TypeDef *I2Cx, uint8_t slaveAddr, uint32_t timeout);
/*main function --------------------------------------------------------------*/

int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	/*Local variables ----------------------------*/
	static MPU6050_t sensor;
	static MPU6050_Interrupt_t mpuState;
	/*Peripheral init ----------------------------*/
	SysTickInit();
 800139c:	f7ff ff4c 	bl	8001238 <SysTickInit>
	I2C1_Init();
 80013a0:	f000 f866 	bl	8001470 <I2C1_Init>
	GPIO_Config();
 80013a4:	f000 fb10 	bl	80019c8 <GPIO_Config>
	/*Sensor init --------------------------------*/
	MPU6050_LINK_READ_FUNC(&sensor, i2c_read_reg);
 80013a8:	4b29      	ldr	r3, [pc, #164]	; (8001450 <main+0xb8>)
 80013aa:	4a2a      	ldr	r2, [pc, #168]	; (8001454 <main+0xbc>)
 80013ac:	601a      	str	r2, [r3, #0]
	MPU6050_LINK_WRITE_FUNC(&sensor, i2c_write_reg);
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <main+0xb8>)
 80013b0:	4a29      	ldr	r2, [pc, #164]	; (8001458 <main+0xc0>)
 80013b2:	605a      	str	r2, [r3, #4]
	MPU6050_LINK_ISCONECTED_FUNC(&sensor, I2C_isDeviceConnected);
 80013b4:	4b26      	ldr	r3, [pc, #152]	; (8001450 <main+0xb8>)
 80013b6:	4a29      	ldr	r2, [pc, #164]	; (800145c <main+0xc4>)
 80013b8:	609a      	str	r2, [r3, #8]
	sensor.mpuI2C = I2C1;
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <main+0xb8>)
 80013bc:	4a28      	ldr	r2, [pc, #160]	; (8001460 <main+0xc8>)
 80013be:	60da      	str	r2, [r3, #12]
	sensor.confg.DataRate = MPU6050_DataRate_100Hz;
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <main+0xb8>)
 80013c2:	224f      	movs	r2, #79	; 0x4f
 80013c4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	sensor.confg.GyroscopeSensitivity = MPU6050_Gyroscope_500s;
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <main+0xb8>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	sensor.confg.AccelerometerSensitivity = MPU6050_Accelerometer_4G;
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <main+0xb8>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	sensor.confg.filter = DLPF_44A_42G_Hz;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <main+0xb8>)
 80013da:	2203      	movs	r2, #3
 80013dc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	sensor.confg.clk = Internal_8MHz;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <main+0xb8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	MPU6050_Init(&sensor, 0x68);
 80013e8:	2168      	movs	r1, #104	; 0x68
 80013ea:	4819      	ldr	r0, [pc, #100]	; (8001450 <main+0xb8>)
 80013ec:	f7ff fb8f 	bl	8000b0e <MPU6050_Init>
	/**
	 * mpu interrupt config
	 */
	sensor.ITconfg.it_type = MPU6050_PIN_TYPE_PUSH_PULL;
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <main+0xb8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	sensor.ITconfg.level = MPU6050_PIN_LEVEL_LOW;
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <main+0xb8>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	sensor.ITconfg.it_type = MPU6050_INTERRUPT_DATA_READY;
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <main+0xb8>)
 8001402:	2201      	movs	r2, #1
 8001404:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	MPU6050_EnableInterrupts(&sensor);
 8001408:	4811      	ldr	r0, [pc, #68]	; (8001450 <main+0xb8>)
 800140a:	f7ff fddb 	bl	8000fc4 <MPU6050_EnableInterrupts>
    /* Loop forever */
	for(;;){
		MPU6050_ReadInterrupts(&sensor, &mpuState);
 800140e:	4915      	ldr	r1, [pc, #84]	; (8001464 <main+0xcc>)
 8001410:	480f      	ldr	r0, [pc, #60]	; (8001450 <main+0xb8>)
 8001412:	f7ff fe4f 	bl	80010b4 <MPU6050_ReadInterrupts>
		if(mpuState.F.DataReady == 1){
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <main+0xcc>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	d010      	beq.n	8001446 <main+0xae>
			MPU6050_ReadAll(&sensor);
 8001424:	480a      	ldr	r0, [pc, #40]	; (8001450 <main+0xb8>)
 8001426:	f7ff fe6b 	bl	8001100 <MPU6050_ReadAll>
			printf("%d, %d, %d\r\n", sensor.a.x, sensor.a.y, sensor.a.z);
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <main+0xb8>)
 800142c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001430:	4619      	mov	r1, r3
 8001432:	4b07      	ldr	r3, [pc, #28]	; (8001450 <main+0xb8>)
 8001434:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001438:	461a      	mov	r2, r3
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <main+0xb8>)
 800143c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001440:	4809      	ldr	r0, [pc, #36]	; (8001468 <main+0xd0>)
 8001442:	f000 fcc3 	bl	8001dcc <iprintf>
		}

		delay_ms(10);
 8001446:	200a      	movs	r0, #10
 8001448:	f7ff ff30 	bl	80012ac <delay_ms>
		MPU6050_ReadInterrupts(&sensor, &mpuState);
 800144c:	e7df      	b.n	800140e <main+0x76>
 800144e:	bf00      	nop
 8001450:	2000008c 	.word	0x2000008c
 8001454:	08001981 	.word	0x08001981
 8001458:	08001935 	.word	0x08001935
 800145c:	08001701 	.word	0x08001701
 8001460:	40005400 	.word	0x40005400
 8001464:	200000dc 	.word	0x200000dc
 8001468:	08002d00 	.word	0x08002d00
 800146c:	00000000 	.word	0x00000000

08001470 <I2C1_Init>:
	}
}

/*Function definition ---------------------------------------------------------*/
void I2C1_Init(void){
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
	uint32_t temp;
	RCC->AHB1ENR |= GPIOX_CLOCK(I2C1_SCL);
 8001476:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <I2C1_Init+0x138>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a4b      	ldr	r2, [pc, #300]	; (80015a8 <I2C1_Init+0x138>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_ALTER, I2C1_SCL);
 8001482:	4b4a      	ldr	r3, [pc, #296]	; (80015ac <I2C1_Init+0x13c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800148a:	4a48      	ldr	r2, [pc, #288]	; (80015ac <I2C1_Init+0x13c>)
 800148c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001490:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_ALTER, I2C1_SDA);
 8001492:	4b46      	ldr	r3, [pc, #280]	; (80015ac <I2C1_Init+0x13c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800149a:	4a44      	ldr	r2, [pc, #272]	; (80015ac <I2C1_Init+0x13c>)
 800149c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014a0:	6013      	str	r3, [r2, #0]
	GPIOX_OTYPER(MODE_OT_OD, I2C1_SCL);		//Habilita el modo open drain
 80014a2:	4b42      	ldr	r3, [pc, #264]	; (80015ac <I2C1_Init+0x13c>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4a41      	ldr	r2, [pc, #260]	; (80015ac <I2C1_Init+0x13c>)
 80014a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ac:	6053      	str	r3, [r2, #4]
	GPIOX_OTYPER(MODE_OT_OD, I2C1_SDA);
 80014ae:	4b3f      	ldr	r3, [pc, #252]	; (80015ac <I2C1_Init+0x13c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4a3e      	ldr	r2, [pc, #248]	; (80015ac <I2C1_Init+0x13c>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	6053      	str	r3, [r2, #4]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, I2C1_SCL);
 80014ba:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <I2C1_Init+0x13c>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4a3b      	ldr	r2, [pc, #236]	; (80015ac <I2C1_Init+0x13c>)
 80014c0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80014c4:	6093      	str	r3, [r2, #8]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, I2C1_SDA);//VERY HIGH SPEED
 80014c6:	4b39      	ldr	r3, [pc, #228]	; (80015ac <I2C1_Init+0x13c>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	4a38      	ldr	r2, [pc, #224]	; (80015ac <I2C1_Init+0x13c>)
 80014cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d0:	6093      	str	r3, [r2, #8]
	GPIOX_PUPDR(MODE_PU_UP, I2C1_SCL);
 80014d2:	4b36      	ldr	r3, [pc, #216]	; (80015ac <I2C1_Init+0x13c>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014da:	4a34      	ldr	r2, [pc, #208]	; (80015ac <I2C1_Init+0x13c>)
 80014dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e0:	60d3      	str	r3, [r2, #12]
	GPIOX_PUPDR(MODE_PU_UP, I2C1_SDA);		//Habilita las resitencias pull up internas
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <I2C1_Init+0x13c>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014ea:	4a30      	ldr	r2, [pc, #192]	; (80015ac <I2C1_Init+0x13c>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	60d3      	str	r3, [r2, #12]
	GPIOX_AFR(4, I2C1_SCL);
 80014f2:	4b2e      	ldr	r3, [pc, #184]	; (80015ac <I2C1_Init+0x13c>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80014fa:	4a2c      	ldr	r2, [pc, #176]	; (80015ac <I2C1_Init+0x13c>)
 80014fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001500:	6213      	str	r3, [r2, #32]
	GPIOX_AFR(4, I2C1_SDA);
 8001502:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <I2C1_Init+0x13c>)
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800150a:	4a28      	ldr	r2, [pc, #160]	; (80015ac <I2C1_Init+0x13c>)
 800150c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001510:	6213      	str	r3, [r2, #32]
	/*I2C1 -------------------------------------------------*/
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8001512:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <I2C1_Init+0x138>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a24      	ldr	r2, [pc, #144]	; (80015a8 <I2C1_Init+0x138>)
 8001518:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
	//RESET
	I2C1->CR1 |= I2C_CR1_SWRST;
 800151e:	4b24      	ldr	r3, [pc, #144]	; (80015b0 <I2C1_Init+0x140>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a23      	ldr	r2, [pc, #140]	; (80015b0 <I2C1_Init+0x140>)
 8001524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001528:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &=~ I2C_CR1_SWRST;
 800152a:	4b21      	ldr	r3, [pc, #132]	; (80015b0 <I2C1_Init+0x140>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <I2C1_Init+0x140>)
 8001530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001534:	6013      	str	r3, [r2, #0]
	/**
	 * PCLK1 -> FREQ = 16MHz
	 */
	temp = SystemCoreClock / 1E+6;
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <I2C1_Init+0x144>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe ffea 	bl	8000514 <__aeabi_ui2d>
 8001540:	a317      	add	r3, pc, #92	; (adr r3, 80015a0 <I2C1_Init+0x130>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7ff f989 	bl	800085c <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4610      	mov	r0, r2
 8001550:	4619      	mov	r1, r3
 8001552:	f7ff fa6b 	bl	8000a2c <__aeabi_d2uiz>
 8001556:	4603      	mov	r3, r0
 8001558:	607b      	str	r3, [r7, #4]
	I2C1->CR2 = temp & 0x3F;
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <I2C1_Init+0x140>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001562:	6053      	str	r3, [r2, #4]
	 * CCR = PCLK1 / (3 * 400000)
	 * DUTY == 1
	 * CCR = PCLK1 / (25 * 400000)
	 * ->FAST MODE PLUS
	 */
	temp = 16E+6 / (3 * 400E+3);
 8001564:	230d      	movs	r3, #13
 8001566:	607b      	str	r3, [r7, #4]
	temp = 13;
 8001568:	230d      	movs	r3, #13
 800156a:	607b      	str	r3, [r7, #4]
	I2C1->CCR = temp & 0xFFF;
 800156c:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <I2C1_Init+0x140>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001574:	61d3      	str	r3, [r2, #28]
	 * SM
	 * TRISE = PCLK1 / 1000000 + 1
	 * FS
	 * TRISE = (PCLK1 * 300) / (1000000000U) + 1
	 */
	temp = ((16E+6) * 300) / (1000000000U) + 1;
 8001576:	2305      	movs	r3, #5
 8001578:	607b      	str	r3, [r7, #4]
	I2C1->TRISE = temp;
 800157a:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <I2C1_Init+0x140>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6213      	str	r3, [r2, #32]
	/*configurar la direccion esclava*/
	I2C1->OAR1 = 0x73;
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <I2C1_Init+0x140>)
 8001582:	2273      	movs	r2, #115	; 0x73
 8001584:	609a      	str	r2, [r3, #8]
	/*habilitar el I2C1*/
	I2C1->CR1 |= I2C_CR1_PE;
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <I2C1_Init+0x140>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a09      	ldr	r2, [pc, #36]	; (80015b0 <I2C1_Init+0x140>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6013      	str	r3, [r2, #0]
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	f3af 8000 	nop.w
 80015a0:	00000000 	.word	0x00000000
 80015a4:	412e8480 	.word	0x412e8480
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40005400 	.word	0x40005400
 80015b4:	20000000 	.word	0x20000000

080015b8 <I2C_MasterSendData>:
bool I2C_MasterSendData(I2C_TypeDef *I2Cx, uint8_t slaveAddr, uint8_t *pData, uint32_t Len, uint32_t timeout){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	460b      	mov	r3, r1
 80015c6:	72fb      	strb	r3, [r7, #11]
	volatile uint32_t temp;

	uint32_t tickstart = GetTicks();
 80015c8:	f7ff fe86 	bl	80012d8 <GetTicks>
 80015cc:	61b8      	str	r0, [r7, #24]
	uint8_t stateuml = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	77fb      	strb	r3, [r7, #31]
	//verificas el estado de los datos a transmitir
	if(Len <= 0 || pData == ((void *)0)){
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d002      	beq.n	80015de <I2C_MasterSendData+0x26>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d17b      	bne.n	80016d6 <I2C_MasterSendData+0x11e>
		return false;
 80015de:	2300      	movs	r3, #0
 80015e0:	e08a      	b.n	80016f8 <I2C_MasterSendData+0x140>
	}

	/*esperar la linea se libere*/
	while((GetTicks() - tickstart)<timeout){
		switch(stateuml){
 80015e2:	7ffb      	ldrb	r3, [r7, #31]
 80015e4:	2b06      	cmp	r3, #6
 80015e6:	d877      	bhi.n	80016d8 <I2C_MasterSendData+0x120>
 80015e8:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <I2C_MasterSendData+0x38>)
 80015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ee:	bf00      	nop
 80015f0:	0800160d 	.word	0x0800160d
 80015f4:	0800161f 	.word	0x0800161f
 80015f8:	0800162f 	.word	0x0800162f
 80015fc:	08001641 	.word	0x08001641
 8001600:	0800165b 	.word	0x0800165b
 8001604:	0800167b 	.word	0x0800167b
 8001608:	080016ab 	.word	0x080016ab
		case 0: //esperar que la linea se libere
			if(!(I2Cx->SR2 & I2C_SR2_BUSY)){
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d15f      	bne.n	80016d8 <I2C_MasterSendData+0x120>
				stateuml = 1;
 8001618:	2301      	movs	r3, #1
 800161a:	77fb      	strb	r3, [r7, #31]
			}
			break;
 800161c:	e05c      	b.n	80016d8 <I2C_MasterSendData+0x120>
		case 1: //generar la condicion de inicio
			I2Cx->CR1 |= I2C_CR1_START;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	601a      	str	r2, [r3, #0]
			stateuml = 2;
 800162a:	2302      	movs	r3, #2
 800162c:	77fb      	strb	r3, [r7, #31]
		case 2: //esperar la respuesta al start
			if(I2Cx->SR1 & I2C_SR1_SB){
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d04e      	beq.n	80016d8 <I2C_MasterSendData+0x120>
				stateuml = 3;
 800163a:	2303      	movs	r3, #3
 800163c:	77fb      	strb	r3, [r7, #31]
			}
			break;
 800163e:	e04b      	b.n	80016d8 <I2C_MasterSendData+0x120>
		case 3: //enviar la direccion del esclavo
			slaveAddr = slaveAddr<<1;
 8001640:	7afb      	ldrb	r3, [r7, #11]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	72fb      	strb	r3, [r7, #11]
			slaveAddr &=~ (1U);			//write
 8001646:	7afb      	ldrb	r3, [r7, #11]
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	72fb      	strb	r3, [r7, #11]
			I2Cx->DR = slaveAddr;
 800164e:	7afa      	ldrb	r2, [r7, #11]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	611a      	str	r2, [r3, #16]
			stateuml = 4;
 8001654:	2304      	movs	r3, #4
 8001656:	77fb      	strb	r3, [r7, #31]
			break;
 8001658:	e03e      	b.n	80016d8 <I2C_MasterSendData+0x120>
		case 4:	//esperar la respuesta del esclavo
			if(I2Cx->SR1 & I2C_SR1_ADDR){
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d038      	beq.n	80016d8 <I2C_MasterSendData+0x120>
				//limpiar los registros de estado
				temp = I2Cx->SR1;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	617b      	str	r3, [r7, #20]
				temp = I2Cx->SR2;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	617b      	str	r3, [r7, #20]
				(void)temp;
 8001672:	697b      	ldr	r3, [r7, #20]
				stateuml = 5;
 8001674:	2305      	movs	r3, #5
 8001676:	77fb      	strb	r3, [r7, #31]
			}
			break;
 8001678:	e02e      	b.n	80016d8 <I2C_MasterSendData+0x120>
		case 5: //enviar los datos
			if(Len>0){
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d011      	beq.n	80016a4 <I2C_MasterSendData+0xec>
				if(I2Cx->SR1 & I2C_SR1_TXE){
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001688:	2b00      	cmp	r3, #0
 800168a:	d025      	beq.n	80016d8 <I2C_MasterSendData+0x120>
					I2Cx->DR = *pData;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	611a      	str	r2, [r3, #16]
					pData++;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3301      	adds	r3, #1
 800169a:	607b      	str	r3, [r7, #4]
					Len--;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	3b01      	subs	r3, #1
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	e019      	b.n	80016d8 <I2C_MasterSendData+0x120>
				}
			}else{
				stateuml  = 6;
 80016a4:	2306      	movs	r3, #6
 80016a6:	77fb      	strb	r3, [r7, #31]
			}
			break;
 80016a8:	e016      	b.n	80016d8 <I2C_MasterSendData+0x120>
		case 6: //esperar que se transmitan los datos y generar la condicion de parada
			while(!(I2Cx->SR1 & I2C_SR1_TXE));
 80016aa:	bf00      	nop
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d0f9      	beq.n	80016ac <I2C_MasterSendData+0xf4>
			while(!(I2Cx->SR1 & I2C_SR1_BTF));
 80016b8:	bf00      	nop
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f9      	beq.n	80016ba <I2C_MasterSendData+0x102>
			I2Cx->CR1 |= I2C_CR1_STOP;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	601a      	str	r2, [r3, #0]
			return true;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e010      	b.n	80016f8 <I2C_MasterSendData+0x140>
	while((GetTicks() - tickstart)<timeout){
 80016d6:	bf00      	nop
 80016d8:	f7ff fdfe 	bl	80012d8 <GetTicks>
 80016dc:	4602      	mov	r2, r0
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f63f af7c 	bhi.w	80015e2 <I2C_MasterSendData+0x2a>
		}
	}
	I2Cx->CR1 |= I2C_CR1_STOP;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	601a      	str	r2, [r3, #0]
	return false;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <I2C_isDeviceConnected>:
bool I2C_isDeviceConnected(I2C_TypeDef *I2Cx, uint8_t slaveAddr, uint32_t timeout){
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	460b      	mov	r3, r1
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	72fb      	strb	r3, [r7, #11]
	volatile uint32_t temp;

	uint32_t tickstart = GetTicks();
 800170e:	f7ff fde3 	bl	80012d8 <GetTicks>
 8001712:	61b8      	str	r0, [r7, #24]
	uint8_t stateuml = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	77fb      	strb	r3, [r7, #31]

	/*esperar la linea se libere*/
	while((GetTicks() - tickstart)<timeout){
 8001718:	bf00      	nop
 800171a:	e04b      	b.n	80017b4 <I2C_isDeviceConnected+0xb4>
		switch(stateuml){
 800171c:	7ffb      	ldrb	r3, [r7, #31]
 800171e:	2b04      	cmp	r3, #4
 8001720:	d848      	bhi.n	80017b4 <I2C_isDeviceConnected+0xb4>
 8001722:	a201      	add	r2, pc, #4	; (adr r2, 8001728 <I2C_isDeviceConnected+0x28>)
 8001724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001728:	0800173d 	.word	0x0800173d
 800172c:	0800174f 	.word	0x0800174f
 8001730:	0800175f 	.word	0x0800175f
 8001734:	08001771 	.word	0x08001771
 8001738:	0800178b 	.word	0x0800178b
		case 0: //esperar que la linea se libere
			if(!(I2Cx->SR2 & I2C_SR2_BUSY)){
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d135      	bne.n	80017b4 <I2C_isDeviceConnected+0xb4>
				stateuml = 1;
 8001748:	2301      	movs	r3, #1
 800174a:	77fb      	strb	r3, [r7, #31]
			}
			break;
 800174c:	e032      	b.n	80017b4 <I2C_isDeviceConnected+0xb4>
		case 1: //generar la condicion de inicio
			I2Cx->CR1 |= I2C_CR1_START;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	601a      	str	r2, [r3, #0]
			stateuml = 2;
 800175a:	2302      	movs	r3, #2
 800175c:	77fb      	strb	r3, [r7, #31]
		case 2: //esperar la respuesta al start
			if(I2Cx->SR1 & I2C_SR1_SB){
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d024      	beq.n	80017b4 <I2C_isDeviceConnected+0xb4>
				stateuml = 3;
 800176a:	2303      	movs	r3, #3
 800176c:	77fb      	strb	r3, [r7, #31]
			}
			break;
 800176e:	e021      	b.n	80017b4 <I2C_isDeviceConnected+0xb4>
		case 3: //enviar la direccion del esclavo
			slaveAddr = slaveAddr<<1;
 8001770:	7afb      	ldrb	r3, [r7, #11]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	72fb      	strb	r3, [r7, #11]
			slaveAddr &=~ (1U);			//write
 8001776:	7afb      	ldrb	r3, [r7, #11]
 8001778:	f023 0301 	bic.w	r3, r3, #1
 800177c:	72fb      	strb	r3, [r7, #11]
			I2Cx->DR = slaveAddr;
 800177e:	7afa      	ldrb	r2, [r7, #11]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	611a      	str	r2, [r3, #16]
			stateuml = 4;
 8001784:	2304      	movs	r3, #4
 8001786:	77fb      	strb	r3, [r7, #31]
			break;
 8001788:	e014      	b.n	80017b4 <I2C_isDeviceConnected+0xb4>
		case 4:	//esperar la respuesta del esclavo
			if(I2Cx->SR1 & I2C_SR1_ADDR){
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00e      	beq.n	80017b4 <I2C_isDeviceConnected+0xb4>
				//limpiar los registros de estado
				temp = I2Cx->SR1;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	617b      	str	r3, [r7, #20]
				temp = I2Cx->SR2;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	617b      	str	r3, [r7, #20]
				(void)temp;
 80017a2:	697b      	ldr	r3, [r7, #20]
				I2Cx->CR1 |= I2C_CR1_STOP;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	601a      	str	r2, [r3, #0]
				return true;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e00e      	b.n	80017d2 <I2C_isDeviceConnected+0xd2>
	while((GetTicks() - tickstart)<timeout){
 80017b4:	f7ff fd90 	bl	80012d8 <GetTicks>
 80017b8:	4602      	mov	r2, r0
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8ab      	bhi.n	800171c <I2C_isDeviceConnected+0x1c>
			}
		}
	}
	I2Cx->CR1 |= I2C_CR1_STOP;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	601a      	str	r2, [r3, #0]
	return false;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3720      	adds	r7, #32
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop

080017dc <I2C_MasterReceiveData>:
bool I2C_MasterReceiveData(I2C_TypeDef *I2Cx, uint8_t slaveAddr, uint8_t *pData, uint32_t Len, uint32_t timeout){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	460b      	mov	r3, r1
 80017ea:	72fb      	strb	r3, [r7, #11]
	volatile uint32_t temp;
	uint32_t tickstart = GetTicks();
 80017ec:	f7ff fd74 	bl	80012d8 <GetTicks>
 80017f0:	61b8      	str	r0, [r7, #24]
	uint8_t stateuml = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	77fb      	strb	r3, [r7, #31]
	//verificas el estado de los datos a transmitir
	if(Len <= 0 || pData == ((void *)0)){
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <I2C_MasterReceiveData+0x28>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 8082 	bne.w	8001908 <I2C_MasterReceiveData+0x12c>
		return false;
 8001804:	2300      	movs	r3, #0
 8001806:	e090      	b.n	800192a <I2C_MasterReceiveData+0x14e>
	}

	while((GetTicks() - tickstart)<timeout){
		switch(stateuml){
 8001808:	7ffb      	ldrb	r3, [r7, #31]
 800180a:	2b05      	cmp	r3, #5
 800180c:	d87d      	bhi.n	800190a <I2C_MasterReceiveData+0x12e>
 800180e:	a201      	add	r2, pc, #4	; (adr r2, 8001814 <I2C_MasterReceiveData+0x38>)
 8001810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001814:	0800182d 	.word	0x0800182d
 8001818:	0800183f 	.word	0x0800183f
 800181c:	0800184f 	.word	0x0800184f
 8001820:	08001861 	.word	0x08001861
 8001824:	0800187b 	.word	0x0800187b
 8001828:	080018a7 	.word	0x080018a7
		case 0: //esperar que la linea se libere
			if(!(I2Cx->SR2 & I2C_SR2_BUSY)){
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d168      	bne.n	800190a <I2C_MasterReceiveData+0x12e>
				stateuml = 1;
 8001838:	2301      	movs	r3, #1
 800183a:	77fb      	strb	r3, [r7, #31]
			}
			break;
 800183c:	e065      	b.n	800190a <I2C_MasterReceiveData+0x12e>
		case 1: //generar la condicion de inicio
			I2Cx->CR1 |= I2C_CR1_START;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	601a      	str	r2, [r3, #0]
			stateuml = 2;
 800184a:	2302      	movs	r3, #2
 800184c:	77fb      	strb	r3, [r7, #31]
		case 2: //esperar la respuesta del start
			if(I2Cx->SR1 & I2C_SR1_SB){
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d057      	beq.n	800190a <I2C_MasterReceiveData+0x12e>
				stateuml = 3;
 800185a:	2303      	movs	r3, #3
 800185c:	77fb      	strb	r3, [r7, #31]
			}
			break;
 800185e:	e054      	b.n	800190a <I2C_MasterReceiveData+0x12e>
		case 3:  //enviar la direccion del esclavo
			slaveAddr = slaveAddr<<1;
 8001860:	7afb      	ldrb	r3, [r7, #11]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	72fb      	strb	r3, [r7, #11]
			slaveAddr |= (1U);			//read
 8001866:	7afb      	ldrb	r3, [r7, #11]
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	72fb      	strb	r3, [r7, #11]
			I2Cx->DR = slaveAddr;
 800186e:	7afa      	ldrb	r2, [r7, #11]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	611a      	str	r2, [r3, #16]
			stateuml = 4;
 8001874:	2304      	movs	r3, #4
 8001876:	77fb      	strb	r3, [r7, #31]
			break;
 8001878:	e047      	b.n	800190a <I2C_MasterReceiveData+0x12e>
		case 4:	//esperar la respuesta del esclavo
			if(I2Cx->SR1 & I2C_SR1_ADDR){
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d041      	beq.n	800190a <I2C_MasterReceiveData+0x12e>
				//limpiar los registros de estado
				temp = I2Cx->SR1;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	617b      	str	r3, [r7, #20]
				temp = I2Cx->SR2;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	617b      	str	r3, [r7, #20]
				(void)temp;
 8001892:	697b      	ldr	r3, [r7, #20]
				/*habilitar el acknowlegde signal*/
				I2Cx->CR1 |= I2C_CR1_ACK;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	601a      	str	r2, [r3, #0]
				stateuml = 5;
 80018a0:	2305      	movs	r3, #5
 80018a2:	77fb      	strb	r3, [r7, #31]
			}
			break;
 80018a4:	e031      	b.n	800190a <I2C_MasterReceiveData+0x12e>
		case 5: //recibir los datos
			if(Len>1){
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d911      	bls.n	80018d0 <I2C_MasterReceiveData+0xf4>
				//esperar el bit RXNE se ponga 1
				if(I2Cx->SR1 & I2C_SR1_RXNE){
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d028      	beq.n	800190a <I2C_MasterReceiveData+0x12e>
					*pData = I2Cx->DR;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	701a      	strb	r2, [r3, #0]
					pData++;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3301      	adds	r3, #1
 80018c6:	607b      	str	r3, [r7, #4]
					Len--;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	e01c      	b.n	800190a <I2C_MasterReceiveData+0x12e>
				}
			}else{
				/*deshabilitar el bit ACK*/
				I2Cx->CR1 &=~ I2C_CR1_ACK;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	601a      	str	r2, [r3, #0]
				/*esperamos el dato*/
				if(I2Cx->SR1 & I2C_SR1_RXNE){
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d010      	beq.n	800190a <I2C_MasterReceiveData+0x12e>
					//generar la condicion de parada
					I2Cx->CR1 |= I2C_CR1_STOP;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	601a      	str	r2, [r3, #0]
					//lee el dato
					*pData = I2Cx->DR;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	701a      	strb	r2, [r3, #0]
					Len--;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	3b01      	subs	r3, #1
 8001902:	603b      	str	r3, [r7, #0]
					return true;
 8001904:	2301      	movs	r3, #1
 8001906:	e010      	b.n	800192a <I2C_MasterReceiveData+0x14e>
	while((GetTicks() - tickstart)<timeout){
 8001908:	bf00      	nop
 800190a:	f7ff fce5 	bl	80012d8 <GetTicks>
 800190e:	4602      	mov	r2, r0
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001916:	429a      	cmp	r2, r3
 8001918:	f63f af76 	bhi.w	8001808 <I2C_MasterReceiveData+0x2c>
				}
			}
			break;
		}
	}
	I2Cx->CR1 |= I2C_CR1_STOP;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	601a      	str	r2, [r3, #0]

	return false;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop

08001934 <i2c_write_reg>:

bool i2c_write_reg(I2C_TypeDef *I2Cx, uint8_t slaveAddr,uint8_t reg_addr, uint8_t *pData, uint32_t Len, uint32_t timeout){
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af02      	add	r7, sp, #8
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	607b      	str	r3, [r7, #4]
 800193e:	460b      	mov	r3, r1
 8001940:	72fb      	strb	r3, [r7, #11]
 8001942:	4613      	mov	r3, r2
 8001944:	72bb      	strb	r3, [r7, #10]
	bool state = I2C_MasterSendData(I2Cx, slaveAddr, &reg_addr, 1, timeout);
 8001946:	f107 020a 	add.w	r2, r7, #10
 800194a:	7af9      	ldrb	r1, [r7, #11]
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2301      	movs	r3, #1
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff fe30 	bl	80015b8 <I2C_MasterSendData>
 8001958:	4603      	mov	r3, r0
 800195a:	75fb      	strb	r3, [r7, #23]
	if(state == true){
 800195c:	7dfb      	ldrb	r3, [r7, #23]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <i2c_write_reg+0x42>
		state = I2C_MasterSendData(I2Cx, slaveAddr, pData, Len, timeout);
 8001962:	7af9      	ldrb	r1, [r7, #11]
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f7ff fe23 	bl	80015b8 <I2C_MasterSendData>
 8001972:	4603      	mov	r3, r0
 8001974:	75fb      	strb	r3, [r7, #23]
	}
	return state;
 8001976:	7dfb      	ldrb	r3, [r7, #23]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <i2c_read_reg>:

bool i2c_read_reg(I2C_TypeDef *I2Cx, uint8_t slaveAddr, uint8_t reg_addr, uint8_t *pData, uint32_t Len, uint32_t timeout){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af02      	add	r7, sp, #8
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	72fb      	strb	r3, [r7, #11]
 800198e:	4613      	mov	r3, r2
 8001990:	72bb      	strb	r3, [r7, #10]

	if(I2C_MasterSendData(I2Cx, slaveAddr, &reg_addr, 1, timeout) == true){
 8001992:	f107 020a 	add.w	r2, r7, #10
 8001996:	7af9      	ldrb	r1, [r7, #11]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2301      	movs	r3, #1
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f7ff fe0a 	bl	80015b8 <I2C_MasterSendData>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d009      	beq.n	80019be <i2c_read_reg+0x3e>
		return I2C_MasterReceiveData(I2Cx, slaveAddr, pData, Len, timeout);
 80019aa:	7af9      	ldrb	r1, [r7, #11]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f7ff ff11 	bl	80017dc <I2C_MasterReceiveData>
 80019ba:	4603      	mov	r3, r0
 80019bc:	e000      	b.n	80019c0 <i2c_read_reg+0x40>
	}
	return false;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <GPIO_Config>:

/**
  * @fn configura los pines necesarios
	*/
void GPIO_Config(void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0

	/*PA6 -> EXTI */
	RCC->AHB1ENR |= GPIOX_CLOCK(MPU6050_IT);
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <GPIO_Config+0x78>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	4a1b      	ldr	r2, [pc, #108]	; (8001a40 <GPIO_Config+0x78>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_DIGITAL_INPUT, MPU6050_IT);
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <GPIO_Config+0x7c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a19      	ldr	r2, [pc, #100]	; (8001a44 <GPIO_Config+0x7c>)
 80019de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019e2:	6013      	str	r3, [r2, #0]

	GPIOX_PUPDR(MODE_PU_NONE, MPU6050_IT);
 80019e4:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <GPIO_Config+0x7c>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4a16      	ldr	r2, [pc, #88]	; (8001a44 <GPIO_Config+0x7c>)
 80019ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ee:	60d3      	str	r3, [r2, #12]

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <GPIO_Config+0x78>)
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <GPIO_Config+0x78>)
 80019f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019fa:	6453      	str	r3, [r2, #68]	; 0x44

	EXTI->IMR |= EXTI_IMR_IM6;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <GPIO_Config+0x80>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <GPIO_Config+0x80>)
 8001a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a06:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= EXTI_RTSR_TR6;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <GPIO_Config+0x80>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <GPIO_Config+0x80>)
 8001a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a12:	6093      	str	r3, [r2, #8]
	EXTI->PR |= EXTI_PR_PR6;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <GPIO_Config+0x80>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <GPIO_Config+0x80>)
 8001a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a1e:	6153      	str	r3, [r2, #20]

	SYSCFG->EXTICR[1] &=~ SYSCFG_EXTICR2_EXTI6;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <GPIO_Config+0x84>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4a09      	ldr	r2, [pc, #36]	; (8001a4c <GPIO_Config+0x84>)
 8001a26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a2a:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI6_PA;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <GPIO_Config+0x84>)
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <GPIO_Config+0x84>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a34:	2017      	movs	r0, #23
 8001a36:	f7ff fc69 	bl	800130c <__NVIC_EnableIRQ>

	return;
 8001a3a:	bf00      	nop
}
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40013c00 	.word	0x40013c00
 8001a4c:	40013800 	.word	0x40013800

08001a50 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR6){
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <EXTI9_5_IRQHandler+0x2c>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR6;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <EXTI9_5_IRQHandler+0x2c>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <EXTI9_5_IRQHandler+0x2c>)
 8001a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6a:	6153      	str	r3, [r2, #20]
		/*CODE HERE*/
		read = 1;
 8001a6c:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <EXTI9_5_IRQHandler+0x30>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

	}
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	40013c00 	.word	0x40013c00
 8001a80:	20000088 	.word	0x20000088

08001a84 <__io_putchar>:


int __io_putchar(int ch){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fc5a 	bl	8001348 <ITM_SendChar>
	return ch;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <SysTick_Handler>:
#include "delay.h"

/**
 * @brief ISR -> SYSTICK
 */
void SysTick_Handler(void){
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	af00      	add	r7, sp, #0
	TickInc_Callback();
 8001aa2:	f7ff fc25 	bl	80012f0 <TickInc_Callback>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e00a      	b.n	8001ad2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001abc:	f3af 8000 	nop.w
 8001ac0:	4601      	mov	r1, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1c5a      	adds	r2, r3, #1
 8001ac6:	60ba      	str	r2, [r7, #8]
 8001ac8:	b2ca      	uxtb	r2, r1
 8001aca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dbf0      	blt.n	8001abc <_read+0x12>
  }

  return len;
 8001ada:	687b      	ldr	r3, [r7, #4]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	e009      	b.n	8001b0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	60ba      	str	r2, [r7, #8]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ffc0 	bl	8001a84 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dbf1      	blt.n	8001af6 <_write+0x12>
  }
  return len;
 8001b12:	687b      	ldr	r3, [r7, #4]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_close>:

int _close(int file)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b44:	605a      	str	r2, [r3, #4]
  return 0;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_isatty>:

int _isatty(int file)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f000 f8d8 	bl	8001d68 <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20020000 	.word	0x20020000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	200000e0 	.word	0x200000e0
 8001bec:	200000f8 	.word	0x200000f8

08001bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <SystemInit+0x20>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <SystemInit+0x20>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	2302      	movs	r3, #2
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <SystemCoreClockUpdate+0xec>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d011      	beq.n	8001c62 <SystemCoreClockUpdate+0x4e>
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d844      	bhi.n	8001cce <SystemCoreClockUpdate+0xba>
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <SystemCoreClockUpdate+0x3e>
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	d004      	beq.n	8001c5a <SystemCoreClockUpdate+0x46>
 8001c50:	e03d      	b.n	8001cce <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001c52:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <SystemCoreClockUpdate+0xf0>)
 8001c54:	4a2c      	ldr	r2, [pc, #176]	; (8001d08 <SystemCoreClockUpdate+0xf4>)
 8001c56:	601a      	str	r2, [r3, #0]
      break;
 8001c58:	e03d      	b.n	8001cd6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001c5a:	4b2a      	ldr	r3, [pc, #168]	; (8001d04 <SystemCoreClockUpdate+0xf0>)
 8001c5c:	4a2b      	ldr	r2, [pc, #172]	; (8001d0c <SystemCoreClockUpdate+0xf8>)
 8001c5e:	601a      	str	r2, [r3, #0]
      break;
 8001c60:	e039      	b.n	8001cd6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001c62:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <SystemCoreClockUpdate+0xec>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0d9b      	lsrs	r3, r3, #22
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6e:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <SystemCoreClockUpdate+0xec>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c76:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00c      	beq.n	8001c98 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001c7e:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <SystemCoreClockUpdate+0xf8>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4a1e      	ldr	r2, [pc, #120]	; (8001d00 <SystemCoreClockUpdate+0xec>)
 8001c88:	6852      	ldr	r2, [r2, #4]
 8001c8a:	0992      	lsrs	r2, r2, #6
 8001c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	e00b      	b.n	8001cb0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001c98:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <SystemCoreClockUpdate+0xf4>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <SystemCoreClockUpdate+0xec>)
 8001ca2:	6852      	ldr	r2, [r2, #4]
 8001ca4:	0992      	lsrs	r2, r2, #6
 8001ca6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001caa:	fb02 f303 	mul.w	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <SystemCoreClockUpdate+0xec>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	0c1b      	lsrs	r3, r3, #16
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc8:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <SystemCoreClockUpdate+0xf0>)
 8001cca:	6013      	str	r3, [r2, #0]
      break;
 8001ccc:	e003      	b.n	8001cd6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <SystemCoreClockUpdate+0xf0>)
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <SystemCoreClockUpdate+0xf4>)
 8001cd2:	601a      	str	r2, [r3, #0]
      break;
 8001cd4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <SystemCoreClockUpdate+0xec>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <SystemCoreClockUpdate+0xfc>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <SystemCoreClockUpdate+0xf0>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf0:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <SystemCoreClockUpdate+0xf0>)
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40023800 	.word	0x40023800
 8001d04:	20000000 	.word	0x20000000
 8001d08:	00f42400 	.word	0x00f42400
 8001d0c:	017d7840 	.word	0x017d7840
 8001d10:	08002d10 	.word	0x08002d10

08001d14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d14:	480d      	ldr	r0, [pc, #52]	; (8001d4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d18:	f7ff ff6a 	bl	8001bf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d1c:	480c      	ldr	r0, [pc, #48]	; (8001d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d1e:	490d      	ldr	r1, [pc, #52]	; (8001d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <LoopForever+0xe>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d34:	4c0a      	ldr	r4, [pc, #40]	; (8001d60 <LoopForever+0x16>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d42:	f000 f817 	bl	8001d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d46:	f7ff fb27 	bl	8001398 <main>

08001d4a <LoopForever>:

LoopForever:
  b LoopForever
 8001d4a:	e7fe      	b.n	8001d4a <LoopForever>
  ldr   r0, =_estack
 8001d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d54:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d58:	08002dc0 	.word	0x08002dc0
  ldr r2, =_sbss
 8001d5c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d60:	200000f4 	.word	0x200000f4

08001d64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC_IRQHandler>
	...

08001d68 <__errno>:
 8001d68:	4b01      	ldr	r3, [pc, #4]	; (8001d70 <__errno+0x8>)
 8001d6a:	6818      	ldr	r0, [r3, #0]
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	20000004 	.word	0x20000004

08001d74 <__libc_init_array>:
 8001d74:	b570      	push	{r4, r5, r6, lr}
 8001d76:	4d0d      	ldr	r5, [pc, #52]	; (8001dac <__libc_init_array+0x38>)
 8001d78:	4c0d      	ldr	r4, [pc, #52]	; (8001db0 <__libc_init_array+0x3c>)
 8001d7a:	1b64      	subs	r4, r4, r5
 8001d7c:	10a4      	asrs	r4, r4, #2
 8001d7e:	2600      	movs	r6, #0
 8001d80:	42a6      	cmp	r6, r4
 8001d82:	d109      	bne.n	8001d98 <__libc_init_array+0x24>
 8001d84:	4d0b      	ldr	r5, [pc, #44]	; (8001db4 <__libc_init_array+0x40>)
 8001d86:	4c0c      	ldr	r4, [pc, #48]	; (8001db8 <__libc_init_array+0x44>)
 8001d88:	f000 ffae 	bl	8002ce8 <_init>
 8001d8c:	1b64      	subs	r4, r4, r5
 8001d8e:	10a4      	asrs	r4, r4, #2
 8001d90:	2600      	movs	r6, #0
 8001d92:	42a6      	cmp	r6, r4
 8001d94:	d105      	bne.n	8001da2 <__libc_init_array+0x2e>
 8001d96:	bd70      	pop	{r4, r5, r6, pc}
 8001d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d9c:	4798      	blx	r3
 8001d9e:	3601      	adds	r6, #1
 8001da0:	e7ee      	b.n	8001d80 <__libc_init_array+0xc>
 8001da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001da6:	4798      	blx	r3
 8001da8:	3601      	adds	r6, #1
 8001daa:	e7f2      	b.n	8001d92 <__libc_init_array+0x1e>
 8001dac:	08002db8 	.word	0x08002db8
 8001db0:	08002db8 	.word	0x08002db8
 8001db4:	08002db8 	.word	0x08002db8
 8001db8:	08002dbc 	.word	0x08002dbc

08001dbc <memset>:
 8001dbc:	4402      	add	r2, r0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d100      	bne.n	8001dc6 <memset+0xa>
 8001dc4:	4770      	bx	lr
 8001dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dca:	e7f9      	b.n	8001dc0 <memset+0x4>

08001dcc <iprintf>:
 8001dcc:	b40f      	push	{r0, r1, r2, r3}
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <iprintf+0x2c>)
 8001dd0:	b513      	push	{r0, r1, r4, lr}
 8001dd2:	681c      	ldr	r4, [r3, #0]
 8001dd4:	b124      	cbz	r4, 8001de0 <iprintf+0x14>
 8001dd6:	69a3      	ldr	r3, [r4, #24]
 8001dd8:	b913      	cbnz	r3, 8001de0 <iprintf+0x14>
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f000 f866 	bl	8001eac <__sinit>
 8001de0:	ab05      	add	r3, sp, #20
 8001de2:	9a04      	ldr	r2, [sp, #16]
 8001de4:	68a1      	ldr	r1, [r4, #8]
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	4620      	mov	r0, r4
 8001dea:	f000 f9bd 	bl	8002168 <_vfiprintf_r>
 8001dee:	b002      	add	sp, #8
 8001df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001df4:	b004      	add	sp, #16
 8001df6:	4770      	bx	lr
 8001df8:	20000004 	.word	0x20000004

08001dfc <std>:
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	b510      	push	{r4, lr}
 8001e00:	4604      	mov	r4, r0
 8001e02:	e9c0 3300 	strd	r3, r3, [r0]
 8001e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e0a:	6083      	str	r3, [r0, #8]
 8001e0c:	8181      	strh	r1, [r0, #12]
 8001e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8001e10:	81c2      	strh	r2, [r0, #14]
 8001e12:	6183      	str	r3, [r0, #24]
 8001e14:	4619      	mov	r1, r3
 8001e16:	2208      	movs	r2, #8
 8001e18:	305c      	adds	r0, #92	; 0x5c
 8001e1a:	f7ff ffcf 	bl	8001dbc <memset>
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <std+0x38>)
 8001e20:	6263      	str	r3, [r4, #36]	; 0x24
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <std+0x3c>)
 8001e24:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <std+0x40>)
 8001e28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <std+0x44>)
 8001e2c:	6224      	str	r4, [r4, #32]
 8001e2e:	6323      	str	r3, [r4, #48]	; 0x30
 8001e30:	bd10      	pop	{r4, pc}
 8001e32:	bf00      	nop
 8001e34:	08002711 	.word	0x08002711
 8001e38:	08002733 	.word	0x08002733
 8001e3c:	0800276b 	.word	0x0800276b
 8001e40:	0800278f 	.word	0x0800278f

08001e44 <_cleanup_r>:
 8001e44:	4901      	ldr	r1, [pc, #4]	; (8001e4c <_cleanup_r+0x8>)
 8001e46:	f000 b8af 	b.w	8001fa8 <_fwalk_reent>
 8001e4a:	bf00      	nop
 8001e4c:	08002a69 	.word	0x08002a69

08001e50 <__sfmoreglue>:
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	2268      	movs	r2, #104	; 0x68
 8001e54:	1e4d      	subs	r5, r1, #1
 8001e56:	4355      	muls	r5, r2
 8001e58:	460e      	mov	r6, r1
 8001e5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e5e:	f000 f8e5 	bl	800202c <_malloc_r>
 8001e62:	4604      	mov	r4, r0
 8001e64:	b140      	cbz	r0, 8001e78 <__sfmoreglue+0x28>
 8001e66:	2100      	movs	r1, #0
 8001e68:	e9c0 1600 	strd	r1, r6, [r0]
 8001e6c:	300c      	adds	r0, #12
 8001e6e:	60a0      	str	r0, [r4, #8]
 8001e70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e74:	f7ff ffa2 	bl	8001dbc <memset>
 8001e78:	4620      	mov	r0, r4
 8001e7a:	bd70      	pop	{r4, r5, r6, pc}

08001e7c <__sfp_lock_acquire>:
 8001e7c:	4801      	ldr	r0, [pc, #4]	; (8001e84 <__sfp_lock_acquire+0x8>)
 8001e7e:	f000 b8b3 	b.w	8001fe8 <__retarget_lock_acquire_recursive>
 8001e82:	bf00      	nop
 8001e84:	200000e5 	.word	0x200000e5

08001e88 <__sfp_lock_release>:
 8001e88:	4801      	ldr	r0, [pc, #4]	; (8001e90 <__sfp_lock_release+0x8>)
 8001e8a:	f000 b8ae 	b.w	8001fea <__retarget_lock_release_recursive>
 8001e8e:	bf00      	nop
 8001e90:	200000e5 	.word	0x200000e5

08001e94 <__sinit_lock_acquire>:
 8001e94:	4801      	ldr	r0, [pc, #4]	; (8001e9c <__sinit_lock_acquire+0x8>)
 8001e96:	f000 b8a7 	b.w	8001fe8 <__retarget_lock_acquire_recursive>
 8001e9a:	bf00      	nop
 8001e9c:	200000e6 	.word	0x200000e6

08001ea0 <__sinit_lock_release>:
 8001ea0:	4801      	ldr	r0, [pc, #4]	; (8001ea8 <__sinit_lock_release+0x8>)
 8001ea2:	f000 b8a2 	b.w	8001fea <__retarget_lock_release_recursive>
 8001ea6:	bf00      	nop
 8001ea8:	200000e6 	.word	0x200000e6

08001eac <__sinit>:
 8001eac:	b510      	push	{r4, lr}
 8001eae:	4604      	mov	r4, r0
 8001eb0:	f7ff fff0 	bl	8001e94 <__sinit_lock_acquire>
 8001eb4:	69a3      	ldr	r3, [r4, #24]
 8001eb6:	b11b      	cbz	r3, 8001ec0 <__sinit+0x14>
 8001eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ebc:	f7ff bff0 	b.w	8001ea0 <__sinit_lock_release>
 8001ec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001ec4:	6523      	str	r3, [r4, #80]	; 0x50
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <__sinit+0x68>)
 8001ec8:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <__sinit+0x6c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	bf04      	itt	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	61a3      	streq	r3, [r4, #24]
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f000 f820 	bl	8001f1c <__sfp>
 8001edc:	6060      	str	r0, [r4, #4]
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f000 f81c 	bl	8001f1c <__sfp>
 8001ee4:	60a0      	str	r0, [r4, #8]
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f000 f818 	bl	8001f1c <__sfp>
 8001eec:	2200      	movs	r2, #0
 8001eee:	60e0      	str	r0, [r4, #12]
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	6860      	ldr	r0, [r4, #4]
 8001ef4:	f7ff ff82 	bl	8001dfc <std>
 8001ef8:	68a0      	ldr	r0, [r4, #8]
 8001efa:	2201      	movs	r2, #1
 8001efc:	2109      	movs	r1, #9
 8001efe:	f7ff ff7d 	bl	8001dfc <std>
 8001f02:	68e0      	ldr	r0, [r4, #12]
 8001f04:	2202      	movs	r2, #2
 8001f06:	2112      	movs	r1, #18
 8001f08:	f7ff ff78 	bl	8001dfc <std>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	61a3      	str	r3, [r4, #24]
 8001f10:	e7d2      	b.n	8001eb8 <__sinit+0xc>
 8001f12:	bf00      	nop
 8001f14:	08002d20 	.word	0x08002d20
 8001f18:	08001e45 	.word	0x08001e45

08001f1c <__sfp>:
 8001f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1e:	4607      	mov	r7, r0
 8001f20:	f7ff ffac 	bl	8001e7c <__sfp_lock_acquire>
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <__sfp+0x84>)
 8001f26:	681e      	ldr	r6, [r3, #0]
 8001f28:	69b3      	ldr	r3, [r6, #24]
 8001f2a:	b913      	cbnz	r3, 8001f32 <__sfp+0x16>
 8001f2c:	4630      	mov	r0, r6
 8001f2e:	f7ff ffbd 	bl	8001eac <__sinit>
 8001f32:	3648      	adds	r6, #72	; 0x48
 8001f34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	d503      	bpl.n	8001f44 <__sfp+0x28>
 8001f3c:	6833      	ldr	r3, [r6, #0]
 8001f3e:	b30b      	cbz	r3, 8001f84 <__sfp+0x68>
 8001f40:	6836      	ldr	r6, [r6, #0]
 8001f42:	e7f7      	b.n	8001f34 <__sfp+0x18>
 8001f44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f48:	b9d5      	cbnz	r5, 8001f80 <__sfp+0x64>
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <__sfp+0x88>)
 8001f4c:	60e3      	str	r3, [r4, #12]
 8001f4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f52:	6665      	str	r5, [r4, #100]	; 0x64
 8001f54:	f000 f847 	bl	8001fe6 <__retarget_lock_init_recursive>
 8001f58:	f7ff ff96 	bl	8001e88 <__sfp_lock_release>
 8001f5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f64:	6025      	str	r5, [r4, #0]
 8001f66:	61a5      	str	r5, [r4, #24]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f70:	f7ff ff24 	bl	8001dbc <memset>
 8001f74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f80:	3468      	adds	r4, #104	; 0x68
 8001f82:	e7d9      	b.n	8001f38 <__sfp+0x1c>
 8001f84:	2104      	movs	r1, #4
 8001f86:	4638      	mov	r0, r7
 8001f88:	f7ff ff62 	bl	8001e50 <__sfmoreglue>
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	6030      	str	r0, [r6, #0]
 8001f90:	2800      	cmp	r0, #0
 8001f92:	d1d5      	bne.n	8001f40 <__sfp+0x24>
 8001f94:	f7ff ff78 	bl	8001e88 <__sfp_lock_release>
 8001f98:	230c      	movs	r3, #12
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	e7ee      	b.n	8001f7c <__sfp+0x60>
 8001f9e:	bf00      	nop
 8001fa0:	08002d20 	.word	0x08002d20
 8001fa4:	ffff0001 	.word	0xffff0001

08001fa8 <_fwalk_reent>:
 8001fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fac:	4606      	mov	r6, r0
 8001fae:	4688      	mov	r8, r1
 8001fb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fb4:	2700      	movs	r7, #0
 8001fb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fba:	f1b9 0901 	subs.w	r9, r9, #1
 8001fbe:	d505      	bpl.n	8001fcc <_fwalk_reent+0x24>
 8001fc0:	6824      	ldr	r4, [r4, #0]
 8001fc2:	2c00      	cmp	r4, #0
 8001fc4:	d1f7      	bne.n	8001fb6 <_fwalk_reent+0xe>
 8001fc6:	4638      	mov	r0, r7
 8001fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fcc:	89ab      	ldrh	r3, [r5, #12]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d907      	bls.n	8001fe2 <_fwalk_reent+0x3a>
 8001fd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	d003      	beq.n	8001fe2 <_fwalk_reent+0x3a>
 8001fda:	4629      	mov	r1, r5
 8001fdc:	4630      	mov	r0, r6
 8001fde:	47c0      	blx	r8
 8001fe0:	4307      	orrs	r7, r0
 8001fe2:	3568      	adds	r5, #104	; 0x68
 8001fe4:	e7e9      	b.n	8001fba <_fwalk_reent+0x12>

08001fe6 <__retarget_lock_init_recursive>:
 8001fe6:	4770      	bx	lr

08001fe8 <__retarget_lock_acquire_recursive>:
 8001fe8:	4770      	bx	lr

08001fea <__retarget_lock_release_recursive>:
 8001fea:	4770      	bx	lr

08001fec <sbrk_aligned>:
 8001fec:	b570      	push	{r4, r5, r6, lr}
 8001fee:	4e0e      	ldr	r6, [pc, #56]	; (8002028 <sbrk_aligned+0x3c>)
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	6831      	ldr	r1, [r6, #0]
 8001ff4:	4605      	mov	r5, r0
 8001ff6:	b911      	cbnz	r1, 8001ffe <sbrk_aligned+0x12>
 8001ff8:	f000 fb7a 	bl	80026f0 <_sbrk_r>
 8001ffc:	6030      	str	r0, [r6, #0]
 8001ffe:	4621      	mov	r1, r4
 8002000:	4628      	mov	r0, r5
 8002002:	f000 fb75 	bl	80026f0 <_sbrk_r>
 8002006:	1c43      	adds	r3, r0, #1
 8002008:	d00a      	beq.n	8002020 <sbrk_aligned+0x34>
 800200a:	1cc4      	adds	r4, r0, #3
 800200c:	f024 0403 	bic.w	r4, r4, #3
 8002010:	42a0      	cmp	r0, r4
 8002012:	d007      	beq.n	8002024 <sbrk_aligned+0x38>
 8002014:	1a21      	subs	r1, r4, r0
 8002016:	4628      	mov	r0, r5
 8002018:	f000 fb6a 	bl	80026f0 <_sbrk_r>
 800201c:	3001      	adds	r0, #1
 800201e:	d101      	bne.n	8002024 <sbrk_aligned+0x38>
 8002020:	f04f 34ff 	mov.w	r4, #4294967295
 8002024:	4620      	mov	r0, r4
 8002026:	bd70      	pop	{r4, r5, r6, pc}
 8002028:	200000ec 	.word	0x200000ec

0800202c <_malloc_r>:
 800202c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002030:	1ccd      	adds	r5, r1, #3
 8002032:	f025 0503 	bic.w	r5, r5, #3
 8002036:	3508      	adds	r5, #8
 8002038:	2d0c      	cmp	r5, #12
 800203a:	bf38      	it	cc
 800203c:	250c      	movcc	r5, #12
 800203e:	2d00      	cmp	r5, #0
 8002040:	4607      	mov	r7, r0
 8002042:	db01      	blt.n	8002048 <_malloc_r+0x1c>
 8002044:	42a9      	cmp	r1, r5
 8002046:	d905      	bls.n	8002054 <_malloc_r+0x28>
 8002048:	230c      	movs	r3, #12
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	2600      	movs	r6, #0
 800204e:	4630      	mov	r0, r6
 8002050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002054:	4e2e      	ldr	r6, [pc, #184]	; (8002110 <_malloc_r+0xe4>)
 8002056:	f000 fdbb 	bl	8002bd0 <__malloc_lock>
 800205a:	6833      	ldr	r3, [r6, #0]
 800205c:	461c      	mov	r4, r3
 800205e:	bb34      	cbnz	r4, 80020ae <_malloc_r+0x82>
 8002060:	4629      	mov	r1, r5
 8002062:	4638      	mov	r0, r7
 8002064:	f7ff ffc2 	bl	8001fec <sbrk_aligned>
 8002068:	1c43      	adds	r3, r0, #1
 800206a:	4604      	mov	r4, r0
 800206c:	d14d      	bne.n	800210a <_malloc_r+0xde>
 800206e:	6834      	ldr	r4, [r6, #0]
 8002070:	4626      	mov	r6, r4
 8002072:	2e00      	cmp	r6, #0
 8002074:	d140      	bne.n	80020f8 <_malloc_r+0xcc>
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	4631      	mov	r1, r6
 800207a:	4638      	mov	r0, r7
 800207c:	eb04 0803 	add.w	r8, r4, r3
 8002080:	f000 fb36 	bl	80026f0 <_sbrk_r>
 8002084:	4580      	cmp	r8, r0
 8002086:	d13a      	bne.n	80020fe <_malloc_r+0xd2>
 8002088:	6821      	ldr	r1, [r4, #0]
 800208a:	3503      	adds	r5, #3
 800208c:	1a6d      	subs	r5, r5, r1
 800208e:	f025 0503 	bic.w	r5, r5, #3
 8002092:	3508      	adds	r5, #8
 8002094:	2d0c      	cmp	r5, #12
 8002096:	bf38      	it	cc
 8002098:	250c      	movcc	r5, #12
 800209a:	4629      	mov	r1, r5
 800209c:	4638      	mov	r0, r7
 800209e:	f7ff ffa5 	bl	8001fec <sbrk_aligned>
 80020a2:	3001      	adds	r0, #1
 80020a4:	d02b      	beq.n	80020fe <_malloc_r+0xd2>
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	442b      	add	r3, r5
 80020aa:	6023      	str	r3, [r4, #0]
 80020ac:	e00e      	b.n	80020cc <_malloc_r+0xa0>
 80020ae:	6822      	ldr	r2, [r4, #0]
 80020b0:	1b52      	subs	r2, r2, r5
 80020b2:	d41e      	bmi.n	80020f2 <_malloc_r+0xc6>
 80020b4:	2a0b      	cmp	r2, #11
 80020b6:	d916      	bls.n	80020e6 <_malloc_r+0xba>
 80020b8:	1961      	adds	r1, r4, r5
 80020ba:	42a3      	cmp	r3, r4
 80020bc:	6025      	str	r5, [r4, #0]
 80020be:	bf18      	it	ne
 80020c0:	6059      	strne	r1, [r3, #4]
 80020c2:	6863      	ldr	r3, [r4, #4]
 80020c4:	bf08      	it	eq
 80020c6:	6031      	streq	r1, [r6, #0]
 80020c8:	5162      	str	r2, [r4, r5]
 80020ca:	604b      	str	r3, [r1, #4]
 80020cc:	4638      	mov	r0, r7
 80020ce:	f104 060b 	add.w	r6, r4, #11
 80020d2:	f000 fd83 	bl	8002bdc <__malloc_unlock>
 80020d6:	f026 0607 	bic.w	r6, r6, #7
 80020da:	1d23      	adds	r3, r4, #4
 80020dc:	1af2      	subs	r2, r6, r3
 80020de:	d0b6      	beq.n	800204e <_malloc_r+0x22>
 80020e0:	1b9b      	subs	r3, r3, r6
 80020e2:	50a3      	str	r3, [r4, r2]
 80020e4:	e7b3      	b.n	800204e <_malloc_r+0x22>
 80020e6:	6862      	ldr	r2, [r4, #4]
 80020e8:	42a3      	cmp	r3, r4
 80020ea:	bf0c      	ite	eq
 80020ec:	6032      	streq	r2, [r6, #0]
 80020ee:	605a      	strne	r2, [r3, #4]
 80020f0:	e7ec      	b.n	80020cc <_malloc_r+0xa0>
 80020f2:	4623      	mov	r3, r4
 80020f4:	6864      	ldr	r4, [r4, #4]
 80020f6:	e7b2      	b.n	800205e <_malloc_r+0x32>
 80020f8:	4634      	mov	r4, r6
 80020fa:	6876      	ldr	r6, [r6, #4]
 80020fc:	e7b9      	b.n	8002072 <_malloc_r+0x46>
 80020fe:	230c      	movs	r3, #12
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	4638      	mov	r0, r7
 8002104:	f000 fd6a 	bl	8002bdc <__malloc_unlock>
 8002108:	e7a1      	b.n	800204e <_malloc_r+0x22>
 800210a:	6025      	str	r5, [r4, #0]
 800210c:	e7de      	b.n	80020cc <_malloc_r+0xa0>
 800210e:	bf00      	nop
 8002110:	200000e8 	.word	0x200000e8

08002114 <__sfputc_r>:
 8002114:	6893      	ldr	r3, [r2, #8]
 8002116:	3b01      	subs	r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	b410      	push	{r4}
 800211c:	6093      	str	r3, [r2, #8]
 800211e:	da08      	bge.n	8002132 <__sfputc_r+0x1e>
 8002120:	6994      	ldr	r4, [r2, #24]
 8002122:	42a3      	cmp	r3, r4
 8002124:	db01      	blt.n	800212a <__sfputc_r+0x16>
 8002126:	290a      	cmp	r1, #10
 8002128:	d103      	bne.n	8002132 <__sfputc_r+0x1e>
 800212a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800212e:	f000 bb33 	b.w	8002798 <__swbuf_r>
 8002132:	6813      	ldr	r3, [r2, #0]
 8002134:	1c58      	adds	r0, r3, #1
 8002136:	6010      	str	r0, [r2, #0]
 8002138:	7019      	strb	r1, [r3, #0]
 800213a:	4608      	mov	r0, r1
 800213c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002140:	4770      	bx	lr

08002142 <__sfputs_r>:
 8002142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002144:	4606      	mov	r6, r0
 8002146:	460f      	mov	r7, r1
 8002148:	4614      	mov	r4, r2
 800214a:	18d5      	adds	r5, r2, r3
 800214c:	42ac      	cmp	r4, r5
 800214e:	d101      	bne.n	8002154 <__sfputs_r+0x12>
 8002150:	2000      	movs	r0, #0
 8002152:	e007      	b.n	8002164 <__sfputs_r+0x22>
 8002154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002158:	463a      	mov	r2, r7
 800215a:	4630      	mov	r0, r6
 800215c:	f7ff ffda 	bl	8002114 <__sfputc_r>
 8002160:	1c43      	adds	r3, r0, #1
 8002162:	d1f3      	bne.n	800214c <__sfputs_r+0xa>
 8002164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002168 <_vfiprintf_r>:
 8002168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800216c:	460d      	mov	r5, r1
 800216e:	b09d      	sub	sp, #116	; 0x74
 8002170:	4614      	mov	r4, r2
 8002172:	4698      	mov	r8, r3
 8002174:	4606      	mov	r6, r0
 8002176:	b118      	cbz	r0, 8002180 <_vfiprintf_r+0x18>
 8002178:	6983      	ldr	r3, [r0, #24]
 800217a:	b90b      	cbnz	r3, 8002180 <_vfiprintf_r+0x18>
 800217c:	f7ff fe96 	bl	8001eac <__sinit>
 8002180:	4b89      	ldr	r3, [pc, #548]	; (80023a8 <_vfiprintf_r+0x240>)
 8002182:	429d      	cmp	r5, r3
 8002184:	d11b      	bne.n	80021be <_vfiprintf_r+0x56>
 8002186:	6875      	ldr	r5, [r6, #4]
 8002188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800218a:	07d9      	lsls	r1, r3, #31
 800218c:	d405      	bmi.n	800219a <_vfiprintf_r+0x32>
 800218e:	89ab      	ldrh	r3, [r5, #12]
 8002190:	059a      	lsls	r2, r3, #22
 8002192:	d402      	bmi.n	800219a <_vfiprintf_r+0x32>
 8002194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002196:	f7ff ff27 	bl	8001fe8 <__retarget_lock_acquire_recursive>
 800219a:	89ab      	ldrh	r3, [r5, #12]
 800219c:	071b      	lsls	r3, r3, #28
 800219e:	d501      	bpl.n	80021a4 <_vfiprintf_r+0x3c>
 80021a0:	692b      	ldr	r3, [r5, #16]
 80021a2:	b9eb      	cbnz	r3, 80021e0 <_vfiprintf_r+0x78>
 80021a4:	4629      	mov	r1, r5
 80021a6:	4630      	mov	r0, r6
 80021a8:	f000 fb5a 	bl	8002860 <__swsetup_r>
 80021ac:	b1c0      	cbz	r0, 80021e0 <_vfiprintf_r+0x78>
 80021ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021b0:	07dc      	lsls	r4, r3, #31
 80021b2:	d50e      	bpl.n	80021d2 <_vfiprintf_r+0x6a>
 80021b4:	f04f 30ff 	mov.w	r0, #4294967295
 80021b8:	b01d      	add	sp, #116	; 0x74
 80021ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021be:	4b7b      	ldr	r3, [pc, #492]	; (80023ac <_vfiprintf_r+0x244>)
 80021c0:	429d      	cmp	r5, r3
 80021c2:	d101      	bne.n	80021c8 <_vfiprintf_r+0x60>
 80021c4:	68b5      	ldr	r5, [r6, #8]
 80021c6:	e7df      	b.n	8002188 <_vfiprintf_r+0x20>
 80021c8:	4b79      	ldr	r3, [pc, #484]	; (80023b0 <_vfiprintf_r+0x248>)
 80021ca:	429d      	cmp	r5, r3
 80021cc:	bf08      	it	eq
 80021ce:	68f5      	ldreq	r5, [r6, #12]
 80021d0:	e7da      	b.n	8002188 <_vfiprintf_r+0x20>
 80021d2:	89ab      	ldrh	r3, [r5, #12]
 80021d4:	0598      	lsls	r0, r3, #22
 80021d6:	d4ed      	bmi.n	80021b4 <_vfiprintf_r+0x4c>
 80021d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021da:	f7ff ff06 	bl	8001fea <__retarget_lock_release_recursive>
 80021de:	e7e9      	b.n	80021b4 <_vfiprintf_r+0x4c>
 80021e0:	2300      	movs	r3, #0
 80021e2:	9309      	str	r3, [sp, #36]	; 0x24
 80021e4:	2320      	movs	r3, #32
 80021e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80021ee:	2330      	movs	r3, #48	; 0x30
 80021f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80023b4 <_vfiprintf_r+0x24c>
 80021f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021f8:	f04f 0901 	mov.w	r9, #1
 80021fc:	4623      	mov	r3, r4
 80021fe:	469a      	mov	sl, r3
 8002200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002204:	b10a      	cbz	r2, 800220a <_vfiprintf_r+0xa2>
 8002206:	2a25      	cmp	r2, #37	; 0x25
 8002208:	d1f9      	bne.n	80021fe <_vfiprintf_r+0x96>
 800220a:	ebba 0b04 	subs.w	fp, sl, r4
 800220e:	d00b      	beq.n	8002228 <_vfiprintf_r+0xc0>
 8002210:	465b      	mov	r3, fp
 8002212:	4622      	mov	r2, r4
 8002214:	4629      	mov	r1, r5
 8002216:	4630      	mov	r0, r6
 8002218:	f7ff ff93 	bl	8002142 <__sfputs_r>
 800221c:	3001      	adds	r0, #1
 800221e:	f000 80aa 	beq.w	8002376 <_vfiprintf_r+0x20e>
 8002222:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002224:	445a      	add	r2, fp
 8002226:	9209      	str	r2, [sp, #36]	; 0x24
 8002228:	f89a 3000 	ldrb.w	r3, [sl]
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80a2 	beq.w	8002376 <_vfiprintf_r+0x20e>
 8002232:	2300      	movs	r3, #0
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800223c:	f10a 0a01 	add.w	sl, sl, #1
 8002240:	9304      	str	r3, [sp, #16]
 8002242:	9307      	str	r3, [sp, #28]
 8002244:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002248:	931a      	str	r3, [sp, #104]	; 0x68
 800224a:	4654      	mov	r4, sl
 800224c:	2205      	movs	r2, #5
 800224e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002252:	4858      	ldr	r0, [pc, #352]	; (80023b4 <_vfiprintf_r+0x24c>)
 8002254:	f7fd ffcc 	bl	80001f0 <memchr>
 8002258:	9a04      	ldr	r2, [sp, #16]
 800225a:	b9d8      	cbnz	r0, 8002294 <_vfiprintf_r+0x12c>
 800225c:	06d1      	lsls	r1, r2, #27
 800225e:	bf44      	itt	mi
 8002260:	2320      	movmi	r3, #32
 8002262:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002266:	0713      	lsls	r3, r2, #28
 8002268:	bf44      	itt	mi
 800226a:	232b      	movmi	r3, #43	; 0x2b
 800226c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002270:	f89a 3000 	ldrb.w	r3, [sl]
 8002274:	2b2a      	cmp	r3, #42	; 0x2a
 8002276:	d015      	beq.n	80022a4 <_vfiprintf_r+0x13c>
 8002278:	9a07      	ldr	r2, [sp, #28]
 800227a:	4654      	mov	r4, sl
 800227c:	2000      	movs	r0, #0
 800227e:	f04f 0c0a 	mov.w	ip, #10
 8002282:	4621      	mov	r1, r4
 8002284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002288:	3b30      	subs	r3, #48	; 0x30
 800228a:	2b09      	cmp	r3, #9
 800228c:	d94e      	bls.n	800232c <_vfiprintf_r+0x1c4>
 800228e:	b1b0      	cbz	r0, 80022be <_vfiprintf_r+0x156>
 8002290:	9207      	str	r2, [sp, #28]
 8002292:	e014      	b.n	80022be <_vfiprintf_r+0x156>
 8002294:	eba0 0308 	sub.w	r3, r0, r8
 8002298:	fa09 f303 	lsl.w	r3, r9, r3
 800229c:	4313      	orrs	r3, r2
 800229e:	9304      	str	r3, [sp, #16]
 80022a0:	46a2      	mov	sl, r4
 80022a2:	e7d2      	b.n	800224a <_vfiprintf_r+0xe2>
 80022a4:	9b03      	ldr	r3, [sp, #12]
 80022a6:	1d19      	adds	r1, r3, #4
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	9103      	str	r1, [sp, #12]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	bfbb      	ittet	lt
 80022b0:	425b      	neglt	r3, r3
 80022b2:	f042 0202 	orrlt.w	r2, r2, #2
 80022b6:	9307      	strge	r3, [sp, #28]
 80022b8:	9307      	strlt	r3, [sp, #28]
 80022ba:	bfb8      	it	lt
 80022bc:	9204      	strlt	r2, [sp, #16]
 80022be:	7823      	ldrb	r3, [r4, #0]
 80022c0:	2b2e      	cmp	r3, #46	; 0x2e
 80022c2:	d10c      	bne.n	80022de <_vfiprintf_r+0x176>
 80022c4:	7863      	ldrb	r3, [r4, #1]
 80022c6:	2b2a      	cmp	r3, #42	; 0x2a
 80022c8:	d135      	bne.n	8002336 <_vfiprintf_r+0x1ce>
 80022ca:	9b03      	ldr	r3, [sp, #12]
 80022cc:	1d1a      	adds	r2, r3, #4
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	9203      	str	r2, [sp, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	bfb8      	it	lt
 80022d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80022da:	3402      	adds	r4, #2
 80022dc:	9305      	str	r3, [sp, #20]
 80022de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80023c4 <_vfiprintf_r+0x25c>
 80022e2:	7821      	ldrb	r1, [r4, #0]
 80022e4:	2203      	movs	r2, #3
 80022e6:	4650      	mov	r0, sl
 80022e8:	f7fd ff82 	bl	80001f0 <memchr>
 80022ec:	b140      	cbz	r0, 8002300 <_vfiprintf_r+0x198>
 80022ee:	2340      	movs	r3, #64	; 0x40
 80022f0:	eba0 000a 	sub.w	r0, r0, sl
 80022f4:	fa03 f000 	lsl.w	r0, r3, r0
 80022f8:	9b04      	ldr	r3, [sp, #16]
 80022fa:	4303      	orrs	r3, r0
 80022fc:	3401      	adds	r4, #1
 80022fe:	9304      	str	r3, [sp, #16]
 8002300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002304:	482c      	ldr	r0, [pc, #176]	; (80023b8 <_vfiprintf_r+0x250>)
 8002306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800230a:	2206      	movs	r2, #6
 800230c:	f7fd ff70 	bl	80001f0 <memchr>
 8002310:	2800      	cmp	r0, #0
 8002312:	d03f      	beq.n	8002394 <_vfiprintf_r+0x22c>
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <_vfiprintf_r+0x254>)
 8002316:	bb1b      	cbnz	r3, 8002360 <_vfiprintf_r+0x1f8>
 8002318:	9b03      	ldr	r3, [sp, #12]
 800231a:	3307      	adds	r3, #7
 800231c:	f023 0307 	bic.w	r3, r3, #7
 8002320:	3308      	adds	r3, #8
 8002322:	9303      	str	r3, [sp, #12]
 8002324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002326:	443b      	add	r3, r7
 8002328:	9309      	str	r3, [sp, #36]	; 0x24
 800232a:	e767      	b.n	80021fc <_vfiprintf_r+0x94>
 800232c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002330:	460c      	mov	r4, r1
 8002332:	2001      	movs	r0, #1
 8002334:	e7a5      	b.n	8002282 <_vfiprintf_r+0x11a>
 8002336:	2300      	movs	r3, #0
 8002338:	3401      	adds	r4, #1
 800233a:	9305      	str	r3, [sp, #20]
 800233c:	4619      	mov	r1, r3
 800233e:	f04f 0c0a 	mov.w	ip, #10
 8002342:	4620      	mov	r0, r4
 8002344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002348:	3a30      	subs	r2, #48	; 0x30
 800234a:	2a09      	cmp	r2, #9
 800234c:	d903      	bls.n	8002356 <_vfiprintf_r+0x1ee>
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0c5      	beq.n	80022de <_vfiprintf_r+0x176>
 8002352:	9105      	str	r1, [sp, #20]
 8002354:	e7c3      	b.n	80022de <_vfiprintf_r+0x176>
 8002356:	fb0c 2101 	mla	r1, ip, r1, r2
 800235a:	4604      	mov	r4, r0
 800235c:	2301      	movs	r3, #1
 800235e:	e7f0      	b.n	8002342 <_vfiprintf_r+0x1da>
 8002360:	ab03      	add	r3, sp, #12
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	462a      	mov	r2, r5
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <_vfiprintf_r+0x258>)
 8002368:	a904      	add	r1, sp, #16
 800236a:	4630      	mov	r0, r6
 800236c:	f3af 8000 	nop.w
 8002370:	4607      	mov	r7, r0
 8002372:	1c78      	adds	r0, r7, #1
 8002374:	d1d6      	bne.n	8002324 <_vfiprintf_r+0x1bc>
 8002376:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002378:	07d9      	lsls	r1, r3, #31
 800237a:	d405      	bmi.n	8002388 <_vfiprintf_r+0x220>
 800237c:	89ab      	ldrh	r3, [r5, #12]
 800237e:	059a      	lsls	r2, r3, #22
 8002380:	d402      	bmi.n	8002388 <_vfiprintf_r+0x220>
 8002382:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002384:	f7ff fe31 	bl	8001fea <__retarget_lock_release_recursive>
 8002388:	89ab      	ldrh	r3, [r5, #12]
 800238a:	065b      	lsls	r3, r3, #25
 800238c:	f53f af12 	bmi.w	80021b4 <_vfiprintf_r+0x4c>
 8002390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002392:	e711      	b.n	80021b8 <_vfiprintf_r+0x50>
 8002394:	ab03      	add	r3, sp, #12
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	462a      	mov	r2, r5
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <_vfiprintf_r+0x258>)
 800239c:	a904      	add	r1, sp, #16
 800239e:	4630      	mov	r0, r6
 80023a0:	f000 f880 	bl	80024a4 <_printf_i>
 80023a4:	e7e4      	b.n	8002370 <_vfiprintf_r+0x208>
 80023a6:	bf00      	nop
 80023a8:	08002d44 	.word	0x08002d44
 80023ac:	08002d64 	.word	0x08002d64
 80023b0:	08002d24 	.word	0x08002d24
 80023b4:	08002d84 	.word	0x08002d84
 80023b8:	08002d8e 	.word	0x08002d8e
 80023bc:	00000000 	.word	0x00000000
 80023c0:	08002143 	.word	0x08002143
 80023c4:	08002d8a 	.word	0x08002d8a

080023c8 <_printf_common>:
 80023c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023cc:	4616      	mov	r6, r2
 80023ce:	4699      	mov	r9, r3
 80023d0:	688a      	ldr	r2, [r1, #8]
 80023d2:	690b      	ldr	r3, [r1, #16]
 80023d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023d8:	4293      	cmp	r3, r2
 80023da:	bfb8      	it	lt
 80023dc:	4613      	movlt	r3, r2
 80023de:	6033      	str	r3, [r6, #0]
 80023e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023e4:	4607      	mov	r7, r0
 80023e6:	460c      	mov	r4, r1
 80023e8:	b10a      	cbz	r2, 80023ee <_printf_common+0x26>
 80023ea:	3301      	adds	r3, #1
 80023ec:	6033      	str	r3, [r6, #0]
 80023ee:	6823      	ldr	r3, [r4, #0]
 80023f0:	0699      	lsls	r1, r3, #26
 80023f2:	bf42      	ittt	mi
 80023f4:	6833      	ldrmi	r3, [r6, #0]
 80023f6:	3302      	addmi	r3, #2
 80023f8:	6033      	strmi	r3, [r6, #0]
 80023fa:	6825      	ldr	r5, [r4, #0]
 80023fc:	f015 0506 	ands.w	r5, r5, #6
 8002400:	d106      	bne.n	8002410 <_printf_common+0x48>
 8002402:	f104 0a19 	add.w	sl, r4, #25
 8002406:	68e3      	ldr	r3, [r4, #12]
 8002408:	6832      	ldr	r2, [r6, #0]
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	42ab      	cmp	r3, r5
 800240e:	dc26      	bgt.n	800245e <_printf_common+0x96>
 8002410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002414:	1e13      	subs	r3, r2, #0
 8002416:	6822      	ldr	r2, [r4, #0]
 8002418:	bf18      	it	ne
 800241a:	2301      	movne	r3, #1
 800241c:	0692      	lsls	r2, r2, #26
 800241e:	d42b      	bmi.n	8002478 <_printf_common+0xb0>
 8002420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002424:	4649      	mov	r1, r9
 8002426:	4638      	mov	r0, r7
 8002428:	47c0      	blx	r8
 800242a:	3001      	adds	r0, #1
 800242c:	d01e      	beq.n	800246c <_printf_common+0xa4>
 800242e:	6823      	ldr	r3, [r4, #0]
 8002430:	68e5      	ldr	r5, [r4, #12]
 8002432:	6832      	ldr	r2, [r6, #0]
 8002434:	f003 0306 	and.w	r3, r3, #6
 8002438:	2b04      	cmp	r3, #4
 800243a:	bf08      	it	eq
 800243c:	1aad      	subeq	r5, r5, r2
 800243e:	68a3      	ldr	r3, [r4, #8]
 8002440:	6922      	ldr	r2, [r4, #16]
 8002442:	bf0c      	ite	eq
 8002444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002448:	2500      	movne	r5, #0
 800244a:	4293      	cmp	r3, r2
 800244c:	bfc4      	itt	gt
 800244e:	1a9b      	subgt	r3, r3, r2
 8002450:	18ed      	addgt	r5, r5, r3
 8002452:	2600      	movs	r6, #0
 8002454:	341a      	adds	r4, #26
 8002456:	42b5      	cmp	r5, r6
 8002458:	d11a      	bne.n	8002490 <_printf_common+0xc8>
 800245a:	2000      	movs	r0, #0
 800245c:	e008      	b.n	8002470 <_printf_common+0xa8>
 800245e:	2301      	movs	r3, #1
 8002460:	4652      	mov	r2, sl
 8002462:	4649      	mov	r1, r9
 8002464:	4638      	mov	r0, r7
 8002466:	47c0      	blx	r8
 8002468:	3001      	adds	r0, #1
 800246a:	d103      	bne.n	8002474 <_printf_common+0xac>
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002474:	3501      	adds	r5, #1
 8002476:	e7c6      	b.n	8002406 <_printf_common+0x3e>
 8002478:	18e1      	adds	r1, r4, r3
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	2030      	movs	r0, #48	; 0x30
 800247e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002482:	4422      	add	r2, r4
 8002484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800248c:	3302      	adds	r3, #2
 800248e:	e7c7      	b.n	8002420 <_printf_common+0x58>
 8002490:	2301      	movs	r3, #1
 8002492:	4622      	mov	r2, r4
 8002494:	4649      	mov	r1, r9
 8002496:	4638      	mov	r0, r7
 8002498:	47c0      	blx	r8
 800249a:	3001      	adds	r0, #1
 800249c:	d0e6      	beq.n	800246c <_printf_common+0xa4>
 800249e:	3601      	adds	r6, #1
 80024a0:	e7d9      	b.n	8002456 <_printf_common+0x8e>
	...

080024a4 <_printf_i>:
 80024a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024a8:	7e0f      	ldrb	r7, [r1, #24]
 80024aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80024ac:	2f78      	cmp	r7, #120	; 0x78
 80024ae:	4691      	mov	r9, r2
 80024b0:	4680      	mov	r8, r0
 80024b2:	460c      	mov	r4, r1
 80024b4:	469a      	mov	sl, r3
 80024b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80024ba:	d807      	bhi.n	80024cc <_printf_i+0x28>
 80024bc:	2f62      	cmp	r7, #98	; 0x62
 80024be:	d80a      	bhi.n	80024d6 <_printf_i+0x32>
 80024c0:	2f00      	cmp	r7, #0
 80024c2:	f000 80d8 	beq.w	8002676 <_printf_i+0x1d2>
 80024c6:	2f58      	cmp	r7, #88	; 0x58
 80024c8:	f000 80a3 	beq.w	8002612 <_printf_i+0x16e>
 80024cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024d4:	e03a      	b.n	800254c <_printf_i+0xa8>
 80024d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024da:	2b15      	cmp	r3, #21
 80024dc:	d8f6      	bhi.n	80024cc <_printf_i+0x28>
 80024de:	a101      	add	r1, pc, #4	; (adr r1, 80024e4 <_printf_i+0x40>)
 80024e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024e4:	0800253d 	.word	0x0800253d
 80024e8:	08002551 	.word	0x08002551
 80024ec:	080024cd 	.word	0x080024cd
 80024f0:	080024cd 	.word	0x080024cd
 80024f4:	080024cd 	.word	0x080024cd
 80024f8:	080024cd 	.word	0x080024cd
 80024fc:	08002551 	.word	0x08002551
 8002500:	080024cd 	.word	0x080024cd
 8002504:	080024cd 	.word	0x080024cd
 8002508:	080024cd 	.word	0x080024cd
 800250c:	080024cd 	.word	0x080024cd
 8002510:	0800265d 	.word	0x0800265d
 8002514:	08002581 	.word	0x08002581
 8002518:	0800263f 	.word	0x0800263f
 800251c:	080024cd 	.word	0x080024cd
 8002520:	080024cd 	.word	0x080024cd
 8002524:	0800267f 	.word	0x0800267f
 8002528:	080024cd 	.word	0x080024cd
 800252c:	08002581 	.word	0x08002581
 8002530:	080024cd 	.word	0x080024cd
 8002534:	080024cd 	.word	0x080024cd
 8002538:	08002647 	.word	0x08002647
 800253c:	682b      	ldr	r3, [r5, #0]
 800253e:	1d1a      	adds	r2, r3, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	602a      	str	r2, [r5, #0]
 8002544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800254c:	2301      	movs	r3, #1
 800254e:	e0a3      	b.n	8002698 <_printf_i+0x1f4>
 8002550:	6820      	ldr	r0, [r4, #0]
 8002552:	6829      	ldr	r1, [r5, #0]
 8002554:	0606      	lsls	r6, r0, #24
 8002556:	f101 0304 	add.w	r3, r1, #4
 800255a:	d50a      	bpl.n	8002572 <_printf_i+0xce>
 800255c:	680e      	ldr	r6, [r1, #0]
 800255e:	602b      	str	r3, [r5, #0]
 8002560:	2e00      	cmp	r6, #0
 8002562:	da03      	bge.n	800256c <_printf_i+0xc8>
 8002564:	232d      	movs	r3, #45	; 0x2d
 8002566:	4276      	negs	r6, r6
 8002568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800256c:	485e      	ldr	r0, [pc, #376]	; (80026e8 <_printf_i+0x244>)
 800256e:	230a      	movs	r3, #10
 8002570:	e019      	b.n	80025a6 <_printf_i+0x102>
 8002572:	680e      	ldr	r6, [r1, #0]
 8002574:	602b      	str	r3, [r5, #0]
 8002576:	f010 0f40 	tst.w	r0, #64	; 0x40
 800257a:	bf18      	it	ne
 800257c:	b236      	sxthne	r6, r6
 800257e:	e7ef      	b.n	8002560 <_printf_i+0xbc>
 8002580:	682b      	ldr	r3, [r5, #0]
 8002582:	6820      	ldr	r0, [r4, #0]
 8002584:	1d19      	adds	r1, r3, #4
 8002586:	6029      	str	r1, [r5, #0]
 8002588:	0601      	lsls	r1, r0, #24
 800258a:	d501      	bpl.n	8002590 <_printf_i+0xec>
 800258c:	681e      	ldr	r6, [r3, #0]
 800258e:	e002      	b.n	8002596 <_printf_i+0xf2>
 8002590:	0646      	lsls	r6, r0, #25
 8002592:	d5fb      	bpl.n	800258c <_printf_i+0xe8>
 8002594:	881e      	ldrh	r6, [r3, #0]
 8002596:	4854      	ldr	r0, [pc, #336]	; (80026e8 <_printf_i+0x244>)
 8002598:	2f6f      	cmp	r7, #111	; 0x6f
 800259a:	bf0c      	ite	eq
 800259c:	2308      	moveq	r3, #8
 800259e:	230a      	movne	r3, #10
 80025a0:	2100      	movs	r1, #0
 80025a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025a6:	6865      	ldr	r5, [r4, #4]
 80025a8:	60a5      	str	r5, [r4, #8]
 80025aa:	2d00      	cmp	r5, #0
 80025ac:	bfa2      	ittt	ge
 80025ae:	6821      	ldrge	r1, [r4, #0]
 80025b0:	f021 0104 	bicge.w	r1, r1, #4
 80025b4:	6021      	strge	r1, [r4, #0]
 80025b6:	b90e      	cbnz	r6, 80025bc <_printf_i+0x118>
 80025b8:	2d00      	cmp	r5, #0
 80025ba:	d04d      	beq.n	8002658 <_printf_i+0x1b4>
 80025bc:	4615      	mov	r5, r2
 80025be:	fbb6 f1f3 	udiv	r1, r6, r3
 80025c2:	fb03 6711 	mls	r7, r3, r1, r6
 80025c6:	5dc7      	ldrb	r7, [r0, r7]
 80025c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80025cc:	4637      	mov	r7, r6
 80025ce:	42bb      	cmp	r3, r7
 80025d0:	460e      	mov	r6, r1
 80025d2:	d9f4      	bls.n	80025be <_printf_i+0x11a>
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d10b      	bne.n	80025f0 <_printf_i+0x14c>
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	07de      	lsls	r6, r3, #31
 80025dc:	d508      	bpl.n	80025f0 <_printf_i+0x14c>
 80025de:	6923      	ldr	r3, [r4, #16]
 80025e0:	6861      	ldr	r1, [r4, #4]
 80025e2:	4299      	cmp	r1, r3
 80025e4:	bfde      	ittt	le
 80025e6:	2330      	movle	r3, #48	; 0x30
 80025e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80025ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80025f0:	1b52      	subs	r2, r2, r5
 80025f2:	6122      	str	r2, [r4, #16]
 80025f4:	f8cd a000 	str.w	sl, [sp]
 80025f8:	464b      	mov	r3, r9
 80025fa:	aa03      	add	r2, sp, #12
 80025fc:	4621      	mov	r1, r4
 80025fe:	4640      	mov	r0, r8
 8002600:	f7ff fee2 	bl	80023c8 <_printf_common>
 8002604:	3001      	adds	r0, #1
 8002606:	d14c      	bne.n	80026a2 <_printf_i+0x1fe>
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	b004      	add	sp, #16
 800260e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002612:	4835      	ldr	r0, [pc, #212]	; (80026e8 <_printf_i+0x244>)
 8002614:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002618:	6829      	ldr	r1, [r5, #0]
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002620:	6029      	str	r1, [r5, #0]
 8002622:	061d      	lsls	r5, r3, #24
 8002624:	d514      	bpl.n	8002650 <_printf_i+0x1ac>
 8002626:	07df      	lsls	r7, r3, #31
 8002628:	bf44      	itt	mi
 800262a:	f043 0320 	orrmi.w	r3, r3, #32
 800262e:	6023      	strmi	r3, [r4, #0]
 8002630:	b91e      	cbnz	r6, 800263a <_printf_i+0x196>
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	f023 0320 	bic.w	r3, r3, #32
 8002638:	6023      	str	r3, [r4, #0]
 800263a:	2310      	movs	r3, #16
 800263c:	e7b0      	b.n	80025a0 <_printf_i+0xfc>
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	f043 0320 	orr.w	r3, r3, #32
 8002644:	6023      	str	r3, [r4, #0]
 8002646:	2378      	movs	r3, #120	; 0x78
 8002648:	4828      	ldr	r0, [pc, #160]	; (80026ec <_printf_i+0x248>)
 800264a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800264e:	e7e3      	b.n	8002618 <_printf_i+0x174>
 8002650:	0659      	lsls	r1, r3, #25
 8002652:	bf48      	it	mi
 8002654:	b2b6      	uxthmi	r6, r6
 8002656:	e7e6      	b.n	8002626 <_printf_i+0x182>
 8002658:	4615      	mov	r5, r2
 800265a:	e7bb      	b.n	80025d4 <_printf_i+0x130>
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	6826      	ldr	r6, [r4, #0]
 8002660:	6961      	ldr	r1, [r4, #20]
 8002662:	1d18      	adds	r0, r3, #4
 8002664:	6028      	str	r0, [r5, #0]
 8002666:	0635      	lsls	r5, r6, #24
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	d501      	bpl.n	8002670 <_printf_i+0x1cc>
 800266c:	6019      	str	r1, [r3, #0]
 800266e:	e002      	b.n	8002676 <_printf_i+0x1d2>
 8002670:	0670      	lsls	r0, r6, #25
 8002672:	d5fb      	bpl.n	800266c <_printf_i+0x1c8>
 8002674:	8019      	strh	r1, [r3, #0]
 8002676:	2300      	movs	r3, #0
 8002678:	6123      	str	r3, [r4, #16]
 800267a:	4615      	mov	r5, r2
 800267c:	e7ba      	b.n	80025f4 <_printf_i+0x150>
 800267e:	682b      	ldr	r3, [r5, #0]
 8002680:	1d1a      	adds	r2, r3, #4
 8002682:	602a      	str	r2, [r5, #0]
 8002684:	681d      	ldr	r5, [r3, #0]
 8002686:	6862      	ldr	r2, [r4, #4]
 8002688:	2100      	movs	r1, #0
 800268a:	4628      	mov	r0, r5
 800268c:	f7fd fdb0 	bl	80001f0 <memchr>
 8002690:	b108      	cbz	r0, 8002696 <_printf_i+0x1f2>
 8002692:	1b40      	subs	r0, r0, r5
 8002694:	6060      	str	r0, [r4, #4]
 8002696:	6863      	ldr	r3, [r4, #4]
 8002698:	6123      	str	r3, [r4, #16]
 800269a:	2300      	movs	r3, #0
 800269c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026a0:	e7a8      	b.n	80025f4 <_printf_i+0x150>
 80026a2:	6923      	ldr	r3, [r4, #16]
 80026a4:	462a      	mov	r2, r5
 80026a6:	4649      	mov	r1, r9
 80026a8:	4640      	mov	r0, r8
 80026aa:	47d0      	blx	sl
 80026ac:	3001      	adds	r0, #1
 80026ae:	d0ab      	beq.n	8002608 <_printf_i+0x164>
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	079b      	lsls	r3, r3, #30
 80026b4:	d413      	bmi.n	80026de <_printf_i+0x23a>
 80026b6:	68e0      	ldr	r0, [r4, #12]
 80026b8:	9b03      	ldr	r3, [sp, #12]
 80026ba:	4298      	cmp	r0, r3
 80026bc:	bfb8      	it	lt
 80026be:	4618      	movlt	r0, r3
 80026c0:	e7a4      	b.n	800260c <_printf_i+0x168>
 80026c2:	2301      	movs	r3, #1
 80026c4:	4632      	mov	r2, r6
 80026c6:	4649      	mov	r1, r9
 80026c8:	4640      	mov	r0, r8
 80026ca:	47d0      	blx	sl
 80026cc:	3001      	adds	r0, #1
 80026ce:	d09b      	beq.n	8002608 <_printf_i+0x164>
 80026d0:	3501      	adds	r5, #1
 80026d2:	68e3      	ldr	r3, [r4, #12]
 80026d4:	9903      	ldr	r1, [sp, #12]
 80026d6:	1a5b      	subs	r3, r3, r1
 80026d8:	42ab      	cmp	r3, r5
 80026da:	dcf2      	bgt.n	80026c2 <_printf_i+0x21e>
 80026dc:	e7eb      	b.n	80026b6 <_printf_i+0x212>
 80026de:	2500      	movs	r5, #0
 80026e0:	f104 0619 	add.w	r6, r4, #25
 80026e4:	e7f5      	b.n	80026d2 <_printf_i+0x22e>
 80026e6:	bf00      	nop
 80026e8:	08002d95 	.word	0x08002d95
 80026ec:	08002da6 	.word	0x08002da6

080026f0 <_sbrk_r>:
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	4d06      	ldr	r5, [pc, #24]	; (800270c <_sbrk_r+0x1c>)
 80026f4:	2300      	movs	r3, #0
 80026f6:	4604      	mov	r4, r0
 80026f8:	4608      	mov	r0, r1
 80026fa:	602b      	str	r3, [r5, #0]
 80026fc:	f7ff fa42 	bl	8001b84 <_sbrk>
 8002700:	1c43      	adds	r3, r0, #1
 8002702:	d102      	bne.n	800270a <_sbrk_r+0x1a>
 8002704:	682b      	ldr	r3, [r5, #0]
 8002706:	b103      	cbz	r3, 800270a <_sbrk_r+0x1a>
 8002708:	6023      	str	r3, [r4, #0]
 800270a:	bd38      	pop	{r3, r4, r5, pc}
 800270c:	200000f0 	.word	0x200000f0

08002710 <__sread>:
 8002710:	b510      	push	{r4, lr}
 8002712:	460c      	mov	r4, r1
 8002714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002718:	f000 fab2 	bl	8002c80 <_read_r>
 800271c:	2800      	cmp	r0, #0
 800271e:	bfab      	itete	ge
 8002720:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002722:	89a3      	ldrhlt	r3, [r4, #12]
 8002724:	181b      	addge	r3, r3, r0
 8002726:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800272a:	bfac      	ite	ge
 800272c:	6563      	strge	r3, [r4, #84]	; 0x54
 800272e:	81a3      	strhlt	r3, [r4, #12]
 8002730:	bd10      	pop	{r4, pc}

08002732 <__swrite>:
 8002732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002736:	461f      	mov	r7, r3
 8002738:	898b      	ldrh	r3, [r1, #12]
 800273a:	05db      	lsls	r3, r3, #23
 800273c:	4605      	mov	r5, r0
 800273e:	460c      	mov	r4, r1
 8002740:	4616      	mov	r6, r2
 8002742:	d505      	bpl.n	8002750 <__swrite+0x1e>
 8002744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002748:	2302      	movs	r3, #2
 800274a:	2200      	movs	r2, #0
 800274c:	f000 f9c8 	bl	8002ae0 <_lseek_r>
 8002750:	89a3      	ldrh	r3, [r4, #12]
 8002752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002756:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800275a:	81a3      	strh	r3, [r4, #12]
 800275c:	4632      	mov	r2, r6
 800275e:	463b      	mov	r3, r7
 8002760:	4628      	mov	r0, r5
 8002762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002766:	f000 b869 	b.w	800283c <_write_r>

0800276a <__sseek>:
 800276a:	b510      	push	{r4, lr}
 800276c:	460c      	mov	r4, r1
 800276e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002772:	f000 f9b5 	bl	8002ae0 <_lseek_r>
 8002776:	1c43      	adds	r3, r0, #1
 8002778:	89a3      	ldrh	r3, [r4, #12]
 800277a:	bf15      	itete	ne
 800277c:	6560      	strne	r0, [r4, #84]	; 0x54
 800277e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002782:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002786:	81a3      	strheq	r3, [r4, #12]
 8002788:	bf18      	it	ne
 800278a:	81a3      	strhne	r3, [r4, #12]
 800278c:	bd10      	pop	{r4, pc}

0800278e <__sclose>:
 800278e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002792:	f000 b8d3 	b.w	800293c <_close_r>
	...

08002798 <__swbuf_r>:
 8002798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279a:	460e      	mov	r6, r1
 800279c:	4614      	mov	r4, r2
 800279e:	4605      	mov	r5, r0
 80027a0:	b118      	cbz	r0, 80027aa <__swbuf_r+0x12>
 80027a2:	6983      	ldr	r3, [r0, #24]
 80027a4:	b90b      	cbnz	r3, 80027aa <__swbuf_r+0x12>
 80027a6:	f7ff fb81 	bl	8001eac <__sinit>
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <__swbuf_r+0x98>)
 80027ac:	429c      	cmp	r4, r3
 80027ae:	d12b      	bne.n	8002808 <__swbuf_r+0x70>
 80027b0:	686c      	ldr	r4, [r5, #4]
 80027b2:	69a3      	ldr	r3, [r4, #24]
 80027b4:	60a3      	str	r3, [r4, #8]
 80027b6:	89a3      	ldrh	r3, [r4, #12]
 80027b8:	071a      	lsls	r2, r3, #28
 80027ba:	d52f      	bpl.n	800281c <__swbuf_r+0x84>
 80027bc:	6923      	ldr	r3, [r4, #16]
 80027be:	b36b      	cbz	r3, 800281c <__swbuf_r+0x84>
 80027c0:	6923      	ldr	r3, [r4, #16]
 80027c2:	6820      	ldr	r0, [r4, #0]
 80027c4:	1ac0      	subs	r0, r0, r3
 80027c6:	6963      	ldr	r3, [r4, #20]
 80027c8:	b2f6      	uxtb	r6, r6
 80027ca:	4283      	cmp	r3, r0
 80027cc:	4637      	mov	r7, r6
 80027ce:	dc04      	bgt.n	80027da <__swbuf_r+0x42>
 80027d0:	4621      	mov	r1, r4
 80027d2:	4628      	mov	r0, r5
 80027d4:	f000 f948 	bl	8002a68 <_fflush_r>
 80027d8:	bb30      	cbnz	r0, 8002828 <__swbuf_r+0x90>
 80027da:	68a3      	ldr	r3, [r4, #8]
 80027dc:	3b01      	subs	r3, #1
 80027de:	60a3      	str	r3, [r4, #8]
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	6022      	str	r2, [r4, #0]
 80027e6:	701e      	strb	r6, [r3, #0]
 80027e8:	6963      	ldr	r3, [r4, #20]
 80027ea:	3001      	adds	r0, #1
 80027ec:	4283      	cmp	r3, r0
 80027ee:	d004      	beq.n	80027fa <__swbuf_r+0x62>
 80027f0:	89a3      	ldrh	r3, [r4, #12]
 80027f2:	07db      	lsls	r3, r3, #31
 80027f4:	d506      	bpl.n	8002804 <__swbuf_r+0x6c>
 80027f6:	2e0a      	cmp	r6, #10
 80027f8:	d104      	bne.n	8002804 <__swbuf_r+0x6c>
 80027fa:	4621      	mov	r1, r4
 80027fc:	4628      	mov	r0, r5
 80027fe:	f000 f933 	bl	8002a68 <_fflush_r>
 8002802:	b988      	cbnz	r0, 8002828 <__swbuf_r+0x90>
 8002804:	4638      	mov	r0, r7
 8002806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002808:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <__swbuf_r+0x9c>)
 800280a:	429c      	cmp	r4, r3
 800280c:	d101      	bne.n	8002812 <__swbuf_r+0x7a>
 800280e:	68ac      	ldr	r4, [r5, #8]
 8002810:	e7cf      	b.n	80027b2 <__swbuf_r+0x1a>
 8002812:	4b09      	ldr	r3, [pc, #36]	; (8002838 <__swbuf_r+0xa0>)
 8002814:	429c      	cmp	r4, r3
 8002816:	bf08      	it	eq
 8002818:	68ec      	ldreq	r4, [r5, #12]
 800281a:	e7ca      	b.n	80027b2 <__swbuf_r+0x1a>
 800281c:	4621      	mov	r1, r4
 800281e:	4628      	mov	r0, r5
 8002820:	f000 f81e 	bl	8002860 <__swsetup_r>
 8002824:	2800      	cmp	r0, #0
 8002826:	d0cb      	beq.n	80027c0 <__swbuf_r+0x28>
 8002828:	f04f 37ff 	mov.w	r7, #4294967295
 800282c:	e7ea      	b.n	8002804 <__swbuf_r+0x6c>
 800282e:	bf00      	nop
 8002830:	08002d44 	.word	0x08002d44
 8002834:	08002d64 	.word	0x08002d64
 8002838:	08002d24 	.word	0x08002d24

0800283c <_write_r>:
 800283c:	b538      	push	{r3, r4, r5, lr}
 800283e:	4d07      	ldr	r5, [pc, #28]	; (800285c <_write_r+0x20>)
 8002840:	4604      	mov	r4, r0
 8002842:	4608      	mov	r0, r1
 8002844:	4611      	mov	r1, r2
 8002846:	2200      	movs	r2, #0
 8002848:	602a      	str	r2, [r5, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	f7ff f94a 	bl	8001ae4 <_write>
 8002850:	1c43      	adds	r3, r0, #1
 8002852:	d102      	bne.n	800285a <_write_r+0x1e>
 8002854:	682b      	ldr	r3, [r5, #0]
 8002856:	b103      	cbz	r3, 800285a <_write_r+0x1e>
 8002858:	6023      	str	r3, [r4, #0]
 800285a:	bd38      	pop	{r3, r4, r5, pc}
 800285c:	200000f0 	.word	0x200000f0

08002860 <__swsetup_r>:
 8002860:	4b32      	ldr	r3, [pc, #200]	; (800292c <__swsetup_r+0xcc>)
 8002862:	b570      	push	{r4, r5, r6, lr}
 8002864:	681d      	ldr	r5, [r3, #0]
 8002866:	4606      	mov	r6, r0
 8002868:	460c      	mov	r4, r1
 800286a:	b125      	cbz	r5, 8002876 <__swsetup_r+0x16>
 800286c:	69ab      	ldr	r3, [r5, #24]
 800286e:	b913      	cbnz	r3, 8002876 <__swsetup_r+0x16>
 8002870:	4628      	mov	r0, r5
 8002872:	f7ff fb1b 	bl	8001eac <__sinit>
 8002876:	4b2e      	ldr	r3, [pc, #184]	; (8002930 <__swsetup_r+0xd0>)
 8002878:	429c      	cmp	r4, r3
 800287a:	d10f      	bne.n	800289c <__swsetup_r+0x3c>
 800287c:	686c      	ldr	r4, [r5, #4]
 800287e:	89a3      	ldrh	r3, [r4, #12]
 8002880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002884:	0719      	lsls	r1, r3, #28
 8002886:	d42c      	bmi.n	80028e2 <__swsetup_r+0x82>
 8002888:	06dd      	lsls	r5, r3, #27
 800288a:	d411      	bmi.n	80028b0 <__swsetup_r+0x50>
 800288c:	2309      	movs	r3, #9
 800288e:	6033      	str	r3, [r6, #0]
 8002890:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002894:	81a3      	strh	r3, [r4, #12]
 8002896:	f04f 30ff 	mov.w	r0, #4294967295
 800289a:	e03e      	b.n	800291a <__swsetup_r+0xba>
 800289c:	4b25      	ldr	r3, [pc, #148]	; (8002934 <__swsetup_r+0xd4>)
 800289e:	429c      	cmp	r4, r3
 80028a0:	d101      	bne.n	80028a6 <__swsetup_r+0x46>
 80028a2:	68ac      	ldr	r4, [r5, #8]
 80028a4:	e7eb      	b.n	800287e <__swsetup_r+0x1e>
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <__swsetup_r+0xd8>)
 80028a8:	429c      	cmp	r4, r3
 80028aa:	bf08      	it	eq
 80028ac:	68ec      	ldreq	r4, [r5, #12]
 80028ae:	e7e6      	b.n	800287e <__swsetup_r+0x1e>
 80028b0:	0758      	lsls	r0, r3, #29
 80028b2:	d512      	bpl.n	80028da <__swsetup_r+0x7a>
 80028b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028b6:	b141      	cbz	r1, 80028ca <__swsetup_r+0x6a>
 80028b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028bc:	4299      	cmp	r1, r3
 80028be:	d002      	beq.n	80028c6 <__swsetup_r+0x66>
 80028c0:	4630      	mov	r0, r6
 80028c2:	f000 f991 	bl	8002be8 <_free_r>
 80028c6:	2300      	movs	r3, #0
 80028c8:	6363      	str	r3, [r4, #52]	; 0x34
 80028ca:	89a3      	ldrh	r3, [r4, #12]
 80028cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028d0:	81a3      	strh	r3, [r4, #12]
 80028d2:	2300      	movs	r3, #0
 80028d4:	6063      	str	r3, [r4, #4]
 80028d6:	6923      	ldr	r3, [r4, #16]
 80028d8:	6023      	str	r3, [r4, #0]
 80028da:	89a3      	ldrh	r3, [r4, #12]
 80028dc:	f043 0308 	orr.w	r3, r3, #8
 80028e0:	81a3      	strh	r3, [r4, #12]
 80028e2:	6923      	ldr	r3, [r4, #16]
 80028e4:	b94b      	cbnz	r3, 80028fa <__swsetup_r+0x9a>
 80028e6:	89a3      	ldrh	r3, [r4, #12]
 80028e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f0:	d003      	beq.n	80028fa <__swsetup_r+0x9a>
 80028f2:	4621      	mov	r1, r4
 80028f4:	4630      	mov	r0, r6
 80028f6:	f000 f92b 	bl	8002b50 <__smakebuf_r>
 80028fa:	89a0      	ldrh	r0, [r4, #12]
 80028fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002900:	f010 0301 	ands.w	r3, r0, #1
 8002904:	d00a      	beq.n	800291c <__swsetup_r+0xbc>
 8002906:	2300      	movs	r3, #0
 8002908:	60a3      	str	r3, [r4, #8]
 800290a:	6963      	ldr	r3, [r4, #20]
 800290c:	425b      	negs	r3, r3
 800290e:	61a3      	str	r3, [r4, #24]
 8002910:	6923      	ldr	r3, [r4, #16]
 8002912:	b943      	cbnz	r3, 8002926 <__swsetup_r+0xc6>
 8002914:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002918:	d1ba      	bne.n	8002890 <__swsetup_r+0x30>
 800291a:	bd70      	pop	{r4, r5, r6, pc}
 800291c:	0781      	lsls	r1, r0, #30
 800291e:	bf58      	it	pl
 8002920:	6963      	ldrpl	r3, [r4, #20]
 8002922:	60a3      	str	r3, [r4, #8]
 8002924:	e7f4      	b.n	8002910 <__swsetup_r+0xb0>
 8002926:	2000      	movs	r0, #0
 8002928:	e7f7      	b.n	800291a <__swsetup_r+0xba>
 800292a:	bf00      	nop
 800292c:	20000004 	.word	0x20000004
 8002930:	08002d44 	.word	0x08002d44
 8002934:	08002d64 	.word	0x08002d64
 8002938:	08002d24 	.word	0x08002d24

0800293c <_close_r>:
 800293c:	b538      	push	{r3, r4, r5, lr}
 800293e:	4d06      	ldr	r5, [pc, #24]	; (8002958 <_close_r+0x1c>)
 8002940:	2300      	movs	r3, #0
 8002942:	4604      	mov	r4, r0
 8002944:	4608      	mov	r0, r1
 8002946:	602b      	str	r3, [r5, #0]
 8002948:	f7ff f8e8 	bl	8001b1c <_close>
 800294c:	1c43      	adds	r3, r0, #1
 800294e:	d102      	bne.n	8002956 <_close_r+0x1a>
 8002950:	682b      	ldr	r3, [r5, #0]
 8002952:	b103      	cbz	r3, 8002956 <_close_r+0x1a>
 8002954:	6023      	str	r3, [r4, #0]
 8002956:	bd38      	pop	{r3, r4, r5, pc}
 8002958:	200000f0 	.word	0x200000f0

0800295c <__sflush_r>:
 800295c:	898a      	ldrh	r2, [r1, #12]
 800295e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002962:	4605      	mov	r5, r0
 8002964:	0710      	lsls	r0, r2, #28
 8002966:	460c      	mov	r4, r1
 8002968:	d458      	bmi.n	8002a1c <__sflush_r+0xc0>
 800296a:	684b      	ldr	r3, [r1, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	dc05      	bgt.n	800297c <__sflush_r+0x20>
 8002970:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	dc02      	bgt.n	800297c <__sflush_r+0x20>
 8002976:	2000      	movs	r0, #0
 8002978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800297c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800297e:	2e00      	cmp	r6, #0
 8002980:	d0f9      	beq.n	8002976 <__sflush_r+0x1a>
 8002982:	2300      	movs	r3, #0
 8002984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002988:	682f      	ldr	r7, [r5, #0]
 800298a:	602b      	str	r3, [r5, #0]
 800298c:	d032      	beq.n	80029f4 <__sflush_r+0x98>
 800298e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002990:	89a3      	ldrh	r3, [r4, #12]
 8002992:	075a      	lsls	r2, r3, #29
 8002994:	d505      	bpl.n	80029a2 <__sflush_r+0x46>
 8002996:	6863      	ldr	r3, [r4, #4]
 8002998:	1ac0      	subs	r0, r0, r3
 800299a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800299c:	b10b      	cbz	r3, 80029a2 <__sflush_r+0x46>
 800299e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029a0:	1ac0      	subs	r0, r0, r3
 80029a2:	2300      	movs	r3, #0
 80029a4:	4602      	mov	r2, r0
 80029a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029a8:	6a21      	ldr	r1, [r4, #32]
 80029aa:	4628      	mov	r0, r5
 80029ac:	47b0      	blx	r6
 80029ae:	1c43      	adds	r3, r0, #1
 80029b0:	89a3      	ldrh	r3, [r4, #12]
 80029b2:	d106      	bne.n	80029c2 <__sflush_r+0x66>
 80029b4:	6829      	ldr	r1, [r5, #0]
 80029b6:	291d      	cmp	r1, #29
 80029b8:	d82c      	bhi.n	8002a14 <__sflush_r+0xb8>
 80029ba:	4a2a      	ldr	r2, [pc, #168]	; (8002a64 <__sflush_r+0x108>)
 80029bc:	40ca      	lsrs	r2, r1
 80029be:	07d6      	lsls	r6, r2, #31
 80029c0:	d528      	bpl.n	8002a14 <__sflush_r+0xb8>
 80029c2:	2200      	movs	r2, #0
 80029c4:	6062      	str	r2, [r4, #4]
 80029c6:	04d9      	lsls	r1, r3, #19
 80029c8:	6922      	ldr	r2, [r4, #16]
 80029ca:	6022      	str	r2, [r4, #0]
 80029cc:	d504      	bpl.n	80029d8 <__sflush_r+0x7c>
 80029ce:	1c42      	adds	r2, r0, #1
 80029d0:	d101      	bne.n	80029d6 <__sflush_r+0x7a>
 80029d2:	682b      	ldr	r3, [r5, #0]
 80029d4:	b903      	cbnz	r3, 80029d8 <__sflush_r+0x7c>
 80029d6:	6560      	str	r0, [r4, #84]	; 0x54
 80029d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029da:	602f      	str	r7, [r5, #0]
 80029dc:	2900      	cmp	r1, #0
 80029de:	d0ca      	beq.n	8002976 <__sflush_r+0x1a>
 80029e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029e4:	4299      	cmp	r1, r3
 80029e6:	d002      	beq.n	80029ee <__sflush_r+0x92>
 80029e8:	4628      	mov	r0, r5
 80029ea:	f000 f8fd 	bl	8002be8 <_free_r>
 80029ee:	2000      	movs	r0, #0
 80029f0:	6360      	str	r0, [r4, #52]	; 0x34
 80029f2:	e7c1      	b.n	8002978 <__sflush_r+0x1c>
 80029f4:	6a21      	ldr	r1, [r4, #32]
 80029f6:	2301      	movs	r3, #1
 80029f8:	4628      	mov	r0, r5
 80029fa:	47b0      	blx	r6
 80029fc:	1c41      	adds	r1, r0, #1
 80029fe:	d1c7      	bne.n	8002990 <__sflush_r+0x34>
 8002a00:	682b      	ldr	r3, [r5, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0c4      	beq.n	8002990 <__sflush_r+0x34>
 8002a06:	2b1d      	cmp	r3, #29
 8002a08:	d001      	beq.n	8002a0e <__sflush_r+0xb2>
 8002a0a:	2b16      	cmp	r3, #22
 8002a0c:	d101      	bne.n	8002a12 <__sflush_r+0xb6>
 8002a0e:	602f      	str	r7, [r5, #0]
 8002a10:	e7b1      	b.n	8002976 <__sflush_r+0x1a>
 8002a12:	89a3      	ldrh	r3, [r4, #12]
 8002a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a18:	81a3      	strh	r3, [r4, #12]
 8002a1a:	e7ad      	b.n	8002978 <__sflush_r+0x1c>
 8002a1c:	690f      	ldr	r7, [r1, #16]
 8002a1e:	2f00      	cmp	r7, #0
 8002a20:	d0a9      	beq.n	8002976 <__sflush_r+0x1a>
 8002a22:	0793      	lsls	r3, r2, #30
 8002a24:	680e      	ldr	r6, [r1, #0]
 8002a26:	bf08      	it	eq
 8002a28:	694b      	ldreq	r3, [r1, #20]
 8002a2a:	600f      	str	r7, [r1, #0]
 8002a2c:	bf18      	it	ne
 8002a2e:	2300      	movne	r3, #0
 8002a30:	eba6 0807 	sub.w	r8, r6, r7
 8002a34:	608b      	str	r3, [r1, #8]
 8002a36:	f1b8 0f00 	cmp.w	r8, #0
 8002a3a:	dd9c      	ble.n	8002976 <__sflush_r+0x1a>
 8002a3c:	6a21      	ldr	r1, [r4, #32]
 8002a3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a40:	4643      	mov	r3, r8
 8002a42:	463a      	mov	r2, r7
 8002a44:	4628      	mov	r0, r5
 8002a46:	47b0      	blx	r6
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	dc06      	bgt.n	8002a5a <__sflush_r+0xfe>
 8002a4c:	89a3      	ldrh	r3, [r4, #12]
 8002a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a52:	81a3      	strh	r3, [r4, #12]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	e78e      	b.n	8002978 <__sflush_r+0x1c>
 8002a5a:	4407      	add	r7, r0
 8002a5c:	eba8 0800 	sub.w	r8, r8, r0
 8002a60:	e7e9      	b.n	8002a36 <__sflush_r+0xda>
 8002a62:	bf00      	nop
 8002a64:	20400001 	.word	0x20400001

08002a68 <_fflush_r>:
 8002a68:	b538      	push	{r3, r4, r5, lr}
 8002a6a:	690b      	ldr	r3, [r1, #16]
 8002a6c:	4605      	mov	r5, r0
 8002a6e:	460c      	mov	r4, r1
 8002a70:	b913      	cbnz	r3, 8002a78 <_fflush_r+0x10>
 8002a72:	2500      	movs	r5, #0
 8002a74:	4628      	mov	r0, r5
 8002a76:	bd38      	pop	{r3, r4, r5, pc}
 8002a78:	b118      	cbz	r0, 8002a82 <_fflush_r+0x1a>
 8002a7a:	6983      	ldr	r3, [r0, #24]
 8002a7c:	b90b      	cbnz	r3, 8002a82 <_fflush_r+0x1a>
 8002a7e:	f7ff fa15 	bl	8001eac <__sinit>
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <_fflush_r+0x6c>)
 8002a84:	429c      	cmp	r4, r3
 8002a86:	d11b      	bne.n	8002ac0 <_fflush_r+0x58>
 8002a88:	686c      	ldr	r4, [r5, #4]
 8002a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0ef      	beq.n	8002a72 <_fflush_r+0xa>
 8002a92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a94:	07d0      	lsls	r0, r2, #31
 8002a96:	d404      	bmi.n	8002aa2 <_fflush_r+0x3a>
 8002a98:	0599      	lsls	r1, r3, #22
 8002a9a:	d402      	bmi.n	8002aa2 <_fflush_r+0x3a>
 8002a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a9e:	f7ff faa3 	bl	8001fe8 <__retarget_lock_acquire_recursive>
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	f7ff ff59 	bl	800295c <__sflush_r>
 8002aaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002aac:	07da      	lsls	r2, r3, #31
 8002aae:	4605      	mov	r5, r0
 8002ab0:	d4e0      	bmi.n	8002a74 <_fflush_r+0xc>
 8002ab2:	89a3      	ldrh	r3, [r4, #12]
 8002ab4:	059b      	lsls	r3, r3, #22
 8002ab6:	d4dd      	bmi.n	8002a74 <_fflush_r+0xc>
 8002ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aba:	f7ff fa96 	bl	8001fea <__retarget_lock_release_recursive>
 8002abe:	e7d9      	b.n	8002a74 <_fflush_r+0xc>
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <_fflush_r+0x70>)
 8002ac2:	429c      	cmp	r4, r3
 8002ac4:	d101      	bne.n	8002aca <_fflush_r+0x62>
 8002ac6:	68ac      	ldr	r4, [r5, #8]
 8002ac8:	e7df      	b.n	8002a8a <_fflush_r+0x22>
 8002aca:	4b04      	ldr	r3, [pc, #16]	; (8002adc <_fflush_r+0x74>)
 8002acc:	429c      	cmp	r4, r3
 8002ace:	bf08      	it	eq
 8002ad0:	68ec      	ldreq	r4, [r5, #12]
 8002ad2:	e7da      	b.n	8002a8a <_fflush_r+0x22>
 8002ad4:	08002d44 	.word	0x08002d44
 8002ad8:	08002d64 	.word	0x08002d64
 8002adc:	08002d24 	.word	0x08002d24

08002ae0 <_lseek_r>:
 8002ae0:	b538      	push	{r3, r4, r5, lr}
 8002ae2:	4d07      	ldr	r5, [pc, #28]	; (8002b00 <_lseek_r+0x20>)
 8002ae4:	4604      	mov	r4, r0
 8002ae6:	4608      	mov	r0, r1
 8002ae8:	4611      	mov	r1, r2
 8002aea:	2200      	movs	r2, #0
 8002aec:	602a      	str	r2, [r5, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	f7ff f83b 	bl	8001b6a <_lseek>
 8002af4:	1c43      	adds	r3, r0, #1
 8002af6:	d102      	bne.n	8002afe <_lseek_r+0x1e>
 8002af8:	682b      	ldr	r3, [r5, #0]
 8002afa:	b103      	cbz	r3, 8002afe <_lseek_r+0x1e>
 8002afc:	6023      	str	r3, [r4, #0]
 8002afe:	bd38      	pop	{r3, r4, r5, pc}
 8002b00:	200000f0 	.word	0x200000f0

08002b04 <__swhatbuf_r>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	460e      	mov	r6, r1
 8002b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b0c:	2900      	cmp	r1, #0
 8002b0e:	b096      	sub	sp, #88	; 0x58
 8002b10:	4614      	mov	r4, r2
 8002b12:	461d      	mov	r5, r3
 8002b14:	da08      	bge.n	8002b28 <__swhatbuf_r+0x24>
 8002b16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	602a      	str	r2, [r5, #0]
 8002b1e:	061a      	lsls	r2, r3, #24
 8002b20:	d410      	bmi.n	8002b44 <__swhatbuf_r+0x40>
 8002b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b26:	e00e      	b.n	8002b46 <__swhatbuf_r+0x42>
 8002b28:	466a      	mov	r2, sp
 8002b2a:	f000 f8bb 	bl	8002ca4 <_fstat_r>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	dbf1      	blt.n	8002b16 <__swhatbuf_r+0x12>
 8002b32:	9a01      	ldr	r2, [sp, #4]
 8002b34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b3c:	425a      	negs	r2, r3
 8002b3e:	415a      	adcs	r2, r3
 8002b40:	602a      	str	r2, [r5, #0]
 8002b42:	e7ee      	b.n	8002b22 <__swhatbuf_r+0x1e>
 8002b44:	2340      	movs	r3, #64	; 0x40
 8002b46:	2000      	movs	r0, #0
 8002b48:	6023      	str	r3, [r4, #0]
 8002b4a:	b016      	add	sp, #88	; 0x58
 8002b4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002b50 <__smakebuf_r>:
 8002b50:	898b      	ldrh	r3, [r1, #12]
 8002b52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b54:	079d      	lsls	r5, r3, #30
 8002b56:	4606      	mov	r6, r0
 8002b58:	460c      	mov	r4, r1
 8002b5a:	d507      	bpl.n	8002b6c <__smakebuf_r+0x1c>
 8002b5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b60:	6023      	str	r3, [r4, #0]
 8002b62:	6123      	str	r3, [r4, #16]
 8002b64:	2301      	movs	r3, #1
 8002b66:	6163      	str	r3, [r4, #20]
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd70      	pop	{r4, r5, r6, pc}
 8002b6c:	ab01      	add	r3, sp, #4
 8002b6e:	466a      	mov	r2, sp
 8002b70:	f7ff ffc8 	bl	8002b04 <__swhatbuf_r>
 8002b74:	9900      	ldr	r1, [sp, #0]
 8002b76:	4605      	mov	r5, r0
 8002b78:	4630      	mov	r0, r6
 8002b7a:	f7ff fa57 	bl	800202c <_malloc_r>
 8002b7e:	b948      	cbnz	r0, 8002b94 <__smakebuf_r+0x44>
 8002b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b84:	059a      	lsls	r2, r3, #22
 8002b86:	d4ef      	bmi.n	8002b68 <__smakebuf_r+0x18>
 8002b88:	f023 0303 	bic.w	r3, r3, #3
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	81a3      	strh	r3, [r4, #12]
 8002b92:	e7e3      	b.n	8002b5c <__smakebuf_r+0xc>
 8002b94:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <__smakebuf_r+0x7c>)
 8002b96:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b98:	89a3      	ldrh	r3, [r4, #12]
 8002b9a:	6020      	str	r0, [r4, #0]
 8002b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba0:	81a3      	strh	r3, [r4, #12]
 8002ba2:	9b00      	ldr	r3, [sp, #0]
 8002ba4:	6163      	str	r3, [r4, #20]
 8002ba6:	9b01      	ldr	r3, [sp, #4]
 8002ba8:	6120      	str	r0, [r4, #16]
 8002baa:	b15b      	cbz	r3, 8002bc4 <__smakebuf_r+0x74>
 8002bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bb0:	4630      	mov	r0, r6
 8002bb2:	f000 f889 	bl	8002cc8 <_isatty_r>
 8002bb6:	b128      	cbz	r0, 8002bc4 <__smakebuf_r+0x74>
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	f023 0303 	bic.w	r3, r3, #3
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	81a3      	strh	r3, [r4, #12]
 8002bc4:	89a0      	ldrh	r0, [r4, #12]
 8002bc6:	4305      	orrs	r5, r0
 8002bc8:	81a5      	strh	r5, [r4, #12]
 8002bca:	e7cd      	b.n	8002b68 <__smakebuf_r+0x18>
 8002bcc:	08001e45 	.word	0x08001e45

08002bd0 <__malloc_lock>:
 8002bd0:	4801      	ldr	r0, [pc, #4]	; (8002bd8 <__malloc_lock+0x8>)
 8002bd2:	f7ff ba09 	b.w	8001fe8 <__retarget_lock_acquire_recursive>
 8002bd6:	bf00      	nop
 8002bd8:	200000e4 	.word	0x200000e4

08002bdc <__malloc_unlock>:
 8002bdc:	4801      	ldr	r0, [pc, #4]	; (8002be4 <__malloc_unlock+0x8>)
 8002bde:	f7ff ba04 	b.w	8001fea <__retarget_lock_release_recursive>
 8002be2:	bf00      	nop
 8002be4:	200000e4 	.word	0x200000e4

08002be8 <_free_r>:
 8002be8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002bea:	2900      	cmp	r1, #0
 8002bec:	d044      	beq.n	8002c78 <_free_r+0x90>
 8002bee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bf2:	9001      	str	r0, [sp, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f1a1 0404 	sub.w	r4, r1, #4
 8002bfa:	bfb8      	it	lt
 8002bfc:	18e4      	addlt	r4, r4, r3
 8002bfe:	f7ff ffe7 	bl	8002bd0 <__malloc_lock>
 8002c02:	4a1e      	ldr	r2, [pc, #120]	; (8002c7c <_free_r+0x94>)
 8002c04:	9801      	ldr	r0, [sp, #4]
 8002c06:	6813      	ldr	r3, [r2, #0]
 8002c08:	b933      	cbnz	r3, 8002c18 <_free_r+0x30>
 8002c0a:	6063      	str	r3, [r4, #4]
 8002c0c:	6014      	str	r4, [r2, #0]
 8002c0e:	b003      	add	sp, #12
 8002c10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002c14:	f7ff bfe2 	b.w	8002bdc <__malloc_unlock>
 8002c18:	42a3      	cmp	r3, r4
 8002c1a:	d908      	bls.n	8002c2e <_free_r+0x46>
 8002c1c:	6825      	ldr	r5, [r4, #0]
 8002c1e:	1961      	adds	r1, r4, r5
 8002c20:	428b      	cmp	r3, r1
 8002c22:	bf01      	itttt	eq
 8002c24:	6819      	ldreq	r1, [r3, #0]
 8002c26:	685b      	ldreq	r3, [r3, #4]
 8002c28:	1949      	addeq	r1, r1, r5
 8002c2a:	6021      	streq	r1, [r4, #0]
 8002c2c:	e7ed      	b.n	8002c0a <_free_r+0x22>
 8002c2e:	461a      	mov	r2, r3
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	b10b      	cbz	r3, 8002c38 <_free_r+0x50>
 8002c34:	42a3      	cmp	r3, r4
 8002c36:	d9fa      	bls.n	8002c2e <_free_r+0x46>
 8002c38:	6811      	ldr	r1, [r2, #0]
 8002c3a:	1855      	adds	r5, r2, r1
 8002c3c:	42a5      	cmp	r5, r4
 8002c3e:	d10b      	bne.n	8002c58 <_free_r+0x70>
 8002c40:	6824      	ldr	r4, [r4, #0]
 8002c42:	4421      	add	r1, r4
 8002c44:	1854      	adds	r4, r2, r1
 8002c46:	42a3      	cmp	r3, r4
 8002c48:	6011      	str	r1, [r2, #0]
 8002c4a:	d1e0      	bne.n	8002c0e <_free_r+0x26>
 8002c4c:	681c      	ldr	r4, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	6053      	str	r3, [r2, #4]
 8002c52:	4421      	add	r1, r4
 8002c54:	6011      	str	r1, [r2, #0]
 8002c56:	e7da      	b.n	8002c0e <_free_r+0x26>
 8002c58:	d902      	bls.n	8002c60 <_free_r+0x78>
 8002c5a:	230c      	movs	r3, #12
 8002c5c:	6003      	str	r3, [r0, #0]
 8002c5e:	e7d6      	b.n	8002c0e <_free_r+0x26>
 8002c60:	6825      	ldr	r5, [r4, #0]
 8002c62:	1961      	adds	r1, r4, r5
 8002c64:	428b      	cmp	r3, r1
 8002c66:	bf04      	itt	eq
 8002c68:	6819      	ldreq	r1, [r3, #0]
 8002c6a:	685b      	ldreq	r3, [r3, #4]
 8002c6c:	6063      	str	r3, [r4, #4]
 8002c6e:	bf04      	itt	eq
 8002c70:	1949      	addeq	r1, r1, r5
 8002c72:	6021      	streq	r1, [r4, #0]
 8002c74:	6054      	str	r4, [r2, #4]
 8002c76:	e7ca      	b.n	8002c0e <_free_r+0x26>
 8002c78:	b003      	add	sp, #12
 8002c7a:	bd30      	pop	{r4, r5, pc}
 8002c7c:	200000e8 	.word	0x200000e8

08002c80 <_read_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4d07      	ldr	r5, [pc, #28]	; (8002ca0 <_read_r+0x20>)
 8002c84:	4604      	mov	r4, r0
 8002c86:	4608      	mov	r0, r1
 8002c88:	4611      	mov	r1, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	602a      	str	r2, [r5, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f7fe ff0b 	bl	8001aaa <_read>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d102      	bne.n	8002c9e <_read_r+0x1e>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	b103      	cbz	r3, 8002c9e <_read_r+0x1e>
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	200000f0 	.word	0x200000f0

08002ca4 <_fstat_r>:
 8002ca4:	b538      	push	{r3, r4, r5, lr}
 8002ca6:	4d07      	ldr	r5, [pc, #28]	; (8002cc4 <_fstat_r+0x20>)
 8002ca8:	2300      	movs	r3, #0
 8002caa:	4604      	mov	r4, r0
 8002cac:	4608      	mov	r0, r1
 8002cae:	4611      	mov	r1, r2
 8002cb0:	602b      	str	r3, [r5, #0]
 8002cb2:	f7fe ff3f 	bl	8001b34 <_fstat>
 8002cb6:	1c43      	adds	r3, r0, #1
 8002cb8:	d102      	bne.n	8002cc0 <_fstat_r+0x1c>
 8002cba:	682b      	ldr	r3, [r5, #0]
 8002cbc:	b103      	cbz	r3, 8002cc0 <_fstat_r+0x1c>
 8002cbe:	6023      	str	r3, [r4, #0]
 8002cc0:	bd38      	pop	{r3, r4, r5, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200000f0 	.word	0x200000f0

08002cc8 <_isatty_r>:
 8002cc8:	b538      	push	{r3, r4, r5, lr}
 8002cca:	4d06      	ldr	r5, [pc, #24]	; (8002ce4 <_isatty_r+0x1c>)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	4604      	mov	r4, r0
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	602b      	str	r3, [r5, #0]
 8002cd4:	f7fe ff3e 	bl	8001b54 <_isatty>
 8002cd8:	1c43      	adds	r3, r0, #1
 8002cda:	d102      	bne.n	8002ce2 <_isatty_r+0x1a>
 8002cdc:	682b      	ldr	r3, [r5, #0]
 8002cde:	b103      	cbz	r3, 8002ce2 <_isatty_r+0x1a>
 8002ce0:	6023      	str	r3, [r4, #0]
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
 8002ce4:	200000f0 	.word	0x200000f0

08002ce8 <_init>:
 8002ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cea:	bf00      	nop
 8002cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cee:	bc08      	pop	{r3}
 8002cf0:	469e      	mov	lr, r3
 8002cf2:	4770      	bx	lr

08002cf4 <_fini>:
 8002cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf6:	bf00      	nop
 8002cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cfa:	bc08      	pop	{r3}
 8002cfc:	469e      	mov	lr, r3
 8002cfe:	4770      	bx	lr
