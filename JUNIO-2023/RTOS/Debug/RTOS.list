
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053e4  080053e4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053ec  080053ec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080053f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004060  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200040d4  200040d4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc07  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027a9  00000000  00000000  0002ccab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  0002f458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009d8  00000000  00000000  0002ff68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241e3  00000000  00000000  00030940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d2b9  00000000  00000000  00054b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3ab5  00000000  00000000  00061ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00135891  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003280  00000000  00000000  001358e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005250 	.word	0x08005250

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005250 	.word	0x08005250

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <Sensor_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sensor_Task */
void Sensor_Task(void const * argument)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	float temp;
	float hum;
	SensorData_t *data;

	uint8_t count = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Sensor_Task */
  /* Infinite loop */
  for(;;)
  {
	  //lectura de sensores
	  count += 1;
 8000580:	7dfb      	ldrb	r3, [r7, #23]
 8000582:	3301      	adds	r3, #1
 8000584:	75fb      	strb	r3, [r7, #23]
	  temp = count - 3;
 8000586:	7dfb      	ldrb	r3, [r7, #23]
 8000588:	3b03      	subs	r3, #3
 800058a:	ee07 3a90 	vmov	s15, r3
 800058e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000592:	edc7 7a04 	vstr	s15, [r7, #16]
	  hum = count + 1;
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	3301      	adds	r3, #1
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a2:	edc7 7a03 	vstr	s15, [r7, #12]
	  //procesar

	  //envia
	  data = osPoolAlloc(MemPool);
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <Sensor_Task+0x64>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fb6d 	bl	8001c8a <osPoolAlloc>
 80005b0:	60b8      	str	r0, [r7, #8]
	  //osMessagePut(SensorQueueHandle, info, millisec);
	  data->hum = hum;
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	605a      	str	r2, [r3, #4]
	  data->temp = temp;
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	693a      	ldr	r2, [r7, #16]
 80005bc:	601a      	str	r2, [r3, #0]
	  osMessagePut(SensorQueueHandle, (uint32_t)data, osWaitForever);
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <Sensor_Task+0x68>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	68b9      	ldr	r1, [r7, #8]
 80005c4:	f04f 32ff 	mov.w	r2, #4294967295
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fc29 	bl	8001e20 <osMessagePut>

	  osDelay(100);
 80005ce:	2064      	movs	r0, #100	; 0x64
 80005d0:	f001 fb15 	bl	8001bfe <osDelay>
	  count += 1;
 80005d4:	e7d4      	b.n	8000580 <Sensor_Task+0xc>
 80005d6:	bf00      	nop
 80005d8:	20000090 	.word	0x20000090
 80005dc:	200000a4 	.word	0x200000a4

080005e0 <Input_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Input_Task */
void Input_Task(void const * argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	osEvent evt;
  /* USER CODE BEGIN Input_Task */
  /* Infinite loop */
  for(;;)
  {
    evt = osMessageGet(SensorQueueHandle, 100);
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <Input_Task+0x64>)
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2264      	movs	r2, #100	; 0x64
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fc54 	bl	8001ea0 <osMessageGet>
    if(evt.status == osEventMessage){
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	2b10      	cmp	r3, #16
 80005fc:	d1f4      	bne.n	80005e8 <Input_Task+0x8>
    	data = (SensorData_t *)evt.value.p;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	61fb      	str	r3, [r7, #28]
    	memcpy(&rxData, data, sizeof(SensorData_t));
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	2208      	movs	r2, #8
 8000608:	69f9      	ldr	r1, [r7, #28]
 800060a:	4618      	mov	r0, r3
 800060c:	f003 ff09 	bl	8004422 <memcpy>
    	osPoolFree(MemPool, data);
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <Input_Task+0x68>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	69f9      	ldr	r1, [r7, #28]
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fb99 	bl	8001d4e <osPoolFree>
    	//procesar este dato
    	printf("temp rx->%lu\r\n", (uint32_t)rxData.temp);
 800061c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000624:	ee17 1a90 	vmov	r1, s15
 8000628:	4808      	ldr	r0, [pc, #32]	; (800064c <Input_Task+0x6c>)
 800062a:	f003 ffa5 	bl	8004578 <iprintf>
    	printf("hum rx->%lu\r\n", (uint32_t)rxData.hum);
 800062e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000632:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000636:	ee17 1a90 	vmov	r1, s15
 800063a:	4805      	ldr	r0, [pc, #20]	; (8000650 <Input_Task+0x70>)
 800063c:	f003 ff9c 	bl	8004578 <iprintf>
    evt = osMessageGet(SensorQueueHandle, 100);
 8000640:	e7d2      	b.n	80005e8 <Input_Task+0x8>
 8000642:	bf00      	nop
 8000644:	200000a4 	.word	0x200000a4
 8000648:	20000090 	.word	0x20000090
 800064c:	08005268 	.word	0x08005268
 8000650:	08005278 	.word	0x08005278

08000654 <Control_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Control_Task */
void Control_Task(void const * argument)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Control_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800065c:	2001      	movs	r0, #1
 800065e:	f001 face 	bl	8001bfe <osDelay>
 8000662:	e7fb      	b.n	800065c <Control_Task+0x8>

08000664 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	4a07      	ldr	r2, [pc, #28]	; (8000690 <vApplicationGetIdleTaskMemory+0x2c>)
 8000674:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <vApplicationGetIdleTaskMemory+0x30>)
 800067a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000682:	bf00      	nop
 8000684:	3714      	adds	r7, #20
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	200000b4 	.word	0x200000b4
 8000694:	20000168 	.word	0x20000168

08000698 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000698:	b5b0      	push	{r4, r5, r7, lr}
 800069a:	b0a8      	sub	sp, #160	; 0xa0
 800069c:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of DataReady */
  osSemaphoreDef(DataReady);
 800069e:	2300      	movs	r3, #0
 80006a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  DataReadyHandle = osSemaphoreCreate(osSemaphore(DataReady), 1);
 80006aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006ae:	2101      	movs	r1, #1
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fab8 	bl	8001c26 <osSemaphoreCreate>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a3e      	ldr	r2, [pc, #248]	; (80007b4 <MX_FREERTOS_Init+0x11c>)
 80006ba:	6013      	str	r3, [r2, #0]

  /* definition and creation of SensorDataReady */
  osSemaphoreDef(SensorDataReady);
 80006bc:	2300      	movs	r3, #0
 80006be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  SensorDataReadyHandle = osSemaphoreCreate(osSemaphore(SensorDataReady), 1);
 80006c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80006cc:	2101      	movs	r1, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 faa9 	bl	8001c26 <osSemaphoreCreate>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a38      	ldr	r2, [pc, #224]	; (80007b8 <MX_FREERTOS_Init+0x120>)
 80006d8:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of SensorQueue */
  osMessageQDef(SensorQueue, 5, SensorData_t);
 80006da:	4b38      	ldr	r3, [pc, #224]	; (80007bc <MX_FREERTOS_Init+0x124>)
 80006dc:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80006e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SensorQueueHandle = osMessageCreate(osMessageQ(SensorQueue), NULL);
 80006e6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fb6f 	bl	8001dd0 <osMessageCreate>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a32      	ldr	r2, [pc, #200]	; (80007c0 <MX_FREERTOS_Init+0x128>)
 80006f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCDQueue */
  osMessageQDef(LCDQueue, 2, LCDQueue_t);
 80006f8:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <MX_FREERTOS_Init+0x12c>)
 80006fa:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80006fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LCDQueueHandle = osMessageCreate(osMessageQ(LCDQueue), NULL);
 8000704:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fb60 	bl	8001dd0 <osMessageCreate>
 8000710:	4603      	mov	r3, r0
 8000712:	4a2d      	ldr	r2, [pc, #180]	; (80007c8 <MX_FREERTOS_Init+0x130>)
 8000714:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LCD */
  osThreadDef(LCD, LCD_Task, osPriorityNormal, 0, 128);
 8000716:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <MX_FREERTOS_Init+0x134>)
 8000718:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800071c:	461d      	mov	r5, r3
 800071e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000722:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDHandle = osThreadCreate(osThread(LCD), NULL);
 800072a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fa18 	bl	8001b66 <osThreadCreate>
 8000736:	4603      	mov	r3, r0
 8000738:	4a25      	ldr	r2, [pc, #148]	; (80007d0 <MX_FREERTOS_Init+0x138>)
 800073a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sensor */
  osThreadDef(Sensor, Sensor_Task, osPriorityAboveNormal, 0, 128);
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <MX_FREERTOS_Init+0x13c>)
 800073e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000742:	461d      	mov	r5, r3
 8000744:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000746:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000748:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800074c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorHandle = osThreadCreate(osThread(Sensor), NULL);
 8000750:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fa05 	bl	8001b66 <osThreadCreate>
 800075c:	4603      	mov	r3, r0
 800075e:	4a1e      	ldr	r2, [pc, #120]	; (80007d8 <MX_FREERTOS_Init+0x140>)
 8000760:	6013      	str	r3, [r2, #0]

  /* definition and creation of Input */
  osThreadDef(Input, Input_Task, osPriorityNormal, 0, 128);
 8000762:	4b1e      	ldr	r3, [pc, #120]	; (80007dc <MX_FREERTOS_Init+0x144>)
 8000764:	f107 041c 	add.w	r4, r7, #28
 8000768:	461d      	mov	r5, r3
 800076a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InputHandle = osThreadCreate(osThread(Input), NULL);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2100      	movs	r1, #0
 800077c:	4618      	mov	r0, r3
 800077e:	f001 f9f2 	bl	8001b66 <osThreadCreate>
 8000782:	4603      	mov	r3, r0
 8000784:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <MX_FREERTOS_Init+0x148>)
 8000786:	6013      	str	r3, [r2, #0]

  /* definition and creation of Control */
  osThreadDef(Control, Control_Task, osPriorityLow, 0, 128);
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <MX_FREERTOS_Init+0x14c>)
 800078a:	463c      	mov	r4, r7
 800078c:	461d      	mov	r5, r3
 800078e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000792:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlHandle = osThreadCreate(osThread(Control), NULL);
 800079a:	463b      	mov	r3, r7
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 f9e1 	bl	8001b66 <osThreadCreate>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4a10      	ldr	r2, [pc, #64]	; (80007e8 <MX_FREERTOS_Init+0x150>)
 80007a8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80007aa:	bf00      	nop
 80007ac:	37a0      	adds	r7, #160	; 0xa0
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bdb0      	pop	{r4, r5, r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000ac 	.word	0x200000ac
 80007b8:	200000b0 	.word	0x200000b0
 80007bc:	080052a4 	.word	0x080052a4
 80007c0:	200000a4 	.word	0x200000a4
 80007c4:	080052b4 	.word	0x080052b4
 80007c8:	200000a8 	.word	0x200000a8
 80007cc:	080052c4 	.word	0x080052c4
 80007d0:	20000094 	.word	0x20000094
 80007d4:	080052e0 	.word	0x080052e0
 80007d8:	20000098 	.word	0x20000098
 80007dc:	080052fc 	.word	0x080052fc
 80007e0:	2000009c 	.word	0x2000009c
 80007e4:	08005318 	.word	0x08005318
 80007e8:	200000a0 	.word	0x200000a0

080007ec <LCD_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LCD_Task */
__weak void LCD_Task(void const * argument)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCD_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f4:	2001      	movs	r0, #1
 80007f6:	f001 fa02 	bl	8001bfe <osDelay>
 80007fa:	e7fb      	b.n	80007f4 <LCD_Task+0x8>

080007fc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	041a      	lsls	r2, r3, #16
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	619a      	str	r2, [r3, #24]
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
	...

0800081c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000828:	4907      	ldr	r1, [pc, #28]	; (8000848 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4313      	orrs	r3, r2
 800082e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	4013      	ands	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40023800 	.word	0x40023800

0800084c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8000862:	2010      	movs	r0, #16
 8000864:	f7ff ffda 	bl	800081c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000868:	2004      	movs	r0, #4
 800086a:	f7ff ffd7 	bl	800081c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800086e:	2080      	movs	r0, #128	; 0x80
 8000870:	f7ff ffd4 	bl	800081c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000874:	2001      	movs	r0, #1
 8000876:	f7ff ffd1 	bl	800081c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800087a:	2002      	movs	r0, #2
 800087c:	f7ff ffce 	bl	800081c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000880:	2008      	movs	r0, #8
 8000882:	f7ff ffcb 	bl	800081c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	4829      	ldr	r0, [pc, #164]	; (8000930 <MX_GPIO_Init+0xe4>)
 800088c:	f7ff ffb6 	bl	80007fc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 8000890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000894:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_0|LL_GPIO_PIN_1;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000896:	2303      	movs	r3, #3
 8000898:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800089e:	463b      	mov	r3, r7
 80008a0:	4619      	mov	r1, r3
 80008a2:	4824      	ldr	r0, [pc, #144]	; (8000934 <MX_GPIO_Init+0xe8>)
 80008a4:	f001 f8bb 	bl	8001a1e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_0
 80008a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008ac:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008ae:	2303      	movs	r3, #3
 80008b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	481f      	ldr	r0, [pc, #124]	; (8000938 <MX_GPIO_Init+0xec>)
 80008bc:	f001 f8af 	bl	8001a1e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 80008c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c4:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008c6:	2303      	movs	r3, #3
 80008c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	463b      	mov	r3, r7
 80008d0:	4619      	mov	r1, r3
 80008d2:	481a      	ldr	r0, [pc, #104]	; (800093c <MX_GPIO_Init+0xf0>)
 80008d4:	f001 f8a3 	bl	8001a1e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10
 80008d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008dc:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14
                          |LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008de:	2303      	movs	r3, #3
 80008e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	463b      	mov	r3, r7
 80008e8:	4619      	mov	r1, r3
 80008ea:	4815      	ldr	r0, [pc, #84]	; (8000940 <MX_GPIO_Init+0xf4>)
 80008ec:	f001 f897 	bl	8001a1e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 80008f0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80008f4:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_0
                          |LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80008f6:	2303      	movs	r3, #3
 80008f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fe:	463b      	mov	r3, r7
 8000900:	4619      	mov	r1, r3
 8000902:	480b      	ldr	r0, [pc, #44]	; (8000930 <MX_GPIO_Init+0xe4>)
 8000904:	f001 f88b 	bl	8001a1e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800090e:	2301      	movs	r3, #1
 8000910:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800091e:	463b      	mov	r3, r7
 8000920:	4619      	mov	r1, r3
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_GPIO_Init+0xe4>)
 8000924:	f001 f87b 	bl	8001a1e <LL_GPIO_Init>

}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40020c00 	.word	0x40020c00
 8000934:	40021000 	.word	0x40021000
 8000938:	40020800 	.word	0x40020800
 800093c:	40020000 	.word	0x40020000
 8000940:	40020400 	.word	0x40020400

08000944 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000948:	f000 f9a8 	bl	8000c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094c:	f000 f808 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000950:	f7ff ff7c 	bl	800084c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000954:	f7ff fea0 	bl	8000698 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000958:	f001 f8fe 	bl	8001b58 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800095c:	e7fe      	b.n	800095c <main+0x18>
	...

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	; 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	2230      	movs	r2, #48	; 0x30
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fd65 	bl	800443e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <SystemClock_Config+0xcc>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098c:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <SystemClock_Config+0xcc>)
 800098e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000992:	6413      	str	r3, [r2, #64]	; 0x40
 8000994:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <SystemClock_Config+0xcc>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <SystemClock_Config+0xd0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a21      	ldr	r2, [pc, #132]	; (8000a30 <SystemClock_Config+0xd0>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <SystemClock_Config+0xd0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c6:	2302      	movs	r3, #2
 80009c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009d4:	23a8      	movs	r3, #168	; 0xa8
 80009d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d8:	2302      	movs	r3, #2
 80009da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009dc:	2304      	movs	r3, #4
 80009de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 fab1 	bl	8000f4c <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009f0:	f000 f820 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f4:	230f      	movs	r3, #15
 80009f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f8:	2302      	movs	r3, #2
 80009fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	2105      	movs	r1, #5
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fd12 	bl	800143c <HAL_RCC_ClockConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a1e:	f000 f809 	bl	8000a34 <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	3750      	adds	r7, #80	; 0x50
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <HAL_MspInit+0x54>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <HAL_MspInit+0x54>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x54>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_MspInit+0x54>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <HAL_MspInit+0x54>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_MspInit+0x54>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	210f      	movs	r1, #15
 8000a82:	f06f 0001 	mvn.w	r0, #1
 8000a86:	f000 fa38 	bl	8000efa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <NMI_Handler+0x4>

08000a9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac8:	f000 f93a 	bl	8000d40 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000acc:	f002 fe44 	bl	8003758 <xTaskGetSchedulerState>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d001      	beq.n	8000ada <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ad6:	f003 f907 	bl	8003ce8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}

08000ade <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	60f8      	str	r0, [r7, #12]
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	e00a      	b.n	8000b06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000af0:	f3af 8000 	nop.w
 8000af4:	4601      	mov	r1, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1c5a      	adds	r2, r3, #1
 8000afa:	60ba      	str	r2, [r7, #8]
 8000afc:	b2ca      	uxtb	r2, r1
 8000afe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	3301      	adds	r3, #1
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dbf0      	blt.n	8000af0 <_read+0x12>
  }

  return len;
 8000b0e:	687b      	ldr	r3, [r7, #4]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e009      	b.n	8000b3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	1c5a      	adds	r2, r3, #1
 8000b2e:	60ba      	str	r2, [r7, #8]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	dbf1      	blt.n	8000b2a <_write+0x12>
  }
  return len;
 8000b46:	687b      	ldr	r3, [r7, #4]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <_close>:

int _close(int file)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b78:	605a      	str	r2, [r3, #4]
  return 0;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <_isatty>:

int _isatty(int file)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b085      	sub	sp, #20
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	60f8      	str	r0, [r7, #12]
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc0:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <_sbrk+0x5c>)
 8000bc2:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <_sbrk+0x60>)
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <_sbrk+0x64>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <_sbrk+0x68>)
 8000bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <_sbrk+0x64>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d207      	bcs.n	8000bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be8:	f003 faf8 	bl	80041dc <__errno>
 8000bec:	4603      	mov	r3, r0
 8000bee:	220c      	movs	r2, #12
 8000bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	e009      	b.n	8000c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bfe:	4b07      	ldr	r3, [pc, #28]	; (8000c1c <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <_sbrk+0x64>)
 8000c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20020000 	.word	0x20020000
 8000c18:	00000400 	.word	0x00000400
 8000c1c:	20000368 	.word	0x20000368
 8000c20:	200040d8 	.word	0x200040d8

08000c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SystemInit+0x20>)
 8000c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <SystemInit+0x20>)
 8000c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c4e:	490e      	ldr	r1, [pc, #56]	; (8000c88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c64:	4c0b      	ldr	r4, [pc, #44]	; (8000c94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c72:	f7ff ffd7 	bl	8000c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c76:	f003 fbad 	bl	80043d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7a:	f7ff fe63 	bl	8000944 <main>
  bx  lr    
 8000c7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c8c:	080053f4 	.word	0x080053f4
  ldr r2, =_sbss
 8000c90:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c94:	200040d4 	.word	0x200040d4

08000c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	; (8000cdc <HAL_Init+0x40>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cac:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <HAL_Init+0x40>)
 8000cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a07      	ldr	r2, [pc, #28]	; (8000cdc <HAL_Init+0x40>)
 8000cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc4:	2003      	movs	r0, #3
 8000cc6:	f000 f90d 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cca:	200f      	movs	r0, #15
 8000ccc:	f000 f808 	bl	8000ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd0:	f7ff feb6 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023c00 	.word	0x40023c00

08000ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x54>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x58>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f917 	bl	8000f32 <HAL_SYSTICK_Config>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e00e      	b.n	8000d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b0f      	cmp	r3, #15
 8000d12:	d80a      	bhi.n	8000d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d14:	2200      	movs	r2, #0
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	f04f 30ff 	mov.w	r0, #4294967295
 8000d1c:	f000 f8ed 	bl	8000efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d20:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <HAL_InitTick+0x5c>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	20000004 	.word	0x20000004

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	2000036c 	.word	0x2000036c

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	2000036c 	.word	0x2000036c

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	; (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff47 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff5c 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff8e 	bl	8000e38 <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffb0 	bl	8000ea0 <SysTick_Config>
 8000f40:	4603      	mov	r3, r0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e267      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d075      	beq.n	8001056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f6a:	4b88      	ldr	r3, [pc, #544]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d00c      	beq.n	8000f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f76:	4b85      	ldr	r3, [pc, #532]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f7e:	2b08      	cmp	r3, #8
 8000f80:	d112      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f82:	4b82      	ldr	r3, [pc, #520]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f8e:	d10b      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f90:	4b7e      	ldr	r3, [pc, #504]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d05b      	beq.n	8001054 <HAL_RCC_OscConfig+0x108>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d157      	bne.n	8001054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e242      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fb0:	d106      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x74>
 8000fb2:	4b76      	ldr	r3, [pc, #472]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a75      	ldr	r2, [pc, #468]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e01d      	b.n	8000ffc <HAL_RCC_OscConfig+0xb0>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fc8:	d10c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x98>
 8000fca:	4b70      	ldr	r3, [pc, #448]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a6f      	ldr	r2, [pc, #444]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	4b6d      	ldr	r3, [pc, #436]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a6c      	ldr	r2, [pc, #432]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e00b      	b.n	8000ffc <HAL_RCC_OscConfig+0xb0>
 8000fe4:	4b69      	ldr	r3, [pc, #420]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a68      	ldr	r2, [pc, #416]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	4b66      	ldr	r3, [pc, #408]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a65      	ldr	r2, [pc, #404]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8000ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d013      	beq.n	800102c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001004:	f7ff feb0 	bl	8000d68 <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800100c:	f7ff feac 	bl	8000d68 <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b64      	cmp	r3, #100	; 0x64
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e207      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	4b5b      	ldr	r3, [pc, #364]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f0      	beq.n	800100c <HAL_RCC_OscConfig+0xc0>
 800102a:	e014      	b.n	8001056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fe9c 	bl	8000d68 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001034:	f7ff fe98 	bl	8000d68 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b64      	cmp	r3, #100	; 0x64
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e1f3      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	4b51      	ldr	r3, [pc, #324]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f0      	bne.n	8001034 <HAL_RCC_OscConfig+0xe8>
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d063      	beq.n	800112a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001062:	4b4a      	ldr	r3, [pc, #296]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 030c 	and.w	r3, r3, #12
 800106a:	2b00      	cmp	r3, #0
 800106c:	d00b      	beq.n	8001086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800106e:	4b47      	ldr	r3, [pc, #284]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001076:	2b08      	cmp	r3, #8
 8001078:	d11c      	bne.n	80010b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800107a:	4b44      	ldr	r3, [pc, #272]	; (800118c <HAL_RCC_OscConfig+0x240>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d116      	bne.n	80010b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001086:	4b41      	ldr	r3, [pc, #260]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <HAL_RCC_OscConfig+0x152>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d001      	beq.n	800109e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e1c7      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109e:	4b3b      	ldr	r3, [pc, #236]	; (800118c <HAL_RCC_OscConfig+0x240>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4937      	ldr	r1, [pc, #220]	; (800118c <HAL_RCC_OscConfig+0x240>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b2:	e03a      	b.n	800112a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d020      	beq.n	80010fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010bc:	4b34      	ldr	r3, [pc, #208]	; (8001190 <HAL_RCC_OscConfig+0x244>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c2:	f7ff fe51 	bl	8000d68 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ca:	f7ff fe4d 	bl	8000d68 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e1a8      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <HAL_RCC_OscConfig+0x240>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d0f0      	beq.n	80010ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_RCC_OscConfig+0x240>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4925      	ldr	r1, [pc, #148]	; (800118c <HAL_RCC_OscConfig+0x240>)
 80010f8:	4313      	orrs	r3, r2
 80010fa:	600b      	str	r3, [r1, #0]
 80010fc:	e015      	b.n	800112a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <HAL_RCC_OscConfig+0x244>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001104:	f7ff fe30 	bl	8000d68 <HAL_GetTick>
 8001108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	e008      	b.n	800111e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110c:	f7ff fe2c 	bl	8000d68 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b02      	cmp	r3, #2
 8001118:	d901      	bls.n	800111e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e187      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f0      	bne.n	800110c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d036      	beq.n	80011a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d016      	beq.n	800116c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_RCC_OscConfig+0x248>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001144:	f7ff fe10 	bl	8000d68 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800114c:	f7ff fe0c 	bl	8000d68 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e167      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_RCC_OscConfig+0x240>)
 8001160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0x200>
 800116a:	e01b      	b.n	80011a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_RCC_OscConfig+0x248>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001172:	f7ff fdf9 	bl	8000d68 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001178:	e00e      	b.n	8001198 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117a:	f7ff fdf5 	bl	8000d68 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d907      	bls.n	8001198 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e150      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
 800118c:	40023800 	.word	0x40023800
 8001190:	42470000 	.word	0x42470000
 8001194:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001198:	4b88      	ldr	r3, [pc, #544]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 800119a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1ea      	bne.n	800117a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	f000 8097 	beq.w	80012e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b6:	4b81      	ldr	r3, [pc, #516]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10f      	bne.n	80011e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b7d      	ldr	r3, [pc, #500]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a7c      	ldr	r2, [pc, #496]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b7a      	ldr	r3, [pc, #488]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011de:	2301      	movs	r3, #1
 80011e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e2:	4b77      	ldr	r3, [pc, #476]	; (80013c0 <HAL_RCC_OscConfig+0x474>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d118      	bne.n	8001220 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ee:	4b74      	ldr	r3, [pc, #464]	; (80013c0 <HAL_RCC_OscConfig+0x474>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a73      	ldr	r2, [pc, #460]	; (80013c0 <HAL_RCC_OscConfig+0x474>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fdb5 	bl	8000d68 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001202:	f7ff fdb1 	bl	8000d68 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e10c      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001214:	4b6a      	ldr	r3, [pc, #424]	; (80013c0 <HAL_RCC_OscConfig+0x474>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x2ea>
 8001228:	4b64      	ldr	r3, [pc, #400]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 800122a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122c:	4a63      	ldr	r2, [pc, #396]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6713      	str	r3, [r2, #112]	; 0x70
 8001234:	e01c      	b.n	8001270 <HAL_RCC_OscConfig+0x324>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b05      	cmp	r3, #5
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x30c>
 800123e:	4b5f      	ldr	r3, [pc, #380]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 8001240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001242:	4a5e      	ldr	r2, [pc, #376]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6713      	str	r3, [r2, #112]	; 0x70
 800124a:	4b5c      	ldr	r3, [pc, #368]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 800124c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800124e:	4a5b      	ldr	r2, [pc, #364]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6713      	str	r3, [r2, #112]	; 0x70
 8001256:	e00b      	b.n	8001270 <HAL_RCC_OscConfig+0x324>
 8001258:	4b58      	ldr	r3, [pc, #352]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 800125a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125c:	4a57      	ldr	r2, [pc, #348]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 800125e:	f023 0301 	bic.w	r3, r3, #1
 8001262:	6713      	str	r3, [r2, #112]	; 0x70
 8001264:	4b55      	ldr	r3, [pc, #340]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 8001266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001268:	4a54      	ldr	r2, [pc, #336]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 800126a:	f023 0304 	bic.w	r3, r3, #4
 800126e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d015      	beq.n	80012a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001278:	f7ff fd76 	bl	8000d68 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127e:	e00a      	b.n	8001296 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001280:	f7ff fd72 	bl	8000d68 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f241 3288 	movw	r2, #5000	; 0x1388
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e0cb      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001296:	4b49      	ldr	r3, [pc, #292]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 8001298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0ee      	beq.n	8001280 <HAL_RCC_OscConfig+0x334>
 80012a2:	e014      	b.n	80012ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a4:	f7ff fd60 	bl	8000d68 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012aa:	e00a      	b.n	80012c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ac:	f7ff fd5c 	bl	8000d68 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e0b5      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c2:	4b3e      	ldr	r3, [pc, #248]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1ee      	bne.n	80012ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ce:	7dfb      	ldrb	r3, [r7, #23]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d105      	bne.n	80012e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d4:	4b39      	ldr	r3, [pc, #228]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	4a38      	ldr	r2, [pc, #224]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 80012da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 80a1 	beq.w	800142c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012ea:	4b34      	ldr	r3, [pc, #208]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d05c      	beq.n	80013b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d141      	bne.n	8001382 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <HAL_RCC_OscConfig+0x478>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fd30 	bl	8000d68 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800130c:	f7ff fd2c 	bl	8000d68 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e087      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131e:	4b27      	ldr	r3, [pc, #156]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f0      	bne.n	800130c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69da      	ldr	r2, [r3, #28]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	019b      	lsls	r3, r3, #6
 800133a:	431a      	orrs	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	085b      	lsrs	r3, r3, #1
 8001342:	3b01      	subs	r3, #1
 8001344:	041b      	lsls	r3, r3, #16
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	061b      	lsls	r3, r3, #24
 800134e:	491b      	ldr	r1, [pc, #108]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_RCC_OscConfig+0x478>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fd05 	bl	8000d68 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001362:	f7ff fd01 	bl	8000d68 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e05c      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0f0      	beq.n	8001362 <HAL_RCC_OscConfig+0x416>
 8001380:	e054      	b.n	800142c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <HAL_RCC_OscConfig+0x478>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fcee 	bl	8000d68 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001390:	f7ff fcea 	bl	8000d68 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e045      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_RCC_OscConfig+0x470>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x444>
 80013ae:	e03d      	b.n	800142c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d107      	bne.n	80013c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e038      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40007000 	.word	0x40007000
 80013c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <HAL_RCC_OscConfig+0x4ec>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d028      	beq.n	8001428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d121      	bne.n	8001428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d11a      	bne.n	8001428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013f8:	4013      	ands	r3, r2
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80013fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001400:	4293      	cmp	r3, r2
 8001402:	d111      	bne.n	8001428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	085b      	lsrs	r3, r3, #1
 8001410:	3b01      	subs	r3, #1
 8001412:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001414:	429a      	cmp	r2, r3
 8001416:	d107      	bne.n	8001428 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0cc      	b.n	80015ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001450:	4b68      	ldr	r3, [pc, #416]	; (80015f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d90c      	bls.n	8001478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4b65      	ldr	r3, [pc, #404]	; (80015f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001466:	4b63      	ldr	r3, [pc, #396]	; (80015f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	683a      	ldr	r2, [r7, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	d001      	beq.n	8001478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0b8      	b.n	80015ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d020      	beq.n	80014c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	d005      	beq.n	800149c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001490:	4b59      	ldr	r3, [pc, #356]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a58      	ldr	r2, [pc, #352]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800149a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a8:	4b53      	ldr	r3, [pc, #332]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	4a52      	ldr	r2, [pc, #328]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b4:	4b50      	ldr	r3, [pc, #320]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	494d      	ldr	r1, [pc, #308]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	4313      	orrs	r3, r2
 80014c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d044      	beq.n	800155c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d119      	bne.n	800151a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e07f      	b.n	80015ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d003      	beq.n	80014fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d107      	bne.n	800150a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fa:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d109      	bne.n	800151a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e06f      	b.n	80015ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150a:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e067      	b.n	80015ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800151a:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f023 0203 	bic.w	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	4934      	ldr	r1, [pc, #208]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	4313      	orrs	r3, r2
 800152a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800152c:	f7ff fc1c 	bl	8000d68 <HAL_GetTick>
 8001530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001532:	e00a      	b.n	800154a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001534:	f7ff fc18 	bl	8000d68 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e04f      	b.n	80015ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 020c 	and.w	r2, r3, #12
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	429a      	cmp	r2, r3
 800155a:	d1eb      	bne.n	8001534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <HAL_RCC_ClockConfig+0x1b8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d20c      	bcs.n	8001584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <HAL_RCC_ClockConfig+0x1b8>)
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d001      	beq.n	8001584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e032      	b.n	80015ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d008      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001590:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4916      	ldr	r1, [pc, #88]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d009      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	490e      	ldr	r1, [pc, #56]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015c2:	f000 f821 	bl	8001608 <HAL_RCC_GetSysClockFreq>
 80015c6:	4602      	mov	r2, r0
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	091b      	lsrs	r3, r3, #4
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	490a      	ldr	r1, [pc, #40]	; (80015fc <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	5ccb      	ldrb	r3, [r1, r3]
 80015d6:	fa22 f303 	lsr.w	r3, r2, r3
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015de:	4b09      	ldr	r3, [pc, #36]	; (8001604 <HAL_RCC_ClockConfig+0x1c8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fb7c 	bl	8000ce0 <HAL_InitTick>

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023c00 	.word	0x40023c00
 80015f8:	40023800 	.word	0x40023800
 80015fc:	0800533c 	.word	0x0800533c
 8001600:	20000000 	.word	0x20000000
 8001604:	20000004 	.word	0x20000004

08001608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800160c:	b094      	sub	sp, #80	; 0x50
 800160e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	647b      	str	r3, [r7, #68]	; 0x44
 8001614:	2300      	movs	r3, #0
 8001616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001618:	2300      	movs	r3, #0
 800161a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001620:	4b79      	ldr	r3, [pc, #484]	; (8001808 <HAL_RCC_GetSysClockFreq+0x200>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 030c 	and.w	r3, r3, #12
 8001628:	2b08      	cmp	r3, #8
 800162a:	d00d      	beq.n	8001648 <HAL_RCC_GetSysClockFreq+0x40>
 800162c:	2b08      	cmp	r3, #8
 800162e:	f200 80e1 	bhi.w	80017f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <HAL_RCC_GetSysClockFreq+0x34>
 8001636:	2b04      	cmp	r3, #4
 8001638:	d003      	beq.n	8001642 <HAL_RCC_GetSysClockFreq+0x3a>
 800163a:	e0db      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800163c:	4b73      	ldr	r3, [pc, #460]	; (800180c <HAL_RCC_GetSysClockFreq+0x204>)
 800163e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001640:	e0db      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001642:	4b73      	ldr	r3, [pc, #460]	; (8001810 <HAL_RCC_GetSysClockFreq+0x208>)
 8001644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001646:	e0d8      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001648:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <HAL_RCC_GetSysClockFreq+0x200>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001650:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001652:	4b6d      	ldr	r3, [pc, #436]	; (8001808 <HAL_RCC_GetSysClockFreq+0x200>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d063      	beq.n	8001726 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800165e:	4b6a      	ldr	r3, [pc, #424]	; (8001808 <HAL_RCC_GetSysClockFreq+0x200>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	099b      	lsrs	r3, r3, #6
 8001664:	2200      	movs	r2, #0
 8001666:	63bb      	str	r3, [r7, #56]	; 0x38
 8001668:	63fa      	str	r2, [r7, #60]	; 0x3c
 800166a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800166c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
 8001672:	2300      	movs	r3, #0
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
 8001676:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800167a:	4622      	mov	r2, r4
 800167c:	462b      	mov	r3, r5
 800167e:	f04f 0000 	mov.w	r0, #0
 8001682:	f04f 0100 	mov.w	r1, #0
 8001686:	0159      	lsls	r1, r3, #5
 8001688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800168c:	0150      	lsls	r0, r2, #5
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4621      	mov	r1, r4
 8001694:	1a51      	subs	r1, r2, r1
 8001696:	6139      	str	r1, [r7, #16]
 8001698:	4629      	mov	r1, r5
 800169a:	eb63 0301 	sbc.w	r3, r3, r1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016ac:	4659      	mov	r1, fp
 80016ae:	018b      	lsls	r3, r1, #6
 80016b0:	4651      	mov	r1, sl
 80016b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016b6:	4651      	mov	r1, sl
 80016b8:	018a      	lsls	r2, r1, #6
 80016ba:	4651      	mov	r1, sl
 80016bc:	ebb2 0801 	subs.w	r8, r2, r1
 80016c0:	4659      	mov	r1, fp
 80016c2:	eb63 0901 	sbc.w	r9, r3, r1
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016da:	4690      	mov	r8, r2
 80016dc:	4699      	mov	r9, r3
 80016de:	4623      	mov	r3, r4
 80016e0:	eb18 0303 	adds.w	r3, r8, r3
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	462b      	mov	r3, r5
 80016e8:	eb49 0303 	adc.w	r3, r9, r3
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	f04f 0300 	mov.w	r3, #0
 80016f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016fa:	4629      	mov	r1, r5
 80016fc:	024b      	lsls	r3, r1, #9
 80016fe:	4621      	mov	r1, r4
 8001700:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001704:	4621      	mov	r1, r4
 8001706:	024a      	lsls	r2, r1, #9
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800170e:	2200      	movs	r2, #0
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
 8001712:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001718:	f7fe fdaa 	bl	8000270 <__aeabi_uldivmod>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4613      	mov	r3, r2
 8001722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001724:	e058      	b.n	80017d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001726:	4b38      	ldr	r3, [pc, #224]	; (8001808 <HAL_RCC_GetSysClockFreq+0x200>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	099b      	lsrs	r3, r3, #6
 800172c:	2200      	movs	r2, #0
 800172e:	4618      	mov	r0, r3
 8001730:	4611      	mov	r1, r2
 8001732:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001736:	623b      	str	r3, [r7, #32]
 8001738:	2300      	movs	r3, #0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
 800173c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001740:	4642      	mov	r2, r8
 8001742:	464b      	mov	r3, r9
 8001744:	f04f 0000 	mov.w	r0, #0
 8001748:	f04f 0100 	mov.w	r1, #0
 800174c:	0159      	lsls	r1, r3, #5
 800174e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001752:	0150      	lsls	r0, r2, #5
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4641      	mov	r1, r8
 800175a:	ebb2 0a01 	subs.w	sl, r2, r1
 800175e:	4649      	mov	r1, r9
 8001760:	eb63 0b01 	sbc.w	fp, r3, r1
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001770:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001774:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001778:	ebb2 040a 	subs.w	r4, r2, sl
 800177c:	eb63 050b 	sbc.w	r5, r3, fp
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	00eb      	lsls	r3, r5, #3
 800178a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800178e:	00e2      	lsls	r2, r4, #3
 8001790:	4614      	mov	r4, r2
 8001792:	461d      	mov	r5, r3
 8001794:	4643      	mov	r3, r8
 8001796:	18e3      	adds	r3, r4, r3
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	464b      	mov	r3, r9
 800179c:	eb45 0303 	adc.w	r3, r5, r3
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017ae:	4629      	mov	r1, r5
 80017b0:	028b      	lsls	r3, r1, #10
 80017b2:	4621      	mov	r1, r4
 80017b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017b8:	4621      	mov	r1, r4
 80017ba:	028a      	lsls	r2, r1, #10
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017c2:	2200      	movs	r2, #0
 80017c4:	61bb      	str	r3, [r7, #24]
 80017c6:	61fa      	str	r2, [r7, #28]
 80017c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017cc:	f7fe fd50 	bl	8000270 <__aeabi_uldivmod>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4613      	mov	r3, r2
 80017d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <HAL_RCC_GetSysClockFreq+0x200>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	0c1b      	lsrs	r3, r3, #16
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	3301      	adds	r3, #1
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80017e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80017ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017f2:	e002      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_RCC_GetSysClockFreq+0x204>)
 80017f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3750      	adds	r7, #80	; 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	00f42400 	.word	0x00f42400
 8001810:	007a1200 	.word	0x007a1200

08001814 <LL_GPIO_SetPinMode>:
{
 8001814:	b480      	push	{r7}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa93 f3a3 	rbit	r3, r3
 800182e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	fab3 f383 	clz	r3, r3
 8001836:	b2db      	uxtb	r3, r3
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2103      	movs	r1, #3
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	61bb      	str	r3, [r7, #24]
  return result;
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	fa01 f303 	lsl.w	r3, r1, r3
 8001860:	431a      	orrs	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	601a      	str	r2, [r3, #0]
}
 8001866:	bf00      	nop
 8001868:	3724      	adds	r7, #36	; 0x24
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <LL_GPIO_SetPinOutputType>:
{
 8001872:	b480      	push	{r7}
 8001874:	b085      	sub	sp, #20
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	43db      	mvns	r3, r3
 8001886:	401a      	ands	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	431a      	orrs	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	605a      	str	r2, [r3, #4]
}
 8001896:	bf00      	nop
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_GPIO_SetPinSpeed>:
{
 80018a2:	b480      	push	{r7}
 80018a4:	b089      	sub	sp, #36	; 0x24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	613b      	str	r3, [r7, #16]
  return result;
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	fab3 f383 	clz	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2103      	movs	r1, #3
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	401a      	ands	r2, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	fa93 f3a3 	rbit	r3, r3
 80018dc:	61bb      	str	r3, [r7, #24]
  return result;
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	fab3 f383 	clz	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	431a      	orrs	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	609a      	str	r2, [r3, #8]
}
 80018f4:	bf00      	nop
 80018f6:	3724      	adds	r7, #36	; 0x24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_GPIO_SetPinPull>:
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa93 f3a3 	rbit	r3, r3
 800191a:	613b      	str	r3, [r7, #16]
  return result;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	fab3 f383 	clz	r3, r3
 8001922:	b2db      	uxtb	r3, r3
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2103      	movs	r1, #3
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	401a      	ands	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	fa93 f3a3 	rbit	r3, r3
 800193a:	61bb      	str	r3, [r7, #24]
  return result;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	fab3 f383 	clz	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	431a      	orrs	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	60da      	str	r2, [r3, #12]
}
 8001952:	bf00      	nop
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_GPIO_SetAFPin_0_7>:
{
 800195e:	b480      	push	{r7}
 8001960:	b089      	sub	sp, #36	; 0x24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6a1a      	ldr	r2, [r3, #32]
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	fa93 f3a3 	rbit	r3, r3
 8001978:	613b      	str	r3, [r7, #16]
  return result;
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	fab3 f383 	clz	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	210f      	movs	r1, #15
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	401a      	ands	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	61bb      	str	r3, [r7, #24]
  return result;
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	431a      	orrs	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	621a      	str	r2, [r3, #32]
}
 80019b0:	bf00      	nop
 80019b2:	3724      	adds	r7, #36	; 0x24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <LL_GPIO_SetAFPin_8_15>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	0a1b      	lsrs	r3, r3, #8
 80019d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	613b      	str	r3, [r7, #16]
  return result;
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	210f      	movs	r1, #15
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	401a      	ands	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	61bb      	str	r3, [r7, #24]
  return result;
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	fa01 f303 	lsl.w	r3, r1, r3
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a12:	bf00      	nop
 8001a14:	3724      	adds	r7, #36	; 0x24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b088      	sub	sp, #32
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	613b      	str	r3, [r7, #16]
  return result;
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	fab3 f383 	clz	r3, r3
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001a48:	e050      	b.n	8001aec <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2101      	movs	r1, #1
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d042      	beq.n	8001ae6 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d003      	beq.n	8001a70 <LL_GPIO_Init+0x52>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d10d      	bne.n	8001a8c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	461a      	mov	r2, r3
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff12 	bl	80018a2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	461a      	mov	r2, r3
 8001a84:	69b9      	ldr	r1, [r7, #24]
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fef3 	bl	8001872 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	461a      	mov	r2, r3
 8001a92:	69b9      	ldr	r1, [r7, #24]
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff33 	bl	8001900 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d11a      	bne.n	8001ad8 <LL_GPIO_Init+0xba>
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	fa93 f3a3 	rbit	r3, r3
 8001aac:	60bb      	str	r3, [r7, #8]
  return result;
 8001aae:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001ab0:	fab3 f383 	clz	r3, r3
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b07      	cmp	r3, #7
 8001ab8:	d807      	bhi.n	8001aca <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	69b9      	ldr	r1, [r7, #24]
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ff4b 	bl	800195e <LL_GPIO_SetAFPin_0_7>
 8001ac8:	e006      	b.n	8001ad8 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	69b9      	ldr	r1, [r7, #24]
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ff72 	bl	80019bc <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	461a      	mov	r2, r3
 8001ade:	69b9      	ldr	r1, [r7, #24]
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fe97 	bl	8001814 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	fa22 f303 	lsr.w	r3, r2, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1a7      	bne.n	8001a4a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b16:	2b84      	cmp	r3, #132	; 0x84
 8001b18:	d005      	beq.n	8001b26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001b1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4413      	add	r3, r2
 8001b22:	3303      	adds	r3, #3
 8001b24:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b3a:	f3ef 8305 	mrs	r3, IPSR
 8001b3e:	607b      	str	r3, [r7, #4]
  return(result);
 8001b40:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	bf14      	ite	ne
 8001b46:	2301      	movne	r3, #1
 8001b48:	2300      	moveq	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001b5c:	f001 f9ea 	bl	8002f34 <vTaskStartScheduler>
  
  return osOK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b68:	b089      	sub	sp, #36	; 0x24
 8001b6a:	af04      	add	r7, sp, #16
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d020      	beq.n	8001bba <osThreadCreate+0x54>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d01c      	beq.n	8001bba <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685c      	ldr	r4, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681d      	ldr	r5, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691e      	ldr	r6, [r3, #16]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ffb6 	bl	8001b04 <makeFreeRtosPriority>
 8001b98:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ba2:	9202      	str	r2, [sp, #8]
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	9100      	str	r1, [sp, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	4632      	mov	r2, r6
 8001bac:	4629      	mov	r1, r5
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f000 ffe2 	bl	8002b78 <xTaskCreateStatic>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	e01c      	b.n	8001bf4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685c      	ldr	r4, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bc6:	b29e      	uxth	r6, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff98 	bl	8001b04 <makeFreeRtosPriority>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	9200      	str	r2, [sp, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	4632      	mov	r2, r6
 8001be2:	4629      	mov	r1, r5
 8001be4:	4620      	mov	r0, r4
 8001be6:	f001 f824 	bl	8002c32 <xTaskCreate>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d001      	beq.n	8001bf4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e000      	b.n	8001bf6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bfe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b084      	sub	sp, #16
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <osDelay+0x16>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	e000      	b.n	8001c16 <osDelay+0x18>
 8001c14:	2301      	movs	r3, #1
 8001c16:	4618      	mov	r0, r3
 8001c18:	f001 f958 	bl	8002ecc <vTaskDelay>
  
  return osOK;
 8001c1c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af02      	add	r7, sp, #8
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00f      	beq.n	8001c58 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d10a      	bne.n	8001c54 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2203      	movs	r2, #3
 8001c44:	9200      	str	r2, [sp, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f000 fab8 	bl	80021c0 <xQueueGenericCreateStatic>
 8001c50:	4603      	mov	r3, r0
 8001c52:	e016      	b.n	8001c82 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e014      	b.n	8001c82 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d110      	bne.n	8001c80 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001c5e:	2203      	movs	r2, #3
 8001c60:	2100      	movs	r1, #0
 8001c62:	2001      	movs	r0, #1
 8001c64:	f000 fb24 	bl	80022b0 <xQueueGenericCreate>
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <osSemaphoreCreate+0x56>
 8001c70:	2300      	movs	r3, #0
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 fb74 	bl	8002364 <xQueueGenericSend>
      return sema;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	e000      	b.n	8001c82 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001c80:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b08a      	sub	sp, #40	; 0x28
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8001c9a:	f7ff ff4b 	bl	8001b34 <inHandlerMode>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00e      	beq.n	8001cc2 <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001ca4:	f3ef 8211 	mrs	r2, BASEPRI
 8001ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cac:	f383 8811 	msr	BASEPRI, r3
 8001cb0:	f3bf 8f6f 	isb	sy
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	617a      	str	r2, [r7, #20]
 8001cba:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001cbc:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc0:	e001      	b.n	8001cc6 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8001cc2:	f001 ff7f 	bl	8003bc4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
 8001cca:	e029      	b.n	8001d20 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6892      	ldr	r2, [r2, #8]
 8001cd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cdc:	fb01 f202 	mul.w	r2, r1, r2
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	4413      	add	r3, r2
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d113      	bne.n	8001d1a <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4619      	mov	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	440b      	add	r3, r1
 8001d10:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	611a      	str	r2, [r3, #16]
      break;
 8001d18:	e007      	b.n	8001d2a <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3d0      	bcc.n	8001ccc <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8001d2a:	f7ff ff03 	bl	8001b34 <inHandlerMode>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001d3e:	e001      	b.n	8001d44 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8001d40:	f001 ff70 	bl	8003c24 <vPortExitCritical>
  }
  
  return p;
 8001d44:	6a3b      	ldr	r3, [r7, #32]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3728      	adds	r7, #40	; 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
 8001d56:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d101      	bne.n	8001d62 <osPoolFree+0x14>
    return osErrorParameter;
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	e030      	b.n	8001dc4 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <osPoolFree+0x1e>
    return osErrorParameter;
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	e02b      	b.n	8001dc4 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d201      	bcs.n	8001d7a <osPoolFree+0x2c>
    return osErrorParameter;
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	e024      	b.n	8001dc4 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	1a9b      	subs	r3, r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d8e:	fb01 f202 	mul.w	r2, r1, r2
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <osPoolFree+0x4e>
    return osErrorParameter;
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	e013      	b.n	8001dc4 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d301      	bcc.n	8001db6 <osPoolFree+0x68>
    return osErrorParameter;
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	e006      	b.n	8001dc4 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d011      	beq.n	8001e06 <osMessageCreate+0x36>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00d      	beq.n	8001e06 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6859      	ldr	r1, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	2400      	movs	r4, #0
 8001dfc:	9400      	str	r4, [sp, #0]
 8001dfe:	f000 f9df 	bl	80021c0 <xQueueGenericCreateStatic>
 8001e02:	4603      	mov	r3, r0
 8001e04:	e008      	b.n	8001e18 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	4619      	mov	r1, r3
 8001e12:	f000 fa4d 	bl	80022b0 <xQueueGenericCreate>
 8001e16:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd90      	pop	{r4, r7, pc}

08001e20 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <osMessagePut+0x1e>
    ticks = 1;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8001e3e:	f7ff fe79 	bl	8001b34 <inHandlerMode>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d018      	beq.n	8001e7a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001e48:	f107 0210 	add.w	r2, r7, #16
 8001e4c:	f107 0108 	add.w	r1, r7, #8
 8001e50:	2300      	movs	r3, #0
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 fb84 	bl	8002560 <xQueueGenericSendFromISR>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d001      	beq.n	8001e62 <osMessagePut+0x42>
      return osErrorOS;
 8001e5e:	23ff      	movs	r3, #255	; 0xff
 8001e60:	e018      	b.n	8001e94 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d014      	beq.n	8001e92 <osMessagePut+0x72>
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <osMessagePut+0x7c>)
 8001e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	f3bf 8f4f 	dsb	sy
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	e00b      	b.n	8001e92 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001e7a:	f107 0108 	add.w	r1, r7, #8
 8001e7e:	2300      	movs	r3, #0
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fa6e 	bl	8002364 <xQueueGenericSend>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d001      	beq.n	8001e92 <osMessagePut+0x72>
      return osErrorOS;
 8001e8e:	23ff      	movs	r3, #255	; 0xff
 8001e90:	e000      	b.n	8001e94 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	e000ed04 	.word	0xe000ed04

08001ea0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b08b      	sub	sp, #44	; 0x2c
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10a      	bne.n	8001ed0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8001eba:	2380      	movs	r3, #128	; 0x80
 8001ebc:	617b      	str	r3, [r7, #20]
    return event;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	461c      	mov	r4, r3
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001eca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001ece:	e054      	b.n	8001f7a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ede:	d103      	bne.n	8001ee8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee6:	e009      	b.n	8001efc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <osMessageGet+0x5c>
      ticks = 1;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8001efc:	f7ff fe1a 	bl	8001b34 <inHandlerMode>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01c      	beq.n	8001f40 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001f06:	f107 0220 	add.w	r2, r7, #32
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	3304      	adds	r3, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	68b8      	ldr	r0, [r7, #8]
 8001f14:	f000 fca0 	bl	8002858 <xQueueReceiveFromISR>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d102      	bne.n	8001f24 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8001f1e:	2310      	movs	r3, #16
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e001      	b.n	8001f28 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d01d      	beq.n	8001f6a <osMessageGet+0xca>
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <osMessageGet+0xe4>)
 8001f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f3bf 8f4f 	dsb	sy
 8001f3a:	f3bf 8f6f 	isb	sy
 8001f3e:	e014      	b.n	8001f6a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	3304      	adds	r3, #4
 8001f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f48:	4619      	mov	r1, r3
 8001f4a:	68b8      	ldr	r0, [r7, #8]
 8001f4c:	f000 fba4 	bl	8002698 <xQueueReceive>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d102      	bne.n	8001f5c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8001f56:	2310      	movs	r3, #16
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e006      	b.n	8001f6a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <osMessageGet+0xc6>
 8001f62:	2300      	movs	r3, #0
 8001f64:	e000      	b.n	8001f68 <osMessageGet+0xc8>
 8001f66:	2340      	movs	r3, #64	; 0x40
 8001f68:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	461c      	mov	r4, r3
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	372c      	adds	r7, #44	; 0x2c
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd90      	pop	{r4, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000ed04 	.word	0xe000ed04

08001f88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f103 0208 	add.w	r2, r3, #8
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f103 0208 	add.w	r2, r3, #8
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f103 0208 	add.w	r2, r3, #8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800202a:	b480      	push	{r7}
 800202c:	b085      	sub	sp, #20
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d103      	bne.n	800204a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e00c      	b.n	8002064 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3308      	adds	r3, #8
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e002      	b.n	8002058 <vListInsert+0x2e>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	429a      	cmp	r2, r3
 8002062:	d2f6      	bcs.n	8002052 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	601a      	str	r2, [r3, #0]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6892      	ldr	r2, [r2, #8]
 80020b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6852      	ldr	r2, [r2, #4]
 80020bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d103      	bne.n	80020d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	1e5a      	subs	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10a      	bne.n	800211a <xQueueGenericReset+0x2a>
	__asm volatile
 8002104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002108:	f383 8811 	msr	BASEPRI, r3
 800210c:	f3bf 8f6f 	isb	sy
 8002110:	f3bf 8f4f 	dsb	sy
 8002114:	60bb      	str	r3, [r7, #8]
}
 8002116:	bf00      	nop
 8002118:	e7fe      	b.n	8002118 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800211a:	f001 fd53 	bl	8003bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	68f9      	ldr	r1, [r7, #12]
 8002128:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	441a      	add	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214a:	3b01      	subs	r3, #1
 800214c:	68f9      	ldr	r1, [r7, #12]
 800214e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002150:	fb01 f303 	mul.w	r3, r1, r3
 8002154:	441a      	add	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	22ff      	movs	r2, #255	; 0xff
 800215e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	22ff      	movs	r2, #255	; 0xff
 8002166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d114      	bne.n	800219a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d01a      	beq.n	80021ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3310      	adds	r3, #16
 800217c:	4618      	mov	r0, r3
 800217e:	f001 f92b 	bl	80033d8 <xTaskRemoveFromEventList>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d012      	beq.n	80021ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <xQueueGenericReset+0xcc>)
 800218a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	f3bf 8f6f 	isb	sy
 8002198:	e009      	b.n	80021ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	3310      	adds	r3, #16
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fef2 	bl	8001f88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3324      	adds	r3, #36	; 0x24
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff feed 	bl	8001f88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80021ae:	f001 fd39 	bl	8003c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3710      	adds	r7, #16
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	e000ed04 	.word	0xe000ed04

080021c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08e      	sub	sp, #56	; 0x38
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10a      	bne.n	80021ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80021d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80021e6:	bf00      	nop
 80021e8:	e7fe      	b.n	80021e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80021f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002202:	bf00      	nop
 8002204:	e7fe      	b.n	8002204 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <xQueueGenericCreateStatic+0x52>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <xQueueGenericCreateStatic+0x56>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <xQueueGenericCreateStatic+0x58>
 8002216:	2300      	movs	r3, #0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10a      	bne.n	8002232 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800221c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002220:	f383 8811 	msr	BASEPRI, r3
 8002224:	f3bf 8f6f 	isb	sy
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	623b      	str	r3, [r7, #32]
}
 800222e:	bf00      	nop
 8002230:	e7fe      	b.n	8002230 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <xQueueGenericCreateStatic+0x7e>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <xQueueGenericCreateStatic+0x82>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <xQueueGenericCreateStatic+0x84>
 8002242:	2300      	movs	r3, #0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10a      	bne.n	800225e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224c:	f383 8811 	msr	BASEPRI, r3
 8002250:	f3bf 8f6f 	isb	sy
 8002254:	f3bf 8f4f 	dsb	sy
 8002258:	61fb      	str	r3, [r7, #28]
}
 800225a:	bf00      	nop
 800225c:	e7fe      	b.n	800225c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800225e:	2348      	movs	r3, #72	; 0x48
 8002260:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	2b48      	cmp	r3, #72	; 0x48
 8002266:	d00a      	beq.n	800227e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	61bb      	str	r3, [r7, #24]
}
 800227a:	bf00      	nop
 800227c:	e7fe      	b.n	800227c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800227e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00d      	beq.n	80022a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800228a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002292:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	4613      	mov	r3, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 f83f 	bl	8002324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3730      	adds	r7, #48	; 0x30
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	4613      	mov	r3, r2
 80022bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <xQueueGenericCreate+0x2a>
	__asm volatile
 80022c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c8:	f383 8811 	msr	BASEPRI, r3
 80022cc:	f3bf 8f6f 	isb	sy
 80022d0:	f3bf 8f4f 	dsb	sy
 80022d4:	613b      	str	r3, [r7, #16]
}
 80022d6:	bf00      	nop
 80022d8:	e7fe      	b.n	80022d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	3348      	adds	r3, #72	; 0x48
 80022e8:	4618      	mov	r0, r3
 80022ea:	f001 fd8d 	bl	8003e08 <pvPortMalloc>
 80022ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d011      	beq.n	800231a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	3348      	adds	r3, #72	; 0x48
 80022fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002308:	79fa      	ldrb	r2, [r7, #7]
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	4613      	mov	r3, r2
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f805 	bl	8002324 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800231a:	69bb      	ldr	r3, [r7, #24]
	}
 800231c:	4618      	mov	r0, r3
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d103      	bne.n	8002340 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e002      	b.n	8002346 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002352:	2101      	movs	r1, #1
 8002354:	69b8      	ldr	r0, [r7, #24]
 8002356:	f7ff fecb 	bl	80020f0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08e      	sub	sp, #56	; 0x38
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <xQueueGenericSend+0x32>
	__asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d103      	bne.n	80023a4 <xQueueGenericSend+0x40>
 800239c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <xQueueGenericSend+0x44>
 80023a4:	2301      	movs	r3, #1
 80023a6:	e000      	b.n	80023aa <xQueueGenericSend+0x46>
 80023a8:	2300      	movs	r3, #0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10a      	bne.n	80023c4 <xQueueGenericSend+0x60>
	__asm volatile
 80023ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b2:	f383 8811 	msr	BASEPRI, r3
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023c0:	bf00      	nop
 80023c2:	e7fe      	b.n	80023c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d103      	bne.n	80023d2 <xQueueGenericSend+0x6e>
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <xQueueGenericSend+0x72>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <xQueueGenericSend+0x74>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	623b      	str	r3, [r7, #32]
}
 80023ee:	bf00      	nop
 80023f0:	e7fe      	b.n	80023f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023f2:	f001 f9b1 	bl	8003758 <xTaskGetSchedulerState>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <xQueueGenericSend+0x9e>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <xQueueGenericSend+0xa2>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <xQueueGenericSend+0xa4>
 8002406:	2300      	movs	r3, #0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <xQueueGenericSend+0xbe>
	__asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	61fb      	str	r3, [r7, #28]
}
 800241e:	bf00      	nop
 8002420:	e7fe      	b.n	8002420 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002422:	f001 fbcf 	bl	8003bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	429a      	cmp	r2, r3
 8002430:	d302      	bcc.n	8002438 <xQueueGenericSend+0xd4>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d129      	bne.n	800248c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800243e:	f000 fa8b 	bl	8002958 <prvCopyDataToQueue>
 8002442:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	3324      	adds	r3, #36	; 0x24
 8002450:	4618      	mov	r0, r3
 8002452:	f000 ffc1 	bl	80033d8 <xTaskRemoveFromEventList>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800245c:	4b3f      	ldr	r3, [pc, #252]	; (800255c <xQueueGenericSend+0x1f8>)
 800245e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	e00a      	b.n	8002484 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002474:	4b39      	ldr	r3, [pc, #228]	; (800255c <xQueueGenericSend+0x1f8>)
 8002476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002484:	f001 fbce 	bl	8003c24 <vPortExitCritical>
				return pdPASS;
 8002488:	2301      	movs	r3, #1
 800248a:	e063      	b.n	8002554 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d103      	bne.n	800249a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002492:	f001 fbc7 	bl	8003c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002496:	2300      	movs	r3, #0
 8002498:	e05c      	b.n	8002554 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800249a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800249c:	2b00      	cmp	r3, #0
 800249e:	d106      	bne.n	80024ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 fff9 	bl	800349c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024aa:	2301      	movs	r3, #1
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024ae:	f001 fbb9 	bl	8003c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024b2:	f000 fda9 	bl	8003008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024b6:	f001 fb85 	bl	8003bc4 <vPortEnterCritical>
 80024ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c6:	d103      	bne.n	80024d0 <xQueueGenericSend+0x16c>
 80024c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024d6:	b25b      	sxtb	r3, r3
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d103      	bne.n	80024e6 <xQueueGenericSend+0x182>
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024e6:	f001 fb9d 	bl	8003c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80024ea:	1d3a      	adds	r2, r7, #4
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4611      	mov	r1, r2
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 ffe8 	bl	80034c8 <xTaskCheckForTimeOut>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d124      	bne.n	8002548 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80024fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002500:	f000 fb22 	bl	8002b48 <prvIsQueueFull>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d018      	beq.n	800253c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800250a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250c:	3310      	adds	r3, #16
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f000 ff3c 	bl	8003390 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800251a:	f000 faad 	bl	8002a78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800251e:	f000 fd81 	bl	8003024 <xTaskResumeAll>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	f47f af7c 	bne.w	8002422 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <xQueueGenericSend+0x1f8>)
 800252c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	f3bf 8f4f 	dsb	sy
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	e772      	b.n	8002422 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800253c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800253e:	f000 fa9b 	bl	8002a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002542:	f000 fd6f 	bl	8003024 <xTaskResumeAll>
 8002546:	e76c      	b.n	8002422 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800254a:	f000 fa95 	bl	8002a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800254e:	f000 fd69 	bl	8003024 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002554:	4618      	mov	r0, r3
 8002556:	3738      	adds	r7, #56	; 0x38
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	e000ed04 	.word	0xe000ed04

08002560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b090      	sub	sp, #64	; 0x40
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800258a:	bf00      	nop
 800258c:	e7fe      	b.n	800258c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d103      	bne.n	800259c <xQueueGenericSendFromISR+0x3c>
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <xQueueGenericSendFromISR+0x40>
 800259c:	2301      	movs	r3, #1
 800259e:	e000      	b.n	80025a2 <xQueueGenericSendFromISR+0x42>
 80025a0:	2300      	movs	r3, #0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10a      	bne.n	80025bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025b8:	bf00      	nop
 80025ba:	e7fe      	b.n	80025ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d103      	bne.n	80025ca <xQueueGenericSendFromISR+0x6a>
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <xQueueGenericSendFromISR+0x6e>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <xQueueGenericSendFromISR+0x70>
 80025ce:	2300      	movs	r3, #0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80025d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d8:	f383 8811 	msr	BASEPRI, r3
 80025dc:	f3bf 8f6f 	isb	sy
 80025e0:	f3bf 8f4f 	dsb	sy
 80025e4:	623b      	str	r3, [r7, #32]
}
 80025e6:	bf00      	nop
 80025e8:	e7fe      	b.n	80025e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025ea:	f001 fbcd 	bl	8003d88 <vPortValidateInterruptPriority>
	__asm volatile
 80025ee:	f3ef 8211 	mrs	r2, BASEPRI
 80025f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f6:	f383 8811 	msr	BASEPRI, r3
 80025fa:	f3bf 8f6f 	isb	sy
 80025fe:	f3bf 8f4f 	dsb	sy
 8002602:	61fa      	str	r2, [r7, #28]
 8002604:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8002606:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800260a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800260c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800260e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	429a      	cmp	r2, r3
 8002614:	d302      	bcc.n	800261c <xQueueGenericSendFromISR+0xbc>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2b02      	cmp	r3, #2
 800261a:	d12f      	bne.n	800267c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800261e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002632:	f000 f991 	bl	8002958 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002636:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d112      	bne.n	8002666 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	2b00      	cmp	r3, #0
 8002646:	d016      	beq.n	8002676 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264a:	3324      	adds	r3, #36	; 0x24
 800264c:	4618      	mov	r0, r3
 800264e:	f000 fec3 	bl	80033d8 <xTaskRemoveFromEventList>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00e      	beq.n	8002676 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00b      	beq.n	8002676 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e007      	b.n	8002676 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002666:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800266a:	3301      	adds	r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	b25a      	sxtb	r2, r3
 8002670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002676:	2301      	movs	r3, #1
 8002678:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800267a:	e001      	b.n	8002680 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800267c:	2300      	movs	r3, #0
 800267e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002682:	617b      	str	r3, [r7, #20]
	__asm volatile
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f383 8811 	msr	BASEPRI, r3
}
 800268a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800268c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800268e:	4618      	mov	r0, r3
 8002690:	3740      	adds	r7, #64	; 0x40
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08c      	sub	sp, #48	; 0x30
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10a      	bne.n	80026c8 <xQueueReceive+0x30>
	__asm volatile
 80026b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b6:	f383 8811 	msr	BASEPRI, r3
 80026ba:	f3bf 8f6f 	isb	sy
 80026be:	f3bf 8f4f 	dsb	sy
 80026c2:	623b      	str	r3, [r7, #32]
}
 80026c4:	bf00      	nop
 80026c6:	e7fe      	b.n	80026c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d103      	bne.n	80026d6 <xQueueReceive+0x3e>
 80026ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <xQueueReceive+0x42>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <xQueueReceive+0x44>
 80026da:	2300      	movs	r3, #0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <xQueueReceive+0x5e>
	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	61fb      	str	r3, [r7, #28]
}
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026f6:	f001 f82f 	bl	8003758 <xTaskGetSchedulerState>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <xQueueReceive+0x6e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <xQueueReceive+0x72>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <xQueueReceive+0x74>
 800270a:	2300      	movs	r3, #0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <xQueueReceive+0x8e>
	__asm volatile
 8002710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002714:	f383 8811 	msr	BASEPRI, r3
 8002718:	f3bf 8f6f 	isb	sy
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	61bb      	str	r3, [r7, #24]
}
 8002722:	bf00      	nop
 8002724:	e7fe      	b.n	8002724 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002726:	f001 fa4d 	bl	8003bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	2b00      	cmp	r3, #0
 8002734:	d01f      	beq.n	8002776 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800273a:	f000 f977 	bl	8002a2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1e5a      	subs	r2, r3, #1
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00f      	beq.n	800276e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	3310      	adds	r3, #16
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fe40 	bl	80033d8 <xTaskRemoveFromEventList>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <xQueueReceive+0x1bc>)
 8002760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	f3bf 8f4f 	dsb	sy
 800276a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800276e:	f001 fa59 	bl	8003c24 <vPortExitCritical>
				return pdPASS;
 8002772:	2301      	movs	r3, #1
 8002774:	e069      	b.n	800284a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d103      	bne.n	8002784 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800277c:	f001 fa52 	bl	8003c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002780:	2300      	movs	r3, #0
 8002782:	e062      	b.n	800284a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	4618      	mov	r0, r3
 8002790:	f000 fe84 	bl	800349c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002794:	2301      	movs	r3, #1
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002798:	f001 fa44 	bl	8003c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800279c:	f000 fc34 	bl	8003008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027a0:	f001 fa10 	bl	8003bc4 <vPortEnterCritical>
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b0:	d103      	bne.n	80027ba <xQueueReceive+0x122>
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c0:	b25b      	sxtb	r3, r3
 80027c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c6:	d103      	bne.n	80027d0 <xQueueReceive+0x138>
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027d0:	f001 fa28 	bl	8003c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027d4:	1d3a      	adds	r2, r7, #4
 80027d6:	f107 0310 	add.w	r3, r7, #16
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fe73 	bl	80034c8 <xTaskCheckForTimeOut>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d123      	bne.n	8002830 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027ea:	f000 f997 	bl	8002b1c <prvIsQueueEmpty>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d017      	beq.n	8002824 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f6:	3324      	adds	r3, #36	; 0x24
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fdc7 	bl	8003390 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002802:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002804:	f000 f938 	bl	8002a78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002808:	f000 fc0c 	bl	8003024 <xTaskResumeAll>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d189      	bne.n	8002726 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <xQueueReceive+0x1bc>)
 8002814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	e780      	b.n	8002726 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002826:	f000 f927 	bl	8002a78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800282a:	f000 fbfb 	bl	8003024 <xTaskResumeAll>
 800282e:	e77a      	b.n	8002726 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002832:	f000 f921 	bl	8002a78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002836:	f000 fbf5 	bl	8003024 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800283a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800283c:	f000 f96e 	bl	8002b1c <prvIsQueueEmpty>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	f43f af6f 	beq.w	8002726 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002848:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800284a:	4618      	mov	r0, r3
 800284c:	3730      	adds	r7, #48	; 0x30
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	e000ed04 	.word	0xe000ed04

08002858 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08e      	sub	sp, #56	; 0x38
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	623b      	str	r3, [r7, #32]
}
 8002880:	bf00      	nop
 8002882:	e7fe      	b.n	8002882 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <xQueueReceiveFromISR+0x3a>
 800288a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <xQueueReceiveFromISR+0x3e>
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <xQueueReceiveFromISR+0x40>
 8002896:	2300      	movs	r3, #0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10a      	bne.n	80028b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	61fb      	str	r3, [r7, #28]
}
 80028ae:	bf00      	nop
 80028b0:	e7fe      	b.n	80028b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028b2:	f001 fa69 	bl	8003d88 <vPortValidateInterruptPriority>
	__asm volatile
 80028b6:	f3ef 8211 	mrs	r2, BASEPRI
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	61ba      	str	r2, [r7, #24]
 80028cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80028ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d02f      	beq.n	800293e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028ec:	f000 f89e 	bl	8002a2c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	1e5a      	subs	r2, r3, #1
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80028f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d112      	bne.n	8002928 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d016      	beq.n	8002938 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	3310      	adds	r3, #16
 800290e:	4618      	mov	r0, r3
 8002910:	f000 fd62 	bl	80033d8 <xTaskRemoveFromEventList>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00e      	beq.n	8002938 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e007      	b.n	8002938 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800292c:	3301      	adds	r3, #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	b25a      	sxtb	r2, r3
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002938:	2301      	movs	r3, #1
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
 800293c:	e001      	b.n	8002942 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800293e:	2300      	movs	r3, #0
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f383 8811 	msr	BASEPRI, r3
}
 800294c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002950:	4618      	mov	r0, r3
 8002952:	3738      	adds	r7, #56	; 0x38
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10d      	bne.n	8002992 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d14d      	bne.n	8002a1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4618      	mov	r0, r3
 8002984:	f000 ff06 	bl	8003794 <xTaskPriorityDisinherit>
 8002988:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	e043      	b.n	8002a1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d119      	bne.n	80029cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6858      	ldr	r0, [r3, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	461a      	mov	r2, r3
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	f001 fd3d 	bl	8004422 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	441a      	add	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d32b      	bcc.n	8002a1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	e026      	b.n	8002a1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68d8      	ldr	r0, [r3, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	461a      	mov	r2, r3
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	f001 fd23 	bl	8004422 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	425b      	negs	r3, r3
 80029e6:	441a      	add	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d207      	bcs.n	8002a08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	425b      	negs	r3, r3
 8002a02:	441a      	add	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d105      	bne.n	8002a1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a22:	697b      	ldr	r3, [r7, #20]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d018      	beq.n	8002a70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	441a      	add	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d303      	bcc.n	8002a60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68d9      	ldr	r1, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6838      	ldr	r0, [r7, #0]
 8002a6c:	f001 fcd9 	bl	8004422 <memcpy>
	}
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a80:	f001 f8a0 	bl	8003bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a8c:	e011      	b.n	8002ab2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d012      	beq.n	8002abc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3324      	adds	r3, #36	; 0x24
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fc9c 	bl	80033d8 <xTaskRemoveFromEventList>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002aa6:	f000 fd71 	bl	800358c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	dce9      	bgt.n	8002a8e <prvUnlockQueue+0x16>
 8002aba:	e000      	b.n	8002abe <prvUnlockQueue+0x46>
					break;
 8002abc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	22ff      	movs	r2, #255	; 0xff
 8002ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002ac6:	f001 f8ad 	bl	8003c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002aca:	f001 f87b 	bl	8003bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ad4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ad6:	e011      	b.n	8002afc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d012      	beq.n	8002b06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3310      	adds	r3, #16
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fc77 	bl	80033d8 <xTaskRemoveFromEventList>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002af0:	f000 fd4c 	bl	800358c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002af4:	7bbb      	ldrb	r3, [r7, #14]
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	dce9      	bgt.n	8002ad8 <prvUnlockQueue+0x60>
 8002b04:	e000      	b.n	8002b08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	22ff      	movs	r2, #255	; 0xff
 8002b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b10:	f001 f888 	bl	8003c24 <vPortExitCritical>
}
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b24:	f001 f84e 	bl	8003bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d102      	bne.n	8002b36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b30:	2301      	movs	r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	e001      	b.n	8002b3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b3a:	f001 f873 	bl	8003c24 <vPortExitCritical>

	return xReturn;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b50:	f001 f838 	bl	8003bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d102      	bne.n	8002b66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b60:	2301      	movs	r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	e001      	b.n	8002b6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b6a:	f001 f85b 	bl	8003c24 <vPortExitCritical>

	return xReturn;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08e      	sub	sp, #56	; 0x38
 8002b7c:	af04      	add	r7, sp, #16
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	623b      	str	r3, [r7, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	e7fe      	b.n	8002ba0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <xTaskCreateStatic+0x46>
	__asm volatile
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	61fb      	str	r3, [r7, #28]
}
 8002bba:	bf00      	nop
 8002bbc:	e7fe      	b.n	8002bbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002bbe:	23b4      	movs	r3, #180	; 0xb4
 8002bc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	2bb4      	cmp	r3, #180	; 0xb4
 8002bc6:	d00a      	beq.n	8002bde <xTaskCreateStatic+0x66>
	__asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	61bb      	str	r3, [r7, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	e7fe      	b.n	8002bdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002bde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01e      	beq.n	8002c24 <xTaskCreateStatic+0xac>
 8002be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01b      	beq.n	8002c24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9303      	str	r3, [sp, #12]
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	9302      	str	r3, [sp, #8]
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f850 	bl	8002cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c1e:	f000 f8eb 	bl	8002df8 <prvAddNewTaskToReadyList>
 8002c22:	e001      	b.n	8002c28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c28:	697b      	ldr	r3, [r7, #20]
	}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3728      	adds	r7, #40	; 0x28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b08c      	sub	sp, #48	; 0x30
 8002c36:	af04      	add	r7, sp, #16
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 f8de 	bl	8003e08 <pvPortMalloc>
 8002c4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00e      	beq.n	8002c72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c54:	20b4      	movs	r0, #180	; 0xb4
 8002c56:	f001 f8d7 	bl	8003e08 <pvPortMalloc>
 8002c5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
 8002c68:	e005      	b.n	8002c76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f001 f998 	bl	8003fa0 <vPortFree>
 8002c70:	e001      	b.n	8002c76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d017      	beq.n	8002cac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c84:	88fa      	ldrh	r2, [r7, #6]
 8002c86:	2300      	movs	r3, #0
 8002c88:	9303      	str	r3, [sp, #12]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	9302      	str	r3, [sp, #8]
 8002c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	f000 f80e 	bl	8002cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ca0:	69f8      	ldr	r0, [r7, #28]
 8002ca2:	f000 f8a9 	bl	8002df8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	e002      	b.n	8002cb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002cb2:	69bb      	ldr	r3, [r7, #24]
	}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f023 0307 	bic.w	r3, r3, #7
 8002ce2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	617b      	str	r3, [r7, #20]
}
 8002d00:	bf00      	nop
 8002d02:	e7fe      	b.n	8002d02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01f      	beq.n	8002d4a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	e012      	b.n	8002d36 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	7819      	ldrb	r1, [r3, #0]
 8002d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3334      	adds	r3, #52	; 0x34
 8002d20:	460a      	mov	r2, r1
 8002d22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	4413      	add	r3, r2
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d006      	beq.n	8002d3e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	3301      	adds	r3, #1
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	2b0f      	cmp	r3, #15
 8002d3a:	d9e9      	bls.n	8002d10 <prvInitialiseNewTask+0x54>
 8002d3c:	e000      	b.n	8002d40 <prvInitialiseNewTask+0x84>
			{
				break;
 8002d3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d48:	e003      	b.n	8002d52 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	2b06      	cmp	r3, #6
 8002d56:	d901      	bls.n	8002d5c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d58:	2306      	movs	r3, #6
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d70:	3304      	adds	r3, #4
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff f928 	bl	8001fc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d7a:	3318      	adds	r3, #24
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff f923 	bl	8001fc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8a:	f1c3 0207 	rsb	r2, r3, #7
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	334c      	adds	r3, #76	; 0x4c
 8002dac:	2260      	movs	r2, #96	; 0x60
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 fb44 	bl	800443e <memset>
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	4a0c      	ldr	r2, [pc, #48]	; (8002dec <prvInitialiseNewTask+0x130>)
 8002dba:	651a      	str	r2, [r3, #80]	; 0x50
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <prvInitialiseNewTask+0x134>)
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <prvInitialiseNewTask+0x138>)
 8002dc6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	68f9      	ldr	r1, [r7, #12]
 8002dcc:	69b8      	ldr	r0, [r7, #24]
 8002dce:	f000 fdcd 	bl	800396c <pxPortInitialiseStack>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002de2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002de4:	bf00      	nop
 8002de6:	3720      	adds	r7, #32
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	0800536c 	.word	0x0800536c
 8002df0:	0800538c 	.word	0x0800538c
 8002df4:	0800534c 	.word	0x0800534c

08002df8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e00:	f000 fee0 	bl	8003bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e04:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <prvAddNewTaskToReadyList+0xb8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <prvAddNewTaskToReadyList+0xb8>)
 8002e0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e0e:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <prvAddNewTaskToReadyList+0xbc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e16:	4a27      	ldr	r2, [pc, #156]	; (8002eb4 <prvAddNewTaskToReadyList+0xbc>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e1c:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <prvAddNewTaskToReadyList+0xb8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d110      	bne.n	8002e46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e24:	f000 fbd6 	bl	80035d4 <prvInitialiseTaskLists>
 8002e28:	e00d      	b.n	8002e46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e2a:	4b23      	ldr	r3, [pc, #140]	; (8002eb8 <prvAddNewTaskToReadyList+0xc0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <prvAddNewTaskToReadyList+0xbc>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d802      	bhi.n	8002e46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e40:	4a1c      	ldr	r2, [pc, #112]	; (8002eb4 <prvAddNewTaskToReadyList+0xbc>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e46:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <prvAddNewTaskToReadyList+0xc4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <prvAddNewTaskToReadyList+0xc4>)
 8002e4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	2201      	movs	r2, #1
 8002e56:	409a      	lsls	r2, r3
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <prvAddNewTaskToReadyList+0xc8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <prvAddNewTaskToReadyList+0xc8>)
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <prvAddNewTaskToReadyList+0xcc>)
 8002e70:	441a      	add	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3304      	adds	r3, #4
 8002e76:	4619      	mov	r1, r3
 8002e78:	4610      	mov	r0, r2
 8002e7a:	f7ff f8b2 	bl	8001fe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e7e:	f000 fed1 	bl	8003c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <prvAddNewTaskToReadyList+0xc0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00e      	beq.n	8002ea8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <prvAddNewTaskToReadyList+0xbc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d207      	bcs.n	8002ea8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <prvAddNewTaskToReadyList+0xd0>)
 8002e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000470 	.word	0x20000470
 8002eb4:	20000370 	.word	0x20000370
 8002eb8:	2000047c 	.word	0x2000047c
 8002ebc:	2000048c 	.word	0x2000048c
 8002ec0:	20000478 	.word	0x20000478
 8002ec4:	20000374 	.word	0x20000374
 8002ec8:	e000ed04 	.word	0xe000ed04

08002ecc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d017      	beq.n	8002f0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <vTaskDelay+0x60>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <vTaskDelay+0x30>
	__asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	60bb      	str	r3, [r7, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	e7fe      	b.n	8002efa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002efc:	f000 f884 	bl	8003008 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f00:	2100      	movs	r1, #0
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fccc 	bl	80038a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f08:	f000 f88c 	bl	8003024 <xTaskResumeAll>
 8002f0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <vTaskDelay+0x64>)
 8002f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000498 	.word	0x20000498
 8002f30:	e000ed04 	.word	0xe000ed04

08002f34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f42:	463a      	mov	r2, r7
 8002f44:	1d39      	adds	r1, r7, #4
 8002f46:	f107 0308 	add.w	r3, r7, #8
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd fb8a 	bl	8000664 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f50:	6839      	ldr	r1, [r7, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	9202      	str	r2, [sp, #8]
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	460a      	mov	r2, r1
 8002f62:	4921      	ldr	r1, [pc, #132]	; (8002fe8 <vTaskStartScheduler+0xb4>)
 8002f64:	4821      	ldr	r0, [pc, #132]	; (8002fec <vTaskStartScheduler+0xb8>)
 8002f66:	f7ff fe07 	bl	8002b78 <xTaskCreateStatic>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <vTaskStartScheduler+0xbc>)
 8002f6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f70:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <vTaskStartScheduler+0xbc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e001      	b.n	8002f82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d11b      	bne.n	8002fc0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	613b      	str	r3, [r7, #16]
}
 8002f9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f9c:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <vTaskStartScheduler+0xc0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	334c      	adds	r3, #76	; 0x4c
 8002fa2:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <vTaskStartScheduler+0xc4>)
 8002fa4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <vTaskStartScheduler+0xc8>)
 8002fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fae:	4b14      	ldr	r3, [pc, #80]	; (8003000 <vTaskStartScheduler+0xcc>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <vTaskStartScheduler+0xd0>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fba:	f000 fd61 	bl	8003a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fbe:	e00e      	b.n	8002fde <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc6:	d10a      	bne.n	8002fde <vTaskStartScheduler+0xaa>
	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	60fb      	str	r3, [r7, #12]
}
 8002fda:	bf00      	nop
 8002fdc:	e7fe      	b.n	8002fdc <vTaskStartScheduler+0xa8>
}
 8002fde:	bf00      	nop
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	08005334 	.word	0x08005334
 8002fec:	080035a5 	.word	0x080035a5
 8002ff0:	20000494 	.word	0x20000494
 8002ff4:	20000370 	.word	0x20000370
 8002ff8:	20000010 	.word	0x20000010
 8002ffc:	20000490 	.word	0x20000490
 8003000:	2000047c 	.word	0x2000047c
 8003004:	20000474 	.word	0x20000474

08003008 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <vTaskSuspendAll+0x18>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3301      	adds	r3, #1
 8003012:	4a03      	ldr	r2, [pc, #12]	; (8003020 <vTaskSuspendAll+0x18>)
 8003014:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	20000498 	.word	0x20000498

08003024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <xTaskResumeAll+0x114>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <xTaskResumeAll+0x2c>
	__asm volatile
 800303a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303e:	f383 8811 	msr	BASEPRI, r3
 8003042:	f3bf 8f6f 	isb	sy
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	603b      	str	r3, [r7, #0]
}
 800304c:	bf00      	nop
 800304e:	e7fe      	b.n	800304e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003050:	f000 fdb8 	bl	8003bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003054:	4b38      	ldr	r3, [pc, #224]	; (8003138 <xTaskResumeAll+0x114>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3b01      	subs	r3, #1
 800305a:	4a37      	ldr	r2, [pc, #220]	; (8003138 <xTaskResumeAll+0x114>)
 800305c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800305e:	4b36      	ldr	r3, [pc, #216]	; (8003138 <xTaskResumeAll+0x114>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d161      	bne.n	800312a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003066:	4b35      	ldr	r3, [pc, #212]	; (800313c <xTaskResumeAll+0x118>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d05d      	beq.n	800312a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800306e:	e02e      	b.n	80030ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003070:	4b33      	ldr	r3, [pc, #204]	; (8003140 <xTaskResumeAll+0x11c>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3318      	adds	r3, #24
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff f80d 	bl	800209c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3304      	adds	r3, #4
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff f808 	bl	800209c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	2201      	movs	r2, #1
 8003092:	409a      	lsls	r2, r3
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <xTaskResumeAll+0x120>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4313      	orrs	r3, r2
 800309a:	4a2a      	ldr	r2, [pc, #168]	; (8003144 <xTaskResumeAll+0x120>)
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a2:	4613      	mov	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4a27      	ldr	r2, [pc, #156]	; (8003148 <xTaskResumeAll+0x124>)
 80030ac:	441a      	add	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3304      	adds	r3, #4
 80030b2:	4619      	mov	r1, r3
 80030b4:	4610      	mov	r0, r2
 80030b6:	f7fe ff94 	bl	8001fe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030be:	4b23      	ldr	r3, [pc, #140]	; (800314c <xTaskResumeAll+0x128>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d302      	bcc.n	80030ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80030c8:	4b21      	ldr	r3, [pc, #132]	; (8003150 <xTaskResumeAll+0x12c>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030ce:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <xTaskResumeAll+0x11c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1cc      	bne.n	8003070 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030dc:	f000 fb1c 	bl	8003718 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030e0:	4b1c      	ldr	r3, [pc, #112]	; (8003154 <xTaskResumeAll+0x130>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d010      	beq.n	800310e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030ec:	f000 f836 	bl	800315c <xTaskIncrementTick>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80030f6:	4b16      	ldr	r3, [pc, #88]	; (8003150 <xTaskResumeAll+0x12c>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f1      	bne.n	80030ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <xTaskResumeAll+0x130>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800310e:	4b10      	ldr	r3, [pc, #64]	; (8003150 <xTaskResumeAll+0x12c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003116:	2301      	movs	r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <xTaskResumeAll+0x134>)
 800311c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800312a:	f000 fd7b 	bl	8003c24 <vPortExitCritical>

	return xAlreadyYielded;
 800312e:	68bb      	ldr	r3, [r7, #8]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000498 	.word	0x20000498
 800313c:	20000470 	.word	0x20000470
 8003140:	20000430 	.word	0x20000430
 8003144:	20000478 	.word	0x20000478
 8003148:	20000374 	.word	0x20000374
 800314c:	20000370 	.word	0x20000370
 8003150:	20000484 	.word	0x20000484
 8003154:	20000480 	.word	0x20000480
 8003158:	e000ed04 	.word	0xe000ed04

0800315c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003166:	4b4e      	ldr	r3, [pc, #312]	; (80032a0 <xTaskIncrementTick+0x144>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f040 808e 	bne.w	800328c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003170:	4b4c      	ldr	r3, [pc, #304]	; (80032a4 <xTaskIncrementTick+0x148>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3301      	adds	r3, #1
 8003176:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003178:	4a4a      	ldr	r2, [pc, #296]	; (80032a4 <xTaskIncrementTick+0x148>)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d120      	bne.n	80031c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003184:	4b48      	ldr	r3, [pc, #288]	; (80032a8 <xTaskIncrementTick+0x14c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	603b      	str	r3, [r7, #0]
}
 80031a0:	bf00      	nop
 80031a2:	e7fe      	b.n	80031a2 <xTaskIncrementTick+0x46>
 80031a4:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <xTaskIncrementTick+0x14c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	4b40      	ldr	r3, [pc, #256]	; (80032ac <xTaskIncrementTick+0x150>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a3e      	ldr	r2, [pc, #248]	; (80032a8 <xTaskIncrementTick+0x14c>)
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	4a3e      	ldr	r2, [pc, #248]	; (80032ac <xTaskIncrementTick+0x150>)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6013      	str	r3, [r2, #0]
 80031b8:	4b3d      	ldr	r3, [pc, #244]	; (80032b0 <xTaskIncrementTick+0x154>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	4a3c      	ldr	r2, [pc, #240]	; (80032b0 <xTaskIncrementTick+0x154>)
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	f000 faa9 	bl	8003718 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031c6:	4b3b      	ldr	r3, [pc, #236]	; (80032b4 <xTaskIncrementTick+0x158>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d348      	bcc.n	8003262 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031d0:	4b35      	ldr	r3, [pc, #212]	; (80032a8 <xTaskIncrementTick+0x14c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d104      	bne.n	80031e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031da:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <xTaskIncrementTick+0x158>)
 80031dc:	f04f 32ff 	mov.w	r2, #4294967295
 80031e0:	601a      	str	r2, [r3, #0]
					break;
 80031e2:	e03e      	b.n	8003262 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e4:	4b30      	ldr	r3, [pc, #192]	; (80032a8 <xTaskIncrementTick+0x14c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d203      	bcs.n	8003204 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80031fc:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <xTaskIncrementTick+0x158>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003202:	e02e      	b.n	8003262 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	3304      	adds	r3, #4
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe ff47 	bl	800209c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	2b00      	cmp	r3, #0
 8003214:	d004      	beq.n	8003220 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	3318      	adds	r3, #24
 800321a:	4618      	mov	r0, r3
 800321c:	f7fe ff3e 	bl	800209c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	2201      	movs	r2, #1
 8003226:	409a      	lsls	r2, r3
 8003228:	4b23      	ldr	r3, [pc, #140]	; (80032b8 <xTaskIncrementTick+0x15c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4313      	orrs	r3, r2
 800322e:	4a22      	ldr	r2, [pc, #136]	; (80032b8 <xTaskIncrementTick+0x15c>)
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <xTaskIncrementTick+0x160>)
 8003240:	441a      	add	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3304      	adds	r3, #4
 8003246:	4619      	mov	r1, r3
 8003248:	4610      	mov	r0, r2
 800324a:	f7fe feca 	bl	8001fe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003252:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <xTaskIncrementTick+0x164>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	429a      	cmp	r2, r3
 800325a:	d3b9      	bcc.n	80031d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800325c:	2301      	movs	r3, #1
 800325e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003260:	e7b6      	b.n	80031d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003262:	4b17      	ldr	r3, [pc, #92]	; (80032c0 <xTaskIncrementTick+0x164>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	4914      	ldr	r1, [pc, #80]	; (80032bc <xTaskIncrementTick+0x160>)
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d901      	bls.n	800327e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800327a:	2301      	movs	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <xTaskIncrementTick+0x168>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003286:	2301      	movs	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e004      	b.n	8003296 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <xTaskIncrementTick+0x16c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	4a0d      	ldr	r2, [pc, #52]	; (80032c8 <xTaskIncrementTick+0x16c>)
 8003294:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003296:	697b      	ldr	r3, [r7, #20]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000498 	.word	0x20000498
 80032a4:	20000474 	.word	0x20000474
 80032a8:	20000428 	.word	0x20000428
 80032ac:	2000042c 	.word	0x2000042c
 80032b0:	20000488 	.word	0x20000488
 80032b4:	20000490 	.word	0x20000490
 80032b8:	20000478 	.word	0x20000478
 80032bc:	20000374 	.word	0x20000374
 80032c0:	20000370 	.word	0x20000370
 80032c4:	20000484 	.word	0x20000484
 80032c8:	20000480 	.word	0x20000480

080032cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032d2:	4b29      	ldr	r3, [pc, #164]	; (8003378 <vTaskSwitchContext+0xac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032da:	4b28      	ldr	r3, [pc, #160]	; (800337c <vTaskSwitchContext+0xb0>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032e0:	e044      	b.n	800336c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <vTaskSwitchContext+0xb0>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032e8:	4b25      	ldr	r3, [pc, #148]	; (8003380 <vTaskSwitchContext+0xb4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80032f6:	7afb      	ldrb	r3, [r7, #11]
 80032f8:	f1c3 031f 	rsb	r3, r3, #31
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	4921      	ldr	r1, [pc, #132]	; (8003384 <vTaskSwitchContext+0xb8>)
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	607b      	str	r3, [r7, #4]
}
 8003324:	bf00      	nop
 8003326:	e7fe      	b.n	8003326 <vTaskSwitchContext+0x5a>
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4a14      	ldr	r2, [pc, #80]	; (8003384 <vTaskSwitchContext+0xb8>)
 8003334:	4413      	add	r3, r2
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	3308      	adds	r3, #8
 800334a:	429a      	cmp	r2, r3
 800334c:	d104      	bne.n	8003358 <vTaskSwitchContext+0x8c>
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <vTaskSwitchContext+0xbc>)
 8003360:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003362:	4b09      	ldr	r3, [pc, #36]	; (8003388 <vTaskSwitchContext+0xbc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	334c      	adds	r3, #76	; 0x4c
 8003368:	4a08      	ldr	r2, [pc, #32]	; (800338c <vTaskSwitchContext+0xc0>)
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	20000498 	.word	0x20000498
 800337c:	20000484 	.word	0x20000484
 8003380:	20000478 	.word	0x20000478
 8003384:	20000374 	.word	0x20000374
 8003388:	20000370 	.word	0x20000370
 800338c:	20000010 	.word	0x20000010

08003390 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	60fb      	str	r3, [r7, #12]
}
 80033b2:	bf00      	nop
 80033b4:	e7fe      	b.n	80033b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <vTaskPlaceOnEventList+0x44>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3318      	adds	r3, #24
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fe fe33 	bl	800202a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033c4:	2101      	movs	r1, #1
 80033c6:	6838      	ldr	r0, [r7, #0]
 80033c8:	f000 fa6a 	bl	80038a0 <prvAddCurrentTaskToDelayedList>
}
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000370 	.word	0x20000370

080033d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	60fb      	str	r3, [r7, #12]
}
 8003400:	bf00      	nop
 8003402:	e7fe      	b.n	8003402 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	3318      	adds	r3, #24
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe fe47 	bl	800209c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <xTaskRemoveFromEventList+0xac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d11c      	bne.n	8003450 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	3304      	adds	r3, #4
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe fe3e 	bl	800209c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	2201      	movs	r2, #1
 8003426:	409a      	lsls	r2, r3
 8003428:	4b17      	ldr	r3, [pc, #92]	; (8003488 <xTaskRemoveFromEventList+0xb0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4313      	orrs	r3, r2
 800342e:	4a16      	ldr	r2, [pc, #88]	; (8003488 <xTaskRemoveFromEventList+0xb0>)
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4a13      	ldr	r2, [pc, #76]	; (800348c <xTaskRemoveFromEventList+0xb4>)
 8003440:	441a      	add	r2, r3
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	3304      	adds	r3, #4
 8003446:	4619      	mov	r1, r3
 8003448:	4610      	mov	r0, r2
 800344a:	f7fe fdca 	bl	8001fe2 <vListInsertEnd>
 800344e:	e005      	b.n	800345c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	3318      	adds	r3, #24
 8003454:	4619      	mov	r1, r3
 8003456:	480e      	ldr	r0, [pc, #56]	; (8003490 <xTaskRemoveFromEventList+0xb8>)
 8003458:	f7fe fdc3 	bl	8001fe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <xTaskRemoveFromEventList+0xbc>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	429a      	cmp	r2, r3
 8003468:	d905      	bls.n	8003476 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800346a:	2301      	movs	r3, #1
 800346c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <xTaskRemoveFromEventList+0xc0>)
 8003470:	2201      	movs	r2, #1
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	e001      	b.n	800347a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800347a:	697b      	ldr	r3, [r7, #20]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000498 	.word	0x20000498
 8003488:	20000478 	.word	0x20000478
 800348c:	20000374 	.word	0x20000374
 8003490:	20000430 	.word	0x20000430
 8003494:	20000370 	.word	0x20000370
 8003498:	20000484 	.word	0x20000484

0800349c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <vTaskInternalSetTimeOutState+0x24>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034ac:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <vTaskInternalSetTimeOutState+0x28>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	605a      	str	r2, [r3, #4]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	20000488 	.word	0x20000488
 80034c4:	20000474 	.word	0x20000474

080034c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80034d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034dc:	f383 8811 	msr	BASEPRI, r3
 80034e0:	f3bf 8f6f 	isb	sy
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	613b      	str	r3, [r7, #16]
}
 80034ea:	bf00      	nop
 80034ec:	e7fe      	b.n	80034ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	60fb      	str	r3, [r7, #12]
}
 8003506:	bf00      	nop
 8003508:	e7fe      	b.n	8003508 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800350a:	f000 fb5b 	bl	8003bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800350e:	4b1d      	ldr	r3, [pc, #116]	; (8003584 <xTaskCheckForTimeOut+0xbc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003526:	d102      	bne.n	800352e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003528:	2300      	movs	r3, #0
 800352a:	61fb      	str	r3, [r7, #28]
 800352c:	e023      	b.n	8003576 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <xTaskCheckForTimeOut+0xc0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d007      	beq.n	800354a <xTaskCheckForTimeOut+0x82>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	429a      	cmp	r2, r3
 8003542:	d302      	bcc.n	800354a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	e015      	b.n	8003576 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	429a      	cmp	r2, r3
 8003552:	d20b      	bcs.n	800356c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	1ad2      	subs	r2, r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ff9b 	bl	800349c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	e004      	b.n	8003576 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003572:	2301      	movs	r3, #1
 8003574:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003576:	f000 fb55 	bl	8003c24 <vPortExitCritical>

	return xReturn;
 800357a:	69fb      	ldr	r3, [r7, #28]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3720      	adds	r7, #32
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000474 	.word	0x20000474
 8003588:	20000488 	.word	0x20000488

0800358c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <vTaskMissedYield+0x14>)
 8003592:	2201      	movs	r2, #1
 8003594:	601a      	str	r2, [r3, #0]
}
 8003596:	bf00      	nop
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	20000484 	.word	0x20000484

080035a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80035ac:	f000 f852 	bl	8003654 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <prvIdleTask+0x28>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d9f9      	bls.n	80035ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <prvIdleTask+0x2c>)
 80035ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80035c8:	e7f0      	b.n	80035ac <prvIdleTask+0x8>
 80035ca:	bf00      	nop
 80035cc:	20000374 	.word	0x20000374
 80035d0:	e000ed04 	.word	0xe000ed04

080035d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	e00c      	b.n	80035fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4a12      	ldr	r2, [pc, #72]	; (8003634 <prvInitialiseTaskLists+0x60>)
 80035ec:	4413      	add	r3, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe fcca 	bl	8001f88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3301      	adds	r3, #1
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b06      	cmp	r3, #6
 80035fe:	d9ef      	bls.n	80035e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003600:	480d      	ldr	r0, [pc, #52]	; (8003638 <prvInitialiseTaskLists+0x64>)
 8003602:	f7fe fcc1 	bl	8001f88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003606:	480d      	ldr	r0, [pc, #52]	; (800363c <prvInitialiseTaskLists+0x68>)
 8003608:	f7fe fcbe 	bl	8001f88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800360c:	480c      	ldr	r0, [pc, #48]	; (8003640 <prvInitialiseTaskLists+0x6c>)
 800360e:	f7fe fcbb 	bl	8001f88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003612:	480c      	ldr	r0, [pc, #48]	; (8003644 <prvInitialiseTaskLists+0x70>)
 8003614:	f7fe fcb8 	bl	8001f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003618:	480b      	ldr	r0, [pc, #44]	; (8003648 <prvInitialiseTaskLists+0x74>)
 800361a:	f7fe fcb5 	bl	8001f88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <prvInitialiseTaskLists+0x78>)
 8003620:	4a05      	ldr	r2, [pc, #20]	; (8003638 <prvInitialiseTaskLists+0x64>)
 8003622:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <prvInitialiseTaskLists+0x7c>)
 8003626:	4a05      	ldr	r2, [pc, #20]	; (800363c <prvInitialiseTaskLists+0x68>)
 8003628:	601a      	str	r2, [r3, #0]
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000374 	.word	0x20000374
 8003638:	20000400 	.word	0x20000400
 800363c:	20000414 	.word	0x20000414
 8003640:	20000430 	.word	0x20000430
 8003644:	20000444 	.word	0x20000444
 8003648:	2000045c 	.word	0x2000045c
 800364c:	20000428 	.word	0x20000428
 8003650:	2000042c 	.word	0x2000042c

08003654 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800365a:	e019      	b.n	8003690 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800365c:	f000 fab2 	bl	8003bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <prvCheckTasksWaitingTermination+0x50>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fd15 	bl	800209c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003672:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <prvCheckTasksWaitingTermination+0x54>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3b01      	subs	r3, #1
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <prvCheckTasksWaitingTermination+0x54>)
 800367a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <prvCheckTasksWaitingTermination+0x58>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3b01      	subs	r3, #1
 8003682:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <prvCheckTasksWaitingTermination+0x58>)
 8003684:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003686:	f000 facd 	bl	8003c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f810 	bl	80036b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <prvCheckTasksWaitingTermination+0x58>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e1      	bne.n	800365c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	20000444 	.word	0x20000444
 80036a8:	20000470 	.word	0x20000470
 80036ac:	20000458 	.word	0x20000458

080036b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	334c      	adds	r3, #76	; 0x4c
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 ff81 	bl	80045c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d108      	bne.n	80036de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fc65 	bl	8003fa0 <vPortFree>
				vPortFree( pxTCB );
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fc62 	bl	8003fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80036dc:	e018      	b.n	8003710 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d103      	bne.n	80036f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fc59 	bl	8003fa0 <vPortFree>
	}
 80036ee:	e00f      	b.n	8003710 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d00a      	beq.n	8003710 <prvDeleteTCB+0x60>
	__asm volatile
 80036fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fe:	f383 8811 	msr	BASEPRI, r3
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	f3bf 8f4f 	dsb	sy
 800370a:	60fb      	str	r3, [r7, #12]
}
 800370c:	bf00      	nop
 800370e:	e7fe      	b.n	800370e <prvDeleteTCB+0x5e>
	}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800371e:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <prvResetNextTaskUnblockTime+0x38>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <prvResetNextTaskUnblockTime+0x3c>)
 800372a:	f04f 32ff 	mov.w	r2, #4294967295
 800372e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003730:	e008      	b.n	8003744 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <prvResetNextTaskUnblockTime+0x38>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	4a04      	ldr	r2, [pc, #16]	; (8003754 <prvResetNextTaskUnblockTime+0x3c>)
 8003742:	6013      	str	r3, [r2, #0]
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	20000428 	.word	0x20000428
 8003754:	20000490 	.word	0x20000490

08003758 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800375e:	4b0b      	ldr	r3, [pc, #44]	; (800378c <xTaskGetSchedulerState+0x34>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d102      	bne.n	800376c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003766:	2301      	movs	r3, #1
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	e008      	b.n	800377e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <xTaskGetSchedulerState+0x38>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003774:	2302      	movs	r3, #2
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	e001      	b.n	800377e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800377a:	2300      	movs	r3, #0
 800377c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800377e:	687b      	ldr	r3, [r7, #4]
	}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	2000047c 	.word	0x2000047c
 8003790:	20000498 	.word	0x20000498

08003794 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d06e      	beq.n	8003888 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80037aa:	4b3a      	ldr	r3, [pc, #232]	; (8003894 <xTaskPriorityDisinherit+0x100>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d00a      	beq.n	80037ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	60fb      	str	r3, [r7, #12]
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	60bb      	str	r3, [r7, #8]
}
 80037e4:	bf00      	nop
 80037e6:	e7fe      	b.n	80037e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ec:	1e5a      	subs	r2, r3, #1
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d044      	beq.n	8003888 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003802:	2b00      	cmp	r3, #0
 8003804:	d140      	bne.n	8003888 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	3304      	adds	r3, #4
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fc46 	bl	800209c <uxListRemove>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d115      	bne.n	8003842 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381a:	491f      	ldr	r1, [pc, #124]	; (8003898 <xTaskPriorityDisinherit+0x104>)
 800381c:	4613      	mov	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10a      	bne.n	8003842 <xTaskPriorityDisinherit+0xae>
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	2201      	movs	r2, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43da      	mvns	r2, r3
 8003838:	4b18      	ldr	r3, [pc, #96]	; (800389c <xTaskPriorityDisinherit+0x108>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4013      	ands	r3, r2
 800383e:	4a17      	ldr	r2, [pc, #92]	; (800389c <xTaskPriorityDisinherit+0x108>)
 8003840:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	f1c3 0207 	rsb	r2, r3, #7
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	2201      	movs	r2, #1
 800385c:	409a      	lsls	r2, r3
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <xTaskPriorityDisinherit+0x108>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	4a0d      	ldr	r2, [pc, #52]	; (800389c <xTaskPriorityDisinherit+0x108>)
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4a08      	ldr	r2, [pc, #32]	; (8003898 <xTaskPriorityDisinherit+0x104>)
 8003876:	441a      	add	r2, r3
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	3304      	adds	r3, #4
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f7fe fbaf 	bl	8001fe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003884:	2301      	movs	r3, #1
 8003886:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003888:	697b      	ldr	r3, [r7, #20]
	}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000370 	.word	0x20000370
 8003898:	20000374 	.word	0x20000374
 800389c:	20000478 	.word	0x20000478

080038a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <prvAddCurrentTaskToDelayedList+0xb0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038b0:	4b28      	ldr	r3, [pc, #160]	; (8003954 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe fbf0 	bl	800209c <uxListRemove>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	2201      	movs	r2, #1
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43da      	mvns	r2, r3
 80038d0:	4b21      	ldr	r3, [pc, #132]	; (8003958 <prvAddCurrentTaskToDelayedList+0xb8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4013      	ands	r3, r2
 80038d6:	4a20      	ldr	r2, [pc, #128]	; (8003958 <prvAddCurrentTaskToDelayedList+0xb8>)
 80038d8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d10a      	bne.n	80038f8 <prvAddCurrentTaskToDelayedList+0x58>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038e8:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <prvAddCurrentTaskToDelayedList+0xb4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4619      	mov	r1, r3
 80038f0:	481a      	ldr	r0, [pc, #104]	; (800395c <prvAddCurrentTaskToDelayedList+0xbc>)
 80038f2:	f7fe fb76 	bl	8001fe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038f6:	e026      	b.n	8003946 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4413      	add	r3, r2
 80038fe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003900:	4b14      	ldr	r3, [pc, #80]	; (8003954 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	429a      	cmp	r2, r3
 800390e:	d209      	bcs.n	8003924 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003910:	4b13      	ldr	r3, [pc, #76]	; (8003960 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4b0f      	ldr	r3, [pc, #60]	; (8003954 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3304      	adds	r3, #4
 800391a:	4619      	mov	r1, r3
 800391c:	4610      	mov	r0, r2
 800391e:	f7fe fb84 	bl	800202a <vListInsert>
}
 8003922:	e010      	b.n	8003946 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003924:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <prvAddCurrentTaskToDelayedList+0xb4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3304      	adds	r3, #4
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f7fe fb7a 	bl	800202a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	d202      	bcs.n	8003946 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003940:	4a09      	ldr	r2, [pc, #36]	; (8003968 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	6013      	str	r3, [r2, #0]
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000474 	.word	0x20000474
 8003954:	20000370 	.word	0x20000370
 8003958:	20000478 	.word	0x20000478
 800395c:	2000045c 	.word	0x2000045c
 8003960:	2000042c 	.word	0x2000042c
 8003964:	20000428 	.word	0x20000428
 8003968:	20000490 	.word	0x20000490

0800396c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3b04      	subs	r3, #4
 800397c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	3b04      	subs	r3, #4
 800398a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f023 0201 	bic.w	r2, r3, #1
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3b04      	subs	r3, #4
 800399a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800399c:	4a0c      	ldr	r2, [pc, #48]	; (80039d0 <pxPortInitialiseStack+0x64>)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	3b14      	subs	r3, #20
 80039a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3b04      	subs	r3, #4
 80039b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f06f 0202 	mvn.w	r2, #2
 80039ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	3b20      	subs	r3, #32
 80039c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80039c2:	68fb      	ldr	r3, [r7, #12]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	080039d5 	.word	0x080039d5

080039d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <prvTaskExitError+0x54>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d00a      	beq.n	80039fe <prvTaskExitError+0x2a>
	__asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	60fb      	str	r3, [r7, #12]
}
 80039fa:	bf00      	nop
 80039fc:	e7fe      	b.n	80039fc <prvTaskExitError+0x28>
	__asm volatile
 80039fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	60bb      	str	r3, [r7, #8]
}
 8003a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003a12:	bf00      	nop
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0fc      	beq.n	8003a14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	2000000c 	.word	0x2000000c
 8003a2c:	00000000 	.word	0x00000000

08003a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003a30:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <pxCurrentTCBConst2>)
 8003a32:	6819      	ldr	r1, [r3, #0]
 8003a34:	6808      	ldr	r0, [r1, #0]
 8003a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a3a:	f380 8809 	msr	PSP, r0
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f04f 0000 	mov.w	r0, #0
 8003a46:	f380 8811 	msr	BASEPRI, r0
 8003a4a:	4770      	bx	lr
 8003a4c:	f3af 8000 	nop.w

08003a50 <pxCurrentTCBConst2>:
 8003a50:	20000370 	.word	0x20000370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop

08003a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a58:	4808      	ldr	r0, [pc, #32]	; (8003a7c <prvPortStartFirstTask+0x24>)
 8003a5a:	6800      	ldr	r0, [r0, #0]
 8003a5c:	6800      	ldr	r0, [r0, #0]
 8003a5e:	f380 8808 	msr	MSP, r0
 8003a62:	f04f 0000 	mov.w	r0, #0
 8003a66:	f380 8814 	msr	CONTROL, r0
 8003a6a:	b662      	cpsie	i
 8003a6c:	b661      	cpsie	f
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	df00      	svc	0
 8003a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a7a:	bf00      	nop
 8003a7c:	e000ed08 	.word	0xe000ed08

08003a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a86:	4b46      	ldr	r3, [pc, #280]	; (8003ba0 <xPortStartScheduler+0x120>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a46      	ldr	r2, [pc, #280]	; (8003ba4 <xPortStartScheduler+0x124>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d10a      	bne.n	8003aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	613b      	str	r3, [r7, #16]
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003aa6:	4b3e      	ldr	r3, [pc, #248]	; (8003ba0 <xPortStartScheduler+0x120>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a3f      	ldr	r2, [pc, #252]	; (8003ba8 <xPortStartScheduler+0x128>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d10a      	bne.n	8003ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	60fb      	str	r3, [r7, #12]
}
 8003ac2:	bf00      	nop
 8003ac4:	e7fe      	b.n	8003ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ac6:	4b39      	ldr	r3, [pc, #228]	; (8003bac <xPortStartScheduler+0x12c>)
 8003ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	22ff      	movs	r2, #255	; 0xff
 8003ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <xPortStartScheduler+0x130>)
 8003aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003aee:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <xPortStartScheduler+0x134>)
 8003af0:	2207      	movs	r2, #7
 8003af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003af4:	e009      	b.n	8003b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003af6:	4b2f      	ldr	r3, [pc, #188]	; (8003bb4 <xPortStartScheduler+0x134>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3b01      	subs	r3, #1
 8003afc:	4a2d      	ldr	r2, [pc, #180]	; (8003bb4 <xPortStartScheduler+0x134>)
 8003afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b00:	78fb      	ldrb	r3, [r7, #3]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	2b80      	cmp	r3, #128	; 0x80
 8003b14:	d0ef      	beq.n	8003af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003b16:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <xPortStartScheduler+0x134>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f1c3 0307 	rsb	r3, r3, #7
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d00a      	beq.n	8003b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	60bb      	str	r3, [r7, #8]
}
 8003b34:	bf00      	nop
 8003b36:	e7fe      	b.n	8003b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b38:	4b1e      	ldr	r3, [pc, #120]	; (8003bb4 <xPortStartScheduler+0x134>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	4a1d      	ldr	r2, [pc, #116]	; (8003bb4 <xPortStartScheduler+0x134>)
 8003b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <xPortStartScheduler+0x134>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b4a:	4a1a      	ldr	r2, [pc, #104]	; (8003bb4 <xPortStartScheduler+0x134>)
 8003b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b56:	4b18      	ldr	r3, [pc, #96]	; (8003bb8 <xPortStartScheduler+0x138>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a17      	ldr	r2, [pc, #92]	; (8003bb8 <xPortStartScheduler+0x138>)
 8003b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <xPortStartScheduler+0x138>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <xPortStartScheduler+0x138>)
 8003b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b6e:	f000 f8dd 	bl	8003d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b72:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <xPortStartScheduler+0x13c>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b78:	f000 f8fc 	bl	8003d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b7c:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <xPortStartScheduler+0x140>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a0f      	ldr	r2, [pc, #60]	; (8003bc0 <xPortStartScheduler+0x140>)
 8003b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b88:	f7ff ff66 	bl	8003a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b8c:	f7ff fb9e 	bl	80032cc <vTaskSwitchContext>
	prvTaskExitError();
 8003b90:	f7ff ff20 	bl	80039d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	e000ed00 	.word	0xe000ed00
 8003ba4:	410fc271 	.word	0x410fc271
 8003ba8:	410fc270 	.word	0x410fc270
 8003bac:	e000e400 	.word	0xe000e400
 8003bb0:	2000049c 	.word	0x2000049c
 8003bb4:	200004a0 	.word	0x200004a0
 8003bb8:	e000ed20 	.word	0xe000ed20
 8003bbc:	2000000c 	.word	0x2000000c
 8003bc0:	e000ef34 	.word	0xe000ef34

08003bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	607b      	str	r3, [r7, #4]
}
 8003bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003bde:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <vPortEnterCritical+0x58>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	4a0d      	ldr	r2, [pc, #52]	; (8003c1c <vPortEnterCritical+0x58>)
 8003be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <vPortEnterCritical+0x58>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10f      	bne.n	8003c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003bf0:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <vPortEnterCritical+0x5c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8003bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfe:	f383 8811 	msr	BASEPRI, r3
 8003c02:	f3bf 8f6f 	isb	sy
 8003c06:	f3bf 8f4f 	dsb	sy
 8003c0a:	603b      	str	r3, [r7, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	e7fe      	b.n	8003c0e <vPortEnterCritical+0x4a>
	}
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	2000000c 	.word	0x2000000c
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003c2a:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <vPortExitCritical+0x50>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <vPortExitCritical+0x24>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	607b      	str	r3, [r7, #4]
}
 8003c44:	bf00      	nop
 8003c46:	e7fe      	b.n	8003c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003c48:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <vPortExitCritical+0x50>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	4a09      	ldr	r2, [pc, #36]	; (8003c74 <vPortExitCritical+0x50>)
 8003c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c52:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <vPortExitCritical+0x50>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d105      	bne.n	8003c66 <vPortExitCritical+0x42>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f383 8811 	msr	BASEPRI, r3
}
 8003c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	2000000c 	.word	0x2000000c
	...

08003c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c80:	f3ef 8009 	mrs	r0, PSP
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <pxCurrentTCBConst>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	f01e 0f10 	tst.w	lr, #16
 8003c90:	bf08      	it	eq
 8003c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9a:	6010      	str	r0, [r2, #0]
 8003c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ca4:	f380 8811 	msr	BASEPRI, r0
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f7ff fb0c 	bl	80032cc <vTaskSwitchContext>
 8003cb4:	f04f 0000 	mov.w	r0, #0
 8003cb8:	f380 8811 	msr	BASEPRI, r0
 8003cbc:	bc09      	pop	{r0, r3}
 8003cbe:	6819      	ldr	r1, [r3, #0]
 8003cc0:	6808      	ldr	r0, [r1, #0]
 8003cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cc6:	f01e 0f10 	tst.w	lr, #16
 8003cca:	bf08      	it	eq
 8003ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003cd0:	f380 8809 	msr	PSP, r0
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	f3af 8000 	nop.w

08003ce0 <pxCurrentTCBConst>:
 8003ce0:	20000370 	.word	0x20000370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop

08003ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
	__asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	607b      	str	r3, [r7, #4]
}
 8003d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003d02:	f7ff fa2b 	bl	800315c <xTaskIncrementTick>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <xPortSysTickHandler+0x40>)
 8003d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	2300      	movs	r3, #0
 8003d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	f383 8811 	msr	BASEPRI, r3
}
 8003d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	e000ed04 	.word	0xe000ed04

08003d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <vPortSetupTimerInterrupt+0x34>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <vPortSetupTimerInterrupt+0x38>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <vPortSetupTimerInterrupt+0x3c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0a      	ldr	r2, [pc, #40]	; (8003d6c <vPortSetupTimerInterrupt+0x40>)
 8003d42:	fba2 2303 	umull	r2, r3, r2, r3
 8003d46:	099b      	lsrs	r3, r3, #6
 8003d48:	4a09      	ldr	r2, [pc, #36]	; (8003d70 <vPortSetupTimerInterrupt+0x44>)
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <vPortSetupTimerInterrupt+0x34>)
 8003d50:	2207      	movs	r2, #7
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	e000e010 	.word	0xe000e010
 8003d64:	e000e018 	.word	0xe000e018
 8003d68:	20000000 	.word	0x20000000
 8003d6c:	10624dd3 	.word	0x10624dd3
 8003d70:	e000e014 	.word	0xe000e014

08003d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d84 <vPortEnableVFP+0x10>
 8003d78:	6801      	ldr	r1, [r0, #0]
 8003d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d7e:	6001      	str	r1, [r0, #0]
 8003d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d82:	bf00      	nop
 8003d84:	e000ed88 	.word	0xe000ed88

08003d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003d8e:	f3ef 8305 	mrs	r3, IPSR
 8003d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2b0f      	cmp	r3, #15
 8003d98:	d914      	bls.n	8003dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d9a:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <vPortValidateInterruptPriority+0x70>)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <vPortValidateInterruptPriority+0x74>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	7afa      	ldrb	r2, [r7, #11]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d20a      	bcs.n	8003dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	607b      	str	r3, [r7, #4]
}
 8003dc0:	bf00      	nop
 8003dc2:	e7fe      	b.n	8003dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003dc4:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <vPortValidateInterruptPriority+0x78>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003dcc:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <vPortValidateInterruptPriority+0x7c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d90a      	bls.n	8003dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	603b      	str	r3, [r7, #0]
}
 8003de6:	bf00      	nop
 8003de8:	e7fe      	b.n	8003de8 <vPortValidateInterruptPriority+0x60>
	}
 8003dea:	bf00      	nop
 8003dec:	3714      	adds	r7, #20
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	e000e3f0 	.word	0xe000e3f0
 8003dfc:	2000049c 	.word	0x2000049c
 8003e00:	e000ed0c 	.word	0xe000ed0c
 8003e04:	200004a0 	.word	0x200004a0

08003e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	; 0x28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e14:	f7ff f8f8 	bl	8003008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e18:	4b5b      	ldr	r3, [pc, #364]	; (8003f88 <pvPortMalloc+0x180>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e20:	f000 f920 	bl	8004064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e24:	4b59      	ldr	r3, [pc, #356]	; (8003f8c <pvPortMalloc+0x184>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f040 8093 	bne.w	8003f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01d      	beq.n	8003e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003e38:	2208      	movs	r2, #8
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d014      	beq.n	8003e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f023 0307 	bic.w	r3, r3, #7
 8003e50:	3308      	adds	r3, #8
 8003e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <pvPortMalloc+0x6c>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	617b      	str	r3, [r7, #20]
}
 8003e70:	bf00      	nop
 8003e72:	e7fe      	b.n	8003e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d06e      	beq.n	8003f58 <pvPortMalloc+0x150>
 8003e7a:	4b45      	ldr	r3, [pc, #276]	; (8003f90 <pvPortMalloc+0x188>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d869      	bhi.n	8003f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e84:	4b43      	ldr	r3, [pc, #268]	; (8003f94 <pvPortMalloc+0x18c>)
 8003e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e88:	4b42      	ldr	r3, [pc, #264]	; (8003f94 <pvPortMalloc+0x18c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e8e:	e004      	b.n	8003e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d903      	bls.n	8003eac <pvPortMalloc+0xa4>
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f1      	bne.n	8003e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003eac:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <pvPortMalloc+0x180>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d050      	beq.n	8003f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003eb6:	6a3b      	ldr	r3, [r7, #32]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2208      	movs	r2, #8
 8003ebc:	4413      	add	r3, r2
 8003ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d91f      	bls.n	8003f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4413      	add	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <pvPortMalloc+0xf8>
	__asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	613b      	str	r3, [r7, #16]
}
 8003efc:	bf00      	nop
 8003efe:	e7fe      	b.n	8003efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	1ad2      	subs	r2, r2, r3
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f12:	69b8      	ldr	r0, [r7, #24]
 8003f14:	f000 f908 	bl	8004128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f18:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <pvPortMalloc+0x188>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <pvPortMalloc+0x188>)
 8003f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f26:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <pvPortMalloc+0x188>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <pvPortMalloc+0x190>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d203      	bcs.n	8003f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f32:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <pvPortMalloc+0x188>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <pvPortMalloc+0x190>)
 8003f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <pvPortMalloc+0x184>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <pvPortMalloc+0x194>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	4a11      	ldr	r2, [pc, #68]	; (8003f9c <pvPortMalloc+0x194>)
 8003f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f58:	f7ff f864 	bl	8003024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <pvPortMalloc+0x174>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	60fb      	str	r3, [r7, #12]
}
 8003f78:	bf00      	nop
 8003f7a:	e7fe      	b.n	8003f7a <pvPortMalloc+0x172>
	return pvReturn;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3728      	adds	r7, #40	; 0x28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200040ac 	.word	0x200040ac
 8003f8c:	200040c0 	.word	0x200040c0
 8003f90:	200040b0 	.word	0x200040b0
 8003f94:	200040a4 	.word	0x200040a4
 8003f98:	200040b4 	.word	0x200040b4
 8003f9c:	200040b8 	.word	0x200040b8

08003fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d04d      	beq.n	800404e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003fb2:	2308      	movs	r3, #8
 8003fb4:	425b      	negs	r3, r3
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4413      	add	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	4b24      	ldr	r3, [pc, #144]	; (8004058 <vPortFree+0xb8>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10a      	bne.n	8003fe4 <vPortFree+0x44>
	__asm volatile
 8003fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd2:	f383 8811 	msr	BASEPRI, r3
 8003fd6:	f3bf 8f6f 	isb	sy
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	60fb      	str	r3, [r7, #12]
}
 8003fe0:	bf00      	nop
 8003fe2:	e7fe      	b.n	8003fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <vPortFree+0x62>
	__asm volatile
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	60bb      	str	r3, [r7, #8]
}
 8003ffe:	bf00      	nop
 8004000:	e7fe      	b.n	8004000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	4b14      	ldr	r3, [pc, #80]	; (8004058 <vPortFree+0xb8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01e      	beq.n	800404e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d11a      	bne.n	800404e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <vPortFree+0xb8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	43db      	mvns	r3, r3
 8004022:	401a      	ands	r2, r3
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004028:	f7fe ffee 	bl	8003008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <vPortFree+0xbc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4413      	add	r3, r2
 8004036:	4a09      	ldr	r2, [pc, #36]	; (800405c <vPortFree+0xbc>)
 8004038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800403a:	6938      	ldr	r0, [r7, #16]
 800403c:	f000 f874 	bl	8004128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <vPortFree+0xc0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3301      	adds	r3, #1
 8004046:	4a06      	ldr	r2, [pc, #24]	; (8004060 <vPortFree+0xc0>)
 8004048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800404a:	f7fe ffeb 	bl	8003024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800404e:	bf00      	nop
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200040c0 	.word	0x200040c0
 800405c:	200040b0 	.word	0x200040b0
 8004060:	200040bc 	.word	0x200040bc

08004064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800406a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800406e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004070:	4b27      	ldr	r3, [pc, #156]	; (8004110 <prvHeapInit+0xac>)
 8004072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	2b00      	cmp	r3, #0
 800407c:	d00c      	beq.n	8004098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3307      	adds	r3, #7
 8004082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0307 	bic.w	r3, r3, #7
 800408a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <prvHeapInit+0xac>)
 8004094:	4413      	add	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800409c:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <prvHeapInit+0xb0>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040a2:	4b1c      	ldr	r3, [pc, #112]	; (8004114 <prvHeapInit+0xb0>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4413      	add	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80040b0:	2208      	movs	r2, #8
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0307 	bic.w	r3, r3, #7
 80040be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4a15      	ldr	r2, [pc, #84]	; (8004118 <prvHeapInit+0xb4>)
 80040c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80040c6:	4b14      	ldr	r3, [pc, #80]	; (8004118 <prvHeapInit+0xb4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2200      	movs	r2, #0
 80040cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80040ce:	4b12      	ldr	r3, [pc, #72]	; (8004118 <prvHeapInit+0xb4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	1ad2      	subs	r2, r2, r3
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040e4:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <prvHeapInit+0xb4>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a0a      	ldr	r2, [pc, #40]	; (800411c <prvHeapInit+0xb8>)
 80040f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4a09      	ldr	r2, [pc, #36]	; (8004120 <prvHeapInit+0xbc>)
 80040fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040fc:	4b09      	ldr	r3, [pc, #36]	; (8004124 <prvHeapInit+0xc0>)
 80040fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004102:	601a      	str	r2, [r3, #0]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	200004a4 	.word	0x200004a4
 8004114:	200040a4 	.word	0x200040a4
 8004118:	200040ac 	.word	0x200040ac
 800411c:	200040b4 	.word	0x200040b4
 8004120:	200040b0 	.word	0x200040b0
 8004124:	200040c0 	.word	0x200040c0

08004128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004130:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <prvInsertBlockIntoFreeList+0xac>)
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	e002      	b.n	800413c <prvInsertBlockIntoFreeList+0x14>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	429a      	cmp	r2, r3
 8004144:	d8f7      	bhi.n	8004136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4413      	add	r3, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	429a      	cmp	r2, r3
 8004156:	d108      	bne.n	800416a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	441a      	add	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	441a      	add	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d118      	bne.n	80041b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <prvInsertBlockIntoFreeList+0xb0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d00d      	beq.n	80041a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e008      	b.n	80041b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <prvInsertBlockIntoFreeList+0xb0>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e003      	b.n	80041b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d002      	beq.n	80041c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041c6:	bf00      	nop
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	200040a4 	.word	0x200040a4
 80041d8:	200040ac 	.word	0x200040ac

080041dc <__errno>:
 80041dc:	4b01      	ldr	r3, [pc, #4]	; (80041e4 <__errno+0x8>)
 80041de:	6818      	ldr	r0, [r3, #0]
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000010 	.word	0x20000010

080041e8 <std>:
 80041e8:	2300      	movs	r3, #0
 80041ea:	b510      	push	{r4, lr}
 80041ec:	4604      	mov	r4, r0
 80041ee:	e9c0 3300 	strd	r3, r3, [r0]
 80041f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041f6:	6083      	str	r3, [r0, #8]
 80041f8:	8181      	strh	r1, [r0, #12]
 80041fa:	6643      	str	r3, [r0, #100]	; 0x64
 80041fc:	81c2      	strh	r2, [r0, #14]
 80041fe:	6183      	str	r3, [r0, #24]
 8004200:	4619      	mov	r1, r3
 8004202:	2208      	movs	r2, #8
 8004204:	305c      	adds	r0, #92	; 0x5c
 8004206:	f000 f91a 	bl	800443e <memset>
 800420a:	4b05      	ldr	r3, [pc, #20]	; (8004220 <std+0x38>)
 800420c:	6263      	str	r3, [r4, #36]	; 0x24
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <std+0x3c>)
 8004210:	62a3      	str	r3, [r4, #40]	; 0x28
 8004212:	4b05      	ldr	r3, [pc, #20]	; (8004228 <std+0x40>)
 8004214:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004216:	4b05      	ldr	r3, [pc, #20]	; (800422c <std+0x44>)
 8004218:	6224      	str	r4, [r4, #32]
 800421a:	6323      	str	r3, [r4, #48]	; 0x30
 800421c:	bd10      	pop	{r4, pc}
 800421e:	bf00      	nop
 8004220:	0800469d 	.word	0x0800469d
 8004224:	080046bf 	.word	0x080046bf
 8004228:	080046f7 	.word	0x080046f7
 800422c:	0800471b 	.word	0x0800471b

08004230 <_cleanup_r>:
 8004230:	4901      	ldr	r1, [pc, #4]	; (8004238 <_cleanup_r+0x8>)
 8004232:	f000 b8af 	b.w	8004394 <_fwalk_reent>
 8004236:	bf00      	nop
 8004238:	08004875 	.word	0x08004875

0800423c <__sfmoreglue>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	2268      	movs	r2, #104	; 0x68
 8004240:	1e4d      	subs	r5, r1, #1
 8004242:	4355      	muls	r5, r2
 8004244:	460e      	mov	r6, r1
 8004246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800424a:	f000 f921 	bl	8004490 <_malloc_r>
 800424e:	4604      	mov	r4, r0
 8004250:	b140      	cbz	r0, 8004264 <__sfmoreglue+0x28>
 8004252:	2100      	movs	r1, #0
 8004254:	e9c0 1600 	strd	r1, r6, [r0]
 8004258:	300c      	adds	r0, #12
 800425a:	60a0      	str	r0, [r4, #8]
 800425c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004260:	f000 f8ed 	bl	800443e <memset>
 8004264:	4620      	mov	r0, r4
 8004266:	bd70      	pop	{r4, r5, r6, pc}

08004268 <__sfp_lock_acquire>:
 8004268:	4801      	ldr	r0, [pc, #4]	; (8004270 <__sfp_lock_acquire+0x8>)
 800426a:	f000 b8d8 	b.w	800441e <__retarget_lock_acquire_recursive>
 800426e:	bf00      	nop
 8004270:	200040c5 	.word	0x200040c5

08004274 <__sfp_lock_release>:
 8004274:	4801      	ldr	r0, [pc, #4]	; (800427c <__sfp_lock_release+0x8>)
 8004276:	f000 b8d3 	b.w	8004420 <__retarget_lock_release_recursive>
 800427a:	bf00      	nop
 800427c:	200040c5 	.word	0x200040c5

08004280 <__sinit_lock_acquire>:
 8004280:	4801      	ldr	r0, [pc, #4]	; (8004288 <__sinit_lock_acquire+0x8>)
 8004282:	f000 b8cc 	b.w	800441e <__retarget_lock_acquire_recursive>
 8004286:	bf00      	nop
 8004288:	200040c6 	.word	0x200040c6

0800428c <__sinit_lock_release>:
 800428c:	4801      	ldr	r0, [pc, #4]	; (8004294 <__sinit_lock_release+0x8>)
 800428e:	f000 b8c7 	b.w	8004420 <__retarget_lock_release_recursive>
 8004292:	bf00      	nop
 8004294:	200040c6 	.word	0x200040c6

08004298 <__sinit>:
 8004298:	b510      	push	{r4, lr}
 800429a:	4604      	mov	r4, r0
 800429c:	f7ff fff0 	bl	8004280 <__sinit_lock_acquire>
 80042a0:	69a3      	ldr	r3, [r4, #24]
 80042a2:	b11b      	cbz	r3, 80042ac <__sinit+0x14>
 80042a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a8:	f7ff bff0 	b.w	800428c <__sinit_lock_release>
 80042ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80042b0:	6523      	str	r3, [r4, #80]	; 0x50
 80042b2:	4b13      	ldr	r3, [pc, #76]	; (8004300 <__sinit+0x68>)
 80042b4:	4a13      	ldr	r2, [pc, #76]	; (8004304 <__sinit+0x6c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80042ba:	42a3      	cmp	r3, r4
 80042bc:	bf04      	itt	eq
 80042be:	2301      	moveq	r3, #1
 80042c0:	61a3      	streq	r3, [r4, #24]
 80042c2:	4620      	mov	r0, r4
 80042c4:	f000 f820 	bl	8004308 <__sfp>
 80042c8:	6060      	str	r0, [r4, #4]
 80042ca:	4620      	mov	r0, r4
 80042cc:	f000 f81c 	bl	8004308 <__sfp>
 80042d0:	60a0      	str	r0, [r4, #8]
 80042d2:	4620      	mov	r0, r4
 80042d4:	f000 f818 	bl	8004308 <__sfp>
 80042d8:	2200      	movs	r2, #0
 80042da:	60e0      	str	r0, [r4, #12]
 80042dc:	2104      	movs	r1, #4
 80042de:	6860      	ldr	r0, [r4, #4]
 80042e0:	f7ff ff82 	bl	80041e8 <std>
 80042e4:	68a0      	ldr	r0, [r4, #8]
 80042e6:	2201      	movs	r2, #1
 80042e8:	2109      	movs	r1, #9
 80042ea:	f7ff ff7d 	bl	80041e8 <std>
 80042ee:	68e0      	ldr	r0, [r4, #12]
 80042f0:	2202      	movs	r2, #2
 80042f2:	2112      	movs	r1, #18
 80042f4:	f7ff ff78 	bl	80041e8 <std>
 80042f8:	2301      	movs	r3, #1
 80042fa:	61a3      	str	r3, [r4, #24]
 80042fc:	e7d2      	b.n	80042a4 <__sinit+0xc>
 80042fe:	bf00      	nop
 8004300:	080053ac 	.word	0x080053ac
 8004304:	08004231 	.word	0x08004231

08004308 <__sfp>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	4607      	mov	r7, r0
 800430c:	f7ff ffac 	bl	8004268 <__sfp_lock_acquire>
 8004310:	4b1e      	ldr	r3, [pc, #120]	; (800438c <__sfp+0x84>)
 8004312:	681e      	ldr	r6, [r3, #0]
 8004314:	69b3      	ldr	r3, [r6, #24]
 8004316:	b913      	cbnz	r3, 800431e <__sfp+0x16>
 8004318:	4630      	mov	r0, r6
 800431a:	f7ff ffbd 	bl	8004298 <__sinit>
 800431e:	3648      	adds	r6, #72	; 0x48
 8004320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004324:	3b01      	subs	r3, #1
 8004326:	d503      	bpl.n	8004330 <__sfp+0x28>
 8004328:	6833      	ldr	r3, [r6, #0]
 800432a:	b30b      	cbz	r3, 8004370 <__sfp+0x68>
 800432c:	6836      	ldr	r6, [r6, #0]
 800432e:	e7f7      	b.n	8004320 <__sfp+0x18>
 8004330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004334:	b9d5      	cbnz	r5, 800436c <__sfp+0x64>
 8004336:	4b16      	ldr	r3, [pc, #88]	; (8004390 <__sfp+0x88>)
 8004338:	60e3      	str	r3, [r4, #12]
 800433a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800433e:	6665      	str	r5, [r4, #100]	; 0x64
 8004340:	f000 f86c 	bl	800441c <__retarget_lock_init_recursive>
 8004344:	f7ff ff96 	bl	8004274 <__sfp_lock_release>
 8004348:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800434c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004350:	6025      	str	r5, [r4, #0]
 8004352:	61a5      	str	r5, [r4, #24]
 8004354:	2208      	movs	r2, #8
 8004356:	4629      	mov	r1, r5
 8004358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800435c:	f000 f86f 	bl	800443e <memset>
 8004360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004368:	4620      	mov	r0, r4
 800436a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800436c:	3468      	adds	r4, #104	; 0x68
 800436e:	e7d9      	b.n	8004324 <__sfp+0x1c>
 8004370:	2104      	movs	r1, #4
 8004372:	4638      	mov	r0, r7
 8004374:	f7ff ff62 	bl	800423c <__sfmoreglue>
 8004378:	4604      	mov	r4, r0
 800437a:	6030      	str	r0, [r6, #0]
 800437c:	2800      	cmp	r0, #0
 800437e:	d1d5      	bne.n	800432c <__sfp+0x24>
 8004380:	f7ff ff78 	bl	8004274 <__sfp_lock_release>
 8004384:	230c      	movs	r3, #12
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	e7ee      	b.n	8004368 <__sfp+0x60>
 800438a:	bf00      	nop
 800438c:	080053ac 	.word	0x080053ac
 8004390:	ffff0001 	.word	0xffff0001

08004394 <_fwalk_reent>:
 8004394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004398:	4606      	mov	r6, r0
 800439a:	4688      	mov	r8, r1
 800439c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80043a0:	2700      	movs	r7, #0
 80043a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043a6:	f1b9 0901 	subs.w	r9, r9, #1
 80043aa:	d505      	bpl.n	80043b8 <_fwalk_reent+0x24>
 80043ac:	6824      	ldr	r4, [r4, #0]
 80043ae:	2c00      	cmp	r4, #0
 80043b0:	d1f7      	bne.n	80043a2 <_fwalk_reent+0xe>
 80043b2:	4638      	mov	r0, r7
 80043b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043b8:	89ab      	ldrh	r3, [r5, #12]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d907      	bls.n	80043ce <_fwalk_reent+0x3a>
 80043be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043c2:	3301      	adds	r3, #1
 80043c4:	d003      	beq.n	80043ce <_fwalk_reent+0x3a>
 80043c6:	4629      	mov	r1, r5
 80043c8:	4630      	mov	r0, r6
 80043ca:	47c0      	blx	r8
 80043cc:	4307      	orrs	r7, r0
 80043ce:	3568      	adds	r5, #104	; 0x68
 80043d0:	e7e9      	b.n	80043a6 <_fwalk_reent+0x12>
	...

080043d4 <__libc_init_array>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4d0d      	ldr	r5, [pc, #52]	; (800440c <__libc_init_array+0x38>)
 80043d8:	4c0d      	ldr	r4, [pc, #52]	; (8004410 <__libc_init_array+0x3c>)
 80043da:	1b64      	subs	r4, r4, r5
 80043dc:	10a4      	asrs	r4, r4, #2
 80043de:	2600      	movs	r6, #0
 80043e0:	42a6      	cmp	r6, r4
 80043e2:	d109      	bne.n	80043f8 <__libc_init_array+0x24>
 80043e4:	4d0b      	ldr	r5, [pc, #44]	; (8004414 <__libc_init_array+0x40>)
 80043e6:	4c0c      	ldr	r4, [pc, #48]	; (8004418 <__libc_init_array+0x44>)
 80043e8:	f000 ff32 	bl	8005250 <_init>
 80043ec:	1b64      	subs	r4, r4, r5
 80043ee:	10a4      	asrs	r4, r4, #2
 80043f0:	2600      	movs	r6, #0
 80043f2:	42a6      	cmp	r6, r4
 80043f4:	d105      	bne.n	8004402 <__libc_init_array+0x2e>
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fc:	4798      	blx	r3
 80043fe:	3601      	adds	r6, #1
 8004400:	e7ee      	b.n	80043e0 <__libc_init_array+0xc>
 8004402:	f855 3b04 	ldr.w	r3, [r5], #4
 8004406:	4798      	blx	r3
 8004408:	3601      	adds	r6, #1
 800440a:	e7f2      	b.n	80043f2 <__libc_init_array+0x1e>
 800440c:	080053ec 	.word	0x080053ec
 8004410:	080053ec 	.word	0x080053ec
 8004414:	080053ec 	.word	0x080053ec
 8004418:	080053f0 	.word	0x080053f0

0800441c <__retarget_lock_init_recursive>:
 800441c:	4770      	bx	lr

0800441e <__retarget_lock_acquire_recursive>:
 800441e:	4770      	bx	lr

08004420 <__retarget_lock_release_recursive>:
 8004420:	4770      	bx	lr

08004422 <memcpy>:
 8004422:	440a      	add	r2, r1
 8004424:	4291      	cmp	r1, r2
 8004426:	f100 33ff 	add.w	r3, r0, #4294967295
 800442a:	d100      	bne.n	800442e <memcpy+0xc>
 800442c:	4770      	bx	lr
 800442e:	b510      	push	{r4, lr}
 8004430:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004434:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004438:	4291      	cmp	r1, r2
 800443a:	d1f9      	bne.n	8004430 <memcpy+0xe>
 800443c:	bd10      	pop	{r4, pc}

0800443e <memset>:
 800443e:	4402      	add	r2, r0
 8004440:	4603      	mov	r3, r0
 8004442:	4293      	cmp	r3, r2
 8004444:	d100      	bne.n	8004448 <memset+0xa>
 8004446:	4770      	bx	lr
 8004448:	f803 1b01 	strb.w	r1, [r3], #1
 800444c:	e7f9      	b.n	8004442 <memset+0x4>
	...

08004450 <sbrk_aligned>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	4e0e      	ldr	r6, [pc, #56]	; (800448c <sbrk_aligned+0x3c>)
 8004454:	460c      	mov	r4, r1
 8004456:	6831      	ldr	r1, [r6, #0]
 8004458:	4605      	mov	r5, r0
 800445a:	b911      	cbnz	r1, 8004462 <sbrk_aligned+0x12>
 800445c:	f000 f90e 	bl	800467c <_sbrk_r>
 8004460:	6030      	str	r0, [r6, #0]
 8004462:	4621      	mov	r1, r4
 8004464:	4628      	mov	r0, r5
 8004466:	f000 f909 	bl	800467c <_sbrk_r>
 800446a:	1c43      	adds	r3, r0, #1
 800446c:	d00a      	beq.n	8004484 <sbrk_aligned+0x34>
 800446e:	1cc4      	adds	r4, r0, #3
 8004470:	f024 0403 	bic.w	r4, r4, #3
 8004474:	42a0      	cmp	r0, r4
 8004476:	d007      	beq.n	8004488 <sbrk_aligned+0x38>
 8004478:	1a21      	subs	r1, r4, r0
 800447a:	4628      	mov	r0, r5
 800447c:	f000 f8fe 	bl	800467c <_sbrk_r>
 8004480:	3001      	adds	r0, #1
 8004482:	d101      	bne.n	8004488 <sbrk_aligned+0x38>
 8004484:	f04f 34ff 	mov.w	r4, #4294967295
 8004488:	4620      	mov	r0, r4
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	200040cc 	.word	0x200040cc

08004490 <_malloc_r>:
 8004490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004494:	1ccd      	adds	r5, r1, #3
 8004496:	f025 0503 	bic.w	r5, r5, #3
 800449a:	3508      	adds	r5, #8
 800449c:	2d0c      	cmp	r5, #12
 800449e:	bf38      	it	cc
 80044a0:	250c      	movcc	r5, #12
 80044a2:	2d00      	cmp	r5, #0
 80044a4:	4607      	mov	r7, r0
 80044a6:	db01      	blt.n	80044ac <_malloc_r+0x1c>
 80044a8:	42a9      	cmp	r1, r5
 80044aa:	d905      	bls.n	80044b8 <_malloc_r+0x28>
 80044ac:	230c      	movs	r3, #12
 80044ae:	603b      	str	r3, [r7, #0]
 80044b0:	2600      	movs	r6, #0
 80044b2:	4630      	mov	r0, r6
 80044b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b8:	4e2e      	ldr	r6, [pc, #184]	; (8004574 <_malloc_r+0xe4>)
 80044ba:	f000 fa29 	bl	8004910 <__malloc_lock>
 80044be:	6833      	ldr	r3, [r6, #0]
 80044c0:	461c      	mov	r4, r3
 80044c2:	bb34      	cbnz	r4, 8004512 <_malloc_r+0x82>
 80044c4:	4629      	mov	r1, r5
 80044c6:	4638      	mov	r0, r7
 80044c8:	f7ff ffc2 	bl	8004450 <sbrk_aligned>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	4604      	mov	r4, r0
 80044d0:	d14d      	bne.n	800456e <_malloc_r+0xde>
 80044d2:	6834      	ldr	r4, [r6, #0]
 80044d4:	4626      	mov	r6, r4
 80044d6:	2e00      	cmp	r6, #0
 80044d8:	d140      	bne.n	800455c <_malloc_r+0xcc>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	4631      	mov	r1, r6
 80044de:	4638      	mov	r0, r7
 80044e0:	eb04 0803 	add.w	r8, r4, r3
 80044e4:	f000 f8ca 	bl	800467c <_sbrk_r>
 80044e8:	4580      	cmp	r8, r0
 80044ea:	d13a      	bne.n	8004562 <_malloc_r+0xd2>
 80044ec:	6821      	ldr	r1, [r4, #0]
 80044ee:	3503      	adds	r5, #3
 80044f0:	1a6d      	subs	r5, r5, r1
 80044f2:	f025 0503 	bic.w	r5, r5, #3
 80044f6:	3508      	adds	r5, #8
 80044f8:	2d0c      	cmp	r5, #12
 80044fa:	bf38      	it	cc
 80044fc:	250c      	movcc	r5, #12
 80044fe:	4629      	mov	r1, r5
 8004500:	4638      	mov	r0, r7
 8004502:	f7ff ffa5 	bl	8004450 <sbrk_aligned>
 8004506:	3001      	adds	r0, #1
 8004508:	d02b      	beq.n	8004562 <_malloc_r+0xd2>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	442b      	add	r3, r5
 800450e:	6023      	str	r3, [r4, #0]
 8004510:	e00e      	b.n	8004530 <_malloc_r+0xa0>
 8004512:	6822      	ldr	r2, [r4, #0]
 8004514:	1b52      	subs	r2, r2, r5
 8004516:	d41e      	bmi.n	8004556 <_malloc_r+0xc6>
 8004518:	2a0b      	cmp	r2, #11
 800451a:	d916      	bls.n	800454a <_malloc_r+0xba>
 800451c:	1961      	adds	r1, r4, r5
 800451e:	42a3      	cmp	r3, r4
 8004520:	6025      	str	r5, [r4, #0]
 8004522:	bf18      	it	ne
 8004524:	6059      	strne	r1, [r3, #4]
 8004526:	6863      	ldr	r3, [r4, #4]
 8004528:	bf08      	it	eq
 800452a:	6031      	streq	r1, [r6, #0]
 800452c:	5162      	str	r2, [r4, r5]
 800452e:	604b      	str	r3, [r1, #4]
 8004530:	4638      	mov	r0, r7
 8004532:	f104 060b 	add.w	r6, r4, #11
 8004536:	f000 f9f1 	bl	800491c <__malloc_unlock>
 800453a:	f026 0607 	bic.w	r6, r6, #7
 800453e:	1d23      	adds	r3, r4, #4
 8004540:	1af2      	subs	r2, r6, r3
 8004542:	d0b6      	beq.n	80044b2 <_malloc_r+0x22>
 8004544:	1b9b      	subs	r3, r3, r6
 8004546:	50a3      	str	r3, [r4, r2]
 8004548:	e7b3      	b.n	80044b2 <_malloc_r+0x22>
 800454a:	6862      	ldr	r2, [r4, #4]
 800454c:	42a3      	cmp	r3, r4
 800454e:	bf0c      	ite	eq
 8004550:	6032      	streq	r2, [r6, #0]
 8004552:	605a      	strne	r2, [r3, #4]
 8004554:	e7ec      	b.n	8004530 <_malloc_r+0xa0>
 8004556:	4623      	mov	r3, r4
 8004558:	6864      	ldr	r4, [r4, #4]
 800455a:	e7b2      	b.n	80044c2 <_malloc_r+0x32>
 800455c:	4634      	mov	r4, r6
 800455e:	6876      	ldr	r6, [r6, #4]
 8004560:	e7b9      	b.n	80044d6 <_malloc_r+0x46>
 8004562:	230c      	movs	r3, #12
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4638      	mov	r0, r7
 8004568:	f000 f9d8 	bl	800491c <__malloc_unlock>
 800456c:	e7a1      	b.n	80044b2 <_malloc_r+0x22>
 800456e:	6025      	str	r5, [r4, #0]
 8004570:	e7de      	b.n	8004530 <_malloc_r+0xa0>
 8004572:	bf00      	nop
 8004574:	200040c8 	.word	0x200040c8

08004578 <iprintf>:
 8004578:	b40f      	push	{r0, r1, r2, r3}
 800457a:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <iprintf+0x2c>)
 800457c:	b513      	push	{r0, r1, r4, lr}
 800457e:	681c      	ldr	r4, [r3, #0]
 8004580:	b124      	cbz	r4, 800458c <iprintf+0x14>
 8004582:	69a3      	ldr	r3, [r4, #24]
 8004584:	b913      	cbnz	r3, 800458c <iprintf+0x14>
 8004586:	4620      	mov	r0, r4
 8004588:	f7ff fe86 	bl	8004298 <__sinit>
 800458c:	ab05      	add	r3, sp, #20
 800458e:	9a04      	ldr	r2, [sp, #16]
 8004590:	68a1      	ldr	r1, [r4, #8]
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	4620      	mov	r0, r4
 8004596:	f000 fa3d 	bl	8004a14 <_vfiprintf_r>
 800459a:	b002      	add	sp, #8
 800459c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a0:	b004      	add	sp, #16
 80045a2:	4770      	bx	lr
 80045a4:	20000010 	.word	0x20000010

080045a8 <cleanup_glue>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	460c      	mov	r4, r1
 80045ac:	6809      	ldr	r1, [r1, #0]
 80045ae:	4605      	mov	r5, r0
 80045b0:	b109      	cbz	r1, 80045b6 <cleanup_glue+0xe>
 80045b2:	f7ff fff9 	bl	80045a8 <cleanup_glue>
 80045b6:	4621      	mov	r1, r4
 80045b8:	4628      	mov	r0, r5
 80045ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045be:	f000 b9b3 	b.w	8004928 <_free_r>
	...

080045c4 <_reclaim_reent>:
 80045c4:	4b2c      	ldr	r3, [pc, #176]	; (8004678 <_reclaim_reent+0xb4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4283      	cmp	r3, r0
 80045ca:	b570      	push	{r4, r5, r6, lr}
 80045cc:	4604      	mov	r4, r0
 80045ce:	d051      	beq.n	8004674 <_reclaim_reent+0xb0>
 80045d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045d2:	b143      	cbz	r3, 80045e6 <_reclaim_reent+0x22>
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d14a      	bne.n	8004670 <_reclaim_reent+0xac>
 80045da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045dc:	6819      	ldr	r1, [r3, #0]
 80045de:	b111      	cbz	r1, 80045e6 <_reclaim_reent+0x22>
 80045e0:	4620      	mov	r0, r4
 80045e2:	f000 f9a1 	bl	8004928 <_free_r>
 80045e6:	6961      	ldr	r1, [r4, #20]
 80045e8:	b111      	cbz	r1, 80045f0 <_reclaim_reent+0x2c>
 80045ea:	4620      	mov	r0, r4
 80045ec:	f000 f99c 	bl	8004928 <_free_r>
 80045f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80045f2:	b111      	cbz	r1, 80045fa <_reclaim_reent+0x36>
 80045f4:	4620      	mov	r0, r4
 80045f6:	f000 f997 	bl	8004928 <_free_r>
 80045fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80045fc:	b111      	cbz	r1, 8004604 <_reclaim_reent+0x40>
 80045fe:	4620      	mov	r0, r4
 8004600:	f000 f992 	bl	8004928 <_free_r>
 8004604:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004606:	b111      	cbz	r1, 800460e <_reclaim_reent+0x4a>
 8004608:	4620      	mov	r0, r4
 800460a:	f000 f98d 	bl	8004928 <_free_r>
 800460e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004610:	b111      	cbz	r1, 8004618 <_reclaim_reent+0x54>
 8004612:	4620      	mov	r0, r4
 8004614:	f000 f988 	bl	8004928 <_free_r>
 8004618:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800461a:	b111      	cbz	r1, 8004622 <_reclaim_reent+0x5e>
 800461c:	4620      	mov	r0, r4
 800461e:	f000 f983 	bl	8004928 <_free_r>
 8004622:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004624:	b111      	cbz	r1, 800462c <_reclaim_reent+0x68>
 8004626:	4620      	mov	r0, r4
 8004628:	f000 f97e 	bl	8004928 <_free_r>
 800462c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800462e:	b111      	cbz	r1, 8004636 <_reclaim_reent+0x72>
 8004630:	4620      	mov	r0, r4
 8004632:	f000 f979 	bl	8004928 <_free_r>
 8004636:	69a3      	ldr	r3, [r4, #24]
 8004638:	b1e3      	cbz	r3, 8004674 <_reclaim_reent+0xb0>
 800463a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800463c:	4620      	mov	r0, r4
 800463e:	4798      	blx	r3
 8004640:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004642:	b1b9      	cbz	r1, 8004674 <_reclaim_reent+0xb0>
 8004644:	4620      	mov	r0, r4
 8004646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800464a:	f7ff bfad 	b.w	80045a8 <cleanup_glue>
 800464e:	5949      	ldr	r1, [r1, r5]
 8004650:	b941      	cbnz	r1, 8004664 <_reclaim_reent+0xa0>
 8004652:	3504      	adds	r5, #4
 8004654:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004656:	2d80      	cmp	r5, #128	; 0x80
 8004658:	68d9      	ldr	r1, [r3, #12]
 800465a:	d1f8      	bne.n	800464e <_reclaim_reent+0x8a>
 800465c:	4620      	mov	r0, r4
 800465e:	f000 f963 	bl	8004928 <_free_r>
 8004662:	e7ba      	b.n	80045da <_reclaim_reent+0x16>
 8004664:	680e      	ldr	r6, [r1, #0]
 8004666:	4620      	mov	r0, r4
 8004668:	f000 f95e 	bl	8004928 <_free_r>
 800466c:	4631      	mov	r1, r6
 800466e:	e7ef      	b.n	8004650 <_reclaim_reent+0x8c>
 8004670:	2500      	movs	r5, #0
 8004672:	e7ef      	b.n	8004654 <_reclaim_reent+0x90>
 8004674:	bd70      	pop	{r4, r5, r6, pc}
 8004676:	bf00      	nop
 8004678:	20000010 	.word	0x20000010

0800467c <_sbrk_r>:
 800467c:	b538      	push	{r3, r4, r5, lr}
 800467e:	4d06      	ldr	r5, [pc, #24]	; (8004698 <_sbrk_r+0x1c>)
 8004680:	2300      	movs	r3, #0
 8004682:	4604      	mov	r4, r0
 8004684:	4608      	mov	r0, r1
 8004686:	602b      	str	r3, [r5, #0]
 8004688:	f7fc fa96 	bl	8000bb8 <_sbrk>
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d102      	bne.n	8004696 <_sbrk_r+0x1a>
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	b103      	cbz	r3, 8004696 <_sbrk_r+0x1a>
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	bd38      	pop	{r3, r4, r5, pc}
 8004698:	200040d0 	.word	0x200040d0

0800469c <__sread>:
 800469c:	b510      	push	{r4, lr}
 800469e:	460c      	mov	r4, r1
 80046a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a4:	f000 fc7a 	bl	8004f9c <_read_r>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	bfab      	itete	ge
 80046ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046ae:	89a3      	ldrhlt	r3, [r4, #12]
 80046b0:	181b      	addge	r3, r3, r0
 80046b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046b6:	bfac      	ite	ge
 80046b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80046ba:	81a3      	strhlt	r3, [r4, #12]
 80046bc:	bd10      	pop	{r4, pc}

080046be <__swrite>:
 80046be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c2:	461f      	mov	r7, r3
 80046c4:	898b      	ldrh	r3, [r1, #12]
 80046c6:	05db      	lsls	r3, r3, #23
 80046c8:	4605      	mov	r5, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	4616      	mov	r6, r2
 80046ce:	d505      	bpl.n	80046dc <__swrite+0x1e>
 80046d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d4:	2302      	movs	r3, #2
 80046d6:	2200      	movs	r2, #0
 80046d8:	f000 f908 	bl	80048ec <_lseek_r>
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e6:	81a3      	strh	r3, [r4, #12]
 80046e8:	4632      	mov	r2, r6
 80046ea:	463b      	mov	r3, r7
 80046ec:	4628      	mov	r0, r5
 80046ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046f2:	f000 b817 	b.w	8004724 <_write_r>

080046f6 <__sseek>:
 80046f6:	b510      	push	{r4, lr}
 80046f8:	460c      	mov	r4, r1
 80046fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046fe:	f000 f8f5 	bl	80048ec <_lseek_r>
 8004702:	1c43      	adds	r3, r0, #1
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	bf15      	itete	ne
 8004708:	6560      	strne	r0, [r4, #84]	; 0x54
 800470a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800470e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004712:	81a3      	strheq	r3, [r4, #12]
 8004714:	bf18      	it	ne
 8004716:	81a3      	strhne	r3, [r4, #12]
 8004718:	bd10      	pop	{r4, pc}

0800471a <__sclose>:
 800471a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800471e:	f000 b813 	b.w	8004748 <_close_r>
	...

08004724 <_write_r>:
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4d07      	ldr	r5, [pc, #28]	; (8004744 <_write_r+0x20>)
 8004728:	4604      	mov	r4, r0
 800472a:	4608      	mov	r0, r1
 800472c:	4611      	mov	r1, r2
 800472e:	2200      	movs	r2, #0
 8004730:	602a      	str	r2, [r5, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	f7fc f9f0 	bl	8000b18 <_write>
 8004738:	1c43      	adds	r3, r0, #1
 800473a:	d102      	bne.n	8004742 <_write_r+0x1e>
 800473c:	682b      	ldr	r3, [r5, #0]
 800473e:	b103      	cbz	r3, 8004742 <_write_r+0x1e>
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	bd38      	pop	{r3, r4, r5, pc}
 8004744:	200040d0 	.word	0x200040d0

08004748 <_close_r>:
 8004748:	b538      	push	{r3, r4, r5, lr}
 800474a:	4d06      	ldr	r5, [pc, #24]	; (8004764 <_close_r+0x1c>)
 800474c:	2300      	movs	r3, #0
 800474e:	4604      	mov	r4, r0
 8004750:	4608      	mov	r0, r1
 8004752:	602b      	str	r3, [r5, #0]
 8004754:	f7fc f9fc 	bl	8000b50 <_close>
 8004758:	1c43      	adds	r3, r0, #1
 800475a:	d102      	bne.n	8004762 <_close_r+0x1a>
 800475c:	682b      	ldr	r3, [r5, #0]
 800475e:	b103      	cbz	r3, 8004762 <_close_r+0x1a>
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	bd38      	pop	{r3, r4, r5, pc}
 8004764:	200040d0 	.word	0x200040d0

08004768 <__sflush_r>:
 8004768:	898a      	ldrh	r2, [r1, #12]
 800476a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800476e:	4605      	mov	r5, r0
 8004770:	0710      	lsls	r0, r2, #28
 8004772:	460c      	mov	r4, r1
 8004774:	d458      	bmi.n	8004828 <__sflush_r+0xc0>
 8004776:	684b      	ldr	r3, [r1, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	dc05      	bgt.n	8004788 <__sflush_r+0x20>
 800477c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	dc02      	bgt.n	8004788 <__sflush_r+0x20>
 8004782:	2000      	movs	r0, #0
 8004784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800478a:	2e00      	cmp	r6, #0
 800478c:	d0f9      	beq.n	8004782 <__sflush_r+0x1a>
 800478e:	2300      	movs	r3, #0
 8004790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004794:	682f      	ldr	r7, [r5, #0]
 8004796:	602b      	str	r3, [r5, #0]
 8004798:	d032      	beq.n	8004800 <__sflush_r+0x98>
 800479a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	075a      	lsls	r2, r3, #29
 80047a0:	d505      	bpl.n	80047ae <__sflush_r+0x46>
 80047a2:	6863      	ldr	r3, [r4, #4]
 80047a4:	1ac0      	subs	r0, r0, r3
 80047a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047a8:	b10b      	cbz	r3, 80047ae <__sflush_r+0x46>
 80047aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047ac:	1ac0      	subs	r0, r0, r3
 80047ae:	2300      	movs	r3, #0
 80047b0:	4602      	mov	r2, r0
 80047b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047b4:	6a21      	ldr	r1, [r4, #32]
 80047b6:	4628      	mov	r0, r5
 80047b8:	47b0      	blx	r6
 80047ba:	1c43      	adds	r3, r0, #1
 80047bc:	89a3      	ldrh	r3, [r4, #12]
 80047be:	d106      	bne.n	80047ce <__sflush_r+0x66>
 80047c0:	6829      	ldr	r1, [r5, #0]
 80047c2:	291d      	cmp	r1, #29
 80047c4:	d82c      	bhi.n	8004820 <__sflush_r+0xb8>
 80047c6:	4a2a      	ldr	r2, [pc, #168]	; (8004870 <__sflush_r+0x108>)
 80047c8:	40ca      	lsrs	r2, r1
 80047ca:	07d6      	lsls	r6, r2, #31
 80047cc:	d528      	bpl.n	8004820 <__sflush_r+0xb8>
 80047ce:	2200      	movs	r2, #0
 80047d0:	6062      	str	r2, [r4, #4]
 80047d2:	04d9      	lsls	r1, r3, #19
 80047d4:	6922      	ldr	r2, [r4, #16]
 80047d6:	6022      	str	r2, [r4, #0]
 80047d8:	d504      	bpl.n	80047e4 <__sflush_r+0x7c>
 80047da:	1c42      	adds	r2, r0, #1
 80047dc:	d101      	bne.n	80047e2 <__sflush_r+0x7a>
 80047de:	682b      	ldr	r3, [r5, #0]
 80047e0:	b903      	cbnz	r3, 80047e4 <__sflush_r+0x7c>
 80047e2:	6560      	str	r0, [r4, #84]	; 0x54
 80047e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047e6:	602f      	str	r7, [r5, #0]
 80047e8:	2900      	cmp	r1, #0
 80047ea:	d0ca      	beq.n	8004782 <__sflush_r+0x1a>
 80047ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047f0:	4299      	cmp	r1, r3
 80047f2:	d002      	beq.n	80047fa <__sflush_r+0x92>
 80047f4:	4628      	mov	r0, r5
 80047f6:	f000 f897 	bl	8004928 <_free_r>
 80047fa:	2000      	movs	r0, #0
 80047fc:	6360      	str	r0, [r4, #52]	; 0x34
 80047fe:	e7c1      	b.n	8004784 <__sflush_r+0x1c>
 8004800:	6a21      	ldr	r1, [r4, #32]
 8004802:	2301      	movs	r3, #1
 8004804:	4628      	mov	r0, r5
 8004806:	47b0      	blx	r6
 8004808:	1c41      	adds	r1, r0, #1
 800480a:	d1c7      	bne.n	800479c <__sflush_r+0x34>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0c4      	beq.n	800479c <__sflush_r+0x34>
 8004812:	2b1d      	cmp	r3, #29
 8004814:	d001      	beq.n	800481a <__sflush_r+0xb2>
 8004816:	2b16      	cmp	r3, #22
 8004818:	d101      	bne.n	800481e <__sflush_r+0xb6>
 800481a:	602f      	str	r7, [r5, #0]
 800481c:	e7b1      	b.n	8004782 <__sflush_r+0x1a>
 800481e:	89a3      	ldrh	r3, [r4, #12]
 8004820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004824:	81a3      	strh	r3, [r4, #12]
 8004826:	e7ad      	b.n	8004784 <__sflush_r+0x1c>
 8004828:	690f      	ldr	r7, [r1, #16]
 800482a:	2f00      	cmp	r7, #0
 800482c:	d0a9      	beq.n	8004782 <__sflush_r+0x1a>
 800482e:	0793      	lsls	r3, r2, #30
 8004830:	680e      	ldr	r6, [r1, #0]
 8004832:	bf08      	it	eq
 8004834:	694b      	ldreq	r3, [r1, #20]
 8004836:	600f      	str	r7, [r1, #0]
 8004838:	bf18      	it	ne
 800483a:	2300      	movne	r3, #0
 800483c:	eba6 0807 	sub.w	r8, r6, r7
 8004840:	608b      	str	r3, [r1, #8]
 8004842:	f1b8 0f00 	cmp.w	r8, #0
 8004846:	dd9c      	ble.n	8004782 <__sflush_r+0x1a>
 8004848:	6a21      	ldr	r1, [r4, #32]
 800484a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800484c:	4643      	mov	r3, r8
 800484e:	463a      	mov	r2, r7
 8004850:	4628      	mov	r0, r5
 8004852:	47b0      	blx	r6
 8004854:	2800      	cmp	r0, #0
 8004856:	dc06      	bgt.n	8004866 <__sflush_r+0xfe>
 8004858:	89a3      	ldrh	r3, [r4, #12]
 800485a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800485e:	81a3      	strh	r3, [r4, #12]
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	e78e      	b.n	8004784 <__sflush_r+0x1c>
 8004866:	4407      	add	r7, r0
 8004868:	eba8 0800 	sub.w	r8, r8, r0
 800486c:	e7e9      	b.n	8004842 <__sflush_r+0xda>
 800486e:	bf00      	nop
 8004870:	20400001 	.word	0x20400001

08004874 <_fflush_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	690b      	ldr	r3, [r1, #16]
 8004878:	4605      	mov	r5, r0
 800487a:	460c      	mov	r4, r1
 800487c:	b913      	cbnz	r3, 8004884 <_fflush_r+0x10>
 800487e:	2500      	movs	r5, #0
 8004880:	4628      	mov	r0, r5
 8004882:	bd38      	pop	{r3, r4, r5, pc}
 8004884:	b118      	cbz	r0, 800488e <_fflush_r+0x1a>
 8004886:	6983      	ldr	r3, [r0, #24]
 8004888:	b90b      	cbnz	r3, 800488e <_fflush_r+0x1a>
 800488a:	f7ff fd05 	bl	8004298 <__sinit>
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <_fflush_r+0x6c>)
 8004890:	429c      	cmp	r4, r3
 8004892:	d11b      	bne.n	80048cc <_fflush_r+0x58>
 8004894:	686c      	ldr	r4, [r5, #4]
 8004896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0ef      	beq.n	800487e <_fflush_r+0xa>
 800489e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048a0:	07d0      	lsls	r0, r2, #31
 80048a2:	d404      	bmi.n	80048ae <_fflush_r+0x3a>
 80048a4:	0599      	lsls	r1, r3, #22
 80048a6:	d402      	bmi.n	80048ae <_fflush_r+0x3a>
 80048a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048aa:	f7ff fdb8 	bl	800441e <__retarget_lock_acquire_recursive>
 80048ae:	4628      	mov	r0, r5
 80048b0:	4621      	mov	r1, r4
 80048b2:	f7ff ff59 	bl	8004768 <__sflush_r>
 80048b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048b8:	07da      	lsls	r2, r3, #31
 80048ba:	4605      	mov	r5, r0
 80048bc:	d4e0      	bmi.n	8004880 <_fflush_r+0xc>
 80048be:	89a3      	ldrh	r3, [r4, #12]
 80048c0:	059b      	lsls	r3, r3, #22
 80048c2:	d4dd      	bmi.n	8004880 <_fflush_r+0xc>
 80048c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048c6:	f7ff fdab 	bl	8004420 <__retarget_lock_release_recursive>
 80048ca:	e7d9      	b.n	8004880 <_fflush_r+0xc>
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <_fflush_r+0x70>)
 80048ce:	429c      	cmp	r4, r3
 80048d0:	d101      	bne.n	80048d6 <_fflush_r+0x62>
 80048d2:	68ac      	ldr	r4, [r5, #8]
 80048d4:	e7df      	b.n	8004896 <_fflush_r+0x22>
 80048d6:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <_fflush_r+0x74>)
 80048d8:	429c      	cmp	r4, r3
 80048da:	bf08      	it	eq
 80048dc:	68ec      	ldreq	r4, [r5, #12]
 80048de:	e7da      	b.n	8004896 <_fflush_r+0x22>
 80048e0:	0800536c 	.word	0x0800536c
 80048e4:	0800538c 	.word	0x0800538c
 80048e8:	0800534c 	.word	0x0800534c

080048ec <_lseek_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4d07      	ldr	r5, [pc, #28]	; (800490c <_lseek_r+0x20>)
 80048f0:	4604      	mov	r4, r0
 80048f2:	4608      	mov	r0, r1
 80048f4:	4611      	mov	r1, r2
 80048f6:	2200      	movs	r2, #0
 80048f8:	602a      	str	r2, [r5, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f7fc f94f 	bl	8000b9e <_lseek>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_lseek_r+0x1e>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	b103      	cbz	r3, 800490a <_lseek_r+0x1e>
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	200040d0 	.word	0x200040d0

08004910 <__malloc_lock>:
 8004910:	4801      	ldr	r0, [pc, #4]	; (8004918 <__malloc_lock+0x8>)
 8004912:	f7ff bd84 	b.w	800441e <__retarget_lock_acquire_recursive>
 8004916:	bf00      	nop
 8004918:	200040c4 	.word	0x200040c4

0800491c <__malloc_unlock>:
 800491c:	4801      	ldr	r0, [pc, #4]	; (8004924 <__malloc_unlock+0x8>)
 800491e:	f7ff bd7f 	b.w	8004420 <__retarget_lock_release_recursive>
 8004922:	bf00      	nop
 8004924:	200040c4 	.word	0x200040c4

08004928 <_free_r>:
 8004928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800492a:	2900      	cmp	r1, #0
 800492c:	d044      	beq.n	80049b8 <_free_r+0x90>
 800492e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004932:	9001      	str	r0, [sp, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f1a1 0404 	sub.w	r4, r1, #4
 800493a:	bfb8      	it	lt
 800493c:	18e4      	addlt	r4, r4, r3
 800493e:	f7ff ffe7 	bl	8004910 <__malloc_lock>
 8004942:	4a1e      	ldr	r2, [pc, #120]	; (80049bc <_free_r+0x94>)
 8004944:	9801      	ldr	r0, [sp, #4]
 8004946:	6813      	ldr	r3, [r2, #0]
 8004948:	b933      	cbnz	r3, 8004958 <_free_r+0x30>
 800494a:	6063      	str	r3, [r4, #4]
 800494c:	6014      	str	r4, [r2, #0]
 800494e:	b003      	add	sp, #12
 8004950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004954:	f7ff bfe2 	b.w	800491c <__malloc_unlock>
 8004958:	42a3      	cmp	r3, r4
 800495a:	d908      	bls.n	800496e <_free_r+0x46>
 800495c:	6825      	ldr	r5, [r4, #0]
 800495e:	1961      	adds	r1, r4, r5
 8004960:	428b      	cmp	r3, r1
 8004962:	bf01      	itttt	eq
 8004964:	6819      	ldreq	r1, [r3, #0]
 8004966:	685b      	ldreq	r3, [r3, #4]
 8004968:	1949      	addeq	r1, r1, r5
 800496a:	6021      	streq	r1, [r4, #0]
 800496c:	e7ed      	b.n	800494a <_free_r+0x22>
 800496e:	461a      	mov	r2, r3
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	b10b      	cbz	r3, 8004978 <_free_r+0x50>
 8004974:	42a3      	cmp	r3, r4
 8004976:	d9fa      	bls.n	800496e <_free_r+0x46>
 8004978:	6811      	ldr	r1, [r2, #0]
 800497a:	1855      	adds	r5, r2, r1
 800497c:	42a5      	cmp	r5, r4
 800497e:	d10b      	bne.n	8004998 <_free_r+0x70>
 8004980:	6824      	ldr	r4, [r4, #0]
 8004982:	4421      	add	r1, r4
 8004984:	1854      	adds	r4, r2, r1
 8004986:	42a3      	cmp	r3, r4
 8004988:	6011      	str	r1, [r2, #0]
 800498a:	d1e0      	bne.n	800494e <_free_r+0x26>
 800498c:	681c      	ldr	r4, [r3, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	6053      	str	r3, [r2, #4]
 8004992:	4421      	add	r1, r4
 8004994:	6011      	str	r1, [r2, #0]
 8004996:	e7da      	b.n	800494e <_free_r+0x26>
 8004998:	d902      	bls.n	80049a0 <_free_r+0x78>
 800499a:	230c      	movs	r3, #12
 800499c:	6003      	str	r3, [r0, #0]
 800499e:	e7d6      	b.n	800494e <_free_r+0x26>
 80049a0:	6825      	ldr	r5, [r4, #0]
 80049a2:	1961      	adds	r1, r4, r5
 80049a4:	428b      	cmp	r3, r1
 80049a6:	bf04      	itt	eq
 80049a8:	6819      	ldreq	r1, [r3, #0]
 80049aa:	685b      	ldreq	r3, [r3, #4]
 80049ac:	6063      	str	r3, [r4, #4]
 80049ae:	bf04      	itt	eq
 80049b0:	1949      	addeq	r1, r1, r5
 80049b2:	6021      	streq	r1, [r4, #0]
 80049b4:	6054      	str	r4, [r2, #4]
 80049b6:	e7ca      	b.n	800494e <_free_r+0x26>
 80049b8:	b003      	add	sp, #12
 80049ba:	bd30      	pop	{r4, r5, pc}
 80049bc:	200040c8 	.word	0x200040c8

080049c0 <__sfputc_r>:
 80049c0:	6893      	ldr	r3, [r2, #8]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	b410      	push	{r4}
 80049c8:	6093      	str	r3, [r2, #8]
 80049ca:	da08      	bge.n	80049de <__sfputc_r+0x1e>
 80049cc:	6994      	ldr	r4, [r2, #24]
 80049ce:	42a3      	cmp	r3, r4
 80049d0:	db01      	blt.n	80049d6 <__sfputc_r+0x16>
 80049d2:	290a      	cmp	r1, #10
 80049d4:	d103      	bne.n	80049de <__sfputc_r+0x1e>
 80049d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049da:	f000 baf1 	b.w	8004fc0 <__swbuf_r>
 80049de:	6813      	ldr	r3, [r2, #0]
 80049e0:	1c58      	adds	r0, r3, #1
 80049e2:	6010      	str	r0, [r2, #0]
 80049e4:	7019      	strb	r1, [r3, #0]
 80049e6:	4608      	mov	r0, r1
 80049e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <__sfputs_r>:
 80049ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f0:	4606      	mov	r6, r0
 80049f2:	460f      	mov	r7, r1
 80049f4:	4614      	mov	r4, r2
 80049f6:	18d5      	adds	r5, r2, r3
 80049f8:	42ac      	cmp	r4, r5
 80049fa:	d101      	bne.n	8004a00 <__sfputs_r+0x12>
 80049fc:	2000      	movs	r0, #0
 80049fe:	e007      	b.n	8004a10 <__sfputs_r+0x22>
 8004a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a04:	463a      	mov	r2, r7
 8004a06:	4630      	mov	r0, r6
 8004a08:	f7ff ffda 	bl	80049c0 <__sfputc_r>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d1f3      	bne.n	80049f8 <__sfputs_r+0xa>
 8004a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a14 <_vfiprintf_r>:
 8004a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a18:	460d      	mov	r5, r1
 8004a1a:	b09d      	sub	sp, #116	; 0x74
 8004a1c:	4614      	mov	r4, r2
 8004a1e:	4698      	mov	r8, r3
 8004a20:	4606      	mov	r6, r0
 8004a22:	b118      	cbz	r0, 8004a2c <_vfiprintf_r+0x18>
 8004a24:	6983      	ldr	r3, [r0, #24]
 8004a26:	b90b      	cbnz	r3, 8004a2c <_vfiprintf_r+0x18>
 8004a28:	f7ff fc36 	bl	8004298 <__sinit>
 8004a2c:	4b89      	ldr	r3, [pc, #548]	; (8004c54 <_vfiprintf_r+0x240>)
 8004a2e:	429d      	cmp	r5, r3
 8004a30:	d11b      	bne.n	8004a6a <_vfiprintf_r+0x56>
 8004a32:	6875      	ldr	r5, [r6, #4]
 8004a34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a36:	07d9      	lsls	r1, r3, #31
 8004a38:	d405      	bmi.n	8004a46 <_vfiprintf_r+0x32>
 8004a3a:	89ab      	ldrh	r3, [r5, #12]
 8004a3c:	059a      	lsls	r2, r3, #22
 8004a3e:	d402      	bmi.n	8004a46 <_vfiprintf_r+0x32>
 8004a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a42:	f7ff fcec 	bl	800441e <__retarget_lock_acquire_recursive>
 8004a46:	89ab      	ldrh	r3, [r5, #12]
 8004a48:	071b      	lsls	r3, r3, #28
 8004a4a:	d501      	bpl.n	8004a50 <_vfiprintf_r+0x3c>
 8004a4c:	692b      	ldr	r3, [r5, #16]
 8004a4e:	b9eb      	cbnz	r3, 8004a8c <_vfiprintf_r+0x78>
 8004a50:	4629      	mov	r1, r5
 8004a52:	4630      	mov	r0, r6
 8004a54:	f000 fb06 	bl	8005064 <__swsetup_r>
 8004a58:	b1c0      	cbz	r0, 8004a8c <_vfiprintf_r+0x78>
 8004a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a5c:	07dc      	lsls	r4, r3, #31
 8004a5e:	d50e      	bpl.n	8004a7e <_vfiprintf_r+0x6a>
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	b01d      	add	sp, #116	; 0x74
 8004a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6a:	4b7b      	ldr	r3, [pc, #492]	; (8004c58 <_vfiprintf_r+0x244>)
 8004a6c:	429d      	cmp	r5, r3
 8004a6e:	d101      	bne.n	8004a74 <_vfiprintf_r+0x60>
 8004a70:	68b5      	ldr	r5, [r6, #8]
 8004a72:	e7df      	b.n	8004a34 <_vfiprintf_r+0x20>
 8004a74:	4b79      	ldr	r3, [pc, #484]	; (8004c5c <_vfiprintf_r+0x248>)
 8004a76:	429d      	cmp	r5, r3
 8004a78:	bf08      	it	eq
 8004a7a:	68f5      	ldreq	r5, [r6, #12]
 8004a7c:	e7da      	b.n	8004a34 <_vfiprintf_r+0x20>
 8004a7e:	89ab      	ldrh	r3, [r5, #12]
 8004a80:	0598      	lsls	r0, r3, #22
 8004a82:	d4ed      	bmi.n	8004a60 <_vfiprintf_r+0x4c>
 8004a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a86:	f7ff fccb 	bl	8004420 <__retarget_lock_release_recursive>
 8004a8a:	e7e9      	b.n	8004a60 <_vfiprintf_r+0x4c>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a90:	2320      	movs	r3, #32
 8004a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a96:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a9a:	2330      	movs	r3, #48	; 0x30
 8004a9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c60 <_vfiprintf_r+0x24c>
 8004aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aa4:	f04f 0901 	mov.w	r9, #1
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	469a      	mov	sl, r3
 8004aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ab0:	b10a      	cbz	r2, 8004ab6 <_vfiprintf_r+0xa2>
 8004ab2:	2a25      	cmp	r2, #37	; 0x25
 8004ab4:	d1f9      	bne.n	8004aaa <_vfiprintf_r+0x96>
 8004ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8004aba:	d00b      	beq.n	8004ad4 <_vfiprintf_r+0xc0>
 8004abc:	465b      	mov	r3, fp
 8004abe:	4622      	mov	r2, r4
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f7ff ff93 	bl	80049ee <__sfputs_r>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	f000 80aa 	beq.w	8004c22 <_vfiprintf_r+0x20e>
 8004ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ad0:	445a      	add	r2, fp
 8004ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8004ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80a2 	beq.w	8004c22 <_vfiprintf_r+0x20e>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ae8:	f10a 0a01 	add.w	sl, sl, #1
 8004aec:	9304      	str	r3, [sp, #16]
 8004aee:	9307      	str	r3, [sp, #28]
 8004af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004af4:	931a      	str	r3, [sp, #104]	; 0x68
 8004af6:	4654      	mov	r4, sl
 8004af8:	2205      	movs	r2, #5
 8004afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afe:	4858      	ldr	r0, [pc, #352]	; (8004c60 <_vfiprintf_r+0x24c>)
 8004b00:	f7fb fb66 	bl	80001d0 <memchr>
 8004b04:	9a04      	ldr	r2, [sp, #16]
 8004b06:	b9d8      	cbnz	r0, 8004b40 <_vfiprintf_r+0x12c>
 8004b08:	06d1      	lsls	r1, r2, #27
 8004b0a:	bf44      	itt	mi
 8004b0c:	2320      	movmi	r3, #32
 8004b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b12:	0713      	lsls	r3, r2, #28
 8004b14:	bf44      	itt	mi
 8004b16:	232b      	movmi	r3, #43	; 0x2b
 8004b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b20:	2b2a      	cmp	r3, #42	; 0x2a
 8004b22:	d015      	beq.n	8004b50 <_vfiprintf_r+0x13c>
 8004b24:	9a07      	ldr	r2, [sp, #28]
 8004b26:	4654      	mov	r4, sl
 8004b28:	2000      	movs	r0, #0
 8004b2a:	f04f 0c0a 	mov.w	ip, #10
 8004b2e:	4621      	mov	r1, r4
 8004b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b34:	3b30      	subs	r3, #48	; 0x30
 8004b36:	2b09      	cmp	r3, #9
 8004b38:	d94e      	bls.n	8004bd8 <_vfiprintf_r+0x1c4>
 8004b3a:	b1b0      	cbz	r0, 8004b6a <_vfiprintf_r+0x156>
 8004b3c:	9207      	str	r2, [sp, #28]
 8004b3e:	e014      	b.n	8004b6a <_vfiprintf_r+0x156>
 8004b40:	eba0 0308 	sub.w	r3, r0, r8
 8004b44:	fa09 f303 	lsl.w	r3, r9, r3
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	9304      	str	r3, [sp, #16]
 8004b4c:	46a2      	mov	sl, r4
 8004b4e:	e7d2      	b.n	8004af6 <_vfiprintf_r+0xe2>
 8004b50:	9b03      	ldr	r3, [sp, #12]
 8004b52:	1d19      	adds	r1, r3, #4
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	9103      	str	r1, [sp, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bfbb      	ittet	lt
 8004b5c:	425b      	neglt	r3, r3
 8004b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8004b62:	9307      	strge	r3, [sp, #28]
 8004b64:	9307      	strlt	r3, [sp, #28]
 8004b66:	bfb8      	it	lt
 8004b68:	9204      	strlt	r2, [sp, #16]
 8004b6a:	7823      	ldrb	r3, [r4, #0]
 8004b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b6e:	d10c      	bne.n	8004b8a <_vfiprintf_r+0x176>
 8004b70:	7863      	ldrb	r3, [r4, #1]
 8004b72:	2b2a      	cmp	r3, #42	; 0x2a
 8004b74:	d135      	bne.n	8004be2 <_vfiprintf_r+0x1ce>
 8004b76:	9b03      	ldr	r3, [sp, #12]
 8004b78:	1d1a      	adds	r2, r3, #4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	9203      	str	r2, [sp, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bfb8      	it	lt
 8004b82:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b86:	3402      	adds	r4, #2
 8004b88:	9305      	str	r3, [sp, #20]
 8004b8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c70 <_vfiprintf_r+0x25c>
 8004b8e:	7821      	ldrb	r1, [r4, #0]
 8004b90:	2203      	movs	r2, #3
 8004b92:	4650      	mov	r0, sl
 8004b94:	f7fb fb1c 	bl	80001d0 <memchr>
 8004b98:	b140      	cbz	r0, 8004bac <_vfiprintf_r+0x198>
 8004b9a:	2340      	movs	r3, #64	; 0x40
 8004b9c:	eba0 000a 	sub.w	r0, r0, sl
 8004ba0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ba4:	9b04      	ldr	r3, [sp, #16]
 8004ba6:	4303      	orrs	r3, r0
 8004ba8:	3401      	adds	r4, #1
 8004baa:	9304      	str	r3, [sp, #16]
 8004bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bb0:	482c      	ldr	r0, [pc, #176]	; (8004c64 <_vfiprintf_r+0x250>)
 8004bb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bb6:	2206      	movs	r2, #6
 8004bb8:	f7fb fb0a 	bl	80001d0 <memchr>
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d03f      	beq.n	8004c40 <_vfiprintf_r+0x22c>
 8004bc0:	4b29      	ldr	r3, [pc, #164]	; (8004c68 <_vfiprintf_r+0x254>)
 8004bc2:	bb1b      	cbnz	r3, 8004c0c <_vfiprintf_r+0x1f8>
 8004bc4:	9b03      	ldr	r3, [sp, #12]
 8004bc6:	3307      	adds	r3, #7
 8004bc8:	f023 0307 	bic.w	r3, r3, #7
 8004bcc:	3308      	adds	r3, #8
 8004bce:	9303      	str	r3, [sp, #12]
 8004bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd2:	443b      	add	r3, r7
 8004bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8004bd6:	e767      	b.n	8004aa8 <_vfiprintf_r+0x94>
 8004bd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bdc:	460c      	mov	r4, r1
 8004bde:	2001      	movs	r0, #1
 8004be0:	e7a5      	b.n	8004b2e <_vfiprintf_r+0x11a>
 8004be2:	2300      	movs	r3, #0
 8004be4:	3401      	adds	r4, #1
 8004be6:	9305      	str	r3, [sp, #20]
 8004be8:	4619      	mov	r1, r3
 8004bea:	f04f 0c0a 	mov.w	ip, #10
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bf4:	3a30      	subs	r2, #48	; 0x30
 8004bf6:	2a09      	cmp	r2, #9
 8004bf8:	d903      	bls.n	8004c02 <_vfiprintf_r+0x1ee>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0c5      	beq.n	8004b8a <_vfiprintf_r+0x176>
 8004bfe:	9105      	str	r1, [sp, #20]
 8004c00:	e7c3      	b.n	8004b8a <_vfiprintf_r+0x176>
 8004c02:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c06:	4604      	mov	r4, r0
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e7f0      	b.n	8004bee <_vfiprintf_r+0x1da>
 8004c0c:	ab03      	add	r3, sp, #12
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	462a      	mov	r2, r5
 8004c12:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <_vfiprintf_r+0x258>)
 8004c14:	a904      	add	r1, sp, #16
 8004c16:	4630      	mov	r0, r6
 8004c18:	f3af 8000 	nop.w
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	1c78      	adds	r0, r7, #1
 8004c20:	d1d6      	bne.n	8004bd0 <_vfiprintf_r+0x1bc>
 8004c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c24:	07d9      	lsls	r1, r3, #31
 8004c26:	d405      	bmi.n	8004c34 <_vfiprintf_r+0x220>
 8004c28:	89ab      	ldrh	r3, [r5, #12]
 8004c2a:	059a      	lsls	r2, r3, #22
 8004c2c:	d402      	bmi.n	8004c34 <_vfiprintf_r+0x220>
 8004c2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c30:	f7ff fbf6 	bl	8004420 <__retarget_lock_release_recursive>
 8004c34:	89ab      	ldrh	r3, [r5, #12]
 8004c36:	065b      	lsls	r3, r3, #25
 8004c38:	f53f af12 	bmi.w	8004a60 <_vfiprintf_r+0x4c>
 8004c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c3e:	e711      	b.n	8004a64 <_vfiprintf_r+0x50>
 8004c40:	ab03      	add	r3, sp, #12
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	462a      	mov	r2, r5
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <_vfiprintf_r+0x258>)
 8004c48:	a904      	add	r1, sp, #16
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f000 f880 	bl	8004d50 <_printf_i>
 8004c50:	e7e4      	b.n	8004c1c <_vfiprintf_r+0x208>
 8004c52:	bf00      	nop
 8004c54:	0800536c 	.word	0x0800536c
 8004c58:	0800538c 	.word	0x0800538c
 8004c5c:	0800534c 	.word	0x0800534c
 8004c60:	080053b0 	.word	0x080053b0
 8004c64:	080053ba 	.word	0x080053ba
 8004c68:	00000000 	.word	0x00000000
 8004c6c:	080049ef 	.word	0x080049ef
 8004c70:	080053b6 	.word	0x080053b6

08004c74 <_printf_common>:
 8004c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c78:	4616      	mov	r6, r2
 8004c7a:	4699      	mov	r9, r3
 8004c7c:	688a      	ldr	r2, [r1, #8]
 8004c7e:	690b      	ldr	r3, [r1, #16]
 8004c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c84:	4293      	cmp	r3, r2
 8004c86:	bfb8      	it	lt
 8004c88:	4613      	movlt	r3, r2
 8004c8a:	6033      	str	r3, [r6, #0]
 8004c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c90:	4607      	mov	r7, r0
 8004c92:	460c      	mov	r4, r1
 8004c94:	b10a      	cbz	r2, 8004c9a <_printf_common+0x26>
 8004c96:	3301      	adds	r3, #1
 8004c98:	6033      	str	r3, [r6, #0]
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	0699      	lsls	r1, r3, #26
 8004c9e:	bf42      	ittt	mi
 8004ca0:	6833      	ldrmi	r3, [r6, #0]
 8004ca2:	3302      	addmi	r3, #2
 8004ca4:	6033      	strmi	r3, [r6, #0]
 8004ca6:	6825      	ldr	r5, [r4, #0]
 8004ca8:	f015 0506 	ands.w	r5, r5, #6
 8004cac:	d106      	bne.n	8004cbc <_printf_common+0x48>
 8004cae:	f104 0a19 	add.w	sl, r4, #25
 8004cb2:	68e3      	ldr	r3, [r4, #12]
 8004cb4:	6832      	ldr	r2, [r6, #0]
 8004cb6:	1a9b      	subs	r3, r3, r2
 8004cb8:	42ab      	cmp	r3, r5
 8004cba:	dc26      	bgt.n	8004d0a <_printf_common+0x96>
 8004cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cc0:	1e13      	subs	r3, r2, #0
 8004cc2:	6822      	ldr	r2, [r4, #0]
 8004cc4:	bf18      	it	ne
 8004cc6:	2301      	movne	r3, #1
 8004cc8:	0692      	lsls	r2, r2, #26
 8004cca:	d42b      	bmi.n	8004d24 <_printf_common+0xb0>
 8004ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cd0:	4649      	mov	r1, r9
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	47c0      	blx	r8
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d01e      	beq.n	8004d18 <_printf_common+0xa4>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	68e5      	ldr	r5, [r4, #12]
 8004cde:	6832      	ldr	r2, [r6, #0]
 8004ce0:	f003 0306 	and.w	r3, r3, #6
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	bf08      	it	eq
 8004ce8:	1aad      	subeq	r5, r5, r2
 8004cea:	68a3      	ldr	r3, [r4, #8]
 8004cec:	6922      	ldr	r2, [r4, #16]
 8004cee:	bf0c      	ite	eq
 8004cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf4:	2500      	movne	r5, #0
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	bfc4      	itt	gt
 8004cfa:	1a9b      	subgt	r3, r3, r2
 8004cfc:	18ed      	addgt	r5, r5, r3
 8004cfe:	2600      	movs	r6, #0
 8004d00:	341a      	adds	r4, #26
 8004d02:	42b5      	cmp	r5, r6
 8004d04:	d11a      	bne.n	8004d3c <_printf_common+0xc8>
 8004d06:	2000      	movs	r0, #0
 8004d08:	e008      	b.n	8004d1c <_printf_common+0xa8>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	4652      	mov	r2, sl
 8004d0e:	4649      	mov	r1, r9
 8004d10:	4638      	mov	r0, r7
 8004d12:	47c0      	blx	r8
 8004d14:	3001      	adds	r0, #1
 8004d16:	d103      	bne.n	8004d20 <_printf_common+0xac>
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d20:	3501      	adds	r5, #1
 8004d22:	e7c6      	b.n	8004cb2 <_printf_common+0x3e>
 8004d24:	18e1      	adds	r1, r4, r3
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	2030      	movs	r0, #48	; 0x30
 8004d2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d2e:	4422      	add	r2, r4
 8004d30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d38:	3302      	adds	r3, #2
 8004d3a:	e7c7      	b.n	8004ccc <_printf_common+0x58>
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	4622      	mov	r2, r4
 8004d40:	4649      	mov	r1, r9
 8004d42:	4638      	mov	r0, r7
 8004d44:	47c0      	blx	r8
 8004d46:	3001      	adds	r0, #1
 8004d48:	d0e6      	beq.n	8004d18 <_printf_common+0xa4>
 8004d4a:	3601      	adds	r6, #1
 8004d4c:	e7d9      	b.n	8004d02 <_printf_common+0x8e>
	...

08004d50 <_printf_i>:
 8004d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	7e0f      	ldrb	r7, [r1, #24]
 8004d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d58:	2f78      	cmp	r7, #120	; 0x78
 8004d5a:	4691      	mov	r9, r2
 8004d5c:	4680      	mov	r8, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	469a      	mov	sl, r3
 8004d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d66:	d807      	bhi.n	8004d78 <_printf_i+0x28>
 8004d68:	2f62      	cmp	r7, #98	; 0x62
 8004d6a:	d80a      	bhi.n	8004d82 <_printf_i+0x32>
 8004d6c:	2f00      	cmp	r7, #0
 8004d6e:	f000 80d8 	beq.w	8004f22 <_printf_i+0x1d2>
 8004d72:	2f58      	cmp	r7, #88	; 0x58
 8004d74:	f000 80a3 	beq.w	8004ebe <_printf_i+0x16e>
 8004d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d80:	e03a      	b.n	8004df8 <_printf_i+0xa8>
 8004d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d86:	2b15      	cmp	r3, #21
 8004d88:	d8f6      	bhi.n	8004d78 <_printf_i+0x28>
 8004d8a:	a101      	add	r1, pc, #4	; (adr r1, 8004d90 <_printf_i+0x40>)
 8004d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d90:	08004de9 	.word	0x08004de9
 8004d94:	08004dfd 	.word	0x08004dfd
 8004d98:	08004d79 	.word	0x08004d79
 8004d9c:	08004d79 	.word	0x08004d79
 8004da0:	08004d79 	.word	0x08004d79
 8004da4:	08004d79 	.word	0x08004d79
 8004da8:	08004dfd 	.word	0x08004dfd
 8004dac:	08004d79 	.word	0x08004d79
 8004db0:	08004d79 	.word	0x08004d79
 8004db4:	08004d79 	.word	0x08004d79
 8004db8:	08004d79 	.word	0x08004d79
 8004dbc:	08004f09 	.word	0x08004f09
 8004dc0:	08004e2d 	.word	0x08004e2d
 8004dc4:	08004eeb 	.word	0x08004eeb
 8004dc8:	08004d79 	.word	0x08004d79
 8004dcc:	08004d79 	.word	0x08004d79
 8004dd0:	08004f2b 	.word	0x08004f2b
 8004dd4:	08004d79 	.word	0x08004d79
 8004dd8:	08004e2d 	.word	0x08004e2d
 8004ddc:	08004d79 	.word	0x08004d79
 8004de0:	08004d79 	.word	0x08004d79
 8004de4:	08004ef3 	.word	0x08004ef3
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	1d1a      	adds	r2, r3, #4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	602a      	str	r2, [r5, #0]
 8004df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0a3      	b.n	8004f44 <_printf_i+0x1f4>
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	6829      	ldr	r1, [r5, #0]
 8004e00:	0606      	lsls	r6, r0, #24
 8004e02:	f101 0304 	add.w	r3, r1, #4
 8004e06:	d50a      	bpl.n	8004e1e <_printf_i+0xce>
 8004e08:	680e      	ldr	r6, [r1, #0]
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	2e00      	cmp	r6, #0
 8004e0e:	da03      	bge.n	8004e18 <_printf_i+0xc8>
 8004e10:	232d      	movs	r3, #45	; 0x2d
 8004e12:	4276      	negs	r6, r6
 8004e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e18:	485e      	ldr	r0, [pc, #376]	; (8004f94 <_printf_i+0x244>)
 8004e1a:	230a      	movs	r3, #10
 8004e1c:	e019      	b.n	8004e52 <_printf_i+0x102>
 8004e1e:	680e      	ldr	r6, [r1, #0]
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e26:	bf18      	it	ne
 8004e28:	b236      	sxthne	r6, r6
 8004e2a:	e7ef      	b.n	8004e0c <_printf_i+0xbc>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	6820      	ldr	r0, [r4, #0]
 8004e30:	1d19      	adds	r1, r3, #4
 8004e32:	6029      	str	r1, [r5, #0]
 8004e34:	0601      	lsls	r1, r0, #24
 8004e36:	d501      	bpl.n	8004e3c <_printf_i+0xec>
 8004e38:	681e      	ldr	r6, [r3, #0]
 8004e3a:	e002      	b.n	8004e42 <_printf_i+0xf2>
 8004e3c:	0646      	lsls	r6, r0, #25
 8004e3e:	d5fb      	bpl.n	8004e38 <_printf_i+0xe8>
 8004e40:	881e      	ldrh	r6, [r3, #0]
 8004e42:	4854      	ldr	r0, [pc, #336]	; (8004f94 <_printf_i+0x244>)
 8004e44:	2f6f      	cmp	r7, #111	; 0x6f
 8004e46:	bf0c      	ite	eq
 8004e48:	2308      	moveq	r3, #8
 8004e4a:	230a      	movne	r3, #10
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e52:	6865      	ldr	r5, [r4, #4]
 8004e54:	60a5      	str	r5, [r4, #8]
 8004e56:	2d00      	cmp	r5, #0
 8004e58:	bfa2      	ittt	ge
 8004e5a:	6821      	ldrge	r1, [r4, #0]
 8004e5c:	f021 0104 	bicge.w	r1, r1, #4
 8004e60:	6021      	strge	r1, [r4, #0]
 8004e62:	b90e      	cbnz	r6, 8004e68 <_printf_i+0x118>
 8004e64:	2d00      	cmp	r5, #0
 8004e66:	d04d      	beq.n	8004f04 <_printf_i+0x1b4>
 8004e68:	4615      	mov	r5, r2
 8004e6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e6e:	fb03 6711 	mls	r7, r3, r1, r6
 8004e72:	5dc7      	ldrb	r7, [r0, r7]
 8004e74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e78:	4637      	mov	r7, r6
 8004e7a:	42bb      	cmp	r3, r7
 8004e7c:	460e      	mov	r6, r1
 8004e7e:	d9f4      	bls.n	8004e6a <_printf_i+0x11a>
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d10b      	bne.n	8004e9c <_printf_i+0x14c>
 8004e84:	6823      	ldr	r3, [r4, #0]
 8004e86:	07de      	lsls	r6, r3, #31
 8004e88:	d508      	bpl.n	8004e9c <_printf_i+0x14c>
 8004e8a:	6923      	ldr	r3, [r4, #16]
 8004e8c:	6861      	ldr	r1, [r4, #4]
 8004e8e:	4299      	cmp	r1, r3
 8004e90:	bfde      	ittt	le
 8004e92:	2330      	movle	r3, #48	; 0x30
 8004e94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e9c:	1b52      	subs	r2, r2, r5
 8004e9e:	6122      	str	r2, [r4, #16]
 8004ea0:	f8cd a000 	str.w	sl, [sp]
 8004ea4:	464b      	mov	r3, r9
 8004ea6:	aa03      	add	r2, sp, #12
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	4640      	mov	r0, r8
 8004eac:	f7ff fee2 	bl	8004c74 <_printf_common>
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d14c      	bne.n	8004f4e <_printf_i+0x1fe>
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	b004      	add	sp, #16
 8004eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebe:	4835      	ldr	r0, [pc, #212]	; (8004f94 <_printf_i+0x244>)
 8004ec0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ec4:	6829      	ldr	r1, [r5, #0]
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ecc:	6029      	str	r1, [r5, #0]
 8004ece:	061d      	lsls	r5, r3, #24
 8004ed0:	d514      	bpl.n	8004efc <_printf_i+0x1ac>
 8004ed2:	07df      	lsls	r7, r3, #31
 8004ed4:	bf44      	itt	mi
 8004ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8004eda:	6023      	strmi	r3, [r4, #0]
 8004edc:	b91e      	cbnz	r6, 8004ee6 <_printf_i+0x196>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	f023 0320 	bic.w	r3, r3, #32
 8004ee4:	6023      	str	r3, [r4, #0]
 8004ee6:	2310      	movs	r3, #16
 8004ee8:	e7b0      	b.n	8004e4c <_printf_i+0xfc>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	f043 0320 	orr.w	r3, r3, #32
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	2378      	movs	r3, #120	; 0x78
 8004ef4:	4828      	ldr	r0, [pc, #160]	; (8004f98 <_printf_i+0x248>)
 8004ef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004efa:	e7e3      	b.n	8004ec4 <_printf_i+0x174>
 8004efc:	0659      	lsls	r1, r3, #25
 8004efe:	bf48      	it	mi
 8004f00:	b2b6      	uxthmi	r6, r6
 8004f02:	e7e6      	b.n	8004ed2 <_printf_i+0x182>
 8004f04:	4615      	mov	r5, r2
 8004f06:	e7bb      	b.n	8004e80 <_printf_i+0x130>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	6826      	ldr	r6, [r4, #0]
 8004f0c:	6961      	ldr	r1, [r4, #20]
 8004f0e:	1d18      	adds	r0, r3, #4
 8004f10:	6028      	str	r0, [r5, #0]
 8004f12:	0635      	lsls	r5, r6, #24
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	d501      	bpl.n	8004f1c <_printf_i+0x1cc>
 8004f18:	6019      	str	r1, [r3, #0]
 8004f1a:	e002      	b.n	8004f22 <_printf_i+0x1d2>
 8004f1c:	0670      	lsls	r0, r6, #25
 8004f1e:	d5fb      	bpl.n	8004f18 <_printf_i+0x1c8>
 8004f20:	8019      	strh	r1, [r3, #0]
 8004f22:	2300      	movs	r3, #0
 8004f24:	6123      	str	r3, [r4, #16]
 8004f26:	4615      	mov	r5, r2
 8004f28:	e7ba      	b.n	8004ea0 <_printf_i+0x150>
 8004f2a:	682b      	ldr	r3, [r5, #0]
 8004f2c:	1d1a      	adds	r2, r3, #4
 8004f2e:	602a      	str	r2, [r5, #0]
 8004f30:	681d      	ldr	r5, [r3, #0]
 8004f32:	6862      	ldr	r2, [r4, #4]
 8004f34:	2100      	movs	r1, #0
 8004f36:	4628      	mov	r0, r5
 8004f38:	f7fb f94a 	bl	80001d0 <memchr>
 8004f3c:	b108      	cbz	r0, 8004f42 <_printf_i+0x1f2>
 8004f3e:	1b40      	subs	r0, r0, r5
 8004f40:	6060      	str	r0, [r4, #4]
 8004f42:	6863      	ldr	r3, [r4, #4]
 8004f44:	6123      	str	r3, [r4, #16]
 8004f46:	2300      	movs	r3, #0
 8004f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f4c:	e7a8      	b.n	8004ea0 <_printf_i+0x150>
 8004f4e:	6923      	ldr	r3, [r4, #16]
 8004f50:	462a      	mov	r2, r5
 8004f52:	4649      	mov	r1, r9
 8004f54:	4640      	mov	r0, r8
 8004f56:	47d0      	blx	sl
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d0ab      	beq.n	8004eb4 <_printf_i+0x164>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	079b      	lsls	r3, r3, #30
 8004f60:	d413      	bmi.n	8004f8a <_printf_i+0x23a>
 8004f62:	68e0      	ldr	r0, [r4, #12]
 8004f64:	9b03      	ldr	r3, [sp, #12]
 8004f66:	4298      	cmp	r0, r3
 8004f68:	bfb8      	it	lt
 8004f6a:	4618      	movlt	r0, r3
 8004f6c:	e7a4      	b.n	8004eb8 <_printf_i+0x168>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	4632      	mov	r2, r6
 8004f72:	4649      	mov	r1, r9
 8004f74:	4640      	mov	r0, r8
 8004f76:	47d0      	blx	sl
 8004f78:	3001      	adds	r0, #1
 8004f7a:	d09b      	beq.n	8004eb4 <_printf_i+0x164>
 8004f7c:	3501      	adds	r5, #1
 8004f7e:	68e3      	ldr	r3, [r4, #12]
 8004f80:	9903      	ldr	r1, [sp, #12]
 8004f82:	1a5b      	subs	r3, r3, r1
 8004f84:	42ab      	cmp	r3, r5
 8004f86:	dcf2      	bgt.n	8004f6e <_printf_i+0x21e>
 8004f88:	e7eb      	b.n	8004f62 <_printf_i+0x212>
 8004f8a:	2500      	movs	r5, #0
 8004f8c:	f104 0619 	add.w	r6, r4, #25
 8004f90:	e7f5      	b.n	8004f7e <_printf_i+0x22e>
 8004f92:	bf00      	nop
 8004f94:	080053c1 	.word	0x080053c1
 8004f98:	080053d2 	.word	0x080053d2

08004f9c <_read_r>:
 8004f9c:	b538      	push	{r3, r4, r5, lr}
 8004f9e:	4d07      	ldr	r5, [pc, #28]	; (8004fbc <_read_r+0x20>)
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	4608      	mov	r0, r1
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	602a      	str	r2, [r5, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	f7fb fd97 	bl	8000ade <_read>
 8004fb0:	1c43      	adds	r3, r0, #1
 8004fb2:	d102      	bne.n	8004fba <_read_r+0x1e>
 8004fb4:	682b      	ldr	r3, [r5, #0]
 8004fb6:	b103      	cbz	r3, 8004fba <_read_r+0x1e>
 8004fb8:	6023      	str	r3, [r4, #0]
 8004fba:	bd38      	pop	{r3, r4, r5, pc}
 8004fbc:	200040d0 	.word	0x200040d0

08004fc0 <__swbuf_r>:
 8004fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fc2:	460e      	mov	r6, r1
 8004fc4:	4614      	mov	r4, r2
 8004fc6:	4605      	mov	r5, r0
 8004fc8:	b118      	cbz	r0, 8004fd2 <__swbuf_r+0x12>
 8004fca:	6983      	ldr	r3, [r0, #24]
 8004fcc:	b90b      	cbnz	r3, 8004fd2 <__swbuf_r+0x12>
 8004fce:	f7ff f963 	bl	8004298 <__sinit>
 8004fd2:	4b21      	ldr	r3, [pc, #132]	; (8005058 <__swbuf_r+0x98>)
 8004fd4:	429c      	cmp	r4, r3
 8004fd6:	d12b      	bne.n	8005030 <__swbuf_r+0x70>
 8004fd8:	686c      	ldr	r4, [r5, #4]
 8004fda:	69a3      	ldr	r3, [r4, #24]
 8004fdc:	60a3      	str	r3, [r4, #8]
 8004fde:	89a3      	ldrh	r3, [r4, #12]
 8004fe0:	071a      	lsls	r2, r3, #28
 8004fe2:	d52f      	bpl.n	8005044 <__swbuf_r+0x84>
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	b36b      	cbz	r3, 8005044 <__swbuf_r+0x84>
 8004fe8:	6923      	ldr	r3, [r4, #16]
 8004fea:	6820      	ldr	r0, [r4, #0]
 8004fec:	1ac0      	subs	r0, r0, r3
 8004fee:	6963      	ldr	r3, [r4, #20]
 8004ff0:	b2f6      	uxtb	r6, r6
 8004ff2:	4283      	cmp	r3, r0
 8004ff4:	4637      	mov	r7, r6
 8004ff6:	dc04      	bgt.n	8005002 <__swbuf_r+0x42>
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f7ff fc3a 	bl	8004874 <_fflush_r>
 8005000:	bb30      	cbnz	r0, 8005050 <__swbuf_r+0x90>
 8005002:	68a3      	ldr	r3, [r4, #8]
 8005004:	3b01      	subs	r3, #1
 8005006:	60a3      	str	r3, [r4, #8]
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	6022      	str	r2, [r4, #0]
 800500e:	701e      	strb	r6, [r3, #0]
 8005010:	6963      	ldr	r3, [r4, #20]
 8005012:	3001      	adds	r0, #1
 8005014:	4283      	cmp	r3, r0
 8005016:	d004      	beq.n	8005022 <__swbuf_r+0x62>
 8005018:	89a3      	ldrh	r3, [r4, #12]
 800501a:	07db      	lsls	r3, r3, #31
 800501c:	d506      	bpl.n	800502c <__swbuf_r+0x6c>
 800501e:	2e0a      	cmp	r6, #10
 8005020:	d104      	bne.n	800502c <__swbuf_r+0x6c>
 8005022:	4621      	mov	r1, r4
 8005024:	4628      	mov	r0, r5
 8005026:	f7ff fc25 	bl	8004874 <_fflush_r>
 800502a:	b988      	cbnz	r0, 8005050 <__swbuf_r+0x90>
 800502c:	4638      	mov	r0, r7
 800502e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <__swbuf_r+0x9c>)
 8005032:	429c      	cmp	r4, r3
 8005034:	d101      	bne.n	800503a <__swbuf_r+0x7a>
 8005036:	68ac      	ldr	r4, [r5, #8]
 8005038:	e7cf      	b.n	8004fda <__swbuf_r+0x1a>
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <__swbuf_r+0xa0>)
 800503c:	429c      	cmp	r4, r3
 800503e:	bf08      	it	eq
 8005040:	68ec      	ldreq	r4, [r5, #12]
 8005042:	e7ca      	b.n	8004fda <__swbuf_r+0x1a>
 8005044:	4621      	mov	r1, r4
 8005046:	4628      	mov	r0, r5
 8005048:	f000 f80c 	bl	8005064 <__swsetup_r>
 800504c:	2800      	cmp	r0, #0
 800504e:	d0cb      	beq.n	8004fe8 <__swbuf_r+0x28>
 8005050:	f04f 37ff 	mov.w	r7, #4294967295
 8005054:	e7ea      	b.n	800502c <__swbuf_r+0x6c>
 8005056:	bf00      	nop
 8005058:	0800536c 	.word	0x0800536c
 800505c:	0800538c 	.word	0x0800538c
 8005060:	0800534c 	.word	0x0800534c

08005064 <__swsetup_r>:
 8005064:	4b32      	ldr	r3, [pc, #200]	; (8005130 <__swsetup_r+0xcc>)
 8005066:	b570      	push	{r4, r5, r6, lr}
 8005068:	681d      	ldr	r5, [r3, #0]
 800506a:	4606      	mov	r6, r0
 800506c:	460c      	mov	r4, r1
 800506e:	b125      	cbz	r5, 800507a <__swsetup_r+0x16>
 8005070:	69ab      	ldr	r3, [r5, #24]
 8005072:	b913      	cbnz	r3, 800507a <__swsetup_r+0x16>
 8005074:	4628      	mov	r0, r5
 8005076:	f7ff f90f 	bl	8004298 <__sinit>
 800507a:	4b2e      	ldr	r3, [pc, #184]	; (8005134 <__swsetup_r+0xd0>)
 800507c:	429c      	cmp	r4, r3
 800507e:	d10f      	bne.n	80050a0 <__swsetup_r+0x3c>
 8005080:	686c      	ldr	r4, [r5, #4]
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005088:	0719      	lsls	r1, r3, #28
 800508a:	d42c      	bmi.n	80050e6 <__swsetup_r+0x82>
 800508c:	06dd      	lsls	r5, r3, #27
 800508e:	d411      	bmi.n	80050b4 <__swsetup_r+0x50>
 8005090:	2309      	movs	r3, #9
 8005092:	6033      	str	r3, [r6, #0]
 8005094:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	f04f 30ff 	mov.w	r0, #4294967295
 800509e:	e03e      	b.n	800511e <__swsetup_r+0xba>
 80050a0:	4b25      	ldr	r3, [pc, #148]	; (8005138 <__swsetup_r+0xd4>)
 80050a2:	429c      	cmp	r4, r3
 80050a4:	d101      	bne.n	80050aa <__swsetup_r+0x46>
 80050a6:	68ac      	ldr	r4, [r5, #8]
 80050a8:	e7eb      	b.n	8005082 <__swsetup_r+0x1e>
 80050aa:	4b24      	ldr	r3, [pc, #144]	; (800513c <__swsetup_r+0xd8>)
 80050ac:	429c      	cmp	r4, r3
 80050ae:	bf08      	it	eq
 80050b0:	68ec      	ldreq	r4, [r5, #12]
 80050b2:	e7e6      	b.n	8005082 <__swsetup_r+0x1e>
 80050b4:	0758      	lsls	r0, r3, #29
 80050b6:	d512      	bpl.n	80050de <__swsetup_r+0x7a>
 80050b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ba:	b141      	cbz	r1, 80050ce <__swsetup_r+0x6a>
 80050bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050c0:	4299      	cmp	r1, r3
 80050c2:	d002      	beq.n	80050ca <__swsetup_r+0x66>
 80050c4:	4630      	mov	r0, r6
 80050c6:	f7ff fc2f 	bl	8004928 <_free_r>
 80050ca:	2300      	movs	r3, #0
 80050cc:	6363      	str	r3, [r4, #52]	; 0x34
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80050d4:	81a3      	strh	r3, [r4, #12]
 80050d6:	2300      	movs	r3, #0
 80050d8:	6063      	str	r3, [r4, #4]
 80050da:	6923      	ldr	r3, [r4, #16]
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	89a3      	ldrh	r3, [r4, #12]
 80050e0:	f043 0308 	orr.w	r3, r3, #8
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	b94b      	cbnz	r3, 80050fe <__swsetup_r+0x9a>
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80050f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050f4:	d003      	beq.n	80050fe <__swsetup_r+0x9a>
 80050f6:	4621      	mov	r1, r4
 80050f8:	4630      	mov	r0, r6
 80050fa:	f000 f847 	bl	800518c <__smakebuf_r>
 80050fe:	89a0      	ldrh	r0, [r4, #12]
 8005100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005104:	f010 0301 	ands.w	r3, r0, #1
 8005108:	d00a      	beq.n	8005120 <__swsetup_r+0xbc>
 800510a:	2300      	movs	r3, #0
 800510c:	60a3      	str	r3, [r4, #8]
 800510e:	6963      	ldr	r3, [r4, #20]
 8005110:	425b      	negs	r3, r3
 8005112:	61a3      	str	r3, [r4, #24]
 8005114:	6923      	ldr	r3, [r4, #16]
 8005116:	b943      	cbnz	r3, 800512a <__swsetup_r+0xc6>
 8005118:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800511c:	d1ba      	bne.n	8005094 <__swsetup_r+0x30>
 800511e:	bd70      	pop	{r4, r5, r6, pc}
 8005120:	0781      	lsls	r1, r0, #30
 8005122:	bf58      	it	pl
 8005124:	6963      	ldrpl	r3, [r4, #20]
 8005126:	60a3      	str	r3, [r4, #8]
 8005128:	e7f4      	b.n	8005114 <__swsetup_r+0xb0>
 800512a:	2000      	movs	r0, #0
 800512c:	e7f7      	b.n	800511e <__swsetup_r+0xba>
 800512e:	bf00      	nop
 8005130:	20000010 	.word	0x20000010
 8005134:	0800536c 	.word	0x0800536c
 8005138:	0800538c 	.word	0x0800538c
 800513c:	0800534c 	.word	0x0800534c

08005140 <__swhatbuf_r>:
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	460e      	mov	r6, r1
 8005144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005148:	2900      	cmp	r1, #0
 800514a:	b096      	sub	sp, #88	; 0x58
 800514c:	4614      	mov	r4, r2
 800514e:	461d      	mov	r5, r3
 8005150:	da08      	bge.n	8005164 <__swhatbuf_r+0x24>
 8005152:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	602a      	str	r2, [r5, #0]
 800515a:	061a      	lsls	r2, r3, #24
 800515c:	d410      	bmi.n	8005180 <__swhatbuf_r+0x40>
 800515e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005162:	e00e      	b.n	8005182 <__swhatbuf_r+0x42>
 8005164:	466a      	mov	r2, sp
 8005166:	f000 f851 	bl	800520c <_fstat_r>
 800516a:	2800      	cmp	r0, #0
 800516c:	dbf1      	blt.n	8005152 <__swhatbuf_r+0x12>
 800516e:	9a01      	ldr	r2, [sp, #4]
 8005170:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005174:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005178:	425a      	negs	r2, r3
 800517a:	415a      	adcs	r2, r3
 800517c:	602a      	str	r2, [r5, #0]
 800517e:	e7ee      	b.n	800515e <__swhatbuf_r+0x1e>
 8005180:	2340      	movs	r3, #64	; 0x40
 8005182:	2000      	movs	r0, #0
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	b016      	add	sp, #88	; 0x58
 8005188:	bd70      	pop	{r4, r5, r6, pc}
	...

0800518c <__smakebuf_r>:
 800518c:	898b      	ldrh	r3, [r1, #12]
 800518e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005190:	079d      	lsls	r5, r3, #30
 8005192:	4606      	mov	r6, r0
 8005194:	460c      	mov	r4, r1
 8005196:	d507      	bpl.n	80051a8 <__smakebuf_r+0x1c>
 8005198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	6123      	str	r3, [r4, #16]
 80051a0:	2301      	movs	r3, #1
 80051a2:	6163      	str	r3, [r4, #20]
 80051a4:	b002      	add	sp, #8
 80051a6:	bd70      	pop	{r4, r5, r6, pc}
 80051a8:	ab01      	add	r3, sp, #4
 80051aa:	466a      	mov	r2, sp
 80051ac:	f7ff ffc8 	bl	8005140 <__swhatbuf_r>
 80051b0:	9900      	ldr	r1, [sp, #0]
 80051b2:	4605      	mov	r5, r0
 80051b4:	4630      	mov	r0, r6
 80051b6:	f7ff f96b 	bl	8004490 <_malloc_r>
 80051ba:	b948      	cbnz	r0, 80051d0 <__smakebuf_r+0x44>
 80051bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c0:	059a      	lsls	r2, r3, #22
 80051c2:	d4ef      	bmi.n	80051a4 <__smakebuf_r+0x18>
 80051c4:	f023 0303 	bic.w	r3, r3, #3
 80051c8:	f043 0302 	orr.w	r3, r3, #2
 80051cc:	81a3      	strh	r3, [r4, #12]
 80051ce:	e7e3      	b.n	8005198 <__smakebuf_r+0xc>
 80051d0:	4b0d      	ldr	r3, [pc, #52]	; (8005208 <__smakebuf_r+0x7c>)
 80051d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80051d4:	89a3      	ldrh	r3, [r4, #12]
 80051d6:	6020      	str	r0, [r4, #0]
 80051d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051dc:	81a3      	strh	r3, [r4, #12]
 80051de:	9b00      	ldr	r3, [sp, #0]
 80051e0:	6163      	str	r3, [r4, #20]
 80051e2:	9b01      	ldr	r3, [sp, #4]
 80051e4:	6120      	str	r0, [r4, #16]
 80051e6:	b15b      	cbz	r3, 8005200 <__smakebuf_r+0x74>
 80051e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051ec:	4630      	mov	r0, r6
 80051ee:	f000 f81f 	bl	8005230 <_isatty_r>
 80051f2:	b128      	cbz	r0, 8005200 <__smakebuf_r+0x74>
 80051f4:	89a3      	ldrh	r3, [r4, #12]
 80051f6:	f023 0303 	bic.w	r3, r3, #3
 80051fa:	f043 0301 	orr.w	r3, r3, #1
 80051fe:	81a3      	strh	r3, [r4, #12]
 8005200:	89a0      	ldrh	r0, [r4, #12]
 8005202:	4305      	orrs	r5, r0
 8005204:	81a5      	strh	r5, [r4, #12]
 8005206:	e7cd      	b.n	80051a4 <__smakebuf_r+0x18>
 8005208:	08004231 	.word	0x08004231

0800520c <_fstat_r>:
 800520c:	b538      	push	{r3, r4, r5, lr}
 800520e:	4d07      	ldr	r5, [pc, #28]	; (800522c <_fstat_r+0x20>)
 8005210:	2300      	movs	r3, #0
 8005212:	4604      	mov	r4, r0
 8005214:	4608      	mov	r0, r1
 8005216:	4611      	mov	r1, r2
 8005218:	602b      	str	r3, [r5, #0]
 800521a:	f7fb fca5 	bl	8000b68 <_fstat>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	d102      	bne.n	8005228 <_fstat_r+0x1c>
 8005222:	682b      	ldr	r3, [r5, #0]
 8005224:	b103      	cbz	r3, 8005228 <_fstat_r+0x1c>
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	bd38      	pop	{r3, r4, r5, pc}
 800522a:	bf00      	nop
 800522c:	200040d0 	.word	0x200040d0

08005230 <_isatty_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	4d06      	ldr	r5, [pc, #24]	; (800524c <_isatty_r+0x1c>)
 8005234:	2300      	movs	r3, #0
 8005236:	4604      	mov	r4, r0
 8005238:	4608      	mov	r0, r1
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	f7fb fca4 	bl	8000b88 <_isatty>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_isatty_r+0x1a>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_isatty_r+0x1a>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	200040d0 	.word	0x200040d0

08005250 <_init>:
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005252:	bf00      	nop
 8005254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005256:	bc08      	pop	{r3}
 8005258:	469e      	mov	lr, r3
 800525a:	4770      	bx	lr

0800525c <_fini>:
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800525e:	bf00      	nop
 8005260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005262:	bc08      	pop	{r3}
 8005264:	469e      	mov	lr, r3
 8005266:	4770      	bx	lr
