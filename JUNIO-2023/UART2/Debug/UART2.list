
UART2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08004650  08004650  00014650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004734  08004734  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08004734  08004734  00014734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800473c  0800473c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800473c  0800473c  0001473c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08004744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          000001c4  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000228  20000228  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005439  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001142  00000000  00000000  000254cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004c0  00000000  00000000  00026610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000418  00000000  00000000  00026ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a91b  00000000  00000000  00026ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000056fb  00000000  00000000  00041803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090697  00000000  00000000  00046efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d7595  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b2c  00000000  00000000  000d75e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004638 	.word	0x08004638

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08004638 	.word	0x08004638

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db0b      	blt.n	80005ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f003 021f 	and.w	r2, r3, #31
 80005bc:	4907      	ldr	r1, [pc, #28]	; (80005dc <__NVIC_EnableIRQ+0x38>)
 80005be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c2:	095b      	lsrs	r3, r3, #5
 80005c4:	2001      	movs	r0, #1
 80005c6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	e000e100 	.word	0xe000e100

080005e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	db0a      	blt.n	800060a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	490c      	ldr	r1, [pc, #48]	; (800062c <__NVIC_SetPriority+0x4c>)
 80005fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fe:	0112      	lsls	r2, r2, #4
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	440b      	add	r3, r1
 8000604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000608:	e00a      	b.n	8000620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4908      	ldr	r1, [pc, #32]	; (8000630 <__NVIC_SetPriority+0x50>)
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	f003 030f 	and.w	r3, r3, #15
 8000616:	3b04      	subs	r3, #4
 8000618:	0112      	lsls	r2, r2, #4
 800061a:	b2d2      	uxtb	r2, r2
 800061c:	440b      	add	r3, r1
 800061e:	761a      	strb	r2, [r3, #24]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000e100 	.word	0xe000e100
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__io_putchar>:
lwrb_t rxBuff;
uint8_t rx_data[64];
nmbs_bitfield server_coils = {0};
uint16_t server_registers[REGS_ADDR_MAX] = {0};
/*Function prototype ------------------------------------------*/
int __io_putchar(int ch){
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	uint8_t c = ch & 0xFF;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	73fb      	strb	r3, [r7, #15]
	//salida
	//ITM_SendChar(ch);
	while(!(USART2->SR & USART_SR_TXE));
 8000640:	bf00      	nop
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <__io_putchar+0x30>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f9      	beq.n	8000642 <__io_putchar+0xe>
	USART2->DR = c;
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <__io_putchar+0x30>)
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	6053      	str	r3, [r2, #4]
	return ch;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40004400 	.word	0x40004400

08000668 <read_serial>:

int32_t read_serial(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg){
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	60f8      	str	r0, [r7, #12]
 8000670:	607a      	str	r2, [r7, #4]
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	460b      	mov	r3, r1
 8000676:	817b      	strh	r3, [r7, #10]
	uint32_t tickStart = GetTicks();
 8000678:	f000 fcc6 	bl	8001008 <GetTicks>
 800067c:	6178      	str	r0, [r7, #20]
	while((GetTicks() - tickStart)<= byte_timeout_ms){
 800067e:	e00e      	b.n	800069e <read_serial+0x36>
		if(lwrb_get_full(&rxBuff)>= count){
 8000680:	480d      	ldr	r0, [pc, #52]	; (80006b8 <read_serial+0x50>)
 8000682:	f001 f985 	bl	8001990 <lwrb_get_full>
 8000686:	4602      	mov	r2, r0
 8000688:	897b      	ldrh	r3, [r7, #10]
 800068a:	429a      	cmp	r2, r3
 800068c:	d307      	bcc.n	800069e <read_serial+0x36>
			return lwrb_read(&rxBuff, buf, count);
 800068e:	897b      	ldrh	r3, [r7, #10]
 8000690:	461a      	mov	r2, r3
 8000692:	68f9      	ldr	r1, [r7, #12]
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <read_serial+0x50>)
 8000696:	f001 f8ba 	bl	800180e <lwrb_read>
 800069a:	4603      	mov	r3, r0
 800069c:	e008      	b.n	80006b0 <read_serial+0x48>
	while((GetTicks() - tickStart)<= byte_timeout_ms){
 800069e:	f000 fcb3 	bl	8001008 <GetTicks>
 80006a2:	4602      	mov	r2, r0
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	1ad2      	subs	r2, r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d9e8      	bls.n	8000680 <read_serial+0x18>
		}
	}
	return 0;
 80006ae:	2300      	movs	r3, #0
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3718      	adds	r7, #24
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000080 	.word	0x20000080

080006bc <write_serial>:
int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	607a      	str	r2, [r7, #4]
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	460b      	mov	r3, r1
 80006ca:	817b      	strh	r3, [r7, #10]
	(void)arg;
	return UART_SendData(USART2, (uint8_t*)buf, count, byte_timeout_ms);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	897a      	ldrh	r2, [r7, #10]
 80006d0:	68f9      	ldr	r1, [r7, #12]
 80006d2:	4804      	ldr	r0, [pc, #16]	; (80006e4 <write_serial+0x28>)
 80006d4:	f000 ff34 	bl	8001540 <UART_SendData>
 80006d8:	4603      	mov	r3, r0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40004400 	.word	0x40004400

080006e8 <handle_read_coils>:

nmbs_error handle_read_coils(uint16_t address, uint16_t quantity, nmbs_bitfield coils_out, void *arg) {
 80006e8:	b480      	push	{r7}
 80006ea:	b087      	sub	sp, #28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60ba      	str	r2, [r7, #8]
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4603      	mov	r3, r0
 80006f4:	81fb      	strh	r3, [r7, #14]
 80006f6:	460b      	mov	r3, r1
 80006f8:	81bb      	strh	r3, [r7, #12]
  if (address + quantity > COILS_ADDR_MAX + 1)
 80006fa:	89fa      	ldrh	r2, [r7, #14]
 80006fc:	89bb      	ldrh	r3, [r7, #12]
 80006fe:	4413      	add	r3, r2
 8000700:	2b65      	cmp	r3, #101	; 0x65
 8000702:	dd01      	ble.n	8000708 <handle_read_coils+0x20>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8000704:	2302      	movs	r3, #2
 8000706:	e069      	b.n	80007dc <handle_read_coils+0xf4>

  // Read our coils values into coils_out
  for (int i = 0; i < quantity; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	e061      	b.n	80007d2 <handle_read_coils+0xea>
    bool value = nmbs_bitfield_read(server_coils, address + i);
 800070e:	89fa      	ldrh	r2, [r7, #14]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	4413      	add	r3, r2
 8000714:	2b00      	cmp	r3, #0
 8000716:	da00      	bge.n	800071a <handle_read_coils+0x32>
 8000718:	3307      	adds	r3, #7
 800071a:	10db      	asrs	r3, r3, #3
 800071c:	461a      	mov	r2, r3
 800071e:	4b32      	ldr	r3, [pc, #200]	; (80007e8 <handle_read_coils+0x100>)
 8000720:	5c9b      	ldrb	r3, [r3, r2]
 8000722:	4619      	mov	r1, r3
 8000724:	89fa      	ldrh	r2, [r7, #14]
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	4413      	add	r3, r2
 800072a:	425a      	negs	r2, r3
 800072c:	f003 0307 	and.w	r3, r3, #7
 8000730:	f002 0207 	and.w	r2, r2, #7
 8000734:	bf58      	it	pl
 8000736:	4253      	negpl	r3, r2
 8000738:	fa41 f303 	asr.w	r3, r1, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	2b00      	cmp	r3, #0
 8000742:	bf14      	ite	ne
 8000744:	2301      	movne	r3, #1
 8000746:	2300      	moveq	r3, #0
 8000748:	74fb      	strb	r3, [r7, #19]
    nmbs_bitfield_write(coils_out, i, value);
 800074a:	7cfb      	ldrb	r3, [r7, #19]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d019      	beq.n	8000784 <handle_read_coils+0x9c>
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	2b00      	cmp	r3, #0
 8000754:	da00      	bge.n	8000758 <handle_read_coils+0x70>
 8000756:	3307      	adds	r3, #7
 8000758:	10db      	asrs	r3, r3, #3
 800075a:	461a      	mov	r2, r3
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	b25a      	sxtb	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	4259      	negs	r1, r3
 8000768:	f003 0307 	and.w	r3, r3, #7
 800076c:	f001 0107 	and.w	r1, r1, #7
 8000770:	bf58      	it	pl
 8000772:	424b      	negpl	r3, r1
 8000774:	2101      	movs	r1, #1
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	b25b      	sxtb	r3, r3
 800077c:	4313      	orrs	r3, r2
 800077e:	b25b      	sxtb	r3, r3
 8000780:	b2da      	uxtb	r2, r3
 8000782:	e01a      	b.n	80007ba <handle_read_coils+0xd2>
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da00      	bge.n	800078c <handle_read_coils+0xa4>
 800078a:	3307      	adds	r3, #7
 800078c:	10db      	asrs	r3, r3, #3
 800078e:	461a      	mov	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	4413      	add	r3, r2
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	b25a      	sxtb	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	4259      	negs	r1, r3
 800079c:	f003 0307 	and.w	r3, r3, #7
 80007a0:	f001 0107 	and.w	r1, r1, #7
 80007a4:	bf58      	it	pl
 80007a6:	424b      	negpl	r3, r1
 80007a8:	2101      	movs	r1, #1
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	b25b      	sxtb	r3, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	4013      	ands	r3, r2
 80007b6:	b25b      	sxtb	r3, r3
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	da00      	bge.n	80007c2 <handle_read_coils+0xda>
 80007c0:	3307      	adds	r3, #7
 80007c2:	10db      	asrs	r3, r3, #3
 80007c4:	4619      	mov	r1, r3
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	440b      	add	r3, r1
 80007ca:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < quantity; i++) {
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	3301      	adds	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	89bb      	ldrh	r3, [r7, #12]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	db99      	blt.n	800070e <handle_read_coils+0x26>
  }

  return NMBS_ERROR_NONE;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	371c      	adds	r7, #28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	200000d4 	.word	0x200000d4

080007ec <handle_write_multiple_coils>:


nmbs_error handle_write_multiple_coils(uint16_t address, uint16_t quantity, const nmbs_bitfield coils, void *arg) {
 80007ec:	b480      	push	{r7}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60ba      	str	r2, [r7, #8]
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4603      	mov	r3, r0
 80007f8:	81fb      	strh	r3, [r7, #14]
 80007fa:	460b      	mov	r3, r1
 80007fc:	81bb      	strh	r3, [r7, #12]
  if (address + quantity > COILS_ADDR_MAX + 1)
 80007fe:	89fa      	ldrh	r2, [r7, #14]
 8000800:	89bb      	ldrh	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	2b65      	cmp	r3, #101	; 0x65
 8000806:	dd01      	ble.n	800080c <handle_write_multiple_coils+0x20>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8000808:	2302      	movs	r3, #2
 800080a:	e067      	b.n	80008dc <handle_write_multiple_coils+0xf0>

  // Write coils values to our server_coils
  for (int i = 0; i < quantity; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e05f      	b.n	80008d2 <handle_write_multiple_coils+0xe6>
    nmbs_bitfield_write(server_coils, address + i, nmbs_bitfield_read(coils, i));
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	2b00      	cmp	r3, #0
 8000816:	da00      	bge.n	800081a <handle_write_multiple_coils+0x2e>
 8000818:	3307      	adds	r3, #7
 800081a:	10db      	asrs	r3, r3, #3
 800081c:	461a      	mov	r2, r3
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	4413      	add	r3, r2
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	425a      	negs	r2, r3
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	f002 0207 	and.w	r2, r2, #7
 8000832:	bf58      	it	pl
 8000834:	4253      	negpl	r3, r2
 8000836:	fa41 f303 	asr.w	r3, r1, r3
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	2b00      	cmp	r3, #0
 8000840:	d01c      	beq.n	800087c <handle_write_multiple_coils+0x90>
 8000842:	89fa      	ldrh	r2, [r7, #14]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	4413      	add	r3, r2
 8000848:	2b00      	cmp	r3, #0
 800084a:	da00      	bge.n	800084e <handle_write_multiple_coils+0x62>
 800084c:	3307      	adds	r3, #7
 800084e:	10db      	asrs	r3, r3, #3
 8000850:	461a      	mov	r2, r3
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <handle_write_multiple_coils+0xfc>)
 8000854:	5c9b      	ldrb	r3, [r3, r2]
 8000856:	b25a      	sxtb	r2, r3
 8000858:	89f9      	ldrh	r1, [r7, #14]
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	440b      	add	r3, r1
 800085e:	4259      	negs	r1, r3
 8000860:	f003 0307 	and.w	r3, r3, #7
 8000864:	f001 0107 	and.w	r1, r1, #7
 8000868:	bf58      	it	pl
 800086a:	424b      	negpl	r3, r1
 800086c:	2101      	movs	r1, #1
 800086e:	fa01 f303 	lsl.w	r3, r1, r3
 8000872:	b25b      	sxtb	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b25b      	sxtb	r3, r3
 8000878:	b2da      	uxtb	r2, r3
 800087a:	e01d      	b.n	80008b8 <handle_write_multiple_coils+0xcc>
 800087c:	89fa      	ldrh	r2, [r7, #14]
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	4413      	add	r3, r2
 8000882:	2b00      	cmp	r3, #0
 8000884:	da00      	bge.n	8000888 <handle_write_multiple_coils+0x9c>
 8000886:	3307      	adds	r3, #7
 8000888:	10db      	asrs	r3, r3, #3
 800088a:	461a      	mov	r2, r3
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <handle_write_multiple_coils+0xfc>)
 800088e:	5c9b      	ldrb	r3, [r3, r2]
 8000890:	b25a      	sxtb	r2, r3
 8000892:	89f9      	ldrh	r1, [r7, #14]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	440b      	add	r3, r1
 8000898:	4259      	negs	r1, r3
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	f001 0107 	and.w	r1, r1, #7
 80008a2:	bf58      	it	pl
 80008a4:	424b      	negpl	r3, r1
 80008a6:	2101      	movs	r1, #1
 80008a8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	43db      	mvns	r3, r3
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	4013      	ands	r3, r2
 80008b4:	b25b      	sxtb	r3, r3
 80008b6:	b2da      	uxtb	r2, r3
 80008b8:	89f9      	ldrh	r1, [r7, #14]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	440b      	add	r3, r1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da00      	bge.n	80008c4 <handle_write_multiple_coils+0xd8>
 80008c2:	3307      	adds	r3, #7
 80008c4:	10db      	asrs	r3, r3, #3
 80008c6:	4619      	mov	r1, r3
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <handle_write_multiple_coils+0xfc>)
 80008ca:	545a      	strb	r2, [r3, r1]
  for (int i = 0; i < quantity; i++) {
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	3301      	adds	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	89bb      	ldrh	r3, [r7, #12]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	429a      	cmp	r2, r3
 80008d8:	db9b      	blt.n	8000812 <handle_write_multiple_coils+0x26>
  }

  return NMBS_ERROR_NONE;
 80008da:	2300      	movs	r3, #0
}
 80008dc:	4618      	mov	r0, r3
 80008de:	371c      	adds	r7, #28
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	200000d4 	.word	0x200000d4

080008ec <handler_read_holding_registers>:


nmbs_error handler_read_holding_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, void *arg) {
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60ba      	str	r2, [r7, #8]
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4603      	mov	r3, r0
 80008f8:	81fb      	strh	r3, [r7, #14]
 80008fa:	460b      	mov	r3, r1
 80008fc:	81bb      	strh	r3, [r7, #12]
  if (address + quantity > REGS_ADDR_MAX + 1)
 80008fe:	89fa      	ldrh	r2, [r7, #14]
 8000900:	89bb      	ldrh	r3, [r7, #12]
 8000902:	4413      	add	r3, r2
 8000904:	2b21      	cmp	r3, #33	; 0x21
 8000906:	dd01      	ble.n	800090c <handler_read_holding_registers+0x20>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8000908:	2302      	movs	r3, #2
 800090a:	e015      	b.n	8000938 <handler_read_holding_registers+0x4c>

  // Read our registers values into registers_out
  for (int i = 0; i < quantity; i++)
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	e00d      	b.n	800092e <handler_read_holding_registers+0x42>
    registers_out[i] = server_registers[address + i];
 8000912:	89fa      	ldrh	r2, [r7, #14]
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	441a      	add	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	440b      	add	r3, r1
 8000920:	4908      	ldr	r1, [pc, #32]	; (8000944 <handler_read_holding_registers+0x58>)
 8000922:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000926:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < quantity; i++)
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3301      	adds	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	89bb      	ldrh	r3, [r7, #12]
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	429a      	cmp	r2, r3
 8000934:	dbed      	blt.n	8000912 <handler_read_holding_registers+0x26>

  return NMBS_ERROR_NONE;
 8000936:	2300      	movs	r3, #0
}
 8000938:	4618      	mov	r0, r3
 800093a:	371c      	adds	r7, #28
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	200001d0 	.word	0x200001d0

08000948 <handle_write_multiple_registers>:


nmbs_error handle_write_multiple_registers(uint16_t address, uint16_t quantity, const uint16_t* registers, void *arg) {
 8000948:	b480      	push	{r7}
 800094a:	b087      	sub	sp, #28
 800094c:	af00      	add	r7, sp, #0
 800094e:	60ba      	str	r2, [r7, #8]
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4603      	mov	r3, r0
 8000954:	81fb      	strh	r3, [r7, #14]
 8000956:	460b      	mov	r3, r1
 8000958:	81bb      	strh	r3, [r7, #12]
  if (address + quantity > REGS_ADDR_MAX + 1)
 800095a:	89fa      	ldrh	r2, [r7, #14]
 800095c:	89bb      	ldrh	r3, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	2b21      	cmp	r3, #33	; 0x21
 8000962:	dd01      	ble.n	8000968 <handle_write_multiple_registers+0x20>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8000964:	2302      	movs	r3, #2
 8000966:	e015      	b.n	8000994 <handle_write_multiple_registers+0x4c>

  // Write registers values to our server_registers
  for (int i = 0; i < quantity; i++)
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	e00d      	b.n	800098a <handle_write_multiple_registers+0x42>
    server_registers[address + i] = registers[i];
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	441a      	add	r2, r3
 8000976:	89f9      	ldrh	r1, [r7, #14]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	440b      	add	r3, r1
 800097c:	8811      	ldrh	r1, [r2, #0]
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <handle_write_multiple_registers+0x58>)
 8000980:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < quantity; i++)
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	89bb      	ldrh	r3, [r7, #12]
 800098c:	697a      	ldr	r2, [r7, #20]
 800098e:	429a      	cmp	r2, r3
 8000990:	dbed      	blt.n	800096e <handle_write_multiple_registers+0x26>

  return NMBS_ERROR_NONE;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	371c      	adds	r7, #28
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	200001d0 	.word	0x200001d0

080009a4 <main>:
/*main function -----------------------------------------------*/
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80009aa:	af00      	add	r7, sp, #0
	uint32_t ticks;
	GPIO_ConfigTypedef_t uartPin;
	UART_ConfigTypedef_t uart2 = {0};
 80009ac:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
	uint8_t txt[100] = {0};
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80009c0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80009c4:	2260      	movs	r2, #96	; 0x60
 80009c6:	2100      	movs	r1, #0
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fdcd 	bl	8003568 <memset>
	uint8_t rx[10] = {0};
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80009d4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	809a      	strh	r2, [r3, #4]


	//PD12->salida
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80009de:	4b77      	ldr	r3, [pc, #476]	; (8000bbc <main+0x218>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a76      	ldr	r2, [pc, #472]	; (8000bbc <main+0x218>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER &=~ GPIO_MODER_MODE12;
 80009ea:	4b75      	ldr	r3, [pc, #468]	; (8000bc0 <main+0x21c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a74      	ldr	r2, [pc, #464]	; (8000bc0 <main+0x21c>)
 80009f0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80009f4:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE12_0;
 80009f6:	4b72      	ldr	r3, [pc, #456]	; (8000bc0 <main+0x21c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a71      	ldr	r2, [pc, #452]	; (8000bc0 <main+0x21c>)
 80009fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a00:	6013      	str	r3, [r2, #0]
	/**
	 * ticks = 16MHz * 0.001
	 * ticks = 16000
	 */
	ticks = 16000;
 8000a02:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000a06:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	SysTick_Init(ticks);
 8000a0a:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8000a0e:	f000 facb 	bl	8000fa8 <SysTick_Init>

	ticks = GetTicks();
 8000a12:	f000 faf9 	bl	8001008 <GetTicks>
 8000a16:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	/*Lcd init -----------------------------------*/
	/**
	 * PA2 ->TX
	 * PA3 ->RX
	 */
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000a1a:	4b68      	ldr	r3, [pc, #416]	; (8000bbc <main+0x218>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a67      	ldr	r2, [pc, #412]	; (8000bbc <main+0x218>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
	uartPin.pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000a26:	230c      	movs	r3, #12
 8000a28:	f8a7 3200 	strh.w	r3, [r7, #512]	; 0x200
	uartPin.mode = GPIO_MODE_AF;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	f887 3202 	strb.w	r3, [r7, #514]	; 0x202
	uartPin.pullup = GPIO_PU_NONE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
	uartPin.speed = GPIO_SPEED_HIGH;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
	uartPin.outputType = GPIO_OT_PP;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
	uartPin.AF = 0x7U;
 8000a44:	2307      	movs	r3, #7
 8000a46:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
	BSP_PinInit(GPIOA, &uartPin);
 8000a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000a4e:	4619      	mov	r1, r3
 8000a50:	485c      	ldr	r0, [pc, #368]	; (8000bc4 <main+0x220>)
 8000a52:	f000 f9d6 	bl	8000e02 <BSP_PinInit>
	 * USARTDIV = 8.68055´
	 * USARTFRACTION = 0.6805 * 16 = 10.888888 -> 11->B
	 * 8 -> 0x8
	 * BRR = 0x8B
	 */
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000a56:	4b59      	ldr	r3, [pc, #356]	; (8000bbc <main+0x218>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a58      	ldr	r2, [pc, #352]	; (8000bbc <main+0x218>)
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40

	uart2.baud = 115200;
 8000a62:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a66:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	uart2.mode = UART_TE_EN | UART_RE_EN;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	f887 31fd 	strb.w	r3, [r7, #509]	; 0x1fd
	uart2.stopBit = UART_STOP_1B;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f8a7 31f0 	strh.w	r3, [r7, #496]	; 0x1f0
	uart2.over = UART_OVER_16;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f887 31f3 	strb.w	r3, [r7, #499]	; 0x1f3
	uart2.parity = UART_PARITY_NONE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f887 31f2 	strb.w	r3, [r7, #498]	; 0x1f2
	uart2.wordLength = UART_DATA_8B;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f887 31fc 	strb.w	r3, [r7, #508]	; 0x1fc
	uart2.pclk = 16E+6;
 8000a88:	4b4f      	ldr	r3, [pc, #316]	; (8000bc8 <main+0x224>)
 8000a8a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

	UART_Init(USART2, &uart2);
 8000a8e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8000a92:	4619      	mov	r1, r3
 8000a94:	484d      	ldr	r0, [pc, #308]	; (8000bcc <main+0x228>)
 8000a96:	f000 fad5 	bl	8001044 <UART_Init>

	//HAL -> HIGH ABSTRACTION LAYER
	printf("hola mundo desde usart2\r\n");
 8000a9a:	484d      	ldr	r0, [pc, #308]	; (8000bd0 <main+0x22c>)
 8000a9c:	f002 fdda 	bl	8003654 <puts>

	//tx
	sprintf((char*)txt, "esto es una prueba de la funcion tx\r\n");
 8000aa0:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000aa4:	494b      	ldr	r1, [pc, #300]	; (8000bd4 <main+0x230>)
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 fddc 	bl	8003664 <siprintf>
	UART_SendData(USART2, txt, strlen((char*)txt), 100);
 8000aac:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fb9d 	bl	80001f0 <strlen>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 8000abe:	2364      	movs	r3, #100	; 0x64
 8000ac0:	4842      	ldr	r0, [pc, #264]	; (8000bcc <main+0x228>)
 8000ac2:	f000 fd3d 	bl	8001540 <UART_SendData>
	//rx
	UART_ReceiveData(USART2, rx, 3, 5000);
 8000ac6:	f507 71c0 	add.w	r1, r7, #384	; 0x180
 8000aca:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ace:	2203      	movs	r2, #3
 8000ad0:	483e      	ldr	r0, [pc, #248]	; (8000bcc <main+0x228>)
 8000ad2:	f000 fd86 	bl	80015e2 <UART_ReceiveData>
	sprintf((char*)txt, "rx:%s\r\n", rx);
 8000ad6:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8000ada:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000ade:	493e      	ldr	r1, [pc, #248]	; (8000bd8 <main+0x234>)
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fdbf 	bl	8003664 <siprintf>
	UART_SendData(USART2, txt, strlen((char*)txt), 100);
 8000ae6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fb80 	bl	80001f0 <strlen>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	f507 71c6 	add.w	r1, r7, #396	; 0x18c
 8000af8:	2364      	movs	r3, #100	; 0x64
 8000afa:	4834      	ldr	r0, [pc, #208]	; (8000bcc <main+0x228>)
 8000afc:	f000 fd20 	bl	8001540 <UART_SendData>
	/**
	 * RING BUFFER
	 */
	lwrb_init(&rxBuff, rx_data, 64);
 8000b00:	2240      	movs	r2, #64	; 0x40
 8000b02:	4936      	ldr	r1, [pc, #216]	; (8000bdc <main+0x238>)
 8000b04:	4836      	ldr	r0, [pc, #216]	; (8000be0 <main+0x23c>)
 8000b06:	f000 fdd1 	bl	80016ac <lwrb_init>
	/**
	 * INTERRUPCION USART RXNE
	 */
	USART2->CR1 |= USART_CR1_RXNEIE;
 8000b0a:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <main+0x228>)
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	4a2f      	ldr	r2, [pc, #188]	; (8000bcc <main+0x228>)
 8000b10:	f043 0320 	orr.w	r3, r3, #32
 8000b14:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART2_IRQn);
 8000b16:	2026      	movs	r0, #38	; 0x26
 8000b18:	f7ff fd44 	bl	80005a4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART2_IRQn, 2);
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	2026      	movs	r0, #38	; 0x26
 8000b20:	f7ff fd5e 	bl	80005e0 <__NVIC_SetPriority>

	/**
	 * MOBDBUS
	 */
	nmbs_platform_conf platform_conf = {0};
 8000b24:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
	platform_conf.transport = NMBS_TRANSPORT_RTU;
 8000b32:	2301      	movs	r3, #1
 8000b34:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
	platform_conf.read = read_serial;
 8000b38:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <main+0x240>)
 8000b3a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	platform_conf.write = write_serial;
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <main+0x244>)
 8000b40:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	platform_conf.arg = NULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

	nmbs_callbacks callbacks = {0};
 8000b4a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000b4e:	2224      	movs	r2, #36	; 0x24
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 fd08 	bl	8003568 <memset>
	callbacks.read_coils = handle_read_coils;
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <main+0x248>)
 8000b5a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	callbacks.write_multiple_coils = handle_write_multiple_coils;
 8000b5e:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <main+0x24c>)
 8000b60:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	callbacks.read_holding_registers = handler_read_holding_registers;
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <main+0x250>)
 8000b66:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
	callbacks.write_multiple_registers = handle_write_multiple_registers;
 8000b6a:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <main+0x254>)
 8000b6c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

	// Create the modbus server
	nmbs_t nmbs;
	nmbs_error err = nmbs_server_create(&nmbs, RTU_SERVER_ADDRESS, &platform_conf, &callbacks);
 8000b70:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000b74:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8000b78:	4638      	mov	r0, r7
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	f002 fc30 	bl	80033e0 <nmbs_server_create>
 8000b80:	4603      	mov	r3, r0
 8000b82:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
	if (err != NMBS_ERROR_NONE) {
 8000b86:	f997 320b 	ldrsb.w	r3, [r7, #523]	; 0x20b
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d000      	beq.n	8000b90 <main+0x1ec>
	   while(1){
 8000b8e:	e7fe      	b.n	8000b8e <main+0x1ea>

	   }
	}
	nmbs_set_read_timeout(&nmbs, 1000);
 8000b90:	463b      	mov	r3, r7
 8000b92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 f83c 	bl	8001c14 <nmbs_set_read_timeout>
	nmbs_set_byte_timeout(&nmbs, 100);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	2164      	movs	r1, #100	; 0x64
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 f846 	bl	8001c32 <nmbs_set_byte_timeout>
	//
    /* Loop forever */
	for(;;){
		//leer adc
		err = nmbs_server_poll(&nmbs);
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 fc4c 	bl	8003446 <nmbs_server_poll>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
		//mostar en la pantalla contenido
		delay_ms(100);
 8000bb4:	2064      	movs	r0, #100	; 0x64
 8000bb6:	f000 fa11 	bl	8000fdc <delay_ms>
		err = nmbs_server_poll(&nmbs);
 8000bba:	e7f4      	b.n	8000ba6 <main+0x202>
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020c00 	.word	0x40020c00
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	00f42400 	.word	0x00f42400
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	08004650 	.word	0x08004650
 8000bd4:	0800466c 	.word	0x0800466c
 8000bd8:	08004694 	.word	0x08004694
 8000bdc:	20000094 	.word	0x20000094
 8000be0:	20000080 	.word	0x20000080
 8000be4:	08000669 	.word	0x08000669
 8000be8:	080006bd 	.word	0x080006bd
 8000bec:	080006e9 	.word	0x080006e9
 8000bf0:	080007ed 	.word	0x080007ed
 8000bf4:	080008ed 	.word	0x080008ed
 8000bf8:	08000949 	.word	0x08000949

08000bfc <SysTick_Handler>:
#include "SysTick.h"
#include "lwrb.h"

extern lwrb_t rxBuff;

void SysTick_Handler(void){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	TicksInc(1);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f000 fa0d 	bl	8001020 <TicksInc>
	//todo

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <USART2_IRQHandler>:
void USART2_IRQHandler(void){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
	uint8_t ch;
	if(USART2->SR & USART_SR_RXNE){
 8000c12:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <USART2_IRQHandler+0x30>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0320 	and.w	r3, r3, #32
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d009      	beq.n	8000c32 <USART2_IRQHandler+0x26>
		//LEER EL DATO RECIBIDO
		ch = USART2->DR;
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <USART2_IRQHandler+0x30>)
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	71fb      	strb	r3, [r7, #7]
		lwrb_write(&rxBuff, &ch, 1);
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	2201      	movs	r2, #1
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <USART2_IRQHandler+0x34>)
 8000c2e:	f000 fd6e 	bl	800170e <lwrb_write>
	}
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	20000080 	.word	0x20000080

08000c44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	e00a      	b.n	8000c6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c56:	f3af 8000 	nop.w
 8000c5a:	4601      	mov	r1, r0
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	1c5a      	adds	r2, r3, #1
 8000c60:	60ba      	str	r2, [r7, #8]
 8000c62:	b2ca      	uxtb	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	dbf0      	blt.n	8000c56 <_read+0x12>
  }

  return len;
 8000c74:	687b      	ldr	r3, [r7, #4]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b086      	sub	sp, #24
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	e009      	b.n	8000ca4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fccb 	bl	8000634 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697a      	ldr	r2, [r7, #20]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbf1      	blt.n	8000c90 <_write+0x12>
  }
  return len;
 8000cac:	687b      	ldr	r3, [r7, #4]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_close>:

int _close(int file)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	b083      	sub	sp, #12
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
 8000cd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cde:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr

08000cee <_isatty>:

int _isatty(int file)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b083      	sub	sp, #12
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <_sbrk+0x5c>)
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <_sbrk+0x60>)
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <_sbrk+0x64>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <_sbrk+0x64>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <_sbrk+0x68>)
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <_sbrk+0x64>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d207      	bcs.n	8000d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d50:	f002 fbd2 	bl	80034f8 <__errno>
 8000d54:	4603      	mov	r3, r0
 8000d56:	220c      	movs	r2, #12
 8000d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5e:	e009      	b.n	8000d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a05      	ldr	r2, [pc, #20]	; (8000d84 <_sbrk+0x64>)
 8000d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d72:	68fb      	ldr	r3, [r7, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20018000 	.word	0x20018000
 8000d80:	00000400 	.word	0x00000400
 8000d84:	20000210 	.word	0x20000210
 8000d88:	20000228 	.word	0x20000228

08000d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db0:	480d      	ldr	r0, [pc, #52]	; (8000de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000db4:	f7ff ffea 	bl	8000d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <LoopForever+0x6>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	; (8000df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <LoopForever+0xe>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	; (8000dfc <LoopForever+0x16>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dde:	f002 fb91 	bl	8003504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de2:	f7ff fddf 	bl	80009a4 <main>

08000de6 <LoopForever>:

LoopForever:
  b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   r0, =_estack
 8000de8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000df4:	08004744 	.word	0x08004744
  ldr r2, =_sbss
 8000df8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000dfc:	20000228 	.word	0x20000228

08000e00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>

08000e02 <BSP_PinInit>:
}
/**
 * HAL (high abtractions layer)
 * LL
 */
void BSP_PinInit(GPIO_TypeDef *P,GPIO_ConfigTypedef_t *config){
 8000e02:	b480      	push	{r7}
 8000e04:	b087      	sub	sp, #28
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
	uint32_t iocurrent = 0x00U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
	uint32_t temp;

	for(position = 0; position <16; position++){
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	e0bb      	b.n	8000f92 <BSP_PinInit+0x190>
		ioposition = 0x1U<<position;
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	613b      	str	r3, [r7, #16]

		iocurrent = (uint32_t)(config->pin) & ioposition;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]

		if(iocurrent == ioposition){
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	f040 80a9 	bne.w	8000f8c <BSP_PinInit+0x18a>
			//Modo
			if(((config->mode & GPIO_MODE) == GPIO_MODE_OUTPUT) || ((config->mode & GPIO_MODE) == GPIO_MODE_AF)){
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	789b      	ldrb	r3, [r3, #2]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d005      	beq.n	8000e52 <BSP_PinInit+0x50>
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	789b      	ldrb	r3, [r3, #2]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d12b      	bne.n	8000eaa <BSP_PinInit+0xa8>
				//io speed
				P->OSPEEDR &=~(0x3<<(position * 2));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	0052      	lsls	r2, r2, #1
 8000e5a:	2103      	movs	r1, #3
 8000e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e60:	43d2      	mvns	r2, r2
 8000e62:	401a      	ands	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	609a      	str	r2, [r3, #8]
				P->OSPEEDR |= config->speed<< (position * 2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	7912      	ldrb	r2, [r2, #4]
 8000e70:	4611      	mov	r1, r2
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	0052      	lsls	r2, r2, #1
 8000e76:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
				//io type
				P->OTYPER &=~ (1<<(position ));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2101      	movs	r1, #1
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	43d2      	mvns	r2, r2
 8000e8e:	401a      	ands	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	605a      	str	r2, [r3, #4]
				P->OTYPER |= config->outputType<<position;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	78d2      	ldrb	r2, [r2, #3]
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	605a      	str	r2, [r3, #4]
			}
			if((config->mode & GPIO_MODE) != GPIO_MODE_ANALOG){
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	789b      	ldrb	r3, [r3, #2]
 8000eae:	f003 0303 	and.w	r3, r3, #3
 8000eb2:	2b03      	cmp	r3, #3
 8000eb4:	d016      	beq.n	8000ee4 <BSP_PinInit+0xe2>
				P->PUPDR &=~ (0x3U<< (position * 2));
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68da      	ldr	r2, [r3, #12]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2103      	movs	r1, #3
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	60da      	str	r2, [r3, #12]
				P->PUPDR |= config->pullup<< (position * 2);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	7952      	ldrb	r2, [r2, #5]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	0052      	lsls	r2, r2, #1
 8000eda:	fa01 f202 	lsl.w	r2, r1, r2
 8000ede:	431a      	orrs	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	60da      	str	r2, [r3, #12]
			}
			if((config->mode & GPIO_MODE)  == GPIO_MODE_AF){
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	789b      	ldrb	r3, [r3, #2]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d125      	bne.n	8000f3c <BSP_PinInit+0x13a>
				//update actualizarse en una segunda version
				temp = P->AFR[position >> 3];  // position / 2^3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	60bb      	str	r3, [r7, #8]
				temp &=~(0xFU<<((position & 0xF) * 4));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f003 030f 	and.w	r3, r3, #15
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	4013      	ands	r3, r2
 8000f12:	60bb      	str	r3, [r7, #8]
				temp |= ((config->AF & 0xFU)<<((position & 0xF) * 4));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	799b      	ldrb	r3, [r3, #6]
 8000f18:	f003 020f 	and.w	r2, r3, #15
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	60bb      	str	r3, [r7, #8]
				P->AFR[position>>3] = temp;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	08da      	lsrs	r2, r3, #3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3208      	adds	r2, #8
 8000f36:	68b9      	ldr	r1, [r7, #8]
 8000f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
			if((config->mode &GPIO_MODE) == GPIO_MODE_ANALOG){
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	789b      	ldrb	r3, [r3, #2]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d10a      	bne.n	8000f5e <BSP_PinInit+0x15c>
				P->PUPDR &=~ (0x3U<<(2 *position));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	2103      	movs	r1, #3
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	401a      	ands	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	60da      	str	r2, [r3, #12]
			}
			P->MODER &=~ (0x3u<<(position * 2));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	2103      	movs	r1, #3
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	601a      	str	r2, [r3, #0]
			P->MODER |= config->mode << (position * 2);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	7892      	ldrb	r2, [r2, #2]
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	0052      	lsls	r2, r2, #1
 8000f82:	fa01 f202 	lsl.w	r2, r1, r2
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	601a      	str	r2, [r3, #0]
	for(position = 0; position <16; position++){
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	f67f af40 	bls.w	8000e1a <BSP_PinInit+0x18>
		}
	}
	return;
 8000f9a:	bf00      	nop
}
 8000f9c:	371c      	adds	r7, #28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <SysTick_Init>:
#include "SysTick.h"

volatile uint32_t uwTicks = 0;


void SysTick_Init(uint32_t ticks){
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	SysTick->CTRL = 0;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <SysTick_Init+0x30>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]

	SysTick->LOAD = ticks - 1;
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <SysTick_Init+0x30>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	6053      	str	r3, [r2, #4]

	SysTick->VAL = 0;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <SysTick_Init+0x30>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_CLKSOURCE_Msk;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Init+0x30>)
 8000fc6:	2207      	movs	r2, #7
 8000fc8:	601a      	str	r2, [r3, #0]

	return;
 8000fca:	bf00      	nop
}
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <delay_ms>:

void delay_ms(uint32_t delay){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
//	SysTick->VAL = 0;
//
//	for(uint32_t i = 0; i <delay; i++){
//		while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0); //1ms
//	}
	uint32_t tickStart = GetTicks();
 8000fe4:	f000 f810 	bl	8001008 <GetTicks>
 8000fe8:	60f8      	str	r0, [r7, #12]
	uint32_t wait = delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60bb      	str	r3, [r7, #8]

	while((GetTicks() - tickStart) < wait);
 8000fee:	bf00      	nop
 8000ff0:	f000 f80a 	bl	8001008 <GetTicks>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d8f7      	bhi.n	8000ff0 <delay_ms+0x14>
	return;
 8001000:	bf00      	nop
}
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <GetTicks>:

uint32_t GetTicks(void){
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
	return (uint32_t)uwTicks;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <GetTicks+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000214 	.word	0x20000214

08001020 <TicksInc>:

void TicksInc(uint32_t inc){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	uwTicks += inc;
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <TicksInc+0x20>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	4a03      	ldr	r2, [pc, #12]	; (8001040 <TicksInc+0x20>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	20000214 	.word	0x20000214

08001044 <UART_Init>:
 *      Author: jeffr
 */

#include "UART.h"

void UART_Init(USART_TypeDef *USART, UART_ConfigTypedef_t *config){
 8001044:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001048:	b0be      	sub	sp, #248	; 0xf8
 800104a:	af00      	add	r7, sp, #0
 800104c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8001050:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0


	//bits de parada
//	USART->CR2 &=~ USART_CR2_STOP;
//	USART->CR2 |= config->stopBit << USART_CR2_STOP_Pos;
	MODIFY_REG(USART->CR2, USART_CR2_STOP, config->stopBit);
 8001054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800105e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	431a      	orrs	r2, r3
 8001066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800106a:	611a      	str	r2, [r3, #16]

	//M->
	USART->CR1 &=~ USART_CR1_M;
 800106c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800107a:	60da      	str	r2, [r3, #12]
	USART->CR1 |= config->wordLength<<12;
 800107c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001086:	7b1b      	ldrb	r3, [r3, #12]
 8001088:	031b      	lsls	r3, r3, #12
 800108a:	431a      	orrs	r2, r3
 800108c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001090:	60da      	str	r2, [r3, #12]

	//paridad
	USART->CR1 &=~ (USART_CR1_PCE | USART_CR1_PS);
 8001092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800109c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010a0:	60da      	str	r2, [r3, #12]
	USART->CR1 |= config->parity <<9;
 80010a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80010ac:	789b      	ldrb	r3, [r3, #2]
 80010ae:	025b      	lsls	r3, r3, #9
 80010b0:	431a      	orrs	r2, r3
 80010b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010b6:	60da      	str	r2, [r3, #12]

	//modo
	USART->CR1 &=~ (USART_CR1_RE | USART_CR1_TE);
 80010b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	f023 020c 	bic.w	r2, r3, #12
 80010c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010c6:	60da      	str	r2, [r3, #12]
	USART->CR1 |= config->mode;
 80010c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80010d2:	7b5b      	ldrb	r3, [r3, #13]
 80010d4:	431a      	orrs	r2, r3
 80010d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010da:	60da      	str	r2, [r3, #12]

	//OVER
	USART->CR1 &=~ USART_CR1_OVER8;
 80010dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80010e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010ea:	60da      	str	r2, [r3, #12]
	USART->CR1 |= config->over <<16;
 80010ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80010f0:	68da      	ldr	r2, [r3, #12]
 80010f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80010f6:	78db      	ldrb	r3, [r3, #3]
 80010f8:	041b      	lsls	r3, r3, #16
 80010fa:	431a      	orrs	r2, r3
 80010fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001100:	60da      	str	r2, [r3, #12]


	//BRR
	if(config->over == UART_OVER_8){
 8001102:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001106:	78db      	ldrb	r3, [r3, #3]
 8001108:	2b01      	cmp	r3, #1
 800110a:	f040 8109 	bne.w	8001320 <UART_Init+0x2dc>
		USART->BRR = UART_BRR_SAMPLING8(config->pclk, config->baud);
 800110e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2200      	movs	r2, #0
 8001116:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800111a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800111e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001122:	4622      	mov	r2, r4
 8001124:	462b      	mov	r3, r5
 8001126:	1891      	adds	r1, r2, r2
 8001128:	65b9      	str	r1, [r7, #88]	; 0x58
 800112a:	415b      	adcs	r3, r3
 800112c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800112e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001132:	4621      	mov	r1, r4
 8001134:	eb12 0801 	adds.w	r8, r2, r1
 8001138:	4629      	mov	r1, r5
 800113a:	eb43 0901 	adc.w	r9, r3, r1
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	f04f 0300 	mov.w	r3, #0
 8001146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800114a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800114e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001152:	4690      	mov	r8, r2
 8001154:	4699      	mov	r9, r3
 8001156:	4623      	mov	r3, r4
 8001158:	eb18 0303 	adds.w	r3, r8, r3
 800115c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001160:	462b      	mov	r3, r5
 8001162:	eb49 0303 	adc.w	r3, r9, r3
 8001166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800116a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2200      	movs	r2, #0
 8001172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001176:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800117a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800117e:	460b      	mov	r3, r1
 8001180:	18db      	adds	r3, r3, r3
 8001182:	653b      	str	r3, [r7, #80]	; 0x50
 8001184:	4613      	mov	r3, r2
 8001186:	eb42 0303 	adc.w	r3, r2, r3
 800118a:	657b      	str	r3, [r7, #84]	; 0x54
 800118c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001190:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001194:	f7ff f884 	bl	80002a0 <__aeabi_uldivmod>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4b5f      	ldr	r3, [pc, #380]	; (800131c <UART_Init+0x2d8>)
 800119e:	fba3 2302 	umull	r2, r3, r3, r2
 80011a2:	095b      	lsrs	r3, r3, #5
 80011a4:	011c      	lsls	r4, r3, #4
 80011a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80011b2:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80011b6:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80011ba:	4642      	mov	r2, r8
 80011bc:	464b      	mov	r3, r9
 80011be:	1891      	adds	r1, r2, r2
 80011c0:	64b9      	str	r1, [r7, #72]	; 0x48
 80011c2:	415b      	adcs	r3, r3
 80011c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80011c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80011ca:	4641      	mov	r1, r8
 80011cc:	eb12 0a01 	adds.w	sl, r2, r1
 80011d0:	4649      	mov	r1, r9
 80011d2:	eb43 0b01 	adc.w	fp, r3, r1
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	f04f 0300 	mov.w	r3, #0
 80011de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80011e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80011e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80011ea:	4692      	mov	sl, r2
 80011ec:	469b      	mov	fp, r3
 80011ee:	4643      	mov	r3, r8
 80011f0:	eb1a 0303 	adds.w	r3, sl, r3
 80011f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80011f8:	464b      	mov	r3, r9
 80011fa:	eb4b 0303 	adc.w	r3, fp, r3
 80011fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001202:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800120e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001212:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001216:	460b      	mov	r3, r1
 8001218:	18db      	adds	r3, r3, r3
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
 800121c:	4613      	mov	r3, r2
 800121e:	eb42 0303 	adc.w	r3, r2, r3
 8001222:	647b      	str	r3, [r7, #68]	; 0x44
 8001224:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001228:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800122c:	f7ff f838 	bl	80002a0 <__aeabi_uldivmod>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4611      	mov	r1, r2
 8001236:	4b39      	ldr	r3, [pc, #228]	; (800131c <UART_Init+0x2d8>)
 8001238:	fba3 2301 	umull	r2, r3, r3, r1
 800123c:	095b      	lsrs	r3, r3, #5
 800123e:	2264      	movs	r2, #100	; 0x64
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	1acb      	subs	r3, r1, r3
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800124c:	4b33      	ldr	r3, [pc, #204]	; (800131c <UART_Init+0x2d8>)
 800124e:	fba3 2302 	umull	r2, r3, r3, r2
 8001252:	095b      	lsrs	r3, r3, #5
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800125a:	441c      	add	r4, r3
 800125c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	2200      	movs	r2, #0
 8001264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001268:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800126c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001270:	4642      	mov	r2, r8
 8001272:	464b      	mov	r3, r9
 8001274:	1891      	adds	r1, r2, r2
 8001276:	63b9      	str	r1, [r7, #56]	; 0x38
 8001278:	415b      	adcs	r3, r3
 800127a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800127c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001280:	4641      	mov	r1, r8
 8001282:	1851      	adds	r1, r2, r1
 8001284:	6339      	str	r1, [r7, #48]	; 0x30
 8001286:	4649      	mov	r1, r9
 8001288:	414b      	adcs	r3, r1
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001298:	4659      	mov	r1, fp
 800129a:	00cb      	lsls	r3, r1, #3
 800129c:	4651      	mov	r1, sl
 800129e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012a2:	4651      	mov	r1, sl
 80012a4:	00ca      	lsls	r2, r1, #3
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	4642      	mov	r2, r8
 80012ae:	189b      	adds	r3, r3, r2
 80012b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80012b4:	464b      	mov	r3, r9
 80012b6:	460a      	mov	r2, r1
 80012b8:	eb42 0303 	adc.w	r3, r2, r3
 80012bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80012c0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80012cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80012d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80012d4:	460b      	mov	r3, r1
 80012d6:	18db      	adds	r3, r3, r3
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012da:	4613      	mov	r3, r2
 80012dc:	eb42 0303 	adc.w	r3, r2, r3
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80012e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80012ea:	f7fe ffd9 	bl	80002a0 <__aeabi_uldivmod>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <UART_Init+0x2d8>)
 80012f4:	fba3 1302 	umull	r1, r3, r3, r2
 80012f8:	095b      	lsrs	r3, r3, #5
 80012fa:	2164      	movs	r1, #100	; 0x64
 80012fc:	fb01 f303 	mul.w	r3, r1, r3
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	3332      	adds	r3, #50	; 0x32
 8001306:	4a05      	ldr	r2, [pc, #20]	; (800131c <UART_Init+0x2d8>)
 8001308:	fba2 2303 	umull	r2, r3, r2, r3
 800130c:	095b      	lsrs	r3, r3, #5
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	18e2      	adds	r2, r4, r3
 8001314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	e102      	b.n	8001522 <UART_Init+0x4de>
 800131c:	51eb851f 	.word	0x51eb851f
	}else{
		USART->BRR = UART_BRR_SAMPLING16(config->pclk, config->baud);
 8001320:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2200      	movs	r2, #0
 8001328:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800132c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001330:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001334:	4642      	mov	r2, r8
 8001336:	464b      	mov	r3, r9
 8001338:	1891      	adds	r1, r2, r2
 800133a:	6239      	str	r1, [r7, #32]
 800133c:	415b      	adcs	r3, r3
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
 8001340:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001344:	4641      	mov	r1, r8
 8001346:	1854      	adds	r4, r2, r1
 8001348:	4649      	mov	r1, r9
 800134a:	eb43 0501 	adc.w	r5, r3, r1
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	00eb      	lsls	r3, r5, #3
 8001358:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800135c:	00e2      	lsls	r2, r4, #3
 800135e:	4614      	mov	r4, r2
 8001360:	461d      	mov	r5, r3
 8001362:	4643      	mov	r3, r8
 8001364:	18e3      	adds	r3, r4, r3
 8001366:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800136a:	464b      	mov	r3, r9
 800136c:	eb45 0303 	adc.w	r3, r5, r3
 8001370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001374:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001380:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001390:	4629      	mov	r1, r5
 8001392:	008b      	lsls	r3, r1, #2
 8001394:	4621      	mov	r1, r4
 8001396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800139a:	4621      	mov	r1, r4
 800139c:	008a      	lsls	r2, r1, #2
 800139e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80013a2:	f7fe ff7d 	bl	80002a0 <__aeabi_uldivmod>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4b64      	ldr	r3, [pc, #400]	; (800153c <UART_Init+0x4f8>)
 80013ac:	fba3 2302 	umull	r2, r3, r3, r2
 80013b0:	095b      	lsrs	r3, r3, #5
 80013b2:	011c      	lsls	r4, r3, #4
 80013b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80013c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80013c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80013c8:	4642      	mov	r2, r8
 80013ca:	464b      	mov	r3, r9
 80013cc:	1891      	adds	r1, r2, r2
 80013ce:	61b9      	str	r1, [r7, #24]
 80013d0:	415b      	adcs	r3, r3
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013d8:	4641      	mov	r1, r8
 80013da:	1851      	adds	r1, r2, r1
 80013dc:	6139      	str	r1, [r7, #16]
 80013de:	4649      	mov	r1, r9
 80013e0:	414b      	adcs	r3, r1
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80013f0:	4659      	mov	r1, fp
 80013f2:	00cb      	lsls	r3, r1, #3
 80013f4:	4651      	mov	r1, sl
 80013f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013fa:	4651      	mov	r1, sl
 80013fc:	00ca      	lsls	r2, r1, #3
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	4603      	mov	r3, r0
 8001404:	4642      	mov	r2, r8
 8001406:	189b      	adds	r3, r3, r2
 8001408:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800140c:	464b      	mov	r3, r9
 800140e:	460a      	mov	r2, r1
 8001410:	eb42 0303 	adc.w	r3, r2, r3
 8001414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001418:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	67bb      	str	r3, [r7, #120]	; 0x78
 8001422:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001430:	4649      	mov	r1, r9
 8001432:	008b      	lsls	r3, r1, #2
 8001434:	4641      	mov	r1, r8
 8001436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800143a:	4641      	mov	r1, r8
 800143c:	008a      	lsls	r2, r1, #2
 800143e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001442:	f7fe ff2d 	bl	80002a0 <__aeabi_uldivmod>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4b3c      	ldr	r3, [pc, #240]	; (800153c <UART_Init+0x4f8>)
 800144c:	fba3 1302 	umull	r1, r3, r3, r2
 8001450:	095b      	lsrs	r3, r3, #5
 8001452:	2164      	movs	r1, #100	; 0x64
 8001454:	fb01 f303 	mul.w	r3, r1, r3
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	011b      	lsls	r3, r3, #4
 800145c:	3332      	adds	r3, #50	; 0x32
 800145e:	4a37      	ldr	r2, [pc, #220]	; (800153c <UART_Init+0x4f8>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	095b      	lsrs	r3, r3, #5
 8001466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800146a:	441c      	add	r4, r3
 800146c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2200      	movs	r2, #0
 8001474:	673b      	str	r3, [r7, #112]	; 0x70
 8001476:	677a      	str	r2, [r7, #116]	; 0x74
 8001478:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800147c:	4642      	mov	r2, r8
 800147e:	464b      	mov	r3, r9
 8001480:	1891      	adds	r1, r2, r2
 8001482:	60b9      	str	r1, [r7, #8]
 8001484:	415b      	adcs	r3, r3
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800148c:	4641      	mov	r1, r8
 800148e:	1851      	adds	r1, r2, r1
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	4649      	mov	r1, r9
 8001494:	414b      	adcs	r3, r1
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80014a4:	4659      	mov	r1, fp
 80014a6:	00cb      	lsls	r3, r1, #3
 80014a8:	4651      	mov	r1, sl
 80014aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014ae:	4651      	mov	r1, sl
 80014b0:	00ca      	lsls	r2, r1, #3
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	4642      	mov	r2, r8
 80014ba:	189b      	adds	r3, r3, r2
 80014bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80014be:	464b      	mov	r3, r9
 80014c0:	460a      	mov	r2, r1
 80014c2:	eb42 0303 	adc.w	r3, r2, r3
 80014c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80014c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	663b      	str	r3, [r7, #96]	; 0x60
 80014d2:	667a      	str	r2, [r7, #100]	; 0x64
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80014e0:	4649      	mov	r1, r9
 80014e2:	008b      	lsls	r3, r1, #2
 80014e4:	4641      	mov	r1, r8
 80014e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80014ea:	4641      	mov	r1, r8
 80014ec:	008a      	lsls	r2, r1, #2
 80014ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80014f2:	f7fe fed5 	bl	80002a0 <__aeabi_uldivmod>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <UART_Init+0x4f8>)
 80014fc:	fba3 1302 	umull	r1, r3, r3, r2
 8001500:	095b      	lsrs	r3, r3, #5
 8001502:	2164      	movs	r1, #100	; 0x64
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	011b      	lsls	r3, r3, #4
 800150c:	3332      	adds	r3, #50	; 0x32
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <UART_Init+0x4f8>)
 8001510:	fba2 2303 	umull	r2, r3, r2, r3
 8001514:	095b      	lsrs	r3, r3, #5
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	18e2      	adds	r2, r4, r3
 800151c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001520:	609a      	str	r2, [r3, #8]
	}

	//habilitar el UART
	USART->CR1 |= USART_CR1_UE;
 8001522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800152c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001530:	60da      	str	r2, [r3, #12]
	return;
 8001532:	bf00      	nop
}
 8001534:	37f8      	adds	r7, #248	; 0xf8
 8001536:	46bd      	mov	sp, r7
 8001538:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800153c:	51eb851f 	.word	0x51eb851f

08001540 <UART_SendData>:
 * @param [USART]:
 * @param [pData]:
 * @param [len]:
 * @param [timeout]:
 */
uint8_t UART_SendData(USART_TypeDef *USART, uint8_t *pData, uint16_t len, uint32_t timeout){
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	4613      	mov	r3, r2
 800154e:	80fb      	strh	r3, [r7, #6]
	uint32_t tickStart = GetTicks();
 8001550:	f7ff fd5a 	bl	8001008 <GetTicks>
 8001554:	6178      	str	r0, [r7, #20]
	uint16_t *data;
	while((GetTicks() - tickStart)<= timeout){
 8001556:	e037      	b.n	80015c8 <UART_SendData+0x88>
		//envío de datos
		if(USART->SR & USART_SR_TXE){
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001560:	2b00      	cmp	r3, #0
 8001562:	d031      	beq.n	80015c8 <UART_SendData+0x88>
			if(USART->CR1 & USART_CR1_M){	//9 bit de datos
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01b      	beq.n	80015a8 <UART_SendData+0x68>
				data = (uint16_t *) pData;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	613b      	str	r3, [r7, #16]
				USART->DR = *data & (0x1FF);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	605a      	str	r2, [r3, #4]
				//Verificar la paridad
				if(!(USART->CR1 & USART_CR1_PCE)){
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001588:	2b00      	cmp	r3, #0
 800158a:	d106      	bne.n	800159a <UART_SendData+0x5a>
					pData += 2;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	3302      	adds	r3, #2
 8001590:	60bb      	str	r3, [r7, #8]
					len -= 2;
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	3b02      	subs	r3, #2
 8001596:	80fb      	strh	r3, [r7, #6]
 8001598:	e011      	b.n	80015be <UART_SendData+0x7e>
				}else{
					pData += 1;
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	3301      	adds	r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
					len -= 1;
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	80fb      	strh	r3, [r7, #6]
 80015a6:	e00a      	b.n	80015be <UART_SendData+0x7e>
				}
			}else{							//8 bit de datos
				USART->DR = *pData & 0xFF;
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	605a      	str	r2, [r3, #4]
				pData++;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3301      	adds	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
				len -= 1;
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	80fb      	strh	r3, [r7, #6]
			}
			//se verifica len
			if(len == 0){
 80015be:	88fb      	ldrh	r3, [r7, #6]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <UART_SendData+0x88>
				return 0;					//envio correcto
 80015c4:	2300      	movs	r3, #0
 80015c6:	e008      	b.n	80015da <UART_SendData+0x9a>
	while((GetTicks() - tickStart)<= timeout){
 80015c8:	f7ff fd1e 	bl	8001008 <GetTicks>
 80015cc:	4602      	mov	r2, r0
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d2bf      	bcs.n	8001558 <UART_SendData+0x18>
			}
		}
	}
	return 1;
 80015d8:	2301      	movs	r3, #1
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <UART_ReceiveData>:


uint8_t UART_ReceiveData(USART_TypeDef *USART, uint8_t *pData, uint16_t len, uint32_t timeout){
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	4613      	mov	r3, r2
 80015f0:	80fb      	strh	r3, [r7, #6]
	uint32_t tickStart = GetTicks();
 80015f2:	f7ff fd09 	bl	8001008 <GetTicks>
 80015f6:	6178      	str	r0, [r7, #20]
	while((GetTicks() - tickStart) <= timeout){
 80015f8:	e04b      	b.n	8001692 <UART_ReceiveData+0xb0>
		if(USART->SR & USART_SR_RXNE){
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0320 	and.w	r3, r3, #32
 8001602:	2b00      	cmp	r3, #0
 8001604:	d045      	beq.n	8001692 <UART_ReceiveData+0xb0>
			if(USART->CR1 & USART_CR1_M){
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d020      	beq.n	8001654 <UART_ReceiveData+0x72>
				if(!(USART->CR1 & USART_CR1_PCE)){
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10e      	bne.n	800163c <UART_ReceiveData+0x5a>
					*((uint16_t*)pData) = USART->DR & 0x1FF;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	b29b      	uxth	r3, r3
 8001624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001628:	b29a      	uxth	r2, r3
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	801a      	strh	r2, [r3, #0]
					pData += 2;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3302      	adds	r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
					len -= 2;
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	3b02      	subs	r3, #2
 8001638:	80fb      	strh	r3, [r7, #6]
 800163a:	e025      	b.n	8001688 <UART_ReceiveData+0xa6>
				}else{
					*pData = USART->DR & 0xFF;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	b2da      	uxtb	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	701a      	strb	r2, [r3, #0]
					pData += 1;
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3301      	adds	r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
					len -= 1;
 800164c:	88fb      	ldrh	r3, [r7, #6]
 800164e:	3b01      	subs	r3, #1
 8001650:	80fb      	strh	r3, [r7, #6]
 8001652:	e019      	b.n	8001688 <UART_ReceiveData+0xa6>
				}
			}else{
				if(!(USART->CR1 & USART_CR1_PCE)){
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d105      	bne.n	800166c <UART_ReceiveData+0x8a>
					*pData = USART->DR & 0xFF;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	701a      	strb	r2, [r3, #0]
 800166a:	e007      	b.n	800167c <UART_ReceiveData+0x9a>

				}else{
					*pData = USART->DR & 0x7F;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001676:	b2da      	uxtb	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	701a      	strb	r2, [r3, #0]
				}
				pData += 1;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	3301      	adds	r3, #1
 8001680:	60bb      	str	r3, [r7, #8]
				len -= 1;
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	3b01      	subs	r3, #1
 8001686:	80fb      	strh	r3, [r7, #6]
			}
			if(len == 0){
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <UART_ReceiveData+0xb0>
				return 0;
 800168e:	2300      	movs	r3, #0
 8001690:	e008      	b.n	80016a4 <UART_ReceiveData+0xc2>
	while((GetTicks() - tickStart) <= timeout){
 8001692:	f7ff fcb9 	bl	8001008 <GetTicks>
 8001696:	4602      	mov	r2, r0
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d2ab      	bcs.n	80015fa <UART_ReceiveData+0x18>
			}
		}
	}
	return 1;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, size_t size) {
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d005      	beq.n	80016ca <lwrb_init+0x1e>
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <lwrb_init+0x1e>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <lwrb_init+0x22>
        return 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e019      	b.n	8001702 <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
    buff->size = size;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	330c      	adds	r3, #12
 80016e4:	61fb      	str	r3, [r7, #28]
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3308      	adds	r3, #8
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	601a      	str	r2, [r3, #0]
    return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	3724      	adds	r7, #36	; 0x24
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(lwrb_t* buff, const void* data, size_t btw) {
 800170e:	b580      	push	{r7, lr}
 8001710:	b08c      	sub	sp, #48	; 0x30
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
    size_t tocopy, free, buff_w_ptr;
    const uint8_t* d = data;
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00d      	beq.n	8001740 <lwrb_write+0x32>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d009      	beq.n	8001740 <lwrb_write+0x32>
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <lwrb_write+0x32>
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <lwrb_write+0x32>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <lwrb_write+0x36>
        return 0;
 8001740:	2300      	movs	r3, #0
 8001742:	e060      	b.n	8001806 <lwrb_write+0xf8>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f000 f8e2 	bl	800190e <lwrb_get_free>
 800174a:	6278      	str	r0, [r7, #36]	; 0x24
    btw = BUF_MIN(free, btw);
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	4293      	cmp	r3, r2
 8001752:	bf28      	it	cs
 8001754:	4613      	movcs	r3, r2
 8001756:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <lwrb_write+0x54>
        return 0;
 800175e:	2300      	movs	r3, #0
 8001760:	e051      	b.n	8001806 <lwrb_write+0xf8>
    }
    buff_w_ptr = LWRB_LOAD(buff->w, memory_order_acquire);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	330c      	adds	r3, #12
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f3bf 8f5b 	dmb	ish
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4293      	cmp	r3, r2
 8001782:	bf28      	it	cs
 8001784:	4613      	movcs	r3, r2
 8001786:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178e:	4413      	add	r3, r2
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001794:	4618      	mov	r0, r3
 8001796:	f001 fed9 	bl	800354c <memcpy>
    buff_w_ptr += tocopy;
 800179a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4413      	add	r3, r2
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    btw -= tocopy;
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00a      	beq.n	80017c6 <lwrb_write+0xb8>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	4413      	add	r3, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	4619      	mov	r1, r3
 80017be:	f001 fec5 	bl	800354c <memcpy>
        buff_w_ptr = btw;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d301      	bcc.n	80017d4 <lwrb_write+0xc6>
        buff_w_ptr = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    LWRB_STORE(buff->w, buff_w_ptr, memory_order_release);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	330c      	adds	r3, #12
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	f3bf 8f5b 	dmb	ish
 80017e6:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <lwrb_write+0xf2>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	69f9      	ldr	r1, [r7, #28]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	440a      	add	r2, r1
 80017fa:	2101      	movs	r1, #1
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	4798      	blx	r3
    return tocopy + btw;
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
}
 8001806:	4618      	mov	r0, r3
 8001808:	3730      	adds	r7, #48	; 0x30
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
lwrb_read(lwrb_t* buff, void* data, size_t btr) {
 800180e:	b580      	push	{r7, lr}
 8001810:	b08c      	sub	sp, #48	; 0x30
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
    size_t tocopy, full, buff_r_ptr;
    uint8_t* d = data;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d00d      	beq.n	8001840 <lwrb_read+0x32>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d009      	beq.n	8001840 <lwrb_read+0x32>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <lwrb_read+0x32>
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <lwrb_read+0x32>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <lwrb_read+0x36>
        return 0;
 8001840:	2300      	movs	r3, #0
 8001842:	e060      	b.n	8001906 <lwrb_read+0xf8>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 f8a3 	bl	8001990 <lwrb_get_full>
 800184a:	6278      	str	r0, [r7, #36]	; 0x24
    btr = BUF_MIN(full, btr);
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	4293      	cmp	r3, r2
 8001852:	bf28      	it	cs
 8001854:	4613      	movcs	r3, r2
 8001856:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <lwrb_read+0x54>
        return 0;
 800185e:	2300      	movs	r3, #0
 8001860:	e051      	b.n	8001906 <lwrb_read+0xf8>
    }
    buff_r_ptr = LWRB_LOAD(buff->r, memory_order_acquire);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3308      	adds	r3, #8
 8001866:	623b      	str	r3, [r7, #32]
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f3bf 8f5b 	dmb	ish
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4293      	cmp	r3, r2
 8001882:	bf28      	it	cs
 8001884:	4613      	movcs	r3, r2
 8001886:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188e:	4413      	add	r3, r2
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	4619      	mov	r1, r3
 8001894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001896:	f001 fe59 	bl	800354c <memcpy>
    buff_r_ptr += tocopy;
 800189a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4413      	add	r3, r2
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    btr -= tocopy;
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00a      	beq.n	80018c6 <lwrb_read+0xb8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 80018b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	18d0      	adds	r0, r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4619      	mov	r1, r3
 80018be:	f001 fe45 	bl	800354c <memcpy>
        buff_r_ptr = btr;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d301      	bcc.n	80018d4 <lwrb_read+0xc6>
        buff_r_ptr = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    LWRB_STORE(buff->r, buff_r_ptr, memory_order_release);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	3308      	adds	r3, #8
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	f3bf 8f5b 	dmb	ish
 80018e6:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d007      	beq.n	8001900 <lwrb_read+0xf2>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	69f9      	ldr	r1, [r7, #28]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	440a      	add	r2, r1
 80018fa:	2100      	movs	r1, #0
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	4798      	blx	r3
    return tocopy + btr;
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
}
 8001906:	4618      	mov	r0, r3
 8001908:	3730      	adds	r7, #48	; 0x30
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(const lwrb_t* buff) {
 800190e:	b480      	push	{r7}
 8001910:	b08b      	sub	sp, #44	; 0x2c
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <lwrb_get_free+0x1e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <lwrb_get_free+0x1e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <lwrb_get_free+0x22>
        return 0;
 800192c:	2300      	movs	r3, #0
 800192e:	e029      	b.n	8001984 <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	330c      	adds	r3, #12
 8001934:	623b      	str	r3, [r7, #32]
 8001936:	6a3b      	ldr	r3, [r7, #32]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3308      	adds	r3, #8
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	617b      	str	r3, [r7, #20]

    if (w == r) {
 8001950:	69fa      	ldr	r2, [r7, #28]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	429a      	cmp	r2, r3
 8001956:	d103      	bne.n	8001960 <lwrb_get_free+0x52>
        size = buff->size;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
 800195e:	e00f      	b.n	8001980 <lwrb_get_free+0x72>
    } else if (r > w) {
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	429a      	cmp	r2, r3
 8001966:	d904      	bls.n	8001972 <lwrb_get_free+0x64>
        size = r - w;
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
 8001970:	e006      	b.n	8001980 <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	6979      	ldr	r1, [r7, #20]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	1acb      	subs	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3b01      	subs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	372c      	adds	r7, #44	; 0x2c
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(const lwrb_t* buff) {
 8001990:	b480      	push	{r7}
 8001992:	b08b      	sub	sp, #44	; 0x2c
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d007      	beq.n	80019ae <lwrb_get_full+0x1e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <lwrb_get_full+0x1e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <lwrb_get_full+0x22>
        return 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e027      	b.n	8001a02 <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	330c      	adds	r3, #12
 80019b6:	623b      	str	r3, [r7, #32]
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3308      	adds	r3, #8
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	617b      	str	r3, [r7, #20]

    if (w == r) {
 80019d2:	69fa      	ldr	r2, [r7, #28]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d102      	bne.n	80019e0 <lwrb_get_full+0x50>
        size = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
 80019de:	e00f      	b.n	8001a00 <lwrb_get_full+0x70>
    } else if (w > r) {
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d904      	bls.n	80019f2 <lwrb_get_full+0x62>
        size = w - r;
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
 80019f0:	e006      	b.n	8001a00 <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	69f9      	ldr	r1, [r7, #28]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	1acb      	subs	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return size;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	372c      	adds	r7, #44	; 0x2c
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <get_1>:
#else
#define NMBS_DEBUG_PRINT(...) (void) (0)
#endif


static uint8_t get_1(nmbs_t* nmbs) {
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
    uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	5c9b      	ldrb	r3, [r3, r2]
 8001a22:	73fb      	strb	r3, [r7, #15]
    nmbs->msg.buf_idx++;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <put_1>:


static void put_1(nmbs_t* nmbs, uint8_t data) {
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001a54:	4619      	mov	r1, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	545a      	strb	r2, [r3, r1]
    nmbs->msg.buf_idx++;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001a62:	3301      	adds	r3, #1
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <discard_1>:


static void discard_1(nmbs_t* nmbs) {
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx++;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001a86:	3301      	adds	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <get_2>:


static uint16_t get_2(nmbs_t* nmbs) {
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    uint16_t result =
            ((uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx]) << 8 | (uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx + 1];
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001aaa:	461a      	mov	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	5c9b      	ldrb	r3, [r3, r2]
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001aba:	3301      	adds	r3, #1
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	b21b      	sxth	r3, r3
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	b21b      	sxth	r3, r3
    uint16_t result =
 8001ac6:	81fb      	strh	r3, [r7, #14]
    nmbs->msg.buf_idx += 2;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001ace:	3302      	adds	r3, #2
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 8001ad8:	89fb      	ldrh	r3, [r7, #14]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <put_2>:


static void put_2(nmbs_t* nmbs, uint16_t data) {
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	807b      	strh	r3, [r7, #2]
    nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU);
 8001af2:	887b      	ldrh	r3, [r7, #2]
 8001af4:	0a1b      	lsrs	r3, r3, #8
 8001af6:	b299      	uxth	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001afe:	461a      	mov	r2, r3
 8001b00:	b2c9      	uxtb	r1, r1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	5499      	strb	r1, [r3, r2]
    nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	b2d1      	uxtb	r1, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.buf_idx += 2;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001b1c:	3302      	adds	r3, #2
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <msg_buf_reset>:


static void msg_buf_reset(nmbs_t* nmbs) {
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx = 0;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <msg_state_reset>:


static void msg_state_reset(nmbs_t* nmbs) {
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
    msg_buf_reset(nmbs);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffeb 	bl	8001b32 <msg_buf_reset>
    nmbs->msg.unit_id = 0;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    nmbs->msg.fc = 0;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    nmbs->msg.transaction_id = 0;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
    nmbs->msg.broadcast = false;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    nmbs->msg.ignored = false;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <nmbs_create>:
        nmbs->msg.broadcast = true;
}
#endif


nmbs_error nmbs_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
    if (!nmbs)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <nmbs_create+0x16>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	e034      	b.n	8001c0c <nmbs_create+0x80>

    memset(nmbs, 0, sizeof(nmbs_t));
 8001ba2:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f001 fcdd 	bl	8003568 <memset>

    nmbs->byte_timeout_ms = -1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    nmbs->read_timeout_ms = -1;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbe:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    if (!platform_conf)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <nmbs_create+0x42>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bcc:	e01e      	b.n	8001c0c <nmbs_create+0x80>

    if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_conf->transport != NMBS_TRANSPORT_TCP)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d006      	beq.n	8001be4 <nmbs_create+0x58>
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d002      	beq.n	8001be4 <nmbs_create+0x58>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	e013      	b.n	8001c0c <nmbs_create+0x80>

    if (!platform_conf->read || !platform_conf->write)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <nmbs_create+0x68>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <nmbs_create+0x6e>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf8:	e008      	b.n	8001c0c <nmbs_create+0x80>

    nmbs->platform = *platform_conf;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8001c02:	4613      	mov	r3, r2
 8001c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    return NMBS_ERROR_NONE;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}

08001c14 <nmbs_set_read_timeout>:


void nmbs_set_read_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    nmbs->read_timeout_ms = timeout_ms;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <nmbs_set_byte_timeout>:


void nmbs_set_byte_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
    nmbs->byte_timeout_ms = timeout_ms;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <nmbs_crc_calc>:
void nmbs_set_platform_arg(nmbs_t* nmbs, void* arg) {
    nmbs->platform.arg = arg;
}


uint16_t nmbs_crc_calc(const uint8_t* data, uint32_t length) {
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 8001c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c5e:	82fb      	strh	r3, [r7, #22]
    for (uint32_t i = 0; i < length; i++) {
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e026      	b.n	8001cb4 <nmbs_crc_calc+0x64>
        crc ^= (uint16_t) data[i];
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	8afb      	ldrh	r3, [r7, #22]
 8001c72:	4053      	eors	r3, r2
 8001c74:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 8001c76:	2308      	movs	r3, #8
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e015      	b.n	8001ca8 <nmbs_crc_calc+0x58>
            if ((crc & 0x0001) != 0) {
 8001c7c:	8afb      	ldrh	r3, [r7, #22]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00a      	beq.n	8001c9c <nmbs_crc_calc+0x4c>
                crc >>= 1;
 8001c86:	8afb      	ldrh	r3, [r7, #22]
 8001c88:	085b      	lsrs	r3, r3, #1
 8001c8a:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 8001c8c:	8afb      	ldrh	r3, [r7, #22]
 8001c8e:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001c92:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001c96:	43db      	mvns	r3, r3
 8001c98:	82fb      	strh	r3, [r7, #22]
 8001c9a:	e002      	b.n	8001ca2 <nmbs_crc_calc+0x52>
            }
            else
                crc >>= 1;
 8001c9c:	8afb      	ldrh	r3, [r7, #22]
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1e6      	bne.n	8001c7c <nmbs_crc_calc+0x2c>
    for (uint32_t i = 0; i < length; i++) {
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d3d4      	bcc.n	8001c66 <nmbs_crc_calc+0x16>
        }
    }

    return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 8001cbc:	8afb      	ldrh	r3, [r7, #22]
 8001cbe:	ba5b      	rev16	r3, r3
 8001cc0:	b29b      	uxth	r3, r3
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	371c      	adds	r7, #28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <recv>:


static nmbs_error recv(nmbs_t* nmbs, uint16_t count) {
 8001cce:	b590      	push	{r4, r7, lr}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	807b      	strh	r3, [r7, #2]
    int32_t ret =
            nmbs->platform.read(nmbs->msg.buf + nmbs->msg.buf_idx, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8001ce8:	1898      	adds	r0, r3, r2
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001cf6:	8879      	ldrh	r1, [r7, #2]
 8001cf8:	47a0      	blx	r4
 8001cfa:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d101      	bne.n	8001d08 <recv+0x3a>
        return NMBS_ERROR_NONE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e00e      	b.n	8001d26 <recv+0x58>

    if (ret < count) {
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	da08      	bge.n	8001d22 <recv+0x54>
        if (ret < 0)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da02      	bge.n	8001d1c <recv+0x4e>
            return NMBS_ERROR_TRANSPORT;
 8001d16:	f06f 0303 	mvn.w	r3, #3
 8001d1a:	e004      	b.n	8001d26 <recv+0x58>

        return NMBS_ERROR_TIMEOUT;
 8001d1c:	f06f 0302 	mvn.w	r3, #2
 8001d20:	e001      	b.n	8001d26 <recv+0x58>
    }

    return NMBS_ERROR_TRANSPORT;
 8001d22:	f06f 0303 	mvn.w	r3, #3
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd90      	pop	{r4, r7, pc}

08001d2e <send>:


static nmbs_error send(nmbs_t* nmbs, uint16_t count) {
 8001d2e:	b590      	push	{r4, r7, lr}
 8001d30:	b085      	sub	sp, #20
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	807b      	strh	r3, [r7, #2]
    int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001d4e:	8879      	ldrh	r1, [r7, #2]
 8001d50:	47a0      	blx	r4
 8001d52:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8001d54:	887b      	ldrh	r3, [r7, #2]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d101      	bne.n	8001d60 <send+0x32>
        return NMBS_ERROR_NONE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e00e      	b.n	8001d7e <send+0x50>

    if (ret < count) {
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	da08      	bge.n	8001d7a <send+0x4c>
        if (ret < 0)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	da02      	bge.n	8001d74 <send+0x46>
            return NMBS_ERROR_TRANSPORT;
 8001d6e:	f06f 0303 	mvn.w	r3, #3
 8001d72:	e004      	b.n	8001d7e <send+0x50>

        return NMBS_ERROR_TIMEOUT;
 8001d74:	f06f 0302 	mvn.w	r3, #2
 8001d78:	e001      	b.n	8001d7e <send+0x50>
    }

    return NMBS_ERROR_TRANSPORT;
 8001d7a:	f06f 0303 	mvn.w	r3, #3
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd90      	pop	{r4, r7, pc}

08001d86 <recv_msg_footer>:


static nmbs_error recv_msg_footer(nmbs_t* nmbs) {
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d122      	bne.n	8001dde <recv_msg_footer+0x58>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001da0:	4619      	mov	r1, r3
 8001da2:	4610      	mov	r0, r2
 8001da4:	f7ff ff54 	bl	8001c50 <nmbs_crc_calc>
 8001da8:	4603      	mov	r3, r0
 8001daa:	81fb      	strh	r3, [r7, #14]

        nmbs_error err = recv(nmbs, 2);
 8001dac:	2102      	movs	r1, #2
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ff8d 	bl	8001cce <recv>
 8001db4:	4603      	mov	r3, r0
 8001db6:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 8001db8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <recv_msg_footer+0x40>
            return err;
 8001dc0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001dc4:	e00c      	b.n	8001de0 <recv_msg_footer+0x5a>

        uint16_t recv_crc = get_2(nmbs);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fe68 	bl	8001a9c <get_2>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	817b      	strh	r3, [r7, #10]

        if (recv_crc != crc)
 8001dd0:	897a      	ldrh	r2, [r7, #10]
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d002      	beq.n	8001dde <recv_msg_footer+0x58>
            return NMBS_ERROR_CRC;
 8001dd8:	f06f 0304 	mvn.w	r3, #4
 8001ddc:	e000      	b.n	8001de0 <recv_msg_footer+0x5a>
    }

    return NMBS_ERROR_NONE;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <recv_msg_header>:


static nmbs_error recv_msg_header(nmbs_t* nmbs, bool* first_byte_received) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
    // We wait for the read timeout here, just for the first message byte
    int32_t old_byte_timeout = nmbs->byte_timeout_ms;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8001df8:	617b      	str	r3, [r7, #20]
    nmbs->byte_timeout_ms = nmbs->read_timeout_ms;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

    msg_state_reset(nmbs);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff fea1 	bl	8001b4e <msg_state_reset>

    *first_byte_received = false;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d131      	bne.n	8001e80 <recv_msg_header+0x98>
        nmbs_error err = recv(nmbs, 1);
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ff55 	bl	8001cce <recv>
 8001e24:	4603      	mov	r3, r0
 8001e26:	737b      	strb	r3, [r7, #13]

        nmbs->byte_timeout_ms = old_byte_timeout;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (err != NMBS_ERROR_NONE)
 8001e30:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <recv_msg_header+0x56>
            return err;
 8001e38:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e3c:	e07b      	b.n	8001f36 <recv_msg_header+0x14e>

        *first_byte_received = true;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]

        nmbs->msg.unit_id = get_1(nmbs);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff fde2 	bl	8001a0e <get_1>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

        err = recv(nmbs, 1);
 8001e54:	2101      	movs	r1, #1
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ff39 	bl	8001cce <recv>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 8001e60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <recv_msg_header+0x86>
            return err;
 8001e68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e6c:	e063      	b.n	8001f36 <recv_msg_header+0x14e>

        nmbs->msg.fc = get_1(nmbs);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff fdcd 	bl	8001a0e <get_1>
 8001e74:	4603      	mov	r3, r0
 8001e76:	461a      	mov	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8001e7e:	e059      	b.n	8001f34 <recv_msg_header+0x14c>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d154      	bne.n	8001f34 <recv_msg_header+0x14c>
        nmbs_error err = recv(nmbs, 1);
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff1e 	bl	8001cce <recv>
 8001e92:	4603      	mov	r3, r0
 8001e94:	74fb      	strb	r3, [r7, #19]

        nmbs->byte_timeout_ms = old_byte_timeout;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (err != NMBS_ERROR_NONE)
 8001e9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d002      	beq.n	8001eac <recv_msg_header+0xc4>
            return err;
 8001ea6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001eaa:	e044      	b.n	8001f36 <recv_msg_header+0x14e>

        *first_byte_received = true;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]

        // Advance buf_idx
        discard_1(nmbs);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7ff fde0 	bl	8001a78 <discard_1>

        err = recv(nmbs, 7);
 8001eb8:	2107      	movs	r1, #7
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ff07 	bl	8001cce <recv>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	74fb      	strb	r3, [r7, #19]
        if (err != NMBS_ERROR_NONE)
 8001ec4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <recv_msg_header+0xea>
            return err;
 8001ecc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001ed0:	e031      	b.n	8001f36 <recv_msg_header+0x14e>

        // Starting over
        msg_buf_reset(nmbs);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff fe2d 	bl	8001b32 <msg_buf_reset>

        nmbs->msg.transaction_id = get_2(nmbs);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff fddf 	bl	8001a9c <get_2>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
        uint16_t protocol_id = get_2(nmbs);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fdd7 	bl	8001a9c <get_2>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	823b      	strh	r3, [r7, #16]
        uint16_t length = get_2(nmbs);    // We should actually check the length of the request against this value
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff fdd2 	bl	8001a9c <get_2>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	81fb      	strh	r3, [r7, #14]
        nmbs->msg.unit_id = get_1(nmbs);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff fd86 	bl	8001a0e <get_1>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        nmbs->msg.fc = get_1(nmbs);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fd7e 	bl	8001a0e <get_1>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107

        if (protocol_id != 0)
 8001f1c:	8a3b      	ldrh	r3, [r7, #16]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <recv_msg_header+0x140>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8001f22:	f06f 0305 	mvn.w	r3, #5
 8001f26:	e006      	b.n	8001f36 <recv_msg_header+0x14e>

        if (length > 255)
 8001f28:	89fb      	ldrh	r3, [r7, #14]
 8001f2a:	2bff      	cmp	r3, #255	; 0xff
 8001f2c:	d902      	bls.n	8001f34 <recv_msg_header+0x14c>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8001f2e:	f06f 0305 	mvn.w	r3, #5
 8001f32:	e000      	b.n	8001f36 <recv_msg_header+0x14e>
    }

    return NMBS_ERROR_NONE;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <put_msg_header>:


static void put_msg_header(nmbs_t* nmbs, uint16_t data_length) {
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	460b      	mov	r3, r1
 8001f48:	807b      	strh	r3, [r7, #2]
    msg_buf_reset(nmbs);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff fdf1 	bl	8001b32 <msg_buf_reset>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d107      	bne.n	8001f6a <put_msg_header+0x2c>
        put_1(nmbs, nmbs->msg.unit_id);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fd6d 	bl	8001a42 <put_1>
 8001f68:	e01d      	b.n	8001fa6 <put_msg_header+0x68>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d118      	bne.n	8001fa6 <put_msg_header+0x68>
        put_2(nmbs, nmbs->msg.transaction_id);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fdb2 	bl	8001ae6 <put_2>
        put_2(nmbs, 0);
 8001f82:	2100      	movs	r1, #0
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fdae 	bl	8001ae6 <put_2>
        put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7ff fda7 	bl	8001ae6 <put_2>
        put_1(nmbs, nmbs->msg.unit_id);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fd4e 	bl	8001a42 <put_1>
    }

    put_1(nmbs, nmbs->msg.fc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8001fac:	4619      	mov	r1, r3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fd47 	bl	8001a42 <put_1>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <send_msg>:


static nmbs_error send_msg(nmbs_t* nmbs) {
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10e      	bne.n	8001fec <send_msg+0x30>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4610      	mov	r0, r2
 8001fda:	f7ff fe39 	bl	8001c50 <nmbs_crc_calc>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	81fb      	strh	r3, [r7, #14]
        put_2(nmbs, crc);
 8001fe2:	89fb      	ldrh	r3, [r7, #14]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fd7d 	bl	8001ae6 <put_2>
    }

    nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff fe9a 	bl	8001d2e <send>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	737b      	strb	r3, [r7, #13]

    return err;
 8001ffe:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <recv_req_header>:


#ifndef NMBS_SERVER_DISABLED
static nmbs_error recv_req_header(nmbs_t* nmbs, bool* first_byte_received) {
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
 8002012:	6039      	str	r1, [r7, #0]
    nmbs_error err = recv_msg_header(nmbs, first_byte_received);
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff fee6 	bl	8001de8 <recv_msg_header>
 800201c:	4603      	mov	r3, r0
 800201e:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <recv_req_header+0x24>
        return err;
 8002028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202c:	e021      	b.n	8002072 <recv_req_header+0x68>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002034:	2b01      	cmp	r3, #1
 8002036:	d11b      	bne.n	8002070 <recv_req_header+0x66>
        // Check if request is for us
        if (nmbs->msg.unit_id == NMBS_BROADCAST_ADDRESS)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 800203e:	2200      	movs	r2, #0
 8002040:	4293      	cmp	r3, r2
 8002042:	d104      	bne.n	800204e <recv_req_header+0x44>
            nmbs->msg.broadcast = true;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 800204c:	e010      	b.n	8002070 <recv_req_header+0x66>
        else if (nmbs->msg.unit_id != nmbs->address_rtu)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800205a:	429a      	cmp	r2, r3
 800205c:	d004      	beq.n	8002068 <recv_req_header+0x5e>
            nmbs->msg.ignored = true;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 8002066:	e003      	b.n	8002070 <recv_req_header+0x66>
        else
            nmbs->msg.ignored = false;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    }

    return NMBS_ERROR_NONE;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <put_res_header>:


static void put_res_header(nmbs_t* nmbs, uint16_t data_length) {
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	807b      	strh	r3, [r7, #2]
    put_msg_header(nmbs, data_length);
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	4619      	mov	r1, r3
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff57 	bl	8001f3e <put_msg_header>
    NMBS_DEBUG_PRINT("%d NMBS res -> address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->address_rtu, nmbs->msg.fc);
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <send_exception_msg>:


static nmbs_error send_exception_msg(nmbs_t* nmbs, uint8_t exception) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.fc += 0x80;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80020aa:	3b80      	subs	r3, #128	; 0x80
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    put_msg_header(nmbs, 1);
 80020b4:	2101      	movs	r1, #1
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ff41 	bl	8001f3e <put_msg_header>
    put_1(nmbs, exception);
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	4619      	mov	r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff fcbe 	bl	8001a42 <put_1>

    NMBS_DEBUG_PRINT("%d NMBS res -> address_rtu %d\texception %d", nmbs->address_rtu, nmbs->address_rtu, exception);

    return send_msg(nmbs);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ff78 	bl	8001fbc <send_msg>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <recv_res_header>:
#endif


static nmbs_error recv_res_header(nmbs_t* nmbs) {
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b084      	sub	sp, #16
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
    uint16_t req_transaction_id = nmbs->msg.transaction_id;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80020e4:	81fb      	strh	r3, [r7, #14]
    uint8_t req_unit_id = nmbs->msg.unit_id;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80020ec:	737b      	strb	r3, [r7, #13]
    uint8_t req_fc = nmbs->msg.fc;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 80020f4:	733b      	strb	r3, [r7, #12]

    bool first_byte_received;
    nmbs_error err = recv_msg_header(nmbs, &first_byte_received);
 80020f6:	f107 0309 	add.w	r3, r7, #9
 80020fa:	4619      	mov	r1, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fe73 	bl	8001de8 <recv_msg_header>
 8002102:	4603      	mov	r3, r0
 8002104:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8002106:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <recv_res_header+0x3e>
        return err;
 800210e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002112:	e057      	b.n	80021c4 <recv_res_header+0xee>

    if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800211a:	2b02      	cmp	r3, #2
 800211c:	d108      	bne.n	8002130 <recv_res_header+0x5a>
        if (nmbs->msg.transaction_id != req_transaction_id)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 8002124:	89fa      	ldrh	r2, [r7, #14]
 8002126:	429a      	cmp	r2, r3
 8002128:	d002      	beq.n	8002130 <recv_res_header+0x5a>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 800212a:	f06f 0305 	mvn.w	r3, #5
 800212e:	e049      	b.n	80021c4 <recv_res_header+0xee>
    }

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && nmbs->msg.unit_id != req_unit_id)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8002136:	2b01      	cmp	r3, #1
 8002138:	d108      	bne.n	800214c <recv_res_header+0x76>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8002140:	7b7a      	ldrb	r2, [r7, #13]
 8002142:	429a      	cmp	r2, r3
 8002144:	d002      	beq.n	800214c <recv_res_header+0x76>
        return NMBS_ERROR_INVALID_UNIT_ID;
 8002146:	f06f 0306 	mvn.w	r3, #6
 800214a:	e03b      	b.n	80021c4 <recv_res_header+0xee>

    if (nmbs->msg.fc != req_fc) {
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8002152:	7b3a      	ldrb	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d034      	beq.n	80021c2 <recv_res_header+0xec>
        if (nmbs->msg.fc - 0x80 == req_fc) {
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 800215e:	f1a3 0280 	sub.w	r2, r3, #128	; 0x80
 8002162:	7b3b      	ldrb	r3, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d129      	bne.n	80021bc <recv_res_header+0xe6>
            err = recv(nmbs, 1);
 8002168:	2101      	movs	r1, #1
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff fdaf 	bl	8001cce <recv>
 8002170:	4603      	mov	r3, r0
 8002172:	72fb      	strb	r3, [r7, #11]
            if (err != NMBS_ERROR_NONE)
 8002174:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d002      	beq.n	8002182 <recv_res_header+0xac>
                return err;
 800217c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002180:	e020      	b.n	80021c4 <recv_res_header+0xee>

            uint8_t exception = get_1(nmbs);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff fc43 	bl	8001a0e <get_1>
 8002188:	4603      	mov	r3, r0
 800218a:	72bb      	strb	r3, [r7, #10]
            err = recv_msg_footer(nmbs);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff fdfa 	bl	8001d86 <recv_msg_footer>
 8002192:	4603      	mov	r3, r0
 8002194:	72fb      	strb	r3, [r7, #11]
            if (err != NMBS_ERROR_NONE)
 8002196:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <recv_res_header+0xce>
                return err;
 800219e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021a2:	e00f      	b.n	80021c4 <recv_res_header+0xee>

            if (exception < 1 || exception > 4)
 80021a4:	7abb      	ldrb	r3, [r7, #10]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <recv_res_header+0xda>
 80021aa:	7abb      	ldrb	r3, [r7, #10]
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d902      	bls.n	80021b6 <recv_res_header+0xe0>
                return NMBS_ERROR_INVALID_RESPONSE;
 80021b0:	f06f 0301 	mvn.w	r3, #1
 80021b4:	e006      	b.n	80021c4 <recv_res_header+0xee>

            NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\texception %d\n", nmbs->address_rtu, nmbs->msg.unit_id,
                             exception);
            return (nmbs_error) exception;
 80021b6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80021ba:	e003      	b.n	80021c4 <recv_res_header+0xee>
        }

        return NMBS_ERROR_INVALID_RESPONSE;
 80021bc:	f06f 0301 	mvn.w	r3, #1
 80021c0:	e000      	b.n	80021c4 <recv_res_header+0xee>
    }

    NMBS_DEBUG_PRINT("%d NMBS res <- address_rtu %d\tfc %d\t", nmbs->address_rtu, nmbs->msg.unit_id, nmbs->msg.fc);

    return NMBS_ERROR_NONE;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <recv_read_discrete_res>:
#endif
}
#endif


static nmbs_error recv_read_discrete_res(nmbs_t* nmbs, nmbs_bitfield values) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ff7d 	bl	80020d6 <recv_res_header>
 80021dc:	4603      	mov	r3, r0
 80021de:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 80021e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <recv_read_discrete_res+0x22>
        return err;
 80021e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021ec:	e044      	b.n	8002278 <recv_read_discrete_res+0xac>

    err = recv(nmbs, 1);
 80021ee:	2101      	movs	r1, #1
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fd6c 	bl	8001cce <recv>
 80021f6:	4603      	mov	r3, r0
 80021f8:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 80021fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <recv_read_discrete_res+0x3c>
        return err;
 8002202:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002206:	e037      	b.n	8002278 <recv_read_discrete_res+0xac>

    uint8_t coils_bytes = get_1(nmbs);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff fc00 	bl	8001a0e <get_1>
 800220e:	4603      	mov	r3, r0
 8002210:	72bb      	strb	r3, [r7, #10]
    NMBS_DEBUG_PRINT("b %d\t", coils_bytes);

    err = recv(nmbs, coils_bytes);
 8002212:	7abb      	ldrb	r3, [r7, #10]
 8002214:	b29b      	uxth	r3, r3
 8002216:	4619      	mov	r1, r3
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff fd58 	bl	8001cce <recv>
 800221e:	4603      	mov	r3, r0
 8002220:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8002222:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <recv_read_discrete_res+0x64>
        return err;
 800222a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800222e:	e023      	b.n	8002278 <recv_read_discrete_res+0xac>

    NMBS_DEBUG_PRINT("coils ");
    for (int i = 0; i < coils_bytes; i++) {
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e00f      	b.n	8002256 <recv_read_discrete_res+0x8a>
        uint8_t coil = get_1(nmbs);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff fbe9 	bl	8001a0e <get_1>
 800223c:	4603      	mov	r3, r0
 800223e:	727b      	strb	r3, [r7, #9]
        if (values)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <recv_read_discrete_res+0x84>
            values[i] = coil;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	4413      	add	r3, r2
 800224c:	7a7a      	ldrb	r2, [r7, #9]
 800224e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < coils_bytes; i++) {
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	3301      	adds	r3, #1
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	7abb      	ldrb	r3, [r7, #10]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	429a      	cmp	r2, r3
 800225c:	dbeb      	blt.n	8002236 <recv_read_discrete_res+0x6a>
        NMBS_DEBUG_PRINT("%d ", coil);
    }

    err = recv_msg_footer(nmbs);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff fd91 	bl	8001d86 <recv_msg_footer>
 8002264:	4603      	mov	r3, r0
 8002266:	72fb      	strb	r3, [r7, #11]
    if (err != NMBS_ERROR_NONE)
 8002268:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <recv_read_discrete_res+0xaa>
        return err;
 8002270:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002274:	e000      	b.n	8002278 <recv_read_discrete_res+0xac>

    return NMBS_ERROR_NONE;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <recv_read_registers_res>:


static nmbs_error recv_read_registers_res(nmbs_t* nmbs, uint16_t quantity, uint16_t* registers) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	460b      	mov	r3, r1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	817b      	strh	r3, [r7, #10]
    nmbs_error err = recv_res_header(nmbs);
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f7ff ff21 	bl	80020d6 <recv_res_header>
 8002294:	4603      	mov	r3, r0
 8002296:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 8002298:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <recv_read_registers_res+0x26>
        return err;
 80022a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022a4:	e050      	b.n	8002348 <recv_read_registers_res+0xc8>

    err = recv(nmbs, 1);
 80022a6:	2101      	movs	r1, #1
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f7ff fd10 	bl	8001cce <recv>
 80022ae:	4603      	mov	r3, r0
 80022b0:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 80022b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <recv_read_registers_res+0x40>
        return err;
 80022ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022be:	e043      	b.n	8002348 <recv_read_registers_res+0xc8>

    uint8_t registers_bytes = get_1(nmbs);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff fba4 	bl	8001a0e <get_1>
 80022c6:	4603      	mov	r3, r0
 80022c8:	74bb      	strb	r3, [r7, #18]
    NMBS_DEBUG_PRINT("b %d\t", registers_bytes);

    err = recv(nmbs, registers_bytes);
 80022ca:	7cbb      	ldrb	r3, [r7, #18]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4619      	mov	r1, r3
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f7ff fcfc 	bl	8001cce <recv>
 80022d6:	4603      	mov	r3, r0
 80022d8:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 80022da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <recv_read_registers_res+0x68>
        return err;
 80022e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022e6:	e02f      	b.n	8002348 <recv_read_registers_res+0xc8>

    NMBS_DEBUG_PRINT("regs ");
    for (int i = 0; i < registers_bytes / 2; i++) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	e010      	b.n	8002310 <recv_read_registers_res+0x90>
        uint16_t reg = get_2(nmbs);
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff fbd4 	bl	8001a9c <get_2>
 80022f4:	4603      	mov	r3, r0
 80022f6:	823b      	strh	r3, [r7, #16]
        if (registers)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <recv_read_registers_res+0x8a>
            registers[i] = reg;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	8a3a      	ldrh	r2, [r7, #16]
 8002308:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < registers_bytes / 2; i++) {
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	3301      	adds	r3, #1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	7cbb      	ldrb	r3, [r7, #18]
 8002312:	085b      	lsrs	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	461a      	mov	r2, r3
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	4293      	cmp	r3, r2
 800231c:	dbe7      	blt.n	80022ee <recv_read_registers_res+0x6e>
        NMBS_DEBUG_PRINT("%d ", reg);
    }

    err = recv_msg_footer(nmbs);
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f7ff fd31 	bl	8001d86 <recv_msg_footer>
 8002324:	4603      	mov	r3, r0
 8002326:	74fb      	strb	r3, [r7, #19]
    if (err != NMBS_ERROR_NONE)
 8002328:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <recv_read_registers_res+0xb6>
        return err;
 8002330:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002334:	e008      	b.n	8002348 <recv_read_registers_res+0xc8>

    if (registers_bytes != quantity * 2)
 8002336:	7cba      	ldrb	r2, [r7, #18]
 8002338:	897b      	ldrh	r3, [r7, #10]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	429a      	cmp	r2, r3
 800233e:	d002      	beq.n	8002346 <recv_read_registers_res+0xc6>
        return NMBS_ERROR_INVALID_RESPONSE;
 8002340:	f06f 0301 	mvn.w	r3, #1
 8002344:	e000      	b.n	8002348 <recv_read_registers_res+0xc8>

    return NMBS_ERROR_NONE;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <recv_write_single_coil_res>:


nmbs_error recv_write_single_coil_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff feb8 	bl	80020d6 <recv_res_header>
 8002366:	4603      	mov	r3, r0
 8002368:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800236a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <recv_write_single_coil_res+0x28>
        return err;
 8002372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002376:	e031      	b.n	80023dc <recv_write_single_coil_res+0x8c>

    err = recv(nmbs, 4);
 8002378:	2104      	movs	r1, #4
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fca7 	bl	8001cce <recv>
 8002380:	4603      	mov	r3, r0
 8002382:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <recv_write_single_coil_res+0x42>
        return err;
 800238c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002390:	e024      	b.n	80023dc <recv_write_single_coil_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fb82 	bl	8001a9c <get_2>
 8002398:	4603      	mov	r3, r0
 800239a:	81bb      	strh	r3, [r7, #12]
    uint16_t value_res = get_2(nmbs);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff fb7d 	bl	8001a9c <get_2>
 80023a2:	4603      	mov	r3, r0
 80023a4:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value_res);

    err = recv_msg_footer(nmbs);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff fced 	bl	8001d86 <recv_msg_footer>
 80023ac:	4603      	mov	r3, r0
 80023ae:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80023b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <recv_write_single_coil_res+0x6e>
        return err;
 80023b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023bc:	e00e      	b.n	80023dc <recv_write_single_coil_res+0x8c>

    if (address_res != address)
 80023be:	89ba      	ldrh	r2, [r7, #12]
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d002      	beq.n	80023cc <recv_write_single_coil_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 80023c6:	f06f 0301 	mvn.w	r3, #1
 80023ca:	e007      	b.n	80023dc <recv_write_single_coil_res+0x8c>

    if (value_res != value_req)
 80023cc:	897a      	ldrh	r2, [r7, #10]
 80023ce:	883b      	ldrh	r3, [r7, #0]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d002      	beq.n	80023da <recv_write_single_coil_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 80023d4:	f06f 0301 	mvn.w	r3, #1
 80023d8:	e000      	b.n	80023dc <recv_write_single_coil_res+0x8c>

    return NMBS_ERROR_NONE;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <recv_write_single_register_res>:


nmbs_error recv_write_single_register_res(nmbs_t* nmbs, uint16_t address, uint16_t value_req) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
 80023f0:	4613      	mov	r3, r2
 80023f2:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff fe6e 	bl	80020d6 <recv_res_header>
 80023fa:	4603      	mov	r3, r0
 80023fc:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <recv_write_single_register_res+0x28>
        return err;
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	e031      	b.n	8002470 <recv_write_single_register_res+0x8c>

    err = recv(nmbs, 4);
 800240c:	2104      	movs	r1, #4
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fc5d 	bl	8001cce <recv>
 8002414:	4603      	mov	r3, r0
 8002416:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <recv_write_single_register_res+0x42>
        return err;
 8002420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002424:	e024      	b.n	8002470 <recv_write_single_register_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff fb38 	bl	8001a9c <get_2>
 800242c:	4603      	mov	r3, r0
 800242e:	81bb      	strh	r3, [r7, #12]
    uint16_t value_res = get_2(nmbs);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff fb33 	bl	8001a9c <get_2>
 8002436:	4603      	mov	r3, r0
 8002438:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tvalue %d ", address, value_res);

    err = recv_msg_footer(nmbs);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff fca3 	bl	8001d86 <recv_msg_footer>
 8002440:	4603      	mov	r3, r0
 8002442:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <recv_write_single_register_res+0x6e>
        return err;
 800244c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002450:	e00e      	b.n	8002470 <recv_write_single_register_res+0x8c>

    if (address_res != address)
 8002452:	89ba      	ldrh	r2, [r7, #12]
 8002454:	887b      	ldrh	r3, [r7, #2]
 8002456:	429a      	cmp	r2, r3
 8002458:	d002      	beq.n	8002460 <recv_write_single_register_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 800245a:	f06f 0301 	mvn.w	r3, #1
 800245e:	e007      	b.n	8002470 <recv_write_single_register_res+0x8c>

    if (value_res != value_req)
 8002460:	897a      	ldrh	r2, [r7, #10]
 8002462:	883b      	ldrh	r3, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d002      	beq.n	800246e <recv_write_single_register_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 8002468:	f06f 0301 	mvn.w	r3, #1
 800246c:	e000      	b.n	8002470 <recv_write_single_register_res+0x8c>

    return NMBS_ERROR_NONE;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <recv_write_multiple_coils_res>:


nmbs_error recv_write_multiple_coils_res(nmbs_t* nmbs, uint16_t address, uint16_t quantity) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
 8002484:	4613      	mov	r3, r2
 8002486:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff fe24 	bl	80020d6 <recv_res_header>
 800248e:	4603      	mov	r3, r0
 8002490:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <recv_write_multiple_coils_res+0x28>
        return err;
 800249a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249e:	e031      	b.n	8002504 <recv_write_multiple_coils_res+0x8c>

    err = recv(nmbs, 4);
 80024a0:	2104      	movs	r1, #4
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fc13 	bl	8001cce <recv>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80024ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <recv_write_multiple_coils_res+0x42>
        return err;
 80024b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b8:	e024      	b.n	8002504 <recv_write_multiple_coils_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff faee 	bl	8001a9c <get_2>
 80024c0:	4603      	mov	r3, r0
 80024c2:	81bb      	strh	r3, [r7, #12]
    uint16_t quantity_res = get_2(nmbs);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff fae9 	bl	8001a9c <get_2>
 80024ca:	4603      	mov	r3, r0
 80024cc:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tq %d", address_res, quantity_res);

    err = recv_msg_footer(nmbs);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff fc59 	bl	8001d86 <recv_msg_footer>
 80024d4:	4603      	mov	r3, r0
 80024d6:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80024d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <recv_write_multiple_coils_res+0x6e>
        return err;
 80024e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e4:	e00e      	b.n	8002504 <recv_write_multiple_coils_res+0x8c>

    if (address_res != address)
 80024e6:	89ba      	ldrh	r2, [r7, #12]
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d002      	beq.n	80024f4 <recv_write_multiple_coils_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 80024ee:	f06f 0301 	mvn.w	r3, #1
 80024f2:	e007      	b.n	8002504 <recv_write_multiple_coils_res+0x8c>

    if (quantity_res != quantity)
 80024f4:	897a      	ldrh	r2, [r7, #10]
 80024f6:	883b      	ldrh	r3, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d002      	beq.n	8002502 <recv_write_multiple_coils_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 80024fc:	f06f 0301 	mvn.w	r3, #1
 8002500:	e000      	b.n	8002504 <recv_write_multiple_coils_res+0x8c>

    return NMBS_ERROR_NONE;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <recv_write_multiple_registers_res>:


nmbs_error recv_write_multiple_registers_res(nmbs_t* nmbs, uint16_t address, uint16_t quantity) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
 8002518:	4613      	mov	r3, r2
 800251a:	803b      	strh	r3, [r7, #0]
    nmbs_error err = recv_res_header(nmbs);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff fdda 	bl	80020d6 <recv_res_header>
 8002522:	4603      	mov	r3, r0
 8002524:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <recv_write_multiple_registers_res+0x28>
        return err;
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	e031      	b.n	8002598 <recv_write_multiple_registers_res+0x8c>

    err = recv(nmbs, 4);
 8002534:	2104      	movs	r1, #4
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7ff fbc9 	bl	8001cce <recv>
 800253c:	4603      	mov	r3, r0
 800253e:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d002      	beq.n	800254e <recv_write_multiple_registers_res+0x42>
        return err;
 8002548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254c:	e024      	b.n	8002598 <recv_write_multiple_registers_res+0x8c>

    uint16_t address_res = get_2(nmbs);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff faa4 	bl	8001a9c <get_2>
 8002554:	4603      	mov	r3, r0
 8002556:	81bb      	strh	r3, [r7, #12]
    uint16_t quantity_res = get_2(nmbs);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff fa9f 	bl	8001a9c <get_2>
 800255e:	4603      	mov	r3, r0
 8002560:	817b      	strh	r3, [r7, #10]
    NMBS_DEBUG_PRINT("a %d\tq %d", address_res, quantity_res);

    err = recv_msg_footer(nmbs);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff fc0f 	bl	8001d86 <recv_msg_footer>
 8002568:	4603      	mov	r3, r0
 800256a:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 800256c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <recv_write_multiple_registers_res+0x6e>
        return err;
 8002574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002578:	e00e      	b.n	8002598 <recv_write_multiple_registers_res+0x8c>

    if (address_res != address)
 800257a:	89ba      	ldrh	r2, [r7, #12]
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	429a      	cmp	r2, r3
 8002580:	d002      	beq.n	8002588 <recv_write_multiple_registers_res+0x7c>
        return NMBS_ERROR_INVALID_RESPONSE;
 8002582:	f06f 0301 	mvn.w	r3, #1
 8002586:	e007      	b.n	8002598 <recv_write_multiple_registers_res+0x8c>

    if (quantity_res != quantity)
 8002588:	897a      	ldrh	r2, [r7, #10]
 800258a:	883b      	ldrh	r3, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d002      	beq.n	8002596 <recv_write_multiple_registers_res+0x8a>
        return NMBS_ERROR_INVALID_RESPONSE;
 8002590:	f06f 0301 	mvn.w	r3, #1
 8002594:	e000      	b.n	8002598 <recv_write_multiple_registers_res+0x8c>

    return NMBS_ERROR_NONE;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <handle_read_discrete>:


#ifndef NMBS_SERVER_DISABLED
#if !defined(NMBS_SERVER_READ_COILS_DISABLED) || !defined(NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED)
static nmbs_error handle_read_discrete(nmbs_t* nmbs, nmbs_error (*callback)(uint16_t, uint16_t, nmbs_bitfield, void*)) {
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b0c4      	sub	sp, #272	; 0x110
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025ae:	6018      	str	r0, [r3, #0]
 80025b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025b8:	6019      	str	r1, [r3, #0]
    nmbs_error err = recv(nmbs, 4);
 80025ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025c2:	2104      	movs	r1, #4
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	f7ff fb82 	bl	8001cce <recv>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80025d0:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <handle_read_discrete+0x3e>
        return err;
 80025d8:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80025dc:	e113      	b.n	8002806 <handle_read_discrete+0x266>

    uint16_t address = get_2(nmbs);
 80025de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	f7ff fa58 	bl	8001a9c <get_2>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 80025f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80025f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	f7ff fa4e 	bl	8001a9c <get_2>
 8002600:	4603      	mov	r3, r0
 8002602:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 8002606:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800260a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	f7ff fbb9 	bl	8001d86 <recv_msg_footer>
 8002614:	4603      	mov	r3, r0
 8002616:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 800261a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <handle_read_discrete+0x88>
        return err;
 8002622:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002626:	e0ee      	b.n	8002806 <handle_read_discrete+0x266>

    if (!nmbs->msg.ignored) {
 8002628:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800262c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8002636:	f083 0301 	eor.w	r3, r3, #1
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 80d7 	beq.w	80027f0 <handle_read_discrete+0x250>
        if (quantity < 1 || quantity > 2000)
 8002642:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <handle_read_discrete+0xb4>
 800264a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800264e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002652:	d909      	bls.n	8002668 <handle_read_discrete+0xc8>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8002654:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002658:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800265c:	2103      	movs	r1, #3
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	f7ff fd1a 	bl	8002098 <send_exception_msg>
 8002664:	4603      	mov	r3, r0
 8002666:	e0ce      	b.n	8002806 <handle_read_discrete+0x266>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8002668:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 800266c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002670:	4413      	add	r3, r2
 8002672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002676:	d909      	bls.n	800268c <handle_read_discrete+0xec>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8002678:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800267c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002680:	2102      	movs	r1, #2
 8002682:	6818      	ldr	r0, [r3, #0]
 8002684:	f7ff fd08 	bl	8002098 <send_exception_msg>
 8002688:	4603      	mov	r3, r0
 800268a:	e0bc      	b.n	8002806 <handle_read_discrete+0x266>

        if (callback) {
 800268c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002690:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80a0 	beq.w	80027dc <handle_read_discrete+0x23c>
            nmbs_bitfield bitfield = {0};
 800269c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	3304      	adds	r3, #4
 80026aa:	22f6      	movs	r2, #246	; 0xf6
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 ff5a 	bl	8003568 <memset>
            err = callback(address, quantity, bitfield, nmbs->platform.arg);
 80026b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 80026c2:	f107 0208 	add.w	r2, r7, #8
 80026c6:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 80026ca:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 80026ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80026d2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80026d6:	681c      	ldr	r4, [r3, #0]
 80026d8:	462b      	mov	r3, r5
 80026da:	47a0      	blx	r4
 80026dc:	4603      	mov	r3, r0
 80026de:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 80026e2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01d      	beq.n	8002726 <handle_read_discrete+0x186>
                if (nmbs_error_is_exception(err))
 80026ea:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	dd0f      	ble.n	8002712 <handle_read_discrete+0x172>
 80026f2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	dc0b      	bgt.n	8002712 <handle_read_discrete+0x172>
                    return send_exception_msg(nmbs, err);
 80026fa:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 80026fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002702:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002706:	4611      	mov	r1, r2
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	f7ff fcc5 	bl	8002098 <send_exception_msg>
 800270e:	4603      	mov	r3, r0
 8002710:	e079      	b.n	8002806 <handle_read_discrete+0x266>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8002712:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002716:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800271a:	2104      	movs	r1, #4
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	f7ff fcbb 	bl	8002098 <send_exception_msg>
 8002722:	4603      	mov	r3, r0
 8002724:	e06f      	b.n	8002806 <handle_read_discrete+0x266>
            }

            if (!nmbs->msg.broadcast) {
 8002726:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800272a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002734:	f083 0301 	eor.w	r3, r3, #1
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d062      	beq.n	8002804 <handle_read_discrete+0x264>
                uint8_t discrete_bytes = (quantity / 8) + 1;
 800273e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002742:	08db      	lsrs	r3, r3, #3
 8002744:	b29b      	uxth	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3301      	adds	r3, #1
 800274a:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
                put_res_header(nmbs, 1 + discrete_bytes);
 800274e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002752:	b29b      	uxth	r3, r3
 8002754:	3301      	adds	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800275c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002760:	4611      	mov	r1, r2
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	f7ff fc89 	bl	800207a <put_res_header>

                put_1(nmbs, discrete_bytes);
 8002768:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 800276c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002770:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002774:	4611      	mov	r1, r2
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	f7ff f963 	bl	8001a42 <put_1>

                NMBS_DEBUG_PRINT("b %d\t", discrete_bytes);

                NMBS_DEBUG_PRINT("coils ");
                for (int i = 0; i < discrete_bytes; i++) {
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002782:	e014      	b.n	80027ae <handle_read_discrete+0x20e>
                    put_1(nmbs, bitfield[i]);
 8002784:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002788:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800278c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002790:	4413      	add	r3, r2
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002798:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800279c:	4611      	mov	r1, r2
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	f7ff f94f 	bl	8001a42 <put_1>
                for (int i = 0; i < discrete_bytes; i++) {
 80027a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80027a8:	3301      	adds	r3, #1
 80027aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80027ae:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80027b2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80027b6:	429a      	cmp	r2, r3
 80027b8:	dbe4      	blt.n	8002784 <handle_read_discrete+0x1e4>
                    NMBS_DEBUG_PRINT("%d ", bitfield[i]);
                }

                err = send_msg(nmbs);
 80027ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	f7ff fbfa 	bl	8001fbc <send_msg>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 80027ce:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d016      	beq.n	8002804 <handle_read_discrete+0x264>
                    return err;
 80027d6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80027da:	e014      	b.n	8002806 <handle_read_discrete+0x266>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80027dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027e4:	2101      	movs	r1, #1
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	f7ff fc56 	bl	8002098 <send_exception_msg>
 80027ec:	4603      	mov	r3, r0
 80027ee:	e00a      	b.n	8002806 <handle_read_discrete+0x266>
        }
    }
    else {
        return recv_read_discrete_res(nmbs, NULL);
 80027f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027f8:	2100      	movs	r1, #0
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	f7ff fce6 	bl	80021cc <recv_read_discrete_res>
 8002800:	4603      	mov	r3, r0
 8002802:	e000      	b.n	8002806 <handle_read_discrete+0x266>
    }

    return NMBS_ERROR_NONE;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800280c:	46bd      	mov	sp, r7
 800280e:	bdb0      	pop	{r4, r5, r7, pc}

08002810 <handle_read_registers>:
#endif


#if !defined(NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED) || !defined(NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED)
static nmbs_error handle_read_registers(nmbs_t* nmbs, nmbs_error (*callback)(uint16_t, uint16_t, uint16_t*, void*)) {
 8002810:	b5b0      	push	{r4, r5, r7, lr}
 8002812:	b0c4      	sub	sp, #272	; 0x110
 8002814:	af00      	add	r7, sp, #0
 8002816:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800281a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800281e:	6018      	str	r0, [r3, #0]
 8002820:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002824:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002828:	6019      	str	r1, [r3, #0]
    nmbs_error err = recv(nmbs, 4);
 800282a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800282e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002832:	2104      	movs	r1, #4
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	f7ff fa4a 	bl	8001cce <recv>
 800283a:	4603      	mov	r3, r0
 800283c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8002840:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002844:	2b00      	cmp	r3, #0
 8002846:	d002      	beq.n	800284e <handle_read_registers+0x3e>
        return err;
 8002848:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800284c:	e110      	b.n	8002a70 <handle_read_registers+0x260>

    uint16_t address = get_2(nmbs);
 800284e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002852:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	f7ff f920 	bl	8001a9c <get_2>
 800285c:	4603      	mov	r3, r0
 800285e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8002862:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002866:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	f7ff f916 	bl	8001a9c <get_2>
 8002870:	4603      	mov	r3, r0
 8002872:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 8002876:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800287a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	f7ff fa81 	bl	8001d86 <recv_msg_footer>
 8002884:	4603      	mov	r3, r0
 8002886:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 800288a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800288e:	2b00      	cmp	r3, #0
 8002890:	d002      	beq.n	8002898 <handle_read_registers+0x88>
        return err;
 8002892:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002896:	e0eb      	b.n	8002a70 <handle_read_registers+0x260>

    if (!nmbs->msg.ignored) {
 8002898:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800289c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80028a6:	f083 0301 	eor.w	r3, r3, #1
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 80d2 	beq.w	8002a56 <handle_read_registers+0x246>
        if (quantity < 1 || quantity > 125)
 80028b2:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <handle_read_registers+0xb2>
 80028ba:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80028be:	2b7d      	cmp	r3, #125	; 0x7d
 80028c0:	d909      	bls.n	80028d6 <handle_read_registers+0xc6>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80028c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028ca:	2103      	movs	r1, #3
 80028cc:	6818      	ldr	r0, [r3, #0]
 80028ce:	f7ff fbe3 	bl	8002098 <send_exception_msg>
 80028d2:	4603      	mov	r3, r0
 80028d4:	e0cc      	b.n	8002a70 <handle_read_registers+0x260>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 80028d6:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 80028da:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80028de:	4413      	add	r3, r2
 80028e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e4:	d909      	bls.n	80028fa <handle_read_registers+0xea>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 80028e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80028ee:	2102      	movs	r1, #2
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	f7ff fbd1 	bl	8002098 <send_exception_msg>
 80028f6:	4603      	mov	r3, r0
 80028f8:	e0ba      	b.n	8002a70 <handle_read_registers+0x260>

        if (callback) {
 80028fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 809c 	beq.w	8002a42 <handle_read_registers+0x232>
            uint16_t regs[125] = {0};
 800290a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800290e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002912:	4618      	mov	r0, r3
 8002914:	23fa      	movs	r3, #250	; 0xfa
 8002916:	461a      	mov	r2, r3
 8002918:	2100      	movs	r1, #0
 800291a:	f000 fe25 	bl	8003568 <memset>
            err = callback(address, quantity, regs, nmbs->platform.arg);
 800291e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002922:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 800292c:	f107 0208 	add.w	r2, r7, #8
 8002930:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8002934:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8002938:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800293c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002940:	681c      	ldr	r4, [r3, #0]
 8002942:	462b      	mov	r3, r5
 8002944:	47a0      	blx	r4
 8002946:	4603      	mov	r3, r0
 8002948:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 800294c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01d      	beq.n	8002990 <handle_read_registers+0x180>
                if (nmbs_error_is_exception(err))
 8002954:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002958:	2b00      	cmp	r3, #0
 800295a:	dd0f      	ble.n	800297c <handle_read_registers+0x16c>
 800295c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002960:	2b04      	cmp	r3, #4
 8002962:	dc0b      	bgt.n	800297c <handle_read_registers+0x16c>
                    return send_exception_msg(nmbs, err);
 8002964:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8002968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800296c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002970:	4611      	mov	r1, r2
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	f7ff fb90 	bl	8002098 <send_exception_msg>
 8002978:	4603      	mov	r3, r0
 800297a:	e079      	b.n	8002a70 <handle_read_registers+0x260>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 800297c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002980:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002984:	2104      	movs	r1, #4
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	f7ff fb86 	bl	8002098 <send_exception_msg>
 800298c:	4603      	mov	r3, r0
 800298e:	e06f      	b.n	8002a70 <handle_read_registers+0x260>
            }

            if (!nmbs->msg.broadcast) {
 8002990:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002994:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 800299e:	f083 0301 	eor.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d062      	beq.n	8002a6e <handle_read_registers+0x25e>
                uint8_t regs_bytes = quantity * 2;
 80029a8:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
                put_res_header(nmbs, 1 + regs_bytes);
 80029b4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3301      	adds	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029c6:	4611      	mov	r1, r2
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	f7ff fb56 	bl	800207a <put_res_header>

                put_1(nmbs, regs_bytes);
 80029ce:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 80029d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80029da:	4611      	mov	r1, r2
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	f7ff f830 	bl	8001a42 <put_1>

                NMBS_DEBUG_PRINT("b %d\t", regs_bytes);

                NMBS_DEBUG_PRINT("regs ");
                for (int i = 0; i < quantity; i++) {
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80029e8:	e014      	b.n	8002a14 <handle_read_registers+0x204>
                    put_2(nmbs, regs[i]);
 80029ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80029f2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80029f6:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80029fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80029fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a02:	4611      	mov	r1, r2
 8002a04:	6818      	ldr	r0, [r3, #0]
 8002a06:	f7ff f86e 	bl	8001ae6 <put_2>
                for (int i = 0; i < quantity; i++) {
 8002a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002a0e:	3301      	adds	r3, #1
 8002a10:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002a14:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002a18:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	dbe4      	blt.n	80029ea <handle_read_registers+0x1da>
                    NMBS_DEBUG_PRINT("%d ", regs[i]);
                }

                err = send_msg(nmbs);
 8002a20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a28:	6818      	ldr	r0, [r3, #0]
 8002a2a:	f7ff fac7 	bl	8001fbc <send_msg>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 8002a34:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d018      	beq.n	8002a6e <handle_read_registers+0x25e>
                    return err;
 8002a3c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002a40:	e016      	b.n	8002a70 <handle_read_registers+0x260>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8002a42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a46:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	f7ff fb23 	bl	8002098 <send_exception_msg>
 8002a52:	4603      	mov	r3, r0
 8002a54:	e00c      	b.n	8002a70 <handle_read_registers+0x260>
        }
    }
    else {
        return recv_read_registers_res(nmbs, quantity, NULL);
 8002a56:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8002a5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002a5e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002a62:	2200      	movs	r2, #0
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	f7ff fc0b 	bl	8002280 <recv_read_registers_res>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	e000      	b.n	8002a70 <handle_read_registers+0x260>
    }

    return NMBS_ERROR_NONE;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bdb0      	pop	{r4, r5, r7, pc}

08002a7a <handle_read_coils>:
#endif


#ifndef NMBS_SERVER_READ_COILS_DISABLED
static nmbs_error handle_read_coils(nmbs_t* nmbs) {
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
    return handle_read_discrete(nmbs, nmbs->callbacks.read_coils);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fd88 	bl	80025a0 <handle_read_discrete>
 8002a90:	4603      	mov	r3, r0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <handle_read_discrete_inputs>:
#endif


#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
static nmbs_error handle_read_discrete_inputs(nmbs_t* nmbs) {
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
    return handle_read_discrete(nmbs, nmbs->callbacks.read_discrete_inputs);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff fd78 	bl	80025a0 <handle_read_discrete>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <handle_read_holding_registers>:
#endif


#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
static nmbs_error handle_read_holding_registers(nmbs_t* nmbs) {
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
    return handle_read_registers(nmbs, nmbs->callbacks.read_holding_registers);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002ac8:	4619      	mov	r1, r3
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fea0 	bl	8002810 <handle_read_registers>
 8002ad0:	4603      	mov	r3, r0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <handle_read_input_registers>:
#endif


#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
static nmbs_error handle_read_input_registers(nmbs_t* nmbs) {
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
    return handle_read_registers(nmbs, nmbs->callbacks.read_input_registers);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fe90 	bl	8002810 <handle_read_registers>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <handle_write_single_coil>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
static nmbs_error handle_write_single_coil(nmbs_t* nmbs) {
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 4);
 8002b02:	2104      	movs	r1, #4
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff f8e2 	bl	8001cce <recv>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <handle_write_single_coil+0x22>
        return err;
 8002b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1a:	e089      	b.n	8002c30 <handle_write_single_coil+0x136>

    uint16_t address = get_2(nmbs);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7fe ffbd 	bl	8001a9c <get_2>
 8002b22:	4603      	mov	r3, r0
 8002b24:	81bb      	strh	r3, [r7, #12]
    uint16_t value = get_2(nmbs);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe ffb8 	bl	8001a9c <get_2>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

    err = recv_msg_footer(nmbs);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff f928 	bl	8001d86 <recv_msg_footer>
 8002b36:	4603      	mov	r3, r0
 8002b38:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <handle_write_single_coil+0x4e>
        return err;
 8002b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b46:	e073      	b.n	8002c30 <handle_write_single_coil+0x136>

    if (!nmbs->msg.ignored) {
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8002b4e:	f083 0301 	eor.w	r3, r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d062      	beq.n	8002c1e <handle_write_single_coil+0x124>
        if (nmbs->callbacks.write_single_coil) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d057      	beq.n	8002c12 <handle_write_single_coil+0x118>
            if (value != 0 && value != 0xFF00)
 8002b62:	897b      	ldrh	r3, [r7, #10]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <handle_write_single_coil+0x82>
 8002b68:	897b      	ldrh	r3, [r7, #10]
 8002b6a:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 8002b6e:	d005      	beq.n	8002b7c <handle_write_single_coil+0x82>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8002b70:	2103      	movs	r1, #3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff fa90 	bl	8002098 <send_exception_msg>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	e059      	b.n	8002c30 <handle_write_single_coil+0x136>

            err = nmbs->callbacks.write_single_coil(address, value == 0 ? false : true, nmbs->platform.arg);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002b82:	897a      	ldrh	r2, [r7, #10]
 8002b84:	2a00      	cmp	r2, #0
 8002b86:	bf14      	ite	ne
 8002b88:	2201      	movne	r2, #1
 8002b8a:	2200      	moveq	r2, #0
 8002b8c:	b2d1      	uxtb	r1, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8002b94:	89b8      	ldrh	r0, [r7, #12]
 8002b96:	4798      	blx	r3
 8002b98:	4603      	mov	r3, r0
 8002b9a:	73fb      	strb	r3, [r7, #15]
            if (err != NMBS_ERROR_NONE) {
 8002b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d014      	beq.n	8002bce <handle_write_single_coil+0xd4>
                if (nmbs_error_is_exception(err))
 8002ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	dd0a      	ble.n	8002bc2 <handle_write_single_coil+0xc8>
 8002bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	dc06      	bgt.n	8002bc2 <handle_write_single_coil+0xc8>
                    return send_exception_msg(nmbs, err);
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff fa6d 	bl	8002098 <send_exception_msg>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	e036      	b.n	8002c30 <handle_write_single_coil+0x136>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff fa67 	bl	8002098 <send_exception_msg>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	e030      	b.n	8002c30 <handle_write_single_coil+0x136>
            }

            if (!nmbs->msg.broadcast) {
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002bd4:	f083 0301 	eor.w	r3, r3, #1
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d027      	beq.n	8002c2e <handle_write_single_coil+0x134>
                put_res_header(nmbs, 4);
 8002bde:	2104      	movs	r1, #4
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fa4a 	bl	800207a <put_res_header>

                put_2(nmbs, address);
 8002be6:	89bb      	ldrh	r3, [r7, #12]
 8002be8:	4619      	mov	r1, r3
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe ff7b 	bl	8001ae6 <put_2>
                put_2(nmbs, value);
 8002bf0:	897b      	ldrh	r3, [r7, #10]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7fe ff76 	bl	8001ae6 <put_2>
                NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

                err = send_msg(nmbs);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff f9de 	bl	8001fbc <send_msg>
 8002c00:	4603      	mov	r3, r0
 8002c02:	73fb      	strb	r3, [r7, #15]
                if (err != NMBS_ERROR_NONE)
 8002c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <handle_write_single_coil+0x134>
                    return err;
 8002c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c10:	e00e      	b.n	8002c30 <handle_write_single_coil+0x136>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8002c12:	2101      	movs	r1, #1
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff fa3f 	bl	8002098 <send_exception_msg>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	e008      	b.n	8002c30 <handle_write_single_coil+0x136>
        }
    }
    else {
        return recv_write_single_coil_res(nmbs, address, value);
 8002c1e:	897a      	ldrh	r2, [r7, #10]
 8002c20:	89bb      	ldrh	r3, [r7, #12]
 8002c22:	4619      	mov	r1, r3
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff fb93 	bl	8002350 <recv_write_single_coil_res>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	e000      	b.n	8002c30 <handle_write_single_coil+0x136>
    }

    return NMBS_ERROR_NONE;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <handle_write_single_register>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
static nmbs_error handle_write_single_register(nmbs_t* nmbs) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 4);
 8002c40:	2104      	movs	r1, #4
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff f843 	bl	8001cce <recv>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <handle_write_single_register+0x22>
        return err;
 8002c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c58:	e077      	b.n	8002d4a <handle_write_single_register+0x112>

    uint16_t address = get_2(nmbs);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fe ff1e 	bl	8001a9c <get_2>
 8002c60:	4603      	mov	r3, r0
 8002c62:	81bb      	strh	r3, [r7, #12]
    uint16_t value = get_2(nmbs);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7fe ff19 	bl	8001a9c <get_2>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

    err = recv_msg_footer(nmbs);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff f889 	bl	8001d86 <recv_msg_footer>
 8002c74:	4603      	mov	r3, r0
 8002c76:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8002c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <handle_write_single_register+0x4e>
        return err;
 8002c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c84:	e061      	b.n	8002d4a <handle_write_single_register+0x112>

    if (!nmbs->msg.ignored) {
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8002c8c:	f083 0301 	eor.w	r3, r3, #1
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d050      	beq.n	8002d38 <handle_write_single_register+0x100>
        if (nmbs->callbacks.write_single_register) {
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d045      	beq.n	8002d2c <handle_write_single_register+0xf4>
            err = nmbs->callbacks.write_single_register(address, value, nmbs->platform.arg);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8002cac:	8979      	ldrh	r1, [r7, #10]
 8002cae:	89b8      	ldrh	r0, [r7, #12]
 8002cb0:	4798      	blx	r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73fb      	strb	r3, [r7, #15]
            if (err != NMBS_ERROR_NONE) {
 8002cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d014      	beq.n	8002ce8 <handle_write_single_register+0xb0>
                if (nmbs_error_is_exception(err))
 8002cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	dd0a      	ble.n	8002cdc <handle_write_single_register+0xa4>
 8002cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	dc06      	bgt.n	8002cdc <handle_write_single_register+0xa4>
                    return send_exception_msg(nmbs, err);
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff f9e0 	bl	8002098 <send_exception_msg>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	e036      	b.n	8002d4a <handle_write_single_register+0x112>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8002cdc:	2104      	movs	r1, #4
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff f9da 	bl	8002098 <send_exception_msg>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	e030      	b.n	8002d4a <handle_write_single_register+0x112>
            }

            if (!nmbs->msg.broadcast) {
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002cee:	f083 0301 	eor.w	r3, r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d027      	beq.n	8002d48 <handle_write_single_register+0x110>
                put_res_header(nmbs, 4);
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff f9bd 	bl	800207a <put_res_header>

                put_2(nmbs, address);
 8002d00:	89bb      	ldrh	r3, [r7, #12]
 8002d02:	4619      	mov	r1, r3
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7fe feee 	bl	8001ae6 <put_2>
                put_2(nmbs, value);
 8002d0a:	897b      	ldrh	r3, [r7, #10]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe fee9 	bl	8001ae6 <put_2>
                NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

                err = send_msg(nmbs);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f7ff f951 	bl	8001fbc <send_msg>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	73fb      	strb	r3, [r7, #15]
                if (err != NMBS_ERROR_NONE)
 8002d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d010      	beq.n	8002d48 <handle_write_single_register+0x110>
                    return err;
 8002d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2a:	e00e      	b.n	8002d4a <handle_write_single_register+0x112>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8002d2c:	2101      	movs	r1, #1
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff f9b2 	bl	8002098 <send_exception_msg>
 8002d34:	4603      	mov	r3, r0
 8002d36:	e008      	b.n	8002d4a <handle_write_single_register+0x112>
        }
    }
    else {
        return recv_write_single_register_res(nmbs, address, value);
 8002d38:	897a      	ldrh	r2, [r7, #10]
 8002d3a:	89bb      	ldrh	r3, [r7, #12]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fb50 	bl	80023e4 <recv_write_single_register_res>
 8002d44:	4603      	mov	r3, r0
 8002d46:	e000      	b.n	8002d4a <handle_write_single_register+0x112>
    }

    return NMBS_ERROR_NONE;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <handle_write_multiple_coils>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
static nmbs_error handle_write_multiple_coils(nmbs_t* nmbs) {
 8002d52:	b590      	push	{r4, r7, lr}
 8002d54:	b0c5      	sub	sp, #276	; 0x114
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d60:	6018      	str	r0, [r3, #0]
    nmbs_error err = recv(nmbs, 5);
 8002d62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d66:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d6a:	2105      	movs	r1, #5
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	f7fe ffae 	bl	8001cce <recv>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8002d78:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <handle_write_multiple_coils+0x34>
        return err;
 8002d80:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002d84:	e157      	b.n	8003036 <handle_write_multiple_coils+0x2e4>

    uint16_t address = get_2(nmbs);
 8002d86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	f7fe fe84 	bl	8001a9c <get_2>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8002d9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002d9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	f7fe fe7a 	bl	8001a9c <get_2>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    uint8_t coils_bytes = get_1(nmbs);
 8002dae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002db2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	f7fe fe29 	bl	8001a0e <get_1>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\tcoils ", address, quantity, coils_bytes);

    err = recv(nmbs, coils_bytes);
 8002dc2:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002dcc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	f7fe ff7b 	bl	8001cce <recv>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8002dde:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <handle_write_multiple_coils+0x9a>
        return err;
 8002de6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002dea:	e124      	b.n	8003036 <handle_write_multiple_coils+0x2e4>

    nmbs_bitfield coils = {0};
 8002dec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	22f6      	movs	r2, #246	; 0xf6
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fbb2 	bl	8003568 <memset>
    for (int i = 0; i < coils_bytes; i++) {
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002e0a:	e016      	b.n	8002e3a <handle_write_multiple_coils+0xe8>
        coils[i] = get_1(nmbs);
 8002e0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e10:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	f7fe fdfa 	bl	8001a0e <get_1>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e22:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8002e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e2a:	4413      	add	r3, r2
 8002e2c:	460a      	mov	r2, r1
 8002e2e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < coils_bytes; i++) {
 8002e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002e34:	3301      	adds	r3, #1
 8002e36:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002e3a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002e3e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002e42:	429a      	cmp	r2, r3
 8002e44:	dbe2      	blt.n	8002e0c <handle_write_multiple_coils+0xba>
        NMBS_DEBUG_PRINT("%d ", coils[i]);
    }

    err = recv_msg_footer(nmbs);
 8002e46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	f7fe ff99 	bl	8001d86 <recv_msg_footer>
 8002e54:	4603      	mov	r3, r0
 8002e56:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8002e5a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <handle_write_multiple_coils+0x116>
        return err;
 8002e62:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002e66:	e0e6      	b.n	8003036 <handle_write_multiple_coils+0x2e4>

    if (!nmbs->msg.ignored) {
 8002e68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8002e76:	f083 0301 	eor.w	r3, r3, #1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80cc 	beq.w	800301a <handle_write_multiple_coils+0x2c8>
        if (quantity < 1 || quantity > 0x07B0)
 8002e82:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d004      	beq.n	8002e94 <handle_write_multiple_coils+0x142>
 8002e8a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002e8e:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8002e92:	d909      	bls.n	8002ea8 <handle_write_multiple_coils+0x156>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8002e94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e9c:	2103      	movs	r1, #3
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	f7ff f8fa 	bl	8002098 <send_exception_msg>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	e0c6      	b.n	8003036 <handle_write_multiple_coils+0x2e4>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8002ea8:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8002eac:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb6:	d909      	bls.n	8002ecc <handle_write_multiple_coils+0x17a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8002eb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ebc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	f7ff f8e8 	bl	8002098 <send_exception_msg>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	e0b4      	b.n	8003036 <handle_write_multiple_coils+0x2e4>

        if (coils_bytes == 0)
 8002ecc:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <handle_write_multiple_coils+0x196>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8002ed4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ed8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002edc:	2103      	movs	r1, #3
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	f7ff f8da 	bl	8002098 <send_exception_msg>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	e0a6      	b.n	8003036 <handle_write_multiple_coils+0x2e4>

        if ((quantity / 8) + 1 != coils_bytes)
 8002ee8:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8002eec:	08db      	lsrs	r3, r3, #3
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d009      	beq.n	8002f0e <handle_write_multiple_coils+0x1bc>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8002efa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002efe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f02:	2103      	movs	r1, #3
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	f7ff f8c7 	bl	8002098 <send_exception_msg>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	e093      	b.n	8003036 <handle_write_multiple_coils+0x2e4>

        if (nmbs->callbacks.write_multiple_coils) {
 8002f0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f12:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d072      	beq.n	8003006 <handle_write_multiple_coils+0x2b4>
            err = nmbs->callbacks.write_multiple_coils(address, quantity, coils, nmbs->platform.arg);
 8002f20:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f24:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 8002f2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8002f3c:	f107 0208 	add.w	r2, r7, #8
 8002f40:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8002f44:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8002f48:	47a0      	blx	r4
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8002f50:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01d      	beq.n	8002f94 <handle_write_multiple_coils+0x242>
                if (nmbs_error_is_exception(err))
 8002f58:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	dd0f      	ble.n	8002f80 <handle_write_multiple_coils+0x22e>
 8002f60:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	dc0b      	bgt.n	8002f80 <handle_write_multiple_coils+0x22e>
                    return send_exception_msg(nmbs, err);
 8002f68:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8002f6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f70:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f74:	4611      	mov	r1, r2
 8002f76:	6818      	ldr	r0, [r3, #0]
 8002f78:	f7ff f88e 	bl	8002098 <send_exception_msg>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	e05a      	b.n	8003036 <handle_write_multiple_coils+0x2e4>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8002f80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f88:	2104      	movs	r1, #4
 8002f8a:	6818      	ldr	r0, [r3, #0]
 8002f8c:	f7ff f884 	bl	8002098 <send_exception_msg>
 8002f90:	4603      	mov	r3, r0
 8002f92:	e050      	b.n	8003036 <handle_write_multiple_coils+0x2e4>
            }

            if (!nmbs->msg.broadcast) {
 8002f94:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002f98:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8002fa2:	f083 0301 	eor.w	r3, r3, #1
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d043      	beq.n	8003034 <handle_write_multiple_coils+0x2e2>
                put_res_header(nmbs, 4);
 8002fac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002fb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	f7ff f85f 	bl	800207a <put_res_header>

                put_2(nmbs, address);
 8002fbc:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8002fc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002fc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002fc8:	4611      	mov	r1, r2
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	f7fe fd8b 	bl	8001ae6 <put_2>
                put_2(nmbs, quantity);
 8002fd0:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8002fd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002fd8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002fdc:	4611      	mov	r1, r2
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	f7fe fd81 	bl	8001ae6 <put_2>
                NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

                err = send_msg(nmbs);
 8002fe4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002fe8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	f7fe ffe5 	bl	8001fbc <send_msg>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 8002ff8:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d019      	beq.n	8003034 <handle_write_multiple_coils+0x2e2>
                    return err;
 8003000:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8003004:	e017      	b.n	8003036 <handle_write_multiple_coils+0x2e4>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8003006:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800300a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800300e:	2101      	movs	r1, #1
 8003010:	6818      	ldr	r0, [r3, #0]
 8003012:	f7ff f841 	bl	8002098 <send_exception_msg>
 8003016:	4603      	mov	r3, r0
 8003018:	e00d      	b.n	8003036 <handle_write_multiple_coils+0x2e4>
        }
    }
    else {
        return recv_write_multiple_coils_res(nmbs, address, quantity);
 800301a:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 800301e:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 8003022:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003026:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800302a:	6818      	ldr	r0, [r3, #0]
 800302c:	f7ff fa24 	bl	8002478 <recv_write_multiple_coils_res>
 8003030:	4603      	mov	r3, r0
 8003032:	e000      	b.n	8003036 <handle_write_multiple_coils+0x2e4>
    }

    return NMBS_ERROR_NONE;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}

08003040 <handle_write_multiple_registers>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
static nmbs_error handle_write_multiple_registers(nmbs_t* nmbs) {
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b0c5      	sub	sp, #276	; 0x114
 8003044:	af00      	add	r7, sp, #0
 8003046:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800304a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800304e:	6018      	str	r0, [r3, #0]
    nmbs_error err = recv(nmbs, 5);
 8003050:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003054:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003058:	2105      	movs	r1, #5
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	f7fe fe37 	bl	8001cce <recv>
 8003060:	4603      	mov	r3, r0
 8003062:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8003066:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <handle_write_multiple_registers+0x34>
        return err;
 800306e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8003072:	e14a      	b.n	800330a <handle_write_multiple_registers+0x2ca>

    uint16_t address = get_2(nmbs);
 8003074:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003078:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800307c:	6818      	ldr	r0, [r3, #0]
 800307e:	f7fe fd0d 	bl	8001a9c <get_2>
 8003082:	4603      	mov	r3, r0
 8003084:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8003088:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800308c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	f7fe fd03 	bl	8001a9c <get_2>
 8003096:	4603      	mov	r3, r0
 8003098:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    uint8_t registers_bytes = get_1(nmbs);
 800309c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	f7fe fcb2 	bl	8001a0e <get_1>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\tregs ", address, quantity, registers_bytes);

    err = recv(nmbs, registers_bytes);
 80030b0:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030be:	4611      	mov	r1, r2
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	f7fe fe04 	bl	8001cce <recv>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80030cc:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d002      	beq.n	80030da <handle_write_multiple_registers+0x9a>
        return err;
 80030d4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80030d8:	e117      	b.n	800330a <handle_write_multiple_registers+0x2ca>

    uint16_t registers[0x007B];
    for (int i = 0; i < registers_bytes / 2; i++) {
 80030da:	2300      	movs	r3, #0
 80030dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80030e0:	e015      	b.n	800310e <handle_write_multiple_registers+0xce>
        registers[i] = get_2(nmbs);
 80030e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	f7fe fcd6 	bl	8001a9c <get_2>
 80030f0:	4603      	mov	r3, r0
 80030f2:	4619      	mov	r1, r3
 80030f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80030f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030fc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8003100:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < registers_bytes / 2; i++) {
 8003104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003108:	3301      	adds	r3, #1
 800310a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800310e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8003112:	085b      	lsrs	r3, r3, #1
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800311c:	4293      	cmp	r3, r2
 800311e:	dbe0      	blt.n	80030e2 <handle_write_multiple_registers+0xa2>
        NMBS_DEBUG_PRINT("%d ", registers[i]);
    }

    err = recv_msg_footer(nmbs);
 8003120:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003124:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	f7fe fe2c 	bl	8001d86 <recv_msg_footer>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8003134:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <handle_write_multiple_registers+0x102>
        return err;
 800313c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8003140:	e0e3      	b.n	800330a <handle_write_multiple_registers+0x2ca>

    if (!nmbs->msg.ignored) {
 8003142:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003146:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8003150:	f083 0301 	eor.w	r3, r3, #1
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 80c9 	beq.w	80032ee <handle_write_multiple_registers+0x2ae>
        if (quantity < 1 || quantity > 0x007B)
 800315c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <handle_write_multiple_registers+0x12c>
 8003164:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8003168:	2b7b      	cmp	r3, #123	; 0x7b
 800316a:	d909      	bls.n	8003180 <handle_write_multiple_registers+0x140>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800316c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003170:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003174:	2103      	movs	r1, #3
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	f7fe ff8e 	bl	8002098 <send_exception_msg>
 800317c:	4603      	mov	r3, r0
 800317e:	e0c4      	b.n	800330a <handle_write_multiple_registers+0x2ca>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8003180:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8003184:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8003188:	4413      	add	r3, r2
 800318a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318e:	d909      	bls.n	80031a4 <handle_write_multiple_registers+0x164>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8003190:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003194:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003198:	2102      	movs	r1, #2
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	f7fe ff7c 	bl	8002098 <send_exception_msg>
 80031a0:	4603      	mov	r3, r0
 80031a2:	e0b2      	b.n	800330a <handle_write_multiple_registers+0x2ca>

        if (registers_bytes == 0)
 80031a4:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <handle_write_multiple_registers+0x180>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80031ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031b4:	2103      	movs	r1, #3
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	f7fe ff6e 	bl	8002098 <send_exception_msg>
 80031bc:	4603      	mov	r3, r0
 80031be:	e0a4      	b.n	800330a <handle_write_multiple_registers+0x2ca>

        if (registers_bytes != quantity * 2)
 80031c0:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 80031c4:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d009      	beq.n	80031e2 <handle_write_multiple_registers+0x1a2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80031ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031d6:	2103      	movs	r1, #3
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	f7fe ff5d 	bl	8002098 <send_exception_msg>
 80031de:	4603      	mov	r3, r0
 80031e0:	e093      	b.n	800330a <handle_write_multiple_registers+0x2ca>

        if (nmbs->callbacks.write_multiple_registers) {
 80031e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d072      	beq.n	80032da <handle_write_multiple_registers+0x29a>
            err = nmbs->callbacks.write_multiple_registers(address, quantity, registers, nmbs->platform.arg);
 80031f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 8003202:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003206:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8003210:	f107 020c 	add.w	r2, r7, #12
 8003214:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8003218:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 800321c:	47a0      	blx	r4
 800321e:	4603      	mov	r3, r0
 8003220:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8003224:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01d      	beq.n	8003268 <handle_write_multiple_registers+0x228>
                if (nmbs_error_is_exception(err))
 800322c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8003230:	2b00      	cmp	r3, #0
 8003232:	dd0f      	ble.n	8003254 <handle_write_multiple_registers+0x214>
 8003234:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8003238:	2b04      	cmp	r3, #4
 800323a:	dc0b      	bgt.n	8003254 <handle_write_multiple_registers+0x214>
                    return send_exception_msg(nmbs, err);
 800323c:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8003240:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003244:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003248:	4611      	mov	r1, r2
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	f7fe ff24 	bl	8002098 <send_exception_msg>
 8003250:	4603      	mov	r3, r0
 8003252:	e05a      	b.n	800330a <handle_write_multiple_registers+0x2ca>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8003254:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003258:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800325c:	2104      	movs	r1, #4
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	f7fe ff1a 	bl	8002098 <send_exception_msg>
 8003264:	4603      	mov	r3, r0
 8003266:	e050      	b.n	800330a <handle_write_multiple_registers+0x2ca>
            }

            if (!nmbs->msg.broadcast) {
 8003268:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800326c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8003276:	f083 0301 	eor.w	r3, r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d043      	beq.n	8003308 <handle_write_multiple_registers+0x2c8>
                put_res_header(nmbs, 4);
 8003280:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003284:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003288:	2104      	movs	r1, #4
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	f7fe fef5 	bl	800207a <put_res_header>

                put_2(nmbs, address);
 8003290:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8003294:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003298:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800329c:	4611      	mov	r1, r2
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	f7fe fc21 	bl	8001ae6 <put_2>
                put_2(nmbs, quantity);
 80032a4:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 80032a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032b0:	4611      	mov	r1, r2
 80032b2:	6818      	ldr	r0, [r3, #0]
 80032b4:	f7fe fc17 	bl	8001ae6 <put_2>
                NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

                err = send_msg(nmbs);
 80032b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	f7fe fe7b 	bl	8001fbc <send_msg>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 80032cc:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d019      	beq.n	8003308 <handle_write_multiple_registers+0x2c8>
                    return err;
 80032d4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80032d8:	e017      	b.n	800330a <handle_write_multiple_registers+0x2ca>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80032da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032e2:	2101      	movs	r1, #1
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	f7fe fed7 	bl	8002098 <send_exception_msg>
 80032ea:	4603      	mov	r3, r0
 80032ec:	e00d      	b.n	800330a <handle_write_multiple_registers+0x2ca>
        }
    }
    else {
        return recv_write_multiple_registers_res(nmbs, address, quantity);
 80032ee:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 80032f2:	f8b7 1108 	ldrh.w	r1, [r7, #264]	; 0x108
 80032f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	f7ff f904 	bl	800250c <recv_write_multiple_registers_res>
 8003304:	4603      	mov	r3, r0
 8003306:	e000      	b.n	800330a <handle_write_multiple_registers+0x2ca>
    }

    return NMBS_ERROR_NONE;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003310:	46bd      	mov	sp, r7
 8003312:	bd90      	pop	{r4, r7, pc}

08003314 <handle_req_fc>:
#endif


static nmbs_error handle_req_fc(nmbs_t* nmbs) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("fc %d\t", nmbs->msg.fc);

    nmbs_error err;
    switch (nmbs->msg.fc) {
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8003322:	3b01      	subs	r3, #1
 8003324:	2b0f      	cmp	r3, #15
 8003326:	d853      	bhi.n	80033d0 <handle_req_fc+0xbc>
 8003328:	a201      	add	r2, pc, #4	; (adr r2, 8003330 <handle_req_fc+0x1c>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003371 	.word	0x08003371
 8003334:	0800337d 	.word	0x0800337d
 8003338:	08003389 	.word	0x08003389
 800333c:	08003395 	.word	0x08003395
 8003340:	080033a1 	.word	0x080033a1
 8003344:	080033ad 	.word	0x080033ad
 8003348:	080033d1 	.word	0x080033d1
 800334c:	080033d1 	.word	0x080033d1
 8003350:	080033d1 	.word	0x080033d1
 8003354:	080033d1 	.word	0x080033d1
 8003358:	080033d1 	.word	0x080033d1
 800335c:	080033d1 	.word	0x080033d1
 8003360:	080033d1 	.word	0x080033d1
 8003364:	080033d1 	.word	0x080033d1
 8003368:	080033b9 	.word	0x080033b9
 800336c:	080033c5 	.word	0x080033c5
#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 1:
            err = handle_read_coils(nmbs);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff fb82 	bl	8002a7a <handle_read_coils>
 8003376:	4603      	mov	r3, r0
 8003378:	73fb      	strb	r3, [r7, #15]
            break;
 800337a:	e02b      	b.n	80033d4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
        case 2:
            err = handle_read_discrete_inputs(nmbs);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fb8c 	bl	8002a9a <handle_read_discrete_inputs>
 8003382:	4603      	mov	r3, r0
 8003384:	73fb      	strb	r3, [r7, #15]
            break;
 8003386:	e025      	b.n	80033d4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
        case 3:
            err = handle_read_holding_registers(nmbs);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff fb96 	bl	8002aba <handle_read_holding_registers>
 800338e:	4603      	mov	r3, r0
 8003390:	73fb      	strb	r3, [r7, #15]
            break;
 8003392:	e01f      	b.n	80033d4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
        case 4:
            err = handle_read_input_registers(nmbs);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff fba0 	bl	8002ada <handle_read_input_registers>
 800339a:	4603      	mov	r3, r0
 800339c:	73fb      	strb	r3, [r7, #15]
            break;
 800339e:	e019      	b.n	80033d4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
        case 5:
            err = handle_write_single_coil(nmbs);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff fbaa 	bl	8002afa <handle_write_single_coil>
 80033a6:	4603      	mov	r3, r0
 80033a8:	73fb      	strb	r3, [r7, #15]
            break;
 80033aa:	e013      	b.n	80033d4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
        case 6:
            err = handle_write_single_register(nmbs);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff fc43 	bl	8002c38 <handle_write_single_register>
 80033b2:	4603      	mov	r3, r0
 80033b4:	73fb      	strb	r3, [r7, #15]
            break;
 80033b6:	e00d      	b.n	80033d4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 15:
            err = handle_write_multiple_coils(nmbs);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7ff fcca 	bl	8002d52 <handle_write_multiple_coils>
 80033be:	4603      	mov	r3, r0
 80033c0:	73fb      	strb	r3, [r7, #15]
            break;
 80033c2:	e007      	b.n	80033d4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
        case 16:
            err = handle_write_multiple_registers(nmbs);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fe3b 	bl	8003040 <handle_write_multiple_registers>
 80033ca:	4603      	mov	r3, r0
 80033cc:	73fb      	strb	r3, [r7, #15]
            break;
 80033ce:	e001      	b.n	80033d4 <handle_req_fc+0xc0>
#endif

        default:
            err = NMBS_EXCEPTION_ILLEGAL_FUNCTION;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
    }

    return err;
 80033d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <nmbs_server_create>:


nmbs_error nmbs_server_create(nmbs_t* nmbs, uint8_t address_rtu, const nmbs_platform_conf* platform_conf,
                              const nmbs_callbacks* callbacks) {
 80033e0:	b5b0      	push	{r4, r5, r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	460b      	mov	r3, r1
 80033ee:	72fb      	strb	r3, [r7, #11]
    if (platform_conf->transport == NMBS_TRANSPORT_RTU && address_rtu == 0)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d105      	bne.n	8003404 <nmbs_server_create+0x24>
 80033f8:	7afb      	ldrb	r3, [r7, #11]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <nmbs_server_create+0x24>
        return NMBS_ERROR_INVALID_ARGUMENT;
 80033fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003402:	e01c      	b.n	800343e <nmbs_server_create+0x5e>

    nmbs_error ret = nmbs_create(nmbs, platform_conf);
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f7fe fbc0 	bl	8001b8c <nmbs_create>
 800340c:	4603      	mov	r3, r0
 800340e:	75fb      	strb	r3, [r7, #23]
    if (ret != NMBS_ERROR_NONE)
 8003410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <nmbs_server_create+0x3e>
        return ret;
 8003418:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800341c:	e00f      	b.n	800343e <nmbs_server_create+0x5e>

    nmbs->address_rtu = address_rtu;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	7afa      	ldrb	r2, [r7, #11]
 8003422:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    nmbs->callbacks = *callbacks;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 800342e:	4615      	mov	r5, r2
 8003430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003438:	682b      	ldr	r3, [r5, #0]
 800343a:	6023      	str	r3, [r4, #0]

    return NMBS_ERROR_NONE;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bdb0      	pop	{r4, r5, r7, pc}

08003446 <nmbs_server_poll>:


nmbs_error nmbs_server_poll(nmbs_t* nmbs) {
 8003446:	b590      	push	{r4, r7, lr}
 8003448:	b085      	sub	sp, #20
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
    msg_state_reset(nmbs);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe fb7d 	bl	8001b4e <msg_state_reset>

    bool first_byte_received = false;
 8003454:	2300      	movs	r3, #0
 8003456:	73bb      	strb	r3, [r7, #14]
    nmbs_error err = recv_req_header(nmbs, &first_byte_received);
 8003458:	f107 030e 	add.w	r3, r7, #14
 800345c:	4619      	mov	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fe fdd3 	bl	800200a <recv_req_header>
 8003464:	4603      	mov	r3, r0
 8003466:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE) {
 8003468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00f      	beq.n	8003490 <nmbs_server_poll+0x4a>
        if (!first_byte_received && err == NMBS_ERROR_TIMEOUT)
 8003470:	7bbb      	ldrb	r3, [r7, #14]
 8003472:	f083 0301 	eor.w	r3, r3, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d006      	beq.n	800348a <nmbs_server_poll+0x44>
 800347c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003480:	f113 0f03 	cmn.w	r3, #3
 8003484:	d101      	bne.n	800348a <nmbs_server_poll+0x44>
            return NMBS_ERROR_NONE;
 8003486:	2300      	movs	r3, #0
 8003488:	e031      	b.n	80034ee <nmbs_server_poll+0xa8>

        return err;
 800348a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348e:	e02e      	b.n	80034ee <nmbs_server_poll+0xa8>
        else
            printf("address_rtu %d\t", nmbs->msg.unit_id);
    }
#endif

    err = handle_req_fc(nmbs);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff3f 	bl	8003314 <handle_req_fc>
 8003496:	4603      	mov	r3, r0
 8003498:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE && !nmbs_error_is_exception(err)) {
 800349a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d024      	beq.n	80034ec <nmbs_server_poll+0xa6>
 80034a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	dd03      	ble.n	80034b2 <nmbs_server_poll+0x6c>
 80034aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	dd1c      	ble.n	80034ec <nmbs_server_poll+0xa6>
        if (nmbs->platform.transport == NMBS_TRANSPORT_RTU && err != NMBS_ERROR_TIMEOUT && nmbs->msg.ignored) {
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d114      	bne.n	80034e6 <nmbs_server_poll+0xa0>
 80034bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034c0:	f113 0f03 	cmn.w	r3, #3
 80034c4:	d00f      	beq.n	80034e6 <nmbs_server_poll+0xa0>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <nmbs_server_poll+0xa0>
            // Flush the remaining data on the line
            nmbs->platform.read(nmbs->msg.buf, sizeof(nmbs->msg.buf), 0, nmbs->platform.arg);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 80034de:	2200      	movs	r2, #0
 80034e0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80034e4:	47a0      	blx	r4
        }

        return err;
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ea:	e000      	b.n	80034ee <nmbs_server_poll+0xa8>
    }

    return NMBS_ERROR_NONE;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd90      	pop	{r4, r7, pc}
	...

080034f8 <__errno>:
 80034f8:	4b01      	ldr	r3, [pc, #4]	; (8003500 <__errno+0x8>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000000 	.word	0x20000000

08003504 <__libc_init_array>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	4d0d      	ldr	r5, [pc, #52]	; (800353c <__libc_init_array+0x38>)
 8003508:	4c0d      	ldr	r4, [pc, #52]	; (8003540 <__libc_init_array+0x3c>)
 800350a:	1b64      	subs	r4, r4, r5
 800350c:	10a4      	asrs	r4, r4, #2
 800350e:	2600      	movs	r6, #0
 8003510:	42a6      	cmp	r6, r4
 8003512:	d109      	bne.n	8003528 <__libc_init_array+0x24>
 8003514:	4d0b      	ldr	r5, [pc, #44]	; (8003544 <__libc_init_array+0x40>)
 8003516:	4c0c      	ldr	r4, [pc, #48]	; (8003548 <__libc_init_array+0x44>)
 8003518:	f001 f88e 	bl	8004638 <_init>
 800351c:	1b64      	subs	r4, r4, r5
 800351e:	10a4      	asrs	r4, r4, #2
 8003520:	2600      	movs	r6, #0
 8003522:	42a6      	cmp	r6, r4
 8003524:	d105      	bne.n	8003532 <__libc_init_array+0x2e>
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	f855 3b04 	ldr.w	r3, [r5], #4
 800352c:	4798      	blx	r3
 800352e:	3601      	adds	r6, #1
 8003530:	e7ee      	b.n	8003510 <__libc_init_array+0xc>
 8003532:	f855 3b04 	ldr.w	r3, [r5], #4
 8003536:	4798      	blx	r3
 8003538:	3601      	adds	r6, #1
 800353a:	e7f2      	b.n	8003522 <__libc_init_array+0x1e>
 800353c:	0800473c 	.word	0x0800473c
 8003540:	0800473c 	.word	0x0800473c
 8003544:	0800473c 	.word	0x0800473c
 8003548:	08004740 	.word	0x08004740

0800354c <memcpy>:
 800354c:	440a      	add	r2, r1
 800354e:	4291      	cmp	r1, r2
 8003550:	f100 33ff 	add.w	r3, r0, #4294967295
 8003554:	d100      	bne.n	8003558 <memcpy+0xc>
 8003556:	4770      	bx	lr
 8003558:	b510      	push	{r4, lr}
 800355a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800355e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003562:	4291      	cmp	r1, r2
 8003564:	d1f9      	bne.n	800355a <memcpy+0xe>
 8003566:	bd10      	pop	{r4, pc}

08003568 <memset>:
 8003568:	4402      	add	r2, r0
 800356a:	4603      	mov	r3, r0
 800356c:	4293      	cmp	r3, r2
 800356e:	d100      	bne.n	8003572 <memset+0xa>
 8003570:	4770      	bx	lr
 8003572:	f803 1b01 	strb.w	r1, [r3], #1
 8003576:	e7f9      	b.n	800356c <memset+0x4>

08003578 <_puts_r>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	460e      	mov	r6, r1
 800357c:	4605      	mov	r5, r0
 800357e:	b118      	cbz	r0, 8003588 <_puts_r+0x10>
 8003580:	6983      	ldr	r3, [r0, #24]
 8003582:	b90b      	cbnz	r3, 8003588 <_puts_r+0x10>
 8003584:	f000 fa68 	bl	8003a58 <__sinit>
 8003588:	69ab      	ldr	r3, [r5, #24]
 800358a:	68ac      	ldr	r4, [r5, #8]
 800358c:	b913      	cbnz	r3, 8003594 <_puts_r+0x1c>
 800358e:	4628      	mov	r0, r5
 8003590:	f000 fa62 	bl	8003a58 <__sinit>
 8003594:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <_puts_r+0xd0>)
 8003596:	429c      	cmp	r4, r3
 8003598:	d120      	bne.n	80035dc <_puts_r+0x64>
 800359a:	686c      	ldr	r4, [r5, #4]
 800359c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800359e:	07db      	lsls	r3, r3, #31
 80035a0:	d405      	bmi.n	80035ae <_puts_r+0x36>
 80035a2:	89a3      	ldrh	r3, [r4, #12]
 80035a4:	0598      	lsls	r0, r3, #22
 80035a6:	d402      	bmi.n	80035ae <_puts_r+0x36>
 80035a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035aa:	f000 faf3 	bl	8003b94 <__retarget_lock_acquire_recursive>
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	0719      	lsls	r1, r3, #28
 80035b2:	d51d      	bpl.n	80035f0 <_puts_r+0x78>
 80035b4:	6923      	ldr	r3, [r4, #16]
 80035b6:	b1db      	cbz	r3, 80035f0 <_puts_r+0x78>
 80035b8:	3e01      	subs	r6, #1
 80035ba:	68a3      	ldr	r3, [r4, #8]
 80035bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035c0:	3b01      	subs	r3, #1
 80035c2:	60a3      	str	r3, [r4, #8]
 80035c4:	bb39      	cbnz	r1, 8003616 <_puts_r+0x9e>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da38      	bge.n	800363c <_puts_r+0xc4>
 80035ca:	4622      	mov	r2, r4
 80035cc:	210a      	movs	r1, #10
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 f868 	bl	80036a4 <__swbuf_r>
 80035d4:	3001      	adds	r0, #1
 80035d6:	d011      	beq.n	80035fc <_puts_r+0x84>
 80035d8:	250a      	movs	r5, #10
 80035da:	e011      	b.n	8003600 <_puts_r+0x88>
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <_puts_r+0xd4>)
 80035de:	429c      	cmp	r4, r3
 80035e0:	d101      	bne.n	80035e6 <_puts_r+0x6e>
 80035e2:	68ac      	ldr	r4, [r5, #8]
 80035e4:	e7da      	b.n	800359c <_puts_r+0x24>
 80035e6:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <_puts_r+0xd8>)
 80035e8:	429c      	cmp	r4, r3
 80035ea:	bf08      	it	eq
 80035ec:	68ec      	ldreq	r4, [r5, #12]
 80035ee:	e7d5      	b.n	800359c <_puts_r+0x24>
 80035f0:	4621      	mov	r1, r4
 80035f2:	4628      	mov	r0, r5
 80035f4:	f000 f8a8 	bl	8003748 <__swsetup_r>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d0dd      	beq.n	80035b8 <_puts_r+0x40>
 80035fc:	f04f 35ff 	mov.w	r5, #4294967295
 8003600:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003602:	07da      	lsls	r2, r3, #31
 8003604:	d405      	bmi.n	8003612 <_puts_r+0x9a>
 8003606:	89a3      	ldrh	r3, [r4, #12]
 8003608:	059b      	lsls	r3, r3, #22
 800360a:	d402      	bmi.n	8003612 <_puts_r+0x9a>
 800360c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800360e:	f000 fac2 	bl	8003b96 <__retarget_lock_release_recursive>
 8003612:	4628      	mov	r0, r5
 8003614:	bd70      	pop	{r4, r5, r6, pc}
 8003616:	2b00      	cmp	r3, #0
 8003618:	da04      	bge.n	8003624 <_puts_r+0xac>
 800361a:	69a2      	ldr	r2, [r4, #24]
 800361c:	429a      	cmp	r2, r3
 800361e:	dc06      	bgt.n	800362e <_puts_r+0xb6>
 8003620:	290a      	cmp	r1, #10
 8003622:	d004      	beq.n	800362e <_puts_r+0xb6>
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	6022      	str	r2, [r4, #0]
 800362a:	7019      	strb	r1, [r3, #0]
 800362c:	e7c5      	b.n	80035ba <_puts_r+0x42>
 800362e:	4622      	mov	r2, r4
 8003630:	4628      	mov	r0, r5
 8003632:	f000 f837 	bl	80036a4 <__swbuf_r>
 8003636:	3001      	adds	r0, #1
 8003638:	d1bf      	bne.n	80035ba <_puts_r+0x42>
 800363a:	e7df      	b.n	80035fc <_puts_r+0x84>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	250a      	movs	r5, #10
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	6022      	str	r2, [r4, #0]
 8003644:	701d      	strb	r5, [r3, #0]
 8003646:	e7db      	b.n	8003600 <_puts_r+0x88>
 8003648:	080046c0 	.word	0x080046c0
 800364c:	080046e0 	.word	0x080046e0
 8003650:	080046a0 	.word	0x080046a0

08003654 <puts>:
 8003654:	4b02      	ldr	r3, [pc, #8]	; (8003660 <puts+0xc>)
 8003656:	4601      	mov	r1, r0
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	f7ff bf8d 	b.w	8003578 <_puts_r>
 800365e:	bf00      	nop
 8003660:	20000000 	.word	0x20000000

08003664 <siprintf>:
 8003664:	b40e      	push	{r1, r2, r3}
 8003666:	b500      	push	{lr}
 8003668:	b09c      	sub	sp, #112	; 0x70
 800366a:	ab1d      	add	r3, sp, #116	; 0x74
 800366c:	9002      	str	r0, [sp, #8]
 800366e:	9006      	str	r0, [sp, #24]
 8003670:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003674:	4809      	ldr	r0, [pc, #36]	; (800369c <siprintf+0x38>)
 8003676:	9107      	str	r1, [sp, #28]
 8003678:	9104      	str	r1, [sp, #16]
 800367a:	4909      	ldr	r1, [pc, #36]	; (80036a0 <siprintf+0x3c>)
 800367c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003680:	9105      	str	r1, [sp, #20]
 8003682:	6800      	ldr	r0, [r0, #0]
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	a902      	add	r1, sp, #8
 8003688:	f000 fc28 	bl	8003edc <_svfiprintf_r>
 800368c:	9b02      	ldr	r3, [sp, #8]
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	b01c      	add	sp, #112	; 0x70
 8003694:	f85d eb04 	ldr.w	lr, [sp], #4
 8003698:	b003      	add	sp, #12
 800369a:	4770      	bx	lr
 800369c:	20000000 	.word	0x20000000
 80036a0:	ffff0208 	.word	0xffff0208

080036a4 <__swbuf_r>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	460e      	mov	r6, r1
 80036a8:	4614      	mov	r4, r2
 80036aa:	4605      	mov	r5, r0
 80036ac:	b118      	cbz	r0, 80036b6 <__swbuf_r+0x12>
 80036ae:	6983      	ldr	r3, [r0, #24]
 80036b0:	b90b      	cbnz	r3, 80036b6 <__swbuf_r+0x12>
 80036b2:	f000 f9d1 	bl	8003a58 <__sinit>
 80036b6:	4b21      	ldr	r3, [pc, #132]	; (800373c <__swbuf_r+0x98>)
 80036b8:	429c      	cmp	r4, r3
 80036ba:	d12b      	bne.n	8003714 <__swbuf_r+0x70>
 80036bc:	686c      	ldr	r4, [r5, #4]
 80036be:	69a3      	ldr	r3, [r4, #24]
 80036c0:	60a3      	str	r3, [r4, #8]
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	071a      	lsls	r2, r3, #28
 80036c6:	d52f      	bpl.n	8003728 <__swbuf_r+0x84>
 80036c8:	6923      	ldr	r3, [r4, #16]
 80036ca:	b36b      	cbz	r3, 8003728 <__swbuf_r+0x84>
 80036cc:	6923      	ldr	r3, [r4, #16]
 80036ce:	6820      	ldr	r0, [r4, #0]
 80036d0:	1ac0      	subs	r0, r0, r3
 80036d2:	6963      	ldr	r3, [r4, #20]
 80036d4:	b2f6      	uxtb	r6, r6
 80036d6:	4283      	cmp	r3, r0
 80036d8:	4637      	mov	r7, r6
 80036da:	dc04      	bgt.n	80036e6 <__swbuf_r+0x42>
 80036dc:	4621      	mov	r1, r4
 80036de:	4628      	mov	r0, r5
 80036e0:	f000 f926 	bl	8003930 <_fflush_r>
 80036e4:	bb30      	cbnz	r0, 8003734 <__swbuf_r+0x90>
 80036e6:	68a3      	ldr	r3, [r4, #8]
 80036e8:	3b01      	subs	r3, #1
 80036ea:	60a3      	str	r3, [r4, #8]
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	6022      	str	r2, [r4, #0]
 80036f2:	701e      	strb	r6, [r3, #0]
 80036f4:	6963      	ldr	r3, [r4, #20]
 80036f6:	3001      	adds	r0, #1
 80036f8:	4283      	cmp	r3, r0
 80036fa:	d004      	beq.n	8003706 <__swbuf_r+0x62>
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	07db      	lsls	r3, r3, #31
 8003700:	d506      	bpl.n	8003710 <__swbuf_r+0x6c>
 8003702:	2e0a      	cmp	r6, #10
 8003704:	d104      	bne.n	8003710 <__swbuf_r+0x6c>
 8003706:	4621      	mov	r1, r4
 8003708:	4628      	mov	r0, r5
 800370a:	f000 f911 	bl	8003930 <_fflush_r>
 800370e:	b988      	cbnz	r0, 8003734 <__swbuf_r+0x90>
 8003710:	4638      	mov	r0, r7
 8003712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <__swbuf_r+0x9c>)
 8003716:	429c      	cmp	r4, r3
 8003718:	d101      	bne.n	800371e <__swbuf_r+0x7a>
 800371a:	68ac      	ldr	r4, [r5, #8]
 800371c:	e7cf      	b.n	80036be <__swbuf_r+0x1a>
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <__swbuf_r+0xa0>)
 8003720:	429c      	cmp	r4, r3
 8003722:	bf08      	it	eq
 8003724:	68ec      	ldreq	r4, [r5, #12]
 8003726:	e7ca      	b.n	80036be <__swbuf_r+0x1a>
 8003728:	4621      	mov	r1, r4
 800372a:	4628      	mov	r0, r5
 800372c:	f000 f80c 	bl	8003748 <__swsetup_r>
 8003730:	2800      	cmp	r0, #0
 8003732:	d0cb      	beq.n	80036cc <__swbuf_r+0x28>
 8003734:	f04f 37ff 	mov.w	r7, #4294967295
 8003738:	e7ea      	b.n	8003710 <__swbuf_r+0x6c>
 800373a:	bf00      	nop
 800373c:	080046c0 	.word	0x080046c0
 8003740:	080046e0 	.word	0x080046e0
 8003744:	080046a0 	.word	0x080046a0

08003748 <__swsetup_r>:
 8003748:	4b32      	ldr	r3, [pc, #200]	; (8003814 <__swsetup_r+0xcc>)
 800374a:	b570      	push	{r4, r5, r6, lr}
 800374c:	681d      	ldr	r5, [r3, #0]
 800374e:	4606      	mov	r6, r0
 8003750:	460c      	mov	r4, r1
 8003752:	b125      	cbz	r5, 800375e <__swsetup_r+0x16>
 8003754:	69ab      	ldr	r3, [r5, #24]
 8003756:	b913      	cbnz	r3, 800375e <__swsetup_r+0x16>
 8003758:	4628      	mov	r0, r5
 800375a:	f000 f97d 	bl	8003a58 <__sinit>
 800375e:	4b2e      	ldr	r3, [pc, #184]	; (8003818 <__swsetup_r+0xd0>)
 8003760:	429c      	cmp	r4, r3
 8003762:	d10f      	bne.n	8003784 <__swsetup_r+0x3c>
 8003764:	686c      	ldr	r4, [r5, #4]
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800376c:	0719      	lsls	r1, r3, #28
 800376e:	d42c      	bmi.n	80037ca <__swsetup_r+0x82>
 8003770:	06dd      	lsls	r5, r3, #27
 8003772:	d411      	bmi.n	8003798 <__swsetup_r+0x50>
 8003774:	2309      	movs	r3, #9
 8003776:	6033      	str	r3, [r6, #0]
 8003778:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800377c:	81a3      	strh	r3, [r4, #12]
 800377e:	f04f 30ff 	mov.w	r0, #4294967295
 8003782:	e03e      	b.n	8003802 <__swsetup_r+0xba>
 8003784:	4b25      	ldr	r3, [pc, #148]	; (800381c <__swsetup_r+0xd4>)
 8003786:	429c      	cmp	r4, r3
 8003788:	d101      	bne.n	800378e <__swsetup_r+0x46>
 800378a:	68ac      	ldr	r4, [r5, #8]
 800378c:	e7eb      	b.n	8003766 <__swsetup_r+0x1e>
 800378e:	4b24      	ldr	r3, [pc, #144]	; (8003820 <__swsetup_r+0xd8>)
 8003790:	429c      	cmp	r4, r3
 8003792:	bf08      	it	eq
 8003794:	68ec      	ldreq	r4, [r5, #12]
 8003796:	e7e6      	b.n	8003766 <__swsetup_r+0x1e>
 8003798:	0758      	lsls	r0, r3, #29
 800379a:	d512      	bpl.n	80037c2 <__swsetup_r+0x7a>
 800379c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800379e:	b141      	cbz	r1, 80037b2 <__swsetup_r+0x6a>
 80037a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80037a4:	4299      	cmp	r1, r3
 80037a6:	d002      	beq.n	80037ae <__swsetup_r+0x66>
 80037a8:	4630      	mov	r0, r6
 80037aa:	f000 fa5b 	bl	8003c64 <_free_r>
 80037ae:	2300      	movs	r3, #0
 80037b0:	6363      	str	r3, [r4, #52]	; 0x34
 80037b2:	89a3      	ldrh	r3, [r4, #12]
 80037b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037b8:	81a3      	strh	r3, [r4, #12]
 80037ba:	2300      	movs	r3, #0
 80037bc:	6063      	str	r3, [r4, #4]
 80037be:	6923      	ldr	r3, [r4, #16]
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	89a3      	ldrh	r3, [r4, #12]
 80037c4:	f043 0308 	orr.w	r3, r3, #8
 80037c8:	81a3      	strh	r3, [r4, #12]
 80037ca:	6923      	ldr	r3, [r4, #16]
 80037cc:	b94b      	cbnz	r3, 80037e2 <__swsetup_r+0x9a>
 80037ce:	89a3      	ldrh	r3, [r4, #12]
 80037d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d003      	beq.n	80037e2 <__swsetup_r+0x9a>
 80037da:	4621      	mov	r1, r4
 80037dc:	4630      	mov	r0, r6
 80037de:	f000 fa01 	bl	8003be4 <__smakebuf_r>
 80037e2:	89a0      	ldrh	r0, [r4, #12]
 80037e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037e8:	f010 0301 	ands.w	r3, r0, #1
 80037ec:	d00a      	beq.n	8003804 <__swsetup_r+0xbc>
 80037ee:	2300      	movs	r3, #0
 80037f0:	60a3      	str	r3, [r4, #8]
 80037f2:	6963      	ldr	r3, [r4, #20]
 80037f4:	425b      	negs	r3, r3
 80037f6:	61a3      	str	r3, [r4, #24]
 80037f8:	6923      	ldr	r3, [r4, #16]
 80037fa:	b943      	cbnz	r3, 800380e <__swsetup_r+0xc6>
 80037fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003800:	d1ba      	bne.n	8003778 <__swsetup_r+0x30>
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	0781      	lsls	r1, r0, #30
 8003806:	bf58      	it	pl
 8003808:	6963      	ldrpl	r3, [r4, #20]
 800380a:	60a3      	str	r3, [r4, #8]
 800380c:	e7f4      	b.n	80037f8 <__swsetup_r+0xb0>
 800380e:	2000      	movs	r0, #0
 8003810:	e7f7      	b.n	8003802 <__swsetup_r+0xba>
 8003812:	bf00      	nop
 8003814:	20000000 	.word	0x20000000
 8003818:	080046c0 	.word	0x080046c0
 800381c:	080046e0 	.word	0x080046e0
 8003820:	080046a0 	.word	0x080046a0

08003824 <__sflush_r>:
 8003824:	898a      	ldrh	r2, [r1, #12]
 8003826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800382a:	4605      	mov	r5, r0
 800382c:	0710      	lsls	r0, r2, #28
 800382e:	460c      	mov	r4, r1
 8003830:	d458      	bmi.n	80038e4 <__sflush_r+0xc0>
 8003832:	684b      	ldr	r3, [r1, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	dc05      	bgt.n	8003844 <__sflush_r+0x20>
 8003838:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	dc02      	bgt.n	8003844 <__sflush_r+0x20>
 800383e:	2000      	movs	r0, #0
 8003840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003846:	2e00      	cmp	r6, #0
 8003848:	d0f9      	beq.n	800383e <__sflush_r+0x1a>
 800384a:	2300      	movs	r3, #0
 800384c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003850:	682f      	ldr	r7, [r5, #0]
 8003852:	602b      	str	r3, [r5, #0]
 8003854:	d032      	beq.n	80038bc <__sflush_r+0x98>
 8003856:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003858:	89a3      	ldrh	r3, [r4, #12]
 800385a:	075a      	lsls	r2, r3, #29
 800385c:	d505      	bpl.n	800386a <__sflush_r+0x46>
 800385e:	6863      	ldr	r3, [r4, #4]
 8003860:	1ac0      	subs	r0, r0, r3
 8003862:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003864:	b10b      	cbz	r3, 800386a <__sflush_r+0x46>
 8003866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003868:	1ac0      	subs	r0, r0, r3
 800386a:	2300      	movs	r3, #0
 800386c:	4602      	mov	r2, r0
 800386e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003870:	6a21      	ldr	r1, [r4, #32]
 8003872:	4628      	mov	r0, r5
 8003874:	47b0      	blx	r6
 8003876:	1c43      	adds	r3, r0, #1
 8003878:	89a3      	ldrh	r3, [r4, #12]
 800387a:	d106      	bne.n	800388a <__sflush_r+0x66>
 800387c:	6829      	ldr	r1, [r5, #0]
 800387e:	291d      	cmp	r1, #29
 8003880:	d82c      	bhi.n	80038dc <__sflush_r+0xb8>
 8003882:	4a2a      	ldr	r2, [pc, #168]	; (800392c <__sflush_r+0x108>)
 8003884:	40ca      	lsrs	r2, r1
 8003886:	07d6      	lsls	r6, r2, #31
 8003888:	d528      	bpl.n	80038dc <__sflush_r+0xb8>
 800388a:	2200      	movs	r2, #0
 800388c:	6062      	str	r2, [r4, #4]
 800388e:	04d9      	lsls	r1, r3, #19
 8003890:	6922      	ldr	r2, [r4, #16]
 8003892:	6022      	str	r2, [r4, #0]
 8003894:	d504      	bpl.n	80038a0 <__sflush_r+0x7c>
 8003896:	1c42      	adds	r2, r0, #1
 8003898:	d101      	bne.n	800389e <__sflush_r+0x7a>
 800389a:	682b      	ldr	r3, [r5, #0]
 800389c:	b903      	cbnz	r3, 80038a0 <__sflush_r+0x7c>
 800389e:	6560      	str	r0, [r4, #84]	; 0x54
 80038a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038a2:	602f      	str	r7, [r5, #0]
 80038a4:	2900      	cmp	r1, #0
 80038a6:	d0ca      	beq.n	800383e <__sflush_r+0x1a>
 80038a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80038ac:	4299      	cmp	r1, r3
 80038ae:	d002      	beq.n	80038b6 <__sflush_r+0x92>
 80038b0:	4628      	mov	r0, r5
 80038b2:	f000 f9d7 	bl	8003c64 <_free_r>
 80038b6:	2000      	movs	r0, #0
 80038b8:	6360      	str	r0, [r4, #52]	; 0x34
 80038ba:	e7c1      	b.n	8003840 <__sflush_r+0x1c>
 80038bc:	6a21      	ldr	r1, [r4, #32]
 80038be:	2301      	movs	r3, #1
 80038c0:	4628      	mov	r0, r5
 80038c2:	47b0      	blx	r6
 80038c4:	1c41      	adds	r1, r0, #1
 80038c6:	d1c7      	bne.n	8003858 <__sflush_r+0x34>
 80038c8:	682b      	ldr	r3, [r5, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0c4      	beq.n	8003858 <__sflush_r+0x34>
 80038ce:	2b1d      	cmp	r3, #29
 80038d0:	d001      	beq.n	80038d6 <__sflush_r+0xb2>
 80038d2:	2b16      	cmp	r3, #22
 80038d4:	d101      	bne.n	80038da <__sflush_r+0xb6>
 80038d6:	602f      	str	r7, [r5, #0]
 80038d8:	e7b1      	b.n	800383e <__sflush_r+0x1a>
 80038da:	89a3      	ldrh	r3, [r4, #12]
 80038dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e0:	81a3      	strh	r3, [r4, #12]
 80038e2:	e7ad      	b.n	8003840 <__sflush_r+0x1c>
 80038e4:	690f      	ldr	r7, [r1, #16]
 80038e6:	2f00      	cmp	r7, #0
 80038e8:	d0a9      	beq.n	800383e <__sflush_r+0x1a>
 80038ea:	0793      	lsls	r3, r2, #30
 80038ec:	680e      	ldr	r6, [r1, #0]
 80038ee:	bf08      	it	eq
 80038f0:	694b      	ldreq	r3, [r1, #20]
 80038f2:	600f      	str	r7, [r1, #0]
 80038f4:	bf18      	it	ne
 80038f6:	2300      	movne	r3, #0
 80038f8:	eba6 0807 	sub.w	r8, r6, r7
 80038fc:	608b      	str	r3, [r1, #8]
 80038fe:	f1b8 0f00 	cmp.w	r8, #0
 8003902:	dd9c      	ble.n	800383e <__sflush_r+0x1a>
 8003904:	6a21      	ldr	r1, [r4, #32]
 8003906:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003908:	4643      	mov	r3, r8
 800390a:	463a      	mov	r2, r7
 800390c:	4628      	mov	r0, r5
 800390e:	47b0      	blx	r6
 8003910:	2800      	cmp	r0, #0
 8003912:	dc06      	bgt.n	8003922 <__sflush_r+0xfe>
 8003914:	89a3      	ldrh	r3, [r4, #12]
 8003916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800391a:	81a3      	strh	r3, [r4, #12]
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	e78e      	b.n	8003840 <__sflush_r+0x1c>
 8003922:	4407      	add	r7, r0
 8003924:	eba8 0800 	sub.w	r8, r8, r0
 8003928:	e7e9      	b.n	80038fe <__sflush_r+0xda>
 800392a:	bf00      	nop
 800392c:	20400001 	.word	0x20400001

08003930 <_fflush_r>:
 8003930:	b538      	push	{r3, r4, r5, lr}
 8003932:	690b      	ldr	r3, [r1, #16]
 8003934:	4605      	mov	r5, r0
 8003936:	460c      	mov	r4, r1
 8003938:	b913      	cbnz	r3, 8003940 <_fflush_r+0x10>
 800393a:	2500      	movs	r5, #0
 800393c:	4628      	mov	r0, r5
 800393e:	bd38      	pop	{r3, r4, r5, pc}
 8003940:	b118      	cbz	r0, 800394a <_fflush_r+0x1a>
 8003942:	6983      	ldr	r3, [r0, #24]
 8003944:	b90b      	cbnz	r3, 800394a <_fflush_r+0x1a>
 8003946:	f000 f887 	bl	8003a58 <__sinit>
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <_fflush_r+0x6c>)
 800394c:	429c      	cmp	r4, r3
 800394e:	d11b      	bne.n	8003988 <_fflush_r+0x58>
 8003950:	686c      	ldr	r4, [r5, #4]
 8003952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0ef      	beq.n	800393a <_fflush_r+0xa>
 800395a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800395c:	07d0      	lsls	r0, r2, #31
 800395e:	d404      	bmi.n	800396a <_fflush_r+0x3a>
 8003960:	0599      	lsls	r1, r3, #22
 8003962:	d402      	bmi.n	800396a <_fflush_r+0x3a>
 8003964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003966:	f000 f915 	bl	8003b94 <__retarget_lock_acquire_recursive>
 800396a:	4628      	mov	r0, r5
 800396c:	4621      	mov	r1, r4
 800396e:	f7ff ff59 	bl	8003824 <__sflush_r>
 8003972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003974:	07da      	lsls	r2, r3, #31
 8003976:	4605      	mov	r5, r0
 8003978:	d4e0      	bmi.n	800393c <_fflush_r+0xc>
 800397a:	89a3      	ldrh	r3, [r4, #12]
 800397c:	059b      	lsls	r3, r3, #22
 800397e:	d4dd      	bmi.n	800393c <_fflush_r+0xc>
 8003980:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003982:	f000 f908 	bl	8003b96 <__retarget_lock_release_recursive>
 8003986:	e7d9      	b.n	800393c <_fflush_r+0xc>
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <_fflush_r+0x70>)
 800398a:	429c      	cmp	r4, r3
 800398c:	d101      	bne.n	8003992 <_fflush_r+0x62>
 800398e:	68ac      	ldr	r4, [r5, #8]
 8003990:	e7df      	b.n	8003952 <_fflush_r+0x22>
 8003992:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <_fflush_r+0x74>)
 8003994:	429c      	cmp	r4, r3
 8003996:	bf08      	it	eq
 8003998:	68ec      	ldreq	r4, [r5, #12]
 800399a:	e7da      	b.n	8003952 <_fflush_r+0x22>
 800399c:	080046c0 	.word	0x080046c0
 80039a0:	080046e0 	.word	0x080046e0
 80039a4:	080046a0 	.word	0x080046a0

080039a8 <std>:
 80039a8:	2300      	movs	r3, #0
 80039aa:	b510      	push	{r4, lr}
 80039ac:	4604      	mov	r4, r0
 80039ae:	e9c0 3300 	strd	r3, r3, [r0]
 80039b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039b6:	6083      	str	r3, [r0, #8]
 80039b8:	8181      	strh	r1, [r0, #12]
 80039ba:	6643      	str	r3, [r0, #100]	; 0x64
 80039bc:	81c2      	strh	r2, [r0, #14]
 80039be:	6183      	str	r3, [r0, #24]
 80039c0:	4619      	mov	r1, r3
 80039c2:	2208      	movs	r2, #8
 80039c4:	305c      	adds	r0, #92	; 0x5c
 80039c6:	f7ff fdcf 	bl	8003568 <memset>
 80039ca:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <std+0x38>)
 80039cc:	6263      	str	r3, [r4, #36]	; 0x24
 80039ce:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <std+0x3c>)
 80039d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80039d2:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <std+0x40>)
 80039d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <std+0x44>)
 80039d8:	6224      	str	r4, [r4, #32]
 80039da:	6323      	str	r3, [r4, #48]	; 0x30
 80039dc:	bd10      	pop	{r4, pc}
 80039de:	bf00      	nop
 80039e0:	08004425 	.word	0x08004425
 80039e4:	08004447 	.word	0x08004447
 80039e8:	0800447f 	.word	0x0800447f
 80039ec:	080044a3 	.word	0x080044a3

080039f0 <_cleanup_r>:
 80039f0:	4901      	ldr	r1, [pc, #4]	; (80039f8 <_cleanup_r+0x8>)
 80039f2:	f000 b8af 	b.w	8003b54 <_fwalk_reent>
 80039f6:	bf00      	nop
 80039f8:	08003931 	.word	0x08003931

080039fc <__sfmoreglue>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	2268      	movs	r2, #104	; 0x68
 8003a00:	1e4d      	subs	r5, r1, #1
 8003a02:	4355      	muls	r5, r2
 8003a04:	460e      	mov	r6, r1
 8003a06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a0a:	f000 f997 	bl	8003d3c <_malloc_r>
 8003a0e:	4604      	mov	r4, r0
 8003a10:	b140      	cbz	r0, 8003a24 <__sfmoreglue+0x28>
 8003a12:	2100      	movs	r1, #0
 8003a14:	e9c0 1600 	strd	r1, r6, [r0]
 8003a18:	300c      	adds	r0, #12
 8003a1a:	60a0      	str	r0, [r4, #8]
 8003a1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a20:	f7ff fda2 	bl	8003568 <memset>
 8003a24:	4620      	mov	r0, r4
 8003a26:	bd70      	pop	{r4, r5, r6, pc}

08003a28 <__sfp_lock_acquire>:
 8003a28:	4801      	ldr	r0, [pc, #4]	; (8003a30 <__sfp_lock_acquire+0x8>)
 8003a2a:	f000 b8b3 	b.w	8003b94 <__retarget_lock_acquire_recursive>
 8003a2e:	bf00      	nop
 8003a30:	20000219 	.word	0x20000219

08003a34 <__sfp_lock_release>:
 8003a34:	4801      	ldr	r0, [pc, #4]	; (8003a3c <__sfp_lock_release+0x8>)
 8003a36:	f000 b8ae 	b.w	8003b96 <__retarget_lock_release_recursive>
 8003a3a:	bf00      	nop
 8003a3c:	20000219 	.word	0x20000219

08003a40 <__sinit_lock_acquire>:
 8003a40:	4801      	ldr	r0, [pc, #4]	; (8003a48 <__sinit_lock_acquire+0x8>)
 8003a42:	f000 b8a7 	b.w	8003b94 <__retarget_lock_acquire_recursive>
 8003a46:	bf00      	nop
 8003a48:	2000021a 	.word	0x2000021a

08003a4c <__sinit_lock_release>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	; (8003a54 <__sinit_lock_release+0x8>)
 8003a4e:	f000 b8a2 	b.w	8003b96 <__retarget_lock_release_recursive>
 8003a52:	bf00      	nop
 8003a54:	2000021a 	.word	0x2000021a

08003a58 <__sinit>:
 8003a58:	b510      	push	{r4, lr}
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	f7ff fff0 	bl	8003a40 <__sinit_lock_acquire>
 8003a60:	69a3      	ldr	r3, [r4, #24]
 8003a62:	b11b      	cbz	r3, 8003a6c <__sinit+0x14>
 8003a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a68:	f7ff bff0 	b.w	8003a4c <__sinit_lock_release>
 8003a6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a70:	6523      	str	r3, [r4, #80]	; 0x50
 8003a72:	4b13      	ldr	r3, [pc, #76]	; (8003ac0 <__sinit+0x68>)
 8003a74:	4a13      	ldr	r2, [pc, #76]	; (8003ac4 <__sinit+0x6c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a7a:	42a3      	cmp	r3, r4
 8003a7c:	bf04      	itt	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	61a3      	streq	r3, [r4, #24]
 8003a82:	4620      	mov	r0, r4
 8003a84:	f000 f820 	bl	8003ac8 <__sfp>
 8003a88:	6060      	str	r0, [r4, #4]
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f000 f81c 	bl	8003ac8 <__sfp>
 8003a90:	60a0      	str	r0, [r4, #8]
 8003a92:	4620      	mov	r0, r4
 8003a94:	f000 f818 	bl	8003ac8 <__sfp>
 8003a98:	2200      	movs	r2, #0
 8003a9a:	60e0      	str	r0, [r4, #12]
 8003a9c:	2104      	movs	r1, #4
 8003a9e:	6860      	ldr	r0, [r4, #4]
 8003aa0:	f7ff ff82 	bl	80039a8 <std>
 8003aa4:	68a0      	ldr	r0, [r4, #8]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	2109      	movs	r1, #9
 8003aaa:	f7ff ff7d 	bl	80039a8 <std>
 8003aae:	68e0      	ldr	r0, [r4, #12]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	2112      	movs	r1, #18
 8003ab4:	f7ff ff78 	bl	80039a8 <std>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	61a3      	str	r3, [r4, #24]
 8003abc:	e7d2      	b.n	8003a64 <__sinit+0xc>
 8003abe:	bf00      	nop
 8003ac0:	0800469c 	.word	0x0800469c
 8003ac4:	080039f1 	.word	0x080039f1

08003ac8 <__sfp>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	4607      	mov	r7, r0
 8003acc:	f7ff ffac 	bl	8003a28 <__sfp_lock_acquire>
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	; (8003b4c <__sfp+0x84>)
 8003ad2:	681e      	ldr	r6, [r3, #0]
 8003ad4:	69b3      	ldr	r3, [r6, #24]
 8003ad6:	b913      	cbnz	r3, 8003ade <__sfp+0x16>
 8003ad8:	4630      	mov	r0, r6
 8003ada:	f7ff ffbd 	bl	8003a58 <__sinit>
 8003ade:	3648      	adds	r6, #72	; 0x48
 8003ae0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	d503      	bpl.n	8003af0 <__sfp+0x28>
 8003ae8:	6833      	ldr	r3, [r6, #0]
 8003aea:	b30b      	cbz	r3, 8003b30 <__sfp+0x68>
 8003aec:	6836      	ldr	r6, [r6, #0]
 8003aee:	e7f7      	b.n	8003ae0 <__sfp+0x18>
 8003af0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003af4:	b9d5      	cbnz	r5, 8003b2c <__sfp+0x64>
 8003af6:	4b16      	ldr	r3, [pc, #88]	; (8003b50 <__sfp+0x88>)
 8003af8:	60e3      	str	r3, [r4, #12]
 8003afa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003afe:	6665      	str	r5, [r4, #100]	; 0x64
 8003b00:	f000 f847 	bl	8003b92 <__retarget_lock_init_recursive>
 8003b04:	f7ff ff96 	bl	8003a34 <__sfp_lock_release>
 8003b08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003b0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003b10:	6025      	str	r5, [r4, #0]
 8003b12:	61a5      	str	r5, [r4, #24]
 8003b14:	2208      	movs	r2, #8
 8003b16:	4629      	mov	r1, r5
 8003b18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b1c:	f7ff fd24 	bl	8003568 <memset>
 8003b20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b28:	4620      	mov	r0, r4
 8003b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b2c:	3468      	adds	r4, #104	; 0x68
 8003b2e:	e7d9      	b.n	8003ae4 <__sfp+0x1c>
 8003b30:	2104      	movs	r1, #4
 8003b32:	4638      	mov	r0, r7
 8003b34:	f7ff ff62 	bl	80039fc <__sfmoreglue>
 8003b38:	4604      	mov	r4, r0
 8003b3a:	6030      	str	r0, [r6, #0]
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d1d5      	bne.n	8003aec <__sfp+0x24>
 8003b40:	f7ff ff78 	bl	8003a34 <__sfp_lock_release>
 8003b44:	230c      	movs	r3, #12
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	e7ee      	b.n	8003b28 <__sfp+0x60>
 8003b4a:	bf00      	nop
 8003b4c:	0800469c 	.word	0x0800469c
 8003b50:	ffff0001 	.word	0xffff0001

08003b54 <_fwalk_reent>:
 8003b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b58:	4606      	mov	r6, r0
 8003b5a:	4688      	mov	r8, r1
 8003b5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b60:	2700      	movs	r7, #0
 8003b62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b66:	f1b9 0901 	subs.w	r9, r9, #1
 8003b6a:	d505      	bpl.n	8003b78 <_fwalk_reent+0x24>
 8003b6c:	6824      	ldr	r4, [r4, #0]
 8003b6e:	2c00      	cmp	r4, #0
 8003b70:	d1f7      	bne.n	8003b62 <_fwalk_reent+0xe>
 8003b72:	4638      	mov	r0, r7
 8003b74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b78:	89ab      	ldrh	r3, [r5, #12]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d907      	bls.n	8003b8e <_fwalk_reent+0x3a>
 8003b7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b82:	3301      	adds	r3, #1
 8003b84:	d003      	beq.n	8003b8e <_fwalk_reent+0x3a>
 8003b86:	4629      	mov	r1, r5
 8003b88:	4630      	mov	r0, r6
 8003b8a:	47c0      	blx	r8
 8003b8c:	4307      	orrs	r7, r0
 8003b8e:	3568      	adds	r5, #104	; 0x68
 8003b90:	e7e9      	b.n	8003b66 <_fwalk_reent+0x12>

08003b92 <__retarget_lock_init_recursive>:
 8003b92:	4770      	bx	lr

08003b94 <__retarget_lock_acquire_recursive>:
 8003b94:	4770      	bx	lr

08003b96 <__retarget_lock_release_recursive>:
 8003b96:	4770      	bx	lr

08003b98 <__swhatbuf_r>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	460e      	mov	r6, r1
 8003b9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba0:	2900      	cmp	r1, #0
 8003ba2:	b096      	sub	sp, #88	; 0x58
 8003ba4:	4614      	mov	r4, r2
 8003ba6:	461d      	mov	r5, r3
 8003ba8:	da08      	bge.n	8003bbc <__swhatbuf_r+0x24>
 8003baa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	602a      	str	r2, [r5, #0]
 8003bb2:	061a      	lsls	r2, r3, #24
 8003bb4:	d410      	bmi.n	8003bd8 <__swhatbuf_r+0x40>
 8003bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bba:	e00e      	b.n	8003bda <__swhatbuf_r+0x42>
 8003bbc:	466a      	mov	r2, sp
 8003bbe:	f000 fc97 	bl	80044f0 <_fstat_r>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	dbf1      	blt.n	8003baa <__swhatbuf_r+0x12>
 8003bc6:	9a01      	ldr	r2, [sp, #4]
 8003bc8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003bcc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003bd0:	425a      	negs	r2, r3
 8003bd2:	415a      	adcs	r2, r3
 8003bd4:	602a      	str	r2, [r5, #0]
 8003bd6:	e7ee      	b.n	8003bb6 <__swhatbuf_r+0x1e>
 8003bd8:	2340      	movs	r3, #64	; 0x40
 8003bda:	2000      	movs	r0, #0
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	b016      	add	sp, #88	; 0x58
 8003be0:	bd70      	pop	{r4, r5, r6, pc}
	...

08003be4 <__smakebuf_r>:
 8003be4:	898b      	ldrh	r3, [r1, #12]
 8003be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003be8:	079d      	lsls	r5, r3, #30
 8003bea:	4606      	mov	r6, r0
 8003bec:	460c      	mov	r4, r1
 8003bee:	d507      	bpl.n	8003c00 <__smakebuf_r+0x1c>
 8003bf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	6123      	str	r3, [r4, #16]
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	6163      	str	r3, [r4, #20]
 8003bfc:	b002      	add	sp, #8
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	ab01      	add	r3, sp, #4
 8003c02:	466a      	mov	r2, sp
 8003c04:	f7ff ffc8 	bl	8003b98 <__swhatbuf_r>
 8003c08:	9900      	ldr	r1, [sp, #0]
 8003c0a:	4605      	mov	r5, r0
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	f000 f895 	bl	8003d3c <_malloc_r>
 8003c12:	b948      	cbnz	r0, 8003c28 <__smakebuf_r+0x44>
 8003c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c18:	059a      	lsls	r2, r3, #22
 8003c1a:	d4ef      	bmi.n	8003bfc <__smakebuf_r+0x18>
 8003c1c:	f023 0303 	bic.w	r3, r3, #3
 8003c20:	f043 0302 	orr.w	r3, r3, #2
 8003c24:	81a3      	strh	r3, [r4, #12]
 8003c26:	e7e3      	b.n	8003bf0 <__smakebuf_r+0xc>
 8003c28:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <__smakebuf_r+0x7c>)
 8003c2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c2c:	89a3      	ldrh	r3, [r4, #12]
 8003c2e:	6020      	str	r0, [r4, #0]
 8003c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c34:	81a3      	strh	r3, [r4, #12]
 8003c36:	9b00      	ldr	r3, [sp, #0]
 8003c38:	6163      	str	r3, [r4, #20]
 8003c3a:	9b01      	ldr	r3, [sp, #4]
 8003c3c:	6120      	str	r0, [r4, #16]
 8003c3e:	b15b      	cbz	r3, 8003c58 <__smakebuf_r+0x74>
 8003c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c44:	4630      	mov	r0, r6
 8003c46:	f000 fc65 	bl	8004514 <_isatty_r>
 8003c4a:	b128      	cbz	r0, 8003c58 <__smakebuf_r+0x74>
 8003c4c:	89a3      	ldrh	r3, [r4, #12]
 8003c4e:	f023 0303 	bic.w	r3, r3, #3
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	81a3      	strh	r3, [r4, #12]
 8003c58:	89a0      	ldrh	r0, [r4, #12]
 8003c5a:	4305      	orrs	r5, r0
 8003c5c:	81a5      	strh	r5, [r4, #12]
 8003c5e:	e7cd      	b.n	8003bfc <__smakebuf_r+0x18>
 8003c60:	080039f1 	.word	0x080039f1

08003c64 <_free_r>:
 8003c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c66:	2900      	cmp	r1, #0
 8003c68:	d044      	beq.n	8003cf4 <_free_r+0x90>
 8003c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c6e:	9001      	str	r0, [sp, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f1a1 0404 	sub.w	r4, r1, #4
 8003c76:	bfb8      	it	lt
 8003c78:	18e4      	addlt	r4, r4, r3
 8003c7a:	f000 fc87 	bl	800458c <__malloc_lock>
 8003c7e:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <_free_r+0x94>)
 8003c80:	9801      	ldr	r0, [sp, #4]
 8003c82:	6813      	ldr	r3, [r2, #0]
 8003c84:	b933      	cbnz	r3, 8003c94 <_free_r+0x30>
 8003c86:	6063      	str	r3, [r4, #4]
 8003c88:	6014      	str	r4, [r2, #0]
 8003c8a:	b003      	add	sp, #12
 8003c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c90:	f000 bc82 	b.w	8004598 <__malloc_unlock>
 8003c94:	42a3      	cmp	r3, r4
 8003c96:	d908      	bls.n	8003caa <_free_r+0x46>
 8003c98:	6825      	ldr	r5, [r4, #0]
 8003c9a:	1961      	adds	r1, r4, r5
 8003c9c:	428b      	cmp	r3, r1
 8003c9e:	bf01      	itttt	eq
 8003ca0:	6819      	ldreq	r1, [r3, #0]
 8003ca2:	685b      	ldreq	r3, [r3, #4]
 8003ca4:	1949      	addeq	r1, r1, r5
 8003ca6:	6021      	streq	r1, [r4, #0]
 8003ca8:	e7ed      	b.n	8003c86 <_free_r+0x22>
 8003caa:	461a      	mov	r2, r3
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	b10b      	cbz	r3, 8003cb4 <_free_r+0x50>
 8003cb0:	42a3      	cmp	r3, r4
 8003cb2:	d9fa      	bls.n	8003caa <_free_r+0x46>
 8003cb4:	6811      	ldr	r1, [r2, #0]
 8003cb6:	1855      	adds	r5, r2, r1
 8003cb8:	42a5      	cmp	r5, r4
 8003cba:	d10b      	bne.n	8003cd4 <_free_r+0x70>
 8003cbc:	6824      	ldr	r4, [r4, #0]
 8003cbe:	4421      	add	r1, r4
 8003cc0:	1854      	adds	r4, r2, r1
 8003cc2:	42a3      	cmp	r3, r4
 8003cc4:	6011      	str	r1, [r2, #0]
 8003cc6:	d1e0      	bne.n	8003c8a <_free_r+0x26>
 8003cc8:	681c      	ldr	r4, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	6053      	str	r3, [r2, #4]
 8003cce:	4421      	add	r1, r4
 8003cd0:	6011      	str	r1, [r2, #0]
 8003cd2:	e7da      	b.n	8003c8a <_free_r+0x26>
 8003cd4:	d902      	bls.n	8003cdc <_free_r+0x78>
 8003cd6:	230c      	movs	r3, #12
 8003cd8:	6003      	str	r3, [r0, #0]
 8003cda:	e7d6      	b.n	8003c8a <_free_r+0x26>
 8003cdc:	6825      	ldr	r5, [r4, #0]
 8003cde:	1961      	adds	r1, r4, r5
 8003ce0:	428b      	cmp	r3, r1
 8003ce2:	bf04      	itt	eq
 8003ce4:	6819      	ldreq	r1, [r3, #0]
 8003ce6:	685b      	ldreq	r3, [r3, #4]
 8003ce8:	6063      	str	r3, [r4, #4]
 8003cea:	bf04      	itt	eq
 8003cec:	1949      	addeq	r1, r1, r5
 8003cee:	6021      	streq	r1, [r4, #0]
 8003cf0:	6054      	str	r4, [r2, #4]
 8003cf2:	e7ca      	b.n	8003c8a <_free_r+0x26>
 8003cf4:	b003      	add	sp, #12
 8003cf6:	bd30      	pop	{r4, r5, pc}
 8003cf8:	2000021c 	.word	0x2000021c

08003cfc <sbrk_aligned>:
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	4e0e      	ldr	r6, [pc, #56]	; (8003d38 <sbrk_aligned+0x3c>)
 8003d00:	460c      	mov	r4, r1
 8003d02:	6831      	ldr	r1, [r6, #0]
 8003d04:	4605      	mov	r5, r0
 8003d06:	b911      	cbnz	r1, 8003d0e <sbrk_aligned+0x12>
 8003d08:	f000 fb7c 	bl	8004404 <_sbrk_r>
 8003d0c:	6030      	str	r0, [r6, #0]
 8003d0e:	4621      	mov	r1, r4
 8003d10:	4628      	mov	r0, r5
 8003d12:	f000 fb77 	bl	8004404 <_sbrk_r>
 8003d16:	1c43      	adds	r3, r0, #1
 8003d18:	d00a      	beq.n	8003d30 <sbrk_aligned+0x34>
 8003d1a:	1cc4      	adds	r4, r0, #3
 8003d1c:	f024 0403 	bic.w	r4, r4, #3
 8003d20:	42a0      	cmp	r0, r4
 8003d22:	d007      	beq.n	8003d34 <sbrk_aligned+0x38>
 8003d24:	1a21      	subs	r1, r4, r0
 8003d26:	4628      	mov	r0, r5
 8003d28:	f000 fb6c 	bl	8004404 <_sbrk_r>
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d101      	bne.n	8003d34 <sbrk_aligned+0x38>
 8003d30:	f04f 34ff 	mov.w	r4, #4294967295
 8003d34:	4620      	mov	r0, r4
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	20000220 	.word	0x20000220

08003d3c <_malloc_r>:
 8003d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d40:	1ccd      	adds	r5, r1, #3
 8003d42:	f025 0503 	bic.w	r5, r5, #3
 8003d46:	3508      	adds	r5, #8
 8003d48:	2d0c      	cmp	r5, #12
 8003d4a:	bf38      	it	cc
 8003d4c:	250c      	movcc	r5, #12
 8003d4e:	2d00      	cmp	r5, #0
 8003d50:	4607      	mov	r7, r0
 8003d52:	db01      	blt.n	8003d58 <_malloc_r+0x1c>
 8003d54:	42a9      	cmp	r1, r5
 8003d56:	d905      	bls.n	8003d64 <_malloc_r+0x28>
 8003d58:	230c      	movs	r3, #12
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	2600      	movs	r6, #0
 8003d5e:	4630      	mov	r0, r6
 8003d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d64:	4e2e      	ldr	r6, [pc, #184]	; (8003e20 <_malloc_r+0xe4>)
 8003d66:	f000 fc11 	bl	800458c <__malloc_lock>
 8003d6a:	6833      	ldr	r3, [r6, #0]
 8003d6c:	461c      	mov	r4, r3
 8003d6e:	bb34      	cbnz	r4, 8003dbe <_malloc_r+0x82>
 8003d70:	4629      	mov	r1, r5
 8003d72:	4638      	mov	r0, r7
 8003d74:	f7ff ffc2 	bl	8003cfc <sbrk_aligned>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	4604      	mov	r4, r0
 8003d7c:	d14d      	bne.n	8003e1a <_malloc_r+0xde>
 8003d7e:	6834      	ldr	r4, [r6, #0]
 8003d80:	4626      	mov	r6, r4
 8003d82:	2e00      	cmp	r6, #0
 8003d84:	d140      	bne.n	8003e08 <_malloc_r+0xcc>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	4631      	mov	r1, r6
 8003d8a:	4638      	mov	r0, r7
 8003d8c:	eb04 0803 	add.w	r8, r4, r3
 8003d90:	f000 fb38 	bl	8004404 <_sbrk_r>
 8003d94:	4580      	cmp	r8, r0
 8003d96:	d13a      	bne.n	8003e0e <_malloc_r+0xd2>
 8003d98:	6821      	ldr	r1, [r4, #0]
 8003d9a:	3503      	adds	r5, #3
 8003d9c:	1a6d      	subs	r5, r5, r1
 8003d9e:	f025 0503 	bic.w	r5, r5, #3
 8003da2:	3508      	adds	r5, #8
 8003da4:	2d0c      	cmp	r5, #12
 8003da6:	bf38      	it	cc
 8003da8:	250c      	movcc	r5, #12
 8003daa:	4629      	mov	r1, r5
 8003dac:	4638      	mov	r0, r7
 8003dae:	f7ff ffa5 	bl	8003cfc <sbrk_aligned>
 8003db2:	3001      	adds	r0, #1
 8003db4:	d02b      	beq.n	8003e0e <_malloc_r+0xd2>
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	442b      	add	r3, r5
 8003dba:	6023      	str	r3, [r4, #0]
 8003dbc:	e00e      	b.n	8003ddc <_malloc_r+0xa0>
 8003dbe:	6822      	ldr	r2, [r4, #0]
 8003dc0:	1b52      	subs	r2, r2, r5
 8003dc2:	d41e      	bmi.n	8003e02 <_malloc_r+0xc6>
 8003dc4:	2a0b      	cmp	r2, #11
 8003dc6:	d916      	bls.n	8003df6 <_malloc_r+0xba>
 8003dc8:	1961      	adds	r1, r4, r5
 8003dca:	42a3      	cmp	r3, r4
 8003dcc:	6025      	str	r5, [r4, #0]
 8003dce:	bf18      	it	ne
 8003dd0:	6059      	strne	r1, [r3, #4]
 8003dd2:	6863      	ldr	r3, [r4, #4]
 8003dd4:	bf08      	it	eq
 8003dd6:	6031      	streq	r1, [r6, #0]
 8003dd8:	5162      	str	r2, [r4, r5]
 8003dda:	604b      	str	r3, [r1, #4]
 8003ddc:	4638      	mov	r0, r7
 8003dde:	f104 060b 	add.w	r6, r4, #11
 8003de2:	f000 fbd9 	bl	8004598 <__malloc_unlock>
 8003de6:	f026 0607 	bic.w	r6, r6, #7
 8003dea:	1d23      	adds	r3, r4, #4
 8003dec:	1af2      	subs	r2, r6, r3
 8003dee:	d0b6      	beq.n	8003d5e <_malloc_r+0x22>
 8003df0:	1b9b      	subs	r3, r3, r6
 8003df2:	50a3      	str	r3, [r4, r2]
 8003df4:	e7b3      	b.n	8003d5e <_malloc_r+0x22>
 8003df6:	6862      	ldr	r2, [r4, #4]
 8003df8:	42a3      	cmp	r3, r4
 8003dfa:	bf0c      	ite	eq
 8003dfc:	6032      	streq	r2, [r6, #0]
 8003dfe:	605a      	strne	r2, [r3, #4]
 8003e00:	e7ec      	b.n	8003ddc <_malloc_r+0xa0>
 8003e02:	4623      	mov	r3, r4
 8003e04:	6864      	ldr	r4, [r4, #4]
 8003e06:	e7b2      	b.n	8003d6e <_malloc_r+0x32>
 8003e08:	4634      	mov	r4, r6
 8003e0a:	6876      	ldr	r6, [r6, #4]
 8003e0c:	e7b9      	b.n	8003d82 <_malloc_r+0x46>
 8003e0e:	230c      	movs	r3, #12
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	4638      	mov	r0, r7
 8003e14:	f000 fbc0 	bl	8004598 <__malloc_unlock>
 8003e18:	e7a1      	b.n	8003d5e <_malloc_r+0x22>
 8003e1a:	6025      	str	r5, [r4, #0]
 8003e1c:	e7de      	b.n	8003ddc <_malloc_r+0xa0>
 8003e1e:	bf00      	nop
 8003e20:	2000021c 	.word	0x2000021c

08003e24 <__ssputs_r>:
 8003e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e28:	688e      	ldr	r6, [r1, #8]
 8003e2a:	429e      	cmp	r6, r3
 8003e2c:	4682      	mov	sl, r0
 8003e2e:	460c      	mov	r4, r1
 8003e30:	4690      	mov	r8, r2
 8003e32:	461f      	mov	r7, r3
 8003e34:	d838      	bhi.n	8003ea8 <__ssputs_r+0x84>
 8003e36:	898a      	ldrh	r2, [r1, #12]
 8003e38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e3c:	d032      	beq.n	8003ea4 <__ssputs_r+0x80>
 8003e3e:	6825      	ldr	r5, [r4, #0]
 8003e40:	6909      	ldr	r1, [r1, #16]
 8003e42:	eba5 0901 	sub.w	r9, r5, r1
 8003e46:	6965      	ldr	r5, [r4, #20]
 8003e48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e50:	3301      	adds	r3, #1
 8003e52:	444b      	add	r3, r9
 8003e54:	106d      	asrs	r5, r5, #1
 8003e56:	429d      	cmp	r5, r3
 8003e58:	bf38      	it	cc
 8003e5a:	461d      	movcc	r5, r3
 8003e5c:	0553      	lsls	r3, r2, #21
 8003e5e:	d531      	bpl.n	8003ec4 <__ssputs_r+0xa0>
 8003e60:	4629      	mov	r1, r5
 8003e62:	f7ff ff6b 	bl	8003d3c <_malloc_r>
 8003e66:	4606      	mov	r6, r0
 8003e68:	b950      	cbnz	r0, 8003e80 <__ssputs_r+0x5c>
 8003e6a:	230c      	movs	r3, #12
 8003e6c:	f8ca 3000 	str.w	r3, [sl]
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e76:	81a3      	strh	r3, [r4, #12]
 8003e78:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e80:	6921      	ldr	r1, [r4, #16]
 8003e82:	464a      	mov	r2, r9
 8003e84:	f7ff fb62 	bl	800354c <memcpy>
 8003e88:	89a3      	ldrh	r3, [r4, #12]
 8003e8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e92:	81a3      	strh	r3, [r4, #12]
 8003e94:	6126      	str	r6, [r4, #16]
 8003e96:	6165      	str	r5, [r4, #20]
 8003e98:	444e      	add	r6, r9
 8003e9a:	eba5 0509 	sub.w	r5, r5, r9
 8003e9e:	6026      	str	r6, [r4, #0]
 8003ea0:	60a5      	str	r5, [r4, #8]
 8003ea2:	463e      	mov	r6, r7
 8003ea4:	42be      	cmp	r6, r7
 8003ea6:	d900      	bls.n	8003eaa <__ssputs_r+0x86>
 8003ea8:	463e      	mov	r6, r7
 8003eaa:	6820      	ldr	r0, [r4, #0]
 8003eac:	4632      	mov	r2, r6
 8003eae:	4641      	mov	r1, r8
 8003eb0:	f000 fb52 	bl	8004558 <memmove>
 8003eb4:	68a3      	ldr	r3, [r4, #8]
 8003eb6:	1b9b      	subs	r3, r3, r6
 8003eb8:	60a3      	str	r3, [r4, #8]
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	4433      	add	r3, r6
 8003ebe:	6023      	str	r3, [r4, #0]
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	e7db      	b.n	8003e7c <__ssputs_r+0x58>
 8003ec4:	462a      	mov	r2, r5
 8003ec6:	f000 fb6d 	bl	80045a4 <_realloc_r>
 8003eca:	4606      	mov	r6, r0
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d1e1      	bne.n	8003e94 <__ssputs_r+0x70>
 8003ed0:	6921      	ldr	r1, [r4, #16]
 8003ed2:	4650      	mov	r0, sl
 8003ed4:	f7ff fec6 	bl	8003c64 <_free_r>
 8003ed8:	e7c7      	b.n	8003e6a <__ssputs_r+0x46>
	...

08003edc <_svfiprintf_r>:
 8003edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee0:	4698      	mov	r8, r3
 8003ee2:	898b      	ldrh	r3, [r1, #12]
 8003ee4:	061b      	lsls	r3, r3, #24
 8003ee6:	b09d      	sub	sp, #116	; 0x74
 8003ee8:	4607      	mov	r7, r0
 8003eea:	460d      	mov	r5, r1
 8003eec:	4614      	mov	r4, r2
 8003eee:	d50e      	bpl.n	8003f0e <_svfiprintf_r+0x32>
 8003ef0:	690b      	ldr	r3, [r1, #16]
 8003ef2:	b963      	cbnz	r3, 8003f0e <_svfiprintf_r+0x32>
 8003ef4:	2140      	movs	r1, #64	; 0x40
 8003ef6:	f7ff ff21 	bl	8003d3c <_malloc_r>
 8003efa:	6028      	str	r0, [r5, #0]
 8003efc:	6128      	str	r0, [r5, #16]
 8003efe:	b920      	cbnz	r0, 8003f0a <_svfiprintf_r+0x2e>
 8003f00:	230c      	movs	r3, #12
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295
 8003f08:	e0d1      	b.n	80040ae <_svfiprintf_r+0x1d2>
 8003f0a:	2340      	movs	r3, #64	; 0x40
 8003f0c:	616b      	str	r3, [r5, #20]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	9309      	str	r3, [sp, #36]	; 0x24
 8003f12:	2320      	movs	r3, #32
 8003f14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f1c:	2330      	movs	r3, #48	; 0x30
 8003f1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040c8 <_svfiprintf_r+0x1ec>
 8003f22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f26:	f04f 0901 	mov.w	r9, #1
 8003f2a:	4623      	mov	r3, r4
 8003f2c:	469a      	mov	sl, r3
 8003f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f32:	b10a      	cbz	r2, 8003f38 <_svfiprintf_r+0x5c>
 8003f34:	2a25      	cmp	r2, #37	; 0x25
 8003f36:	d1f9      	bne.n	8003f2c <_svfiprintf_r+0x50>
 8003f38:	ebba 0b04 	subs.w	fp, sl, r4
 8003f3c:	d00b      	beq.n	8003f56 <_svfiprintf_r+0x7a>
 8003f3e:	465b      	mov	r3, fp
 8003f40:	4622      	mov	r2, r4
 8003f42:	4629      	mov	r1, r5
 8003f44:	4638      	mov	r0, r7
 8003f46:	f7ff ff6d 	bl	8003e24 <__ssputs_r>
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	f000 80aa 	beq.w	80040a4 <_svfiprintf_r+0x1c8>
 8003f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f52:	445a      	add	r2, fp
 8003f54:	9209      	str	r2, [sp, #36]	; 0x24
 8003f56:	f89a 3000 	ldrb.w	r3, [sl]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	f000 80a2 	beq.w	80040a4 <_svfiprintf_r+0x1c8>
 8003f60:	2300      	movs	r3, #0
 8003f62:	f04f 32ff 	mov.w	r2, #4294967295
 8003f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f6a:	f10a 0a01 	add.w	sl, sl, #1
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	9307      	str	r3, [sp, #28]
 8003f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f76:	931a      	str	r3, [sp, #104]	; 0x68
 8003f78:	4654      	mov	r4, sl
 8003f7a:	2205      	movs	r2, #5
 8003f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f80:	4851      	ldr	r0, [pc, #324]	; (80040c8 <_svfiprintf_r+0x1ec>)
 8003f82:	f7fc f93d 	bl	8000200 <memchr>
 8003f86:	9a04      	ldr	r2, [sp, #16]
 8003f88:	b9d8      	cbnz	r0, 8003fc2 <_svfiprintf_r+0xe6>
 8003f8a:	06d0      	lsls	r0, r2, #27
 8003f8c:	bf44      	itt	mi
 8003f8e:	2320      	movmi	r3, #32
 8003f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f94:	0711      	lsls	r1, r2, #28
 8003f96:	bf44      	itt	mi
 8003f98:	232b      	movmi	r3, #43	; 0x2b
 8003f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8003fa4:	d015      	beq.n	8003fd2 <_svfiprintf_r+0xf6>
 8003fa6:	9a07      	ldr	r2, [sp, #28]
 8003fa8:	4654      	mov	r4, sl
 8003faa:	2000      	movs	r0, #0
 8003fac:	f04f 0c0a 	mov.w	ip, #10
 8003fb0:	4621      	mov	r1, r4
 8003fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fb6:	3b30      	subs	r3, #48	; 0x30
 8003fb8:	2b09      	cmp	r3, #9
 8003fba:	d94e      	bls.n	800405a <_svfiprintf_r+0x17e>
 8003fbc:	b1b0      	cbz	r0, 8003fec <_svfiprintf_r+0x110>
 8003fbe:	9207      	str	r2, [sp, #28]
 8003fc0:	e014      	b.n	8003fec <_svfiprintf_r+0x110>
 8003fc2:	eba0 0308 	sub.w	r3, r0, r8
 8003fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	9304      	str	r3, [sp, #16]
 8003fce:	46a2      	mov	sl, r4
 8003fd0:	e7d2      	b.n	8003f78 <_svfiprintf_r+0x9c>
 8003fd2:	9b03      	ldr	r3, [sp, #12]
 8003fd4:	1d19      	adds	r1, r3, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	9103      	str	r1, [sp, #12]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	bfbb      	ittet	lt
 8003fde:	425b      	neglt	r3, r3
 8003fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8003fe4:	9307      	strge	r3, [sp, #28]
 8003fe6:	9307      	strlt	r3, [sp, #28]
 8003fe8:	bfb8      	it	lt
 8003fea:	9204      	strlt	r2, [sp, #16]
 8003fec:	7823      	ldrb	r3, [r4, #0]
 8003fee:	2b2e      	cmp	r3, #46	; 0x2e
 8003ff0:	d10c      	bne.n	800400c <_svfiprintf_r+0x130>
 8003ff2:	7863      	ldrb	r3, [r4, #1]
 8003ff4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ff6:	d135      	bne.n	8004064 <_svfiprintf_r+0x188>
 8003ff8:	9b03      	ldr	r3, [sp, #12]
 8003ffa:	1d1a      	adds	r2, r3, #4
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	9203      	str	r2, [sp, #12]
 8004000:	2b00      	cmp	r3, #0
 8004002:	bfb8      	it	lt
 8004004:	f04f 33ff 	movlt.w	r3, #4294967295
 8004008:	3402      	adds	r4, #2
 800400a:	9305      	str	r3, [sp, #20]
 800400c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040d8 <_svfiprintf_r+0x1fc>
 8004010:	7821      	ldrb	r1, [r4, #0]
 8004012:	2203      	movs	r2, #3
 8004014:	4650      	mov	r0, sl
 8004016:	f7fc f8f3 	bl	8000200 <memchr>
 800401a:	b140      	cbz	r0, 800402e <_svfiprintf_r+0x152>
 800401c:	2340      	movs	r3, #64	; 0x40
 800401e:	eba0 000a 	sub.w	r0, r0, sl
 8004022:	fa03 f000 	lsl.w	r0, r3, r0
 8004026:	9b04      	ldr	r3, [sp, #16]
 8004028:	4303      	orrs	r3, r0
 800402a:	3401      	adds	r4, #1
 800402c:	9304      	str	r3, [sp, #16]
 800402e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004032:	4826      	ldr	r0, [pc, #152]	; (80040cc <_svfiprintf_r+0x1f0>)
 8004034:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004038:	2206      	movs	r2, #6
 800403a:	f7fc f8e1 	bl	8000200 <memchr>
 800403e:	2800      	cmp	r0, #0
 8004040:	d038      	beq.n	80040b4 <_svfiprintf_r+0x1d8>
 8004042:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <_svfiprintf_r+0x1f4>)
 8004044:	bb1b      	cbnz	r3, 800408e <_svfiprintf_r+0x1b2>
 8004046:	9b03      	ldr	r3, [sp, #12]
 8004048:	3307      	adds	r3, #7
 800404a:	f023 0307 	bic.w	r3, r3, #7
 800404e:	3308      	adds	r3, #8
 8004050:	9303      	str	r3, [sp, #12]
 8004052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004054:	4433      	add	r3, r6
 8004056:	9309      	str	r3, [sp, #36]	; 0x24
 8004058:	e767      	b.n	8003f2a <_svfiprintf_r+0x4e>
 800405a:	fb0c 3202 	mla	r2, ip, r2, r3
 800405e:	460c      	mov	r4, r1
 8004060:	2001      	movs	r0, #1
 8004062:	e7a5      	b.n	8003fb0 <_svfiprintf_r+0xd4>
 8004064:	2300      	movs	r3, #0
 8004066:	3401      	adds	r4, #1
 8004068:	9305      	str	r3, [sp, #20]
 800406a:	4619      	mov	r1, r3
 800406c:	f04f 0c0a 	mov.w	ip, #10
 8004070:	4620      	mov	r0, r4
 8004072:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004076:	3a30      	subs	r2, #48	; 0x30
 8004078:	2a09      	cmp	r2, #9
 800407a:	d903      	bls.n	8004084 <_svfiprintf_r+0x1a8>
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0c5      	beq.n	800400c <_svfiprintf_r+0x130>
 8004080:	9105      	str	r1, [sp, #20]
 8004082:	e7c3      	b.n	800400c <_svfiprintf_r+0x130>
 8004084:	fb0c 2101 	mla	r1, ip, r1, r2
 8004088:	4604      	mov	r4, r0
 800408a:	2301      	movs	r3, #1
 800408c:	e7f0      	b.n	8004070 <_svfiprintf_r+0x194>
 800408e:	ab03      	add	r3, sp, #12
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	462a      	mov	r2, r5
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <_svfiprintf_r+0x1f8>)
 8004096:	a904      	add	r1, sp, #16
 8004098:	4638      	mov	r0, r7
 800409a:	f3af 8000 	nop.w
 800409e:	1c42      	adds	r2, r0, #1
 80040a0:	4606      	mov	r6, r0
 80040a2:	d1d6      	bne.n	8004052 <_svfiprintf_r+0x176>
 80040a4:	89ab      	ldrh	r3, [r5, #12]
 80040a6:	065b      	lsls	r3, r3, #25
 80040a8:	f53f af2c 	bmi.w	8003f04 <_svfiprintf_r+0x28>
 80040ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040ae:	b01d      	add	sp, #116	; 0x74
 80040b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b4:	ab03      	add	r3, sp, #12
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	462a      	mov	r2, r5
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <_svfiprintf_r+0x1f8>)
 80040bc:	a904      	add	r1, sp, #16
 80040be:	4638      	mov	r0, r7
 80040c0:	f000 f87a 	bl	80041b8 <_printf_i>
 80040c4:	e7eb      	b.n	800409e <_svfiprintf_r+0x1c2>
 80040c6:	bf00      	nop
 80040c8:	08004700 	.word	0x08004700
 80040cc:	0800470a 	.word	0x0800470a
 80040d0:	00000000 	.word	0x00000000
 80040d4:	08003e25 	.word	0x08003e25
 80040d8:	08004706 	.word	0x08004706

080040dc <_printf_common>:
 80040dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040e0:	4616      	mov	r6, r2
 80040e2:	4699      	mov	r9, r3
 80040e4:	688a      	ldr	r2, [r1, #8]
 80040e6:	690b      	ldr	r3, [r1, #16]
 80040e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040ec:	4293      	cmp	r3, r2
 80040ee:	bfb8      	it	lt
 80040f0:	4613      	movlt	r3, r2
 80040f2:	6033      	str	r3, [r6, #0]
 80040f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040f8:	4607      	mov	r7, r0
 80040fa:	460c      	mov	r4, r1
 80040fc:	b10a      	cbz	r2, 8004102 <_printf_common+0x26>
 80040fe:	3301      	adds	r3, #1
 8004100:	6033      	str	r3, [r6, #0]
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	0699      	lsls	r1, r3, #26
 8004106:	bf42      	ittt	mi
 8004108:	6833      	ldrmi	r3, [r6, #0]
 800410a:	3302      	addmi	r3, #2
 800410c:	6033      	strmi	r3, [r6, #0]
 800410e:	6825      	ldr	r5, [r4, #0]
 8004110:	f015 0506 	ands.w	r5, r5, #6
 8004114:	d106      	bne.n	8004124 <_printf_common+0x48>
 8004116:	f104 0a19 	add.w	sl, r4, #25
 800411a:	68e3      	ldr	r3, [r4, #12]
 800411c:	6832      	ldr	r2, [r6, #0]
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	42ab      	cmp	r3, r5
 8004122:	dc26      	bgt.n	8004172 <_printf_common+0x96>
 8004124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004128:	1e13      	subs	r3, r2, #0
 800412a:	6822      	ldr	r2, [r4, #0]
 800412c:	bf18      	it	ne
 800412e:	2301      	movne	r3, #1
 8004130:	0692      	lsls	r2, r2, #26
 8004132:	d42b      	bmi.n	800418c <_printf_common+0xb0>
 8004134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004138:	4649      	mov	r1, r9
 800413a:	4638      	mov	r0, r7
 800413c:	47c0      	blx	r8
 800413e:	3001      	adds	r0, #1
 8004140:	d01e      	beq.n	8004180 <_printf_common+0xa4>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	68e5      	ldr	r5, [r4, #12]
 8004146:	6832      	ldr	r2, [r6, #0]
 8004148:	f003 0306 	and.w	r3, r3, #6
 800414c:	2b04      	cmp	r3, #4
 800414e:	bf08      	it	eq
 8004150:	1aad      	subeq	r5, r5, r2
 8004152:	68a3      	ldr	r3, [r4, #8]
 8004154:	6922      	ldr	r2, [r4, #16]
 8004156:	bf0c      	ite	eq
 8004158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800415c:	2500      	movne	r5, #0
 800415e:	4293      	cmp	r3, r2
 8004160:	bfc4      	itt	gt
 8004162:	1a9b      	subgt	r3, r3, r2
 8004164:	18ed      	addgt	r5, r5, r3
 8004166:	2600      	movs	r6, #0
 8004168:	341a      	adds	r4, #26
 800416a:	42b5      	cmp	r5, r6
 800416c:	d11a      	bne.n	80041a4 <_printf_common+0xc8>
 800416e:	2000      	movs	r0, #0
 8004170:	e008      	b.n	8004184 <_printf_common+0xa8>
 8004172:	2301      	movs	r3, #1
 8004174:	4652      	mov	r2, sl
 8004176:	4649      	mov	r1, r9
 8004178:	4638      	mov	r0, r7
 800417a:	47c0      	blx	r8
 800417c:	3001      	adds	r0, #1
 800417e:	d103      	bne.n	8004188 <_printf_common+0xac>
 8004180:	f04f 30ff 	mov.w	r0, #4294967295
 8004184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004188:	3501      	adds	r5, #1
 800418a:	e7c6      	b.n	800411a <_printf_common+0x3e>
 800418c:	18e1      	adds	r1, r4, r3
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	2030      	movs	r0, #48	; 0x30
 8004192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004196:	4422      	add	r2, r4
 8004198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800419c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041a0:	3302      	adds	r3, #2
 80041a2:	e7c7      	b.n	8004134 <_printf_common+0x58>
 80041a4:	2301      	movs	r3, #1
 80041a6:	4622      	mov	r2, r4
 80041a8:	4649      	mov	r1, r9
 80041aa:	4638      	mov	r0, r7
 80041ac:	47c0      	blx	r8
 80041ae:	3001      	adds	r0, #1
 80041b0:	d0e6      	beq.n	8004180 <_printf_common+0xa4>
 80041b2:	3601      	adds	r6, #1
 80041b4:	e7d9      	b.n	800416a <_printf_common+0x8e>
	...

080041b8 <_printf_i>:
 80041b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041bc:	7e0f      	ldrb	r7, [r1, #24]
 80041be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80041c0:	2f78      	cmp	r7, #120	; 0x78
 80041c2:	4691      	mov	r9, r2
 80041c4:	4680      	mov	r8, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	469a      	mov	sl, r3
 80041ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80041ce:	d807      	bhi.n	80041e0 <_printf_i+0x28>
 80041d0:	2f62      	cmp	r7, #98	; 0x62
 80041d2:	d80a      	bhi.n	80041ea <_printf_i+0x32>
 80041d4:	2f00      	cmp	r7, #0
 80041d6:	f000 80d8 	beq.w	800438a <_printf_i+0x1d2>
 80041da:	2f58      	cmp	r7, #88	; 0x58
 80041dc:	f000 80a3 	beq.w	8004326 <_printf_i+0x16e>
 80041e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041e8:	e03a      	b.n	8004260 <_printf_i+0xa8>
 80041ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041ee:	2b15      	cmp	r3, #21
 80041f0:	d8f6      	bhi.n	80041e0 <_printf_i+0x28>
 80041f2:	a101      	add	r1, pc, #4	; (adr r1, 80041f8 <_printf_i+0x40>)
 80041f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041f8:	08004251 	.word	0x08004251
 80041fc:	08004265 	.word	0x08004265
 8004200:	080041e1 	.word	0x080041e1
 8004204:	080041e1 	.word	0x080041e1
 8004208:	080041e1 	.word	0x080041e1
 800420c:	080041e1 	.word	0x080041e1
 8004210:	08004265 	.word	0x08004265
 8004214:	080041e1 	.word	0x080041e1
 8004218:	080041e1 	.word	0x080041e1
 800421c:	080041e1 	.word	0x080041e1
 8004220:	080041e1 	.word	0x080041e1
 8004224:	08004371 	.word	0x08004371
 8004228:	08004295 	.word	0x08004295
 800422c:	08004353 	.word	0x08004353
 8004230:	080041e1 	.word	0x080041e1
 8004234:	080041e1 	.word	0x080041e1
 8004238:	08004393 	.word	0x08004393
 800423c:	080041e1 	.word	0x080041e1
 8004240:	08004295 	.word	0x08004295
 8004244:	080041e1 	.word	0x080041e1
 8004248:	080041e1 	.word	0x080041e1
 800424c:	0800435b 	.word	0x0800435b
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	1d1a      	adds	r2, r3, #4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	602a      	str	r2, [r5, #0]
 8004258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800425c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004260:	2301      	movs	r3, #1
 8004262:	e0a3      	b.n	80043ac <_printf_i+0x1f4>
 8004264:	6820      	ldr	r0, [r4, #0]
 8004266:	6829      	ldr	r1, [r5, #0]
 8004268:	0606      	lsls	r6, r0, #24
 800426a:	f101 0304 	add.w	r3, r1, #4
 800426e:	d50a      	bpl.n	8004286 <_printf_i+0xce>
 8004270:	680e      	ldr	r6, [r1, #0]
 8004272:	602b      	str	r3, [r5, #0]
 8004274:	2e00      	cmp	r6, #0
 8004276:	da03      	bge.n	8004280 <_printf_i+0xc8>
 8004278:	232d      	movs	r3, #45	; 0x2d
 800427a:	4276      	negs	r6, r6
 800427c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004280:	485e      	ldr	r0, [pc, #376]	; (80043fc <_printf_i+0x244>)
 8004282:	230a      	movs	r3, #10
 8004284:	e019      	b.n	80042ba <_printf_i+0x102>
 8004286:	680e      	ldr	r6, [r1, #0]
 8004288:	602b      	str	r3, [r5, #0]
 800428a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800428e:	bf18      	it	ne
 8004290:	b236      	sxthne	r6, r6
 8004292:	e7ef      	b.n	8004274 <_printf_i+0xbc>
 8004294:	682b      	ldr	r3, [r5, #0]
 8004296:	6820      	ldr	r0, [r4, #0]
 8004298:	1d19      	adds	r1, r3, #4
 800429a:	6029      	str	r1, [r5, #0]
 800429c:	0601      	lsls	r1, r0, #24
 800429e:	d501      	bpl.n	80042a4 <_printf_i+0xec>
 80042a0:	681e      	ldr	r6, [r3, #0]
 80042a2:	e002      	b.n	80042aa <_printf_i+0xf2>
 80042a4:	0646      	lsls	r6, r0, #25
 80042a6:	d5fb      	bpl.n	80042a0 <_printf_i+0xe8>
 80042a8:	881e      	ldrh	r6, [r3, #0]
 80042aa:	4854      	ldr	r0, [pc, #336]	; (80043fc <_printf_i+0x244>)
 80042ac:	2f6f      	cmp	r7, #111	; 0x6f
 80042ae:	bf0c      	ite	eq
 80042b0:	2308      	moveq	r3, #8
 80042b2:	230a      	movne	r3, #10
 80042b4:	2100      	movs	r1, #0
 80042b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042ba:	6865      	ldr	r5, [r4, #4]
 80042bc:	60a5      	str	r5, [r4, #8]
 80042be:	2d00      	cmp	r5, #0
 80042c0:	bfa2      	ittt	ge
 80042c2:	6821      	ldrge	r1, [r4, #0]
 80042c4:	f021 0104 	bicge.w	r1, r1, #4
 80042c8:	6021      	strge	r1, [r4, #0]
 80042ca:	b90e      	cbnz	r6, 80042d0 <_printf_i+0x118>
 80042cc:	2d00      	cmp	r5, #0
 80042ce:	d04d      	beq.n	800436c <_printf_i+0x1b4>
 80042d0:	4615      	mov	r5, r2
 80042d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80042d6:	fb03 6711 	mls	r7, r3, r1, r6
 80042da:	5dc7      	ldrb	r7, [r0, r7]
 80042dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042e0:	4637      	mov	r7, r6
 80042e2:	42bb      	cmp	r3, r7
 80042e4:	460e      	mov	r6, r1
 80042e6:	d9f4      	bls.n	80042d2 <_printf_i+0x11a>
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d10b      	bne.n	8004304 <_printf_i+0x14c>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	07de      	lsls	r6, r3, #31
 80042f0:	d508      	bpl.n	8004304 <_printf_i+0x14c>
 80042f2:	6923      	ldr	r3, [r4, #16]
 80042f4:	6861      	ldr	r1, [r4, #4]
 80042f6:	4299      	cmp	r1, r3
 80042f8:	bfde      	ittt	le
 80042fa:	2330      	movle	r3, #48	; 0x30
 80042fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004300:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004304:	1b52      	subs	r2, r2, r5
 8004306:	6122      	str	r2, [r4, #16]
 8004308:	f8cd a000 	str.w	sl, [sp]
 800430c:	464b      	mov	r3, r9
 800430e:	aa03      	add	r2, sp, #12
 8004310:	4621      	mov	r1, r4
 8004312:	4640      	mov	r0, r8
 8004314:	f7ff fee2 	bl	80040dc <_printf_common>
 8004318:	3001      	adds	r0, #1
 800431a:	d14c      	bne.n	80043b6 <_printf_i+0x1fe>
 800431c:	f04f 30ff 	mov.w	r0, #4294967295
 8004320:	b004      	add	sp, #16
 8004322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004326:	4835      	ldr	r0, [pc, #212]	; (80043fc <_printf_i+0x244>)
 8004328:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800432c:	6829      	ldr	r1, [r5, #0]
 800432e:	6823      	ldr	r3, [r4, #0]
 8004330:	f851 6b04 	ldr.w	r6, [r1], #4
 8004334:	6029      	str	r1, [r5, #0]
 8004336:	061d      	lsls	r5, r3, #24
 8004338:	d514      	bpl.n	8004364 <_printf_i+0x1ac>
 800433a:	07df      	lsls	r7, r3, #31
 800433c:	bf44      	itt	mi
 800433e:	f043 0320 	orrmi.w	r3, r3, #32
 8004342:	6023      	strmi	r3, [r4, #0]
 8004344:	b91e      	cbnz	r6, 800434e <_printf_i+0x196>
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	f023 0320 	bic.w	r3, r3, #32
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	2310      	movs	r3, #16
 8004350:	e7b0      	b.n	80042b4 <_printf_i+0xfc>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	f043 0320 	orr.w	r3, r3, #32
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	2378      	movs	r3, #120	; 0x78
 800435c:	4828      	ldr	r0, [pc, #160]	; (8004400 <_printf_i+0x248>)
 800435e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004362:	e7e3      	b.n	800432c <_printf_i+0x174>
 8004364:	0659      	lsls	r1, r3, #25
 8004366:	bf48      	it	mi
 8004368:	b2b6      	uxthmi	r6, r6
 800436a:	e7e6      	b.n	800433a <_printf_i+0x182>
 800436c:	4615      	mov	r5, r2
 800436e:	e7bb      	b.n	80042e8 <_printf_i+0x130>
 8004370:	682b      	ldr	r3, [r5, #0]
 8004372:	6826      	ldr	r6, [r4, #0]
 8004374:	6961      	ldr	r1, [r4, #20]
 8004376:	1d18      	adds	r0, r3, #4
 8004378:	6028      	str	r0, [r5, #0]
 800437a:	0635      	lsls	r5, r6, #24
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	d501      	bpl.n	8004384 <_printf_i+0x1cc>
 8004380:	6019      	str	r1, [r3, #0]
 8004382:	e002      	b.n	800438a <_printf_i+0x1d2>
 8004384:	0670      	lsls	r0, r6, #25
 8004386:	d5fb      	bpl.n	8004380 <_printf_i+0x1c8>
 8004388:	8019      	strh	r1, [r3, #0]
 800438a:	2300      	movs	r3, #0
 800438c:	6123      	str	r3, [r4, #16]
 800438e:	4615      	mov	r5, r2
 8004390:	e7ba      	b.n	8004308 <_printf_i+0x150>
 8004392:	682b      	ldr	r3, [r5, #0]
 8004394:	1d1a      	adds	r2, r3, #4
 8004396:	602a      	str	r2, [r5, #0]
 8004398:	681d      	ldr	r5, [r3, #0]
 800439a:	6862      	ldr	r2, [r4, #4]
 800439c:	2100      	movs	r1, #0
 800439e:	4628      	mov	r0, r5
 80043a0:	f7fb ff2e 	bl	8000200 <memchr>
 80043a4:	b108      	cbz	r0, 80043aa <_printf_i+0x1f2>
 80043a6:	1b40      	subs	r0, r0, r5
 80043a8:	6060      	str	r0, [r4, #4]
 80043aa:	6863      	ldr	r3, [r4, #4]
 80043ac:	6123      	str	r3, [r4, #16]
 80043ae:	2300      	movs	r3, #0
 80043b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043b4:	e7a8      	b.n	8004308 <_printf_i+0x150>
 80043b6:	6923      	ldr	r3, [r4, #16]
 80043b8:	462a      	mov	r2, r5
 80043ba:	4649      	mov	r1, r9
 80043bc:	4640      	mov	r0, r8
 80043be:	47d0      	blx	sl
 80043c0:	3001      	adds	r0, #1
 80043c2:	d0ab      	beq.n	800431c <_printf_i+0x164>
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	079b      	lsls	r3, r3, #30
 80043c8:	d413      	bmi.n	80043f2 <_printf_i+0x23a>
 80043ca:	68e0      	ldr	r0, [r4, #12]
 80043cc:	9b03      	ldr	r3, [sp, #12]
 80043ce:	4298      	cmp	r0, r3
 80043d0:	bfb8      	it	lt
 80043d2:	4618      	movlt	r0, r3
 80043d4:	e7a4      	b.n	8004320 <_printf_i+0x168>
 80043d6:	2301      	movs	r3, #1
 80043d8:	4632      	mov	r2, r6
 80043da:	4649      	mov	r1, r9
 80043dc:	4640      	mov	r0, r8
 80043de:	47d0      	blx	sl
 80043e0:	3001      	adds	r0, #1
 80043e2:	d09b      	beq.n	800431c <_printf_i+0x164>
 80043e4:	3501      	adds	r5, #1
 80043e6:	68e3      	ldr	r3, [r4, #12]
 80043e8:	9903      	ldr	r1, [sp, #12]
 80043ea:	1a5b      	subs	r3, r3, r1
 80043ec:	42ab      	cmp	r3, r5
 80043ee:	dcf2      	bgt.n	80043d6 <_printf_i+0x21e>
 80043f0:	e7eb      	b.n	80043ca <_printf_i+0x212>
 80043f2:	2500      	movs	r5, #0
 80043f4:	f104 0619 	add.w	r6, r4, #25
 80043f8:	e7f5      	b.n	80043e6 <_printf_i+0x22e>
 80043fa:	bf00      	nop
 80043fc:	08004711 	.word	0x08004711
 8004400:	08004722 	.word	0x08004722

08004404 <_sbrk_r>:
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	4d06      	ldr	r5, [pc, #24]	; (8004420 <_sbrk_r+0x1c>)
 8004408:	2300      	movs	r3, #0
 800440a:	4604      	mov	r4, r0
 800440c:	4608      	mov	r0, r1
 800440e:	602b      	str	r3, [r5, #0]
 8004410:	f7fc fc86 	bl	8000d20 <_sbrk>
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	d102      	bne.n	800441e <_sbrk_r+0x1a>
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	b103      	cbz	r3, 800441e <_sbrk_r+0x1a>
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	bd38      	pop	{r3, r4, r5, pc}
 8004420:	20000224 	.word	0x20000224

08004424 <__sread>:
 8004424:	b510      	push	{r4, lr}
 8004426:	460c      	mov	r4, r1
 8004428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800442c:	f000 f8ea 	bl	8004604 <_read_r>
 8004430:	2800      	cmp	r0, #0
 8004432:	bfab      	itete	ge
 8004434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004436:	89a3      	ldrhlt	r3, [r4, #12]
 8004438:	181b      	addge	r3, r3, r0
 800443a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800443e:	bfac      	ite	ge
 8004440:	6563      	strge	r3, [r4, #84]	; 0x54
 8004442:	81a3      	strhlt	r3, [r4, #12]
 8004444:	bd10      	pop	{r4, pc}

08004446 <__swrite>:
 8004446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800444a:	461f      	mov	r7, r3
 800444c:	898b      	ldrh	r3, [r1, #12]
 800444e:	05db      	lsls	r3, r3, #23
 8004450:	4605      	mov	r5, r0
 8004452:	460c      	mov	r4, r1
 8004454:	4616      	mov	r6, r2
 8004456:	d505      	bpl.n	8004464 <__swrite+0x1e>
 8004458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800445c:	2302      	movs	r3, #2
 800445e:	2200      	movs	r2, #0
 8004460:	f000 f868 	bl	8004534 <_lseek_r>
 8004464:	89a3      	ldrh	r3, [r4, #12]
 8004466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800446a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800446e:	81a3      	strh	r3, [r4, #12]
 8004470:	4632      	mov	r2, r6
 8004472:	463b      	mov	r3, r7
 8004474:	4628      	mov	r0, r5
 8004476:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800447a:	f000 b817 	b.w	80044ac <_write_r>

0800447e <__sseek>:
 800447e:	b510      	push	{r4, lr}
 8004480:	460c      	mov	r4, r1
 8004482:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004486:	f000 f855 	bl	8004534 <_lseek_r>
 800448a:	1c43      	adds	r3, r0, #1
 800448c:	89a3      	ldrh	r3, [r4, #12]
 800448e:	bf15      	itete	ne
 8004490:	6560      	strne	r0, [r4, #84]	; 0x54
 8004492:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004496:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800449a:	81a3      	strheq	r3, [r4, #12]
 800449c:	bf18      	it	ne
 800449e:	81a3      	strhne	r3, [r4, #12]
 80044a0:	bd10      	pop	{r4, pc}

080044a2 <__sclose>:
 80044a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044a6:	f000 b813 	b.w	80044d0 <_close_r>
	...

080044ac <_write_r>:
 80044ac:	b538      	push	{r3, r4, r5, lr}
 80044ae:	4d07      	ldr	r5, [pc, #28]	; (80044cc <_write_r+0x20>)
 80044b0:	4604      	mov	r4, r0
 80044b2:	4608      	mov	r0, r1
 80044b4:	4611      	mov	r1, r2
 80044b6:	2200      	movs	r2, #0
 80044b8:	602a      	str	r2, [r5, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7fc fbdf 	bl	8000c7e <_write>
 80044c0:	1c43      	adds	r3, r0, #1
 80044c2:	d102      	bne.n	80044ca <_write_r+0x1e>
 80044c4:	682b      	ldr	r3, [r5, #0]
 80044c6:	b103      	cbz	r3, 80044ca <_write_r+0x1e>
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	bd38      	pop	{r3, r4, r5, pc}
 80044cc:	20000224 	.word	0x20000224

080044d0 <_close_r>:
 80044d0:	b538      	push	{r3, r4, r5, lr}
 80044d2:	4d06      	ldr	r5, [pc, #24]	; (80044ec <_close_r+0x1c>)
 80044d4:	2300      	movs	r3, #0
 80044d6:	4604      	mov	r4, r0
 80044d8:	4608      	mov	r0, r1
 80044da:	602b      	str	r3, [r5, #0]
 80044dc:	f7fc fbeb 	bl	8000cb6 <_close>
 80044e0:	1c43      	adds	r3, r0, #1
 80044e2:	d102      	bne.n	80044ea <_close_r+0x1a>
 80044e4:	682b      	ldr	r3, [r5, #0]
 80044e6:	b103      	cbz	r3, 80044ea <_close_r+0x1a>
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	bd38      	pop	{r3, r4, r5, pc}
 80044ec:	20000224 	.word	0x20000224

080044f0 <_fstat_r>:
 80044f0:	b538      	push	{r3, r4, r5, lr}
 80044f2:	4d07      	ldr	r5, [pc, #28]	; (8004510 <_fstat_r+0x20>)
 80044f4:	2300      	movs	r3, #0
 80044f6:	4604      	mov	r4, r0
 80044f8:	4608      	mov	r0, r1
 80044fa:	4611      	mov	r1, r2
 80044fc:	602b      	str	r3, [r5, #0]
 80044fe:	f7fc fbe6 	bl	8000cce <_fstat>
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	d102      	bne.n	800450c <_fstat_r+0x1c>
 8004506:	682b      	ldr	r3, [r5, #0]
 8004508:	b103      	cbz	r3, 800450c <_fstat_r+0x1c>
 800450a:	6023      	str	r3, [r4, #0]
 800450c:	bd38      	pop	{r3, r4, r5, pc}
 800450e:	bf00      	nop
 8004510:	20000224 	.word	0x20000224

08004514 <_isatty_r>:
 8004514:	b538      	push	{r3, r4, r5, lr}
 8004516:	4d06      	ldr	r5, [pc, #24]	; (8004530 <_isatty_r+0x1c>)
 8004518:	2300      	movs	r3, #0
 800451a:	4604      	mov	r4, r0
 800451c:	4608      	mov	r0, r1
 800451e:	602b      	str	r3, [r5, #0]
 8004520:	f7fc fbe5 	bl	8000cee <_isatty>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d102      	bne.n	800452e <_isatty_r+0x1a>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	b103      	cbz	r3, 800452e <_isatty_r+0x1a>
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	bd38      	pop	{r3, r4, r5, pc}
 8004530:	20000224 	.word	0x20000224

08004534 <_lseek_r>:
 8004534:	b538      	push	{r3, r4, r5, lr}
 8004536:	4d07      	ldr	r5, [pc, #28]	; (8004554 <_lseek_r+0x20>)
 8004538:	4604      	mov	r4, r0
 800453a:	4608      	mov	r0, r1
 800453c:	4611      	mov	r1, r2
 800453e:	2200      	movs	r2, #0
 8004540:	602a      	str	r2, [r5, #0]
 8004542:	461a      	mov	r2, r3
 8004544:	f7fc fbde 	bl	8000d04 <_lseek>
 8004548:	1c43      	adds	r3, r0, #1
 800454a:	d102      	bne.n	8004552 <_lseek_r+0x1e>
 800454c:	682b      	ldr	r3, [r5, #0]
 800454e:	b103      	cbz	r3, 8004552 <_lseek_r+0x1e>
 8004550:	6023      	str	r3, [r4, #0]
 8004552:	bd38      	pop	{r3, r4, r5, pc}
 8004554:	20000224 	.word	0x20000224

08004558 <memmove>:
 8004558:	4288      	cmp	r0, r1
 800455a:	b510      	push	{r4, lr}
 800455c:	eb01 0402 	add.w	r4, r1, r2
 8004560:	d902      	bls.n	8004568 <memmove+0x10>
 8004562:	4284      	cmp	r4, r0
 8004564:	4623      	mov	r3, r4
 8004566:	d807      	bhi.n	8004578 <memmove+0x20>
 8004568:	1e43      	subs	r3, r0, #1
 800456a:	42a1      	cmp	r1, r4
 800456c:	d008      	beq.n	8004580 <memmove+0x28>
 800456e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004572:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004576:	e7f8      	b.n	800456a <memmove+0x12>
 8004578:	4402      	add	r2, r0
 800457a:	4601      	mov	r1, r0
 800457c:	428a      	cmp	r2, r1
 800457e:	d100      	bne.n	8004582 <memmove+0x2a>
 8004580:	bd10      	pop	{r4, pc}
 8004582:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004586:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800458a:	e7f7      	b.n	800457c <memmove+0x24>

0800458c <__malloc_lock>:
 800458c:	4801      	ldr	r0, [pc, #4]	; (8004594 <__malloc_lock+0x8>)
 800458e:	f7ff bb01 	b.w	8003b94 <__retarget_lock_acquire_recursive>
 8004592:	bf00      	nop
 8004594:	20000218 	.word	0x20000218

08004598 <__malloc_unlock>:
 8004598:	4801      	ldr	r0, [pc, #4]	; (80045a0 <__malloc_unlock+0x8>)
 800459a:	f7ff bafc 	b.w	8003b96 <__retarget_lock_release_recursive>
 800459e:	bf00      	nop
 80045a0:	20000218 	.word	0x20000218

080045a4 <_realloc_r>:
 80045a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a8:	4680      	mov	r8, r0
 80045aa:	4614      	mov	r4, r2
 80045ac:	460e      	mov	r6, r1
 80045ae:	b921      	cbnz	r1, 80045ba <_realloc_r+0x16>
 80045b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045b4:	4611      	mov	r1, r2
 80045b6:	f7ff bbc1 	b.w	8003d3c <_malloc_r>
 80045ba:	b92a      	cbnz	r2, 80045c8 <_realloc_r+0x24>
 80045bc:	f7ff fb52 	bl	8003c64 <_free_r>
 80045c0:	4625      	mov	r5, r4
 80045c2:	4628      	mov	r0, r5
 80045c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045c8:	f000 f82e 	bl	8004628 <_malloc_usable_size_r>
 80045cc:	4284      	cmp	r4, r0
 80045ce:	4607      	mov	r7, r0
 80045d0:	d802      	bhi.n	80045d8 <_realloc_r+0x34>
 80045d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045d6:	d812      	bhi.n	80045fe <_realloc_r+0x5a>
 80045d8:	4621      	mov	r1, r4
 80045da:	4640      	mov	r0, r8
 80045dc:	f7ff fbae 	bl	8003d3c <_malloc_r>
 80045e0:	4605      	mov	r5, r0
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d0ed      	beq.n	80045c2 <_realloc_r+0x1e>
 80045e6:	42bc      	cmp	r4, r7
 80045e8:	4622      	mov	r2, r4
 80045ea:	4631      	mov	r1, r6
 80045ec:	bf28      	it	cs
 80045ee:	463a      	movcs	r2, r7
 80045f0:	f7fe ffac 	bl	800354c <memcpy>
 80045f4:	4631      	mov	r1, r6
 80045f6:	4640      	mov	r0, r8
 80045f8:	f7ff fb34 	bl	8003c64 <_free_r>
 80045fc:	e7e1      	b.n	80045c2 <_realloc_r+0x1e>
 80045fe:	4635      	mov	r5, r6
 8004600:	e7df      	b.n	80045c2 <_realloc_r+0x1e>
	...

08004604 <_read_r>:
 8004604:	b538      	push	{r3, r4, r5, lr}
 8004606:	4d07      	ldr	r5, [pc, #28]	; (8004624 <_read_r+0x20>)
 8004608:	4604      	mov	r4, r0
 800460a:	4608      	mov	r0, r1
 800460c:	4611      	mov	r1, r2
 800460e:	2200      	movs	r2, #0
 8004610:	602a      	str	r2, [r5, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	f7fc fb16 	bl	8000c44 <_read>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_read_r+0x1e>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_read_r+0x1e>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	20000224 	.word	0x20000224

08004628 <_malloc_usable_size_r>:
 8004628:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800462c:	1f18      	subs	r0, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	bfbc      	itt	lt
 8004632:	580b      	ldrlt	r3, [r1, r0]
 8004634:	18c0      	addlt	r0, r0, r3
 8004636:	4770      	bx	lr

08004638 <_init>:
 8004638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463a:	bf00      	nop
 800463c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463e:	bc08      	pop	{r3}
 8004640:	469e      	mov	lr, r3
 8004642:	4770      	bx	lr

08004644 <_fini>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	bf00      	nop
 8004648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464a:	bc08      	pop	{r3}
 800464c:	469e      	mov	lr, r3
 800464e:	4770      	bx	lr
