
SysTick_7SEG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001550  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001700  08001700  00011700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001788  08001788  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001788  08001788  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001788  08001788  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001788  08001788  00011788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800178c  0800178c  0001178c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000048  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000ac  200000ac  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002257  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000cba  00000000  00000000  000222eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000258  00000000  00000000  00022fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001b0  00000000  00000000  00023200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d23  00000000  00000000  000233b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003ce6  00000000  00000000  0003d0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d87e  00000000  00000000  00040db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ce637  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a38  00000000  00000000  000ce688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080016e8 	.word	0x080016e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	080016e8 	.word	0x080016e8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:

	return ch;
}
/*main function -----------------------------------------------*/
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	uint32_t ticks;
	GPIO_ConfigTypedef_t lcdPin;
	//PD12->salida
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000296:	4b43      	ldr	r3, [pc, #268]	; (80003a4 <main+0x114>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a42      	ldr	r2, [pc, #264]	; (80003a4 <main+0x114>)
 800029c:	f043 0308 	orr.w	r3, r3, #8
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER &=~ GPIO_MODER_MODE12;
 80002a2:	4b41      	ldr	r3, [pc, #260]	; (80003a8 <main+0x118>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a40      	ldr	r2, [pc, #256]	; (80003a8 <main+0x118>)
 80002a8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002ac:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE12_0;
 80002ae:	4b3e      	ldr	r3, [pc, #248]	; (80003a8 <main+0x118>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a3d      	ldr	r2, [pc, #244]	; (80003a8 <main+0x118>)
 80002b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002b8:	6013      	str	r3, [r2, #0]
	//display init

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80002ba:	4b3a      	ldr	r3, [pc, #232]	; (80003a4 <main+0x114>)
 80002bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002be:	4a39      	ldr	r2, [pc, #228]	; (80003a4 <main+0x114>)
 80002c0:	f043 0302 	orr.w	r3, r3, #2
 80002c4:	6313      	str	r3, [r2, #48]	; 0x30
	lcdPin.pin =GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 |\
 80002c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80002ca:	80bb      	strh	r3, [r7, #4]
					GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
	lcdPin.mode = GPIO_MODE_OUTPUT;
 80002cc:	2301      	movs	r3, #1
 80002ce:	71bb      	strb	r3, [r7, #6]
	lcdPin.pullup = GPIO_PU_NONE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	727b      	strb	r3, [r7, #9]
	lcdPin.speed = GPIO_SPEED_HIGH;
 80002d4:	2302      	movs	r3, #2
 80002d6:	723b      	strb	r3, [r7, #8]
	lcdPin.outputType = GPIO_OT_PP;
 80002d8:	2300      	movs	r3, #0
 80002da:	71fb      	strb	r3, [r7, #7]
	BSP_PinInit(GPIOB, &lcdPin);
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	4619      	mov	r1, r3
 80002e0:	4832      	ldr	r0, [pc, #200]	; (80003ac <main+0x11c>)
 80002e2:	f000 f8f0 	bl	80004c6 <BSP_PinInit>

	display_init(&disp, frameDisplay);
 80002e6:	4932      	ldr	r1, [pc, #200]	; (80003b0 <main+0x120>)
 80002e8:	4832      	ldr	r0, [pc, #200]	; (80003b4 <main+0x124>)
 80002ea:	f000 fc0b 	bl	8000b04 <display_init>
	/**
	 * ticks = 16MHz * 0.001
	 * ticks = 16000
	 */
	ticks = 16000;
 80002ee:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80002f2:	60fb      	str	r3, [r7, #12]
	SysTick_Init(ticks);
 80002f4:	68f8      	ldr	r0, [r7, #12]
 80002f6:	f000 fb57 	bl	80009a8 <SysTick_Init>

	ticks = GetTicks();
 80002fa:	f000 fb85 	bl	8000a08 <GetTicks>
 80002fe:	60f8      	str	r0, [r7, #12]

	/*Lcd init -----------------------------------*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000300:	4b28      	ldr	r3, [pc, #160]	; (80003a4 <main+0x114>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4a27      	ldr	r2, [pc, #156]	; (80003a4 <main+0x114>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6313      	str	r3, [r2, #48]	; 0x30
	lcdPin.pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800030c:	237e      	movs	r3, #126	; 0x7e
 800030e:	80bb      	strh	r3, [r7, #4]
	lcdPin.mode = GPIO_MODE_OUTPUT;
 8000310:	2301      	movs	r3, #1
 8000312:	71bb      	strb	r3, [r7, #6]
	lcdPin.pullup = GPIO_PU_NONE;
 8000314:	2300      	movs	r3, #0
 8000316:	727b      	strb	r3, [r7, #9]
	lcdPin.speed = GPIO_SPEED_HIGH;
 8000318:	2302      	movs	r3, #2
 800031a:	723b      	strb	r3, [r7, #8]
	lcdPin.outputType = GPIO_OT_PP;
 800031c:	2300      	movs	r3, #0
 800031e:	71fb      	strb	r3, [r7, #7]
	BSP_PinInit(GPIOA, &lcdPin);
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	4619      	mov	r1, r3
 8000324:	4824      	ldr	r0, [pc, #144]	; (80003b8 <main+0x128>)
 8000326:	f000 f8ce 	bl	80004c6 <BSP_PinInit>

	LCD_Init(16, 2);
 800032a:	2102      	movs	r1, #2
 800032c:	2010      	movs	r0, #16
 800032e:	f000 f96f 	bl	8000610 <LCD_Init>

	LCD_Printf(0, 0, "hola mundo\r\nQUINO B.Jeffry");
 8000332:	4a22      	ldr	r2, [pc, #136]	; (80003bc <main+0x12c>)
 8000334:	2100      	movs	r1, #0
 8000336:	2000      	movs	r0, #0
 8000338:	f000 fa4c 	bl	80007d4 <LCD_Printf>
	delay_ms(1000);
 800033c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000340:	f000 fb4c 	bl	80009dc <delay_ms>
	LCD_Clear();
 8000344:	f000 f9c8 	bl	80006d8 <LCD_Clear>
	LCD_Printf(0, 0, "STM32F407VG\r\nJUNIO-2023");
 8000348:	4a1d      	ldr	r2, [pc, #116]	; (80003c0 <main+0x130>)
 800034a:	2100      	movs	r1, #0
 800034c:	2000      	movs	r0, #0
 800034e:	f000 fa41 	bl	80007d4 <LCD_Printf>
	delay_ms(1000);
 8000352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000356:	f000 fb41 	bl	80009dc <delay_ms>
	LCD_Clear();
 800035a:	f000 f9bd 	bl	80006d8 <LCD_Clear>
	LCD_Printf(0, 0, "#BLINK");
 800035e:	4a19      	ldr	r2, [pc, #100]	; (80003c4 <main+0x134>)
 8000360:	2100      	movs	r1, #0
 8000362:	2000      	movs	r0, #0
 8000364:	f000 fa36 	bl	80007d4 <LCD_Printf>




	display_setVal_ex(&disp, 88, DP_ON, DISPLAY_VAL);
 8000368:	2300      	movs	r3, #0
 800036a:	2201      	movs	r2, #1
 800036c:	2158      	movs	r1, #88	; 0x58
 800036e:	4811      	ldr	r0, [pc, #68]	; (80003b4 <main+0x124>)
 8000370:	f000 fbda 	bl	8000b28 <display_setVal_ex>
    /* Loop forever */
	for(;;){
		//leer adc
		if((GetTicks() - ticks)>= 500){
 8000374:	f000 fb48 	bl	8000a08 <GetTicks>
 8000378:	4602      	mov	r2, r0
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	1ad3      	subs	r3, r2, r3
 800037e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000382:	d3f7      	bcc.n	8000374 <main+0xe4>
			ticks = GetTicks();
 8000384:	f000 fb40 	bl	8000a08 <GetTicks>
 8000388:	60f8      	str	r0, [r7, #12]
			GPIOD->ODR ^= GPIO_ODR_OD12;
 800038a:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <main+0x118>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <main+0x118>)
 8000390:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000394:	6153      	str	r3, [r2, #20]
			LCD_Printf(0, 1, "time: %u ms", ticks);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	4a0b      	ldr	r2, [pc, #44]	; (80003c8 <main+0x138>)
 800039a:	2101      	movs	r1, #1
 800039c:	2000      	movs	r0, #0
 800039e:	f000 fa19 	bl	80007d4 <LCD_Printf>
		if((GetTicks() - ticks)>= 500){
 80003a2:	e7e7      	b.n	8000374 <main+0xe4>
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40020c00 	.word	0x40020c00
 80003ac:	40020400 	.word	0x40020400
 80003b0:	20000088 	.word	0x20000088
 80003b4:	20000080 	.word	0x20000080
 80003b8:	40020000 	.word	0x40020000
 80003bc:	08001700 	.word	0x08001700
 80003c0:	0800171c 	.word	0x0800171c
 80003c4:	08001734 	.word	0x08001734
 80003c8:	0800173c 	.word	0x0800173c

080003cc <SysTick_Handler>:
#include "stm32f4xx.h"
#include "SysTick.h"
#include "display.h"

extern Display_t disp;
void SysTick_Handler(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	TicksInc(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 fb25 	bl	8000a20 <TicksInc>
	//todo
	display_update(&disp);
 80003d6:	4802      	ldr	r0, [pc, #8]	; (80003e0 <SysTick_Handler+0x14>)
 80003d8:	f000 fbf4 	bl	8000bc4 <display_update>
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000080 	.word	0x20000080

080003e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003ec:	4a14      	ldr	r2, [pc, #80]	; (8000440 <_sbrk+0x5c>)
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <_sbrk+0x60>)
 80003f0:	1ad3      	subs	r3, r2, r3
 80003f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003f8:	4b13      	ldr	r3, [pc, #76]	; (8000448 <_sbrk+0x64>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d102      	bne.n	8000406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000400:	4b11      	ldr	r3, [pc, #68]	; (8000448 <_sbrk+0x64>)
 8000402:	4a12      	ldr	r2, [pc, #72]	; (800044c <_sbrk+0x68>)
 8000404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <_sbrk+0x64>)
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4413      	add	r3, r2
 800040e:	693a      	ldr	r2, [r7, #16]
 8000410:	429a      	cmp	r2, r3
 8000412:	d207      	bcs.n	8000424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000414:	f000 fcd0 	bl	8000db8 <__errno>
 8000418:	4603      	mov	r3, r0
 800041a:	220c      	movs	r2, #12
 800041c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800041e:	f04f 33ff 	mov.w	r3, #4294967295
 8000422:	e009      	b.n	8000438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000424:	4b08      	ldr	r3, [pc, #32]	; (8000448 <_sbrk+0x64>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800042a:	4b07      	ldr	r3, [pc, #28]	; (8000448 <_sbrk+0x64>)
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4413      	add	r3, r2
 8000432:	4a05      	ldr	r2, [pc, #20]	; (8000448 <_sbrk+0x64>)
 8000434:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000436:	68fb      	ldr	r3, [r7, #12]
}
 8000438:	4618      	mov	r0, r3
 800043a:	3718      	adds	r7, #24
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20018000 	.word	0x20018000
 8000444:	00000400 	.word	0x00000400
 8000448:	2000008c 	.word	0x2000008c
 800044c:	200000b0 	.word	0x200000b0

08000450 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <SystemInit+0x20>)
 8000456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800045a:	4a05      	ldr	r2, [pc, #20]	; (8000470 <SystemInit+0x20>)
 800045c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000460:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	e000ed00 	.word	0xe000ed00

08000474 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000474:	480d      	ldr	r0, [pc, #52]	; (80004ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000476:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000478:	f7ff ffea 	bl	8000450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800047e:	490d      	ldr	r1, [pc, #52]	; (80004b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000480:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <LoopForever+0xe>)
  movs r3, #0
 8000482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000484:	e002      	b.n	800048c <LoopCopyDataInit>

08000486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048a:	3304      	adds	r3, #4

0800048c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800048c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000490:	d3f9      	bcc.n	8000486 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000492:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000494:	4c0a      	ldr	r4, [pc, #40]	; (80004c0 <LoopForever+0x16>)
  movs r3, #0
 8000496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000498:	e001      	b.n	800049e <LoopFillZerobss>

0800049a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800049c:	3204      	adds	r2, #4

0800049e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a0:	d3fb      	bcc.n	800049a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a2:	f000 fc8f 	bl	8000dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a6:	f7ff fef3 	bl	8000290 <main>

080004aa <LoopForever>:

LoopForever:
  b LoopForever
 80004aa:	e7fe      	b.n	80004aa <LoopForever>
  ldr   r0, =_estack
 80004ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80004b8:	08001790 	.word	0x08001790
  ldr r2, =_sbss
 80004bc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80004c0:	200000ac 	.word	0x200000ac

080004c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c4:	e7fe      	b.n	80004c4 <ADC_IRQHandler>

080004c6 <BSP_PinInit>:
}
/**
 * HAL (high abtractions layer)
 * LL
 */
void BSP_PinInit(GPIO_TypeDef *P,GPIO_ConfigTypedef_t *config){
 80004c6:	b480      	push	{r7}
 80004c8:	b087      	sub	sp, #28
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
 80004ce:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
	uint32_t iocurrent = 0x00U;
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]

	for(position = 0; position <16; position++){
 80004d8:	2300      	movs	r3, #0
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	e08e      	b.n	80005fc <BSP_PinInit+0x136>
		ioposition = 0x1U<<position;
 80004de:	2201      	movs	r2, #1
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	613b      	str	r3, [r7, #16]

		iocurrent = (uint32_t)(config->pin) & ioposition;
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	461a      	mov	r2, r3
 80004ee:	693b      	ldr	r3, [r7, #16]
 80004f0:	4013      	ands	r3, r2
 80004f2:	60fb      	str	r3, [r7, #12]

		if(iocurrent == ioposition){
 80004f4:	68fa      	ldr	r2, [r7, #12]
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d17c      	bne.n	80005f6 <BSP_PinInit+0x130>
			//Modo
			if(((config->mode & GPIO_MODE) == GPIO_MODE_OUTPUT) || ((config->mode & GPIO_MODE) == GPIO_MODE_AF)){
 80004fc:	683b      	ldr	r3, [r7, #0]
 80004fe:	789b      	ldrb	r3, [r3, #2]
 8000500:	f003 0303 	and.w	r3, r3, #3
 8000504:	2b01      	cmp	r3, #1
 8000506:	d005      	beq.n	8000514 <BSP_PinInit+0x4e>
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	789b      	ldrb	r3, [r3, #2]
 800050c:	f003 0303 	and.w	r3, r3, #3
 8000510:	2b02      	cmp	r3, #2
 8000512:	d12b      	bne.n	800056c <BSP_PinInit+0xa6>
				//io speed
				P->OSPEEDR &=~(0x3<<(position * 2));
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	697a      	ldr	r2, [r7, #20]
 800051a:	0052      	lsls	r2, r2, #1
 800051c:	2103      	movs	r1, #3
 800051e:	fa01 f202 	lsl.w	r2, r1, r2
 8000522:	43d2      	mvns	r2, r2
 8000524:	401a      	ands	r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	609a      	str	r2, [r3, #8]
				P->OSPEEDR |= config->speed<< (position * 2);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	7912      	ldrb	r2, [r2, #4]
 8000532:	4611      	mov	r1, r2
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	0052      	lsls	r2, r2, #1
 8000538:	fa01 f202 	lsl.w	r2, r1, r2
 800053c:	431a      	orrs	r2, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	609a      	str	r2, [r3, #8]
				//io type
				P->OTYPER &=~ (1<<(position ));
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	2101      	movs	r1, #1
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	fa01 f202 	lsl.w	r2, r1, r2
 800054e:	43d2      	mvns	r2, r2
 8000550:	401a      	ands	r2, r3
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	605a      	str	r2, [r3, #4]
				P->OTYPER |= config->outputType<<position;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	78d2      	ldrb	r2, [r2, #3]
 800055e:	4611      	mov	r1, r2
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	431a      	orrs	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	605a      	str	r2, [r3, #4]
			}
			if((config->mode & GPIO_MODE) != GPIO_MODE_ANALOG){
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	789b      	ldrb	r3, [r3, #2]
 8000570:	f003 0303 	and.w	r3, r3, #3
 8000574:	2b03      	cmp	r3, #3
 8000576:	d016      	beq.n	80005a6 <BSP_PinInit+0xe0>
				P->PUPDR &=~ (0x3U<< (position * 2));
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	68da      	ldr	r2, [r3, #12]
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	2103      	movs	r1, #3
 8000582:	fa01 f303 	lsl.w	r3, r1, r3
 8000586:	43db      	mvns	r3, r3
 8000588:	401a      	ands	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	60da      	str	r2, [r3, #12]
				P->PUPDR |= config->pullup<< (position * 2);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	68db      	ldr	r3, [r3, #12]
 8000592:	683a      	ldr	r2, [r7, #0]
 8000594:	7952      	ldrb	r2, [r2, #5]
 8000596:	4611      	mov	r1, r2
 8000598:	697a      	ldr	r2, [r7, #20]
 800059a:	0052      	lsls	r2, r2, #1
 800059c:	fa01 f202 	lsl.w	r2, r1, r2
 80005a0:	431a      	orrs	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	60da      	str	r2, [r3, #12]
			}
			if((config->mode & GPIO_MODE)  == GPIO_MODE_AF){
				//update actualizarse en una segunda version

			}
			if((config->mode &GPIO_MODE) == GPIO_MODE_ANALOG){
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	789b      	ldrb	r3, [r3, #2]
 80005aa:	f003 0303 	and.w	r3, r3, #3
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d10a      	bne.n	80005c8 <BSP_PinInit+0x102>
				P->PUPDR &=~ (0x3U<<(2 *position));
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	68da      	ldr	r2, [r3, #12]
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	2103      	movs	r1, #3
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	43db      	mvns	r3, r3
 80005c2:	401a      	ands	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	60da      	str	r2, [r3, #12]
			}
			P->MODER &=~ (0x3u<<(position * 2));
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	2103      	movs	r1, #3
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	401a      	ands	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	601a      	str	r2, [r3, #0]
			P->MODER |= config->mode << (position * 2);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	7892      	ldrb	r2, [r2, #2]
 80005e6:	4611      	mov	r1, r2
 80005e8:	697a      	ldr	r2, [r7, #20]
 80005ea:	0052      	lsls	r2, r2, #1
 80005ec:	fa01 f202 	lsl.w	r2, r1, r2
 80005f0:	431a      	orrs	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
	for(position = 0; position <16; position++){
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	2b0f      	cmp	r3, #15
 8000600:	f67f af6d 	bls.w	80004de <BSP_PinInit+0x18>
		}
	}
	return;
 8000604:	bf00      	nop
}
 8000606:	371c      	adds	r7, #28
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <LCD_Init>:
static void LCD_Data(uint8_t data);
static void LCD_CursorSet(uint8_t col, uint8_t row);


/*Function definition -------------------------------------------------*/
void LCD_Init(uint8_t cols, uint8_t rows) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	460a      	mov	r2, r1
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]
	/* At least 40ms */
	LCD_Delay(45);
 8000620:	202d      	movs	r0, #45	; 0x2d
 8000622:	f000 f965 	bl	80008f0 <LCD_Delay>

	/* Set LCD width and height */
	LCD_Opts.Rows = rows;
 8000626:	4a2b      	ldr	r2, [pc, #172]	; (80006d4 <LCD_Init+0xc4>)
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	70d3      	strb	r3, [r2, #3]
	LCD_Opts.Cols = cols;
 800062c:	4a29      	ldr	r2, [pc, #164]	; (80006d4 <LCD_Init+0xc4>)
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	7113      	strb	r3, [r2, #4]

	/* Set cursor pointer to beginning for LCD */
	LCD_Opts.currentX = 0;
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <LCD_Init+0xc4>)
 8000634:	2200      	movs	r2, #0
 8000636:	715a      	strb	r2, [r3, #5]
	LCD_Opts.currentY = 0;
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <LCD_Init+0xc4>)
 800063a:	2200      	movs	r2, #0
 800063c:	719a      	strb	r2, [r3, #6]


	LCD_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <LCD_Init+0xc4>)
 8000640:	2200      	movs	r2, #0
 8000642:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d906      	bls.n	8000658 <LCD_Init+0x48>
		LCD_Opts.DisplayFunction |= HD44780_2LINE;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <LCD_Init+0xc4>)
 800064c:	785b      	ldrb	r3, [r3, #1]
 800064e:	f043 0308 	orr.w	r3, r3, #8
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <LCD_Init+0xc4>)
 8000656:	705a      	strb	r2, [r3, #1]
	}

	/* Try to set 4bit mode */
	LCD_nibble_write(0x03,0);
 8000658:	2100      	movs	r1, #0
 800065a:	2003      	movs	r0, #3
 800065c:	f000 f954 	bl	8000908 <LCD_nibble_write>
	LCD_Delay(45);
 8000660:	202d      	movs	r0, #45	; 0x2d
 8000662:	f000 f945 	bl	80008f0 <LCD_Delay>

	/* Second try */
	LCD_nibble_write(0x03,0);
 8000666:	2100      	movs	r1, #0
 8000668:	2003      	movs	r0, #3
 800066a:	f000 f94d 	bl	8000908 <LCD_nibble_write>
	LCD_Delay(45);
 800066e:	202d      	movs	r0, #45	; 0x2d
 8000670:	f000 f93e 	bl	80008f0 <LCD_Delay>

	/* Third goo! */
	LCD_nibble_write(0x03,0);
 8000674:	2100      	movs	r1, #0
 8000676:	2003      	movs	r0, #3
 8000678:	f000 f946 	bl	8000908 <LCD_nibble_write>
	LCD_Delay(45);
 800067c:	202d      	movs	r0, #45	; 0x2d
 800067e:	f000 f937 	bl	80008f0 <LCD_Delay>

	/* Set 4-bit interface */
	LCD_nibble_write(0x02,0);
 8000682:	2100      	movs	r1, #0
 8000684:	2002      	movs	r0, #2
 8000686:	f000 f93f 	bl	8000908 <LCD_nibble_write>
	LCD_Delay(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f000 f930 	bl	80008f0 <LCD_Delay>

	/* Set # lines, font size, etc. */
	LCD_Cmd(HD44780_FUNCTIONSET | LCD_Opts.DisplayFunction);
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <LCD_Init+0xc4>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	f043 0320 	orr.w	r3, r3, #32
 8000698:	b2db      	uxtb	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f8bb 	bl	8000816 <LCD_Cmd>

	/* Turn the display on with no cursor or blinking default */
	LCD_Opts.DisplayControl = HD44780_DISPLAYON;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <LCD_Init+0xc4>)
 80006a2:	2204      	movs	r2, #4
 80006a4:	701a      	strb	r2, [r3, #0]
	LCD_DisplayOn();
 80006a6:	f000 f87f 	bl	80007a8 <LCD_DisplayOn>

	/* Clear lcd */
	LCD_Clear();
 80006aa:	f000 f815 	bl	80006d8 <LCD_Clear>

	/* Default font directions */
	LCD_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 80006ae:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <LCD_Init+0xc4>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	709a      	strb	r2, [r3, #2]
	LCD_Cmd(HD44780_ENTRYMODESET | LCD_Opts.DisplayMode);
 80006b4:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <LCD_Init+0xc4>)
 80006b6:	789b      	ldrb	r3, [r3, #2]
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f8a9 	bl	8000816 <LCD_Cmd>

	/* Delay */
	LCD_Delay(45);
 80006c4:	202d      	movs	r0, #45	; 0x2d
 80006c6:	f000 f913 	bl	80008f0 <LCD_Delay>
	return;
 80006ca:	bf00      	nop
}
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000090 	.word	0x20000090

080006d8 <LCD_Clear>:


void LCD_Clear(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	LCD_Cmd(HD44780_CLEARDISPLAY);
 80006dc:	2001      	movs	r0, #1
 80006de:	f000 f89a 	bl	8000816 <LCD_Cmd>
	LCD_Delay(3);
 80006e2:	2003      	movs	r0, #3
 80006e4:	f000 f904 	bl	80008f0 <LCD_Delay>
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <LCD_Puts>:

void LCD_Puts(uint8_t x, uint8_t y, char* str) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	603a      	str	r2, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	460b      	mov	r3, r1
 80006fa:	71bb      	strb	r3, [r7, #6]
	LCD_CursorSet(x, y);
 80006fc:	79ba      	ldrb	r2, [r7, #6]
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4611      	mov	r1, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f8c4 	bl	8000890 <LCD_CursorSet>
	while (*str) {
 8000708:	e042      	b.n	8000790 <LCD_Puts+0xa4>
		if (LCD_Opts.currentX >= LCD_Opts.Cols) {
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <LCD_Puts+0xb8>)
 800070c:	795a      	ldrb	r2, [r3, #5]
 800070e:	4b25      	ldr	r3, [pc, #148]	; (80007a4 <LCD_Puts+0xb8>)
 8000710:	791b      	ldrb	r3, [r3, #4]
 8000712:	429a      	cmp	r2, r3
 8000714:	d310      	bcc.n	8000738 <LCD_Puts+0x4c>
			LCD_Opts.currentX = 0;
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <LCD_Puts+0xb8>)
 8000718:	2200      	movs	r2, #0
 800071a:	715a      	strb	r2, [r3, #5]
			LCD_Opts.currentY++;
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <LCD_Puts+0xb8>)
 800071e:	799b      	ldrb	r3, [r3, #6]
 8000720:	3301      	adds	r3, #1
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <LCD_Puts+0xb8>)
 8000726:	719a      	strb	r2, [r3, #6]
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <LCD_Puts+0xb8>)
 800072a:	795b      	ldrb	r3, [r3, #5]
 800072c:	4a1d      	ldr	r2, [pc, #116]	; (80007a4 <LCD_Puts+0xb8>)
 800072e:	7992      	ldrb	r2, [r2, #6]
 8000730:	4611      	mov	r1, r2
 8000732:	4618      	mov	r0, r3
 8000734:	f000 f8ac 	bl	8000890 <LCD_CursorSet>
		}
		if (*str == '\n') {
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b0a      	cmp	r3, #10
 800073e:	d10e      	bne.n	800075e <LCD_Puts+0x72>
			LCD_Opts.currentY++;
 8000740:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <LCD_Puts+0xb8>)
 8000742:	799b      	ldrb	r3, [r3, #6]
 8000744:	3301      	adds	r3, #1
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <LCD_Puts+0xb8>)
 800074a:	719a      	strb	r2, [r3, #6]
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <LCD_Puts+0xb8>)
 800074e:	795b      	ldrb	r3, [r3, #5]
 8000750:	4a14      	ldr	r2, [pc, #80]	; (80007a4 <LCD_Puts+0xb8>)
 8000752:	7992      	ldrb	r2, [r2, #6]
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f89a 	bl	8000890 <LCD_CursorSet>
 800075c:	e015      	b.n	800078a <LCD_Puts+0x9e>
		} else if (*str == '\r') {
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b0d      	cmp	r3, #13
 8000764:	d106      	bne.n	8000774 <LCD_Puts+0x88>
			LCD_CursorSet(0, LCD_Opts.currentY);
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <LCD_Puts+0xb8>)
 8000768:	799b      	ldrb	r3, [r3, #6]
 800076a:	4619      	mov	r1, r3
 800076c:	2000      	movs	r0, #0
 800076e:	f000 f88f 	bl	8000890 <LCD_CursorSet>
 8000772:	e00a      	b.n	800078a <LCD_Puts+0x9e>
		} else {
			LCD_Data(*str);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f86e 	bl	800085a <LCD_Data>
			LCD_Opts.currentX++;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <LCD_Puts+0xb8>)
 8000780:	795b      	ldrb	r3, [r3, #5]
 8000782:	3301      	adds	r3, #1
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <LCD_Puts+0xb8>)
 8000788:	715a      	strb	r2, [r3, #5]
		}
		str++;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1b8      	bne.n	800070a <LCD_Puts+0x1e>
	}
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000090 	.word	0x20000090

080007a8 <LCD_DisplayOn>:


void LCD_DisplayOn(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	LCD_Opts.DisplayControl |= HD44780_DISPLAYON;
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <LCD_DisplayOn+0x28>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <LCD_DisplayOn+0x28>)
 80007b8:	701a      	strb	r2, [r3, #0]
	LCD_Cmd(HD44780_DISPLAYCONTROL | LCD_Opts.DisplayControl);
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <LCD_DisplayOn+0x28>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	f043 0308 	orr.w	r3, r3, #8
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 f826 	bl	8000816 <LCD_Cmd>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000090 	.word	0x20000090

080007d4 <LCD_Printf>:
	LCD_CursorSet(x, y);
	LCD_Data(location);
}


void LCD_Printf(uint8_t x, uint8_t y,char *format,...){
 80007d4:	b40c      	push	{r2, r3}
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b098      	sub	sp, #96	; 0x60
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	460a      	mov	r2, r1
 80007e0:	71fb      	strb	r3, [r7, #7]
 80007e2:	4613      	mov	r3, r2
 80007e4:	71bb      	strb	r3, [r7, #6]
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80007e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007ea:	60fb      	str	r3, [r7, #12]
	vsprintf(str, format,args);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	68fa      	ldr	r2, [r7, #12]
 80007f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 fb1f 	bl	8000e38 <vsiprintf>
	LCD_Puts(x, y,str);
 80007fa:	f107 0210 	add.w	r2, r7, #16
 80007fe:	79b9      	ldrb	r1, [r7, #6]
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff72 	bl	80006ec <LCD_Puts>
	va_end(args);
}
 8000808:	bf00      	nop
 800080a:	3760      	adds	r7, #96	; 0x60
 800080c:	46bd      	mov	sp, r7
 800080e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000812:	b002      	add	sp, #8
 8000814:	4770      	bx	lr

08000816 <LCD_Cmd>:

/***************************************************************/

/* Private functions */
static void LCD_Cmd(uint8_t cmd){
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	4603      	mov	r3, r0
 800081e:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write((cmd>>4) & 0x0F,0);
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	091b      	lsrs	r3, r3, #4
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f86d 	bl	8000908 <LCD_nibble_write>
	LCD_nibble_write(cmd & 0x0F,0);
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	f003 030f 	and.w	r3, r3, #15
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f000 f865 	bl	8000908 <LCD_nibble_write>
	if(cmd < 4)
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b03      	cmp	r3, #3
 8000842:	d803      	bhi.n	800084c <LCD_Cmd+0x36>
		LCD_Delay(3);
 8000844:	2003      	movs	r0, #3
 8000846:	f000 f853 	bl	80008f0 <LCD_Delay>
	else
		LCD_Delay(2);
	return;
 800084a:	e003      	b.n	8000854 <LCD_Cmd+0x3e>
		LCD_Delay(2);
 800084c:	2002      	movs	r0, #2
 800084e:	f000 f84f 	bl	80008f0 <LCD_Delay>
	return;
 8000852:	bf00      	nop
}
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <LCD_Data>:

static void LCD_Data(uint8_t data){
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write((data>>4) & 0x0F,1);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	091b      	lsrs	r3, r3, #4
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2101      	movs	r1, #1
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f84b 	bl	8000908 <LCD_nibble_write>
	LCD_nibble_write(data & 0x0F,1);
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 030f 	and.w	r3, r3, #15
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2101      	movs	r1, #1
 800087c:	4618      	mov	r0, r3
 800087e:	f000 f843 	bl	8000908 <LCD_nibble_write>
	LCD_Delay(1);
 8000882:	2001      	movs	r0, #1
 8000884:	f000 f834 	bl	80008f0 <LCD_Delay>
	return;
 8000888:	bf00      	nop
}
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <LCD_CursorSet>:

static void LCD_CursorSet(uint8_t col, uint8_t row){
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	460a      	mov	r2, r1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	4613      	mov	r3, r2
 800089e:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80008a0:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <LCD_CursorSet+0x58>)
 80008a2:	60fb      	str	r3, [r7, #12]
	/* Go to beginning */
	if (row >= LCD_Opts.Rows) {
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <LCD_CursorSet+0x5c>)
 80008a6:	78db      	ldrb	r3, [r3, #3]
 80008a8:	79ba      	ldrb	r2, [r7, #6]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d301      	bcc.n	80008b2 <LCD_CursorSet+0x22>
		row = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	71bb      	strb	r3, [r7, #6]
	}
	/* Set current column and row */
	LCD_Opts.currentX = col;
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <LCD_CursorSet+0x5c>)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	7153      	strb	r3, [r2, #5]
	LCD_Opts.currentY = row;
 80008b8:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <LCD_CursorSet+0x5c>)
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	7193      	strb	r3, [r2, #6]

	/* Set location address */
	LCD_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	3310      	adds	r3, #16
 80008c2:	443b      	add	r3, r7
 80008c4:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	4413      	add	r3, r2
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	b25b      	sxtb	r3, r3
 80008d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff9c 	bl	8000816 <LCD_Cmd>
}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	54144000 	.word	0x54144000
 80008ec:	20000090 	.word	0x20000090

080008f0 <LCD_Delay>:
#define LCD_D7					A , 6


/*Defincion de funciones ------------------------------------*/

void LCD_Delay(uint32_t delayms){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	delay_ms(delayms);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f000 f86f 	bl	80009dc <delay_ms>
	//HAL_Delay
	//__delay_ms
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <LCD_nibble_write>:

void LCD_nibble_write(uint8_t data, uint8_t control){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	460a      	mov	r2, r1
 8000912:	71fb      	strb	r3, [r7, #7]
 8000914:	4613      	mov	r3, r2
 8000916:	71bb      	strb	r3, [r7, #6]
	uint32_t delay = 1;
 8000918:	2301      	movs	r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
	GPIOX_ODR(LCD_D7) = (data>>3) & 0x1;
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	08db      	lsrs	r3, r3, #3
 8000920:	b2db      	uxtb	r3, r3
 8000922:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <LCD_nibble_write+0x88>)
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	6013      	str	r3, [r2, #0]
	GPIOX_ODR(LCD_D6) = (data>>2) & 0x1;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	089b      	lsrs	r3, r3, #2
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4a18      	ldr	r2, [pc, #96]	; (8000994 <LCD_nibble_write+0x8c>)
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	6013      	str	r3, [r2, #0]
	GPIOX_ODR(LCD_D5) = (data>>1) & 0x1;
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	085b      	lsrs	r3, r3, #1
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4a16      	ldr	r2, [pc, #88]	; (8000998 <LCD_nibble_write+0x90>)
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	6013      	str	r3, [r2, #0]
	GPIOX_ODR(LCD_D4) = (data) & 0x1;
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <LCD_nibble_write+0x94>)
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	6013      	str	r3, [r2, #0]
//	//PA1
//	GPIOA->BSRR |= ((data>>3) & 0x1) ? (1<<1) : (1<<(16 + 1));
//	//PA7
//	GPIOA->BSRR |= ((data>>2) & 0x1) ? (1<<7) : (1<<(16 + 7));

	GPIOX_ODR(LCD_E) = 0;
 8000950:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <LCD_nibble_write+0x98>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]

	if(control){
 8000956:	79bb      	ldrb	r3, [r7, #6]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d003      	beq.n	8000964 <LCD_nibble_write+0x5c>
		GPIOX_ODR(LCD_RS) = 1;
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <LCD_nibble_write+0x9c>)
 800095e:	2201      	movs	r2, #1
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	e002      	b.n	800096a <LCD_nibble_write+0x62>
	}else{
		GPIOX_ODR(LCD_RS) = 0;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <LCD_nibble_write+0x9c>)
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
	}

	GPIOX_ODR(LCD_E) = 1;
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <LCD_nibble_write+0x98>)
 800096c:	2201      	movs	r2, #1
 800096e:	601a      	str	r2, [r3, #0]
	while(delay-- >0);
 8000970:	bf00      	nop
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	1e5a      	subs	r2, r3, #1
 8000976:	60fa      	str	r2, [r7, #12]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1fa      	bne.n	8000972 <LCD_nibble_write+0x6a>
	GPIOX_ODR(LCD_E) = 0;
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <LCD_nibble_write+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]

	return;
 8000982:	bf00      	nop
}
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	42400298 	.word	0x42400298
 8000994:	42400294 	.word	0x42400294
 8000998:	42400290 	.word	0x42400290
 800099c:	4240028c 	.word	0x4240028c
 80009a0:	42400288 	.word	0x42400288
 80009a4:	42400284 	.word	0x42400284

080009a8 <SysTick_Init>:
#include "SysTick.h"

volatile uint32_t uwTicks = 0;


void SysTick_Init(uint32_t ticks){
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	SysTick->CTRL = 0;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <SysTick_Init+0x30>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]

	SysTick->LOAD = ticks - 1;
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <SysTick_Init+0x30>)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	6053      	str	r3, [r2, #4]

	SysTick->VAL = 0;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <SysTick_Init+0x30>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_CLKSOURCE_Msk;
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SysTick_Init+0x30>)
 80009c6:	2207      	movs	r2, #7
 80009c8:	601a      	str	r2, [r3, #0]

	return;
 80009ca:	bf00      	nop
}
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000e010 	.word	0xe000e010

080009dc <delay_ms>:

void delay_ms(uint32_t delay){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
//	SysTick->VAL = 0;
//
//	for(uint32_t i = 0; i <delay; i++){
//		while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0); //1ms
//	}
	uint32_t tickStart = GetTicks();
 80009e4:	f000 f810 	bl	8000a08 <GetTicks>
 80009e8:	60f8      	str	r0, [r7, #12]
	uint32_t wait = delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60bb      	str	r3, [r7, #8]

	while((GetTicks() - tickStart) < wait);
 80009ee:	bf00      	nop
 80009f0:	f000 f80a 	bl	8000a08 <GetTicks>
 80009f4:	4602      	mov	r2, r0
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d8f7      	bhi.n	80009f0 <delay_ms+0x14>
	return;
 8000a00:	bf00      	nop
}
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <GetTicks>:

uint32_t GetTicks(void){
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
	return (uint32_t)uwTicks;
 8000a0c:	4b03      	ldr	r3, [pc, #12]	; (8000a1c <GetTicks+0x14>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	20000098 	.word	0x20000098

08000a20 <TicksInc>:

void TicksInc(uint32_t inc){
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	uwTicks += inc;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <TicksInc+0x20>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4413      	add	r3, r2
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <TicksInc+0x20>)
 8000a32:	6013      	str	r3, [r2, #0]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	20000098 	.word	0x20000098

08000a44 <getNumberOfDigits>:
 */
#include "display.h"
/*Private variables ----------------------------------------------*/
const uint8_t Table7Segment[] = {0x3F, 0x30, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67};
/*Private function -----------------------------------------------*/
static uint8_t getNumberOfDigits(int32_t num){
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73fb      	strb	r3, [r7, #15]

	if(num == 0){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <getNumberOfDigits+0x16>
		return 1;
 8000a56:	2301      	movs	r3, #1
 8000a58:	e015      	b.n	8000a86 <getNumberOfDigits+0x42>
	}

	if(num < 0){
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	da0e      	bge.n	8000a7e <getNumberOfDigits+0x3a>
		num = -num;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	425b      	negs	r3, r3
 8000a64:	607b      	str	r3, [r7, #4]
	}
	while(num != 0){
 8000a66:	e00a      	b.n	8000a7e <getNumberOfDigits+0x3a>
		num /= 10;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <getNumberOfDigits+0x50>)
 8000a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a70:	1092      	asrs	r2, r2, #2
 8000a72:	17db      	asrs	r3, r3, #31
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	607b      	str	r3, [r7, #4]
		count++;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	73fb      	strb	r3, [r7, #15]
	while(num != 0){
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1f1      	bne.n	8000a68 <getNumberOfDigits+0x24>
	}
	return count;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	66666667 	.word	0x66666667

08000a98 <NumberDigits>:

static void NumberDigits(int32_t val, uint8_t *hex, uint8_t digitNumber){
 8000a98:	b480      	push	{r7}
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	71fb      	strb	r3, [r7, #7]
	uint8_t index = digitNumber - 1;
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	75fb      	strb	r3, [r7, #23]
	uint8_t digit;
	while(val >0 && index >= 0){
 8000aac:	e01d      	b.n	8000aea <NumberDigits+0x52>
		digit = val % 10;
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <NumberDigits+0x68>)
 8000ab2:	fb83 1302 	smull	r1, r3, r3, r2
 8000ab6:	1099      	asrs	r1, r3, #2
 8000ab8:	17d3      	asrs	r3, r2, #31
 8000aba:	1ac9      	subs	r1, r1, r3
 8000abc:	460b      	mov	r3, r1
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	1ad1      	subs	r1, r2, r3
 8000ac6:	460b      	mov	r3, r1
 8000ac8:	75bb      	strb	r3, [r7, #22]
		hex[index--] = digit;
 8000aca:	7dfb      	ldrb	r3, [r7, #23]
 8000acc:	1e5a      	subs	r2, r3, #1
 8000ace:	75fa      	strb	r2, [r7, #23]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	7dba      	ldrb	r2, [r7, #22]
 8000ad8:	701a      	strb	r2, [r3, #0]
		val /= 10;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <NumberDigits+0x68>)
 8000ade:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae2:	1092      	asrs	r2, r2, #2
 8000ae4:	17db      	asrs	r3, r3, #31
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	60fb      	str	r3, [r7, #12]
	while(val >0 && index >= 0){
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	dcde      	bgt.n	8000aae <NumberDigits+0x16>
	}
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	371c      	adds	r7, #28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	66666667 	.word	0x66666667

08000b04 <display_init>:

/*Function definition ---------------------------------------------*/
void display_init(Display_t *obj, uint8_t *frame){
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
	obj->pframe = frame;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	601a      	str	r2, [r3, #0]
	obj->state = 0;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	711a      	strb	r2, [r3, #4]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <display_setVal_ex>:

void display_setVal_ex(Display_t *obj, uint8_t val, DP_Pos_t dp, uint8_t custom){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	4608      	mov	r0, r1
 8000b32:	4611      	mov	r1, r2
 8000b34:	461a      	mov	r2, r3
 8000b36:	4603      	mov	r3, r0
 8000b38:	70fb      	strb	r3, [r7, #3]
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	70bb      	strb	r3, [r7, #2]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	707b      	strb	r3, [r7, #1]

	uint8_t digitNumber;
	uint8_t index[DISPLAy_NUMBER_OF_DIGITS] = {0};
 8000b42:	2300      	movs	r3, #0
 8000b44:	81bb      	strh	r3, [r7, #12]
	//obtener cantidad de digitos
	if(custom == DISPLAY_CUSTOM){
 8000b46:	787b      	ldrb	r3, [r7, #1]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d105      	bne.n	8000b58 <display_setVal_ex+0x30>
		display_custom(obj, val);
 8000b4c:	78fb      	ldrb	r3, [r7, #3]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f883 	bl	8000c5c <display_custom>
		//dp
		obj->dp = dp;
	}


}
 8000b56:	e02e      	b.n	8000bb6 <display_setVal_ex+0x8e>
		digitNumber = getNumberOfDigits(val);
 8000b58:	78fb      	ldrb	r3, [r7, #3]
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ff72 	bl	8000a44 <getNumberOfDigits>
 8000b60:	4603      	mov	r3, r0
 8000b62:	73fb      	strb	r3, [r7, #15]
		NumberDigits(val, index, digitNumber);
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	7bfa      	ldrb	r2, [r7, #15]
 8000b68:	f107 010c 	add.w	r1, r7, #12
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff93 	bl	8000a98 <NumberDigits>
		if(val < 10){
 8000b72:	78fb      	ldrb	r3, [r7, #3]
 8000b74:	2b09      	cmp	r3, #9
 8000b76:	d80c      	bhi.n	8000b92 <display_setVal_ex+0x6a>
			obj->pframe[0] = 0;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
			obj->pframe[1] = Table7Segment[index[0]];
 8000b80:	7b3b      	ldrb	r3, [r7, #12]
 8000b82:	4619      	mov	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <display_setVal_ex+0x98>)
 8000b8c:	5c52      	ldrb	r2, [r2, r1]
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e00e      	b.n	8000bb0 <display_setVal_ex+0x88>
			obj->pframe[0] = Table7Segment[index[0]]; //10
 8000b92:	7b3b      	ldrb	r3, [r7, #12]
 8000b94:	4619      	mov	r1, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a09      	ldr	r2, [pc, #36]	; (8000bc0 <display_setVal_ex+0x98>)
 8000b9c:	5c52      	ldrb	r2, [r2, r1]
 8000b9e:	701a      	strb	r2, [r3, #0]
			obj->pframe[1] = Table7Segment[index[1]]; //10
 8000ba0:	7b7b      	ldrb	r3, [r7, #13]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <display_setVal_ex+0x98>)
 8000bac:	5c52      	ldrb	r2, [r2, r1]
 8000bae:	701a      	strb	r2, [r3, #0]
		obj->dp = dp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	78ba      	ldrb	r2, [r7, #2]
 8000bb4:	715a      	strb	r2, [r3, #5]
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	08001748 	.word	0x08001748

08000bc4 <display_update>:

void display_update(Display_t *obj){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	uint8_t dp = obj->dp;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	795b      	ldrb	r3, [r3, #5]
 8000bd0:	73fb      	strb	r3, [r7, #15]
	switch(obj->state){
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	791b      	ldrb	r3, [r3, #4]
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	d83b      	bhi.n	8000c52 <display_update+0x8e>
 8000bda:	a201      	add	r2, pc, #4	; (adr r2, 8000be0 <display_update+0x1c>)
 8000bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be0:	08000bf1 	.word	0x08000bf1
 8000be4:	08000c0f 	.word	0x08000c0f
 8000be8:	08000c21 	.word	0x08000c21
 8000bec:	08000c41 	.word	0x08000c41
	case 0: //digito 1
		display_write(obj->pframe[0], DIGIT1, (dp & 0x1));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	7818      	ldrb	r0, [r3, #0]
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	2100      	movs	r1, #0
 8000c02:	f000 f837 	bl	8000c74 <display_write>
		obj->state = 2;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2202      	movs	r2, #2
 8000c0a:	711a      	strb	r2, [r3, #4]
		break;
 8000c0c:	e021      	b.n	8000c52 <display_update+0x8e>
	case 1:
		display_write(0, DIGIT1, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2100      	movs	r1, #0
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 f82e 	bl	8000c74 <display_write>
		obj->state = 2;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	711a      	strb	r2, [r3, #4]
		break;
 8000c1e:	e018      	b.n	8000c52 <display_update+0x8e>
	case 2:
		display_write(obj->pframe[1], DIGIT2, (dp & 0x2));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	7818      	ldrb	r0, [r3, #0]
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	461a      	mov	r2, r3
 8000c32:	2101      	movs	r1, #1
 8000c34:	f000 f81e 	bl	8000c74 <display_write>
		obj->state = 1;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	711a      	strb	r2, [r3, #4]
		break;
 8000c3e:	e008      	b.n	8000c52 <display_update+0x8e>
	case 3:
	display_write(0, DIGIT2, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2101      	movs	r1, #1
 8000c44:	2000      	movs	r0, #0
 8000c46:	f000 f815 	bl	8000c74 <display_write>
	obj->state = 0;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	711a      	strb	r2, [r3, #4]
	}
}
 8000c50:	e7ff      	b.n	8000c52 <display_update+0x8e>
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop

08000c5c <display_custom>:

#include "display.h"
#include "stm32f4xx.h"


void display_custom(Display_t *obj, uint8_t val){
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
	//todo

}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <display_write>:

void display_write(uint8_t data, uint8_t digit, uint8_t dp){
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	71bb      	strb	r3, [r7, #6]
 8000c82:	4613      	mov	r3, r2
 8000c84:	717b      	strb	r3, [r7, #5]
	//todo
	//G-F-E-D-C-B-A ->data 0b0GFEDCBA ->0b0011000
	GPIOB->BSRR |= (data & 1) ? 1<<0 : 1<<(16 + 0);
 8000c86:	4b4b      	ldr	r3, [pc, #300]	; (8000db4 <display_write+0x140>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	79fa      	ldrb	r2, [r7, #7]
 8000c8c:	f002 0201 	and.w	r2, r2, #1
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	d001      	beq.n	8000c98 <display_write+0x24>
 8000c94:	2201      	movs	r2, #1
 8000c96:	e001      	b.n	8000c9c <display_write+0x28>
 8000c98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c9c:	4945      	ldr	r1, [pc, #276]	; (8000db4 <display_write+0x140>)
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	618b      	str	r3, [r1, #24]
	GPIOB->BSRR |= (data & 1<<1) ? 1<<1 : 1<<(16 + 1);
 8000ca2:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <display_write+0x140>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	79fa      	ldrb	r2, [r7, #7]
 8000ca8:	f002 0202 	and.w	r2, r2, #2
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	d001      	beq.n	8000cb4 <display_write+0x40>
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	e001      	b.n	8000cb8 <display_write+0x44>
 8000cb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cb8:	493e      	ldr	r1, [pc, #248]	; (8000db4 <display_write+0x140>)
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	618b      	str	r3, [r1, #24]
	GPIOB->BSRR |= (data & 1<<2) ? 1<<2 : 1<<(16 + 2);
 8000cbe:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <display_write+0x140>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	79fa      	ldrb	r2, [r7, #7]
 8000cc4:	f002 0204 	and.w	r2, r2, #4
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	d001      	beq.n	8000cd0 <display_write+0x5c>
 8000ccc:	2204      	movs	r2, #4
 8000cce:	e001      	b.n	8000cd4 <display_write+0x60>
 8000cd0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cd4:	4937      	ldr	r1, [pc, #220]	; (8000db4 <display_write+0x140>)
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	618b      	str	r3, [r1, #24]
	GPIOB->BSRR |= (data & 1<<3) ? 1<<3 : 1<<(16 + 3);
 8000cda:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <display_write+0x140>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	79fa      	ldrb	r2, [r7, #7]
 8000ce0:	f002 0208 	and.w	r2, r2, #8
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	d001      	beq.n	8000cec <display_write+0x78>
 8000ce8:	2208      	movs	r2, #8
 8000cea:	e001      	b.n	8000cf0 <display_write+0x7c>
 8000cec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cf0:	4930      	ldr	r1, [pc, #192]	; (8000db4 <display_write+0x140>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	618b      	str	r3, [r1, #24]
	GPIOB->BSRR |= (data & 1<<4) ? 1<<4 : 1<<(16 + 4);
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <display_write+0x140>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	79fa      	ldrb	r2, [r7, #7]
 8000cfc:	f002 0210 	and.w	r2, r2, #16
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	d001      	beq.n	8000d08 <display_write+0x94>
 8000d04:	2210      	movs	r2, #16
 8000d06:	e001      	b.n	8000d0c <display_write+0x98>
 8000d08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d0c:	4929      	ldr	r1, [pc, #164]	; (8000db4 <display_write+0x140>)
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	618b      	str	r3, [r1, #24]
	GPIOB->BSRR |= (data & 1<<5) ? 1<<5 : 1<<(16 + 5);
 8000d12:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <display_write+0x140>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	79fa      	ldrb	r2, [r7, #7]
 8000d18:	f002 0220 	and.w	r2, r2, #32
 8000d1c:	2a00      	cmp	r2, #0
 8000d1e:	d001      	beq.n	8000d24 <display_write+0xb0>
 8000d20:	2220      	movs	r2, #32
 8000d22:	e001      	b.n	8000d28 <display_write+0xb4>
 8000d24:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000d28:	4922      	ldr	r1, [pc, #136]	; (8000db4 <display_write+0x140>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	618b      	str	r3, [r1, #24]
	GPIOB->BSRR |= (data & 1<<6) ? 1<<6 : 1<<(16 + 6);
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <display_write+0x140>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	79fa      	ldrb	r2, [r7, #7]
 8000d34:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	d001      	beq.n	8000d40 <display_write+0xcc>
 8000d3c:	2240      	movs	r2, #64	; 0x40
 8000d3e:	e001      	b.n	8000d44 <display_write+0xd0>
 8000d40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d44:	491b      	ldr	r1, [pc, #108]	; (8000db4 <display_write+0x140>)
 8000d46:	4313      	orrs	r3, r2
 8000d48:	618b      	str	r3, [r1, #24]
	//Digito
	if(digit == DIGIT1){
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10c      	bne.n	8000d6a <display_write+0xf6>
		GPIOB->BSRR |= 1<<8;
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <display_write+0x140>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <display_write+0x140>)
 8000d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5a:	6193      	str	r3, [r2, #24]
		GPIOB->BSRR |= 1<<(16 + 9);
 8000d5c:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <display_write+0x140>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	4a14      	ldr	r2, [pc, #80]	; (8000db4 <display_write+0x140>)
 8000d62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d66:	6193      	str	r3, [r2, #24]
 8000d68:	e00e      	b.n	8000d88 <display_write+0x114>
	}else if(digit == DIGIT2){
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d10b      	bne.n	8000d88 <display_write+0x114>
		GPIOB->BSRR |= 1<<9;
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <display_write+0x140>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <display_write+0x140>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6193      	str	r3, [r2, #24]
		GPIOB->BSRR |= 1<<(16 + 8);
 8000d7c:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <display_write+0x140>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <display_write+0x140>)
 8000d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d86:	6193      	str	r3, [r2, #24]
	}
	//dp
	if(dp == DP_ON){
 8000d88:	797b      	ldrb	r3, [r7, #5]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d106      	bne.n	8000d9c <display_write+0x128>
		GPIOB->BSRR |= 1<<7;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <display_write+0x140>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <display_write+0x140>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	6193      	str	r3, [r2, #24]
	}else{
		GPIOB->BSRR |= 1<<(16 + 7);
	}
}
 8000d9a:	e005      	b.n	8000da8 <display_write+0x134>
		GPIOB->BSRR |= 1<<(16 + 7);
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <display_write+0x140>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <display_write+0x140>)
 8000da2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000da6:	6193      	str	r3, [r2, #24]
}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	40020400 	.word	0x40020400

08000db8 <__errno>:
 8000db8:	4b01      	ldr	r3, [pc, #4]	; (8000dc0 <__errno+0x8>)
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000000 	.word	0x20000000

08000dc4 <__libc_init_array>:
 8000dc4:	b570      	push	{r4, r5, r6, lr}
 8000dc6:	4d0d      	ldr	r5, [pc, #52]	; (8000dfc <__libc_init_array+0x38>)
 8000dc8:	4c0d      	ldr	r4, [pc, #52]	; (8000e00 <__libc_init_array+0x3c>)
 8000dca:	1b64      	subs	r4, r4, r5
 8000dcc:	10a4      	asrs	r4, r4, #2
 8000dce:	2600      	movs	r6, #0
 8000dd0:	42a6      	cmp	r6, r4
 8000dd2:	d109      	bne.n	8000de8 <__libc_init_array+0x24>
 8000dd4:	4d0b      	ldr	r5, [pc, #44]	; (8000e04 <__libc_init_array+0x40>)
 8000dd6:	4c0c      	ldr	r4, [pc, #48]	; (8000e08 <__libc_init_array+0x44>)
 8000dd8:	f000 fc86 	bl	80016e8 <_init>
 8000ddc:	1b64      	subs	r4, r4, r5
 8000dde:	10a4      	asrs	r4, r4, #2
 8000de0:	2600      	movs	r6, #0
 8000de2:	42a6      	cmp	r6, r4
 8000de4:	d105      	bne.n	8000df2 <__libc_init_array+0x2e>
 8000de6:	bd70      	pop	{r4, r5, r6, pc}
 8000de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dec:	4798      	blx	r3
 8000dee:	3601      	adds	r6, #1
 8000df0:	e7ee      	b.n	8000dd0 <__libc_init_array+0xc>
 8000df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000df6:	4798      	blx	r3
 8000df8:	3601      	adds	r6, #1
 8000dfa:	e7f2      	b.n	8000de2 <__libc_init_array+0x1e>
 8000dfc:	08001788 	.word	0x08001788
 8000e00:	08001788 	.word	0x08001788
 8000e04:	08001788 	.word	0x08001788
 8000e08:	0800178c 	.word	0x0800178c

08000e0c <_vsiprintf_r>:
 8000e0c:	b500      	push	{lr}
 8000e0e:	b09b      	sub	sp, #108	; 0x6c
 8000e10:	9100      	str	r1, [sp, #0]
 8000e12:	9104      	str	r1, [sp, #16]
 8000e14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000e18:	9105      	str	r1, [sp, #20]
 8000e1a:	9102      	str	r1, [sp, #8]
 8000e1c:	4905      	ldr	r1, [pc, #20]	; (8000e34 <_vsiprintf_r+0x28>)
 8000e1e:	9103      	str	r1, [sp, #12]
 8000e20:	4669      	mov	r1, sp
 8000e22:	f000 f86f 	bl	8000f04 <_svfiprintf_r>
 8000e26:	9b00      	ldr	r3, [sp, #0]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	b01b      	add	sp, #108	; 0x6c
 8000e2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e32:	bf00      	nop
 8000e34:	ffff0208 	.word	0xffff0208

08000e38 <vsiprintf>:
 8000e38:	4613      	mov	r3, r2
 8000e3a:	460a      	mov	r2, r1
 8000e3c:	4601      	mov	r1, r0
 8000e3e:	4802      	ldr	r0, [pc, #8]	; (8000e48 <vsiprintf+0x10>)
 8000e40:	6800      	ldr	r0, [r0, #0]
 8000e42:	f7ff bfe3 	b.w	8000e0c <_vsiprintf_r>
 8000e46:	bf00      	nop
 8000e48:	20000000 	.word	0x20000000

08000e4c <__ssputs_r>:
 8000e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e50:	688e      	ldr	r6, [r1, #8]
 8000e52:	429e      	cmp	r6, r3
 8000e54:	4682      	mov	sl, r0
 8000e56:	460c      	mov	r4, r1
 8000e58:	4690      	mov	r8, r2
 8000e5a:	461f      	mov	r7, r3
 8000e5c:	d838      	bhi.n	8000ed0 <__ssputs_r+0x84>
 8000e5e:	898a      	ldrh	r2, [r1, #12]
 8000e60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000e64:	d032      	beq.n	8000ecc <__ssputs_r+0x80>
 8000e66:	6825      	ldr	r5, [r4, #0]
 8000e68:	6909      	ldr	r1, [r1, #16]
 8000e6a:	eba5 0901 	sub.w	r9, r5, r1
 8000e6e:	6965      	ldr	r5, [r4, #20]
 8000e70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000e74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000e78:	3301      	adds	r3, #1
 8000e7a:	444b      	add	r3, r9
 8000e7c:	106d      	asrs	r5, r5, #1
 8000e7e:	429d      	cmp	r5, r3
 8000e80:	bf38      	it	cc
 8000e82:	461d      	movcc	r5, r3
 8000e84:	0553      	lsls	r3, r2, #21
 8000e86:	d531      	bpl.n	8000eec <__ssputs_r+0xa0>
 8000e88:	4629      	mov	r1, r5
 8000e8a:	f000 fb63 	bl	8001554 <_malloc_r>
 8000e8e:	4606      	mov	r6, r0
 8000e90:	b950      	cbnz	r0, 8000ea8 <__ssputs_r+0x5c>
 8000e92:	230c      	movs	r3, #12
 8000e94:	f8ca 3000 	str.w	r3, [sl]
 8000e98:	89a3      	ldrh	r3, [r4, #12]
 8000e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e9e:	81a3      	strh	r3, [r4, #12]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea8:	6921      	ldr	r1, [r4, #16]
 8000eaa:	464a      	mov	r2, r9
 8000eac:	f000 fabe 	bl	800142c <memcpy>
 8000eb0:	89a3      	ldrh	r3, [r4, #12]
 8000eb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eba:	81a3      	strh	r3, [r4, #12]
 8000ebc:	6126      	str	r6, [r4, #16]
 8000ebe:	6165      	str	r5, [r4, #20]
 8000ec0:	444e      	add	r6, r9
 8000ec2:	eba5 0509 	sub.w	r5, r5, r9
 8000ec6:	6026      	str	r6, [r4, #0]
 8000ec8:	60a5      	str	r5, [r4, #8]
 8000eca:	463e      	mov	r6, r7
 8000ecc:	42be      	cmp	r6, r7
 8000ece:	d900      	bls.n	8000ed2 <__ssputs_r+0x86>
 8000ed0:	463e      	mov	r6, r7
 8000ed2:	6820      	ldr	r0, [r4, #0]
 8000ed4:	4632      	mov	r2, r6
 8000ed6:	4641      	mov	r1, r8
 8000ed8:	f000 fab6 	bl	8001448 <memmove>
 8000edc:	68a3      	ldr	r3, [r4, #8]
 8000ede:	1b9b      	subs	r3, r3, r6
 8000ee0:	60a3      	str	r3, [r4, #8]
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	4433      	add	r3, r6
 8000ee6:	6023      	str	r3, [r4, #0]
 8000ee8:	2000      	movs	r0, #0
 8000eea:	e7db      	b.n	8000ea4 <__ssputs_r+0x58>
 8000eec:	462a      	mov	r2, r5
 8000eee:	f000 fba5 	bl	800163c <_realloc_r>
 8000ef2:	4606      	mov	r6, r0
 8000ef4:	2800      	cmp	r0, #0
 8000ef6:	d1e1      	bne.n	8000ebc <__ssputs_r+0x70>
 8000ef8:	6921      	ldr	r1, [r4, #16]
 8000efa:	4650      	mov	r0, sl
 8000efc:	f000 fabe 	bl	800147c <_free_r>
 8000f00:	e7c7      	b.n	8000e92 <__ssputs_r+0x46>
	...

08000f04 <_svfiprintf_r>:
 8000f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f08:	4698      	mov	r8, r3
 8000f0a:	898b      	ldrh	r3, [r1, #12]
 8000f0c:	061b      	lsls	r3, r3, #24
 8000f0e:	b09d      	sub	sp, #116	; 0x74
 8000f10:	4607      	mov	r7, r0
 8000f12:	460d      	mov	r5, r1
 8000f14:	4614      	mov	r4, r2
 8000f16:	d50e      	bpl.n	8000f36 <_svfiprintf_r+0x32>
 8000f18:	690b      	ldr	r3, [r1, #16]
 8000f1a:	b963      	cbnz	r3, 8000f36 <_svfiprintf_r+0x32>
 8000f1c:	2140      	movs	r1, #64	; 0x40
 8000f1e:	f000 fb19 	bl	8001554 <_malloc_r>
 8000f22:	6028      	str	r0, [r5, #0]
 8000f24:	6128      	str	r0, [r5, #16]
 8000f26:	b920      	cbnz	r0, 8000f32 <_svfiprintf_r+0x2e>
 8000f28:	230c      	movs	r3, #12
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	e0d1      	b.n	80010d6 <_svfiprintf_r+0x1d2>
 8000f32:	2340      	movs	r3, #64	; 0x40
 8000f34:	616b      	str	r3, [r5, #20]
 8000f36:	2300      	movs	r3, #0
 8000f38:	9309      	str	r3, [sp, #36]	; 0x24
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000f40:	f8cd 800c 	str.w	r8, [sp, #12]
 8000f44:	2330      	movs	r3, #48	; 0x30
 8000f46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80010f0 <_svfiprintf_r+0x1ec>
 8000f4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000f4e:	f04f 0901 	mov.w	r9, #1
 8000f52:	4623      	mov	r3, r4
 8000f54:	469a      	mov	sl, r3
 8000f56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f5a:	b10a      	cbz	r2, 8000f60 <_svfiprintf_r+0x5c>
 8000f5c:	2a25      	cmp	r2, #37	; 0x25
 8000f5e:	d1f9      	bne.n	8000f54 <_svfiprintf_r+0x50>
 8000f60:	ebba 0b04 	subs.w	fp, sl, r4
 8000f64:	d00b      	beq.n	8000f7e <_svfiprintf_r+0x7a>
 8000f66:	465b      	mov	r3, fp
 8000f68:	4622      	mov	r2, r4
 8000f6a:	4629      	mov	r1, r5
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	f7ff ff6d 	bl	8000e4c <__ssputs_r>
 8000f72:	3001      	adds	r0, #1
 8000f74:	f000 80aa 	beq.w	80010cc <_svfiprintf_r+0x1c8>
 8000f78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000f7a:	445a      	add	r2, fp
 8000f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8000f7e:	f89a 3000 	ldrb.w	r3, [sl]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 80a2 	beq.w	80010cc <_svfiprintf_r+0x1c8>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000f92:	f10a 0a01 	add.w	sl, sl, #1
 8000f96:	9304      	str	r3, [sp, #16]
 8000f98:	9307      	str	r3, [sp, #28]
 8000f9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000f9e:	931a      	str	r3, [sp, #104]	; 0x68
 8000fa0:	4654      	mov	r4, sl
 8000fa2:	2205      	movs	r2, #5
 8000fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fa8:	4851      	ldr	r0, [pc, #324]	; (80010f0 <_svfiprintf_r+0x1ec>)
 8000faa:	f7ff f921 	bl	80001f0 <memchr>
 8000fae:	9a04      	ldr	r2, [sp, #16]
 8000fb0:	b9d8      	cbnz	r0, 8000fea <_svfiprintf_r+0xe6>
 8000fb2:	06d0      	lsls	r0, r2, #27
 8000fb4:	bf44      	itt	mi
 8000fb6:	2320      	movmi	r3, #32
 8000fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000fbc:	0711      	lsls	r1, r2, #28
 8000fbe:	bf44      	itt	mi
 8000fc0:	232b      	movmi	r3, #43	; 0x2b
 8000fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000fc6:	f89a 3000 	ldrb.w	r3, [sl]
 8000fca:	2b2a      	cmp	r3, #42	; 0x2a
 8000fcc:	d015      	beq.n	8000ffa <_svfiprintf_r+0xf6>
 8000fce:	9a07      	ldr	r2, [sp, #28]
 8000fd0:	4654      	mov	r4, sl
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f04f 0c0a 	mov.w	ip, #10
 8000fd8:	4621      	mov	r1, r4
 8000fda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000fde:	3b30      	subs	r3, #48	; 0x30
 8000fe0:	2b09      	cmp	r3, #9
 8000fe2:	d94e      	bls.n	8001082 <_svfiprintf_r+0x17e>
 8000fe4:	b1b0      	cbz	r0, 8001014 <_svfiprintf_r+0x110>
 8000fe6:	9207      	str	r2, [sp, #28]
 8000fe8:	e014      	b.n	8001014 <_svfiprintf_r+0x110>
 8000fea:	eba0 0308 	sub.w	r3, r0, r8
 8000fee:	fa09 f303 	lsl.w	r3, r9, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	9304      	str	r3, [sp, #16]
 8000ff6:	46a2      	mov	sl, r4
 8000ff8:	e7d2      	b.n	8000fa0 <_svfiprintf_r+0x9c>
 8000ffa:	9b03      	ldr	r3, [sp, #12]
 8000ffc:	1d19      	adds	r1, r3, #4
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	9103      	str	r1, [sp, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	bfbb      	ittet	lt
 8001006:	425b      	neglt	r3, r3
 8001008:	f042 0202 	orrlt.w	r2, r2, #2
 800100c:	9307      	strge	r3, [sp, #28]
 800100e:	9307      	strlt	r3, [sp, #28]
 8001010:	bfb8      	it	lt
 8001012:	9204      	strlt	r2, [sp, #16]
 8001014:	7823      	ldrb	r3, [r4, #0]
 8001016:	2b2e      	cmp	r3, #46	; 0x2e
 8001018:	d10c      	bne.n	8001034 <_svfiprintf_r+0x130>
 800101a:	7863      	ldrb	r3, [r4, #1]
 800101c:	2b2a      	cmp	r3, #42	; 0x2a
 800101e:	d135      	bne.n	800108c <_svfiprintf_r+0x188>
 8001020:	9b03      	ldr	r3, [sp, #12]
 8001022:	1d1a      	adds	r2, r3, #4
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	9203      	str	r2, [sp, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	bfb8      	it	lt
 800102c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001030:	3402      	adds	r4, #2
 8001032:	9305      	str	r3, [sp, #20]
 8001034:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001100 <_svfiprintf_r+0x1fc>
 8001038:	7821      	ldrb	r1, [r4, #0]
 800103a:	2203      	movs	r2, #3
 800103c:	4650      	mov	r0, sl
 800103e:	f7ff f8d7 	bl	80001f0 <memchr>
 8001042:	b140      	cbz	r0, 8001056 <_svfiprintf_r+0x152>
 8001044:	2340      	movs	r3, #64	; 0x40
 8001046:	eba0 000a 	sub.w	r0, r0, sl
 800104a:	fa03 f000 	lsl.w	r0, r3, r0
 800104e:	9b04      	ldr	r3, [sp, #16]
 8001050:	4303      	orrs	r3, r0
 8001052:	3401      	adds	r4, #1
 8001054:	9304      	str	r3, [sp, #16]
 8001056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800105a:	4826      	ldr	r0, [pc, #152]	; (80010f4 <_svfiprintf_r+0x1f0>)
 800105c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001060:	2206      	movs	r2, #6
 8001062:	f7ff f8c5 	bl	80001f0 <memchr>
 8001066:	2800      	cmp	r0, #0
 8001068:	d038      	beq.n	80010dc <_svfiprintf_r+0x1d8>
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <_svfiprintf_r+0x1f4>)
 800106c:	bb1b      	cbnz	r3, 80010b6 <_svfiprintf_r+0x1b2>
 800106e:	9b03      	ldr	r3, [sp, #12]
 8001070:	3307      	adds	r3, #7
 8001072:	f023 0307 	bic.w	r3, r3, #7
 8001076:	3308      	adds	r3, #8
 8001078:	9303      	str	r3, [sp, #12]
 800107a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800107c:	4433      	add	r3, r6
 800107e:	9309      	str	r3, [sp, #36]	; 0x24
 8001080:	e767      	b.n	8000f52 <_svfiprintf_r+0x4e>
 8001082:	fb0c 3202 	mla	r2, ip, r2, r3
 8001086:	460c      	mov	r4, r1
 8001088:	2001      	movs	r0, #1
 800108a:	e7a5      	b.n	8000fd8 <_svfiprintf_r+0xd4>
 800108c:	2300      	movs	r3, #0
 800108e:	3401      	adds	r4, #1
 8001090:	9305      	str	r3, [sp, #20]
 8001092:	4619      	mov	r1, r3
 8001094:	f04f 0c0a 	mov.w	ip, #10
 8001098:	4620      	mov	r0, r4
 800109a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800109e:	3a30      	subs	r2, #48	; 0x30
 80010a0:	2a09      	cmp	r2, #9
 80010a2:	d903      	bls.n	80010ac <_svfiprintf_r+0x1a8>
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0c5      	beq.n	8001034 <_svfiprintf_r+0x130>
 80010a8:	9105      	str	r1, [sp, #20]
 80010aa:	e7c3      	b.n	8001034 <_svfiprintf_r+0x130>
 80010ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80010b0:	4604      	mov	r4, r0
 80010b2:	2301      	movs	r3, #1
 80010b4:	e7f0      	b.n	8001098 <_svfiprintf_r+0x194>
 80010b6:	ab03      	add	r3, sp, #12
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	462a      	mov	r2, r5
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <_svfiprintf_r+0x1f8>)
 80010be:	a904      	add	r1, sp, #16
 80010c0:	4638      	mov	r0, r7
 80010c2:	f3af 8000 	nop.w
 80010c6:	1c42      	adds	r2, r0, #1
 80010c8:	4606      	mov	r6, r0
 80010ca:	d1d6      	bne.n	800107a <_svfiprintf_r+0x176>
 80010cc:	89ab      	ldrh	r3, [r5, #12]
 80010ce:	065b      	lsls	r3, r3, #25
 80010d0:	f53f af2c 	bmi.w	8000f2c <_svfiprintf_r+0x28>
 80010d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80010d6:	b01d      	add	sp, #116	; 0x74
 80010d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010dc:	ab03      	add	r3, sp, #12
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	462a      	mov	r2, r5
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <_svfiprintf_r+0x1f8>)
 80010e4:	a904      	add	r1, sp, #16
 80010e6:	4638      	mov	r0, r7
 80010e8:	f000 f87a 	bl	80011e0 <_printf_i>
 80010ec:	e7eb      	b.n	80010c6 <_svfiprintf_r+0x1c2>
 80010ee:	bf00      	nop
 80010f0:	08001752 	.word	0x08001752
 80010f4:	0800175c 	.word	0x0800175c
 80010f8:	00000000 	.word	0x00000000
 80010fc:	08000e4d 	.word	0x08000e4d
 8001100:	08001758 	.word	0x08001758

08001104 <_printf_common>:
 8001104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001108:	4616      	mov	r6, r2
 800110a:	4699      	mov	r9, r3
 800110c:	688a      	ldr	r2, [r1, #8]
 800110e:	690b      	ldr	r3, [r1, #16]
 8001110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001114:	4293      	cmp	r3, r2
 8001116:	bfb8      	it	lt
 8001118:	4613      	movlt	r3, r2
 800111a:	6033      	str	r3, [r6, #0]
 800111c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001120:	4607      	mov	r7, r0
 8001122:	460c      	mov	r4, r1
 8001124:	b10a      	cbz	r2, 800112a <_printf_common+0x26>
 8001126:	3301      	adds	r3, #1
 8001128:	6033      	str	r3, [r6, #0]
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	0699      	lsls	r1, r3, #26
 800112e:	bf42      	ittt	mi
 8001130:	6833      	ldrmi	r3, [r6, #0]
 8001132:	3302      	addmi	r3, #2
 8001134:	6033      	strmi	r3, [r6, #0]
 8001136:	6825      	ldr	r5, [r4, #0]
 8001138:	f015 0506 	ands.w	r5, r5, #6
 800113c:	d106      	bne.n	800114c <_printf_common+0x48>
 800113e:	f104 0a19 	add.w	sl, r4, #25
 8001142:	68e3      	ldr	r3, [r4, #12]
 8001144:	6832      	ldr	r2, [r6, #0]
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	42ab      	cmp	r3, r5
 800114a:	dc26      	bgt.n	800119a <_printf_common+0x96>
 800114c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001150:	1e13      	subs	r3, r2, #0
 8001152:	6822      	ldr	r2, [r4, #0]
 8001154:	bf18      	it	ne
 8001156:	2301      	movne	r3, #1
 8001158:	0692      	lsls	r2, r2, #26
 800115a:	d42b      	bmi.n	80011b4 <_printf_common+0xb0>
 800115c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001160:	4649      	mov	r1, r9
 8001162:	4638      	mov	r0, r7
 8001164:	47c0      	blx	r8
 8001166:	3001      	adds	r0, #1
 8001168:	d01e      	beq.n	80011a8 <_printf_common+0xa4>
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	68e5      	ldr	r5, [r4, #12]
 800116e:	6832      	ldr	r2, [r6, #0]
 8001170:	f003 0306 	and.w	r3, r3, #6
 8001174:	2b04      	cmp	r3, #4
 8001176:	bf08      	it	eq
 8001178:	1aad      	subeq	r5, r5, r2
 800117a:	68a3      	ldr	r3, [r4, #8]
 800117c:	6922      	ldr	r2, [r4, #16]
 800117e:	bf0c      	ite	eq
 8001180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001184:	2500      	movne	r5, #0
 8001186:	4293      	cmp	r3, r2
 8001188:	bfc4      	itt	gt
 800118a:	1a9b      	subgt	r3, r3, r2
 800118c:	18ed      	addgt	r5, r5, r3
 800118e:	2600      	movs	r6, #0
 8001190:	341a      	adds	r4, #26
 8001192:	42b5      	cmp	r5, r6
 8001194:	d11a      	bne.n	80011cc <_printf_common+0xc8>
 8001196:	2000      	movs	r0, #0
 8001198:	e008      	b.n	80011ac <_printf_common+0xa8>
 800119a:	2301      	movs	r3, #1
 800119c:	4652      	mov	r2, sl
 800119e:	4649      	mov	r1, r9
 80011a0:	4638      	mov	r0, r7
 80011a2:	47c0      	blx	r8
 80011a4:	3001      	adds	r0, #1
 80011a6:	d103      	bne.n	80011b0 <_printf_common+0xac>
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011b0:	3501      	adds	r5, #1
 80011b2:	e7c6      	b.n	8001142 <_printf_common+0x3e>
 80011b4:	18e1      	adds	r1, r4, r3
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	2030      	movs	r0, #48	; 0x30
 80011ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80011be:	4422      	add	r2, r4
 80011c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80011c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80011c8:	3302      	adds	r3, #2
 80011ca:	e7c7      	b.n	800115c <_printf_common+0x58>
 80011cc:	2301      	movs	r3, #1
 80011ce:	4622      	mov	r2, r4
 80011d0:	4649      	mov	r1, r9
 80011d2:	4638      	mov	r0, r7
 80011d4:	47c0      	blx	r8
 80011d6:	3001      	adds	r0, #1
 80011d8:	d0e6      	beq.n	80011a8 <_printf_common+0xa4>
 80011da:	3601      	adds	r6, #1
 80011dc:	e7d9      	b.n	8001192 <_printf_common+0x8e>
	...

080011e0 <_printf_i>:
 80011e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80011e4:	7e0f      	ldrb	r7, [r1, #24]
 80011e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80011e8:	2f78      	cmp	r7, #120	; 0x78
 80011ea:	4691      	mov	r9, r2
 80011ec:	4680      	mov	r8, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	469a      	mov	sl, r3
 80011f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80011f6:	d807      	bhi.n	8001208 <_printf_i+0x28>
 80011f8:	2f62      	cmp	r7, #98	; 0x62
 80011fa:	d80a      	bhi.n	8001212 <_printf_i+0x32>
 80011fc:	2f00      	cmp	r7, #0
 80011fe:	f000 80d8 	beq.w	80013b2 <_printf_i+0x1d2>
 8001202:	2f58      	cmp	r7, #88	; 0x58
 8001204:	f000 80a3 	beq.w	800134e <_printf_i+0x16e>
 8001208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800120c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001210:	e03a      	b.n	8001288 <_printf_i+0xa8>
 8001212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001216:	2b15      	cmp	r3, #21
 8001218:	d8f6      	bhi.n	8001208 <_printf_i+0x28>
 800121a:	a101      	add	r1, pc, #4	; (adr r1, 8001220 <_printf_i+0x40>)
 800121c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001220:	08001279 	.word	0x08001279
 8001224:	0800128d 	.word	0x0800128d
 8001228:	08001209 	.word	0x08001209
 800122c:	08001209 	.word	0x08001209
 8001230:	08001209 	.word	0x08001209
 8001234:	08001209 	.word	0x08001209
 8001238:	0800128d 	.word	0x0800128d
 800123c:	08001209 	.word	0x08001209
 8001240:	08001209 	.word	0x08001209
 8001244:	08001209 	.word	0x08001209
 8001248:	08001209 	.word	0x08001209
 800124c:	08001399 	.word	0x08001399
 8001250:	080012bd 	.word	0x080012bd
 8001254:	0800137b 	.word	0x0800137b
 8001258:	08001209 	.word	0x08001209
 800125c:	08001209 	.word	0x08001209
 8001260:	080013bb 	.word	0x080013bb
 8001264:	08001209 	.word	0x08001209
 8001268:	080012bd 	.word	0x080012bd
 800126c:	08001209 	.word	0x08001209
 8001270:	08001209 	.word	0x08001209
 8001274:	08001383 	.word	0x08001383
 8001278:	682b      	ldr	r3, [r5, #0]
 800127a:	1d1a      	adds	r2, r3, #4
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	602a      	str	r2, [r5, #0]
 8001280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001288:	2301      	movs	r3, #1
 800128a:	e0a3      	b.n	80013d4 <_printf_i+0x1f4>
 800128c:	6820      	ldr	r0, [r4, #0]
 800128e:	6829      	ldr	r1, [r5, #0]
 8001290:	0606      	lsls	r6, r0, #24
 8001292:	f101 0304 	add.w	r3, r1, #4
 8001296:	d50a      	bpl.n	80012ae <_printf_i+0xce>
 8001298:	680e      	ldr	r6, [r1, #0]
 800129a:	602b      	str	r3, [r5, #0]
 800129c:	2e00      	cmp	r6, #0
 800129e:	da03      	bge.n	80012a8 <_printf_i+0xc8>
 80012a0:	232d      	movs	r3, #45	; 0x2d
 80012a2:	4276      	negs	r6, r6
 80012a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80012a8:	485e      	ldr	r0, [pc, #376]	; (8001424 <_printf_i+0x244>)
 80012aa:	230a      	movs	r3, #10
 80012ac:	e019      	b.n	80012e2 <_printf_i+0x102>
 80012ae:	680e      	ldr	r6, [r1, #0]
 80012b0:	602b      	str	r3, [r5, #0]
 80012b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80012b6:	bf18      	it	ne
 80012b8:	b236      	sxthne	r6, r6
 80012ba:	e7ef      	b.n	800129c <_printf_i+0xbc>
 80012bc:	682b      	ldr	r3, [r5, #0]
 80012be:	6820      	ldr	r0, [r4, #0]
 80012c0:	1d19      	adds	r1, r3, #4
 80012c2:	6029      	str	r1, [r5, #0]
 80012c4:	0601      	lsls	r1, r0, #24
 80012c6:	d501      	bpl.n	80012cc <_printf_i+0xec>
 80012c8:	681e      	ldr	r6, [r3, #0]
 80012ca:	e002      	b.n	80012d2 <_printf_i+0xf2>
 80012cc:	0646      	lsls	r6, r0, #25
 80012ce:	d5fb      	bpl.n	80012c8 <_printf_i+0xe8>
 80012d0:	881e      	ldrh	r6, [r3, #0]
 80012d2:	4854      	ldr	r0, [pc, #336]	; (8001424 <_printf_i+0x244>)
 80012d4:	2f6f      	cmp	r7, #111	; 0x6f
 80012d6:	bf0c      	ite	eq
 80012d8:	2308      	moveq	r3, #8
 80012da:	230a      	movne	r3, #10
 80012dc:	2100      	movs	r1, #0
 80012de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80012e2:	6865      	ldr	r5, [r4, #4]
 80012e4:	60a5      	str	r5, [r4, #8]
 80012e6:	2d00      	cmp	r5, #0
 80012e8:	bfa2      	ittt	ge
 80012ea:	6821      	ldrge	r1, [r4, #0]
 80012ec:	f021 0104 	bicge.w	r1, r1, #4
 80012f0:	6021      	strge	r1, [r4, #0]
 80012f2:	b90e      	cbnz	r6, 80012f8 <_printf_i+0x118>
 80012f4:	2d00      	cmp	r5, #0
 80012f6:	d04d      	beq.n	8001394 <_printf_i+0x1b4>
 80012f8:	4615      	mov	r5, r2
 80012fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80012fe:	fb03 6711 	mls	r7, r3, r1, r6
 8001302:	5dc7      	ldrb	r7, [r0, r7]
 8001304:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001308:	4637      	mov	r7, r6
 800130a:	42bb      	cmp	r3, r7
 800130c:	460e      	mov	r6, r1
 800130e:	d9f4      	bls.n	80012fa <_printf_i+0x11a>
 8001310:	2b08      	cmp	r3, #8
 8001312:	d10b      	bne.n	800132c <_printf_i+0x14c>
 8001314:	6823      	ldr	r3, [r4, #0]
 8001316:	07de      	lsls	r6, r3, #31
 8001318:	d508      	bpl.n	800132c <_printf_i+0x14c>
 800131a:	6923      	ldr	r3, [r4, #16]
 800131c:	6861      	ldr	r1, [r4, #4]
 800131e:	4299      	cmp	r1, r3
 8001320:	bfde      	ittt	le
 8001322:	2330      	movle	r3, #48	; 0x30
 8001324:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001328:	f105 35ff 	addle.w	r5, r5, #4294967295
 800132c:	1b52      	subs	r2, r2, r5
 800132e:	6122      	str	r2, [r4, #16]
 8001330:	f8cd a000 	str.w	sl, [sp]
 8001334:	464b      	mov	r3, r9
 8001336:	aa03      	add	r2, sp, #12
 8001338:	4621      	mov	r1, r4
 800133a:	4640      	mov	r0, r8
 800133c:	f7ff fee2 	bl	8001104 <_printf_common>
 8001340:	3001      	adds	r0, #1
 8001342:	d14c      	bne.n	80013de <_printf_i+0x1fe>
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	b004      	add	sp, #16
 800134a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800134e:	4835      	ldr	r0, [pc, #212]	; (8001424 <_printf_i+0x244>)
 8001350:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001354:	6829      	ldr	r1, [r5, #0]
 8001356:	6823      	ldr	r3, [r4, #0]
 8001358:	f851 6b04 	ldr.w	r6, [r1], #4
 800135c:	6029      	str	r1, [r5, #0]
 800135e:	061d      	lsls	r5, r3, #24
 8001360:	d514      	bpl.n	800138c <_printf_i+0x1ac>
 8001362:	07df      	lsls	r7, r3, #31
 8001364:	bf44      	itt	mi
 8001366:	f043 0320 	orrmi.w	r3, r3, #32
 800136a:	6023      	strmi	r3, [r4, #0]
 800136c:	b91e      	cbnz	r6, 8001376 <_printf_i+0x196>
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	f023 0320 	bic.w	r3, r3, #32
 8001374:	6023      	str	r3, [r4, #0]
 8001376:	2310      	movs	r3, #16
 8001378:	e7b0      	b.n	80012dc <_printf_i+0xfc>
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	f043 0320 	orr.w	r3, r3, #32
 8001380:	6023      	str	r3, [r4, #0]
 8001382:	2378      	movs	r3, #120	; 0x78
 8001384:	4828      	ldr	r0, [pc, #160]	; (8001428 <_printf_i+0x248>)
 8001386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800138a:	e7e3      	b.n	8001354 <_printf_i+0x174>
 800138c:	0659      	lsls	r1, r3, #25
 800138e:	bf48      	it	mi
 8001390:	b2b6      	uxthmi	r6, r6
 8001392:	e7e6      	b.n	8001362 <_printf_i+0x182>
 8001394:	4615      	mov	r5, r2
 8001396:	e7bb      	b.n	8001310 <_printf_i+0x130>
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	6826      	ldr	r6, [r4, #0]
 800139c:	6961      	ldr	r1, [r4, #20]
 800139e:	1d18      	adds	r0, r3, #4
 80013a0:	6028      	str	r0, [r5, #0]
 80013a2:	0635      	lsls	r5, r6, #24
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	d501      	bpl.n	80013ac <_printf_i+0x1cc>
 80013a8:	6019      	str	r1, [r3, #0]
 80013aa:	e002      	b.n	80013b2 <_printf_i+0x1d2>
 80013ac:	0670      	lsls	r0, r6, #25
 80013ae:	d5fb      	bpl.n	80013a8 <_printf_i+0x1c8>
 80013b0:	8019      	strh	r1, [r3, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	6123      	str	r3, [r4, #16]
 80013b6:	4615      	mov	r5, r2
 80013b8:	e7ba      	b.n	8001330 <_printf_i+0x150>
 80013ba:	682b      	ldr	r3, [r5, #0]
 80013bc:	1d1a      	adds	r2, r3, #4
 80013be:	602a      	str	r2, [r5, #0]
 80013c0:	681d      	ldr	r5, [r3, #0]
 80013c2:	6862      	ldr	r2, [r4, #4]
 80013c4:	2100      	movs	r1, #0
 80013c6:	4628      	mov	r0, r5
 80013c8:	f7fe ff12 	bl	80001f0 <memchr>
 80013cc:	b108      	cbz	r0, 80013d2 <_printf_i+0x1f2>
 80013ce:	1b40      	subs	r0, r0, r5
 80013d0:	6060      	str	r0, [r4, #4]
 80013d2:	6863      	ldr	r3, [r4, #4]
 80013d4:	6123      	str	r3, [r4, #16]
 80013d6:	2300      	movs	r3, #0
 80013d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013dc:	e7a8      	b.n	8001330 <_printf_i+0x150>
 80013de:	6923      	ldr	r3, [r4, #16]
 80013e0:	462a      	mov	r2, r5
 80013e2:	4649      	mov	r1, r9
 80013e4:	4640      	mov	r0, r8
 80013e6:	47d0      	blx	sl
 80013e8:	3001      	adds	r0, #1
 80013ea:	d0ab      	beq.n	8001344 <_printf_i+0x164>
 80013ec:	6823      	ldr	r3, [r4, #0]
 80013ee:	079b      	lsls	r3, r3, #30
 80013f0:	d413      	bmi.n	800141a <_printf_i+0x23a>
 80013f2:	68e0      	ldr	r0, [r4, #12]
 80013f4:	9b03      	ldr	r3, [sp, #12]
 80013f6:	4298      	cmp	r0, r3
 80013f8:	bfb8      	it	lt
 80013fa:	4618      	movlt	r0, r3
 80013fc:	e7a4      	b.n	8001348 <_printf_i+0x168>
 80013fe:	2301      	movs	r3, #1
 8001400:	4632      	mov	r2, r6
 8001402:	4649      	mov	r1, r9
 8001404:	4640      	mov	r0, r8
 8001406:	47d0      	blx	sl
 8001408:	3001      	adds	r0, #1
 800140a:	d09b      	beq.n	8001344 <_printf_i+0x164>
 800140c:	3501      	adds	r5, #1
 800140e:	68e3      	ldr	r3, [r4, #12]
 8001410:	9903      	ldr	r1, [sp, #12]
 8001412:	1a5b      	subs	r3, r3, r1
 8001414:	42ab      	cmp	r3, r5
 8001416:	dcf2      	bgt.n	80013fe <_printf_i+0x21e>
 8001418:	e7eb      	b.n	80013f2 <_printf_i+0x212>
 800141a:	2500      	movs	r5, #0
 800141c:	f104 0619 	add.w	r6, r4, #25
 8001420:	e7f5      	b.n	800140e <_printf_i+0x22e>
 8001422:	bf00      	nop
 8001424:	08001763 	.word	0x08001763
 8001428:	08001774 	.word	0x08001774

0800142c <memcpy>:
 800142c:	440a      	add	r2, r1
 800142e:	4291      	cmp	r1, r2
 8001430:	f100 33ff 	add.w	r3, r0, #4294967295
 8001434:	d100      	bne.n	8001438 <memcpy+0xc>
 8001436:	4770      	bx	lr
 8001438:	b510      	push	{r4, lr}
 800143a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800143e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001442:	4291      	cmp	r1, r2
 8001444:	d1f9      	bne.n	800143a <memcpy+0xe>
 8001446:	bd10      	pop	{r4, pc}

08001448 <memmove>:
 8001448:	4288      	cmp	r0, r1
 800144a:	b510      	push	{r4, lr}
 800144c:	eb01 0402 	add.w	r4, r1, r2
 8001450:	d902      	bls.n	8001458 <memmove+0x10>
 8001452:	4284      	cmp	r4, r0
 8001454:	4623      	mov	r3, r4
 8001456:	d807      	bhi.n	8001468 <memmove+0x20>
 8001458:	1e43      	subs	r3, r0, #1
 800145a:	42a1      	cmp	r1, r4
 800145c:	d008      	beq.n	8001470 <memmove+0x28>
 800145e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001462:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001466:	e7f8      	b.n	800145a <memmove+0x12>
 8001468:	4402      	add	r2, r0
 800146a:	4601      	mov	r1, r0
 800146c:	428a      	cmp	r2, r1
 800146e:	d100      	bne.n	8001472 <memmove+0x2a>
 8001470:	bd10      	pop	{r4, pc}
 8001472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800147a:	e7f7      	b.n	800146c <memmove+0x24>

0800147c <_free_r>:
 800147c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800147e:	2900      	cmp	r1, #0
 8001480:	d044      	beq.n	800150c <_free_r+0x90>
 8001482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001486:	9001      	str	r0, [sp, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f1a1 0404 	sub.w	r4, r1, #4
 800148e:	bfb8      	it	lt
 8001490:	18e4      	addlt	r4, r4, r3
 8001492:	f000 f913 	bl	80016bc <__malloc_lock>
 8001496:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <_free_r+0x94>)
 8001498:	9801      	ldr	r0, [sp, #4]
 800149a:	6813      	ldr	r3, [r2, #0]
 800149c:	b933      	cbnz	r3, 80014ac <_free_r+0x30>
 800149e:	6063      	str	r3, [r4, #4]
 80014a0:	6014      	str	r4, [r2, #0]
 80014a2:	b003      	add	sp, #12
 80014a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80014a8:	f000 b90e 	b.w	80016c8 <__malloc_unlock>
 80014ac:	42a3      	cmp	r3, r4
 80014ae:	d908      	bls.n	80014c2 <_free_r+0x46>
 80014b0:	6825      	ldr	r5, [r4, #0]
 80014b2:	1961      	adds	r1, r4, r5
 80014b4:	428b      	cmp	r3, r1
 80014b6:	bf01      	itttt	eq
 80014b8:	6819      	ldreq	r1, [r3, #0]
 80014ba:	685b      	ldreq	r3, [r3, #4]
 80014bc:	1949      	addeq	r1, r1, r5
 80014be:	6021      	streq	r1, [r4, #0]
 80014c0:	e7ed      	b.n	800149e <_free_r+0x22>
 80014c2:	461a      	mov	r2, r3
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	b10b      	cbz	r3, 80014cc <_free_r+0x50>
 80014c8:	42a3      	cmp	r3, r4
 80014ca:	d9fa      	bls.n	80014c2 <_free_r+0x46>
 80014cc:	6811      	ldr	r1, [r2, #0]
 80014ce:	1855      	adds	r5, r2, r1
 80014d0:	42a5      	cmp	r5, r4
 80014d2:	d10b      	bne.n	80014ec <_free_r+0x70>
 80014d4:	6824      	ldr	r4, [r4, #0]
 80014d6:	4421      	add	r1, r4
 80014d8:	1854      	adds	r4, r2, r1
 80014da:	42a3      	cmp	r3, r4
 80014dc:	6011      	str	r1, [r2, #0]
 80014de:	d1e0      	bne.n	80014a2 <_free_r+0x26>
 80014e0:	681c      	ldr	r4, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	6053      	str	r3, [r2, #4]
 80014e6:	4421      	add	r1, r4
 80014e8:	6011      	str	r1, [r2, #0]
 80014ea:	e7da      	b.n	80014a2 <_free_r+0x26>
 80014ec:	d902      	bls.n	80014f4 <_free_r+0x78>
 80014ee:	230c      	movs	r3, #12
 80014f0:	6003      	str	r3, [r0, #0]
 80014f2:	e7d6      	b.n	80014a2 <_free_r+0x26>
 80014f4:	6825      	ldr	r5, [r4, #0]
 80014f6:	1961      	adds	r1, r4, r5
 80014f8:	428b      	cmp	r3, r1
 80014fa:	bf04      	itt	eq
 80014fc:	6819      	ldreq	r1, [r3, #0]
 80014fe:	685b      	ldreq	r3, [r3, #4]
 8001500:	6063      	str	r3, [r4, #4]
 8001502:	bf04      	itt	eq
 8001504:	1949      	addeq	r1, r1, r5
 8001506:	6021      	streq	r1, [r4, #0]
 8001508:	6054      	str	r4, [r2, #4]
 800150a:	e7ca      	b.n	80014a2 <_free_r+0x26>
 800150c:	b003      	add	sp, #12
 800150e:	bd30      	pop	{r4, r5, pc}
 8001510:	2000009c 	.word	0x2000009c

08001514 <sbrk_aligned>:
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	4e0e      	ldr	r6, [pc, #56]	; (8001550 <sbrk_aligned+0x3c>)
 8001518:	460c      	mov	r4, r1
 800151a:	6831      	ldr	r1, [r6, #0]
 800151c:	4605      	mov	r5, r0
 800151e:	b911      	cbnz	r1, 8001526 <sbrk_aligned+0x12>
 8001520:	f000 f8bc 	bl	800169c <_sbrk_r>
 8001524:	6030      	str	r0, [r6, #0]
 8001526:	4621      	mov	r1, r4
 8001528:	4628      	mov	r0, r5
 800152a:	f000 f8b7 	bl	800169c <_sbrk_r>
 800152e:	1c43      	adds	r3, r0, #1
 8001530:	d00a      	beq.n	8001548 <sbrk_aligned+0x34>
 8001532:	1cc4      	adds	r4, r0, #3
 8001534:	f024 0403 	bic.w	r4, r4, #3
 8001538:	42a0      	cmp	r0, r4
 800153a:	d007      	beq.n	800154c <sbrk_aligned+0x38>
 800153c:	1a21      	subs	r1, r4, r0
 800153e:	4628      	mov	r0, r5
 8001540:	f000 f8ac 	bl	800169c <_sbrk_r>
 8001544:	3001      	adds	r0, #1
 8001546:	d101      	bne.n	800154c <sbrk_aligned+0x38>
 8001548:	f04f 34ff 	mov.w	r4, #4294967295
 800154c:	4620      	mov	r0, r4
 800154e:	bd70      	pop	{r4, r5, r6, pc}
 8001550:	200000a0 	.word	0x200000a0

08001554 <_malloc_r>:
 8001554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001558:	1ccd      	adds	r5, r1, #3
 800155a:	f025 0503 	bic.w	r5, r5, #3
 800155e:	3508      	adds	r5, #8
 8001560:	2d0c      	cmp	r5, #12
 8001562:	bf38      	it	cc
 8001564:	250c      	movcc	r5, #12
 8001566:	2d00      	cmp	r5, #0
 8001568:	4607      	mov	r7, r0
 800156a:	db01      	blt.n	8001570 <_malloc_r+0x1c>
 800156c:	42a9      	cmp	r1, r5
 800156e:	d905      	bls.n	800157c <_malloc_r+0x28>
 8001570:	230c      	movs	r3, #12
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	2600      	movs	r6, #0
 8001576:	4630      	mov	r0, r6
 8001578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800157c:	4e2e      	ldr	r6, [pc, #184]	; (8001638 <_malloc_r+0xe4>)
 800157e:	f000 f89d 	bl	80016bc <__malloc_lock>
 8001582:	6833      	ldr	r3, [r6, #0]
 8001584:	461c      	mov	r4, r3
 8001586:	bb34      	cbnz	r4, 80015d6 <_malloc_r+0x82>
 8001588:	4629      	mov	r1, r5
 800158a:	4638      	mov	r0, r7
 800158c:	f7ff ffc2 	bl	8001514 <sbrk_aligned>
 8001590:	1c43      	adds	r3, r0, #1
 8001592:	4604      	mov	r4, r0
 8001594:	d14d      	bne.n	8001632 <_malloc_r+0xde>
 8001596:	6834      	ldr	r4, [r6, #0]
 8001598:	4626      	mov	r6, r4
 800159a:	2e00      	cmp	r6, #0
 800159c:	d140      	bne.n	8001620 <_malloc_r+0xcc>
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	4631      	mov	r1, r6
 80015a2:	4638      	mov	r0, r7
 80015a4:	eb04 0803 	add.w	r8, r4, r3
 80015a8:	f000 f878 	bl	800169c <_sbrk_r>
 80015ac:	4580      	cmp	r8, r0
 80015ae:	d13a      	bne.n	8001626 <_malloc_r+0xd2>
 80015b0:	6821      	ldr	r1, [r4, #0]
 80015b2:	3503      	adds	r5, #3
 80015b4:	1a6d      	subs	r5, r5, r1
 80015b6:	f025 0503 	bic.w	r5, r5, #3
 80015ba:	3508      	adds	r5, #8
 80015bc:	2d0c      	cmp	r5, #12
 80015be:	bf38      	it	cc
 80015c0:	250c      	movcc	r5, #12
 80015c2:	4629      	mov	r1, r5
 80015c4:	4638      	mov	r0, r7
 80015c6:	f7ff ffa5 	bl	8001514 <sbrk_aligned>
 80015ca:	3001      	adds	r0, #1
 80015cc:	d02b      	beq.n	8001626 <_malloc_r+0xd2>
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	442b      	add	r3, r5
 80015d2:	6023      	str	r3, [r4, #0]
 80015d4:	e00e      	b.n	80015f4 <_malloc_r+0xa0>
 80015d6:	6822      	ldr	r2, [r4, #0]
 80015d8:	1b52      	subs	r2, r2, r5
 80015da:	d41e      	bmi.n	800161a <_malloc_r+0xc6>
 80015dc:	2a0b      	cmp	r2, #11
 80015de:	d916      	bls.n	800160e <_malloc_r+0xba>
 80015e0:	1961      	adds	r1, r4, r5
 80015e2:	42a3      	cmp	r3, r4
 80015e4:	6025      	str	r5, [r4, #0]
 80015e6:	bf18      	it	ne
 80015e8:	6059      	strne	r1, [r3, #4]
 80015ea:	6863      	ldr	r3, [r4, #4]
 80015ec:	bf08      	it	eq
 80015ee:	6031      	streq	r1, [r6, #0]
 80015f0:	5162      	str	r2, [r4, r5]
 80015f2:	604b      	str	r3, [r1, #4]
 80015f4:	4638      	mov	r0, r7
 80015f6:	f104 060b 	add.w	r6, r4, #11
 80015fa:	f000 f865 	bl	80016c8 <__malloc_unlock>
 80015fe:	f026 0607 	bic.w	r6, r6, #7
 8001602:	1d23      	adds	r3, r4, #4
 8001604:	1af2      	subs	r2, r6, r3
 8001606:	d0b6      	beq.n	8001576 <_malloc_r+0x22>
 8001608:	1b9b      	subs	r3, r3, r6
 800160a:	50a3      	str	r3, [r4, r2]
 800160c:	e7b3      	b.n	8001576 <_malloc_r+0x22>
 800160e:	6862      	ldr	r2, [r4, #4]
 8001610:	42a3      	cmp	r3, r4
 8001612:	bf0c      	ite	eq
 8001614:	6032      	streq	r2, [r6, #0]
 8001616:	605a      	strne	r2, [r3, #4]
 8001618:	e7ec      	b.n	80015f4 <_malloc_r+0xa0>
 800161a:	4623      	mov	r3, r4
 800161c:	6864      	ldr	r4, [r4, #4]
 800161e:	e7b2      	b.n	8001586 <_malloc_r+0x32>
 8001620:	4634      	mov	r4, r6
 8001622:	6876      	ldr	r6, [r6, #4]
 8001624:	e7b9      	b.n	800159a <_malloc_r+0x46>
 8001626:	230c      	movs	r3, #12
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	4638      	mov	r0, r7
 800162c:	f000 f84c 	bl	80016c8 <__malloc_unlock>
 8001630:	e7a1      	b.n	8001576 <_malloc_r+0x22>
 8001632:	6025      	str	r5, [r4, #0]
 8001634:	e7de      	b.n	80015f4 <_malloc_r+0xa0>
 8001636:	bf00      	nop
 8001638:	2000009c 	.word	0x2000009c

0800163c <_realloc_r>:
 800163c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001640:	4680      	mov	r8, r0
 8001642:	4614      	mov	r4, r2
 8001644:	460e      	mov	r6, r1
 8001646:	b921      	cbnz	r1, 8001652 <_realloc_r+0x16>
 8001648:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800164c:	4611      	mov	r1, r2
 800164e:	f7ff bf81 	b.w	8001554 <_malloc_r>
 8001652:	b92a      	cbnz	r2, 8001660 <_realloc_r+0x24>
 8001654:	f7ff ff12 	bl	800147c <_free_r>
 8001658:	4625      	mov	r5, r4
 800165a:	4628      	mov	r0, r5
 800165c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001660:	f000 f838 	bl	80016d4 <_malloc_usable_size_r>
 8001664:	4284      	cmp	r4, r0
 8001666:	4607      	mov	r7, r0
 8001668:	d802      	bhi.n	8001670 <_realloc_r+0x34>
 800166a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800166e:	d812      	bhi.n	8001696 <_realloc_r+0x5a>
 8001670:	4621      	mov	r1, r4
 8001672:	4640      	mov	r0, r8
 8001674:	f7ff ff6e 	bl	8001554 <_malloc_r>
 8001678:	4605      	mov	r5, r0
 800167a:	2800      	cmp	r0, #0
 800167c:	d0ed      	beq.n	800165a <_realloc_r+0x1e>
 800167e:	42bc      	cmp	r4, r7
 8001680:	4622      	mov	r2, r4
 8001682:	4631      	mov	r1, r6
 8001684:	bf28      	it	cs
 8001686:	463a      	movcs	r2, r7
 8001688:	f7ff fed0 	bl	800142c <memcpy>
 800168c:	4631      	mov	r1, r6
 800168e:	4640      	mov	r0, r8
 8001690:	f7ff fef4 	bl	800147c <_free_r>
 8001694:	e7e1      	b.n	800165a <_realloc_r+0x1e>
 8001696:	4635      	mov	r5, r6
 8001698:	e7df      	b.n	800165a <_realloc_r+0x1e>
	...

0800169c <_sbrk_r>:
 800169c:	b538      	push	{r3, r4, r5, lr}
 800169e:	4d06      	ldr	r5, [pc, #24]	; (80016b8 <_sbrk_r+0x1c>)
 80016a0:	2300      	movs	r3, #0
 80016a2:	4604      	mov	r4, r0
 80016a4:	4608      	mov	r0, r1
 80016a6:	602b      	str	r3, [r5, #0]
 80016a8:	f7fe fe9c 	bl	80003e4 <_sbrk>
 80016ac:	1c43      	adds	r3, r0, #1
 80016ae:	d102      	bne.n	80016b6 <_sbrk_r+0x1a>
 80016b0:	682b      	ldr	r3, [r5, #0]
 80016b2:	b103      	cbz	r3, 80016b6 <_sbrk_r+0x1a>
 80016b4:	6023      	str	r3, [r4, #0]
 80016b6:	bd38      	pop	{r3, r4, r5, pc}
 80016b8:	200000a4 	.word	0x200000a4

080016bc <__malloc_lock>:
 80016bc:	4801      	ldr	r0, [pc, #4]	; (80016c4 <__malloc_lock+0x8>)
 80016be:	f000 b811 	b.w	80016e4 <__retarget_lock_acquire_recursive>
 80016c2:	bf00      	nop
 80016c4:	200000a8 	.word	0x200000a8

080016c8 <__malloc_unlock>:
 80016c8:	4801      	ldr	r0, [pc, #4]	; (80016d0 <__malloc_unlock+0x8>)
 80016ca:	f000 b80c 	b.w	80016e6 <__retarget_lock_release_recursive>
 80016ce:	bf00      	nop
 80016d0:	200000a8 	.word	0x200000a8

080016d4 <_malloc_usable_size_r>:
 80016d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016d8:	1f18      	subs	r0, r3, #4
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bfbc      	itt	lt
 80016de:	580b      	ldrlt	r3, [r1, r0]
 80016e0:	18c0      	addlt	r0, r0, r3
 80016e2:	4770      	bx	lr

080016e4 <__retarget_lock_acquire_recursive>:
 80016e4:	4770      	bx	lr

080016e6 <__retarget_lock_release_recursive>:
 80016e6:	4770      	bx	lr

080016e8 <_init>:
 80016e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ea:	bf00      	nop
 80016ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ee:	bc08      	pop	{r3}
 80016f0:	469e      	mov	lr, r3
 80016f2:	4770      	bx	lr

080016f4 <_fini>:
 80016f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f6:	bf00      	nop
 80016f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016fa:	bc08      	pop	{r3}
 80016fc:	469e      	mov	lr, r3
 80016fe:	4770      	bx	lr
