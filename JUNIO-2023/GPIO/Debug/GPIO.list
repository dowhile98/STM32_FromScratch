
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000027c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000424  0800042c  0001042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000424  08000424  0001042c  2**0
                  CONTENTS
  4 .ARM          00000000  08000424  08000424  0001042c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000424  0800042c  0001042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001042c  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001042c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c7e  00000000  00000000  0001045c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000030d  00000000  00000000  000110da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  000113e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000068  00000000  00000000  00011478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019062  00000000  00000000  000114e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000dee  00000000  00000000  0002a542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c33e  00000000  00000000  0002b330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b766e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000014c  00000000  00000000  000b76c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800040c 	.word	0x0800040c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800040c 	.word	0x0800040c

080001e8 <main>:
bool BSP_PinRead(GPIO_TypeDef *P, GPIO_Pin_t pin);

void BSP_PinWrite(GPIO_TypeDef *P, GPIO_Pin_t pin, GPIO_PinState_t val);
/*main function -----------------------------------------------*/
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	//habilitar el reloj
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIODEN;
 80001ec:	4b39      	ldr	r3, [pc, #228]	; (80002d4 <main+0xec>)
 80001ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f0:	4a38      	ldr	r2, [pc, #224]	; (80002d4 <main+0xec>)
 80001f2:	f043 0309 	orr.w	r3, r3, #9
 80001f6:	6313      	str	r3, [r2, #48]	; 0x30
	/**
	 * PA0 -> ENTRADA
	 */
	//GPIOA->MODER = GPIOA->MODER & ~(0x1U);
	GPIOA->MODER &=~ GPIO_MODER_MODE0;		//00 -> input
 80001f8:	4b37      	ldr	r3, [pc, #220]	; (80002d8 <main+0xf0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a36      	ldr	r2, [pc, #216]	; (80002d8 <main+0xf0>)
 80001fe:	f023 0303 	bic.w	r3, r3, #3
 8000202:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &=~ GPIO_PUPDR_PUPD0;		//00 -> no pull up /down
 8000204:	4b34      	ldr	r3, [pc, #208]	; (80002d8 <main+0xf0>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	4a33      	ldr	r2, [pc, #204]	; (80002d8 <main+0xf0>)
 800020a:	f023 0303 	bic.w	r3, r3, #3
 800020e:	60d3      	str	r3, [r2, #12]
	/**
	 * PD12-PD15 ->salida de proposito general
	 */				//0x3<<24
	GPIOD->MODER &=~ (GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 | GPIO_MODER_MODE15);
 8000210:	4b32      	ldr	r3, [pc, #200]	; (80002dc <main+0xf4>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a31      	ldr	r2, [pc, #196]	; (80002dc <main+0xf4>)
 8000216:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800021a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE12_0;	//01 -> salida de proposito general
 800021c:	4b2f      	ldr	r3, [pc, #188]	; (80002dc <main+0xf4>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a2e      	ldr	r2, [pc, #184]	; (80002dc <main+0xf4>)
 8000222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000226:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE13_0;
 8000228:	4b2c      	ldr	r3, [pc, #176]	; (80002dc <main+0xf4>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a2b      	ldr	r2, [pc, #172]	; (80002dc <main+0xf4>)
 800022e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000232:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE14_0;
 8000234:	4b29      	ldr	r3, [pc, #164]	; (80002dc <main+0xf4>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a28      	ldr	r2, [pc, #160]	; (80002dc <main+0xf4>)
 800023a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800023e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE15_0;
 8000240:	4b26      	ldr	r3, [pc, #152]	; (80002dc <main+0xf4>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a25      	ldr	r2, [pc, #148]	; (80002dc <main+0xf4>)
 8000246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800024a:	6013      	str	r3, [r2, #0]

	GPIOD->OTYPER &=~(GPIO_OTYPER_OT12 | GPIO_OTYPER_OT13 | GPIO_OTYPER_OT14 | GPIO_OTYPER_OT15); //PUSH PULL
 800024c:	4b23      	ldr	r3, [pc, #140]	; (80002dc <main+0xf4>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a22      	ldr	r2, [pc, #136]	; (80002dc <main+0xf4>)
 8000252:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000256:	6053      	str	r3, [r2, #4]

	GPIOD->OSPEEDR &=~ GPIO_OSPEEDER_OSPEEDR12; //00 -> LOW ESPEED
 8000258:	4b20      	ldr	r3, [pc, #128]	; (80002dc <main+0xf4>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	4a1f      	ldr	r2, [pc, #124]	; (80002dc <main+0xf4>)
 800025e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000262:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12;	//11 -> VERY HIGH SPEED
 8000264:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <main+0xf4>)
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	4a1c      	ldr	r2, [pc, #112]	; (80002dc <main+0xf4>)
 800026a:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800026e:	6093      	str	r3, [r2, #8]

	GPIOD->ODR |= 1<<12 | 1<<13 | GPIO_ODR_OD14 ;
 8000270:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <main+0xf4>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a19      	ldr	r2, [pc, #100]	; (80002dc <main+0xf4>)
 8000276:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800027a:	6153      	str	r3, [r2, #20]

	GPIOD->ODR &=~ (1<<14);
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <main+0xf4>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a16      	ldr	r2, [pc, #88]	; (80002dc <main+0xf4>)
 8000282:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000286:	6153      	str	r3, [r2, #20]

	GPIOD->BSRR |= GPIO_BSRR_BS15;
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <main+0xf4>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a13      	ldr	r2, [pc, #76]	; (80002dc <main+0xf4>)
 800028e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000292:	6193      	str	r3, [r2, #24]

	GPIOD->BSRR |= GPIO_BSRR_BR15;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <main+0xf4>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a10      	ldr	r2, [pc, #64]	; (80002dc <main+0xf4>)
 800029a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800029e:	6193      	str	r3, [r2, #24]

	input = (GPIOA->IDR & GPIO_IDR_ID0)>>10;
 80002a0:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <main+0xf0>)
 80002a2:	691b      	ldr	r3, [r3, #16]
 80002a4:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <main+0xf8>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
    /* Loop forever */
	for(;;){
		if(BSP_PinRead(GPIOA, GPIO_PIN_0)){
 80002aa:	2101      	movs	r1, #1
 80002ac:	480a      	ldr	r0, [pc, #40]	; (80002d8 <main+0xf0>)
 80002ae:	f000 f819 	bl	80002e4 <BSP_PinRead>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d006      	beq.n	80002c6 <main+0xde>
			//GPIOD->BSRR |= GPIO_BSRR_BS12;
			BSP_PinWrite(GPIOD, (GPIO_PIN_12 | GPIO_PIN_13), GPIO_PIN_SET);
 80002b8:	2201      	movs	r2, #1
 80002ba:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80002be:	4807      	ldr	r0, [pc, #28]	; (80002dc <main+0xf4>)
 80002c0:	f000 f825 	bl	800030e <BSP_PinWrite>
 80002c4:	e7f1      	b.n	80002aa <main+0xc2>
		}else{
			//GPIOD->BSRR |= GPIO_BSRR_BR12;
			BSP_PinWrite(GPIOD, (GPIO_PIN_12 | GPIO_PIN_13), GPIO_PIN_RESET);
 80002c6:	2200      	movs	r2, #0
 80002c8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <main+0xf4>)
 80002ce:	f000 f81e 	bl	800030e <BSP_PinWrite>
		if(BSP_PinRead(GPIOA, GPIO_PIN_0)){
 80002d2:	e7ea      	b.n	80002aa <main+0xc2>
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40020c00 	.word	0x40020c00
 80002e0:	2000001c 	.word	0x2000001c

080002e4 <BSP_PinRead>:
		}
	}
}
/*Function definition -----------------------------------------*/
bool BSP_PinRead(GPIO_TypeDef *P, GPIO_Pin_t pin){
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	807b      	strh	r3, [r7, #2]
	if(P->IDR & pin){
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	691a      	ldr	r2, [r3, #16]
 80002f4:	887b      	ldrh	r3, [r7, #2]
 80002f6:	4013      	ands	r3, r2
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <BSP_PinRead+0x1c>
		return true;
 80002fc:	2301      	movs	r3, #1
 80002fe:	e000      	b.n	8000302 <BSP_PinRead+0x1e>
	}
	return false;
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <BSP_PinWrite>:
void BSP_PinWrite(GPIO_TypeDef *P, GPIO_Pin_t pin, GPIO_PinState_t val){
 800030e:	b480      	push	{r7}
 8000310:	b083      	sub	sp, #12
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
 8000316:	460b      	mov	r3, r1
 8000318:	807b      	strh	r3, [r7, #2]
 800031a:	4613      	mov	r3, r2
 800031c:	707b      	strb	r3, [r7, #1]
	if(val == GPIO_PIN_SET){
 800031e:	787b      	ldrb	r3, [r7, #1]
 8000320:	2b01      	cmp	r3, #1
 8000322:	d106      	bne.n	8000332 <BSP_PinWrite+0x24>
		P->BSRR |= pin;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	699a      	ldr	r2, [r3, #24]
 8000328:	887b      	ldrh	r3, [r7, #2]
 800032a:	431a      	orrs	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	619a      	str	r2, [r3, #24]
	}else{
		P->BSRR |= pin<<16;
	}
}
 8000330:	e006      	b.n	8000340 <BSP_PinWrite+0x32>
		P->BSRR |= pin<<16;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	887a      	ldrh	r2, [r7, #2]
 8000338:	0412      	lsls	r2, r2, #16
 800033a:	431a      	orrs	r2, r3
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	619a      	str	r2, [r3, #24]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <SystemInit+0x20>)
 8000352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000356:	4a05      	ldr	r2, [pc, #20]	; (800036c <SystemInit+0x20>)
 8000358:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800035c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000370:	480d      	ldr	r0, [pc, #52]	; (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000372:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000374:	f7ff ffea 	bl	800034c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	; (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	; (80003bc <LoopForever+0x16>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 f811 	bl	80003c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff ff21 	bl	80001e8 <main>

080003a6 <LoopForever>:

LoopForever:
  b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b4:	0800042c 	.word	0x0800042c
  ldr r2, =_sbss
 80003b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003bc:	20000020 	.word	0x20000020

080003c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC_IRQHandler>
	...

080003c4 <__libc_init_array>:
 80003c4:	b570      	push	{r4, r5, r6, lr}
 80003c6:	4d0d      	ldr	r5, [pc, #52]	; (80003fc <__libc_init_array+0x38>)
 80003c8:	4c0d      	ldr	r4, [pc, #52]	; (8000400 <__libc_init_array+0x3c>)
 80003ca:	1b64      	subs	r4, r4, r5
 80003cc:	10a4      	asrs	r4, r4, #2
 80003ce:	2600      	movs	r6, #0
 80003d0:	42a6      	cmp	r6, r4
 80003d2:	d109      	bne.n	80003e8 <__libc_init_array+0x24>
 80003d4:	4d0b      	ldr	r5, [pc, #44]	; (8000404 <__libc_init_array+0x40>)
 80003d6:	4c0c      	ldr	r4, [pc, #48]	; (8000408 <__libc_init_array+0x44>)
 80003d8:	f000 f818 	bl	800040c <_init>
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	10a4      	asrs	r4, r4, #2
 80003e0:	2600      	movs	r6, #0
 80003e2:	42a6      	cmp	r6, r4
 80003e4:	d105      	bne.n	80003f2 <__libc_init_array+0x2e>
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ec:	4798      	blx	r3
 80003ee:	3601      	adds	r6, #1
 80003f0:	e7ee      	b.n	80003d0 <__libc_init_array+0xc>
 80003f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f6:	4798      	blx	r3
 80003f8:	3601      	adds	r6, #1
 80003fa:	e7f2      	b.n	80003e2 <__libc_init_array+0x1e>
 80003fc:	08000424 	.word	0x08000424
 8000400:	08000424 	.word	0x08000424
 8000404:	08000424 	.word	0x08000424
 8000408:	08000428 	.word	0x08000428

0800040c <_init>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr

08000418 <_fini>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr
