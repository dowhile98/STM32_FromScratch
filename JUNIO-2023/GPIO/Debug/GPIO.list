
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000408  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005b0  080005b8  000105b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005b0  080005b0  000105b8  2**0
                  CONTENTS
  4 .ARM          00000000  080005b0  080005b0  000105b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005b0  080005b8  000105b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b0  080005b0  000105b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005b4  080005b4  000105b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000105b8  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000105b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e15  00000000  00000000  000105e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000344  00000000  00000000  000113fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00011748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000070  00000000  00000000  000117e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019068  00000000  00000000  00011850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000efa  00000000  00000000  0002a8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c491  00000000  00000000  0002b7b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b7c43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000178  00000000  00000000  000b7c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000598 	.word	0x08000598

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000598 	.word	0x08000598

080001e8 <main>:
void BSP_PinWrite(GPIO_TypeDef *P, GPIO_Pin_t pin, GPIO_PinState_t val);

void BSP_PinInit(GPIO_TypeDef *P,GPIO_ConfigTypedef_t *config);
/*main function -----------------------------------------------*/
int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0
	GPIO_ConfigTypedef_t gpio = {0};
 80001ee:	463b      	mov	r3, r7
 80001f0:	2200      	movs	r2, #0
 80001f2:	601a      	str	r2, [r3, #0]
 80001f4:	605a      	str	r2, [r3, #4]
	//habilitar el reloj
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIODEN;
 80001f6:	4b47      	ldr	r3, [pc, #284]	; (8000314 <main+0x12c>)
 80001f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fa:	4a46      	ldr	r2, [pc, #280]	; (8000314 <main+0x12c>)
 80001fc:	f043 0309 	orr.w	r3, r3, #9
 8000200:	6313      	str	r3, [r2, #48]	; 0x30
	/**
	 * PA0 -> ENTRADA
	 */
	//GPIOA->MODER = GPIOA->MODER & ~(0x1U);
	GPIOA->MODER &=~ GPIO_MODER_MODE0;		//00 -> input
 8000202:	4b45      	ldr	r3, [pc, #276]	; (8000318 <main+0x130>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	4a44      	ldr	r2, [pc, #272]	; (8000318 <main+0x130>)
 8000208:	f023 0303 	bic.w	r3, r3, #3
 800020c:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &=~ GPIO_PUPDR_PUPD0;		//00 -> no pull up /down
 800020e:	4b42      	ldr	r3, [pc, #264]	; (8000318 <main+0x130>)
 8000210:	68db      	ldr	r3, [r3, #12]
 8000212:	4a41      	ldr	r2, [pc, #260]	; (8000318 <main+0x130>)
 8000214:	f023 0303 	bic.w	r3, r3, #3
 8000218:	60d3      	str	r3, [r2, #12]
	/**
	 * PD12-PD15 ->salida de proposito general
	 */				//0x3<<24
	GPIOD->MODER &=~ (GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 | GPIO_MODER_MODE15);
 800021a:	4b40      	ldr	r3, [pc, #256]	; (800031c <main+0x134>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a3f      	ldr	r2, [pc, #252]	; (800031c <main+0x134>)
 8000220:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000224:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE12_0;	//01 -> salida de proposito general
 8000226:	4b3d      	ldr	r3, [pc, #244]	; (800031c <main+0x134>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a3c      	ldr	r2, [pc, #240]	; (800031c <main+0x134>)
 800022c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000230:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE13_0;
 8000232:	4b3a      	ldr	r3, [pc, #232]	; (800031c <main+0x134>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a39      	ldr	r2, [pc, #228]	; (800031c <main+0x134>)
 8000238:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800023c:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE14_0;
 800023e:	4b37      	ldr	r3, [pc, #220]	; (800031c <main+0x134>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a36      	ldr	r2, [pc, #216]	; (800031c <main+0x134>)
 8000244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000248:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE15_0;
 800024a:	4b34      	ldr	r3, [pc, #208]	; (800031c <main+0x134>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a33      	ldr	r2, [pc, #204]	; (800031c <main+0x134>)
 8000250:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000254:	6013      	str	r3, [r2, #0]

	GPIOD->OTYPER &=~(GPIO_OTYPER_OT12 | GPIO_OTYPER_OT13 | GPIO_OTYPER_OT14 | GPIO_OTYPER_OT15); //PUSH PULL
 8000256:	4b31      	ldr	r3, [pc, #196]	; (800031c <main+0x134>)
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	4a30      	ldr	r2, [pc, #192]	; (800031c <main+0x134>)
 800025c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000260:	6053      	str	r3, [r2, #4]

	GPIOD->OSPEEDR &=~ GPIO_OSPEEDER_OSPEEDR12; //00 -> LOW ESPEED
 8000262:	4b2e      	ldr	r3, [pc, #184]	; (800031c <main+0x134>)
 8000264:	689b      	ldr	r3, [r3, #8]
 8000266:	4a2d      	ldr	r2, [pc, #180]	; (800031c <main+0x134>)
 8000268:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800026c:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12;	//11 -> VERY HIGH SPEED
 800026e:	4b2b      	ldr	r3, [pc, #172]	; (800031c <main+0x134>)
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	4a2a      	ldr	r2, [pc, #168]	; (800031c <main+0x134>)
 8000274:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000278:	6093      	str	r3, [r2, #8]

	GPIOD->ODR |= 1<<12 | 1<<13 | GPIO_ODR_OD14 ;
 800027a:	4b28      	ldr	r3, [pc, #160]	; (800031c <main+0x134>)
 800027c:	695b      	ldr	r3, [r3, #20]
 800027e:	4a27      	ldr	r2, [pc, #156]	; (800031c <main+0x134>)
 8000280:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000284:	6153      	str	r3, [r2, #20]

	GPIOD->ODR &=~ (1<<14);
 8000286:	4b25      	ldr	r3, [pc, #148]	; (800031c <main+0x134>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a24      	ldr	r2, [pc, #144]	; (800031c <main+0x134>)
 800028c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000290:	6153      	str	r3, [r2, #20]

	GPIOD->BSRR |= GPIO_BSRR_BS15;
 8000292:	4b22      	ldr	r3, [pc, #136]	; (800031c <main+0x134>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	4a21      	ldr	r2, [pc, #132]	; (800031c <main+0x134>)
 8000298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800029c:	6193      	str	r3, [r2, #24]

	GPIOD->BSRR |= GPIO_BSRR_BR15;
 800029e:	4b1f      	ldr	r3, [pc, #124]	; (800031c <main+0x134>)
 80002a0:	699b      	ldr	r3, [r3, #24]
 80002a2:	4a1e      	ldr	r2, [pc, #120]	; (800031c <main+0x134>)
 80002a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80002a8:	6193      	str	r3, [r2, #24]

	input = (GPIOA->IDR & GPIO_IDR_ID0)>>10;
 80002aa:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <main+0x130>)
 80002ac:	691b      	ldr	r3, [r3, #16]
 80002ae:	4b1c      	ldr	r3, [pc, #112]	; (8000320 <main+0x138>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]

	//PD9 ->salida
	gpio.pin = GPIO_PIN_9 | GPIO_PIN_5;
 80002b4:	f44f 7308 	mov.w	r3, #544	; 0x220
 80002b8:	803b      	strh	r3, [r7, #0]
	gpio.mode = GPIO_MODE_OUTPUT;
 80002ba:	2301      	movs	r3, #1
 80002bc:	70bb      	strb	r3, [r7, #2]
	gpio.outputType = GPIO_OT_PP;
 80002be:	2300      	movs	r3, #0
 80002c0:	70fb      	strb	r3, [r7, #3]
	gpio.speed = GPIO_SPEED_MEDIUM;
 80002c2:	2301      	movs	r3, #1
 80002c4:	713b      	strb	r3, [r7, #4]
	gpio.pullup = GPIO_PU_NONE;
 80002c6:	2300      	movs	r3, #0
 80002c8:	717b      	strb	r3, [r7, #5]
	BSP_PinInit(GPIOD, &gpio);
 80002ca:	463b      	mov	r3, r7
 80002cc:	4619      	mov	r1, r3
 80002ce:	4813      	ldr	r0, [pc, #76]	; (800031c <main+0x134>)
 80002d0:	f000 f85c 	bl	800038c <BSP_PinInit>

	gpio.pin = GPIO_PIN_1 | GPIO_PIN_3;
 80002d4:	230a      	movs	r3, #10
 80002d6:	803b      	strh	r3, [r7, #0]
	gpio.mode = GPIO_MODE_INPUT;
 80002d8:	2300      	movs	r3, #0
 80002da:	70bb      	strb	r3, [r7, #2]
	gpio.pullup = GPIO_PU;
 80002dc:	2301      	movs	r3, #1
 80002de:	717b      	strb	r3, [r7, #5]
	BSP_PinInit(GPIOA, &gpio);
 80002e0:	463b      	mov	r3, r7
 80002e2:	4619      	mov	r1, r3
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <main+0x130>)
 80002e6:	f000 f851 	bl	800038c <BSP_PinInit>
    /* Loop forever */
	for(;;){
		if(BSP_PinRead(GPIOA, GPIO_PIN_0)){
 80002ea:	2101      	movs	r1, #1
 80002ec:	480a      	ldr	r0, [pc, #40]	; (8000318 <main+0x130>)
 80002ee:	f000 f819 	bl	8000324 <BSP_PinRead>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d006      	beq.n	8000306 <main+0x11e>
			BSP_PinWrite(GPIOD, (GPIO_PIN_12 | GPIO_PIN_13), GPIO_PIN_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80002fe:	4807      	ldr	r0, [pc, #28]	; (800031c <main+0x134>)
 8000300:	f000 f825 	bl	800034e <BSP_PinWrite>
 8000304:	e7f1      	b.n	80002ea <main+0x102>
		}else{
			//GPIOD->BSRR |= GPIO_BSRR_BR12;
			BSP_PinWrite(GPIOD, (GPIO_PIN_12 | GPIO_PIN_13), GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800030c:	4803      	ldr	r0, [pc, #12]	; (800031c <main+0x134>)
 800030e:	f000 f81e 	bl	800034e <BSP_PinWrite>
		if(BSP_PinRead(GPIOA, GPIO_PIN_0)){
 8000312:	e7ea      	b.n	80002ea <main+0x102>
 8000314:	40023800 	.word	0x40023800
 8000318:	40020000 	.word	0x40020000
 800031c:	40020c00 	.word	0x40020c00
 8000320:	2000001c 	.word	0x2000001c

08000324 <BSP_PinRead>:
		}
	}
}
/*Function definition -----------------------------------------*/
bool BSP_PinRead(GPIO_TypeDef *P, GPIO_Pin_t pin){
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	807b      	strh	r3, [r7, #2]
	if(P->IDR & pin){
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	691a      	ldr	r2, [r3, #16]
 8000334:	887b      	ldrh	r3, [r7, #2]
 8000336:	4013      	ands	r3, r2
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <BSP_PinRead+0x1c>
		return true;
 800033c:	2301      	movs	r3, #1
 800033e:	e000      	b.n	8000342 <BSP_PinRead+0x1e>
	}
	return false;
 8000340:	2300      	movs	r3, #0
}
 8000342:	4618      	mov	r0, r3
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <BSP_PinWrite>:
void BSP_PinWrite(GPIO_TypeDef *P, GPIO_Pin_t pin, GPIO_PinState_t val){
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	460b      	mov	r3, r1
 8000358:	807b      	strh	r3, [r7, #2]
 800035a:	4613      	mov	r3, r2
 800035c:	707b      	strb	r3, [r7, #1]
	if(val == GPIO_PIN_SET){
 800035e:	787b      	ldrb	r3, [r7, #1]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d106      	bne.n	8000372 <BSP_PinWrite+0x24>
		P->BSRR |= pin;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	699a      	ldr	r2, [r3, #24]
 8000368:	887b      	ldrh	r3, [r7, #2]
 800036a:	431a      	orrs	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	619a      	str	r2, [r3, #24]
	}else{
		P->BSRR |= pin<<16;
	}
}
 8000370:	e006      	b.n	8000380 <BSP_PinWrite+0x32>
		P->BSRR |= pin<<16;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	887a      	ldrh	r2, [r7, #2]
 8000378:	0412      	lsls	r2, r2, #16
 800037a:	431a      	orrs	r2, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	619a      	str	r2, [r3, #24]
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr

0800038c <BSP_PinInit>:

void BSP_PinInit(GPIO_TypeDef *P,GPIO_ConfigTypedef_t *config){
 800038c:	b480      	push	{r7}
 800038e:	b087      	sub	sp, #28
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
	uint32_t iocurrent = 0x00U;
 800039a:	2300      	movs	r3, #0
 800039c:	60fb      	str	r3, [r7, #12]

	for(position = 0; position <16; position++){
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]
 80003a2:	e08e      	b.n	80004c2 <BSP_PinInit+0x136>
		ioposition = 0x1U<<position;
 80003a4:	2201      	movs	r2, #1
 80003a6:	697b      	ldr	r3, [r7, #20]
 80003a8:	fa02 f303 	lsl.w	r3, r2, r3
 80003ac:	613b      	str	r3, [r7, #16]

		iocurrent = (uint32_t)(config->pin) & ioposition;
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	881b      	ldrh	r3, [r3, #0]
 80003b2:	461a      	mov	r2, r3
 80003b4:	693b      	ldr	r3, [r7, #16]
 80003b6:	4013      	ands	r3, r2
 80003b8:	60fb      	str	r3, [r7, #12]

		if(iocurrent == ioposition){
 80003ba:	68fa      	ldr	r2, [r7, #12]
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	429a      	cmp	r2, r3
 80003c0:	d17c      	bne.n	80004bc <BSP_PinInit+0x130>
			//Modo
			if(((config->mode & GPIO_MODE) == GPIO_MODE_OUTPUT) || ((config->mode & GPIO_MODE) == GPIO_MODE_AF)){
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	789b      	ldrb	r3, [r3, #2]
 80003c6:	f003 0303 	and.w	r3, r3, #3
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d005      	beq.n	80003da <BSP_PinInit+0x4e>
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	789b      	ldrb	r3, [r3, #2]
 80003d2:	f003 0303 	and.w	r3, r3, #3
 80003d6:	2b02      	cmp	r3, #2
 80003d8:	d12b      	bne.n	8000432 <BSP_PinInit+0xa6>
				//io speed
				P->OSPEEDR &=~(0x3<<(position * 2));
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	689b      	ldr	r3, [r3, #8]
 80003de:	697a      	ldr	r2, [r7, #20]
 80003e0:	0052      	lsls	r2, r2, #1
 80003e2:	2103      	movs	r1, #3
 80003e4:	fa01 f202 	lsl.w	r2, r1, r2
 80003e8:	43d2      	mvns	r2, r2
 80003ea:	401a      	ands	r2, r3
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	609a      	str	r2, [r3, #8]
				P->OSPEEDR |= config->speed<< (position * 2);
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	683a      	ldr	r2, [r7, #0]
 80003f6:	7912      	ldrb	r2, [r2, #4]
 80003f8:	4611      	mov	r1, r2
 80003fa:	697a      	ldr	r2, [r7, #20]
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000402:	431a      	orrs	r2, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	609a      	str	r2, [r3, #8]
				//io type
				P->OTYPER &=~ (1<<(position ));
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	2101      	movs	r1, #1
 800040e:	697a      	ldr	r2, [r7, #20]
 8000410:	fa01 f202 	lsl.w	r2, r1, r2
 8000414:	43d2      	mvns	r2, r2
 8000416:	401a      	ands	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	605a      	str	r2, [r3, #4]
				P->OTYPER |= config->outputType<<position;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	683a      	ldr	r2, [r7, #0]
 8000422:	78d2      	ldrb	r2, [r2, #3]
 8000424:	4611      	mov	r1, r2
 8000426:	697a      	ldr	r2, [r7, #20]
 8000428:	fa01 f202 	lsl.w	r2, r1, r2
 800042c:	431a      	orrs	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	605a      	str	r2, [r3, #4]
			}
			if((config->mode & GPIO_MODE) != GPIO_MODE_ANALOG){
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	789b      	ldrb	r3, [r3, #2]
 8000436:	f003 0303 	and.w	r3, r3, #3
 800043a:	2b03      	cmp	r3, #3
 800043c:	d016      	beq.n	800046c <BSP_PinInit+0xe0>
				P->PUPDR &=~ (0x3U<< (position * 2));
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	68da      	ldr	r2, [r3, #12]
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	2103      	movs	r1, #3
 8000448:	fa01 f303 	lsl.w	r3, r1, r3
 800044c:	43db      	mvns	r3, r3
 800044e:	401a      	ands	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	60da      	str	r2, [r3, #12]
				P->PUPDR |= config->pullup<< (position * 2);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	683a      	ldr	r2, [r7, #0]
 800045a:	7952      	ldrb	r2, [r2, #5]
 800045c:	4611      	mov	r1, r2
 800045e:	697a      	ldr	r2, [r7, #20]
 8000460:	0052      	lsls	r2, r2, #1
 8000462:	fa01 f202 	lsl.w	r2, r1, r2
 8000466:	431a      	orrs	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	60da      	str	r2, [r3, #12]
			}
			if((config->mode & GPIO_MODE)  == GPIO_MODE_AF){
				//update actualizarse en una segunda version

			}
			if((config->mode &GPIO_MODE) == GPIO_MODE_ANALOG){
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	789b      	ldrb	r3, [r3, #2]
 8000470:	f003 0303 	and.w	r3, r3, #3
 8000474:	2b03      	cmp	r3, #3
 8000476:	d10a      	bne.n	800048e <BSP_PinInit+0x102>
				P->PUPDR &=~ (0x3U<<(2 *position));
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	68da      	ldr	r2, [r3, #12]
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	2103      	movs	r1, #3
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	43db      	mvns	r3, r3
 8000488:	401a      	ands	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	60da      	str	r2, [r3, #12]
			}
			P->MODER &=~ (0x3u<<(position * 2));
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	697b      	ldr	r3, [r7, #20]
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	2103      	movs	r1, #3
 8000498:	fa01 f303 	lsl.w	r3, r1, r3
 800049c:	43db      	mvns	r3, r3
 800049e:	401a      	ands	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	601a      	str	r2, [r3, #0]
			P->MODER |= config->mode << (position * 2);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	7892      	ldrb	r2, [r2, #2]
 80004ac:	4611      	mov	r1, r2
 80004ae:	697a      	ldr	r2, [r7, #20]
 80004b0:	0052      	lsls	r2, r2, #1
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	431a      	orrs	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	601a      	str	r2, [r3, #0]
	for(position = 0; position <16; position++){
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	3301      	adds	r3, #1
 80004c0:	617b      	str	r3, [r7, #20]
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	2b0f      	cmp	r3, #15
 80004c6:	f67f af6d 	bls.w	80003a4 <BSP_PinInit+0x18>
		}
	}
	return;
 80004ca:	bf00      	nop
}
 80004cc:	371c      	adds	r7, #28
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
	...

080004d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <SystemInit+0x20>)
 80004de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004e2:	4a05      	ldr	r2, [pc, #20]	; (80004f8 <SystemInit+0x20>)
 80004e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	e000ed00 	.word	0xe000ed00

080004fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000500:	f7ff ffea 	bl	80004d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <LoopForever+0x6>)
  ldr r1, =_edata
 8000506:	490d      	ldr	r1, [pc, #52]	; (800053c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <LoopForever+0xe>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800051c:	4c0a      	ldr	r4, [pc, #40]	; (8000548 <LoopForever+0x16>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800052a:	f000 f811 	bl	8000550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff fe5b 	bl	80001e8 <main>

08000532 <LoopForever>:

LoopForever:
  b LoopForever
 8000532:	e7fe      	b.n	8000532 <LoopForever>
  ldr   r0, =_estack
 8000534:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000540:	080005b8 	.word	0x080005b8
  ldr r2, =_sbss
 8000544:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000548:	20000020 	.word	0x20000020

0800054c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC_IRQHandler>
	...

08000550 <__libc_init_array>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	4d0d      	ldr	r5, [pc, #52]	; (8000588 <__libc_init_array+0x38>)
 8000554:	4c0d      	ldr	r4, [pc, #52]	; (800058c <__libc_init_array+0x3c>)
 8000556:	1b64      	subs	r4, r4, r5
 8000558:	10a4      	asrs	r4, r4, #2
 800055a:	2600      	movs	r6, #0
 800055c:	42a6      	cmp	r6, r4
 800055e:	d109      	bne.n	8000574 <__libc_init_array+0x24>
 8000560:	4d0b      	ldr	r5, [pc, #44]	; (8000590 <__libc_init_array+0x40>)
 8000562:	4c0c      	ldr	r4, [pc, #48]	; (8000594 <__libc_init_array+0x44>)
 8000564:	f000 f818 	bl	8000598 <_init>
 8000568:	1b64      	subs	r4, r4, r5
 800056a:	10a4      	asrs	r4, r4, #2
 800056c:	2600      	movs	r6, #0
 800056e:	42a6      	cmp	r6, r4
 8000570:	d105      	bne.n	800057e <__libc_init_array+0x2e>
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f855 3b04 	ldr.w	r3, [r5], #4
 8000578:	4798      	blx	r3
 800057a:	3601      	adds	r6, #1
 800057c:	e7ee      	b.n	800055c <__libc_init_array+0xc>
 800057e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000582:	4798      	blx	r3
 8000584:	3601      	adds	r6, #1
 8000586:	e7f2      	b.n	800056e <__libc_init_array+0x1e>
 8000588:	080005b0 	.word	0x080005b0
 800058c:	080005b0 	.word	0x080005b0
 8000590:	080005b0 	.word	0x080005b0
 8000594:	080005b4 	.word	0x080005b4

08000598 <_init>:
 8000598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059a:	bf00      	nop
 800059c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800059e:	bc08      	pop	{r3}
 80005a0:	469e      	mov	lr, r3
 80005a2:	4770      	bx	lr

080005a4 <_fini>:
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a6:	bf00      	nop
 80005a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005aa:	bc08      	pop	{r3}
 80005ac:	469e      	mov	lr, r3
 80005ae:	4770      	bx	lr
