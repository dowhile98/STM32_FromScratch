
SysTick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001144  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080012f4  080012f4  000112f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001344  08001344  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001344  08001344  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001344  08001344  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001344  08001344  00011344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001348  08001348  00011348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800134c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          0000003c  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b62  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000978  00000000  00000000  00021bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00022570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000168  00000000  00000000  00022760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b78  00000000  00000000  000228c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000318f  00000000  00000000  0003c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d6ec  00000000  00000000  0003f5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000cccbb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000908  00000000  00000000  000ccd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080012dc 	.word	0x080012dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	080012dc 	.word	0x080012dc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:

	return ch;
}
/*main function -----------------------------------------------*/
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	uint32_t ticks;
	GPIO_ConfigTypedef_t lcdPin;
	//PD12->salida
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000296:	4b25      	ldr	r3, [pc, #148]	; (800032c <main+0x9c>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a24      	ldr	r2, [pc, #144]	; (800032c <main+0x9c>)
 800029c:	f043 0308 	orr.w	r3, r3, #8
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER &=~ GPIO_MODER_MODE12;
 80002a2:	4b23      	ldr	r3, [pc, #140]	; (8000330 <main+0xa0>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a22      	ldr	r2, [pc, #136]	; (8000330 <main+0xa0>)
 80002a8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002ac:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE12_0;
 80002ae:	4b20      	ldr	r3, [pc, #128]	; (8000330 <main+0xa0>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a1f      	ldr	r2, [pc, #124]	; (8000330 <main+0xa0>)
 80002b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002b8:	6013      	str	r3, [r2, #0]
	/**
	 * ticks = 16MHz * 0.001
	 * ticks = 16000
	 */
	ticks = 16000;
 80002ba:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80002be:	60fb      	str	r3, [r7, #12]
	SysTick_Init(ticks);
 80002c0:	68f8      	ldr	r0, [r7, #12]
 80002c2:	f000 fb25 	bl	8000910 <SysTick_Init>

	ticks = GetTicks();
 80002c6:	f000 fb53 	bl	8000970 <GetTicks>
 80002ca:	60f8      	str	r0, [r7, #12]

	/*Lcd init -----------------------------------*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <main+0x9c>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d0:	4a16      	ldr	r2, [pc, #88]	; (800032c <main+0x9c>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6313      	str	r3, [r2, #48]	; 0x30
	lcdPin.pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 80002d8:	237e      	movs	r3, #126	; 0x7e
 80002da:	80bb      	strh	r3, [r7, #4]
	lcdPin.mode = GPIO_MODE_OUTPUT;
 80002dc:	2301      	movs	r3, #1
 80002de:	71bb      	strb	r3, [r7, #6]
	lcdPin.pullup = GPIO_PU_NONE;
 80002e0:	2300      	movs	r3, #0
 80002e2:	727b      	strb	r3, [r7, #9]
	lcdPin.speed = GPIO_SPEED_HIGH;
 80002e4:	2302      	movs	r3, #2
 80002e6:	723b      	strb	r3, [r7, #8]
	lcdPin.outputType = GPIO_OT_PP;
 80002e8:	2300      	movs	r3, #0
 80002ea:	71fb      	strb	r3, [r7, #7]
	BSP_PinInit(GPIOA, &lcdPin);
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	4619      	mov	r1, r3
 80002f0:	4810      	ldr	r0, [pc, #64]	; (8000334 <main+0xa4>)
 80002f2:	f000 f89c 	bl	800042e <BSP_PinInit>

	LCD_Init(16, 2);
 80002f6:	2102      	movs	r1, #2
 80002f8:	2010      	movs	r0, #16
 80002fa:	f000 f93d 	bl	8000578 <LCD_Init>

	LCD_Printf(0, 0, "hola mundo\r\nQUINO B.Jeffry");
 80002fe:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <main+0xa8>)
 8000300:	2100      	movs	r1, #0
 8000302:	2000      	movs	r0, #0
 8000304:	f000 fa1a 	bl	800073c <LCD_Printf>
    /* Loop forever */
	for(;;){
		//leer adc
		if((GetTicks() - ticks)>= 100){
 8000308:	f000 fb32 	bl	8000970 <GetTicks>
 800030c:	4602      	mov	r2, r0
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	1ad3      	subs	r3, r2, r3
 8000312:	2b63      	cmp	r3, #99	; 0x63
 8000314:	d9f8      	bls.n	8000308 <main+0x78>
			ticks = GetTicks();
 8000316:	f000 fb2b 	bl	8000970 <GetTicks>
 800031a:	60f8      	str	r0, [r7, #12]
			GPIOD->ODR ^= GPIO_ODR_OD12;
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <main+0xa0>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a03      	ldr	r2, [pc, #12]	; (8000330 <main+0xa0>)
 8000322:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000326:	6153      	str	r3, [r2, #20]
		if((GetTicks() - ticks)>= 100){
 8000328:	e7ee      	b.n	8000308 <main+0x78>
 800032a:	bf00      	nop
 800032c:	40023800 	.word	0x40023800
 8000330:	40020c00 	.word	0x40020c00
 8000334:	40020000 	.word	0x40020000
 8000338:	080012f4 	.word	0x080012f4

0800033c <SysTick_Handler>:
 *      Author: jeffr
 */
#include "stm32f4xx.h"
#include "SysTick.h"

void SysTick_Handler(void){
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	TicksInc(1);
 8000340:	2001      	movs	r0, #1
 8000342:	f000 fb21 	bl	8000988 <TicksInc>
	//todo

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000354:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <_sbrk+0x5c>)
 8000356:	4b15      	ldr	r3, [pc, #84]	; (80003ac <_sbrk+0x60>)
 8000358:	1ad3      	subs	r3, r2, r3
 800035a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000360:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <_sbrk+0x64>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d102      	bne.n	800036e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <_sbrk+0x64>)
 800036a:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <_sbrk+0x68>)
 800036c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800036e:	4b10      	ldr	r3, [pc, #64]	; (80003b0 <_sbrk+0x64>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4413      	add	r3, r2
 8000376:	693a      	ldr	r2, [r7, #16]
 8000378:	429a      	cmp	r2, r3
 800037a:	d207      	bcs.n	800038c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800037c:	f000 fb16 	bl	80009ac <__errno>
 8000380:	4603      	mov	r3, r0
 8000382:	220c      	movs	r2, #12
 8000384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000386:	f04f 33ff 	mov.w	r3, #4294967295
 800038a:	e009      	b.n	80003a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800038c:	4b08      	ldr	r3, [pc, #32]	; (80003b0 <_sbrk+0x64>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000392:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <_sbrk+0x64>)
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4413      	add	r3, r2
 800039a:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <_sbrk+0x64>)
 800039c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800039e:	68fb      	ldr	r3, [r7, #12]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	3718      	adds	r7, #24
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20020000 	.word	0x20020000
 80003ac:	00000400 	.word	0x00000400
 80003b0:	20000080 	.word	0x20000080
 80003b4:	200000a0 	.word	0x200000a0

080003b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SystemInit+0x20>)
 80003be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c2:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <SystemInit+0x20>)
 80003c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000ed00 	.word	0xe000ed00

080003dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003dc:	480d      	ldr	r0, [pc, #52]	; (8000414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003e0:	f7ff ffea 	bl	80003b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e6:	490d      	ldr	r1, [pc, #52]	; (800041c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <LoopForever+0xe>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003fc:	4c0a      	ldr	r4, [pc, #40]	; (8000428 <LoopForever+0x16>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800040a:	f000 fad5 	bl	80009b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800040e:	f7ff ff3f 	bl	8000290 <main>

08000412 <LoopForever>:

LoopForever:
  b LoopForever
 8000412:	e7fe      	b.n	8000412 <LoopForever>
  ldr   r0, =_estack
 8000414:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000420:	0800134c 	.word	0x0800134c
  ldr r2, =_sbss
 8000424:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000428:	200000a0 	.word	0x200000a0

0800042c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC_IRQHandler>

0800042e <BSP_PinInit>:
}
/**
 * HAL (high abtractions layer)
 * LL
 */
void BSP_PinInit(GPIO_TypeDef *P,GPIO_ConfigTypedef_t *config){
 800042e:	b480      	push	{r7}
 8000430:	b087      	sub	sp, #28
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
 8000436:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 8000438:	2300      	movs	r3, #0
 800043a:	613b      	str	r3, [r7, #16]
	uint32_t iocurrent = 0x00U;
 800043c:	2300      	movs	r3, #0
 800043e:	60fb      	str	r3, [r7, #12]

	for(position = 0; position <16; position++){
 8000440:	2300      	movs	r3, #0
 8000442:	617b      	str	r3, [r7, #20]
 8000444:	e08e      	b.n	8000564 <BSP_PinInit+0x136>
		ioposition = 0x1U<<position;
 8000446:	2201      	movs	r2, #1
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	fa02 f303 	lsl.w	r3, r2, r3
 800044e:	613b      	str	r3, [r7, #16]

		iocurrent = (uint32_t)(config->pin) & ioposition;
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	461a      	mov	r2, r3
 8000456:	693b      	ldr	r3, [r7, #16]
 8000458:	4013      	ands	r3, r2
 800045a:	60fb      	str	r3, [r7, #12]

		if(iocurrent == ioposition){
 800045c:	68fa      	ldr	r2, [r7, #12]
 800045e:	693b      	ldr	r3, [r7, #16]
 8000460:	429a      	cmp	r2, r3
 8000462:	d17c      	bne.n	800055e <BSP_PinInit+0x130>
			//Modo
			if(((config->mode & GPIO_MODE) == GPIO_MODE_OUTPUT) || ((config->mode & GPIO_MODE) == GPIO_MODE_AF)){
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	789b      	ldrb	r3, [r3, #2]
 8000468:	f003 0303 	and.w	r3, r3, #3
 800046c:	2b01      	cmp	r3, #1
 800046e:	d005      	beq.n	800047c <BSP_PinInit+0x4e>
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	789b      	ldrb	r3, [r3, #2]
 8000474:	f003 0303 	and.w	r3, r3, #3
 8000478:	2b02      	cmp	r3, #2
 800047a:	d12b      	bne.n	80004d4 <BSP_PinInit+0xa6>
				//io speed
				P->OSPEEDR &=~(0x3<<(position * 2));
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	697a      	ldr	r2, [r7, #20]
 8000482:	0052      	lsls	r2, r2, #1
 8000484:	2103      	movs	r1, #3
 8000486:	fa01 f202 	lsl.w	r2, r1, r2
 800048a:	43d2      	mvns	r2, r2
 800048c:	401a      	ands	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	609a      	str	r2, [r3, #8]
				P->OSPEEDR |= config->speed<< (position * 2);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	689b      	ldr	r3, [r3, #8]
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	7912      	ldrb	r2, [r2, #4]
 800049a:	4611      	mov	r1, r2
 800049c:	697a      	ldr	r2, [r7, #20]
 800049e:	0052      	lsls	r2, r2, #1
 80004a0:	fa01 f202 	lsl.w	r2, r1, r2
 80004a4:	431a      	orrs	r2, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	609a      	str	r2, [r3, #8]
				//io type
				P->OTYPER &=~ (1<<(position ));
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	2101      	movs	r1, #1
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	43d2      	mvns	r2, r2
 80004b8:	401a      	ands	r2, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	605a      	str	r2, [r3, #4]
				P->OTYPER |= config->outputType<<position;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	78d2      	ldrb	r2, [r2, #3]
 80004c6:	4611      	mov	r1, r2
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	fa01 f202 	lsl.w	r2, r1, r2
 80004ce:	431a      	orrs	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	605a      	str	r2, [r3, #4]
			}
			if((config->mode & GPIO_MODE) != GPIO_MODE_ANALOG){
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	789b      	ldrb	r3, [r3, #2]
 80004d8:	f003 0303 	and.w	r3, r3, #3
 80004dc:	2b03      	cmp	r3, #3
 80004de:	d016      	beq.n	800050e <BSP_PinInit+0xe0>
				P->PUPDR &=~ (0x3U<< (position * 2));
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	68da      	ldr	r2, [r3, #12]
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	2103      	movs	r1, #3
 80004ea:	fa01 f303 	lsl.w	r3, r1, r3
 80004ee:	43db      	mvns	r3, r3
 80004f0:	401a      	ands	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	60da      	str	r2, [r3, #12]
				P->PUPDR |= config->pullup<< (position * 2);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	68db      	ldr	r3, [r3, #12]
 80004fa:	683a      	ldr	r2, [r7, #0]
 80004fc:	7952      	ldrb	r2, [r2, #5]
 80004fe:	4611      	mov	r1, r2
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	0052      	lsls	r2, r2, #1
 8000504:	fa01 f202 	lsl.w	r2, r1, r2
 8000508:	431a      	orrs	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	60da      	str	r2, [r3, #12]
			}
			if((config->mode & GPIO_MODE)  == GPIO_MODE_AF){
				//update actualizarse en una segunda version

			}
			if((config->mode &GPIO_MODE) == GPIO_MODE_ANALOG){
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	789b      	ldrb	r3, [r3, #2]
 8000512:	f003 0303 	and.w	r3, r3, #3
 8000516:	2b03      	cmp	r3, #3
 8000518:	d10a      	bne.n	8000530 <BSP_PinInit+0x102>
				P->PUPDR &=~ (0x3U<<(2 *position));
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	68da      	ldr	r2, [r3, #12]
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	2103      	movs	r1, #3
 8000524:	fa01 f303 	lsl.w	r3, r1, r3
 8000528:	43db      	mvns	r3, r3
 800052a:	401a      	ands	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	60da      	str	r2, [r3, #12]
			}
			P->MODER &=~ (0x3u<<(position * 2));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	2103      	movs	r1, #3
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	43db      	mvns	r3, r3
 8000540:	401a      	ands	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
			P->MODER |= config->mode << (position * 2);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	7892      	ldrb	r2, [r2, #2]
 800054e:	4611      	mov	r1, r2
 8000550:	697a      	ldr	r2, [r7, #20]
 8000552:	0052      	lsls	r2, r2, #1
 8000554:	fa01 f202 	lsl.w	r2, r1, r2
 8000558:	431a      	orrs	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	601a      	str	r2, [r3, #0]
	for(position = 0; position <16; position++){
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	3301      	adds	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	2b0f      	cmp	r3, #15
 8000568:	f67f af6d 	bls.w	8000446 <BSP_PinInit+0x18>
		}
	}
	return;
 800056c:	bf00      	nop
}
 800056e:	371c      	adds	r7, #28
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <LCD_Init>:
static void LCD_Data(uint8_t data);
static void LCD_CursorSet(uint8_t col, uint8_t row);


/*Function definition -------------------------------------------------*/
void LCD_Init(uint8_t cols, uint8_t rows) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	460a      	mov	r2, r1
 8000582:	71fb      	strb	r3, [r7, #7]
 8000584:	4613      	mov	r3, r2
 8000586:	71bb      	strb	r3, [r7, #6]
	/* At least 40ms */
	LCD_Delay(45);
 8000588:	202d      	movs	r0, #45	; 0x2d
 800058a:	f000 f965 	bl	8000858 <LCD_Delay>

	/* Set LCD width and height */
	LCD_Opts.Rows = rows;
 800058e:	4a2b      	ldr	r2, [pc, #172]	; (800063c <LCD_Init+0xc4>)
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	70d3      	strb	r3, [r2, #3]
	LCD_Opts.Cols = cols;
 8000594:	4a29      	ldr	r2, [pc, #164]	; (800063c <LCD_Init+0xc4>)
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	7113      	strb	r3, [r2, #4]

	/* Set cursor pointer to beginning for LCD */
	LCD_Opts.currentX = 0;
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <LCD_Init+0xc4>)
 800059c:	2200      	movs	r2, #0
 800059e:	715a      	strb	r2, [r3, #5]
	LCD_Opts.currentY = 0;
 80005a0:	4b26      	ldr	r3, [pc, #152]	; (800063c <LCD_Init+0xc4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	719a      	strb	r2, [r3, #6]


	LCD_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <LCD_Init+0xc4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d906      	bls.n	80005c0 <LCD_Init+0x48>
		LCD_Opts.DisplayFunction |= HD44780_2LINE;
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <LCD_Init+0xc4>)
 80005b4:	785b      	ldrb	r3, [r3, #1]
 80005b6:	f043 0308 	orr.w	r3, r3, #8
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <LCD_Init+0xc4>)
 80005be:	705a      	strb	r2, [r3, #1]
	}

	/* Try to set 4bit mode */
	LCD_nibble_write(0x03,0);
 80005c0:	2100      	movs	r1, #0
 80005c2:	2003      	movs	r0, #3
 80005c4:	f000 f954 	bl	8000870 <LCD_nibble_write>
	LCD_Delay(45);
 80005c8:	202d      	movs	r0, #45	; 0x2d
 80005ca:	f000 f945 	bl	8000858 <LCD_Delay>

	/* Second try */
	LCD_nibble_write(0x03,0);
 80005ce:	2100      	movs	r1, #0
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 f94d 	bl	8000870 <LCD_nibble_write>
	LCD_Delay(45);
 80005d6:	202d      	movs	r0, #45	; 0x2d
 80005d8:	f000 f93e 	bl	8000858 <LCD_Delay>

	/* Third goo! */
	LCD_nibble_write(0x03,0);
 80005dc:	2100      	movs	r1, #0
 80005de:	2003      	movs	r0, #3
 80005e0:	f000 f946 	bl	8000870 <LCD_nibble_write>
	LCD_Delay(45);
 80005e4:	202d      	movs	r0, #45	; 0x2d
 80005e6:	f000 f937 	bl	8000858 <LCD_Delay>

	/* Set 4-bit interface */
	LCD_nibble_write(0x02,0);
 80005ea:	2100      	movs	r1, #0
 80005ec:	2002      	movs	r0, #2
 80005ee:	f000 f93f 	bl	8000870 <LCD_nibble_write>
	LCD_Delay(1);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 f930 	bl	8000858 <LCD_Delay>

	/* Set # lines, font size, etc. */
	LCD_Cmd(HD44780_FUNCTIONSET | LCD_Opts.DisplayFunction);
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <LCD_Init+0xc4>)
 80005fa:	785b      	ldrb	r3, [r3, #1]
 80005fc:	f043 0320 	orr.w	r3, r3, #32
 8000600:	b2db      	uxtb	r3, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f8bb 	bl	800077e <LCD_Cmd>

	/* Turn the display on with no cursor or blinking default */
	LCD_Opts.DisplayControl = HD44780_DISPLAYON;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <LCD_Init+0xc4>)
 800060a:	2204      	movs	r2, #4
 800060c:	701a      	strb	r2, [r3, #0]
	LCD_DisplayOn();
 800060e:	f000 f87f 	bl	8000710 <LCD_DisplayOn>

	/* Clear lcd */
	LCD_Clear();
 8000612:	f000 f815 	bl	8000640 <LCD_Clear>

	/* Default font directions */
	LCD_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <LCD_Init+0xc4>)
 8000618:	2202      	movs	r2, #2
 800061a:	709a      	strb	r2, [r3, #2]
	LCD_Cmd(HD44780_ENTRYMODESET | LCD_Opts.DisplayMode);
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <LCD_Init+0xc4>)
 800061e:	789b      	ldrb	r3, [r3, #2]
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	b2db      	uxtb	r3, r3
 8000626:	4618      	mov	r0, r3
 8000628:	f000 f8a9 	bl	800077e <LCD_Cmd>

	/* Delay */
	LCD_Delay(45);
 800062c:	202d      	movs	r0, #45	; 0x2d
 800062e:	f000 f913 	bl	8000858 <LCD_Delay>
	return;
 8000632:	bf00      	nop
}
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000084 	.word	0x20000084

08000640 <LCD_Clear>:


void LCD_Clear(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	LCD_Cmd(HD44780_CLEARDISPLAY);
 8000644:	2001      	movs	r0, #1
 8000646:	f000 f89a 	bl	800077e <LCD_Cmd>
	LCD_Delay(3);
 800064a:	2003      	movs	r0, #3
 800064c:	f000 f904 	bl	8000858 <LCD_Delay>
}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}

08000654 <LCD_Puts>:

void LCD_Puts(uint8_t x, uint8_t y, char* str) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	603a      	str	r2, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	460b      	mov	r3, r1
 8000662:	71bb      	strb	r3, [r7, #6]
	LCD_CursorSet(x, y);
 8000664:	79ba      	ldrb	r2, [r7, #6]
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4611      	mov	r1, r2
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f8c4 	bl	80007f8 <LCD_CursorSet>
	while (*str) {
 8000670:	e042      	b.n	80006f8 <LCD_Puts+0xa4>
		if (LCD_Opts.currentX >= LCD_Opts.Cols) {
 8000672:	4b26      	ldr	r3, [pc, #152]	; (800070c <LCD_Puts+0xb8>)
 8000674:	795a      	ldrb	r2, [r3, #5]
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <LCD_Puts+0xb8>)
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	429a      	cmp	r2, r3
 800067c:	d310      	bcc.n	80006a0 <LCD_Puts+0x4c>
			LCD_Opts.currentX = 0;
 800067e:	4b23      	ldr	r3, [pc, #140]	; (800070c <LCD_Puts+0xb8>)
 8000680:	2200      	movs	r2, #0
 8000682:	715a      	strb	r2, [r3, #5]
			LCD_Opts.currentY++;
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <LCD_Puts+0xb8>)
 8000686:	799b      	ldrb	r3, [r3, #6]
 8000688:	3301      	adds	r3, #1
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b1f      	ldr	r3, [pc, #124]	; (800070c <LCD_Puts+0xb8>)
 800068e:	719a      	strb	r2, [r3, #6]
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 8000690:	4b1e      	ldr	r3, [pc, #120]	; (800070c <LCD_Puts+0xb8>)
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	4a1d      	ldr	r2, [pc, #116]	; (800070c <LCD_Puts+0xb8>)
 8000696:	7992      	ldrb	r2, [r2, #6]
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f000 f8ac 	bl	80007f8 <LCD_CursorSet>
		}
		if (*str == '\n') {
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b0a      	cmp	r3, #10
 80006a6:	d10e      	bne.n	80006c6 <LCD_Puts+0x72>
			LCD_Opts.currentY++;
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <LCD_Puts+0xb8>)
 80006aa:	799b      	ldrb	r3, [r3, #6]
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <LCD_Puts+0xb8>)
 80006b2:	719a      	strb	r2, [r3, #6]
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <LCD_Puts+0xb8>)
 80006b6:	795b      	ldrb	r3, [r3, #5]
 80006b8:	4a14      	ldr	r2, [pc, #80]	; (800070c <LCD_Puts+0xb8>)
 80006ba:	7992      	ldrb	r2, [r2, #6]
 80006bc:	4611      	mov	r1, r2
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f89a 	bl	80007f8 <LCD_CursorSet>
 80006c4:	e015      	b.n	80006f2 <LCD_Puts+0x9e>
		} else if (*str == '\r') {
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b0d      	cmp	r3, #13
 80006cc:	d106      	bne.n	80006dc <LCD_Puts+0x88>
			LCD_CursorSet(0, LCD_Opts.currentY);
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <LCD_Puts+0xb8>)
 80006d0:	799b      	ldrb	r3, [r3, #6]
 80006d2:	4619      	mov	r1, r3
 80006d4:	2000      	movs	r0, #0
 80006d6:	f000 f88f 	bl	80007f8 <LCD_CursorSet>
 80006da:	e00a      	b.n	80006f2 <LCD_Puts+0x9e>
		} else {
			LCD_Data(*str);
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f86e 	bl	80007c2 <LCD_Data>
			LCD_Opts.currentX++;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <LCD_Puts+0xb8>)
 80006e8:	795b      	ldrb	r3, [r3, #5]
 80006ea:	3301      	adds	r3, #1
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <LCD_Puts+0xb8>)
 80006f0:	715a      	strb	r2, [r3, #5]
		}
		str++;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	3301      	adds	r3, #1
 80006f6:	603b      	str	r3, [r7, #0]
	while (*str) {
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1b8      	bne.n	8000672 <LCD_Puts+0x1e>
	}
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000084 	.word	0x20000084

08000710 <LCD_DisplayOn>:


void LCD_DisplayOn(void) {
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	LCD_Opts.DisplayControl |= HD44780_DISPLAYON;
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <LCD_DisplayOn+0x28>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <LCD_DisplayOn+0x28>)
 8000720:	701a      	strb	r2, [r3, #0]
	LCD_Cmd(HD44780_DISPLAYCONTROL | LCD_Opts.DisplayControl);
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <LCD_DisplayOn+0x28>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	f043 0308 	orr.w	r3, r3, #8
 800072a:	b2db      	uxtb	r3, r3
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f826 	bl	800077e <LCD_Cmd>
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000084 	.word	0x20000084

0800073c <LCD_Printf>:
	LCD_CursorSet(x, y);
	LCD_Data(location);
}


void LCD_Printf(uint8_t x, uint8_t y,char *format,...){
 800073c:	b40c      	push	{r2, r3}
 800073e:	b580      	push	{r7, lr}
 8000740:	b098      	sub	sp, #96	; 0x60
 8000742:	af00      	add	r7, sp, #0
 8000744:	4603      	mov	r3, r0
 8000746:	460a      	mov	r2, r1
 8000748:	71fb      	strb	r3, [r7, #7]
 800074a:	4613      	mov	r3, r2
 800074c:	71bb      	strb	r3, [r7, #6]
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 800074e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000752:	60fb      	str	r3, [r7, #12]
	vsprintf(str, format,args);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	68fa      	ldr	r2, [r7, #12]
 800075a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800075c:	4618      	mov	r0, r3
 800075e:	f000 f965 	bl	8000a2c <vsiprintf>
	LCD_Puts(x, y,str);
 8000762:	f107 0210 	add.w	r2, r7, #16
 8000766:	79b9      	ldrb	r1, [r7, #6]
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff72 	bl	8000654 <LCD_Puts>
	va_end(args);
}
 8000770:	bf00      	nop
 8000772:	3760      	adds	r7, #96	; 0x60
 8000774:	46bd      	mov	sp, r7
 8000776:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800077a:	b002      	add	sp, #8
 800077c:	4770      	bx	lr

0800077e <LCD_Cmd>:

/***************************************************************/

/* Private functions */
static void LCD_Cmd(uint8_t cmd){
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	4603      	mov	r3, r0
 8000786:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write((cmd>>4) & 0x0F,0);
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	091b      	lsrs	r3, r3, #4
 800078c:	b2db      	uxtb	r3, r3
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f000 f86d 	bl	8000870 <LCD_nibble_write>
	LCD_nibble_write(cmd & 0x0F,0);
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f865 	bl	8000870 <LCD_nibble_write>
	if(cmd < 4)
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b03      	cmp	r3, #3
 80007aa:	d803      	bhi.n	80007b4 <LCD_Cmd+0x36>
		LCD_Delay(3);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f853 	bl	8000858 <LCD_Delay>
	else
		LCD_Delay(2);
	return;
 80007b2:	e003      	b.n	80007bc <LCD_Cmd+0x3e>
		LCD_Delay(2);
 80007b4:	2002      	movs	r0, #2
 80007b6:	f000 f84f 	bl	8000858 <LCD_Delay>
	return;
 80007ba:	bf00      	nop
}
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <LCD_Data>:

static void LCD_Data(uint8_t data){
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write((data>>4) & 0x0F,1);
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	091b      	lsrs	r3, r3, #4
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2101      	movs	r1, #1
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f84b 	bl	8000870 <LCD_nibble_write>
	LCD_nibble_write(data & 0x0F,1);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 030f 	and.w	r3, r3, #15
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2101      	movs	r1, #1
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f843 	bl	8000870 <LCD_nibble_write>
	LCD_Delay(1);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 f834 	bl	8000858 <LCD_Delay>
	return;
 80007f0:	bf00      	nop
}
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <LCD_CursorSet>:

static void LCD_CursorSet(uint8_t col, uint8_t row){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	460a      	mov	r2, r1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <LCD_CursorSet+0x58>)
 800080a:	60fb      	str	r3, [r7, #12]
	/* Go to beginning */
	if (row >= LCD_Opts.Rows) {
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <LCD_CursorSet+0x5c>)
 800080e:	78db      	ldrb	r3, [r3, #3]
 8000810:	79ba      	ldrb	r2, [r7, #6]
 8000812:	429a      	cmp	r2, r3
 8000814:	d301      	bcc.n	800081a <LCD_CursorSet+0x22>
		row = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	71bb      	strb	r3, [r7, #6]
	}
	/* Set current column and row */
	LCD_Opts.currentX = col;
 800081a:	4a0e      	ldr	r2, [pc, #56]	; (8000854 <LCD_CursorSet+0x5c>)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	7153      	strb	r3, [r2, #5]
	LCD_Opts.currentY = row;
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <LCD_CursorSet+0x5c>)
 8000822:	79bb      	ldrb	r3, [r7, #6]
 8000824:	7193      	strb	r3, [r2, #6]

	/* Set location address */
	LCD_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 8000826:	79bb      	ldrb	r3, [r7, #6]
 8000828:	3310      	adds	r3, #16
 800082a:	443b      	add	r3, r7
 800082c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	4413      	add	r3, r2
 8000834:	b2db      	uxtb	r3, r3
 8000836:	b25b      	sxtb	r3, r3
 8000838:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800083c:	b25b      	sxtb	r3, r3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ff9c 	bl	800077e <LCD_Cmd>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	54144000 	.word	0x54144000
 8000854:	20000084 	.word	0x20000084

08000858 <LCD_Delay>:
#define LCD_D7					C , 0


/*Defincion de funciones ------------------------------------*/

void LCD_Delay(uint32_t delayms){
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	delay_ms(delayms);
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f000 f86f 	bl	8000944 <delay_ms>
	//HAL_Delay
	//__delay_ms
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <LCD_nibble_write>:

void LCD_nibble_write(uint8_t data, uint8_t control){
 8000870:	b480      	push	{r7}
 8000872:	b085      	sub	sp, #20
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	460a      	mov	r2, r1
 800087a:	71fb      	strb	r3, [r7, #7]
 800087c:	4613      	mov	r3, r2
 800087e:	71bb      	strb	r3, [r7, #6]
	uint32_t delay = 1;
 8000880:	2301      	movs	r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
	GPIOX_ODR(LCD_D7) = (data>>3) & 0x1;
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	08db      	lsrs	r3, r3, #3
 8000888:	b2db      	uxtb	r3, r3
 800088a:	4a1b      	ldr	r2, [pc, #108]	; (80008f8 <LCD_nibble_write+0x88>)
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	6013      	str	r3, [r2, #0]
	GPIOX_ODR(LCD_D6) = (data>>2) & 0x1;
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	089b      	lsrs	r3, r3, #2
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4a18      	ldr	r2, [pc, #96]	; (80008fc <LCD_nibble_write+0x8c>)
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	6013      	str	r3, [r2, #0]
	GPIOX_ODR(LCD_D5) = (data>>1) & 0x1;
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	085b      	lsrs	r3, r3, #1
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <LCD_nibble_write+0x90>)
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	6013      	str	r3, [r2, #0]
	GPIOX_ODR(LCD_D4) = (data) & 0x1;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a14      	ldr	r2, [pc, #80]	; (8000904 <LCD_nibble_write+0x94>)
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	6013      	str	r3, [r2, #0]
//	//PA1
//	GPIOA->BSRR |= ((data>>3) & 0x1) ? (1<<1) : (1<<(16 + 1));
//	//PA7
//	GPIOA->BSRR |= ((data>>2) & 0x1) ? (1<<7) : (1<<(16 + 7));

	GPIOX_ODR(LCD_E) = 0;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <LCD_nibble_write+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]

	if(control){
 80008be:	79bb      	ldrb	r3, [r7, #6]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d003      	beq.n	80008cc <LCD_nibble_write+0x5c>
		GPIOX_ODR(LCD_RS) = 1;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <LCD_nibble_write+0x9c>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e002      	b.n	80008d2 <LCD_nibble_write+0x62>
	}else{
		GPIOX_ODR(LCD_RS) = 0;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <LCD_nibble_write+0x9c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
	}

	GPIOX_ODR(LCD_E) = 1;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <LCD_nibble_write+0x98>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	601a      	str	r2, [r3, #0]
	while(delay-- >0);
 80008d8:	bf00      	nop
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	1e5a      	subs	r2, r3, #1
 80008de:	60fa      	str	r2, [r7, #12]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1fa      	bne.n	80008da <LCD_nibble_write+0x6a>
	GPIOX_ODR(LCD_E) = 0;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <LCD_nibble_write+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]

	return;
 80008ea:	bf00      	nop
}
 80008ec:	3714      	adds	r7, #20
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	42410280 	.word	0x42410280
 80008fc:	42410284 	.word	0x42410284
 8000900:	42408280 	.word	0x42408280
 8000904:	42400290 	.word	0x42400290
 8000908:	42400284 	.word	0x42400284
 800090c:	42400280 	.word	0x42400280

08000910 <SysTick_Init>:
#include "SysTick.h"

volatile uint32_t uwTicks = 0;


void SysTick_Init(uint32_t ticks){
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	SysTick->CTRL = 0;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <SysTick_Init+0x30>)
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]

	SysTick->LOAD = ticks - 1;
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <SysTick_Init+0x30>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	6053      	str	r3, [r2, #4]

	SysTick->VAL = 0;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <SysTick_Init+0x30>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_CLKSOURCE_Msk;
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SysTick_Init+0x30>)
 800092e:	2207      	movs	r2, #7
 8000930:	601a      	str	r2, [r3, #0]

	return;
 8000932:	bf00      	nop
}
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000e010 	.word	0xe000e010

08000944 <delay_ms>:

void delay_ms(uint32_t delay){
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
//	SysTick->VAL = 0;
//
//	for(uint32_t i = 0; i <delay; i++){
//		while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0); //1ms
//	}
	uint32_t tickStart = GetTicks();
 800094c:	f000 f810 	bl	8000970 <GetTicks>
 8000950:	60f8      	str	r0, [r7, #12]
	uint32_t wait = delay;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	60bb      	str	r3, [r7, #8]

	while((GetTicks() - tickStart) < wait);
 8000956:	bf00      	nop
 8000958:	f000 f80a 	bl	8000970 <GetTicks>
 800095c:	4602      	mov	r2, r0
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	429a      	cmp	r2, r3
 8000966:	d8f7      	bhi.n	8000958 <delay_ms+0x14>
	return;
 8000968:	bf00      	nop
}
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <GetTicks>:

uint32_t GetTicks(void){
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
	return (uint32_t)uwTicks;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <GetTicks+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	2000008c 	.word	0x2000008c

08000988 <TicksInc>:

void TicksInc(uint32_t inc){
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	uwTicks += inc;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <TicksInc+0x20>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <TicksInc+0x20>)
 800099a:	6013      	str	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	2000008c 	.word	0x2000008c

080009ac <__errno>:
 80009ac:	4b01      	ldr	r3, [pc, #4]	; (80009b4 <__errno+0x8>)
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000000 	.word	0x20000000

080009b8 <__libc_init_array>:
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	4d0d      	ldr	r5, [pc, #52]	; (80009f0 <__libc_init_array+0x38>)
 80009bc:	4c0d      	ldr	r4, [pc, #52]	; (80009f4 <__libc_init_array+0x3c>)
 80009be:	1b64      	subs	r4, r4, r5
 80009c0:	10a4      	asrs	r4, r4, #2
 80009c2:	2600      	movs	r6, #0
 80009c4:	42a6      	cmp	r6, r4
 80009c6:	d109      	bne.n	80009dc <__libc_init_array+0x24>
 80009c8:	4d0b      	ldr	r5, [pc, #44]	; (80009f8 <__libc_init_array+0x40>)
 80009ca:	4c0c      	ldr	r4, [pc, #48]	; (80009fc <__libc_init_array+0x44>)
 80009cc:	f000 fc86 	bl	80012dc <_init>
 80009d0:	1b64      	subs	r4, r4, r5
 80009d2:	10a4      	asrs	r4, r4, #2
 80009d4:	2600      	movs	r6, #0
 80009d6:	42a6      	cmp	r6, r4
 80009d8:	d105      	bne.n	80009e6 <__libc_init_array+0x2e>
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e0:	4798      	blx	r3
 80009e2:	3601      	adds	r6, #1
 80009e4:	e7ee      	b.n	80009c4 <__libc_init_array+0xc>
 80009e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ea:	4798      	blx	r3
 80009ec:	3601      	adds	r6, #1
 80009ee:	e7f2      	b.n	80009d6 <__libc_init_array+0x1e>
 80009f0:	08001344 	.word	0x08001344
 80009f4:	08001344 	.word	0x08001344
 80009f8:	08001344 	.word	0x08001344
 80009fc:	08001348 	.word	0x08001348

08000a00 <_vsiprintf_r>:
 8000a00:	b500      	push	{lr}
 8000a02:	b09b      	sub	sp, #108	; 0x6c
 8000a04:	9100      	str	r1, [sp, #0]
 8000a06:	9104      	str	r1, [sp, #16]
 8000a08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000a0c:	9105      	str	r1, [sp, #20]
 8000a0e:	9102      	str	r1, [sp, #8]
 8000a10:	4905      	ldr	r1, [pc, #20]	; (8000a28 <_vsiprintf_r+0x28>)
 8000a12:	9103      	str	r1, [sp, #12]
 8000a14:	4669      	mov	r1, sp
 8000a16:	f000 f86f 	bl	8000af8 <_svfiprintf_r>
 8000a1a:	9b00      	ldr	r3, [sp, #0]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	b01b      	add	sp, #108	; 0x6c
 8000a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a26:	bf00      	nop
 8000a28:	ffff0208 	.word	0xffff0208

08000a2c <vsiprintf>:
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	460a      	mov	r2, r1
 8000a30:	4601      	mov	r1, r0
 8000a32:	4802      	ldr	r0, [pc, #8]	; (8000a3c <vsiprintf+0x10>)
 8000a34:	6800      	ldr	r0, [r0, #0]
 8000a36:	f7ff bfe3 	b.w	8000a00 <_vsiprintf_r>
 8000a3a:	bf00      	nop
 8000a3c:	20000000 	.word	0x20000000

08000a40 <__ssputs_r>:
 8000a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a44:	688e      	ldr	r6, [r1, #8]
 8000a46:	429e      	cmp	r6, r3
 8000a48:	4682      	mov	sl, r0
 8000a4a:	460c      	mov	r4, r1
 8000a4c:	4690      	mov	r8, r2
 8000a4e:	461f      	mov	r7, r3
 8000a50:	d838      	bhi.n	8000ac4 <__ssputs_r+0x84>
 8000a52:	898a      	ldrh	r2, [r1, #12]
 8000a54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000a58:	d032      	beq.n	8000ac0 <__ssputs_r+0x80>
 8000a5a:	6825      	ldr	r5, [r4, #0]
 8000a5c:	6909      	ldr	r1, [r1, #16]
 8000a5e:	eba5 0901 	sub.w	r9, r5, r1
 8000a62:	6965      	ldr	r5, [r4, #20]
 8000a64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	444b      	add	r3, r9
 8000a70:	106d      	asrs	r5, r5, #1
 8000a72:	429d      	cmp	r5, r3
 8000a74:	bf38      	it	cc
 8000a76:	461d      	movcc	r5, r3
 8000a78:	0553      	lsls	r3, r2, #21
 8000a7a:	d531      	bpl.n	8000ae0 <__ssputs_r+0xa0>
 8000a7c:	4629      	mov	r1, r5
 8000a7e:	f000 fb63 	bl	8001148 <_malloc_r>
 8000a82:	4606      	mov	r6, r0
 8000a84:	b950      	cbnz	r0, 8000a9c <__ssputs_r+0x5c>
 8000a86:	230c      	movs	r3, #12
 8000a88:	f8ca 3000 	str.w	r3, [sl]
 8000a8c:	89a3      	ldrh	r3, [r4, #12]
 8000a8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a92:	81a3      	strh	r3, [r4, #12]
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9c:	6921      	ldr	r1, [r4, #16]
 8000a9e:	464a      	mov	r2, r9
 8000aa0:	f000 fabe 	bl	8001020 <memcpy>
 8000aa4:	89a3      	ldrh	r3, [r4, #12]
 8000aa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aae:	81a3      	strh	r3, [r4, #12]
 8000ab0:	6126      	str	r6, [r4, #16]
 8000ab2:	6165      	str	r5, [r4, #20]
 8000ab4:	444e      	add	r6, r9
 8000ab6:	eba5 0509 	sub.w	r5, r5, r9
 8000aba:	6026      	str	r6, [r4, #0]
 8000abc:	60a5      	str	r5, [r4, #8]
 8000abe:	463e      	mov	r6, r7
 8000ac0:	42be      	cmp	r6, r7
 8000ac2:	d900      	bls.n	8000ac6 <__ssputs_r+0x86>
 8000ac4:	463e      	mov	r6, r7
 8000ac6:	6820      	ldr	r0, [r4, #0]
 8000ac8:	4632      	mov	r2, r6
 8000aca:	4641      	mov	r1, r8
 8000acc:	f000 fab6 	bl	800103c <memmove>
 8000ad0:	68a3      	ldr	r3, [r4, #8]
 8000ad2:	1b9b      	subs	r3, r3, r6
 8000ad4:	60a3      	str	r3, [r4, #8]
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	4433      	add	r3, r6
 8000ada:	6023      	str	r3, [r4, #0]
 8000adc:	2000      	movs	r0, #0
 8000ade:	e7db      	b.n	8000a98 <__ssputs_r+0x58>
 8000ae0:	462a      	mov	r2, r5
 8000ae2:	f000 fba5 	bl	8001230 <_realloc_r>
 8000ae6:	4606      	mov	r6, r0
 8000ae8:	2800      	cmp	r0, #0
 8000aea:	d1e1      	bne.n	8000ab0 <__ssputs_r+0x70>
 8000aec:	6921      	ldr	r1, [r4, #16]
 8000aee:	4650      	mov	r0, sl
 8000af0:	f000 fabe 	bl	8001070 <_free_r>
 8000af4:	e7c7      	b.n	8000a86 <__ssputs_r+0x46>
	...

08000af8 <_svfiprintf_r>:
 8000af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000afc:	4698      	mov	r8, r3
 8000afe:	898b      	ldrh	r3, [r1, #12]
 8000b00:	061b      	lsls	r3, r3, #24
 8000b02:	b09d      	sub	sp, #116	; 0x74
 8000b04:	4607      	mov	r7, r0
 8000b06:	460d      	mov	r5, r1
 8000b08:	4614      	mov	r4, r2
 8000b0a:	d50e      	bpl.n	8000b2a <_svfiprintf_r+0x32>
 8000b0c:	690b      	ldr	r3, [r1, #16]
 8000b0e:	b963      	cbnz	r3, 8000b2a <_svfiprintf_r+0x32>
 8000b10:	2140      	movs	r1, #64	; 0x40
 8000b12:	f000 fb19 	bl	8001148 <_malloc_r>
 8000b16:	6028      	str	r0, [r5, #0]
 8000b18:	6128      	str	r0, [r5, #16]
 8000b1a:	b920      	cbnz	r0, 8000b26 <_svfiprintf_r+0x2e>
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	e0d1      	b.n	8000cca <_svfiprintf_r+0x1d2>
 8000b26:	2340      	movs	r3, #64	; 0x40
 8000b28:	616b      	str	r3, [r5, #20]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8000b2e:	2320      	movs	r3, #32
 8000b30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b34:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b38:	2330      	movs	r3, #48	; 0x30
 8000b3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000ce4 <_svfiprintf_r+0x1ec>
 8000b3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b42:	f04f 0901 	mov.w	r9, #1
 8000b46:	4623      	mov	r3, r4
 8000b48:	469a      	mov	sl, r3
 8000b4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b4e:	b10a      	cbz	r2, 8000b54 <_svfiprintf_r+0x5c>
 8000b50:	2a25      	cmp	r2, #37	; 0x25
 8000b52:	d1f9      	bne.n	8000b48 <_svfiprintf_r+0x50>
 8000b54:	ebba 0b04 	subs.w	fp, sl, r4
 8000b58:	d00b      	beq.n	8000b72 <_svfiprintf_r+0x7a>
 8000b5a:	465b      	mov	r3, fp
 8000b5c:	4622      	mov	r2, r4
 8000b5e:	4629      	mov	r1, r5
 8000b60:	4638      	mov	r0, r7
 8000b62:	f7ff ff6d 	bl	8000a40 <__ssputs_r>
 8000b66:	3001      	adds	r0, #1
 8000b68:	f000 80aa 	beq.w	8000cc0 <_svfiprintf_r+0x1c8>
 8000b6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b6e:	445a      	add	r2, fp
 8000b70:	9209      	str	r2, [sp, #36]	; 0x24
 8000b72:	f89a 3000 	ldrb.w	r3, [sl]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 80a2 	beq.w	8000cc0 <_svfiprintf_r+0x1c8>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b86:	f10a 0a01 	add.w	sl, sl, #1
 8000b8a:	9304      	str	r3, [sp, #16]
 8000b8c:	9307      	str	r3, [sp, #28]
 8000b8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b92:	931a      	str	r3, [sp, #104]	; 0x68
 8000b94:	4654      	mov	r4, sl
 8000b96:	2205      	movs	r2, #5
 8000b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b9c:	4851      	ldr	r0, [pc, #324]	; (8000ce4 <_svfiprintf_r+0x1ec>)
 8000b9e:	f7ff fb27 	bl	80001f0 <memchr>
 8000ba2:	9a04      	ldr	r2, [sp, #16]
 8000ba4:	b9d8      	cbnz	r0, 8000bde <_svfiprintf_r+0xe6>
 8000ba6:	06d0      	lsls	r0, r2, #27
 8000ba8:	bf44      	itt	mi
 8000baa:	2320      	movmi	r3, #32
 8000bac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bb0:	0711      	lsls	r1, r2, #28
 8000bb2:	bf44      	itt	mi
 8000bb4:	232b      	movmi	r3, #43	; 0x2b
 8000bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bba:	f89a 3000 	ldrb.w	r3, [sl]
 8000bbe:	2b2a      	cmp	r3, #42	; 0x2a
 8000bc0:	d015      	beq.n	8000bee <_svfiprintf_r+0xf6>
 8000bc2:	9a07      	ldr	r2, [sp, #28]
 8000bc4:	4654      	mov	r4, sl
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f04f 0c0a 	mov.w	ip, #10
 8000bcc:	4621      	mov	r1, r4
 8000bce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bd2:	3b30      	subs	r3, #48	; 0x30
 8000bd4:	2b09      	cmp	r3, #9
 8000bd6:	d94e      	bls.n	8000c76 <_svfiprintf_r+0x17e>
 8000bd8:	b1b0      	cbz	r0, 8000c08 <_svfiprintf_r+0x110>
 8000bda:	9207      	str	r2, [sp, #28]
 8000bdc:	e014      	b.n	8000c08 <_svfiprintf_r+0x110>
 8000bde:	eba0 0308 	sub.w	r3, r0, r8
 8000be2:	fa09 f303 	lsl.w	r3, r9, r3
 8000be6:	4313      	orrs	r3, r2
 8000be8:	9304      	str	r3, [sp, #16]
 8000bea:	46a2      	mov	sl, r4
 8000bec:	e7d2      	b.n	8000b94 <_svfiprintf_r+0x9c>
 8000bee:	9b03      	ldr	r3, [sp, #12]
 8000bf0:	1d19      	adds	r1, r3, #4
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	9103      	str	r1, [sp, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	bfbb      	ittet	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	f042 0202 	orrlt.w	r2, r2, #2
 8000c00:	9307      	strge	r3, [sp, #28]
 8000c02:	9307      	strlt	r3, [sp, #28]
 8000c04:	bfb8      	it	lt
 8000c06:	9204      	strlt	r2, [sp, #16]
 8000c08:	7823      	ldrb	r3, [r4, #0]
 8000c0a:	2b2e      	cmp	r3, #46	; 0x2e
 8000c0c:	d10c      	bne.n	8000c28 <_svfiprintf_r+0x130>
 8000c0e:	7863      	ldrb	r3, [r4, #1]
 8000c10:	2b2a      	cmp	r3, #42	; 0x2a
 8000c12:	d135      	bne.n	8000c80 <_svfiprintf_r+0x188>
 8000c14:	9b03      	ldr	r3, [sp, #12]
 8000c16:	1d1a      	adds	r2, r3, #4
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	9203      	str	r2, [sp, #12]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bfb8      	it	lt
 8000c20:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c24:	3402      	adds	r4, #2
 8000c26:	9305      	str	r3, [sp, #20]
 8000c28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000cf4 <_svfiprintf_r+0x1fc>
 8000c2c:	7821      	ldrb	r1, [r4, #0]
 8000c2e:	2203      	movs	r2, #3
 8000c30:	4650      	mov	r0, sl
 8000c32:	f7ff fadd 	bl	80001f0 <memchr>
 8000c36:	b140      	cbz	r0, 8000c4a <_svfiprintf_r+0x152>
 8000c38:	2340      	movs	r3, #64	; 0x40
 8000c3a:	eba0 000a 	sub.w	r0, r0, sl
 8000c3e:	fa03 f000 	lsl.w	r0, r3, r0
 8000c42:	9b04      	ldr	r3, [sp, #16]
 8000c44:	4303      	orrs	r3, r0
 8000c46:	3401      	adds	r4, #1
 8000c48:	9304      	str	r3, [sp, #16]
 8000c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c4e:	4826      	ldr	r0, [pc, #152]	; (8000ce8 <_svfiprintf_r+0x1f0>)
 8000c50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c54:	2206      	movs	r2, #6
 8000c56:	f7ff facb 	bl	80001f0 <memchr>
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d038      	beq.n	8000cd0 <_svfiprintf_r+0x1d8>
 8000c5e:	4b23      	ldr	r3, [pc, #140]	; (8000cec <_svfiprintf_r+0x1f4>)
 8000c60:	bb1b      	cbnz	r3, 8000caa <_svfiprintf_r+0x1b2>
 8000c62:	9b03      	ldr	r3, [sp, #12]
 8000c64:	3307      	adds	r3, #7
 8000c66:	f023 0307 	bic.w	r3, r3, #7
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	9303      	str	r3, [sp, #12]
 8000c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c70:	4433      	add	r3, r6
 8000c72:	9309      	str	r3, [sp, #36]	; 0x24
 8000c74:	e767      	b.n	8000b46 <_svfiprintf_r+0x4e>
 8000c76:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c7a:	460c      	mov	r4, r1
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	e7a5      	b.n	8000bcc <_svfiprintf_r+0xd4>
 8000c80:	2300      	movs	r3, #0
 8000c82:	3401      	adds	r4, #1
 8000c84:	9305      	str	r3, [sp, #20]
 8000c86:	4619      	mov	r1, r3
 8000c88:	f04f 0c0a 	mov.w	ip, #10
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c92:	3a30      	subs	r2, #48	; 0x30
 8000c94:	2a09      	cmp	r2, #9
 8000c96:	d903      	bls.n	8000ca0 <_svfiprintf_r+0x1a8>
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0c5      	beq.n	8000c28 <_svfiprintf_r+0x130>
 8000c9c:	9105      	str	r1, [sp, #20]
 8000c9e:	e7c3      	b.n	8000c28 <_svfiprintf_r+0x130>
 8000ca0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ca4:	4604      	mov	r4, r0
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e7f0      	b.n	8000c8c <_svfiprintf_r+0x194>
 8000caa:	ab03      	add	r3, sp, #12
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	462a      	mov	r2, r5
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <_svfiprintf_r+0x1f8>)
 8000cb2:	a904      	add	r1, sp, #16
 8000cb4:	4638      	mov	r0, r7
 8000cb6:	f3af 8000 	nop.w
 8000cba:	1c42      	adds	r2, r0, #1
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	d1d6      	bne.n	8000c6e <_svfiprintf_r+0x176>
 8000cc0:	89ab      	ldrh	r3, [r5, #12]
 8000cc2:	065b      	lsls	r3, r3, #25
 8000cc4:	f53f af2c 	bmi.w	8000b20 <_svfiprintf_r+0x28>
 8000cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cca:	b01d      	add	sp, #116	; 0x74
 8000ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd0:	ab03      	add	r3, sp, #12
 8000cd2:	9300      	str	r3, [sp, #0]
 8000cd4:	462a      	mov	r2, r5
 8000cd6:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <_svfiprintf_r+0x1f8>)
 8000cd8:	a904      	add	r1, sp, #16
 8000cda:	4638      	mov	r0, r7
 8000cdc:	f000 f87a 	bl	8000dd4 <_printf_i>
 8000ce0:	e7eb      	b.n	8000cba <_svfiprintf_r+0x1c2>
 8000ce2:	bf00      	nop
 8000ce4:	0800130f 	.word	0x0800130f
 8000ce8:	08001319 	.word	0x08001319
 8000cec:	00000000 	.word	0x00000000
 8000cf0:	08000a41 	.word	0x08000a41
 8000cf4:	08001315 	.word	0x08001315

08000cf8 <_printf_common>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	4616      	mov	r6, r2
 8000cfe:	4699      	mov	r9, r3
 8000d00:	688a      	ldr	r2, [r1, #8]
 8000d02:	690b      	ldr	r3, [r1, #16]
 8000d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	bfb8      	it	lt
 8000d0c:	4613      	movlt	r3, r2
 8000d0e:	6033      	str	r3, [r6, #0]
 8000d10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d14:	4607      	mov	r7, r0
 8000d16:	460c      	mov	r4, r1
 8000d18:	b10a      	cbz	r2, 8000d1e <_printf_common+0x26>
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	6033      	str	r3, [r6, #0]
 8000d1e:	6823      	ldr	r3, [r4, #0]
 8000d20:	0699      	lsls	r1, r3, #26
 8000d22:	bf42      	ittt	mi
 8000d24:	6833      	ldrmi	r3, [r6, #0]
 8000d26:	3302      	addmi	r3, #2
 8000d28:	6033      	strmi	r3, [r6, #0]
 8000d2a:	6825      	ldr	r5, [r4, #0]
 8000d2c:	f015 0506 	ands.w	r5, r5, #6
 8000d30:	d106      	bne.n	8000d40 <_printf_common+0x48>
 8000d32:	f104 0a19 	add.w	sl, r4, #25
 8000d36:	68e3      	ldr	r3, [r4, #12]
 8000d38:	6832      	ldr	r2, [r6, #0]
 8000d3a:	1a9b      	subs	r3, r3, r2
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	dc26      	bgt.n	8000d8e <_printf_common+0x96>
 8000d40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d44:	1e13      	subs	r3, r2, #0
 8000d46:	6822      	ldr	r2, [r4, #0]
 8000d48:	bf18      	it	ne
 8000d4a:	2301      	movne	r3, #1
 8000d4c:	0692      	lsls	r2, r2, #26
 8000d4e:	d42b      	bmi.n	8000da8 <_printf_common+0xb0>
 8000d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d54:	4649      	mov	r1, r9
 8000d56:	4638      	mov	r0, r7
 8000d58:	47c0      	blx	r8
 8000d5a:	3001      	adds	r0, #1
 8000d5c:	d01e      	beq.n	8000d9c <_printf_common+0xa4>
 8000d5e:	6823      	ldr	r3, [r4, #0]
 8000d60:	68e5      	ldr	r5, [r4, #12]
 8000d62:	6832      	ldr	r2, [r6, #0]
 8000d64:	f003 0306 	and.w	r3, r3, #6
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	bf08      	it	eq
 8000d6c:	1aad      	subeq	r5, r5, r2
 8000d6e:	68a3      	ldr	r3, [r4, #8]
 8000d70:	6922      	ldr	r2, [r4, #16]
 8000d72:	bf0c      	ite	eq
 8000d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d78:	2500      	movne	r5, #0
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	bfc4      	itt	gt
 8000d7e:	1a9b      	subgt	r3, r3, r2
 8000d80:	18ed      	addgt	r5, r5, r3
 8000d82:	2600      	movs	r6, #0
 8000d84:	341a      	adds	r4, #26
 8000d86:	42b5      	cmp	r5, r6
 8000d88:	d11a      	bne.n	8000dc0 <_printf_common+0xc8>
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	e008      	b.n	8000da0 <_printf_common+0xa8>
 8000d8e:	2301      	movs	r3, #1
 8000d90:	4652      	mov	r2, sl
 8000d92:	4649      	mov	r1, r9
 8000d94:	4638      	mov	r0, r7
 8000d96:	47c0      	blx	r8
 8000d98:	3001      	adds	r0, #1
 8000d9a:	d103      	bne.n	8000da4 <_printf_common+0xac>
 8000d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	3501      	adds	r5, #1
 8000da6:	e7c6      	b.n	8000d36 <_printf_common+0x3e>
 8000da8:	18e1      	adds	r1, r4, r3
 8000daa:	1c5a      	adds	r2, r3, #1
 8000dac:	2030      	movs	r0, #48	; 0x30
 8000dae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000db2:	4422      	add	r2, r4
 8000db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	e7c7      	b.n	8000d50 <_printf_common+0x58>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	4622      	mov	r2, r4
 8000dc4:	4649      	mov	r1, r9
 8000dc6:	4638      	mov	r0, r7
 8000dc8:	47c0      	blx	r8
 8000dca:	3001      	adds	r0, #1
 8000dcc:	d0e6      	beq.n	8000d9c <_printf_common+0xa4>
 8000dce:	3601      	adds	r6, #1
 8000dd0:	e7d9      	b.n	8000d86 <_printf_common+0x8e>
	...

08000dd4 <_printf_i>:
 8000dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	7e0f      	ldrb	r7, [r1, #24]
 8000dda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ddc:	2f78      	cmp	r7, #120	; 0x78
 8000dde:	4691      	mov	r9, r2
 8000de0:	4680      	mov	r8, r0
 8000de2:	460c      	mov	r4, r1
 8000de4:	469a      	mov	sl, r3
 8000de6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000dea:	d807      	bhi.n	8000dfc <_printf_i+0x28>
 8000dec:	2f62      	cmp	r7, #98	; 0x62
 8000dee:	d80a      	bhi.n	8000e06 <_printf_i+0x32>
 8000df0:	2f00      	cmp	r7, #0
 8000df2:	f000 80d8 	beq.w	8000fa6 <_printf_i+0x1d2>
 8000df6:	2f58      	cmp	r7, #88	; 0x58
 8000df8:	f000 80a3 	beq.w	8000f42 <_printf_i+0x16e>
 8000dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e04:	e03a      	b.n	8000e7c <_printf_i+0xa8>
 8000e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e0a:	2b15      	cmp	r3, #21
 8000e0c:	d8f6      	bhi.n	8000dfc <_printf_i+0x28>
 8000e0e:	a101      	add	r1, pc, #4	; (adr r1, 8000e14 <_printf_i+0x40>)
 8000e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e14:	08000e6d 	.word	0x08000e6d
 8000e18:	08000e81 	.word	0x08000e81
 8000e1c:	08000dfd 	.word	0x08000dfd
 8000e20:	08000dfd 	.word	0x08000dfd
 8000e24:	08000dfd 	.word	0x08000dfd
 8000e28:	08000dfd 	.word	0x08000dfd
 8000e2c:	08000e81 	.word	0x08000e81
 8000e30:	08000dfd 	.word	0x08000dfd
 8000e34:	08000dfd 	.word	0x08000dfd
 8000e38:	08000dfd 	.word	0x08000dfd
 8000e3c:	08000dfd 	.word	0x08000dfd
 8000e40:	08000f8d 	.word	0x08000f8d
 8000e44:	08000eb1 	.word	0x08000eb1
 8000e48:	08000f6f 	.word	0x08000f6f
 8000e4c:	08000dfd 	.word	0x08000dfd
 8000e50:	08000dfd 	.word	0x08000dfd
 8000e54:	08000faf 	.word	0x08000faf
 8000e58:	08000dfd 	.word	0x08000dfd
 8000e5c:	08000eb1 	.word	0x08000eb1
 8000e60:	08000dfd 	.word	0x08000dfd
 8000e64:	08000dfd 	.word	0x08000dfd
 8000e68:	08000f77 	.word	0x08000f77
 8000e6c:	682b      	ldr	r3, [r5, #0]
 8000e6e:	1d1a      	adds	r2, r3, #4
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	602a      	str	r2, [r5, #0]
 8000e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e0a3      	b.n	8000fc8 <_printf_i+0x1f4>
 8000e80:	6820      	ldr	r0, [r4, #0]
 8000e82:	6829      	ldr	r1, [r5, #0]
 8000e84:	0606      	lsls	r6, r0, #24
 8000e86:	f101 0304 	add.w	r3, r1, #4
 8000e8a:	d50a      	bpl.n	8000ea2 <_printf_i+0xce>
 8000e8c:	680e      	ldr	r6, [r1, #0]
 8000e8e:	602b      	str	r3, [r5, #0]
 8000e90:	2e00      	cmp	r6, #0
 8000e92:	da03      	bge.n	8000e9c <_printf_i+0xc8>
 8000e94:	232d      	movs	r3, #45	; 0x2d
 8000e96:	4276      	negs	r6, r6
 8000e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e9c:	485e      	ldr	r0, [pc, #376]	; (8001018 <_printf_i+0x244>)
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	e019      	b.n	8000ed6 <_printf_i+0x102>
 8000ea2:	680e      	ldr	r6, [r1, #0]
 8000ea4:	602b      	str	r3, [r5, #0]
 8000ea6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000eaa:	bf18      	it	ne
 8000eac:	b236      	sxthne	r6, r6
 8000eae:	e7ef      	b.n	8000e90 <_printf_i+0xbc>
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	6820      	ldr	r0, [r4, #0]
 8000eb4:	1d19      	adds	r1, r3, #4
 8000eb6:	6029      	str	r1, [r5, #0]
 8000eb8:	0601      	lsls	r1, r0, #24
 8000eba:	d501      	bpl.n	8000ec0 <_printf_i+0xec>
 8000ebc:	681e      	ldr	r6, [r3, #0]
 8000ebe:	e002      	b.n	8000ec6 <_printf_i+0xf2>
 8000ec0:	0646      	lsls	r6, r0, #25
 8000ec2:	d5fb      	bpl.n	8000ebc <_printf_i+0xe8>
 8000ec4:	881e      	ldrh	r6, [r3, #0]
 8000ec6:	4854      	ldr	r0, [pc, #336]	; (8001018 <_printf_i+0x244>)
 8000ec8:	2f6f      	cmp	r7, #111	; 0x6f
 8000eca:	bf0c      	ite	eq
 8000ecc:	2308      	moveq	r3, #8
 8000ece:	230a      	movne	r3, #10
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ed6:	6865      	ldr	r5, [r4, #4]
 8000ed8:	60a5      	str	r5, [r4, #8]
 8000eda:	2d00      	cmp	r5, #0
 8000edc:	bfa2      	ittt	ge
 8000ede:	6821      	ldrge	r1, [r4, #0]
 8000ee0:	f021 0104 	bicge.w	r1, r1, #4
 8000ee4:	6021      	strge	r1, [r4, #0]
 8000ee6:	b90e      	cbnz	r6, 8000eec <_printf_i+0x118>
 8000ee8:	2d00      	cmp	r5, #0
 8000eea:	d04d      	beq.n	8000f88 <_printf_i+0x1b4>
 8000eec:	4615      	mov	r5, r2
 8000eee:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ef2:	fb03 6711 	mls	r7, r3, r1, r6
 8000ef6:	5dc7      	ldrb	r7, [r0, r7]
 8000ef8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000efc:	4637      	mov	r7, r6
 8000efe:	42bb      	cmp	r3, r7
 8000f00:	460e      	mov	r6, r1
 8000f02:	d9f4      	bls.n	8000eee <_printf_i+0x11a>
 8000f04:	2b08      	cmp	r3, #8
 8000f06:	d10b      	bne.n	8000f20 <_printf_i+0x14c>
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	07de      	lsls	r6, r3, #31
 8000f0c:	d508      	bpl.n	8000f20 <_printf_i+0x14c>
 8000f0e:	6923      	ldr	r3, [r4, #16]
 8000f10:	6861      	ldr	r1, [r4, #4]
 8000f12:	4299      	cmp	r1, r3
 8000f14:	bfde      	ittt	le
 8000f16:	2330      	movle	r3, #48	; 0x30
 8000f18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f20:	1b52      	subs	r2, r2, r5
 8000f22:	6122      	str	r2, [r4, #16]
 8000f24:	f8cd a000 	str.w	sl, [sp]
 8000f28:	464b      	mov	r3, r9
 8000f2a:	aa03      	add	r2, sp, #12
 8000f2c:	4621      	mov	r1, r4
 8000f2e:	4640      	mov	r0, r8
 8000f30:	f7ff fee2 	bl	8000cf8 <_printf_common>
 8000f34:	3001      	adds	r0, #1
 8000f36:	d14c      	bne.n	8000fd2 <_printf_i+0x1fe>
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	b004      	add	sp, #16
 8000f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f42:	4835      	ldr	r0, [pc, #212]	; (8001018 <_printf_i+0x244>)
 8000f44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000f48:	6829      	ldr	r1, [r5, #0]
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f50:	6029      	str	r1, [r5, #0]
 8000f52:	061d      	lsls	r5, r3, #24
 8000f54:	d514      	bpl.n	8000f80 <_printf_i+0x1ac>
 8000f56:	07df      	lsls	r7, r3, #31
 8000f58:	bf44      	itt	mi
 8000f5a:	f043 0320 	orrmi.w	r3, r3, #32
 8000f5e:	6023      	strmi	r3, [r4, #0]
 8000f60:	b91e      	cbnz	r6, 8000f6a <_printf_i+0x196>
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	f023 0320 	bic.w	r3, r3, #32
 8000f68:	6023      	str	r3, [r4, #0]
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	e7b0      	b.n	8000ed0 <_printf_i+0xfc>
 8000f6e:	6823      	ldr	r3, [r4, #0]
 8000f70:	f043 0320 	orr.w	r3, r3, #32
 8000f74:	6023      	str	r3, [r4, #0]
 8000f76:	2378      	movs	r3, #120	; 0x78
 8000f78:	4828      	ldr	r0, [pc, #160]	; (800101c <_printf_i+0x248>)
 8000f7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f7e:	e7e3      	b.n	8000f48 <_printf_i+0x174>
 8000f80:	0659      	lsls	r1, r3, #25
 8000f82:	bf48      	it	mi
 8000f84:	b2b6      	uxthmi	r6, r6
 8000f86:	e7e6      	b.n	8000f56 <_printf_i+0x182>
 8000f88:	4615      	mov	r5, r2
 8000f8a:	e7bb      	b.n	8000f04 <_printf_i+0x130>
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	6826      	ldr	r6, [r4, #0]
 8000f90:	6961      	ldr	r1, [r4, #20]
 8000f92:	1d18      	adds	r0, r3, #4
 8000f94:	6028      	str	r0, [r5, #0]
 8000f96:	0635      	lsls	r5, r6, #24
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	d501      	bpl.n	8000fa0 <_printf_i+0x1cc>
 8000f9c:	6019      	str	r1, [r3, #0]
 8000f9e:	e002      	b.n	8000fa6 <_printf_i+0x1d2>
 8000fa0:	0670      	lsls	r0, r6, #25
 8000fa2:	d5fb      	bpl.n	8000f9c <_printf_i+0x1c8>
 8000fa4:	8019      	strh	r1, [r3, #0]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	6123      	str	r3, [r4, #16]
 8000faa:	4615      	mov	r5, r2
 8000fac:	e7ba      	b.n	8000f24 <_printf_i+0x150>
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	1d1a      	adds	r2, r3, #4
 8000fb2:	602a      	str	r2, [r5, #0]
 8000fb4:	681d      	ldr	r5, [r3, #0]
 8000fb6:	6862      	ldr	r2, [r4, #4]
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4628      	mov	r0, r5
 8000fbc:	f7ff f918 	bl	80001f0 <memchr>
 8000fc0:	b108      	cbz	r0, 8000fc6 <_printf_i+0x1f2>
 8000fc2:	1b40      	subs	r0, r0, r5
 8000fc4:	6060      	str	r0, [r4, #4]
 8000fc6:	6863      	ldr	r3, [r4, #4]
 8000fc8:	6123      	str	r3, [r4, #16]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fd0:	e7a8      	b.n	8000f24 <_printf_i+0x150>
 8000fd2:	6923      	ldr	r3, [r4, #16]
 8000fd4:	462a      	mov	r2, r5
 8000fd6:	4649      	mov	r1, r9
 8000fd8:	4640      	mov	r0, r8
 8000fda:	47d0      	blx	sl
 8000fdc:	3001      	adds	r0, #1
 8000fde:	d0ab      	beq.n	8000f38 <_printf_i+0x164>
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	079b      	lsls	r3, r3, #30
 8000fe4:	d413      	bmi.n	800100e <_printf_i+0x23a>
 8000fe6:	68e0      	ldr	r0, [r4, #12]
 8000fe8:	9b03      	ldr	r3, [sp, #12]
 8000fea:	4298      	cmp	r0, r3
 8000fec:	bfb8      	it	lt
 8000fee:	4618      	movlt	r0, r3
 8000ff0:	e7a4      	b.n	8000f3c <_printf_i+0x168>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	4632      	mov	r2, r6
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	4640      	mov	r0, r8
 8000ffa:	47d0      	blx	sl
 8000ffc:	3001      	adds	r0, #1
 8000ffe:	d09b      	beq.n	8000f38 <_printf_i+0x164>
 8001000:	3501      	adds	r5, #1
 8001002:	68e3      	ldr	r3, [r4, #12]
 8001004:	9903      	ldr	r1, [sp, #12]
 8001006:	1a5b      	subs	r3, r3, r1
 8001008:	42ab      	cmp	r3, r5
 800100a:	dcf2      	bgt.n	8000ff2 <_printf_i+0x21e>
 800100c:	e7eb      	b.n	8000fe6 <_printf_i+0x212>
 800100e:	2500      	movs	r5, #0
 8001010:	f104 0619 	add.w	r6, r4, #25
 8001014:	e7f5      	b.n	8001002 <_printf_i+0x22e>
 8001016:	bf00      	nop
 8001018:	08001320 	.word	0x08001320
 800101c:	08001331 	.word	0x08001331

08001020 <memcpy>:
 8001020:	440a      	add	r2, r1
 8001022:	4291      	cmp	r1, r2
 8001024:	f100 33ff 	add.w	r3, r0, #4294967295
 8001028:	d100      	bne.n	800102c <memcpy+0xc>
 800102a:	4770      	bx	lr
 800102c:	b510      	push	{r4, lr}
 800102e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001036:	4291      	cmp	r1, r2
 8001038:	d1f9      	bne.n	800102e <memcpy+0xe>
 800103a:	bd10      	pop	{r4, pc}

0800103c <memmove>:
 800103c:	4288      	cmp	r0, r1
 800103e:	b510      	push	{r4, lr}
 8001040:	eb01 0402 	add.w	r4, r1, r2
 8001044:	d902      	bls.n	800104c <memmove+0x10>
 8001046:	4284      	cmp	r4, r0
 8001048:	4623      	mov	r3, r4
 800104a:	d807      	bhi.n	800105c <memmove+0x20>
 800104c:	1e43      	subs	r3, r0, #1
 800104e:	42a1      	cmp	r1, r4
 8001050:	d008      	beq.n	8001064 <memmove+0x28>
 8001052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800105a:	e7f8      	b.n	800104e <memmove+0x12>
 800105c:	4402      	add	r2, r0
 800105e:	4601      	mov	r1, r0
 8001060:	428a      	cmp	r2, r1
 8001062:	d100      	bne.n	8001066 <memmove+0x2a>
 8001064:	bd10      	pop	{r4, pc}
 8001066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800106a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800106e:	e7f7      	b.n	8001060 <memmove+0x24>

08001070 <_free_r>:
 8001070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001072:	2900      	cmp	r1, #0
 8001074:	d044      	beq.n	8001100 <_free_r+0x90>
 8001076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800107a:	9001      	str	r0, [sp, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	f1a1 0404 	sub.w	r4, r1, #4
 8001082:	bfb8      	it	lt
 8001084:	18e4      	addlt	r4, r4, r3
 8001086:	f000 f913 	bl	80012b0 <__malloc_lock>
 800108a:	4a1e      	ldr	r2, [pc, #120]	; (8001104 <_free_r+0x94>)
 800108c:	9801      	ldr	r0, [sp, #4]
 800108e:	6813      	ldr	r3, [r2, #0]
 8001090:	b933      	cbnz	r3, 80010a0 <_free_r+0x30>
 8001092:	6063      	str	r3, [r4, #4]
 8001094:	6014      	str	r4, [r2, #0]
 8001096:	b003      	add	sp, #12
 8001098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800109c:	f000 b90e 	b.w	80012bc <__malloc_unlock>
 80010a0:	42a3      	cmp	r3, r4
 80010a2:	d908      	bls.n	80010b6 <_free_r+0x46>
 80010a4:	6825      	ldr	r5, [r4, #0]
 80010a6:	1961      	adds	r1, r4, r5
 80010a8:	428b      	cmp	r3, r1
 80010aa:	bf01      	itttt	eq
 80010ac:	6819      	ldreq	r1, [r3, #0]
 80010ae:	685b      	ldreq	r3, [r3, #4]
 80010b0:	1949      	addeq	r1, r1, r5
 80010b2:	6021      	streq	r1, [r4, #0]
 80010b4:	e7ed      	b.n	8001092 <_free_r+0x22>
 80010b6:	461a      	mov	r2, r3
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	b10b      	cbz	r3, 80010c0 <_free_r+0x50>
 80010bc:	42a3      	cmp	r3, r4
 80010be:	d9fa      	bls.n	80010b6 <_free_r+0x46>
 80010c0:	6811      	ldr	r1, [r2, #0]
 80010c2:	1855      	adds	r5, r2, r1
 80010c4:	42a5      	cmp	r5, r4
 80010c6:	d10b      	bne.n	80010e0 <_free_r+0x70>
 80010c8:	6824      	ldr	r4, [r4, #0]
 80010ca:	4421      	add	r1, r4
 80010cc:	1854      	adds	r4, r2, r1
 80010ce:	42a3      	cmp	r3, r4
 80010d0:	6011      	str	r1, [r2, #0]
 80010d2:	d1e0      	bne.n	8001096 <_free_r+0x26>
 80010d4:	681c      	ldr	r4, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	6053      	str	r3, [r2, #4]
 80010da:	4421      	add	r1, r4
 80010dc:	6011      	str	r1, [r2, #0]
 80010de:	e7da      	b.n	8001096 <_free_r+0x26>
 80010e0:	d902      	bls.n	80010e8 <_free_r+0x78>
 80010e2:	230c      	movs	r3, #12
 80010e4:	6003      	str	r3, [r0, #0]
 80010e6:	e7d6      	b.n	8001096 <_free_r+0x26>
 80010e8:	6825      	ldr	r5, [r4, #0]
 80010ea:	1961      	adds	r1, r4, r5
 80010ec:	428b      	cmp	r3, r1
 80010ee:	bf04      	itt	eq
 80010f0:	6819      	ldreq	r1, [r3, #0]
 80010f2:	685b      	ldreq	r3, [r3, #4]
 80010f4:	6063      	str	r3, [r4, #4]
 80010f6:	bf04      	itt	eq
 80010f8:	1949      	addeq	r1, r1, r5
 80010fa:	6021      	streq	r1, [r4, #0]
 80010fc:	6054      	str	r4, [r2, #4]
 80010fe:	e7ca      	b.n	8001096 <_free_r+0x26>
 8001100:	b003      	add	sp, #12
 8001102:	bd30      	pop	{r4, r5, pc}
 8001104:	20000090 	.word	0x20000090

08001108 <sbrk_aligned>:
 8001108:	b570      	push	{r4, r5, r6, lr}
 800110a:	4e0e      	ldr	r6, [pc, #56]	; (8001144 <sbrk_aligned+0x3c>)
 800110c:	460c      	mov	r4, r1
 800110e:	6831      	ldr	r1, [r6, #0]
 8001110:	4605      	mov	r5, r0
 8001112:	b911      	cbnz	r1, 800111a <sbrk_aligned+0x12>
 8001114:	f000 f8bc 	bl	8001290 <_sbrk_r>
 8001118:	6030      	str	r0, [r6, #0]
 800111a:	4621      	mov	r1, r4
 800111c:	4628      	mov	r0, r5
 800111e:	f000 f8b7 	bl	8001290 <_sbrk_r>
 8001122:	1c43      	adds	r3, r0, #1
 8001124:	d00a      	beq.n	800113c <sbrk_aligned+0x34>
 8001126:	1cc4      	adds	r4, r0, #3
 8001128:	f024 0403 	bic.w	r4, r4, #3
 800112c:	42a0      	cmp	r0, r4
 800112e:	d007      	beq.n	8001140 <sbrk_aligned+0x38>
 8001130:	1a21      	subs	r1, r4, r0
 8001132:	4628      	mov	r0, r5
 8001134:	f000 f8ac 	bl	8001290 <_sbrk_r>
 8001138:	3001      	adds	r0, #1
 800113a:	d101      	bne.n	8001140 <sbrk_aligned+0x38>
 800113c:	f04f 34ff 	mov.w	r4, #4294967295
 8001140:	4620      	mov	r0, r4
 8001142:	bd70      	pop	{r4, r5, r6, pc}
 8001144:	20000094 	.word	0x20000094

08001148 <_malloc_r>:
 8001148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800114c:	1ccd      	adds	r5, r1, #3
 800114e:	f025 0503 	bic.w	r5, r5, #3
 8001152:	3508      	adds	r5, #8
 8001154:	2d0c      	cmp	r5, #12
 8001156:	bf38      	it	cc
 8001158:	250c      	movcc	r5, #12
 800115a:	2d00      	cmp	r5, #0
 800115c:	4607      	mov	r7, r0
 800115e:	db01      	blt.n	8001164 <_malloc_r+0x1c>
 8001160:	42a9      	cmp	r1, r5
 8001162:	d905      	bls.n	8001170 <_malloc_r+0x28>
 8001164:	230c      	movs	r3, #12
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	2600      	movs	r6, #0
 800116a:	4630      	mov	r0, r6
 800116c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001170:	4e2e      	ldr	r6, [pc, #184]	; (800122c <_malloc_r+0xe4>)
 8001172:	f000 f89d 	bl	80012b0 <__malloc_lock>
 8001176:	6833      	ldr	r3, [r6, #0]
 8001178:	461c      	mov	r4, r3
 800117a:	bb34      	cbnz	r4, 80011ca <_malloc_r+0x82>
 800117c:	4629      	mov	r1, r5
 800117e:	4638      	mov	r0, r7
 8001180:	f7ff ffc2 	bl	8001108 <sbrk_aligned>
 8001184:	1c43      	adds	r3, r0, #1
 8001186:	4604      	mov	r4, r0
 8001188:	d14d      	bne.n	8001226 <_malloc_r+0xde>
 800118a:	6834      	ldr	r4, [r6, #0]
 800118c:	4626      	mov	r6, r4
 800118e:	2e00      	cmp	r6, #0
 8001190:	d140      	bne.n	8001214 <_malloc_r+0xcc>
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	4631      	mov	r1, r6
 8001196:	4638      	mov	r0, r7
 8001198:	eb04 0803 	add.w	r8, r4, r3
 800119c:	f000 f878 	bl	8001290 <_sbrk_r>
 80011a0:	4580      	cmp	r8, r0
 80011a2:	d13a      	bne.n	800121a <_malloc_r+0xd2>
 80011a4:	6821      	ldr	r1, [r4, #0]
 80011a6:	3503      	adds	r5, #3
 80011a8:	1a6d      	subs	r5, r5, r1
 80011aa:	f025 0503 	bic.w	r5, r5, #3
 80011ae:	3508      	adds	r5, #8
 80011b0:	2d0c      	cmp	r5, #12
 80011b2:	bf38      	it	cc
 80011b4:	250c      	movcc	r5, #12
 80011b6:	4629      	mov	r1, r5
 80011b8:	4638      	mov	r0, r7
 80011ba:	f7ff ffa5 	bl	8001108 <sbrk_aligned>
 80011be:	3001      	adds	r0, #1
 80011c0:	d02b      	beq.n	800121a <_malloc_r+0xd2>
 80011c2:	6823      	ldr	r3, [r4, #0]
 80011c4:	442b      	add	r3, r5
 80011c6:	6023      	str	r3, [r4, #0]
 80011c8:	e00e      	b.n	80011e8 <_malloc_r+0xa0>
 80011ca:	6822      	ldr	r2, [r4, #0]
 80011cc:	1b52      	subs	r2, r2, r5
 80011ce:	d41e      	bmi.n	800120e <_malloc_r+0xc6>
 80011d0:	2a0b      	cmp	r2, #11
 80011d2:	d916      	bls.n	8001202 <_malloc_r+0xba>
 80011d4:	1961      	adds	r1, r4, r5
 80011d6:	42a3      	cmp	r3, r4
 80011d8:	6025      	str	r5, [r4, #0]
 80011da:	bf18      	it	ne
 80011dc:	6059      	strne	r1, [r3, #4]
 80011de:	6863      	ldr	r3, [r4, #4]
 80011e0:	bf08      	it	eq
 80011e2:	6031      	streq	r1, [r6, #0]
 80011e4:	5162      	str	r2, [r4, r5]
 80011e6:	604b      	str	r3, [r1, #4]
 80011e8:	4638      	mov	r0, r7
 80011ea:	f104 060b 	add.w	r6, r4, #11
 80011ee:	f000 f865 	bl	80012bc <__malloc_unlock>
 80011f2:	f026 0607 	bic.w	r6, r6, #7
 80011f6:	1d23      	adds	r3, r4, #4
 80011f8:	1af2      	subs	r2, r6, r3
 80011fa:	d0b6      	beq.n	800116a <_malloc_r+0x22>
 80011fc:	1b9b      	subs	r3, r3, r6
 80011fe:	50a3      	str	r3, [r4, r2]
 8001200:	e7b3      	b.n	800116a <_malloc_r+0x22>
 8001202:	6862      	ldr	r2, [r4, #4]
 8001204:	42a3      	cmp	r3, r4
 8001206:	bf0c      	ite	eq
 8001208:	6032      	streq	r2, [r6, #0]
 800120a:	605a      	strne	r2, [r3, #4]
 800120c:	e7ec      	b.n	80011e8 <_malloc_r+0xa0>
 800120e:	4623      	mov	r3, r4
 8001210:	6864      	ldr	r4, [r4, #4]
 8001212:	e7b2      	b.n	800117a <_malloc_r+0x32>
 8001214:	4634      	mov	r4, r6
 8001216:	6876      	ldr	r6, [r6, #4]
 8001218:	e7b9      	b.n	800118e <_malloc_r+0x46>
 800121a:	230c      	movs	r3, #12
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4638      	mov	r0, r7
 8001220:	f000 f84c 	bl	80012bc <__malloc_unlock>
 8001224:	e7a1      	b.n	800116a <_malloc_r+0x22>
 8001226:	6025      	str	r5, [r4, #0]
 8001228:	e7de      	b.n	80011e8 <_malloc_r+0xa0>
 800122a:	bf00      	nop
 800122c:	20000090 	.word	0x20000090

08001230 <_realloc_r>:
 8001230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001234:	4680      	mov	r8, r0
 8001236:	4614      	mov	r4, r2
 8001238:	460e      	mov	r6, r1
 800123a:	b921      	cbnz	r1, 8001246 <_realloc_r+0x16>
 800123c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001240:	4611      	mov	r1, r2
 8001242:	f7ff bf81 	b.w	8001148 <_malloc_r>
 8001246:	b92a      	cbnz	r2, 8001254 <_realloc_r+0x24>
 8001248:	f7ff ff12 	bl	8001070 <_free_r>
 800124c:	4625      	mov	r5, r4
 800124e:	4628      	mov	r0, r5
 8001250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001254:	f000 f838 	bl	80012c8 <_malloc_usable_size_r>
 8001258:	4284      	cmp	r4, r0
 800125a:	4607      	mov	r7, r0
 800125c:	d802      	bhi.n	8001264 <_realloc_r+0x34>
 800125e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001262:	d812      	bhi.n	800128a <_realloc_r+0x5a>
 8001264:	4621      	mov	r1, r4
 8001266:	4640      	mov	r0, r8
 8001268:	f7ff ff6e 	bl	8001148 <_malloc_r>
 800126c:	4605      	mov	r5, r0
 800126e:	2800      	cmp	r0, #0
 8001270:	d0ed      	beq.n	800124e <_realloc_r+0x1e>
 8001272:	42bc      	cmp	r4, r7
 8001274:	4622      	mov	r2, r4
 8001276:	4631      	mov	r1, r6
 8001278:	bf28      	it	cs
 800127a:	463a      	movcs	r2, r7
 800127c:	f7ff fed0 	bl	8001020 <memcpy>
 8001280:	4631      	mov	r1, r6
 8001282:	4640      	mov	r0, r8
 8001284:	f7ff fef4 	bl	8001070 <_free_r>
 8001288:	e7e1      	b.n	800124e <_realloc_r+0x1e>
 800128a:	4635      	mov	r5, r6
 800128c:	e7df      	b.n	800124e <_realloc_r+0x1e>
	...

08001290 <_sbrk_r>:
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	4d06      	ldr	r5, [pc, #24]	; (80012ac <_sbrk_r+0x1c>)
 8001294:	2300      	movs	r3, #0
 8001296:	4604      	mov	r4, r0
 8001298:	4608      	mov	r0, r1
 800129a:	602b      	str	r3, [r5, #0]
 800129c:	f7ff f856 	bl	800034c <_sbrk>
 80012a0:	1c43      	adds	r3, r0, #1
 80012a2:	d102      	bne.n	80012aa <_sbrk_r+0x1a>
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	b103      	cbz	r3, 80012aa <_sbrk_r+0x1a>
 80012a8:	6023      	str	r3, [r4, #0]
 80012aa:	bd38      	pop	{r3, r4, r5, pc}
 80012ac:	20000098 	.word	0x20000098

080012b0 <__malloc_lock>:
 80012b0:	4801      	ldr	r0, [pc, #4]	; (80012b8 <__malloc_lock+0x8>)
 80012b2:	f000 b811 	b.w	80012d8 <__retarget_lock_acquire_recursive>
 80012b6:	bf00      	nop
 80012b8:	2000009c 	.word	0x2000009c

080012bc <__malloc_unlock>:
 80012bc:	4801      	ldr	r0, [pc, #4]	; (80012c4 <__malloc_unlock+0x8>)
 80012be:	f000 b80c 	b.w	80012da <__retarget_lock_release_recursive>
 80012c2:	bf00      	nop
 80012c4:	2000009c 	.word	0x2000009c

080012c8 <_malloc_usable_size_r>:
 80012c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012cc:	1f18      	subs	r0, r3, #4
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	bfbc      	itt	lt
 80012d2:	580b      	ldrlt	r3, [r1, r0]
 80012d4:	18c0      	addlt	r0, r0, r3
 80012d6:	4770      	bx	lr

080012d8 <__retarget_lock_acquire_recursive>:
 80012d8:	4770      	bx	lr

080012da <__retarget_lock_release_recursive>:
 80012da:	4770      	bx	lr

080012dc <_init>:
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012de:	bf00      	nop
 80012e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012e2:	bc08      	pop	{r3}
 80012e4:	469e      	mov	lr, r3
 80012e6:	4770      	bx	lr

080012e8 <_fini>:
 80012e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ea:	bf00      	nop
 80012ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ee:	bc08      	pop	{r3}
 80012f0:	469e      	mov	lr, r3
 80012f2:	4770      	bx	lr
