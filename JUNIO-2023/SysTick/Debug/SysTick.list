
SysTick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001188  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001338  08001338  00011338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013b4  080013b4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080013b4  080013b4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013b4  080013b4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013b4  080013b4  000113b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013b8  080013b8  000113b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080013bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          0000003c  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b7c  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000098b  00000000  00000000  00021c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  000225a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000168  00000000  00000000  00022790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019b78  00000000  00000000  000228f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003198  00000000  00000000  0003c470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d6ec  00000000  00000000  0003f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000cccf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000908  00000000  00000000  000ccd44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001320 	.word	0x08001320

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08001320 	.word	0x08001320

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:

	return ch;
}
/*main function -----------------------------------------------*/
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
	uint32_t ticks;
	GPIO_ConfigTypedef_t lcdPin;
	//PD12->salida
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000296:	4b33      	ldr	r3, [pc, #204]	; (8000364 <main+0xd4>)
 8000298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029a:	4a32      	ldr	r2, [pc, #200]	; (8000364 <main+0xd4>)
 800029c:	f043 0308 	orr.w	r3, r3, #8
 80002a0:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOD->MODER &=~ GPIO_MODER_MODE12;
 80002a2:	4b31      	ldr	r3, [pc, #196]	; (8000368 <main+0xd8>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a30      	ldr	r2, [pc, #192]	; (8000368 <main+0xd8>)
 80002a8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002ac:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= GPIO_MODER_MODE12_0;
 80002ae:	4b2e      	ldr	r3, [pc, #184]	; (8000368 <main+0xd8>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4a2d      	ldr	r2, [pc, #180]	; (8000368 <main+0xd8>)
 80002b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002b8:	6013      	str	r3, [r2, #0]
	/**
	 * ticks = 16MHz * 0.001
	 * ticks = 16000
	 */
	ticks = 16000;
 80002ba:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80002be:	60fb      	str	r3, [r7, #12]
	SysTick_Init(ticks);
 80002c0:	68f8      	ldr	r0, [r7, #12]
 80002c2:	f000 fb47 	bl	8000954 <SysTick_Init>

	ticks = GetTicks();
 80002c6:	f000 fb75 	bl	80009b4 <GetTicks>
 80002ca:	60f8      	str	r0, [r7, #12]

	/*Lcd init -----------------------------------*/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80002cc:	4b25      	ldr	r3, [pc, #148]	; (8000364 <main+0xd4>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d0:	4a24      	ldr	r2, [pc, #144]	; (8000364 <main+0xd4>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6313      	str	r3, [r2, #48]	; 0x30
	lcdPin.pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 80002d8:	237e      	movs	r3, #126	; 0x7e
 80002da:	80bb      	strh	r3, [r7, #4]
	lcdPin.mode = GPIO_MODE_OUTPUT;
 80002dc:	2301      	movs	r3, #1
 80002de:	71bb      	strb	r3, [r7, #6]
	lcdPin.pullup = GPIO_PU_NONE;
 80002e0:	2300      	movs	r3, #0
 80002e2:	727b      	strb	r3, [r7, #9]
	lcdPin.speed = GPIO_SPEED_HIGH;
 80002e4:	2302      	movs	r3, #2
 80002e6:	723b      	strb	r3, [r7, #8]
	lcdPin.outputType = GPIO_OT_PP;
 80002e8:	2300      	movs	r3, #0
 80002ea:	71fb      	strb	r3, [r7, #7]
	BSP_PinInit(GPIOA, &lcdPin);
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	4619      	mov	r1, r3
 80002f0:	481e      	ldr	r0, [pc, #120]	; (800036c <main+0xdc>)
 80002f2:	f000 f8be 	bl	8000472 <BSP_PinInit>

	LCD_Init(16, 2);
 80002f6:	2102      	movs	r1, #2
 80002f8:	2010      	movs	r0, #16
 80002fa:	f000 f95f 	bl	80005bc <LCD_Init>

	LCD_Printf(0, 0, "hola mundo\r\nQUINO B.Jeffry");
 80002fe:	4a1c      	ldr	r2, [pc, #112]	; (8000370 <main+0xe0>)
 8000300:	2100      	movs	r1, #0
 8000302:	2000      	movs	r0, #0
 8000304:	f000 fa3c 	bl	8000780 <LCD_Printf>
	delay_ms(1000);
 8000308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030c:	f000 fb3c 	bl	8000988 <delay_ms>
	LCD_Clear();
 8000310:	f000 f9b8 	bl	8000684 <LCD_Clear>
	LCD_Printf(0, 0, "STM32F407VG\r\nJUNIO-2023");
 8000314:	4a17      	ldr	r2, [pc, #92]	; (8000374 <main+0xe4>)
 8000316:	2100      	movs	r1, #0
 8000318:	2000      	movs	r0, #0
 800031a:	f000 fa31 	bl	8000780 <LCD_Printf>
	delay_ms(1000);
 800031e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000322:	f000 fb31 	bl	8000988 <delay_ms>
	LCD_Clear();
 8000326:	f000 f9ad 	bl	8000684 <LCD_Clear>
	LCD_Printf(0, 0, "#BLINK");
 800032a:	4a13      	ldr	r2, [pc, #76]	; (8000378 <main+0xe8>)
 800032c:	2100      	movs	r1, #0
 800032e:	2000      	movs	r0, #0
 8000330:	f000 fa26 	bl	8000780 <LCD_Printf>
    /* Loop forever */
	for(;;){
		//leer adc
		if((GetTicks() - ticks)>= 500){
 8000334:	f000 fb3e 	bl	80009b4 <GetTicks>
 8000338:	4602      	mov	r2, r0
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000342:	d3f7      	bcc.n	8000334 <main+0xa4>
			ticks = GetTicks();
 8000344:	f000 fb36 	bl	80009b4 <GetTicks>
 8000348:	60f8      	str	r0, [r7, #12]
			GPIOD->ODR ^= GPIO_ODR_OD12;
 800034a:	4b07      	ldr	r3, [pc, #28]	; (8000368 <main+0xd8>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a06      	ldr	r2, [pc, #24]	; (8000368 <main+0xd8>)
 8000350:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000354:	6153      	str	r3, [r2, #20]
			LCD_Printf(0, 1, "time: %u ms", ticks);
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	4a08      	ldr	r2, [pc, #32]	; (800037c <main+0xec>)
 800035a:	2101      	movs	r1, #1
 800035c:	2000      	movs	r0, #0
 800035e:	f000 fa0f 	bl	8000780 <LCD_Printf>
		if((GetTicks() - ticks)>= 500){
 8000362:	e7e7      	b.n	8000334 <main+0xa4>
 8000364:	40023800 	.word	0x40023800
 8000368:	40020c00 	.word	0x40020c00
 800036c:	40020000 	.word	0x40020000
 8000370:	08001338 	.word	0x08001338
 8000374:	08001354 	.word	0x08001354
 8000378:	0800136c 	.word	0x0800136c
 800037c:	08001374 	.word	0x08001374

08000380 <SysTick_Handler>:
 *      Author: jeffr
 */
#include "stm32f4xx.h"
#include "SysTick.h"

void SysTick_Handler(void){
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	TicksInc(1);
 8000384:	2001      	movs	r0, #1
 8000386:	f000 fb21 	bl	80009cc <TicksInc>
	//todo

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
	...

08000390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000398:	4a14      	ldr	r2, [pc, #80]	; (80003ec <_sbrk+0x5c>)
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <_sbrk+0x60>)
 800039c:	1ad3      	subs	r3, r2, r3
 800039e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003a4:	4b13      	ldr	r3, [pc, #76]	; (80003f4 <_sbrk+0x64>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d102      	bne.n	80003b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <_sbrk+0x64>)
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <_sbrk+0x68>)
 80003b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <_sbrk+0x64>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	693a      	ldr	r2, [r7, #16]
 80003bc:	429a      	cmp	r2, r3
 80003be:	d207      	bcs.n	80003d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003c0:	f000 fb16 	bl	80009f0 <__errno>
 80003c4:	4603      	mov	r3, r0
 80003c6:	220c      	movs	r2, #12
 80003c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295
 80003ce:	e009      	b.n	80003e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003d0:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <_sbrk+0x64>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003d6:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <_sbrk+0x64>)
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4413      	add	r3, r2
 80003de:	4a05      	ldr	r2, [pc, #20]	; (80003f4 <_sbrk+0x64>)
 80003e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003e2:	68fb      	ldr	r3, [r7, #12]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	3718      	adds	r7, #24
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20018000 	.word	0x20018000
 80003f0:	00000400 	.word	0x00000400
 80003f4:	20000080 	.word	0x20000080
 80003f8:	200000a0 	.word	0x200000a0

080003fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <SystemInit+0x20>)
 8000402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000406:	4a05      	ldr	r2, [pc, #20]	; (800041c <SystemInit+0x20>)
 8000408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800040c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000422:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000424:	f7ff ffea 	bl	80003fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000428:	480c      	ldr	r0, [pc, #48]	; (800045c <LoopForever+0x6>)
  ldr r1, =_edata
 800042a:	490d      	ldr	r1, [pc, #52]	; (8000460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <LoopForever+0xe>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000430:	e002      	b.n	8000438 <LoopCopyDataInit>

08000432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000436:	3304      	adds	r3, #4

08000438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800043c:	d3f9      	bcc.n	8000432 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800043e:	4a0a      	ldr	r2, [pc, #40]	; (8000468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000440:	4c0a      	ldr	r4, [pc, #40]	; (800046c <LoopForever+0x16>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000444:	e001      	b.n	800044a <LoopFillZerobss>

08000446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000448:	3204      	adds	r2, #4

0800044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800044c:	d3fb      	bcc.n	8000446 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800044e:	f000 fad5 	bl	80009fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000452:	f7ff ff1d 	bl	8000290 <main>

08000456 <LoopForever>:

LoopForever:
  b LoopForever
 8000456:	e7fe      	b.n	8000456 <LoopForever>
  ldr   r0, =_estack
 8000458:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800045c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000460:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000464:	080013bc 	.word	0x080013bc
  ldr r2, =_sbss
 8000468:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800046c:	200000a0 	.word	0x200000a0

08000470 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000470:	e7fe      	b.n	8000470 <ADC_IRQHandler>

08000472 <BSP_PinInit>:
}
/**
 * HAL (high abtractions layer)
 * LL
 */
void BSP_PinInit(GPIO_TypeDef *P,GPIO_ConfigTypedef_t *config){
 8000472:	b480      	push	{r7}
 8000474:	b087      	sub	sp, #28
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
	uint32_t iocurrent = 0x00U;
 8000480:	2300      	movs	r3, #0
 8000482:	60fb      	str	r3, [r7, #12]

	for(position = 0; position <16; position++){
 8000484:	2300      	movs	r3, #0
 8000486:	617b      	str	r3, [r7, #20]
 8000488:	e08e      	b.n	80005a8 <BSP_PinInit+0x136>
		ioposition = 0x1U<<position;
 800048a:	2201      	movs	r2, #1
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	fa02 f303 	lsl.w	r3, r2, r3
 8000492:	613b      	str	r3, [r7, #16]

		iocurrent = (uint32_t)(config->pin) & ioposition;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	881b      	ldrh	r3, [r3, #0]
 8000498:	461a      	mov	r2, r3
 800049a:	693b      	ldr	r3, [r7, #16]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]

		if(iocurrent == ioposition){
 80004a0:	68fa      	ldr	r2, [r7, #12]
 80004a2:	693b      	ldr	r3, [r7, #16]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d17c      	bne.n	80005a2 <BSP_PinInit+0x130>
			//Modo
			if(((config->mode & GPIO_MODE) == GPIO_MODE_OUTPUT) || ((config->mode & GPIO_MODE) == GPIO_MODE_AF)){
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
 80004ac:	f003 0303 	and.w	r3, r3, #3
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d005      	beq.n	80004c0 <BSP_PinInit+0x4e>
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	789b      	ldrb	r3, [r3, #2]
 80004b8:	f003 0303 	and.w	r3, r3, #3
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d12b      	bne.n	8000518 <BSP_PinInit+0xa6>
				//io speed
				P->OSPEEDR &=~(0x3<<(position * 2));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	697a      	ldr	r2, [r7, #20]
 80004c6:	0052      	lsls	r2, r2, #1
 80004c8:	2103      	movs	r1, #3
 80004ca:	fa01 f202 	lsl.w	r2, r1, r2
 80004ce:	43d2      	mvns	r2, r2
 80004d0:	401a      	ands	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	609a      	str	r2, [r3, #8]
				P->OSPEEDR |= config->speed<< (position * 2);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	683a      	ldr	r2, [r7, #0]
 80004dc:	7912      	ldrb	r2, [r2, #4]
 80004de:	4611      	mov	r1, r2
 80004e0:	697a      	ldr	r2, [r7, #20]
 80004e2:	0052      	lsls	r2, r2, #1
 80004e4:	fa01 f202 	lsl.w	r2, r1, r2
 80004e8:	431a      	orrs	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	609a      	str	r2, [r3, #8]
				//io type
				P->OTYPER &=~ (1<<(position ));
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	2101      	movs	r1, #1
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	43d2      	mvns	r2, r2
 80004fc:	401a      	ands	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	605a      	str	r2, [r3, #4]
				P->OTYPER |= config->outputType<<position;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	683a      	ldr	r2, [r7, #0]
 8000508:	78d2      	ldrb	r2, [r2, #3]
 800050a:	4611      	mov	r1, r2
 800050c:	697a      	ldr	r2, [r7, #20]
 800050e:	fa01 f202 	lsl.w	r2, r1, r2
 8000512:	431a      	orrs	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	605a      	str	r2, [r3, #4]
			}
			if((config->mode & GPIO_MODE) != GPIO_MODE_ANALOG){
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	789b      	ldrb	r3, [r3, #2]
 800051c:	f003 0303 	and.w	r3, r3, #3
 8000520:	2b03      	cmp	r3, #3
 8000522:	d016      	beq.n	8000552 <BSP_PinInit+0xe0>
				P->PUPDR &=~ (0x3U<< (position * 2));
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	68da      	ldr	r2, [r3, #12]
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	005b      	lsls	r3, r3, #1
 800052c:	2103      	movs	r1, #3
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	43db      	mvns	r3, r3
 8000534:	401a      	ands	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60da      	str	r2, [r3, #12]
				P->PUPDR |= config->pullup<< (position * 2);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	7952      	ldrb	r2, [r2, #5]
 8000542:	4611      	mov	r1, r2
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	0052      	lsls	r2, r2, #1
 8000548:	fa01 f202 	lsl.w	r2, r1, r2
 800054c:	431a      	orrs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	60da      	str	r2, [r3, #12]
			}
			if((config->mode & GPIO_MODE)  == GPIO_MODE_AF){
				//update actualizarse en una segunda version

			}
			if((config->mode &GPIO_MODE) == GPIO_MODE_ANALOG){
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	789b      	ldrb	r3, [r3, #2]
 8000556:	f003 0303 	and.w	r3, r3, #3
 800055a:	2b03      	cmp	r3, #3
 800055c:	d10a      	bne.n	8000574 <BSP_PinInit+0x102>
				P->PUPDR &=~ (0x3U<<(2 *position));
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	68da      	ldr	r2, [r3, #12]
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	2103      	movs	r1, #3
 8000568:	fa01 f303 	lsl.w	r3, r1, r3
 800056c:	43db      	mvns	r3, r3
 800056e:	401a      	ands	r2, r3
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	60da      	str	r2, [r3, #12]
			}
			P->MODER &=~ (0x3u<<(position * 2));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	2103      	movs	r1, #3
 800057e:	fa01 f303 	lsl.w	r3, r1, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	401a      	ands	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
			P->MODER |= config->mode << (position * 2);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	7892      	ldrb	r2, [r2, #2]
 8000592:	4611      	mov	r1, r2
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	0052      	lsls	r2, r2, #1
 8000598:	fa01 f202 	lsl.w	r2, r1, r2
 800059c:	431a      	orrs	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	601a      	str	r2, [r3, #0]
	for(position = 0; position <16; position++){
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	3301      	adds	r3, #1
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	2b0f      	cmp	r3, #15
 80005ac:	f67f af6d 	bls.w	800048a <BSP_PinInit+0x18>
		}
	}
	return;
 80005b0:	bf00      	nop
}
 80005b2:	371c      	adds	r7, #28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <LCD_Init>:
static void LCD_Data(uint8_t data);
static void LCD_CursorSet(uint8_t col, uint8_t row);


/*Function definition -------------------------------------------------*/
void LCD_Init(uint8_t cols, uint8_t rows) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
	/* At least 40ms */
	LCD_Delay(45);
 80005cc:	202d      	movs	r0, #45	; 0x2d
 80005ce:	f000 f965 	bl	800089c <LCD_Delay>

	/* Set LCD width and height */
	LCD_Opts.Rows = rows;
 80005d2:	4a2b      	ldr	r2, [pc, #172]	; (8000680 <LCD_Init+0xc4>)
 80005d4:	79bb      	ldrb	r3, [r7, #6]
 80005d6:	70d3      	strb	r3, [r2, #3]
	LCD_Opts.Cols = cols;
 80005d8:	4a29      	ldr	r2, [pc, #164]	; (8000680 <LCD_Init+0xc4>)
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	7113      	strb	r3, [r2, #4]

	/* Set cursor pointer to beginning for LCD */
	LCD_Opts.currentX = 0;
 80005de:	4b28      	ldr	r3, [pc, #160]	; (8000680 <LCD_Init+0xc4>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	715a      	strb	r2, [r3, #5]
	LCD_Opts.currentY = 0;
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <LCD_Init+0xc4>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	719a      	strb	r2, [r3, #6]


	LCD_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 80005ea:	4b25      	ldr	r3, [pc, #148]	; (8000680 <LCD_Init+0xc4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d906      	bls.n	8000604 <LCD_Init+0x48>
		LCD_Opts.DisplayFunction |= HD44780_2LINE;
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <LCD_Init+0xc4>)
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	f043 0308 	orr.w	r3, r3, #8
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <LCD_Init+0xc4>)
 8000602:	705a      	strb	r2, [r3, #1]
	}

	/* Try to set 4bit mode */
	LCD_nibble_write(0x03,0);
 8000604:	2100      	movs	r1, #0
 8000606:	2003      	movs	r0, #3
 8000608:	f000 f954 	bl	80008b4 <LCD_nibble_write>
	LCD_Delay(45);
 800060c:	202d      	movs	r0, #45	; 0x2d
 800060e:	f000 f945 	bl	800089c <LCD_Delay>

	/* Second try */
	LCD_nibble_write(0x03,0);
 8000612:	2100      	movs	r1, #0
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f94d 	bl	80008b4 <LCD_nibble_write>
	LCD_Delay(45);
 800061a:	202d      	movs	r0, #45	; 0x2d
 800061c:	f000 f93e 	bl	800089c <LCD_Delay>

	/* Third goo! */
	LCD_nibble_write(0x03,0);
 8000620:	2100      	movs	r1, #0
 8000622:	2003      	movs	r0, #3
 8000624:	f000 f946 	bl	80008b4 <LCD_nibble_write>
	LCD_Delay(45);
 8000628:	202d      	movs	r0, #45	; 0x2d
 800062a:	f000 f937 	bl	800089c <LCD_Delay>

	/* Set 4-bit interface */
	LCD_nibble_write(0x02,0);
 800062e:	2100      	movs	r1, #0
 8000630:	2002      	movs	r0, #2
 8000632:	f000 f93f 	bl	80008b4 <LCD_nibble_write>
	LCD_Delay(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f930 	bl	800089c <LCD_Delay>

	/* Set # lines, font size, etc. */
	LCD_Cmd(HD44780_FUNCTIONSET | LCD_Opts.DisplayFunction);
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <LCD_Init+0xc4>)
 800063e:	785b      	ldrb	r3, [r3, #1]
 8000640:	f043 0320 	orr.w	r3, r3, #32
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f8bb 	bl	80007c2 <LCD_Cmd>

	/* Turn the display on with no cursor or blinking default */
	LCD_Opts.DisplayControl = HD44780_DISPLAYON;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <LCD_Init+0xc4>)
 800064e:	2204      	movs	r2, #4
 8000650:	701a      	strb	r2, [r3, #0]
	LCD_DisplayOn();
 8000652:	f000 f87f 	bl	8000754 <LCD_DisplayOn>

	/* Clear lcd */
	LCD_Clear();
 8000656:	f000 f815 	bl	8000684 <LCD_Clear>

	/* Default font directions */
	LCD_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 800065a:	4b09      	ldr	r3, [pc, #36]	; (8000680 <LCD_Init+0xc4>)
 800065c:	2202      	movs	r2, #2
 800065e:	709a      	strb	r2, [r3, #2]
	LCD_Cmd(HD44780_ENTRYMODESET | LCD_Opts.DisplayMode);
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <LCD_Init+0xc4>)
 8000662:	789b      	ldrb	r3, [r3, #2]
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	b2db      	uxtb	r3, r3
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f8a9 	bl	80007c2 <LCD_Cmd>

	/* Delay */
	LCD_Delay(45);
 8000670:	202d      	movs	r0, #45	; 0x2d
 8000672:	f000 f913 	bl	800089c <LCD_Delay>
	return;
 8000676:	bf00      	nop
}
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000084 	.word	0x20000084

08000684 <LCD_Clear>:


void LCD_Clear(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	LCD_Cmd(HD44780_CLEARDISPLAY);
 8000688:	2001      	movs	r0, #1
 800068a:	f000 f89a 	bl	80007c2 <LCD_Cmd>
	LCD_Delay(3);
 800068e:	2003      	movs	r0, #3
 8000690:	f000 f904 	bl	800089c <LCD_Delay>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}

08000698 <LCD_Puts>:

void LCD_Puts(uint8_t x, uint8_t y, char* str) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	603a      	str	r2, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	460b      	mov	r3, r1
 80006a6:	71bb      	strb	r3, [r7, #6]
	LCD_CursorSet(x, y);
 80006a8:	79ba      	ldrb	r2, [r7, #6]
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	4611      	mov	r1, r2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f8c4 	bl	800083c <LCD_CursorSet>
	while (*str) {
 80006b4:	e042      	b.n	800073c <LCD_Puts+0xa4>
		if (LCD_Opts.currentX >= LCD_Opts.Cols) {
 80006b6:	4b26      	ldr	r3, [pc, #152]	; (8000750 <LCD_Puts+0xb8>)
 80006b8:	795a      	ldrb	r2, [r3, #5]
 80006ba:	4b25      	ldr	r3, [pc, #148]	; (8000750 <LCD_Puts+0xb8>)
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	429a      	cmp	r2, r3
 80006c0:	d310      	bcc.n	80006e4 <LCD_Puts+0x4c>
			LCD_Opts.currentX = 0;
 80006c2:	4b23      	ldr	r3, [pc, #140]	; (8000750 <LCD_Puts+0xb8>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	715a      	strb	r2, [r3, #5]
			LCD_Opts.currentY++;
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <LCD_Puts+0xb8>)
 80006ca:	799b      	ldrb	r3, [r3, #6]
 80006cc:	3301      	adds	r3, #1
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <LCD_Puts+0xb8>)
 80006d2:	719a      	strb	r2, [r3, #6]
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 80006d4:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <LCD_Puts+0xb8>)
 80006d6:	795b      	ldrb	r3, [r3, #5]
 80006d8:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <LCD_Puts+0xb8>)
 80006da:	7992      	ldrb	r2, [r2, #6]
 80006dc:	4611      	mov	r1, r2
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f8ac 	bl	800083c <LCD_CursorSet>
		}
		if (*str == '\n') {
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b0a      	cmp	r3, #10
 80006ea:	d10e      	bne.n	800070a <LCD_Puts+0x72>
			LCD_Opts.currentY++;
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <LCD_Puts+0xb8>)
 80006ee:	799b      	ldrb	r3, [r3, #6]
 80006f0:	3301      	adds	r3, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <LCD_Puts+0xb8>)
 80006f6:	719a      	strb	r2, [r3, #6]
			LCD_CursorSet(LCD_Opts.currentX, LCD_Opts.currentY);
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <LCD_Puts+0xb8>)
 80006fa:	795b      	ldrb	r3, [r3, #5]
 80006fc:	4a14      	ldr	r2, [pc, #80]	; (8000750 <LCD_Puts+0xb8>)
 80006fe:	7992      	ldrb	r2, [r2, #6]
 8000700:	4611      	mov	r1, r2
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f89a 	bl	800083c <LCD_CursorSet>
 8000708:	e015      	b.n	8000736 <LCD_Puts+0x9e>
		} else if (*str == '\r') {
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b0d      	cmp	r3, #13
 8000710:	d106      	bne.n	8000720 <LCD_Puts+0x88>
			LCD_CursorSet(0, LCD_Opts.currentY);
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <LCD_Puts+0xb8>)
 8000714:	799b      	ldrb	r3, [r3, #6]
 8000716:	4619      	mov	r1, r3
 8000718:	2000      	movs	r0, #0
 800071a:	f000 f88f 	bl	800083c <LCD_CursorSet>
 800071e:	e00a      	b.n	8000736 <LCD_Puts+0x9e>
		} else {
			LCD_Data(*str);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f86e 	bl	8000806 <LCD_Data>
			LCD_Opts.currentX++;
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <LCD_Puts+0xb8>)
 800072c:	795b      	ldrb	r3, [r3, #5]
 800072e:	3301      	adds	r3, #1
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <LCD_Puts+0xb8>)
 8000734:	715a      	strb	r2, [r3, #5]
		}
		str++;
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	603b      	str	r3, [r7, #0]
	while (*str) {
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1b8      	bne.n	80006b6 <LCD_Puts+0x1e>
	}
}
 8000744:	bf00      	nop
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000084 	.word	0x20000084

08000754 <LCD_DisplayOn>:


void LCD_DisplayOn(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	LCD_Opts.DisplayControl |= HD44780_DISPLAYON;
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <LCD_DisplayOn+0x28>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <LCD_DisplayOn+0x28>)
 8000764:	701a      	strb	r2, [r3, #0]
	LCD_Cmd(HD44780_DISPLAYCONTROL | LCD_Opts.DisplayControl);
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <LCD_DisplayOn+0x28>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	f043 0308 	orr.w	r3, r3, #8
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f826 	bl	80007c2 <LCD_Cmd>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000084 	.word	0x20000084

08000780 <LCD_Printf>:
	LCD_CursorSet(x, y);
	LCD_Data(location);
}


void LCD_Printf(uint8_t x, uint8_t y,char *format,...){
 8000780:	b40c      	push	{r2, r3}
 8000782:	b580      	push	{r7, lr}
 8000784:	b098      	sub	sp, #96	; 0x60
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	460a      	mov	r2, r1
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	4613      	mov	r3, r2
 8000790:	71bb      	strb	r3, [r7, #6]
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000792:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000796:	60fb      	str	r3, [r7, #12]
	vsprintf(str, format,args);
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f965 	bl	8000a70 <vsiprintf>
	LCD_Puts(x, y,str);
 80007a6:	f107 0210 	add.w	r2, r7, #16
 80007aa:	79b9      	ldrb	r1, [r7, #6]
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff72 	bl	8000698 <LCD_Puts>
	va_end(args);
}
 80007b4:	bf00      	nop
 80007b6:	3760      	adds	r7, #96	; 0x60
 80007b8:	46bd      	mov	sp, r7
 80007ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007be:	b002      	add	sp, #8
 80007c0:	4770      	bx	lr

080007c2 <LCD_Cmd>:

/***************************************************************/

/* Private functions */
static void LCD_Cmd(uint8_t cmd){
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write((cmd>>4) & 0x0F,0);
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	091b      	lsrs	r3, r3, #4
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f86d 	bl	80008b4 <LCD_nibble_write>
	LCD_nibble_write(cmd & 0x0F,0);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 030f 	and.w	r3, r3, #15
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f865 	bl	80008b4 <LCD_nibble_write>
	if(cmd < 4)
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b03      	cmp	r3, #3
 80007ee:	d803      	bhi.n	80007f8 <LCD_Cmd+0x36>
		LCD_Delay(3);
 80007f0:	2003      	movs	r0, #3
 80007f2:	f000 f853 	bl	800089c <LCD_Delay>
	else
		LCD_Delay(2);
	return;
 80007f6:	e003      	b.n	8000800 <LCD_Cmd+0x3e>
		LCD_Delay(2);
 80007f8:	2002      	movs	r0, #2
 80007fa:	f000 f84f 	bl	800089c <LCD_Delay>
	return;
 80007fe:	bf00      	nop
}
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <LCD_Data>:

static void LCD_Data(uint8_t data){
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
	LCD_nibble_write((data>>4) & 0x0F,1);
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	091b      	lsrs	r3, r3, #4
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2101      	movs	r1, #1
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f84b 	bl	80008b4 <LCD_nibble_write>
	LCD_nibble_write(data & 0x0F,1);
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	f003 030f 	and.w	r3, r3, #15
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2101      	movs	r1, #1
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f843 	bl	80008b4 <LCD_nibble_write>
	LCD_Delay(1);
 800082e:	2001      	movs	r0, #1
 8000830:	f000 f834 	bl	800089c <LCD_Delay>
	return;
 8000834:	bf00      	nop
}
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <LCD_CursorSet>:

static void LCD_CursorSet(uint8_t col, uint8_t row){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	460a      	mov	r2, r1
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	4613      	mov	r3, r2
 800084a:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <LCD_CursorSet+0x58>)
 800084e:	60fb      	str	r3, [r7, #12]
	/* Go to beginning */
	if (row >= LCD_Opts.Rows) {
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <LCD_CursorSet+0x5c>)
 8000852:	78db      	ldrb	r3, [r3, #3]
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	429a      	cmp	r2, r3
 8000858:	d301      	bcc.n	800085e <LCD_CursorSet+0x22>
		row = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	71bb      	strb	r3, [r7, #6]
	}
	/* Set current column and row */
	LCD_Opts.currentX = col;
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <LCD_CursorSet+0x5c>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	7153      	strb	r3, [r2, #5]
	LCD_Opts.currentY = row;
 8000864:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <LCD_CursorSet+0x5c>)
 8000866:	79bb      	ldrb	r3, [r7, #6]
 8000868:	7193      	strb	r3, [r2, #6]

	/* Set location address */
	LCD_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 800086a:	79bb      	ldrb	r3, [r7, #6]
 800086c:	3310      	adds	r3, #16
 800086e:	443b      	add	r3, r7
 8000870:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	4413      	add	r3, r2
 8000878:	b2db      	uxtb	r3, r3
 800087a:	b25b      	sxtb	r3, r3
 800087c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000880:	b25b      	sxtb	r3, r3
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff9c 	bl	80007c2 <LCD_Cmd>
}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	54144000 	.word	0x54144000
 8000898:	20000084 	.word	0x20000084

0800089c <LCD_Delay>:
#define LCD_D7					A , 6


/*Defincion de funciones ------------------------------------*/

void LCD_Delay(uint32_t delayms){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	delay_ms(delayms);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f86f 	bl	8000988 <delay_ms>
	//HAL_Delay
	//__delay_ms
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <LCD_nibble_write>:

void LCD_nibble_write(uint8_t data, uint8_t control){
 80008b4:	b480      	push	{r7}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	460a      	mov	r2, r1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	4613      	mov	r3, r2
 80008c2:	71bb      	strb	r3, [r7, #6]
	uint32_t delay = 1;
 80008c4:	2301      	movs	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
	GPIOX_ODR(LCD_D7) = (data>>3) & 0x1;
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	08db      	lsrs	r3, r3, #3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	4a1b      	ldr	r2, [pc, #108]	; (800093c <LCD_nibble_write+0x88>)
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	6013      	str	r3, [r2, #0]
	GPIOX_ODR(LCD_D6) = (data>>2) & 0x1;
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	089b      	lsrs	r3, r3, #2
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4a18      	ldr	r2, [pc, #96]	; (8000940 <LCD_nibble_write+0x8c>)
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	6013      	str	r3, [r2, #0]
	GPIOX_ODR(LCD_D5) = (data>>1) & 0x1;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	085b      	lsrs	r3, r3, #1
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4a16      	ldr	r2, [pc, #88]	; (8000944 <LCD_nibble_write+0x90>)
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	6013      	str	r3, [r2, #0]
	GPIOX_ODR(LCD_D4) = (data) & 0x1;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <LCD_nibble_write+0x94>)
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	6013      	str	r3, [r2, #0]
//	//PA1
//	GPIOA->BSRR |= ((data>>3) & 0x1) ? (1<<1) : (1<<(16 + 1));
//	//PA7
//	GPIOA->BSRR |= ((data>>2) & 0x1) ? (1<<7) : (1<<(16 + 7));

	GPIOX_ODR(LCD_E) = 0;
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <LCD_nibble_write+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]

	if(control){
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <LCD_nibble_write+0x5c>
		GPIOX_ODR(LCD_RS) = 1;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <LCD_nibble_write+0x9c>)
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	e002      	b.n	8000916 <LCD_nibble_write+0x62>
	}else{
		GPIOX_ODR(LCD_RS) = 0;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <LCD_nibble_write+0x9c>)
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
	}

	GPIOX_ODR(LCD_E) = 1;
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <LCD_nibble_write+0x98>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
	while(delay-- >0);
 800091c:	bf00      	nop
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	1e5a      	subs	r2, r3, #1
 8000922:	60fa      	str	r2, [r7, #12]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1fa      	bne.n	800091e <LCD_nibble_write+0x6a>
	GPIOX_ODR(LCD_E) = 0;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <LCD_nibble_write+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]

	return;
 800092e:	bf00      	nop
}
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	42400298 	.word	0x42400298
 8000940:	42400294 	.word	0x42400294
 8000944:	42400290 	.word	0x42400290
 8000948:	4240028c 	.word	0x4240028c
 800094c:	42400288 	.word	0x42400288
 8000950:	42400284 	.word	0x42400284

08000954 <SysTick_Init>:
#include "SysTick.h"

volatile uint32_t uwTicks = 0;


void SysTick_Init(uint32_t ticks){
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	SysTick->CTRL = 0;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <SysTick_Init+0x30>)
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]

	SysTick->LOAD = ticks - 1;
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <SysTick_Init+0x30>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	6053      	str	r3, [r2, #4]

	SysTick->VAL = 0;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <SysTick_Init+0x30>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]

	SysTick->CTRL = SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_CLKSOURCE_Msk;
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <SysTick_Init+0x30>)
 8000972:	2207      	movs	r2, #7
 8000974:	601a      	str	r2, [r3, #0]

	return;
 8000976:	bf00      	nop
}
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000e010 	.word	0xe000e010

08000988 <delay_ms>:

void delay_ms(uint32_t delay){
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
//	SysTick->VAL = 0;
//
//	for(uint32_t i = 0; i <delay; i++){
//		while((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0); //1ms
//	}
	uint32_t tickStart = GetTicks();
 8000990:	f000 f810 	bl	80009b4 <GetTicks>
 8000994:	60f8      	str	r0, [r7, #12]
	uint32_t wait = delay;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60bb      	str	r3, [r7, #8]

	while((GetTicks() - tickStart) < wait);
 800099a:	bf00      	nop
 800099c:	f000 f80a 	bl	80009b4 <GetTicks>
 80009a0:	4602      	mov	r2, r0
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8f7      	bhi.n	800099c <delay_ms+0x14>
	return;
 80009ac:	bf00      	nop
}
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <GetTicks>:

uint32_t GetTicks(void){
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
	return (uint32_t)uwTicks;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <GetTicks+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2000008c 	.word	0x2000008c

080009cc <TicksInc>:

void TicksInc(uint32_t inc){
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	uwTicks += inc;
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <TicksInc+0x20>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4413      	add	r3, r2
 80009dc:	4a03      	ldr	r2, [pc, #12]	; (80009ec <TicksInc+0x20>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	2000008c 	.word	0x2000008c

080009f0 <__errno>:
 80009f0:	4b01      	ldr	r3, [pc, #4]	; (80009f8 <__errno+0x8>)
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000000 	.word	0x20000000

080009fc <__libc_init_array>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	4d0d      	ldr	r5, [pc, #52]	; (8000a34 <__libc_init_array+0x38>)
 8000a00:	4c0d      	ldr	r4, [pc, #52]	; (8000a38 <__libc_init_array+0x3c>)
 8000a02:	1b64      	subs	r4, r4, r5
 8000a04:	10a4      	asrs	r4, r4, #2
 8000a06:	2600      	movs	r6, #0
 8000a08:	42a6      	cmp	r6, r4
 8000a0a:	d109      	bne.n	8000a20 <__libc_init_array+0x24>
 8000a0c:	4d0b      	ldr	r5, [pc, #44]	; (8000a3c <__libc_init_array+0x40>)
 8000a0e:	4c0c      	ldr	r4, [pc, #48]	; (8000a40 <__libc_init_array+0x44>)
 8000a10:	f000 fc86 	bl	8001320 <_init>
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	10a4      	asrs	r4, r4, #2
 8000a18:	2600      	movs	r6, #0
 8000a1a:	42a6      	cmp	r6, r4
 8000a1c:	d105      	bne.n	8000a2a <__libc_init_array+0x2e>
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a24:	4798      	blx	r3
 8000a26:	3601      	adds	r6, #1
 8000a28:	e7ee      	b.n	8000a08 <__libc_init_array+0xc>
 8000a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2e:	4798      	blx	r3
 8000a30:	3601      	adds	r6, #1
 8000a32:	e7f2      	b.n	8000a1a <__libc_init_array+0x1e>
 8000a34:	080013b4 	.word	0x080013b4
 8000a38:	080013b4 	.word	0x080013b4
 8000a3c:	080013b4 	.word	0x080013b4
 8000a40:	080013b8 	.word	0x080013b8

08000a44 <_vsiprintf_r>:
 8000a44:	b500      	push	{lr}
 8000a46:	b09b      	sub	sp, #108	; 0x6c
 8000a48:	9100      	str	r1, [sp, #0]
 8000a4a:	9104      	str	r1, [sp, #16]
 8000a4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000a50:	9105      	str	r1, [sp, #20]
 8000a52:	9102      	str	r1, [sp, #8]
 8000a54:	4905      	ldr	r1, [pc, #20]	; (8000a6c <_vsiprintf_r+0x28>)
 8000a56:	9103      	str	r1, [sp, #12]
 8000a58:	4669      	mov	r1, sp
 8000a5a:	f000 f86f 	bl	8000b3c <_svfiprintf_r>
 8000a5e:	9b00      	ldr	r3, [sp, #0]
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	b01b      	add	sp, #108	; 0x6c
 8000a66:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a6a:	bf00      	nop
 8000a6c:	ffff0208 	.word	0xffff0208

08000a70 <vsiprintf>:
 8000a70:	4613      	mov	r3, r2
 8000a72:	460a      	mov	r2, r1
 8000a74:	4601      	mov	r1, r0
 8000a76:	4802      	ldr	r0, [pc, #8]	; (8000a80 <vsiprintf+0x10>)
 8000a78:	6800      	ldr	r0, [r0, #0]
 8000a7a:	f7ff bfe3 	b.w	8000a44 <_vsiprintf_r>
 8000a7e:	bf00      	nop
 8000a80:	20000000 	.word	0x20000000

08000a84 <__ssputs_r>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	688e      	ldr	r6, [r1, #8]
 8000a8a:	429e      	cmp	r6, r3
 8000a8c:	4682      	mov	sl, r0
 8000a8e:	460c      	mov	r4, r1
 8000a90:	4690      	mov	r8, r2
 8000a92:	461f      	mov	r7, r3
 8000a94:	d838      	bhi.n	8000b08 <__ssputs_r+0x84>
 8000a96:	898a      	ldrh	r2, [r1, #12]
 8000a98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000a9c:	d032      	beq.n	8000b04 <__ssputs_r+0x80>
 8000a9e:	6825      	ldr	r5, [r4, #0]
 8000aa0:	6909      	ldr	r1, [r1, #16]
 8000aa2:	eba5 0901 	sub.w	r9, r5, r1
 8000aa6:	6965      	ldr	r5, [r4, #20]
 8000aa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000aac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	444b      	add	r3, r9
 8000ab4:	106d      	asrs	r5, r5, #1
 8000ab6:	429d      	cmp	r5, r3
 8000ab8:	bf38      	it	cc
 8000aba:	461d      	movcc	r5, r3
 8000abc:	0553      	lsls	r3, r2, #21
 8000abe:	d531      	bpl.n	8000b24 <__ssputs_r+0xa0>
 8000ac0:	4629      	mov	r1, r5
 8000ac2:	f000 fb63 	bl	800118c <_malloc_r>
 8000ac6:	4606      	mov	r6, r0
 8000ac8:	b950      	cbnz	r0, 8000ae0 <__ssputs_r+0x5c>
 8000aca:	230c      	movs	r3, #12
 8000acc:	f8ca 3000 	str.w	r3, [sl]
 8000ad0:	89a3      	ldrh	r3, [r4, #12]
 8000ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad6:	81a3      	strh	r3, [r4, #12]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	6921      	ldr	r1, [r4, #16]
 8000ae2:	464a      	mov	r2, r9
 8000ae4:	f000 fabe 	bl	8001064 <memcpy>
 8000ae8:	89a3      	ldrh	r3, [r4, #12]
 8000aea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af2:	81a3      	strh	r3, [r4, #12]
 8000af4:	6126      	str	r6, [r4, #16]
 8000af6:	6165      	str	r5, [r4, #20]
 8000af8:	444e      	add	r6, r9
 8000afa:	eba5 0509 	sub.w	r5, r5, r9
 8000afe:	6026      	str	r6, [r4, #0]
 8000b00:	60a5      	str	r5, [r4, #8]
 8000b02:	463e      	mov	r6, r7
 8000b04:	42be      	cmp	r6, r7
 8000b06:	d900      	bls.n	8000b0a <__ssputs_r+0x86>
 8000b08:	463e      	mov	r6, r7
 8000b0a:	6820      	ldr	r0, [r4, #0]
 8000b0c:	4632      	mov	r2, r6
 8000b0e:	4641      	mov	r1, r8
 8000b10:	f000 fab6 	bl	8001080 <memmove>
 8000b14:	68a3      	ldr	r3, [r4, #8]
 8000b16:	1b9b      	subs	r3, r3, r6
 8000b18:	60a3      	str	r3, [r4, #8]
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	4433      	add	r3, r6
 8000b1e:	6023      	str	r3, [r4, #0]
 8000b20:	2000      	movs	r0, #0
 8000b22:	e7db      	b.n	8000adc <__ssputs_r+0x58>
 8000b24:	462a      	mov	r2, r5
 8000b26:	f000 fba5 	bl	8001274 <_realloc_r>
 8000b2a:	4606      	mov	r6, r0
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	d1e1      	bne.n	8000af4 <__ssputs_r+0x70>
 8000b30:	6921      	ldr	r1, [r4, #16]
 8000b32:	4650      	mov	r0, sl
 8000b34:	f000 fabe 	bl	80010b4 <_free_r>
 8000b38:	e7c7      	b.n	8000aca <__ssputs_r+0x46>
	...

08000b3c <_svfiprintf_r>:
 8000b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b40:	4698      	mov	r8, r3
 8000b42:	898b      	ldrh	r3, [r1, #12]
 8000b44:	061b      	lsls	r3, r3, #24
 8000b46:	b09d      	sub	sp, #116	; 0x74
 8000b48:	4607      	mov	r7, r0
 8000b4a:	460d      	mov	r5, r1
 8000b4c:	4614      	mov	r4, r2
 8000b4e:	d50e      	bpl.n	8000b6e <_svfiprintf_r+0x32>
 8000b50:	690b      	ldr	r3, [r1, #16]
 8000b52:	b963      	cbnz	r3, 8000b6e <_svfiprintf_r+0x32>
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	f000 fb19 	bl	800118c <_malloc_r>
 8000b5a:	6028      	str	r0, [r5, #0]
 8000b5c:	6128      	str	r0, [r5, #16]
 8000b5e:	b920      	cbnz	r0, 8000b6a <_svfiprintf_r+0x2e>
 8000b60:	230c      	movs	r3, #12
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	e0d1      	b.n	8000d0e <_svfiprintf_r+0x1d2>
 8000b6a:	2340      	movs	r3, #64	; 0x40
 8000b6c:	616b      	str	r3, [r5, #20]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9309      	str	r3, [sp, #36]	; 0x24
 8000b72:	2320      	movs	r3, #32
 8000b74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b78:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b7c:	2330      	movs	r3, #48	; 0x30
 8000b7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000d28 <_svfiprintf_r+0x1ec>
 8000b82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b86:	f04f 0901 	mov.w	r9, #1
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b92:	b10a      	cbz	r2, 8000b98 <_svfiprintf_r+0x5c>
 8000b94:	2a25      	cmp	r2, #37	; 0x25
 8000b96:	d1f9      	bne.n	8000b8c <_svfiprintf_r+0x50>
 8000b98:	ebba 0b04 	subs.w	fp, sl, r4
 8000b9c:	d00b      	beq.n	8000bb6 <_svfiprintf_r+0x7a>
 8000b9e:	465b      	mov	r3, fp
 8000ba0:	4622      	mov	r2, r4
 8000ba2:	4629      	mov	r1, r5
 8000ba4:	4638      	mov	r0, r7
 8000ba6:	f7ff ff6d 	bl	8000a84 <__ssputs_r>
 8000baa:	3001      	adds	r0, #1
 8000bac:	f000 80aa 	beq.w	8000d04 <_svfiprintf_r+0x1c8>
 8000bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000bb2:	445a      	add	r2, fp
 8000bb4:	9209      	str	r2, [sp, #36]	; 0x24
 8000bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 80a2 	beq.w	8000d04 <_svfiprintf_r+0x1c8>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000bca:	f10a 0a01 	add.w	sl, sl, #1
 8000bce:	9304      	str	r3, [sp, #16]
 8000bd0:	9307      	str	r3, [sp, #28]
 8000bd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000bd6:	931a      	str	r3, [sp, #104]	; 0x68
 8000bd8:	4654      	mov	r4, sl
 8000bda:	2205      	movs	r2, #5
 8000bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000be0:	4851      	ldr	r0, [pc, #324]	; (8000d28 <_svfiprintf_r+0x1ec>)
 8000be2:	f7ff fb05 	bl	80001f0 <memchr>
 8000be6:	9a04      	ldr	r2, [sp, #16]
 8000be8:	b9d8      	cbnz	r0, 8000c22 <_svfiprintf_r+0xe6>
 8000bea:	06d0      	lsls	r0, r2, #27
 8000bec:	bf44      	itt	mi
 8000bee:	2320      	movmi	r3, #32
 8000bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bf4:	0711      	lsls	r1, r2, #28
 8000bf6:	bf44      	itt	mi
 8000bf8:	232b      	movmi	r3, #43	; 0x2b
 8000bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bfe:	f89a 3000 	ldrb.w	r3, [sl]
 8000c02:	2b2a      	cmp	r3, #42	; 0x2a
 8000c04:	d015      	beq.n	8000c32 <_svfiprintf_r+0xf6>
 8000c06:	9a07      	ldr	r2, [sp, #28]
 8000c08:	4654      	mov	r4, sl
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f04f 0c0a 	mov.w	ip, #10
 8000c10:	4621      	mov	r1, r4
 8000c12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c16:	3b30      	subs	r3, #48	; 0x30
 8000c18:	2b09      	cmp	r3, #9
 8000c1a:	d94e      	bls.n	8000cba <_svfiprintf_r+0x17e>
 8000c1c:	b1b0      	cbz	r0, 8000c4c <_svfiprintf_r+0x110>
 8000c1e:	9207      	str	r2, [sp, #28]
 8000c20:	e014      	b.n	8000c4c <_svfiprintf_r+0x110>
 8000c22:	eba0 0308 	sub.w	r3, r0, r8
 8000c26:	fa09 f303 	lsl.w	r3, r9, r3
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	9304      	str	r3, [sp, #16]
 8000c2e:	46a2      	mov	sl, r4
 8000c30:	e7d2      	b.n	8000bd8 <_svfiprintf_r+0x9c>
 8000c32:	9b03      	ldr	r3, [sp, #12]
 8000c34:	1d19      	adds	r1, r3, #4
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	9103      	str	r1, [sp, #12]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	bfbb      	ittet	lt
 8000c3e:	425b      	neglt	r3, r3
 8000c40:	f042 0202 	orrlt.w	r2, r2, #2
 8000c44:	9307      	strge	r3, [sp, #28]
 8000c46:	9307      	strlt	r3, [sp, #28]
 8000c48:	bfb8      	it	lt
 8000c4a:	9204      	strlt	r2, [sp, #16]
 8000c4c:	7823      	ldrb	r3, [r4, #0]
 8000c4e:	2b2e      	cmp	r3, #46	; 0x2e
 8000c50:	d10c      	bne.n	8000c6c <_svfiprintf_r+0x130>
 8000c52:	7863      	ldrb	r3, [r4, #1]
 8000c54:	2b2a      	cmp	r3, #42	; 0x2a
 8000c56:	d135      	bne.n	8000cc4 <_svfiprintf_r+0x188>
 8000c58:	9b03      	ldr	r3, [sp, #12]
 8000c5a:	1d1a      	adds	r2, r3, #4
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	9203      	str	r2, [sp, #12]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	bfb8      	it	lt
 8000c64:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c68:	3402      	adds	r4, #2
 8000c6a:	9305      	str	r3, [sp, #20]
 8000c6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000d38 <_svfiprintf_r+0x1fc>
 8000c70:	7821      	ldrb	r1, [r4, #0]
 8000c72:	2203      	movs	r2, #3
 8000c74:	4650      	mov	r0, sl
 8000c76:	f7ff fabb 	bl	80001f0 <memchr>
 8000c7a:	b140      	cbz	r0, 8000c8e <_svfiprintf_r+0x152>
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	eba0 000a 	sub.w	r0, r0, sl
 8000c82:	fa03 f000 	lsl.w	r0, r3, r0
 8000c86:	9b04      	ldr	r3, [sp, #16]
 8000c88:	4303      	orrs	r3, r0
 8000c8a:	3401      	adds	r4, #1
 8000c8c:	9304      	str	r3, [sp, #16]
 8000c8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c92:	4826      	ldr	r0, [pc, #152]	; (8000d2c <_svfiprintf_r+0x1f0>)
 8000c94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c98:	2206      	movs	r2, #6
 8000c9a:	f7ff faa9 	bl	80001f0 <memchr>
 8000c9e:	2800      	cmp	r0, #0
 8000ca0:	d038      	beq.n	8000d14 <_svfiprintf_r+0x1d8>
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <_svfiprintf_r+0x1f4>)
 8000ca4:	bb1b      	cbnz	r3, 8000cee <_svfiprintf_r+0x1b2>
 8000ca6:	9b03      	ldr	r3, [sp, #12]
 8000ca8:	3307      	adds	r3, #7
 8000caa:	f023 0307 	bic.w	r3, r3, #7
 8000cae:	3308      	adds	r3, #8
 8000cb0:	9303      	str	r3, [sp, #12]
 8000cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cb4:	4433      	add	r3, r6
 8000cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8000cb8:	e767      	b.n	8000b8a <_svfiprintf_r+0x4e>
 8000cba:	fb0c 3202 	mla	r2, ip, r2, r3
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	e7a5      	b.n	8000c10 <_svfiprintf_r+0xd4>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	3401      	adds	r4, #1
 8000cc8:	9305      	str	r3, [sp, #20]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f04f 0c0a 	mov.w	ip, #10
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cd6:	3a30      	subs	r2, #48	; 0x30
 8000cd8:	2a09      	cmp	r2, #9
 8000cda:	d903      	bls.n	8000ce4 <_svfiprintf_r+0x1a8>
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0c5      	beq.n	8000c6c <_svfiprintf_r+0x130>
 8000ce0:	9105      	str	r1, [sp, #20]
 8000ce2:	e7c3      	b.n	8000c6c <_svfiprintf_r+0x130>
 8000ce4:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ce8:	4604      	mov	r4, r0
 8000cea:	2301      	movs	r3, #1
 8000cec:	e7f0      	b.n	8000cd0 <_svfiprintf_r+0x194>
 8000cee:	ab03      	add	r3, sp, #12
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	462a      	mov	r2, r5
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	; (8000d34 <_svfiprintf_r+0x1f8>)
 8000cf6:	a904      	add	r1, sp, #16
 8000cf8:	4638      	mov	r0, r7
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	1c42      	adds	r2, r0, #1
 8000d00:	4606      	mov	r6, r0
 8000d02:	d1d6      	bne.n	8000cb2 <_svfiprintf_r+0x176>
 8000d04:	89ab      	ldrh	r3, [r5, #12]
 8000d06:	065b      	lsls	r3, r3, #25
 8000d08:	f53f af2c 	bmi.w	8000b64 <_svfiprintf_r+0x28>
 8000d0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d0e:	b01d      	add	sp, #116	; 0x74
 8000d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d14:	ab03      	add	r3, sp, #12
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	462a      	mov	r2, r5
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <_svfiprintf_r+0x1f8>)
 8000d1c:	a904      	add	r1, sp, #16
 8000d1e:	4638      	mov	r0, r7
 8000d20:	f000 f87a 	bl	8000e18 <_printf_i>
 8000d24:	e7eb      	b.n	8000cfe <_svfiprintf_r+0x1c2>
 8000d26:	bf00      	nop
 8000d28:	08001380 	.word	0x08001380
 8000d2c:	0800138a 	.word	0x0800138a
 8000d30:	00000000 	.word	0x00000000
 8000d34:	08000a85 	.word	0x08000a85
 8000d38:	08001386 	.word	0x08001386

08000d3c <_printf_common>:
 8000d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d40:	4616      	mov	r6, r2
 8000d42:	4699      	mov	r9, r3
 8000d44:	688a      	ldr	r2, [r1, #8]
 8000d46:	690b      	ldr	r3, [r1, #16]
 8000d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	bfb8      	it	lt
 8000d50:	4613      	movlt	r3, r2
 8000d52:	6033      	str	r3, [r6, #0]
 8000d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d58:	4607      	mov	r7, r0
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	b10a      	cbz	r2, 8000d62 <_printf_common+0x26>
 8000d5e:	3301      	adds	r3, #1
 8000d60:	6033      	str	r3, [r6, #0]
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	0699      	lsls	r1, r3, #26
 8000d66:	bf42      	ittt	mi
 8000d68:	6833      	ldrmi	r3, [r6, #0]
 8000d6a:	3302      	addmi	r3, #2
 8000d6c:	6033      	strmi	r3, [r6, #0]
 8000d6e:	6825      	ldr	r5, [r4, #0]
 8000d70:	f015 0506 	ands.w	r5, r5, #6
 8000d74:	d106      	bne.n	8000d84 <_printf_common+0x48>
 8000d76:	f104 0a19 	add.w	sl, r4, #25
 8000d7a:	68e3      	ldr	r3, [r4, #12]
 8000d7c:	6832      	ldr	r2, [r6, #0]
 8000d7e:	1a9b      	subs	r3, r3, r2
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	dc26      	bgt.n	8000dd2 <_printf_common+0x96>
 8000d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d88:	1e13      	subs	r3, r2, #0
 8000d8a:	6822      	ldr	r2, [r4, #0]
 8000d8c:	bf18      	it	ne
 8000d8e:	2301      	movne	r3, #1
 8000d90:	0692      	lsls	r2, r2, #26
 8000d92:	d42b      	bmi.n	8000dec <_printf_common+0xb0>
 8000d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d98:	4649      	mov	r1, r9
 8000d9a:	4638      	mov	r0, r7
 8000d9c:	47c0      	blx	r8
 8000d9e:	3001      	adds	r0, #1
 8000da0:	d01e      	beq.n	8000de0 <_printf_common+0xa4>
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	68e5      	ldr	r5, [r4, #12]
 8000da6:	6832      	ldr	r2, [r6, #0]
 8000da8:	f003 0306 	and.w	r3, r3, #6
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	bf08      	it	eq
 8000db0:	1aad      	subeq	r5, r5, r2
 8000db2:	68a3      	ldr	r3, [r4, #8]
 8000db4:	6922      	ldr	r2, [r4, #16]
 8000db6:	bf0c      	ite	eq
 8000db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000dbc:	2500      	movne	r5, #0
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bfc4      	itt	gt
 8000dc2:	1a9b      	subgt	r3, r3, r2
 8000dc4:	18ed      	addgt	r5, r5, r3
 8000dc6:	2600      	movs	r6, #0
 8000dc8:	341a      	adds	r4, #26
 8000dca:	42b5      	cmp	r5, r6
 8000dcc:	d11a      	bne.n	8000e04 <_printf_common+0xc8>
 8000dce:	2000      	movs	r0, #0
 8000dd0:	e008      	b.n	8000de4 <_printf_common+0xa8>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	4652      	mov	r2, sl
 8000dd6:	4649      	mov	r1, r9
 8000dd8:	4638      	mov	r0, r7
 8000dda:	47c0      	blx	r8
 8000ddc:	3001      	adds	r0, #1
 8000dde:	d103      	bne.n	8000de8 <_printf_common+0xac>
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	3501      	adds	r5, #1
 8000dea:	e7c6      	b.n	8000d7a <_printf_common+0x3e>
 8000dec:	18e1      	adds	r1, r4, r3
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	2030      	movs	r0, #48	; 0x30
 8000df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000df6:	4422      	add	r2, r4
 8000df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e00:	3302      	adds	r3, #2
 8000e02:	e7c7      	b.n	8000d94 <_printf_common+0x58>
 8000e04:	2301      	movs	r3, #1
 8000e06:	4622      	mov	r2, r4
 8000e08:	4649      	mov	r1, r9
 8000e0a:	4638      	mov	r0, r7
 8000e0c:	47c0      	blx	r8
 8000e0e:	3001      	adds	r0, #1
 8000e10:	d0e6      	beq.n	8000de0 <_printf_common+0xa4>
 8000e12:	3601      	adds	r6, #1
 8000e14:	e7d9      	b.n	8000dca <_printf_common+0x8e>
	...

08000e18 <_printf_i>:
 8000e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e1c:	7e0f      	ldrb	r7, [r1, #24]
 8000e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e20:	2f78      	cmp	r7, #120	; 0x78
 8000e22:	4691      	mov	r9, r2
 8000e24:	4680      	mov	r8, r0
 8000e26:	460c      	mov	r4, r1
 8000e28:	469a      	mov	sl, r3
 8000e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e2e:	d807      	bhi.n	8000e40 <_printf_i+0x28>
 8000e30:	2f62      	cmp	r7, #98	; 0x62
 8000e32:	d80a      	bhi.n	8000e4a <_printf_i+0x32>
 8000e34:	2f00      	cmp	r7, #0
 8000e36:	f000 80d8 	beq.w	8000fea <_printf_i+0x1d2>
 8000e3a:	2f58      	cmp	r7, #88	; 0x58
 8000e3c:	f000 80a3 	beq.w	8000f86 <_printf_i+0x16e>
 8000e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e48:	e03a      	b.n	8000ec0 <_printf_i+0xa8>
 8000e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e4e:	2b15      	cmp	r3, #21
 8000e50:	d8f6      	bhi.n	8000e40 <_printf_i+0x28>
 8000e52:	a101      	add	r1, pc, #4	; (adr r1, 8000e58 <_printf_i+0x40>)
 8000e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e58:	08000eb1 	.word	0x08000eb1
 8000e5c:	08000ec5 	.word	0x08000ec5
 8000e60:	08000e41 	.word	0x08000e41
 8000e64:	08000e41 	.word	0x08000e41
 8000e68:	08000e41 	.word	0x08000e41
 8000e6c:	08000e41 	.word	0x08000e41
 8000e70:	08000ec5 	.word	0x08000ec5
 8000e74:	08000e41 	.word	0x08000e41
 8000e78:	08000e41 	.word	0x08000e41
 8000e7c:	08000e41 	.word	0x08000e41
 8000e80:	08000e41 	.word	0x08000e41
 8000e84:	08000fd1 	.word	0x08000fd1
 8000e88:	08000ef5 	.word	0x08000ef5
 8000e8c:	08000fb3 	.word	0x08000fb3
 8000e90:	08000e41 	.word	0x08000e41
 8000e94:	08000e41 	.word	0x08000e41
 8000e98:	08000ff3 	.word	0x08000ff3
 8000e9c:	08000e41 	.word	0x08000e41
 8000ea0:	08000ef5 	.word	0x08000ef5
 8000ea4:	08000e41 	.word	0x08000e41
 8000ea8:	08000e41 	.word	0x08000e41
 8000eac:	08000fbb 	.word	0x08000fbb
 8000eb0:	682b      	ldr	r3, [r5, #0]
 8000eb2:	1d1a      	adds	r2, r3, #4
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	602a      	str	r2, [r5, #0]
 8000eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e0a3      	b.n	800100c <_printf_i+0x1f4>
 8000ec4:	6820      	ldr	r0, [r4, #0]
 8000ec6:	6829      	ldr	r1, [r5, #0]
 8000ec8:	0606      	lsls	r6, r0, #24
 8000eca:	f101 0304 	add.w	r3, r1, #4
 8000ece:	d50a      	bpl.n	8000ee6 <_printf_i+0xce>
 8000ed0:	680e      	ldr	r6, [r1, #0]
 8000ed2:	602b      	str	r3, [r5, #0]
 8000ed4:	2e00      	cmp	r6, #0
 8000ed6:	da03      	bge.n	8000ee0 <_printf_i+0xc8>
 8000ed8:	232d      	movs	r3, #45	; 0x2d
 8000eda:	4276      	negs	r6, r6
 8000edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ee0:	485e      	ldr	r0, [pc, #376]	; (800105c <_printf_i+0x244>)
 8000ee2:	230a      	movs	r3, #10
 8000ee4:	e019      	b.n	8000f1a <_printf_i+0x102>
 8000ee6:	680e      	ldr	r6, [r1, #0]
 8000ee8:	602b      	str	r3, [r5, #0]
 8000eea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000eee:	bf18      	it	ne
 8000ef0:	b236      	sxthne	r6, r6
 8000ef2:	e7ef      	b.n	8000ed4 <_printf_i+0xbc>
 8000ef4:	682b      	ldr	r3, [r5, #0]
 8000ef6:	6820      	ldr	r0, [r4, #0]
 8000ef8:	1d19      	adds	r1, r3, #4
 8000efa:	6029      	str	r1, [r5, #0]
 8000efc:	0601      	lsls	r1, r0, #24
 8000efe:	d501      	bpl.n	8000f04 <_printf_i+0xec>
 8000f00:	681e      	ldr	r6, [r3, #0]
 8000f02:	e002      	b.n	8000f0a <_printf_i+0xf2>
 8000f04:	0646      	lsls	r6, r0, #25
 8000f06:	d5fb      	bpl.n	8000f00 <_printf_i+0xe8>
 8000f08:	881e      	ldrh	r6, [r3, #0]
 8000f0a:	4854      	ldr	r0, [pc, #336]	; (800105c <_printf_i+0x244>)
 8000f0c:	2f6f      	cmp	r7, #111	; 0x6f
 8000f0e:	bf0c      	ite	eq
 8000f10:	2308      	moveq	r3, #8
 8000f12:	230a      	movne	r3, #10
 8000f14:	2100      	movs	r1, #0
 8000f16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f1a:	6865      	ldr	r5, [r4, #4]
 8000f1c:	60a5      	str	r5, [r4, #8]
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	bfa2      	ittt	ge
 8000f22:	6821      	ldrge	r1, [r4, #0]
 8000f24:	f021 0104 	bicge.w	r1, r1, #4
 8000f28:	6021      	strge	r1, [r4, #0]
 8000f2a:	b90e      	cbnz	r6, 8000f30 <_printf_i+0x118>
 8000f2c:	2d00      	cmp	r5, #0
 8000f2e:	d04d      	beq.n	8000fcc <_printf_i+0x1b4>
 8000f30:	4615      	mov	r5, r2
 8000f32:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f36:	fb03 6711 	mls	r7, r3, r1, r6
 8000f3a:	5dc7      	ldrb	r7, [r0, r7]
 8000f3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f40:	4637      	mov	r7, r6
 8000f42:	42bb      	cmp	r3, r7
 8000f44:	460e      	mov	r6, r1
 8000f46:	d9f4      	bls.n	8000f32 <_printf_i+0x11a>
 8000f48:	2b08      	cmp	r3, #8
 8000f4a:	d10b      	bne.n	8000f64 <_printf_i+0x14c>
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	07de      	lsls	r6, r3, #31
 8000f50:	d508      	bpl.n	8000f64 <_printf_i+0x14c>
 8000f52:	6923      	ldr	r3, [r4, #16]
 8000f54:	6861      	ldr	r1, [r4, #4]
 8000f56:	4299      	cmp	r1, r3
 8000f58:	bfde      	ittt	le
 8000f5a:	2330      	movle	r3, #48	; 0x30
 8000f5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f64:	1b52      	subs	r2, r2, r5
 8000f66:	6122      	str	r2, [r4, #16]
 8000f68:	f8cd a000 	str.w	sl, [sp]
 8000f6c:	464b      	mov	r3, r9
 8000f6e:	aa03      	add	r2, sp, #12
 8000f70:	4621      	mov	r1, r4
 8000f72:	4640      	mov	r0, r8
 8000f74:	f7ff fee2 	bl	8000d3c <_printf_common>
 8000f78:	3001      	adds	r0, #1
 8000f7a:	d14c      	bne.n	8001016 <_printf_i+0x1fe>
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	b004      	add	sp, #16
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	4835      	ldr	r0, [pc, #212]	; (800105c <_printf_i+0x244>)
 8000f88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000f8c:	6829      	ldr	r1, [r5, #0]
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f94:	6029      	str	r1, [r5, #0]
 8000f96:	061d      	lsls	r5, r3, #24
 8000f98:	d514      	bpl.n	8000fc4 <_printf_i+0x1ac>
 8000f9a:	07df      	lsls	r7, r3, #31
 8000f9c:	bf44      	itt	mi
 8000f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8000fa2:	6023      	strmi	r3, [r4, #0]
 8000fa4:	b91e      	cbnz	r6, 8000fae <_printf_i+0x196>
 8000fa6:	6823      	ldr	r3, [r4, #0]
 8000fa8:	f023 0320 	bic.w	r3, r3, #32
 8000fac:	6023      	str	r3, [r4, #0]
 8000fae:	2310      	movs	r3, #16
 8000fb0:	e7b0      	b.n	8000f14 <_printf_i+0xfc>
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	f043 0320 	orr.w	r3, r3, #32
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	2378      	movs	r3, #120	; 0x78
 8000fbc:	4828      	ldr	r0, [pc, #160]	; (8001060 <_printf_i+0x248>)
 8000fbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000fc2:	e7e3      	b.n	8000f8c <_printf_i+0x174>
 8000fc4:	0659      	lsls	r1, r3, #25
 8000fc6:	bf48      	it	mi
 8000fc8:	b2b6      	uxthmi	r6, r6
 8000fca:	e7e6      	b.n	8000f9a <_printf_i+0x182>
 8000fcc:	4615      	mov	r5, r2
 8000fce:	e7bb      	b.n	8000f48 <_printf_i+0x130>
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	6826      	ldr	r6, [r4, #0]
 8000fd4:	6961      	ldr	r1, [r4, #20]
 8000fd6:	1d18      	adds	r0, r3, #4
 8000fd8:	6028      	str	r0, [r5, #0]
 8000fda:	0635      	lsls	r5, r6, #24
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	d501      	bpl.n	8000fe4 <_printf_i+0x1cc>
 8000fe0:	6019      	str	r1, [r3, #0]
 8000fe2:	e002      	b.n	8000fea <_printf_i+0x1d2>
 8000fe4:	0670      	lsls	r0, r6, #25
 8000fe6:	d5fb      	bpl.n	8000fe0 <_printf_i+0x1c8>
 8000fe8:	8019      	strh	r1, [r3, #0]
 8000fea:	2300      	movs	r3, #0
 8000fec:	6123      	str	r3, [r4, #16]
 8000fee:	4615      	mov	r5, r2
 8000ff0:	e7ba      	b.n	8000f68 <_printf_i+0x150>
 8000ff2:	682b      	ldr	r3, [r5, #0]
 8000ff4:	1d1a      	adds	r2, r3, #4
 8000ff6:	602a      	str	r2, [r5, #0]
 8000ff8:	681d      	ldr	r5, [r3, #0]
 8000ffa:	6862      	ldr	r2, [r4, #4]
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4628      	mov	r0, r5
 8001000:	f7ff f8f6 	bl	80001f0 <memchr>
 8001004:	b108      	cbz	r0, 800100a <_printf_i+0x1f2>
 8001006:	1b40      	subs	r0, r0, r5
 8001008:	6060      	str	r0, [r4, #4]
 800100a:	6863      	ldr	r3, [r4, #4]
 800100c:	6123      	str	r3, [r4, #16]
 800100e:	2300      	movs	r3, #0
 8001010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001014:	e7a8      	b.n	8000f68 <_printf_i+0x150>
 8001016:	6923      	ldr	r3, [r4, #16]
 8001018:	462a      	mov	r2, r5
 800101a:	4649      	mov	r1, r9
 800101c:	4640      	mov	r0, r8
 800101e:	47d0      	blx	sl
 8001020:	3001      	adds	r0, #1
 8001022:	d0ab      	beq.n	8000f7c <_printf_i+0x164>
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	079b      	lsls	r3, r3, #30
 8001028:	d413      	bmi.n	8001052 <_printf_i+0x23a>
 800102a:	68e0      	ldr	r0, [r4, #12]
 800102c:	9b03      	ldr	r3, [sp, #12]
 800102e:	4298      	cmp	r0, r3
 8001030:	bfb8      	it	lt
 8001032:	4618      	movlt	r0, r3
 8001034:	e7a4      	b.n	8000f80 <_printf_i+0x168>
 8001036:	2301      	movs	r3, #1
 8001038:	4632      	mov	r2, r6
 800103a:	4649      	mov	r1, r9
 800103c:	4640      	mov	r0, r8
 800103e:	47d0      	blx	sl
 8001040:	3001      	adds	r0, #1
 8001042:	d09b      	beq.n	8000f7c <_printf_i+0x164>
 8001044:	3501      	adds	r5, #1
 8001046:	68e3      	ldr	r3, [r4, #12]
 8001048:	9903      	ldr	r1, [sp, #12]
 800104a:	1a5b      	subs	r3, r3, r1
 800104c:	42ab      	cmp	r3, r5
 800104e:	dcf2      	bgt.n	8001036 <_printf_i+0x21e>
 8001050:	e7eb      	b.n	800102a <_printf_i+0x212>
 8001052:	2500      	movs	r5, #0
 8001054:	f104 0619 	add.w	r6, r4, #25
 8001058:	e7f5      	b.n	8001046 <_printf_i+0x22e>
 800105a:	bf00      	nop
 800105c:	08001391 	.word	0x08001391
 8001060:	080013a2 	.word	0x080013a2

08001064 <memcpy>:
 8001064:	440a      	add	r2, r1
 8001066:	4291      	cmp	r1, r2
 8001068:	f100 33ff 	add.w	r3, r0, #4294967295
 800106c:	d100      	bne.n	8001070 <memcpy+0xc>
 800106e:	4770      	bx	lr
 8001070:	b510      	push	{r4, lr}
 8001072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800107a:	4291      	cmp	r1, r2
 800107c:	d1f9      	bne.n	8001072 <memcpy+0xe>
 800107e:	bd10      	pop	{r4, pc}

08001080 <memmove>:
 8001080:	4288      	cmp	r0, r1
 8001082:	b510      	push	{r4, lr}
 8001084:	eb01 0402 	add.w	r4, r1, r2
 8001088:	d902      	bls.n	8001090 <memmove+0x10>
 800108a:	4284      	cmp	r4, r0
 800108c:	4623      	mov	r3, r4
 800108e:	d807      	bhi.n	80010a0 <memmove+0x20>
 8001090:	1e43      	subs	r3, r0, #1
 8001092:	42a1      	cmp	r1, r4
 8001094:	d008      	beq.n	80010a8 <memmove+0x28>
 8001096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800109a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800109e:	e7f8      	b.n	8001092 <memmove+0x12>
 80010a0:	4402      	add	r2, r0
 80010a2:	4601      	mov	r1, r0
 80010a4:	428a      	cmp	r2, r1
 80010a6:	d100      	bne.n	80010aa <memmove+0x2a>
 80010a8:	bd10      	pop	{r4, pc}
 80010aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80010ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80010b2:	e7f7      	b.n	80010a4 <memmove+0x24>

080010b4 <_free_r>:
 80010b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80010b6:	2900      	cmp	r1, #0
 80010b8:	d044      	beq.n	8001144 <_free_r+0x90>
 80010ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010be:	9001      	str	r0, [sp, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f1a1 0404 	sub.w	r4, r1, #4
 80010c6:	bfb8      	it	lt
 80010c8:	18e4      	addlt	r4, r4, r3
 80010ca:	f000 f913 	bl	80012f4 <__malloc_lock>
 80010ce:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <_free_r+0x94>)
 80010d0:	9801      	ldr	r0, [sp, #4]
 80010d2:	6813      	ldr	r3, [r2, #0]
 80010d4:	b933      	cbnz	r3, 80010e4 <_free_r+0x30>
 80010d6:	6063      	str	r3, [r4, #4]
 80010d8:	6014      	str	r4, [r2, #0]
 80010da:	b003      	add	sp, #12
 80010dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80010e0:	f000 b90e 	b.w	8001300 <__malloc_unlock>
 80010e4:	42a3      	cmp	r3, r4
 80010e6:	d908      	bls.n	80010fa <_free_r+0x46>
 80010e8:	6825      	ldr	r5, [r4, #0]
 80010ea:	1961      	adds	r1, r4, r5
 80010ec:	428b      	cmp	r3, r1
 80010ee:	bf01      	itttt	eq
 80010f0:	6819      	ldreq	r1, [r3, #0]
 80010f2:	685b      	ldreq	r3, [r3, #4]
 80010f4:	1949      	addeq	r1, r1, r5
 80010f6:	6021      	streq	r1, [r4, #0]
 80010f8:	e7ed      	b.n	80010d6 <_free_r+0x22>
 80010fa:	461a      	mov	r2, r3
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	b10b      	cbz	r3, 8001104 <_free_r+0x50>
 8001100:	42a3      	cmp	r3, r4
 8001102:	d9fa      	bls.n	80010fa <_free_r+0x46>
 8001104:	6811      	ldr	r1, [r2, #0]
 8001106:	1855      	adds	r5, r2, r1
 8001108:	42a5      	cmp	r5, r4
 800110a:	d10b      	bne.n	8001124 <_free_r+0x70>
 800110c:	6824      	ldr	r4, [r4, #0]
 800110e:	4421      	add	r1, r4
 8001110:	1854      	adds	r4, r2, r1
 8001112:	42a3      	cmp	r3, r4
 8001114:	6011      	str	r1, [r2, #0]
 8001116:	d1e0      	bne.n	80010da <_free_r+0x26>
 8001118:	681c      	ldr	r4, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	6053      	str	r3, [r2, #4]
 800111e:	4421      	add	r1, r4
 8001120:	6011      	str	r1, [r2, #0]
 8001122:	e7da      	b.n	80010da <_free_r+0x26>
 8001124:	d902      	bls.n	800112c <_free_r+0x78>
 8001126:	230c      	movs	r3, #12
 8001128:	6003      	str	r3, [r0, #0]
 800112a:	e7d6      	b.n	80010da <_free_r+0x26>
 800112c:	6825      	ldr	r5, [r4, #0]
 800112e:	1961      	adds	r1, r4, r5
 8001130:	428b      	cmp	r3, r1
 8001132:	bf04      	itt	eq
 8001134:	6819      	ldreq	r1, [r3, #0]
 8001136:	685b      	ldreq	r3, [r3, #4]
 8001138:	6063      	str	r3, [r4, #4]
 800113a:	bf04      	itt	eq
 800113c:	1949      	addeq	r1, r1, r5
 800113e:	6021      	streq	r1, [r4, #0]
 8001140:	6054      	str	r4, [r2, #4]
 8001142:	e7ca      	b.n	80010da <_free_r+0x26>
 8001144:	b003      	add	sp, #12
 8001146:	bd30      	pop	{r4, r5, pc}
 8001148:	20000090 	.word	0x20000090

0800114c <sbrk_aligned>:
 800114c:	b570      	push	{r4, r5, r6, lr}
 800114e:	4e0e      	ldr	r6, [pc, #56]	; (8001188 <sbrk_aligned+0x3c>)
 8001150:	460c      	mov	r4, r1
 8001152:	6831      	ldr	r1, [r6, #0]
 8001154:	4605      	mov	r5, r0
 8001156:	b911      	cbnz	r1, 800115e <sbrk_aligned+0x12>
 8001158:	f000 f8bc 	bl	80012d4 <_sbrk_r>
 800115c:	6030      	str	r0, [r6, #0]
 800115e:	4621      	mov	r1, r4
 8001160:	4628      	mov	r0, r5
 8001162:	f000 f8b7 	bl	80012d4 <_sbrk_r>
 8001166:	1c43      	adds	r3, r0, #1
 8001168:	d00a      	beq.n	8001180 <sbrk_aligned+0x34>
 800116a:	1cc4      	adds	r4, r0, #3
 800116c:	f024 0403 	bic.w	r4, r4, #3
 8001170:	42a0      	cmp	r0, r4
 8001172:	d007      	beq.n	8001184 <sbrk_aligned+0x38>
 8001174:	1a21      	subs	r1, r4, r0
 8001176:	4628      	mov	r0, r5
 8001178:	f000 f8ac 	bl	80012d4 <_sbrk_r>
 800117c:	3001      	adds	r0, #1
 800117e:	d101      	bne.n	8001184 <sbrk_aligned+0x38>
 8001180:	f04f 34ff 	mov.w	r4, #4294967295
 8001184:	4620      	mov	r0, r4
 8001186:	bd70      	pop	{r4, r5, r6, pc}
 8001188:	20000094 	.word	0x20000094

0800118c <_malloc_r>:
 800118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001190:	1ccd      	adds	r5, r1, #3
 8001192:	f025 0503 	bic.w	r5, r5, #3
 8001196:	3508      	adds	r5, #8
 8001198:	2d0c      	cmp	r5, #12
 800119a:	bf38      	it	cc
 800119c:	250c      	movcc	r5, #12
 800119e:	2d00      	cmp	r5, #0
 80011a0:	4607      	mov	r7, r0
 80011a2:	db01      	blt.n	80011a8 <_malloc_r+0x1c>
 80011a4:	42a9      	cmp	r1, r5
 80011a6:	d905      	bls.n	80011b4 <_malloc_r+0x28>
 80011a8:	230c      	movs	r3, #12
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	2600      	movs	r6, #0
 80011ae:	4630      	mov	r0, r6
 80011b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011b4:	4e2e      	ldr	r6, [pc, #184]	; (8001270 <_malloc_r+0xe4>)
 80011b6:	f000 f89d 	bl	80012f4 <__malloc_lock>
 80011ba:	6833      	ldr	r3, [r6, #0]
 80011bc:	461c      	mov	r4, r3
 80011be:	bb34      	cbnz	r4, 800120e <_malloc_r+0x82>
 80011c0:	4629      	mov	r1, r5
 80011c2:	4638      	mov	r0, r7
 80011c4:	f7ff ffc2 	bl	800114c <sbrk_aligned>
 80011c8:	1c43      	adds	r3, r0, #1
 80011ca:	4604      	mov	r4, r0
 80011cc:	d14d      	bne.n	800126a <_malloc_r+0xde>
 80011ce:	6834      	ldr	r4, [r6, #0]
 80011d0:	4626      	mov	r6, r4
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d140      	bne.n	8001258 <_malloc_r+0xcc>
 80011d6:	6823      	ldr	r3, [r4, #0]
 80011d8:	4631      	mov	r1, r6
 80011da:	4638      	mov	r0, r7
 80011dc:	eb04 0803 	add.w	r8, r4, r3
 80011e0:	f000 f878 	bl	80012d4 <_sbrk_r>
 80011e4:	4580      	cmp	r8, r0
 80011e6:	d13a      	bne.n	800125e <_malloc_r+0xd2>
 80011e8:	6821      	ldr	r1, [r4, #0]
 80011ea:	3503      	adds	r5, #3
 80011ec:	1a6d      	subs	r5, r5, r1
 80011ee:	f025 0503 	bic.w	r5, r5, #3
 80011f2:	3508      	adds	r5, #8
 80011f4:	2d0c      	cmp	r5, #12
 80011f6:	bf38      	it	cc
 80011f8:	250c      	movcc	r5, #12
 80011fa:	4629      	mov	r1, r5
 80011fc:	4638      	mov	r0, r7
 80011fe:	f7ff ffa5 	bl	800114c <sbrk_aligned>
 8001202:	3001      	adds	r0, #1
 8001204:	d02b      	beq.n	800125e <_malloc_r+0xd2>
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	442b      	add	r3, r5
 800120a:	6023      	str	r3, [r4, #0]
 800120c:	e00e      	b.n	800122c <_malloc_r+0xa0>
 800120e:	6822      	ldr	r2, [r4, #0]
 8001210:	1b52      	subs	r2, r2, r5
 8001212:	d41e      	bmi.n	8001252 <_malloc_r+0xc6>
 8001214:	2a0b      	cmp	r2, #11
 8001216:	d916      	bls.n	8001246 <_malloc_r+0xba>
 8001218:	1961      	adds	r1, r4, r5
 800121a:	42a3      	cmp	r3, r4
 800121c:	6025      	str	r5, [r4, #0]
 800121e:	bf18      	it	ne
 8001220:	6059      	strne	r1, [r3, #4]
 8001222:	6863      	ldr	r3, [r4, #4]
 8001224:	bf08      	it	eq
 8001226:	6031      	streq	r1, [r6, #0]
 8001228:	5162      	str	r2, [r4, r5]
 800122a:	604b      	str	r3, [r1, #4]
 800122c:	4638      	mov	r0, r7
 800122e:	f104 060b 	add.w	r6, r4, #11
 8001232:	f000 f865 	bl	8001300 <__malloc_unlock>
 8001236:	f026 0607 	bic.w	r6, r6, #7
 800123a:	1d23      	adds	r3, r4, #4
 800123c:	1af2      	subs	r2, r6, r3
 800123e:	d0b6      	beq.n	80011ae <_malloc_r+0x22>
 8001240:	1b9b      	subs	r3, r3, r6
 8001242:	50a3      	str	r3, [r4, r2]
 8001244:	e7b3      	b.n	80011ae <_malloc_r+0x22>
 8001246:	6862      	ldr	r2, [r4, #4]
 8001248:	42a3      	cmp	r3, r4
 800124a:	bf0c      	ite	eq
 800124c:	6032      	streq	r2, [r6, #0]
 800124e:	605a      	strne	r2, [r3, #4]
 8001250:	e7ec      	b.n	800122c <_malloc_r+0xa0>
 8001252:	4623      	mov	r3, r4
 8001254:	6864      	ldr	r4, [r4, #4]
 8001256:	e7b2      	b.n	80011be <_malloc_r+0x32>
 8001258:	4634      	mov	r4, r6
 800125a:	6876      	ldr	r6, [r6, #4]
 800125c:	e7b9      	b.n	80011d2 <_malloc_r+0x46>
 800125e:	230c      	movs	r3, #12
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4638      	mov	r0, r7
 8001264:	f000 f84c 	bl	8001300 <__malloc_unlock>
 8001268:	e7a1      	b.n	80011ae <_malloc_r+0x22>
 800126a:	6025      	str	r5, [r4, #0]
 800126c:	e7de      	b.n	800122c <_malloc_r+0xa0>
 800126e:	bf00      	nop
 8001270:	20000090 	.word	0x20000090

08001274 <_realloc_r>:
 8001274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001278:	4680      	mov	r8, r0
 800127a:	4614      	mov	r4, r2
 800127c:	460e      	mov	r6, r1
 800127e:	b921      	cbnz	r1, 800128a <_realloc_r+0x16>
 8001280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001284:	4611      	mov	r1, r2
 8001286:	f7ff bf81 	b.w	800118c <_malloc_r>
 800128a:	b92a      	cbnz	r2, 8001298 <_realloc_r+0x24>
 800128c:	f7ff ff12 	bl	80010b4 <_free_r>
 8001290:	4625      	mov	r5, r4
 8001292:	4628      	mov	r0, r5
 8001294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001298:	f000 f838 	bl	800130c <_malloc_usable_size_r>
 800129c:	4284      	cmp	r4, r0
 800129e:	4607      	mov	r7, r0
 80012a0:	d802      	bhi.n	80012a8 <_realloc_r+0x34>
 80012a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80012a6:	d812      	bhi.n	80012ce <_realloc_r+0x5a>
 80012a8:	4621      	mov	r1, r4
 80012aa:	4640      	mov	r0, r8
 80012ac:	f7ff ff6e 	bl	800118c <_malloc_r>
 80012b0:	4605      	mov	r5, r0
 80012b2:	2800      	cmp	r0, #0
 80012b4:	d0ed      	beq.n	8001292 <_realloc_r+0x1e>
 80012b6:	42bc      	cmp	r4, r7
 80012b8:	4622      	mov	r2, r4
 80012ba:	4631      	mov	r1, r6
 80012bc:	bf28      	it	cs
 80012be:	463a      	movcs	r2, r7
 80012c0:	f7ff fed0 	bl	8001064 <memcpy>
 80012c4:	4631      	mov	r1, r6
 80012c6:	4640      	mov	r0, r8
 80012c8:	f7ff fef4 	bl	80010b4 <_free_r>
 80012cc:	e7e1      	b.n	8001292 <_realloc_r+0x1e>
 80012ce:	4635      	mov	r5, r6
 80012d0:	e7df      	b.n	8001292 <_realloc_r+0x1e>
	...

080012d4 <_sbrk_r>:
 80012d4:	b538      	push	{r3, r4, r5, lr}
 80012d6:	4d06      	ldr	r5, [pc, #24]	; (80012f0 <_sbrk_r+0x1c>)
 80012d8:	2300      	movs	r3, #0
 80012da:	4604      	mov	r4, r0
 80012dc:	4608      	mov	r0, r1
 80012de:	602b      	str	r3, [r5, #0]
 80012e0:	f7ff f856 	bl	8000390 <_sbrk>
 80012e4:	1c43      	adds	r3, r0, #1
 80012e6:	d102      	bne.n	80012ee <_sbrk_r+0x1a>
 80012e8:	682b      	ldr	r3, [r5, #0]
 80012ea:	b103      	cbz	r3, 80012ee <_sbrk_r+0x1a>
 80012ec:	6023      	str	r3, [r4, #0]
 80012ee:	bd38      	pop	{r3, r4, r5, pc}
 80012f0:	20000098 	.word	0x20000098

080012f4 <__malloc_lock>:
 80012f4:	4801      	ldr	r0, [pc, #4]	; (80012fc <__malloc_lock+0x8>)
 80012f6:	f000 b811 	b.w	800131c <__retarget_lock_acquire_recursive>
 80012fa:	bf00      	nop
 80012fc:	2000009c 	.word	0x2000009c

08001300 <__malloc_unlock>:
 8001300:	4801      	ldr	r0, [pc, #4]	; (8001308 <__malloc_unlock+0x8>)
 8001302:	f000 b80c 	b.w	800131e <__retarget_lock_release_recursive>
 8001306:	bf00      	nop
 8001308:	2000009c 	.word	0x2000009c

0800130c <_malloc_usable_size_r>:
 800130c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001310:	1f18      	subs	r0, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	bfbc      	itt	lt
 8001316:	580b      	ldrlt	r3, [r1, r0]
 8001318:	18c0      	addlt	r0, r0, r3
 800131a:	4770      	bx	lr

0800131c <__retarget_lock_acquire_recursive>:
 800131c:	4770      	bx	lr

0800131e <__retarget_lock_release_recursive>:
 800131e:	4770      	bx	lr

08001320 <_init>:
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001322:	bf00      	nop
 8001324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001326:	bc08      	pop	{r3}
 8001328:	469e      	mov	lr, r3
 800132a:	4770      	bx	lr

0800132c <_fini>:
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132e:	bf00      	nop
 8001330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001332:	bc08      	pop	{r3}
 8001334:	469e      	mov	lr, r3
 8001336:	4770      	bx	lr
