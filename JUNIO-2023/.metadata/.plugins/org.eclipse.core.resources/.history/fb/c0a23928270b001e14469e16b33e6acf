/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/*Includes ----------------------------------------------------*/
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include "stm32f4xx.h"
#include "core_cm4.h"
/*Typedef -----------------------------------------------------*/
typedef enum{
	GPIO_PIN_0 = 1,			//0x1
	GPIO_PIN_1 = 1<<1,		//0x2
	GPIO_PIN_2 = 1<<2,		//0x4
	GPIO_PIN_3 = 1<<3,		//0x8
	GPIO_PIN_4 = 1<<4,		//0x10
	GPIO_PIN_5 = 1<<5,
	GPIO_PIN_6 = 1<<6,
	GPIO_PIN_7 = 1<<7,
	GPIO_PIN_8 = 1<<8,
	GPIO_PIN_9 = 1<<9,
	GPIO_PIN_10 = 1<<10,
	GPIO_PIN_11 = 1<<11,
	GPIO_PIN_12 = 1<<12,
	GPIO_PIN_13 = 1<<13,
	GPIO_PIN_14 = 1<<14,
	GPIO_PIN_15 = 1<<15
}GPIO_Pin_t;

typedef enum{
	GPIO_PIN_RESET,
	GPIO_PIN_SET
}GPIO_PinState_t;
/*Defines -----------------------------------------------------*/

/*Global variables --------------------------------------------*/
uint32_t input;
/*Function prototype ------------------------------------------*/
int __io_putchar(int ch){
	//salida
	ITM_SendChar(ch);

	return ch;
}
bool BSP_PinRead(GPIO_TypeDef *P, GPIO_Pin_t pin);

void BSP_PinWrite(GPIO_TypeDef *P, GPIO_Pin_t pin, GPIO_PinState_t val);
/*main function -----------------------------------------------*/
int main(void)
{
	//habilitar el reloj
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIODEN;
	/**
	 * PA0 -> ENTRADA
	 */
	//GPIOA->MODER = GPIOA->MODER & ~(0x1U);
	GPIOA->MODER &=~ GPIO_MODER_MODE0;		//00 -> input
	GPIOA->PUPDR &=~ GPIO_PUPDR_PUPD0;		//00 -> no pull up /down
	/**
	 * PD12-PD15 ->salida de proposito general
	 */				//0x3<<24
	GPIOD->MODER &=~ (GPIO_MODER_MODE12 | GPIO_MODER_MODE13 | GPIO_MODER_MODE14 | GPIO_MODER_MODE15);
	GPIOD->MODER |= GPIO_MODER_MODE12_0;	//01 -> salida de proposito general
	GPIOD->MODER |= GPIO_MODER_MODE13_0;
	GPIOD->MODER |= GPIO_MODER_MODE14_0;
	GPIOD->MODER |= GPIO_MODER_MODE15_0;

	GPIOD->OTYPER &=~(GPIO_OTYPER_OT12 | GPIO_OTYPER_OT13 | GPIO_OTYPER_OT14 | GPIO_OTYPER_OT15); //PUSH PULL

	GPIOD->OSPEEDR &=~ GPIO_OSPEEDER_OSPEEDR12; //00 -> LOW ESPEED
	GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12;	//11 -> VERY HIGH SPEED

	GPIOD->ODR |= 1<<12 | 1<<13 | GPIO_ODR_OD14 ;

	GPIOD->ODR &=~ (1<<14);

	GPIOD->BSRR |= GPIO_BSRR_BS15;

	GPIOD->BSRR |= GPIO_BSRR_BR15;

	input = (GPIOA->IDR & GPIO_IDR_ID0)>>10;
    /* Loop forever */
	for(;;){
		if(BSP_PinRead(GPIOA, GPIO_PIN_0)){
			//GPIOD->BSRR |= GPIO_BSRR_BS12;
			BSP_PinWrite(GPIOD, (GPIO_PIN_12 | GPIO_PIN_13), GPIO_PIN_SET);
		}else{
			//GPIOD->BSRR |= GPIO_BSRR_BR12;
		}
	}
}
/*Function definition -----------------------------------------*/
bool BSP_PinRead(GPIO_TypeDef *P, GPIO_Pin_t pin){
	if(P->IDR & pin){
		return true;
	}
	return false;
}
void BSP_PinWrite(GPIO_TypeDef *P, GPIO_Pin_t pin, GPIO_PinState_t val){
	if(val == GPIO_PIN_SET){
		P->BSRR |= pin;
	}else{
		P->BSRR |= pin<<16;
	}
}

