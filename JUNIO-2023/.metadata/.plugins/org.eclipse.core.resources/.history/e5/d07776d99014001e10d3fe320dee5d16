/*
 * GPIO.c
 *
 *  Created on: 16 jun. 2023
 *      Author: jeffr
 */

#include "GPIO.h"
bool BSP_PinRead(GPIO_TypeDef *P, GPIO_Pin_t pin){
	if(P->IDR & pin){
		return true;
	}
	return false;
}
void BSP_PinWrite(GPIO_TypeDef *P, GPIO_Pin_t pin, GPIO_PinState_t val){
	if(val == GPIO_PIN_SET){
		P->BSRR |= pin;
	}else{
		P->BSRR |= pin<<16;
	}
}
/**
 * HAL (high abtractions layer)
 * LL
 */
void BSP_PinInit(GPIO_TypeDef *P,GPIO_ConfigTypedef_t *config){
	uint32_t position;
	uint32_t ioposition = 0x00U;
	uint32_t iocurrent = 0x00U;
	uint32_t temp;

	for(position = 0; position <16; position++){
		ioposition = 0x1U<<position;

		iocurrent = (uint32_t)(config->pin) & ioposition;

		if(iocurrent == ioposition){
			//Modo
			if(((config->mode & GPIO_MODE) == GPIO_MODE_OUTPUT) || ((config->mode & GPIO_MODE) == GPIO_MODE_AF)){
				//io speed
				P->OSPEEDR &=~(0x3<<(position * 2));
				P->OSPEEDR |= config->speed<< (position * 2);
				//io type
				P->OTYPER &=~ (1<<(position ));
				P->OTYPER |= config->outputType<<position;
			}
			if((config->mode & GPIO_MODE) != GPIO_MODE_ANALOG){
				P->PUPDR &=~ (0x3U<< (position * 2));
				P->PUPDR |= config->pullup<< (position * 2);
			}
			if((config->mode & GPIO_MODE)  == GPIO_MODE_AF){
				//update actualizarse en una segunda version
				temp = P->AFR[position >> 3];  // position / 2^3
				temp &=~(0xFU<<((position & 0xF) * 4));
			}
			if((config->mode &GPIO_MODE) == GPIO_MODE_ANALOG){
				P->PUPDR &=~ (0x3U<<(2 *position));
			}
			P->MODER &=~ (0x3u<<(position * 2));
			P->MODER |= config->mode << (position * 2);
		}
	}
	return;
}


