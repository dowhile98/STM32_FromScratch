
USART_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c80  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08001e30  08001e30  00011e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f28  08001f28  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08001f28  08001f28  00011f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f30  08001f30  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f30  08001f30  00011f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f34  08001f34  00011f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          0000004c  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002766  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a71  00000000  00000000  000227fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  00023270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000190  00000000  00000000  00023478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a641  00000000  00000000  00023608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f87  00000000  00000000  0003dc49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ed1f  00000000  00000000  00040bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000cf8ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ec4  00000000  00000000  000cf940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001e18 	.word	0x08001e18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08001e18 	.word	0x08001e18

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <ButtonInit>:
 * @param [BT]: Puntero a una estructura que representa el pulsador
 * @param [GPIO]: Puerto donde esta conectado el pulsador
 * @param [pin]: numbero de pin donde esta conectado el pulsador
 * @param [callback]: puntero a la funcion callback
 */
void ButtonInit(Button_t *BT, GPIO_TypeDef *GPIO, uint32_t pin, void (*callback)(void)){
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
 80005a0:	603b      	str	r3, [r7, #0]
	BT->GPIO = GPIO;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	605a      	str	r2, [r3, #4]
	BT->pin = pin;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	721a      	strb	r2, [r3, #8]
	BT->callback = callback;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	683a      	ldr	r2, [r7, #0]
 80005b4:	60da      	str	r2, [r3, #12]
	BT->state = PIN_INIT;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
	return;
 80005bc:	bf00      	nop
}
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	6039      	str	r1, [r7, #0]
 80005d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	db0a      	blt.n	80005f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	490c      	ldr	r1, [pc, #48]	; (8000614 <__NVIC_SetPriority+0x4c>)
 80005e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e6:	0112      	lsls	r2, r2, #4
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	440b      	add	r3, r1
 80005ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f0:	e00a      	b.n	8000608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <__NVIC_SetPriority+0x50>)
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	f003 030f 	and.w	r3, r3, #15
 80005fe:	3b04      	subs	r3, #4
 8000600:	0112      	lsls	r2, r2, #4
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	440b      	add	r3, r1
 8000606:	761a      	strb	r2, [r3, #24]
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000e100 	.word	0xe000e100
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <SysTickInit>:

/*Global variables -------------------------------------------------*/
volatile uint32_t uwTick = 0;


void SysTickInit(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	uint32_t temp;
	//1. deshabilitar el conteo de la systick
	SysTick->CTRL &=~ SysTick_CTRL_ENABLE_Msk;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <SysTickInit+0x64>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a16      	ldr	r2, [pc, #88]	; (8000680 <SysTickInit+0x64>)
 8000628:	f023 0301 	bic.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]
	//2. configurar el valor del registro reload
	SystemCoreClockUpdate();
 800062e:	f000 fb13 	bl	8000c58 <SystemCoreClockUpdate>
	temp = SystemCoreClock / 1000 - 1;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <SysTickInit+0x68>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a14      	ldr	r2, [pc, #80]	; (8000688 <SysTickInit+0x6c>)
 8000638:	fba2 2303 	umull	r2, r3, r2, r3
 800063c:	099b      	lsrs	r3, r3, #6
 800063e:	3b01      	subs	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
	SysTick->LOAD = temp;
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <SysTickInit+0x64>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6053      	str	r3, [r2, #4]
	//3. Configuras el registro de control y habilitas el conteo
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; 			//system core clock
 8000648:	4b0d      	ldr	r3, [pc, #52]	; (8000680 <SysTickInit+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <SysTickInit+0x64>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6013      	str	r3, [r2, #0]

	//configurar la IT
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;				//habilita la IT
 8000654:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <SysTickInit+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a09      	ldr	r2, [pc, #36]	; (8000680 <SysTickInit+0x64>)
 800065a:	f043 0302 	orr.w	r3, r3, #2
 800065e:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(SysTick_IRQn, 15);
 8000660:	210f      	movs	r1, #15
 8000662:	f04f 30ff 	mov.w	r0, #4294967295
 8000666:	f7ff ffaf 	bl	80005c8 <__NVIC_SetPriority>

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;				//habilita el conteo
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <SysTickInit+0x64>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <SysTickInit+0x64>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6013      	str	r3, [r2, #0]

	return;
 8000676:	bf00      	nop
}
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	e000e010 	.word	0xe000e010
 8000684:	20000000 	.word	0x20000000
 8000688:	10624dd3 	.word	0x10624dd3

0800068c <GetTicks>:
}
/**
 * @brief retorna el ticks generado por la SysTick
 * @return uint32_t
 */
uint32_t GetTicks(void){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	return (uint32_t)uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <GetTicks+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000084 	.word	0x20000084

080006a4 <TickInc_Callback>:


void TickInc_Callback(void){
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	uwTick += 1;
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <TickInc_Callback+0x18>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a03      	ldr	r2, [pc, #12]	; (80006bc <TickInc_Callback+0x18>)
 80006b0:	6013      	str	r3, [r2, #0]
	return;
 80006b2:	bf00      	nop
}
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	20000084 	.word	0x20000084

080006c0 <__NVIC_EnableIRQ>:
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	db0b      	blt.n	80006ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 021f 	and.w	r2, r3, #31
 80006d8:	4907      	ldr	r1, [pc, #28]	; (80006f8 <__NVIC_EnableIRQ+0x38>)
 80006da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006de:	095b      	lsrs	r3, r3, #5
 80006e0:	2001      	movs	r0, #1
 80006e2:	fa00 f202 	lsl.w	r2, r0, r2
 80006e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000e100 	.word	0xe000e100

080006fc <__NVIC_SetPriority>:
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	db0a      	blt.n	8000726 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	490c      	ldr	r1, [pc, #48]	; (8000748 <__NVIC_SetPriority+0x4c>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	440b      	add	r3, r1
 8000720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000724:	e00a      	b.n	800073c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4908      	ldr	r1, [pc, #32]	; (800074c <__NVIC_SetPriority+0x50>)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	3b04      	subs	r3, #4
 8000734:	0112      	lsls	r2, r2, #4
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	440b      	add	r3, r1
 800073a:	761a      	strb	r2, [r3, #24]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000758:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800075c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d013      	beq.n	8000790 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000768:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800076c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000770:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00b      	beq.n	8000790 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000778:	e000      	b.n	800077c <ITM_SendChar+0x2c>
    {
      __NOP();
 800077a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800077c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000786:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	b2d2      	uxtb	r2, r2
 800078e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000790:	687b      	ldr	r3, [r7, #4]
}
 8000792:	4618      	mov	r0, r3
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
	...

080007a0 <main>:

UART_Status_t UART_ReceiveData(USART_TypeDef *USARTx, uint8_t *pData, uint32_t len, uint32_t timeout);
/*main function --------------------------------------------------------------*/

int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	//USART1
	USART1_Init(9600);
 80007a4:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80007a8:	f000 f87e 	bl	80008a8 <USART1_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
	//habilitar la interrupcion
	__disable_irq();
	USART1->CR1 |= USART_CR1_RXNEIE;		//habilita la interrupcion para RX
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <main+0xa8>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	4a24      	ldr	r2, [pc, #144]	; (8000848 <main+0xa8>)
 80007b6:	f043 0320 	orr.w	r3, r3, #32
 80007ba:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn);			//Habilita la interrupcion para USART1 EN LA NVIC
 80007bc:	2025      	movs	r0, #37	; 0x25
 80007be:	f7ff ff7f 	bl	80006c0 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART1_IRQn, 1);
 80007c2:	2101      	movs	r1, #1
 80007c4:	2025      	movs	r0, #37	; 0x25
 80007c6:	f7ff ff99 	bl	80006fc <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 80007ca:	b662      	cpsie	i
}
 80007cc:	bf00      	nop
	__enable_irq();
	//Todo

	printf("EJEMPLO GPIO1\r\n");
 80007ce:	481f      	ldr	r0, [pc, #124]	; (800084c <main+0xac>)
 80007d0:	f000 fba4 	bl	8000f1c <puts>
	printf("%s, %s\r\n", __DATE__, __TIME__);
 80007d4:	4a1e      	ldr	r2, [pc, #120]	; (8000850 <main+0xb0>)
 80007d6:	491f      	ldr	r1, [pc, #124]	; (8000854 <main+0xb4>)
 80007d8:	481f      	ldr	r0, [pc, #124]	; (8000858 <main+0xb8>)
 80007da:	f000 fb19 	bl	8000e10 <iprintf>
	//PD12 (LED1)
	RCC->AHB1ENR |= GPIOX_CLOCK(LED) | GPIOX_CLOCK(SW);
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <main+0xbc>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a1e      	ldr	r2, [pc, #120]	; (800085c <main+0xbc>)
 80007e4:	f043 0309 	orr.w	r3, r3, #9
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_OUT, LED);
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <main+0xc0>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80007f2:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <main+0xc0>)
 80007f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007f8:	6013      	str	r3, [r2, #0]
	GPIOX_OTYPER(MODE_OT_PP, LED);
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <main+0xc0>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <main+0xc0>)
 8000800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000804:	6053      	str	r3, [r2, #4]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, LED);
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <main+0xc0>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <main+0xc0>)
 800080c:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000810:	6093      	str	r3, [r2, #8]
	GPIOX_PUPDR(MODE_PU_NONE, LED);
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <main+0xc0>)
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <main+0xc0>)
 8000818:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800081c:	60d3      	str	r3, [r2, #12]

	//PA0
	GPIOX_MODER(MODE_DIGITAL_INPUT, SW);
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <main+0xc4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a10      	ldr	r2, [pc, #64]	; (8000864 <main+0xc4>)
 8000824:	f023 0303 	bic.w	r3, r3, #3
 8000828:	6013      	str	r3, [r2, #0]
	GPIOX_PUPDR(MODE_PU_NONE, SW);
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <main+0xc4>)
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <main+0xc4>)
 8000830:	f023 0303 	bic.w	r3, r3, #3
 8000834:	60d3      	str	r3, [r2, #12]
	//systick
	SysTickInit();
 8000836:	f7ff fef1 	bl	800061c <SysTickInit>

	//inicializar
	ButtonInit(&button1, GPIOA, 0, &button1_callback);
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <main+0xc8>)
 800083c:	2200      	movs	r2, #0
 800083e:	4909      	ldr	r1, [pc, #36]	; (8000864 <main+0xc4>)
 8000840:	480a      	ldr	r0, [pc, #40]	; (800086c <main+0xcc>)
 8000842:	f7ff fea7 	bl	8000594 <ButtonInit>

    /* Loop forever */
	for(;;){
 8000846:	e7fe      	b.n	8000846 <main+0xa6>
 8000848:	40011000 	.word	0x40011000
 800084c:	08001e30 	.word	0x08001e30
 8000850:	08001e40 	.word	0x08001e40
 8000854:	08001e4c 	.word	0x08001e4c
 8000858:	08001e58 	.word	0x08001e58
 800085c:	40023800 	.word	0x40023800
 8000860:	40020c00 	.word	0x40020c00
 8000864:	40020000 	.word	0x40020000
 8000868:	08000871 	.word	0x08000871
 800086c:	20000088 	.word	0x20000088

08000870 <button1_callback>:

	}
}

/*Function definition ---------------------------------------------------------*/
void button1_callback(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	GPIOX_ODR(LED) ^= 0x1;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <button1_callback+0x2c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a08      	ldr	r2, [pc, #32]	; (800089c <button1_callback+0x2c>)
 800087a:	f083 0301 	eor.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]
	count++;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <button1_callback+0x30>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <button1_callback+0x30>)
 8000888:	6013      	str	r3, [r2, #0]
	printf("pulsador se presiono..%u\r\n", count);
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <button1_callback+0x30>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4619      	mov	r1, r3
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <button1_callback+0x34>)
 8000892:	f000 fabd 	bl	8000e10 <iprintf>
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	424182b0 	.word	0x424182b0
 80008a0:	2000009c 	.word	0x2000009c
 80008a4:	08001e64 	.word	0x08001e64

080008a8 <USART1_Init>:

void USART1_Init(uint32_t baud){
 80008a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
	//1. RCC
	RCC->AHB1ENR |= GPIOX_CLOCK(USART1_RX);
 80008b2:	4b5b      	ldr	r3, [pc, #364]	; (8000a20 <USART1_Init+0x178>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a5a      	ldr	r2, [pc, #360]	; (8000a20 <USART1_Init+0x178>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_ALTER, USART1_TX);
 80008be:	4b59      	ldr	r3, [pc, #356]	; (8000a24 <USART1_Init+0x17c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008c6:	4a57      	ldr	r2, [pc, #348]	; (8000a24 <USART1_Init+0x17c>)
 80008c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008cc:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_ALTER, USART1_RX);
 80008ce:	4b55      	ldr	r3, [pc, #340]	; (8000a24 <USART1_Init+0x17c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008d6:	4a53      	ldr	r2, [pc, #332]	; (8000a24 <USART1_Init+0x17c>)
 80008d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008dc:	6013      	str	r3, [r2, #0]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, USART1_TX);
 80008de:	4b51      	ldr	r3, [pc, #324]	; (8000a24 <USART1_Init+0x17c>)
 80008e0:	689b      	ldr	r3, [r3, #8]
 80008e2:	4a50      	ldr	r2, [pc, #320]	; (8000a24 <USART1_Init+0x17c>)
 80008e4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80008e8:	6093      	str	r3, [r2, #8]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, USART1_RX);
 80008ea:	4b4e      	ldr	r3, [pc, #312]	; (8000a24 <USART1_Init+0x17c>)
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	4a4d      	ldr	r2, [pc, #308]	; (8000a24 <USART1_Init+0x17c>)
 80008f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008f4:	6093      	str	r3, [r2, #8]
	GPIOX_AFR(7, USART1_TX);
 80008f6:	4b4b      	ldr	r3, [pc, #300]	; (8000a24 <USART1_Init+0x17c>)
 80008f8:	6a1b      	ldr	r3, [r3, #32]
 80008fa:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80008fe:	4a49      	ldr	r2, [pc, #292]	; (8000a24 <USART1_Init+0x17c>)
 8000900:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000904:	6213      	str	r3, [r2, #32]
//	GPIOB->AFR[0] &=~ (GPIO_AFRL_AFRL7);
//	GPIOB->AFR[0] |= 0x7U<<GPIO_AFRL_AFSEL7_Pos;
	GPIOX_AFR(7, USART1_RX);
 8000906:	4b47      	ldr	r3, [pc, #284]	; (8000a24 <USART1_Init+0x17c>)
 8000908:	6a1b      	ldr	r3, [r3, #32]
 800090a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800090e:	4a45      	ldr	r2, [pc, #276]	; (8000a24 <USART1_Init+0x17c>)
 8000910:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8000914:	6213      	str	r3, [r2, #32]
	//USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000916:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <USART1_Init+0x178>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a41      	ldr	r2, [pc, #260]	; (8000a20 <USART1_Init+0x178>)
 800091c:	f043 0310 	orr.w	r3, r3, #16
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
	//deshabilitar el USART
	USART1->CR1 = 0x0U;						//reset state
 8000922:	4b41      	ldr	r3, [pc, #260]	; (8000a28 <USART1_Init+0x180>)
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
	USART1->BRR = UART_BRR_SAMPLING16(16E+6, baud);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	469a      	mov	sl, r3
 800092e:	4693      	mov	fp, r2
 8000930:	f04f 0200 	mov.w	r2, #0
 8000934:	f04f 0300 	mov.w	r3, #0
 8000938:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800093c:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8000940:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8000944:	a134      	add	r1, pc, #208	; (adr r1, 8000a18 <USART1_Init+0x170>)
 8000946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800094a:	f7ff fca1 	bl	8000290 <__aeabi_uldivmod>
 800094e:	4602      	mov	r2, r0
 8000950:	460b      	mov	r3, r1
 8000952:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <USART1_Init+0x184>)
 8000954:	fba3 2302 	umull	r2, r3, r3, r2
 8000958:	095b      	lsrs	r3, r3, #5
 800095a:	011e      	lsls	r6, r3, #4
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	4698      	mov	r8, r3
 8000962:	4691      	mov	r9, r2
 8000964:	f04f 0200 	mov.w	r2, #0
 8000968:	f04f 0300 	mov.w	r3, #0
 800096c:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8000970:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8000974:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8000978:	a127      	add	r1, pc, #156	; (adr r1, 8000a18 <USART1_Init+0x170>)
 800097a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800097e:	f7ff fc87 	bl	8000290 <__aeabi_uldivmod>
 8000982:	4602      	mov	r2, r0
 8000984:	460b      	mov	r3, r1
 8000986:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <USART1_Init+0x184>)
 8000988:	fba3 1302 	umull	r1, r3, r3, r2
 800098c:	095b      	lsrs	r3, r3, #5
 800098e:	2164      	movs	r1, #100	; 0x64
 8000990:	fb01 f303 	mul.w	r3, r1, r3
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	3332      	adds	r3, #50	; 0x32
 800099a:	4a24      	ldr	r2, [pc, #144]	; (8000a2c <USART1_Init+0x184>)
 800099c:	fba2 2303 	umull	r2, r3, r2, r3
 80009a0:	095b      	lsrs	r3, r3, #5
 80009a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009a6:	441e      	add	r6, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	461c      	mov	r4, r3
 80009ae:	4615      	mov	r5, r2
 80009b0:	f04f 0200 	mov.w	r2, #0
 80009b4:	f04f 0300 	mov.w	r3, #0
 80009b8:	00ab      	lsls	r3, r5, #2
 80009ba:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80009be:	00a2      	lsls	r2, r4, #2
 80009c0:	a115      	add	r1, pc, #84	; (adr r1, 8000a18 <USART1_Init+0x170>)
 80009c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80009c6:	f7ff fc63 	bl	8000290 <__aeabi_uldivmod>
 80009ca:	4602      	mov	r2, r0
 80009cc:	460b      	mov	r3, r1
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <USART1_Init+0x184>)
 80009d0:	fba3 1302 	umull	r1, r3, r3, r2
 80009d4:	095b      	lsrs	r3, r3, #5
 80009d6:	2164      	movs	r1, #100	; 0x64
 80009d8:	fb01 f303 	mul.w	r3, r1, r3
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	011b      	lsls	r3, r3, #4
 80009e0:	3332      	adds	r3, #50	; 0x32
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <USART1_Init+0x184>)
 80009e4:	fba2 2303 	umull	r2, r3, r2, r3
 80009e8:	095b      	lsrs	r3, r3, #5
 80009ea:	f003 030f 	and.w	r3, r3, #15
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <USART1_Init+0x180>)
 80009f0:	4433      	add	r3, r6
 80009f2:	6093      	str	r3, [r2, #8]
	//bit parada (STOP)

	//longitud de los datos (M)

	//habilitar RX, TX (RE, DE)
	USART1->CR1 |= USART_CR1_RE | USART_CR1_TE;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <USART1_Init+0x180>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <USART1_Init+0x180>)
 80009fa:	f043 030c 	orr.w	r3, r3, #12
 80009fe:	60d3      	str	r3, [r2, #12]


	//habilitas el uart
	USART1->CR1 |= USART_CR1_UE;
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <USART1_Init+0x180>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <USART1_Init+0x180>)
 8000a06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a0a:	60d3      	str	r3, [r2, #12]

	return;
 8000a0c:	bf00      	nop
}
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a16:	bf00      	nop
 8000a18:	17d78400 	.word	0x17d78400
 8000a1c:	00000000 	.word	0x00000000
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020400 	.word	0x40020400
 8000a28:	40011000 	.word	0x40011000
 8000a2c:	51eb851f 	.word	0x51eb851f

08000a30 <UART_SendData>:
 * @param [pData] : puntero a los datos a transmitir
 * @param [len]: tamaño de datos a transmitir
 * @param [timeout] tiempo maximo para transimitir los datos
 * @return UART_Status_t
 */
UART_Status_t UART_SendData(USART_TypeDef *USARTx, uint8_t *pData, uint32_t len, uint32_t timeout){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]

	uint32_t tickStart = GetTicks();
 8000a3e:	f7ff fe25 	bl	800068c <GetTicks>
 8000a42:	6178      	str	r0, [r7, #20]
	if(pData == NULL){
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d117      	bne.n	8000a7a <UART_SendData+0x4a>
		return UART_ERROR;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e01e      	b.n	8000a8c <UART_SendData+0x5c>
	}

	while((GetTicks() - tickStart) <= timeout){
		if(USARTx->SR & USART_SR_TXE){			//buffer listo para recibir otro dato
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d00f      	beq.n	8000a7a <UART_SendData+0x4a>
			USARTx->DR = *pData;
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	605a      	str	r2, [r3, #4]
			pData++;
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	3301      	adds	r3, #1
 8000a68:	60bb      	str	r3, [r7, #8]
//			if(*pData == '\0'){
//				return UART_OK;
//			}
			len--;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
			if(len <= 0){
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d101      	bne.n	8000a7a <UART_SendData+0x4a>
				return UART_OK;					//termina de transmitir los datos
 8000a76:	2300      	movs	r3, #0
 8000a78:	e008      	b.n	8000a8c <UART_SendData+0x5c>
	while((GetTicks() - tickStart) <= timeout){
 8000a7a:	f7ff fe07 	bl	800068c <GetTicks>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	683a      	ldr	r2, [r7, #0]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d2e1      	bcs.n	8000a4e <UART_SendData+0x1e>
			}
		}
	}
	//timout
	return UART_TIMOUT;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <__io_putchar>:
	return UART_TIMOUT;
}



int __io_putchar(int ch){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	uint8_t c = ch & 0xFF;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	73fb      	strb	r3, [r7, #15]
	ITM_SendChar(ch);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe53 	bl	8000750 <ITM_SendChar>

	UART_SendData(USART1, &c, 1, 1);
 8000aaa:	f107 010f 	add.w	r1, r7, #15
 8000aae:	2301      	movs	r3, #1
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <__io_putchar+0x30>)
 8000ab4:	f7ff ffbc 	bl	8000a30 <UART_SendData>
	return ch;
 8000ab8:	687b      	ldr	r3, [r7, #4]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40011000 	.word	0x40011000

08000ac8 <SysTick_Handler>:
#include "delay.h"

/**
 * @brief ISR -> SYSTICK
 */
void SysTick_Handler(void){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	TickInc_Callback();
 8000acc:	f7ff fdea 	bl	80006a4 <TickInc_Callback>
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <USART1_IRQHandler>:

/**
 * @brief ISR -> USART1
 */
void USART1_IRQHandler (void){
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
//	volatile uint8_t temp;
	//TX

	//RX
	if(USART1->SR & USART_SR_RXNE){		//interrupcion por RXNE
 8000ad8:	4b03      	ldr	r3, [pc, #12]	; (8000ae8 <USART1_IRQHandler+0x14>)
 8000ada:	681b      	ldr	r3, [r3, #0]
//		USART1->DR = temp;
	}
	//PE

	//OV
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40011000 	.word	0x40011000

08000aec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	e00a      	b.n	8000b14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000afe:	f3af 8000 	nop.w
 8000b02:	4601      	mov	r1, r0
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	60ba      	str	r2, [r7, #8]
 8000b0a:	b2ca      	uxtb	r2, r1
 8000b0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	697a      	ldr	r2, [r7, #20]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	dbf0      	blt.n	8000afe <_read+0x12>
  }

  return len;
 8000b1c:	687b      	ldr	r3, [r7, #4]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	e009      	b.n	8000b4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ffa7 	bl	8000a94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbf1      	blt.n	8000b38 <_write+0x12>
  }
  return len;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <_close>:

int _close(int file)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b86:	605a      	str	r2, [r3, #4]
  return 0;
 8000b88:	2300      	movs	r3, #0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr

08000b96 <_isatty>:

int _isatty(int file)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	; (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f000 f8d8 	bl	8000dac <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	; (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20020000 	.word	0x20020000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	200000a0 	.word	0x200000a0
 8000c30:	200000b8 	.word	0x200000b8

08000c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	2302      	movs	r3, #2
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	2302      	movs	r3, #2
 8000c70:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000c72:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <SystemCoreClockUpdate+0xec>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	2b08      	cmp	r3, #8
 8000c80:	d011      	beq.n	8000ca6 <SystemCoreClockUpdate+0x4e>
 8000c82:	693b      	ldr	r3, [r7, #16]
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d844      	bhi.n	8000d12 <SystemCoreClockUpdate+0xba>
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <SystemCoreClockUpdate+0x3e>
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	2b04      	cmp	r3, #4
 8000c92:	d004      	beq.n	8000c9e <SystemCoreClockUpdate+0x46>
 8000c94:	e03d      	b.n	8000d12 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000c96:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <SystemCoreClockUpdate+0xf0>)
 8000c98:	4a2c      	ldr	r2, [pc, #176]	; (8000d4c <SystemCoreClockUpdate+0xf4>)
 8000c9a:	601a      	str	r2, [r3, #0]
      break;
 8000c9c:	e03d      	b.n	8000d1a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <SystemCoreClockUpdate+0xf0>)
 8000ca0:	4a2b      	ldr	r2, [pc, #172]	; (8000d50 <SystemCoreClockUpdate+0xf8>)
 8000ca2:	601a      	str	r2, [r3, #0]
      break;
 8000ca4:	e039      	b.n	8000d1a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000ca6:	4b27      	ldr	r3, [pc, #156]	; (8000d44 <SystemCoreClockUpdate+0xec>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	0d9b      	lsrs	r3, r3, #22
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <SystemCoreClockUpdate+0xec>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cba:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00c      	beq.n	8000cdc <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000cc2:	4a23      	ldr	r2, [pc, #140]	; (8000d50 <SystemCoreClockUpdate+0xf8>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cca:	4a1e      	ldr	r2, [pc, #120]	; (8000d44 <SystemCoreClockUpdate+0xec>)
 8000ccc:	6852      	ldr	r2, [r2, #4]
 8000cce:	0992      	lsrs	r2, r2, #6
 8000cd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000cd4:	fb02 f303 	mul.w	r3, r2, r3
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	e00b      	b.n	8000cf4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000cdc:	4a1b      	ldr	r2, [pc, #108]	; (8000d4c <SystemCoreClockUpdate+0xf4>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce4:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <SystemCoreClockUpdate+0xec>)
 8000ce6:	6852      	ldr	r2, [r2, #4]
 8000ce8:	0992      	lsrs	r2, r2, #6
 8000cea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000cee:	fb02 f303 	mul.w	r3, r2, r3
 8000cf2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <SystemCoreClockUpdate+0xec>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	0c1b      	lsrs	r3, r3, #16
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	3301      	adds	r3, #1
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <SystemCoreClockUpdate+0xf0>)
 8000d0e:	6013      	str	r3, [r2, #0]
      break;
 8000d10:	e003      	b.n	8000d1a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <SystemCoreClockUpdate+0xf0>)
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <SystemCoreClockUpdate+0xf4>)
 8000d16:	601a      	str	r2, [r3, #0]
      break;
 8000d18:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <SystemCoreClockUpdate+0xec>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	091b      	lsrs	r3, r3, #4
 8000d20:	f003 030f 	and.w	r3, r3, #15
 8000d24:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <SystemCoreClockUpdate+0xfc>)
 8000d26:	5cd3      	ldrb	r3, [r2, r3]
 8000d28:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000d2a:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <SystemCoreClockUpdate+0xf0>)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	693b      	ldr	r3, [r7, #16]
 8000d30:	fa22 f303 	lsr.w	r3, r2, r3
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <SystemCoreClockUpdate+0xf0>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	371c      	adds	r7, #28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	40023800 	.word	0x40023800
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	00f42400 	.word	0x00f42400
 8000d50:	017d7840 	.word	0x017d7840
 8000d54:	08001e80 	.word	0x08001e80

08000d58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d5c:	f7ff ff6a 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d62:	490d      	ldr	r1, [pc, #52]	; (8000d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <LoopForever+0xe>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d78:	4c0a      	ldr	r4, [pc, #40]	; (8000da4 <LoopForever+0x16>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d86:	f000 f817 	bl	8000db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fd09 	bl	80007a0 <main>

08000d8e <LoopForever>:

LoopForever:
  b LoopForever
 8000d8e:	e7fe      	b.n	8000d8e <LoopForever>
  ldr   r0, =_estack
 8000d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d9c:	08001f38 	.word	0x08001f38
  ldr r2, =_sbss
 8000da0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000da4:	200000b4 	.word	0x200000b4

08000da8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <__errno>:
 8000dac:	4b01      	ldr	r3, [pc, #4]	; (8000db4 <__errno+0x8>)
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000004 	.word	0x20000004

08000db8 <__libc_init_array>:
 8000db8:	b570      	push	{r4, r5, r6, lr}
 8000dba:	4d0d      	ldr	r5, [pc, #52]	; (8000df0 <__libc_init_array+0x38>)
 8000dbc:	4c0d      	ldr	r4, [pc, #52]	; (8000df4 <__libc_init_array+0x3c>)
 8000dbe:	1b64      	subs	r4, r4, r5
 8000dc0:	10a4      	asrs	r4, r4, #2
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	42a6      	cmp	r6, r4
 8000dc6:	d109      	bne.n	8000ddc <__libc_init_array+0x24>
 8000dc8:	4d0b      	ldr	r5, [pc, #44]	; (8000df8 <__libc_init_array+0x40>)
 8000dca:	4c0c      	ldr	r4, [pc, #48]	; (8000dfc <__libc_init_array+0x44>)
 8000dcc:	f001 f824 	bl	8001e18 <_init>
 8000dd0:	1b64      	subs	r4, r4, r5
 8000dd2:	10a4      	asrs	r4, r4, #2
 8000dd4:	2600      	movs	r6, #0
 8000dd6:	42a6      	cmp	r6, r4
 8000dd8:	d105      	bne.n	8000de6 <__libc_init_array+0x2e>
 8000dda:	bd70      	pop	{r4, r5, r6, pc}
 8000ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000de0:	4798      	blx	r3
 8000de2:	3601      	adds	r6, #1
 8000de4:	e7ee      	b.n	8000dc4 <__libc_init_array+0xc>
 8000de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dea:	4798      	blx	r3
 8000dec:	3601      	adds	r6, #1
 8000dee:	e7f2      	b.n	8000dd6 <__libc_init_array+0x1e>
 8000df0:	08001f30 	.word	0x08001f30
 8000df4:	08001f30 	.word	0x08001f30
 8000df8:	08001f30 	.word	0x08001f30
 8000dfc:	08001f34 	.word	0x08001f34

08000e00 <memset>:
 8000e00:	4402      	add	r2, r0
 8000e02:	4603      	mov	r3, r0
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d100      	bne.n	8000e0a <memset+0xa>
 8000e08:	4770      	bx	lr
 8000e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8000e0e:	e7f9      	b.n	8000e04 <memset+0x4>

08000e10 <iprintf>:
 8000e10:	b40f      	push	{r0, r1, r2, r3}
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <iprintf+0x2c>)
 8000e14:	b513      	push	{r0, r1, r4, lr}
 8000e16:	681c      	ldr	r4, [r3, #0]
 8000e18:	b124      	cbz	r4, 8000e24 <iprintf+0x14>
 8000e1a:	69a3      	ldr	r3, [r4, #24]
 8000e1c:	b913      	cbnz	r3, 8000e24 <iprintf+0x14>
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f000 fa5e 	bl	80012e0 <__sinit>
 8000e24:	ab05      	add	r3, sp, #20
 8000e26:	9a04      	ldr	r2, [sp, #16]
 8000e28:	68a1      	ldr	r1, [r4, #8]
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	f000 fc67 	bl	8001700 <_vfiprintf_r>
 8000e32:	b002      	add	sp, #8
 8000e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e38:	b004      	add	sp, #16
 8000e3a:	4770      	bx	lr
 8000e3c:	20000004 	.word	0x20000004

08000e40 <_puts_r>:
 8000e40:	b570      	push	{r4, r5, r6, lr}
 8000e42:	460e      	mov	r6, r1
 8000e44:	4605      	mov	r5, r0
 8000e46:	b118      	cbz	r0, 8000e50 <_puts_r+0x10>
 8000e48:	6983      	ldr	r3, [r0, #24]
 8000e4a:	b90b      	cbnz	r3, 8000e50 <_puts_r+0x10>
 8000e4c:	f000 fa48 	bl	80012e0 <__sinit>
 8000e50:	69ab      	ldr	r3, [r5, #24]
 8000e52:	68ac      	ldr	r4, [r5, #8]
 8000e54:	b913      	cbnz	r3, 8000e5c <_puts_r+0x1c>
 8000e56:	4628      	mov	r0, r5
 8000e58:	f000 fa42 	bl	80012e0 <__sinit>
 8000e5c:	4b2c      	ldr	r3, [pc, #176]	; (8000f10 <_puts_r+0xd0>)
 8000e5e:	429c      	cmp	r4, r3
 8000e60:	d120      	bne.n	8000ea4 <_puts_r+0x64>
 8000e62:	686c      	ldr	r4, [r5, #4]
 8000e64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e66:	07db      	lsls	r3, r3, #31
 8000e68:	d405      	bmi.n	8000e76 <_puts_r+0x36>
 8000e6a:	89a3      	ldrh	r3, [r4, #12]
 8000e6c:	0598      	lsls	r0, r3, #22
 8000e6e:	d402      	bmi.n	8000e76 <_puts_r+0x36>
 8000e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e72:	f000 fad3 	bl	800141c <__retarget_lock_acquire_recursive>
 8000e76:	89a3      	ldrh	r3, [r4, #12]
 8000e78:	0719      	lsls	r1, r3, #28
 8000e7a:	d51d      	bpl.n	8000eb8 <_puts_r+0x78>
 8000e7c:	6923      	ldr	r3, [r4, #16]
 8000e7e:	b1db      	cbz	r3, 8000eb8 <_puts_r+0x78>
 8000e80:	3e01      	subs	r6, #1
 8000e82:	68a3      	ldr	r3, [r4, #8]
 8000e84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	60a3      	str	r3, [r4, #8]
 8000e8c:	bb39      	cbnz	r1, 8000ede <_puts_r+0x9e>
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	da38      	bge.n	8000f04 <_puts_r+0xc4>
 8000e92:	4622      	mov	r2, r4
 8000e94:	210a      	movs	r1, #10
 8000e96:	4628      	mov	r0, r5
 8000e98:	f000 f848 	bl	8000f2c <__swbuf_r>
 8000e9c:	3001      	adds	r0, #1
 8000e9e:	d011      	beq.n	8000ec4 <_puts_r+0x84>
 8000ea0:	250a      	movs	r5, #10
 8000ea2:	e011      	b.n	8000ec8 <_puts_r+0x88>
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <_puts_r+0xd4>)
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	d101      	bne.n	8000eae <_puts_r+0x6e>
 8000eaa:	68ac      	ldr	r4, [r5, #8]
 8000eac:	e7da      	b.n	8000e64 <_puts_r+0x24>
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <_puts_r+0xd8>)
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	bf08      	it	eq
 8000eb4:	68ec      	ldreq	r4, [r5, #12]
 8000eb6:	e7d5      	b.n	8000e64 <_puts_r+0x24>
 8000eb8:	4621      	mov	r1, r4
 8000eba:	4628      	mov	r0, r5
 8000ebc:	f000 f888 	bl	8000fd0 <__swsetup_r>
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d0dd      	beq.n	8000e80 <_puts_r+0x40>
 8000ec4:	f04f 35ff 	mov.w	r5, #4294967295
 8000ec8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000eca:	07da      	lsls	r2, r3, #31
 8000ecc:	d405      	bmi.n	8000eda <_puts_r+0x9a>
 8000ece:	89a3      	ldrh	r3, [r4, #12]
 8000ed0:	059b      	lsls	r3, r3, #22
 8000ed2:	d402      	bmi.n	8000eda <_puts_r+0x9a>
 8000ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ed6:	f000 faa2 	bl	800141e <__retarget_lock_release_recursive>
 8000eda:	4628      	mov	r0, r5
 8000edc:	bd70      	pop	{r4, r5, r6, pc}
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	da04      	bge.n	8000eec <_puts_r+0xac>
 8000ee2:	69a2      	ldr	r2, [r4, #24]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dc06      	bgt.n	8000ef6 <_puts_r+0xb6>
 8000ee8:	290a      	cmp	r1, #10
 8000eea:	d004      	beq.n	8000ef6 <_puts_r+0xb6>
 8000eec:	6823      	ldr	r3, [r4, #0]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	6022      	str	r2, [r4, #0]
 8000ef2:	7019      	strb	r1, [r3, #0]
 8000ef4:	e7c5      	b.n	8000e82 <_puts_r+0x42>
 8000ef6:	4622      	mov	r2, r4
 8000ef8:	4628      	mov	r0, r5
 8000efa:	f000 f817 	bl	8000f2c <__swbuf_r>
 8000efe:	3001      	adds	r0, #1
 8000f00:	d1bf      	bne.n	8000e82 <_puts_r+0x42>
 8000f02:	e7df      	b.n	8000ec4 <_puts_r+0x84>
 8000f04:	6823      	ldr	r3, [r4, #0]
 8000f06:	250a      	movs	r5, #10
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	6022      	str	r2, [r4, #0]
 8000f0c:	701d      	strb	r5, [r3, #0]
 8000f0e:	e7db      	b.n	8000ec8 <_puts_r+0x88>
 8000f10:	08001eb4 	.word	0x08001eb4
 8000f14:	08001ed4 	.word	0x08001ed4
 8000f18:	08001e94 	.word	0x08001e94

08000f1c <puts>:
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <puts+0xc>)
 8000f1e:	4601      	mov	r1, r0
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	f7ff bf8d 	b.w	8000e40 <_puts_r>
 8000f26:	bf00      	nop
 8000f28:	20000004 	.word	0x20000004

08000f2c <__swbuf_r>:
 8000f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2e:	460e      	mov	r6, r1
 8000f30:	4614      	mov	r4, r2
 8000f32:	4605      	mov	r5, r0
 8000f34:	b118      	cbz	r0, 8000f3e <__swbuf_r+0x12>
 8000f36:	6983      	ldr	r3, [r0, #24]
 8000f38:	b90b      	cbnz	r3, 8000f3e <__swbuf_r+0x12>
 8000f3a:	f000 f9d1 	bl	80012e0 <__sinit>
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <__swbuf_r+0x98>)
 8000f40:	429c      	cmp	r4, r3
 8000f42:	d12b      	bne.n	8000f9c <__swbuf_r+0x70>
 8000f44:	686c      	ldr	r4, [r5, #4]
 8000f46:	69a3      	ldr	r3, [r4, #24]
 8000f48:	60a3      	str	r3, [r4, #8]
 8000f4a:	89a3      	ldrh	r3, [r4, #12]
 8000f4c:	071a      	lsls	r2, r3, #28
 8000f4e:	d52f      	bpl.n	8000fb0 <__swbuf_r+0x84>
 8000f50:	6923      	ldr	r3, [r4, #16]
 8000f52:	b36b      	cbz	r3, 8000fb0 <__swbuf_r+0x84>
 8000f54:	6923      	ldr	r3, [r4, #16]
 8000f56:	6820      	ldr	r0, [r4, #0]
 8000f58:	1ac0      	subs	r0, r0, r3
 8000f5a:	6963      	ldr	r3, [r4, #20]
 8000f5c:	b2f6      	uxtb	r6, r6
 8000f5e:	4283      	cmp	r3, r0
 8000f60:	4637      	mov	r7, r6
 8000f62:	dc04      	bgt.n	8000f6e <__swbuf_r+0x42>
 8000f64:	4621      	mov	r1, r4
 8000f66:	4628      	mov	r0, r5
 8000f68:	f000 f926 	bl	80011b8 <_fflush_r>
 8000f6c:	bb30      	cbnz	r0, 8000fbc <__swbuf_r+0x90>
 8000f6e:	68a3      	ldr	r3, [r4, #8]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	60a3      	str	r3, [r4, #8]
 8000f74:	6823      	ldr	r3, [r4, #0]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	6022      	str	r2, [r4, #0]
 8000f7a:	701e      	strb	r6, [r3, #0]
 8000f7c:	6963      	ldr	r3, [r4, #20]
 8000f7e:	3001      	adds	r0, #1
 8000f80:	4283      	cmp	r3, r0
 8000f82:	d004      	beq.n	8000f8e <__swbuf_r+0x62>
 8000f84:	89a3      	ldrh	r3, [r4, #12]
 8000f86:	07db      	lsls	r3, r3, #31
 8000f88:	d506      	bpl.n	8000f98 <__swbuf_r+0x6c>
 8000f8a:	2e0a      	cmp	r6, #10
 8000f8c:	d104      	bne.n	8000f98 <__swbuf_r+0x6c>
 8000f8e:	4621      	mov	r1, r4
 8000f90:	4628      	mov	r0, r5
 8000f92:	f000 f911 	bl	80011b8 <_fflush_r>
 8000f96:	b988      	cbnz	r0, 8000fbc <__swbuf_r+0x90>
 8000f98:	4638      	mov	r0, r7
 8000f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <__swbuf_r+0x9c>)
 8000f9e:	429c      	cmp	r4, r3
 8000fa0:	d101      	bne.n	8000fa6 <__swbuf_r+0x7a>
 8000fa2:	68ac      	ldr	r4, [r5, #8]
 8000fa4:	e7cf      	b.n	8000f46 <__swbuf_r+0x1a>
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <__swbuf_r+0xa0>)
 8000fa8:	429c      	cmp	r4, r3
 8000faa:	bf08      	it	eq
 8000fac:	68ec      	ldreq	r4, [r5, #12]
 8000fae:	e7ca      	b.n	8000f46 <__swbuf_r+0x1a>
 8000fb0:	4621      	mov	r1, r4
 8000fb2:	4628      	mov	r0, r5
 8000fb4:	f000 f80c 	bl	8000fd0 <__swsetup_r>
 8000fb8:	2800      	cmp	r0, #0
 8000fba:	d0cb      	beq.n	8000f54 <__swbuf_r+0x28>
 8000fbc:	f04f 37ff 	mov.w	r7, #4294967295
 8000fc0:	e7ea      	b.n	8000f98 <__swbuf_r+0x6c>
 8000fc2:	bf00      	nop
 8000fc4:	08001eb4 	.word	0x08001eb4
 8000fc8:	08001ed4 	.word	0x08001ed4
 8000fcc:	08001e94 	.word	0x08001e94

08000fd0 <__swsetup_r>:
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <__swsetup_r+0xcc>)
 8000fd2:	b570      	push	{r4, r5, r6, lr}
 8000fd4:	681d      	ldr	r5, [r3, #0]
 8000fd6:	4606      	mov	r6, r0
 8000fd8:	460c      	mov	r4, r1
 8000fda:	b125      	cbz	r5, 8000fe6 <__swsetup_r+0x16>
 8000fdc:	69ab      	ldr	r3, [r5, #24]
 8000fde:	b913      	cbnz	r3, 8000fe6 <__swsetup_r+0x16>
 8000fe0:	4628      	mov	r0, r5
 8000fe2:	f000 f97d 	bl	80012e0 <__sinit>
 8000fe6:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <__swsetup_r+0xd0>)
 8000fe8:	429c      	cmp	r4, r3
 8000fea:	d10f      	bne.n	800100c <__swsetup_r+0x3c>
 8000fec:	686c      	ldr	r4, [r5, #4]
 8000fee:	89a3      	ldrh	r3, [r4, #12]
 8000ff0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ff4:	0719      	lsls	r1, r3, #28
 8000ff6:	d42c      	bmi.n	8001052 <__swsetup_r+0x82>
 8000ff8:	06dd      	lsls	r5, r3, #27
 8000ffa:	d411      	bmi.n	8001020 <__swsetup_r+0x50>
 8000ffc:	2309      	movs	r3, #9
 8000ffe:	6033      	str	r3, [r6, #0]
 8001000:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001004:	81a3      	strh	r3, [r4, #12]
 8001006:	f04f 30ff 	mov.w	r0, #4294967295
 800100a:	e03e      	b.n	800108a <__swsetup_r+0xba>
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <__swsetup_r+0xd4>)
 800100e:	429c      	cmp	r4, r3
 8001010:	d101      	bne.n	8001016 <__swsetup_r+0x46>
 8001012:	68ac      	ldr	r4, [r5, #8]
 8001014:	e7eb      	b.n	8000fee <__swsetup_r+0x1e>
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <__swsetup_r+0xd8>)
 8001018:	429c      	cmp	r4, r3
 800101a:	bf08      	it	eq
 800101c:	68ec      	ldreq	r4, [r5, #12]
 800101e:	e7e6      	b.n	8000fee <__swsetup_r+0x1e>
 8001020:	0758      	lsls	r0, r3, #29
 8001022:	d512      	bpl.n	800104a <__swsetup_r+0x7a>
 8001024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001026:	b141      	cbz	r1, 800103a <__swsetup_r+0x6a>
 8001028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800102c:	4299      	cmp	r1, r3
 800102e:	d002      	beq.n	8001036 <__swsetup_r+0x66>
 8001030:	4630      	mov	r0, r6
 8001032:	f000 fa5b 	bl	80014ec <_free_r>
 8001036:	2300      	movs	r3, #0
 8001038:	6363      	str	r3, [r4, #52]	; 0x34
 800103a:	89a3      	ldrh	r3, [r4, #12]
 800103c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001040:	81a3      	strh	r3, [r4, #12]
 8001042:	2300      	movs	r3, #0
 8001044:	6063      	str	r3, [r4, #4]
 8001046:	6923      	ldr	r3, [r4, #16]
 8001048:	6023      	str	r3, [r4, #0]
 800104a:	89a3      	ldrh	r3, [r4, #12]
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	81a3      	strh	r3, [r4, #12]
 8001052:	6923      	ldr	r3, [r4, #16]
 8001054:	b94b      	cbnz	r3, 800106a <__swsetup_r+0x9a>
 8001056:	89a3      	ldrh	r3, [r4, #12]
 8001058:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800105c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001060:	d003      	beq.n	800106a <__swsetup_r+0x9a>
 8001062:	4621      	mov	r1, r4
 8001064:	4630      	mov	r0, r6
 8001066:	f000 fa01 	bl	800146c <__smakebuf_r>
 800106a:	89a0      	ldrh	r0, [r4, #12]
 800106c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001070:	f010 0301 	ands.w	r3, r0, #1
 8001074:	d00a      	beq.n	800108c <__swsetup_r+0xbc>
 8001076:	2300      	movs	r3, #0
 8001078:	60a3      	str	r3, [r4, #8]
 800107a:	6963      	ldr	r3, [r4, #20]
 800107c:	425b      	negs	r3, r3
 800107e:	61a3      	str	r3, [r4, #24]
 8001080:	6923      	ldr	r3, [r4, #16]
 8001082:	b943      	cbnz	r3, 8001096 <__swsetup_r+0xc6>
 8001084:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001088:	d1ba      	bne.n	8001000 <__swsetup_r+0x30>
 800108a:	bd70      	pop	{r4, r5, r6, pc}
 800108c:	0781      	lsls	r1, r0, #30
 800108e:	bf58      	it	pl
 8001090:	6963      	ldrpl	r3, [r4, #20]
 8001092:	60a3      	str	r3, [r4, #8]
 8001094:	e7f4      	b.n	8001080 <__swsetup_r+0xb0>
 8001096:	2000      	movs	r0, #0
 8001098:	e7f7      	b.n	800108a <__swsetup_r+0xba>
 800109a:	bf00      	nop
 800109c:	20000004 	.word	0x20000004
 80010a0:	08001eb4 	.word	0x08001eb4
 80010a4:	08001ed4 	.word	0x08001ed4
 80010a8:	08001e94 	.word	0x08001e94

080010ac <__sflush_r>:
 80010ac:	898a      	ldrh	r2, [r1, #12]
 80010ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010b2:	4605      	mov	r5, r0
 80010b4:	0710      	lsls	r0, r2, #28
 80010b6:	460c      	mov	r4, r1
 80010b8:	d458      	bmi.n	800116c <__sflush_r+0xc0>
 80010ba:	684b      	ldr	r3, [r1, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	dc05      	bgt.n	80010cc <__sflush_r+0x20>
 80010c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	dc02      	bgt.n	80010cc <__sflush_r+0x20>
 80010c6:	2000      	movs	r0, #0
 80010c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010ce:	2e00      	cmp	r6, #0
 80010d0:	d0f9      	beq.n	80010c6 <__sflush_r+0x1a>
 80010d2:	2300      	movs	r3, #0
 80010d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80010d8:	682f      	ldr	r7, [r5, #0]
 80010da:	602b      	str	r3, [r5, #0]
 80010dc:	d032      	beq.n	8001144 <__sflush_r+0x98>
 80010de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80010e0:	89a3      	ldrh	r3, [r4, #12]
 80010e2:	075a      	lsls	r2, r3, #29
 80010e4:	d505      	bpl.n	80010f2 <__sflush_r+0x46>
 80010e6:	6863      	ldr	r3, [r4, #4]
 80010e8:	1ac0      	subs	r0, r0, r3
 80010ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80010ec:	b10b      	cbz	r3, 80010f2 <__sflush_r+0x46>
 80010ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010f0:	1ac0      	subs	r0, r0, r3
 80010f2:	2300      	movs	r3, #0
 80010f4:	4602      	mov	r2, r0
 80010f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80010f8:	6a21      	ldr	r1, [r4, #32]
 80010fa:	4628      	mov	r0, r5
 80010fc:	47b0      	blx	r6
 80010fe:	1c43      	adds	r3, r0, #1
 8001100:	89a3      	ldrh	r3, [r4, #12]
 8001102:	d106      	bne.n	8001112 <__sflush_r+0x66>
 8001104:	6829      	ldr	r1, [r5, #0]
 8001106:	291d      	cmp	r1, #29
 8001108:	d82c      	bhi.n	8001164 <__sflush_r+0xb8>
 800110a:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <__sflush_r+0x108>)
 800110c:	40ca      	lsrs	r2, r1
 800110e:	07d6      	lsls	r6, r2, #31
 8001110:	d528      	bpl.n	8001164 <__sflush_r+0xb8>
 8001112:	2200      	movs	r2, #0
 8001114:	6062      	str	r2, [r4, #4]
 8001116:	04d9      	lsls	r1, r3, #19
 8001118:	6922      	ldr	r2, [r4, #16]
 800111a:	6022      	str	r2, [r4, #0]
 800111c:	d504      	bpl.n	8001128 <__sflush_r+0x7c>
 800111e:	1c42      	adds	r2, r0, #1
 8001120:	d101      	bne.n	8001126 <__sflush_r+0x7a>
 8001122:	682b      	ldr	r3, [r5, #0]
 8001124:	b903      	cbnz	r3, 8001128 <__sflush_r+0x7c>
 8001126:	6560      	str	r0, [r4, #84]	; 0x54
 8001128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800112a:	602f      	str	r7, [r5, #0]
 800112c:	2900      	cmp	r1, #0
 800112e:	d0ca      	beq.n	80010c6 <__sflush_r+0x1a>
 8001130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001134:	4299      	cmp	r1, r3
 8001136:	d002      	beq.n	800113e <__sflush_r+0x92>
 8001138:	4628      	mov	r0, r5
 800113a:	f000 f9d7 	bl	80014ec <_free_r>
 800113e:	2000      	movs	r0, #0
 8001140:	6360      	str	r0, [r4, #52]	; 0x34
 8001142:	e7c1      	b.n	80010c8 <__sflush_r+0x1c>
 8001144:	6a21      	ldr	r1, [r4, #32]
 8001146:	2301      	movs	r3, #1
 8001148:	4628      	mov	r0, r5
 800114a:	47b0      	blx	r6
 800114c:	1c41      	adds	r1, r0, #1
 800114e:	d1c7      	bne.n	80010e0 <__sflush_r+0x34>
 8001150:	682b      	ldr	r3, [r5, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d0c4      	beq.n	80010e0 <__sflush_r+0x34>
 8001156:	2b1d      	cmp	r3, #29
 8001158:	d001      	beq.n	800115e <__sflush_r+0xb2>
 800115a:	2b16      	cmp	r3, #22
 800115c:	d101      	bne.n	8001162 <__sflush_r+0xb6>
 800115e:	602f      	str	r7, [r5, #0]
 8001160:	e7b1      	b.n	80010c6 <__sflush_r+0x1a>
 8001162:	89a3      	ldrh	r3, [r4, #12]
 8001164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001168:	81a3      	strh	r3, [r4, #12]
 800116a:	e7ad      	b.n	80010c8 <__sflush_r+0x1c>
 800116c:	690f      	ldr	r7, [r1, #16]
 800116e:	2f00      	cmp	r7, #0
 8001170:	d0a9      	beq.n	80010c6 <__sflush_r+0x1a>
 8001172:	0793      	lsls	r3, r2, #30
 8001174:	680e      	ldr	r6, [r1, #0]
 8001176:	bf08      	it	eq
 8001178:	694b      	ldreq	r3, [r1, #20]
 800117a:	600f      	str	r7, [r1, #0]
 800117c:	bf18      	it	ne
 800117e:	2300      	movne	r3, #0
 8001180:	eba6 0807 	sub.w	r8, r6, r7
 8001184:	608b      	str	r3, [r1, #8]
 8001186:	f1b8 0f00 	cmp.w	r8, #0
 800118a:	dd9c      	ble.n	80010c6 <__sflush_r+0x1a>
 800118c:	6a21      	ldr	r1, [r4, #32]
 800118e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001190:	4643      	mov	r3, r8
 8001192:	463a      	mov	r2, r7
 8001194:	4628      	mov	r0, r5
 8001196:	47b0      	blx	r6
 8001198:	2800      	cmp	r0, #0
 800119a:	dc06      	bgt.n	80011aa <__sflush_r+0xfe>
 800119c:	89a3      	ldrh	r3, [r4, #12]
 800119e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a2:	81a3      	strh	r3, [r4, #12]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	e78e      	b.n	80010c8 <__sflush_r+0x1c>
 80011aa:	4407      	add	r7, r0
 80011ac:	eba8 0800 	sub.w	r8, r8, r0
 80011b0:	e7e9      	b.n	8001186 <__sflush_r+0xda>
 80011b2:	bf00      	nop
 80011b4:	20400001 	.word	0x20400001

080011b8 <_fflush_r>:
 80011b8:	b538      	push	{r3, r4, r5, lr}
 80011ba:	690b      	ldr	r3, [r1, #16]
 80011bc:	4605      	mov	r5, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	b913      	cbnz	r3, 80011c8 <_fflush_r+0x10>
 80011c2:	2500      	movs	r5, #0
 80011c4:	4628      	mov	r0, r5
 80011c6:	bd38      	pop	{r3, r4, r5, pc}
 80011c8:	b118      	cbz	r0, 80011d2 <_fflush_r+0x1a>
 80011ca:	6983      	ldr	r3, [r0, #24]
 80011cc:	b90b      	cbnz	r3, 80011d2 <_fflush_r+0x1a>
 80011ce:	f000 f887 	bl	80012e0 <__sinit>
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <_fflush_r+0x6c>)
 80011d4:	429c      	cmp	r4, r3
 80011d6:	d11b      	bne.n	8001210 <_fflush_r+0x58>
 80011d8:	686c      	ldr	r4, [r5, #4]
 80011da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0ef      	beq.n	80011c2 <_fflush_r+0xa>
 80011e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80011e4:	07d0      	lsls	r0, r2, #31
 80011e6:	d404      	bmi.n	80011f2 <_fflush_r+0x3a>
 80011e8:	0599      	lsls	r1, r3, #22
 80011ea:	d402      	bmi.n	80011f2 <_fflush_r+0x3a>
 80011ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011ee:	f000 f915 	bl	800141c <__retarget_lock_acquire_recursive>
 80011f2:	4628      	mov	r0, r5
 80011f4:	4621      	mov	r1, r4
 80011f6:	f7ff ff59 	bl	80010ac <__sflush_r>
 80011fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80011fc:	07da      	lsls	r2, r3, #31
 80011fe:	4605      	mov	r5, r0
 8001200:	d4e0      	bmi.n	80011c4 <_fflush_r+0xc>
 8001202:	89a3      	ldrh	r3, [r4, #12]
 8001204:	059b      	lsls	r3, r3, #22
 8001206:	d4dd      	bmi.n	80011c4 <_fflush_r+0xc>
 8001208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800120a:	f000 f908 	bl	800141e <__retarget_lock_release_recursive>
 800120e:	e7d9      	b.n	80011c4 <_fflush_r+0xc>
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <_fflush_r+0x70>)
 8001212:	429c      	cmp	r4, r3
 8001214:	d101      	bne.n	800121a <_fflush_r+0x62>
 8001216:	68ac      	ldr	r4, [r5, #8]
 8001218:	e7df      	b.n	80011da <_fflush_r+0x22>
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <_fflush_r+0x74>)
 800121c:	429c      	cmp	r4, r3
 800121e:	bf08      	it	eq
 8001220:	68ec      	ldreq	r4, [r5, #12]
 8001222:	e7da      	b.n	80011da <_fflush_r+0x22>
 8001224:	08001eb4 	.word	0x08001eb4
 8001228:	08001ed4 	.word	0x08001ed4
 800122c:	08001e94 	.word	0x08001e94

08001230 <std>:
 8001230:	2300      	movs	r3, #0
 8001232:	b510      	push	{r4, lr}
 8001234:	4604      	mov	r4, r0
 8001236:	e9c0 3300 	strd	r3, r3, [r0]
 800123a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800123e:	6083      	str	r3, [r0, #8]
 8001240:	8181      	strh	r1, [r0, #12]
 8001242:	6643      	str	r3, [r0, #100]	; 0x64
 8001244:	81c2      	strh	r2, [r0, #14]
 8001246:	6183      	str	r3, [r0, #24]
 8001248:	4619      	mov	r1, r3
 800124a:	2208      	movs	r2, #8
 800124c:	305c      	adds	r0, #92	; 0x5c
 800124e:	f7ff fdd7 	bl	8000e00 <memset>
 8001252:	4b05      	ldr	r3, [pc, #20]	; (8001268 <std+0x38>)
 8001254:	6263      	str	r3, [r4, #36]	; 0x24
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <std+0x3c>)
 8001258:	62a3      	str	r3, [r4, #40]	; 0x28
 800125a:	4b05      	ldr	r3, [pc, #20]	; (8001270 <std+0x40>)
 800125c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800125e:	4b05      	ldr	r3, [pc, #20]	; (8001274 <std+0x44>)
 8001260:	6224      	str	r4, [r4, #32]
 8001262:	6323      	str	r3, [r4, #48]	; 0x30
 8001264:	bd10      	pop	{r4, pc}
 8001266:	bf00      	nop
 8001268:	08001ca9 	.word	0x08001ca9
 800126c:	08001ccb 	.word	0x08001ccb
 8001270:	08001d03 	.word	0x08001d03
 8001274:	08001d27 	.word	0x08001d27

08001278 <_cleanup_r>:
 8001278:	4901      	ldr	r1, [pc, #4]	; (8001280 <_cleanup_r+0x8>)
 800127a:	f000 b8af 	b.w	80013dc <_fwalk_reent>
 800127e:	bf00      	nop
 8001280:	080011b9 	.word	0x080011b9

08001284 <__sfmoreglue>:
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	2268      	movs	r2, #104	; 0x68
 8001288:	1e4d      	subs	r5, r1, #1
 800128a:	4355      	muls	r5, r2
 800128c:	460e      	mov	r6, r1
 800128e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001292:	f000 f997 	bl	80015c4 <_malloc_r>
 8001296:	4604      	mov	r4, r0
 8001298:	b140      	cbz	r0, 80012ac <__sfmoreglue+0x28>
 800129a:	2100      	movs	r1, #0
 800129c:	e9c0 1600 	strd	r1, r6, [r0]
 80012a0:	300c      	adds	r0, #12
 80012a2:	60a0      	str	r0, [r4, #8]
 80012a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80012a8:	f7ff fdaa 	bl	8000e00 <memset>
 80012ac:	4620      	mov	r0, r4
 80012ae:	bd70      	pop	{r4, r5, r6, pc}

080012b0 <__sfp_lock_acquire>:
 80012b0:	4801      	ldr	r0, [pc, #4]	; (80012b8 <__sfp_lock_acquire+0x8>)
 80012b2:	f000 b8b3 	b.w	800141c <__retarget_lock_acquire_recursive>
 80012b6:	bf00      	nop
 80012b8:	200000a5 	.word	0x200000a5

080012bc <__sfp_lock_release>:
 80012bc:	4801      	ldr	r0, [pc, #4]	; (80012c4 <__sfp_lock_release+0x8>)
 80012be:	f000 b8ae 	b.w	800141e <__retarget_lock_release_recursive>
 80012c2:	bf00      	nop
 80012c4:	200000a5 	.word	0x200000a5

080012c8 <__sinit_lock_acquire>:
 80012c8:	4801      	ldr	r0, [pc, #4]	; (80012d0 <__sinit_lock_acquire+0x8>)
 80012ca:	f000 b8a7 	b.w	800141c <__retarget_lock_acquire_recursive>
 80012ce:	bf00      	nop
 80012d0:	200000a6 	.word	0x200000a6

080012d4 <__sinit_lock_release>:
 80012d4:	4801      	ldr	r0, [pc, #4]	; (80012dc <__sinit_lock_release+0x8>)
 80012d6:	f000 b8a2 	b.w	800141e <__retarget_lock_release_recursive>
 80012da:	bf00      	nop
 80012dc:	200000a6 	.word	0x200000a6

080012e0 <__sinit>:
 80012e0:	b510      	push	{r4, lr}
 80012e2:	4604      	mov	r4, r0
 80012e4:	f7ff fff0 	bl	80012c8 <__sinit_lock_acquire>
 80012e8:	69a3      	ldr	r3, [r4, #24]
 80012ea:	b11b      	cbz	r3, 80012f4 <__sinit+0x14>
 80012ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012f0:	f7ff bff0 	b.w	80012d4 <__sinit_lock_release>
 80012f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80012f8:	6523      	str	r3, [r4, #80]	; 0x50
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <__sinit+0x68>)
 80012fc:	4a13      	ldr	r2, [pc, #76]	; (800134c <__sinit+0x6c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	62a2      	str	r2, [r4, #40]	; 0x28
 8001302:	42a3      	cmp	r3, r4
 8001304:	bf04      	itt	eq
 8001306:	2301      	moveq	r3, #1
 8001308:	61a3      	streq	r3, [r4, #24]
 800130a:	4620      	mov	r0, r4
 800130c:	f000 f820 	bl	8001350 <__sfp>
 8001310:	6060      	str	r0, [r4, #4]
 8001312:	4620      	mov	r0, r4
 8001314:	f000 f81c 	bl	8001350 <__sfp>
 8001318:	60a0      	str	r0, [r4, #8]
 800131a:	4620      	mov	r0, r4
 800131c:	f000 f818 	bl	8001350 <__sfp>
 8001320:	2200      	movs	r2, #0
 8001322:	60e0      	str	r0, [r4, #12]
 8001324:	2104      	movs	r1, #4
 8001326:	6860      	ldr	r0, [r4, #4]
 8001328:	f7ff ff82 	bl	8001230 <std>
 800132c:	68a0      	ldr	r0, [r4, #8]
 800132e:	2201      	movs	r2, #1
 8001330:	2109      	movs	r1, #9
 8001332:	f7ff ff7d 	bl	8001230 <std>
 8001336:	68e0      	ldr	r0, [r4, #12]
 8001338:	2202      	movs	r2, #2
 800133a:	2112      	movs	r1, #18
 800133c:	f7ff ff78 	bl	8001230 <std>
 8001340:	2301      	movs	r3, #1
 8001342:	61a3      	str	r3, [r4, #24]
 8001344:	e7d2      	b.n	80012ec <__sinit+0xc>
 8001346:	bf00      	nop
 8001348:	08001e90 	.word	0x08001e90
 800134c:	08001279 	.word	0x08001279

08001350 <__sfp>:
 8001350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001352:	4607      	mov	r7, r0
 8001354:	f7ff ffac 	bl	80012b0 <__sfp_lock_acquire>
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <__sfp+0x84>)
 800135a:	681e      	ldr	r6, [r3, #0]
 800135c:	69b3      	ldr	r3, [r6, #24]
 800135e:	b913      	cbnz	r3, 8001366 <__sfp+0x16>
 8001360:	4630      	mov	r0, r6
 8001362:	f7ff ffbd 	bl	80012e0 <__sinit>
 8001366:	3648      	adds	r6, #72	; 0x48
 8001368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800136c:	3b01      	subs	r3, #1
 800136e:	d503      	bpl.n	8001378 <__sfp+0x28>
 8001370:	6833      	ldr	r3, [r6, #0]
 8001372:	b30b      	cbz	r3, 80013b8 <__sfp+0x68>
 8001374:	6836      	ldr	r6, [r6, #0]
 8001376:	e7f7      	b.n	8001368 <__sfp+0x18>
 8001378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800137c:	b9d5      	cbnz	r5, 80013b4 <__sfp+0x64>
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <__sfp+0x88>)
 8001380:	60e3      	str	r3, [r4, #12]
 8001382:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001386:	6665      	str	r5, [r4, #100]	; 0x64
 8001388:	f000 f847 	bl	800141a <__retarget_lock_init_recursive>
 800138c:	f7ff ff96 	bl	80012bc <__sfp_lock_release>
 8001390:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001394:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001398:	6025      	str	r5, [r4, #0]
 800139a:	61a5      	str	r5, [r4, #24]
 800139c:	2208      	movs	r2, #8
 800139e:	4629      	mov	r1, r5
 80013a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80013a4:	f7ff fd2c 	bl	8000e00 <memset>
 80013a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80013ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80013b0:	4620      	mov	r0, r4
 80013b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013b4:	3468      	adds	r4, #104	; 0x68
 80013b6:	e7d9      	b.n	800136c <__sfp+0x1c>
 80013b8:	2104      	movs	r1, #4
 80013ba:	4638      	mov	r0, r7
 80013bc:	f7ff ff62 	bl	8001284 <__sfmoreglue>
 80013c0:	4604      	mov	r4, r0
 80013c2:	6030      	str	r0, [r6, #0]
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d1d5      	bne.n	8001374 <__sfp+0x24>
 80013c8:	f7ff ff78 	bl	80012bc <__sfp_lock_release>
 80013cc:	230c      	movs	r3, #12
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	e7ee      	b.n	80013b0 <__sfp+0x60>
 80013d2:	bf00      	nop
 80013d4:	08001e90 	.word	0x08001e90
 80013d8:	ffff0001 	.word	0xffff0001

080013dc <_fwalk_reent>:
 80013dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013e0:	4606      	mov	r6, r0
 80013e2:	4688      	mov	r8, r1
 80013e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80013e8:	2700      	movs	r7, #0
 80013ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80013ee:	f1b9 0901 	subs.w	r9, r9, #1
 80013f2:	d505      	bpl.n	8001400 <_fwalk_reent+0x24>
 80013f4:	6824      	ldr	r4, [r4, #0]
 80013f6:	2c00      	cmp	r4, #0
 80013f8:	d1f7      	bne.n	80013ea <_fwalk_reent+0xe>
 80013fa:	4638      	mov	r0, r7
 80013fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001400:	89ab      	ldrh	r3, [r5, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d907      	bls.n	8001416 <_fwalk_reent+0x3a>
 8001406:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800140a:	3301      	adds	r3, #1
 800140c:	d003      	beq.n	8001416 <_fwalk_reent+0x3a>
 800140e:	4629      	mov	r1, r5
 8001410:	4630      	mov	r0, r6
 8001412:	47c0      	blx	r8
 8001414:	4307      	orrs	r7, r0
 8001416:	3568      	adds	r5, #104	; 0x68
 8001418:	e7e9      	b.n	80013ee <_fwalk_reent+0x12>

0800141a <__retarget_lock_init_recursive>:
 800141a:	4770      	bx	lr

0800141c <__retarget_lock_acquire_recursive>:
 800141c:	4770      	bx	lr

0800141e <__retarget_lock_release_recursive>:
 800141e:	4770      	bx	lr

08001420 <__swhatbuf_r>:
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	460e      	mov	r6, r1
 8001424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001428:	2900      	cmp	r1, #0
 800142a:	b096      	sub	sp, #88	; 0x58
 800142c:	4614      	mov	r4, r2
 800142e:	461d      	mov	r5, r3
 8001430:	da08      	bge.n	8001444 <__swhatbuf_r+0x24>
 8001432:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	602a      	str	r2, [r5, #0]
 800143a:	061a      	lsls	r2, r3, #24
 800143c:	d410      	bmi.n	8001460 <__swhatbuf_r+0x40>
 800143e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001442:	e00e      	b.n	8001462 <__swhatbuf_r+0x42>
 8001444:	466a      	mov	r2, sp
 8001446:	f000 fc95 	bl	8001d74 <_fstat_r>
 800144a:	2800      	cmp	r0, #0
 800144c:	dbf1      	blt.n	8001432 <__swhatbuf_r+0x12>
 800144e:	9a01      	ldr	r2, [sp, #4]
 8001450:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001454:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001458:	425a      	negs	r2, r3
 800145a:	415a      	adcs	r2, r3
 800145c:	602a      	str	r2, [r5, #0]
 800145e:	e7ee      	b.n	800143e <__swhatbuf_r+0x1e>
 8001460:	2340      	movs	r3, #64	; 0x40
 8001462:	2000      	movs	r0, #0
 8001464:	6023      	str	r3, [r4, #0]
 8001466:	b016      	add	sp, #88	; 0x58
 8001468:	bd70      	pop	{r4, r5, r6, pc}
	...

0800146c <__smakebuf_r>:
 800146c:	898b      	ldrh	r3, [r1, #12]
 800146e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001470:	079d      	lsls	r5, r3, #30
 8001472:	4606      	mov	r6, r0
 8001474:	460c      	mov	r4, r1
 8001476:	d507      	bpl.n	8001488 <__smakebuf_r+0x1c>
 8001478:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800147c:	6023      	str	r3, [r4, #0]
 800147e:	6123      	str	r3, [r4, #16]
 8001480:	2301      	movs	r3, #1
 8001482:	6163      	str	r3, [r4, #20]
 8001484:	b002      	add	sp, #8
 8001486:	bd70      	pop	{r4, r5, r6, pc}
 8001488:	ab01      	add	r3, sp, #4
 800148a:	466a      	mov	r2, sp
 800148c:	f7ff ffc8 	bl	8001420 <__swhatbuf_r>
 8001490:	9900      	ldr	r1, [sp, #0]
 8001492:	4605      	mov	r5, r0
 8001494:	4630      	mov	r0, r6
 8001496:	f000 f895 	bl	80015c4 <_malloc_r>
 800149a:	b948      	cbnz	r0, 80014b0 <__smakebuf_r+0x44>
 800149c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014a0:	059a      	lsls	r2, r3, #22
 80014a2:	d4ef      	bmi.n	8001484 <__smakebuf_r+0x18>
 80014a4:	f023 0303 	bic.w	r3, r3, #3
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	81a3      	strh	r3, [r4, #12]
 80014ae:	e7e3      	b.n	8001478 <__smakebuf_r+0xc>
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <__smakebuf_r+0x7c>)
 80014b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80014b4:	89a3      	ldrh	r3, [r4, #12]
 80014b6:	6020      	str	r0, [r4, #0]
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	81a3      	strh	r3, [r4, #12]
 80014be:	9b00      	ldr	r3, [sp, #0]
 80014c0:	6163      	str	r3, [r4, #20]
 80014c2:	9b01      	ldr	r3, [sp, #4]
 80014c4:	6120      	str	r0, [r4, #16]
 80014c6:	b15b      	cbz	r3, 80014e0 <__smakebuf_r+0x74>
 80014c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014cc:	4630      	mov	r0, r6
 80014ce:	f000 fc63 	bl	8001d98 <_isatty_r>
 80014d2:	b128      	cbz	r0, 80014e0 <__smakebuf_r+0x74>
 80014d4:	89a3      	ldrh	r3, [r4, #12]
 80014d6:	f023 0303 	bic.w	r3, r3, #3
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	81a3      	strh	r3, [r4, #12]
 80014e0:	89a0      	ldrh	r0, [r4, #12]
 80014e2:	4305      	orrs	r5, r0
 80014e4:	81a5      	strh	r5, [r4, #12]
 80014e6:	e7cd      	b.n	8001484 <__smakebuf_r+0x18>
 80014e8:	08001279 	.word	0x08001279

080014ec <_free_r>:
 80014ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014ee:	2900      	cmp	r1, #0
 80014f0:	d044      	beq.n	800157c <_free_r+0x90>
 80014f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014f6:	9001      	str	r0, [sp, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f1a1 0404 	sub.w	r4, r1, #4
 80014fe:	bfb8      	it	lt
 8001500:	18e4      	addlt	r4, r4, r3
 8001502:	f000 fc6b 	bl	8001ddc <__malloc_lock>
 8001506:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <_free_r+0x94>)
 8001508:	9801      	ldr	r0, [sp, #4]
 800150a:	6813      	ldr	r3, [r2, #0]
 800150c:	b933      	cbnz	r3, 800151c <_free_r+0x30>
 800150e:	6063      	str	r3, [r4, #4]
 8001510:	6014      	str	r4, [r2, #0]
 8001512:	b003      	add	sp, #12
 8001514:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001518:	f000 bc66 	b.w	8001de8 <__malloc_unlock>
 800151c:	42a3      	cmp	r3, r4
 800151e:	d908      	bls.n	8001532 <_free_r+0x46>
 8001520:	6825      	ldr	r5, [r4, #0]
 8001522:	1961      	adds	r1, r4, r5
 8001524:	428b      	cmp	r3, r1
 8001526:	bf01      	itttt	eq
 8001528:	6819      	ldreq	r1, [r3, #0]
 800152a:	685b      	ldreq	r3, [r3, #4]
 800152c:	1949      	addeq	r1, r1, r5
 800152e:	6021      	streq	r1, [r4, #0]
 8001530:	e7ed      	b.n	800150e <_free_r+0x22>
 8001532:	461a      	mov	r2, r3
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	b10b      	cbz	r3, 800153c <_free_r+0x50>
 8001538:	42a3      	cmp	r3, r4
 800153a:	d9fa      	bls.n	8001532 <_free_r+0x46>
 800153c:	6811      	ldr	r1, [r2, #0]
 800153e:	1855      	adds	r5, r2, r1
 8001540:	42a5      	cmp	r5, r4
 8001542:	d10b      	bne.n	800155c <_free_r+0x70>
 8001544:	6824      	ldr	r4, [r4, #0]
 8001546:	4421      	add	r1, r4
 8001548:	1854      	adds	r4, r2, r1
 800154a:	42a3      	cmp	r3, r4
 800154c:	6011      	str	r1, [r2, #0]
 800154e:	d1e0      	bne.n	8001512 <_free_r+0x26>
 8001550:	681c      	ldr	r4, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	6053      	str	r3, [r2, #4]
 8001556:	4421      	add	r1, r4
 8001558:	6011      	str	r1, [r2, #0]
 800155a:	e7da      	b.n	8001512 <_free_r+0x26>
 800155c:	d902      	bls.n	8001564 <_free_r+0x78>
 800155e:	230c      	movs	r3, #12
 8001560:	6003      	str	r3, [r0, #0]
 8001562:	e7d6      	b.n	8001512 <_free_r+0x26>
 8001564:	6825      	ldr	r5, [r4, #0]
 8001566:	1961      	adds	r1, r4, r5
 8001568:	428b      	cmp	r3, r1
 800156a:	bf04      	itt	eq
 800156c:	6819      	ldreq	r1, [r3, #0]
 800156e:	685b      	ldreq	r3, [r3, #4]
 8001570:	6063      	str	r3, [r4, #4]
 8001572:	bf04      	itt	eq
 8001574:	1949      	addeq	r1, r1, r5
 8001576:	6021      	streq	r1, [r4, #0]
 8001578:	6054      	str	r4, [r2, #4]
 800157a:	e7ca      	b.n	8001512 <_free_r+0x26>
 800157c:	b003      	add	sp, #12
 800157e:	bd30      	pop	{r4, r5, pc}
 8001580:	200000a8 	.word	0x200000a8

08001584 <sbrk_aligned>:
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	4e0e      	ldr	r6, [pc, #56]	; (80015c0 <sbrk_aligned+0x3c>)
 8001588:	460c      	mov	r4, r1
 800158a:	6831      	ldr	r1, [r6, #0]
 800158c:	4605      	mov	r5, r0
 800158e:	b911      	cbnz	r1, 8001596 <sbrk_aligned+0x12>
 8001590:	f000 fb7a 	bl	8001c88 <_sbrk_r>
 8001594:	6030      	str	r0, [r6, #0]
 8001596:	4621      	mov	r1, r4
 8001598:	4628      	mov	r0, r5
 800159a:	f000 fb75 	bl	8001c88 <_sbrk_r>
 800159e:	1c43      	adds	r3, r0, #1
 80015a0:	d00a      	beq.n	80015b8 <sbrk_aligned+0x34>
 80015a2:	1cc4      	adds	r4, r0, #3
 80015a4:	f024 0403 	bic.w	r4, r4, #3
 80015a8:	42a0      	cmp	r0, r4
 80015aa:	d007      	beq.n	80015bc <sbrk_aligned+0x38>
 80015ac:	1a21      	subs	r1, r4, r0
 80015ae:	4628      	mov	r0, r5
 80015b0:	f000 fb6a 	bl	8001c88 <_sbrk_r>
 80015b4:	3001      	adds	r0, #1
 80015b6:	d101      	bne.n	80015bc <sbrk_aligned+0x38>
 80015b8:	f04f 34ff 	mov.w	r4, #4294967295
 80015bc:	4620      	mov	r0, r4
 80015be:	bd70      	pop	{r4, r5, r6, pc}
 80015c0:	200000ac 	.word	0x200000ac

080015c4 <_malloc_r>:
 80015c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015c8:	1ccd      	adds	r5, r1, #3
 80015ca:	f025 0503 	bic.w	r5, r5, #3
 80015ce:	3508      	adds	r5, #8
 80015d0:	2d0c      	cmp	r5, #12
 80015d2:	bf38      	it	cc
 80015d4:	250c      	movcc	r5, #12
 80015d6:	2d00      	cmp	r5, #0
 80015d8:	4607      	mov	r7, r0
 80015da:	db01      	blt.n	80015e0 <_malloc_r+0x1c>
 80015dc:	42a9      	cmp	r1, r5
 80015de:	d905      	bls.n	80015ec <_malloc_r+0x28>
 80015e0:	230c      	movs	r3, #12
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	2600      	movs	r6, #0
 80015e6:	4630      	mov	r0, r6
 80015e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015ec:	4e2e      	ldr	r6, [pc, #184]	; (80016a8 <_malloc_r+0xe4>)
 80015ee:	f000 fbf5 	bl	8001ddc <__malloc_lock>
 80015f2:	6833      	ldr	r3, [r6, #0]
 80015f4:	461c      	mov	r4, r3
 80015f6:	bb34      	cbnz	r4, 8001646 <_malloc_r+0x82>
 80015f8:	4629      	mov	r1, r5
 80015fa:	4638      	mov	r0, r7
 80015fc:	f7ff ffc2 	bl	8001584 <sbrk_aligned>
 8001600:	1c43      	adds	r3, r0, #1
 8001602:	4604      	mov	r4, r0
 8001604:	d14d      	bne.n	80016a2 <_malloc_r+0xde>
 8001606:	6834      	ldr	r4, [r6, #0]
 8001608:	4626      	mov	r6, r4
 800160a:	2e00      	cmp	r6, #0
 800160c:	d140      	bne.n	8001690 <_malloc_r+0xcc>
 800160e:	6823      	ldr	r3, [r4, #0]
 8001610:	4631      	mov	r1, r6
 8001612:	4638      	mov	r0, r7
 8001614:	eb04 0803 	add.w	r8, r4, r3
 8001618:	f000 fb36 	bl	8001c88 <_sbrk_r>
 800161c:	4580      	cmp	r8, r0
 800161e:	d13a      	bne.n	8001696 <_malloc_r+0xd2>
 8001620:	6821      	ldr	r1, [r4, #0]
 8001622:	3503      	adds	r5, #3
 8001624:	1a6d      	subs	r5, r5, r1
 8001626:	f025 0503 	bic.w	r5, r5, #3
 800162a:	3508      	adds	r5, #8
 800162c:	2d0c      	cmp	r5, #12
 800162e:	bf38      	it	cc
 8001630:	250c      	movcc	r5, #12
 8001632:	4629      	mov	r1, r5
 8001634:	4638      	mov	r0, r7
 8001636:	f7ff ffa5 	bl	8001584 <sbrk_aligned>
 800163a:	3001      	adds	r0, #1
 800163c:	d02b      	beq.n	8001696 <_malloc_r+0xd2>
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	442b      	add	r3, r5
 8001642:	6023      	str	r3, [r4, #0]
 8001644:	e00e      	b.n	8001664 <_malloc_r+0xa0>
 8001646:	6822      	ldr	r2, [r4, #0]
 8001648:	1b52      	subs	r2, r2, r5
 800164a:	d41e      	bmi.n	800168a <_malloc_r+0xc6>
 800164c:	2a0b      	cmp	r2, #11
 800164e:	d916      	bls.n	800167e <_malloc_r+0xba>
 8001650:	1961      	adds	r1, r4, r5
 8001652:	42a3      	cmp	r3, r4
 8001654:	6025      	str	r5, [r4, #0]
 8001656:	bf18      	it	ne
 8001658:	6059      	strne	r1, [r3, #4]
 800165a:	6863      	ldr	r3, [r4, #4]
 800165c:	bf08      	it	eq
 800165e:	6031      	streq	r1, [r6, #0]
 8001660:	5162      	str	r2, [r4, r5]
 8001662:	604b      	str	r3, [r1, #4]
 8001664:	4638      	mov	r0, r7
 8001666:	f104 060b 	add.w	r6, r4, #11
 800166a:	f000 fbbd 	bl	8001de8 <__malloc_unlock>
 800166e:	f026 0607 	bic.w	r6, r6, #7
 8001672:	1d23      	adds	r3, r4, #4
 8001674:	1af2      	subs	r2, r6, r3
 8001676:	d0b6      	beq.n	80015e6 <_malloc_r+0x22>
 8001678:	1b9b      	subs	r3, r3, r6
 800167a:	50a3      	str	r3, [r4, r2]
 800167c:	e7b3      	b.n	80015e6 <_malloc_r+0x22>
 800167e:	6862      	ldr	r2, [r4, #4]
 8001680:	42a3      	cmp	r3, r4
 8001682:	bf0c      	ite	eq
 8001684:	6032      	streq	r2, [r6, #0]
 8001686:	605a      	strne	r2, [r3, #4]
 8001688:	e7ec      	b.n	8001664 <_malloc_r+0xa0>
 800168a:	4623      	mov	r3, r4
 800168c:	6864      	ldr	r4, [r4, #4]
 800168e:	e7b2      	b.n	80015f6 <_malloc_r+0x32>
 8001690:	4634      	mov	r4, r6
 8001692:	6876      	ldr	r6, [r6, #4]
 8001694:	e7b9      	b.n	800160a <_malloc_r+0x46>
 8001696:	230c      	movs	r3, #12
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	4638      	mov	r0, r7
 800169c:	f000 fba4 	bl	8001de8 <__malloc_unlock>
 80016a0:	e7a1      	b.n	80015e6 <_malloc_r+0x22>
 80016a2:	6025      	str	r5, [r4, #0]
 80016a4:	e7de      	b.n	8001664 <_malloc_r+0xa0>
 80016a6:	bf00      	nop
 80016a8:	200000a8 	.word	0x200000a8

080016ac <__sfputc_r>:
 80016ac:	6893      	ldr	r3, [r2, #8]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	b410      	push	{r4}
 80016b4:	6093      	str	r3, [r2, #8]
 80016b6:	da08      	bge.n	80016ca <__sfputc_r+0x1e>
 80016b8:	6994      	ldr	r4, [r2, #24]
 80016ba:	42a3      	cmp	r3, r4
 80016bc:	db01      	blt.n	80016c2 <__sfputc_r+0x16>
 80016be:	290a      	cmp	r1, #10
 80016c0:	d103      	bne.n	80016ca <__sfputc_r+0x1e>
 80016c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016c6:	f7ff bc31 	b.w	8000f2c <__swbuf_r>
 80016ca:	6813      	ldr	r3, [r2, #0]
 80016cc:	1c58      	adds	r0, r3, #1
 80016ce:	6010      	str	r0, [r2, #0]
 80016d0:	7019      	strb	r1, [r3, #0]
 80016d2:	4608      	mov	r0, r1
 80016d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016d8:	4770      	bx	lr

080016da <__sfputs_r>:
 80016da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016dc:	4606      	mov	r6, r0
 80016de:	460f      	mov	r7, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	18d5      	adds	r5, r2, r3
 80016e4:	42ac      	cmp	r4, r5
 80016e6:	d101      	bne.n	80016ec <__sfputs_r+0x12>
 80016e8:	2000      	movs	r0, #0
 80016ea:	e007      	b.n	80016fc <__sfputs_r+0x22>
 80016ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016f0:	463a      	mov	r2, r7
 80016f2:	4630      	mov	r0, r6
 80016f4:	f7ff ffda 	bl	80016ac <__sfputc_r>
 80016f8:	1c43      	adds	r3, r0, #1
 80016fa:	d1f3      	bne.n	80016e4 <__sfputs_r+0xa>
 80016fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001700 <_vfiprintf_r>:
 8001700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001704:	460d      	mov	r5, r1
 8001706:	b09d      	sub	sp, #116	; 0x74
 8001708:	4614      	mov	r4, r2
 800170a:	4698      	mov	r8, r3
 800170c:	4606      	mov	r6, r0
 800170e:	b118      	cbz	r0, 8001718 <_vfiprintf_r+0x18>
 8001710:	6983      	ldr	r3, [r0, #24]
 8001712:	b90b      	cbnz	r3, 8001718 <_vfiprintf_r+0x18>
 8001714:	f7ff fde4 	bl	80012e0 <__sinit>
 8001718:	4b89      	ldr	r3, [pc, #548]	; (8001940 <_vfiprintf_r+0x240>)
 800171a:	429d      	cmp	r5, r3
 800171c:	d11b      	bne.n	8001756 <_vfiprintf_r+0x56>
 800171e:	6875      	ldr	r5, [r6, #4]
 8001720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001722:	07d9      	lsls	r1, r3, #31
 8001724:	d405      	bmi.n	8001732 <_vfiprintf_r+0x32>
 8001726:	89ab      	ldrh	r3, [r5, #12]
 8001728:	059a      	lsls	r2, r3, #22
 800172a:	d402      	bmi.n	8001732 <_vfiprintf_r+0x32>
 800172c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800172e:	f7ff fe75 	bl	800141c <__retarget_lock_acquire_recursive>
 8001732:	89ab      	ldrh	r3, [r5, #12]
 8001734:	071b      	lsls	r3, r3, #28
 8001736:	d501      	bpl.n	800173c <_vfiprintf_r+0x3c>
 8001738:	692b      	ldr	r3, [r5, #16]
 800173a:	b9eb      	cbnz	r3, 8001778 <_vfiprintf_r+0x78>
 800173c:	4629      	mov	r1, r5
 800173e:	4630      	mov	r0, r6
 8001740:	f7ff fc46 	bl	8000fd0 <__swsetup_r>
 8001744:	b1c0      	cbz	r0, 8001778 <_vfiprintf_r+0x78>
 8001746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001748:	07dc      	lsls	r4, r3, #31
 800174a:	d50e      	bpl.n	800176a <_vfiprintf_r+0x6a>
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	b01d      	add	sp, #116	; 0x74
 8001752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001756:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <_vfiprintf_r+0x244>)
 8001758:	429d      	cmp	r5, r3
 800175a:	d101      	bne.n	8001760 <_vfiprintf_r+0x60>
 800175c:	68b5      	ldr	r5, [r6, #8]
 800175e:	e7df      	b.n	8001720 <_vfiprintf_r+0x20>
 8001760:	4b79      	ldr	r3, [pc, #484]	; (8001948 <_vfiprintf_r+0x248>)
 8001762:	429d      	cmp	r5, r3
 8001764:	bf08      	it	eq
 8001766:	68f5      	ldreq	r5, [r6, #12]
 8001768:	e7da      	b.n	8001720 <_vfiprintf_r+0x20>
 800176a:	89ab      	ldrh	r3, [r5, #12]
 800176c:	0598      	lsls	r0, r3, #22
 800176e:	d4ed      	bmi.n	800174c <_vfiprintf_r+0x4c>
 8001770:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001772:	f7ff fe54 	bl	800141e <__retarget_lock_release_recursive>
 8001776:	e7e9      	b.n	800174c <_vfiprintf_r+0x4c>
 8001778:	2300      	movs	r3, #0
 800177a:	9309      	str	r3, [sp, #36]	; 0x24
 800177c:	2320      	movs	r3, #32
 800177e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001782:	f8cd 800c 	str.w	r8, [sp, #12]
 8001786:	2330      	movs	r3, #48	; 0x30
 8001788:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800194c <_vfiprintf_r+0x24c>
 800178c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001790:	f04f 0901 	mov.w	r9, #1
 8001794:	4623      	mov	r3, r4
 8001796:	469a      	mov	sl, r3
 8001798:	f813 2b01 	ldrb.w	r2, [r3], #1
 800179c:	b10a      	cbz	r2, 80017a2 <_vfiprintf_r+0xa2>
 800179e:	2a25      	cmp	r2, #37	; 0x25
 80017a0:	d1f9      	bne.n	8001796 <_vfiprintf_r+0x96>
 80017a2:	ebba 0b04 	subs.w	fp, sl, r4
 80017a6:	d00b      	beq.n	80017c0 <_vfiprintf_r+0xc0>
 80017a8:	465b      	mov	r3, fp
 80017aa:	4622      	mov	r2, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	4630      	mov	r0, r6
 80017b0:	f7ff ff93 	bl	80016da <__sfputs_r>
 80017b4:	3001      	adds	r0, #1
 80017b6:	f000 80aa 	beq.w	800190e <_vfiprintf_r+0x20e>
 80017ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80017bc:	445a      	add	r2, fp
 80017be:	9209      	str	r2, [sp, #36]	; 0x24
 80017c0:	f89a 3000 	ldrb.w	r3, [sl]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a2 	beq.w	800190e <_vfiprintf_r+0x20e>
 80017ca:	2300      	movs	r3, #0
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80017d4:	f10a 0a01 	add.w	sl, sl, #1
 80017d8:	9304      	str	r3, [sp, #16]
 80017da:	9307      	str	r3, [sp, #28]
 80017dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017e0:	931a      	str	r3, [sp, #104]	; 0x68
 80017e2:	4654      	mov	r4, sl
 80017e4:	2205      	movs	r2, #5
 80017e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017ea:	4858      	ldr	r0, [pc, #352]	; (800194c <_vfiprintf_r+0x24c>)
 80017ec:	f7fe fd00 	bl	80001f0 <memchr>
 80017f0:	9a04      	ldr	r2, [sp, #16]
 80017f2:	b9d8      	cbnz	r0, 800182c <_vfiprintf_r+0x12c>
 80017f4:	06d1      	lsls	r1, r2, #27
 80017f6:	bf44      	itt	mi
 80017f8:	2320      	movmi	r3, #32
 80017fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80017fe:	0713      	lsls	r3, r2, #28
 8001800:	bf44      	itt	mi
 8001802:	232b      	movmi	r3, #43	; 0x2b
 8001804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001808:	f89a 3000 	ldrb.w	r3, [sl]
 800180c:	2b2a      	cmp	r3, #42	; 0x2a
 800180e:	d015      	beq.n	800183c <_vfiprintf_r+0x13c>
 8001810:	9a07      	ldr	r2, [sp, #28]
 8001812:	4654      	mov	r4, sl
 8001814:	2000      	movs	r0, #0
 8001816:	f04f 0c0a 	mov.w	ip, #10
 800181a:	4621      	mov	r1, r4
 800181c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001820:	3b30      	subs	r3, #48	; 0x30
 8001822:	2b09      	cmp	r3, #9
 8001824:	d94e      	bls.n	80018c4 <_vfiprintf_r+0x1c4>
 8001826:	b1b0      	cbz	r0, 8001856 <_vfiprintf_r+0x156>
 8001828:	9207      	str	r2, [sp, #28]
 800182a:	e014      	b.n	8001856 <_vfiprintf_r+0x156>
 800182c:	eba0 0308 	sub.w	r3, r0, r8
 8001830:	fa09 f303 	lsl.w	r3, r9, r3
 8001834:	4313      	orrs	r3, r2
 8001836:	9304      	str	r3, [sp, #16]
 8001838:	46a2      	mov	sl, r4
 800183a:	e7d2      	b.n	80017e2 <_vfiprintf_r+0xe2>
 800183c:	9b03      	ldr	r3, [sp, #12]
 800183e:	1d19      	adds	r1, r3, #4
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	9103      	str	r1, [sp, #12]
 8001844:	2b00      	cmp	r3, #0
 8001846:	bfbb      	ittet	lt
 8001848:	425b      	neglt	r3, r3
 800184a:	f042 0202 	orrlt.w	r2, r2, #2
 800184e:	9307      	strge	r3, [sp, #28]
 8001850:	9307      	strlt	r3, [sp, #28]
 8001852:	bfb8      	it	lt
 8001854:	9204      	strlt	r2, [sp, #16]
 8001856:	7823      	ldrb	r3, [r4, #0]
 8001858:	2b2e      	cmp	r3, #46	; 0x2e
 800185a:	d10c      	bne.n	8001876 <_vfiprintf_r+0x176>
 800185c:	7863      	ldrb	r3, [r4, #1]
 800185e:	2b2a      	cmp	r3, #42	; 0x2a
 8001860:	d135      	bne.n	80018ce <_vfiprintf_r+0x1ce>
 8001862:	9b03      	ldr	r3, [sp, #12]
 8001864:	1d1a      	adds	r2, r3, #4
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	9203      	str	r2, [sp, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	bfb8      	it	lt
 800186e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001872:	3402      	adds	r4, #2
 8001874:	9305      	str	r3, [sp, #20]
 8001876:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800195c <_vfiprintf_r+0x25c>
 800187a:	7821      	ldrb	r1, [r4, #0]
 800187c:	2203      	movs	r2, #3
 800187e:	4650      	mov	r0, sl
 8001880:	f7fe fcb6 	bl	80001f0 <memchr>
 8001884:	b140      	cbz	r0, 8001898 <_vfiprintf_r+0x198>
 8001886:	2340      	movs	r3, #64	; 0x40
 8001888:	eba0 000a 	sub.w	r0, r0, sl
 800188c:	fa03 f000 	lsl.w	r0, r3, r0
 8001890:	9b04      	ldr	r3, [sp, #16]
 8001892:	4303      	orrs	r3, r0
 8001894:	3401      	adds	r4, #1
 8001896:	9304      	str	r3, [sp, #16]
 8001898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800189c:	482c      	ldr	r0, [pc, #176]	; (8001950 <_vfiprintf_r+0x250>)
 800189e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018a2:	2206      	movs	r2, #6
 80018a4:	f7fe fca4 	bl	80001f0 <memchr>
 80018a8:	2800      	cmp	r0, #0
 80018aa:	d03f      	beq.n	800192c <_vfiprintf_r+0x22c>
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <_vfiprintf_r+0x254>)
 80018ae:	bb1b      	cbnz	r3, 80018f8 <_vfiprintf_r+0x1f8>
 80018b0:	9b03      	ldr	r3, [sp, #12]
 80018b2:	3307      	adds	r3, #7
 80018b4:	f023 0307 	bic.w	r3, r3, #7
 80018b8:	3308      	adds	r3, #8
 80018ba:	9303      	str	r3, [sp, #12]
 80018bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018be:	443b      	add	r3, r7
 80018c0:	9309      	str	r3, [sp, #36]	; 0x24
 80018c2:	e767      	b.n	8001794 <_vfiprintf_r+0x94>
 80018c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80018c8:	460c      	mov	r4, r1
 80018ca:	2001      	movs	r0, #1
 80018cc:	e7a5      	b.n	800181a <_vfiprintf_r+0x11a>
 80018ce:	2300      	movs	r3, #0
 80018d0:	3401      	adds	r4, #1
 80018d2:	9305      	str	r3, [sp, #20]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f04f 0c0a 	mov.w	ip, #10
 80018da:	4620      	mov	r0, r4
 80018dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80018e0:	3a30      	subs	r2, #48	; 0x30
 80018e2:	2a09      	cmp	r2, #9
 80018e4:	d903      	bls.n	80018ee <_vfiprintf_r+0x1ee>
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0c5      	beq.n	8001876 <_vfiprintf_r+0x176>
 80018ea:	9105      	str	r1, [sp, #20]
 80018ec:	e7c3      	b.n	8001876 <_vfiprintf_r+0x176>
 80018ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80018f2:	4604      	mov	r4, r0
 80018f4:	2301      	movs	r3, #1
 80018f6:	e7f0      	b.n	80018da <_vfiprintf_r+0x1da>
 80018f8:	ab03      	add	r3, sp, #12
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	462a      	mov	r2, r5
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <_vfiprintf_r+0x258>)
 8001900:	a904      	add	r1, sp, #16
 8001902:	4630      	mov	r0, r6
 8001904:	f3af 8000 	nop.w
 8001908:	4607      	mov	r7, r0
 800190a:	1c78      	adds	r0, r7, #1
 800190c:	d1d6      	bne.n	80018bc <_vfiprintf_r+0x1bc>
 800190e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001910:	07d9      	lsls	r1, r3, #31
 8001912:	d405      	bmi.n	8001920 <_vfiprintf_r+0x220>
 8001914:	89ab      	ldrh	r3, [r5, #12]
 8001916:	059a      	lsls	r2, r3, #22
 8001918:	d402      	bmi.n	8001920 <_vfiprintf_r+0x220>
 800191a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800191c:	f7ff fd7f 	bl	800141e <__retarget_lock_release_recursive>
 8001920:	89ab      	ldrh	r3, [r5, #12]
 8001922:	065b      	lsls	r3, r3, #25
 8001924:	f53f af12 	bmi.w	800174c <_vfiprintf_r+0x4c>
 8001928:	9809      	ldr	r0, [sp, #36]	; 0x24
 800192a:	e711      	b.n	8001750 <_vfiprintf_r+0x50>
 800192c:	ab03      	add	r3, sp, #12
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	462a      	mov	r2, r5
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <_vfiprintf_r+0x258>)
 8001934:	a904      	add	r1, sp, #16
 8001936:	4630      	mov	r0, r6
 8001938:	f000 f880 	bl	8001a3c <_printf_i>
 800193c:	e7e4      	b.n	8001908 <_vfiprintf_r+0x208>
 800193e:	bf00      	nop
 8001940:	08001eb4 	.word	0x08001eb4
 8001944:	08001ed4 	.word	0x08001ed4
 8001948:	08001e94 	.word	0x08001e94
 800194c:	08001ef4 	.word	0x08001ef4
 8001950:	08001efe 	.word	0x08001efe
 8001954:	00000000 	.word	0x00000000
 8001958:	080016db 	.word	0x080016db
 800195c:	08001efa 	.word	0x08001efa

08001960 <_printf_common>:
 8001960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001964:	4616      	mov	r6, r2
 8001966:	4699      	mov	r9, r3
 8001968:	688a      	ldr	r2, [r1, #8]
 800196a:	690b      	ldr	r3, [r1, #16]
 800196c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001970:	4293      	cmp	r3, r2
 8001972:	bfb8      	it	lt
 8001974:	4613      	movlt	r3, r2
 8001976:	6033      	str	r3, [r6, #0]
 8001978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800197c:	4607      	mov	r7, r0
 800197e:	460c      	mov	r4, r1
 8001980:	b10a      	cbz	r2, 8001986 <_printf_common+0x26>
 8001982:	3301      	adds	r3, #1
 8001984:	6033      	str	r3, [r6, #0]
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	0699      	lsls	r1, r3, #26
 800198a:	bf42      	ittt	mi
 800198c:	6833      	ldrmi	r3, [r6, #0]
 800198e:	3302      	addmi	r3, #2
 8001990:	6033      	strmi	r3, [r6, #0]
 8001992:	6825      	ldr	r5, [r4, #0]
 8001994:	f015 0506 	ands.w	r5, r5, #6
 8001998:	d106      	bne.n	80019a8 <_printf_common+0x48>
 800199a:	f104 0a19 	add.w	sl, r4, #25
 800199e:	68e3      	ldr	r3, [r4, #12]
 80019a0:	6832      	ldr	r2, [r6, #0]
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	42ab      	cmp	r3, r5
 80019a6:	dc26      	bgt.n	80019f6 <_printf_common+0x96>
 80019a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80019ac:	1e13      	subs	r3, r2, #0
 80019ae:	6822      	ldr	r2, [r4, #0]
 80019b0:	bf18      	it	ne
 80019b2:	2301      	movne	r3, #1
 80019b4:	0692      	lsls	r2, r2, #26
 80019b6:	d42b      	bmi.n	8001a10 <_printf_common+0xb0>
 80019b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019bc:	4649      	mov	r1, r9
 80019be:	4638      	mov	r0, r7
 80019c0:	47c0      	blx	r8
 80019c2:	3001      	adds	r0, #1
 80019c4:	d01e      	beq.n	8001a04 <_printf_common+0xa4>
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	68e5      	ldr	r5, [r4, #12]
 80019ca:	6832      	ldr	r2, [r6, #0]
 80019cc:	f003 0306 	and.w	r3, r3, #6
 80019d0:	2b04      	cmp	r3, #4
 80019d2:	bf08      	it	eq
 80019d4:	1aad      	subeq	r5, r5, r2
 80019d6:	68a3      	ldr	r3, [r4, #8]
 80019d8:	6922      	ldr	r2, [r4, #16]
 80019da:	bf0c      	ite	eq
 80019dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80019e0:	2500      	movne	r5, #0
 80019e2:	4293      	cmp	r3, r2
 80019e4:	bfc4      	itt	gt
 80019e6:	1a9b      	subgt	r3, r3, r2
 80019e8:	18ed      	addgt	r5, r5, r3
 80019ea:	2600      	movs	r6, #0
 80019ec:	341a      	adds	r4, #26
 80019ee:	42b5      	cmp	r5, r6
 80019f0:	d11a      	bne.n	8001a28 <_printf_common+0xc8>
 80019f2:	2000      	movs	r0, #0
 80019f4:	e008      	b.n	8001a08 <_printf_common+0xa8>
 80019f6:	2301      	movs	r3, #1
 80019f8:	4652      	mov	r2, sl
 80019fa:	4649      	mov	r1, r9
 80019fc:	4638      	mov	r0, r7
 80019fe:	47c0      	blx	r8
 8001a00:	3001      	adds	r0, #1
 8001a02:	d103      	bne.n	8001a0c <_printf_common+0xac>
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a0c:	3501      	adds	r5, #1
 8001a0e:	e7c6      	b.n	800199e <_printf_common+0x3e>
 8001a10:	18e1      	adds	r1, r4, r3
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	2030      	movs	r0, #48	; 0x30
 8001a16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a1a:	4422      	add	r2, r4
 8001a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a24:	3302      	adds	r3, #2
 8001a26:	e7c7      	b.n	80019b8 <_printf_common+0x58>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	4649      	mov	r1, r9
 8001a2e:	4638      	mov	r0, r7
 8001a30:	47c0      	blx	r8
 8001a32:	3001      	adds	r0, #1
 8001a34:	d0e6      	beq.n	8001a04 <_printf_common+0xa4>
 8001a36:	3601      	adds	r6, #1
 8001a38:	e7d9      	b.n	80019ee <_printf_common+0x8e>
	...

08001a3c <_printf_i>:
 8001a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001a40:	7e0f      	ldrb	r7, [r1, #24]
 8001a42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001a44:	2f78      	cmp	r7, #120	; 0x78
 8001a46:	4691      	mov	r9, r2
 8001a48:	4680      	mov	r8, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	469a      	mov	sl, r3
 8001a4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001a52:	d807      	bhi.n	8001a64 <_printf_i+0x28>
 8001a54:	2f62      	cmp	r7, #98	; 0x62
 8001a56:	d80a      	bhi.n	8001a6e <_printf_i+0x32>
 8001a58:	2f00      	cmp	r7, #0
 8001a5a:	f000 80d8 	beq.w	8001c0e <_printf_i+0x1d2>
 8001a5e:	2f58      	cmp	r7, #88	; 0x58
 8001a60:	f000 80a3 	beq.w	8001baa <_printf_i+0x16e>
 8001a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001a6c:	e03a      	b.n	8001ae4 <_printf_i+0xa8>
 8001a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001a72:	2b15      	cmp	r3, #21
 8001a74:	d8f6      	bhi.n	8001a64 <_printf_i+0x28>
 8001a76:	a101      	add	r1, pc, #4	; (adr r1, 8001a7c <_printf_i+0x40>)
 8001a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001a7c:	08001ad5 	.word	0x08001ad5
 8001a80:	08001ae9 	.word	0x08001ae9
 8001a84:	08001a65 	.word	0x08001a65
 8001a88:	08001a65 	.word	0x08001a65
 8001a8c:	08001a65 	.word	0x08001a65
 8001a90:	08001a65 	.word	0x08001a65
 8001a94:	08001ae9 	.word	0x08001ae9
 8001a98:	08001a65 	.word	0x08001a65
 8001a9c:	08001a65 	.word	0x08001a65
 8001aa0:	08001a65 	.word	0x08001a65
 8001aa4:	08001a65 	.word	0x08001a65
 8001aa8:	08001bf5 	.word	0x08001bf5
 8001aac:	08001b19 	.word	0x08001b19
 8001ab0:	08001bd7 	.word	0x08001bd7
 8001ab4:	08001a65 	.word	0x08001a65
 8001ab8:	08001a65 	.word	0x08001a65
 8001abc:	08001c17 	.word	0x08001c17
 8001ac0:	08001a65 	.word	0x08001a65
 8001ac4:	08001b19 	.word	0x08001b19
 8001ac8:	08001a65 	.word	0x08001a65
 8001acc:	08001a65 	.word	0x08001a65
 8001ad0:	08001bdf 	.word	0x08001bdf
 8001ad4:	682b      	ldr	r3, [r5, #0]
 8001ad6:	1d1a      	adds	r2, r3, #4
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	602a      	str	r2, [r5, #0]
 8001adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0a3      	b.n	8001c30 <_printf_i+0x1f4>
 8001ae8:	6820      	ldr	r0, [r4, #0]
 8001aea:	6829      	ldr	r1, [r5, #0]
 8001aec:	0606      	lsls	r6, r0, #24
 8001aee:	f101 0304 	add.w	r3, r1, #4
 8001af2:	d50a      	bpl.n	8001b0a <_printf_i+0xce>
 8001af4:	680e      	ldr	r6, [r1, #0]
 8001af6:	602b      	str	r3, [r5, #0]
 8001af8:	2e00      	cmp	r6, #0
 8001afa:	da03      	bge.n	8001b04 <_printf_i+0xc8>
 8001afc:	232d      	movs	r3, #45	; 0x2d
 8001afe:	4276      	negs	r6, r6
 8001b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b04:	485e      	ldr	r0, [pc, #376]	; (8001c80 <_printf_i+0x244>)
 8001b06:	230a      	movs	r3, #10
 8001b08:	e019      	b.n	8001b3e <_printf_i+0x102>
 8001b0a:	680e      	ldr	r6, [r1, #0]
 8001b0c:	602b      	str	r3, [r5, #0]
 8001b0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b12:	bf18      	it	ne
 8001b14:	b236      	sxthne	r6, r6
 8001b16:	e7ef      	b.n	8001af8 <_printf_i+0xbc>
 8001b18:	682b      	ldr	r3, [r5, #0]
 8001b1a:	6820      	ldr	r0, [r4, #0]
 8001b1c:	1d19      	adds	r1, r3, #4
 8001b1e:	6029      	str	r1, [r5, #0]
 8001b20:	0601      	lsls	r1, r0, #24
 8001b22:	d501      	bpl.n	8001b28 <_printf_i+0xec>
 8001b24:	681e      	ldr	r6, [r3, #0]
 8001b26:	e002      	b.n	8001b2e <_printf_i+0xf2>
 8001b28:	0646      	lsls	r6, r0, #25
 8001b2a:	d5fb      	bpl.n	8001b24 <_printf_i+0xe8>
 8001b2c:	881e      	ldrh	r6, [r3, #0]
 8001b2e:	4854      	ldr	r0, [pc, #336]	; (8001c80 <_printf_i+0x244>)
 8001b30:	2f6f      	cmp	r7, #111	; 0x6f
 8001b32:	bf0c      	ite	eq
 8001b34:	2308      	moveq	r3, #8
 8001b36:	230a      	movne	r3, #10
 8001b38:	2100      	movs	r1, #0
 8001b3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001b3e:	6865      	ldr	r5, [r4, #4]
 8001b40:	60a5      	str	r5, [r4, #8]
 8001b42:	2d00      	cmp	r5, #0
 8001b44:	bfa2      	ittt	ge
 8001b46:	6821      	ldrge	r1, [r4, #0]
 8001b48:	f021 0104 	bicge.w	r1, r1, #4
 8001b4c:	6021      	strge	r1, [r4, #0]
 8001b4e:	b90e      	cbnz	r6, 8001b54 <_printf_i+0x118>
 8001b50:	2d00      	cmp	r5, #0
 8001b52:	d04d      	beq.n	8001bf0 <_printf_i+0x1b4>
 8001b54:	4615      	mov	r5, r2
 8001b56:	fbb6 f1f3 	udiv	r1, r6, r3
 8001b5a:	fb03 6711 	mls	r7, r3, r1, r6
 8001b5e:	5dc7      	ldrb	r7, [r0, r7]
 8001b60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001b64:	4637      	mov	r7, r6
 8001b66:	42bb      	cmp	r3, r7
 8001b68:	460e      	mov	r6, r1
 8001b6a:	d9f4      	bls.n	8001b56 <_printf_i+0x11a>
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d10b      	bne.n	8001b88 <_printf_i+0x14c>
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	07de      	lsls	r6, r3, #31
 8001b74:	d508      	bpl.n	8001b88 <_printf_i+0x14c>
 8001b76:	6923      	ldr	r3, [r4, #16]
 8001b78:	6861      	ldr	r1, [r4, #4]
 8001b7a:	4299      	cmp	r1, r3
 8001b7c:	bfde      	ittt	le
 8001b7e:	2330      	movle	r3, #48	; 0x30
 8001b80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b88:	1b52      	subs	r2, r2, r5
 8001b8a:	6122      	str	r2, [r4, #16]
 8001b8c:	f8cd a000 	str.w	sl, [sp]
 8001b90:	464b      	mov	r3, r9
 8001b92:	aa03      	add	r2, sp, #12
 8001b94:	4621      	mov	r1, r4
 8001b96:	4640      	mov	r0, r8
 8001b98:	f7ff fee2 	bl	8001960 <_printf_common>
 8001b9c:	3001      	adds	r0, #1
 8001b9e:	d14c      	bne.n	8001c3a <_printf_i+0x1fe>
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	b004      	add	sp, #16
 8001ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001baa:	4835      	ldr	r0, [pc, #212]	; (8001c80 <_printf_i+0x244>)
 8001bac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001bb0:	6829      	ldr	r1, [r5, #0]
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8001bb8:	6029      	str	r1, [r5, #0]
 8001bba:	061d      	lsls	r5, r3, #24
 8001bbc:	d514      	bpl.n	8001be8 <_printf_i+0x1ac>
 8001bbe:	07df      	lsls	r7, r3, #31
 8001bc0:	bf44      	itt	mi
 8001bc2:	f043 0320 	orrmi.w	r3, r3, #32
 8001bc6:	6023      	strmi	r3, [r4, #0]
 8001bc8:	b91e      	cbnz	r6, 8001bd2 <_printf_i+0x196>
 8001bca:	6823      	ldr	r3, [r4, #0]
 8001bcc:	f023 0320 	bic.w	r3, r3, #32
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	e7b0      	b.n	8001b38 <_printf_i+0xfc>
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	f043 0320 	orr.w	r3, r3, #32
 8001bdc:	6023      	str	r3, [r4, #0]
 8001bde:	2378      	movs	r3, #120	; 0x78
 8001be0:	4828      	ldr	r0, [pc, #160]	; (8001c84 <_printf_i+0x248>)
 8001be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001be6:	e7e3      	b.n	8001bb0 <_printf_i+0x174>
 8001be8:	0659      	lsls	r1, r3, #25
 8001bea:	bf48      	it	mi
 8001bec:	b2b6      	uxthmi	r6, r6
 8001bee:	e7e6      	b.n	8001bbe <_printf_i+0x182>
 8001bf0:	4615      	mov	r5, r2
 8001bf2:	e7bb      	b.n	8001b6c <_printf_i+0x130>
 8001bf4:	682b      	ldr	r3, [r5, #0]
 8001bf6:	6826      	ldr	r6, [r4, #0]
 8001bf8:	6961      	ldr	r1, [r4, #20]
 8001bfa:	1d18      	adds	r0, r3, #4
 8001bfc:	6028      	str	r0, [r5, #0]
 8001bfe:	0635      	lsls	r5, r6, #24
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	d501      	bpl.n	8001c08 <_printf_i+0x1cc>
 8001c04:	6019      	str	r1, [r3, #0]
 8001c06:	e002      	b.n	8001c0e <_printf_i+0x1d2>
 8001c08:	0670      	lsls	r0, r6, #25
 8001c0a:	d5fb      	bpl.n	8001c04 <_printf_i+0x1c8>
 8001c0c:	8019      	strh	r1, [r3, #0]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	6123      	str	r3, [r4, #16]
 8001c12:	4615      	mov	r5, r2
 8001c14:	e7ba      	b.n	8001b8c <_printf_i+0x150>
 8001c16:	682b      	ldr	r3, [r5, #0]
 8001c18:	1d1a      	adds	r2, r3, #4
 8001c1a:	602a      	str	r2, [r5, #0]
 8001c1c:	681d      	ldr	r5, [r3, #0]
 8001c1e:	6862      	ldr	r2, [r4, #4]
 8001c20:	2100      	movs	r1, #0
 8001c22:	4628      	mov	r0, r5
 8001c24:	f7fe fae4 	bl	80001f0 <memchr>
 8001c28:	b108      	cbz	r0, 8001c2e <_printf_i+0x1f2>
 8001c2a:	1b40      	subs	r0, r0, r5
 8001c2c:	6060      	str	r0, [r4, #4]
 8001c2e:	6863      	ldr	r3, [r4, #4]
 8001c30:	6123      	str	r3, [r4, #16]
 8001c32:	2300      	movs	r3, #0
 8001c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c38:	e7a8      	b.n	8001b8c <_printf_i+0x150>
 8001c3a:	6923      	ldr	r3, [r4, #16]
 8001c3c:	462a      	mov	r2, r5
 8001c3e:	4649      	mov	r1, r9
 8001c40:	4640      	mov	r0, r8
 8001c42:	47d0      	blx	sl
 8001c44:	3001      	adds	r0, #1
 8001c46:	d0ab      	beq.n	8001ba0 <_printf_i+0x164>
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	079b      	lsls	r3, r3, #30
 8001c4c:	d413      	bmi.n	8001c76 <_printf_i+0x23a>
 8001c4e:	68e0      	ldr	r0, [r4, #12]
 8001c50:	9b03      	ldr	r3, [sp, #12]
 8001c52:	4298      	cmp	r0, r3
 8001c54:	bfb8      	it	lt
 8001c56:	4618      	movlt	r0, r3
 8001c58:	e7a4      	b.n	8001ba4 <_printf_i+0x168>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	4632      	mov	r2, r6
 8001c5e:	4649      	mov	r1, r9
 8001c60:	4640      	mov	r0, r8
 8001c62:	47d0      	blx	sl
 8001c64:	3001      	adds	r0, #1
 8001c66:	d09b      	beq.n	8001ba0 <_printf_i+0x164>
 8001c68:	3501      	adds	r5, #1
 8001c6a:	68e3      	ldr	r3, [r4, #12]
 8001c6c:	9903      	ldr	r1, [sp, #12]
 8001c6e:	1a5b      	subs	r3, r3, r1
 8001c70:	42ab      	cmp	r3, r5
 8001c72:	dcf2      	bgt.n	8001c5a <_printf_i+0x21e>
 8001c74:	e7eb      	b.n	8001c4e <_printf_i+0x212>
 8001c76:	2500      	movs	r5, #0
 8001c78:	f104 0619 	add.w	r6, r4, #25
 8001c7c:	e7f5      	b.n	8001c6a <_printf_i+0x22e>
 8001c7e:	bf00      	nop
 8001c80:	08001f05 	.word	0x08001f05
 8001c84:	08001f16 	.word	0x08001f16

08001c88 <_sbrk_r>:
 8001c88:	b538      	push	{r3, r4, r5, lr}
 8001c8a:	4d06      	ldr	r5, [pc, #24]	; (8001ca4 <_sbrk_r+0x1c>)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	4604      	mov	r4, r0
 8001c90:	4608      	mov	r0, r1
 8001c92:	602b      	str	r3, [r5, #0]
 8001c94:	f7fe ff98 	bl	8000bc8 <_sbrk>
 8001c98:	1c43      	adds	r3, r0, #1
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk_r+0x1a>
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	b103      	cbz	r3, 8001ca2 <_sbrk_r+0x1a>
 8001ca0:	6023      	str	r3, [r4, #0]
 8001ca2:	bd38      	pop	{r3, r4, r5, pc}
 8001ca4:	200000b0 	.word	0x200000b0

08001ca8 <__sread>:
 8001ca8:	b510      	push	{r4, lr}
 8001caa:	460c      	mov	r4, r1
 8001cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cb0:	f000 f8a0 	bl	8001df4 <_read_r>
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	bfab      	itete	ge
 8001cb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cba:	89a3      	ldrhlt	r3, [r4, #12]
 8001cbc:	181b      	addge	r3, r3, r0
 8001cbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cc2:	bfac      	ite	ge
 8001cc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cc6:	81a3      	strhlt	r3, [r4, #12]
 8001cc8:	bd10      	pop	{r4, pc}

08001cca <__swrite>:
 8001cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cce:	461f      	mov	r7, r3
 8001cd0:	898b      	ldrh	r3, [r1, #12]
 8001cd2:	05db      	lsls	r3, r3, #23
 8001cd4:	4605      	mov	r5, r0
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	4616      	mov	r6, r2
 8001cda:	d505      	bpl.n	8001ce8 <__swrite+0x1e>
 8001cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f000 f868 	bl	8001db8 <_lseek_r>
 8001ce8:	89a3      	ldrh	r3, [r4, #12]
 8001cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cf2:	81a3      	strh	r3, [r4, #12]
 8001cf4:	4632      	mov	r2, r6
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001cfe:	f000 b817 	b.w	8001d30 <_write_r>

08001d02 <__sseek>:
 8001d02:	b510      	push	{r4, lr}
 8001d04:	460c      	mov	r4, r1
 8001d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d0a:	f000 f855 	bl	8001db8 <_lseek_r>
 8001d0e:	1c43      	adds	r3, r0, #1
 8001d10:	89a3      	ldrh	r3, [r4, #12]
 8001d12:	bf15      	itete	ne
 8001d14:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d1e:	81a3      	strheq	r3, [r4, #12]
 8001d20:	bf18      	it	ne
 8001d22:	81a3      	strhne	r3, [r4, #12]
 8001d24:	bd10      	pop	{r4, pc}

08001d26 <__sclose>:
 8001d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d2a:	f000 b813 	b.w	8001d54 <_close_r>
	...

08001d30 <_write_r>:
 8001d30:	b538      	push	{r3, r4, r5, lr}
 8001d32:	4d07      	ldr	r5, [pc, #28]	; (8001d50 <_write_r+0x20>)
 8001d34:	4604      	mov	r4, r0
 8001d36:	4608      	mov	r0, r1
 8001d38:	4611      	mov	r1, r2
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	602a      	str	r2, [r5, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f7fe fef1 	bl	8000b26 <_write>
 8001d44:	1c43      	adds	r3, r0, #1
 8001d46:	d102      	bne.n	8001d4e <_write_r+0x1e>
 8001d48:	682b      	ldr	r3, [r5, #0]
 8001d4a:	b103      	cbz	r3, 8001d4e <_write_r+0x1e>
 8001d4c:	6023      	str	r3, [r4, #0]
 8001d4e:	bd38      	pop	{r3, r4, r5, pc}
 8001d50:	200000b0 	.word	0x200000b0

08001d54 <_close_r>:
 8001d54:	b538      	push	{r3, r4, r5, lr}
 8001d56:	4d06      	ldr	r5, [pc, #24]	; (8001d70 <_close_r+0x1c>)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	4608      	mov	r0, r1
 8001d5e:	602b      	str	r3, [r5, #0]
 8001d60:	f7fe fefd 	bl	8000b5e <_close>
 8001d64:	1c43      	adds	r3, r0, #1
 8001d66:	d102      	bne.n	8001d6e <_close_r+0x1a>
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	b103      	cbz	r3, 8001d6e <_close_r+0x1a>
 8001d6c:	6023      	str	r3, [r4, #0]
 8001d6e:	bd38      	pop	{r3, r4, r5, pc}
 8001d70:	200000b0 	.word	0x200000b0

08001d74 <_fstat_r>:
 8001d74:	b538      	push	{r3, r4, r5, lr}
 8001d76:	4d07      	ldr	r5, [pc, #28]	; (8001d94 <_fstat_r+0x20>)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	4604      	mov	r4, r0
 8001d7c:	4608      	mov	r0, r1
 8001d7e:	4611      	mov	r1, r2
 8001d80:	602b      	str	r3, [r5, #0]
 8001d82:	f7fe fef8 	bl	8000b76 <_fstat>
 8001d86:	1c43      	adds	r3, r0, #1
 8001d88:	d102      	bne.n	8001d90 <_fstat_r+0x1c>
 8001d8a:	682b      	ldr	r3, [r5, #0]
 8001d8c:	b103      	cbz	r3, 8001d90 <_fstat_r+0x1c>
 8001d8e:	6023      	str	r3, [r4, #0]
 8001d90:	bd38      	pop	{r3, r4, r5, pc}
 8001d92:	bf00      	nop
 8001d94:	200000b0 	.word	0x200000b0

08001d98 <_isatty_r>:
 8001d98:	b538      	push	{r3, r4, r5, lr}
 8001d9a:	4d06      	ldr	r5, [pc, #24]	; (8001db4 <_isatty_r+0x1c>)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	4604      	mov	r4, r0
 8001da0:	4608      	mov	r0, r1
 8001da2:	602b      	str	r3, [r5, #0]
 8001da4:	f7fe fef7 	bl	8000b96 <_isatty>
 8001da8:	1c43      	adds	r3, r0, #1
 8001daa:	d102      	bne.n	8001db2 <_isatty_r+0x1a>
 8001dac:	682b      	ldr	r3, [r5, #0]
 8001dae:	b103      	cbz	r3, 8001db2 <_isatty_r+0x1a>
 8001db0:	6023      	str	r3, [r4, #0]
 8001db2:	bd38      	pop	{r3, r4, r5, pc}
 8001db4:	200000b0 	.word	0x200000b0

08001db8 <_lseek_r>:
 8001db8:	b538      	push	{r3, r4, r5, lr}
 8001dba:	4d07      	ldr	r5, [pc, #28]	; (8001dd8 <_lseek_r+0x20>)
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	4608      	mov	r0, r1
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	602a      	str	r2, [r5, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	f7fe fef0 	bl	8000bac <_lseek>
 8001dcc:	1c43      	adds	r3, r0, #1
 8001dce:	d102      	bne.n	8001dd6 <_lseek_r+0x1e>
 8001dd0:	682b      	ldr	r3, [r5, #0]
 8001dd2:	b103      	cbz	r3, 8001dd6 <_lseek_r+0x1e>
 8001dd4:	6023      	str	r3, [r4, #0]
 8001dd6:	bd38      	pop	{r3, r4, r5, pc}
 8001dd8:	200000b0 	.word	0x200000b0

08001ddc <__malloc_lock>:
 8001ddc:	4801      	ldr	r0, [pc, #4]	; (8001de4 <__malloc_lock+0x8>)
 8001dde:	f7ff bb1d 	b.w	800141c <__retarget_lock_acquire_recursive>
 8001de2:	bf00      	nop
 8001de4:	200000a4 	.word	0x200000a4

08001de8 <__malloc_unlock>:
 8001de8:	4801      	ldr	r0, [pc, #4]	; (8001df0 <__malloc_unlock+0x8>)
 8001dea:	f7ff bb18 	b.w	800141e <__retarget_lock_release_recursive>
 8001dee:	bf00      	nop
 8001df0:	200000a4 	.word	0x200000a4

08001df4 <_read_r>:
 8001df4:	b538      	push	{r3, r4, r5, lr}
 8001df6:	4d07      	ldr	r5, [pc, #28]	; (8001e14 <_read_r+0x20>)
 8001df8:	4604      	mov	r4, r0
 8001dfa:	4608      	mov	r0, r1
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	2200      	movs	r2, #0
 8001e00:	602a      	str	r2, [r5, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	f7fe fe72 	bl	8000aec <_read>
 8001e08:	1c43      	adds	r3, r0, #1
 8001e0a:	d102      	bne.n	8001e12 <_read_r+0x1e>
 8001e0c:	682b      	ldr	r3, [r5, #0]
 8001e0e:	b103      	cbz	r3, 8001e12 <_read_r+0x1e>
 8001e10:	6023      	str	r3, [r4, #0]
 8001e12:	bd38      	pop	{r3, r4, r5, pc}
 8001e14:	200000b0 	.word	0x200000b0

08001e18 <_init>:
 8001e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e1a:	bf00      	nop
 8001e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e1e:	bc08      	pop	{r3}
 8001e20:	469e      	mov	lr, r3
 8001e22:	4770      	bx	lr

08001e24 <_fini>:
 8001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e26:	bf00      	nop
 8001e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2a:	bc08      	pop	{r3}
 8001e2c:	469e      	mov	lr, r3
 8001e2e:	4770      	bx	lr
