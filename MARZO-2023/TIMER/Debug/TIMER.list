
TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001930  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08001ae0  08001ae0  00011ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bd4  08001bd4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001bd4  08001bd4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bd4  08001bd4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bd4  08001bd4  00011bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bd8  08001bd8  00011bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000054  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000bc  200000bc  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002704  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a90  00000000  00000000  0002279c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00023230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000178  00000000  00000000  00023420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001bad  00000000  00000000  00023598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002d83  00000000  00000000  00025145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e850  00000000  00000000  00027ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b6718  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000de0  00000000  00000000  000b6768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001ac8 	.word	0x08001ac8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08001ac8 	.word	0x08001ac8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <Button_InitTime>:

//static bool pinChangeVerify(Button_Time_t *BT){
//	//todo
//
//}
void Button_InitTime(Button_Time_t *BT, GPIO_TypeDef *GPIOx, uint8_t pin, void (*f)(uint8_t pulse)){
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	603b      	str	r3, [r7, #0]
 800029c:	4613      	mov	r3, r2
 800029e:	71fb      	strb	r3, [r7, #7]
	BT->GPIO = GPIOx;
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	601a      	str	r2, [r3, #0]
	BT->pin = pin;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	79fa      	ldrb	r2, [r7, #7]
 80002aa:	711a      	strb	r2, [r3, #4]
	BT->callback = f;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	683a      	ldr	r2, [r7, #0]
 80002b0:	615a      	str	r2, [r3, #20]
	//estado inicial
	BT->pulseCount = 0;
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	2200      	movs	r2, #0
 80002b6:	741a      	strb	r2, [r3, #16]
	BT->state = BT_INIT_STATE;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	2200      	movs	r2, #0
 80002bc:	715a      	strb	r2, [r3, #5]
	BT->isPulse = false;
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	2200      	movs	r2, #0
 80002c2:	761a      	strb	r2, [r3, #24]
	return;
 80002c4:	bf00      	nop
}
 80002c6:	3714      	adds	r7, #20
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <Button_Update>:


void Button_Update(Button_Time_t *BT){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	BT->ticks += 5;							//se actualiza la base de tiempo
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	1d5a      	adds	r2, r3, #5
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	609a      	str	r2, [r3, #8]
	switch(BT->state){
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	795b      	ldrb	r3, [r3, #5]
 80002e6:	2b05      	cmp	r3, #5
 80002e8:	f200 80aa 	bhi.w	8000440 <Button_Update+0x170>
 80002ec:	a201      	add	r2, pc, #4	; (adr r2, 80002f4 <Button_Update+0x24>)
 80002ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f2:	bf00      	nop
 80002f4:	0800030d 	.word	0x0800030d
 80002f8:	08000333 	.word	0x08000333
 80002fc:	08000359 	.word	0x08000359
 8000300:	0800042f 	.word	0x0800042f
 8000304:	080003e1 	.word	0x080003e1
 8000308:	0800037f 	.word	0x0800037f
	case BT_INIT_STATE:
		if(BT->GPIO->IDR & (1<<BT->pin)){
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	691b      	ldr	r3, [r3, #16]
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	7912      	ldrb	r2, [r2, #4]
 8000316:	4611      	mov	r1, r2
 8000318:	2201      	movs	r2, #1
 800031a:	408a      	lsls	r2, r1
 800031c:	4013      	ands	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d003      	beq.n	800032a <Button_Update+0x5a>
			BT->state = BT_HIGH_STATE;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2201      	movs	r2, #1
 8000326:	715a      	strb	r2, [r3, #5]
		}else{
			BT->state = BT_LOW_STATE;
		}
		break;
 8000328:	e08a      	b.n	8000440 <Button_Update+0x170>
			BT->state = BT_LOW_STATE;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2202      	movs	r2, #2
 800032e:	715a      	strb	r2, [r3, #5]
		break;
 8000330:	e086      	b.n	8000440 <Button_Update+0x170>
	case BT_HIGH_STATE:

		if(!(BT->GPIO->IDR & (1<<BT->pin))){ //cambio de estado a bajo
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	691b      	ldr	r3, [r3, #16]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	7912      	ldrb	r2, [r2, #4]
 800033c:	4611      	mov	r1, r2
 800033e:	2201      	movs	r2, #1
 8000340:	408a      	lsls	r2, r1
 8000342:	4013      	ands	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	d174      	bne.n	8000432 <Button_Update+0x162>
			BT->state = BT_DEBOUNCE_STATE;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2205      	movs	r2, #5
 800034c:	715a      	strb	r2, [r3, #5]
			BT->tickstart= BT->ticks;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	689a      	ldr	r2, [r3, #8]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	60da      	str	r2, [r3, #12]
		}
		break;
 8000356:	e06c      	b.n	8000432 <Button_Update+0x162>
	case BT_LOW_STATE:
		if(BT->GPIO->IDR & (1<<BT->pin)){ //cambio de estado a alto
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	7912      	ldrb	r2, [r2, #4]
 8000362:	4611      	mov	r1, r2
 8000364:	2201      	movs	r2, #1
 8000366:	408a      	lsls	r2, r1
 8000368:	4013      	ands	r3, r2
 800036a:	2b00      	cmp	r3, #0
 800036c:	d063      	beq.n	8000436 <Button_Update+0x166>
			BT->state = BT_DEBOUNCE_STATE;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2205      	movs	r2, #5
 8000372:	715a      	strb	r2, [r3, #5]
			BT->tickstart= BT->ticks;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	689a      	ldr	r2, [r3, #8]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	60da      	str	r2, [r3, #12]
		}
		break;
 800037c:	e05b      	b.n	8000436 <Button_Update+0x166>
	case BT_DEBOUNCE_STATE:
		if((BT->ticks - BT->tickstart)>= 15){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	689a      	ldr	r2, [r3, #8]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	1ad3      	subs	r3, r2, r3
 8000388:	2b0e      	cmp	r3, #14
 800038a:	d956      	bls.n	800043a <Button_Update+0x16a>
			//SE VERIFICA EL ESTADO ACTUAL DEL PIN
			if(!(BT->GPIO->IDR & (1<<BT->pin))){ //si el pin regresa a bajo
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	691b      	ldr	r3, [r3, #16]
 8000392:	687a      	ldr	r2, [r7, #4]
 8000394:	7912      	ldrb	r2, [r2, #4]
 8000396:	4611      	mov	r1, r2
 8000398:	2201      	movs	r2, #1
 800039a:	408a      	lsls	r2, r1
 800039c:	4013      	ands	r3, r2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d11a      	bne.n	80003d8 <Button_Update+0x108>
				//PULSO VALIDO (verifica el estado anterior)
				if(BT->isPulse == false){
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	7e1b      	ldrb	r3, [r3, #24]
 80003a6:	f083 0301 	eor.w	r3, r3, #1
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d005      	beq.n	80003bc <Button_Update+0xec>
					BT->isPulse = true;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2201      	movs	r2, #1
 80003b4:	761a      	strb	r2, [r3, #24]
					BT->pulseCount = 0;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	2200      	movs	r2, #0
 80003ba:	741a      	strb	r2, [r3, #16]
				}
				BT->tickstart = BT->ticks; //para iniciar el contador del timer
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	689a      	ldr	r2, [r3, #8]
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	60da      	str	r2, [r3, #12]
				BT->pulseCount += 1;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	7c1b      	ldrb	r3, [r3, #16]
 80003c8:	3301      	adds	r3, #1
 80003ca:	b2da      	uxtb	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	741a      	strb	r2, [r3, #16]
				BT->state = BT_TIME_VERIFY;
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2204      	movs	r2, #4
 80003d4:	715a      	strb	r2, [r3, #5]
			}else{
				BT->state = BT_HIGH_STATE;
			}
		}
		break;
 80003d6:	e030      	b.n	800043a <Button_Update+0x16a>
				BT->state = BT_HIGH_STATE;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2201      	movs	r2, #1
 80003dc:	715a      	strb	r2, [r3, #5]
		break;
 80003de:	e02c      	b.n	800043a <Button_Update+0x16a>
	case BT_TIME_VERIFY:
		if((BT->ticks - BT->tickstart) < MAX_TIME_WAIT_FOR_NEXT_PULSE){
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	689a      	ldr	r2, [r3, #8]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	1ad3      	subs	r3, r2, r3
 80003ea:	2bc7      	cmp	r3, #199	; 0xc7
 80003ec:	d812      	bhi.n	8000414 <Button_Update+0x144>
			//se verifica el cambio de estado
			if(BT->GPIO->IDR & (1<<BT->pin)){
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	691b      	ldr	r3, [r3, #16]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	7912      	ldrb	r2, [r2, #4]
 80003f8:	4611      	mov	r1, r2
 80003fa:	2201      	movs	r2, #1
 80003fc:	408a      	lsls	r2, r1
 80003fe:	4013      	ands	r3, r2
 8000400:	2b00      	cmp	r3, #0
 8000402:	d01c      	beq.n	800043e <Button_Update+0x16e>
				BT->tickstart = BT->ticks;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	689a      	ldr	r2, [r3, #8]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	60da      	str	r2, [r3, #12]
				BT->state = BT_DEBOUNCE_STATE;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2205      	movs	r2, #5
 8000410:	715a      	strb	r2, [r3, #5]
			//se ejecuta el callback
			BT->callback(BT->pulseCount);
			BT->state = BT_LOW_STATE;
			BT->isPulse = false;
		}
		break;
 8000412:	e014      	b.n	800043e <Button_Update+0x16e>
			BT->callback(BT->pulseCount);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	7c12      	ldrb	r2, [r2, #16]
 800041c:	4610      	mov	r0, r2
 800041e:	4798      	blx	r3
			BT->state = BT_LOW_STATE;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2202      	movs	r2, #2
 8000424:	715a      	strb	r2, [r3, #5]
			BT->isPulse = false;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2200      	movs	r2, #0
 800042a:	761a      	strb	r2, [r3, #24]
		break;
 800042c:	e007      	b.n	800043e <Button_Update+0x16e>
	case BT_PULSE_COUNT:


		break;
 800042e:	bf00      	nop
 8000430:	e006      	b.n	8000440 <Button_Update+0x170>
		break;
 8000432:	bf00      	nop
 8000434:	e004      	b.n	8000440 <Button_Update+0x170>
		break;
 8000436:	bf00      	nop
 8000438:	e002      	b.n	8000440 <Button_Update+0x170>
		break;
 800043a:	bf00      	nop
 800043c:	e000      	b.n	8000440 <Button_Update+0x170>
		break;
 800043e:	bf00      	nop
	}
}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	6039      	str	r1, [r7, #0]
 8000452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000458:	2b00      	cmp	r3, #0
 800045a:	db0a      	blt.n	8000472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	b2da      	uxtb	r2, r3
 8000460:	490c      	ldr	r1, [pc, #48]	; (8000494 <__NVIC_SetPriority+0x4c>)
 8000462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000466:	0112      	lsls	r2, r2, #4
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	440b      	add	r3, r1
 800046c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000470:	e00a      	b.n	8000488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	b2da      	uxtb	r2, r3
 8000476:	4908      	ldr	r1, [pc, #32]	; (8000498 <__NVIC_SetPriority+0x50>)
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	f003 030f 	and.w	r3, r3, #15
 800047e:	3b04      	subs	r3, #4
 8000480:	0112      	lsls	r2, r2, #4
 8000482:	b2d2      	uxtb	r2, r2
 8000484:	440b      	add	r3, r1
 8000486:	761a      	strb	r2, [r3, #24]
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	e000e100 	.word	0xe000e100
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <SysTickInit>:

/*Global variables -------------------------------------------------*/
volatile uint32_t uwTick = 0;


void SysTickInit(void){
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
	uint32_t temp;
	//1. deshabilitar el conteo de la systick
	SysTick->CTRL &=~ SysTick_CTRL_ENABLE_Msk;
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <SysTickInit+0x64>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a16      	ldr	r2, [pc, #88]	; (8000500 <SysTickInit+0x64>)
 80004a8:	f023 0301 	bic.w	r3, r3, #1
 80004ac:	6013      	str	r3, [r2, #0]
	//2. configurar el valor del registro reload
	SystemCoreClockUpdate();
 80004ae:	f000 fa2b 	bl	8000908 <SystemCoreClockUpdate>
	temp = SystemCoreClock / 1000 - 1;
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <SysTickInit+0x68>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a14      	ldr	r2, [pc, #80]	; (8000508 <SysTickInit+0x6c>)
 80004b8:	fba2 2303 	umull	r2, r3, r2, r3
 80004bc:	099b      	lsrs	r3, r3, #6
 80004be:	3b01      	subs	r3, #1
 80004c0:	607b      	str	r3, [r7, #4]
	SysTick->LOAD = temp;
 80004c2:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <SysTickInit+0x64>)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6053      	str	r3, [r2, #4]
	//3. Configuras el registro de control y habilitas el conteo
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; 			//system core clock
 80004c8:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <SysTickInit+0x64>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <SysTickInit+0x64>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6013      	str	r3, [r2, #0]

	//configurar la IT
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;				//habilita la IT
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <SysTickInit+0x64>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a09      	ldr	r2, [pc, #36]	; (8000500 <SysTickInit+0x64>)
 80004da:	f043 0302 	orr.w	r3, r3, #2
 80004de:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(SysTick_IRQn, 15);
 80004e0:	210f      	movs	r1, #15
 80004e2:	f04f 30ff 	mov.w	r0, #4294967295
 80004e6:	f7ff ffaf 	bl	8000448 <__NVIC_SetPriority>

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;				//habilita el conteo
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <SysTickInit+0x64>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a04      	ldr	r2, [pc, #16]	; (8000500 <SysTickInit+0x64>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6013      	str	r3, [r2, #0]

	return;
 80004f6:	bf00      	nop
}
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	e000e010 	.word	0xe000e010
 8000504:	20000000 	.word	0x20000000
 8000508:	10624dd3 	.word	0x10624dd3

0800050c <delay_ms>:


/**
 * @brief funcion para generar retardos en ms
 */
void delay_ms(uint32_t delay){
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = GetTicks();
 8000514:	f000 f810 	bl	8000538 <GetTicks>
 8000518:	60f8      	str	r0, [r7, #12]
	uint32_t wait = delay;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	60bb      	str	r3, [r7, #8]
	//generacion del retardo
	while((GetTicks() - tickstart)<wait);
 800051e:	bf00      	nop
 8000520:	f000 f80a 	bl	8000538 <GetTicks>
 8000524:	4602      	mov	r2, r0
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	429a      	cmp	r2, r3
 800052e:	d8f7      	bhi.n	8000520 <delay_ms+0x14>
	return;
 8000530:	bf00      	nop
}
 8000532:	3710      	adds	r7, #16
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <GetTicks>:
/**
 * @brief retorna el ticks generado por la SysTick
 * @return uint32_t
 */
uint32_t GetTicks(void){
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
	return (uint32_t)uwTick;
 800053c:	4b03      	ldr	r3, [pc, #12]	; (800054c <GetTicks+0x14>)
 800053e:	681b      	ldr	r3, [r3, #0]
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	20000084 	.word	0x20000084

08000550 <TickInc_Callback>:


void TickInc_Callback(void){
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	uwTick += 1;
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <TickInc_Callback+0x18>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	4a03      	ldr	r2, [pc, #12]	; (8000568 <TickInc_Callback+0x18>)
 800055c:	6013      	str	r3, [r2, #0]
	return;
 800055e:	bf00      	nop
}
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	20000084 	.word	0x20000084

0800056c <__NVIC_EnableIRQ>:
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057a:	2b00      	cmp	r3, #0
 800057c:	db0b      	blt.n	8000596 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	f003 021f 	and.w	r2, r3, #31
 8000584:	4907      	ldr	r1, [pc, #28]	; (80005a4 <__NVIC_EnableIRQ+0x38>)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	095b      	lsrs	r3, r3, #5
 800058c:	2001      	movs	r0, #1
 800058e:	fa00 f202 	lsl.w	r2, r0, r2
 8000592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000e100 	.word	0xe000e100

080005a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d013      	beq.n	80005e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00b      	beq.n	80005e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d0:	e000      	b.n	80005d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f9      	beq.n	80005d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <main>:

void TIMER6_Init(void);
/*main function --------------------------------------------------------------*/

int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	printf("EJEMPLO GPIO1\r\n");
 80005fc:	482a      	ldr	r0, [pc, #168]	; (80006a8 <main+0xb0>)
 80005fe:	f000 fae5 	bl	8000bcc <puts>
	printf("%s, %s\r\n", __DATE__, __TIME__);
 8000602:	4a2a      	ldr	r2, [pc, #168]	; (80006ac <main+0xb4>)
 8000604:	492a      	ldr	r1, [pc, #168]	; (80006b0 <main+0xb8>)
 8000606:	482b      	ldr	r0, [pc, #172]	; (80006b4 <main+0xbc>)
 8000608:	f000 fa5a 	bl	8000ac0 <iprintf>
	//PD12 (LED1)
	RCC->AHB1ENR |= GPIOX_CLOCK(LED) | GPIOX_CLOCK(SW);
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <main+0xc0>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a29      	ldr	r2, [pc, #164]	; (80006b8 <main+0xc0>)
 8000612:	f043 0309 	orr.w	r3, r3, #9
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_OUT, LED);
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <main+0xc4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000620:	4a26      	ldr	r2, [pc, #152]	; (80006bc <main+0xc4>)
 8000622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000626:	6013      	str	r3, [r2, #0]
	GPIOX_OTYPER(MODE_OT_PP, LED);
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <main+0xc4>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4a23      	ldr	r2, [pc, #140]	; (80006bc <main+0xc4>)
 800062e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000632:	6053      	str	r3, [r2, #4]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, LED);
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <main+0xc4>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a20      	ldr	r2, [pc, #128]	; (80006bc <main+0xc4>)
 800063a:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800063e:	6093      	str	r3, [r2, #8]
	GPIOX_PUPDR(MODE_PU_NONE, LED);
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <main+0xc4>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	4a1d      	ldr	r2, [pc, #116]	; (80006bc <main+0xc4>)
 8000646:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800064a:	60d3      	str	r3, [r2, #12]

	//PA0
	GPIOX_MODER(MODE_DIGITAL_INPUT, SW);
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <main+0xc8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <main+0xc8>)
 8000652:	f023 0303 	bic.w	r3, r3, #3
 8000656:	6013      	str	r3, [r2, #0]
	GPIOX_PUPDR(MODE_PU_NONE, SW);
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <main+0xc8>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <main+0xc8>)
 800065e:	f023 0303 	bic.w	r3, r3, #3
 8000662:	60d3      	str	r3, [r2, #12]
	//systick
	SysTickInit();
 8000664:	f7ff ff1a 	bl	800049c <SysTickInit>
	//timer init
	TIMER6_Init();
 8000668:	f000 f84a 	bl	8000700 <TIMER6_Init>
	//inicializar
	Button_InitTime(&button, GPIOA, 0, button_callback);
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <main+0xcc>)
 800066e:	2200      	movs	r2, #0
 8000670:	4913      	ldr	r1, [pc, #76]	; (80006c0 <main+0xc8>)
 8000672:	4815      	ldr	r0, [pc, #84]	; (80006c8 <main+0xd0>)
 8000674:	f7ff fe0c 	bl	8000290 <Button_InitTime>
    /* Loop forever */
	for(;;){
		if((int8_t)ledBlinkCount > 0){			//blink en relacion a cantidad de pulsos ingresados
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <main+0xd4>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b25b      	sxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	ddfa      	ble.n	8000678 <main+0x80>
			GPIOX_ODR(LED) = 1;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <main+0xd8>)
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
			delay_ms(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f7ff ff3f 	bl	800050c <delay_ms>
			GPIOX_ODR(LED) = 0;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <main+0xd8>)
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
			delay_ms(100);
 8000694:	2064      	movs	r0, #100	; 0x64
 8000696:	f7ff ff39 	bl	800050c <delay_ms>
			ledBlinkCount--;
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <main+0xd4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	3b01      	subs	r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <main+0xd4>)
 80006a4:	701a      	strb	r2, [r3, #0]
		if((int8_t)ledBlinkCount > 0){			//blink en relacion a cantidad de pulsos ingresados
 80006a6:	e7e7      	b.n	8000678 <main+0x80>
 80006a8:	08001ae0 	.word	0x08001ae0
 80006ac:	08001af0 	.word	0x08001af0
 80006b0:	08001afc 	.word	0x08001afc
 80006b4:	08001b08 	.word	0x08001b08
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020c00 	.word	0x40020c00
 80006c0:	40020000 	.word	0x40020000
 80006c4:	080006d5 	.word	0x080006d5
 80006c8:	20000088 	.word	0x20000088
 80006cc:	200000a4 	.word	0x200000a4
 80006d0:	424182b0 	.word	0x424182b0

080006d4 <button_callback>:

	}
}

/*Function definition ---------------------------------------------------------*/
void button_callback(uint8_t pulse){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	printf("se presiono %u veces \r\n", pulse);
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4619      	mov	r1, r3
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <button_callback+0x24>)
 80006e4:	f000 f9ec 	bl	8000ac0 <iprintf>
	ledBlinkCount = pulse;
 80006e8:	4a04      	ldr	r2, [pc, #16]	; (80006fc <button_callback+0x28>)
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	7013      	strb	r3, [r2, #0]
	//todo
	//(incluir codigo que no genere bloqueos)
	return;
 80006ee:	bf00      	nop
}
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	08001b14 	.word	0x08001b14
 80006fc:	200000a4 	.word	0x200000a4

08000700 <TIMER6_Init>:


void TIMER6_Init(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	RCC->APB1ENR|= RCC_APB1ENR_TIM6EN;
 8000704:	4b10      	ldr	r3, [pc, #64]	; (8000748 <TIMER6_Init+0x48>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <TIMER6_Init+0x48>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
	/**
	 * CONFIGURACION DEL TIMER CON SIMPLE RECURSO DE TEMP...
	 */
	TIM6->CR1 = 0;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <TIMER6_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
	 * ARR
	 * PSC
	 * periodCounter = 5ms (1 / 5ms -> 200)
	 * ARR = 16E+6 / (16 *  (200) - 1 = 5000 - 1
	 */
	TIM6->PSC = 16 - 1;
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <TIMER6_Init+0x4c>)
 8000718:	220f      	movs	r2, #15
 800071a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = 5000 - 1;
 800071c:	4b0b      	ldr	r3, [pc, #44]	; (800074c <TIMER6_Init+0x4c>)
 800071e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
	/*Habilitar las interrupciones*/
	//update event
	TIM6->DIER |= TIM_DIER_UIE;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <TIMER6_Init+0x4c>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	4a08      	ldr	r2, [pc, #32]	; (800074c <TIMER6_Init+0x4c>)
 800072a:	f043 0301 	orr.w	r3, r3, #1
 800072e:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000730:	2036      	movs	r0, #54	; 0x36
 8000732:	f7ff ff1b 	bl	800056c <__NVIC_EnableIRQ>
	//HABILITAR EL CONTADOR
	TIM6->CR1 |= TIM_CR1_CEN;
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <TIMER6_Init+0x4c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a04      	ldr	r2, [pc, #16]	; (800074c <TIMER6_Init+0x4c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6013      	str	r3, [r2, #0]
	return;
 8000742:	bf00      	nop
}
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40001000 	.word	0x40001000

08000750 <__io_putchar>:


int __io_putchar(int ch){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff24 	bl	80005a8 <ITM_SendChar>
	return ch;
 8000760:	687b      	ldr	r3, [r7, #4]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <SysTick_Handler>:
#include "delay.h"
#include "buttonV2.h"
/**
 * @brief ISR -> SYSTICK
 */
void SysTick_Handler(void){
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
	TickInc_Callback();
 800076e:	f7ff feef 	bl	8000550 <TickInc_Callback>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <TIM6_DAC_IRQHandler>:

extern Button_Time_t button;

void TIM6_DAC_IRQHandler(void){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	//SE GENERANDO
	TIM6->SR &=~ (TIM_SR_UIF);			//limpia la bandera
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <TIM6_DAC_IRQHandler+0x1c>)
 800077e:	691b      	ldr	r3, [r3, #16]
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <TIM6_DAC_IRQHandler+0x1c>)
 8000782:	f023 0301 	bic.w	r3, r3, #1
 8000786:	6113      	str	r3, [r2, #16]
	//se ejecuta la fun
	//Button_Update(&BUTTON);
	Button_Update(&button);
 8000788:	4803      	ldr	r0, [pc, #12]	; (8000798 <TIM6_DAC_IRQHandler+0x20>)
 800078a:	f7ff fda1 	bl	80002d0 <Button_Update>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40001000 	.word	0x40001000
 8000798:	20000088 	.word	0x20000088

0800079c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	e00a      	b.n	80007c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ae:	f3af 8000 	nop.w
 80007b2:	4601      	mov	r1, r0
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	b2ca      	uxtb	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	3301      	adds	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dbf0      	blt.n	80007ae <_read+0x12>
  }

  return len;
 80007cc:	687b      	ldr	r3, [r7, #4]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	e009      	b.n	80007fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	60ba      	str	r2, [r7, #8]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ffad 	bl	8000750 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbf1      	blt.n	80007e8 <_write+0x12>
  }
  return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_close>:

int _close(int file)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000836:	605a      	str	r2, [r3, #4]
  return 0;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <_isatty>:

int _isatty(int file)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
	...

08000878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000880:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a8:	f000 f8d8 	bl	8000a5c <__errno>
 80008ac:	4603      	mov	r3, r0
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	; (80008dc <_sbrk+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ca:	68fb      	ldr	r3, [r7, #12]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20020000 	.word	0x20020000
 80008d8:	00000400 	.word	0x00000400
 80008dc:	200000a8 	.word	0x200000a8
 80008e0:	200000c0 	.word	0x200000c0

080008e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	; (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	; (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000908:	b480      	push	{r7}
 800090a:	b087      	sub	sp, #28
 800090c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	2302      	movs	r3, #2
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	2302      	movs	r3, #2
 8000920:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000922:	4b34      	ldr	r3, [pc, #208]	; (80009f4 <SystemCoreClockUpdate+0xec>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f003 030c 	and.w	r3, r3, #12
 800092a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800092c:	693b      	ldr	r3, [r7, #16]
 800092e:	2b08      	cmp	r3, #8
 8000930:	d011      	beq.n	8000956 <SystemCoreClockUpdate+0x4e>
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	2b08      	cmp	r3, #8
 8000936:	d844      	bhi.n	80009c2 <SystemCoreClockUpdate+0xba>
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <SystemCoreClockUpdate+0x3e>
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	2b04      	cmp	r3, #4
 8000942:	d004      	beq.n	800094e <SystemCoreClockUpdate+0x46>
 8000944:	e03d      	b.n	80009c2 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000946:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <SystemCoreClockUpdate+0xf0>)
 8000948:	4a2c      	ldr	r2, [pc, #176]	; (80009fc <SystemCoreClockUpdate+0xf4>)
 800094a:	601a      	str	r2, [r3, #0]
      break;
 800094c:	e03d      	b.n	80009ca <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <SystemCoreClockUpdate+0xf0>)
 8000950:	4a2b      	ldr	r2, [pc, #172]	; (8000a00 <SystemCoreClockUpdate+0xf8>)
 8000952:	601a      	str	r2, [r3, #0]
      break;
 8000954:	e039      	b.n	80009ca <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <SystemCoreClockUpdate+0xec>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	0d9b      	lsrs	r3, r3, #22
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000962:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <SystemCoreClockUpdate+0xec>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800096a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00c      	beq.n	800098c <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000972:	4a23      	ldr	r2, [pc, #140]	; (8000a00 <SystemCoreClockUpdate+0xf8>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	fbb2 f3f3 	udiv	r3, r2, r3
 800097a:	4a1e      	ldr	r2, [pc, #120]	; (80009f4 <SystemCoreClockUpdate+0xec>)
 800097c:	6852      	ldr	r2, [r2, #4]
 800097e:	0992      	lsrs	r2, r2, #6
 8000980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000984:	fb02 f303 	mul.w	r3, r2, r3
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	e00b      	b.n	80009a4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <SystemCoreClockUpdate+0xf4>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	fbb2 f3f3 	udiv	r3, r2, r3
 8000994:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <SystemCoreClockUpdate+0xec>)
 8000996:	6852      	ldr	r2, [r2, #4]
 8000998:	0992      	lsrs	r2, r2, #6
 800099a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800099e:	fb02 f303 	mul.w	r3, r2, r3
 80009a2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <SystemCoreClockUpdate+0xec>)
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	0c1b      	lsrs	r3, r3, #16
 80009aa:	f003 0303 	and.w	r3, r3, #3
 80009ae:	3301      	adds	r3, #1
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009bc:	4a0e      	ldr	r2, [pc, #56]	; (80009f8 <SystemCoreClockUpdate+0xf0>)
 80009be:	6013      	str	r3, [r2, #0]
      break;
 80009c0:	e003      	b.n	80009ca <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <SystemCoreClockUpdate+0xf0>)
 80009c4:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <SystemCoreClockUpdate+0xf4>)
 80009c6:	601a      	str	r2, [r3, #0]
      break;
 80009c8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <SystemCoreClockUpdate+0xec>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	091b      	lsrs	r3, r3, #4
 80009d0:	f003 030f 	and.w	r3, r3, #15
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <SystemCoreClockUpdate+0xfc>)
 80009d6:	5cd3      	ldrb	r3, [r2, r3]
 80009d8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <SystemCoreClockUpdate+0xf0>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	fa22 f303 	lsr.w	r3, r2, r3
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <SystemCoreClockUpdate+0xf0>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	371c      	adds	r7, #28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	40023800 	.word	0x40023800
 80009f8:	20000000 	.word	0x20000000
 80009fc:	00f42400 	.word	0x00f42400
 8000a00:	017d7840 	.word	0x017d7840
 8000a04:	08001b2c 	.word	0x08001b2c

08000a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a0c:	f7ff ff6a 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a12:	490d      	ldr	r1, [pc, #52]	; (8000a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <LoopForever+0xe>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a28:	4c0a      	ldr	r4, [pc, #40]	; (8000a54 <LoopForever+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a36:	f000 f817 	bl	8000a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3a:	f7ff fddd 	bl	80005f8 <main>

08000a3e <LoopForever>:

LoopForever:
  b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   r0, =_estack
 8000a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a4c:	08001bdc 	.word	0x08001bdc
  ldr r2, =_sbss
 8000a50:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a54:	200000bc 	.word	0x200000bc

08000a58 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC_IRQHandler>
	...

08000a5c <__errno>:
 8000a5c:	4b01      	ldr	r3, [pc, #4]	; (8000a64 <__errno+0x8>)
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000004 	.word	0x20000004

08000a68 <__libc_init_array>:
 8000a68:	b570      	push	{r4, r5, r6, lr}
 8000a6a:	4d0d      	ldr	r5, [pc, #52]	; (8000aa0 <__libc_init_array+0x38>)
 8000a6c:	4c0d      	ldr	r4, [pc, #52]	; (8000aa4 <__libc_init_array+0x3c>)
 8000a6e:	1b64      	subs	r4, r4, r5
 8000a70:	10a4      	asrs	r4, r4, #2
 8000a72:	2600      	movs	r6, #0
 8000a74:	42a6      	cmp	r6, r4
 8000a76:	d109      	bne.n	8000a8c <__libc_init_array+0x24>
 8000a78:	4d0b      	ldr	r5, [pc, #44]	; (8000aa8 <__libc_init_array+0x40>)
 8000a7a:	4c0c      	ldr	r4, [pc, #48]	; (8000aac <__libc_init_array+0x44>)
 8000a7c:	f001 f824 	bl	8001ac8 <_init>
 8000a80:	1b64      	subs	r4, r4, r5
 8000a82:	10a4      	asrs	r4, r4, #2
 8000a84:	2600      	movs	r6, #0
 8000a86:	42a6      	cmp	r6, r4
 8000a88:	d105      	bne.n	8000a96 <__libc_init_array+0x2e>
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a90:	4798      	blx	r3
 8000a92:	3601      	adds	r6, #1
 8000a94:	e7ee      	b.n	8000a74 <__libc_init_array+0xc>
 8000a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a9a:	4798      	blx	r3
 8000a9c:	3601      	adds	r6, #1
 8000a9e:	e7f2      	b.n	8000a86 <__libc_init_array+0x1e>
 8000aa0:	08001bd4 	.word	0x08001bd4
 8000aa4:	08001bd4 	.word	0x08001bd4
 8000aa8:	08001bd4 	.word	0x08001bd4
 8000aac:	08001bd8 	.word	0x08001bd8

08000ab0 <memset>:
 8000ab0:	4402      	add	r2, r0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d100      	bne.n	8000aba <memset+0xa>
 8000ab8:	4770      	bx	lr
 8000aba:	f803 1b01 	strb.w	r1, [r3], #1
 8000abe:	e7f9      	b.n	8000ab4 <memset+0x4>

08000ac0 <iprintf>:
 8000ac0:	b40f      	push	{r0, r1, r2, r3}
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <iprintf+0x2c>)
 8000ac4:	b513      	push	{r0, r1, r4, lr}
 8000ac6:	681c      	ldr	r4, [r3, #0]
 8000ac8:	b124      	cbz	r4, 8000ad4 <iprintf+0x14>
 8000aca:	69a3      	ldr	r3, [r4, #24]
 8000acc:	b913      	cbnz	r3, 8000ad4 <iprintf+0x14>
 8000ace:	4620      	mov	r0, r4
 8000ad0:	f000 fa5e 	bl	8000f90 <__sinit>
 8000ad4:	ab05      	add	r3, sp, #20
 8000ad6:	9a04      	ldr	r2, [sp, #16]
 8000ad8:	68a1      	ldr	r1, [r4, #8]
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	4620      	mov	r0, r4
 8000ade:	f000 fc67 	bl	80013b0 <_vfiprintf_r>
 8000ae2:	b002      	add	sp, #8
 8000ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr
 8000aec:	20000004 	.word	0x20000004

08000af0 <_puts_r>:
 8000af0:	b570      	push	{r4, r5, r6, lr}
 8000af2:	460e      	mov	r6, r1
 8000af4:	4605      	mov	r5, r0
 8000af6:	b118      	cbz	r0, 8000b00 <_puts_r+0x10>
 8000af8:	6983      	ldr	r3, [r0, #24]
 8000afa:	b90b      	cbnz	r3, 8000b00 <_puts_r+0x10>
 8000afc:	f000 fa48 	bl	8000f90 <__sinit>
 8000b00:	69ab      	ldr	r3, [r5, #24]
 8000b02:	68ac      	ldr	r4, [r5, #8]
 8000b04:	b913      	cbnz	r3, 8000b0c <_puts_r+0x1c>
 8000b06:	4628      	mov	r0, r5
 8000b08:	f000 fa42 	bl	8000f90 <__sinit>
 8000b0c:	4b2c      	ldr	r3, [pc, #176]	; (8000bc0 <_puts_r+0xd0>)
 8000b0e:	429c      	cmp	r4, r3
 8000b10:	d120      	bne.n	8000b54 <_puts_r+0x64>
 8000b12:	686c      	ldr	r4, [r5, #4]
 8000b14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b16:	07db      	lsls	r3, r3, #31
 8000b18:	d405      	bmi.n	8000b26 <_puts_r+0x36>
 8000b1a:	89a3      	ldrh	r3, [r4, #12]
 8000b1c:	0598      	lsls	r0, r3, #22
 8000b1e:	d402      	bmi.n	8000b26 <_puts_r+0x36>
 8000b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b22:	f000 fad3 	bl	80010cc <__retarget_lock_acquire_recursive>
 8000b26:	89a3      	ldrh	r3, [r4, #12]
 8000b28:	0719      	lsls	r1, r3, #28
 8000b2a:	d51d      	bpl.n	8000b68 <_puts_r+0x78>
 8000b2c:	6923      	ldr	r3, [r4, #16]
 8000b2e:	b1db      	cbz	r3, 8000b68 <_puts_r+0x78>
 8000b30:	3e01      	subs	r6, #1
 8000b32:	68a3      	ldr	r3, [r4, #8]
 8000b34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	60a3      	str	r3, [r4, #8]
 8000b3c:	bb39      	cbnz	r1, 8000b8e <_puts_r+0x9e>
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	da38      	bge.n	8000bb4 <_puts_r+0xc4>
 8000b42:	4622      	mov	r2, r4
 8000b44:	210a      	movs	r1, #10
 8000b46:	4628      	mov	r0, r5
 8000b48:	f000 f848 	bl	8000bdc <__swbuf_r>
 8000b4c:	3001      	adds	r0, #1
 8000b4e:	d011      	beq.n	8000b74 <_puts_r+0x84>
 8000b50:	250a      	movs	r5, #10
 8000b52:	e011      	b.n	8000b78 <_puts_r+0x88>
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <_puts_r+0xd4>)
 8000b56:	429c      	cmp	r4, r3
 8000b58:	d101      	bne.n	8000b5e <_puts_r+0x6e>
 8000b5a:	68ac      	ldr	r4, [r5, #8]
 8000b5c:	e7da      	b.n	8000b14 <_puts_r+0x24>
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <_puts_r+0xd8>)
 8000b60:	429c      	cmp	r4, r3
 8000b62:	bf08      	it	eq
 8000b64:	68ec      	ldreq	r4, [r5, #12]
 8000b66:	e7d5      	b.n	8000b14 <_puts_r+0x24>
 8000b68:	4621      	mov	r1, r4
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f000 f888 	bl	8000c80 <__swsetup_r>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d0dd      	beq.n	8000b30 <_puts_r+0x40>
 8000b74:	f04f 35ff 	mov.w	r5, #4294967295
 8000b78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b7a:	07da      	lsls	r2, r3, #31
 8000b7c:	d405      	bmi.n	8000b8a <_puts_r+0x9a>
 8000b7e:	89a3      	ldrh	r3, [r4, #12]
 8000b80:	059b      	lsls	r3, r3, #22
 8000b82:	d402      	bmi.n	8000b8a <_puts_r+0x9a>
 8000b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b86:	f000 faa2 	bl	80010ce <__retarget_lock_release_recursive>
 8000b8a:	4628      	mov	r0, r5
 8000b8c:	bd70      	pop	{r4, r5, r6, pc}
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	da04      	bge.n	8000b9c <_puts_r+0xac>
 8000b92:	69a2      	ldr	r2, [r4, #24]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	dc06      	bgt.n	8000ba6 <_puts_r+0xb6>
 8000b98:	290a      	cmp	r1, #10
 8000b9a:	d004      	beq.n	8000ba6 <_puts_r+0xb6>
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	6022      	str	r2, [r4, #0]
 8000ba2:	7019      	strb	r1, [r3, #0]
 8000ba4:	e7c5      	b.n	8000b32 <_puts_r+0x42>
 8000ba6:	4622      	mov	r2, r4
 8000ba8:	4628      	mov	r0, r5
 8000baa:	f000 f817 	bl	8000bdc <__swbuf_r>
 8000bae:	3001      	adds	r0, #1
 8000bb0:	d1bf      	bne.n	8000b32 <_puts_r+0x42>
 8000bb2:	e7df      	b.n	8000b74 <_puts_r+0x84>
 8000bb4:	6823      	ldr	r3, [r4, #0]
 8000bb6:	250a      	movs	r5, #10
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	6022      	str	r2, [r4, #0]
 8000bbc:	701d      	strb	r5, [r3, #0]
 8000bbe:	e7db      	b.n	8000b78 <_puts_r+0x88>
 8000bc0:	08001b60 	.word	0x08001b60
 8000bc4:	08001b80 	.word	0x08001b80
 8000bc8:	08001b40 	.word	0x08001b40

08000bcc <puts>:
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <puts+0xc>)
 8000bce:	4601      	mov	r1, r0
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	f7ff bf8d 	b.w	8000af0 <_puts_r>
 8000bd6:	bf00      	nop
 8000bd8:	20000004 	.word	0x20000004

08000bdc <__swbuf_r>:
 8000bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bde:	460e      	mov	r6, r1
 8000be0:	4614      	mov	r4, r2
 8000be2:	4605      	mov	r5, r0
 8000be4:	b118      	cbz	r0, 8000bee <__swbuf_r+0x12>
 8000be6:	6983      	ldr	r3, [r0, #24]
 8000be8:	b90b      	cbnz	r3, 8000bee <__swbuf_r+0x12>
 8000bea:	f000 f9d1 	bl	8000f90 <__sinit>
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <__swbuf_r+0x98>)
 8000bf0:	429c      	cmp	r4, r3
 8000bf2:	d12b      	bne.n	8000c4c <__swbuf_r+0x70>
 8000bf4:	686c      	ldr	r4, [r5, #4]
 8000bf6:	69a3      	ldr	r3, [r4, #24]
 8000bf8:	60a3      	str	r3, [r4, #8]
 8000bfa:	89a3      	ldrh	r3, [r4, #12]
 8000bfc:	071a      	lsls	r2, r3, #28
 8000bfe:	d52f      	bpl.n	8000c60 <__swbuf_r+0x84>
 8000c00:	6923      	ldr	r3, [r4, #16]
 8000c02:	b36b      	cbz	r3, 8000c60 <__swbuf_r+0x84>
 8000c04:	6923      	ldr	r3, [r4, #16]
 8000c06:	6820      	ldr	r0, [r4, #0]
 8000c08:	1ac0      	subs	r0, r0, r3
 8000c0a:	6963      	ldr	r3, [r4, #20]
 8000c0c:	b2f6      	uxtb	r6, r6
 8000c0e:	4283      	cmp	r3, r0
 8000c10:	4637      	mov	r7, r6
 8000c12:	dc04      	bgt.n	8000c1e <__swbuf_r+0x42>
 8000c14:	4621      	mov	r1, r4
 8000c16:	4628      	mov	r0, r5
 8000c18:	f000 f926 	bl	8000e68 <_fflush_r>
 8000c1c:	bb30      	cbnz	r0, 8000c6c <__swbuf_r+0x90>
 8000c1e:	68a3      	ldr	r3, [r4, #8]
 8000c20:	3b01      	subs	r3, #1
 8000c22:	60a3      	str	r3, [r4, #8]
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	6022      	str	r2, [r4, #0]
 8000c2a:	701e      	strb	r6, [r3, #0]
 8000c2c:	6963      	ldr	r3, [r4, #20]
 8000c2e:	3001      	adds	r0, #1
 8000c30:	4283      	cmp	r3, r0
 8000c32:	d004      	beq.n	8000c3e <__swbuf_r+0x62>
 8000c34:	89a3      	ldrh	r3, [r4, #12]
 8000c36:	07db      	lsls	r3, r3, #31
 8000c38:	d506      	bpl.n	8000c48 <__swbuf_r+0x6c>
 8000c3a:	2e0a      	cmp	r6, #10
 8000c3c:	d104      	bne.n	8000c48 <__swbuf_r+0x6c>
 8000c3e:	4621      	mov	r1, r4
 8000c40:	4628      	mov	r0, r5
 8000c42:	f000 f911 	bl	8000e68 <_fflush_r>
 8000c46:	b988      	cbnz	r0, 8000c6c <__swbuf_r+0x90>
 8000c48:	4638      	mov	r0, r7
 8000c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c4c:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <__swbuf_r+0x9c>)
 8000c4e:	429c      	cmp	r4, r3
 8000c50:	d101      	bne.n	8000c56 <__swbuf_r+0x7a>
 8000c52:	68ac      	ldr	r4, [r5, #8]
 8000c54:	e7cf      	b.n	8000bf6 <__swbuf_r+0x1a>
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <__swbuf_r+0xa0>)
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	bf08      	it	eq
 8000c5c:	68ec      	ldreq	r4, [r5, #12]
 8000c5e:	e7ca      	b.n	8000bf6 <__swbuf_r+0x1a>
 8000c60:	4621      	mov	r1, r4
 8000c62:	4628      	mov	r0, r5
 8000c64:	f000 f80c 	bl	8000c80 <__swsetup_r>
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	d0cb      	beq.n	8000c04 <__swbuf_r+0x28>
 8000c6c:	f04f 37ff 	mov.w	r7, #4294967295
 8000c70:	e7ea      	b.n	8000c48 <__swbuf_r+0x6c>
 8000c72:	bf00      	nop
 8000c74:	08001b60 	.word	0x08001b60
 8000c78:	08001b80 	.word	0x08001b80
 8000c7c:	08001b40 	.word	0x08001b40

08000c80 <__swsetup_r>:
 8000c80:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <__swsetup_r+0xcc>)
 8000c82:	b570      	push	{r4, r5, r6, lr}
 8000c84:	681d      	ldr	r5, [r3, #0]
 8000c86:	4606      	mov	r6, r0
 8000c88:	460c      	mov	r4, r1
 8000c8a:	b125      	cbz	r5, 8000c96 <__swsetup_r+0x16>
 8000c8c:	69ab      	ldr	r3, [r5, #24]
 8000c8e:	b913      	cbnz	r3, 8000c96 <__swsetup_r+0x16>
 8000c90:	4628      	mov	r0, r5
 8000c92:	f000 f97d 	bl	8000f90 <__sinit>
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <__swsetup_r+0xd0>)
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	d10f      	bne.n	8000cbc <__swsetup_r+0x3c>
 8000c9c:	686c      	ldr	r4, [r5, #4]
 8000c9e:	89a3      	ldrh	r3, [r4, #12]
 8000ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ca4:	0719      	lsls	r1, r3, #28
 8000ca6:	d42c      	bmi.n	8000d02 <__swsetup_r+0x82>
 8000ca8:	06dd      	lsls	r5, r3, #27
 8000caa:	d411      	bmi.n	8000cd0 <__swsetup_r+0x50>
 8000cac:	2309      	movs	r3, #9
 8000cae:	6033      	str	r3, [r6, #0]
 8000cb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000cb4:	81a3      	strh	r3, [r4, #12]
 8000cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cba:	e03e      	b.n	8000d3a <__swsetup_r+0xba>
 8000cbc:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <__swsetup_r+0xd4>)
 8000cbe:	429c      	cmp	r4, r3
 8000cc0:	d101      	bne.n	8000cc6 <__swsetup_r+0x46>
 8000cc2:	68ac      	ldr	r4, [r5, #8]
 8000cc4:	e7eb      	b.n	8000c9e <__swsetup_r+0x1e>
 8000cc6:	4b24      	ldr	r3, [pc, #144]	; (8000d58 <__swsetup_r+0xd8>)
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	bf08      	it	eq
 8000ccc:	68ec      	ldreq	r4, [r5, #12]
 8000cce:	e7e6      	b.n	8000c9e <__swsetup_r+0x1e>
 8000cd0:	0758      	lsls	r0, r3, #29
 8000cd2:	d512      	bpl.n	8000cfa <__swsetup_r+0x7a>
 8000cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cd6:	b141      	cbz	r1, 8000cea <__swsetup_r+0x6a>
 8000cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cdc:	4299      	cmp	r1, r3
 8000cde:	d002      	beq.n	8000ce6 <__swsetup_r+0x66>
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	f000 fa5b 	bl	800119c <_free_r>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	6363      	str	r3, [r4, #52]	; 0x34
 8000cea:	89a3      	ldrh	r3, [r4, #12]
 8000cec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000cf0:	81a3      	strh	r3, [r4, #12]
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	6063      	str	r3, [r4, #4]
 8000cf6:	6923      	ldr	r3, [r4, #16]
 8000cf8:	6023      	str	r3, [r4, #0]
 8000cfa:	89a3      	ldrh	r3, [r4, #12]
 8000cfc:	f043 0308 	orr.w	r3, r3, #8
 8000d00:	81a3      	strh	r3, [r4, #12]
 8000d02:	6923      	ldr	r3, [r4, #16]
 8000d04:	b94b      	cbnz	r3, 8000d1a <__swsetup_r+0x9a>
 8000d06:	89a3      	ldrh	r3, [r4, #12]
 8000d08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d10:	d003      	beq.n	8000d1a <__swsetup_r+0x9a>
 8000d12:	4621      	mov	r1, r4
 8000d14:	4630      	mov	r0, r6
 8000d16:	f000 fa01 	bl	800111c <__smakebuf_r>
 8000d1a:	89a0      	ldrh	r0, [r4, #12]
 8000d1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d20:	f010 0301 	ands.w	r3, r0, #1
 8000d24:	d00a      	beq.n	8000d3c <__swsetup_r+0xbc>
 8000d26:	2300      	movs	r3, #0
 8000d28:	60a3      	str	r3, [r4, #8]
 8000d2a:	6963      	ldr	r3, [r4, #20]
 8000d2c:	425b      	negs	r3, r3
 8000d2e:	61a3      	str	r3, [r4, #24]
 8000d30:	6923      	ldr	r3, [r4, #16]
 8000d32:	b943      	cbnz	r3, 8000d46 <__swsetup_r+0xc6>
 8000d34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d38:	d1ba      	bne.n	8000cb0 <__swsetup_r+0x30>
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}
 8000d3c:	0781      	lsls	r1, r0, #30
 8000d3e:	bf58      	it	pl
 8000d40:	6963      	ldrpl	r3, [r4, #20]
 8000d42:	60a3      	str	r3, [r4, #8]
 8000d44:	e7f4      	b.n	8000d30 <__swsetup_r+0xb0>
 8000d46:	2000      	movs	r0, #0
 8000d48:	e7f7      	b.n	8000d3a <__swsetup_r+0xba>
 8000d4a:	bf00      	nop
 8000d4c:	20000004 	.word	0x20000004
 8000d50:	08001b60 	.word	0x08001b60
 8000d54:	08001b80 	.word	0x08001b80
 8000d58:	08001b40 	.word	0x08001b40

08000d5c <__sflush_r>:
 8000d5c:	898a      	ldrh	r2, [r1, #12]
 8000d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d62:	4605      	mov	r5, r0
 8000d64:	0710      	lsls	r0, r2, #28
 8000d66:	460c      	mov	r4, r1
 8000d68:	d458      	bmi.n	8000e1c <__sflush_r+0xc0>
 8000d6a:	684b      	ldr	r3, [r1, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	dc05      	bgt.n	8000d7c <__sflush_r+0x20>
 8000d70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	dc02      	bgt.n	8000d7c <__sflush_r+0x20>
 8000d76:	2000      	movs	r0, #0
 8000d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d0f9      	beq.n	8000d76 <__sflush_r+0x1a>
 8000d82:	2300      	movs	r3, #0
 8000d84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000d88:	682f      	ldr	r7, [r5, #0]
 8000d8a:	602b      	str	r3, [r5, #0]
 8000d8c:	d032      	beq.n	8000df4 <__sflush_r+0x98>
 8000d8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d90:	89a3      	ldrh	r3, [r4, #12]
 8000d92:	075a      	lsls	r2, r3, #29
 8000d94:	d505      	bpl.n	8000da2 <__sflush_r+0x46>
 8000d96:	6863      	ldr	r3, [r4, #4]
 8000d98:	1ac0      	subs	r0, r0, r3
 8000d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d9c:	b10b      	cbz	r3, 8000da2 <__sflush_r+0x46>
 8000d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000da0:	1ac0      	subs	r0, r0, r3
 8000da2:	2300      	movs	r3, #0
 8000da4:	4602      	mov	r2, r0
 8000da6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000da8:	6a21      	ldr	r1, [r4, #32]
 8000daa:	4628      	mov	r0, r5
 8000dac:	47b0      	blx	r6
 8000dae:	1c43      	adds	r3, r0, #1
 8000db0:	89a3      	ldrh	r3, [r4, #12]
 8000db2:	d106      	bne.n	8000dc2 <__sflush_r+0x66>
 8000db4:	6829      	ldr	r1, [r5, #0]
 8000db6:	291d      	cmp	r1, #29
 8000db8:	d82c      	bhi.n	8000e14 <__sflush_r+0xb8>
 8000dba:	4a2a      	ldr	r2, [pc, #168]	; (8000e64 <__sflush_r+0x108>)
 8000dbc:	40ca      	lsrs	r2, r1
 8000dbe:	07d6      	lsls	r6, r2, #31
 8000dc0:	d528      	bpl.n	8000e14 <__sflush_r+0xb8>
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	6062      	str	r2, [r4, #4]
 8000dc6:	04d9      	lsls	r1, r3, #19
 8000dc8:	6922      	ldr	r2, [r4, #16]
 8000dca:	6022      	str	r2, [r4, #0]
 8000dcc:	d504      	bpl.n	8000dd8 <__sflush_r+0x7c>
 8000dce:	1c42      	adds	r2, r0, #1
 8000dd0:	d101      	bne.n	8000dd6 <__sflush_r+0x7a>
 8000dd2:	682b      	ldr	r3, [r5, #0]
 8000dd4:	b903      	cbnz	r3, 8000dd8 <__sflush_r+0x7c>
 8000dd6:	6560      	str	r0, [r4, #84]	; 0x54
 8000dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000dda:	602f      	str	r7, [r5, #0]
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	d0ca      	beq.n	8000d76 <__sflush_r+0x1a>
 8000de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d002      	beq.n	8000dee <__sflush_r+0x92>
 8000de8:	4628      	mov	r0, r5
 8000dea:	f000 f9d7 	bl	800119c <_free_r>
 8000dee:	2000      	movs	r0, #0
 8000df0:	6360      	str	r0, [r4, #52]	; 0x34
 8000df2:	e7c1      	b.n	8000d78 <__sflush_r+0x1c>
 8000df4:	6a21      	ldr	r1, [r4, #32]
 8000df6:	2301      	movs	r3, #1
 8000df8:	4628      	mov	r0, r5
 8000dfa:	47b0      	blx	r6
 8000dfc:	1c41      	adds	r1, r0, #1
 8000dfe:	d1c7      	bne.n	8000d90 <__sflush_r+0x34>
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0c4      	beq.n	8000d90 <__sflush_r+0x34>
 8000e06:	2b1d      	cmp	r3, #29
 8000e08:	d001      	beq.n	8000e0e <__sflush_r+0xb2>
 8000e0a:	2b16      	cmp	r3, #22
 8000e0c:	d101      	bne.n	8000e12 <__sflush_r+0xb6>
 8000e0e:	602f      	str	r7, [r5, #0]
 8000e10:	e7b1      	b.n	8000d76 <__sflush_r+0x1a>
 8000e12:	89a3      	ldrh	r3, [r4, #12]
 8000e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e18:	81a3      	strh	r3, [r4, #12]
 8000e1a:	e7ad      	b.n	8000d78 <__sflush_r+0x1c>
 8000e1c:	690f      	ldr	r7, [r1, #16]
 8000e1e:	2f00      	cmp	r7, #0
 8000e20:	d0a9      	beq.n	8000d76 <__sflush_r+0x1a>
 8000e22:	0793      	lsls	r3, r2, #30
 8000e24:	680e      	ldr	r6, [r1, #0]
 8000e26:	bf08      	it	eq
 8000e28:	694b      	ldreq	r3, [r1, #20]
 8000e2a:	600f      	str	r7, [r1, #0]
 8000e2c:	bf18      	it	ne
 8000e2e:	2300      	movne	r3, #0
 8000e30:	eba6 0807 	sub.w	r8, r6, r7
 8000e34:	608b      	str	r3, [r1, #8]
 8000e36:	f1b8 0f00 	cmp.w	r8, #0
 8000e3a:	dd9c      	ble.n	8000d76 <__sflush_r+0x1a>
 8000e3c:	6a21      	ldr	r1, [r4, #32]
 8000e3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e40:	4643      	mov	r3, r8
 8000e42:	463a      	mov	r2, r7
 8000e44:	4628      	mov	r0, r5
 8000e46:	47b0      	blx	r6
 8000e48:	2800      	cmp	r0, #0
 8000e4a:	dc06      	bgt.n	8000e5a <__sflush_r+0xfe>
 8000e4c:	89a3      	ldrh	r3, [r4, #12]
 8000e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e52:	81a3      	strh	r3, [r4, #12]
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	e78e      	b.n	8000d78 <__sflush_r+0x1c>
 8000e5a:	4407      	add	r7, r0
 8000e5c:	eba8 0800 	sub.w	r8, r8, r0
 8000e60:	e7e9      	b.n	8000e36 <__sflush_r+0xda>
 8000e62:	bf00      	nop
 8000e64:	20400001 	.word	0x20400001

08000e68 <_fflush_r>:
 8000e68:	b538      	push	{r3, r4, r5, lr}
 8000e6a:	690b      	ldr	r3, [r1, #16]
 8000e6c:	4605      	mov	r5, r0
 8000e6e:	460c      	mov	r4, r1
 8000e70:	b913      	cbnz	r3, 8000e78 <_fflush_r+0x10>
 8000e72:	2500      	movs	r5, #0
 8000e74:	4628      	mov	r0, r5
 8000e76:	bd38      	pop	{r3, r4, r5, pc}
 8000e78:	b118      	cbz	r0, 8000e82 <_fflush_r+0x1a>
 8000e7a:	6983      	ldr	r3, [r0, #24]
 8000e7c:	b90b      	cbnz	r3, 8000e82 <_fflush_r+0x1a>
 8000e7e:	f000 f887 	bl	8000f90 <__sinit>
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <_fflush_r+0x6c>)
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d11b      	bne.n	8000ec0 <_fflush_r+0x58>
 8000e88:	686c      	ldr	r4, [r5, #4]
 8000e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0ef      	beq.n	8000e72 <_fflush_r+0xa>
 8000e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e94:	07d0      	lsls	r0, r2, #31
 8000e96:	d404      	bmi.n	8000ea2 <_fflush_r+0x3a>
 8000e98:	0599      	lsls	r1, r3, #22
 8000e9a:	d402      	bmi.n	8000ea2 <_fflush_r+0x3a>
 8000e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e9e:	f000 f915 	bl	80010cc <__retarget_lock_acquire_recursive>
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	f7ff ff59 	bl	8000d5c <__sflush_r>
 8000eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000eac:	07da      	lsls	r2, r3, #31
 8000eae:	4605      	mov	r5, r0
 8000eb0:	d4e0      	bmi.n	8000e74 <_fflush_r+0xc>
 8000eb2:	89a3      	ldrh	r3, [r4, #12]
 8000eb4:	059b      	lsls	r3, r3, #22
 8000eb6:	d4dd      	bmi.n	8000e74 <_fflush_r+0xc>
 8000eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000eba:	f000 f908 	bl	80010ce <__retarget_lock_release_recursive>
 8000ebe:	e7d9      	b.n	8000e74 <_fflush_r+0xc>
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <_fflush_r+0x70>)
 8000ec2:	429c      	cmp	r4, r3
 8000ec4:	d101      	bne.n	8000eca <_fflush_r+0x62>
 8000ec6:	68ac      	ldr	r4, [r5, #8]
 8000ec8:	e7df      	b.n	8000e8a <_fflush_r+0x22>
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <_fflush_r+0x74>)
 8000ecc:	429c      	cmp	r4, r3
 8000ece:	bf08      	it	eq
 8000ed0:	68ec      	ldreq	r4, [r5, #12]
 8000ed2:	e7da      	b.n	8000e8a <_fflush_r+0x22>
 8000ed4:	08001b60 	.word	0x08001b60
 8000ed8:	08001b80 	.word	0x08001b80
 8000edc:	08001b40 	.word	0x08001b40

08000ee0 <std>:
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	b510      	push	{r4, lr}
 8000ee4:	4604      	mov	r4, r0
 8000ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8000eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000eee:	6083      	str	r3, [r0, #8]
 8000ef0:	8181      	strh	r1, [r0, #12]
 8000ef2:	6643      	str	r3, [r0, #100]	; 0x64
 8000ef4:	81c2      	strh	r2, [r0, #14]
 8000ef6:	6183      	str	r3, [r0, #24]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	2208      	movs	r2, #8
 8000efc:	305c      	adds	r0, #92	; 0x5c
 8000efe:	f7ff fdd7 	bl	8000ab0 <memset>
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <std+0x38>)
 8000f04:	6263      	str	r3, [r4, #36]	; 0x24
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <std+0x3c>)
 8000f08:	62a3      	str	r3, [r4, #40]	; 0x28
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <std+0x40>)
 8000f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <std+0x44>)
 8000f10:	6224      	str	r4, [r4, #32]
 8000f12:	6323      	str	r3, [r4, #48]	; 0x30
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	bf00      	nop
 8000f18:	08001959 	.word	0x08001959
 8000f1c:	0800197b 	.word	0x0800197b
 8000f20:	080019b3 	.word	0x080019b3
 8000f24:	080019d7 	.word	0x080019d7

08000f28 <_cleanup_r>:
 8000f28:	4901      	ldr	r1, [pc, #4]	; (8000f30 <_cleanup_r+0x8>)
 8000f2a:	f000 b8af 	b.w	800108c <_fwalk_reent>
 8000f2e:	bf00      	nop
 8000f30:	08000e69 	.word	0x08000e69

08000f34 <__sfmoreglue>:
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	2268      	movs	r2, #104	; 0x68
 8000f38:	1e4d      	subs	r5, r1, #1
 8000f3a:	4355      	muls	r5, r2
 8000f3c:	460e      	mov	r6, r1
 8000f3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000f42:	f000 f997 	bl	8001274 <_malloc_r>
 8000f46:	4604      	mov	r4, r0
 8000f48:	b140      	cbz	r0, 8000f5c <__sfmoreglue+0x28>
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	e9c0 1600 	strd	r1, r6, [r0]
 8000f50:	300c      	adds	r0, #12
 8000f52:	60a0      	str	r0, [r4, #8]
 8000f54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f58:	f7ff fdaa 	bl	8000ab0 <memset>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	bd70      	pop	{r4, r5, r6, pc}

08000f60 <__sfp_lock_acquire>:
 8000f60:	4801      	ldr	r0, [pc, #4]	; (8000f68 <__sfp_lock_acquire+0x8>)
 8000f62:	f000 b8b3 	b.w	80010cc <__retarget_lock_acquire_recursive>
 8000f66:	bf00      	nop
 8000f68:	200000ad 	.word	0x200000ad

08000f6c <__sfp_lock_release>:
 8000f6c:	4801      	ldr	r0, [pc, #4]	; (8000f74 <__sfp_lock_release+0x8>)
 8000f6e:	f000 b8ae 	b.w	80010ce <__retarget_lock_release_recursive>
 8000f72:	bf00      	nop
 8000f74:	200000ad 	.word	0x200000ad

08000f78 <__sinit_lock_acquire>:
 8000f78:	4801      	ldr	r0, [pc, #4]	; (8000f80 <__sinit_lock_acquire+0x8>)
 8000f7a:	f000 b8a7 	b.w	80010cc <__retarget_lock_acquire_recursive>
 8000f7e:	bf00      	nop
 8000f80:	200000ae 	.word	0x200000ae

08000f84 <__sinit_lock_release>:
 8000f84:	4801      	ldr	r0, [pc, #4]	; (8000f8c <__sinit_lock_release+0x8>)
 8000f86:	f000 b8a2 	b.w	80010ce <__retarget_lock_release_recursive>
 8000f8a:	bf00      	nop
 8000f8c:	200000ae 	.word	0x200000ae

08000f90 <__sinit>:
 8000f90:	b510      	push	{r4, lr}
 8000f92:	4604      	mov	r4, r0
 8000f94:	f7ff fff0 	bl	8000f78 <__sinit_lock_acquire>
 8000f98:	69a3      	ldr	r3, [r4, #24]
 8000f9a:	b11b      	cbz	r3, 8000fa4 <__sinit+0x14>
 8000f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000fa0:	f7ff bff0 	b.w	8000f84 <__sinit_lock_release>
 8000fa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000fa8:	6523      	str	r3, [r4, #80]	; 0x50
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <__sinit+0x68>)
 8000fac:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <__sinit+0x6c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	bf04      	itt	eq
 8000fb6:	2301      	moveq	r3, #1
 8000fb8:	61a3      	streq	r3, [r4, #24]
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f000 f820 	bl	8001000 <__sfp>
 8000fc0:	6060      	str	r0, [r4, #4]
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f000 f81c 	bl	8001000 <__sfp>
 8000fc8:	60a0      	str	r0, [r4, #8]
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f000 f818 	bl	8001000 <__sfp>
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60e0      	str	r0, [r4, #12]
 8000fd4:	2104      	movs	r1, #4
 8000fd6:	6860      	ldr	r0, [r4, #4]
 8000fd8:	f7ff ff82 	bl	8000ee0 <std>
 8000fdc:	68a0      	ldr	r0, [r4, #8]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2109      	movs	r1, #9
 8000fe2:	f7ff ff7d 	bl	8000ee0 <std>
 8000fe6:	68e0      	ldr	r0, [r4, #12]
 8000fe8:	2202      	movs	r2, #2
 8000fea:	2112      	movs	r1, #18
 8000fec:	f7ff ff78 	bl	8000ee0 <std>
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	61a3      	str	r3, [r4, #24]
 8000ff4:	e7d2      	b.n	8000f9c <__sinit+0xc>
 8000ff6:	bf00      	nop
 8000ff8:	08001b3c 	.word	0x08001b3c
 8000ffc:	08000f29 	.word	0x08000f29

08001000 <__sfp>:
 8001000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001002:	4607      	mov	r7, r0
 8001004:	f7ff ffac 	bl	8000f60 <__sfp_lock_acquire>
 8001008:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <__sfp+0x84>)
 800100a:	681e      	ldr	r6, [r3, #0]
 800100c:	69b3      	ldr	r3, [r6, #24]
 800100e:	b913      	cbnz	r3, 8001016 <__sfp+0x16>
 8001010:	4630      	mov	r0, r6
 8001012:	f7ff ffbd 	bl	8000f90 <__sinit>
 8001016:	3648      	adds	r6, #72	; 0x48
 8001018:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800101c:	3b01      	subs	r3, #1
 800101e:	d503      	bpl.n	8001028 <__sfp+0x28>
 8001020:	6833      	ldr	r3, [r6, #0]
 8001022:	b30b      	cbz	r3, 8001068 <__sfp+0x68>
 8001024:	6836      	ldr	r6, [r6, #0]
 8001026:	e7f7      	b.n	8001018 <__sfp+0x18>
 8001028:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800102c:	b9d5      	cbnz	r5, 8001064 <__sfp+0x64>
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <__sfp+0x88>)
 8001030:	60e3      	str	r3, [r4, #12]
 8001032:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001036:	6665      	str	r5, [r4, #100]	; 0x64
 8001038:	f000 f847 	bl	80010ca <__retarget_lock_init_recursive>
 800103c:	f7ff ff96 	bl	8000f6c <__sfp_lock_release>
 8001040:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001044:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001048:	6025      	str	r5, [r4, #0]
 800104a:	61a5      	str	r5, [r4, #24]
 800104c:	2208      	movs	r2, #8
 800104e:	4629      	mov	r1, r5
 8001050:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001054:	f7ff fd2c 	bl	8000ab0 <memset>
 8001058:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800105c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001060:	4620      	mov	r0, r4
 8001062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001064:	3468      	adds	r4, #104	; 0x68
 8001066:	e7d9      	b.n	800101c <__sfp+0x1c>
 8001068:	2104      	movs	r1, #4
 800106a:	4638      	mov	r0, r7
 800106c:	f7ff ff62 	bl	8000f34 <__sfmoreglue>
 8001070:	4604      	mov	r4, r0
 8001072:	6030      	str	r0, [r6, #0]
 8001074:	2800      	cmp	r0, #0
 8001076:	d1d5      	bne.n	8001024 <__sfp+0x24>
 8001078:	f7ff ff78 	bl	8000f6c <__sfp_lock_release>
 800107c:	230c      	movs	r3, #12
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	e7ee      	b.n	8001060 <__sfp+0x60>
 8001082:	bf00      	nop
 8001084:	08001b3c 	.word	0x08001b3c
 8001088:	ffff0001 	.word	0xffff0001

0800108c <_fwalk_reent>:
 800108c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001090:	4606      	mov	r6, r0
 8001092:	4688      	mov	r8, r1
 8001094:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001098:	2700      	movs	r7, #0
 800109a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800109e:	f1b9 0901 	subs.w	r9, r9, #1
 80010a2:	d505      	bpl.n	80010b0 <_fwalk_reent+0x24>
 80010a4:	6824      	ldr	r4, [r4, #0]
 80010a6:	2c00      	cmp	r4, #0
 80010a8:	d1f7      	bne.n	800109a <_fwalk_reent+0xe>
 80010aa:	4638      	mov	r0, r7
 80010ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010b0:	89ab      	ldrh	r3, [r5, #12]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d907      	bls.n	80010c6 <_fwalk_reent+0x3a>
 80010b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80010ba:	3301      	adds	r3, #1
 80010bc:	d003      	beq.n	80010c6 <_fwalk_reent+0x3a>
 80010be:	4629      	mov	r1, r5
 80010c0:	4630      	mov	r0, r6
 80010c2:	47c0      	blx	r8
 80010c4:	4307      	orrs	r7, r0
 80010c6:	3568      	adds	r5, #104	; 0x68
 80010c8:	e7e9      	b.n	800109e <_fwalk_reent+0x12>

080010ca <__retarget_lock_init_recursive>:
 80010ca:	4770      	bx	lr

080010cc <__retarget_lock_acquire_recursive>:
 80010cc:	4770      	bx	lr

080010ce <__retarget_lock_release_recursive>:
 80010ce:	4770      	bx	lr

080010d0 <__swhatbuf_r>:
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	460e      	mov	r6, r1
 80010d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010d8:	2900      	cmp	r1, #0
 80010da:	b096      	sub	sp, #88	; 0x58
 80010dc:	4614      	mov	r4, r2
 80010de:	461d      	mov	r5, r3
 80010e0:	da08      	bge.n	80010f4 <__swhatbuf_r+0x24>
 80010e2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	602a      	str	r2, [r5, #0]
 80010ea:	061a      	lsls	r2, r3, #24
 80010ec:	d410      	bmi.n	8001110 <__swhatbuf_r+0x40>
 80010ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f2:	e00e      	b.n	8001112 <__swhatbuf_r+0x42>
 80010f4:	466a      	mov	r2, sp
 80010f6:	f000 fc95 	bl	8001a24 <_fstat_r>
 80010fa:	2800      	cmp	r0, #0
 80010fc:	dbf1      	blt.n	80010e2 <__swhatbuf_r+0x12>
 80010fe:	9a01      	ldr	r2, [sp, #4]
 8001100:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001104:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001108:	425a      	negs	r2, r3
 800110a:	415a      	adcs	r2, r3
 800110c:	602a      	str	r2, [r5, #0]
 800110e:	e7ee      	b.n	80010ee <__swhatbuf_r+0x1e>
 8001110:	2340      	movs	r3, #64	; 0x40
 8001112:	2000      	movs	r0, #0
 8001114:	6023      	str	r3, [r4, #0]
 8001116:	b016      	add	sp, #88	; 0x58
 8001118:	bd70      	pop	{r4, r5, r6, pc}
	...

0800111c <__smakebuf_r>:
 800111c:	898b      	ldrh	r3, [r1, #12]
 800111e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001120:	079d      	lsls	r5, r3, #30
 8001122:	4606      	mov	r6, r0
 8001124:	460c      	mov	r4, r1
 8001126:	d507      	bpl.n	8001138 <__smakebuf_r+0x1c>
 8001128:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800112c:	6023      	str	r3, [r4, #0]
 800112e:	6123      	str	r3, [r4, #16]
 8001130:	2301      	movs	r3, #1
 8001132:	6163      	str	r3, [r4, #20]
 8001134:	b002      	add	sp, #8
 8001136:	bd70      	pop	{r4, r5, r6, pc}
 8001138:	ab01      	add	r3, sp, #4
 800113a:	466a      	mov	r2, sp
 800113c:	f7ff ffc8 	bl	80010d0 <__swhatbuf_r>
 8001140:	9900      	ldr	r1, [sp, #0]
 8001142:	4605      	mov	r5, r0
 8001144:	4630      	mov	r0, r6
 8001146:	f000 f895 	bl	8001274 <_malloc_r>
 800114a:	b948      	cbnz	r0, 8001160 <__smakebuf_r+0x44>
 800114c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001150:	059a      	lsls	r2, r3, #22
 8001152:	d4ef      	bmi.n	8001134 <__smakebuf_r+0x18>
 8001154:	f023 0303 	bic.w	r3, r3, #3
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	81a3      	strh	r3, [r4, #12]
 800115e:	e7e3      	b.n	8001128 <__smakebuf_r+0xc>
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <__smakebuf_r+0x7c>)
 8001162:	62b3      	str	r3, [r6, #40]	; 0x28
 8001164:	89a3      	ldrh	r3, [r4, #12]
 8001166:	6020      	str	r0, [r4, #0]
 8001168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116c:	81a3      	strh	r3, [r4, #12]
 800116e:	9b00      	ldr	r3, [sp, #0]
 8001170:	6163      	str	r3, [r4, #20]
 8001172:	9b01      	ldr	r3, [sp, #4]
 8001174:	6120      	str	r0, [r4, #16]
 8001176:	b15b      	cbz	r3, 8001190 <__smakebuf_r+0x74>
 8001178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800117c:	4630      	mov	r0, r6
 800117e:	f000 fc63 	bl	8001a48 <_isatty_r>
 8001182:	b128      	cbz	r0, 8001190 <__smakebuf_r+0x74>
 8001184:	89a3      	ldrh	r3, [r4, #12]
 8001186:	f023 0303 	bic.w	r3, r3, #3
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	81a3      	strh	r3, [r4, #12]
 8001190:	89a0      	ldrh	r0, [r4, #12]
 8001192:	4305      	orrs	r5, r0
 8001194:	81a5      	strh	r5, [r4, #12]
 8001196:	e7cd      	b.n	8001134 <__smakebuf_r+0x18>
 8001198:	08000f29 	.word	0x08000f29

0800119c <_free_r>:
 800119c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800119e:	2900      	cmp	r1, #0
 80011a0:	d044      	beq.n	800122c <_free_r+0x90>
 80011a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011a6:	9001      	str	r0, [sp, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f1a1 0404 	sub.w	r4, r1, #4
 80011ae:	bfb8      	it	lt
 80011b0:	18e4      	addlt	r4, r4, r3
 80011b2:	f000 fc6b 	bl	8001a8c <__malloc_lock>
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <_free_r+0x94>)
 80011b8:	9801      	ldr	r0, [sp, #4]
 80011ba:	6813      	ldr	r3, [r2, #0]
 80011bc:	b933      	cbnz	r3, 80011cc <_free_r+0x30>
 80011be:	6063      	str	r3, [r4, #4]
 80011c0:	6014      	str	r4, [r2, #0]
 80011c2:	b003      	add	sp, #12
 80011c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80011c8:	f000 bc66 	b.w	8001a98 <__malloc_unlock>
 80011cc:	42a3      	cmp	r3, r4
 80011ce:	d908      	bls.n	80011e2 <_free_r+0x46>
 80011d0:	6825      	ldr	r5, [r4, #0]
 80011d2:	1961      	adds	r1, r4, r5
 80011d4:	428b      	cmp	r3, r1
 80011d6:	bf01      	itttt	eq
 80011d8:	6819      	ldreq	r1, [r3, #0]
 80011da:	685b      	ldreq	r3, [r3, #4]
 80011dc:	1949      	addeq	r1, r1, r5
 80011de:	6021      	streq	r1, [r4, #0]
 80011e0:	e7ed      	b.n	80011be <_free_r+0x22>
 80011e2:	461a      	mov	r2, r3
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	b10b      	cbz	r3, 80011ec <_free_r+0x50>
 80011e8:	42a3      	cmp	r3, r4
 80011ea:	d9fa      	bls.n	80011e2 <_free_r+0x46>
 80011ec:	6811      	ldr	r1, [r2, #0]
 80011ee:	1855      	adds	r5, r2, r1
 80011f0:	42a5      	cmp	r5, r4
 80011f2:	d10b      	bne.n	800120c <_free_r+0x70>
 80011f4:	6824      	ldr	r4, [r4, #0]
 80011f6:	4421      	add	r1, r4
 80011f8:	1854      	adds	r4, r2, r1
 80011fa:	42a3      	cmp	r3, r4
 80011fc:	6011      	str	r1, [r2, #0]
 80011fe:	d1e0      	bne.n	80011c2 <_free_r+0x26>
 8001200:	681c      	ldr	r4, [r3, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	6053      	str	r3, [r2, #4]
 8001206:	4421      	add	r1, r4
 8001208:	6011      	str	r1, [r2, #0]
 800120a:	e7da      	b.n	80011c2 <_free_r+0x26>
 800120c:	d902      	bls.n	8001214 <_free_r+0x78>
 800120e:	230c      	movs	r3, #12
 8001210:	6003      	str	r3, [r0, #0]
 8001212:	e7d6      	b.n	80011c2 <_free_r+0x26>
 8001214:	6825      	ldr	r5, [r4, #0]
 8001216:	1961      	adds	r1, r4, r5
 8001218:	428b      	cmp	r3, r1
 800121a:	bf04      	itt	eq
 800121c:	6819      	ldreq	r1, [r3, #0]
 800121e:	685b      	ldreq	r3, [r3, #4]
 8001220:	6063      	str	r3, [r4, #4]
 8001222:	bf04      	itt	eq
 8001224:	1949      	addeq	r1, r1, r5
 8001226:	6021      	streq	r1, [r4, #0]
 8001228:	6054      	str	r4, [r2, #4]
 800122a:	e7ca      	b.n	80011c2 <_free_r+0x26>
 800122c:	b003      	add	sp, #12
 800122e:	bd30      	pop	{r4, r5, pc}
 8001230:	200000b0 	.word	0x200000b0

08001234 <sbrk_aligned>:
 8001234:	b570      	push	{r4, r5, r6, lr}
 8001236:	4e0e      	ldr	r6, [pc, #56]	; (8001270 <sbrk_aligned+0x3c>)
 8001238:	460c      	mov	r4, r1
 800123a:	6831      	ldr	r1, [r6, #0]
 800123c:	4605      	mov	r5, r0
 800123e:	b911      	cbnz	r1, 8001246 <sbrk_aligned+0x12>
 8001240:	f000 fb7a 	bl	8001938 <_sbrk_r>
 8001244:	6030      	str	r0, [r6, #0]
 8001246:	4621      	mov	r1, r4
 8001248:	4628      	mov	r0, r5
 800124a:	f000 fb75 	bl	8001938 <_sbrk_r>
 800124e:	1c43      	adds	r3, r0, #1
 8001250:	d00a      	beq.n	8001268 <sbrk_aligned+0x34>
 8001252:	1cc4      	adds	r4, r0, #3
 8001254:	f024 0403 	bic.w	r4, r4, #3
 8001258:	42a0      	cmp	r0, r4
 800125a:	d007      	beq.n	800126c <sbrk_aligned+0x38>
 800125c:	1a21      	subs	r1, r4, r0
 800125e:	4628      	mov	r0, r5
 8001260:	f000 fb6a 	bl	8001938 <_sbrk_r>
 8001264:	3001      	adds	r0, #1
 8001266:	d101      	bne.n	800126c <sbrk_aligned+0x38>
 8001268:	f04f 34ff 	mov.w	r4, #4294967295
 800126c:	4620      	mov	r0, r4
 800126e:	bd70      	pop	{r4, r5, r6, pc}
 8001270:	200000b4 	.word	0x200000b4

08001274 <_malloc_r>:
 8001274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001278:	1ccd      	adds	r5, r1, #3
 800127a:	f025 0503 	bic.w	r5, r5, #3
 800127e:	3508      	adds	r5, #8
 8001280:	2d0c      	cmp	r5, #12
 8001282:	bf38      	it	cc
 8001284:	250c      	movcc	r5, #12
 8001286:	2d00      	cmp	r5, #0
 8001288:	4607      	mov	r7, r0
 800128a:	db01      	blt.n	8001290 <_malloc_r+0x1c>
 800128c:	42a9      	cmp	r1, r5
 800128e:	d905      	bls.n	800129c <_malloc_r+0x28>
 8001290:	230c      	movs	r3, #12
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	2600      	movs	r6, #0
 8001296:	4630      	mov	r0, r6
 8001298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800129c:	4e2e      	ldr	r6, [pc, #184]	; (8001358 <_malloc_r+0xe4>)
 800129e:	f000 fbf5 	bl	8001a8c <__malloc_lock>
 80012a2:	6833      	ldr	r3, [r6, #0]
 80012a4:	461c      	mov	r4, r3
 80012a6:	bb34      	cbnz	r4, 80012f6 <_malloc_r+0x82>
 80012a8:	4629      	mov	r1, r5
 80012aa:	4638      	mov	r0, r7
 80012ac:	f7ff ffc2 	bl	8001234 <sbrk_aligned>
 80012b0:	1c43      	adds	r3, r0, #1
 80012b2:	4604      	mov	r4, r0
 80012b4:	d14d      	bne.n	8001352 <_malloc_r+0xde>
 80012b6:	6834      	ldr	r4, [r6, #0]
 80012b8:	4626      	mov	r6, r4
 80012ba:	2e00      	cmp	r6, #0
 80012bc:	d140      	bne.n	8001340 <_malloc_r+0xcc>
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	4631      	mov	r1, r6
 80012c2:	4638      	mov	r0, r7
 80012c4:	eb04 0803 	add.w	r8, r4, r3
 80012c8:	f000 fb36 	bl	8001938 <_sbrk_r>
 80012cc:	4580      	cmp	r8, r0
 80012ce:	d13a      	bne.n	8001346 <_malloc_r+0xd2>
 80012d0:	6821      	ldr	r1, [r4, #0]
 80012d2:	3503      	adds	r5, #3
 80012d4:	1a6d      	subs	r5, r5, r1
 80012d6:	f025 0503 	bic.w	r5, r5, #3
 80012da:	3508      	adds	r5, #8
 80012dc:	2d0c      	cmp	r5, #12
 80012de:	bf38      	it	cc
 80012e0:	250c      	movcc	r5, #12
 80012e2:	4629      	mov	r1, r5
 80012e4:	4638      	mov	r0, r7
 80012e6:	f7ff ffa5 	bl	8001234 <sbrk_aligned>
 80012ea:	3001      	adds	r0, #1
 80012ec:	d02b      	beq.n	8001346 <_malloc_r+0xd2>
 80012ee:	6823      	ldr	r3, [r4, #0]
 80012f0:	442b      	add	r3, r5
 80012f2:	6023      	str	r3, [r4, #0]
 80012f4:	e00e      	b.n	8001314 <_malloc_r+0xa0>
 80012f6:	6822      	ldr	r2, [r4, #0]
 80012f8:	1b52      	subs	r2, r2, r5
 80012fa:	d41e      	bmi.n	800133a <_malloc_r+0xc6>
 80012fc:	2a0b      	cmp	r2, #11
 80012fe:	d916      	bls.n	800132e <_malloc_r+0xba>
 8001300:	1961      	adds	r1, r4, r5
 8001302:	42a3      	cmp	r3, r4
 8001304:	6025      	str	r5, [r4, #0]
 8001306:	bf18      	it	ne
 8001308:	6059      	strne	r1, [r3, #4]
 800130a:	6863      	ldr	r3, [r4, #4]
 800130c:	bf08      	it	eq
 800130e:	6031      	streq	r1, [r6, #0]
 8001310:	5162      	str	r2, [r4, r5]
 8001312:	604b      	str	r3, [r1, #4]
 8001314:	4638      	mov	r0, r7
 8001316:	f104 060b 	add.w	r6, r4, #11
 800131a:	f000 fbbd 	bl	8001a98 <__malloc_unlock>
 800131e:	f026 0607 	bic.w	r6, r6, #7
 8001322:	1d23      	adds	r3, r4, #4
 8001324:	1af2      	subs	r2, r6, r3
 8001326:	d0b6      	beq.n	8001296 <_malloc_r+0x22>
 8001328:	1b9b      	subs	r3, r3, r6
 800132a:	50a3      	str	r3, [r4, r2]
 800132c:	e7b3      	b.n	8001296 <_malloc_r+0x22>
 800132e:	6862      	ldr	r2, [r4, #4]
 8001330:	42a3      	cmp	r3, r4
 8001332:	bf0c      	ite	eq
 8001334:	6032      	streq	r2, [r6, #0]
 8001336:	605a      	strne	r2, [r3, #4]
 8001338:	e7ec      	b.n	8001314 <_malloc_r+0xa0>
 800133a:	4623      	mov	r3, r4
 800133c:	6864      	ldr	r4, [r4, #4]
 800133e:	e7b2      	b.n	80012a6 <_malloc_r+0x32>
 8001340:	4634      	mov	r4, r6
 8001342:	6876      	ldr	r6, [r6, #4]
 8001344:	e7b9      	b.n	80012ba <_malloc_r+0x46>
 8001346:	230c      	movs	r3, #12
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4638      	mov	r0, r7
 800134c:	f000 fba4 	bl	8001a98 <__malloc_unlock>
 8001350:	e7a1      	b.n	8001296 <_malloc_r+0x22>
 8001352:	6025      	str	r5, [r4, #0]
 8001354:	e7de      	b.n	8001314 <_malloc_r+0xa0>
 8001356:	bf00      	nop
 8001358:	200000b0 	.word	0x200000b0

0800135c <__sfputc_r>:
 800135c:	6893      	ldr	r3, [r2, #8]
 800135e:	3b01      	subs	r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	b410      	push	{r4}
 8001364:	6093      	str	r3, [r2, #8]
 8001366:	da08      	bge.n	800137a <__sfputc_r+0x1e>
 8001368:	6994      	ldr	r4, [r2, #24]
 800136a:	42a3      	cmp	r3, r4
 800136c:	db01      	blt.n	8001372 <__sfputc_r+0x16>
 800136e:	290a      	cmp	r1, #10
 8001370:	d103      	bne.n	800137a <__sfputc_r+0x1e>
 8001372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001376:	f7ff bc31 	b.w	8000bdc <__swbuf_r>
 800137a:	6813      	ldr	r3, [r2, #0]
 800137c:	1c58      	adds	r0, r3, #1
 800137e:	6010      	str	r0, [r2, #0]
 8001380:	7019      	strb	r1, [r3, #0]
 8001382:	4608      	mov	r0, r1
 8001384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001388:	4770      	bx	lr

0800138a <__sfputs_r>:
 800138a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138c:	4606      	mov	r6, r0
 800138e:	460f      	mov	r7, r1
 8001390:	4614      	mov	r4, r2
 8001392:	18d5      	adds	r5, r2, r3
 8001394:	42ac      	cmp	r4, r5
 8001396:	d101      	bne.n	800139c <__sfputs_r+0x12>
 8001398:	2000      	movs	r0, #0
 800139a:	e007      	b.n	80013ac <__sfputs_r+0x22>
 800139c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013a0:	463a      	mov	r2, r7
 80013a2:	4630      	mov	r0, r6
 80013a4:	f7ff ffda 	bl	800135c <__sfputc_r>
 80013a8:	1c43      	adds	r3, r0, #1
 80013aa:	d1f3      	bne.n	8001394 <__sfputs_r+0xa>
 80013ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080013b0 <_vfiprintf_r>:
 80013b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b4:	460d      	mov	r5, r1
 80013b6:	b09d      	sub	sp, #116	; 0x74
 80013b8:	4614      	mov	r4, r2
 80013ba:	4698      	mov	r8, r3
 80013bc:	4606      	mov	r6, r0
 80013be:	b118      	cbz	r0, 80013c8 <_vfiprintf_r+0x18>
 80013c0:	6983      	ldr	r3, [r0, #24]
 80013c2:	b90b      	cbnz	r3, 80013c8 <_vfiprintf_r+0x18>
 80013c4:	f7ff fde4 	bl	8000f90 <__sinit>
 80013c8:	4b89      	ldr	r3, [pc, #548]	; (80015f0 <_vfiprintf_r+0x240>)
 80013ca:	429d      	cmp	r5, r3
 80013cc:	d11b      	bne.n	8001406 <_vfiprintf_r+0x56>
 80013ce:	6875      	ldr	r5, [r6, #4]
 80013d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80013d2:	07d9      	lsls	r1, r3, #31
 80013d4:	d405      	bmi.n	80013e2 <_vfiprintf_r+0x32>
 80013d6:	89ab      	ldrh	r3, [r5, #12]
 80013d8:	059a      	lsls	r2, r3, #22
 80013da:	d402      	bmi.n	80013e2 <_vfiprintf_r+0x32>
 80013dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80013de:	f7ff fe75 	bl	80010cc <__retarget_lock_acquire_recursive>
 80013e2:	89ab      	ldrh	r3, [r5, #12]
 80013e4:	071b      	lsls	r3, r3, #28
 80013e6:	d501      	bpl.n	80013ec <_vfiprintf_r+0x3c>
 80013e8:	692b      	ldr	r3, [r5, #16]
 80013ea:	b9eb      	cbnz	r3, 8001428 <_vfiprintf_r+0x78>
 80013ec:	4629      	mov	r1, r5
 80013ee:	4630      	mov	r0, r6
 80013f0:	f7ff fc46 	bl	8000c80 <__swsetup_r>
 80013f4:	b1c0      	cbz	r0, 8001428 <_vfiprintf_r+0x78>
 80013f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80013f8:	07dc      	lsls	r4, r3, #31
 80013fa:	d50e      	bpl.n	800141a <_vfiprintf_r+0x6a>
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	b01d      	add	sp, #116	; 0x74
 8001402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001406:	4b7b      	ldr	r3, [pc, #492]	; (80015f4 <_vfiprintf_r+0x244>)
 8001408:	429d      	cmp	r5, r3
 800140a:	d101      	bne.n	8001410 <_vfiprintf_r+0x60>
 800140c:	68b5      	ldr	r5, [r6, #8]
 800140e:	e7df      	b.n	80013d0 <_vfiprintf_r+0x20>
 8001410:	4b79      	ldr	r3, [pc, #484]	; (80015f8 <_vfiprintf_r+0x248>)
 8001412:	429d      	cmp	r5, r3
 8001414:	bf08      	it	eq
 8001416:	68f5      	ldreq	r5, [r6, #12]
 8001418:	e7da      	b.n	80013d0 <_vfiprintf_r+0x20>
 800141a:	89ab      	ldrh	r3, [r5, #12]
 800141c:	0598      	lsls	r0, r3, #22
 800141e:	d4ed      	bmi.n	80013fc <_vfiprintf_r+0x4c>
 8001420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001422:	f7ff fe54 	bl	80010ce <__retarget_lock_release_recursive>
 8001426:	e7e9      	b.n	80013fc <_vfiprintf_r+0x4c>
 8001428:	2300      	movs	r3, #0
 800142a:	9309      	str	r3, [sp, #36]	; 0x24
 800142c:	2320      	movs	r3, #32
 800142e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001432:	f8cd 800c 	str.w	r8, [sp, #12]
 8001436:	2330      	movs	r3, #48	; 0x30
 8001438:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80015fc <_vfiprintf_r+0x24c>
 800143c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001440:	f04f 0901 	mov.w	r9, #1
 8001444:	4623      	mov	r3, r4
 8001446:	469a      	mov	sl, r3
 8001448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800144c:	b10a      	cbz	r2, 8001452 <_vfiprintf_r+0xa2>
 800144e:	2a25      	cmp	r2, #37	; 0x25
 8001450:	d1f9      	bne.n	8001446 <_vfiprintf_r+0x96>
 8001452:	ebba 0b04 	subs.w	fp, sl, r4
 8001456:	d00b      	beq.n	8001470 <_vfiprintf_r+0xc0>
 8001458:	465b      	mov	r3, fp
 800145a:	4622      	mov	r2, r4
 800145c:	4629      	mov	r1, r5
 800145e:	4630      	mov	r0, r6
 8001460:	f7ff ff93 	bl	800138a <__sfputs_r>
 8001464:	3001      	adds	r0, #1
 8001466:	f000 80aa 	beq.w	80015be <_vfiprintf_r+0x20e>
 800146a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800146c:	445a      	add	r2, fp
 800146e:	9209      	str	r2, [sp, #36]	; 0x24
 8001470:	f89a 3000 	ldrb.w	r3, [sl]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a2 	beq.w	80015be <_vfiprintf_r+0x20e>
 800147a:	2300      	movs	r3, #0
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001484:	f10a 0a01 	add.w	sl, sl, #1
 8001488:	9304      	str	r3, [sp, #16]
 800148a:	9307      	str	r3, [sp, #28]
 800148c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001490:	931a      	str	r3, [sp, #104]	; 0x68
 8001492:	4654      	mov	r4, sl
 8001494:	2205      	movs	r2, #5
 8001496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800149a:	4858      	ldr	r0, [pc, #352]	; (80015fc <_vfiprintf_r+0x24c>)
 800149c:	f7fe fea8 	bl	80001f0 <memchr>
 80014a0:	9a04      	ldr	r2, [sp, #16]
 80014a2:	b9d8      	cbnz	r0, 80014dc <_vfiprintf_r+0x12c>
 80014a4:	06d1      	lsls	r1, r2, #27
 80014a6:	bf44      	itt	mi
 80014a8:	2320      	movmi	r3, #32
 80014aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014ae:	0713      	lsls	r3, r2, #28
 80014b0:	bf44      	itt	mi
 80014b2:	232b      	movmi	r3, #43	; 0x2b
 80014b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80014b8:	f89a 3000 	ldrb.w	r3, [sl]
 80014bc:	2b2a      	cmp	r3, #42	; 0x2a
 80014be:	d015      	beq.n	80014ec <_vfiprintf_r+0x13c>
 80014c0:	9a07      	ldr	r2, [sp, #28]
 80014c2:	4654      	mov	r4, sl
 80014c4:	2000      	movs	r0, #0
 80014c6:	f04f 0c0a 	mov.w	ip, #10
 80014ca:	4621      	mov	r1, r4
 80014cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80014d0:	3b30      	subs	r3, #48	; 0x30
 80014d2:	2b09      	cmp	r3, #9
 80014d4:	d94e      	bls.n	8001574 <_vfiprintf_r+0x1c4>
 80014d6:	b1b0      	cbz	r0, 8001506 <_vfiprintf_r+0x156>
 80014d8:	9207      	str	r2, [sp, #28]
 80014da:	e014      	b.n	8001506 <_vfiprintf_r+0x156>
 80014dc:	eba0 0308 	sub.w	r3, r0, r8
 80014e0:	fa09 f303 	lsl.w	r3, r9, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	9304      	str	r3, [sp, #16]
 80014e8:	46a2      	mov	sl, r4
 80014ea:	e7d2      	b.n	8001492 <_vfiprintf_r+0xe2>
 80014ec:	9b03      	ldr	r3, [sp, #12]
 80014ee:	1d19      	adds	r1, r3, #4
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	9103      	str	r1, [sp, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	bfbb      	ittet	lt
 80014f8:	425b      	neglt	r3, r3
 80014fa:	f042 0202 	orrlt.w	r2, r2, #2
 80014fe:	9307      	strge	r3, [sp, #28]
 8001500:	9307      	strlt	r3, [sp, #28]
 8001502:	bfb8      	it	lt
 8001504:	9204      	strlt	r2, [sp, #16]
 8001506:	7823      	ldrb	r3, [r4, #0]
 8001508:	2b2e      	cmp	r3, #46	; 0x2e
 800150a:	d10c      	bne.n	8001526 <_vfiprintf_r+0x176>
 800150c:	7863      	ldrb	r3, [r4, #1]
 800150e:	2b2a      	cmp	r3, #42	; 0x2a
 8001510:	d135      	bne.n	800157e <_vfiprintf_r+0x1ce>
 8001512:	9b03      	ldr	r3, [sp, #12]
 8001514:	1d1a      	adds	r2, r3, #4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	9203      	str	r2, [sp, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	bfb8      	it	lt
 800151e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001522:	3402      	adds	r4, #2
 8001524:	9305      	str	r3, [sp, #20]
 8001526:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800160c <_vfiprintf_r+0x25c>
 800152a:	7821      	ldrb	r1, [r4, #0]
 800152c:	2203      	movs	r2, #3
 800152e:	4650      	mov	r0, sl
 8001530:	f7fe fe5e 	bl	80001f0 <memchr>
 8001534:	b140      	cbz	r0, 8001548 <_vfiprintf_r+0x198>
 8001536:	2340      	movs	r3, #64	; 0x40
 8001538:	eba0 000a 	sub.w	r0, r0, sl
 800153c:	fa03 f000 	lsl.w	r0, r3, r0
 8001540:	9b04      	ldr	r3, [sp, #16]
 8001542:	4303      	orrs	r3, r0
 8001544:	3401      	adds	r4, #1
 8001546:	9304      	str	r3, [sp, #16]
 8001548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800154c:	482c      	ldr	r0, [pc, #176]	; (8001600 <_vfiprintf_r+0x250>)
 800154e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001552:	2206      	movs	r2, #6
 8001554:	f7fe fe4c 	bl	80001f0 <memchr>
 8001558:	2800      	cmp	r0, #0
 800155a:	d03f      	beq.n	80015dc <_vfiprintf_r+0x22c>
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <_vfiprintf_r+0x254>)
 800155e:	bb1b      	cbnz	r3, 80015a8 <_vfiprintf_r+0x1f8>
 8001560:	9b03      	ldr	r3, [sp, #12]
 8001562:	3307      	adds	r3, #7
 8001564:	f023 0307 	bic.w	r3, r3, #7
 8001568:	3308      	adds	r3, #8
 800156a:	9303      	str	r3, [sp, #12]
 800156c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800156e:	443b      	add	r3, r7
 8001570:	9309      	str	r3, [sp, #36]	; 0x24
 8001572:	e767      	b.n	8001444 <_vfiprintf_r+0x94>
 8001574:	fb0c 3202 	mla	r2, ip, r2, r3
 8001578:	460c      	mov	r4, r1
 800157a:	2001      	movs	r0, #1
 800157c:	e7a5      	b.n	80014ca <_vfiprintf_r+0x11a>
 800157e:	2300      	movs	r3, #0
 8001580:	3401      	adds	r4, #1
 8001582:	9305      	str	r3, [sp, #20]
 8001584:	4619      	mov	r1, r3
 8001586:	f04f 0c0a 	mov.w	ip, #10
 800158a:	4620      	mov	r0, r4
 800158c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001590:	3a30      	subs	r2, #48	; 0x30
 8001592:	2a09      	cmp	r2, #9
 8001594:	d903      	bls.n	800159e <_vfiprintf_r+0x1ee>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0c5      	beq.n	8001526 <_vfiprintf_r+0x176>
 800159a:	9105      	str	r1, [sp, #20]
 800159c:	e7c3      	b.n	8001526 <_vfiprintf_r+0x176>
 800159e:	fb0c 2101 	mla	r1, ip, r1, r2
 80015a2:	4604      	mov	r4, r0
 80015a4:	2301      	movs	r3, #1
 80015a6:	e7f0      	b.n	800158a <_vfiprintf_r+0x1da>
 80015a8:	ab03      	add	r3, sp, #12
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	462a      	mov	r2, r5
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <_vfiprintf_r+0x258>)
 80015b0:	a904      	add	r1, sp, #16
 80015b2:	4630      	mov	r0, r6
 80015b4:	f3af 8000 	nop.w
 80015b8:	4607      	mov	r7, r0
 80015ba:	1c78      	adds	r0, r7, #1
 80015bc:	d1d6      	bne.n	800156c <_vfiprintf_r+0x1bc>
 80015be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80015c0:	07d9      	lsls	r1, r3, #31
 80015c2:	d405      	bmi.n	80015d0 <_vfiprintf_r+0x220>
 80015c4:	89ab      	ldrh	r3, [r5, #12]
 80015c6:	059a      	lsls	r2, r3, #22
 80015c8:	d402      	bmi.n	80015d0 <_vfiprintf_r+0x220>
 80015ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80015cc:	f7ff fd7f 	bl	80010ce <__retarget_lock_release_recursive>
 80015d0:	89ab      	ldrh	r3, [r5, #12]
 80015d2:	065b      	lsls	r3, r3, #25
 80015d4:	f53f af12 	bmi.w	80013fc <_vfiprintf_r+0x4c>
 80015d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80015da:	e711      	b.n	8001400 <_vfiprintf_r+0x50>
 80015dc:	ab03      	add	r3, sp, #12
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	462a      	mov	r2, r5
 80015e2:	4b09      	ldr	r3, [pc, #36]	; (8001608 <_vfiprintf_r+0x258>)
 80015e4:	a904      	add	r1, sp, #16
 80015e6:	4630      	mov	r0, r6
 80015e8:	f000 f880 	bl	80016ec <_printf_i>
 80015ec:	e7e4      	b.n	80015b8 <_vfiprintf_r+0x208>
 80015ee:	bf00      	nop
 80015f0:	08001b60 	.word	0x08001b60
 80015f4:	08001b80 	.word	0x08001b80
 80015f8:	08001b40 	.word	0x08001b40
 80015fc:	08001ba0 	.word	0x08001ba0
 8001600:	08001baa 	.word	0x08001baa
 8001604:	00000000 	.word	0x00000000
 8001608:	0800138b 	.word	0x0800138b
 800160c:	08001ba6 	.word	0x08001ba6

08001610 <_printf_common>:
 8001610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001614:	4616      	mov	r6, r2
 8001616:	4699      	mov	r9, r3
 8001618:	688a      	ldr	r2, [r1, #8]
 800161a:	690b      	ldr	r3, [r1, #16]
 800161c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001620:	4293      	cmp	r3, r2
 8001622:	bfb8      	it	lt
 8001624:	4613      	movlt	r3, r2
 8001626:	6033      	str	r3, [r6, #0]
 8001628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800162c:	4607      	mov	r7, r0
 800162e:	460c      	mov	r4, r1
 8001630:	b10a      	cbz	r2, 8001636 <_printf_common+0x26>
 8001632:	3301      	adds	r3, #1
 8001634:	6033      	str	r3, [r6, #0]
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	0699      	lsls	r1, r3, #26
 800163a:	bf42      	ittt	mi
 800163c:	6833      	ldrmi	r3, [r6, #0]
 800163e:	3302      	addmi	r3, #2
 8001640:	6033      	strmi	r3, [r6, #0]
 8001642:	6825      	ldr	r5, [r4, #0]
 8001644:	f015 0506 	ands.w	r5, r5, #6
 8001648:	d106      	bne.n	8001658 <_printf_common+0x48>
 800164a:	f104 0a19 	add.w	sl, r4, #25
 800164e:	68e3      	ldr	r3, [r4, #12]
 8001650:	6832      	ldr	r2, [r6, #0]
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	42ab      	cmp	r3, r5
 8001656:	dc26      	bgt.n	80016a6 <_printf_common+0x96>
 8001658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800165c:	1e13      	subs	r3, r2, #0
 800165e:	6822      	ldr	r2, [r4, #0]
 8001660:	bf18      	it	ne
 8001662:	2301      	movne	r3, #1
 8001664:	0692      	lsls	r2, r2, #26
 8001666:	d42b      	bmi.n	80016c0 <_printf_common+0xb0>
 8001668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800166c:	4649      	mov	r1, r9
 800166e:	4638      	mov	r0, r7
 8001670:	47c0      	blx	r8
 8001672:	3001      	adds	r0, #1
 8001674:	d01e      	beq.n	80016b4 <_printf_common+0xa4>
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	68e5      	ldr	r5, [r4, #12]
 800167a:	6832      	ldr	r2, [r6, #0]
 800167c:	f003 0306 	and.w	r3, r3, #6
 8001680:	2b04      	cmp	r3, #4
 8001682:	bf08      	it	eq
 8001684:	1aad      	subeq	r5, r5, r2
 8001686:	68a3      	ldr	r3, [r4, #8]
 8001688:	6922      	ldr	r2, [r4, #16]
 800168a:	bf0c      	ite	eq
 800168c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001690:	2500      	movne	r5, #0
 8001692:	4293      	cmp	r3, r2
 8001694:	bfc4      	itt	gt
 8001696:	1a9b      	subgt	r3, r3, r2
 8001698:	18ed      	addgt	r5, r5, r3
 800169a:	2600      	movs	r6, #0
 800169c:	341a      	adds	r4, #26
 800169e:	42b5      	cmp	r5, r6
 80016a0:	d11a      	bne.n	80016d8 <_printf_common+0xc8>
 80016a2:	2000      	movs	r0, #0
 80016a4:	e008      	b.n	80016b8 <_printf_common+0xa8>
 80016a6:	2301      	movs	r3, #1
 80016a8:	4652      	mov	r2, sl
 80016aa:	4649      	mov	r1, r9
 80016ac:	4638      	mov	r0, r7
 80016ae:	47c0      	blx	r8
 80016b0:	3001      	adds	r0, #1
 80016b2:	d103      	bne.n	80016bc <_printf_common+0xac>
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016bc:	3501      	adds	r5, #1
 80016be:	e7c6      	b.n	800164e <_printf_common+0x3e>
 80016c0:	18e1      	adds	r1, r4, r3
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	2030      	movs	r0, #48	; 0x30
 80016c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016ca:	4422      	add	r2, r4
 80016cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016d4:	3302      	adds	r3, #2
 80016d6:	e7c7      	b.n	8001668 <_printf_common+0x58>
 80016d8:	2301      	movs	r3, #1
 80016da:	4622      	mov	r2, r4
 80016dc:	4649      	mov	r1, r9
 80016de:	4638      	mov	r0, r7
 80016e0:	47c0      	blx	r8
 80016e2:	3001      	adds	r0, #1
 80016e4:	d0e6      	beq.n	80016b4 <_printf_common+0xa4>
 80016e6:	3601      	adds	r6, #1
 80016e8:	e7d9      	b.n	800169e <_printf_common+0x8e>
	...

080016ec <_printf_i>:
 80016ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80016f0:	7e0f      	ldrb	r7, [r1, #24]
 80016f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80016f4:	2f78      	cmp	r7, #120	; 0x78
 80016f6:	4691      	mov	r9, r2
 80016f8:	4680      	mov	r8, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	469a      	mov	sl, r3
 80016fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001702:	d807      	bhi.n	8001714 <_printf_i+0x28>
 8001704:	2f62      	cmp	r7, #98	; 0x62
 8001706:	d80a      	bhi.n	800171e <_printf_i+0x32>
 8001708:	2f00      	cmp	r7, #0
 800170a:	f000 80d8 	beq.w	80018be <_printf_i+0x1d2>
 800170e:	2f58      	cmp	r7, #88	; 0x58
 8001710:	f000 80a3 	beq.w	800185a <_printf_i+0x16e>
 8001714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800171c:	e03a      	b.n	8001794 <_printf_i+0xa8>
 800171e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001722:	2b15      	cmp	r3, #21
 8001724:	d8f6      	bhi.n	8001714 <_printf_i+0x28>
 8001726:	a101      	add	r1, pc, #4	; (adr r1, 800172c <_printf_i+0x40>)
 8001728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800172c:	08001785 	.word	0x08001785
 8001730:	08001799 	.word	0x08001799
 8001734:	08001715 	.word	0x08001715
 8001738:	08001715 	.word	0x08001715
 800173c:	08001715 	.word	0x08001715
 8001740:	08001715 	.word	0x08001715
 8001744:	08001799 	.word	0x08001799
 8001748:	08001715 	.word	0x08001715
 800174c:	08001715 	.word	0x08001715
 8001750:	08001715 	.word	0x08001715
 8001754:	08001715 	.word	0x08001715
 8001758:	080018a5 	.word	0x080018a5
 800175c:	080017c9 	.word	0x080017c9
 8001760:	08001887 	.word	0x08001887
 8001764:	08001715 	.word	0x08001715
 8001768:	08001715 	.word	0x08001715
 800176c:	080018c7 	.word	0x080018c7
 8001770:	08001715 	.word	0x08001715
 8001774:	080017c9 	.word	0x080017c9
 8001778:	08001715 	.word	0x08001715
 800177c:	08001715 	.word	0x08001715
 8001780:	0800188f 	.word	0x0800188f
 8001784:	682b      	ldr	r3, [r5, #0]
 8001786:	1d1a      	adds	r2, r3, #4
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	602a      	str	r2, [r5, #0]
 800178c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001794:	2301      	movs	r3, #1
 8001796:	e0a3      	b.n	80018e0 <_printf_i+0x1f4>
 8001798:	6820      	ldr	r0, [r4, #0]
 800179a:	6829      	ldr	r1, [r5, #0]
 800179c:	0606      	lsls	r6, r0, #24
 800179e:	f101 0304 	add.w	r3, r1, #4
 80017a2:	d50a      	bpl.n	80017ba <_printf_i+0xce>
 80017a4:	680e      	ldr	r6, [r1, #0]
 80017a6:	602b      	str	r3, [r5, #0]
 80017a8:	2e00      	cmp	r6, #0
 80017aa:	da03      	bge.n	80017b4 <_printf_i+0xc8>
 80017ac:	232d      	movs	r3, #45	; 0x2d
 80017ae:	4276      	negs	r6, r6
 80017b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017b4:	485e      	ldr	r0, [pc, #376]	; (8001930 <_printf_i+0x244>)
 80017b6:	230a      	movs	r3, #10
 80017b8:	e019      	b.n	80017ee <_printf_i+0x102>
 80017ba:	680e      	ldr	r6, [r1, #0]
 80017bc:	602b      	str	r3, [r5, #0]
 80017be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80017c2:	bf18      	it	ne
 80017c4:	b236      	sxthne	r6, r6
 80017c6:	e7ef      	b.n	80017a8 <_printf_i+0xbc>
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	6820      	ldr	r0, [r4, #0]
 80017cc:	1d19      	adds	r1, r3, #4
 80017ce:	6029      	str	r1, [r5, #0]
 80017d0:	0601      	lsls	r1, r0, #24
 80017d2:	d501      	bpl.n	80017d8 <_printf_i+0xec>
 80017d4:	681e      	ldr	r6, [r3, #0]
 80017d6:	e002      	b.n	80017de <_printf_i+0xf2>
 80017d8:	0646      	lsls	r6, r0, #25
 80017da:	d5fb      	bpl.n	80017d4 <_printf_i+0xe8>
 80017dc:	881e      	ldrh	r6, [r3, #0]
 80017de:	4854      	ldr	r0, [pc, #336]	; (8001930 <_printf_i+0x244>)
 80017e0:	2f6f      	cmp	r7, #111	; 0x6f
 80017e2:	bf0c      	ite	eq
 80017e4:	2308      	moveq	r3, #8
 80017e6:	230a      	movne	r3, #10
 80017e8:	2100      	movs	r1, #0
 80017ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80017ee:	6865      	ldr	r5, [r4, #4]
 80017f0:	60a5      	str	r5, [r4, #8]
 80017f2:	2d00      	cmp	r5, #0
 80017f4:	bfa2      	ittt	ge
 80017f6:	6821      	ldrge	r1, [r4, #0]
 80017f8:	f021 0104 	bicge.w	r1, r1, #4
 80017fc:	6021      	strge	r1, [r4, #0]
 80017fe:	b90e      	cbnz	r6, 8001804 <_printf_i+0x118>
 8001800:	2d00      	cmp	r5, #0
 8001802:	d04d      	beq.n	80018a0 <_printf_i+0x1b4>
 8001804:	4615      	mov	r5, r2
 8001806:	fbb6 f1f3 	udiv	r1, r6, r3
 800180a:	fb03 6711 	mls	r7, r3, r1, r6
 800180e:	5dc7      	ldrb	r7, [r0, r7]
 8001810:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001814:	4637      	mov	r7, r6
 8001816:	42bb      	cmp	r3, r7
 8001818:	460e      	mov	r6, r1
 800181a:	d9f4      	bls.n	8001806 <_printf_i+0x11a>
 800181c:	2b08      	cmp	r3, #8
 800181e:	d10b      	bne.n	8001838 <_printf_i+0x14c>
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	07de      	lsls	r6, r3, #31
 8001824:	d508      	bpl.n	8001838 <_printf_i+0x14c>
 8001826:	6923      	ldr	r3, [r4, #16]
 8001828:	6861      	ldr	r1, [r4, #4]
 800182a:	4299      	cmp	r1, r3
 800182c:	bfde      	ittt	le
 800182e:	2330      	movle	r3, #48	; 0x30
 8001830:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001834:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001838:	1b52      	subs	r2, r2, r5
 800183a:	6122      	str	r2, [r4, #16]
 800183c:	f8cd a000 	str.w	sl, [sp]
 8001840:	464b      	mov	r3, r9
 8001842:	aa03      	add	r2, sp, #12
 8001844:	4621      	mov	r1, r4
 8001846:	4640      	mov	r0, r8
 8001848:	f7ff fee2 	bl	8001610 <_printf_common>
 800184c:	3001      	adds	r0, #1
 800184e:	d14c      	bne.n	80018ea <_printf_i+0x1fe>
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	b004      	add	sp, #16
 8001856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800185a:	4835      	ldr	r0, [pc, #212]	; (8001930 <_printf_i+0x244>)
 800185c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001860:	6829      	ldr	r1, [r5, #0]
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	f851 6b04 	ldr.w	r6, [r1], #4
 8001868:	6029      	str	r1, [r5, #0]
 800186a:	061d      	lsls	r5, r3, #24
 800186c:	d514      	bpl.n	8001898 <_printf_i+0x1ac>
 800186e:	07df      	lsls	r7, r3, #31
 8001870:	bf44      	itt	mi
 8001872:	f043 0320 	orrmi.w	r3, r3, #32
 8001876:	6023      	strmi	r3, [r4, #0]
 8001878:	b91e      	cbnz	r6, 8001882 <_printf_i+0x196>
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	f023 0320 	bic.w	r3, r3, #32
 8001880:	6023      	str	r3, [r4, #0]
 8001882:	2310      	movs	r3, #16
 8001884:	e7b0      	b.n	80017e8 <_printf_i+0xfc>
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	f043 0320 	orr.w	r3, r3, #32
 800188c:	6023      	str	r3, [r4, #0]
 800188e:	2378      	movs	r3, #120	; 0x78
 8001890:	4828      	ldr	r0, [pc, #160]	; (8001934 <_printf_i+0x248>)
 8001892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001896:	e7e3      	b.n	8001860 <_printf_i+0x174>
 8001898:	0659      	lsls	r1, r3, #25
 800189a:	bf48      	it	mi
 800189c:	b2b6      	uxthmi	r6, r6
 800189e:	e7e6      	b.n	800186e <_printf_i+0x182>
 80018a0:	4615      	mov	r5, r2
 80018a2:	e7bb      	b.n	800181c <_printf_i+0x130>
 80018a4:	682b      	ldr	r3, [r5, #0]
 80018a6:	6826      	ldr	r6, [r4, #0]
 80018a8:	6961      	ldr	r1, [r4, #20]
 80018aa:	1d18      	adds	r0, r3, #4
 80018ac:	6028      	str	r0, [r5, #0]
 80018ae:	0635      	lsls	r5, r6, #24
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	d501      	bpl.n	80018b8 <_printf_i+0x1cc>
 80018b4:	6019      	str	r1, [r3, #0]
 80018b6:	e002      	b.n	80018be <_printf_i+0x1d2>
 80018b8:	0670      	lsls	r0, r6, #25
 80018ba:	d5fb      	bpl.n	80018b4 <_printf_i+0x1c8>
 80018bc:	8019      	strh	r1, [r3, #0]
 80018be:	2300      	movs	r3, #0
 80018c0:	6123      	str	r3, [r4, #16]
 80018c2:	4615      	mov	r5, r2
 80018c4:	e7ba      	b.n	800183c <_printf_i+0x150>
 80018c6:	682b      	ldr	r3, [r5, #0]
 80018c8:	1d1a      	adds	r2, r3, #4
 80018ca:	602a      	str	r2, [r5, #0]
 80018cc:	681d      	ldr	r5, [r3, #0]
 80018ce:	6862      	ldr	r2, [r4, #4]
 80018d0:	2100      	movs	r1, #0
 80018d2:	4628      	mov	r0, r5
 80018d4:	f7fe fc8c 	bl	80001f0 <memchr>
 80018d8:	b108      	cbz	r0, 80018de <_printf_i+0x1f2>
 80018da:	1b40      	subs	r0, r0, r5
 80018dc:	6060      	str	r0, [r4, #4]
 80018de:	6863      	ldr	r3, [r4, #4]
 80018e0:	6123      	str	r3, [r4, #16]
 80018e2:	2300      	movs	r3, #0
 80018e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018e8:	e7a8      	b.n	800183c <_printf_i+0x150>
 80018ea:	6923      	ldr	r3, [r4, #16]
 80018ec:	462a      	mov	r2, r5
 80018ee:	4649      	mov	r1, r9
 80018f0:	4640      	mov	r0, r8
 80018f2:	47d0      	blx	sl
 80018f4:	3001      	adds	r0, #1
 80018f6:	d0ab      	beq.n	8001850 <_printf_i+0x164>
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	079b      	lsls	r3, r3, #30
 80018fc:	d413      	bmi.n	8001926 <_printf_i+0x23a>
 80018fe:	68e0      	ldr	r0, [r4, #12]
 8001900:	9b03      	ldr	r3, [sp, #12]
 8001902:	4298      	cmp	r0, r3
 8001904:	bfb8      	it	lt
 8001906:	4618      	movlt	r0, r3
 8001908:	e7a4      	b.n	8001854 <_printf_i+0x168>
 800190a:	2301      	movs	r3, #1
 800190c:	4632      	mov	r2, r6
 800190e:	4649      	mov	r1, r9
 8001910:	4640      	mov	r0, r8
 8001912:	47d0      	blx	sl
 8001914:	3001      	adds	r0, #1
 8001916:	d09b      	beq.n	8001850 <_printf_i+0x164>
 8001918:	3501      	adds	r5, #1
 800191a:	68e3      	ldr	r3, [r4, #12]
 800191c:	9903      	ldr	r1, [sp, #12]
 800191e:	1a5b      	subs	r3, r3, r1
 8001920:	42ab      	cmp	r3, r5
 8001922:	dcf2      	bgt.n	800190a <_printf_i+0x21e>
 8001924:	e7eb      	b.n	80018fe <_printf_i+0x212>
 8001926:	2500      	movs	r5, #0
 8001928:	f104 0619 	add.w	r6, r4, #25
 800192c:	e7f5      	b.n	800191a <_printf_i+0x22e>
 800192e:	bf00      	nop
 8001930:	08001bb1 	.word	0x08001bb1
 8001934:	08001bc2 	.word	0x08001bc2

08001938 <_sbrk_r>:
 8001938:	b538      	push	{r3, r4, r5, lr}
 800193a:	4d06      	ldr	r5, [pc, #24]	; (8001954 <_sbrk_r+0x1c>)
 800193c:	2300      	movs	r3, #0
 800193e:	4604      	mov	r4, r0
 8001940:	4608      	mov	r0, r1
 8001942:	602b      	str	r3, [r5, #0]
 8001944:	f7fe ff98 	bl	8000878 <_sbrk>
 8001948:	1c43      	adds	r3, r0, #1
 800194a:	d102      	bne.n	8001952 <_sbrk_r+0x1a>
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	b103      	cbz	r3, 8001952 <_sbrk_r+0x1a>
 8001950:	6023      	str	r3, [r4, #0]
 8001952:	bd38      	pop	{r3, r4, r5, pc}
 8001954:	200000b8 	.word	0x200000b8

08001958 <__sread>:
 8001958:	b510      	push	{r4, lr}
 800195a:	460c      	mov	r4, r1
 800195c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001960:	f000 f8a0 	bl	8001aa4 <_read_r>
 8001964:	2800      	cmp	r0, #0
 8001966:	bfab      	itete	ge
 8001968:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800196a:	89a3      	ldrhlt	r3, [r4, #12]
 800196c:	181b      	addge	r3, r3, r0
 800196e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001972:	bfac      	ite	ge
 8001974:	6563      	strge	r3, [r4, #84]	; 0x54
 8001976:	81a3      	strhlt	r3, [r4, #12]
 8001978:	bd10      	pop	{r4, pc}

0800197a <__swrite>:
 800197a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800197e:	461f      	mov	r7, r3
 8001980:	898b      	ldrh	r3, [r1, #12]
 8001982:	05db      	lsls	r3, r3, #23
 8001984:	4605      	mov	r5, r0
 8001986:	460c      	mov	r4, r1
 8001988:	4616      	mov	r6, r2
 800198a:	d505      	bpl.n	8001998 <__swrite+0x1e>
 800198c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001990:	2302      	movs	r3, #2
 8001992:	2200      	movs	r2, #0
 8001994:	f000 f868 	bl	8001a68 <_lseek_r>
 8001998:	89a3      	ldrh	r3, [r4, #12]
 800199a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800199e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019a2:	81a3      	strh	r3, [r4, #12]
 80019a4:	4632      	mov	r2, r6
 80019a6:	463b      	mov	r3, r7
 80019a8:	4628      	mov	r0, r5
 80019aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019ae:	f000 b817 	b.w	80019e0 <_write_r>

080019b2 <__sseek>:
 80019b2:	b510      	push	{r4, lr}
 80019b4:	460c      	mov	r4, r1
 80019b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019ba:	f000 f855 	bl	8001a68 <_lseek_r>
 80019be:	1c43      	adds	r3, r0, #1
 80019c0:	89a3      	ldrh	r3, [r4, #12]
 80019c2:	bf15      	itete	ne
 80019c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80019c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80019ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80019ce:	81a3      	strheq	r3, [r4, #12]
 80019d0:	bf18      	it	ne
 80019d2:	81a3      	strhne	r3, [r4, #12]
 80019d4:	bd10      	pop	{r4, pc}

080019d6 <__sclose>:
 80019d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019da:	f000 b813 	b.w	8001a04 <_close_r>
	...

080019e0 <_write_r>:
 80019e0:	b538      	push	{r3, r4, r5, lr}
 80019e2:	4d07      	ldr	r5, [pc, #28]	; (8001a00 <_write_r+0x20>)
 80019e4:	4604      	mov	r4, r0
 80019e6:	4608      	mov	r0, r1
 80019e8:	4611      	mov	r1, r2
 80019ea:	2200      	movs	r2, #0
 80019ec:	602a      	str	r2, [r5, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f7fe fef1 	bl	80007d6 <_write>
 80019f4:	1c43      	adds	r3, r0, #1
 80019f6:	d102      	bne.n	80019fe <_write_r+0x1e>
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	b103      	cbz	r3, 80019fe <_write_r+0x1e>
 80019fc:	6023      	str	r3, [r4, #0]
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
 8001a00:	200000b8 	.word	0x200000b8

08001a04 <_close_r>:
 8001a04:	b538      	push	{r3, r4, r5, lr}
 8001a06:	4d06      	ldr	r5, [pc, #24]	; (8001a20 <_close_r+0x1c>)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	4604      	mov	r4, r0
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	602b      	str	r3, [r5, #0]
 8001a10:	f7fe fefd 	bl	800080e <_close>
 8001a14:	1c43      	adds	r3, r0, #1
 8001a16:	d102      	bne.n	8001a1e <_close_r+0x1a>
 8001a18:	682b      	ldr	r3, [r5, #0]
 8001a1a:	b103      	cbz	r3, 8001a1e <_close_r+0x1a>
 8001a1c:	6023      	str	r3, [r4, #0]
 8001a1e:	bd38      	pop	{r3, r4, r5, pc}
 8001a20:	200000b8 	.word	0x200000b8

08001a24 <_fstat_r>:
 8001a24:	b538      	push	{r3, r4, r5, lr}
 8001a26:	4d07      	ldr	r5, [pc, #28]	; (8001a44 <_fstat_r+0x20>)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	4604      	mov	r4, r0
 8001a2c:	4608      	mov	r0, r1
 8001a2e:	4611      	mov	r1, r2
 8001a30:	602b      	str	r3, [r5, #0]
 8001a32:	f7fe fef8 	bl	8000826 <_fstat>
 8001a36:	1c43      	adds	r3, r0, #1
 8001a38:	d102      	bne.n	8001a40 <_fstat_r+0x1c>
 8001a3a:	682b      	ldr	r3, [r5, #0]
 8001a3c:	b103      	cbz	r3, 8001a40 <_fstat_r+0x1c>
 8001a3e:	6023      	str	r3, [r4, #0]
 8001a40:	bd38      	pop	{r3, r4, r5, pc}
 8001a42:	bf00      	nop
 8001a44:	200000b8 	.word	0x200000b8

08001a48 <_isatty_r>:
 8001a48:	b538      	push	{r3, r4, r5, lr}
 8001a4a:	4d06      	ldr	r5, [pc, #24]	; (8001a64 <_isatty_r+0x1c>)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	4604      	mov	r4, r0
 8001a50:	4608      	mov	r0, r1
 8001a52:	602b      	str	r3, [r5, #0]
 8001a54:	f7fe fef7 	bl	8000846 <_isatty>
 8001a58:	1c43      	adds	r3, r0, #1
 8001a5a:	d102      	bne.n	8001a62 <_isatty_r+0x1a>
 8001a5c:	682b      	ldr	r3, [r5, #0]
 8001a5e:	b103      	cbz	r3, 8001a62 <_isatty_r+0x1a>
 8001a60:	6023      	str	r3, [r4, #0]
 8001a62:	bd38      	pop	{r3, r4, r5, pc}
 8001a64:	200000b8 	.word	0x200000b8

08001a68 <_lseek_r>:
 8001a68:	b538      	push	{r3, r4, r5, lr}
 8001a6a:	4d07      	ldr	r5, [pc, #28]	; (8001a88 <_lseek_r+0x20>)
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	4608      	mov	r0, r1
 8001a70:	4611      	mov	r1, r2
 8001a72:	2200      	movs	r2, #0
 8001a74:	602a      	str	r2, [r5, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f7fe fef0 	bl	800085c <_lseek>
 8001a7c:	1c43      	adds	r3, r0, #1
 8001a7e:	d102      	bne.n	8001a86 <_lseek_r+0x1e>
 8001a80:	682b      	ldr	r3, [r5, #0]
 8001a82:	b103      	cbz	r3, 8001a86 <_lseek_r+0x1e>
 8001a84:	6023      	str	r3, [r4, #0]
 8001a86:	bd38      	pop	{r3, r4, r5, pc}
 8001a88:	200000b8 	.word	0x200000b8

08001a8c <__malloc_lock>:
 8001a8c:	4801      	ldr	r0, [pc, #4]	; (8001a94 <__malloc_lock+0x8>)
 8001a8e:	f7ff bb1d 	b.w	80010cc <__retarget_lock_acquire_recursive>
 8001a92:	bf00      	nop
 8001a94:	200000ac 	.word	0x200000ac

08001a98 <__malloc_unlock>:
 8001a98:	4801      	ldr	r0, [pc, #4]	; (8001aa0 <__malloc_unlock+0x8>)
 8001a9a:	f7ff bb18 	b.w	80010ce <__retarget_lock_release_recursive>
 8001a9e:	bf00      	nop
 8001aa0:	200000ac 	.word	0x200000ac

08001aa4 <_read_r>:
 8001aa4:	b538      	push	{r3, r4, r5, lr}
 8001aa6:	4d07      	ldr	r5, [pc, #28]	; (8001ac4 <_read_r+0x20>)
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	4608      	mov	r0, r1
 8001aac:	4611      	mov	r1, r2
 8001aae:	2200      	movs	r2, #0
 8001ab0:	602a      	str	r2, [r5, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f7fe fe72 	bl	800079c <_read>
 8001ab8:	1c43      	adds	r3, r0, #1
 8001aba:	d102      	bne.n	8001ac2 <_read_r+0x1e>
 8001abc:	682b      	ldr	r3, [r5, #0]
 8001abe:	b103      	cbz	r3, 8001ac2 <_read_r+0x1e>
 8001ac0:	6023      	str	r3, [r4, #0]
 8001ac2:	bd38      	pop	{r3, r4, r5, pc}
 8001ac4:	200000b8 	.word	0x200000b8

08001ac8 <_init>:
 8001ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aca:	bf00      	nop
 8001acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ace:	bc08      	pop	{r3}
 8001ad0:	469e      	mov	lr, r3
 8001ad2:	4770      	bx	lr

08001ad4 <_fini>:
 8001ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ad6:	bf00      	nop
 8001ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ada:	bc08      	pop	{r3}
 8001adc:	469e      	mov	lr, r3
 8001ade:	4770      	bx	lr
