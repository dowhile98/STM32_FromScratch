
SYSTICK_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080019ac  080019ac  000119ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001aa4  08001aa4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001aa4  08001aa4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001aa4  08001aa4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001aa4  08001aa4  00011aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001aa8  08001aa8  00011aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000060  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c8  200000c8  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001f2f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000961  00000000  00000000  00021fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00022928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000160  00000000  00000000  00022b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a59f  00000000  00000000  00022c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002dfe  00000000  00000000  0003d1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e783  00000000  00000000  0003fffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000ce780  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000d78  00000000  00000000  000ce7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001994 	.word	0x08001994

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08001994 	.word	0x08001994

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ButtonInit>:
 * @param [BT]: Puntero a una estructura que representa el pulsador
 * @param [GPIO]: Puerto donde esta conectado el pulsador
 * @param [pin]: numbero de pin donde esta conectado el pulsador
 * @param [callback]: puntero a la funcion callback
 */
void ButtonInit(Button_t *BT, GPIO_TypeDef *GPIO, uint32_t pin, void (*callback)(void)){
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
 800029c:	603b      	str	r3, [r7, #0]
	BT->GPIO = GPIO;
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	68ba      	ldr	r2, [r7, #8]
 80002a2:	605a      	str	r2, [r3, #4]
	BT->pin = pin;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	721a      	strb	r2, [r3, #8]
	BT->callback = callback;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	683a      	ldr	r2, [r7, #0]
 80002b0:	60da      	str	r2, [r3, #12]
	BT->state = PIN_INIT;
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
	return;
 80002b8:	bf00      	nop
}
 80002ba:	3714      	adds	r7, #20
 80002bc:	46bd      	mov	sp, r7
 80002be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c2:	4770      	bx	lr

080002c4 <ButtonRead>:
/**
 * @brief funcion para verificar el estado del pulsador
 * @param [BT]: Puntero que representa el pulsador fisico
 * @param [level]: el estado logico a verificar
 */
bool ButtonRead(Button_t *BT, Button_state_t level){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
	switch(BT->state){
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b03      	cmp	r3, #3
 80002d6:	f200 808a 	bhi.w	80003ee <ButtonRead+0x12a>
 80002da:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <ButtonRead+0x1c>)
 80002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e0:	080002f1 	.word	0x080002f1
 80002e4:	0800035b 	.word	0x0800035b
 80002e8:	08000333 	.word	0x08000333
 80002ec:	08000383 	.word	0x08000383
	case PIN_INIT:
		BT->GPIO->MODER &=~ (0x3U<< 2 *BT->pin);		//input floating
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	6819      	ldr	r1, [r3, #0]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	7a1b      	ldrb	r3, [r3, #8]
 80002fa:	005b      	lsls	r3, r3, #1
 80002fc:	2203      	movs	r2, #3
 80002fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000302:	43da      	mvns	r2, r3
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	400a      	ands	r2, r1
 800030a:	601a      	str	r2, [r3, #0]
		if(BT->GPIO->IDR & 0x1<<BT->pin){			//pin en estado alto
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	691b      	ldr	r3, [r3, #16]
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	7a12      	ldrb	r2, [r2, #8]
 8000316:	4611      	mov	r1, r2
 8000318:	2201      	movs	r2, #1
 800031a:	408a      	lsls	r2, r1
 800031c:	4013      	ands	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	d003      	beq.n	800032a <ButtonRead+0x66>
			BT->state = PIN_HIGH;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2201      	movs	r2, #1
 8000326:	701a      	strb	r2, [r3, #0]
		}else{
			BT->state = PIN_LOW;
		}
		break;
 8000328:	e061      	b.n	80003ee <ButtonRead+0x12a>
			BT->state = PIN_LOW;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2202      	movs	r2, #2
 800032e:	701a      	strb	r2, [r3, #0]
		break;
 8000330:	e05d      	b.n	80003ee <ButtonRead+0x12a>
	case PIN_LOW:
		if(BT->GPIO->IDR & 0x1<<BT->pin){		//de bajo a alto
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	691b      	ldr	r3, [r3, #16]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	7a12      	ldrb	r2, [r2, #8]
 800033c:	4611      	mov	r1, r2
 800033e:	2201      	movs	r2, #1
 8000340:	408a      	lsls	r2, r1
 8000342:	4013      	ands	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	d04d      	beq.n	80003e4 <ButtonRead+0x120>
			BT->state = PIN_DEBOUNCE;
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	2203      	movs	r2, #3
 800034c:	701a      	strb	r2, [r3, #0]
			BT->tickstart = GetTicks();
 800034e:	f000 f8b5 	bl	80004bc <GetTicks>
 8000352:	4602      	mov	r2, r0
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	611a      	str	r2, [r3, #16]
		}
		break;
 8000358:	e044      	b.n	80003e4 <ButtonRead+0x120>
	case PIN_HIGH:
		if(!(BT->GPIO->IDR & 0x1<<BT->pin)){	//alto a bajo
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	691b      	ldr	r3, [r3, #16]
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	7a12      	ldrb	r2, [r2, #8]
 8000364:	4611      	mov	r1, r2
 8000366:	2201      	movs	r2, #1
 8000368:	408a      	lsls	r2, r1
 800036a:	4013      	ands	r3, r2
 800036c:	2b00      	cmp	r3, #0
 800036e:	d13b      	bne.n	80003e8 <ButtonRead+0x124>
			BT->state = PIN_DEBOUNCE;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2203      	movs	r2, #3
 8000374:	701a      	strb	r2, [r3, #0]
			BT->tickstart = GetTicks();
 8000376:	f000 f8a1 	bl	80004bc <GetTicks>
 800037a:	4602      	mov	r2, r0
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	611a      	str	r2, [r3, #16]
		}
		break;
 8000380:	e032      	b.n	80003e8 <ButtonRead+0x124>
	case PIN_DEBOUNCE:
		if((GetTicks() - BT->tickstart) >= 16){
 8000382:	f000 f89b 	bl	80004bc <GetTicks>
 8000386:	4602      	mov	r2, r0
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	691b      	ldr	r3, [r3, #16]
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	2b0f      	cmp	r3, #15
 8000390:	d92c      	bls.n	80003ec <ButtonRead+0x128>
			if(BT->GPIO->IDR & 0x1<<BT->pin){	//HIGH
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	7a12      	ldrb	r2, [r2, #8]
 800039c:	4611      	mov	r1, r2
 800039e:	2201      	movs	r2, #1
 80003a0:	408a      	lsls	r2, r1
 80003a2:	4013      	ands	r3, r2
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d00e      	beq.n	80003c6 <ButtonRead+0x102>
				BT->state = PIN_HIGH;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2201      	movs	r2, #1
 80003ac:	701a      	strb	r2, [r3, #0]
				if(level == PIN_TO_HIGH){
 80003ae:	78fb      	ldrb	r3, [r7, #3]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d11b      	bne.n	80003ec <ButtonRead+0x128>
					//ejecutar el callback
					if(BT->callback != NULL){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d002      	beq.n	80003c2 <ButtonRead+0xfe>
						BT->callback();
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	4798      	blx	r3
					}
					return true;
 80003c2:	2301      	movs	r3, #1
 80003c4:	e014      	b.n	80003f0 <ButtonRead+0x12c>
				}

			}else{								//LOW
				BT->state = PIN_LOW;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	2202      	movs	r2, #2
 80003ca:	701a      	strb	r2, [r3, #0]
				if(level == PIN_TO_LOW){
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d10c      	bne.n	80003ec <ButtonRead+0x128>
					//ejecutar el callback
					if(BT->callback != NULL){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <ButtonRead+0x11c>
						BT->callback();
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	4798      	blx	r3
					}
					return true;
 80003e0:	2301      	movs	r3, #1
 80003e2:	e005      	b.n	80003f0 <ButtonRead+0x12c>
		break;
 80003e4:	bf00      	nop
 80003e6:	e002      	b.n	80003ee <ButtonRead+0x12a>
		break;
 80003e8:	bf00      	nop
 80003ea:	e000      	b.n	80003ee <ButtonRead+0x12a>
				}
			}
		}
		break;
 80003ec:	bf00      	nop
	}
	return false;
 80003ee:	2300      	movs	r3, #0
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	6039      	str	r1, [r7, #0]
 8000402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000408:	2b00      	cmp	r3, #0
 800040a:	db0a      	blt.n	8000422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	b2da      	uxtb	r2, r3
 8000410:	490c      	ldr	r1, [pc, #48]	; (8000444 <__NVIC_SetPriority+0x4c>)
 8000412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000416:	0112      	lsls	r2, r2, #4
 8000418:	b2d2      	uxtb	r2, r2
 800041a:	440b      	add	r3, r1
 800041c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000420:	e00a      	b.n	8000438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	b2da      	uxtb	r2, r3
 8000426:	4908      	ldr	r1, [pc, #32]	; (8000448 <__NVIC_SetPriority+0x50>)
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	f003 030f 	and.w	r3, r3, #15
 800042e:	3b04      	subs	r3, #4
 8000430:	0112      	lsls	r2, r2, #4
 8000432:	b2d2      	uxtb	r2, r2
 8000434:	440b      	add	r3, r1
 8000436:	761a      	strb	r2, [r3, #24]
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	e000e100 	.word	0xe000e100
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <SysTickInit>:

/*Global variables -------------------------------------------------*/
volatile uint32_t uwTick = 0;


void SysTickInit(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
	uint32_t temp;
	//1. deshabilitar el conteo de la systick
	SysTick->CTRL &=~ SysTick_CTRL_ENABLE_Msk;
 8000452:	4b17      	ldr	r3, [pc, #92]	; (80004b0 <SysTickInit+0x64>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a16      	ldr	r2, [pc, #88]	; (80004b0 <SysTickInit+0x64>)
 8000458:	f023 0301 	bic.w	r3, r3, #1
 800045c:	6013      	str	r3, [r2, #0]
	//2. configurar el valor del registro reload
	SystemCoreClockUpdate();
 800045e:	f000 f9b9 	bl	80007d4 <SystemCoreClockUpdate>
	temp = SystemCoreClock / 1000 - 1;
 8000462:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <SysTickInit+0x68>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <SysTickInit+0x6c>)
 8000468:	fba2 2303 	umull	r2, r3, r2, r3
 800046c:	099b      	lsrs	r3, r3, #6
 800046e:	3b01      	subs	r3, #1
 8000470:	607b      	str	r3, [r7, #4]
	SysTick->LOAD = temp;
 8000472:	4a0f      	ldr	r2, [pc, #60]	; (80004b0 <SysTickInit+0x64>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	6053      	str	r3, [r2, #4]
	//3. Configuras el registro de control y habilitas el conteo
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; 			//system core clock
 8000478:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <SysTickInit+0x64>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a0c      	ldr	r2, [pc, #48]	; (80004b0 <SysTickInit+0x64>)
 800047e:	f043 0304 	orr.w	r3, r3, #4
 8000482:	6013      	str	r3, [r2, #0]

	//configurar la IT
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;				//habilita la IT
 8000484:	4b0a      	ldr	r3, [pc, #40]	; (80004b0 <SysTickInit+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a09      	ldr	r2, [pc, #36]	; (80004b0 <SysTickInit+0x64>)
 800048a:	f043 0302 	orr.w	r3, r3, #2
 800048e:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(SysTick_IRQn, 15);
 8000490:	210f      	movs	r1, #15
 8000492:	f04f 30ff 	mov.w	r0, #4294967295
 8000496:	f7ff ffaf 	bl	80003f8 <__NVIC_SetPriority>

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;				//habilita el conteo
 800049a:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <SysTickInit+0x64>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <SysTickInit+0x64>)
 80004a0:	f043 0301 	orr.w	r3, r3, #1
 80004a4:	6013      	str	r3, [r2, #0]

	return;
 80004a6:	bf00      	nop
}
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	e000e010 	.word	0xe000e010
 80004b4:	20000000 	.word	0x20000000
 80004b8:	10624dd3 	.word	0x10624dd3

080004bc <GetTicks>:
}
/**
 * @brief retorna el ticks generado por la SysTick
 * @return uint32_t
 */
uint32_t GetTicks(void){
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
	return (uint32_t)uwTick;
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <GetTicks+0x14>)
 80004c2:	681b      	ldr	r3, [r3, #0]
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000084 	.word	0x20000084

080004d4 <TickInc_Callback>:


void TickInc_Callback(void){
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	uwTick += 1;
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <TickInc_Callback+0x18>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	4a03      	ldr	r2, [pc, #12]	; (80004ec <TickInc_Callback+0x18>)
 80004e0:	6013      	str	r3, [r2, #0]
	return;
 80004e2:	bf00      	nop
}
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	20000084 	.word	0x20000084

080004f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	2b00      	cmp	r3, #0
 8000506:	d013      	beq.n	8000530 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000508:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000510:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000514:	2b00      	cmp	r3, #0
 8000516:	d00b      	beq.n	8000530 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000518:	e000      	b.n	800051c <ITM_SendChar+0x2c>
    {
      __NOP();
 800051a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800051c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0f9      	beq.n	800051a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000526:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800052a:	687a      	ldr	r2, [r7, #4]
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000530:	687b      	ldr	r3, [r7, #4]
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <main>:

void button1_callback(void);
/*main function --------------------------------------------------------------*/

int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	printf("EJEMPLO GPIO1\r\n");
 8000544:	4826      	ldr	r0, [pc, #152]	; (80005e0 <main+0xa0>)
 8000546:	f000 faa7 	bl	8000a98 <puts>
	printf("%s, %s\r\n", __DATE__, __TIME__);
 800054a:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <main+0xa4>)
 800054c:	4926      	ldr	r1, [pc, #152]	; (80005e8 <main+0xa8>)
 800054e:	4827      	ldr	r0, [pc, #156]	; (80005ec <main+0xac>)
 8000550:	f000 fa1c 	bl	800098c <iprintf>
	//PD12 (LED1)
	RCC->AHB1ENR |= GPIOX_CLOCK(LED) | GPIOX_CLOCK(SW);
 8000554:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <main+0xb0>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	4a25      	ldr	r2, [pc, #148]	; (80005f0 <main+0xb0>)
 800055a:	f043 0309 	orr.w	r3, r3, #9
 800055e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_OUT, LED);
 8000560:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <main+0xb4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <main+0xb4>)
 800056a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800056e:	6013      	str	r3, [r2, #0]
	GPIOX_OTYPER(MODE_OT_PP, LED);
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <main+0xb4>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	4a1f      	ldr	r2, [pc, #124]	; (80005f4 <main+0xb4>)
 8000576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800057a:	6053      	str	r3, [r2, #4]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, LED);
 800057c:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <main+0xb4>)
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <main+0xb4>)
 8000582:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8000586:	6093      	str	r3, [r2, #8]
	GPIOX_PUPDR(MODE_PU_NONE, LED);
 8000588:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <main+0xb4>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	4a19      	ldr	r2, [pc, #100]	; (80005f4 <main+0xb4>)
 800058e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000592:	60d3      	str	r3, [r2, #12]

	//PA0
	GPIOX_MODER(MODE_DIGITAL_INPUT, SW);
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <main+0xb8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a17      	ldr	r2, [pc, #92]	; (80005f8 <main+0xb8>)
 800059a:	f023 0303 	bic.w	r3, r3, #3
 800059e:	6013      	str	r3, [r2, #0]
	GPIOX_PUPDR(MODE_PU_NONE, SW);
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <main+0xb8>)
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	4a14      	ldr	r2, [pc, #80]	; (80005f8 <main+0xb8>)
 80005a6:	f023 0303 	bic.w	r3, r3, #3
 80005aa:	60d3      	str	r3, [r2, #12]
	//systick
	SysTickInit();
 80005ac:	f7ff ff4e 	bl	800044c <SysTickInit>

	//inicializar
	ButtonInit(&button1, GPIOA, 0, &button1_callback);
 80005b0:	4b12      	ldr	r3, [pc, #72]	; (80005fc <main+0xbc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	4910      	ldr	r1, [pc, #64]	; (80005f8 <main+0xb8>)
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <main+0xc0>)
 80005b8:	f7ff fe6a 	bl	8000290 <ButtonInit>
	ButtonInit(&button2, GPIOD, 13, NULL);
 80005bc:	2300      	movs	r3, #0
 80005be:	220d      	movs	r2, #13
 80005c0:	490c      	ldr	r1, [pc, #48]	; (80005f4 <main+0xb4>)
 80005c2:	4810      	ldr	r0, [pc, #64]	; (8000604 <main+0xc4>)
 80005c4:	f7ff fe64 	bl	8000290 <ButtonInit>
    /* Loop forever */
	for(;;){
		ButtonRead(&button1, PIN_TO_LOW);
 80005c8:	2101      	movs	r1, #1
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <main+0xc0>)
 80005cc:	f7ff fe7a 	bl	80002c4 <ButtonRead>
		if(ButtonRead(&button2, PIN_TO_HIGH)){
 80005d0:	2100      	movs	r1, #0
 80005d2:	480c      	ldr	r0, [pc, #48]	; (8000604 <main+0xc4>)
 80005d4:	f7ff fe76 	bl	80002c4 <ButtonRead>
			//todo
		}
		if(GPIOX_IDR(SW) == 1){
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <main+0xc8>)
 80005da:	681b      	ldr	r3, [r3, #0]
		ButtonRead(&button1, PIN_TO_LOW);
 80005dc:	e7f4      	b.n	80005c8 <main+0x88>
 80005de:	bf00      	nop
 80005e0:	080019ac 	.word	0x080019ac
 80005e4:	080019bc 	.word	0x080019bc
 80005e8:	080019c8 	.word	0x080019c8
 80005ec:	080019d4 	.word	0x080019d4
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40020c00 	.word	0x40020c00
 80005f8:	40020000 	.word	0x40020000
 80005fc:	0800060d 	.word	0x0800060d
 8000600:	20000088 	.word	0x20000088
 8000604:	2000009c 	.word	0x2000009c
 8000608:	42400200 	.word	0x42400200

0800060c <button1_callback>:

	}
}

/*Function definition ---------------------------------------------------------*/
void button1_callback(void){
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	GPIOX_ODR(LED) ^= 0x1;
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <button1_callback+0x2c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a08      	ldr	r2, [pc, #32]	; (8000638 <button1_callback+0x2c>)
 8000616:	f083 0301 	eor.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]
	count++;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <button1_callback+0x30>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	4a06      	ldr	r2, [pc, #24]	; (800063c <button1_callback+0x30>)
 8000624:	6013      	str	r3, [r2, #0]
	printf("pulsador se presiono..%u\r\n", count);
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <button1_callback+0x30>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <button1_callback+0x34>)
 800062e:	f000 f9ad 	bl	800098c <iprintf>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	424182b0 	.word	0x424182b0
 800063c:	200000b0 	.word	0x200000b0
 8000640:	080019e0 	.word	0x080019e0

08000644 <__io_putchar>:





int __io_putchar(int ch){
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff4e 	bl	80004f0 <ITM_SendChar>
	return ch;
 8000654:	687b      	ldr	r3, [r7, #4]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <SysTick_Handler>:
#include "delay.h"

/**
 * @brief ISR -> SYSTICK
 */
void SysTick_Handler(void){
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
	TickInc_Callback();
 8000662:	f7ff ff37 	bl	80004d4 <TickInc_Callback>
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}

0800066a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b086      	sub	sp, #24
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000676:	2300      	movs	r3, #0
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	e00a      	b.n	8000692 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800067c:	f3af 8000 	nop.w
 8000680:	4601      	mov	r1, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1c5a      	adds	r2, r3, #1
 8000686:	60ba      	str	r2, [r7, #8]
 8000688:	b2ca      	uxtb	r2, r1
 800068a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	3301      	adds	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697a      	ldr	r2, [r7, #20]
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	429a      	cmp	r2, r3
 8000698:	dbf0      	blt.n	800067c <_read+0x12>
  }

  return len;
 800069a:	687b      	ldr	r3, [r7, #4]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	e009      	b.n	80006ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	60ba      	str	r2, [r7, #8]
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ffc0 	bl	8000644 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	3301      	adds	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	dbf1      	blt.n	80006b6 <_write+0x12>
  }
  return len;
 80006d2:	687b      	ldr	r3, [r7, #4]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}

080006dc <_close>:

int _close(int file)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000704:	605a      	str	r2, [r3, #4]
  return 0;
 8000706:	2300      	movs	r3, #0
}
 8000708:	4618      	mov	r0, r3
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <_isatty>:

int _isatty(int file)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800071c:	2301      	movs	r3, #1
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800072a:	b480      	push	{r7}
 800072c:	b085      	sub	sp, #20
 800072e:	af00      	add	r7, sp, #0
 8000730:	60f8      	str	r0, [r7, #12]
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3714      	adds	r7, #20
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b086      	sub	sp, #24
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800074c:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <_sbrk+0x5c>)
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <_sbrk+0x60>)
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <_sbrk+0x64>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d102      	bne.n	8000766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <_sbrk+0x64>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <_sbrk+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <_sbrk+0x64>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4413      	add	r3, r2
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	429a      	cmp	r2, r3
 8000772:	d207      	bcs.n	8000784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000774:	f000 f8d8 	bl	8000928 <__errno>
 8000778:	4603      	mov	r3, r0
 800077a:	220c      	movs	r2, #12
 800077c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
 8000782:	e009      	b.n	8000798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <_sbrk+0x64>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <_sbrk+0x64>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <_sbrk+0x64>)
 8000794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000796:	68fb      	ldr	r3, [r7, #12]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20020000 	.word	0x20020000
 80007a4:	00000400 	.word	0x00000400
 80007a8:	200000b4 	.word	0x200000b4
 80007ac:	200000c8 	.word	0x200000c8

080007b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <SystemInit+0x20>)
 80007b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <SystemInit+0x20>)
 80007bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	2302      	movs	r3, #2
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	2302      	movs	r3, #2
 80007ec:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80007ee:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <SystemCoreClockUpdate+0xec>)
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	f003 030c 	and.w	r3, r3, #12
 80007f6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	2b08      	cmp	r3, #8
 80007fc:	d011      	beq.n	8000822 <SystemCoreClockUpdate+0x4e>
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	2b08      	cmp	r3, #8
 8000802:	d844      	bhi.n	800088e <SystemCoreClockUpdate+0xba>
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d003      	beq.n	8000812 <SystemCoreClockUpdate+0x3e>
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	2b04      	cmp	r3, #4
 800080e:	d004      	beq.n	800081a <SystemCoreClockUpdate+0x46>
 8000810:	e03d      	b.n	800088e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000812:	4b2c      	ldr	r3, [pc, #176]	; (80008c4 <SystemCoreClockUpdate+0xf0>)
 8000814:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <SystemCoreClockUpdate+0xf4>)
 8000816:	601a      	str	r2, [r3, #0]
      break;
 8000818:	e03d      	b.n	8000896 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <SystemCoreClockUpdate+0xf0>)
 800081c:	4a2b      	ldr	r2, [pc, #172]	; (80008cc <SystemCoreClockUpdate+0xf8>)
 800081e:	601a      	str	r2, [r3, #0]
      break;
 8000820:	e039      	b.n	8000896 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000822:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <SystemCoreClockUpdate+0xec>)
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	0d9b      	lsrs	r3, r3, #22
 8000828:	f003 0301 	and.w	r3, r3, #1
 800082c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <SystemCoreClockUpdate+0xec>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000836:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d00c      	beq.n	8000858 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800083e:	4a23      	ldr	r2, [pc, #140]	; (80008cc <SystemCoreClockUpdate+0xf8>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <SystemCoreClockUpdate+0xec>)
 8000848:	6852      	ldr	r2, [r2, #4]
 800084a:	0992      	lsrs	r2, r2, #6
 800084c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000850:	fb02 f303 	mul.w	r3, r2, r3
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	e00b      	b.n	8000870 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <SystemCoreClockUpdate+0xf4>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000860:	4a17      	ldr	r2, [pc, #92]	; (80008c0 <SystemCoreClockUpdate+0xec>)
 8000862:	6852      	ldr	r2, [r2, #4]
 8000864:	0992      	lsrs	r2, r2, #6
 8000866:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800086a:	fb02 f303 	mul.w	r3, r2, r3
 800086e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <SystemCoreClockUpdate+0xec>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	0c1b      	lsrs	r3, r3, #16
 8000876:	f003 0303 	and.w	r3, r3, #3
 800087a:	3301      	adds	r3, #1
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000880:	697a      	ldr	r2, [r7, #20]
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	fbb2 f3f3 	udiv	r3, r2, r3
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <SystemCoreClockUpdate+0xf0>)
 800088a:	6013      	str	r3, [r2, #0]
      break;
 800088c:	e003      	b.n	8000896 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <SystemCoreClockUpdate+0xf0>)
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <SystemCoreClockUpdate+0xf4>)
 8000892:	601a      	str	r2, [r3, #0]
      break;
 8000894:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000896:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <SystemCoreClockUpdate+0xec>)
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	091b      	lsrs	r3, r3, #4
 800089c:	f003 030f 	and.w	r3, r3, #15
 80008a0:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <SystemCoreClockUpdate+0xfc>)
 80008a2:	5cd3      	ldrb	r3, [r2, r3]
 80008a4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <SystemCoreClockUpdate+0xf0>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	fa22 f303 	lsr.w	r3, r2, r3
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <SystemCoreClockUpdate+0xf0>)
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	371c      	adds	r7, #28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	40023800 	.word	0x40023800
 80008c4:	20000000 	.word	0x20000000
 80008c8:	00f42400 	.word	0x00f42400
 80008cc:	017d7840 	.word	0x017d7840
 80008d0:	080019fc 	.word	0x080019fc

080008d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d8:	f7ff ff6a 	bl	80007b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <LoopForever+0x6>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	; (8000914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <LoopForever+0xe>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	; (8000920 <LoopForever+0x16>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000902:	f000 f817 	bl	8000934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000906:	f7ff fe1b 	bl	8000540 <main>

0800090a <LoopForever>:

LoopForever:
  b LoopForever
 800090a:	e7fe      	b.n	800090a <LoopForever>
  ldr   r0, =_estack
 800090c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000914:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000918:	08001aac 	.word	0x08001aac
  ldr r2, =_sbss
 800091c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000920:	200000c8 	.word	0x200000c8

08000924 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC_IRQHandler>
	...

08000928 <__errno>:
 8000928:	4b01      	ldr	r3, [pc, #4]	; (8000930 <__errno+0x8>)
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000004 	.word	0x20000004

08000934 <__libc_init_array>:
 8000934:	b570      	push	{r4, r5, r6, lr}
 8000936:	4d0d      	ldr	r5, [pc, #52]	; (800096c <__libc_init_array+0x38>)
 8000938:	4c0d      	ldr	r4, [pc, #52]	; (8000970 <__libc_init_array+0x3c>)
 800093a:	1b64      	subs	r4, r4, r5
 800093c:	10a4      	asrs	r4, r4, #2
 800093e:	2600      	movs	r6, #0
 8000940:	42a6      	cmp	r6, r4
 8000942:	d109      	bne.n	8000958 <__libc_init_array+0x24>
 8000944:	4d0b      	ldr	r5, [pc, #44]	; (8000974 <__libc_init_array+0x40>)
 8000946:	4c0c      	ldr	r4, [pc, #48]	; (8000978 <__libc_init_array+0x44>)
 8000948:	f001 f824 	bl	8001994 <_init>
 800094c:	1b64      	subs	r4, r4, r5
 800094e:	10a4      	asrs	r4, r4, #2
 8000950:	2600      	movs	r6, #0
 8000952:	42a6      	cmp	r6, r4
 8000954:	d105      	bne.n	8000962 <__libc_init_array+0x2e>
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f855 3b04 	ldr.w	r3, [r5], #4
 800095c:	4798      	blx	r3
 800095e:	3601      	adds	r6, #1
 8000960:	e7ee      	b.n	8000940 <__libc_init_array+0xc>
 8000962:	f855 3b04 	ldr.w	r3, [r5], #4
 8000966:	4798      	blx	r3
 8000968:	3601      	adds	r6, #1
 800096a:	e7f2      	b.n	8000952 <__libc_init_array+0x1e>
 800096c:	08001aa4 	.word	0x08001aa4
 8000970:	08001aa4 	.word	0x08001aa4
 8000974:	08001aa4 	.word	0x08001aa4
 8000978:	08001aa8 	.word	0x08001aa8

0800097c <memset>:
 800097c:	4402      	add	r2, r0
 800097e:	4603      	mov	r3, r0
 8000980:	4293      	cmp	r3, r2
 8000982:	d100      	bne.n	8000986 <memset+0xa>
 8000984:	4770      	bx	lr
 8000986:	f803 1b01 	strb.w	r1, [r3], #1
 800098a:	e7f9      	b.n	8000980 <memset+0x4>

0800098c <iprintf>:
 800098c:	b40f      	push	{r0, r1, r2, r3}
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <iprintf+0x2c>)
 8000990:	b513      	push	{r0, r1, r4, lr}
 8000992:	681c      	ldr	r4, [r3, #0]
 8000994:	b124      	cbz	r4, 80009a0 <iprintf+0x14>
 8000996:	69a3      	ldr	r3, [r4, #24]
 8000998:	b913      	cbnz	r3, 80009a0 <iprintf+0x14>
 800099a:	4620      	mov	r0, r4
 800099c:	f000 fa5e 	bl	8000e5c <__sinit>
 80009a0:	ab05      	add	r3, sp, #20
 80009a2:	9a04      	ldr	r2, [sp, #16]
 80009a4:	68a1      	ldr	r1, [r4, #8]
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	4620      	mov	r0, r4
 80009aa:	f000 fc67 	bl	800127c <_vfiprintf_r>
 80009ae:	b002      	add	sp, #8
 80009b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009b4:	b004      	add	sp, #16
 80009b6:	4770      	bx	lr
 80009b8:	20000004 	.word	0x20000004

080009bc <_puts_r>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	460e      	mov	r6, r1
 80009c0:	4605      	mov	r5, r0
 80009c2:	b118      	cbz	r0, 80009cc <_puts_r+0x10>
 80009c4:	6983      	ldr	r3, [r0, #24]
 80009c6:	b90b      	cbnz	r3, 80009cc <_puts_r+0x10>
 80009c8:	f000 fa48 	bl	8000e5c <__sinit>
 80009cc:	69ab      	ldr	r3, [r5, #24]
 80009ce:	68ac      	ldr	r4, [r5, #8]
 80009d0:	b913      	cbnz	r3, 80009d8 <_puts_r+0x1c>
 80009d2:	4628      	mov	r0, r5
 80009d4:	f000 fa42 	bl	8000e5c <__sinit>
 80009d8:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <_puts_r+0xd0>)
 80009da:	429c      	cmp	r4, r3
 80009dc:	d120      	bne.n	8000a20 <_puts_r+0x64>
 80009de:	686c      	ldr	r4, [r5, #4]
 80009e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80009e2:	07db      	lsls	r3, r3, #31
 80009e4:	d405      	bmi.n	80009f2 <_puts_r+0x36>
 80009e6:	89a3      	ldrh	r3, [r4, #12]
 80009e8:	0598      	lsls	r0, r3, #22
 80009ea:	d402      	bmi.n	80009f2 <_puts_r+0x36>
 80009ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80009ee:	f000 fad3 	bl	8000f98 <__retarget_lock_acquire_recursive>
 80009f2:	89a3      	ldrh	r3, [r4, #12]
 80009f4:	0719      	lsls	r1, r3, #28
 80009f6:	d51d      	bpl.n	8000a34 <_puts_r+0x78>
 80009f8:	6923      	ldr	r3, [r4, #16]
 80009fa:	b1db      	cbz	r3, 8000a34 <_puts_r+0x78>
 80009fc:	3e01      	subs	r6, #1
 80009fe:	68a3      	ldr	r3, [r4, #8]
 8000a00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a04:	3b01      	subs	r3, #1
 8000a06:	60a3      	str	r3, [r4, #8]
 8000a08:	bb39      	cbnz	r1, 8000a5a <_puts_r+0x9e>
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da38      	bge.n	8000a80 <_puts_r+0xc4>
 8000a0e:	4622      	mov	r2, r4
 8000a10:	210a      	movs	r1, #10
 8000a12:	4628      	mov	r0, r5
 8000a14:	f000 f848 	bl	8000aa8 <__swbuf_r>
 8000a18:	3001      	adds	r0, #1
 8000a1a:	d011      	beq.n	8000a40 <_puts_r+0x84>
 8000a1c:	250a      	movs	r5, #10
 8000a1e:	e011      	b.n	8000a44 <_puts_r+0x88>
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <_puts_r+0xd4>)
 8000a22:	429c      	cmp	r4, r3
 8000a24:	d101      	bne.n	8000a2a <_puts_r+0x6e>
 8000a26:	68ac      	ldr	r4, [r5, #8]
 8000a28:	e7da      	b.n	80009e0 <_puts_r+0x24>
 8000a2a:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <_puts_r+0xd8>)
 8000a2c:	429c      	cmp	r4, r3
 8000a2e:	bf08      	it	eq
 8000a30:	68ec      	ldreq	r4, [r5, #12]
 8000a32:	e7d5      	b.n	80009e0 <_puts_r+0x24>
 8000a34:	4621      	mov	r1, r4
 8000a36:	4628      	mov	r0, r5
 8000a38:	f000 f888 	bl	8000b4c <__swsetup_r>
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d0dd      	beq.n	80009fc <_puts_r+0x40>
 8000a40:	f04f 35ff 	mov.w	r5, #4294967295
 8000a44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a46:	07da      	lsls	r2, r3, #31
 8000a48:	d405      	bmi.n	8000a56 <_puts_r+0x9a>
 8000a4a:	89a3      	ldrh	r3, [r4, #12]
 8000a4c:	059b      	lsls	r3, r3, #22
 8000a4e:	d402      	bmi.n	8000a56 <_puts_r+0x9a>
 8000a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a52:	f000 faa2 	bl	8000f9a <__retarget_lock_release_recursive>
 8000a56:	4628      	mov	r0, r5
 8000a58:	bd70      	pop	{r4, r5, r6, pc}
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	da04      	bge.n	8000a68 <_puts_r+0xac>
 8000a5e:	69a2      	ldr	r2, [r4, #24]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dc06      	bgt.n	8000a72 <_puts_r+0xb6>
 8000a64:	290a      	cmp	r1, #10
 8000a66:	d004      	beq.n	8000a72 <_puts_r+0xb6>
 8000a68:	6823      	ldr	r3, [r4, #0]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	6022      	str	r2, [r4, #0]
 8000a6e:	7019      	strb	r1, [r3, #0]
 8000a70:	e7c5      	b.n	80009fe <_puts_r+0x42>
 8000a72:	4622      	mov	r2, r4
 8000a74:	4628      	mov	r0, r5
 8000a76:	f000 f817 	bl	8000aa8 <__swbuf_r>
 8000a7a:	3001      	adds	r0, #1
 8000a7c:	d1bf      	bne.n	80009fe <_puts_r+0x42>
 8000a7e:	e7df      	b.n	8000a40 <_puts_r+0x84>
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	250a      	movs	r5, #10
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	6022      	str	r2, [r4, #0]
 8000a88:	701d      	strb	r5, [r3, #0]
 8000a8a:	e7db      	b.n	8000a44 <_puts_r+0x88>
 8000a8c:	08001a30 	.word	0x08001a30
 8000a90:	08001a50 	.word	0x08001a50
 8000a94:	08001a10 	.word	0x08001a10

08000a98 <puts>:
 8000a98:	4b02      	ldr	r3, [pc, #8]	; (8000aa4 <puts+0xc>)
 8000a9a:	4601      	mov	r1, r0
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	f7ff bf8d 	b.w	80009bc <_puts_r>
 8000aa2:	bf00      	nop
 8000aa4:	20000004 	.word	0x20000004

08000aa8 <__swbuf_r>:
 8000aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aaa:	460e      	mov	r6, r1
 8000aac:	4614      	mov	r4, r2
 8000aae:	4605      	mov	r5, r0
 8000ab0:	b118      	cbz	r0, 8000aba <__swbuf_r+0x12>
 8000ab2:	6983      	ldr	r3, [r0, #24]
 8000ab4:	b90b      	cbnz	r3, 8000aba <__swbuf_r+0x12>
 8000ab6:	f000 f9d1 	bl	8000e5c <__sinit>
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <__swbuf_r+0x98>)
 8000abc:	429c      	cmp	r4, r3
 8000abe:	d12b      	bne.n	8000b18 <__swbuf_r+0x70>
 8000ac0:	686c      	ldr	r4, [r5, #4]
 8000ac2:	69a3      	ldr	r3, [r4, #24]
 8000ac4:	60a3      	str	r3, [r4, #8]
 8000ac6:	89a3      	ldrh	r3, [r4, #12]
 8000ac8:	071a      	lsls	r2, r3, #28
 8000aca:	d52f      	bpl.n	8000b2c <__swbuf_r+0x84>
 8000acc:	6923      	ldr	r3, [r4, #16]
 8000ace:	b36b      	cbz	r3, 8000b2c <__swbuf_r+0x84>
 8000ad0:	6923      	ldr	r3, [r4, #16]
 8000ad2:	6820      	ldr	r0, [r4, #0]
 8000ad4:	1ac0      	subs	r0, r0, r3
 8000ad6:	6963      	ldr	r3, [r4, #20]
 8000ad8:	b2f6      	uxtb	r6, r6
 8000ada:	4283      	cmp	r3, r0
 8000adc:	4637      	mov	r7, r6
 8000ade:	dc04      	bgt.n	8000aea <__swbuf_r+0x42>
 8000ae0:	4621      	mov	r1, r4
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	f000 f926 	bl	8000d34 <_fflush_r>
 8000ae8:	bb30      	cbnz	r0, 8000b38 <__swbuf_r+0x90>
 8000aea:	68a3      	ldr	r3, [r4, #8]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	60a3      	str	r3, [r4, #8]
 8000af0:	6823      	ldr	r3, [r4, #0]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	6022      	str	r2, [r4, #0]
 8000af6:	701e      	strb	r6, [r3, #0]
 8000af8:	6963      	ldr	r3, [r4, #20]
 8000afa:	3001      	adds	r0, #1
 8000afc:	4283      	cmp	r3, r0
 8000afe:	d004      	beq.n	8000b0a <__swbuf_r+0x62>
 8000b00:	89a3      	ldrh	r3, [r4, #12]
 8000b02:	07db      	lsls	r3, r3, #31
 8000b04:	d506      	bpl.n	8000b14 <__swbuf_r+0x6c>
 8000b06:	2e0a      	cmp	r6, #10
 8000b08:	d104      	bne.n	8000b14 <__swbuf_r+0x6c>
 8000b0a:	4621      	mov	r1, r4
 8000b0c:	4628      	mov	r0, r5
 8000b0e:	f000 f911 	bl	8000d34 <_fflush_r>
 8000b12:	b988      	cbnz	r0, 8000b38 <__swbuf_r+0x90>
 8000b14:	4638      	mov	r0, r7
 8000b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <__swbuf_r+0x9c>)
 8000b1a:	429c      	cmp	r4, r3
 8000b1c:	d101      	bne.n	8000b22 <__swbuf_r+0x7a>
 8000b1e:	68ac      	ldr	r4, [r5, #8]
 8000b20:	e7cf      	b.n	8000ac2 <__swbuf_r+0x1a>
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <__swbuf_r+0xa0>)
 8000b24:	429c      	cmp	r4, r3
 8000b26:	bf08      	it	eq
 8000b28:	68ec      	ldreq	r4, [r5, #12]
 8000b2a:	e7ca      	b.n	8000ac2 <__swbuf_r+0x1a>
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	4628      	mov	r0, r5
 8000b30:	f000 f80c 	bl	8000b4c <__swsetup_r>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d0cb      	beq.n	8000ad0 <__swbuf_r+0x28>
 8000b38:	f04f 37ff 	mov.w	r7, #4294967295
 8000b3c:	e7ea      	b.n	8000b14 <__swbuf_r+0x6c>
 8000b3e:	bf00      	nop
 8000b40:	08001a30 	.word	0x08001a30
 8000b44:	08001a50 	.word	0x08001a50
 8000b48:	08001a10 	.word	0x08001a10

08000b4c <__swsetup_r>:
 8000b4c:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <__swsetup_r+0xcc>)
 8000b4e:	b570      	push	{r4, r5, r6, lr}
 8000b50:	681d      	ldr	r5, [r3, #0]
 8000b52:	4606      	mov	r6, r0
 8000b54:	460c      	mov	r4, r1
 8000b56:	b125      	cbz	r5, 8000b62 <__swsetup_r+0x16>
 8000b58:	69ab      	ldr	r3, [r5, #24]
 8000b5a:	b913      	cbnz	r3, 8000b62 <__swsetup_r+0x16>
 8000b5c:	4628      	mov	r0, r5
 8000b5e:	f000 f97d 	bl	8000e5c <__sinit>
 8000b62:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <__swsetup_r+0xd0>)
 8000b64:	429c      	cmp	r4, r3
 8000b66:	d10f      	bne.n	8000b88 <__swsetup_r+0x3c>
 8000b68:	686c      	ldr	r4, [r5, #4]
 8000b6a:	89a3      	ldrh	r3, [r4, #12]
 8000b6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000b70:	0719      	lsls	r1, r3, #28
 8000b72:	d42c      	bmi.n	8000bce <__swsetup_r+0x82>
 8000b74:	06dd      	lsls	r5, r3, #27
 8000b76:	d411      	bmi.n	8000b9c <__swsetup_r+0x50>
 8000b78:	2309      	movs	r3, #9
 8000b7a:	6033      	str	r3, [r6, #0]
 8000b7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000b80:	81a3      	strh	r3, [r4, #12]
 8000b82:	f04f 30ff 	mov.w	r0, #4294967295
 8000b86:	e03e      	b.n	8000c06 <__swsetup_r+0xba>
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <__swsetup_r+0xd4>)
 8000b8a:	429c      	cmp	r4, r3
 8000b8c:	d101      	bne.n	8000b92 <__swsetup_r+0x46>
 8000b8e:	68ac      	ldr	r4, [r5, #8]
 8000b90:	e7eb      	b.n	8000b6a <__swsetup_r+0x1e>
 8000b92:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <__swsetup_r+0xd8>)
 8000b94:	429c      	cmp	r4, r3
 8000b96:	bf08      	it	eq
 8000b98:	68ec      	ldreq	r4, [r5, #12]
 8000b9a:	e7e6      	b.n	8000b6a <__swsetup_r+0x1e>
 8000b9c:	0758      	lsls	r0, r3, #29
 8000b9e:	d512      	bpl.n	8000bc6 <__swsetup_r+0x7a>
 8000ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ba2:	b141      	cbz	r1, 8000bb6 <__swsetup_r+0x6a>
 8000ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	d002      	beq.n	8000bb2 <__swsetup_r+0x66>
 8000bac:	4630      	mov	r0, r6
 8000bae:	f000 fa5b 	bl	8001068 <_free_r>
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	6363      	str	r3, [r4, #52]	; 0x34
 8000bb6:	89a3      	ldrh	r3, [r4, #12]
 8000bb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000bbc:	81a3      	strh	r3, [r4, #12]
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	6063      	str	r3, [r4, #4]
 8000bc2:	6923      	ldr	r3, [r4, #16]
 8000bc4:	6023      	str	r3, [r4, #0]
 8000bc6:	89a3      	ldrh	r3, [r4, #12]
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	81a3      	strh	r3, [r4, #12]
 8000bce:	6923      	ldr	r3, [r4, #16]
 8000bd0:	b94b      	cbnz	r3, 8000be6 <__swsetup_r+0x9a>
 8000bd2:	89a3      	ldrh	r3, [r4, #12]
 8000bd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bdc:	d003      	beq.n	8000be6 <__swsetup_r+0x9a>
 8000bde:	4621      	mov	r1, r4
 8000be0:	4630      	mov	r0, r6
 8000be2:	f000 fa01 	bl	8000fe8 <__smakebuf_r>
 8000be6:	89a0      	ldrh	r0, [r4, #12]
 8000be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bec:	f010 0301 	ands.w	r3, r0, #1
 8000bf0:	d00a      	beq.n	8000c08 <__swsetup_r+0xbc>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60a3      	str	r3, [r4, #8]
 8000bf6:	6963      	ldr	r3, [r4, #20]
 8000bf8:	425b      	negs	r3, r3
 8000bfa:	61a3      	str	r3, [r4, #24]
 8000bfc:	6923      	ldr	r3, [r4, #16]
 8000bfe:	b943      	cbnz	r3, 8000c12 <__swsetup_r+0xc6>
 8000c00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c04:	d1ba      	bne.n	8000b7c <__swsetup_r+0x30>
 8000c06:	bd70      	pop	{r4, r5, r6, pc}
 8000c08:	0781      	lsls	r1, r0, #30
 8000c0a:	bf58      	it	pl
 8000c0c:	6963      	ldrpl	r3, [r4, #20]
 8000c0e:	60a3      	str	r3, [r4, #8]
 8000c10:	e7f4      	b.n	8000bfc <__swsetup_r+0xb0>
 8000c12:	2000      	movs	r0, #0
 8000c14:	e7f7      	b.n	8000c06 <__swsetup_r+0xba>
 8000c16:	bf00      	nop
 8000c18:	20000004 	.word	0x20000004
 8000c1c:	08001a30 	.word	0x08001a30
 8000c20:	08001a50 	.word	0x08001a50
 8000c24:	08001a10 	.word	0x08001a10

08000c28 <__sflush_r>:
 8000c28:	898a      	ldrh	r2, [r1, #12]
 8000c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c2e:	4605      	mov	r5, r0
 8000c30:	0710      	lsls	r0, r2, #28
 8000c32:	460c      	mov	r4, r1
 8000c34:	d458      	bmi.n	8000ce8 <__sflush_r+0xc0>
 8000c36:	684b      	ldr	r3, [r1, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	dc05      	bgt.n	8000c48 <__sflush_r+0x20>
 8000c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	dc02      	bgt.n	8000c48 <__sflush_r+0x20>
 8000c42:	2000      	movs	r0, #0
 8000c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0f9      	beq.n	8000c42 <__sflush_r+0x1a>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c54:	682f      	ldr	r7, [r5, #0]
 8000c56:	602b      	str	r3, [r5, #0]
 8000c58:	d032      	beq.n	8000cc0 <__sflush_r+0x98>
 8000c5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c5c:	89a3      	ldrh	r3, [r4, #12]
 8000c5e:	075a      	lsls	r2, r3, #29
 8000c60:	d505      	bpl.n	8000c6e <__sflush_r+0x46>
 8000c62:	6863      	ldr	r3, [r4, #4]
 8000c64:	1ac0      	subs	r0, r0, r3
 8000c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c68:	b10b      	cbz	r3, 8000c6e <__sflush_r+0x46>
 8000c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c6c:	1ac0      	subs	r0, r0, r3
 8000c6e:	2300      	movs	r3, #0
 8000c70:	4602      	mov	r2, r0
 8000c72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c74:	6a21      	ldr	r1, [r4, #32]
 8000c76:	4628      	mov	r0, r5
 8000c78:	47b0      	blx	r6
 8000c7a:	1c43      	adds	r3, r0, #1
 8000c7c:	89a3      	ldrh	r3, [r4, #12]
 8000c7e:	d106      	bne.n	8000c8e <__sflush_r+0x66>
 8000c80:	6829      	ldr	r1, [r5, #0]
 8000c82:	291d      	cmp	r1, #29
 8000c84:	d82c      	bhi.n	8000ce0 <__sflush_r+0xb8>
 8000c86:	4a2a      	ldr	r2, [pc, #168]	; (8000d30 <__sflush_r+0x108>)
 8000c88:	40ca      	lsrs	r2, r1
 8000c8a:	07d6      	lsls	r6, r2, #31
 8000c8c:	d528      	bpl.n	8000ce0 <__sflush_r+0xb8>
 8000c8e:	2200      	movs	r2, #0
 8000c90:	6062      	str	r2, [r4, #4]
 8000c92:	04d9      	lsls	r1, r3, #19
 8000c94:	6922      	ldr	r2, [r4, #16]
 8000c96:	6022      	str	r2, [r4, #0]
 8000c98:	d504      	bpl.n	8000ca4 <__sflush_r+0x7c>
 8000c9a:	1c42      	adds	r2, r0, #1
 8000c9c:	d101      	bne.n	8000ca2 <__sflush_r+0x7a>
 8000c9e:	682b      	ldr	r3, [r5, #0]
 8000ca0:	b903      	cbnz	r3, 8000ca4 <__sflush_r+0x7c>
 8000ca2:	6560      	str	r0, [r4, #84]	; 0x54
 8000ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ca6:	602f      	str	r7, [r5, #0]
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d0ca      	beq.n	8000c42 <__sflush_r+0x1a>
 8000cac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	d002      	beq.n	8000cba <__sflush_r+0x92>
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	f000 f9d7 	bl	8001068 <_free_r>
 8000cba:	2000      	movs	r0, #0
 8000cbc:	6360      	str	r0, [r4, #52]	; 0x34
 8000cbe:	e7c1      	b.n	8000c44 <__sflush_r+0x1c>
 8000cc0:	6a21      	ldr	r1, [r4, #32]
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	4628      	mov	r0, r5
 8000cc6:	47b0      	blx	r6
 8000cc8:	1c41      	adds	r1, r0, #1
 8000cca:	d1c7      	bne.n	8000c5c <__sflush_r+0x34>
 8000ccc:	682b      	ldr	r3, [r5, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0c4      	beq.n	8000c5c <__sflush_r+0x34>
 8000cd2:	2b1d      	cmp	r3, #29
 8000cd4:	d001      	beq.n	8000cda <__sflush_r+0xb2>
 8000cd6:	2b16      	cmp	r3, #22
 8000cd8:	d101      	bne.n	8000cde <__sflush_r+0xb6>
 8000cda:	602f      	str	r7, [r5, #0]
 8000cdc:	e7b1      	b.n	8000c42 <__sflush_r+0x1a>
 8000cde:	89a3      	ldrh	r3, [r4, #12]
 8000ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ce4:	81a3      	strh	r3, [r4, #12]
 8000ce6:	e7ad      	b.n	8000c44 <__sflush_r+0x1c>
 8000ce8:	690f      	ldr	r7, [r1, #16]
 8000cea:	2f00      	cmp	r7, #0
 8000cec:	d0a9      	beq.n	8000c42 <__sflush_r+0x1a>
 8000cee:	0793      	lsls	r3, r2, #30
 8000cf0:	680e      	ldr	r6, [r1, #0]
 8000cf2:	bf08      	it	eq
 8000cf4:	694b      	ldreq	r3, [r1, #20]
 8000cf6:	600f      	str	r7, [r1, #0]
 8000cf8:	bf18      	it	ne
 8000cfa:	2300      	movne	r3, #0
 8000cfc:	eba6 0807 	sub.w	r8, r6, r7
 8000d00:	608b      	str	r3, [r1, #8]
 8000d02:	f1b8 0f00 	cmp.w	r8, #0
 8000d06:	dd9c      	ble.n	8000c42 <__sflush_r+0x1a>
 8000d08:	6a21      	ldr	r1, [r4, #32]
 8000d0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d0c:	4643      	mov	r3, r8
 8000d0e:	463a      	mov	r2, r7
 8000d10:	4628      	mov	r0, r5
 8000d12:	47b0      	blx	r6
 8000d14:	2800      	cmp	r0, #0
 8000d16:	dc06      	bgt.n	8000d26 <__sflush_r+0xfe>
 8000d18:	89a3      	ldrh	r3, [r4, #12]
 8000d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1e:	81a3      	strh	r3, [r4, #12]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	e78e      	b.n	8000c44 <__sflush_r+0x1c>
 8000d26:	4407      	add	r7, r0
 8000d28:	eba8 0800 	sub.w	r8, r8, r0
 8000d2c:	e7e9      	b.n	8000d02 <__sflush_r+0xda>
 8000d2e:	bf00      	nop
 8000d30:	20400001 	.word	0x20400001

08000d34 <_fflush_r>:
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	690b      	ldr	r3, [r1, #16]
 8000d38:	4605      	mov	r5, r0
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	b913      	cbnz	r3, 8000d44 <_fflush_r+0x10>
 8000d3e:	2500      	movs	r5, #0
 8000d40:	4628      	mov	r0, r5
 8000d42:	bd38      	pop	{r3, r4, r5, pc}
 8000d44:	b118      	cbz	r0, 8000d4e <_fflush_r+0x1a>
 8000d46:	6983      	ldr	r3, [r0, #24]
 8000d48:	b90b      	cbnz	r3, 8000d4e <_fflush_r+0x1a>
 8000d4a:	f000 f887 	bl	8000e5c <__sinit>
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <_fflush_r+0x6c>)
 8000d50:	429c      	cmp	r4, r3
 8000d52:	d11b      	bne.n	8000d8c <_fflush_r+0x58>
 8000d54:	686c      	ldr	r4, [r5, #4]
 8000d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0ef      	beq.n	8000d3e <_fflush_r+0xa>
 8000d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d60:	07d0      	lsls	r0, r2, #31
 8000d62:	d404      	bmi.n	8000d6e <_fflush_r+0x3a>
 8000d64:	0599      	lsls	r1, r3, #22
 8000d66:	d402      	bmi.n	8000d6e <_fflush_r+0x3a>
 8000d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d6a:	f000 f915 	bl	8000f98 <__retarget_lock_acquire_recursive>
 8000d6e:	4628      	mov	r0, r5
 8000d70:	4621      	mov	r1, r4
 8000d72:	f7ff ff59 	bl	8000c28 <__sflush_r>
 8000d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000d78:	07da      	lsls	r2, r3, #31
 8000d7a:	4605      	mov	r5, r0
 8000d7c:	d4e0      	bmi.n	8000d40 <_fflush_r+0xc>
 8000d7e:	89a3      	ldrh	r3, [r4, #12]
 8000d80:	059b      	lsls	r3, r3, #22
 8000d82:	d4dd      	bmi.n	8000d40 <_fflush_r+0xc>
 8000d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d86:	f000 f908 	bl	8000f9a <__retarget_lock_release_recursive>
 8000d8a:	e7d9      	b.n	8000d40 <_fflush_r+0xc>
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <_fflush_r+0x70>)
 8000d8e:	429c      	cmp	r4, r3
 8000d90:	d101      	bne.n	8000d96 <_fflush_r+0x62>
 8000d92:	68ac      	ldr	r4, [r5, #8]
 8000d94:	e7df      	b.n	8000d56 <_fflush_r+0x22>
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <_fflush_r+0x74>)
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	bf08      	it	eq
 8000d9c:	68ec      	ldreq	r4, [r5, #12]
 8000d9e:	e7da      	b.n	8000d56 <_fflush_r+0x22>
 8000da0:	08001a30 	.word	0x08001a30
 8000da4:	08001a50 	.word	0x08001a50
 8000da8:	08001a10 	.word	0x08001a10

08000dac <std>:
 8000dac:	2300      	movs	r3, #0
 8000dae:	b510      	push	{r4, lr}
 8000db0:	4604      	mov	r4, r0
 8000db2:	e9c0 3300 	strd	r3, r3, [r0]
 8000db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000dba:	6083      	str	r3, [r0, #8]
 8000dbc:	8181      	strh	r1, [r0, #12]
 8000dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8000dc0:	81c2      	strh	r2, [r0, #14]
 8000dc2:	6183      	str	r3, [r0, #24]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	305c      	adds	r0, #92	; 0x5c
 8000dca:	f7ff fdd7 	bl	800097c <memset>
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <std+0x38>)
 8000dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8000dd2:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <std+0x3c>)
 8000dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <std+0x40>)
 8000dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <std+0x44>)
 8000ddc:	6224      	str	r4, [r4, #32]
 8000dde:	6323      	str	r3, [r4, #48]	; 0x30
 8000de0:	bd10      	pop	{r4, pc}
 8000de2:	bf00      	nop
 8000de4:	08001825 	.word	0x08001825
 8000de8:	08001847 	.word	0x08001847
 8000dec:	0800187f 	.word	0x0800187f
 8000df0:	080018a3 	.word	0x080018a3

08000df4 <_cleanup_r>:
 8000df4:	4901      	ldr	r1, [pc, #4]	; (8000dfc <_cleanup_r+0x8>)
 8000df6:	f000 b8af 	b.w	8000f58 <_fwalk_reent>
 8000dfa:	bf00      	nop
 8000dfc:	08000d35 	.word	0x08000d35

08000e00 <__sfmoreglue>:
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	2268      	movs	r2, #104	; 0x68
 8000e04:	1e4d      	subs	r5, r1, #1
 8000e06:	4355      	muls	r5, r2
 8000e08:	460e      	mov	r6, r1
 8000e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e0e:	f000 f997 	bl	8001140 <_malloc_r>
 8000e12:	4604      	mov	r4, r0
 8000e14:	b140      	cbz	r0, 8000e28 <__sfmoreglue+0x28>
 8000e16:	2100      	movs	r1, #0
 8000e18:	e9c0 1600 	strd	r1, r6, [r0]
 8000e1c:	300c      	adds	r0, #12
 8000e1e:	60a0      	str	r0, [r4, #8]
 8000e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e24:	f7ff fdaa 	bl	800097c <memset>
 8000e28:	4620      	mov	r0, r4
 8000e2a:	bd70      	pop	{r4, r5, r6, pc}

08000e2c <__sfp_lock_acquire>:
 8000e2c:	4801      	ldr	r0, [pc, #4]	; (8000e34 <__sfp_lock_acquire+0x8>)
 8000e2e:	f000 b8b3 	b.w	8000f98 <__retarget_lock_acquire_recursive>
 8000e32:	bf00      	nop
 8000e34:	200000b9 	.word	0x200000b9

08000e38 <__sfp_lock_release>:
 8000e38:	4801      	ldr	r0, [pc, #4]	; (8000e40 <__sfp_lock_release+0x8>)
 8000e3a:	f000 b8ae 	b.w	8000f9a <__retarget_lock_release_recursive>
 8000e3e:	bf00      	nop
 8000e40:	200000b9 	.word	0x200000b9

08000e44 <__sinit_lock_acquire>:
 8000e44:	4801      	ldr	r0, [pc, #4]	; (8000e4c <__sinit_lock_acquire+0x8>)
 8000e46:	f000 b8a7 	b.w	8000f98 <__retarget_lock_acquire_recursive>
 8000e4a:	bf00      	nop
 8000e4c:	200000ba 	.word	0x200000ba

08000e50 <__sinit_lock_release>:
 8000e50:	4801      	ldr	r0, [pc, #4]	; (8000e58 <__sinit_lock_release+0x8>)
 8000e52:	f000 b8a2 	b.w	8000f9a <__retarget_lock_release_recursive>
 8000e56:	bf00      	nop
 8000e58:	200000ba 	.word	0x200000ba

08000e5c <__sinit>:
 8000e5c:	b510      	push	{r4, lr}
 8000e5e:	4604      	mov	r4, r0
 8000e60:	f7ff fff0 	bl	8000e44 <__sinit_lock_acquire>
 8000e64:	69a3      	ldr	r3, [r4, #24]
 8000e66:	b11b      	cbz	r3, 8000e70 <__sinit+0x14>
 8000e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e6c:	f7ff bff0 	b.w	8000e50 <__sinit_lock_release>
 8000e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e74:	6523      	str	r3, [r4, #80]	; 0x50
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <__sinit+0x68>)
 8000e78:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <__sinit+0x6c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	bf04      	itt	eq
 8000e82:	2301      	moveq	r3, #1
 8000e84:	61a3      	streq	r3, [r4, #24]
 8000e86:	4620      	mov	r0, r4
 8000e88:	f000 f820 	bl	8000ecc <__sfp>
 8000e8c:	6060      	str	r0, [r4, #4]
 8000e8e:	4620      	mov	r0, r4
 8000e90:	f000 f81c 	bl	8000ecc <__sfp>
 8000e94:	60a0      	str	r0, [r4, #8]
 8000e96:	4620      	mov	r0, r4
 8000e98:	f000 f818 	bl	8000ecc <__sfp>
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	60e0      	str	r0, [r4, #12]
 8000ea0:	2104      	movs	r1, #4
 8000ea2:	6860      	ldr	r0, [r4, #4]
 8000ea4:	f7ff ff82 	bl	8000dac <std>
 8000ea8:	68a0      	ldr	r0, [r4, #8]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2109      	movs	r1, #9
 8000eae:	f7ff ff7d 	bl	8000dac <std>
 8000eb2:	68e0      	ldr	r0, [r4, #12]
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	2112      	movs	r1, #18
 8000eb8:	f7ff ff78 	bl	8000dac <std>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61a3      	str	r3, [r4, #24]
 8000ec0:	e7d2      	b.n	8000e68 <__sinit+0xc>
 8000ec2:	bf00      	nop
 8000ec4:	08001a0c 	.word	0x08001a0c
 8000ec8:	08000df5 	.word	0x08000df5

08000ecc <__sfp>:
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	4607      	mov	r7, r0
 8000ed0:	f7ff ffac 	bl	8000e2c <__sfp_lock_acquire>
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <__sfp+0x84>)
 8000ed6:	681e      	ldr	r6, [r3, #0]
 8000ed8:	69b3      	ldr	r3, [r6, #24]
 8000eda:	b913      	cbnz	r3, 8000ee2 <__sfp+0x16>
 8000edc:	4630      	mov	r0, r6
 8000ede:	f7ff ffbd 	bl	8000e5c <__sinit>
 8000ee2:	3648      	adds	r6, #72	; 0x48
 8000ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	d503      	bpl.n	8000ef4 <__sfp+0x28>
 8000eec:	6833      	ldr	r3, [r6, #0]
 8000eee:	b30b      	cbz	r3, 8000f34 <__sfp+0x68>
 8000ef0:	6836      	ldr	r6, [r6, #0]
 8000ef2:	e7f7      	b.n	8000ee4 <__sfp+0x18>
 8000ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000ef8:	b9d5      	cbnz	r5, 8000f30 <__sfp+0x64>
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <__sfp+0x88>)
 8000efc:	60e3      	str	r3, [r4, #12]
 8000efe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f02:	6665      	str	r5, [r4, #100]	; 0x64
 8000f04:	f000 f847 	bl	8000f96 <__retarget_lock_init_recursive>
 8000f08:	f7ff ff96 	bl	8000e38 <__sfp_lock_release>
 8000f0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f14:	6025      	str	r5, [r4, #0]
 8000f16:	61a5      	str	r5, [r4, #24]
 8000f18:	2208      	movs	r2, #8
 8000f1a:	4629      	mov	r1, r5
 8000f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f20:	f7ff fd2c 	bl	800097c <memset>
 8000f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f30:	3468      	adds	r4, #104	; 0x68
 8000f32:	e7d9      	b.n	8000ee8 <__sfp+0x1c>
 8000f34:	2104      	movs	r1, #4
 8000f36:	4638      	mov	r0, r7
 8000f38:	f7ff ff62 	bl	8000e00 <__sfmoreglue>
 8000f3c:	4604      	mov	r4, r0
 8000f3e:	6030      	str	r0, [r6, #0]
 8000f40:	2800      	cmp	r0, #0
 8000f42:	d1d5      	bne.n	8000ef0 <__sfp+0x24>
 8000f44:	f7ff ff78 	bl	8000e38 <__sfp_lock_release>
 8000f48:	230c      	movs	r3, #12
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	e7ee      	b.n	8000f2c <__sfp+0x60>
 8000f4e:	bf00      	nop
 8000f50:	08001a0c 	.word	0x08001a0c
 8000f54:	ffff0001 	.word	0xffff0001

08000f58 <_fwalk_reent>:
 8000f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f5c:	4606      	mov	r6, r0
 8000f5e:	4688      	mov	r8, r1
 8000f60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000f64:	2700      	movs	r7, #0
 8000f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8000f6e:	d505      	bpl.n	8000f7c <_fwalk_reent+0x24>
 8000f70:	6824      	ldr	r4, [r4, #0]
 8000f72:	2c00      	cmp	r4, #0
 8000f74:	d1f7      	bne.n	8000f66 <_fwalk_reent+0xe>
 8000f76:	4638      	mov	r0, r7
 8000f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f7c:	89ab      	ldrh	r3, [r5, #12]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d907      	bls.n	8000f92 <_fwalk_reent+0x3a>
 8000f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f86:	3301      	adds	r3, #1
 8000f88:	d003      	beq.n	8000f92 <_fwalk_reent+0x3a>
 8000f8a:	4629      	mov	r1, r5
 8000f8c:	4630      	mov	r0, r6
 8000f8e:	47c0      	blx	r8
 8000f90:	4307      	orrs	r7, r0
 8000f92:	3568      	adds	r5, #104	; 0x68
 8000f94:	e7e9      	b.n	8000f6a <_fwalk_reent+0x12>

08000f96 <__retarget_lock_init_recursive>:
 8000f96:	4770      	bx	lr

08000f98 <__retarget_lock_acquire_recursive>:
 8000f98:	4770      	bx	lr

08000f9a <__retarget_lock_release_recursive>:
 8000f9a:	4770      	bx	lr

08000f9c <__swhatbuf_r>:
 8000f9c:	b570      	push	{r4, r5, r6, lr}
 8000f9e:	460e      	mov	r6, r1
 8000fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fa4:	2900      	cmp	r1, #0
 8000fa6:	b096      	sub	sp, #88	; 0x58
 8000fa8:	4614      	mov	r4, r2
 8000faa:	461d      	mov	r5, r3
 8000fac:	da08      	bge.n	8000fc0 <__swhatbuf_r+0x24>
 8000fae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	602a      	str	r2, [r5, #0]
 8000fb6:	061a      	lsls	r2, r3, #24
 8000fb8:	d410      	bmi.n	8000fdc <__swhatbuf_r+0x40>
 8000fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fbe:	e00e      	b.n	8000fde <__swhatbuf_r+0x42>
 8000fc0:	466a      	mov	r2, sp
 8000fc2:	f000 fc95 	bl	80018f0 <_fstat_r>
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	dbf1      	blt.n	8000fae <__swhatbuf_r+0x12>
 8000fca:	9a01      	ldr	r2, [sp, #4]
 8000fcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000fd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000fd4:	425a      	negs	r2, r3
 8000fd6:	415a      	adcs	r2, r3
 8000fd8:	602a      	str	r2, [r5, #0]
 8000fda:	e7ee      	b.n	8000fba <__swhatbuf_r+0x1e>
 8000fdc:	2340      	movs	r3, #64	; 0x40
 8000fde:	2000      	movs	r0, #0
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	b016      	add	sp, #88	; 0x58
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000fe8 <__smakebuf_r>:
 8000fe8:	898b      	ldrh	r3, [r1, #12]
 8000fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000fec:	079d      	lsls	r5, r3, #30
 8000fee:	4606      	mov	r6, r0
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	d507      	bpl.n	8001004 <__smakebuf_r+0x1c>
 8000ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ff8:	6023      	str	r3, [r4, #0]
 8000ffa:	6123      	str	r3, [r4, #16]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	6163      	str	r3, [r4, #20]
 8001000:	b002      	add	sp, #8
 8001002:	bd70      	pop	{r4, r5, r6, pc}
 8001004:	ab01      	add	r3, sp, #4
 8001006:	466a      	mov	r2, sp
 8001008:	f7ff ffc8 	bl	8000f9c <__swhatbuf_r>
 800100c:	9900      	ldr	r1, [sp, #0]
 800100e:	4605      	mov	r5, r0
 8001010:	4630      	mov	r0, r6
 8001012:	f000 f895 	bl	8001140 <_malloc_r>
 8001016:	b948      	cbnz	r0, 800102c <__smakebuf_r+0x44>
 8001018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800101c:	059a      	lsls	r2, r3, #22
 800101e:	d4ef      	bmi.n	8001000 <__smakebuf_r+0x18>
 8001020:	f023 0303 	bic.w	r3, r3, #3
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	81a3      	strh	r3, [r4, #12]
 800102a:	e7e3      	b.n	8000ff4 <__smakebuf_r+0xc>
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <__smakebuf_r+0x7c>)
 800102e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001030:	89a3      	ldrh	r3, [r4, #12]
 8001032:	6020      	str	r0, [r4, #0]
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	81a3      	strh	r3, [r4, #12]
 800103a:	9b00      	ldr	r3, [sp, #0]
 800103c:	6163      	str	r3, [r4, #20]
 800103e:	9b01      	ldr	r3, [sp, #4]
 8001040:	6120      	str	r0, [r4, #16]
 8001042:	b15b      	cbz	r3, 800105c <__smakebuf_r+0x74>
 8001044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001048:	4630      	mov	r0, r6
 800104a:	f000 fc63 	bl	8001914 <_isatty_r>
 800104e:	b128      	cbz	r0, 800105c <__smakebuf_r+0x74>
 8001050:	89a3      	ldrh	r3, [r4, #12]
 8001052:	f023 0303 	bic.w	r3, r3, #3
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	81a3      	strh	r3, [r4, #12]
 800105c:	89a0      	ldrh	r0, [r4, #12]
 800105e:	4305      	orrs	r5, r0
 8001060:	81a5      	strh	r5, [r4, #12]
 8001062:	e7cd      	b.n	8001000 <__smakebuf_r+0x18>
 8001064:	08000df5 	.word	0x08000df5

08001068 <_free_r>:
 8001068:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800106a:	2900      	cmp	r1, #0
 800106c:	d044      	beq.n	80010f8 <_free_r+0x90>
 800106e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001072:	9001      	str	r0, [sp, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	f1a1 0404 	sub.w	r4, r1, #4
 800107a:	bfb8      	it	lt
 800107c:	18e4      	addlt	r4, r4, r3
 800107e:	f000 fc6b 	bl	8001958 <__malloc_lock>
 8001082:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <_free_r+0x94>)
 8001084:	9801      	ldr	r0, [sp, #4]
 8001086:	6813      	ldr	r3, [r2, #0]
 8001088:	b933      	cbnz	r3, 8001098 <_free_r+0x30>
 800108a:	6063      	str	r3, [r4, #4]
 800108c:	6014      	str	r4, [r2, #0]
 800108e:	b003      	add	sp, #12
 8001090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001094:	f000 bc66 	b.w	8001964 <__malloc_unlock>
 8001098:	42a3      	cmp	r3, r4
 800109a:	d908      	bls.n	80010ae <_free_r+0x46>
 800109c:	6825      	ldr	r5, [r4, #0]
 800109e:	1961      	adds	r1, r4, r5
 80010a0:	428b      	cmp	r3, r1
 80010a2:	bf01      	itttt	eq
 80010a4:	6819      	ldreq	r1, [r3, #0]
 80010a6:	685b      	ldreq	r3, [r3, #4]
 80010a8:	1949      	addeq	r1, r1, r5
 80010aa:	6021      	streq	r1, [r4, #0]
 80010ac:	e7ed      	b.n	800108a <_free_r+0x22>
 80010ae:	461a      	mov	r2, r3
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	b10b      	cbz	r3, 80010b8 <_free_r+0x50>
 80010b4:	42a3      	cmp	r3, r4
 80010b6:	d9fa      	bls.n	80010ae <_free_r+0x46>
 80010b8:	6811      	ldr	r1, [r2, #0]
 80010ba:	1855      	adds	r5, r2, r1
 80010bc:	42a5      	cmp	r5, r4
 80010be:	d10b      	bne.n	80010d8 <_free_r+0x70>
 80010c0:	6824      	ldr	r4, [r4, #0]
 80010c2:	4421      	add	r1, r4
 80010c4:	1854      	adds	r4, r2, r1
 80010c6:	42a3      	cmp	r3, r4
 80010c8:	6011      	str	r1, [r2, #0]
 80010ca:	d1e0      	bne.n	800108e <_free_r+0x26>
 80010cc:	681c      	ldr	r4, [r3, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	6053      	str	r3, [r2, #4]
 80010d2:	4421      	add	r1, r4
 80010d4:	6011      	str	r1, [r2, #0]
 80010d6:	e7da      	b.n	800108e <_free_r+0x26>
 80010d8:	d902      	bls.n	80010e0 <_free_r+0x78>
 80010da:	230c      	movs	r3, #12
 80010dc:	6003      	str	r3, [r0, #0]
 80010de:	e7d6      	b.n	800108e <_free_r+0x26>
 80010e0:	6825      	ldr	r5, [r4, #0]
 80010e2:	1961      	adds	r1, r4, r5
 80010e4:	428b      	cmp	r3, r1
 80010e6:	bf04      	itt	eq
 80010e8:	6819      	ldreq	r1, [r3, #0]
 80010ea:	685b      	ldreq	r3, [r3, #4]
 80010ec:	6063      	str	r3, [r4, #4]
 80010ee:	bf04      	itt	eq
 80010f0:	1949      	addeq	r1, r1, r5
 80010f2:	6021      	streq	r1, [r4, #0]
 80010f4:	6054      	str	r4, [r2, #4]
 80010f6:	e7ca      	b.n	800108e <_free_r+0x26>
 80010f8:	b003      	add	sp, #12
 80010fa:	bd30      	pop	{r4, r5, pc}
 80010fc:	200000bc 	.word	0x200000bc

08001100 <sbrk_aligned>:
 8001100:	b570      	push	{r4, r5, r6, lr}
 8001102:	4e0e      	ldr	r6, [pc, #56]	; (800113c <sbrk_aligned+0x3c>)
 8001104:	460c      	mov	r4, r1
 8001106:	6831      	ldr	r1, [r6, #0]
 8001108:	4605      	mov	r5, r0
 800110a:	b911      	cbnz	r1, 8001112 <sbrk_aligned+0x12>
 800110c:	f000 fb7a 	bl	8001804 <_sbrk_r>
 8001110:	6030      	str	r0, [r6, #0]
 8001112:	4621      	mov	r1, r4
 8001114:	4628      	mov	r0, r5
 8001116:	f000 fb75 	bl	8001804 <_sbrk_r>
 800111a:	1c43      	adds	r3, r0, #1
 800111c:	d00a      	beq.n	8001134 <sbrk_aligned+0x34>
 800111e:	1cc4      	adds	r4, r0, #3
 8001120:	f024 0403 	bic.w	r4, r4, #3
 8001124:	42a0      	cmp	r0, r4
 8001126:	d007      	beq.n	8001138 <sbrk_aligned+0x38>
 8001128:	1a21      	subs	r1, r4, r0
 800112a:	4628      	mov	r0, r5
 800112c:	f000 fb6a 	bl	8001804 <_sbrk_r>
 8001130:	3001      	adds	r0, #1
 8001132:	d101      	bne.n	8001138 <sbrk_aligned+0x38>
 8001134:	f04f 34ff 	mov.w	r4, #4294967295
 8001138:	4620      	mov	r0, r4
 800113a:	bd70      	pop	{r4, r5, r6, pc}
 800113c:	200000c0 	.word	0x200000c0

08001140 <_malloc_r>:
 8001140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001144:	1ccd      	adds	r5, r1, #3
 8001146:	f025 0503 	bic.w	r5, r5, #3
 800114a:	3508      	adds	r5, #8
 800114c:	2d0c      	cmp	r5, #12
 800114e:	bf38      	it	cc
 8001150:	250c      	movcc	r5, #12
 8001152:	2d00      	cmp	r5, #0
 8001154:	4607      	mov	r7, r0
 8001156:	db01      	blt.n	800115c <_malloc_r+0x1c>
 8001158:	42a9      	cmp	r1, r5
 800115a:	d905      	bls.n	8001168 <_malloc_r+0x28>
 800115c:	230c      	movs	r3, #12
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	2600      	movs	r6, #0
 8001162:	4630      	mov	r0, r6
 8001164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001168:	4e2e      	ldr	r6, [pc, #184]	; (8001224 <_malloc_r+0xe4>)
 800116a:	f000 fbf5 	bl	8001958 <__malloc_lock>
 800116e:	6833      	ldr	r3, [r6, #0]
 8001170:	461c      	mov	r4, r3
 8001172:	bb34      	cbnz	r4, 80011c2 <_malloc_r+0x82>
 8001174:	4629      	mov	r1, r5
 8001176:	4638      	mov	r0, r7
 8001178:	f7ff ffc2 	bl	8001100 <sbrk_aligned>
 800117c:	1c43      	adds	r3, r0, #1
 800117e:	4604      	mov	r4, r0
 8001180:	d14d      	bne.n	800121e <_malloc_r+0xde>
 8001182:	6834      	ldr	r4, [r6, #0]
 8001184:	4626      	mov	r6, r4
 8001186:	2e00      	cmp	r6, #0
 8001188:	d140      	bne.n	800120c <_malloc_r+0xcc>
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	4631      	mov	r1, r6
 800118e:	4638      	mov	r0, r7
 8001190:	eb04 0803 	add.w	r8, r4, r3
 8001194:	f000 fb36 	bl	8001804 <_sbrk_r>
 8001198:	4580      	cmp	r8, r0
 800119a:	d13a      	bne.n	8001212 <_malloc_r+0xd2>
 800119c:	6821      	ldr	r1, [r4, #0]
 800119e:	3503      	adds	r5, #3
 80011a0:	1a6d      	subs	r5, r5, r1
 80011a2:	f025 0503 	bic.w	r5, r5, #3
 80011a6:	3508      	adds	r5, #8
 80011a8:	2d0c      	cmp	r5, #12
 80011aa:	bf38      	it	cc
 80011ac:	250c      	movcc	r5, #12
 80011ae:	4629      	mov	r1, r5
 80011b0:	4638      	mov	r0, r7
 80011b2:	f7ff ffa5 	bl	8001100 <sbrk_aligned>
 80011b6:	3001      	adds	r0, #1
 80011b8:	d02b      	beq.n	8001212 <_malloc_r+0xd2>
 80011ba:	6823      	ldr	r3, [r4, #0]
 80011bc:	442b      	add	r3, r5
 80011be:	6023      	str	r3, [r4, #0]
 80011c0:	e00e      	b.n	80011e0 <_malloc_r+0xa0>
 80011c2:	6822      	ldr	r2, [r4, #0]
 80011c4:	1b52      	subs	r2, r2, r5
 80011c6:	d41e      	bmi.n	8001206 <_malloc_r+0xc6>
 80011c8:	2a0b      	cmp	r2, #11
 80011ca:	d916      	bls.n	80011fa <_malloc_r+0xba>
 80011cc:	1961      	adds	r1, r4, r5
 80011ce:	42a3      	cmp	r3, r4
 80011d0:	6025      	str	r5, [r4, #0]
 80011d2:	bf18      	it	ne
 80011d4:	6059      	strne	r1, [r3, #4]
 80011d6:	6863      	ldr	r3, [r4, #4]
 80011d8:	bf08      	it	eq
 80011da:	6031      	streq	r1, [r6, #0]
 80011dc:	5162      	str	r2, [r4, r5]
 80011de:	604b      	str	r3, [r1, #4]
 80011e0:	4638      	mov	r0, r7
 80011e2:	f104 060b 	add.w	r6, r4, #11
 80011e6:	f000 fbbd 	bl	8001964 <__malloc_unlock>
 80011ea:	f026 0607 	bic.w	r6, r6, #7
 80011ee:	1d23      	adds	r3, r4, #4
 80011f0:	1af2      	subs	r2, r6, r3
 80011f2:	d0b6      	beq.n	8001162 <_malloc_r+0x22>
 80011f4:	1b9b      	subs	r3, r3, r6
 80011f6:	50a3      	str	r3, [r4, r2]
 80011f8:	e7b3      	b.n	8001162 <_malloc_r+0x22>
 80011fa:	6862      	ldr	r2, [r4, #4]
 80011fc:	42a3      	cmp	r3, r4
 80011fe:	bf0c      	ite	eq
 8001200:	6032      	streq	r2, [r6, #0]
 8001202:	605a      	strne	r2, [r3, #4]
 8001204:	e7ec      	b.n	80011e0 <_malloc_r+0xa0>
 8001206:	4623      	mov	r3, r4
 8001208:	6864      	ldr	r4, [r4, #4]
 800120a:	e7b2      	b.n	8001172 <_malloc_r+0x32>
 800120c:	4634      	mov	r4, r6
 800120e:	6876      	ldr	r6, [r6, #4]
 8001210:	e7b9      	b.n	8001186 <_malloc_r+0x46>
 8001212:	230c      	movs	r3, #12
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	4638      	mov	r0, r7
 8001218:	f000 fba4 	bl	8001964 <__malloc_unlock>
 800121c:	e7a1      	b.n	8001162 <_malloc_r+0x22>
 800121e:	6025      	str	r5, [r4, #0]
 8001220:	e7de      	b.n	80011e0 <_malloc_r+0xa0>
 8001222:	bf00      	nop
 8001224:	200000bc 	.word	0x200000bc

08001228 <__sfputc_r>:
 8001228:	6893      	ldr	r3, [r2, #8]
 800122a:	3b01      	subs	r3, #1
 800122c:	2b00      	cmp	r3, #0
 800122e:	b410      	push	{r4}
 8001230:	6093      	str	r3, [r2, #8]
 8001232:	da08      	bge.n	8001246 <__sfputc_r+0x1e>
 8001234:	6994      	ldr	r4, [r2, #24]
 8001236:	42a3      	cmp	r3, r4
 8001238:	db01      	blt.n	800123e <__sfputc_r+0x16>
 800123a:	290a      	cmp	r1, #10
 800123c:	d103      	bne.n	8001246 <__sfputc_r+0x1e>
 800123e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001242:	f7ff bc31 	b.w	8000aa8 <__swbuf_r>
 8001246:	6813      	ldr	r3, [r2, #0]
 8001248:	1c58      	adds	r0, r3, #1
 800124a:	6010      	str	r0, [r2, #0]
 800124c:	7019      	strb	r1, [r3, #0]
 800124e:	4608      	mov	r0, r1
 8001250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001254:	4770      	bx	lr

08001256 <__sfputs_r>:
 8001256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001258:	4606      	mov	r6, r0
 800125a:	460f      	mov	r7, r1
 800125c:	4614      	mov	r4, r2
 800125e:	18d5      	adds	r5, r2, r3
 8001260:	42ac      	cmp	r4, r5
 8001262:	d101      	bne.n	8001268 <__sfputs_r+0x12>
 8001264:	2000      	movs	r0, #0
 8001266:	e007      	b.n	8001278 <__sfputs_r+0x22>
 8001268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800126c:	463a      	mov	r2, r7
 800126e:	4630      	mov	r0, r6
 8001270:	f7ff ffda 	bl	8001228 <__sfputc_r>
 8001274:	1c43      	adds	r3, r0, #1
 8001276:	d1f3      	bne.n	8001260 <__sfputs_r+0xa>
 8001278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800127c <_vfiprintf_r>:
 800127c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001280:	460d      	mov	r5, r1
 8001282:	b09d      	sub	sp, #116	; 0x74
 8001284:	4614      	mov	r4, r2
 8001286:	4698      	mov	r8, r3
 8001288:	4606      	mov	r6, r0
 800128a:	b118      	cbz	r0, 8001294 <_vfiprintf_r+0x18>
 800128c:	6983      	ldr	r3, [r0, #24]
 800128e:	b90b      	cbnz	r3, 8001294 <_vfiprintf_r+0x18>
 8001290:	f7ff fde4 	bl	8000e5c <__sinit>
 8001294:	4b89      	ldr	r3, [pc, #548]	; (80014bc <_vfiprintf_r+0x240>)
 8001296:	429d      	cmp	r5, r3
 8001298:	d11b      	bne.n	80012d2 <_vfiprintf_r+0x56>
 800129a:	6875      	ldr	r5, [r6, #4]
 800129c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800129e:	07d9      	lsls	r1, r3, #31
 80012a0:	d405      	bmi.n	80012ae <_vfiprintf_r+0x32>
 80012a2:	89ab      	ldrh	r3, [r5, #12]
 80012a4:	059a      	lsls	r2, r3, #22
 80012a6:	d402      	bmi.n	80012ae <_vfiprintf_r+0x32>
 80012a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012aa:	f7ff fe75 	bl	8000f98 <__retarget_lock_acquire_recursive>
 80012ae:	89ab      	ldrh	r3, [r5, #12]
 80012b0:	071b      	lsls	r3, r3, #28
 80012b2:	d501      	bpl.n	80012b8 <_vfiprintf_r+0x3c>
 80012b4:	692b      	ldr	r3, [r5, #16]
 80012b6:	b9eb      	cbnz	r3, 80012f4 <_vfiprintf_r+0x78>
 80012b8:	4629      	mov	r1, r5
 80012ba:	4630      	mov	r0, r6
 80012bc:	f7ff fc46 	bl	8000b4c <__swsetup_r>
 80012c0:	b1c0      	cbz	r0, 80012f4 <_vfiprintf_r+0x78>
 80012c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012c4:	07dc      	lsls	r4, r3, #31
 80012c6:	d50e      	bpl.n	80012e6 <_vfiprintf_r+0x6a>
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	b01d      	add	sp, #116	; 0x74
 80012ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012d2:	4b7b      	ldr	r3, [pc, #492]	; (80014c0 <_vfiprintf_r+0x244>)
 80012d4:	429d      	cmp	r5, r3
 80012d6:	d101      	bne.n	80012dc <_vfiprintf_r+0x60>
 80012d8:	68b5      	ldr	r5, [r6, #8]
 80012da:	e7df      	b.n	800129c <_vfiprintf_r+0x20>
 80012dc:	4b79      	ldr	r3, [pc, #484]	; (80014c4 <_vfiprintf_r+0x248>)
 80012de:	429d      	cmp	r5, r3
 80012e0:	bf08      	it	eq
 80012e2:	68f5      	ldreq	r5, [r6, #12]
 80012e4:	e7da      	b.n	800129c <_vfiprintf_r+0x20>
 80012e6:	89ab      	ldrh	r3, [r5, #12]
 80012e8:	0598      	lsls	r0, r3, #22
 80012ea:	d4ed      	bmi.n	80012c8 <_vfiprintf_r+0x4c>
 80012ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012ee:	f7ff fe54 	bl	8000f9a <__retarget_lock_release_recursive>
 80012f2:	e7e9      	b.n	80012c8 <_vfiprintf_r+0x4c>
 80012f4:	2300      	movs	r3, #0
 80012f6:	9309      	str	r3, [sp, #36]	; 0x24
 80012f8:	2320      	movs	r3, #32
 80012fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80012fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8001302:	2330      	movs	r3, #48	; 0x30
 8001304:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80014c8 <_vfiprintf_r+0x24c>
 8001308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800130c:	f04f 0901 	mov.w	r9, #1
 8001310:	4623      	mov	r3, r4
 8001312:	469a      	mov	sl, r3
 8001314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001318:	b10a      	cbz	r2, 800131e <_vfiprintf_r+0xa2>
 800131a:	2a25      	cmp	r2, #37	; 0x25
 800131c:	d1f9      	bne.n	8001312 <_vfiprintf_r+0x96>
 800131e:	ebba 0b04 	subs.w	fp, sl, r4
 8001322:	d00b      	beq.n	800133c <_vfiprintf_r+0xc0>
 8001324:	465b      	mov	r3, fp
 8001326:	4622      	mov	r2, r4
 8001328:	4629      	mov	r1, r5
 800132a:	4630      	mov	r0, r6
 800132c:	f7ff ff93 	bl	8001256 <__sfputs_r>
 8001330:	3001      	adds	r0, #1
 8001332:	f000 80aa 	beq.w	800148a <_vfiprintf_r+0x20e>
 8001336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001338:	445a      	add	r2, fp
 800133a:	9209      	str	r2, [sp, #36]	; 0x24
 800133c:	f89a 3000 	ldrb.w	r3, [sl]
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80a2 	beq.w	800148a <_vfiprintf_r+0x20e>
 8001346:	2300      	movs	r3, #0
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001350:	f10a 0a01 	add.w	sl, sl, #1
 8001354:	9304      	str	r3, [sp, #16]
 8001356:	9307      	str	r3, [sp, #28]
 8001358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800135c:	931a      	str	r3, [sp, #104]	; 0x68
 800135e:	4654      	mov	r4, sl
 8001360:	2205      	movs	r2, #5
 8001362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001366:	4858      	ldr	r0, [pc, #352]	; (80014c8 <_vfiprintf_r+0x24c>)
 8001368:	f7fe ff42 	bl	80001f0 <memchr>
 800136c:	9a04      	ldr	r2, [sp, #16]
 800136e:	b9d8      	cbnz	r0, 80013a8 <_vfiprintf_r+0x12c>
 8001370:	06d1      	lsls	r1, r2, #27
 8001372:	bf44      	itt	mi
 8001374:	2320      	movmi	r3, #32
 8001376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800137a:	0713      	lsls	r3, r2, #28
 800137c:	bf44      	itt	mi
 800137e:	232b      	movmi	r3, #43	; 0x2b
 8001380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001384:	f89a 3000 	ldrb.w	r3, [sl]
 8001388:	2b2a      	cmp	r3, #42	; 0x2a
 800138a:	d015      	beq.n	80013b8 <_vfiprintf_r+0x13c>
 800138c:	9a07      	ldr	r2, [sp, #28]
 800138e:	4654      	mov	r4, sl
 8001390:	2000      	movs	r0, #0
 8001392:	f04f 0c0a 	mov.w	ip, #10
 8001396:	4621      	mov	r1, r4
 8001398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800139c:	3b30      	subs	r3, #48	; 0x30
 800139e:	2b09      	cmp	r3, #9
 80013a0:	d94e      	bls.n	8001440 <_vfiprintf_r+0x1c4>
 80013a2:	b1b0      	cbz	r0, 80013d2 <_vfiprintf_r+0x156>
 80013a4:	9207      	str	r2, [sp, #28]
 80013a6:	e014      	b.n	80013d2 <_vfiprintf_r+0x156>
 80013a8:	eba0 0308 	sub.w	r3, r0, r8
 80013ac:	fa09 f303 	lsl.w	r3, r9, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	9304      	str	r3, [sp, #16]
 80013b4:	46a2      	mov	sl, r4
 80013b6:	e7d2      	b.n	800135e <_vfiprintf_r+0xe2>
 80013b8:	9b03      	ldr	r3, [sp, #12]
 80013ba:	1d19      	adds	r1, r3, #4
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	9103      	str	r1, [sp, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	bfbb      	ittet	lt
 80013c4:	425b      	neglt	r3, r3
 80013c6:	f042 0202 	orrlt.w	r2, r2, #2
 80013ca:	9307      	strge	r3, [sp, #28]
 80013cc:	9307      	strlt	r3, [sp, #28]
 80013ce:	bfb8      	it	lt
 80013d0:	9204      	strlt	r2, [sp, #16]
 80013d2:	7823      	ldrb	r3, [r4, #0]
 80013d4:	2b2e      	cmp	r3, #46	; 0x2e
 80013d6:	d10c      	bne.n	80013f2 <_vfiprintf_r+0x176>
 80013d8:	7863      	ldrb	r3, [r4, #1]
 80013da:	2b2a      	cmp	r3, #42	; 0x2a
 80013dc:	d135      	bne.n	800144a <_vfiprintf_r+0x1ce>
 80013de:	9b03      	ldr	r3, [sp, #12]
 80013e0:	1d1a      	adds	r2, r3, #4
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	9203      	str	r2, [sp, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	bfb8      	it	lt
 80013ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80013ee:	3402      	adds	r4, #2
 80013f0:	9305      	str	r3, [sp, #20]
 80013f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80014d8 <_vfiprintf_r+0x25c>
 80013f6:	7821      	ldrb	r1, [r4, #0]
 80013f8:	2203      	movs	r2, #3
 80013fa:	4650      	mov	r0, sl
 80013fc:	f7fe fef8 	bl	80001f0 <memchr>
 8001400:	b140      	cbz	r0, 8001414 <_vfiprintf_r+0x198>
 8001402:	2340      	movs	r3, #64	; 0x40
 8001404:	eba0 000a 	sub.w	r0, r0, sl
 8001408:	fa03 f000 	lsl.w	r0, r3, r0
 800140c:	9b04      	ldr	r3, [sp, #16]
 800140e:	4303      	orrs	r3, r0
 8001410:	3401      	adds	r4, #1
 8001412:	9304      	str	r3, [sp, #16]
 8001414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001418:	482c      	ldr	r0, [pc, #176]	; (80014cc <_vfiprintf_r+0x250>)
 800141a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800141e:	2206      	movs	r2, #6
 8001420:	f7fe fee6 	bl	80001f0 <memchr>
 8001424:	2800      	cmp	r0, #0
 8001426:	d03f      	beq.n	80014a8 <_vfiprintf_r+0x22c>
 8001428:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <_vfiprintf_r+0x254>)
 800142a:	bb1b      	cbnz	r3, 8001474 <_vfiprintf_r+0x1f8>
 800142c:	9b03      	ldr	r3, [sp, #12]
 800142e:	3307      	adds	r3, #7
 8001430:	f023 0307 	bic.w	r3, r3, #7
 8001434:	3308      	adds	r3, #8
 8001436:	9303      	str	r3, [sp, #12]
 8001438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800143a:	443b      	add	r3, r7
 800143c:	9309      	str	r3, [sp, #36]	; 0x24
 800143e:	e767      	b.n	8001310 <_vfiprintf_r+0x94>
 8001440:	fb0c 3202 	mla	r2, ip, r2, r3
 8001444:	460c      	mov	r4, r1
 8001446:	2001      	movs	r0, #1
 8001448:	e7a5      	b.n	8001396 <_vfiprintf_r+0x11a>
 800144a:	2300      	movs	r3, #0
 800144c:	3401      	adds	r4, #1
 800144e:	9305      	str	r3, [sp, #20]
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 0c0a 	mov.w	ip, #10
 8001456:	4620      	mov	r0, r4
 8001458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800145c:	3a30      	subs	r2, #48	; 0x30
 800145e:	2a09      	cmp	r2, #9
 8001460:	d903      	bls.n	800146a <_vfiprintf_r+0x1ee>
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0c5      	beq.n	80013f2 <_vfiprintf_r+0x176>
 8001466:	9105      	str	r1, [sp, #20]
 8001468:	e7c3      	b.n	80013f2 <_vfiprintf_r+0x176>
 800146a:	fb0c 2101 	mla	r1, ip, r1, r2
 800146e:	4604      	mov	r4, r0
 8001470:	2301      	movs	r3, #1
 8001472:	e7f0      	b.n	8001456 <_vfiprintf_r+0x1da>
 8001474:	ab03      	add	r3, sp, #12
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	462a      	mov	r2, r5
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <_vfiprintf_r+0x258>)
 800147c:	a904      	add	r1, sp, #16
 800147e:	4630      	mov	r0, r6
 8001480:	f3af 8000 	nop.w
 8001484:	4607      	mov	r7, r0
 8001486:	1c78      	adds	r0, r7, #1
 8001488:	d1d6      	bne.n	8001438 <_vfiprintf_r+0x1bc>
 800148a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800148c:	07d9      	lsls	r1, r3, #31
 800148e:	d405      	bmi.n	800149c <_vfiprintf_r+0x220>
 8001490:	89ab      	ldrh	r3, [r5, #12]
 8001492:	059a      	lsls	r2, r3, #22
 8001494:	d402      	bmi.n	800149c <_vfiprintf_r+0x220>
 8001496:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001498:	f7ff fd7f 	bl	8000f9a <__retarget_lock_release_recursive>
 800149c:	89ab      	ldrh	r3, [r5, #12]
 800149e:	065b      	lsls	r3, r3, #25
 80014a0:	f53f af12 	bmi.w	80012c8 <_vfiprintf_r+0x4c>
 80014a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80014a6:	e711      	b.n	80012cc <_vfiprintf_r+0x50>
 80014a8:	ab03      	add	r3, sp, #12
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	462a      	mov	r2, r5
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <_vfiprintf_r+0x258>)
 80014b0:	a904      	add	r1, sp, #16
 80014b2:	4630      	mov	r0, r6
 80014b4:	f000 f880 	bl	80015b8 <_printf_i>
 80014b8:	e7e4      	b.n	8001484 <_vfiprintf_r+0x208>
 80014ba:	bf00      	nop
 80014bc:	08001a30 	.word	0x08001a30
 80014c0:	08001a50 	.word	0x08001a50
 80014c4:	08001a10 	.word	0x08001a10
 80014c8:	08001a70 	.word	0x08001a70
 80014cc:	08001a7a 	.word	0x08001a7a
 80014d0:	00000000 	.word	0x00000000
 80014d4:	08001257 	.word	0x08001257
 80014d8:	08001a76 	.word	0x08001a76

080014dc <_printf_common>:
 80014dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80014e0:	4616      	mov	r6, r2
 80014e2:	4699      	mov	r9, r3
 80014e4:	688a      	ldr	r2, [r1, #8]
 80014e6:	690b      	ldr	r3, [r1, #16]
 80014e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80014ec:	4293      	cmp	r3, r2
 80014ee:	bfb8      	it	lt
 80014f0:	4613      	movlt	r3, r2
 80014f2:	6033      	str	r3, [r6, #0]
 80014f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80014f8:	4607      	mov	r7, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	b10a      	cbz	r2, 8001502 <_printf_common+0x26>
 80014fe:	3301      	adds	r3, #1
 8001500:	6033      	str	r3, [r6, #0]
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	0699      	lsls	r1, r3, #26
 8001506:	bf42      	ittt	mi
 8001508:	6833      	ldrmi	r3, [r6, #0]
 800150a:	3302      	addmi	r3, #2
 800150c:	6033      	strmi	r3, [r6, #0]
 800150e:	6825      	ldr	r5, [r4, #0]
 8001510:	f015 0506 	ands.w	r5, r5, #6
 8001514:	d106      	bne.n	8001524 <_printf_common+0x48>
 8001516:	f104 0a19 	add.w	sl, r4, #25
 800151a:	68e3      	ldr	r3, [r4, #12]
 800151c:	6832      	ldr	r2, [r6, #0]
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	42ab      	cmp	r3, r5
 8001522:	dc26      	bgt.n	8001572 <_printf_common+0x96>
 8001524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001528:	1e13      	subs	r3, r2, #0
 800152a:	6822      	ldr	r2, [r4, #0]
 800152c:	bf18      	it	ne
 800152e:	2301      	movne	r3, #1
 8001530:	0692      	lsls	r2, r2, #26
 8001532:	d42b      	bmi.n	800158c <_printf_common+0xb0>
 8001534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001538:	4649      	mov	r1, r9
 800153a:	4638      	mov	r0, r7
 800153c:	47c0      	blx	r8
 800153e:	3001      	adds	r0, #1
 8001540:	d01e      	beq.n	8001580 <_printf_common+0xa4>
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	68e5      	ldr	r5, [r4, #12]
 8001546:	6832      	ldr	r2, [r6, #0]
 8001548:	f003 0306 	and.w	r3, r3, #6
 800154c:	2b04      	cmp	r3, #4
 800154e:	bf08      	it	eq
 8001550:	1aad      	subeq	r5, r5, r2
 8001552:	68a3      	ldr	r3, [r4, #8]
 8001554:	6922      	ldr	r2, [r4, #16]
 8001556:	bf0c      	ite	eq
 8001558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800155c:	2500      	movne	r5, #0
 800155e:	4293      	cmp	r3, r2
 8001560:	bfc4      	itt	gt
 8001562:	1a9b      	subgt	r3, r3, r2
 8001564:	18ed      	addgt	r5, r5, r3
 8001566:	2600      	movs	r6, #0
 8001568:	341a      	adds	r4, #26
 800156a:	42b5      	cmp	r5, r6
 800156c:	d11a      	bne.n	80015a4 <_printf_common+0xc8>
 800156e:	2000      	movs	r0, #0
 8001570:	e008      	b.n	8001584 <_printf_common+0xa8>
 8001572:	2301      	movs	r3, #1
 8001574:	4652      	mov	r2, sl
 8001576:	4649      	mov	r1, r9
 8001578:	4638      	mov	r0, r7
 800157a:	47c0      	blx	r8
 800157c:	3001      	adds	r0, #1
 800157e:	d103      	bne.n	8001588 <_printf_common+0xac>
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001588:	3501      	adds	r5, #1
 800158a:	e7c6      	b.n	800151a <_printf_common+0x3e>
 800158c:	18e1      	adds	r1, r4, r3
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	2030      	movs	r0, #48	; 0x30
 8001592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001596:	4422      	add	r2, r4
 8001598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800159c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80015a0:	3302      	adds	r3, #2
 80015a2:	e7c7      	b.n	8001534 <_printf_common+0x58>
 80015a4:	2301      	movs	r3, #1
 80015a6:	4622      	mov	r2, r4
 80015a8:	4649      	mov	r1, r9
 80015aa:	4638      	mov	r0, r7
 80015ac:	47c0      	blx	r8
 80015ae:	3001      	adds	r0, #1
 80015b0:	d0e6      	beq.n	8001580 <_printf_common+0xa4>
 80015b2:	3601      	adds	r6, #1
 80015b4:	e7d9      	b.n	800156a <_printf_common+0x8e>
	...

080015b8 <_printf_i>:
 80015b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80015bc:	7e0f      	ldrb	r7, [r1, #24]
 80015be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80015c0:	2f78      	cmp	r7, #120	; 0x78
 80015c2:	4691      	mov	r9, r2
 80015c4:	4680      	mov	r8, r0
 80015c6:	460c      	mov	r4, r1
 80015c8:	469a      	mov	sl, r3
 80015ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80015ce:	d807      	bhi.n	80015e0 <_printf_i+0x28>
 80015d0:	2f62      	cmp	r7, #98	; 0x62
 80015d2:	d80a      	bhi.n	80015ea <_printf_i+0x32>
 80015d4:	2f00      	cmp	r7, #0
 80015d6:	f000 80d8 	beq.w	800178a <_printf_i+0x1d2>
 80015da:	2f58      	cmp	r7, #88	; 0x58
 80015dc:	f000 80a3 	beq.w	8001726 <_printf_i+0x16e>
 80015e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80015e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80015e8:	e03a      	b.n	8001660 <_printf_i+0xa8>
 80015ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80015ee:	2b15      	cmp	r3, #21
 80015f0:	d8f6      	bhi.n	80015e0 <_printf_i+0x28>
 80015f2:	a101      	add	r1, pc, #4	; (adr r1, 80015f8 <_printf_i+0x40>)
 80015f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80015f8:	08001651 	.word	0x08001651
 80015fc:	08001665 	.word	0x08001665
 8001600:	080015e1 	.word	0x080015e1
 8001604:	080015e1 	.word	0x080015e1
 8001608:	080015e1 	.word	0x080015e1
 800160c:	080015e1 	.word	0x080015e1
 8001610:	08001665 	.word	0x08001665
 8001614:	080015e1 	.word	0x080015e1
 8001618:	080015e1 	.word	0x080015e1
 800161c:	080015e1 	.word	0x080015e1
 8001620:	080015e1 	.word	0x080015e1
 8001624:	08001771 	.word	0x08001771
 8001628:	08001695 	.word	0x08001695
 800162c:	08001753 	.word	0x08001753
 8001630:	080015e1 	.word	0x080015e1
 8001634:	080015e1 	.word	0x080015e1
 8001638:	08001793 	.word	0x08001793
 800163c:	080015e1 	.word	0x080015e1
 8001640:	08001695 	.word	0x08001695
 8001644:	080015e1 	.word	0x080015e1
 8001648:	080015e1 	.word	0x080015e1
 800164c:	0800175b 	.word	0x0800175b
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	1d1a      	adds	r2, r3, #4
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	602a      	str	r2, [r5, #0]
 8001658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800165c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001660:	2301      	movs	r3, #1
 8001662:	e0a3      	b.n	80017ac <_printf_i+0x1f4>
 8001664:	6820      	ldr	r0, [r4, #0]
 8001666:	6829      	ldr	r1, [r5, #0]
 8001668:	0606      	lsls	r6, r0, #24
 800166a:	f101 0304 	add.w	r3, r1, #4
 800166e:	d50a      	bpl.n	8001686 <_printf_i+0xce>
 8001670:	680e      	ldr	r6, [r1, #0]
 8001672:	602b      	str	r3, [r5, #0]
 8001674:	2e00      	cmp	r6, #0
 8001676:	da03      	bge.n	8001680 <_printf_i+0xc8>
 8001678:	232d      	movs	r3, #45	; 0x2d
 800167a:	4276      	negs	r6, r6
 800167c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001680:	485e      	ldr	r0, [pc, #376]	; (80017fc <_printf_i+0x244>)
 8001682:	230a      	movs	r3, #10
 8001684:	e019      	b.n	80016ba <_printf_i+0x102>
 8001686:	680e      	ldr	r6, [r1, #0]
 8001688:	602b      	str	r3, [r5, #0]
 800168a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800168e:	bf18      	it	ne
 8001690:	b236      	sxthne	r6, r6
 8001692:	e7ef      	b.n	8001674 <_printf_i+0xbc>
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	6820      	ldr	r0, [r4, #0]
 8001698:	1d19      	adds	r1, r3, #4
 800169a:	6029      	str	r1, [r5, #0]
 800169c:	0601      	lsls	r1, r0, #24
 800169e:	d501      	bpl.n	80016a4 <_printf_i+0xec>
 80016a0:	681e      	ldr	r6, [r3, #0]
 80016a2:	e002      	b.n	80016aa <_printf_i+0xf2>
 80016a4:	0646      	lsls	r6, r0, #25
 80016a6:	d5fb      	bpl.n	80016a0 <_printf_i+0xe8>
 80016a8:	881e      	ldrh	r6, [r3, #0]
 80016aa:	4854      	ldr	r0, [pc, #336]	; (80017fc <_printf_i+0x244>)
 80016ac:	2f6f      	cmp	r7, #111	; 0x6f
 80016ae:	bf0c      	ite	eq
 80016b0:	2308      	moveq	r3, #8
 80016b2:	230a      	movne	r3, #10
 80016b4:	2100      	movs	r1, #0
 80016b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80016ba:	6865      	ldr	r5, [r4, #4]
 80016bc:	60a5      	str	r5, [r4, #8]
 80016be:	2d00      	cmp	r5, #0
 80016c0:	bfa2      	ittt	ge
 80016c2:	6821      	ldrge	r1, [r4, #0]
 80016c4:	f021 0104 	bicge.w	r1, r1, #4
 80016c8:	6021      	strge	r1, [r4, #0]
 80016ca:	b90e      	cbnz	r6, 80016d0 <_printf_i+0x118>
 80016cc:	2d00      	cmp	r5, #0
 80016ce:	d04d      	beq.n	800176c <_printf_i+0x1b4>
 80016d0:	4615      	mov	r5, r2
 80016d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80016d6:	fb03 6711 	mls	r7, r3, r1, r6
 80016da:	5dc7      	ldrb	r7, [r0, r7]
 80016dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80016e0:	4637      	mov	r7, r6
 80016e2:	42bb      	cmp	r3, r7
 80016e4:	460e      	mov	r6, r1
 80016e6:	d9f4      	bls.n	80016d2 <_printf_i+0x11a>
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d10b      	bne.n	8001704 <_printf_i+0x14c>
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	07de      	lsls	r6, r3, #31
 80016f0:	d508      	bpl.n	8001704 <_printf_i+0x14c>
 80016f2:	6923      	ldr	r3, [r4, #16]
 80016f4:	6861      	ldr	r1, [r4, #4]
 80016f6:	4299      	cmp	r1, r3
 80016f8:	bfde      	ittt	le
 80016fa:	2330      	movle	r3, #48	; 0x30
 80016fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001700:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001704:	1b52      	subs	r2, r2, r5
 8001706:	6122      	str	r2, [r4, #16]
 8001708:	f8cd a000 	str.w	sl, [sp]
 800170c:	464b      	mov	r3, r9
 800170e:	aa03      	add	r2, sp, #12
 8001710:	4621      	mov	r1, r4
 8001712:	4640      	mov	r0, r8
 8001714:	f7ff fee2 	bl	80014dc <_printf_common>
 8001718:	3001      	adds	r0, #1
 800171a:	d14c      	bne.n	80017b6 <_printf_i+0x1fe>
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	b004      	add	sp, #16
 8001722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001726:	4835      	ldr	r0, [pc, #212]	; (80017fc <_printf_i+0x244>)
 8001728:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800172c:	6829      	ldr	r1, [r5, #0]
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	f851 6b04 	ldr.w	r6, [r1], #4
 8001734:	6029      	str	r1, [r5, #0]
 8001736:	061d      	lsls	r5, r3, #24
 8001738:	d514      	bpl.n	8001764 <_printf_i+0x1ac>
 800173a:	07df      	lsls	r7, r3, #31
 800173c:	bf44      	itt	mi
 800173e:	f043 0320 	orrmi.w	r3, r3, #32
 8001742:	6023      	strmi	r3, [r4, #0]
 8001744:	b91e      	cbnz	r6, 800174e <_printf_i+0x196>
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	f023 0320 	bic.w	r3, r3, #32
 800174c:	6023      	str	r3, [r4, #0]
 800174e:	2310      	movs	r3, #16
 8001750:	e7b0      	b.n	80016b4 <_printf_i+0xfc>
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	6023      	str	r3, [r4, #0]
 800175a:	2378      	movs	r3, #120	; 0x78
 800175c:	4828      	ldr	r0, [pc, #160]	; (8001800 <_printf_i+0x248>)
 800175e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001762:	e7e3      	b.n	800172c <_printf_i+0x174>
 8001764:	0659      	lsls	r1, r3, #25
 8001766:	bf48      	it	mi
 8001768:	b2b6      	uxthmi	r6, r6
 800176a:	e7e6      	b.n	800173a <_printf_i+0x182>
 800176c:	4615      	mov	r5, r2
 800176e:	e7bb      	b.n	80016e8 <_printf_i+0x130>
 8001770:	682b      	ldr	r3, [r5, #0]
 8001772:	6826      	ldr	r6, [r4, #0]
 8001774:	6961      	ldr	r1, [r4, #20]
 8001776:	1d18      	adds	r0, r3, #4
 8001778:	6028      	str	r0, [r5, #0]
 800177a:	0635      	lsls	r5, r6, #24
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	d501      	bpl.n	8001784 <_printf_i+0x1cc>
 8001780:	6019      	str	r1, [r3, #0]
 8001782:	e002      	b.n	800178a <_printf_i+0x1d2>
 8001784:	0670      	lsls	r0, r6, #25
 8001786:	d5fb      	bpl.n	8001780 <_printf_i+0x1c8>
 8001788:	8019      	strh	r1, [r3, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	6123      	str	r3, [r4, #16]
 800178e:	4615      	mov	r5, r2
 8001790:	e7ba      	b.n	8001708 <_printf_i+0x150>
 8001792:	682b      	ldr	r3, [r5, #0]
 8001794:	1d1a      	adds	r2, r3, #4
 8001796:	602a      	str	r2, [r5, #0]
 8001798:	681d      	ldr	r5, [r3, #0]
 800179a:	6862      	ldr	r2, [r4, #4]
 800179c:	2100      	movs	r1, #0
 800179e:	4628      	mov	r0, r5
 80017a0:	f7fe fd26 	bl	80001f0 <memchr>
 80017a4:	b108      	cbz	r0, 80017aa <_printf_i+0x1f2>
 80017a6:	1b40      	subs	r0, r0, r5
 80017a8:	6060      	str	r0, [r4, #4]
 80017aa:	6863      	ldr	r3, [r4, #4]
 80017ac:	6123      	str	r3, [r4, #16]
 80017ae:	2300      	movs	r3, #0
 80017b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017b4:	e7a8      	b.n	8001708 <_printf_i+0x150>
 80017b6:	6923      	ldr	r3, [r4, #16]
 80017b8:	462a      	mov	r2, r5
 80017ba:	4649      	mov	r1, r9
 80017bc:	4640      	mov	r0, r8
 80017be:	47d0      	blx	sl
 80017c0:	3001      	adds	r0, #1
 80017c2:	d0ab      	beq.n	800171c <_printf_i+0x164>
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	079b      	lsls	r3, r3, #30
 80017c8:	d413      	bmi.n	80017f2 <_printf_i+0x23a>
 80017ca:	68e0      	ldr	r0, [r4, #12]
 80017cc:	9b03      	ldr	r3, [sp, #12]
 80017ce:	4298      	cmp	r0, r3
 80017d0:	bfb8      	it	lt
 80017d2:	4618      	movlt	r0, r3
 80017d4:	e7a4      	b.n	8001720 <_printf_i+0x168>
 80017d6:	2301      	movs	r3, #1
 80017d8:	4632      	mov	r2, r6
 80017da:	4649      	mov	r1, r9
 80017dc:	4640      	mov	r0, r8
 80017de:	47d0      	blx	sl
 80017e0:	3001      	adds	r0, #1
 80017e2:	d09b      	beq.n	800171c <_printf_i+0x164>
 80017e4:	3501      	adds	r5, #1
 80017e6:	68e3      	ldr	r3, [r4, #12]
 80017e8:	9903      	ldr	r1, [sp, #12]
 80017ea:	1a5b      	subs	r3, r3, r1
 80017ec:	42ab      	cmp	r3, r5
 80017ee:	dcf2      	bgt.n	80017d6 <_printf_i+0x21e>
 80017f0:	e7eb      	b.n	80017ca <_printf_i+0x212>
 80017f2:	2500      	movs	r5, #0
 80017f4:	f104 0619 	add.w	r6, r4, #25
 80017f8:	e7f5      	b.n	80017e6 <_printf_i+0x22e>
 80017fa:	bf00      	nop
 80017fc:	08001a81 	.word	0x08001a81
 8001800:	08001a92 	.word	0x08001a92

08001804 <_sbrk_r>:
 8001804:	b538      	push	{r3, r4, r5, lr}
 8001806:	4d06      	ldr	r5, [pc, #24]	; (8001820 <_sbrk_r+0x1c>)
 8001808:	2300      	movs	r3, #0
 800180a:	4604      	mov	r4, r0
 800180c:	4608      	mov	r0, r1
 800180e:	602b      	str	r3, [r5, #0]
 8001810:	f7fe ff98 	bl	8000744 <_sbrk>
 8001814:	1c43      	adds	r3, r0, #1
 8001816:	d102      	bne.n	800181e <_sbrk_r+0x1a>
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	b103      	cbz	r3, 800181e <_sbrk_r+0x1a>
 800181c:	6023      	str	r3, [r4, #0]
 800181e:	bd38      	pop	{r3, r4, r5, pc}
 8001820:	200000c4 	.word	0x200000c4

08001824 <__sread>:
 8001824:	b510      	push	{r4, lr}
 8001826:	460c      	mov	r4, r1
 8001828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800182c:	f000 f8a0 	bl	8001970 <_read_r>
 8001830:	2800      	cmp	r0, #0
 8001832:	bfab      	itete	ge
 8001834:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001836:	89a3      	ldrhlt	r3, [r4, #12]
 8001838:	181b      	addge	r3, r3, r0
 800183a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800183e:	bfac      	ite	ge
 8001840:	6563      	strge	r3, [r4, #84]	; 0x54
 8001842:	81a3      	strhlt	r3, [r4, #12]
 8001844:	bd10      	pop	{r4, pc}

08001846 <__swrite>:
 8001846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800184a:	461f      	mov	r7, r3
 800184c:	898b      	ldrh	r3, [r1, #12]
 800184e:	05db      	lsls	r3, r3, #23
 8001850:	4605      	mov	r5, r0
 8001852:	460c      	mov	r4, r1
 8001854:	4616      	mov	r6, r2
 8001856:	d505      	bpl.n	8001864 <__swrite+0x1e>
 8001858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800185c:	2302      	movs	r3, #2
 800185e:	2200      	movs	r2, #0
 8001860:	f000 f868 	bl	8001934 <_lseek_r>
 8001864:	89a3      	ldrh	r3, [r4, #12]
 8001866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800186a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800186e:	81a3      	strh	r3, [r4, #12]
 8001870:	4632      	mov	r2, r6
 8001872:	463b      	mov	r3, r7
 8001874:	4628      	mov	r0, r5
 8001876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800187a:	f000 b817 	b.w	80018ac <_write_r>

0800187e <__sseek>:
 800187e:	b510      	push	{r4, lr}
 8001880:	460c      	mov	r4, r1
 8001882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001886:	f000 f855 	bl	8001934 <_lseek_r>
 800188a:	1c43      	adds	r3, r0, #1
 800188c:	89a3      	ldrh	r3, [r4, #12]
 800188e:	bf15      	itete	ne
 8001890:	6560      	strne	r0, [r4, #84]	; 0x54
 8001892:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001896:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800189a:	81a3      	strheq	r3, [r4, #12]
 800189c:	bf18      	it	ne
 800189e:	81a3      	strhne	r3, [r4, #12]
 80018a0:	bd10      	pop	{r4, pc}

080018a2 <__sclose>:
 80018a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018a6:	f000 b813 	b.w	80018d0 <_close_r>
	...

080018ac <_write_r>:
 80018ac:	b538      	push	{r3, r4, r5, lr}
 80018ae:	4d07      	ldr	r5, [pc, #28]	; (80018cc <_write_r+0x20>)
 80018b0:	4604      	mov	r4, r0
 80018b2:	4608      	mov	r0, r1
 80018b4:	4611      	mov	r1, r2
 80018b6:	2200      	movs	r2, #0
 80018b8:	602a      	str	r2, [r5, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	f7fe fef2 	bl	80006a4 <_write>
 80018c0:	1c43      	adds	r3, r0, #1
 80018c2:	d102      	bne.n	80018ca <_write_r+0x1e>
 80018c4:	682b      	ldr	r3, [r5, #0]
 80018c6:	b103      	cbz	r3, 80018ca <_write_r+0x1e>
 80018c8:	6023      	str	r3, [r4, #0]
 80018ca:	bd38      	pop	{r3, r4, r5, pc}
 80018cc:	200000c4 	.word	0x200000c4

080018d0 <_close_r>:
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4d06      	ldr	r5, [pc, #24]	; (80018ec <_close_r+0x1c>)
 80018d4:	2300      	movs	r3, #0
 80018d6:	4604      	mov	r4, r0
 80018d8:	4608      	mov	r0, r1
 80018da:	602b      	str	r3, [r5, #0]
 80018dc:	f7fe fefe 	bl	80006dc <_close>
 80018e0:	1c43      	adds	r3, r0, #1
 80018e2:	d102      	bne.n	80018ea <_close_r+0x1a>
 80018e4:	682b      	ldr	r3, [r5, #0]
 80018e6:	b103      	cbz	r3, 80018ea <_close_r+0x1a>
 80018e8:	6023      	str	r3, [r4, #0]
 80018ea:	bd38      	pop	{r3, r4, r5, pc}
 80018ec:	200000c4 	.word	0x200000c4

080018f0 <_fstat_r>:
 80018f0:	b538      	push	{r3, r4, r5, lr}
 80018f2:	4d07      	ldr	r5, [pc, #28]	; (8001910 <_fstat_r+0x20>)
 80018f4:	2300      	movs	r3, #0
 80018f6:	4604      	mov	r4, r0
 80018f8:	4608      	mov	r0, r1
 80018fa:	4611      	mov	r1, r2
 80018fc:	602b      	str	r3, [r5, #0]
 80018fe:	f7fe fef9 	bl	80006f4 <_fstat>
 8001902:	1c43      	adds	r3, r0, #1
 8001904:	d102      	bne.n	800190c <_fstat_r+0x1c>
 8001906:	682b      	ldr	r3, [r5, #0]
 8001908:	b103      	cbz	r3, 800190c <_fstat_r+0x1c>
 800190a:	6023      	str	r3, [r4, #0]
 800190c:	bd38      	pop	{r3, r4, r5, pc}
 800190e:	bf00      	nop
 8001910:	200000c4 	.word	0x200000c4

08001914 <_isatty_r>:
 8001914:	b538      	push	{r3, r4, r5, lr}
 8001916:	4d06      	ldr	r5, [pc, #24]	; (8001930 <_isatty_r+0x1c>)
 8001918:	2300      	movs	r3, #0
 800191a:	4604      	mov	r4, r0
 800191c:	4608      	mov	r0, r1
 800191e:	602b      	str	r3, [r5, #0]
 8001920:	f7fe fef8 	bl	8000714 <_isatty>
 8001924:	1c43      	adds	r3, r0, #1
 8001926:	d102      	bne.n	800192e <_isatty_r+0x1a>
 8001928:	682b      	ldr	r3, [r5, #0]
 800192a:	b103      	cbz	r3, 800192e <_isatty_r+0x1a>
 800192c:	6023      	str	r3, [r4, #0]
 800192e:	bd38      	pop	{r3, r4, r5, pc}
 8001930:	200000c4 	.word	0x200000c4

08001934 <_lseek_r>:
 8001934:	b538      	push	{r3, r4, r5, lr}
 8001936:	4d07      	ldr	r5, [pc, #28]	; (8001954 <_lseek_r+0x20>)
 8001938:	4604      	mov	r4, r0
 800193a:	4608      	mov	r0, r1
 800193c:	4611      	mov	r1, r2
 800193e:	2200      	movs	r2, #0
 8001940:	602a      	str	r2, [r5, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	f7fe fef1 	bl	800072a <_lseek>
 8001948:	1c43      	adds	r3, r0, #1
 800194a:	d102      	bne.n	8001952 <_lseek_r+0x1e>
 800194c:	682b      	ldr	r3, [r5, #0]
 800194e:	b103      	cbz	r3, 8001952 <_lseek_r+0x1e>
 8001950:	6023      	str	r3, [r4, #0]
 8001952:	bd38      	pop	{r3, r4, r5, pc}
 8001954:	200000c4 	.word	0x200000c4

08001958 <__malloc_lock>:
 8001958:	4801      	ldr	r0, [pc, #4]	; (8001960 <__malloc_lock+0x8>)
 800195a:	f7ff bb1d 	b.w	8000f98 <__retarget_lock_acquire_recursive>
 800195e:	bf00      	nop
 8001960:	200000b8 	.word	0x200000b8

08001964 <__malloc_unlock>:
 8001964:	4801      	ldr	r0, [pc, #4]	; (800196c <__malloc_unlock+0x8>)
 8001966:	f7ff bb18 	b.w	8000f9a <__retarget_lock_release_recursive>
 800196a:	bf00      	nop
 800196c:	200000b8 	.word	0x200000b8

08001970 <_read_r>:
 8001970:	b538      	push	{r3, r4, r5, lr}
 8001972:	4d07      	ldr	r5, [pc, #28]	; (8001990 <_read_r+0x20>)
 8001974:	4604      	mov	r4, r0
 8001976:	4608      	mov	r0, r1
 8001978:	4611      	mov	r1, r2
 800197a:	2200      	movs	r2, #0
 800197c:	602a      	str	r2, [r5, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	f7fe fe73 	bl	800066a <_read>
 8001984:	1c43      	adds	r3, r0, #1
 8001986:	d102      	bne.n	800198e <_read_r+0x1e>
 8001988:	682b      	ldr	r3, [r5, #0]
 800198a:	b103      	cbz	r3, 800198e <_read_r+0x1e>
 800198c:	6023      	str	r3, [r4, #0]
 800198e:	bd38      	pop	{r3, r4, r5, pc}
 8001990:	200000c4 	.word	0x200000c4

08001994 <_init>:
 8001994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001996:	bf00      	nop
 8001998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800199a:	bc08      	pop	{r3}
 800199c:	469e      	mov	lr, r3
 800199e:	4770      	bx	lr

080019a0 <_fini>:
 80019a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a2:	bf00      	nop
 80019a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019a6:	bc08      	pop	{r3}
 80019a8:	469e      	mov	lr, r3
 80019aa:	4770      	bx	lr
