
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08003f9c  08003f9c  00013f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c0  080040c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040c8  080040c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c8  080040c8  000140c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040cc  080040cc  000140cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080040d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004090  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004104  20004104  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001058f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029a5  00000000  00000000  00030633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  00032fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de0  00000000  00000000  00033f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023495  00000000  00000000  00034ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107ce  00000000  00000000  00058175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2983  00000000  00000000  00068943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b2c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004430  00000000  00000000  0013b318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f84 	.word	0x08003f84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003f84 	.word	0x08003f84

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	e000      	b.n	8000500 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	; (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	2000009c 	.word	0x2000009c
 8000554:	20000150 	.word	0x20000150

08000558 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b096      	sub	sp, #88	; 0x58
 800055c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800055e:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <MX_FREERTOS_Init+0x7c>)
 8000560:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000564:	461d      	mov	r5, r3
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800056e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000572:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000576:	2100      	movs	r1, #0
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fd0c 	bl	8001f96 <osThreadCreate>
 800057e:	4603      	mov	r3, r0
 8000580:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <MX_FREERTOS_Init+0x80>)
 8000582:	6013      	str	r3, [r2, #0]

  /* definition and creation of Led1 */
  osThreadDef(Led1, task_led1, osPriorityNormal, 0, 128);
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_FREERTOS_Init+0x84>)
 8000586:	f107 0420 	add.w	r4, r7, #32
 800058a:	461d      	mov	r5, r3
 800058c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Led1Handle = osThreadCreate(osThread(Led1), NULL);
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fcf9 	bl	8001f96 <osThreadCreate>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <MX_FREERTOS_Init+0x88>)
 80005a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of led2 */
  osThreadDef(led2, task_led2, osPriorityNormal, 0, 128);
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_FREERTOS_Init+0x8c>)
 80005ac:	1d3c      	adds	r4, r7, #4
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  led2Handle = osThreadCreate(osThread(led2), NULL);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f001 fce8 	bl	8001f96 <osThreadCreate>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <MX_FREERTOS_Init+0x90>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005cc:	bf00      	nop
 80005ce:	3758      	adds	r7, #88	; 0x58
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bdb0      	pop	{r4, r5, r7, pc}
 80005d4:	08003fb8 	.word	0x08003fb8
 80005d8:	20000090 	.word	0x20000090
 80005dc:	08003fd4 	.word	0x08003fd4
 80005e0:	20000094 	.word	0x20000094
 80005e4:	08003ff0 	.word	0x08003ff0
 80005e8:	20000098 	.word	0x20000098

080005ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f001 fd1a 	bl	800202e <osDelay>
 80005fa:	e7fb      	b.n	80005f4 <StartDefaultTask+0x8>

080005fc <task_led1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_led1 */
void task_led1(void const * argument)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_led1 */
  /* Infinite loop */
  for(;;)
  {
	  printf("1->[tarea 1 running]\r\n");
 8000604:	4805      	ldr	r0, [pc, #20]	; (800061c <task_led1+0x20>)
 8000606:	f003 f94f 	bl	80038a8 <puts>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800060a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <task_led1+0x24>)
 8000610:	f000 fd63 	bl	80010da <HAL_GPIO_TogglePin>
    osDelay(100);
 8000614:	2064      	movs	r0, #100	; 0x64
 8000616:	f001 fd0a 	bl	800202e <osDelay>
	  printf("1->[tarea 1 running]\r\n");
 800061a:	e7f3      	b.n	8000604 <task_led1+0x8>
 800061c:	0800400c 	.word	0x0800400c
 8000620:	40020c00 	.word	0x40020c00

08000624 <task_led2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_led2 */
void task_led2(void const * argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_led2 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800062c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <task_led2+0x20>)
 8000632:	f000 fd52 	bl	80010da <HAL_GPIO_TogglePin>
	  printf("2->[tarea 2 running]\r\n");
 8000636:	4804      	ldr	r0, [pc, #16]	; (8000648 <task_led2+0x24>)
 8000638:	f003 f936 	bl	80038a8 <puts>
    osDelay(100);
 800063c:	2064      	movs	r0, #100	; 0x64
 800063e:	f001 fcf6 	bl	800202e <osDelay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000642:	e7f3      	b.n	800062c <task_led2+0x8>
 8000644:	40020c00 	.word	0x40020c00
 8000648:	08004024 	.word	0x08004024

0800064c <__io_putchar>:
  /* USER CODE END task_led2 */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
int __io_putchar(int ch){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff3c 	bl	80004d4 <ITM_SendChar>
	return ch;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_GPIO_Init+0x60>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <MX_GPIO_Init+0x60>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	6313      	str	r3, [r2, #48]	; 0x30
 800068c:	4b0e      	ldr	r3, [pc, #56]	; (80006c8 <MX_GPIO_Init+0x60>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	f003 0308 	and.w	r3, r3, #8
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <MX_GPIO_Init+0x64>)
 80006a0:	f000 fd02 	bl	80010a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80006a4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_GPIO_Init+0x64>)
 80006bc:	f000 fb58 	bl	8000d70 <HAL_GPIO_Init>

}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40020c00 	.word	0x40020c00

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 fa28 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f808 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f7ff ffc4 	bl	8000668 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80006e0:	f7ff ff3a 	bl	8000558 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80006e4:	f001 fc50 	bl	8001f88 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <main+0x18>
	...

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	; 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	; 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 ffc9 	bl	8003692 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemClock_Config+0xb4>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemClock_Config+0xb4>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SystemClock_Config+0xb4>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <SystemClock_Config+0xb8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemClock_Config+0xb8>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <SystemClock_Config+0xb8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000754:	2300      	movs	r3, #0
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fcd7 	bl	8001110 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000768:	f000 f830 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f000 ff3a 	bl	8001600 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000792:	f000 f81b 	bl	80007cc <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d101      	bne.n	80007be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ba:	f000 f9d7 	bl	8000b6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40001000 	.word	0x40001000

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <HAL_MspInit+0x54>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a11      	ldr	r2, [pc, #68]	; (800082c <HAL_MspInit+0x54>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <HAL_MspInit+0x54>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_MspInit+0x54>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <HAL_MspInit+0x54>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_MspInit+0x54>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	210f      	movs	r1, #15
 800081a:	f06f 0001 	mvn.w	r0, #1
 800081e:	f000 fa7d 	bl	8000d1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800

08000830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08e      	sub	sp, #56	; 0x38
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800083c:	2300      	movs	r3, #0
 800083e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	4b33      	ldr	r3, [pc, #204]	; (8000914 <HAL_InitTick+0xe4>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	4a32      	ldr	r2, [pc, #200]	; (8000914 <HAL_InitTick+0xe4>)
 800084a:	f043 0310 	orr.w	r3, r3, #16
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
 8000850:	4b30      	ldr	r3, [pc, #192]	; (8000914 <HAL_InitTick+0xe4>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	f003 0310 	and.w	r3, r3, #16
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800085c:	f107 0210 	add.w	r2, r7, #16
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4611      	mov	r1, r2
 8000866:	4618      	mov	r0, r3
 8000868:	f001 f896 	bl	8001998 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800086c:	6a3b      	ldr	r3, [r7, #32]
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000872:	2b00      	cmp	r3, #0
 8000874:	d103      	bne.n	800087e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000876:	f001 f87b 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 800087a:	6378      	str	r0, [r7, #52]	; 0x34
 800087c:	e004      	b.n	8000888 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800087e:	f001 f877 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 8000882:	4603      	mov	r3, r0
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <HAL_InitTick+0xe8>)
 800088c:	fba2 2303 	umull	r2, r3, r2, r3
 8000890:	0c9b      	lsrs	r3, r3, #18
 8000892:	3b01      	subs	r3, #1
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <HAL_InitTick+0xec>)
 8000898:	4a21      	ldr	r2, [pc, #132]	; (8000920 <HAL_InitTick+0xf0>)
 800089a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <HAL_InitTick+0xec>)
 800089e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008a4:	4a1d      	ldr	r2, [pc, #116]	; (800091c <HAL_InitTick+0xec>)
 80008a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <HAL_InitTick+0xec>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b0:	4b1a      	ldr	r3, [pc, #104]	; (800091c <HAL_InitTick+0xec>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_InitTick+0xec>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008bc:	4817      	ldr	r0, [pc, #92]	; (800091c <HAL_InitTick+0xec>)
 80008be:	f001 f89d 	bl	80019fc <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d11b      	bne.n	8000908 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008d0:	4812      	ldr	r0, [pc, #72]	; (800091c <HAL_InitTick+0xec>)
 80008d2:	f001 f8ed 	bl	8001ab0 <HAL_TIM_Base_Start_IT>
 80008d6:	4603      	mov	r3, r0
 80008d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d111      	bne.n	8000908 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008e4:	2036      	movs	r0, #54	; 0x36
 80008e6:	f000 fa35 	bl	8000d54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d808      	bhi.n	8000902 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	2036      	movs	r0, #54	; 0x36
 80008f6:	f000 fa11 	bl	8000d1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <HAL_InitTick+0xf4>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	e002      	b.n	8000908 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000908:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800090c:	4618      	mov	r0, r3
 800090e:	3738      	adds	r7, #56	; 0x38
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	431bde83 	.word	0x431bde83
 800091c:	20000350 	.word	0x20000350
 8000920:	40001000 	.word	0x40001000
 8000924:	20000004 	.word	0x20000004

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800092c:	e7fe      	b.n	800092c <NMI_Handler+0x4>

0800092e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000932:	e7fe      	b.n	8000932 <HardFault_Handler+0x4>

08000934 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <MemManage_Handler+0x4>

0800093a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <BusFault_Handler+0x4>

08000940 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <UsageFault_Handler+0x4>

08000946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000958:	4802      	ldr	r0, [pc, #8]	; (8000964 <TIM6_DAC_IRQHandler+0x10>)
 800095a:	f001 f919 	bl	8001b90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000350 	.word	0x20000350

08000968 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	e00a      	b.n	8000990 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800097a:	f3af 8000 	nop.w
 800097e:	4601      	mov	r1, r0
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	1c5a      	adds	r2, r3, #1
 8000984:	60ba      	str	r2, [r7, #8]
 8000986:	b2ca      	uxtb	r2, r1
 8000988:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	3301      	adds	r3, #1
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697a      	ldr	r2, [r7, #20]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	429a      	cmp	r2, r3
 8000996:	dbf0      	blt.n	800097a <_read+0x12>
  }

  return len;
 8000998:	687b      	ldr	r3, [r7, #4]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3718      	adds	r7, #24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
 80009b2:	e009      	b.n	80009c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	60ba      	str	r2, [r7, #8]
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe45 	bl	800064c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	3301      	adds	r3, #1
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697a      	ldr	r2, [r7, #20]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	dbf1      	blt.n	80009b4 <_write+0x12>
  }
  return len;
 80009d0:	687b      	ldr	r3, [r7, #4]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <_close>:

int _close(int file)
{
 80009da:	b480      	push	{r7}
 80009dc:	b083      	sub	sp, #12
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f2:	b480      	push	{r7}
 80009f4:	b083      	sub	sp, #12
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
 80009fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a02:	605a      	str	r2, [r3, #4]
  return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_isatty>:

int _isatty(int file)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a1a:	2301      	movs	r3, #1
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a4c:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <_sbrk+0x5c>)
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <_sbrk+0x60>)
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <_sbrk+0x64>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d102      	bne.n	8000a66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <_sbrk+0x64>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <_sbrk+0x68>)
 8000a64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <_sbrk+0x64>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d207      	bcs.n	8000a84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a74:	f002 fcea 	bl	800344c <__errno>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	e009      	b.n	8000a98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <_sbrk+0x64>)
 8000a94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a96:	68fb      	ldr	r3, [r7, #12]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3718      	adds	r7, #24
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20020000 	.word	0x20020000
 8000aa4:	00000400 	.word	0x00000400
 8000aa8:	20000398 	.word	0x20000398
 8000aac:	20004108 	.word	0x20004108

08000ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <SystemInit+0x20>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <SystemInit+0x20>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ada:	490e      	ldr	r1, [pc, #56]	; (8000b14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000adc:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0b      	ldr	r2, [pc, #44]	; (8000b1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af0:	4c0b      	ldr	r4, [pc, #44]	; (8000b20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000afe:	f7ff ffd7 	bl	8000ab0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b02:	f002 fd9f 	bl	8003644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b06:	f7ff fde3 	bl	80006d0 <main>
  bx  lr    
 8000b0a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b18:	080040d0 	.word	0x080040d0
  ldr r2, =_sbss
 8000b1c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b20:	20004104 	.word	0x20004104

08000b24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <HAL_Init+0x40>)
 8000b32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <HAL_Init+0x40>)
 8000b3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_Init+0x40>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <HAL_Init+0x40>)
 8000b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f8d8 	bl	8000d06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	200f      	movs	r0, #15
 8000b58:	f7ff fe6a 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff fe3c 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023c00 	.word	0x40023c00

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	2000039c 	.word	0x2000039c

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	2000039c 	.word	0x2000039c

08000bac <__NVIC_SetPriorityGrouping>:
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4907      	ldr	r1, [pc, #28]	; (8000c48 <__NVIC_EnableIRQ+0x38>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ff4c 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2e:	f7ff ff61 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	68b9      	ldr	r1, [r7, #8]
 8000d38:	6978      	ldr	r0, [r7, #20]
 8000d3a:	f7ff ffb1 	bl	8000ca0 <NVIC_EncodePriority>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d44:	4611      	mov	r1, r2
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff ff80 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d4c:	bf00      	nop
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff54 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b089      	sub	sp, #36	; 0x24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	e16b      	b.n	8001064 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	f040 815a 	bne.w	800105e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d005      	beq.n	8000dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d130      	bne.n	8000e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	68da      	ldr	r2, [r3, #12]
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df8:	2201      	movs	r2, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	f003 0201 	and.w	r2, r3, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0303 	and.w	r3, r3, #3
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d017      	beq.n	8000e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d123      	bne.n	8000eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	08da      	lsrs	r2, r3, #3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	220f      	movs	r2, #15
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	08da      	lsrs	r2, r3, #3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3208      	adds	r2, #8
 8000eae:	69b9      	ldr	r1, [r7, #24]
 8000eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0203 	and.w	r2, r3, #3
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f000 80b4 	beq.w	800105e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b60      	ldr	r3, [pc, #384]	; (800107c <HAL_GPIO_Init+0x30c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a5f      	ldr	r2, [pc, #380]	; (800107c <HAL_GPIO_Init+0x30c>)
 8000f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b5d      	ldr	r3, [pc, #372]	; (800107c <HAL_GPIO_Init+0x30c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f12:	4a5b      	ldr	r2, [pc, #364]	; (8001080 <HAL_GPIO_Init+0x310>)
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	3302      	adds	r3, #2
 8000f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	220f      	movs	r2, #15
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	4013      	ands	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a52      	ldr	r2, [pc, #328]	; (8001084 <HAL_GPIO_Init+0x314>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d02b      	beq.n	8000f96 <HAL_GPIO_Init+0x226>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a51      	ldr	r2, [pc, #324]	; (8001088 <HAL_GPIO_Init+0x318>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d025      	beq.n	8000f92 <HAL_GPIO_Init+0x222>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a50      	ldr	r2, [pc, #320]	; (800108c <HAL_GPIO_Init+0x31c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01f      	beq.n	8000f8e <HAL_GPIO_Init+0x21e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	; (8001090 <HAL_GPIO_Init+0x320>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x21a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	; (8001094 <HAL_GPIO_Init+0x324>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x216>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	; (8001098 <HAL_GPIO_Init+0x328>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x212>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x32c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x20e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	; (80010a0 <HAL_GPIO_Init+0x330>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x20a>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00e      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f7a:	2308      	movs	r3, #8
 8000f7c:	e00c      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f7e:	2306      	movs	r3, #6
 8000f80:	e00a      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e008      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x228>
 8000f96:	2300      	movs	r3, #0
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	f002 0203 	and.w	r2, r2, #3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa8:	4935      	ldr	r1, [pc, #212]	; (8001080 <HAL_GPIO_Init+0x310>)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fda:	4a32      	ldr	r2, [pc, #200]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe0:	4b30      	ldr	r3, [pc, #192]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001004:	4a27      	ldr	r2, [pc, #156]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <HAL_GPIO_Init+0x334>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102e:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_GPIO_Init+0x334>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <HAL_GPIO_Init+0x334>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	f67f ae90 	bls.w	8000d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40013800 	.word	0x40013800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40021c00 	.word	0x40021c00
 80010a4:	40013c00 	.word	0x40013c00

080010a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
 80010b4:	4613      	mov	r3, r2
 80010b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b8:	787b      	ldrb	r3, [r7, #1]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c4:	e003      	b.n	80010ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010ec:	887a      	ldrh	r2, [r7, #2]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4013      	ands	r3, r2
 80010f2:	041a      	lsls	r2, r3, #16
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	400b      	ands	r3, r1
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	619a      	str	r2, [r3, #24]
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e267      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d075      	beq.n	800121a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800112e:	4b88      	ldr	r3, [pc, #544]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b04      	cmp	r3, #4
 8001138:	d00c      	beq.n	8001154 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113a:	4b85      	ldr	r3, [pc, #532]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001142:	2b08      	cmp	r3, #8
 8001144:	d112      	bne.n	800116c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001146:	4b82      	ldr	r3, [pc, #520]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001152:	d10b      	bne.n	800116c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001154:	4b7e      	ldr	r3, [pc, #504]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d05b      	beq.n	8001218 <HAL_RCC_OscConfig+0x108>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d157      	bne.n	8001218 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e242      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001174:	d106      	bne.n	8001184 <HAL_RCC_OscConfig+0x74>
 8001176:	4b76      	ldr	r3, [pc, #472]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a75      	ldr	r2, [pc, #468]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e01d      	b.n	80011c0 <HAL_RCC_OscConfig+0xb0>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0x98>
 800118e:	4b70      	ldr	r3, [pc, #448]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a6f      	ldr	r2, [pc, #444]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b6d      	ldr	r3, [pc, #436]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a6c      	ldr	r2, [pc, #432]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e00b      	b.n	80011c0 <HAL_RCC_OscConfig+0xb0>
 80011a8:	4b69      	ldr	r3, [pc, #420]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a68      	ldr	r2, [pc, #416]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80011ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b66      	ldr	r3, [pc, #408]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a65      	ldr	r2, [pc, #404]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80011ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fce4 	bl	8000b94 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fce0 	bl	8000b94 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e207      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	4b5b      	ldr	r3, [pc, #364]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0xc0>
 80011ee:	e014      	b.n	800121a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fcd0 	bl	8000b94 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fccc 	bl	8000b94 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e1f3      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	4b51      	ldr	r3, [pc, #324]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0xe8>
 8001216:	e000      	b.n	800121a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d063      	beq.n	80012ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001226:	4b4a      	ldr	r3, [pc, #296]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00b      	beq.n	800124a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800123a:	2b08      	cmp	r3, #8
 800123c:	d11c      	bne.n	8001278 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800123e:	4b44      	ldr	r3, [pc, #272]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d116      	bne.n	8001278 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124a:	4b41      	ldr	r3, [pc, #260]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <HAL_RCC_OscConfig+0x152>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d001      	beq.n	8001262 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e1c7      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4937      	ldr	r1, [pc, #220]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001276:	e03a      	b.n	80012ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d020      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001280:	4b34      	ldr	r3, [pc, #208]	; (8001354 <HAL_RCC_OscConfig+0x244>)
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001286:	f7ff fc85 	bl	8000b94 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128e:	f7ff fc81 	bl	8000b94 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e1a8      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4925      	ldr	r1, [pc, #148]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
 80012c0:	e015      	b.n	80012ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c2:	4b24      	ldr	r3, [pc, #144]	; (8001354 <HAL_RCC_OscConfig+0x244>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fc64 	bl	8000b94 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fc60 	bl	8000b94 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e187      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d036      	beq.n	8001368 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d016      	beq.n	8001330 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_RCC_OscConfig+0x248>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001308:	f7ff fc44 	bl	8000b94 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001310:	f7ff fc40 	bl	8000b94 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e167      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_RCC_OscConfig+0x240>)
 8001324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x200>
 800132e:	e01b      	b.n	8001368 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_RCC_OscConfig+0x248>)
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001336:	f7ff fc2d 	bl	8000b94 <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	e00e      	b.n	800135c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800133e:	f7ff fc29 	bl	8000b94 <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d907      	bls.n	800135c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e150      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
 8001350:	40023800 	.word	0x40023800
 8001354:	42470000 	.word	0x42470000
 8001358:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135c:	4b88      	ldr	r3, [pc, #544]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800135e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1ea      	bne.n	800133e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 8097 	beq.w	80014a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001376:	2300      	movs	r3, #0
 8001378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800137a:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d10f      	bne.n	80013a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b7d      	ldr	r3, [pc, #500]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a7c      	ldr	r2, [pc, #496]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013a2:	2301      	movs	r3, #1
 80013a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a6:	4b77      	ldr	r3, [pc, #476]	; (8001584 <HAL_RCC_OscConfig+0x474>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d118      	bne.n	80013e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b2:	4b74      	ldr	r3, [pc, #464]	; (8001584 <HAL_RCC_OscConfig+0x474>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a73      	ldr	r2, [pc, #460]	; (8001584 <HAL_RCC_OscConfig+0x474>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013be:	f7ff fbe9 	bl	8000b94 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013c6:	f7ff fbe5 	bl	8000b94 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e10c      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	4b6a      	ldr	r3, [pc, #424]	; (8001584 <HAL_RCC_OscConfig+0x474>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f0      	beq.n	80013c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x2ea>
 80013ec:	4b64      	ldr	r3, [pc, #400]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 80013ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f0:	4a63      	ldr	r2, [pc, #396]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	6713      	str	r3, [r2, #112]	; 0x70
 80013f8:	e01c      	b.n	8001434 <HAL_RCC_OscConfig+0x324>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b05      	cmp	r3, #5
 8001400:	d10c      	bne.n	800141c <HAL_RCC_OscConfig+0x30c>
 8001402:	4b5f      	ldr	r3, [pc, #380]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	4a5e      	ldr	r2, [pc, #376]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6713      	str	r3, [r2, #112]	; 0x70
 800140e:	4b5c      	ldr	r3, [pc, #368]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001412:	4a5b      	ldr	r2, [pc, #364]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6713      	str	r3, [r2, #112]	; 0x70
 800141a:	e00b      	b.n	8001434 <HAL_RCC_OscConfig+0x324>
 800141c:	4b58      	ldr	r3, [pc, #352]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	4a57      	ldr	r2, [pc, #348]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	6713      	str	r3, [r2, #112]	; 0x70
 8001428:	4b55      	ldr	r3, [pc, #340]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	4a54      	ldr	r2, [pc, #336]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800142e:	f023 0304 	bic.w	r3, r3, #4
 8001432:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d015      	beq.n	8001468 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fbaa 	bl	8000b94 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001442:	e00a      	b.n	800145a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001444:	f7ff fba6 	bl	8000b94 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001452:	4293      	cmp	r3, r2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e0cb      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145a:	4b49      	ldr	r3, [pc, #292]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800145c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0ee      	beq.n	8001444 <HAL_RCC_OscConfig+0x334>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001468:	f7ff fb94 	bl	8000b94 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146e:	e00a      	b.n	8001486 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001470:	f7ff fb90 	bl	8000b94 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	; 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e0b5      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001486:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1ee      	bne.n	8001470 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001492:	7dfb      	ldrb	r3, [r7, #23]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d105      	bne.n	80014a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	4a38      	ldr	r2, [pc, #224]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800149e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80a1 	beq.w	80015f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b08      	cmp	r3, #8
 80014b8:	d05c      	beq.n	8001574 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d141      	bne.n	8001546 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c2:	4b31      	ldr	r3, [pc, #196]	; (8001588 <HAL_RCC_OscConfig+0x478>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb64 	bl	8000b94 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff fb60 	bl	8000b94 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e087      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69da      	ldr	r2, [r3, #28]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	019b      	lsls	r3, r3, #6
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	085b      	lsrs	r3, r3, #1
 8001506:	3b01      	subs	r3, #1
 8001508:	041b      	lsls	r3, r3, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001510:	061b      	lsls	r3, r3, #24
 8001512:	491b      	ldr	r1, [pc, #108]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_RCC_OscConfig+0x478>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fb39 	bl	8000b94 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff fb35 	bl	8000b94 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e05c      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x416>
 8001544:	e054      	b.n	80015f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_RCC_OscConfig+0x478>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fb22 	bl	8000b94 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff fb1e 	bl	8000b94 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e045      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_RCC_OscConfig+0x470>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x444>
 8001572:	e03d      	b.n	80015f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d107      	bne.n	800158c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e038      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
 8001580:	40023800 	.word	0x40023800
 8001584:	40007000 	.word	0x40007000
 8001588:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_RCC_OscConfig+0x4ec>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d028      	beq.n	80015ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d121      	bne.n	80015ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d11a      	bne.n	80015ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015bc:	4013      	ands	r3, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d111      	bne.n	80015ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d2:	085b      	lsrs	r3, r3, #1
 80015d4:	3b01      	subs	r3, #1
 80015d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d107      	bne.n	80015ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e000      	b.n	80015f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0cc      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001614:	4b68      	ldr	r3, [pc, #416]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d90c      	bls.n	800163c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b65      	ldr	r3, [pc, #404]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800162a:	4b63      	ldr	r3, [pc, #396]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d001      	beq.n	800163c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0b8      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d020      	beq.n	800168a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d005      	beq.n	8001660 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001654:	4b59      	ldr	r3, [pc, #356]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	4a58      	ldr	r2, [pc, #352]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800165e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800166c:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4a52      	ldr	r2, [pc, #328]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001678:	4b50      	ldr	r3, [pc, #320]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	494d      	ldr	r1, [pc, #308]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	4313      	orrs	r3, r2
 8001688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	d044      	beq.n	8001720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169e:	4b47      	ldr	r3, [pc, #284]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d119      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e07f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d003      	beq.n	80016be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016be:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e06f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ce:	4b3b      	ldr	r3, [pc, #236]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e067      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016de:	4b37      	ldr	r3, [pc, #220]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f023 0203 	bic.w	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4934      	ldr	r1, [pc, #208]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f0:	f7ff fa50 	bl	8000b94 <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f6:	e00a      	b.n	800170e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f8:	f7ff fa4c 	bl	8000b94 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e04f      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 020c 	and.w	r2, r3, #12
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	429a      	cmp	r2, r3
 800171e:	d1eb      	bne.n	80016f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001720:	4b25      	ldr	r3, [pc, #148]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d20c      	bcs.n	8001748 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	429a      	cmp	r2, r3
 8001742:	d001      	beq.n	8001748 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e032      	b.n	80017ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001754:	4b19      	ldr	r3, [pc, #100]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	4916      	ldr	r1, [pc, #88]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b00      	cmp	r3, #0
 8001770:	d009      	beq.n	8001786 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	490e      	ldr	r1, [pc, #56]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	4313      	orrs	r3, r2
 8001784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001786:	f000 f821 	bl	80017cc <HAL_RCC_GetSysClockFreq>
 800178a:	4602      	mov	r2, r0
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	490a      	ldr	r1, [pc, #40]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	5ccb      	ldrb	r3, [r1, r3]
 800179a:	fa22 f303 	lsr.w	r3, r2, r3
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_RCC_ClockConfig+0x1c8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff f842 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023c00 	.word	0x40023c00
 80017bc:	40023800 	.word	0x40023800
 80017c0:	08004044 	.word	0x08004044
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000004 	.word	0x20000004

080017cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d0:	b090      	sub	sp, #64	; 0x40
 80017d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	637b      	str	r3, [r7, #52]	; 0x34
 80017d8:	2300      	movs	r3, #0
 80017da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017dc:	2300      	movs	r3, #0
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017e4:	4b59      	ldr	r3, [pc, #356]	; (800194c <HAL_RCC_GetSysClockFreq+0x180>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d00d      	beq.n	800180c <HAL_RCC_GetSysClockFreq+0x40>
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	f200 80a1 	bhi.w	8001938 <HAL_RCC_GetSysClockFreq+0x16c>
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x34>
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d003      	beq.n	8001806 <HAL_RCC_GetSysClockFreq+0x3a>
 80017fe:	e09b      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001800:	4b53      	ldr	r3, [pc, #332]	; (8001950 <HAL_RCC_GetSysClockFreq+0x184>)
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001804:	e09b      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001806:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_GetSysClockFreq+0x188>)
 8001808:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800180a:	e098      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800180c:	4b4f      	ldr	r3, [pc, #316]	; (800194c <HAL_RCC_GetSysClockFreq+0x180>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001816:	4b4d      	ldr	r3, [pc, #308]	; (800194c <HAL_RCC_GetSysClockFreq+0x180>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d028      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001822:	4b4a      	ldr	r3, [pc, #296]	; (800194c <HAL_RCC_GetSysClockFreq+0x180>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	099b      	lsrs	r3, r3, #6
 8001828:	2200      	movs	r2, #0
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	627a      	str	r2, [r7, #36]	; 0x24
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001834:	2100      	movs	r1, #0
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_GetSysClockFreq+0x188>)
 8001838:	fb03 f201 	mul.w	r2, r3, r1
 800183c:	2300      	movs	r3, #0
 800183e:	fb00 f303 	mul.w	r3, r0, r3
 8001842:	4413      	add	r3, r2
 8001844:	4a43      	ldr	r2, [pc, #268]	; (8001954 <HAL_RCC_GetSysClockFreq+0x188>)
 8001846:	fba0 1202 	umull	r1, r2, r0, r2
 800184a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800184c:	460a      	mov	r2, r1
 800184e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001852:	4413      	add	r3, r2
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001858:	2200      	movs	r2, #0
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	61fa      	str	r2, [r7, #28]
 800185e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001862:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001866:	f7fe fcb3 	bl	80001d0 <__aeabi_uldivmod>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4613      	mov	r3, r2
 8001870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001872:	e053      	b.n	800191c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001874:	4b35      	ldr	r3, [pc, #212]	; (800194c <HAL_RCC_GetSysClockFreq+0x180>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	099b      	lsrs	r3, r3, #6
 800187a:	2200      	movs	r2, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	617a      	str	r2, [r7, #20]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001886:	f04f 0b00 	mov.w	fp, #0
 800188a:	4652      	mov	r2, sl
 800188c:	465b      	mov	r3, fp
 800188e:	f04f 0000 	mov.w	r0, #0
 8001892:	f04f 0100 	mov.w	r1, #0
 8001896:	0159      	lsls	r1, r3, #5
 8001898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800189c:	0150      	lsls	r0, r2, #5
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	ebb2 080a 	subs.w	r8, r2, sl
 80018a6:	eb63 090b 	sbc.w	r9, r3, fp
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018be:	ebb2 0408 	subs.w	r4, r2, r8
 80018c2:	eb63 0509 	sbc.w	r5, r3, r9
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	00eb      	lsls	r3, r5, #3
 80018d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018d4:	00e2      	lsls	r2, r4, #3
 80018d6:	4614      	mov	r4, r2
 80018d8:	461d      	mov	r5, r3
 80018da:	eb14 030a 	adds.w	r3, r4, sl
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	eb45 030b 	adc.w	r3, r5, fp
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018f2:	4629      	mov	r1, r5
 80018f4:	028b      	lsls	r3, r1, #10
 80018f6:	4621      	mov	r1, r4
 80018f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018fc:	4621      	mov	r1, r4
 80018fe:	028a      	lsls	r2, r1, #10
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001906:	2200      	movs	r2, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	60fa      	str	r2, [r7, #12]
 800190c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001910:	f7fe fc5e 	bl	80001d0 <__aeabi_uldivmod>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4613      	mov	r3, r2
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_GetSysClockFreq+0x180>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	0c1b      	lsrs	r3, r3, #16
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	3301      	adds	r3, #1
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800192c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800192e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3
 8001934:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001936:	e002      	b.n	800193e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetSysClockFreq+0x184>)
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800193c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001940:	4618      	mov	r0, r3
 8001942:	3740      	adds	r7, #64	; 0x40
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	00f42400 	.word	0x00f42400
 8001954:	017d7840 	.word	0x017d7840

08001958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800195c:	4b03      	ldr	r3, [pc, #12]	; (800196c <HAL_RCC_GetHCLKFreq+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000000 	.word	0x20000000

08001970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001974:	f7ff fff0 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	0a9b      	lsrs	r3, r3, #10
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	4903      	ldr	r1, [pc, #12]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	08004054 	.word	0x08004054

08001998 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	220f      	movs	r2, #15
 80019a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019a8:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_RCC_GetClockConfig+0x5c>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_RCC_GetClockConfig+0x5c>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_RCC_GetClockConfig+0x5c>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	08db      	lsrs	r3, r3, #3
 80019d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_RCC_GetClockConfig+0x60>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0207 	and.w	r2, r3, #7
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	601a      	str	r2, [r3, #0]
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e041      	b.n	8001a92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d106      	bne.n	8001a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f839 	bl	8001a9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3304      	adds	r3, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	f000 f9d8 	bl	8001df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d001      	beq.n	8001ac8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e04e      	b.n	8001b66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d022      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af2:	d01d      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <HAL_TIM_Base_Start_IT+0xc8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d018      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1e      	ldr	r2, [pc, #120]	; (8001b7c <HAL_TIM_Base_Start_IT+0xcc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d013      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <HAL_TIM_Base_Start_IT+0xd0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00e      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d009      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d004      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0x80>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a18      	ldr	r2, [pc, #96]	; (8001b8c <HAL_TIM_Base_Start_IT+0xdc>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d111      	bne.n	8001b54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d010      	beq.n	8001b64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b52:	e007      	b.n	8001b64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40010000 	.word	0x40010000
 8001b78:	40000400 	.word	0x40000400
 8001b7c:	40000800 	.word	0x40000800
 8001b80:	40000c00 	.word	0x40000c00
 8001b84:	40010400 	.word	0x40010400
 8001b88:	40014000 	.word	0x40014000
 8001b8c:	40001800 	.word	0x40001800

08001b90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d122      	bne.n	8001bec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d11b      	bne.n	8001bec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f06f 0202 	mvn.w	r2, #2
 8001bbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f8ee 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001bd8:	e005      	b.n	8001be6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f8e0 	bl	8001da0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8f1 	bl	8001dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d122      	bne.n	8001c40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d11b      	bne.n	8001c40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f06f 0204 	mvn.w	r2, #4
 8001c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2202      	movs	r2, #2
 8001c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f8c4 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001c2c:	e005      	b.n	8001c3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f8b6 	bl	8001da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f8c7 	bl	8001dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d122      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d11b      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0208 	mvn.w	r2, #8
 8001c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2204      	movs	r2, #4
 8001c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f89a 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f88c 	bl	8001da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f89d 	bl	8001dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b10      	cmp	r3, #16
 8001ca0:	d122      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d11b      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0210 	mvn.w	r2, #16
 8001cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f870 	bl	8001db4 <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f862 	bl	8001da0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f873 	bl	8001dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d10e      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d107      	bne.n	8001d14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0201 	mvn.w	r2, #1
 8001d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7fe fd4a 	bl	80007a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d1e:	2b80      	cmp	r3, #128	; 0x80
 8001d20:	d10e      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2c:	2b80      	cmp	r3, #128	; 0x80
 8001d2e:	d107      	bne.n	8001d40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f902 	bl	8001f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	2b40      	cmp	r3, #64	; 0x40
 8001d4c:	d10e      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d58:	2b40      	cmp	r3, #64	; 0x40
 8001d5a:	d107      	bne.n	8001d6c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f838 	bl	8001ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d10e      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d107      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0220 	mvn.w	r2, #32
 8001d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8cc 	bl	8001f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a40      	ldr	r2, [pc, #256]	; (8001f04 <TIM_Base_SetConfig+0x114>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d013      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0e:	d00f      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3d      	ldr	r2, [pc, #244]	; (8001f08 <TIM_Base_SetConfig+0x118>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d00b      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3c      	ldr	r2, [pc, #240]	; (8001f0c <TIM_Base_SetConfig+0x11c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d007      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a3b      	ldr	r2, [pc, #236]	; (8001f10 <TIM_Base_SetConfig+0x120>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d003      	beq.n	8001e30 <TIM_Base_SetConfig+0x40>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <TIM_Base_SetConfig+0x124>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d108      	bne.n	8001e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a2f      	ldr	r2, [pc, #188]	; (8001f04 <TIM_Base_SetConfig+0x114>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d02b      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d027      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a2c      	ldr	r2, [pc, #176]	; (8001f08 <TIM_Base_SetConfig+0x118>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d023      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a2b      	ldr	r2, [pc, #172]	; (8001f0c <TIM_Base_SetConfig+0x11c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d01f      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a2a      	ldr	r2, [pc, #168]	; (8001f10 <TIM_Base_SetConfig+0x120>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01b      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <TIM_Base_SetConfig+0x124>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d017      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a28      	ldr	r2, [pc, #160]	; (8001f18 <TIM_Base_SetConfig+0x128>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a27      	ldr	r2, [pc, #156]	; (8001f1c <TIM_Base_SetConfig+0x12c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00f      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <TIM_Base_SetConfig+0x130>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00b      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a25      	ldr	r2, [pc, #148]	; (8001f24 <TIM_Base_SetConfig+0x134>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d007      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a24      	ldr	r2, [pc, #144]	; (8001f28 <TIM_Base_SetConfig+0x138>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d003      	beq.n	8001ea2 <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <TIM_Base_SetConfig+0x13c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d108      	bne.n	8001eb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <TIM_Base_SetConfig+0x114>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d003      	beq.n	8001ee8 <TIM_Base_SetConfig+0xf8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <TIM_Base_SetConfig+0x124>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d103      	bne.n	8001ef0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	615a      	str	r2, [r3, #20]
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40000c00 	.word	0x40000c00
 8001f14:	40010400 	.word	0x40010400
 8001f18:	40014000 	.word	0x40014000
 8001f1c:	40014400 	.word	0x40014400
 8001f20:	40014800 	.word	0x40014800
 8001f24:	40001800 	.word	0x40001800
 8001f28:	40001c00 	.word	0x40001c00
 8001f2c:	40002000 	.word	0x40002000

08001f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f6a:	2b84      	cmp	r3, #132	; 0x84
 8001f6c:	d005      	beq.n	8001f7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001f6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	3303      	adds	r3, #3
 8001f78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001f8c:	f000 faf6 	bl	800257c <vTaskStartScheduler>
  
  return osOK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001f96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f98:	b089      	sub	sp, #36	; 0x24
 8001f9a:	af04      	add	r7, sp, #16
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <osThreadCreate+0x54>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01c      	beq.n	8001fea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685c      	ldr	r4, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681d      	ldr	r5, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691e      	ldr	r6, [r3, #16]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ffc8 	bl	8001f58 <makeFreeRtosPriority>
 8001fc8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fd2:	9202      	str	r2, [sp, #8]
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	9100      	str	r1, [sp, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4632      	mov	r2, r6
 8001fdc:	4629      	mov	r1, r5
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f000 f8ed 	bl	80021be <xTaskCreateStatic>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	e01c      	b.n	8002024 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685c      	ldr	r4, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ff6:	b29e      	uxth	r6, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ffaa 	bl	8001f58 <makeFreeRtosPriority>
 8002004:	4602      	mov	r2, r0
 8002006:	f107 030c 	add.w	r3, r7, #12
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	9200      	str	r2, [sp, #0]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	4632      	mov	r2, r6
 8002012:	4629      	mov	r1, r5
 8002014:	4620      	mov	r0, r4
 8002016:	f000 f92f 	bl	8002278 <xTaskCreate>
 800201a:	4603      	mov	r3, r0
 800201c:	2b01      	cmp	r3, #1
 800201e:	d001      	beq.n	8002024 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002024:	68fb      	ldr	r3, [r7, #12]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800202e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b084      	sub	sp, #16
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <osDelay+0x16>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	e000      	b.n	8002046 <osDelay+0x18>
 8002044:	2301      	movs	r3, #1
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fa64 	bl	8002514 <vTaskDelay>
  
  return osOK;
 800204c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f103 0208 	add.w	r2, r3, #8
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f04f 32ff 	mov.w	r2, #4294967295
 800206e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f103 0208 	add.w	r2, r3, #8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f103 0208 	add.w	r2, r3, #8
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	601a      	str	r2, [r3, #0]
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210e:	d103      	bne.n	8002118 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	e00c      	b.n	8002132 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3308      	adds	r3, #8
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e002      	b.n	8002126 <vListInsert+0x2e>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	429a      	cmp	r2, r3
 8002130:	d2f6      	bcs.n	8002120 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	601a      	str	r2, [r3, #0]
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800216a:	b480      	push	{r7}
 800216c:	b085      	sub	sp, #20
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6892      	ldr	r2, [r2, #8]
 8002180:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6852      	ldr	r2, [r2, #4]
 800218a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	d103      	bne.n	800219e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	1e5a      	subs	r2, r3, #1
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b08e      	sub	sp, #56	; 0x38
 80021c2:	af04      	add	r7, sp, #16
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80021cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80021d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80021e4:	bf00      	nop
 80021e6:	e7fe      	b.n	80021e6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80021e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10a      	bne.n	8002204 <xTaskCreateStatic+0x46>
	__asm volatile
 80021ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f2:	f383 8811 	msr	BASEPRI, r3
 80021f6:	f3bf 8f6f 	isb	sy
 80021fa:	f3bf 8f4f 	dsb	sy
 80021fe:	61fb      	str	r3, [r7, #28]
}
 8002200:	bf00      	nop
 8002202:	e7fe      	b.n	8002202 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002204:	23b4      	movs	r3, #180	; 0xb4
 8002206:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2bb4      	cmp	r3, #180	; 0xb4
 800220c:	d00a      	beq.n	8002224 <xTaskCreateStatic+0x66>
	__asm volatile
 800220e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002212:	f383 8811 	msr	BASEPRI, r3
 8002216:	f3bf 8f6f 	isb	sy
 800221a:	f3bf 8f4f 	dsb	sy
 800221e:	61bb      	str	r3, [r7, #24]
}
 8002220:	bf00      	nop
 8002222:	e7fe      	b.n	8002222 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002224:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01e      	beq.n	800226a <xTaskCreateStatic+0xac>
 800222c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222e:	2b00      	cmp	r3, #0
 8002230:	d01b      	beq.n	800226a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800223a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	2202      	movs	r2, #2
 8002240:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002244:	2300      	movs	r3, #0
 8002246:	9303      	str	r3, [sp, #12]
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f851 	bl	8002304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002262:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002264:	f000 f8ec 	bl	8002440 <prvAddNewTaskToReadyList>
 8002268:	e001      	b.n	800226e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800226e:	697b      	ldr	r3, [r7, #20]
	}
 8002270:	4618      	mov	r0, r3
 8002272:	3728      	adds	r7, #40	; 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08c      	sub	sp, #48	; 0x30
 800227c:	af04      	add	r7, sp, #16
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	4613      	mov	r3, r2
 8002286:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4618      	mov	r0, r3
 800228e:	f000 fef3 	bl	8003078 <pvPortMalloc>
 8002292:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00e      	beq.n	80022b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800229a:	20b4      	movs	r0, #180	; 0xb4
 800229c:	f000 feec 	bl	8003078 <pvPortMalloc>
 80022a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
 80022ae:	e005      	b.n	80022bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80022b0:	6978      	ldr	r0, [r7, #20]
 80022b2:	f000 ffad 	bl	8003210 <vPortFree>
 80022b6:	e001      	b.n	80022bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d017      	beq.n	80022f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022ca:	88fa      	ldrh	r2, [r7, #6]
 80022cc:	2300      	movs	r3, #0
 80022ce:	9303      	str	r3, [sp, #12]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	9302      	str	r3, [sp, #8]
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d6:	9301      	str	r3, [sp, #4]
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68b9      	ldr	r1, [r7, #8]
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f80f 	bl	8002304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80022e6:	69f8      	ldr	r0, [r7, #28]
 80022e8:	f000 f8aa 	bl	8002440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80022ec:	2301      	movs	r3, #1
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	e002      	b.n	80022f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80022f8:	69bb      	ldr	r3, [r7, #24]
	}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800231c:	3b01      	subs	r3, #1
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f023 0307 	bic.w	r3, r3, #7
 800232a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <prvInitialiseNewTask+0x48>
	__asm volatile
 8002336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233a:	f383 8811 	msr	BASEPRI, r3
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	617b      	str	r3, [r7, #20]
}
 8002348:	bf00      	nop
 800234a:	e7fe      	b.n	800234a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d01f      	beq.n	8002392 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
 8002356:	e012      	b.n	800237e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4413      	add	r3, r2
 800235e:	7819      	ldrb	r1, [r3, #0]
 8002360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	3334      	adds	r3, #52	; 0x34
 8002368:	460a      	mov	r2, r1
 800236a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800236c:	68ba      	ldr	r2, [r7, #8]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4413      	add	r3, r2
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d006      	beq.n	8002386 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	3301      	adds	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	2b0f      	cmp	r3, #15
 8002382:	d9e9      	bls.n	8002358 <prvInitialiseNewTask+0x54>
 8002384:	e000      	b.n	8002388 <prvInitialiseNewTask+0x84>
			{
				break;
 8002386:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002390:	e003      	b.n	800239a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	2b06      	cmp	r3, #6
 800239e:	d901      	bls.n	80023a4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023a0:	2306      	movs	r3, #6
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80023a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80023aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80023b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b2:	2200      	movs	r2, #0
 80023b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80023b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b8:	3304      	adds	r3, #4
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fe6b 	bl	8002096 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80023c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c2:	3318      	adds	r3, #24
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fe66 	bl	8002096 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	f1c3 0207 	rsb	r2, r3, #7
 80023d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80023e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e2:	2200      	movs	r2, #0
 80023e4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	334c      	adds	r3, #76	; 0x4c
 80023f4:	2260      	movs	r2, #96	; 0x60
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f001 f94a 	bl	8003692 <memset>
 80023fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002400:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <prvInitialiseNewTask+0x130>)
 8002402:	651a      	str	r2, [r3, #80]	; 0x50
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <prvInitialiseNewTask+0x134>)
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	4a0b      	ldr	r2, [pc, #44]	; (800243c <prvInitialiseNewTask+0x138>)
 800240e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	68f9      	ldr	r1, [r7, #12]
 8002414:	69b8      	ldr	r0, [r7, #24]
 8002416:	f000 fc1f 	bl	8002c58 <pxPortInitialiseStack>
 800241a:	4602      	mov	r2, r0
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800242c:	bf00      	nop
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	0800407c 	.word	0x0800407c
 8002438:	0800409c 	.word	0x0800409c
 800243c:	0800405c 	.word	0x0800405c

08002440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002448:	f000 fd34 	bl	8002eb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800244c:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <prvAddNewTaskToReadyList+0xb8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	4a29      	ldr	r2, [pc, #164]	; (80024f8 <prvAddNewTaskToReadyList+0xb8>)
 8002454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <prvAddNewTaskToReadyList+0xbc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800245e:	4a27      	ldr	r2, [pc, #156]	; (80024fc <prvAddNewTaskToReadyList+0xbc>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002464:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <prvAddNewTaskToReadyList+0xb8>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d110      	bne.n	800248e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800246c:	f000 facc 	bl	8002a08 <prvInitialiseTaskLists>
 8002470:	e00d      	b.n	800248e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002472:	4b23      	ldr	r3, [pc, #140]	; (8002500 <prvAddNewTaskToReadyList+0xc0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <prvAddNewTaskToReadyList+0xbc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	429a      	cmp	r2, r3
 8002486:	d802      	bhi.n	800248e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002488:	4a1c      	ldr	r2, [pc, #112]	; (80024fc <prvAddNewTaskToReadyList+0xbc>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800248e:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <prvAddNewTaskToReadyList+0xc4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	4a1b      	ldr	r2, [pc, #108]	; (8002504 <prvAddNewTaskToReadyList+0xc4>)
 8002496:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	2201      	movs	r2, #1
 800249e:	409a      	lsls	r2, r3
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <prvAddNewTaskToReadyList+0xc8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	4a18      	ldr	r2, [pc, #96]	; (8002508 <prvAddNewTaskToReadyList+0xc8>)
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4a15      	ldr	r2, [pc, #84]	; (800250c <prvAddNewTaskToReadyList+0xcc>)
 80024b8:	441a      	add	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3304      	adds	r3, #4
 80024be:	4619      	mov	r1, r3
 80024c0:	4610      	mov	r0, r2
 80024c2:	f7ff fdf5 	bl	80020b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80024c6:	f000 fd25 	bl	8002f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <prvAddNewTaskToReadyList+0xc0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00e      	beq.n	80024f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <prvAddNewTaskToReadyList+0xbc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	429a      	cmp	r2, r3
 80024de:	d207      	bcs.n	80024f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <prvAddNewTaskToReadyList+0xd0>)
 80024e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200004a0 	.word	0x200004a0
 80024fc:	200003a0 	.word	0x200003a0
 8002500:	200004ac 	.word	0x200004ac
 8002504:	200004bc 	.word	0x200004bc
 8002508:	200004a8 	.word	0x200004a8
 800250c:	200003a4 	.word	0x200003a4
 8002510:	e000ed04 	.word	0xe000ed04

08002514 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800251c:	2300      	movs	r3, #0
 800251e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d017      	beq.n	8002556 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002526:	4b13      	ldr	r3, [pc, #76]	; (8002574 <vTaskDelay+0x60>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <vTaskDelay+0x30>
	__asm volatile
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	60bb      	str	r3, [r7, #8]
}
 8002540:	bf00      	nop
 8002542:	e7fe      	b.n	8002542 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002544:	f000 f884 	bl	8002650 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002548:	2100      	movs	r1, #0
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fb1e 	bl	8002b8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002550:	f000 f88c 	bl	800266c <xTaskResumeAll>
 8002554:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d107      	bne.n	800256c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <vTaskDelay+0x64>)
 800255e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800256c:	bf00      	nop
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200004c8 	.word	0x200004c8
 8002578:	e000ed04 	.word	0xe000ed04

0800257c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08a      	sub	sp, #40	; 0x28
 8002580:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800258a:	463a      	mov	r2, r7
 800258c:	1d39      	adds	r1, r7, #4
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd ffc6 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	9202      	str	r2, [sp, #8]
 80025a0:	9301      	str	r3, [sp, #4]
 80025a2:	2300      	movs	r3, #0
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2300      	movs	r3, #0
 80025a8:	460a      	mov	r2, r1
 80025aa:	4921      	ldr	r1, [pc, #132]	; (8002630 <vTaskStartScheduler+0xb4>)
 80025ac:	4821      	ldr	r0, [pc, #132]	; (8002634 <vTaskStartScheduler+0xb8>)
 80025ae:	f7ff fe06 	bl	80021be <xTaskCreateStatic>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4a20      	ldr	r2, [pc, #128]	; (8002638 <vTaskStartScheduler+0xbc>)
 80025b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <vTaskStartScheduler+0xbc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80025c0:	2301      	movs	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	e001      	b.n	80025ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d11b      	bne.n	8002608 <vTaskStartScheduler+0x8c>
	__asm volatile
 80025d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	613b      	str	r3, [r7, #16]
}
 80025e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80025e4:	4b15      	ldr	r3, [pc, #84]	; (800263c <vTaskStartScheduler+0xc0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	334c      	adds	r3, #76	; 0x4c
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <vTaskStartScheduler+0xc4>)
 80025ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <vTaskStartScheduler+0xc8>)
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <vTaskStartScheduler+0xcc>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <vTaskStartScheduler+0xd0>)
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002602:	f000 fbb5 	bl	8002d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002606:	e00e      	b.n	8002626 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260e:	d10a      	bne.n	8002626 <vTaskStartScheduler+0xaa>
	__asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	60fb      	str	r3, [r7, #12]
}
 8002622:	bf00      	nop
 8002624:	e7fe      	b.n	8002624 <vTaskStartScheduler+0xa8>
}
 8002626:	bf00      	nop
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	0800403c 	.word	0x0800403c
 8002634:	080029d9 	.word	0x080029d9
 8002638:	200004c4 	.word	0x200004c4
 800263c:	200003a0 	.word	0x200003a0
 8002640:	20000010 	.word	0x20000010
 8002644:	200004c0 	.word	0x200004c0
 8002648:	200004ac 	.word	0x200004ac
 800264c:	200004a4 	.word	0x200004a4

08002650 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <vTaskSuspendAll+0x18>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	3301      	adds	r3, #1
 800265a:	4a03      	ldr	r2, [pc, #12]	; (8002668 <vTaskSuspendAll+0x18>)
 800265c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	200004c8 	.word	0x200004c8

0800266c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <xTaskResumeAll+0x114>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10a      	bne.n	8002698 <xTaskResumeAll+0x2c>
	__asm volatile
 8002682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	603b      	str	r3, [r7, #0]
}
 8002694:	bf00      	nop
 8002696:	e7fe      	b.n	8002696 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002698:	f000 fc0c 	bl	8002eb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800269c:	4b38      	ldr	r3, [pc, #224]	; (8002780 <xTaskResumeAll+0x114>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	4a37      	ldr	r2, [pc, #220]	; (8002780 <xTaskResumeAll+0x114>)
 80026a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026a6:	4b36      	ldr	r3, [pc, #216]	; (8002780 <xTaskResumeAll+0x114>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d161      	bne.n	8002772 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80026ae:	4b35      	ldr	r3, [pc, #212]	; (8002784 <xTaskResumeAll+0x118>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d05d      	beq.n	8002772 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026b6:	e02e      	b.n	8002716 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026b8:	4b33      	ldr	r3, [pc, #204]	; (8002788 <xTaskResumeAll+0x11c>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3318      	adds	r3, #24
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fd50 	bl	800216a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	3304      	adds	r3, #4
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fd4b 	bl	800216a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	2201      	movs	r2, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	4b2b      	ldr	r3, [pc, #172]	; (800278c <xTaskResumeAll+0x120>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	4a2a      	ldr	r2, [pc, #168]	; (800278c <xTaskResumeAll+0x120>)
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4a27      	ldr	r2, [pc, #156]	; (8002790 <xTaskResumeAll+0x124>)
 80026f4:	441a      	add	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3304      	adds	r3, #4
 80026fa:	4619      	mov	r1, r3
 80026fc:	4610      	mov	r0, r2
 80026fe:	f7ff fcd7 	bl	80020b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <xTaskResumeAll+0x128>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270c:	429a      	cmp	r2, r3
 800270e:	d302      	bcc.n	8002716 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002710:	4b21      	ldr	r3, [pc, #132]	; (8002798 <xTaskResumeAll+0x12c>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002716:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <xTaskResumeAll+0x11c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1cc      	bne.n	80026b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002724:	f000 fa12 	bl	8002b4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002728:	4b1c      	ldr	r3, [pc, #112]	; (800279c <xTaskResumeAll+0x130>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d010      	beq.n	8002756 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002734:	f000 f836 	bl	80027a4 <xTaskIncrementTick>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800273e:	4b16      	ldr	r3, [pc, #88]	; (8002798 <xTaskResumeAll+0x12c>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f1      	bne.n	8002734 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <xTaskResumeAll+0x130>)
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <xTaskResumeAll+0x12c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800275e:	2301      	movs	r3, #1
 8002760:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <xTaskResumeAll+0x134>)
 8002764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002772:	f000 fbcf 	bl	8002f14 <vPortExitCritical>

	return xAlreadyYielded;
 8002776:	68bb      	ldr	r3, [r7, #8]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	200004c8 	.word	0x200004c8
 8002784:	200004a0 	.word	0x200004a0
 8002788:	20000460 	.word	0x20000460
 800278c:	200004a8 	.word	0x200004a8
 8002790:	200003a4 	.word	0x200003a4
 8002794:	200003a0 	.word	0x200003a0
 8002798:	200004b4 	.word	0x200004b4
 800279c:	200004b0 	.word	0x200004b0
 80027a0:	e000ed04 	.word	0xe000ed04

080027a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ae:	4b4e      	ldr	r3, [pc, #312]	; (80028e8 <xTaskIncrementTick+0x144>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f040 808e 	bne.w	80028d4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027b8:	4b4c      	ldr	r3, [pc, #304]	; (80028ec <xTaskIncrementTick+0x148>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80027c0:	4a4a      	ldr	r2, [pc, #296]	; (80028ec <xTaskIncrementTick+0x148>)
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d120      	bne.n	800280e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80027cc:	4b48      	ldr	r3, [pc, #288]	; (80028f0 <xTaskIncrementTick+0x14c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00a      	beq.n	80027ec <xTaskIncrementTick+0x48>
	__asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	603b      	str	r3, [r7, #0]
}
 80027e8:	bf00      	nop
 80027ea:	e7fe      	b.n	80027ea <xTaskIncrementTick+0x46>
 80027ec:	4b40      	ldr	r3, [pc, #256]	; (80028f0 <xTaskIncrementTick+0x14c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b40      	ldr	r3, [pc, #256]	; (80028f4 <xTaskIncrementTick+0x150>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a3e      	ldr	r2, [pc, #248]	; (80028f0 <xTaskIncrementTick+0x14c>)
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4a3e      	ldr	r2, [pc, #248]	; (80028f4 <xTaskIncrementTick+0x150>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b3d      	ldr	r3, [pc, #244]	; (80028f8 <xTaskIncrementTick+0x154>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	4a3c      	ldr	r2, [pc, #240]	; (80028f8 <xTaskIncrementTick+0x154>)
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	f000 f99f 	bl	8002b4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800280e:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <xTaskIncrementTick+0x158>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	429a      	cmp	r2, r3
 8002816:	d348      	bcc.n	80028aa <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002818:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <xTaskIncrementTick+0x14c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002822:	4b36      	ldr	r3, [pc, #216]	; (80028fc <xTaskIncrementTick+0x158>)
 8002824:	f04f 32ff 	mov.w	r2, #4294967295
 8002828:	601a      	str	r2, [r3, #0]
					break;
 800282a:	e03e      	b.n	80028aa <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800282c:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <xTaskIncrementTick+0x14c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	d203      	bcs.n	800284c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002844:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <xTaskIncrementTick+0x158>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800284a:	e02e      	b.n	80028aa <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	3304      	adds	r3, #4
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fc8a 	bl	800216a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d004      	beq.n	8002868 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	3318      	adds	r3, #24
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fc81 	bl	800216a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	2201      	movs	r2, #1
 800286e:	409a      	lsls	r2, r3
 8002870:	4b23      	ldr	r3, [pc, #140]	; (8002900 <xTaskIncrementTick+0x15c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4313      	orrs	r3, r2
 8002876:	4a22      	ldr	r2, [pc, #136]	; (8002900 <xTaskIncrementTick+0x15c>)
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4a1f      	ldr	r2, [pc, #124]	; (8002904 <xTaskIncrementTick+0x160>)
 8002888:	441a      	add	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3304      	adds	r3, #4
 800288e:	4619      	mov	r1, r3
 8002890:	4610      	mov	r0, r2
 8002892:	f7ff fc0d 	bl	80020b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <xTaskIncrementTick+0x164>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d3b9      	bcc.n	8002818 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80028a4:	2301      	movs	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028a8:	e7b6      	b.n	8002818 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <xTaskIncrementTick+0x164>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b0:	4914      	ldr	r1, [pc, #80]	; (8002904 <xTaskIncrementTick+0x160>)
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d901      	bls.n	80028c6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <xTaskIncrementTick+0x168>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	617b      	str	r3, [r7, #20]
 80028d2:	e004      	b.n	80028de <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <xTaskIncrementTick+0x16c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	4a0d      	ldr	r2, [pc, #52]	; (8002910 <xTaskIncrementTick+0x16c>)
 80028dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80028de:	697b      	ldr	r3, [r7, #20]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	200004c8 	.word	0x200004c8
 80028ec:	200004a4 	.word	0x200004a4
 80028f0:	20000458 	.word	0x20000458
 80028f4:	2000045c 	.word	0x2000045c
 80028f8:	200004b8 	.word	0x200004b8
 80028fc:	200004c0 	.word	0x200004c0
 8002900:	200004a8 	.word	0x200004a8
 8002904:	200003a4 	.word	0x200003a4
 8002908:	200003a0 	.word	0x200003a0
 800290c:	200004b4 	.word	0x200004b4
 8002910:	200004b0 	.word	0x200004b0

08002914 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800291a:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <vTaskSwitchContext+0xac>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002922:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <vTaskSwitchContext+0xb0>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002928:	e044      	b.n	80029b4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800292a:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <vTaskSwitchContext+0xb0>)
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002930:	4b25      	ldr	r3, [pc, #148]	; (80029c8 <vTaskSwitchContext+0xb4>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	fab3 f383 	clz	r3, r3
 800293c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800293e:	7afb      	ldrb	r3, [r7, #11]
 8002940:	f1c3 031f 	rsb	r3, r3, #31
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	4921      	ldr	r1, [pc, #132]	; (80029cc <vTaskSwitchContext+0xb8>)
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <vTaskSwitchContext+0x5c>
	__asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	607b      	str	r3, [r7, #4]
}
 800296c:	bf00      	nop
 800296e:	e7fe      	b.n	800296e <vTaskSwitchContext+0x5a>
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4a14      	ldr	r2, [pc, #80]	; (80029cc <vTaskSwitchContext+0xb8>)
 800297c:	4413      	add	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	3308      	adds	r3, #8
 8002992:	429a      	cmp	r2, r3
 8002994:	d104      	bne.n	80029a0 <vTaskSwitchContext+0x8c>
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <vTaskSwitchContext+0xbc>)
 80029a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <vTaskSwitchContext+0xbc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	334c      	adds	r3, #76	; 0x4c
 80029b0:	4a08      	ldr	r2, [pc, #32]	; (80029d4 <vTaskSwitchContext+0xc0>)
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	200004c8 	.word	0x200004c8
 80029c4:	200004b4 	.word	0x200004b4
 80029c8:	200004a8 	.word	0x200004a8
 80029cc:	200003a4 	.word	0x200003a4
 80029d0:	200003a0 	.word	0x200003a0
 80029d4:	20000010 	.word	0x20000010

080029d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80029e0:	f000 f852 	bl	8002a88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <prvIdleTask+0x28>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d9f9      	bls.n	80029e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <prvIdleTask+0x2c>)
 80029ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80029fc:	e7f0      	b.n	80029e0 <prvIdleTask+0x8>
 80029fe:	bf00      	nop
 8002a00:	200003a4 	.word	0x200003a4
 8002a04:	e000ed04 	.word	0xe000ed04

08002a08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a0e:	2300      	movs	r3, #0
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	e00c      	b.n	8002a2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4a12      	ldr	r2, [pc, #72]	; (8002a68 <prvInitialiseTaskLists+0x60>)
 8002a20:	4413      	add	r3, r2
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fb17 	bl	8002056 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b06      	cmp	r3, #6
 8002a32:	d9ef      	bls.n	8002a14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002a34:	480d      	ldr	r0, [pc, #52]	; (8002a6c <prvInitialiseTaskLists+0x64>)
 8002a36:	f7ff fb0e 	bl	8002056 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002a3a:	480d      	ldr	r0, [pc, #52]	; (8002a70 <prvInitialiseTaskLists+0x68>)
 8002a3c:	f7ff fb0b 	bl	8002056 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002a40:	480c      	ldr	r0, [pc, #48]	; (8002a74 <prvInitialiseTaskLists+0x6c>)
 8002a42:	f7ff fb08 	bl	8002056 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002a46:	480c      	ldr	r0, [pc, #48]	; (8002a78 <prvInitialiseTaskLists+0x70>)
 8002a48:	f7ff fb05 	bl	8002056 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002a4c:	480b      	ldr	r0, [pc, #44]	; (8002a7c <prvInitialiseTaskLists+0x74>)
 8002a4e:	f7ff fb02 	bl	8002056 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <prvInitialiseTaskLists+0x78>)
 8002a54:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <prvInitialiseTaskLists+0x64>)
 8002a56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a58:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <prvInitialiseTaskLists+0x7c>)
 8002a5a:	4a05      	ldr	r2, [pc, #20]	; (8002a70 <prvInitialiseTaskLists+0x68>)
 8002a5c:	601a      	str	r2, [r3, #0]
}
 8002a5e:	bf00      	nop
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200003a4 	.word	0x200003a4
 8002a6c:	20000430 	.word	0x20000430
 8002a70:	20000444 	.word	0x20000444
 8002a74:	20000460 	.word	0x20000460
 8002a78:	20000474 	.word	0x20000474
 8002a7c:	2000048c 	.word	0x2000048c
 8002a80:	20000458 	.word	0x20000458
 8002a84:	2000045c 	.word	0x2000045c

08002a88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a8e:	e019      	b.n	8002ac4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002a90:	f000 fa10 	bl	8002eb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <prvCheckTasksWaitingTermination+0x50>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3304      	adds	r3, #4
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fb62 	bl	800216a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <prvCheckTasksWaitingTermination+0x54>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <prvCheckTasksWaitingTermination+0x54>)
 8002aae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <prvCheckTasksWaitingTermination+0x58>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <prvCheckTasksWaitingTermination+0x58>)
 8002ab8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002aba:	f000 fa2b 	bl	8002f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f810 	bl	8002ae4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <prvCheckTasksWaitingTermination+0x58>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1e1      	bne.n	8002a90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000474 	.word	0x20000474
 8002adc:	200004a0 	.word	0x200004a0
 8002ae0:	20000488 	.word	0x20000488

08002ae4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	334c      	adds	r3, #76	; 0x4c
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 feef 	bl	80038d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d108      	bne.n	8002b12 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 fb83 	bl	8003210 <vPortFree>
				vPortFree( pxTCB );
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 fb80 	bl	8003210 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002b10:	e018      	b.n	8002b44 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d103      	bne.n	8002b24 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fb77 	bl	8003210 <vPortFree>
	}
 8002b22:	e00f      	b.n	8002b44 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d00a      	beq.n	8002b44 <prvDeleteTCB+0x60>
	__asm volatile
 8002b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	60fb      	str	r3, [r7, #12]
}
 8002b40:	bf00      	nop
 8002b42:	e7fe      	b.n	8002b42 <prvDeleteTCB+0x5e>
	}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <prvResetNextTaskUnblockTime+0x38>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d104      	bne.n	8002b66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <prvResetNextTaskUnblockTime+0x3c>)
 8002b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002b64:	e008      	b.n	8002b78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <prvResetNextTaskUnblockTime+0x38>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <prvResetNextTaskUnblockTime+0x3c>)
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	20000458 	.word	0x20000458
 8002b88:	200004c0 	.word	0x200004c0

08002b8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002b96:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b9c:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fae1 	bl	800216a <uxListRemove>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10b      	bne.n	8002bc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002bae:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	4a20      	ldr	r2, [pc, #128]	; (8002c44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002bc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d10a      	bne.n	8002be4 <prvAddCurrentTaskToDelayedList+0x58>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	4619      	mov	r1, r3
 8002bdc:	481a      	ldr	r0, [pc, #104]	; (8002c48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002bde:	f7ff fa67 	bl	80020b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002be2:	e026      	b.n	8002c32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d209      	bcs.n	8002c10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3304      	adds	r3, #4
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f7ff fa75 	bl	80020f8 <vListInsert>
}
 8002c0e:	e010      	b.n	8002c32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002c10:	4b0f      	ldr	r3, [pc, #60]	; (8002c50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f7ff fa6b 	bl	80020f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002c22:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d202      	bcs.n	8002c32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002c2c:	4a09      	ldr	r2, [pc, #36]	; (8002c54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	6013      	str	r3, [r2, #0]
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200004a4 	.word	0x200004a4
 8002c40:	200003a0 	.word	0x200003a0
 8002c44:	200004a8 	.word	0x200004a8
 8002c48:	2000048c 	.word	0x2000048c
 8002c4c:	2000045c 	.word	0x2000045c
 8002c50:	20000458 	.word	0x20000458
 8002c54:	200004c0 	.word	0x200004c0

08002c58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	3b04      	subs	r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3b04      	subs	r3, #4
 8002c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f023 0201 	bic.w	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3b04      	subs	r3, #4
 8002c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002c88:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <pxPortInitialiseStack+0x64>)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3b14      	subs	r3, #20
 8002c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	3b04      	subs	r3, #4
 8002c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f06f 0202 	mvn.w	r2, #2
 8002ca6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	3b20      	subs	r3, #32
 8002cac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002cae:	68fb      	ldr	r3, [r7, #12]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	08002cc1 	.word	0x08002cc1

08002cc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002cca:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <prvTaskExitError+0x54>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d00a      	beq.n	8002cea <prvTaskExitError+0x2a>
	__asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	60fb      	str	r3, [r7, #12]
}
 8002ce6:	bf00      	nop
 8002ce8:	e7fe      	b.n	8002ce8 <prvTaskExitError+0x28>
	__asm volatile
 8002cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cee:	f383 8811 	msr	BASEPRI, r3
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	f3bf 8f4f 	dsb	sy
 8002cfa:	60bb      	str	r3, [r7, #8]
}
 8002cfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002cfe:	bf00      	nop
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0fc      	beq.n	8002d00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002d06:	bf00      	nop
 8002d08:	bf00      	nop
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	2000000c 	.word	0x2000000c
	...

08002d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002d20:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <pxCurrentTCBConst2>)
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	6808      	ldr	r0, [r1, #0]
 8002d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d2a:	f380 8809 	msr	PSP, r0
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f04f 0000 	mov.w	r0, #0
 8002d36:	f380 8811 	msr	BASEPRI, r0
 8002d3a:	4770      	bx	lr
 8002d3c:	f3af 8000 	nop.w

08002d40 <pxCurrentTCBConst2>:
 8002d40:	200003a0 	.word	0x200003a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002d44:	bf00      	nop
 8002d46:	bf00      	nop

08002d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002d48:	4808      	ldr	r0, [pc, #32]	; (8002d6c <prvPortStartFirstTask+0x24>)
 8002d4a:	6800      	ldr	r0, [r0, #0]
 8002d4c:	6800      	ldr	r0, [r0, #0]
 8002d4e:	f380 8808 	msr	MSP, r0
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f380 8814 	msr	CONTROL, r0
 8002d5a:	b662      	cpsie	i
 8002d5c:	b661      	cpsie	f
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	df00      	svc	0
 8002d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002d6a:	bf00      	nop
 8002d6c:	e000ed08 	.word	0xe000ed08

08002d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d76:	4b46      	ldr	r3, [pc, #280]	; (8002e90 <xPortStartScheduler+0x120>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a46      	ldr	r2, [pc, #280]	; (8002e94 <xPortStartScheduler+0x124>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d10a      	bne.n	8002d96 <xPortStartScheduler+0x26>
	__asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	613b      	str	r3, [r7, #16]
}
 8002d92:	bf00      	nop
 8002d94:	e7fe      	b.n	8002d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d96:	4b3e      	ldr	r3, [pc, #248]	; (8002e90 <xPortStartScheduler+0x120>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a3f      	ldr	r2, [pc, #252]	; (8002e98 <xPortStartScheduler+0x128>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d10a      	bne.n	8002db6 <xPortStartScheduler+0x46>
	__asm volatile
 8002da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da4:	f383 8811 	msr	BASEPRI, r3
 8002da8:	f3bf 8f6f 	isb	sy
 8002dac:	f3bf 8f4f 	dsb	sy
 8002db0:	60fb      	str	r3, [r7, #12]
}
 8002db2:	bf00      	nop
 8002db4:	e7fe      	b.n	8002db4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <xPortStartScheduler+0x12c>)
 8002db8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	22ff      	movs	r2, #255	; 0xff
 8002dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <xPortStartScheduler+0x130>)
 8002ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002dde:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <xPortStartScheduler+0x134>)
 8002de0:	2207      	movs	r2, #7
 8002de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002de4:	e009      	b.n	8002dfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002de6:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <xPortStartScheduler+0x134>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	4a2d      	ldr	r2, [pc, #180]	; (8002ea4 <xPortStartScheduler+0x134>)
 8002dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b80      	cmp	r3, #128	; 0x80
 8002e04:	d0ef      	beq.n	8002de6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e06:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <xPortStartScheduler+0x134>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f1c3 0307 	rsb	r3, r3, #7
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d00a      	beq.n	8002e28 <xPortStartScheduler+0xb8>
	__asm volatile
 8002e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	60bb      	str	r3, [r7, #8]
}
 8002e24:	bf00      	nop
 8002e26:	e7fe      	b.n	8002e26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e28:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <xPortStartScheduler+0x134>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <xPortStartScheduler+0x134>)
 8002e30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <xPortStartScheduler+0x134>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ea4 <xPortStartScheduler+0x134>)
 8002e3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002e46:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <xPortStartScheduler+0x138>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <xPortStartScheduler+0x138>)
 8002e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <xPortStartScheduler+0x138>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <xPortStartScheduler+0x138>)
 8002e58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002e5e:	f000 f8dd 	bl	800301c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <xPortStartScheduler+0x13c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002e68:	f000 f8fc 	bl	8003064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <xPortStartScheduler+0x140>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <xPortStartScheduler+0x140>)
 8002e72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002e78:	f7ff ff66 	bl	8002d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002e7c:	f7ff fd4a 	bl	8002914 <vTaskSwitchContext>
	prvTaskExitError();
 8002e80:	f7ff ff1e 	bl	8002cc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00
 8002e94:	410fc271 	.word	0x410fc271
 8002e98:	410fc270 	.word	0x410fc270
 8002e9c:	e000e400 	.word	0xe000e400
 8002ea0:	200004cc 	.word	0x200004cc
 8002ea4:	200004d0 	.word	0x200004d0
 8002ea8:	e000ed20 	.word	0xe000ed20
 8002eac:	2000000c 	.word	0x2000000c
 8002eb0:	e000ef34 	.word	0xe000ef34

08002eb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
	__asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	607b      	str	r3, [r7, #4]
}
 8002ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <vPortEnterCritical+0x58>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	4a0d      	ldr	r2, [pc, #52]	; (8002f0c <vPortEnterCritical+0x58>)
 8002ed6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <vPortEnterCritical+0x58>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d10f      	bne.n	8002f00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <vPortEnterCritical+0x5c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <vPortEnterCritical+0x4c>
	__asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	603b      	str	r3, [r7, #0]
}
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <vPortEnterCritical+0x4a>
	}
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	2000000c 	.word	0x2000000c
 8002f10:	e000ed04 	.word	0xe000ed04

08002f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002f1a:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <vPortExitCritical+0x50>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10a      	bne.n	8002f38 <vPortExitCritical+0x24>
	__asm volatile
 8002f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	607b      	str	r3, [r7, #4]
}
 8002f34:	bf00      	nop
 8002f36:	e7fe      	b.n	8002f36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002f38:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <vPortExitCritical+0x50>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <vPortExitCritical+0x50>)
 8002f40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002f42:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <vPortExitCritical+0x50>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d105      	bne.n	8002f56 <vPortExitCritical+0x42>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	2000000c 	.word	0x2000000c
	...

08002f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002f70:	f3ef 8009 	mrs	r0, PSP
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <pxCurrentTCBConst>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f01e 0f10 	tst.w	lr, #16
 8002f80:	bf08      	it	eq
 8002f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f8a:	6010      	str	r0, [r2, #0]
 8002f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f94:	f380 8811 	msr	BASEPRI, r0
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f7ff fcb8 	bl	8002914 <vTaskSwitchContext>
 8002fa4:	f04f 0000 	mov.w	r0, #0
 8002fa8:	f380 8811 	msr	BASEPRI, r0
 8002fac:	bc09      	pop	{r0, r3}
 8002fae:	6819      	ldr	r1, [r3, #0]
 8002fb0:	6808      	ldr	r0, [r1, #0]
 8002fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb6:	f01e 0f10 	tst.w	lr, #16
 8002fba:	bf08      	it	eq
 8002fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002fc0:	f380 8809 	msr	PSP, r0
 8002fc4:	f3bf 8f6f 	isb	sy
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	f3af 8000 	nop.w

08002fd0 <pxCurrentTCBConst>:
 8002fd0:	200003a0 	.word	0x200003a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop

08002fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	607b      	str	r3, [r7, #4]
}
 8002ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ff2:	f7ff fbd7 	bl	80027a4 <xTaskIncrementTick>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <SysTick_Handler+0x40>)
 8002ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	2300      	movs	r3, #0
 8003006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	f383 8811 	msr	BASEPRI, r3
}
 800300e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003010:	bf00      	nop
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	e000ed04 	.word	0xe000ed04

0800301c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <vPortSetupTimerInterrupt+0x34>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <vPortSetupTimerInterrupt+0x38>)
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <vPortSetupTimerInterrupt+0x3c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a0a      	ldr	r2, [pc, #40]	; (800305c <vPortSetupTimerInterrupt+0x40>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	099b      	lsrs	r3, r3, #6
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <vPortSetupTimerInterrupt+0x44>)
 800303a:	3b01      	subs	r3, #1
 800303c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <vPortSetupTimerInterrupt+0x34>)
 8003040:	2207      	movs	r2, #7
 8003042:	601a      	str	r2, [r3, #0]
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e010 	.word	0xe000e010
 8003054:	e000e018 	.word	0xe000e018
 8003058:	20000000 	.word	0x20000000
 800305c:	10624dd3 	.word	0x10624dd3
 8003060:	e000e014 	.word	0xe000e014

08003064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003074 <vPortEnableVFP+0x10>
 8003068:	6801      	ldr	r1, [r0, #0]
 800306a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800306e:	6001      	str	r1, [r0, #0]
 8003070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003072:	bf00      	nop
 8003074:	e000ed88 	.word	0xe000ed88

08003078 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003080:	2300      	movs	r3, #0
 8003082:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003084:	f7ff fae4 	bl	8002650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003088:	4b5b      	ldr	r3, [pc, #364]	; (80031f8 <pvPortMalloc+0x180>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003090:	f000 f920 	bl	80032d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <pvPortMalloc+0x184>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	f040 8093 	bne.w	80031c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d01d      	beq.n	80030e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80030a8:	2208      	movs	r2, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d014      	beq.n	80030e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f023 0307 	bic.w	r3, r3, #7
 80030c0:	3308      	adds	r3, #8
 80030c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00a      	beq.n	80030e4 <pvPortMalloc+0x6c>
	__asm volatile
 80030ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d2:	f383 8811 	msr	BASEPRI, r3
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	f3bf 8f4f 	dsb	sy
 80030de:	617b      	str	r3, [r7, #20]
}
 80030e0:	bf00      	nop
 80030e2:	e7fe      	b.n	80030e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d06e      	beq.n	80031c8 <pvPortMalloc+0x150>
 80030ea:	4b45      	ldr	r3, [pc, #276]	; (8003200 <pvPortMalloc+0x188>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d869      	bhi.n	80031c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80030f4:	4b43      	ldr	r3, [pc, #268]	; (8003204 <pvPortMalloc+0x18c>)
 80030f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80030f8:	4b42      	ldr	r3, [pc, #264]	; (8003204 <pvPortMalloc+0x18c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80030fe:	e004      	b.n	800310a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	429a      	cmp	r2, r3
 8003112:	d903      	bls.n	800311c <pvPortMalloc+0xa4>
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f1      	bne.n	8003100 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <pvPortMalloc+0x180>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003122:	429a      	cmp	r2, r3
 8003124:	d050      	beq.n	80031c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2208      	movs	r2, #8
 800312c:	4413      	add	r3, r2
 800312e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	1ad2      	subs	r2, r2, r3
 8003140:	2308      	movs	r3, #8
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	429a      	cmp	r2, r3
 8003146:	d91f      	bls.n	8003188 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00a      	beq.n	8003170 <pvPortMalloc+0xf8>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	613b      	str	r3, [r7, #16]
}
 800316c:	bf00      	nop
 800316e:	e7fe      	b.n	800316e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003172:	685a      	ldr	r2, [r3, #4]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	1ad2      	subs	r2, r2, r3
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003182:	69b8      	ldr	r0, [r7, #24]
 8003184:	f000 f908 	bl	8003398 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <pvPortMalloc+0x188>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <pvPortMalloc+0x188>)
 8003194:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <pvPortMalloc+0x188>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4b1b      	ldr	r3, [pc, #108]	; (8003208 <pvPortMalloc+0x190>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d203      	bcs.n	80031aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80031a2:	4b17      	ldr	r3, [pc, #92]	; (8003200 <pvPortMalloc+0x188>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a18      	ldr	r2, [pc, #96]	; (8003208 <pvPortMalloc+0x190>)
 80031a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <pvPortMalloc+0x184>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	431a      	orrs	r2, r3
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80031be:	4b13      	ldr	r3, [pc, #76]	; (800320c <pvPortMalloc+0x194>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	4a11      	ldr	r2, [pc, #68]	; (800320c <pvPortMalloc+0x194>)
 80031c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80031c8:	f7ff fa50 	bl	800266c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <pvPortMalloc+0x174>
	__asm volatile
 80031d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031da:	f383 8811 	msr	BASEPRI, r3
 80031de:	f3bf 8f6f 	isb	sy
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	60fb      	str	r3, [r7, #12]
}
 80031e8:	bf00      	nop
 80031ea:	e7fe      	b.n	80031ea <pvPortMalloc+0x172>
	return pvReturn;
 80031ec:	69fb      	ldr	r3, [r7, #28]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3728      	adds	r7, #40	; 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200040dc 	.word	0x200040dc
 80031fc:	200040f0 	.word	0x200040f0
 8003200:	200040e0 	.word	0x200040e0
 8003204:	200040d4 	.word	0x200040d4
 8003208:	200040e4 	.word	0x200040e4
 800320c:	200040e8 	.word	0x200040e8

08003210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d04d      	beq.n	80032be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003222:	2308      	movs	r3, #8
 8003224:	425b      	negs	r3, r3
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4413      	add	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <vPortFree+0xb8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <vPortFree+0x44>
	__asm volatile
 800323e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	f3bf 8f6f 	isb	sy
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	60fb      	str	r3, [r7, #12]
}
 8003250:	bf00      	nop
 8003252:	e7fe      	b.n	8003252 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <vPortFree+0x62>
	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	60bb      	str	r3, [r7, #8]
}
 800326e:	bf00      	nop
 8003270:	e7fe      	b.n	8003270 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <vPortFree+0xb8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4013      	ands	r3, r2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01e      	beq.n	80032be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d11a      	bne.n	80032be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <vPortFree+0xb8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	43db      	mvns	r3, r3
 8003292:	401a      	ands	r2, r3
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003298:	f7ff f9da 	bl	8002650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <vPortFree+0xbc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4413      	add	r3, r2
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <vPortFree+0xbc>)
 80032a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80032aa:	6938      	ldr	r0, [r7, #16]
 80032ac:	f000 f874 	bl	8003398 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <vPortFree+0xc0>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	3301      	adds	r3, #1
 80032b6:	4a06      	ldr	r2, [pc, #24]	; (80032d0 <vPortFree+0xc0>)
 80032b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80032ba:	f7ff f9d7 	bl	800266c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80032be:	bf00      	nop
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	200040f0 	.word	0x200040f0
 80032cc:	200040e0 	.word	0x200040e0
 80032d0:	200040ec 	.word	0x200040ec

080032d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80032da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80032de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80032e0:	4b27      	ldr	r3, [pc, #156]	; (8003380 <prvHeapInit+0xac>)
 80032e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00c      	beq.n	8003308 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3307      	adds	r3, #7
 80032f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0307 	bic.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <prvHeapInit+0xac>)
 8003304:	4413      	add	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800330c:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <prvHeapInit+0xb0>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003312:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <prvHeapInit+0xb0>)
 8003314:	2200      	movs	r2, #0
 8003316:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	4413      	add	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003320:	2208      	movs	r2, #8
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f023 0307 	bic.w	r3, r3, #7
 800332e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a15      	ldr	r2, [pc, #84]	; (8003388 <prvHeapInit+0xb4>)
 8003334:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <prvHeapInit+0xb4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2200      	movs	r2, #0
 800333c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <prvHeapInit+0xb4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	1ad2      	subs	r2, r2, r3
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <prvHeapInit+0xb4>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4a0a      	ldr	r2, [pc, #40]	; (800338c <prvHeapInit+0xb8>)
 8003362:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a09      	ldr	r2, [pc, #36]	; (8003390 <prvHeapInit+0xbc>)
 800336a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <prvHeapInit+0xc0>)
 800336e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003372:	601a      	str	r2, [r3, #0]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	200004d4 	.word	0x200004d4
 8003384:	200040d4 	.word	0x200040d4
 8003388:	200040dc 	.word	0x200040dc
 800338c:	200040e4 	.word	0x200040e4
 8003390:	200040e0 	.word	0x200040e0
 8003394:	200040f0 	.word	0x200040f0

08003398 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80033a0:	4b28      	ldr	r3, [pc, #160]	; (8003444 <prvInsertBlockIntoFreeList+0xac>)
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	e002      	b.n	80033ac <prvInsertBlockIntoFreeList+0x14>
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d8f7      	bhi.n	80033a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	68ba      	ldr	r2, [r7, #8]
 80033c0:	4413      	add	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d108      	bne.n	80033da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	441a      	add	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	441a      	add	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d118      	bne.n	8003420 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b15      	ldr	r3, [pc, #84]	; (8003448 <prvInsertBlockIntoFreeList+0xb0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d00d      	beq.n	8003416 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e008      	b.n	8003428 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003416:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <prvInsertBlockIntoFreeList+0xb0>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	e003      	b.n	8003428 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	d002      	beq.n	8003436 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	200040d4 	.word	0x200040d4
 8003448:	200040dc 	.word	0x200040dc

0800344c <__errno>:
 800344c:	4b01      	ldr	r3, [pc, #4]	; (8003454 <__errno+0x8>)
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000010 	.word	0x20000010

08003458 <std>:
 8003458:	2300      	movs	r3, #0
 800345a:	b510      	push	{r4, lr}
 800345c:	4604      	mov	r4, r0
 800345e:	e9c0 3300 	strd	r3, r3, [r0]
 8003462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003466:	6083      	str	r3, [r0, #8]
 8003468:	8181      	strh	r1, [r0, #12]
 800346a:	6643      	str	r3, [r0, #100]	; 0x64
 800346c:	81c2      	strh	r2, [r0, #14]
 800346e:	6183      	str	r3, [r0, #24]
 8003470:	4619      	mov	r1, r3
 8003472:	2208      	movs	r2, #8
 8003474:	305c      	adds	r0, #92	; 0x5c
 8003476:	f000 f90c 	bl	8003692 <memset>
 800347a:	4b05      	ldr	r3, [pc, #20]	; (8003490 <std+0x38>)
 800347c:	6263      	str	r3, [r4, #36]	; 0x24
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <std+0x3c>)
 8003480:	62a3      	str	r3, [r4, #40]	; 0x28
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <std+0x40>)
 8003484:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <std+0x44>)
 8003488:	6224      	str	r4, [r4, #32]
 800348a:	6323      	str	r3, [r4, #48]	; 0x30
 800348c:	bd10      	pop	{r4, pc}
 800348e:	bf00      	nop
 8003490:	080039ad 	.word	0x080039ad
 8003494:	080039cf 	.word	0x080039cf
 8003498:	08003a07 	.word	0x08003a07
 800349c:	08003a2b 	.word	0x08003a2b

080034a0 <_cleanup_r>:
 80034a0:	4901      	ldr	r1, [pc, #4]	; (80034a8 <_cleanup_r+0x8>)
 80034a2:	f000 b8af 	b.w	8003604 <_fwalk_reent>
 80034a6:	bf00      	nop
 80034a8:	08003d05 	.word	0x08003d05

080034ac <__sfmoreglue>:
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	2268      	movs	r2, #104	; 0x68
 80034b0:	1e4d      	subs	r5, r1, #1
 80034b2:	4355      	muls	r5, r2
 80034b4:	460e      	mov	r6, r1
 80034b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034ba:	f000 f913 	bl	80036e4 <_malloc_r>
 80034be:	4604      	mov	r4, r0
 80034c0:	b140      	cbz	r0, 80034d4 <__sfmoreglue+0x28>
 80034c2:	2100      	movs	r1, #0
 80034c4:	e9c0 1600 	strd	r1, r6, [r0]
 80034c8:	300c      	adds	r0, #12
 80034ca:	60a0      	str	r0, [r4, #8]
 80034cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034d0:	f000 f8df 	bl	8003692 <memset>
 80034d4:	4620      	mov	r0, r4
 80034d6:	bd70      	pop	{r4, r5, r6, pc}

080034d8 <__sfp_lock_acquire>:
 80034d8:	4801      	ldr	r0, [pc, #4]	; (80034e0 <__sfp_lock_acquire+0x8>)
 80034da:	f000 b8d8 	b.w	800368e <__retarget_lock_acquire_recursive>
 80034de:	bf00      	nop
 80034e0:	200040f5 	.word	0x200040f5

080034e4 <__sfp_lock_release>:
 80034e4:	4801      	ldr	r0, [pc, #4]	; (80034ec <__sfp_lock_release+0x8>)
 80034e6:	f000 b8d3 	b.w	8003690 <__retarget_lock_release_recursive>
 80034ea:	bf00      	nop
 80034ec:	200040f5 	.word	0x200040f5

080034f0 <__sinit_lock_acquire>:
 80034f0:	4801      	ldr	r0, [pc, #4]	; (80034f8 <__sinit_lock_acquire+0x8>)
 80034f2:	f000 b8cc 	b.w	800368e <__retarget_lock_acquire_recursive>
 80034f6:	bf00      	nop
 80034f8:	200040f6 	.word	0x200040f6

080034fc <__sinit_lock_release>:
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <__sinit_lock_release+0x8>)
 80034fe:	f000 b8c7 	b.w	8003690 <__retarget_lock_release_recursive>
 8003502:	bf00      	nop
 8003504:	200040f6 	.word	0x200040f6

08003508 <__sinit>:
 8003508:	b510      	push	{r4, lr}
 800350a:	4604      	mov	r4, r0
 800350c:	f7ff fff0 	bl	80034f0 <__sinit_lock_acquire>
 8003510:	69a3      	ldr	r3, [r4, #24]
 8003512:	b11b      	cbz	r3, 800351c <__sinit+0x14>
 8003514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003518:	f7ff bff0 	b.w	80034fc <__sinit_lock_release>
 800351c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003520:	6523      	str	r3, [r4, #80]	; 0x50
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <__sinit+0x68>)
 8003524:	4a13      	ldr	r2, [pc, #76]	; (8003574 <__sinit+0x6c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	62a2      	str	r2, [r4, #40]	; 0x28
 800352a:	42a3      	cmp	r3, r4
 800352c:	bf04      	itt	eq
 800352e:	2301      	moveq	r3, #1
 8003530:	61a3      	streq	r3, [r4, #24]
 8003532:	4620      	mov	r0, r4
 8003534:	f000 f820 	bl	8003578 <__sfp>
 8003538:	6060      	str	r0, [r4, #4]
 800353a:	4620      	mov	r0, r4
 800353c:	f000 f81c 	bl	8003578 <__sfp>
 8003540:	60a0      	str	r0, [r4, #8]
 8003542:	4620      	mov	r0, r4
 8003544:	f000 f818 	bl	8003578 <__sfp>
 8003548:	2200      	movs	r2, #0
 800354a:	60e0      	str	r0, [r4, #12]
 800354c:	2104      	movs	r1, #4
 800354e:	6860      	ldr	r0, [r4, #4]
 8003550:	f7ff ff82 	bl	8003458 <std>
 8003554:	68a0      	ldr	r0, [r4, #8]
 8003556:	2201      	movs	r2, #1
 8003558:	2109      	movs	r1, #9
 800355a:	f7ff ff7d 	bl	8003458 <std>
 800355e:	68e0      	ldr	r0, [r4, #12]
 8003560:	2202      	movs	r2, #2
 8003562:	2112      	movs	r1, #18
 8003564:	f7ff ff78 	bl	8003458 <std>
 8003568:	2301      	movs	r3, #1
 800356a:	61a3      	str	r3, [r4, #24]
 800356c:	e7d2      	b.n	8003514 <__sinit+0xc>
 800356e:	bf00      	nop
 8003570:	080040bc 	.word	0x080040bc
 8003574:	080034a1 	.word	0x080034a1

08003578 <__sfp>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	4607      	mov	r7, r0
 800357c:	f7ff ffac 	bl	80034d8 <__sfp_lock_acquire>
 8003580:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <__sfp+0x84>)
 8003582:	681e      	ldr	r6, [r3, #0]
 8003584:	69b3      	ldr	r3, [r6, #24]
 8003586:	b913      	cbnz	r3, 800358e <__sfp+0x16>
 8003588:	4630      	mov	r0, r6
 800358a:	f7ff ffbd 	bl	8003508 <__sinit>
 800358e:	3648      	adds	r6, #72	; 0x48
 8003590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003594:	3b01      	subs	r3, #1
 8003596:	d503      	bpl.n	80035a0 <__sfp+0x28>
 8003598:	6833      	ldr	r3, [r6, #0]
 800359a:	b30b      	cbz	r3, 80035e0 <__sfp+0x68>
 800359c:	6836      	ldr	r6, [r6, #0]
 800359e:	e7f7      	b.n	8003590 <__sfp+0x18>
 80035a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035a4:	b9d5      	cbnz	r5, 80035dc <__sfp+0x64>
 80035a6:	4b16      	ldr	r3, [pc, #88]	; (8003600 <__sfp+0x88>)
 80035a8:	60e3      	str	r3, [r4, #12]
 80035aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80035ae:	6665      	str	r5, [r4, #100]	; 0x64
 80035b0:	f000 f86c 	bl	800368c <__retarget_lock_init_recursive>
 80035b4:	f7ff ff96 	bl	80034e4 <__sfp_lock_release>
 80035b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80035bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80035c0:	6025      	str	r5, [r4, #0]
 80035c2:	61a5      	str	r5, [r4, #24]
 80035c4:	2208      	movs	r2, #8
 80035c6:	4629      	mov	r1, r5
 80035c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035cc:	f000 f861 	bl	8003692 <memset>
 80035d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035d8:	4620      	mov	r0, r4
 80035da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035dc:	3468      	adds	r4, #104	; 0x68
 80035de:	e7d9      	b.n	8003594 <__sfp+0x1c>
 80035e0:	2104      	movs	r1, #4
 80035e2:	4638      	mov	r0, r7
 80035e4:	f7ff ff62 	bl	80034ac <__sfmoreglue>
 80035e8:	4604      	mov	r4, r0
 80035ea:	6030      	str	r0, [r6, #0]
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d1d5      	bne.n	800359c <__sfp+0x24>
 80035f0:	f7ff ff78 	bl	80034e4 <__sfp_lock_release>
 80035f4:	230c      	movs	r3, #12
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	e7ee      	b.n	80035d8 <__sfp+0x60>
 80035fa:	bf00      	nop
 80035fc:	080040bc 	.word	0x080040bc
 8003600:	ffff0001 	.word	0xffff0001

08003604 <_fwalk_reent>:
 8003604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003608:	4606      	mov	r6, r0
 800360a:	4688      	mov	r8, r1
 800360c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003610:	2700      	movs	r7, #0
 8003612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003616:	f1b9 0901 	subs.w	r9, r9, #1
 800361a:	d505      	bpl.n	8003628 <_fwalk_reent+0x24>
 800361c:	6824      	ldr	r4, [r4, #0]
 800361e:	2c00      	cmp	r4, #0
 8003620:	d1f7      	bne.n	8003612 <_fwalk_reent+0xe>
 8003622:	4638      	mov	r0, r7
 8003624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003628:	89ab      	ldrh	r3, [r5, #12]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d907      	bls.n	800363e <_fwalk_reent+0x3a>
 800362e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003632:	3301      	adds	r3, #1
 8003634:	d003      	beq.n	800363e <_fwalk_reent+0x3a>
 8003636:	4629      	mov	r1, r5
 8003638:	4630      	mov	r0, r6
 800363a:	47c0      	blx	r8
 800363c:	4307      	orrs	r7, r0
 800363e:	3568      	adds	r5, #104	; 0x68
 8003640:	e7e9      	b.n	8003616 <_fwalk_reent+0x12>
	...

08003644 <__libc_init_array>:
 8003644:	b570      	push	{r4, r5, r6, lr}
 8003646:	4d0d      	ldr	r5, [pc, #52]	; (800367c <__libc_init_array+0x38>)
 8003648:	4c0d      	ldr	r4, [pc, #52]	; (8003680 <__libc_init_array+0x3c>)
 800364a:	1b64      	subs	r4, r4, r5
 800364c:	10a4      	asrs	r4, r4, #2
 800364e:	2600      	movs	r6, #0
 8003650:	42a6      	cmp	r6, r4
 8003652:	d109      	bne.n	8003668 <__libc_init_array+0x24>
 8003654:	4d0b      	ldr	r5, [pc, #44]	; (8003684 <__libc_init_array+0x40>)
 8003656:	4c0c      	ldr	r4, [pc, #48]	; (8003688 <__libc_init_array+0x44>)
 8003658:	f000 fc94 	bl	8003f84 <_init>
 800365c:	1b64      	subs	r4, r4, r5
 800365e:	10a4      	asrs	r4, r4, #2
 8003660:	2600      	movs	r6, #0
 8003662:	42a6      	cmp	r6, r4
 8003664:	d105      	bne.n	8003672 <__libc_init_array+0x2e>
 8003666:	bd70      	pop	{r4, r5, r6, pc}
 8003668:	f855 3b04 	ldr.w	r3, [r5], #4
 800366c:	4798      	blx	r3
 800366e:	3601      	adds	r6, #1
 8003670:	e7ee      	b.n	8003650 <__libc_init_array+0xc>
 8003672:	f855 3b04 	ldr.w	r3, [r5], #4
 8003676:	4798      	blx	r3
 8003678:	3601      	adds	r6, #1
 800367a:	e7f2      	b.n	8003662 <__libc_init_array+0x1e>
 800367c:	080040c8 	.word	0x080040c8
 8003680:	080040c8 	.word	0x080040c8
 8003684:	080040c8 	.word	0x080040c8
 8003688:	080040cc 	.word	0x080040cc

0800368c <__retarget_lock_init_recursive>:
 800368c:	4770      	bx	lr

0800368e <__retarget_lock_acquire_recursive>:
 800368e:	4770      	bx	lr

08003690 <__retarget_lock_release_recursive>:
 8003690:	4770      	bx	lr

08003692 <memset>:
 8003692:	4402      	add	r2, r0
 8003694:	4603      	mov	r3, r0
 8003696:	4293      	cmp	r3, r2
 8003698:	d100      	bne.n	800369c <memset+0xa>
 800369a:	4770      	bx	lr
 800369c:	f803 1b01 	strb.w	r1, [r3], #1
 80036a0:	e7f9      	b.n	8003696 <memset+0x4>
	...

080036a4 <sbrk_aligned>:
 80036a4:	b570      	push	{r4, r5, r6, lr}
 80036a6:	4e0e      	ldr	r6, [pc, #56]	; (80036e0 <sbrk_aligned+0x3c>)
 80036a8:	460c      	mov	r4, r1
 80036aa:	6831      	ldr	r1, [r6, #0]
 80036ac:	4605      	mov	r5, r0
 80036ae:	b911      	cbnz	r1, 80036b6 <sbrk_aligned+0x12>
 80036b0:	f000 f96c 	bl	800398c <_sbrk_r>
 80036b4:	6030      	str	r0, [r6, #0]
 80036b6:	4621      	mov	r1, r4
 80036b8:	4628      	mov	r0, r5
 80036ba:	f000 f967 	bl	800398c <_sbrk_r>
 80036be:	1c43      	adds	r3, r0, #1
 80036c0:	d00a      	beq.n	80036d8 <sbrk_aligned+0x34>
 80036c2:	1cc4      	adds	r4, r0, #3
 80036c4:	f024 0403 	bic.w	r4, r4, #3
 80036c8:	42a0      	cmp	r0, r4
 80036ca:	d007      	beq.n	80036dc <sbrk_aligned+0x38>
 80036cc:	1a21      	subs	r1, r4, r0
 80036ce:	4628      	mov	r0, r5
 80036d0:	f000 f95c 	bl	800398c <_sbrk_r>
 80036d4:	3001      	adds	r0, #1
 80036d6:	d101      	bne.n	80036dc <sbrk_aligned+0x38>
 80036d8:	f04f 34ff 	mov.w	r4, #4294967295
 80036dc:	4620      	mov	r0, r4
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	200040fc 	.word	0x200040fc

080036e4 <_malloc_r>:
 80036e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036e8:	1ccd      	adds	r5, r1, #3
 80036ea:	f025 0503 	bic.w	r5, r5, #3
 80036ee:	3508      	adds	r5, #8
 80036f0:	2d0c      	cmp	r5, #12
 80036f2:	bf38      	it	cc
 80036f4:	250c      	movcc	r5, #12
 80036f6:	2d00      	cmp	r5, #0
 80036f8:	4607      	mov	r7, r0
 80036fa:	db01      	blt.n	8003700 <_malloc_r+0x1c>
 80036fc:	42a9      	cmp	r1, r5
 80036fe:	d905      	bls.n	800370c <_malloc_r+0x28>
 8003700:	230c      	movs	r3, #12
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	2600      	movs	r6, #0
 8003706:	4630      	mov	r0, r6
 8003708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800370c:	4e2e      	ldr	r6, [pc, #184]	; (80037c8 <_malloc_r+0xe4>)
 800370e:	f000 fbad 	bl	8003e6c <__malloc_lock>
 8003712:	6833      	ldr	r3, [r6, #0]
 8003714:	461c      	mov	r4, r3
 8003716:	bb34      	cbnz	r4, 8003766 <_malloc_r+0x82>
 8003718:	4629      	mov	r1, r5
 800371a:	4638      	mov	r0, r7
 800371c:	f7ff ffc2 	bl	80036a4 <sbrk_aligned>
 8003720:	1c43      	adds	r3, r0, #1
 8003722:	4604      	mov	r4, r0
 8003724:	d14d      	bne.n	80037c2 <_malloc_r+0xde>
 8003726:	6834      	ldr	r4, [r6, #0]
 8003728:	4626      	mov	r6, r4
 800372a:	2e00      	cmp	r6, #0
 800372c:	d140      	bne.n	80037b0 <_malloc_r+0xcc>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	4631      	mov	r1, r6
 8003732:	4638      	mov	r0, r7
 8003734:	eb04 0803 	add.w	r8, r4, r3
 8003738:	f000 f928 	bl	800398c <_sbrk_r>
 800373c:	4580      	cmp	r8, r0
 800373e:	d13a      	bne.n	80037b6 <_malloc_r+0xd2>
 8003740:	6821      	ldr	r1, [r4, #0]
 8003742:	3503      	adds	r5, #3
 8003744:	1a6d      	subs	r5, r5, r1
 8003746:	f025 0503 	bic.w	r5, r5, #3
 800374a:	3508      	adds	r5, #8
 800374c:	2d0c      	cmp	r5, #12
 800374e:	bf38      	it	cc
 8003750:	250c      	movcc	r5, #12
 8003752:	4629      	mov	r1, r5
 8003754:	4638      	mov	r0, r7
 8003756:	f7ff ffa5 	bl	80036a4 <sbrk_aligned>
 800375a:	3001      	adds	r0, #1
 800375c:	d02b      	beq.n	80037b6 <_malloc_r+0xd2>
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	442b      	add	r3, r5
 8003762:	6023      	str	r3, [r4, #0]
 8003764:	e00e      	b.n	8003784 <_malloc_r+0xa0>
 8003766:	6822      	ldr	r2, [r4, #0]
 8003768:	1b52      	subs	r2, r2, r5
 800376a:	d41e      	bmi.n	80037aa <_malloc_r+0xc6>
 800376c:	2a0b      	cmp	r2, #11
 800376e:	d916      	bls.n	800379e <_malloc_r+0xba>
 8003770:	1961      	adds	r1, r4, r5
 8003772:	42a3      	cmp	r3, r4
 8003774:	6025      	str	r5, [r4, #0]
 8003776:	bf18      	it	ne
 8003778:	6059      	strne	r1, [r3, #4]
 800377a:	6863      	ldr	r3, [r4, #4]
 800377c:	bf08      	it	eq
 800377e:	6031      	streq	r1, [r6, #0]
 8003780:	5162      	str	r2, [r4, r5]
 8003782:	604b      	str	r3, [r1, #4]
 8003784:	4638      	mov	r0, r7
 8003786:	f104 060b 	add.w	r6, r4, #11
 800378a:	f000 fb75 	bl	8003e78 <__malloc_unlock>
 800378e:	f026 0607 	bic.w	r6, r6, #7
 8003792:	1d23      	adds	r3, r4, #4
 8003794:	1af2      	subs	r2, r6, r3
 8003796:	d0b6      	beq.n	8003706 <_malloc_r+0x22>
 8003798:	1b9b      	subs	r3, r3, r6
 800379a:	50a3      	str	r3, [r4, r2]
 800379c:	e7b3      	b.n	8003706 <_malloc_r+0x22>
 800379e:	6862      	ldr	r2, [r4, #4]
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	bf0c      	ite	eq
 80037a4:	6032      	streq	r2, [r6, #0]
 80037a6:	605a      	strne	r2, [r3, #4]
 80037a8:	e7ec      	b.n	8003784 <_malloc_r+0xa0>
 80037aa:	4623      	mov	r3, r4
 80037ac:	6864      	ldr	r4, [r4, #4]
 80037ae:	e7b2      	b.n	8003716 <_malloc_r+0x32>
 80037b0:	4634      	mov	r4, r6
 80037b2:	6876      	ldr	r6, [r6, #4]
 80037b4:	e7b9      	b.n	800372a <_malloc_r+0x46>
 80037b6:	230c      	movs	r3, #12
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	4638      	mov	r0, r7
 80037bc:	f000 fb5c 	bl	8003e78 <__malloc_unlock>
 80037c0:	e7a1      	b.n	8003706 <_malloc_r+0x22>
 80037c2:	6025      	str	r5, [r4, #0]
 80037c4:	e7de      	b.n	8003784 <_malloc_r+0xa0>
 80037c6:	bf00      	nop
 80037c8:	200040f8 	.word	0x200040f8

080037cc <_puts_r>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	460e      	mov	r6, r1
 80037d0:	4605      	mov	r5, r0
 80037d2:	b118      	cbz	r0, 80037dc <_puts_r+0x10>
 80037d4:	6983      	ldr	r3, [r0, #24]
 80037d6:	b90b      	cbnz	r3, 80037dc <_puts_r+0x10>
 80037d8:	f7ff fe96 	bl	8003508 <__sinit>
 80037dc:	69ab      	ldr	r3, [r5, #24]
 80037de:	68ac      	ldr	r4, [r5, #8]
 80037e0:	b913      	cbnz	r3, 80037e8 <_puts_r+0x1c>
 80037e2:	4628      	mov	r0, r5
 80037e4:	f7ff fe90 	bl	8003508 <__sinit>
 80037e8:	4b2c      	ldr	r3, [pc, #176]	; (800389c <_puts_r+0xd0>)
 80037ea:	429c      	cmp	r4, r3
 80037ec:	d120      	bne.n	8003830 <_puts_r+0x64>
 80037ee:	686c      	ldr	r4, [r5, #4]
 80037f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037f2:	07db      	lsls	r3, r3, #31
 80037f4:	d405      	bmi.n	8003802 <_puts_r+0x36>
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	0598      	lsls	r0, r3, #22
 80037fa:	d402      	bmi.n	8003802 <_puts_r+0x36>
 80037fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037fe:	f7ff ff46 	bl	800368e <__retarget_lock_acquire_recursive>
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	0719      	lsls	r1, r3, #28
 8003806:	d51d      	bpl.n	8003844 <_puts_r+0x78>
 8003808:	6923      	ldr	r3, [r4, #16]
 800380a:	b1db      	cbz	r3, 8003844 <_puts_r+0x78>
 800380c:	3e01      	subs	r6, #1
 800380e:	68a3      	ldr	r3, [r4, #8]
 8003810:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003814:	3b01      	subs	r3, #1
 8003816:	60a3      	str	r3, [r4, #8]
 8003818:	bb39      	cbnz	r1, 800386a <_puts_r+0x9e>
 800381a:	2b00      	cmp	r3, #0
 800381c:	da38      	bge.n	8003890 <_puts_r+0xc4>
 800381e:	4622      	mov	r2, r4
 8003820:	210a      	movs	r1, #10
 8003822:	4628      	mov	r0, r5
 8003824:	f000 f906 	bl	8003a34 <__swbuf_r>
 8003828:	3001      	adds	r0, #1
 800382a:	d011      	beq.n	8003850 <_puts_r+0x84>
 800382c:	250a      	movs	r5, #10
 800382e:	e011      	b.n	8003854 <_puts_r+0x88>
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <_puts_r+0xd4>)
 8003832:	429c      	cmp	r4, r3
 8003834:	d101      	bne.n	800383a <_puts_r+0x6e>
 8003836:	68ac      	ldr	r4, [r5, #8]
 8003838:	e7da      	b.n	80037f0 <_puts_r+0x24>
 800383a:	4b1a      	ldr	r3, [pc, #104]	; (80038a4 <_puts_r+0xd8>)
 800383c:	429c      	cmp	r4, r3
 800383e:	bf08      	it	eq
 8003840:	68ec      	ldreq	r4, [r5, #12]
 8003842:	e7d5      	b.n	80037f0 <_puts_r+0x24>
 8003844:	4621      	mov	r1, r4
 8003846:	4628      	mov	r0, r5
 8003848:	f000 f958 	bl	8003afc <__swsetup_r>
 800384c:	2800      	cmp	r0, #0
 800384e:	d0dd      	beq.n	800380c <_puts_r+0x40>
 8003850:	f04f 35ff 	mov.w	r5, #4294967295
 8003854:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003856:	07da      	lsls	r2, r3, #31
 8003858:	d405      	bmi.n	8003866 <_puts_r+0x9a>
 800385a:	89a3      	ldrh	r3, [r4, #12]
 800385c:	059b      	lsls	r3, r3, #22
 800385e:	d402      	bmi.n	8003866 <_puts_r+0x9a>
 8003860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003862:	f7ff ff15 	bl	8003690 <__retarget_lock_release_recursive>
 8003866:	4628      	mov	r0, r5
 8003868:	bd70      	pop	{r4, r5, r6, pc}
 800386a:	2b00      	cmp	r3, #0
 800386c:	da04      	bge.n	8003878 <_puts_r+0xac>
 800386e:	69a2      	ldr	r2, [r4, #24]
 8003870:	429a      	cmp	r2, r3
 8003872:	dc06      	bgt.n	8003882 <_puts_r+0xb6>
 8003874:	290a      	cmp	r1, #10
 8003876:	d004      	beq.n	8003882 <_puts_r+0xb6>
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	6022      	str	r2, [r4, #0]
 800387e:	7019      	strb	r1, [r3, #0]
 8003880:	e7c5      	b.n	800380e <_puts_r+0x42>
 8003882:	4622      	mov	r2, r4
 8003884:	4628      	mov	r0, r5
 8003886:	f000 f8d5 	bl	8003a34 <__swbuf_r>
 800388a:	3001      	adds	r0, #1
 800388c:	d1bf      	bne.n	800380e <_puts_r+0x42>
 800388e:	e7df      	b.n	8003850 <_puts_r+0x84>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	250a      	movs	r5, #10
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	6022      	str	r2, [r4, #0]
 8003898:	701d      	strb	r5, [r3, #0]
 800389a:	e7db      	b.n	8003854 <_puts_r+0x88>
 800389c:	0800407c 	.word	0x0800407c
 80038a0:	0800409c 	.word	0x0800409c
 80038a4:	0800405c 	.word	0x0800405c

080038a8 <puts>:
 80038a8:	4b02      	ldr	r3, [pc, #8]	; (80038b4 <puts+0xc>)
 80038aa:	4601      	mov	r1, r0
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	f7ff bf8d 	b.w	80037cc <_puts_r>
 80038b2:	bf00      	nop
 80038b4:	20000010 	.word	0x20000010

080038b8 <cleanup_glue>:
 80038b8:	b538      	push	{r3, r4, r5, lr}
 80038ba:	460c      	mov	r4, r1
 80038bc:	6809      	ldr	r1, [r1, #0]
 80038be:	4605      	mov	r5, r0
 80038c0:	b109      	cbz	r1, 80038c6 <cleanup_glue+0xe>
 80038c2:	f7ff fff9 	bl	80038b8 <cleanup_glue>
 80038c6:	4621      	mov	r1, r4
 80038c8:	4628      	mov	r0, r5
 80038ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038ce:	f000 bad9 	b.w	8003e84 <_free_r>
	...

080038d4 <_reclaim_reent>:
 80038d4:	4b2c      	ldr	r3, [pc, #176]	; (8003988 <_reclaim_reent+0xb4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4283      	cmp	r3, r0
 80038da:	b570      	push	{r4, r5, r6, lr}
 80038dc:	4604      	mov	r4, r0
 80038de:	d051      	beq.n	8003984 <_reclaim_reent+0xb0>
 80038e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038e2:	b143      	cbz	r3, 80038f6 <_reclaim_reent+0x22>
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d14a      	bne.n	8003980 <_reclaim_reent+0xac>
 80038ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038ec:	6819      	ldr	r1, [r3, #0]
 80038ee:	b111      	cbz	r1, 80038f6 <_reclaim_reent+0x22>
 80038f0:	4620      	mov	r0, r4
 80038f2:	f000 fac7 	bl	8003e84 <_free_r>
 80038f6:	6961      	ldr	r1, [r4, #20]
 80038f8:	b111      	cbz	r1, 8003900 <_reclaim_reent+0x2c>
 80038fa:	4620      	mov	r0, r4
 80038fc:	f000 fac2 	bl	8003e84 <_free_r>
 8003900:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003902:	b111      	cbz	r1, 800390a <_reclaim_reent+0x36>
 8003904:	4620      	mov	r0, r4
 8003906:	f000 fabd 	bl	8003e84 <_free_r>
 800390a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800390c:	b111      	cbz	r1, 8003914 <_reclaim_reent+0x40>
 800390e:	4620      	mov	r0, r4
 8003910:	f000 fab8 	bl	8003e84 <_free_r>
 8003914:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003916:	b111      	cbz	r1, 800391e <_reclaim_reent+0x4a>
 8003918:	4620      	mov	r0, r4
 800391a:	f000 fab3 	bl	8003e84 <_free_r>
 800391e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003920:	b111      	cbz	r1, 8003928 <_reclaim_reent+0x54>
 8003922:	4620      	mov	r0, r4
 8003924:	f000 faae 	bl	8003e84 <_free_r>
 8003928:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800392a:	b111      	cbz	r1, 8003932 <_reclaim_reent+0x5e>
 800392c:	4620      	mov	r0, r4
 800392e:	f000 faa9 	bl	8003e84 <_free_r>
 8003932:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003934:	b111      	cbz	r1, 800393c <_reclaim_reent+0x68>
 8003936:	4620      	mov	r0, r4
 8003938:	f000 faa4 	bl	8003e84 <_free_r>
 800393c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800393e:	b111      	cbz	r1, 8003946 <_reclaim_reent+0x72>
 8003940:	4620      	mov	r0, r4
 8003942:	f000 fa9f 	bl	8003e84 <_free_r>
 8003946:	69a3      	ldr	r3, [r4, #24]
 8003948:	b1e3      	cbz	r3, 8003984 <_reclaim_reent+0xb0>
 800394a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800394c:	4620      	mov	r0, r4
 800394e:	4798      	blx	r3
 8003950:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003952:	b1b9      	cbz	r1, 8003984 <_reclaim_reent+0xb0>
 8003954:	4620      	mov	r0, r4
 8003956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800395a:	f7ff bfad 	b.w	80038b8 <cleanup_glue>
 800395e:	5949      	ldr	r1, [r1, r5]
 8003960:	b941      	cbnz	r1, 8003974 <_reclaim_reent+0xa0>
 8003962:	3504      	adds	r5, #4
 8003964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003966:	2d80      	cmp	r5, #128	; 0x80
 8003968:	68d9      	ldr	r1, [r3, #12]
 800396a:	d1f8      	bne.n	800395e <_reclaim_reent+0x8a>
 800396c:	4620      	mov	r0, r4
 800396e:	f000 fa89 	bl	8003e84 <_free_r>
 8003972:	e7ba      	b.n	80038ea <_reclaim_reent+0x16>
 8003974:	680e      	ldr	r6, [r1, #0]
 8003976:	4620      	mov	r0, r4
 8003978:	f000 fa84 	bl	8003e84 <_free_r>
 800397c:	4631      	mov	r1, r6
 800397e:	e7ef      	b.n	8003960 <_reclaim_reent+0x8c>
 8003980:	2500      	movs	r5, #0
 8003982:	e7ef      	b.n	8003964 <_reclaim_reent+0x90>
 8003984:	bd70      	pop	{r4, r5, r6, pc}
 8003986:	bf00      	nop
 8003988:	20000010 	.word	0x20000010

0800398c <_sbrk_r>:
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4d06      	ldr	r5, [pc, #24]	; (80039a8 <_sbrk_r+0x1c>)
 8003990:	2300      	movs	r3, #0
 8003992:	4604      	mov	r4, r0
 8003994:	4608      	mov	r0, r1
 8003996:	602b      	str	r3, [r5, #0]
 8003998:	f7fd f854 	bl	8000a44 <_sbrk>
 800399c:	1c43      	adds	r3, r0, #1
 800399e:	d102      	bne.n	80039a6 <_sbrk_r+0x1a>
 80039a0:	682b      	ldr	r3, [r5, #0]
 80039a2:	b103      	cbz	r3, 80039a6 <_sbrk_r+0x1a>
 80039a4:	6023      	str	r3, [r4, #0]
 80039a6:	bd38      	pop	{r3, r4, r5, pc}
 80039a8:	20004100 	.word	0x20004100

080039ac <__sread>:
 80039ac:	b510      	push	{r4, lr}
 80039ae:	460c      	mov	r4, r1
 80039b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b4:	f000 fab2 	bl	8003f1c <_read_r>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	bfab      	itete	ge
 80039bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80039be:	89a3      	ldrhlt	r3, [r4, #12]
 80039c0:	181b      	addge	r3, r3, r0
 80039c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80039c6:	bfac      	ite	ge
 80039c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80039ca:	81a3      	strhlt	r3, [r4, #12]
 80039cc:	bd10      	pop	{r4, pc}

080039ce <__swrite>:
 80039ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d2:	461f      	mov	r7, r3
 80039d4:	898b      	ldrh	r3, [r1, #12]
 80039d6:	05db      	lsls	r3, r3, #23
 80039d8:	4605      	mov	r5, r0
 80039da:	460c      	mov	r4, r1
 80039dc:	4616      	mov	r6, r2
 80039de:	d505      	bpl.n	80039ec <__swrite+0x1e>
 80039e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039e4:	2302      	movs	r3, #2
 80039e6:	2200      	movs	r2, #0
 80039e8:	f000 f9c8 	bl	8003d7c <_lseek_r>
 80039ec:	89a3      	ldrh	r3, [r4, #12]
 80039ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039f6:	81a3      	strh	r3, [r4, #12]
 80039f8:	4632      	mov	r2, r6
 80039fa:	463b      	mov	r3, r7
 80039fc:	4628      	mov	r0, r5
 80039fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a02:	f000 b869 	b.w	8003ad8 <_write_r>

08003a06 <__sseek>:
 8003a06:	b510      	push	{r4, lr}
 8003a08:	460c      	mov	r4, r1
 8003a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a0e:	f000 f9b5 	bl	8003d7c <_lseek_r>
 8003a12:	1c43      	adds	r3, r0, #1
 8003a14:	89a3      	ldrh	r3, [r4, #12]
 8003a16:	bf15      	itete	ne
 8003a18:	6560      	strne	r0, [r4, #84]	; 0x54
 8003a1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003a1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003a22:	81a3      	strheq	r3, [r4, #12]
 8003a24:	bf18      	it	ne
 8003a26:	81a3      	strhne	r3, [r4, #12]
 8003a28:	bd10      	pop	{r4, pc}

08003a2a <__sclose>:
 8003a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a2e:	f000 b8d3 	b.w	8003bd8 <_close_r>
	...

08003a34 <__swbuf_r>:
 8003a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a36:	460e      	mov	r6, r1
 8003a38:	4614      	mov	r4, r2
 8003a3a:	4605      	mov	r5, r0
 8003a3c:	b118      	cbz	r0, 8003a46 <__swbuf_r+0x12>
 8003a3e:	6983      	ldr	r3, [r0, #24]
 8003a40:	b90b      	cbnz	r3, 8003a46 <__swbuf_r+0x12>
 8003a42:	f7ff fd61 	bl	8003508 <__sinit>
 8003a46:	4b21      	ldr	r3, [pc, #132]	; (8003acc <__swbuf_r+0x98>)
 8003a48:	429c      	cmp	r4, r3
 8003a4a:	d12b      	bne.n	8003aa4 <__swbuf_r+0x70>
 8003a4c:	686c      	ldr	r4, [r5, #4]
 8003a4e:	69a3      	ldr	r3, [r4, #24]
 8003a50:	60a3      	str	r3, [r4, #8]
 8003a52:	89a3      	ldrh	r3, [r4, #12]
 8003a54:	071a      	lsls	r2, r3, #28
 8003a56:	d52f      	bpl.n	8003ab8 <__swbuf_r+0x84>
 8003a58:	6923      	ldr	r3, [r4, #16]
 8003a5a:	b36b      	cbz	r3, 8003ab8 <__swbuf_r+0x84>
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	6820      	ldr	r0, [r4, #0]
 8003a60:	1ac0      	subs	r0, r0, r3
 8003a62:	6963      	ldr	r3, [r4, #20]
 8003a64:	b2f6      	uxtb	r6, r6
 8003a66:	4283      	cmp	r3, r0
 8003a68:	4637      	mov	r7, r6
 8003a6a:	dc04      	bgt.n	8003a76 <__swbuf_r+0x42>
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	4628      	mov	r0, r5
 8003a70:	f000 f948 	bl	8003d04 <_fflush_r>
 8003a74:	bb30      	cbnz	r0, 8003ac4 <__swbuf_r+0x90>
 8003a76:	68a3      	ldr	r3, [r4, #8]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	60a3      	str	r3, [r4, #8]
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	6022      	str	r2, [r4, #0]
 8003a82:	701e      	strb	r6, [r3, #0]
 8003a84:	6963      	ldr	r3, [r4, #20]
 8003a86:	3001      	adds	r0, #1
 8003a88:	4283      	cmp	r3, r0
 8003a8a:	d004      	beq.n	8003a96 <__swbuf_r+0x62>
 8003a8c:	89a3      	ldrh	r3, [r4, #12]
 8003a8e:	07db      	lsls	r3, r3, #31
 8003a90:	d506      	bpl.n	8003aa0 <__swbuf_r+0x6c>
 8003a92:	2e0a      	cmp	r6, #10
 8003a94:	d104      	bne.n	8003aa0 <__swbuf_r+0x6c>
 8003a96:	4621      	mov	r1, r4
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f000 f933 	bl	8003d04 <_fflush_r>
 8003a9e:	b988      	cbnz	r0, 8003ac4 <__swbuf_r+0x90>
 8003aa0:	4638      	mov	r0, r7
 8003aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa4:	4b0a      	ldr	r3, [pc, #40]	; (8003ad0 <__swbuf_r+0x9c>)
 8003aa6:	429c      	cmp	r4, r3
 8003aa8:	d101      	bne.n	8003aae <__swbuf_r+0x7a>
 8003aaa:	68ac      	ldr	r4, [r5, #8]
 8003aac:	e7cf      	b.n	8003a4e <__swbuf_r+0x1a>
 8003aae:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <__swbuf_r+0xa0>)
 8003ab0:	429c      	cmp	r4, r3
 8003ab2:	bf08      	it	eq
 8003ab4:	68ec      	ldreq	r4, [r5, #12]
 8003ab6:	e7ca      	b.n	8003a4e <__swbuf_r+0x1a>
 8003ab8:	4621      	mov	r1, r4
 8003aba:	4628      	mov	r0, r5
 8003abc:	f000 f81e 	bl	8003afc <__swsetup_r>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	d0cb      	beq.n	8003a5c <__swbuf_r+0x28>
 8003ac4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ac8:	e7ea      	b.n	8003aa0 <__swbuf_r+0x6c>
 8003aca:	bf00      	nop
 8003acc:	0800407c 	.word	0x0800407c
 8003ad0:	0800409c 	.word	0x0800409c
 8003ad4:	0800405c 	.word	0x0800405c

08003ad8 <_write_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	4d07      	ldr	r5, [pc, #28]	; (8003af8 <_write_r+0x20>)
 8003adc:	4604      	mov	r4, r0
 8003ade:	4608      	mov	r0, r1
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	602a      	str	r2, [r5, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f7fc ff5b 	bl	80009a2 <_write>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d102      	bne.n	8003af6 <_write_r+0x1e>
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	b103      	cbz	r3, 8003af6 <_write_r+0x1e>
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	20004100 	.word	0x20004100

08003afc <__swsetup_r>:
 8003afc:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <__swsetup_r+0xcc>)
 8003afe:	b570      	push	{r4, r5, r6, lr}
 8003b00:	681d      	ldr	r5, [r3, #0]
 8003b02:	4606      	mov	r6, r0
 8003b04:	460c      	mov	r4, r1
 8003b06:	b125      	cbz	r5, 8003b12 <__swsetup_r+0x16>
 8003b08:	69ab      	ldr	r3, [r5, #24]
 8003b0a:	b913      	cbnz	r3, 8003b12 <__swsetup_r+0x16>
 8003b0c:	4628      	mov	r0, r5
 8003b0e:	f7ff fcfb 	bl	8003508 <__sinit>
 8003b12:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <__swsetup_r+0xd0>)
 8003b14:	429c      	cmp	r4, r3
 8003b16:	d10f      	bne.n	8003b38 <__swsetup_r+0x3c>
 8003b18:	686c      	ldr	r4, [r5, #4]
 8003b1a:	89a3      	ldrh	r3, [r4, #12]
 8003b1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b20:	0719      	lsls	r1, r3, #28
 8003b22:	d42c      	bmi.n	8003b7e <__swsetup_r+0x82>
 8003b24:	06dd      	lsls	r5, r3, #27
 8003b26:	d411      	bmi.n	8003b4c <__swsetup_r+0x50>
 8003b28:	2309      	movs	r3, #9
 8003b2a:	6033      	str	r3, [r6, #0]
 8003b2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b30:	81a3      	strh	r3, [r4, #12]
 8003b32:	f04f 30ff 	mov.w	r0, #4294967295
 8003b36:	e03e      	b.n	8003bb6 <__swsetup_r+0xba>
 8003b38:	4b25      	ldr	r3, [pc, #148]	; (8003bd0 <__swsetup_r+0xd4>)
 8003b3a:	429c      	cmp	r4, r3
 8003b3c:	d101      	bne.n	8003b42 <__swsetup_r+0x46>
 8003b3e:	68ac      	ldr	r4, [r5, #8]
 8003b40:	e7eb      	b.n	8003b1a <__swsetup_r+0x1e>
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <__swsetup_r+0xd8>)
 8003b44:	429c      	cmp	r4, r3
 8003b46:	bf08      	it	eq
 8003b48:	68ec      	ldreq	r4, [r5, #12]
 8003b4a:	e7e6      	b.n	8003b1a <__swsetup_r+0x1e>
 8003b4c:	0758      	lsls	r0, r3, #29
 8003b4e:	d512      	bpl.n	8003b76 <__swsetup_r+0x7a>
 8003b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b52:	b141      	cbz	r1, 8003b66 <__swsetup_r+0x6a>
 8003b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b58:	4299      	cmp	r1, r3
 8003b5a:	d002      	beq.n	8003b62 <__swsetup_r+0x66>
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	f000 f991 	bl	8003e84 <_free_r>
 8003b62:	2300      	movs	r3, #0
 8003b64:	6363      	str	r3, [r4, #52]	; 0x34
 8003b66:	89a3      	ldrh	r3, [r4, #12]
 8003b68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b6c:	81a3      	strh	r3, [r4, #12]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6063      	str	r3, [r4, #4]
 8003b72:	6923      	ldr	r3, [r4, #16]
 8003b74:	6023      	str	r3, [r4, #0]
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	f043 0308 	orr.w	r3, r3, #8
 8003b7c:	81a3      	strh	r3, [r4, #12]
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	b94b      	cbnz	r3, 8003b96 <__swsetup_r+0x9a>
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b8c:	d003      	beq.n	8003b96 <__swsetup_r+0x9a>
 8003b8e:	4621      	mov	r1, r4
 8003b90:	4630      	mov	r0, r6
 8003b92:	f000 f92b 	bl	8003dec <__smakebuf_r>
 8003b96:	89a0      	ldrh	r0, [r4, #12]
 8003b98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b9c:	f010 0301 	ands.w	r3, r0, #1
 8003ba0:	d00a      	beq.n	8003bb8 <__swsetup_r+0xbc>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60a3      	str	r3, [r4, #8]
 8003ba6:	6963      	ldr	r3, [r4, #20]
 8003ba8:	425b      	negs	r3, r3
 8003baa:	61a3      	str	r3, [r4, #24]
 8003bac:	6923      	ldr	r3, [r4, #16]
 8003bae:	b943      	cbnz	r3, 8003bc2 <__swsetup_r+0xc6>
 8003bb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003bb4:	d1ba      	bne.n	8003b2c <__swsetup_r+0x30>
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	0781      	lsls	r1, r0, #30
 8003bba:	bf58      	it	pl
 8003bbc:	6963      	ldrpl	r3, [r4, #20]
 8003bbe:	60a3      	str	r3, [r4, #8]
 8003bc0:	e7f4      	b.n	8003bac <__swsetup_r+0xb0>
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	e7f7      	b.n	8003bb6 <__swsetup_r+0xba>
 8003bc6:	bf00      	nop
 8003bc8:	20000010 	.word	0x20000010
 8003bcc:	0800407c 	.word	0x0800407c
 8003bd0:	0800409c 	.word	0x0800409c
 8003bd4:	0800405c 	.word	0x0800405c

08003bd8 <_close_r>:
 8003bd8:	b538      	push	{r3, r4, r5, lr}
 8003bda:	4d06      	ldr	r5, [pc, #24]	; (8003bf4 <_close_r+0x1c>)
 8003bdc:	2300      	movs	r3, #0
 8003bde:	4604      	mov	r4, r0
 8003be0:	4608      	mov	r0, r1
 8003be2:	602b      	str	r3, [r5, #0]
 8003be4:	f7fc fef9 	bl	80009da <_close>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d102      	bne.n	8003bf2 <_close_r+0x1a>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	b103      	cbz	r3, 8003bf2 <_close_r+0x1a>
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	20004100 	.word	0x20004100

08003bf8 <__sflush_r>:
 8003bf8:	898a      	ldrh	r2, [r1, #12]
 8003bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bfe:	4605      	mov	r5, r0
 8003c00:	0710      	lsls	r0, r2, #28
 8003c02:	460c      	mov	r4, r1
 8003c04:	d458      	bmi.n	8003cb8 <__sflush_r+0xc0>
 8003c06:	684b      	ldr	r3, [r1, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	dc05      	bgt.n	8003c18 <__sflush_r+0x20>
 8003c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	dc02      	bgt.n	8003c18 <__sflush_r+0x20>
 8003c12:	2000      	movs	r0, #0
 8003c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c1a:	2e00      	cmp	r6, #0
 8003c1c:	d0f9      	beq.n	8003c12 <__sflush_r+0x1a>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c24:	682f      	ldr	r7, [r5, #0]
 8003c26:	602b      	str	r3, [r5, #0]
 8003c28:	d032      	beq.n	8003c90 <__sflush_r+0x98>
 8003c2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c2c:	89a3      	ldrh	r3, [r4, #12]
 8003c2e:	075a      	lsls	r2, r3, #29
 8003c30:	d505      	bpl.n	8003c3e <__sflush_r+0x46>
 8003c32:	6863      	ldr	r3, [r4, #4]
 8003c34:	1ac0      	subs	r0, r0, r3
 8003c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c38:	b10b      	cbz	r3, 8003c3e <__sflush_r+0x46>
 8003c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c3c:	1ac0      	subs	r0, r0, r3
 8003c3e:	2300      	movs	r3, #0
 8003c40:	4602      	mov	r2, r0
 8003c42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c44:	6a21      	ldr	r1, [r4, #32]
 8003c46:	4628      	mov	r0, r5
 8003c48:	47b0      	blx	r6
 8003c4a:	1c43      	adds	r3, r0, #1
 8003c4c:	89a3      	ldrh	r3, [r4, #12]
 8003c4e:	d106      	bne.n	8003c5e <__sflush_r+0x66>
 8003c50:	6829      	ldr	r1, [r5, #0]
 8003c52:	291d      	cmp	r1, #29
 8003c54:	d82c      	bhi.n	8003cb0 <__sflush_r+0xb8>
 8003c56:	4a2a      	ldr	r2, [pc, #168]	; (8003d00 <__sflush_r+0x108>)
 8003c58:	40ca      	lsrs	r2, r1
 8003c5a:	07d6      	lsls	r6, r2, #31
 8003c5c:	d528      	bpl.n	8003cb0 <__sflush_r+0xb8>
 8003c5e:	2200      	movs	r2, #0
 8003c60:	6062      	str	r2, [r4, #4]
 8003c62:	04d9      	lsls	r1, r3, #19
 8003c64:	6922      	ldr	r2, [r4, #16]
 8003c66:	6022      	str	r2, [r4, #0]
 8003c68:	d504      	bpl.n	8003c74 <__sflush_r+0x7c>
 8003c6a:	1c42      	adds	r2, r0, #1
 8003c6c:	d101      	bne.n	8003c72 <__sflush_r+0x7a>
 8003c6e:	682b      	ldr	r3, [r5, #0]
 8003c70:	b903      	cbnz	r3, 8003c74 <__sflush_r+0x7c>
 8003c72:	6560      	str	r0, [r4, #84]	; 0x54
 8003c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c76:	602f      	str	r7, [r5, #0]
 8003c78:	2900      	cmp	r1, #0
 8003c7a:	d0ca      	beq.n	8003c12 <__sflush_r+0x1a>
 8003c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c80:	4299      	cmp	r1, r3
 8003c82:	d002      	beq.n	8003c8a <__sflush_r+0x92>
 8003c84:	4628      	mov	r0, r5
 8003c86:	f000 f8fd 	bl	8003e84 <_free_r>
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	6360      	str	r0, [r4, #52]	; 0x34
 8003c8e:	e7c1      	b.n	8003c14 <__sflush_r+0x1c>
 8003c90:	6a21      	ldr	r1, [r4, #32]
 8003c92:	2301      	movs	r3, #1
 8003c94:	4628      	mov	r0, r5
 8003c96:	47b0      	blx	r6
 8003c98:	1c41      	adds	r1, r0, #1
 8003c9a:	d1c7      	bne.n	8003c2c <__sflush_r+0x34>
 8003c9c:	682b      	ldr	r3, [r5, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0c4      	beq.n	8003c2c <__sflush_r+0x34>
 8003ca2:	2b1d      	cmp	r3, #29
 8003ca4:	d001      	beq.n	8003caa <__sflush_r+0xb2>
 8003ca6:	2b16      	cmp	r3, #22
 8003ca8:	d101      	bne.n	8003cae <__sflush_r+0xb6>
 8003caa:	602f      	str	r7, [r5, #0]
 8003cac:	e7b1      	b.n	8003c12 <__sflush_r+0x1a>
 8003cae:	89a3      	ldrh	r3, [r4, #12]
 8003cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cb4:	81a3      	strh	r3, [r4, #12]
 8003cb6:	e7ad      	b.n	8003c14 <__sflush_r+0x1c>
 8003cb8:	690f      	ldr	r7, [r1, #16]
 8003cba:	2f00      	cmp	r7, #0
 8003cbc:	d0a9      	beq.n	8003c12 <__sflush_r+0x1a>
 8003cbe:	0793      	lsls	r3, r2, #30
 8003cc0:	680e      	ldr	r6, [r1, #0]
 8003cc2:	bf08      	it	eq
 8003cc4:	694b      	ldreq	r3, [r1, #20]
 8003cc6:	600f      	str	r7, [r1, #0]
 8003cc8:	bf18      	it	ne
 8003cca:	2300      	movne	r3, #0
 8003ccc:	eba6 0807 	sub.w	r8, r6, r7
 8003cd0:	608b      	str	r3, [r1, #8]
 8003cd2:	f1b8 0f00 	cmp.w	r8, #0
 8003cd6:	dd9c      	ble.n	8003c12 <__sflush_r+0x1a>
 8003cd8:	6a21      	ldr	r1, [r4, #32]
 8003cda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003cdc:	4643      	mov	r3, r8
 8003cde:	463a      	mov	r2, r7
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	47b0      	blx	r6
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	dc06      	bgt.n	8003cf6 <__sflush_r+0xfe>
 8003ce8:	89a3      	ldrh	r3, [r4, #12]
 8003cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cee:	81a3      	strh	r3, [r4, #12]
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	e78e      	b.n	8003c14 <__sflush_r+0x1c>
 8003cf6:	4407      	add	r7, r0
 8003cf8:	eba8 0800 	sub.w	r8, r8, r0
 8003cfc:	e7e9      	b.n	8003cd2 <__sflush_r+0xda>
 8003cfe:	bf00      	nop
 8003d00:	20400001 	.word	0x20400001

08003d04 <_fflush_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	690b      	ldr	r3, [r1, #16]
 8003d08:	4605      	mov	r5, r0
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	b913      	cbnz	r3, 8003d14 <_fflush_r+0x10>
 8003d0e:	2500      	movs	r5, #0
 8003d10:	4628      	mov	r0, r5
 8003d12:	bd38      	pop	{r3, r4, r5, pc}
 8003d14:	b118      	cbz	r0, 8003d1e <_fflush_r+0x1a>
 8003d16:	6983      	ldr	r3, [r0, #24]
 8003d18:	b90b      	cbnz	r3, 8003d1e <_fflush_r+0x1a>
 8003d1a:	f7ff fbf5 	bl	8003508 <__sinit>
 8003d1e:	4b14      	ldr	r3, [pc, #80]	; (8003d70 <_fflush_r+0x6c>)
 8003d20:	429c      	cmp	r4, r3
 8003d22:	d11b      	bne.n	8003d5c <_fflush_r+0x58>
 8003d24:	686c      	ldr	r4, [r5, #4]
 8003d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0ef      	beq.n	8003d0e <_fflush_r+0xa>
 8003d2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003d30:	07d0      	lsls	r0, r2, #31
 8003d32:	d404      	bmi.n	8003d3e <_fflush_r+0x3a>
 8003d34:	0599      	lsls	r1, r3, #22
 8003d36:	d402      	bmi.n	8003d3e <_fflush_r+0x3a>
 8003d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d3a:	f7ff fca8 	bl	800368e <__retarget_lock_acquire_recursive>
 8003d3e:	4628      	mov	r0, r5
 8003d40:	4621      	mov	r1, r4
 8003d42:	f7ff ff59 	bl	8003bf8 <__sflush_r>
 8003d46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d48:	07da      	lsls	r2, r3, #31
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	d4e0      	bmi.n	8003d10 <_fflush_r+0xc>
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	059b      	lsls	r3, r3, #22
 8003d52:	d4dd      	bmi.n	8003d10 <_fflush_r+0xc>
 8003d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d56:	f7ff fc9b 	bl	8003690 <__retarget_lock_release_recursive>
 8003d5a:	e7d9      	b.n	8003d10 <_fflush_r+0xc>
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <_fflush_r+0x70>)
 8003d5e:	429c      	cmp	r4, r3
 8003d60:	d101      	bne.n	8003d66 <_fflush_r+0x62>
 8003d62:	68ac      	ldr	r4, [r5, #8]
 8003d64:	e7df      	b.n	8003d26 <_fflush_r+0x22>
 8003d66:	4b04      	ldr	r3, [pc, #16]	; (8003d78 <_fflush_r+0x74>)
 8003d68:	429c      	cmp	r4, r3
 8003d6a:	bf08      	it	eq
 8003d6c:	68ec      	ldreq	r4, [r5, #12]
 8003d6e:	e7da      	b.n	8003d26 <_fflush_r+0x22>
 8003d70:	0800407c 	.word	0x0800407c
 8003d74:	0800409c 	.word	0x0800409c
 8003d78:	0800405c 	.word	0x0800405c

08003d7c <_lseek_r>:
 8003d7c:	b538      	push	{r3, r4, r5, lr}
 8003d7e:	4d07      	ldr	r5, [pc, #28]	; (8003d9c <_lseek_r+0x20>)
 8003d80:	4604      	mov	r4, r0
 8003d82:	4608      	mov	r0, r1
 8003d84:	4611      	mov	r1, r2
 8003d86:	2200      	movs	r2, #0
 8003d88:	602a      	str	r2, [r5, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f7fc fe4c 	bl	8000a28 <_lseek>
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	d102      	bne.n	8003d9a <_lseek_r+0x1e>
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	b103      	cbz	r3, 8003d9a <_lseek_r+0x1e>
 8003d98:	6023      	str	r3, [r4, #0]
 8003d9a:	bd38      	pop	{r3, r4, r5, pc}
 8003d9c:	20004100 	.word	0x20004100

08003da0 <__swhatbuf_r>:
 8003da0:	b570      	push	{r4, r5, r6, lr}
 8003da2:	460e      	mov	r6, r1
 8003da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003da8:	2900      	cmp	r1, #0
 8003daa:	b096      	sub	sp, #88	; 0x58
 8003dac:	4614      	mov	r4, r2
 8003dae:	461d      	mov	r5, r3
 8003db0:	da08      	bge.n	8003dc4 <__swhatbuf_r+0x24>
 8003db2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	602a      	str	r2, [r5, #0]
 8003dba:	061a      	lsls	r2, r3, #24
 8003dbc:	d410      	bmi.n	8003de0 <__swhatbuf_r+0x40>
 8003dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dc2:	e00e      	b.n	8003de2 <__swhatbuf_r+0x42>
 8003dc4:	466a      	mov	r2, sp
 8003dc6:	f000 f8bb 	bl	8003f40 <_fstat_r>
 8003dca:	2800      	cmp	r0, #0
 8003dcc:	dbf1      	blt.n	8003db2 <__swhatbuf_r+0x12>
 8003dce:	9a01      	ldr	r2, [sp, #4]
 8003dd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003dd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003dd8:	425a      	negs	r2, r3
 8003dda:	415a      	adcs	r2, r3
 8003ddc:	602a      	str	r2, [r5, #0]
 8003dde:	e7ee      	b.n	8003dbe <__swhatbuf_r+0x1e>
 8003de0:	2340      	movs	r3, #64	; 0x40
 8003de2:	2000      	movs	r0, #0
 8003de4:	6023      	str	r3, [r4, #0]
 8003de6:	b016      	add	sp, #88	; 0x58
 8003de8:	bd70      	pop	{r4, r5, r6, pc}
	...

08003dec <__smakebuf_r>:
 8003dec:	898b      	ldrh	r3, [r1, #12]
 8003dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003df0:	079d      	lsls	r5, r3, #30
 8003df2:	4606      	mov	r6, r0
 8003df4:	460c      	mov	r4, r1
 8003df6:	d507      	bpl.n	8003e08 <__smakebuf_r+0x1c>
 8003df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	6123      	str	r3, [r4, #16]
 8003e00:	2301      	movs	r3, #1
 8003e02:	6163      	str	r3, [r4, #20]
 8003e04:	b002      	add	sp, #8
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	ab01      	add	r3, sp, #4
 8003e0a:	466a      	mov	r2, sp
 8003e0c:	f7ff ffc8 	bl	8003da0 <__swhatbuf_r>
 8003e10:	9900      	ldr	r1, [sp, #0]
 8003e12:	4605      	mov	r5, r0
 8003e14:	4630      	mov	r0, r6
 8003e16:	f7ff fc65 	bl	80036e4 <_malloc_r>
 8003e1a:	b948      	cbnz	r0, 8003e30 <__smakebuf_r+0x44>
 8003e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e20:	059a      	lsls	r2, r3, #22
 8003e22:	d4ef      	bmi.n	8003e04 <__smakebuf_r+0x18>
 8003e24:	f023 0303 	bic.w	r3, r3, #3
 8003e28:	f043 0302 	orr.w	r3, r3, #2
 8003e2c:	81a3      	strh	r3, [r4, #12]
 8003e2e:	e7e3      	b.n	8003df8 <__smakebuf_r+0xc>
 8003e30:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <__smakebuf_r+0x7c>)
 8003e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	6020      	str	r0, [r4, #0]
 8003e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3c:	81a3      	strh	r3, [r4, #12]
 8003e3e:	9b00      	ldr	r3, [sp, #0]
 8003e40:	6163      	str	r3, [r4, #20]
 8003e42:	9b01      	ldr	r3, [sp, #4]
 8003e44:	6120      	str	r0, [r4, #16]
 8003e46:	b15b      	cbz	r3, 8003e60 <__smakebuf_r+0x74>
 8003e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f000 f889 	bl	8003f64 <_isatty_r>
 8003e52:	b128      	cbz	r0, 8003e60 <__smakebuf_r+0x74>
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	f023 0303 	bic.w	r3, r3, #3
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	81a3      	strh	r3, [r4, #12]
 8003e60:	89a0      	ldrh	r0, [r4, #12]
 8003e62:	4305      	orrs	r5, r0
 8003e64:	81a5      	strh	r5, [r4, #12]
 8003e66:	e7cd      	b.n	8003e04 <__smakebuf_r+0x18>
 8003e68:	080034a1 	.word	0x080034a1

08003e6c <__malloc_lock>:
 8003e6c:	4801      	ldr	r0, [pc, #4]	; (8003e74 <__malloc_lock+0x8>)
 8003e6e:	f7ff bc0e 	b.w	800368e <__retarget_lock_acquire_recursive>
 8003e72:	bf00      	nop
 8003e74:	200040f4 	.word	0x200040f4

08003e78 <__malloc_unlock>:
 8003e78:	4801      	ldr	r0, [pc, #4]	; (8003e80 <__malloc_unlock+0x8>)
 8003e7a:	f7ff bc09 	b.w	8003690 <__retarget_lock_release_recursive>
 8003e7e:	bf00      	nop
 8003e80:	200040f4 	.word	0x200040f4

08003e84 <_free_r>:
 8003e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e86:	2900      	cmp	r1, #0
 8003e88:	d044      	beq.n	8003f14 <_free_r+0x90>
 8003e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e8e:	9001      	str	r0, [sp, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f1a1 0404 	sub.w	r4, r1, #4
 8003e96:	bfb8      	it	lt
 8003e98:	18e4      	addlt	r4, r4, r3
 8003e9a:	f7ff ffe7 	bl	8003e6c <__malloc_lock>
 8003e9e:	4a1e      	ldr	r2, [pc, #120]	; (8003f18 <_free_r+0x94>)
 8003ea0:	9801      	ldr	r0, [sp, #4]
 8003ea2:	6813      	ldr	r3, [r2, #0]
 8003ea4:	b933      	cbnz	r3, 8003eb4 <_free_r+0x30>
 8003ea6:	6063      	str	r3, [r4, #4]
 8003ea8:	6014      	str	r4, [r2, #0]
 8003eaa:	b003      	add	sp, #12
 8003eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003eb0:	f7ff bfe2 	b.w	8003e78 <__malloc_unlock>
 8003eb4:	42a3      	cmp	r3, r4
 8003eb6:	d908      	bls.n	8003eca <_free_r+0x46>
 8003eb8:	6825      	ldr	r5, [r4, #0]
 8003eba:	1961      	adds	r1, r4, r5
 8003ebc:	428b      	cmp	r3, r1
 8003ebe:	bf01      	itttt	eq
 8003ec0:	6819      	ldreq	r1, [r3, #0]
 8003ec2:	685b      	ldreq	r3, [r3, #4]
 8003ec4:	1949      	addeq	r1, r1, r5
 8003ec6:	6021      	streq	r1, [r4, #0]
 8003ec8:	e7ed      	b.n	8003ea6 <_free_r+0x22>
 8003eca:	461a      	mov	r2, r3
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	b10b      	cbz	r3, 8003ed4 <_free_r+0x50>
 8003ed0:	42a3      	cmp	r3, r4
 8003ed2:	d9fa      	bls.n	8003eca <_free_r+0x46>
 8003ed4:	6811      	ldr	r1, [r2, #0]
 8003ed6:	1855      	adds	r5, r2, r1
 8003ed8:	42a5      	cmp	r5, r4
 8003eda:	d10b      	bne.n	8003ef4 <_free_r+0x70>
 8003edc:	6824      	ldr	r4, [r4, #0]
 8003ede:	4421      	add	r1, r4
 8003ee0:	1854      	adds	r4, r2, r1
 8003ee2:	42a3      	cmp	r3, r4
 8003ee4:	6011      	str	r1, [r2, #0]
 8003ee6:	d1e0      	bne.n	8003eaa <_free_r+0x26>
 8003ee8:	681c      	ldr	r4, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	6053      	str	r3, [r2, #4]
 8003eee:	4421      	add	r1, r4
 8003ef0:	6011      	str	r1, [r2, #0]
 8003ef2:	e7da      	b.n	8003eaa <_free_r+0x26>
 8003ef4:	d902      	bls.n	8003efc <_free_r+0x78>
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	6003      	str	r3, [r0, #0]
 8003efa:	e7d6      	b.n	8003eaa <_free_r+0x26>
 8003efc:	6825      	ldr	r5, [r4, #0]
 8003efe:	1961      	adds	r1, r4, r5
 8003f00:	428b      	cmp	r3, r1
 8003f02:	bf04      	itt	eq
 8003f04:	6819      	ldreq	r1, [r3, #0]
 8003f06:	685b      	ldreq	r3, [r3, #4]
 8003f08:	6063      	str	r3, [r4, #4]
 8003f0a:	bf04      	itt	eq
 8003f0c:	1949      	addeq	r1, r1, r5
 8003f0e:	6021      	streq	r1, [r4, #0]
 8003f10:	6054      	str	r4, [r2, #4]
 8003f12:	e7ca      	b.n	8003eaa <_free_r+0x26>
 8003f14:	b003      	add	sp, #12
 8003f16:	bd30      	pop	{r4, r5, pc}
 8003f18:	200040f8 	.word	0x200040f8

08003f1c <_read_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4d07      	ldr	r5, [pc, #28]	; (8003f3c <_read_r+0x20>)
 8003f20:	4604      	mov	r4, r0
 8003f22:	4608      	mov	r0, r1
 8003f24:	4611      	mov	r1, r2
 8003f26:	2200      	movs	r2, #0
 8003f28:	602a      	str	r2, [r5, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f7fc fd1c 	bl	8000968 <_read>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d102      	bne.n	8003f3a <_read_r+0x1e>
 8003f34:	682b      	ldr	r3, [r5, #0]
 8003f36:	b103      	cbz	r3, 8003f3a <_read_r+0x1e>
 8003f38:	6023      	str	r3, [r4, #0]
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}
 8003f3c:	20004100 	.word	0x20004100

08003f40 <_fstat_r>:
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	4d07      	ldr	r5, [pc, #28]	; (8003f60 <_fstat_r+0x20>)
 8003f44:	2300      	movs	r3, #0
 8003f46:	4604      	mov	r4, r0
 8003f48:	4608      	mov	r0, r1
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	602b      	str	r3, [r5, #0]
 8003f4e:	f7fc fd50 	bl	80009f2 <_fstat>
 8003f52:	1c43      	adds	r3, r0, #1
 8003f54:	d102      	bne.n	8003f5c <_fstat_r+0x1c>
 8003f56:	682b      	ldr	r3, [r5, #0]
 8003f58:	b103      	cbz	r3, 8003f5c <_fstat_r+0x1c>
 8003f5a:	6023      	str	r3, [r4, #0]
 8003f5c:	bd38      	pop	{r3, r4, r5, pc}
 8003f5e:	bf00      	nop
 8003f60:	20004100 	.word	0x20004100

08003f64 <_isatty_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d06      	ldr	r5, [pc, #24]	; (8003f80 <_isatty_r+0x1c>)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	602b      	str	r3, [r5, #0]
 8003f70:	f7fc fd4f 	bl	8000a12 <_isatty>
 8003f74:	1c43      	adds	r3, r0, #1
 8003f76:	d102      	bne.n	8003f7e <_isatty_r+0x1a>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	b103      	cbz	r3, 8003f7e <_isatty_r+0x1a>
 8003f7c:	6023      	str	r3, [r4, #0]
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	20004100 	.word	0x20004100

08003f84 <_init>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	bf00      	nop
 8003f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8a:	bc08      	pop	{r3}
 8003f8c:	469e      	mov	lr, r3
 8003f8e:	4770      	bx	lr

08003f90 <_fini>:
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	bf00      	nop
 8003f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f96:	bc08      	pop	{r3}
 8003f98:	469e      	mov	lr, r3
 8003f9a:	4770      	bx	lr
