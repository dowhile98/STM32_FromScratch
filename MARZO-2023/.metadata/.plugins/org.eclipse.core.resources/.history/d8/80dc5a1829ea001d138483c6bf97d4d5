/*
 * App.c
 *
 *  Created on: May 3, 2023
 *      Author: jeffr
 */

/*Includes ---------------------------------------------*/
#include "main.h"
#include "gpio.h"
#include "usart.h"
#include "tim.h"
#include "cmsis_os.h"
#include "PID.h"
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
/*Defines -----------------------------------------------*/
#define S					120				//cantidad de pulsos por vuelta
#define Ts					10E-3			//tiempo de muestreo

#define KP					0.0452
#define KI					1.1202
#define KD  				0.00046
#define UMIN 				0
#define UMAX				11.4

/*Variables globales ------------------------------------*/
extern osThreadId defaultTaskHandle;
extern osThreadId ControlHandle;
extern osThreadId LabviewHandle;
extern osMessageQId RefHandle;
extern osSemaphoreId ControlFlagHandle;
extern osMessageQId OutputHandle;
uint8_t byte;
extern osSemaphoreId DataRxHandle;
/*Funciones privadas ------------------------------------*/
int __io_putchar(int ch){
	uint8_t c = ch & 0xFF;
	HAL_UART_Transmit(&huart2, &c, 1, 10);
	return ch;
}
void HAL_TIM_SampleCallback(TIM_HandleTypeDef *htim)
{
	osSemaphoreRelease(ControlFlagHandle);
}

void HAL_UART_DataCallback(UART_HandleTypeDef *huart){
	osSemaphoreRelease(DataRxHandle);
	HAL_UART_Receive_IT(huart, &byte, 1);
}
/*Definicion de las tareas ------------------------------*/

void StartDefaultTask(void const * argument){

	/*Secuancia de inicio*/

	for(;;){
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		osDelay(150);
	}
}
void Control_Task(void const * argument){
	/*Local variables -----------------------------------*/
	float ref = 20;
	float rads;
	float rpm;
	float uc;
	uint16_t duty;
	PID_Def_t motor;
	uint32_t pulsos;
	osEvent evt;
	//secuencia de inicio
	PID_Init(&motor, KP, KI, KD, Ts, UMIN, UMAX);
	//timer
	HAL_TIM_RegisterCallback(&htim7, HAL_TIM_PERIOD_ELAPSED_CB_ID, HAL_TIM_SampleCallback);
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
	HAL_TIM_Base_Start(&htim2);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	HAL_TIM_Base_Start_IT(&htim7);

	for(;;){
		//se espera una bandera
		if(osSemaphoreWait(ControlFlagHandle, osWaitForever) == osOK){
			//todo
			pulsos = __HAL_TIM_GET_COUNTER(&htim2);	//se lee la cantidad de pulsos leidos en un segundo
			__HAL_TIM_SET_COUNTER(&htim2, 0);
			rpm = (float)pulsos * 60.0 / (Ts * S);
			rads = rpm * (2 * M_PI) / 60;
			//Filtro digital pasa bajo

			//->referencia
			evt = osMessageGet(RefHandle, 1);
			if(evt.status == osEventMessage){
				ref = *((float*)evt.value.p);
			}
			//->control
			uc = PID_Compute(&motor, ref, rads); //voltaje

			duty = (uint16_t)(uc * htim3.Instance->ARR / UMAX); //voltaje -> duty

			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty);

			//->dato a labview
			//osMessagePut(OutputHandle, (uint32_t)&rads, 5);
			//printf("%.2f\r\n", rads);
		}
	}
}
void Labview_Task(void const * argument){
	uint8_t data[20];
	uint8_t i = 0;
	float ref;
	float output;
	osEvent evt;
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, HAL_UART_DataCallback);
	HAL_UART_Receive_IT(&huart2, &byte, 1);
	for(;;){
		//se espera la bandera de recepcio de dato
		if (osSemaphoreWait(DataRxHandle, osWaitForever) == osOK){
			//todo
			if(byte != 'x' && byte != 'c'){
				data[i] = byte;
				i++;
			}
			else if(byte == 'c' && data[0] == '1'){
				HAL_TIM_Base_Start(&htim2);
				__HAL_TIM_SET_COUNTER(&htim2,0);
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		//se inicia el PWM
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
				memset(data, 0, i-1);
				i = 0;
			}else if(byte == 'c'){
				HAL_TIM_Base_Stop(&htim2);
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
				memset(data, 0, i-1);
				i = 0;
			}else{
				data[i] = '\0';
				ref = atof((char*)data);
				memset(data, 0, i);
				i = 0;
				//se envia la referencia a la tarea de control
				osMessagePut(RefHandle, (uint32_t)&ref, 4);
			}
		}
		//
//		evt = osMessageGet(OutputHandle, 0);
//		if(evt.status  == osEventMessage){
//			output = *((float*)evt.value.p);
//			//se envia el dato hacia labview
//			printf("%.2f\r\n", output);
//		}
	}
}
