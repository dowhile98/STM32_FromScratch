
MPU650_LibDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af94  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000230c  0800b148  0800b148  0001b148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d454  0800d454  00020dcc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d454  0800d454  0001d454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d45c  0800d45c  00020dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d45c  0800d45c  0001d45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d460  0800d460  0001d460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000dcc  20000000  0800d464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020dcc  2**0
                  CONTENTS
 10 .bss          00000468  20000dcc  20000dcc  00020dcc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001234  20001234  00020dcc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020dcc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008f1a  00000000  00000000  00020dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f36  00000000  00000000  00029d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  0002ac50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007e0  00000000  00000000  0002b4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000241d  00000000  00000000  0002bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f13  00000000  00000000  0002e0c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093b88  00000000  00000000  00037fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000cbb60  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003654  00000000  00000000  000cbbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000dcc 	.word	0x20000dcc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b12c 	.word	0x0800b12c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000dd0 	.word	0x20000dd0
 80001ec:	0800b12c 	.word	0x0800b12c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9a7 	b.w	8000f78 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f835 	bl	8000ca8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f828 	bl	8000ca8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f817 	bl	8000ca8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f809 	bl	8000ca8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468e      	mov	lr, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14d      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4694      	mov	ip, r2
 8000cba:	d969      	bls.n	8000d90 <__udivmoddi4+0xe8>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b152      	cbz	r2, 8000cd8 <__udivmoddi4+0x30>
 8000cc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cc6:	f1c2 0120 	rsb	r1, r2, #32
 8000cca:	fa20 f101 	lsr.w	r1, r0, r1
 8000cce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cd6:	4094      	lsls	r4, r2
 8000cd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cdc:	0c21      	lsrs	r1, r4, #16
 8000cde:	fbbe f6f8 	udiv	r6, lr, r8
 8000ce2:	fa1f f78c 	uxth.w	r7, ip
 8000ce6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cee:	fb06 f107 	mul.w	r1, r6, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfe:	f080 811f 	bcs.w	8000f40 <__udivmoddi4+0x298>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 811c 	bls.w	8000f40 <__udivmoddi4+0x298>
 8000d08:	3e02      	subs	r6, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a5b      	subs	r3, r3, r1
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d1c:	fb00 f707 	mul.w	r7, r0, r7
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x92>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	f080 810a 	bcs.w	8000f44 <__udivmoddi4+0x29c>
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	f240 8107 	bls.w	8000f44 <__udivmoddi4+0x29c>
 8000d36:	4464      	add	r4, ip
 8000d38:	3802      	subs	r0, #2
 8000d3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d3e:	1be4      	subs	r4, r4, r7
 8000d40:	2600      	movs	r6, #0
 8000d42:	b11d      	cbz	r5, 8000d4c <__udivmoddi4+0xa4>
 8000d44:	40d4      	lsrs	r4, r2
 8000d46:	2300      	movs	r3, #0
 8000d48:	e9c5 4300 	strd	r4, r3, [r5]
 8000d4c:	4631      	mov	r1, r6
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0xc2>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80ef 	beq.w	8000f3a <__udivmoddi4+0x292>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x160>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0xd4>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80f9 	bhi.w	8000f6e <__udivmoddi4+0x2c6>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	469e      	mov	lr, r3
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0e0      	beq.n	8000d4c <__udivmoddi4+0xa4>
 8000d8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d8e:	e7dd      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000d90:	b902      	cbnz	r2, 8000d94 <__udivmoddi4+0xec>
 8000d92:	deff      	udf	#255	; 0xff
 8000d94:	fab2 f282 	clz	r2, r2
 8000d98:	2a00      	cmp	r2, #0
 8000d9a:	f040 8092 	bne.w	8000ec2 <__udivmoddi4+0x21a>
 8000d9e:	eba1 010c 	sub.w	r1, r1, ip
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f fe8c 	uxth.w	lr, ip
 8000daa:	2601      	movs	r6, #1
 8000dac:	0c20      	lsrs	r0, r4, #16
 8000dae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000db2:	fb07 1113 	mls	r1, r7, r3, r1
 8000db6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dba:	fb0e f003 	mul.w	r0, lr, r3
 8000dbe:	4288      	cmp	r0, r1
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x12c>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x12a>
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	f200 80cb 	bhi.w	8000f68 <__udivmoddi4+0x2c0>
 8000dd2:	4643      	mov	r3, r8
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ddc:	fb07 1110 	mls	r1, r7, r0, r1
 8000de0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000de4:	fb0e fe00 	mul.w	lr, lr, r0
 8000de8:	45a6      	cmp	lr, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x156>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x154>
 8000df6:	45a6      	cmp	lr, r4
 8000df8:	f200 80bb 	bhi.w	8000f72 <__udivmoddi4+0x2ca>
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	eba4 040e 	sub.w	r4, r4, lr
 8000e02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e06:	e79c      	b.n	8000d42 <__udivmoddi4+0x9a>
 8000e08:	f1c6 0720 	rsb	r7, r6, #32
 8000e0c:	40b3      	lsls	r3, r6
 8000e0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e16:	fa20 f407 	lsr.w	r4, r0, r7
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	40f9      	lsrs	r1, r7
 8000e22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e26:	fa00 f306 	lsl.w	r3, r0, r6
 8000e2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e2e:	0c20      	lsrs	r0, r4, #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fb09 1118 	mls	r1, r9, r8, r1
 8000e38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e40:	4288      	cmp	r0, r1
 8000e42:	fa02 f206 	lsl.w	r2, r2, r6
 8000e46:	d90b      	bls.n	8000e60 <__udivmoddi4+0x1b8>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e50:	f080 8088 	bcs.w	8000f64 <__udivmoddi4+0x2bc>
 8000e54:	4288      	cmp	r0, r1
 8000e56:	f240 8085 	bls.w	8000f64 <__udivmoddi4+0x2bc>
 8000e5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e68:	fb09 1110 	mls	r1, r9, r0, r1
 8000e6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e74:	458e      	cmp	lr, r1
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x1e2>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e80:	d26c      	bcs.n	8000f5c <__udivmoddi4+0x2b4>
 8000e82:	458e      	cmp	lr, r1
 8000e84:	d96a      	bls.n	8000f5c <__udivmoddi4+0x2b4>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4461      	add	r1, ip
 8000e8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e92:	eba1 010e 	sub.w	r1, r1, lr
 8000e96:	42a1      	cmp	r1, r4
 8000e98:	46c8      	mov	r8, r9
 8000e9a:	46a6      	mov	lr, r4
 8000e9c:	d356      	bcc.n	8000f4c <__udivmoddi4+0x2a4>
 8000e9e:	d053      	beq.n	8000f48 <__udivmoddi4+0x2a0>
 8000ea0:	b15d      	cbz	r5, 8000eba <__udivmoddi4+0x212>
 8000ea2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ea6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eaa:	fa01 f707 	lsl.w	r7, r1, r7
 8000eae:	fa22 f306 	lsr.w	r3, r2, r6
 8000eb2:	40f1      	lsrs	r1, r6
 8000eb4:	431f      	orrs	r7, r3
 8000eb6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eba:	2600      	movs	r6, #0
 8000ebc:	4631      	mov	r1, r6
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	f1c2 0320 	rsb	r3, r2, #32
 8000ec6:	40d8      	lsrs	r0, r3
 8000ec8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ecc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ed0:	4091      	lsls	r1, r2
 8000ed2:	4301      	orrs	r1, r0
 8000ed4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed8:	fa1f fe8c 	uxth.w	lr, ip
 8000edc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ee0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ee4:	0c0b      	lsrs	r3, r1, #16
 8000ee6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eea:	fb00 f60e 	mul.w	r6, r0, lr
 8000eee:	429e      	cmp	r6, r3
 8000ef0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x260>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000efe:	d22f      	bcs.n	8000f60 <__udivmoddi4+0x2b8>
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d92d      	bls.n	8000f60 <__udivmoddi4+0x2b8>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	b289      	uxth	r1, r1
 8000f0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f10:	fb07 3316 	mls	r3, r7, r6, r3
 8000f14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f18:	fb06 f30e 	mul.w	r3, r6, lr
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x28a>
 8000f20:	eb1c 0101 	adds.w	r1, ip, r1
 8000f24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f28:	d216      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d914      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000f2e:	3e02      	subs	r6, #2
 8000f30:	4461      	add	r1, ip
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f38:	e738      	b.n	8000dac <__udivmoddi4+0x104>
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e705      	b.n	8000d4c <__udivmoddi4+0xa4>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e3      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6f8      	b.n	8000d3a <__udivmoddi4+0x92>
 8000f48:	454b      	cmp	r3, r9
 8000f4a:	d2a9      	bcs.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7a3      	b.n	8000ea0 <__udivmoddi4+0x1f8>
 8000f58:	4646      	mov	r6, r8
 8000f5a:	e7ea      	b.n	8000f32 <__udivmoddi4+0x28a>
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	e794      	b.n	8000e8a <__udivmoddi4+0x1e2>
 8000f60:	4640      	mov	r0, r8
 8000f62:	e7d1      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f64:	46d0      	mov	r8, sl
 8000f66:	e77b      	b.n	8000e60 <__udivmoddi4+0x1b8>
 8000f68:	3b02      	subs	r3, #2
 8000f6a:	4461      	add	r1, ip
 8000f6c:	e732      	b.n	8000dd4 <__udivmoddi4+0x12c>
 8000f6e:	4630      	mov	r0, r6
 8000f70:	e709      	b.n	8000d86 <__udivmoddi4+0xde>
 8000f72:	4464      	add	r4, ip
 8000f74:	3802      	subs	r0, #2
 8000f76:	e742      	b.n	8000dfe <__udivmoddi4+0x156>

08000f78 <__aeabi_idiv0>:
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <mpu6050_dmp_init>:
uint8_t mpu6050_dmp_init(mpu6050_address_t addr_pin,
                         void (*receive_callback)(uint8_t type),
                         void (*tap_callback)(uint8_t count, uint8_t direction),
                         void (*orient_callback)(uint8_t orientation)
                        )
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b096      	sub	sp, #88	; 0x58
 8000f80:	af02      	add	r7, sp, #8
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	73fb      	strb	r3, [r7, #15]
    uint8_t reg;
    int32_t gyro_offset_raw[3];
    int32_t accel_offset_raw[3];
    int32_t gyro_offset[3];
    int32_t accel_offset[3];
    int8_t gyro_orientation[9] = {1, 0, 0,
 8000f8c:	4abd      	ldr	r2, [pc, #756]	; (8001284 <mpu6050_dmp_init+0x308>)
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f94:	c303      	stmia	r3!, {r0, r1}
 8000f96:	701a      	strb	r2, [r3, #0]
                                  0, 1, 0,
                                  0, 0, 1};
    
    /* link interface function */
    DRIVER_MPU6050_LINK_INIT(&gs_handle, mpu6050_handle_t);
 8000f98:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	48ba      	ldr	r0, [pc, #744]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8000fa0:	f007 f8dc 	bl	800815c <memset>
    DRIVER_MPU6050_LINK_IIC_INIT(&gs_handle, mpu6050_interface_iic_init);
 8000fa4:	4bb8      	ldr	r3, [pc, #736]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8000fa6:	4ab9      	ldr	r2, [pc, #740]	; (800128c <mpu6050_dmp_init+0x310>)
 8000fa8:	605a      	str	r2, [r3, #4]
    DRIVER_MPU6050_LINK_IIC_DEINIT(&gs_handle, mpu6050_interface_iic_deinit);
 8000faa:	4bb7      	ldr	r3, [pc, #732]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8000fac:	4ab8      	ldr	r2, [pc, #736]	; (8001290 <mpu6050_dmp_init+0x314>)
 8000fae:	609a      	str	r2, [r3, #8]
    DRIVER_MPU6050_LINK_IIC_READ(&gs_handle, mpu6050_interface_iic_read);
 8000fb0:	4bb5      	ldr	r3, [pc, #724]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8000fb2:	4ab8      	ldr	r2, [pc, #736]	; (8001294 <mpu6050_dmp_init+0x318>)
 8000fb4:	60da      	str	r2, [r3, #12]
    DRIVER_MPU6050_LINK_IIC_WRITE(&gs_handle, mpu6050_interface_iic_write);
 8000fb6:	4bb4      	ldr	r3, [pc, #720]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8000fb8:	4ab7      	ldr	r2, [pc, #732]	; (8001298 <mpu6050_dmp_init+0x31c>)
 8000fba:	611a      	str	r2, [r3, #16]
    DRIVER_MPU6050_LINK_DELAY_MS(&gs_handle, mpu6050_interface_delay_ms);
 8000fbc:	4bb2      	ldr	r3, [pc, #712]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8000fbe:	4ab7      	ldr	r2, [pc, #732]	; (800129c <mpu6050_dmp_init+0x320>)
 8000fc0:	615a      	str	r2, [r3, #20]
    DRIVER_MPU6050_LINK_DEBUG_PRINT(&gs_handle, mpu6050_interface_debug_print);
 8000fc2:	4bb1      	ldr	r3, [pc, #708]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8000fc4:	4ab6      	ldr	r2, [pc, #728]	; (80012a0 <mpu6050_dmp_init+0x324>)
 8000fc6:	619a      	str	r2, [r3, #24]
    DRIVER_MPU6050_LINK_RECEIVE_CALLBACK(&gs_handle, receive_callback);
 8000fc8:	4aaf      	ldr	r2, [pc, #700]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	61d3      	str	r3, [r2, #28]
    
    /* set the addr pin */
    res = mpu6050_set_addr_pin(&gs_handle, addr_pin);
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	48ad      	ldr	r0, [pc, #692]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8000fd4:	f004 ff4c 	bl	8005e70 <mpu6050_set_addr_pin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8000fde:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <mpu6050_dmp_init+0x76>
    {
        mpu6050_interface_debug_print("mpu6050: set addr pin failed.\n");
 8000fe6:	48af      	ldr	r0, [pc, #700]	; (80012a4 <mpu6050_dmp_init+0x328>)
 8000fe8:	f006 fa17 	bl	800741a <mpu6050_interface_debug_print>
       
        return 1;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f000 be39 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* init */
    res = mpu6050_init(&gs_handle);
 8000ff2:	48a5      	ldr	r0, [pc, #660]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8000ff4:	f004 ff52 	bl	8005e9c <mpu6050_init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8000ffe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001002:	2b00      	cmp	r3, #0
 8001004:	d005      	beq.n	8001012 <mpu6050_dmp_init+0x96>
    {
        mpu6050_interface_debug_print("mpu6050: init failed.\n");
 8001006:	48a8      	ldr	r0, [pc, #672]	; (80012a8 <mpu6050_dmp_init+0x32c>)
 8001008:	f006 fa07 	bl	800741a <mpu6050_interface_debug_print>
       
        return 1;
 800100c:	2301      	movs	r3, #1
 800100e:	f000 be29 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* delay 100 ms */
    mpu6050_interface_delay_ms(100);
 8001012:	2064      	movs	r0, #100	; 0x64
 8001014:	f006 f9f6 	bl	8007404 <mpu6050_interface_delay_ms>
    
    /* disable sleep */
    res = mpu6050_set_sleep(&gs_handle, MPU6050_BOOL_FALSE);
 8001018:	2100      	movs	r1, #0
 800101a:	489b      	ldr	r0, [pc, #620]	; (8001288 <mpu6050_dmp_init+0x30c>)
 800101c:	f005 fa0e 	bl	800643c <mpu6050_set_sleep>
 8001020:	4603      	mov	r3, r0
 8001022:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001026:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800102a:	2b00      	cmp	r3, #0
 800102c:	d008      	beq.n	8001040 <mpu6050_dmp_init+0xc4>
    {
        mpu6050_interface_debug_print("mpu6050: set sleep failed.\n");
 800102e:	489f      	ldr	r0, [pc, #636]	; (80012ac <mpu6050_dmp_init+0x330>)
 8001030:	f006 f9f3 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001034:	4894      	ldr	r0, [pc, #592]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8001036:	f005 f813 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 800103a:	2301      	movs	r3, #1
 800103c:	f000 be12 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* run the self test */
    res = mpu6050_self_test(&gs_handle, gyro_offset_raw, accel_offset_raw);
 8001040:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001044:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001048:	4619      	mov	r1, r3
 800104a:	488f      	ldr	r0, [pc, #572]	; (8001288 <mpu6050_dmp_init+0x30c>)
 800104c:	f006 f8c4 	bl	80071d8 <mpu6050_self_test>
 8001050:	4603      	mov	r3, r0
 8001052:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001056:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <mpu6050_dmp_init+0xf4>
    {
        mpu6050_interface_debug_print("mpu6050: self test failed.\n");
 800105e:	4894      	ldr	r0, [pc, #592]	; (80012b0 <mpu6050_dmp_init+0x334>)
 8001060:	f006 f9db 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001064:	4888      	ldr	r0, [pc, #544]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8001066:	f004 fffb 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 800106a:	2301      	movs	r3, #1
 800106c:	f000 bdfa 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default clock source */
    res = mpu6050_set_clock_source(&gs_handle, MPU6050_DMP_DEFAULT_CLOCK_SOURCE);
 8001070:	2101      	movs	r1, #1
 8001072:	4885      	ldr	r0, [pc, #532]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8001074:	f005 f8fa 	bl	800626c <mpu6050_set_clock_source>
 8001078:	4603      	mov	r3, r0
 800107a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 800107e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001082:	2b00      	cmp	r3, #0
 8001084:	d008      	beq.n	8001098 <mpu6050_dmp_init+0x11c>
    {
        mpu6050_interface_debug_print("mpu6050: set clock source failed.\n");
 8001086:	488b      	ldr	r0, [pc, #556]	; (80012b4 <mpu6050_dmp_init+0x338>)
 8001088:	f006 f9c7 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800108c:	487e      	ldr	r0, [pc, #504]	; (8001288 <mpu6050_dmp_init+0x30c>)
 800108e:	f004 ffe7 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001092:	2301      	movs	r3, #1
 8001094:	f000 bde6 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default rate */
    res = mpu6050_set_sample_rate_divider(&gs_handle, 1000 / (MPU6050_DMP_DEFAULT_RATE - 1));
 8001098:	2114      	movs	r1, #20
 800109a:	487b      	ldr	r0, [pc, #492]	; (8001288 <mpu6050_dmp_init+0x30c>)
 800109c:	f005 fac4 	bl	8006628 <mpu6050_set_sample_rate_divider>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80010a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d008      	beq.n	80010c0 <mpu6050_dmp_init+0x144>
    {
        mpu6050_interface_debug_print("mpu6050: set sample rate divider failed.\n");
 80010ae:	4882      	ldr	r0, [pc, #520]	; (80012b8 <mpu6050_dmp_init+0x33c>)
 80010b0:	f006 f9b3 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80010b4:	4874      	ldr	r0, [pc, #464]	; (8001288 <mpu6050_dmp_init+0x30c>)
 80010b6:	f004 ffd3 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80010ba:	2301      	movs	r3, #1
 80010bc:	f000 bdd2 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default accelerometer range */
    res = mpu6050_set_accelerometer_range(&gs_handle, MPU6050_DMP_DEFAULT_ACCELEROMETER_RANGE);
 80010c0:	2100      	movs	r1, #0
 80010c2:	4871      	ldr	r0, [pc, #452]	; (8001288 <mpu6050_dmp_init+0x30c>)
 80010c4:	f005 fc74 	bl	80069b0 <mpu6050_set_accelerometer_range>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80010ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <mpu6050_dmp_init+0x16c>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer range failed.\n");
 80010d6:	4879      	ldr	r0, [pc, #484]	; (80012bc <mpu6050_dmp_init+0x340>)
 80010d8:	f006 f99f 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80010dc:	486a      	ldr	r0, [pc, #424]	; (8001288 <mpu6050_dmp_init+0x30c>)
 80010de:	f004 ffbf 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	f000 bdbe 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default gyroscope_range */
    res = mpu6050_set_gyroscope_range(&gs_handle, MPU6050_DMP_DEFAULT_GYROSCOPE_RANGE);
 80010e8:	2103      	movs	r1, #3
 80010ea:	4867      	ldr	r0, [pc, #412]	; (8001288 <mpu6050_dmp_init+0x30c>)
 80010ec:	f005 fbb8 	bl	8006860 <mpu6050_set_gyroscope_range>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80010f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d008      	beq.n	8001110 <mpu6050_dmp_init+0x194>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope range failed.\n");
 80010fe:	4870      	ldr	r0, [pc, #448]	; (80012c0 <mpu6050_dmp_init+0x344>)
 8001100:	f006 f98b 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001104:	4860      	ldr	r0, [pc, #384]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8001106:	f004 ffab 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 800110a:	2301      	movs	r3, #1
 800110c:	f000 bdaa 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default low pass filter */
    res = mpu6050_set_low_pass_filter(&gs_handle, MPU6050_DMP_DEFAULT_LOW_PASS_FILTER);
 8001110:	2103      	movs	r1, #3
 8001112:	485d      	ldr	r0, [pc, #372]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8001114:	f005 fb00 	bl	8006718 <mpu6050_set_low_pass_filter>
 8001118:	4603      	mov	r3, r0
 800111a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 800111e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001122:	2b00      	cmp	r3, #0
 8001124:	d008      	beq.n	8001138 <mpu6050_dmp_init+0x1bc>
    {
        mpu6050_interface_debug_print("mpu6050: set low pass filter failed.\n");
 8001126:	4867      	ldr	r0, [pc, #412]	; (80012c4 <mpu6050_dmp_init+0x348>)
 8001128:	f006 f977 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800112c:	4856      	ldr	r0, [pc, #344]	; (8001288 <mpu6050_dmp_init+0x30c>)
 800112e:	f004 ff97 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001132:	2301      	movs	r3, #1
 8001134:	f000 bd96 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* enable temperature sensor */
    res = mpu6050_set_temperature_sensor(&gs_handle, MPU6050_BOOL_TRUE);
 8001138:	2101      	movs	r1, #1
 800113a:	4853      	ldr	r0, [pc, #332]	; (8001288 <mpu6050_dmp_init+0x30c>)
 800113c:	f005 f8e0 	bl	8006300 <mpu6050_set_temperature_sensor>
 8001140:	4603      	mov	r3, r0
 8001142:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001146:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800114a:	2b00      	cmp	r3, #0
 800114c:	d008      	beq.n	8001160 <mpu6050_dmp_init+0x1e4>
    {
        mpu6050_interface_debug_print("mpu6050: set temperature sensor failed.\n");
 800114e:	485e      	ldr	r0, [pc, #376]	; (80012c8 <mpu6050_dmp_init+0x34c>)
 8001150:	f006 f963 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001154:	484c      	ldr	r0, [pc, #304]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8001156:	f004 ff83 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 800115a:	2301      	movs	r3, #1
 800115c:	f000 bd82 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default cycle wake up */
    res = mpu6050_set_cycle_wake_up(&gs_handle, MPU6050_DMP_DEFAULT_CYCLE_WAKE_UP);
 8001160:	2100      	movs	r1, #0
 8001162:	4849      	ldr	r0, [pc, #292]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8001164:	f005 f91c 	bl	80063a0 <mpu6050_set_cycle_wake_up>
 8001168:	4603      	mov	r3, r0
 800116a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 800116e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001172:	2b00      	cmp	r3, #0
 8001174:	d008      	beq.n	8001188 <mpu6050_dmp_init+0x20c>
    {
        mpu6050_interface_debug_print("mpu6050: set cycle wake up failed.\n");
 8001176:	4855      	ldr	r0, [pc, #340]	; (80012cc <mpu6050_dmp_init+0x350>)
 8001178:	f006 f94f 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800117c:	4842      	ldr	r0, [pc, #264]	; (8001288 <mpu6050_dmp_init+0x30c>)
 800117e:	f004 ff6f 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001182:	2301      	movs	r3, #1
 8001184:	f000 bd6e 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default wake up frequency */
    res = mpu6050_set_wake_up_frequency(&gs_handle, MPU6050_DMP_DEFAULT_WAKE_UP_FREQUENCY);
 8001188:	2100      	movs	r1, #0
 800118a:	483f      	ldr	r0, [pc, #252]	; (8001288 <mpu6050_dmp_init+0x30c>)
 800118c:	f005 f9fe 	bl	800658c <mpu6050_set_wake_up_frequency>
 8001190:	4603      	mov	r3, r0
 8001192:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001196:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800119a:	2b00      	cmp	r3, #0
 800119c:	d008      	beq.n	80011b0 <mpu6050_dmp_init+0x234>
    {
        mpu6050_interface_debug_print("mpu6050: set wake up frequency failed.\n");
 800119e:	484c      	ldr	r0, [pc, #304]	; (80012d0 <mpu6050_dmp_init+0x354>)
 80011a0:	f006 f93b 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80011a4:	4838      	ldr	r0, [pc, #224]	; (8001288 <mpu6050_dmp_init+0x30c>)
 80011a6:	f004 ff5b 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f000 bd5a 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* enable acc x */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_X, MPU6050_BOOL_FALSE);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2105      	movs	r1, #5
 80011b4:	4834      	ldr	r0, [pc, #208]	; (8001288 <mpu6050_dmp_init+0x30c>)
 80011b6:	f005 f98f 	bl	80064d8 <mpu6050_set_standby_mode>
 80011ba:	4603      	mov	r3, r0
 80011bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80011c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d008      	beq.n	80011da <mpu6050_dmp_init+0x25e>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 80011c8:	4842      	ldr	r0, [pc, #264]	; (80012d4 <mpu6050_dmp_init+0x358>)
 80011ca:	f006 f926 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80011ce:	482e      	ldr	r0, [pc, #184]	; (8001288 <mpu6050_dmp_init+0x30c>)
 80011d0:	f004 ff46 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	f000 bd45 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* enable acc y */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_Y, MPU6050_BOOL_FALSE);
 80011da:	2200      	movs	r2, #0
 80011dc:	2104      	movs	r1, #4
 80011de:	482a      	ldr	r0, [pc, #168]	; (8001288 <mpu6050_dmp_init+0x30c>)
 80011e0:	f005 f97a 	bl	80064d8 <mpu6050_set_standby_mode>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80011ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d008      	beq.n	8001204 <mpu6050_dmp_init+0x288>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 80011f2:	4838      	ldr	r0, [pc, #224]	; (80012d4 <mpu6050_dmp_init+0x358>)
 80011f4:	f006 f911 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80011f8:	4823      	ldr	r0, [pc, #140]	; (8001288 <mpu6050_dmp_init+0x30c>)
 80011fa:	f004 ff31 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80011fe:	2301      	movs	r3, #1
 8001200:	f000 bd30 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* enable acc z */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_Z, MPU6050_BOOL_FALSE);
 8001204:	2200      	movs	r2, #0
 8001206:	2103      	movs	r1, #3
 8001208:	481f      	ldr	r0, [pc, #124]	; (8001288 <mpu6050_dmp_init+0x30c>)
 800120a:	f005 f965 	bl	80064d8 <mpu6050_set_standby_mode>
 800120e:	4603      	mov	r3, r0
 8001210:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001214:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <mpu6050_dmp_init+0x2b2>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 800121c:	482d      	ldr	r0, [pc, #180]	; (80012d4 <mpu6050_dmp_init+0x358>)
 800121e:	f006 f8fc 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001222:	4819      	ldr	r0, [pc, #100]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8001224:	f004 ff1c 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001228:	2301      	movs	r3, #1
 800122a:	f000 bd1b 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* enable gyro x */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_X, MPU6050_BOOL_FALSE);
 800122e:	2200      	movs	r2, #0
 8001230:	2102      	movs	r1, #2
 8001232:	4815      	ldr	r0, [pc, #84]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8001234:	f005 f950 	bl	80064d8 <mpu6050_set_standby_mode>
 8001238:	4603      	mov	r3, r0
 800123a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 800123e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <mpu6050_dmp_init+0x2dc>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 8001246:	4823      	ldr	r0, [pc, #140]	; (80012d4 <mpu6050_dmp_init+0x358>)
 8001248:	f006 f8e7 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800124c:	480e      	ldr	r0, [pc, #56]	; (8001288 <mpu6050_dmp_init+0x30c>)
 800124e:	f004 ff07 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001252:	2301      	movs	r3, #1
 8001254:	f000 bd06 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* enable gyro y */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_Y, MPU6050_BOOL_FALSE);
 8001258:	2200      	movs	r2, #0
 800125a:	2101      	movs	r1, #1
 800125c:	480a      	ldr	r0, [pc, #40]	; (8001288 <mpu6050_dmp_init+0x30c>)
 800125e:	f005 f93b 	bl	80064d8 <mpu6050_set_standby_mode>
 8001262:	4603      	mov	r3, r0
 8001264:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001268:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800126c:	2b00      	cmp	r3, #0
 800126e:	d033      	beq.n	80012d8 <mpu6050_dmp_init+0x35c>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 8001270:	4818      	ldr	r0, [pc, #96]	; (80012d4 <mpu6050_dmp_init+0x358>)
 8001272:	f006 f8d2 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001276:	4804      	ldr	r0, [pc, #16]	; (8001288 <mpu6050_dmp_init+0x30c>)
 8001278:	f004 fef2 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 800127c:	2301      	movs	r3, #1
 800127e:	f000 bcf1 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
 8001282:	bf00      	nop
 8001284:	0800b9b4 	.word	0x0800b9b4
 8001288:	20000de8 	.word	0x20000de8
 800128c:	08007355 	.word	0x08007355
 8001290:	08007365 	.word	0x08007365
 8001294:	08007375 	.word	0x08007375
 8001298:	080073bd 	.word	0x080073bd
 800129c:	08007405 	.word	0x08007405
 80012a0:	0800741b 	.word	0x0800741b
 80012a4:	0800b148 	.word	0x0800b148
 80012a8:	0800b168 	.word	0x0800b168
 80012ac:	0800b180 	.word	0x0800b180
 80012b0:	0800b19c 	.word	0x0800b19c
 80012b4:	0800b1b8 	.word	0x0800b1b8
 80012b8:	0800b1dc 	.word	0x0800b1dc
 80012bc:	0800b208 	.word	0x0800b208
 80012c0:	0800b234 	.word	0x0800b234
 80012c4:	0800b25c 	.word	0x0800b25c
 80012c8:	0800b284 	.word	0x0800b284
 80012cc:	0800b2b0 	.word	0x0800b2b0
 80012d0:	0800b2d4 	.word	0x0800b2d4
 80012d4:	0800b2fc 	.word	0x0800b2fc
    }
    
    /* enable gyro z */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_Z, MPU6050_BOOL_FALSE);
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	48c5      	ldr	r0, [pc, #788]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80012de:	f005 f8fb 	bl	80064d8 <mpu6050_set_standby_mode>
 80012e2:	4603      	mov	r3, r0
 80012e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80012e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d008      	beq.n	8001302 <mpu6050_dmp_init+0x386>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 80012f0:	48c1      	ldr	r0, [pc, #772]	; (80015f8 <mpu6050_dmp_init+0x67c>)
 80012f2:	f006 f892 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80012f6:	48bf      	ldr	r0, [pc, #764]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80012f8:	f004 feb2 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	f000 bcb1 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* disable gyroscope x test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_X, MPU6050_BOOL_FALSE);
 8001302:	2200      	movs	r2, #0
 8001304:	2107      	movs	r1, #7
 8001306:	48bb      	ldr	r0, [pc, #748]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001308:	f005 fa50 	bl	80067ac <mpu6050_set_gyroscope_test>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001312:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001316:	2b00      	cmp	r3, #0
 8001318:	d008      	beq.n	800132c <mpu6050_dmp_init+0x3b0>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 800131a:	48b8      	ldr	r0, [pc, #736]	; (80015fc <mpu6050_dmp_init+0x680>)
 800131c:	f006 f87d 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001320:	48b4      	ldr	r0, [pc, #720]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001322:	f004 fe9d 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001326:	2301      	movs	r3, #1
 8001328:	f000 bc9c 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* disable gyroscope y test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_Y, MPU6050_BOOL_FALSE);
 800132c:	2200      	movs	r2, #0
 800132e:	2106      	movs	r1, #6
 8001330:	48b0      	ldr	r0, [pc, #704]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001332:	f005 fa3b 	bl	80067ac <mpu6050_set_gyroscope_test>
 8001336:	4603      	mov	r3, r0
 8001338:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 800133c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <mpu6050_dmp_init+0x3da>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 8001344:	48ad      	ldr	r0, [pc, #692]	; (80015fc <mpu6050_dmp_init+0x680>)
 8001346:	f006 f868 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800134a:	48aa      	ldr	r0, [pc, #680]	; (80015f4 <mpu6050_dmp_init+0x678>)
 800134c:	f004 fe88 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001350:	2301      	movs	r3, #1
 8001352:	f000 bc87 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* disable gyroscope z test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_Z, MPU6050_BOOL_FALSE);
 8001356:	2200      	movs	r2, #0
 8001358:	2105      	movs	r1, #5
 800135a:	48a6      	ldr	r0, [pc, #664]	; (80015f4 <mpu6050_dmp_init+0x678>)
 800135c:	f005 fa26 	bl	80067ac <mpu6050_set_gyroscope_test>
 8001360:	4603      	mov	r3, r0
 8001362:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001366:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800136a:	2b00      	cmp	r3, #0
 800136c:	d008      	beq.n	8001380 <mpu6050_dmp_init+0x404>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 800136e:	48a3      	ldr	r0, [pc, #652]	; (80015fc <mpu6050_dmp_init+0x680>)
 8001370:	f006 f853 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001374:	489f      	ldr	r0, [pc, #636]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001376:	f004 fe73 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 800137a:	2301      	movs	r3, #1
 800137c:	f000 bc72 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* disable accelerometer x test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_X, MPU6050_BOOL_FALSE);
 8001380:	2200      	movs	r2, #0
 8001382:	2107      	movs	r1, #7
 8001384:	489b      	ldr	r0, [pc, #620]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001386:	f005 fab9 	bl	80068fc <mpu6050_set_accelerometer_test>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001390:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <mpu6050_dmp_init+0x42e>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 8001398:	4899      	ldr	r0, [pc, #612]	; (8001600 <mpu6050_dmp_init+0x684>)
 800139a:	f006 f83e 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800139e:	4895      	ldr	r0, [pc, #596]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80013a0:	f004 fe5e 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	f000 bc5d 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* disable accelerometer y test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_Y, MPU6050_BOOL_FALSE);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2106      	movs	r1, #6
 80013ae:	4891      	ldr	r0, [pc, #580]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80013b0:	f005 faa4 	bl	80068fc <mpu6050_set_accelerometer_test>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80013ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <mpu6050_dmp_init+0x458>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 80013c2:	488f      	ldr	r0, [pc, #572]	; (8001600 <mpu6050_dmp_init+0x684>)
 80013c4:	f006 f829 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80013c8:	488a      	ldr	r0, [pc, #552]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80013ca:	f004 fe49 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f000 bc48 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* disable accelerometer z test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_Z, MPU6050_BOOL_FALSE);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2105      	movs	r1, #5
 80013d8:	4886      	ldr	r0, [pc, #536]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80013da:	f005 fa8f 	bl	80068fc <mpu6050_set_accelerometer_test>
 80013de:	4603      	mov	r3, r0
 80013e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80013e4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d008      	beq.n	80013fe <mpu6050_dmp_init+0x482>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 80013ec:	4884      	ldr	r0, [pc, #528]	; (8001600 <mpu6050_dmp_init+0x684>)
 80013ee:	f006 f814 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80013f2:	4880      	ldr	r0, [pc, #512]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80013f4:	f004 fe34 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	f000 bc33 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* disable temp fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_TEMP, MPU6050_BOOL_FALSE);
 80013fe:	2200      	movs	r2, #0
 8001400:	2107      	movs	r1, #7
 8001402:	487c      	ldr	r0, [pc, #496]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001404:	f005 fb22 	bl	8006a4c <mpu6050_set_fifo_enable>
 8001408:	4603      	mov	r3, r0
 800140a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 800140e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001412:	2b00      	cmp	r3, #0
 8001414:	d008      	beq.n	8001428 <mpu6050_dmp_init+0x4ac>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 8001416:	487b      	ldr	r0, [pc, #492]	; (8001604 <mpu6050_dmp_init+0x688>)
 8001418:	f005 ffff 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800141c:	4875      	ldr	r0, [pc, #468]	; (80015f4 <mpu6050_dmp_init+0x678>)
 800141e:	f004 fe1f 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001422:	2301      	movs	r3, #1
 8001424:	f000 bc1e 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* disable xg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_XG, MPU6050_BOOL_FALSE);
 8001428:	2200      	movs	r2, #0
 800142a:	2106      	movs	r1, #6
 800142c:	4871      	ldr	r0, [pc, #452]	; (80015f4 <mpu6050_dmp_init+0x678>)
 800142e:	f005 fb0d 	bl	8006a4c <mpu6050_set_fifo_enable>
 8001432:	4603      	mov	r3, r0
 8001434:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001438:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800143c:	2b00      	cmp	r3, #0
 800143e:	d008      	beq.n	8001452 <mpu6050_dmp_init+0x4d6>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 8001440:	4870      	ldr	r0, [pc, #448]	; (8001604 <mpu6050_dmp_init+0x688>)
 8001442:	f005 ffea 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001446:	486b      	ldr	r0, [pc, #428]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001448:	f004 fe0a 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 800144c:	2301      	movs	r3, #1
 800144e:	f000 bc09 	b.w	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* disable yg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_YG, MPU6050_BOOL_FALSE);
 8001452:	2200      	movs	r2, #0
 8001454:	2105      	movs	r1, #5
 8001456:	4867      	ldr	r0, [pc, #412]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001458:	f005 faf8 	bl	8006a4c <mpu6050_set_fifo_enable>
 800145c:	4603      	mov	r3, r0
 800145e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001462:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001466:	2b00      	cmp	r3, #0
 8001468:	d007      	beq.n	800147a <mpu6050_dmp_init+0x4fe>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 800146a:	4866      	ldr	r0, [pc, #408]	; (8001604 <mpu6050_dmp_init+0x688>)
 800146c:	f005 ffd5 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001470:	4860      	ldr	r0, [pc, #384]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001472:	f004 fdf5 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001476:	2301      	movs	r3, #1
 8001478:	e3f4      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* disable zg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_ZG, MPU6050_BOOL_FALSE);
 800147a:	2200      	movs	r2, #0
 800147c:	2104      	movs	r1, #4
 800147e:	485d      	ldr	r0, [pc, #372]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001480:	f005 fae4 	bl	8006a4c <mpu6050_set_fifo_enable>
 8001484:	4603      	mov	r3, r0
 8001486:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 800148a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800148e:	2b00      	cmp	r3, #0
 8001490:	d007      	beq.n	80014a2 <mpu6050_dmp_init+0x526>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 8001492:	485c      	ldr	r0, [pc, #368]	; (8001604 <mpu6050_dmp_init+0x688>)
 8001494:	f005 ffc1 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001498:	4856      	ldr	r0, [pc, #344]	; (80015f4 <mpu6050_dmp_init+0x678>)
 800149a:	f004 fde1 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	e3e0      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* disable accel fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_ACCEL, MPU6050_BOOL_FALSE);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2103      	movs	r1, #3
 80014a6:	4853      	ldr	r0, [pc, #332]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80014a8:	f005 fad0 	bl	8006a4c <mpu6050_set_fifo_enable>
 80014ac:	4603      	mov	r3, r0
 80014ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80014b2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d007      	beq.n	80014ca <mpu6050_dmp_init+0x54e>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 80014ba:	4852      	ldr	r0, [pc, #328]	; (8001604 <mpu6050_dmp_init+0x688>)
 80014bc:	f005 ffad 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80014c0:	484c      	ldr	r0, [pc, #304]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80014c2:	f004 fdcd 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e3cc      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* enable fifo */
    res = mpu6050_set_fifo(&gs_handle, MPU6050_BOOL_TRUE);
 80014ca:	2101      	movs	r1, #1
 80014cc:	4849      	ldr	r0, [pc, #292]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80014ce:	f004 fe0b 	bl	80060e8 <mpu6050_set_fifo>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80014d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d007      	beq.n	80014f0 <mpu6050_dmp_init+0x574>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo failed.\n");
 80014e0:	4849      	ldr	r0, [pc, #292]	; (8001608 <mpu6050_dmp_init+0x68c>)
 80014e2:	f005 ff9a 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80014e6:	4843      	ldr	r0, [pc, #268]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80014e8:	f004 fdba 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e3b9      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default interrupt level */
    res = mpu6050_set_interrupt_level(&gs_handle, MPU6050_DMP_DEFAULT_INTERRUPT_PIN_LEVEL);
 80014f0:	2101      	movs	r1, #1
 80014f2:	4840      	ldr	r0, [pc, #256]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80014f4:	f005 fb04 	bl	8006b00 <mpu6050_set_interrupt_level>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80014fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <mpu6050_dmp_init+0x59a>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt level failed.\n");
 8001506:	4841      	ldr	r0, [pc, #260]	; (800160c <mpu6050_dmp_init+0x690>)
 8001508:	f005 ff87 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800150c:	4839      	ldr	r0, [pc, #228]	; (80015f4 <mpu6050_dmp_init+0x678>)
 800150e:	f004 fda7 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001512:	2301      	movs	r3, #1
 8001514:	e3a6      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default interrupt pin type */
    res = mpu6050_set_interrupt_pin_type(&gs_handle, MPU6050_DMP_DEFAULT_INTERRUPT_PIN_TYPE);
 8001516:	2100      	movs	r1, #0
 8001518:	4836      	ldr	r0, [pc, #216]	; (80015f4 <mpu6050_dmp_init+0x678>)
 800151a:	f005 fb3f 	bl	8006b9c <mpu6050_set_interrupt_pin_type>
 800151e:	4603      	mov	r3, r0
 8001520:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001524:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001528:	2b00      	cmp	r3, #0
 800152a:	d007      	beq.n	800153c <mpu6050_dmp_init+0x5c0>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt pin type failed.\n");
 800152c:	4838      	ldr	r0, [pc, #224]	; (8001610 <mpu6050_dmp_init+0x694>)
 800152e:	f005 ff74 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001532:	4830      	ldr	r0, [pc, #192]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001534:	f004 fd94 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001538:	2301      	movs	r3, #1
 800153a:	e393      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    if (tap_callback != NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8085 	beq.w	800164e <mpu6050_dmp_init+0x6d2>
    {
        /* set the default motion threshold */
        res = mpu6050_motion_threshold_convert_to_register(&gs_handle, MPU6050_DMP_DEFAULT_MOTION_THRESHOLD, &reg);
 8001544:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 8001548:	4619      	mov	r1, r3
 800154a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8001614 <mpu6050_dmp_init+0x698>
 800154e:	4829      	ldr	r0, [pc, #164]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001550:	f005 fd7e 	bl	8007050 <mpu6050_motion_threshold_convert_to_register>
 8001554:	4603      	mov	r3, r0
 8001556:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (res != 0)
 800155a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <mpu6050_dmp_init+0x5f6>
        {
            mpu6050_interface_debug_print("mpu6050: motion threshold convert to register failed.\n");
 8001562:	482d      	ldr	r0, [pc, #180]	; (8001618 <mpu6050_dmp_init+0x69c>)
 8001564:	f005 ff59 	bl	800741a <mpu6050_interface_debug_print>
            (void)mpu6050_deinit(&gs_handle);
 8001568:	4822      	ldr	r0, [pc, #136]	; (80015f4 <mpu6050_dmp_init+0x678>)
 800156a:	f004 fd79 	bl	8006060 <mpu6050_deinit>
           
            return 1;
 800156e:	2301      	movs	r3, #1
 8001570:	e378      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
        }
        
        /* set the motion threshold */
        res = mpu6050_set_motion_threshold(&gs_handle, reg);
 8001572:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001576:	4619      	mov	r1, r3
 8001578:	481e      	ldr	r0, [pc, #120]	; (80015f4 <mpu6050_dmp_init+0x678>)
 800157a:	f005 fd3f 	bl	8006ffc <mpu6050_set_motion_threshold>
 800157e:	4603      	mov	r3, r0
 8001580:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (res != 0)
 8001584:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <mpu6050_dmp_init+0x620>
        {
            mpu6050_interface_debug_print("mpu6050: set motion threshold failed.\n");
 800158c:	4823      	ldr	r0, [pc, #140]	; (800161c <mpu6050_dmp_init+0x6a0>)
 800158e:	f005 ff44 	bl	800741a <mpu6050_interface_debug_print>
            (void)mpu6050_deinit(&gs_handle);
 8001592:	4818      	ldr	r0, [pc, #96]	; (80015f4 <mpu6050_dmp_init+0x678>)
 8001594:	f004 fd64 	bl	8006060 <mpu6050_deinit>
           
            return 1;
 8001598:	2301      	movs	r3, #1
 800159a:	e363      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
        }
        
        /* set the default motion duration */
        res = mpu6050_motion_duration_convert_to_register(&gs_handle, MPU6050_DMP_DEFAULT_MOTION_DURATION, &reg);
 800159c:	f107 034e 	add.w	r3, r7, #78	; 0x4e
 80015a0:	461a      	mov	r2, r3
 80015a2:	21c8      	movs	r1, #200	; 0xc8
 80015a4:	4813      	ldr	r0, [pc, #76]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80015a6:	f005 fda7 	bl	80070f8 <mpu6050_motion_duration_convert_to_register>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (res != 0)
 80015b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d007      	beq.n	80015c8 <mpu6050_dmp_init+0x64c>
        {
            mpu6050_interface_debug_print("mpu6050: motion duration convert to register failed.\n");
 80015b8:	4819      	ldr	r0, [pc, #100]	; (8001620 <mpu6050_dmp_init+0x6a4>)
 80015ba:	f005 ff2e 	bl	800741a <mpu6050_interface_debug_print>
            (void)mpu6050_deinit(&gs_handle);
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80015c0:	f004 fd4e 	bl	8006060 <mpu6050_deinit>
           
            return 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e34d      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
        }
        
        /* set the motion duration */
        res = mpu6050_set_motion_duration(&gs_handle, reg);
 80015c8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80015cc:	4619      	mov	r1, r3
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80015d0:	f005 fd68 	bl	80070a4 <mpu6050_set_motion_duration>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (res != 0)
 80015da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d022      	beq.n	8001628 <mpu6050_dmp_init+0x6ac>
        {
            mpu6050_interface_debug_print("mpu6050: set motion duration failed.\n");
 80015e2:	4810      	ldr	r0, [pc, #64]	; (8001624 <mpu6050_dmp_init+0x6a8>)
 80015e4:	f005 ff19 	bl	800741a <mpu6050_interface_debug_print>
            (void)mpu6050_deinit(&gs_handle);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <mpu6050_dmp_init+0x678>)
 80015ea:	f004 fd39 	bl	8006060 <mpu6050_deinit>
           
            return 1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e338      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
 80015f2:	bf00      	nop
 80015f4:	20000de8 	.word	0x20000de8
 80015f8:	0800b2fc 	.word	0x0800b2fc
 80015fc:	0800b320 	.word	0x0800b320
 8001600:	0800b348 	.word	0x0800b348
 8001604:	0800b374 	.word	0x0800b374
 8001608:	0800b398 	.word	0x0800b398
 800160c:	0800b3b4 	.word	0x0800b3b4
 8001610:	0800b3dc 	.word	0x0800b3dc
 8001614:	43480000 	.word	0x43480000
 8001618:	0800b408 	.word	0x0800b408
 800161c:	0800b440 	.word	0x0800b440
 8001620:	0800b468 	.word	0x0800b468
 8001624:	0800b4a0 	.word	0x0800b4a0
        }
        
        /* enable the force accel sample */
        res = mpu6050_set_force_accel_sample(&gs_handle, MPU6050_BOOL_TRUE);
 8001628:	2101      	movs	r1, #1
 800162a:	48c2      	ldr	r0, [pc, #776]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 800162c:	f005 fd82 	bl	8007134 <mpu6050_set_force_accel_sample>
 8001630:	4603      	mov	r3, r0
 8001632:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        if (res != 0)
 8001636:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800163a:	2b00      	cmp	r3, #0
 800163c:	d007      	beq.n	800164e <mpu6050_dmp_init+0x6d2>
        {
            mpu6050_interface_debug_print("mpu6050: set force accel sample failed.\n");
 800163e:	48be      	ldr	r0, [pc, #760]	; (8001938 <mpu6050_dmp_init+0x9bc>)
 8001640:	f005 feeb 	bl	800741a <mpu6050_interface_debug_print>
            (void)mpu6050_deinit(&gs_handle);
 8001644:	48bb      	ldr	r0, [pc, #748]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001646:	f004 fd0b 	bl	8006060 <mpu6050_deinit>
           
            return 1;
 800164a:	2301      	movs	r3, #1
 800164c:	e30a      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
        }
    }
    
    /* set the default motion interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_MOTION, MPU6050_DMP_DEFAULT_INTERRUPT_MOTION);
 800164e:	2201      	movs	r2, #1
 8001650:	2106      	movs	r1, #6
 8001652:	48b8      	ldr	r0, [pc, #736]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001654:	f005 fc78 	bl	8006f48 <mpu6050_set_interrupt>
 8001658:	4603      	mov	r3, r0
 800165a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 800165e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <mpu6050_dmp_init+0x6fa>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 8001666:	48b5      	ldr	r0, [pc, #724]	; (800193c <mpu6050_dmp_init+0x9c0>)
 8001668:	f005 fed7 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800166c:	48b1      	ldr	r0, [pc, #708]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 800166e:	f004 fcf7 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001672:	2301      	movs	r3, #1
 8001674:	e2f6      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_FIFO_OVERFLOW, MPU6050_DMP_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 8001676:	2201      	movs	r2, #1
 8001678:	2104      	movs	r1, #4
 800167a:	48ae      	ldr	r0, [pc, #696]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 800167c:	f005 fc64 	bl	8006f48 <mpu6050_set_interrupt>
 8001680:	4603      	mov	r3, r0
 8001682:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001686:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <mpu6050_dmp_init+0x722>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 800168e:	48ab      	ldr	r0, [pc, #684]	; (800193c <mpu6050_dmp_init+0x9c0>)
 8001690:	f005 fec3 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001694:	48a7      	ldr	r0, [pc, #668]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001696:	f004 fce3 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 800169a:	2301      	movs	r3, #1
 800169c:	e2e2      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default dmp interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_DMP, MPU6050_DMP_DEFAULT_INTERRUPT_DMP);
 800169e:	2200      	movs	r2, #0
 80016a0:	2101      	movs	r1, #1
 80016a2:	48a4      	ldr	r0, [pc, #656]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80016a4:	f005 fc50 	bl	8006f48 <mpu6050_set_interrupt>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80016ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <mpu6050_dmp_init+0x74a>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 80016b6:	48a1      	ldr	r0, [pc, #644]	; (800193c <mpu6050_dmp_init+0x9c0>)
 80016b8:	f005 feaf 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80016bc:	489d      	ldr	r0, [pc, #628]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80016be:	f004 fccf 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e2ce      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default i2c master interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_I2C_MAST, MPU6050_DMP_DEFAULT_INTERRUPT_I2C_MAST);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2103      	movs	r1, #3
 80016ca:	489a      	ldr	r0, [pc, #616]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80016cc:	f005 fc3c 	bl	8006f48 <mpu6050_set_interrupt>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80016d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <mpu6050_dmp_init+0x772>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 80016de:	4897      	ldr	r0, [pc, #604]	; (800193c <mpu6050_dmp_init+0x9c0>)
 80016e0:	f005 fe9b 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80016e4:	4893      	ldr	r0, [pc, #588]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80016e6:	f004 fcbb 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e2ba      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default data ready interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_DATA_READY, MPU6050_DMP_DEFAULT_INTERRUPT_DATA_READY);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	4890      	ldr	r0, [pc, #576]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80016f4:	f005 fc28 	bl	8006f48 <mpu6050_set_interrupt>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80016fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <mpu6050_dmp_init+0x79a>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 8001706:	488d      	ldr	r0, [pc, #564]	; (800193c <mpu6050_dmp_init+0x9c0>)
 8001708:	f005 fe87 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800170c:	4889      	ldr	r0, [pc, #548]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 800170e:	f004 fca7 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001712:	2301      	movs	r3, #1
 8001714:	e2a6      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default latch */
    res = mpu6050_set_interrupt_latch(&gs_handle, MPU6050_DMP_DEFAULT_INTERRUPT_LATCH);
 8001716:	2101      	movs	r1, #1
 8001718:	4886      	ldr	r0, [pc, #536]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 800171a:	f005 fa8d 	bl	8006c38 <mpu6050_set_interrupt_latch>
 800171e:	4603      	mov	r3, r0
 8001720:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001724:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001728:	2b00      	cmp	r3, #0
 800172a:	d007      	beq.n	800173c <mpu6050_dmp_init+0x7c0>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt latch failed.\n");
 800172c:	4884      	ldr	r0, [pc, #528]	; (8001940 <mpu6050_dmp_init+0x9c4>)
 800172e:	f005 fe74 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001732:	4880      	ldr	r0, [pc, #512]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001734:	f004 fc94 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001738:	2301      	movs	r3, #1
 800173a:	e293      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default interrupt read clear */
    res = mpu6050_set_interrupt_read_clear(&gs_handle, MPU6050_DMP_DEFAULT_INTERRUPT_READ_CLEAR);
 800173c:	2101      	movs	r1, #1
 800173e:	487d      	ldr	r0, [pc, #500]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001740:	f005 faca 	bl	8006cd8 <mpu6050_set_interrupt_read_clear>
 8001744:	4603      	mov	r3, r0
 8001746:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 800174a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <mpu6050_dmp_init+0x7e6>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt read clear failed.\n");
 8001752:	487c      	ldr	r0, [pc, #496]	; (8001944 <mpu6050_dmp_init+0x9c8>)
 8001754:	f005 fe61 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001758:	4876      	ldr	r0, [pc, #472]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 800175a:	f004 fc81 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 800175e:	2301      	movs	r3, #1
 8001760:	e280      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default extern sync */
    res = mpu6050_set_extern_sync(&gs_handle, MPU6050_DMP_DEFAULT_EXTERN_SYNC);
 8001762:	2100      	movs	r1, #0
 8001764:	4873      	ldr	r0, [pc, #460]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001766:	f004 ff89 	bl	800667c <mpu6050_set_extern_sync>
 800176a:	4603      	mov	r3, r0
 800176c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001770:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001774:	2b00      	cmp	r3, #0
 8001776:	d007      	beq.n	8001788 <mpu6050_dmp_init+0x80c>
    {
        mpu6050_interface_debug_print("mpu6050: set extern sync failed.\n");
 8001778:	4873      	ldr	r0, [pc, #460]	; (8001948 <mpu6050_dmp_init+0x9cc>)
 800177a:	f005 fe4e 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800177e:	486d      	ldr	r0, [pc, #436]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001780:	f004 fc6e 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001784:	2301      	movs	r3, #1
 8001786:	e26d      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default fsync interrupt */
    res = mpu6050_set_fsync_interrupt(&gs_handle, MPU6050_DMP_DEFAULT_FSYNC_INTERRUPT);
 8001788:	2100      	movs	r1, #0
 800178a:	486a      	ldr	r0, [pc, #424]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 800178c:	f005 fb40 	bl	8006e10 <mpu6050_set_fsync_interrupt>
 8001790:	4603      	mov	r3, r0
 8001792:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001796:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800179a:	2b00      	cmp	r3, #0
 800179c:	d007      	beq.n	80017ae <mpu6050_dmp_init+0x832>
    {
        mpu6050_interface_debug_print("mpu6050: set fsync interrupt failed.\n");
 800179e:	486b      	ldr	r0, [pc, #428]	; (800194c <mpu6050_dmp_init+0x9d0>)
 80017a0:	f005 fe3b 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80017a4:	4863      	ldr	r0, [pc, #396]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80017a6:	f004 fc5b 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e25a      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default fsync interrupt level */
    res = mpu6050_set_fsync_interrupt_level(&gs_handle, MPU6050_DMP_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 80017ae:	2101      	movs	r1, #1
 80017b0:	4860      	ldr	r0, [pc, #384]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80017b2:	f005 fadf 	bl	8006d74 <mpu6050_set_fsync_interrupt_level>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80017bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d007      	beq.n	80017d4 <mpu6050_dmp_init+0x858>
    {
        mpu6050_interface_debug_print("mpu6050: set fsync interrupt level failed.\n");
 80017c4:	4862      	ldr	r0, [pc, #392]	; (8001950 <mpu6050_dmp_init+0x9d4>)
 80017c6:	f005 fe28 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80017ca:	485a      	ldr	r0, [pc, #360]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80017cc:	f004 fc48 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e247      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default iic master */
    res = mpu6050_set_iic_master(&gs_handle, MPU6050_DMP_DEFAULT_IIC_MASTER);
 80017d4:	2100      	movs	r1, #0
 80017d6:	4857      	ldr	r0, [pc, #348]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80017d8:	f004 fcfa 	bl	80061d0 <mpu6050_set_iic_master>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80017e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <mpu6050_dmp_init+0x87e>
    {
        mpu6050_interface_debug_print("mpu6050: set iic master failed.\n");
 80017ea:	485a      	ldr	r0, [pc, #360]	; (8001954 <mpu6050_dmp_init+0x9d8>)
 80017ec:	f005 fe15 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80017f0:	4850      	ldr	r0, [pc, #320]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80017f2:	f004 fc35 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e234      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default iic bypass */
    res = mpu6050_set_iic_bypass(&gs_handle, MPU6050_DMP_DEFAULT_IIC_BYPASS);
 80017fa:	2100      	movs	r1, #0
 80017fc:	484d      	ldr	r0, [pc, #308]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80017fe:	f005 fb55 	bl	8006eac <mpu6050_set_iic_bypass>
 8001802:	4603      	mov	r3, r0
 8001804:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001808:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800180c:	2b00      	cmp	r3, #0
 800180e:	d007      	beq.n	8001820 <mpu6050_dmp_init+0x8a4>
    {
        mpu6050_interface_debug_print("mpu6050: set iic bypass failed.\n");
 8001810:	4851      	ldr	r0, [pc, #324]	; (8001958 <mpu6050_dmp_init+0x9dc>)
 8001812:	f005 fe02 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001816:	4847      	ldr	r0, [pc, #284]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001818:	f004 fc22 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 800181c:	2301      	movs	r3, #1
 800181e:	e221      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* dmp load firmware */
    res = mpu6050_dmp_load_firmware(&gs_handle);
 8001820:	4844      	ldr	r0, [pc, #272]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001822:	f001 fa1b 	bl	8002c5c <mpu6050_dmp_load_firmware>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 800182c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001830:	2b00      	cmp	r3, #0
 8001832:	d007      	beq.n	8001844 <mpu6050_dmp_init+0x8c8>
    {
        mpu6050_interface_debug_print("mpu6050: dmp load firmware failed.\n");
 8001834:	4849      	ldr	r0, [pc, #292]	; (800195c <mpu6050_dmp_init+0x9e0>)
 8001836:	f005 fdf0 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800183a:	483e      	ldr	r0, [pc, #248]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 800183c:	f004 fc10 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001840:	2301      	movs	r3, #1
 8001842:	e20f      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* enable axis x */
    res = mpu6050_dmp_set_tap_axes(&gs_handle, MPU6050_AXIS_X, MPU6050_BOOL_TRUE);
 8001844:	2201      	movs	r2, #1
 8001846:	2107      	movs	r1, #7
 8001848:	483a      	ldr	r0, [pc, #232]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 800184a:	f002 fe03 	bl	8004454 <mpu6050_dmp_set_tap_axes>
 800184e:	4603      	mov	r3, r0
 8001850:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001854:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001858:	2b00      	cmp	r3, #0
 800185a:	d007      	beq.n	800186c <mpu6050_dmp_init+0x8f0>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set tap axes failed.\n");
 800185c:	4840      	ldr	r0, [pc, #256]	; (8001960 <mpu6050_dmp_init+0x9e4>)
 800185e:	f005 fddc 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001862:	4834      	ldr	r0, [pc, #208]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001864:	f004 fbfc 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001868:	2301      	movs	r3, #1
 800186a:	e1fb      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* enable axis y */
    res = mpu6050_dmp_set_tap_axes(&gs_handle, MPU6050_AXIS_Y, MPU6050_BOOL_TRUE);
 800186c:	2201      	movs	r2, #1
 800186e:	2106      	movs	r1, #6
 8001870:	4830      	ldr	r0, [pc, #192]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001872:	f002 fdef 	bl	8004454 <mpu6050_dmp_set_tap_axes>
 8001876:	4603      	mov	r3, r0
 8001878:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 800187c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <mpu6050_dmp_init+0x918>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set tap axes failed.\n");
 8001884:	4836      	ldr	r0, [pc, #216]	; (8001960 <mpu6050_dmp_init+0x9e4>)
 8001886:	f005 fdc8 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800188a:	482a      	ldr	r0, [pc, #168]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 800188c:	f004 fbe8 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001890:	2301      	movs	r3, #1
 8001892:	e1e7      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* enable axis z */
    res = mpu6050_dmp_set_tap_axes(&gs_handle, MPU6050_AXIS_Z, MPU6050_BOOL_TRUE);
 8001894:	2201      	movs	r2, #1
 8001896:	2105      	movs	r1, #5
 8001898:	4826      	ldr	r0, [pc, #152]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 800189a:	f002 fddb 	bl	8004454 <mpu6050_dmp_set_tap_axes>
 800189e:	4603      	mov	r3, r0
 80018a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80018a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d007      	beq.n	80018bc <mpu6050_dmp_init+0x940>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set tap axes failed.\n");
 80018ac:	482c      	ldr	r0, [pc, #176]	; (8001960 <mpu6050_dmp_init+0x9e4>)
 80018ae:	f005 fdb4 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80018b2:	4820      	ldr	r0, [pc, #128]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80018b4:	f004 fbd4 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e1d3      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default fifo rate */
    res = mpu6050_dmp_set_fifo_rate(&gs_handle, MPU6050_DMP_DEFAULT_RATE);
 80018bc:	2132      	movs	r1, #50	; 0x32
 80018be:	481d      	ldr	r0, [pc, #116]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80018c0:	f002 fd5a 	bl	8004378 <mpu6050_dmp_set_fifo_rate>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80018ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d007      	beq.n	80018e2 <mpu6050_dmp_init+0x966>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set fifo rate failed.\n");
 80018d2:	4824      	ldr	r0, [pc, #144]	; (8001964 <mpu6050_dmp_init+0x9e8>)
 80018d4:	f005 fda1 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80018d8:	4816      	ldr	r0, [pc, #88]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80018da:	f004 fbc1 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	e1c0      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default interrupt mode */
    res = mpu6050_dmp_set_interrupt_mode(&gs_handle, MPU6050_DMP_DEFAULT_INTERRUPT_MODE);
 80018e2:	2100      	movs	r1, #0
 80018e4:	4813      	ldr	r0, [pc, #76]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 80018e6:	f001 fca9 	bl	800323c <mpu6050_dmp_set_interrupt_mode>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80018f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d007      	beq.n	8001908 <mpu6050_dmp_init+0x98c>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set interrupt mode failed.\n");
 80018f8:	481b      	ldr	r0, [pc, #108]	; (8001968 <mpu6050_dmp_init+0x9ec>)
 80018fa:	f005 fd8e 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80018fe:	480d      	ldr	r0, [pc, #52]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001900:	f004 fbae 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001904:	2301      	movs	r3, #1
 8001906:	e1ad      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default dmp orientation */
    res = mpu6050_dmp_set_orientation(&gs_handle, gyro_orientation);
 8001908:	f107 0310 	add.w	r3, r7, #16
 800190c:	4619      	mov	r1, r3
 800190e:	4809      	ldr	r0, [pc, #36]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 8001910:	f001 ff92 	bl	8003838 <mpu6050_dmp_set_orientation>
 8001914:	4603      	mov	r3, r0
 8001916:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 800191a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800191e:	2b00      	cmp	r3, #0
 8001920:	d026      	beq.n	8001970 <mpu6050_dmp_init+0x9f4>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set orientation failed.\n");
 8001922:	4812      	ldr	r0, [pc, #72]	; (800196c <mpu6050_dmp_init+0x9f0>)
 8001924:	f005 fd79 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <mpu6050_dmp_init+0x9b8>)
 800192a:	f004 fb99 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 800192e:	2301      	movs	r3, #1
 8001930:	e198      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
 8001932:	bf00      	nop
 8001934:	20000de8 	.word	0x20000de8
 8001938:	0800b4c8 	.word	0x0800b4c8
 800193c:	0800b4f4 	.word	0x0800b4f4
 8001940:	0800b514 	.word	0x0800b514
 8001944:	0800b53c 	.word	0x0800b53c
 8001948:	0800b568 	.word	0x0800b568
 800194c:	0800b58c 	.word	0x0800b58c
 8001950:	0800b5b4 	.word	0x0800b5b4
 8001954:	0800b5e0 	.word	0x0800b5e0
 8001958:	0800b604 	.word	0x0800b604
 800195c:	0800b628 	.word	0x0800b628
 8001960:	0800b64c 	.word	0x0800b64c
 8001964:	0800b670 	.word	0x0800b670
 8001968:	0800b694 	.word	0x0800b694
 800196c:	0800b6c0 	.word	0x0800b6c0
    }
    
    /* enable feature */
    res = mpu6050_dmp_set_feature(&gs_handle, MPU6050_DMP_FEATURE_6X_QUAT | MPU6050_DMP_FEATURE_TAP | MPU6050_DMP_FEATURE_PEDOMETER |
 8001970:	f240 117b 	movw	r1, #379	; 0x17b
 8001974:	48bd      	ldr	r0, [pc, #756]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001976:	f002 f869 	bl	8003a4c <mpu6050_dmp_set_feature>
 800197a:	4603      	mov	r3, r0
 800197c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                                              MPU6050_DMP_FEATURE_ORIENT | MPU6050_DMP_FEATURE_SEND_RAW_ACCEL |
                                              MPU6050_DMP_FEATURE_SEND_CAL_GYRO | MPU6050_DMP_FEATURE_GYRO_CAL);
    if (res != 0)
 8001980:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <mpu6050_dmp_init+0xa1c>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set feature failed.\n");
 8001988:	48b9      	ldr	r0, [pc, #740]	; (8001c70 <mpu6050_dmp_init+0xcf4>)
 800198a:	f005 fd46 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800198e:	48b7      	ldr	r0, [pc, #732]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001990:	f004 fb66 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001994:	2301      	movs	r3, #1
 8001996:	e165      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* dmp set tap callback */
    res = mpu6050_dmp_set_tap_callback(&gs_handle, tap_callback);
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	48b4      	ldr	r0, [pc, #720]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 800199c:	f003 ff9e 	bl	80058dc <mpu6050_dmp_set_tap_callback>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80019a6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <mpu6050_dmp_init+0xa42>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set tap callback failed.\n");
 80019ae:	48b1      	ldr	r0, [pc, #708]	; (8001c74 <mpu6050_dmp_init+0xcf8>)
 80019b0:	f005 fd33 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80019b4:	48ad      	ldr	r0, [pc, #692]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 80019b6:	f004 fb53 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e152      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* dmp set orient callback */
    res = mpu6050_dmp_set_orient_callback(&gs_handle, orient_callback);
 80019be:	6839      	ldr	r1, [r7, #0]
 80019c0:	48aa      	ldr	r0, [pc, #680]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 80019c2:	f003 ffb1 	bl	8005928 <mpu6050_dmp_set_orient_callback>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80019cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <mpu6050_dmp_init+0xa68>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set orient callback failed.\n");
 80019d4:	48a8      	ldr	r0, [pc, #672]	; (8001c78 <mpu6050_dmp_init+0xcfc>)
 80019d6:	f005 fd20 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80019da:	48a4      	ldr	r0, [pc, #656]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 80019dc:	f004 fb40 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e13f      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default pedometer walk time */
    res = mpu6050_dmp_set_pedometer_walk_time(&gs_handle, MPU6050_DMP_DEFAULT_PEOMETER_WALK_TIME);
 80019e4:	21c8      	movs	r1, #200	; 0xc8
 80019e6:	48a1      	ldr	r0, [pc, #644]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 80019e8:	f001 f9ce 	bl	8002d88 <mpu6050_dmp_set_pedometer_walk_time>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 80019f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <mpu6050_dmp_init+0xa8e>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set pedometer walk time failed.\n");
 80019fa:	48a0      	ldr	r0, [pc, #640]	; (8001c7c <mpu6050_dmp_init+0xd00>)
 80019fc:	f005 fd0d 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001a00:	489a      	ldr	r0, [pc, #616]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001a02:	f004 fb2d 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e12c      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default pedometer step count */
    res = mpu6050_dmp_set_pedometer_step_count(&gs_handle, MPU6050_DMP_DEFAULT_PEOMETER_STEP_COUNT);
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4897      	ldr	r0, [pc, #604]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001a0e:	f001 fa0b 	bl	8002e28 <mpu6050_dmp_set_pedometer_step_count>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001a18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d007      	beq.n	8001a30 <mpu6050_dmp_init+0xab4>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set pedometer step count failed.\n");
 8001a20:	4897      	ldr	r0, [pc, #604]	; (8001c80 <mpu6050_dmp_init+0xd04>)
 8001a22:	f005 fcfa 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001a26:	4891      	ldr	r0, [pc, #580]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001a28:	f004 fb1a 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e119      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default shake reject timeout */
    res = mpu6050_dmp_set_shake_reject_timeout(&gs_handle, MPU6050_DMP_DEFAULT_SHAKE_REJECT_TIMEOUT);
 8001a30:	210a      	movs	r1, #10
 8001a32:	488e      	ldr	r0, [pc, #568]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001a34:	f001 fa40 	bl	8002eb8 <mpu6050_dmp_set_shake_reject_timeout>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001a3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <mpu6050_dmp_init+0xada>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set shake reject timeout failed.\n");
 8001a46:	488f      	ldr	r0, [pc, #572]	; (8001c84 <mpu6050_dmp_init+0xd08>)
 8001a48:	f005 fce7 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001a4c:	4887      	ldr	r0, [pc, #540]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001a4e:	f004 fb07 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e106      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default shake reject time */
    res = mpu6050_dmp_set_shake_reject_time(&gs_handle, MPU6050_DMP_DEFAULT_SHAKE_REJECT_TIME);
 8001a56:	2128      	movs	r1, #40	; 0x28
 8001a58:	4884      	ldr	r0, [pc, #528]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001a5a:	f001 fa77 	bl	8002f4c <mpu6050_dmp_set_shake_reject_time>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001a64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <mpu6050_dmp_init+0xb00>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set shake reject time failed.\n");
 8001a6c:	4886      	ldr	r0, [pc, #536]	; (8001c88 <mpu6050_dmp_init+0xd0c>)
 8001a6e:	f005 fcd4 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001a72:	487e      	ldr	r0, [pc, #504]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001a74:	f004 faf4 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0f3      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default shake reject thresh */
    res = mpu6050_dmp_set_shake_reject_thresh(&gs_handle, MPU6050_DMP_DEFAULT_SHAKE_REJECT_THRESH);
 8001a7c:	21c8      	movs	r1, #200	; 0xc8
 8001a7e:	487b      	ldr	r0, [pc, #492]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001a80:	f001 faae 	bl	8002fe0 <mpu6050_dmp_set_shake_reject_thresh>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001a8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <mpu6050_dmp_init+0xb26>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set shake reject thresh failed.\n");
 8001a92:	487e      	ldr	r0, [pc, #504]	; (8001c8c <mpu6050_dmp_init+0xd10>)
 8001a94:	f005 fcc1 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001a98:	4874      	ldr	r0, [pc, #464]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001a9a:	f004 fae1 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0e0      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default tap time multi */
    res = mpu6050_dmp_set_tap_time_multi(&gs_handle, MPU6050_DMP_DEFAULT_TAP_TIME_MULTI);
 8001aa2:	21c8      	movs	r1, #200	; 0xc8
 8001aa4:	4871      	ldr	r0, [pc, #452]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001aa6:	f001 fae9 	bl	800307c <mpu6050_dmp_set_tap_time_multi>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001ab0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d007      	beq.n	8001ac8 <mpu6050_dmp_init+0xb4c>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set tap time multi failed.\n");
 8001ab8:	4875      	ldr	r0, [pc, #468]	; (8001c90 <mpu6050_dmp_init+0xd14>)
 8001aba:	f005 fcae 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001abe:	486b      	ldr	r0, [pc, #428]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001ac0:	f004 face 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0cd      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default tap time */
    res = mpu6050_dmp_set_tap_time(&gs_handle, MPU6050_DMP_DEFAULT_TAP_TIME);
 8001ac8:	2164      	movs	r1, #100	; 0x64
 8001aca:	4868      	ldr	r0, [pc, #416]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001acc:	f001 fb20 	bl	8003110 <mpu6050_dmp_set_tap_time>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001ad6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <mpu6050_dmp_init+0xb72>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set tap time failed.\n");
 8001ade:	486d      	ldr	r0, [pc, #436]	; (8001c94 <mpu6050_dmp_init+0xd18>)
 8001ae0:	f005 fc9b 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001ae4:	4861      	ldr	r0, [pc, #388]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001ae6:	f004 fabb 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0ba      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default min tap count */
    res = mpu6050_dmp_set_min_tap_count(&gs_handle, MPU6050_DMP_DEFAULT_MIN_TAP_COUNT);
 8001aee:	2101      	movs	r1, #1
 8001af0:	485e      	ldr	r0, [pc, #376]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001af2:	f001 fb57 	bl	80031a4 <mpu6050_dmp_set_min_tap_count>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001afc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <mpu6050_dmp_init+0xb98>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set min tap count failed.\n");
 8001b04:	4864      	ldr	r0, [pc, #400]	; (8001c98 <mpu6050_dmp_init+0xd1c>)
 8001b06:	f005 fc88 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001b0a:	4858      	ldr	r0, [pc, #352]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001b0c:	f004 faa8 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0a7      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default tap thresh x */
    res = mpu6050_dmp_set_tap_thresh(&gs_handle, MPU6050_AXIS_X, MPU6050_DMP_DEFAULT_TAP_X_THRESH);
 8001b14:	22fa      	movs	r2, #250	; 0xfa
 8001b16:	2107      	movs	r1, #7
 8001b18:	4854      	ldr	r0, [pc, #336]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001b1a:	f002 fd0d 	bl	8004538 <mpu6050_dmp_set_tap_thresh>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001b24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <mpu6050_dmp_init+0xbc0>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set tap thresh failed.\n");
 8001b2c:	485b      	ldr	r0, [pc, #364]	; (8001c9c <mpu6050_dmp_init+0xd20>)
 8001b2e:	f005 fc74 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001b32:	484e      	ldr	r0, [pc, #312]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001b34:	f004 fa94 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e093      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }

    /* set the default tap thresh y */
    res = mpu6050_dmp_set_tap_thresh(&gs_handle, MPU6050_AXIS_Y,MPU6050_DMP_DEFAULT_TAP_Y_THRESH);
 8001b3c:	22fa      	movs	r2, #250	; 0xfa
 8001b3e:	2106      	movs	r1, #6
 8001b40:	484a      	ldr	r0, [pc, #296]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001b42:	f002 fcf9 	bl	8004538 <mpu6050_dmp_set_tap_thresh>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001b4c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d007      	beq.n	8001b64 <mpu6050_dmp_init+0xbe8>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set tap thresh failed.\n");
 8001b54:	4851      	ldr	r0, [pc, #324]	; (8001c9c <mpu6050_dmp_init+0xd20>)
 8001b56:	f005 fc60 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001b5a:	4844      	ldr	r0, [pc, #272]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001b5c:	f004 fa80 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e07f      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* set the default tap thresh z */
    res = mpu6050_dmp_set_tap_thresh(&gs_handle, MPU6050_AXIS_Z, MPU6050_DMP_DEFAULT_TAP_Z_THRESH);
 8001b64:	22fa      	movs	r2, #250	; 0xfa
 8001b66:	2105      	movs	r1, #5
 8001b68:	4840      	ldr	r0, [pc, #256]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001b6a:	f002 fce5 	bl	8004538 <mpu6050_dmp_set_tap_thresh>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001b74:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <mpu6050_dmp_init+0xc10>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set tap thresh failed.\n");
 8001b7c:	4847      	ldr	r0, [pc, #284]	; (8001c9c <mpu6050_dmp_init+0xd20>)
 8001b7e:	f005 fc4c 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001b82:	483a      	ldr	r0, [pc, #232]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001b84:	f004 fa6c 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e06b      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* dmp gyro accel raw offset convert */
    res = mpu6050_dmp_gyro_accel_raw_offset_convert(&gs_handle, gyro_offset_raw, accel_offset_raw, 
 8001b8c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001b90:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b94:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4832      	ldr	r0, [pc, #200]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001ba2:	f003 ff41 	bl	8005a28 <mpu6050_dmp_gyro_accel_raw_offset_convert>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                                                    gyro_offset, accel_offset);
    if (res != 0)
 8001bac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d007      	beq.n	8001bc4 <mpu6050_dmp_init+0xc48>
    {
        mpu6050_interface_debug_print("mpu6050: dmp gyro accel raw offset convert failed.\n");
 8001bb4:	483a      	ldr	r0, [pc, #232]	; (8001ca0 <mpu6050_dmp_init+0xd24>)
 8001bb6:	f005 fc30 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001bba:	482c      	ldr	r0, [pc, #176]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001bbc:	f004 fa50 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e04f      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* dmp set accel bias */
    res = mpu6050_dmp_set_accel_bias(&gs_handle, accel_offset);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4828      	ldr	r0, [pc, #160]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001bcc:	f001 fcdc 	bl	8003588 <mpu6050_dmp_set_accel_bias>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001bd6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <mpu6050_dmp_init+0xc72>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set accel bias failed.\n");
 8001bde:	4831      	ldr	r0, [pc, #196]	; (8001ca4 <mpu6050_dmp_init+0xd28>)
 8001be0:	f005 fc1b 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001be4:	4821      	ldr	r0, [pc, #132]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001be6:	f004 fa3b 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e03a      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* dmp set gyro bias */
    res = mpu6050_dmp_set_gyro_bias(&gs_handle, gyro_offset);
 8001bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	481d      	ldr	r0, [pc, #116]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001bf6:	f001 fb89 	bl	800330c <mpu6050_dmp_set_gyro_bias>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001c00:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <mpu6050_dmp_init+0xc9c>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set gyro bias failed.\n");
 8001c08:	4827      	ldr	r0, [pc, #156]	; (8001ca8 <mpu6050_dmp_init+0xd2c>)
 8001c0a:	f005 fc06 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001c0e:	4817      	ldr	r0, [pc, #92]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001c10:	f004 fa26 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e025      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* enable the dmp */
    res = mpu6050_dmp_set_enable(&gs_handle, MPU6050_BOOL_TRUE);
 8001c18:	2101      	movs	r1, #1
 8001c1a:	4814      	ldr	r0, [pc, #80]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001c1c:	f003 feaa 	bl	8005974 <mpu6050_dmp_set_enable>
 8001c20:	4603      	mov	r3, r0
 8001c22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001c26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <mpu6050_dmp_init+0xcc2>
    {
        mpu6050_interface_debug_print("mpu6050: dmp set enable failed.\n");
 8001c2e:	481f      	ldr	r0, [pc, #124]	; (8001cac <mpu6050_dmp_init+0xd30>)
 8001c30:	f005 fbf3 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001c34:	480d      	ldr	r0, [pc, #52]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001c36:	f004 fa13 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e012      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    /* force fifo reset */
    res = mpu6050_force_fifo_reset(&gs_handle);
 8001c3e:	480b      	ldr	r0, [pc, #44]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001c40:	f004 faa0 	bl	8006184 <mpu6050_force_fifo_reset>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (res != 0)
 8001c4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d007      	beq.n	8001c62 <mpu6050_dmp_init+0xce6>
    {
        mpu6050_interface_debug_print("mpu6050: force fifo reset failed.\n");
 8001c52:	4817      	ldr	r0, [pc, #92]	; (8001cb0 <mpu6050_dmp_init+0xd34>)
 8001c54:	f005 fbe1 	bl	800741a <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001c58:	4804      	ldr	r0, [pc, #16]	; (8001c6c <mpu6050_dmp_init+0xcf0>)
 8001c5a:	f004 fa01 	bl	8006060 <mpu6050_deinit>
       
        return 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <mpu6050_dmp_init+0xce8>
    }
    
    return 0;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3750      	adds	r7, #80	; 0x50
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000de8 	.word	0x20000de8
 8001c70:	0800b6e8 	.word	0x0800b6e8
 8001c74:	0800b70c 	.word	0x0800b70c
 8001c78:	0800b734 	.word	0x0800b734
 8001c7c:	0800b760 	.word	0x0800b760
 8001c80:	0800b790 	.word	0x0800b790
 8001c84:	0800b7c0 	.word	0x0800b7c0
 8001c88:	0800b7f0 	.word	0x0800b7f0
 8001c8c:	0800b81c 	.word	0x0800b81c
 8001c90:	0800b84c 	.word	0x0800b84c
 8001c94:	0800b878 	.word	0x0800b878
 8001c98:	0800b89c 	.word	0x0800b89c
 8001c9c:	0800b8c4 	.word	0x0800b8c4
 8001ca0:	0800b8ec 	.word	0x0800b8ec
 8001ca4:	0800b920 	.word	0x0800b920
 8001ca8:	0800b948 	.word	0x0800b948
 8001cac:	0800b96c 	.word	0x0800b96c
 8001cb0:	0800b990 	.word	0x0800b990

08001cb4 <mpu6050_dmp_read_all>:
                             int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                             int32_t (*quat)[4],
                             float *pitch, float *roll, float *yaw,
                             uint16_t *l
                            )
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af06      	add	r7, sp, #24
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
	gs_handle.inited = 1;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <mpu6050_dmp_read_all+0x50>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* dmp read */
    if (mpu6050_dmp_read(&gs_handle, accel_raw, accel_g,
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	9305      	str	r3, [sp, #20]
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	9304      	str	r3, [sp, #16]
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	9303      	str	r3, [sp, #12]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	9302      	str	r3, [sp, #8]
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	68f9      	ldr	r1, [r7, #12]
 8001ce8:	4806      	ldr	r0, [pc, #24]	; (8001d04 <mpu6050_dmp_read_all+0x50>)
 8001cea:	f002 fd8f 	bl	800480c <mpu6050_dmp_read>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <mpu6050_dmp_read_all+0x44>
                         gyro_raw, gyro_dps, quat,
                         pitch, roll, yaw, l) != 0
                        )
    {
        return 1;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <mpu6050_dmp_read_all+0x46>
    }
    
    return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000de8 	.word	0x20000de8

08001d08 <a_mpu6050_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu6050_iic_read(mpu6050_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8001d08:	b590      	push	{r4, r7, lr}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	461a      	mov	r2, r3
 8001d14:	460b      	mov	r3, r1
 8001d16:	72fb      	strb	r3, [r7, #11]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	813b      	strh	r3, [r7, #8]
    if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	68dc      	ldr	r4, [r3, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	7818      	ldrb	r0, [r3, #0]
 8001d24:	893b      	ldrh	r3, [r7, #8]
 8001d26:	7af9      	ldrb	r1, [r7, #11]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	47a0      	blx	r4
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <a_mpu6050_iic_read+0x2e>
    {
        return 1;                                                                 /* return error */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <a_mpu6050_iic_read+0x30>
    }
    else
    {
        return 0;                                                                 /* success return 0 */
 8001d36:	2300      	movs	r3, #0
    }
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd90      	pop	{r4, r7, pc}

08001d40 <a_mpu6050_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu6050_iic_write(mpu6050_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	72fb      	strb	r3, [r7, #11]
 8001d50:	4613      	mov	r3, r2
 8001d52:	813b      	strh	r3, [r7, #8]
    if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	691c      	ldr	r4, [r3, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	7818      	ldrb	r0, [r3, #0]
 8001d5c:	893b      	ldrh	r3, [r7, #8]
 8001d5e:	7af9      	ldrb	r1, [r7, #11]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	47a0      	blx	r4
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <a_mpu6050_iic_write+0x2e>
    {
        return 1;                                                                  /* return error */
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <a_mpu6050_iic_write+0x30>
    }
    else
    {
        return 0;                                                                  /* success return 0 */
 8001d6e:	2300      	movs	r3, #0
    }
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd90      	pop	{r4, r7, pc}

08001d78 <a_mpu6050_write_mem>:
 *            - 1 write failed
 *            - 2 len is invalid
 * @note      none
 */
static uint8_t a_mpu6050_write_mem(mpu6050_handle_t *handle, uint16_t addr, uint8_t *buf, uint16_t len)
{
 8001d78:	b590      	push	{r4, r7, lr}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	607a      	str	r2, [r7, #4]
 8001d82:	461a      	mov	r2, r3
 8001d84:	460b      	mov	r3, r1
 8001d86:	817b      	strh	r3, [r7, #10]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	813b      	strh	r3, [r7, #8]
    uint8_t tmp[2];

    tmp[0] = (addr >> 8) & 0xFF;                                                                  /* set the addr high */
 8001d8c:	897b      	ldrh	r3, [r7, #10]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	753b      	strb	r3, [r7, #20]
    tmp[1] = (addr >> 0) & 0xFF;                                                                  /* set the addr low */
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	757b      	strb	r3, [r7, #21]

    if (tmp[1] + len > 256)                                                                       /* check the range */
 8001d9c:	7d7b      	ldrb	r3, [r7, #21]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	893b      	ldrh	r3, [r7, #8]
 8001da2:	4413      	add	r3, r2
 8001da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da8:	dd01      	ble.n	8001dae <a_mpu6050_write_mem+0x36>
    {
        return 2;                                                                                 /* return error */
 8001daa:	2302      	movs	r3, #2
 8001dac:	e01b      	b.n	8001de6 <a_mpu6050_write_mem+0x6e>
    }

    if (handle->iic_write(handle->iic_addr, MPU6050_REG_BANK_SEL, (uint8_t *)tmp, 2) != 0)        /* write data */
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	691c      	ldr	r4, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	7818      	ldrb	r0, [r3, #0]
 8001db6:	f107 0214 	add.w	r2, r7, #20
 8001dba:	2302      	movs	r3, #2
 8001dbc:	216d      	movs	r1, #109	; 0x6d
 8001dbe:	47a0      	blx	r4
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <a_mpu6050_write_mem+0x52>
    {
        return 1;                                                                                 /* return error */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00d      	b.n	8001de6 <a_mpu6050_write_mem+0x6e>
    }
    if (handle->iic_write(handle->iic_addr, MPU6050_REG_MEM, (uint8_t *)buf, len) != 0)           /* write data */
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	691c      	ldr	r4, [r3, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	7818      	ldrb	r0, [r3, #0]
 8001dd2:	893b      	ldrh	r3, [r7, #8]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	216f      	movs	r1, #111	; 0x6f
 8001dd8:	47a0      	blx	r4
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <a_mpu6050_write_mem+0x6c>
    {
        return 1;                                                                                 /* return error */
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <a_mpu6050_write_mem+0x6e>
    }

    return 0;                                                                                     /* success return 0 */
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}

08001dee <a_mpu6050_read_mem>:
 *             - 1 read failed
 *             - 2 len is invalid
 * @note       none
 */
static uint8_t a_mpu6050_read_mem(mpu6050_handle_t *handle, uint16_t addr, uint8_t *buf, uint16_t len)
{
 8001dee:	b590      	push	{r4, r7, lr}
 8001df0:	b087      	sub	sp, #28
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	817b      	strh	r3, [r7, #10]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	813b      	strh	r3, [r7, #8]
    uint8_t tmp[2];

    tmp[0] = (addr >> 8) & 0xFF;                                                                  /* set the addr high */
 8001e02:	897b      	ldrh	r3, [r7, #10]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	753b      	strb	r3, [r7, #20]
    tmp[1] = (addr >> 0) & 0xFF;                                                                  /* set the addr low */
 8001e0c:	897b      	ldrh	r3, [r7, #10]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	757b      	strb	r3, [r7, #21]

    if (tmp[1] + len > 256)                                                                       /* check the range */
 8001e12:	7d7b      	ldrb	r3, [r7, #21]
 8001e14:	461a      	mov	r2, r3
 8001e16:	893b      	ldrh	r3, [r7, #8]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e1e:	dd01      	ble.n	8001e24 <a_mpu6050_read_mem+0x36>
    {
        return 2;                                                                                 /* return error */
 8001e20:	2302      	movs	r3, #2
 8001e22:	e01b      	b.n	8001e5c <a_mpu6050_read_mem+0x6e>
    }

    if (handle->iic_write(handle->iic_addr, MPU6050_REG_BANK_SEL, (uint8_t *)tmp, 2) != 0)        /* write data */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	691c      	ldr	r4, [r3, #16]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	7818      	ldrb	r0, [r3, #0]
 8001e2c:	f107 0214 	add.w	r2, r7, #20
 8001e30:	2302      	movs	r3, #2
 8001e32:	216d      	movs	r1, #109	; 0x6d
 8001e34:	47a0      	blx	r4
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <a_mpu6050_read_mem+0x52>
    {
        return 1;                                                                                 /* return error */
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e00d      	b.n	8001e5c <a_mpu6050_read_mem+0x6e>
    }
    if (handle->iic_read(handle->iic_addr, MPU6050_REG_MEM, (uint8_t *)buf, len) != 0)            /* read data */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	68dc      	ldr	r4, [r3, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	7818      	ldrb	r0, [r3, #0]
 8001e48:	893b      	ldrh	r3, [r7, #8]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	216f      	movs	r1, #111	; 0x6f
 8001e4e:	47a0      	blx	r4
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <a_mpu6050_read_mem+0x6c>
    {
        return 1;                                                                                 /* return error */
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <a_mpu6050_read_mem+0x6e>
    }

    return 0;                                                                                     /* success return 0 */
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd90      	pop	{r4, r7, pc}

08001e64 <a_mpu6050_reset_fifo>:
 *            - 0 success
 *            - 1 reset fifo failed
 * @note       none
 */
static uint8_t a_mpu6050_reset_fifo(mpu6050_handle_t *handle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
    uint8_t prev;
    uint8_t int_enable;
    uint8_t fifo_enable;
    uint8_t user_ctrl;

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_ENABLE, &int_enable, 1);            /* read the int enable */
 8001e6c:	f107 020d 	add.w	r2, r7, #13
 8001e70:	2301      	movs	r3, #1
 8001e72:	2138      	movs	r1, #56	; 0x38
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff47 	bl	8001d08 <a_mpu6050_iic_read>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check the result */
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <a_mpu6050_reset_fifo+0x2c>
    {
        handle->debug_print("mpu6050: read int enable register failed.\n");              /* read int enable register failed */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	4865      	ldr	r0, [pc, #404]	; (8002020 <a_mpu6050_reset_fifo+0x1bc>)
 8001e8a:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0c2      	b.n	8002016 <a_mpu6050_reset_fifo+0x1b2>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_EN, &fifo_enable, 1);              /* read the fifo enable */
 8001e90:	f107 020c 	add.w	r2, r7, #12
 8001e94:	2301      	movs	r3, #1
 8001e96:	2123      	movs	r1, #35	; 0x23
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff35 	bl	8001d08 <a_mpu6050_iic_read>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check the result */
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <a_mpu6050_reset_fifo+0x50>
    {
        handle->debug_print("mpu6050: read fifo enable register failed.\n");             /* read fifo enable register failed */
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	485d      	ldr	r0, [pc, #372]	; (8002024 <a_mpu6050_reset_fifo+0x1c0>)
 8001eae:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0b0      	b.n	8002016 <a_mpu6050_reset_fifo+0x1b2>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, &user_ctrl, 1);              /* read the user ctrl */
 8001eb4:	f107 020b 	add.w	r2, r7, #11
 8001eb8:	2301      	movs	r3, #1
 8001eba:	216a      	movs	r1, #106	; 0x6a
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff23 	bl	8001d08 <a_mpu6050_iic_read>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check the result */
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <a_mpu6050_reset_fifo+0x74>
    {
        handle->debug_print("mpu6050: read user ctrl register failed.\n");               /* read user ctrl register failed */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	4855      	ldr	r0, [pc, #340]	; (8002028 <a_mpu6050_reset_fifo+0x1c4>)
 8001ed2:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e09e      	b.n	8002016 <a_mpu6050_reset_fifo+0x1b2>
    }

    prev = 0;                                                                            /* set 0 */
 8001ed8:	2300      	movs	r3, #0
 8001eda:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_ENABLE, &prev, 1);                 /* disable all interrupt */
 8001edc:	f107 020e 	add.w	r2, r7, #14
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	2138      	movs	r1, #56	; 0x38
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff2b 	bl	8001d40 <a_mpu6050_iic_write>
 8001eea:	4603      	mov	r3, r0
 8001eec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check the result */
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <a_mpu6050_reset_fifo+0x9c>
    {
        handle->debug_print("mpu6050: write int enable register failed.\n");             /* write int enable register failed */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	484c      	ldr	r0, [pc, #304]	; (800202c <a_mpu6050_reset_fifo+0x1c8>)
 8001efa:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001efc:	2301      	movs	r3, #1
 8001efe:	e08a      	b.n	8002016 <a_mpu6050_reset_fifo+0x1b2>
    }
    prev = 0;                                                                            /* set 0 */
 8001f00:	2300      	movs	r3, #0
 8001f02:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_FIFO_EN, &prev, 1);                    /* disable all fifo */
 8001f04:	f107 020e 	add.w	r2, r7, #14
 8001f08:	2301      	movs	r3, #1
 8001f0a:	2123      	movs	r1, #35	; 0x23
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff17 	bl	8001d40 <a_mpu6050_iic_write>
 8001f12:	4603      	mov	r3, r0
 8001f14:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check the result */
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <a_mpu6050_reset_fifo+0xc4>
    {
        handle->debug_print("mpu6050: write fifo enable register failed.\n");            /* write fifo enable register failed */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4843      	ldr	r0, [pc, #268]	; (8002030 <a_mpu6050_reset_fifo+0x1cc>)
 8001f22:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001f24:	2301      	movs	r3, #1
 8001f26:	e076      	b.n	8002016 <a_mpu6050_reset_fifo+0x1b2>
    }
    user_ctrl &= ~(1 << 6);                                                              /* disable the fifo */
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	72fb      	strb	r3, [r7, #11]
    user_ctrl &= ~(1 << 7);                                                              /* disable the dmp */
 8001f32:	7afb      	ldrb	r3, [r7, #11]
 8001f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	72fb      	strb	r3, [r7, #11]
    if (handle->dmp_inited == 1)                                                         /* if we use dmp */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d105      	bne.n	8001f52 <a_mpu6050_reset_fifo+0xee>
    {
        user_ctrl |= (1 << 2) | (1 << 3);                                                /* reset the fifo and dmp */
 8001f46:	7afb      	ldrb	r3, [r7, #11]
 8001f48:	f043 030c 	orr.w	r3, r3, #12
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	72fb      	strb	r3, [r7, #11]
 8001f50:	e004      	b.n	8001f5c <a_mpu6050_reset_fifo+0xf8>
    }
    else
    {
        user_ctrl |= 1 << 2;                                                             /* reset the fifo */
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	72fb      	strb	r3, [r7, #11]
    }
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, &user_ctrl, 1);             /* write the user ctrl */
 8001f5c:	f107 020b 	add.w	r2, r7, #11
 8001f60:	2301      	movs	r3, #1
 8001f62:	216a      	movs	r1, #106	; 0x6a
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff feeb 	bl	8001d40 <a_mpu6050_iic_write>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check the result */
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d005      	beq.n	8001f80 <a_mpu6050_reset_fifo+0x11c>
    {
        handle->debug_print("mpu6050: write user ctrl register failed.\n");              /* write user ctrl register failed */
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	482e      	ldr	r0, [pc, #184]	; (8002034 <a_mpu6050_reset_fifo+0x1d0>)
 8001f7a:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e04a      	b.n	8002016 <a_mpu6050_reset_fifo+0x1b2>
    }
    handle->delay_ms(50);                                                                /* delay 50 ms */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	2032      	movs	r0, #50	; 0x32
 8001f86:	4798      	blx	r3
    if (handle->dmp_inited == 1)                                                         /* if we use dmp */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <a_mpu6050_reset_fifo+0x13a>
    {
        user_ctrl |= (1 << 6) | (1 << 7);                                                /* enable fifo and dmp */
 8001f92:	7afb      	ldrb	r3, [r7, #11]
 8001f94:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	72fb      	strb	r3, [r7, #11]
 8001f9c:	e004      	b.n	8001fa8 <a_mpu6050_reset_fifo+0x144>
    }
    else
    {
        user_ctrl |= 1 << 6;                                                             /* enable fifo */
 8001f9e:	7afb      	ldrb	r3, [r7, #11]
 8001fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	72fb      	strb	r3, [r7, #11]
    }
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, &user_ctrl, 1);             /* write the user ctrl */
 8001fa8:	f107 020b 	add.w	r2, r7, #11
 8001fac:	2301      	movs	r3, #1
 8001fae:	216a      	movs	r1, #106	; 0x6a
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff fec5 	bl	8001d40 <a_mpu6050_iic_write>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check the result */
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <a_mpu6050_reset_fifo+0x168>
    {
        handle->debug_print("mpu6050: write user ctrl register failed.\n");              /* write user ctrl register failed */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	481b      	ldr	r0, [pc, #108]	; (8002034 <a_mpu6050_reset_fifo+0x1d0>)
 8001fc6:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e024      	b.n	8002016 <a_mpu6050_reset_fifo+0x1b2>
    }

    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_ENABLE, &int_enable, 1);           /* restore the int enable */
 8001fcc:	f107 020d 	add.w	r2, r7, #13
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	2138      	movs	r1, #56	; 0x38
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff feb3 	bl	8001d40 <a_mpu6050_iic_write>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check the result */
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <a_mpu6050_reset_fifo+0x18c>
    {
        handle->debug_print("mpu6050: write int enable register failed.\n");             /* write int enable register failed */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	4810      	ldr	r0, [pc, #64]	; (800202c <a_mpu6050_reset_fifo+0x1c8>)
 8001fea:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001fec:	2301      	movs	r3, #1
 8001fee:	e012      	b.n	8002016 <a_mpu6050_reset_fifo+0x1b2>
    }
    res = a_mpu6050_iic_write(handle, MPU6050_REG_FIFO_EN, &fifo_enable, 1);             /* restore the fifo enable */
 8001ff0:	f107 020c 	add.w	r2, r7, #12
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	2123      	movs	r1, #35	; 0x23
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff fea1 	bl	8001d40 <a_mpu6050_iic_write>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check the result */
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <a_mpu6050_reset_fifo+0x1b0>
    {
        handle->debug_print("mpu6050: write fifo enable register failed.\n");            /* write fifo enable register failed */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4808      	ldr	r0, [pc, #32]	; (8002030 <a_mpu6050_reset_fifo+0x1cc>)
 800200e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <a_mpu6050_reset_fifo+0x1b2>
    }

    return 0;                                                                            /* success return 0 */
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	0800b9c0 	.word	0x0800b9c0
 8002024:	0800b9ec 	.word	0x0800b9ec
 8002028:	0800ba18 	.word	0x0800ba18
 800202c:	0800ba44 	.word	0x0800ba44
 8002030:	0800ba70 	.word	0x0800ba70
 8002034:	0800baa0 	.word	0x0800baa0

08002038 <a_mpu6050_inv_row_2_scale>:
 * @param[in] *row points to a row buffer
 * @return    scale
 * @note      none
 */
static uint16_t a_mpu6050_inv_row_2_scale(int8_t *row)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    uint16_t b;

    if (row[0] > 0)             /* check row 0 */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f993 3000 	ldrsb.w	r3, [r3]
 8002046:	2b00      	cmp	r3, #0
 8002048:	dd02      	ble.n	8002050 <a_mpu6050_inv_row_2_scale+0x18>
    {
        b = 0;                  /* set 0 */
 800204a:	2300      	movs	r3, #0
 800204c:	81fb      	strh	r3, [r7, #14]
 800204e:	e02d      	b.n	80020ac <a_mpu6050_inv_row_2_scale+0x74>
    }
    else if (row[0] < 0)        /* check row 0 */
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f993 3000 	ldrsb.w	r3, [r3]
 8002056:	2b00      	cmp	r3, #0
 8002058:	da02      	bge.n	8002060 <a_mpu6050_inv_row_2_scale+0x28>
    {
        b = 4;                  /* set 4 */
 800205a:	2304      	movs	r3, #4
 800205c:	81fb      	strh	r3, [r7, #14]
 800205e:	e025      	b.n	80020ac <a_mpu6050_inv_row_2_scale+0x74>
    }
    else if (row[1] > 0)        /* check row 1 */
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3301      	adds	r3, #1
 8002064:	f993 3000 	ldrsb.w	r3, [r3]
 8002068:	2b00      	cmp	r3, #0
 800206a:	dd02      	ble.n	8002072 <a_mpu6050_inv_row_2_scale+0x3a>
    {
        b = 1;                  /* set 1 */
 800206c:	2301      	movs	r3, #1
 800206e:	81fb      	strh	r3, [r7, #14]
 8002070:	e01c      	b.n	80020ac <a_mpu6050_inv_row_2_scale+0x74>
    }
    else if (row[1] < 0)        /* check row 1 */
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3301      	adds	r3, #1
 8002076:	f993 3000 	ldrsb.w	r3, [r3]
 800207a:	2b00      	cmp	r3, #0
 800207c:	da02      	bge.n	8002084 <a_mpu6050_inv_row_2_scale+0x4c>
    {
        b = 5;                  /* set 5 */
 800207e:	2305      	movs	r3, #5
 8002080:	81fb      	strh	r3, [r7, #14]
 8002082:	e013      	b.n	80020ac <a_mpu6050_inv_row_2_scale+0x74>
    }
    else if (row[2] > 0)        /* check row 2 */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3302      	adds	r3, #2
 8002088:	f993 3000 	ldrsb.w	r3, [r3]
 800208c:	2b00      	cmp	r3, #0
 800208e:	dd02      	ble.n	8002096 <a_mpu6050_inv_row_2_scale+0x5e>
    {
        b = 2;                  /* set 2 */
 8002090:	2302      	movs	r3, #2
 8002092:	81fb      	strh	r3, [r7, #14]
 8002094:	e00a      	b.n	80020ac <a_mpu6050_inv_row_2_scale+0x74>
    }
    else if (row[2] < 0)        /* check row 2 */
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3302      	adds	r3, #2
 800209a:	f993 3000 	ldrsb.w	r3, [r3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	da02      	bge.n	80020a8 <a_mpu6050_inv_row_2_scale+0x70>
    {
        b = 6;                  /* set 6 */
 80020a2:	2306      	movs	r3, #6
 80020a4:	81fb      	strh	r3, [r7, #14]
 80020a6:	e001      	b.n	80020ac <a_mpu6050_inv_row_2_scale+0x74>
    }
    else
    {
        b = 7;                  /* set 7 */
 80020a8:	2307      	movs	r3, #7
 80020aa:	81fb      	strh	r3, [r7, #14]
    }

    return b;                   /* return scale */
 80020ac:	89fb      	ldrh	r3, [r7, #14]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <a_mpu6050_inv_orientation_matrix_to_scalar>:
 * @param[in] *mtx points to a matrix buffer
 * @return    scale
 * @note      none
 */
static uint16_t a_mpu6050_inv_orientation_matrix_to_scalar(int8_t *mtx)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b084      	sub	sp, #16
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
    uint16_t scalar;

    scalar = a_mpu6050_inv_row_2_scale(mtx);                  /* convert the part 0 */
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffb8 	bl	8002038 <a_mpu6050_inv_row_2_scale>
 80020c8:	4603      	mov	r3, r0
 80020ca:	81fb      	strh	r3, [r7, #14]
    scalar |= a_mpu6050_inv_row_2_scale(mtx + 3) << 3;        /* convert the part 1 */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3303      	adds	r3, #3
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ffb1 	bl	8002038 <a_mpu6050_inv_row_2_scale>
 80020d6:	4603      	mov	r3, r0
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	b21a      	sxth	r2, r3
 80020dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	81fb      	strh	r3, [r7, #14]
    scalar |= a_mpu6050_inv_row_2_scale(mtx + 6) << 6;        /* convert the part 2 */
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3306      	adds	r3, #6
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ffa4 	bl	8002038 <a_mpu6050_inv_row_2_scale>
 80020f0:	4603      	mov	r3, r0
 80020f2:	019b      	lsls	r3, r3, #6
 80020f4:	b21a      	sxth	r2, r3
 80020f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	81fb      	strh	r3, [r7, #14]

    return scalar;                                            /* return the scalar */
 8002100:	89fb      	ldrh	r3, [r7, #14]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <a_mpu6050_dmp_decode_gesture>:
 * @brief     dmp decode the gesture
 * @param[in] *gesture points to a gesture buffer
 * @note      none
 */
static void a_mpu6050_dmp_decode_gesture(mpu6050_handle_t *handle, uint8_t gesture[4])
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
    uint8_t tap;
    uint8_t orient;

    orient = gesture[3] & 0xC0;                                /* set the orient */
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	3303      	adds	r3, #3
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800211e:	73fb      	strb	r3, [r7, #15]
    tap = 0x3F & gesture[3];                                   /* set the tap */
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	3303      	adds	r3, #3
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800212a:	73bb      	strb	r3, [r7, #14]
    if ((gesture[1] & MPU6050_DMP_INT_SRC_TAP) != 0)           /* check the tap output */
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	d012      	beq.n	8002160 <a_mpu6050_dmp_decode_gesture+0x56>
    {
        uint8_t direction, count;

        direction = tap >> 3;                                  /* get the direction */
 800213a:	7bbb      	ldrb	r3, [r7, #14]
 800213c:	08db      	lsrs	r3, r3, #3
 800213e:	737b      	strb	r3, [r7, #13]
        count = (tap % 8) + 1;                                 /* get the count */
 8002140:	7bbb      	ldrb	r3, [r7, #14]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	b2db      	uxtb	r3, r3
 8002148:	3301      	adds	r3, #1
 800214a:	733b      	strb	r3, [r7, #12]
        if (handle->dmp_tap_callback != NULL)                  /* check the dmp tap callback */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <a_mpu6050_dmp_decode_gesture+0x56>
        {
            handle->dmp_tap_callback(direction, count);        /* run the dmp tap callback */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	7b39      	ldrb	r1, [r7, #12]
 800215a:	7b7a      	ldrb	r2, [r7, #13]
 800215c:	4610      	mov	r0, r2
 800215e:	4798      	blx	r3
        }
    }
    if ((gesture[1] & MPU6050_DMP_INT_SRC_ORIENT) != 0)        /* check the orient output */
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <a_mpu6050_dmp_decode_gesture+0x7a>
    {
        if (handle->dmp_orient_callback != NULL)               /* check the dmp orient callback */
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	2b00      	cmp	r3, #0
 8002174:	d006      	beq.n	8002184 <a_mpu6050_dmp_decode_gesture+0x7a>
        {
            handle->dmp_orient_callback(orient >> 6);          /* run the dmp orient callback */
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	0992      	lsrs	r2, r2, #6
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	4610      	mov	r0, r2
 8002182:	4798      	blx	r3
        }
    }
}
 8002184:	bf00      	nop
 8002186:	3710      	adds	r7, #16
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <a_mpu6050_get_accel_prod_shift>:
 *             - 0 success
 *             - others test failed
 * @note       none
 */
static uint8_t a_mpu6050_get_accel_prod_shift(mpu6050_handle_t *handle, float *st_shift)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
    uint8_t res;
    uint8_t tmp[4];
    uint8_t shift_code[3];
    uint8_t i;

    res = a_mpu6050_iic_read(handle, MPU6050_REG_SELF_TEST_X, tmp, 4);      /* read the tmp */
 8002196:	f107 0210 	add.w	r2, r7, #16
 800219a:	2304      	movs	r3, #4
 800219c:	210d      	movs	r1, #13
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fdb2 	bl	8001d08 <a_mpu6050_iic_read>
 80021a4:	4603      	mov	r3, r0
 80021a6:	75bb      	strb	r3, [r7, #22]
    if (res != 0)                                                           /* check the result */
 80021a8:	7dbb      	ldrb	r3, [r7, #22]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <a_mpu6050_get_accel_prod_shift+0x26>
    {
        return 1;                                                           /* return error */
 80021ae:	2301      	movs	r3, #1
 80021b0:	e071      	b.n	8002296 <a_mpu6050_get_accel_prod_shift+0x10a>
    }

    shift_code[0] = ((tmp[0] & 0xE0) >> 3) | ((tmp[3] & 0x30) >> 4);        /* shift code 0 */
 80021b2:	7c3b      	ldrb	r3, [r7, #16]
 80021b4:	10db      	asrs	r3, r3, #3
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	f003 031c 	and.w	r3, r3, #28
 80021bc:	b25a      	sxtb	r2, r3
 80021be:	7cfb      	ldrb	r3, [r7, #19]
 80021c0:	111b      	asrs	r3, r3, #4
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	733b      	strb	r3, [r7, #12]
    shift_code[1] = ((tmp[1] & 0xE0) >> 3) | ((tmp[3] & 0x0C) >> 2);        /* shift code 1 */
 80021d2:	7c7b      	ldrb	r3, [r7, #17]
 80021d4:	10db      	asrs	r3, r3, #3
 80021d6:	b25b      	sxtb	r3, r3
 80021d8:	f003 031c 	and.w	r3, r3, #28
 80021dc:	b25a      	sxtb	r2, r3
 80021de:	7cfb      	ldrb	r3, [r7, #19]
 80021e0:	109b      	asrs	r3, r3, #2
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	b25b      	sxtb	r3, r3
 80021ea:	4313      	orrs	r3, r2
 80021ec:	b25b      	sxtb	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	737b      	strb	r3, [r7, #13]
    shift_code[2] = ((tmp[2] & 0xE0) >> 3) | (tmp[3] & 0x03);               /* shift code 2 */
 80021f2:	7cbb      	ldrb	r3, [r7, #18]
 80021f4:	10db      	asrs	r3, r3, #3
 80021f6:	b25b      	sxtb	r3, r3
 80021f8:	f003 031c 	and.w	r3, r3, #28
 80021fc:	b25a      	sxtb	r2, r3
 80021fe:	7cfb      	ldrb	r3, [r7, #19]
 8002200:	b25b      	sxtb	r3, r3
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	b25b      	sxtb	r3, r3
 8002208:	4313      	orrs	r3, r2
 800220a:	b25b      	sxtb	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 3; i++)                                                 /* 3 times */
 8002210:	2300      	movs	r3, #0
 8002212:	75fb      	strb	r3, [r7, #23]
 8002214:	e03b      	b.n	800228e <a_mpu6050_get_accel_prod_shift+0x102>
    {
        if (!shift_code[i])                                                 /* check the shift code */
 8002216:	7dfb      	ldrb	r3, [r7, #23]
 8002218:	3318      	adds	r3, #24
 800221a:	443b      	add	r3, r7
 800221c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <a_mpu6050_get_accel_prod_shift+0xa8>
        {
            st_shift[i] = 0.f;                                              /* set the st shift */
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	4413      	add	r3, r2
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	601a      	str	r2, [r3, #0]

            continue;                                                       /* continue */
 8002232:	e029      	b.n	8002288 <a_mpu6050_get_accel_prod_shift+0xfc>
        }
        st_shift[i] = 0.34f;                                                /* set the shift */
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	4413      	add	r3, r2
 800223c:	4a18      	ldr	r2, [pc, #96]	; (80022a0 <a_mpu6050_get_accel_prod_shift+0x114>)
 800223e:	601a      	str	r2, [r3, #0]
        while ((--shift_code[i]) != 0)                                      /* check the shift code */
 8002240:	e00f      	b.n	8002262 <a_mpu6050_get_accel_prod_shift+0xd6>
        {
            st_shift[i] *= 1.034f;                                          /* *1.034f */
 8002242:	7dfb      	ldrb	r3, [r7, #23]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	4413      	add	r3, r2
 800224a:	edd3 7a00 	vldr	s15, [r3]
 800224e:	7dfb      	ldrb	r3, [r7, #23]
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4413      	add	r3, r2
 8002256:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80022a4 <a_mpu6050_get_accel_prod_shift+0x118>
 800225a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800225e:	edc3 7a00 	vstr	s15, [r3]
        while ((--shift_code[i]) != 0)                                      /* check the shift code */
 8002262:	7dfb      	ldrb	r3, [r7, #23]
 8002264:	f103 0218 	add.w	r2, r3, #24
 8002268:	443a      	add	r2, r7
 800226a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800226e:	3a01      	subs	r2, #1
 8002270:	b2d1      	uxtb	r1, r2
 8002272:	f103 0218 	add.w	r2, r3, #24
 8002276:	443a      	add	r2, r7
 8002278:	f802 1c0c 	strb.w	r1, [r2, #-12]
 800227c:	3318      	adds	r3, #24
 800227e:	443b      	add	r3, r7
 8002280:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1dc      	bne.n	8002242 <a_mpu6050_get_accel_prod_shift+0xb6>
    for (i = 0; i < 3; i++)                                                 /* 3 times */
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	3301      	adds	r3, #1
 800228c:	75fb      	strb	r3, [r7, #23]
 800228e:	7dfb      	ldrb	r3, [r7, #23]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d9c0      	bls.n	8002216 <a_mpu6050_get_accel_prod_shift+0x8a>
        }
    }

    return 0;                                                               /* success return 0 */
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	3eae147b 	.word	0x3eae147b
 80022a4:	3f845a1d 	.word	0x3f845a1d

080022a8 <a_mpu6050_accel_self_test>:
 *             - 0 success
 *             - others test failed
 * @note       none
 */
static uint8_t a_mpu6050_accel_self_test(mpu6050_handle_t *handle, int32_t *bias_regular, int32_t *bias_st)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
    uint8_t j, result = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    float st_shift[3], st_shift_cust, st_shift_var;

    if (a_mpu6050_get_accel_prod_shift(handle, st_shift) != 0)               /* get accel prod shift */
 80022ba:	f107 0310 	add.w	r3, r7, #16
 80022be:	4619      	mov	r1, r3
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff ff63 	bl	800218c <a_mpu6050_get_accel_prod_shift>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <a_mpu6050_accel_self_test+0x28>
    {
        return 1;                                                            /* return error */
 80022cc:	2301      	movs	r3, #1
 80022ce:	e081      	b.n	80023d4 <a_mpu6050_accel_self_test+0x12c>
    }
    for (j = 0; j < 3; j++)                                                  /* 3 times */
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022d6:	e077      	b.n	80023c8 <a_mpu6050_accel_self_test+0x120>
    {
        st_shift_cust = labs(bias_regular[j] - bias_st[j]) / 65536.f;        /* get the st shift cust */
 80022d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	4413      	add	r3, r2
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	440b      	add	r3, r1
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bfb8      	it	lt
 80022f6:	425b      	neglt	r3, r3
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002300:	eddf 6a36 	vldr	s13, [pc, #216]	; 80023dc <a_mpu6050_accel_self_test+0x134>
 8002304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002308:	edc7 7a08 	vstr	s15, [r7, #32]
        if (fabsf(st_shift[j] - 0.0f) > 1e-6f)                               /* check the st shift */
 800230c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	3328      	adds	r3, #40	; 0x28
 8002314:	443b      	add	r3, r7
 8002316:	3b18      	subs	r3, #24
 8002318:	edd3 7a00 	vldr	s15, [r3]
 800231c:	eef0 7ae7 	vabs.f32	s15, s15
 8002320:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80023e0 <a_mpu6050_accel_self_test+0x138>
 8002324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	dd29      	ble.n	8002382 <a_mpu6050_accel_self_test+0xda>
        {
            st_shift_var = st_shift_cust / st_shift[j] - 1.f;                /* get the st shift var */
 800232e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	3328      	adds	r3, #40	; 0x28
 8002336:	443b      	add	r3, r7
 8002338:	3b18      	subs	r3, #24
 800233a:	ed93 7a00 	vldr	s14, [r3]
 800233e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800234a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800234e:	edc7 7a07 	vstr	s15, [r7, #28]
            if (fabs(st_shift_var) > 0.14f)                                  /* check the st shift var */
 8002352:	edd7 7a07 	vldr	s15, [r7, #28]
 8002356:	eef0 7ae7 	vabs.f32	s15, s15
 800235a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80023e4 <a_mpu6050_accel_self_test+0x13c>
 800235e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002366:	dd2a      	ble.n	80023be <a_mpu6050_accel_self_test+0x116>
            {
                result |= 1 << j;                                            /* flag the error */
 8002368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800236c:	2201      	movs	r2, #1
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	b25a      	sxtb	r2, r3
 8002374:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002378:	4313      	orrs	r3, r2
 800237a:	b25b      	sxtb	r3, r3
 800237c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002380:	e01d      	b.n	80023be <a_mpu6050_accel_self_test+0x116>
            }
        }
        else if ((st_shift_cust < 0.3f) || (st_shift_cust > 0.95f))          /* check the result */
 8002382:	edd7 7a08 	vldr	s15, [r7, #32]
 8002386:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80023e8 <a_mpu6050_accel_self_test+0x140>
 800238a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002392:	d408      	bmi.n	80023a6 <a_mpu6050_accel_self_test+0xfe>
 8002394:	edd7 7a08 	vldr	s15, [r7, #32]
 8002398:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80023ec <a_mpu6050_accel_self_test+0x144>
 800239c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a4:	dd0b      	ble.n	80023be <a_mpu6050_accel_self_test+0x116>
        {
            result |= 1 << j;                                                /* flag the error */
 80023a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023aa:	2201      	movs	r2, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	b25a      	sxtb	r2, r3
 80023b2:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80023b6:	4313      	orrs	r3, r2
 80023b8:	b25b      	sxtb	r3, r3
 80023ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (j = 0; j < 3; j++)                                                  /* 3 times */
 80023be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023c2:	3301      	adds	r3, #1
 80023c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80023c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d983      	bls.n	80022d8 <a_mpu6050_accel_self_test+0x30>
        {
                                                                             /* do nothing */
        }
    }

    return result;                                                           /* return the result */
 80023d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3728      	adds	r7, #40	; 0x28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	47800000 	.word	0x47800000
 80023e0:	358637bd 	.word	0x358637bd
 80023e4:	3e0f5c29 	.word	0x3e0f5c29
 80023e8:	3e99999a 	.word	0x3e99999a
 80023ec:	3f733333 	.word	0x3f733333

080023f0 <a_mpu6050_gyro_self_test>:
 *             - 0 success
 *             - others test failed
 * @note       none
 */
static uint8_t a_mpu6050_gyro_self_test(mpu6050_handle_t *handle, int32_t *bias_regular, int32_t *bias_st)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
    uint8_t res;
    uint8_t j, result = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t tmp[3];
    float st_shift, st_shift_cust, st_shift_var;

    res = a_mpu6050_iic_read(handle, MPU6050_REG_SELF_TEST_X, tmp, 3);       /* read tmp */
 8002402:	f107 0210 	add.w	r2, r7, #16
 8002406:	2303      	movs	r3, #3
 8002408:	210d      	movs	r1, #13
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f7ff fc7c 	bl	8001d08 <a_mpu6050_iic_read>
 8002410:	4603      	mov	r3, r0
 8002412:	77fb      	strb	r3, [r7, #31]
    if (res != 0)                                                            /* check the result */
 8002414:	7ffb      	ldrb	r3, [r7, #31]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <a_mpu6050_gyro_self_test+0x2e>
    {
        return 1;                                                            /* return error */
 800241a:	2301      	movs	r3, #1
 800241c:	e0a1      	b.n	8002562 <a_mpu6050_gyro_self_test+0x172>
    }

    tmp[0] &= 0x1F;                                                          /* set part 0 */
 800241e:	7c3b      	ldrb	r3, [r7, #16]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	b2db      	uxtb	r3, r3
 8002426:	743b      	strb	r3, [r7, #16]
    tmp[1] &= 0x1F;                                                          /* set part 1 */
 8002428:	7c7b      	ldrb	r3, [r7, #17]
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	b2db      	uxtb	r3, r3
 8002430:	747b      	strb	r3, [r7, #17]
    tmp[2] &= 0x1F;                                                          /* set part 2 */
 8002432:	7cbb      	ldrb	r3, [r7, #18]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	b2db      	uxtb	r3, r3
 800243a:	74bb      	strb	r3, [r7, #18]
    for (j = 0; j < 3; j++)                                                  /* 3 times */
 800243c:	2300      	movs	r3, #0
 800243e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002442:	e087      	b.n	8002554 <a_mpu6050_gyro_self_test+0x164>
    {
        st_shift_cust = labs(bias_regular[j] - bias_st[j]) / 65536.f;        /* get the st shift cust */
 8002444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4413      	add	r3, r2
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	440b      	add	r3, r1
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	bfb8      	it	lt
 8002462:	425b      	neglt	r3, r3
 8002464:	ee07 3a90 	vmov	s15, r3
 8002468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800246c:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800256c <a_mpu6050_gyro_self_test+0x17c>
 8002470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002474:	edc7 7a06 	vstr	s15, [r7, #24]
        if (tmp[j] != 0)                                                     /* check the zero */
 8002478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800247c:	3328      	adds	r3, #40	; 0x28
 800247e:	443b      	add	r3, r7
 8002480:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d042      	beq.n	800250e <a_mpu6050_gyro_self_test+0x11e>
        {
            st_shift = 3275.f / (32768 / 250);                               /* set the shift */
 8002488:	4b39      	ldr	r3, [pc, #228]	; (8002570 <a_mpu6050_gyro_self_test+0x180>)
 800248a:	623b      	str	r3, [r7, #32]
            while ((--tmp[j]) != 0)                                          /* check the zero */
 800248c:	e007      	b.n	800249e <a_mpu6050_gyro_self_test+0xae>
            {
                st_shift *= 1.046f;                                          /* *1.046f */
 800248e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002492:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002574 <a_mpu6050_gyro_self_test+0x184>
 8002496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249a:	edc7 7a08 	vstr	s15, [r7, #32]
            while ((--tmp[j]) != 0)                                          /* check the zero */
 800249e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80024a6:	443a      	add	r2, r7
 80024a8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80024ac:	3a01      	subs	r2, #1
 80024ae:	b2d1      	uxtb	r1, r2
 80024b0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80024b4:	443a      	add	r2, r7
 80024b6:	f802 1c18 	strb.w	r1, [r2, #-24]
 80024ba:	3328      	adds	r3, #40	; 0x28
 80024bc:	443b      	add	r3, r7
 80024be:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1e3      	bne.n	800248e <a_mpu6050_gyro_self_test+0x9e>
            }
            st_shift_var = st_shift_cust / st_shift - 1.f;                   /* set the shift var */
 80024c6:	edd7 6a06 	vldr	s13, [r7, #24]
 80024ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80024ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024da:	edc7 7a05 	vstr	s15, [r7, #20]
            if (fabs(st_shift_var) > 0.14f)                                  /* check the var */
 80024de:	edd7 7a05 	vldr	s15, [r7, #20]
 80024e2:	eef0 7ae7 	vabs.f32	s15, s15
 80024e6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002578 <a_mpu6050_gyro_self_test+0x188>
 80024ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f2:	dd2a      	ble.n	800254a <a_mpu6050_gyro_self_test+0x15a>
            {
                result |= 1 << j;                                            /* flag the error */
 80024f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024f8:	2201      	movs	r2, #1
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	b25a      	sxtb	r2, r3
 8002500:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002504:	4313      	orrs	r3, r2
 8002506:	b25b      	sxtb	r3, r3
 8002508:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800250c:	e01d      	b.n	800254a <a_mpu6050_gyro_self_test+0x15a>
            }
        }
        else if ((st_shift_cust < 10.0f) || (st_shift_cust > 105.0f))        /* check the result */
 800250e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002512:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800251a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251e:	d408      	bmi.n	8002532 <a_mpu6050_gyro_self_test+0x142>
 8002520:	edd7 7a06 	vldr	s15, [r7, #24]
 8002524:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800257c <a_mpu6050_gyro_self_test+0x18c>
 8002528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800252c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002530:	dd0b      	ble.n	800254a <a_mpu6050_gyro_self_test+0x15a>
        {
            result |= 1 << j;                                                /* flag the error */
 8002532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002536:	2201      	movs	r2, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	b25a      	sxtb	r2, r3
 800253e:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8002542:	4313      	orrs	r3, r2
 8002544:	b25b      	sxtb	r3, r3
 8002546:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    for (j = 0; j < 3; j++)                                                  /* 3 times */
 800254a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800254e:	3301      	adds	r3, #1
 8002550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002558:	2b02      	cmp	r3, #2
 800255a:	f67f af73 	bls.w	8002444 <a_mpu6050_gyro_self_test+0x54>
        {
                                                                             /* do nothing */
        }
    }

    return result;                                                           /* return the result */
 800255e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8002562:	4618      	mov	r0, r3
 8002564:	3728      	adds	r7, #40	; 0x28
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	47800000 	.word	0x47800000
 8002570:	41c80000 	.word	0x41c80000
 8002574:	3f85e354 	.word	0x3f85e354
 8002578:	3e0f5c29 	.word	0x3e0f5c29
 800257c:	42d20000 	.word	0x42d20000

08002580 <a_mpu6050_get_st_biases>:
 * @note       none
 */
static uint8_t a_mpu6050_get_st_biases(mpu6050_handle_t *handle,
                                       int32_t gyro_offset[3], int32_t accel_offset[3],
                                       uint8_t hw_test_enable)
{
 8002580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002584:	b0b2      	sub	sp, #200	; 0xc8
 8002586:	af00      	add	r7, sp, #0
 8002588:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800258c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8002590:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002594:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    uint16_t cnt;
    uint16_t pack_cnt;
    uint16_t i;
    uint8_t data[12];

    data[0] = 0x01;                                                                                 /* set 0x01 */
 8002598:	2301      	movs	r3, #1
 800259a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
    data[1] = 0x00;                                                                                 /* set 0x00 */
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, data, 2);                             /* write pwr mgmt1 */
 80025a4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80025a8:	2302      	movs	r3, #2
 80025aa:	216b      	movs	r1, #107	; 0x6b
 80025ac:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80025b0:	f7ff fbc6 	bl	8001d40 <a_mpu6050_iic_write>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 80025ba:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <a_mpu6050_get_st_biases+0x46>
    {
        return 1;                                                                                   /* return error */
 80025c2:	2301      	movs	r3, #1
 80025c4:	e344      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    handle->delay_ms(200);                                                                          /* delay 200ms */
 80025c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	20c8      	movs	r0, #200	; 0xc8
 80025ce:	4798      	blx	r3
    data[0] = 0;                                                                                    /* set 0 */
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_ENABLE, data, 1);                             /* write int enable */
 80025d6:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80025da:	2301      	movs	r3, #1
 80025dc:	2138      	movs	r1, #56	; 0x38
 80025de:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80025e2:	f7ff fbad 	bl	8001d40 <a_mpu6050_iic_write>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 80025ec:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <a_mpu6050_get_st_biases+0x78>
    {
        return 1;                                                                                   /* return error */
 80025f4:	2301      	movs	r3, #1
 80025f6:	e32b      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    res = a_mpu6050_iic_write(handle, MPU6050_REG_FIFO_EN, data, 1);                                /* write the fifo enable */
 80025f8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80025fc:	2301      	movs	r3, #1
 80025fe:	2123      	movs	r1, #35	; 0x23
 8002600:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002604:	f7ff fb9c 	bl	8001d40 <a_mpu6050_iic_write>
 8002608:	4603      	mov	r3, r0
 800260a:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 800260e:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <a_mpu6050_get_st_biases+0x9a>
    {
        return 1;                                                                                   /* return error */
 8002616:	2301      	movs	r3, #1
 8002618:	e31a      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, data, 1);                             /* write the pwr mgmt 1 */
 800261a:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800261e:	2301      	movs	r3, #1
 8002620:	216b      	movs	r1, #107	; 0x6b
 8002622:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002626:	f7ff fb8b 	bl	8001d40 <a_mpu6050_iic_write>
 800262a:	4603      	mov	r3, r0
 800262c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 8002630:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <a_mpu6050_get_st_biases+0xbc>
    {
        return 1;                                                                                   /* return error */
 8002638:	2301      	movs	r3, #1
 800263a:	e309      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    res = a_mpu6050_iic_write(handle, MPU6050_REG_I2C_MST_CTRL, data, 1);                           /* write the i2c mst ctrl */
 800263c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002640:	2301      	movs	r3, #1
 8002642:	2124      	movs	r1, #36	; 0x24
 8002644:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002648:	f7ff fb7a 	bl	8001d40 <a_mpu6050_iic_write>
 800264c:	4603      	mov	r3, r0
 800264e:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 8002652:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <a_mpu6050_get_st_biases+0xde>
    {
        return 1;                                                                                   /* return error */
 800265a:	2301      	movs	r3, #1
 800265c:	e2f8      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, data, 1);                              /* write the user ctrl */
 800265e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002662:	2301      	movs	r3, #1
 8002664:	216a      	movs	r1, #106	; 0x6a
 8002666:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800266a:	f7ff fb69 	bl	8001d40 <a_mpu6050_iic_write>
 800266e:	4603      	mov	r3, r0
 8002670:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 8002674:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <a_mpu6050_get_st_biases+0x100>
    {
        return 1;                                                                                   /* return error */
 800267c:	2301      	movs	r3, #1
 800267e:	e2e7      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }

    data[0] = 1 << 3 | 1 << 2;                                                                      /* set fifo and dmp reset */
 8002680:	230c      	movs	r3, #12
 8002682:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, data, 1);                              /* write user ctrl */
 8002686:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800268a:	2301      	movs	r3, #1
 800268c:	216a      	movs	r1, #106	; 0x6a
 800268e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002692:	f7ff fb55 	bl	8001d40 <a_mpu6050_iic_write>
 8002696:	4603      	mov	r3, r0
 8002698:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 800269c:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <a_mpu6050_get_st_biases+0x128>
    {
        return 1;                                                                                   /* return error */
 80026a4:	2301      	movs	r3, #1
 80026a6:	e2d3      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    handle->delay_ms(15);                                                                           /* delay 15 ms */
 80026a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ac:	695b      	ldr	r3, [r3, #20]
 80026ae:	200f      	movs	r0, #15
 80026b0:	4798      	blx	r3
    data[0] = 0x01;                                                                                 /* set 0x01 */
 80026b2:	2301      	movs	r3, #1
 80026b4:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
    res = a_mpu6050_iic_write(handle, MPU6050_REG_CONFIG, data, 1);                                 /* write config */
 80026b8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80026bc:	2301      	movs	r3, #1
 80026be:	211a      	movs	r1, #26
 80026c0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80026c4:	f7ff fb3c 	bl	8001d40 <a_mpu6050_iic_write>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 80026ce:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <a_mpu6050_get_st_biases+0x15a>
    {
        return 1;                                                                                   /* return error */
 80026d6:	2301      	movs	r3, #1
 80026d8:	e2ba      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    data[0] = 0x00;                                                                                 /* set 0 */
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
    res = a_mpu6050_iic_write(handle, MPU6050_REG_SMPRT_DIV, data, 1);                              /* write div */
 80026e0:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80026e4:	2301      	movs	r3, #1
 80026e6:	2119      	movs	r1, #25
 80026e8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80026ec:	f7ff fb28 	bl	8001d40 <a_mpu6050_iic_write>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 80026f6:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <a_mpu6050_get_st_biases+0x182>
    {
        return 1;                                                                                   /* return error */
 80026fe:	2301      	movs	r3, #1
 8002700:	e2a6      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    if (hw_test_enable != 0)                                                                        /* if enable */
 8002702:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <a_mpu6050_get_st_biases+0x192>
    {
        data[0] = 0x00 | 0xE0;                                                                      /* set 250dps and test */
 800270a:	23e0      	movs	r3, #224	; 0xe0
 800270c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8002710:	e002      	b.n	8002718 <a_mpu6050_get_st_biases+0x198>
    }
    else
    {
        data[0] = 0x00;                                                                             /* set 250dps */
 8002712:	2300      	movs	r3, #0
 8002714:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
    }
    res = a_mpu6050_iic_write(handle, MPU6050_REG_GYRO_CONFIG, data, 1);                            /* read the gyro config */
 8002718:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800271c:	2301      	movs	r3, #1
 800271e:	211b      	movs	r1, #27
 8002720:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002724:	f7ff fb0c 	bl	8001d40 <a_mpu6050_iic_write>
 8002728:	4603      	mov	r3, r0
 800272a:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 800272e:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <a_mpu6050_get_st_biases+0x1ba>
    {
        return 1;                                                                                   /* return error */
 8002736:	2301      	movs	r3, #1
 8002738:	e28a      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    if (hw_test_enable != 0)                                                                        /* if enable */
 800273a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <a_mpu6050_get_st_biases+0x1ca>
    {
        data[0] = 0x18 | 0xE0;                                                                      /* enable 2g and test */
 8002742:	23f8      	movs	r3, #248	; 0xf8
 8002744:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8002748:	e002      	b.n	8002750 <a_mpu6050_get_st_biases+0x1d0>
    }
    else
    {
        data[0] = 0x18;                                                                             /* enable 2g */
 800274a:	2318      	movs	r3, #24
 800274c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
    }
    res = a_mpu6050_iic_write(handle, MPU6050_REG_ACCEL_CONFIG, data, 1);                           /* read the accel config */
 8002750:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002754:	2301      	movs	r3, #1
 8002756:	211c      	movs	r1, #28
 8002758:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800275c:	f7ff faf0 	bl	8001d40 <a_mpu6050_iic_write>
 8002760:	4603      	mov	r3, r0
 8002762:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 8002766:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <a_mpu6050_get_st_biases+0x1f2>
    {
        return 1;                                                                                   /* return error */
 800276e:	2301      	movs	r3, #1
 8002770:	e26e      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    if (hw_test_enable != 0)                                                                        /* if enable */
 8002772:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <a_mpu6050_get_st_biases+0x204>
    {
        handle->delay_ms(200);                                                                      /* delay 200ms */
 800277a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	20c8      	movs	r0, #200	; 0xc8
 8002782:	4798      	blx	r3
    }

    data[0] = 1 << 6;                                                                               /* enable fifo */
 8002784:	2340      	movs	r3, #64	; 0x40
 8002786:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, data, 1);                              /* write user ctrl */
 800278a:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800278e:	2301      	movs	r3, #1
 8002790:	216a      	movs	r1, #106	; 0x6a
 8002792:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002796:	f7ff fad3 	bl	8001d40 <a_mpu6050_iic_write>
 800279a:	4603      	mov	r3, r0
 800279c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 80027a0:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <a_mpu6050_get_st_biases+0x22c>
    {
        return 1;                                                                                   /* return error */
 80027a8:	2301      	movs	r3, #1
 80027aa:	e251      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    data[0] = 0x78;                                                                                 /* enable xyz */
 80027ac:	2378      	movs	r3, #120	; 0x78
 80027ae:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
    res = a_mpu6050_iic_write(handle, MPU6050_REG_FIFO_EN, data, 1);                                /* write fifo enable */
 80027b2:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80027b6:	2301      	movs	r3, #1
 80027b8:	2123      	movs	r1, #35	; 0x23
 80027ba:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80027be:	f7ff fabf 	bl	8001d40 <a_mpu6050_iic_write>
 80027c2:	4603      	mov	r3, r0
 80027c4:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 80027c8:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <a_mpu6050_get_st_biases+0x254>
    {
        return 1;                                                                                   /* return error */
 80027d0:	2301      	movs	r3, #1
 80027d2:	e23d      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    handle->delay_ms(50);                                                                           /* delay 50 ms */
 80027d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	2032      	movs	r0, #50	; 0x32
 80027dc:	4798      	blx	r3
    data[0] = 0x00;                                                                                 /* set disable */
 80027de:	2300      	movs	r3, #0
 80027e0:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
    res = a_mpu6050_iic_write(handle, MPU6050_REG_FIFO_EN, data, 1);                                /* write fifo enable */
 80027e4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80027e8:	2301      	movs	r3, #1
 80027ea:	2123      	movs	r1, #35	; 0x23
 80027ec:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80027f0:	f7ff faa6 	bl	8001d40 <a_mpu6050_iic_write>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 80027fa:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <a_mpu6050_get_st_biases+0x286>
    {
        return 1;                                                                                   /* return error */
 8002802:	2301      	movs	r3, #1
 8002804:	e224      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_COUNTH, data, 2);                             /* read fifo counter */
 8002806:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800280a:	2302      	movs	r3, #2
 800280c:	2172      	movs	r1, #114	; 0x72
 800280e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002812:	f7ff fa79 	bl	8001d08 <a_mpu6050_iic_read>
 8002816:	4603      	mov	r3, r0
 8002818:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
    if (res != 0)                                                                                   /* check the result */
 800281c:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <a_mpu6050_get_st_biases+0x2a8>
    {
        return 1;                                                                                   /* return error */
 8002824:	2301      	movs	r3, #1
 8002826:	e213      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
    }
    cnt = ((uint16_t)data[0] << 8) | data[1];                                                       /* set the counter */
 8002828:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	b21a      	sxth	r2, r3
 8002830:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8002834:	b21b      	sxth	r3, r3
 8002836:	4313      	orrs	r3, r2
 8002838:	b21b      	sxth	r3, r3
 800283a:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
    pack_cnt = cnt / 12;                                                                            /* set the packet counter */
 800283e:	f8b7 20c2 	ldrh.w	r2, [r7, #194]	; 0xc2
 8002842:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <a_mpu6050_get_st_biases+0x334>)
 8002844:	fba3 2302 	umull	r2, r3, r3, r2
 8002848:	08db      	lsrs	r3, r3, #3
 800284a:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

    gyro_offset[0] = 0;                                                                             /* gyro offset 0 */
 800284e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002852:	2300      	movs	r3, #0
 8002854:	6013      	str	r3, [r2, #0]
    gyro_offset[1] = 0;                                                                             /* gyro offset 1 */
 8002856:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800285a:	1d1a      	adds	r2, r3, #4
 800285c:	2300      	movs	r3, #0
 800285e:	6013      	str	r3, [r2, #0]
    gyro_offset[2] = 0;                                                                             /* gyro offset 2 */
 8002860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002864:	f103 0208 	add.w	r2, r3, #8
 8002868:	2300      	movs	r3, #0
 800286a:	6013      	str	r3, [r2, #0]
    accel_offset[0] = 0;                                                                            /* accel offset 0 */
 800286c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002870:	2300      	movs	r3, #0
 8002872:	6013      	str	r3, [r2, #0]
    accel_offset[1] = 0;                                                                            /* accel offset 1 */
 8002874:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002878:	1d1a      	adds	r2, r3, #4
 800287a:	2300      	movs	r3, #0
 800287c:	6013      	str	r3, [r2, #0]
    accel_offset[2] = 0;                                                                            /* accel offset 2 */
 800287e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002882:	f103 0208 	add.w	r2, r3, #8
 8002886:	2300      	movs	r3, #0
 8002888:	6013      	str	r3, [r2, #0]
    for (i = 0; i < pack_cnt; i++)                                                                  /* packet counter */
 800288a:	2300      	movs	r3, #0
 800288c:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8002890:	e09d      	b.n	80029ce <a_mpu6050_get_st_biases+0x44e>
    {
        int16_t accel_cur[3];
        int16_t gyro_cur[3];

        res = a_mpu6050_iic_read(handle, MPU6050_REG_R_W, data, 12);                                /* read data */
 8002892:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002896:	230c      	movs	r3, #12
 8002898:	2174      	movs	r1, #116	; 0x74
 800289a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800289e:	f7ff fa33 	bl	8001d08 <a_mpu6050_iic_read>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
        if (res != 0)                                                                               /* check the result */
 80028a8:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <a_mpu6050_get_st_biases+0x338>
        {
            return 1;                                                                               /* return error */
 80028b0:	2301      	movs	r3, #1
 80028b2:	e1cd      	b.n	8002c50 <a_mpu6050_get_st_biases+0x6d0>
 80028b4:	aaaaaaab 	.word	0xaaaaaaab
        }

        accel_cur[0] = ((int16_t)data[0] << 8) | data[1];                                           /* accel cur 0 */
 80028b8:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	b21a      	sxth	r2, r3
 80028c0:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80028c4:	b21b      	sxth	r3, r3
 80028c6:	4313      	orrs	r3, r2
 80028c8:	b21b      	sxth	r3, r3
 80028ca:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
        accel_cur[1] = ((int16_t)data[2] << 8) | data[3];                                           /* accel cur 1 */
 80028ce:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	b21a      	sxth	r2, r3
 80028d6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80028da:	b21b      	sxth	r3, r3
 80028dc:	4313      	orrs	r3, r2
 80028de:	b21b      	sxth	r3, r3
 80028e0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
        accel_cur[2] = ((int16_t)data[4] << 8) | data[5];                                           /* accel cur 2 */
 80028e4:	f897 30b8 	ldrb.w	r3, [r7, #184]	; 0xb8
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	b21a      	sxth	r2, r3
 80028ec:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 80028f0:	b21b      	sxth	r3, r3
 80028f2:	4313      	orrs	r3, r2
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
        accel_offset[0] += (int32_t)accel_cur[0];                                                   /* accel offset 0 */
 80028fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8002904:	441a      	add	r2, r3
 8002906:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800290a:	601a      	str	r2, [r3, #0]
        accel_offset[1] += (int32_t)accel_cur[1];                                                   /* accel offset 1 */
 800290c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002910:	3304      	adds	r3, #4
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8002918:	4618      	mov	r0, r3
 800291a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800291e:	1d1a      	adds	r2, r3, #4
 8002920:	180b      	adds	r3, r1, r0
 8002922:	6013      	str	r3, [r2, #0]
        accel_offset[2] += (int32_t)accel_cur[2];                                                   /* accel offset 2 */
 8002924:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002928:	3308      	adds	r3, #8
 800292a:	6819      	ldr	r1, [r3, #0]
 800292c:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8002930:	4618      	mov	r0, r3
 8002932:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002936:	f103 0208 	add.w	r2, r3, #8
 800293a:	180b      	adds	r3, r1, r0
 800293c:	6013      	str	r3, [r2, #0]
        gyro_cur[0] = (((int16_t)data[6] << 8) | data[7]);                                          /* gyro cur 0 */
 800293e:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	b21a      	sxth	r2, r3
 8002946:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800294a:	b21b      	sxth	r3, r3
 800294c:	4313      	orrs	r3, r2
 800294e:	b21b      	sxth	r3, r3
 8002950:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
        gyro_cur[1] = (((int16_t)data[8] << 8) | data[9]);                                          /* gyro cur 1 */
 8002954:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	b21a      	sxth	r2, r3
 800295c:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8002960:	b21b      	sxth	r3, r3
 8002962:	4313      	orrs	r3, r2
 8002964:	b21b      	sxth	r3, r3
 8002966:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
        gyro_cur[2] = (((int16_t)data[10] << 8) | data[11]);                                        /* gyro cur 2 */
 800296a:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	b21a      	sxth	r2, r3
 8002972:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8002976:	b21b      	sxth	r3, r3
 8002978:	4313      	orrs	r3, r2
 800297a:	b21b      	sxth	r3, r3
 800297c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        gyro_offset[0] += (int32_t)gyro_cur[0];                                                     /* gyro offset 0 */
 8002980:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800298a:	441a      	add	r2, r3
 800298c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002990:	601a      	str	r2, [r3, #0]
        gyro_offset[1] += (int32_t)gyro_cur[1];                                                     /* gyro offset 1 */
 8002992:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002996:	3304      	adds	r3, #4
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 800299e:	4618      	mov	r0, r3
 80029a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029a4:	1d1a      	adds	r2, r3, #4
 80029a6:	180b      	adds	r3, r1, r0
 80029a8:	6013      	str	r3, [r2, #0]
        gyro_offset[2] += (int32_t)gyro_cur[2];                                                     /* gyro offset 2 */
 80029aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029ae:	3308      	adds	r3, #8
 80029b0:	6819      	ldr	r1, [r3, #0]
 80029b2:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	; 0xa8
 80029b6:	4618      	mov	r0, r3
 80029b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029bc:	f103 0208 	add.w	r2, r3, #8
 80029c0:	180b      	adds	r3, r1, r0
 80029c2:	6013      	str	r3, [r2, #0]
    for (i = 0; i < pack_cnt; i++)                                                                  /* packet counter */
 80029c4:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 80029c8:	3301      	adds	r3, #1
 80029ca:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80029ce:	f8b7 20c6 	ldrh.w	r2, [r7, #198]	; 0xc6
 80029d2:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 80029d6:	429a      	cmp	r2, r3
 80029d8:	f4ff af5b 	bcc.w	8002892 <a_mpu6050_get_st_biases+0x312>
    }

    gyro_offset[0] = (int32_t)(((int64_t)gyro_offset[0] << 16) / (32768 / 250) / pack_cnt);         /* set the gyro offset 0 */
 80029dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	17da      	asrs	r2, r3, #31
 80029e4:	461c      	mov	r4, r3
 80029e6:	4615      	mov	r5, r2
 80029e8:	1423      	asrs	r3, r4, #16
 80029ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029ee:	0423      	lsls	r3, r4, #16
 80029f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029f4:	f04f 0283 	mov.w	r2, #131	; 0x83
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8002a00:	f7fe f902 	bl	8000c08 <__aeabi_ldivmod>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002a10:	2200      	movs	r2, #0
 8002a12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a16:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002a1a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002a1e:	f7fe f8f3 	bl	8000c08 <__aeabi_ldivmod>
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a2a:	601a      	str	r2, [r3, #0]
    gyro_offset[1] = (int32_t)(((int64_t)gyro_offset[1] << 16) / (32768 / 250) / pack_cnt);         /* set the gyro offset 1 */
 8002a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a30:	3304      	adds	r3, #4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	17da      	asrs	r2, r3, #31
 8002a36:	4698      	mov	r8, r3
 8002a38:	4691      	mov	r9, r2
 8002a3a:	ea4f 4328 	mov.w	r3, r8, asr #16
 8002a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a40:	ea4f 4308 	mov.w	r3, r8, lsl #16
 8002a44:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a46:	f04f 0283 	mov.w	r2, #131	; 0x83
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002a52:	f7fe f8d9 	bl	8000c08 <__aeabi_ldivmod>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002a62:	2200      	movs	r2, #0
 8002a64:	673b      	str	r3, [r7, #112]	; 0x70
 8002a66:	677a      	str	r2, [r7, #116]	; 0x74
 8002a68:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a6c:	f7fe f8cc 	bl	8000c08 <__aeabi_ldivmod>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4610      	mov	r0, r2
 8002a76:	4619      	mov	r1, r3
 8002a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a7c:	1d1a      	adds	r2, r3, #4
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6013      	str	r3, [r2, #0]
    gyro_offset[2] = (int32_t)(((int64_t)gyro_offset[2] << 16) / (32768 / 250) / pack_cnt);         /* set the gyro offset 2 */
 8002a82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a86:	3308      	adds	r3, #8
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	17da      	asrs	r2, r3, #31
 8002a8c:	469a      	mov	sl, r3
 8002a8e:	4693      	mov	fp, r2
 8002a90:	ea4f 432a 	mov.w	r3, sl, asr #16
 8002a94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a96:	ea4f 430a 	mov.w	r3, sl, lsl #16
 8002a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a9c:	f04f 0283 	mov.w	r2, #131	; 0x83
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002aa8:	f7fe f8ae 	bl	8000c08 <__aeabi_ldivmod>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002ab8:	2200      	movs	r2, #0
 8002aba:	663b      	str	r3, [r7, #96]	; 0x60
 8002abc:	667a      	str	r2, [r7, #100]	; 0x64
 8002abe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002ac2:	f7fe f8a1 	bl	8000c08 <__aeabi_ldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4610      	mov	r0, r2
 8002acc:	4619      	mov	r1, r3
 8002ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ad2:	f103 0208 	add.w	r2, r3, #8
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	6013      	str	r3, [r2, #0]
    accel_offset[0] = (int32_t)(((int64_t)accel_offset[0] << 16) / (32768 / 16) / pack_cnt);        /* set the accel offset 0 */
 8002ada:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	17da      	asrs	r2, r3, #31
 8002ae2:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ae4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ae6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8002aea:	460b      	mov	r3, r1
 8002aec:	141b      	asrs	r3, r3, #16
 8002aee:	657b      	str	r3, [r7, #84]	; 0x54
 8002af0:	460b      	mov	r3, r1
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	653b      	str	r3, [r7, #80]	; 0x50
 8002af6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	da08      	bge.n	8002b10 <a_mpu6050_get_st_biases+0x590>
 8002afe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002b02:	1851      	adds	r1, r2, r1
 8002b04:	6139      	str	r1, [r7, #16]
 8002b06:	f143 0300 	adc.w	r3, r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b10:	f04f 0000 	mov.w	r0, #0
 8002b14:	f04f 0100 	mov.w	r1, #0
 8002b18:	0ad0      	lsrs	r0, r2, #11
 8002b1a:	ea40 5043 	orr.w	r0, r0, r3, lsl #21
 8002b1e:	12d9      	asrs	r1, r3, #11
 8002b20:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002b24:	2200      	movs	r2, #0
 8002b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b28:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002b2a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002b2e:	f7fe f86b 	bl	8000c08 <__aeabi_ldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b3a:	601a      	str	r2, [r3, #0]
    accel_offset[1] = (int32_t)(((int64_t)accel_offset[1] << 16) / (32768 / 16) / pack_cnt);        /* set the accel offset 1 */
 8002b3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b40:	3304      	adds	r3, #4
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	17da      	asrs	r2, r3, #31
 8002b46:	643b      	str	r3, [r7, #64]	; 0x40
 8002b48:	647a      	str	r2, [r7, #68]	; 0x44
 8002b4a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002b4e:	460b      	mov	r3, r1
 8002b50:	141b      	asrs	r3, r3, #16
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b54:	460b      	mov	r3, r1
 8002b56:	041b      	lsls	r3, r3, #16
 8002b58:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b5a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002b5e:	2900      	cmp	r1, #0
 8002b60:	da08      	bge.n	8002b74 <a_mpu6050_get_st_biases+0x5f4>
 8002b62:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002b66:	18c3      	adds	r3, r0, r3
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	f141 0300 	adc.w	r3, r1, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	0ac2      	lsrs	r2, r0, #11
 8002b7e:	ea42 5241 	orr.w	r2, r2, r1, lsl #21
 8002b82:	12cb      	asrs	r3, r1, #11
 8002b84:	4610      	mov	r0, r2
 8002b86:	4619      	mov	r1, r3
 8002b88:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b90:	637a      	str	r2, [r7, #52]	; 0x34
 8002b92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b96:	f7fe f837 	bl	8000c08 <__aeabi_ldivmod>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	4602      	mov	r2, r0
 8002baa:	601a      	str	r2, [r3, #0]
    accel_offset[2] = (int32_t)(((int64_t)accel_offset[2] << 16) / (32768 / 16) / pack_cnt);        /* set the accel offset 2 */
 8002bac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	17da      	asrs	r2, r3, #31
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	141b      	asrs	r3, r3, #16
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	041b      	lsls	r3, r3, #16
 8002bc8:	623b      	str	r3, [r7, #32]
 8002bca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	da08      	bge.n	8002be4 <a_mpu6050_get_st_biases+0x664>
 8002bd2:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002bd6:	1851      	adds	r1, r2, r1
 8002bd8:	6039      	str	r1, [r7, #0]
 8002bda:	f143 0300 	adc.w	r3, r3, #0
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002be4:	f04f 0000 	mov.w	r0, #0
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	0ad0      	lsrs	r0, r2, #11
 8002bee:	ea40 5043 	orr.w	r0, r0, r3, lsl #21
 8002bf2:	12d9      	asrs	r1, r3, #11
 8002bf4:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	61fa      	str	r2, [r7, #28]
 8002bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c02:	f7fe f801 	bl	8000c08 <__aeabi_ldivmod>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c12:	3308      	adds	r3, #8
 8002c14:	4602      	mov	r2, r0
 8002c16:	601a      	str	r2, [r3, #0]
    if (accel_offset[2] > 0L)                                                                       /* check the accel offset */
 8002c18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	dd0a      	ble.n	8002c3a <a_mpu6050_get_st_biases+0x6ba>
    {
        accel_offset[2] -= 65536L;                                                                  /* -65536 */
 8002c24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c28:	3308      	adds	r3, #8
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c30:	3308      	adds	r3, #8
 8002c32:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e009      	b.n	8002c4e <a_mpu6050_get_st_biases+0x6ce>
    }
    else
    {
        accel_offset[2] += 65536L;                                                                  /* +65536 */
 8002c3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c3e:	3308      	adds	r3, #8
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c46:	3308      	adds	r3, #8
 8002c48:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8002c4c:	601a      	str	r2, [r3, #0]
    }

    return 0;                                                                                       /* success return 0 */
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	37c8      	adds	r7, #200	; 0xc8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5a:	bf00      	nop

08002c5c <mpu6050_dmp_load_firmware>:
 *            - 5 code compare error
 *            - 6 set program start failed
 * @note      none
 */
uint8_t mpu6050_dmp_load_firmware(mpu6050_handle_t *handle)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b08b      	sub	sp, #44	; 0x2c
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
    uint16_t size;
    uint16_t this_write;
    uint8_t tmp[2];
    uint8_t cur[16];

    if (handle == NULL)                                                                  /* check handle */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <mpu6050_dmp_load_firmware+0x12>
    {
        return 2;                                                                        /* return error */
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e07c      	b.n	8002d68 <mpu6050_dmp_load_firmware+0x10c>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d001      	beq.n	8002c7c <mpu6050_dmp_load_firmware+0x20>
    {
        return 3;                                                                        /* return error */
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e075      	b.n	8002d68 <mpu6050_dmp_load_firmware+0x10c>
    }
    if (handle->dmp_inited != 0)                                                         /* check dmp initialization */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <mpu6050_dmp_load_firmware+0x36>
    {
        handle->debug_print("mpu6050: dmp is running.\n");                               /* dmp is running */
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	4839      	ldr	r0, [pc, #228]	; (8002d70 <mpu6050_dmp_load_firmware+0x114>)
 8002c8c:	4798      	blx	r3

        return 4;                                                                        /* return error */
 8002c8e:	2304      	movs	r3, #4
 8002c90:	e06a      	b.n	8002d68 <mpu6050_dmp_load_firmware+0x10c>
    }

    size = MPU6050_DMP_CODE_SIZE;                                                        /* set the code size */
 8002c92:	f640 33f6 	movw	r3, #3062	; 0xbf6
 8002c96:	84bb      	strh	r3, [r7, #36]	; 0x24
    for (i = 0; i < size; i += this_write)                                               /* code size times */
 8002c98:	2300      	movs	r3, #0
 8002c9a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c9c:	e045      	b.n	8002d2a <mpu6050_dmp_load_firmware+0xce>
    {
        this_write = MIN(16, size - i);                                                  /* get the written size */
 8002c9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ca0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b10      	cmp	r3, #16
 8002ca6:	bfa8      	it	ge
 8002ca8:	2310      	movge	r3, #16
 8002caa:	847b      	strh	r3, [r7, #34]	; 0x22

        res = a_mpu6050_write_mem(handle, i, (uint8_t *)(gs_mpu6050_dmp_code + i),
 8002cac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cae:	4a31      	ldr	r2, [pc, #196]	; (8002d74 <mpu6050_dmp_load_firmware+0x118>)
 8002cb0:	441a      	add	r2, r3
 8002cb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002cb4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff f85e 	bl	8001d78 <a_mpu6050_write_mem>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
                                  this_write);                                           /* write data */
        if (res != 0)                                                                    /* check result */
 8002cc2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d005      	beq.n	8002cd6 <mpu6050_dmp_load_firmware+0x7a>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	482a      	ldr	r0, [pc, #168]	; (8002d78 <mpu6050_dmp_load_firmware+0x11c>)
 8002cd0:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e048      	b.n	8002d68 <mpu6050_dmp_load_firmware+0x10c>
        }
        res = a_mpu6050_read_mem(handle, i, cur, this_write);                            /* read data */
 8002cd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002cd8:	f107 020c 	add.w	r2, r7, #12
 8002cdc:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff f885 	bl	8001dee <a_mpu6050_read_mem>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        if (res != 0)                                                                    /* check result */
 8002cea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d005      	beq.n	8002cfe <mpu6050_dmp_load_firmware+0xa2>
        {
            handle->debug_print("mpu6050: read mem failed.\n");                          /* read mem failed */
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	4821      	ldr	r0, [pc, #132]	; (8002d7c <mpu6050_dmp_load_firmware+0x120>)
 8002cf8:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e034      	b.n	8002d68 <mpu6050_dmp_load_firmware+0x10c>
        }
        if (memcmp(gs_mpu6050_dmp_code + i, cur, this_write) != 0)                       /* check the code */
 8002cfe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d00:	4a1c      	ldr	r2, [pc, #112]	; (8002d74 <mpu6050_dmp_load_firmware+0x118>)
 8002d02:	4413      	add	r3, r2
 8002d04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002d06:	f107 010c 	add.w	r1, r7, #12
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f005 fa16 	bl	800813c <memcmp>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <mpu6050_dmp_load_firmware+0xc6>
        {
            handle->debug_print("mpu6050: code compare error.\n");                       /* code compare error */
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	4819      	ldr	r0, [pc, #100]	; (8002d80 <mpu6050_dmp_load_firmware+0x124>)
 8002d1c:	4798      	blx	r3

            return 5;                                                                    /* return error */
 8002d1e:	2305      	movs	r3, #5
 8002d20:	e022      	b.n	8002d68 <mpu6050_dmp_load_firmware+0x10c>
    for (i = 0; i < size; i += this_write)                                               /* code size times */
 8002d22:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002d26:	4413      	add	r3, r2
 8002d28:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3b5      	bcc.n	8002c9e <mpu6050_dmp_load_firmware+0x42>
        }
    }
    tmp[0] = (0x0400 >> 8) & 0xFF;                                                       /* set the addr high */
 8002d32:	2304      	movs	r3, #4
 8002d34:	773b      	strb	r3, [r7, #28]
    tmp[1] = (0x0400 >> 0) & 0xFF;                                                       /* set the addr low */
 8002d36:	2300      	movs	r3, #0
 8002d38:	777b      	strb	r3, [r7, #29]

    if (handle->iic_write(handle->iic_addr, MPU6050_REG_PROGRAM_START,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691c      	ldr	r4, [r3, #16]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	7818      	ldrb	r0, [r3, #0]
 8002d42:	f107 021c 	add.w	r2, r7, #28
 8002d46:	2302      	movs	r3, #2
 8002d48:	2170      	movs	r1, #112	; 0x70
 8002d4a:	47a0      	blx	r4
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <mpu6050_dmp_load_firmware+0x102>
                         (uint8_t *)tmp, 2) != 0)                                        /* write data */
    {
        handle->debug_print("mpu6050: set program start failed.\n");                     /* set program start failed */
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	480b      	ldr	r0, [pc, #44]	; (8002d84 <mpu6050_dmp_load_firmware+0x128>)
 8002d58:	4798      	blx	r3

        return 6;                                                                        /* return error */
 8002d5a:	2306      	movs	r3, #6
 8002d5c:	e004      	b.n	8002d68 <mpu6050_dmp_load_firmware+0x10c>
    }
    handle->dmp_inited = 1;                                                              /* flag the dmp inited bit */
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    return 0;                                                                            /* success return 0 */
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	372c      	adds	r7, #44	; 0x2c
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd90      	pop	{r4, r7, pc}
 8002d70:	0800bacc 	.word	0x0800bacc
 8002d74:	20000000 	.word	0x20000000
 8002d78:	0800bae8 	.word	0x0800bae8
 8002d7c:	0800bb04 	.word	0x0800bb04
 8002d80:	0800bb20 	.word	0x0800bb20
 8002d84:	0800bb40 	.word	0x0800bb40

08002d88 <mpu6050_dmp_set_pedometer_walk_time>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_pedometer_walk_time(mpu6050_handle_t *handle, uint32_t ms)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
    uint8_t res;
    uint8_t tmp[4];

    if (handle == NULL)                                                                  /* check handle */
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <mpu6050_dmp_set_pedometer_walk_time+0x14>
    {
        return 2;                                                                        /* return error */
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e03a      	b.n	8002e12 <mpu6050_dmp_set_pedometer_walk_time+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <mpu6050_dmp_set_pedometer_walk_time+0x22>
    {
        return 3;                                                                        /* return error */
 8002da6:	2303      	movs	r3, #3
 8002da8:	e033      	b.n	8002e12 <mpu6050_dmp_set_pedometer_walk_time+0x8a>
    }
    if (handle->dmp_inited != 1)                                                         /* check dmp initialization */
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d005      	beq.n	8002dc0 <mpu6050_dmp_set_pedometer_walk_time+0x38>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                            /* dmp is not inited */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	4818      	ldr	r0, [pc, #96]	; (8002e1c <mpu6050_dmp_set_pedometer_walk_time+0x94>)
 8002dba:	4798      	blx	r3

        return 4;                                                                        /* return error */
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	e028      	b.n	8002e12 <mpu6050_dmp_set_pedometer_walk_time+0x8a>
    }

    ms /= 20;                                                                            /* div 20 */
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <mpu6050_dmp_set_pedometer_walk_time+0x98>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	603b      	str	r3, [r7, #0]
    tmp[0] = (uint8_t)((ms >> 24) & 0xFF);                                               /* set part 0 */
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	0e1b      	lsrs	r3, r3, #24
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	723b      	strb	r3, [r7, #8]
    tmp[1] = (uint8_t)((ms >> 16) & 0xFF);                                               /* set part 1 */
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	0c1b      	lsrs	r3, r3, #16
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	727b      	strb	r3, [r7, #9]
    tmp[2] = (uint8_t)((ms >> 8) & 0xFF);                                                /* set part 2 */
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	0a1b      	lsrs	r3, r3, #8
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (uint8_t)(ms & 0xFF);                                                       /* set part 3 */
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	72fb      	strb	r3, [r7, #11]

    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_PEDSTD_TIMECTR, tmp, 4);             /* write data */
 8002dea:	f107 0208 	add.w	r2, r7, #8
 8002dee:	2304      	movs	r3, #4
 8002df0:	f44f 7171 	mov.w	r1, #964	; 0x3c4
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7fe ffbf 	bl	8001d78 <a_mpu6050_write_mem>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <mpu6050_dmp_set_pedometer_walk_time+0x88>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                             /* write mem failed */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	4806      	ldr	r0, [pc, #24]	; (8002e24 <mpu6050_dmp_set_pedometer_walk_time+0x9c>)
 8002e0a:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <mpu6050_dmp_set_pedometer_walk_time+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	0800bb64 	.word	0x0800bb64
 8002e20:	cccccccd 	.word	0xcccccccd
 8002e24:	0800bae8 	.word	0x0800bae8

08002e28 <mpu6050_dmp_set_pedometer_step_count>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_pedometer_step_count(mpu6050_handle_t *handle, uint32_t count)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
    uint8_t res;
    uint8_t tmp[4];

    if (handle == NULL)                                                                  /* check handle */
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <mpu6050_dmp_set_pedometer_step_count+0x14>
    {
        return 2;                                                                        /* return error */
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e034      	b.n	8002ea6 <mpu6050_dmp_set_pedometer_step_count+0x7e>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d001      	beq.n	8002e4a <mpu6050_dmp_set_pedometer_step_count+0x22>
    {
        return 3;                                                                        /* return error */
 8002e46:	2303      	movs	r3, #3
 8002e48:	e02d      	b.n	8002ea6 <mpu6050_dmp_set_pedometer_step_count+0x7e>
    }
    if (handle->dmp_inited != 1)                                                         /* check dmp initialization */
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d005      	beq.n	8002e60 <mpu6050_dmp_set_pedometer_step_count+0x38>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                            /* dmp is not inited */
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	4815      	ldr	r0, [pc, #84]	; (8002eb0 <mpu6050_dmp_set_pedometer_step_count+0x88>)
 8002e5a:	4798      	blx	r3

        return 4;                                                                        /* return error */
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	e022      	b.n	8002ea6 <mpu6050_dmp_set_pedometer_step_count+0x7e>
    }

    tmp[0] = (uint8_t)((count >> 24) & 0xFF);                                            /* set part 0 */
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	0e1b      	lsrs	r3, r3, #24
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	723b      	strb	r3, [r7, #8]
    tmp[1] = (uint8_t)((count >> 16) & 0xFF);                                            /* set part 1 */
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	0c1b      	lsrs	r3, r3, #16
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	727b      	strb	r3, [r7, #9]
    tmp[2] = (uint8_t)((count >> 8) & 0xFF);                                             /* set part 2 */
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	0a1b      	lsrs	r3, r3, #8
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (uint8_t)(count & 0xFF);                                                    /* set part 3 */
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	72fb      	strb	r3, [r7, #11]

    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_PEDSTD_STEPCTR, tmp, 4);             /* write data */
 8002e7e:	f107 0208 	add.w	r2, r7, #8
 8002e82:	2304      	movs	r3, #4
 8002e84:	f44f 7158 	mov.w	r1, #864	; 0x360
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7fe ff75 	bl	8001d78 <a_mpu6050_write_mem>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <mpu6050_dmp_set_pedometer_step_count+0x7c>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                             /* write mem failed */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <mpu6050_dmp_set_pedometer_step_count+0x8c>)
 8002e9e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <mpu6050_dmp_set_pedometer_step_count+0x7e>
    }

    return 0;                                                                            /* success return 0 */
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	0800bb64 	.word	0x0800bb64
 8002eb4:	0800bae8 	.word	0x0800bae8

08002eb8 <mpu6050_dmp_set_shake_reject_timeout>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_shake_reject_timeout(mpu6050_handle_t *handle, uint16_t ms)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t tmp[2];

    if (handle == NULL)                                                        /* check handle */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <mpu6050_dmp_set_shake_reject_timeout+0x16>
    {
        return 2;                                                              /* return error */
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e033      	b.n	8002f36 <mpu6050_dmp_set_shake_reject_timeout+0x7e>
    }
    if (handle->inited != 1)                                                   /* check handle initialization */
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d001      	beq.n	8002edc <mpu6050_dmp_set_shake_reject_timeout+0x24>
    {
        return 3;                                                              /* return error */
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e02c      	b.n	8002f36 <mpu6050_dmp_set_shake_reject_timeout+0x7e>
    }
    if (handle->dmp_inited != 1)                                               /* check dmp initialization */
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d005      	beq.n	8002ef2 <mpu6050_dmp_set_shake_reject_timeout+0x3a>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                  /* dmp is not inited */
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	4815      	ldr	r0, [pc, #84]	; (8002f40 <mpu6050_dmp_set_shake_reject_timeout+0x88>)
 8002eec:	4798      	blx	r3

        return 4;                                                              /* return error */
 8002eee:	2304      	movs	r3, #4
 8002ef0:	e021      	b.n	8002f36 <mpu6050_dmp_set_shake_reject_timeout+0x7e>
    }

    ms /= (1000 / MPU6050_DMP_SAMPLE_RATE);                                    /* convert time */
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	4a13      	ldr	r2, [pc, #76]	; (8002f44 <mpu6050_dmp_set_shake_reject_timeout+0x8c>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	089b      	lsrs	r3, r3, #2
 8002efc:	807b      	strh	r3, [r7, #2]
    tmp[0] = (ms >> 8) & 0xFF;                                                 /* set part 0 */
 8002efe:	887b      	ldrh	r3, [r7, #2]
 8002f00:	0a1b      	lsrs	r3, r3, #8
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	733b      	strb	r3, [r7, #12]
    tmp[1] = (ms >> 0) & 0xFF;                                                 /* set part 1 */
 8002f08:	887b      	ldrh	r3, [r7, #2]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	737b      	strb	r3, [r7, #13]

    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_88, tmp, 2);             /* write data */
 8002f0e:	f107 020c 	add.w	r2, r7, #12
 8002f12:	2302      	movs	r3, #2
 8002f14:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7fe ff2d 	bl	8001d78 <a_mpu6050_write_mem>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                              /* check result */
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <mpu6050_dmp_set_shake_reject_timeout+0x7c>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                   /* write mem failed */
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4806      	ldr	r0, [pc, #24]	; (8002f48 <mpu6050_dmp_set_shake_reject_timeout+0x90>)
 8002f2e:	4798      	blx	r3

        return 1;                                                              /* return error */
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <mpu6050_dmp_set_shake_reject_timeout+0x7e>
    }

    return 0;                                                                  /* success return 0 */
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	0800bb64 	.word	0x0800bb64
 8002f44:	cccccccd 	.word	0xcccccccd
 8002f48:	0800bae8 	.word	0x0800bae8

08002f4c <mpu6050_dmp_set_shake_reject_time>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_shake_reject_time(mpu6050_handle_t *handle, uint16_t ms)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t tmp[2];

    if (handle == NULL)                                                        /* check handle */
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <mpu6050_dmp_set_shake_reject_time+0x16>
    {
        return 2;                                                              /* return error */
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e033      	b.n	8002fca <mpu6050_dmp_set_shake_reject_time+0x7e>
    }
    if (handle->inited != 1)                                                   /* check handle initialization */
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d001      	beq.n	8002f70 <mpu6050_dmp_set_shake_reject_time+0x24>
    {
        return 3;                                                              /* return error */
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e02c      	b.n	8002fca <mpu6050_dmp_set_shake_reject_time+0x7e>
    }
    if (handle->dmp_inited != 1)                                               /* check dmp initialization */
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d005      	beq.n	8002f86 <mpu6050_dmp_set_shake_reject_time+0x3a>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                  /* dmp is not inited */
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	4815      	ldr	r0, [pc, #84]	; (8002fd4 <mpu6050_dmp_set_shake_reject_time+0x88>)
 8002f80:	4798      	blx	r3

        return 4;                                                              /* return error */
 8002f82:	2304      	movs	r3, #4
 8002f84:	e021      	b.n	8002fca <mpu6050_dmp_set_shake_reject_time+0x7e>
    }

    ms /= (1000 / MPU6050_DMP_SAMPLE_RATE);                                    /* convert time */
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	4a13      	ldr	r2, [pc, #76]	; (8002fd8 <mpu6050_dmp_set_shake_reject_time+0x8c>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	089b      	lsrs	r3, r3, #2
 8002f90:	807b      	strh	r3, [r7, #2]
    tmp[0] = (ms >> 8) & 0xFF;                                                 /* set part 0 */
 8002f92:	887b      	ldrh	r3, [r7, #2]
 8002f94:	0a1b      	lsrs	r3, r3, #8
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	733b      	strb	r3, [r7, #12]
    tmp[1] = (ms >> 0) & 0xFF;                                                 /* set part 1 */
 8002f9c:	887b      	ldrh	r3, [r7, #2]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	737b      	strb	r3, [r7, #13]

    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_90, tmp, 2);             /* write data */
 8002fa2:	f107 020c 	add.w	r2, r7, #12
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fe fee3 	bl	8001d78 <a_mpu6050_write_mem>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                              /* check result */
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <mpu6050_dmp_set_shake_reject_time+0x7c>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                   /* write mem failed */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	4806      	ldr	r0, [pc, #24]	; (8002fdc <mpu6050_dmp_set_shake_reject_time+0x90>)
 8002fc2:	4798      	blx	r3

        return 1;                                                              /* return error */
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <mpu6050_dmp_set_shake_reject_time+0x7e>
    }

    return 0;                                                                  /* success return 0 */
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	0800bb64 	.word	0x0800bb64
 8002fd8:	cccccccd 	.word	0xcccccccd
 8002fdc:	0800bae8 	.word	0x0800bae8

08002fe0 <mpu6050_dmp_set_shake_reject_thresh>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_shake_reject_thresh(mpu6050_handle_t *handle, uint16_t dps)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t tmp[4];
    uint32_t thresh_scaled;

    if (handle == NULL)                                                        /* check handle */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <mpu6050_dmp_set_shake_reject_thresh+0x16>
    {
        return 2;                                                              /* return error */
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e03a      	b.n	800306c <mpu6050_dmp_set_shake_reject_thresh+0x8c>
    }
    if (handle->inited != 1)                                                   /* check handle initialization */
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d001      	beq.n	8003004 <mpu6050_dmp_set_shake_reject_thresh+0x24>
    {
        return 3;                                                              /* return error */
 8003000:	2303      	movs	r3, #3
 8003002:	e033      	b.n	800306c <mpu6050_dmp_set_shake_reject_thresh+0x8c>
    }
    if (handle->dmp_inited != 1)                                               /* check dmp initialization */
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800300a:	2b01      	cmp	r3, #1
 800300c:	d005      	beq.n	800301a <mpu6050_dmp_set_shake_reject_thresh+0x3a>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                  /* dmp is not inited */
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	4818      	ldr	r0, [pc, #96]	; (8003074 <mpu6050_dmp_set_shake_reject_thresh+0x94>)
 8003014:	4798      	blx	r3

        return 4;                                                              /* return error */
 8003016:	2304      	movs	r3, #4
 8003018:	e028      	b.n	800306c <mpu6050_dmp_set_shake_reject_thresh+0x8c>
    }

    thresh_scaled = MPU6050_DMP_GYRO_SF / 1000 * dps;                          /* convert to thresh scaled */
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	f24b 7202 	movw	r2, #46850	; 0xb702
 8003020:	fb02 f303 	mul.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]
    tmp[0] = (uint8_t)(((uint32_t)thresh_scaled >> 24) & 0xFF);                /* set the part 3 */
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	0e1b      	lsrs	r3, r3, #24
 800302a:	b2db      	uxtb	r3, r3
 800302c:	733b      	strb	r3, [r7, #12]
    tmp[1] = (uint8_t)(((uint32_t)thresh_scaled >> 16) & 0xFF);                /* set the part 2 */
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	0c1b      	lsrs	r3, r3, #16
 8003032:	b2db      	uxtb	r3, r3
 8003034:	737b      	strb	r3, [r7, #13]
    tmp[2] = (uint8_t)(((uint32_t)thresh_scaled >> 8) & 0xFF);                 /* set the part 1 */
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	b2db      	uxtb	r3, r3
 800303c:	73bb      	strb	r3, [r7, #14]
    tmp[3] = (uint8_t)((uint32_t)thresh_scaled & 0xFF);                        /* set the part 0 */
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	73fb      	strb	r3, [r7, #15]

    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_92, tmp, 4);             /* write data */
 8003044:	f107 020c 	add.w	r2, r7, #12
 8003048:	2304      	movs	r3, #4
 800304a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fe fe92 	bl	8001d78 <a_mpu6050_write_mem>
 8003054:	4603      	mov	r3, r0
 8003056:	74fb      	strb	r3, [r7, #19]
    if (res != 0)                                                              /* check result */
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <mpu6050_dmp_set_shake_reject_thresh+0x8a>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                   /* write mem failed */
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	4805      	ldr	r0, [pc, #20]	; (8003078 <mpu6050_dmp_set_shake_reject_thresh+0x98>)
 8003064:	4798      	blx	r3

        return 1;                                                              /* return error */
 8003066:	2301      	movs	r3, #1
 8003068:	e000      	b.n	800306c <mpu6050_dmp_set_shake_reject_thresh+0x8c>
    }

    return 0;                                                                  /* success return 0 */
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	0800bb64 	.word	0x0800bb64
 8003078:	0800bae8 	.word	0x0800bae8

0800307c <mpu6050_dmp_set_tap_time_multi>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_tap_time_multi(mpu6050_handle_t *handle, uint16_t ms)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t tmp[2];

    if (handle == NULL)                                                        /* check handle */
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <mpu6050_dmp_set_tap_time_multi+0x16>
    {
        return 2;                                                              /* return error */
 800308e:	2302      	movs	r3, #2
 8003090:	e033      	b.n	80030fa <mpu6050_dmp_set_tap_time_multi+0x7e>
    }
    if (handle->inited != 1)                                                   /* check handle initialization */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003098:	2b01      	cmp	r3, #1
 800309a:	d001      	beq.n	80030a0 <mpu6050_dmp_set_tap_time_multi+0x24>
    {
        return 3;                                                              /* return error */
 800309c:	2303      	movs	r3, #3
 800309e:	e02c      	b.n	80030fa <mpu6050_dmp_set_tap_time_multi+0x7e>
    }
    if (handle->dmp_inited != 1)                                               /* check dmp initialization */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d005      	beq.n	80030b6 <mpu6050_dmp_set_tap_time_multi+0x3a>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                  /* dmp is not inited */
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	4815      	ldr	r0, [pc, #84]	; (8003104 <mpu6050_dmp_set_tap_time_multi+0x88>)
 80030b0:	4798      	blx	r3

        return 4;                                                              /* return error */
 80030b2:	2304      	movs	r3, #4
 80030b4:	e021      	b.n	80030fa <mpu6050_dmp_set_tap_time_multi+0x7e>
    }

    ms /= (1000 / MPU6050_DMP_SAMPLE_RATE);                                    /* convert time */
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	4a13      	ldr	r2, [pc, #76]	; (8003108 <mpu6050_dmp_set_tap_time_multi+0x8c>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	807b      	strh	r3, [r7, #2]
    tmp[0] = (ms >> 8) & 0xFF;                                                 /* set part 0 */
 80030c2:	887b      	ldrh	r3, [r7, #2]
 80030c4:	0a1b      	lsrs	r3, r3, #8
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	733b      	strb	r3, [r7, #12]
    tmp[1] = (ms >> 0) & 0xFF;                                                 /* set part 1 */
 80030cc:	887b      	ldrh	r3, [r7, #2]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	737b      	strb	r3, [r7, #13]

    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_218, tmp, 2);            /* write data */
 80030d2:	f107 020c 	add.w	r2, r7, #12
 80030d6:	2302      	movs	r3, #2
 80030d8:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7fe fe4b 	bl	8001d78 <a_mpu6050_write_mem>
 80030e2:	4603      	mov	r3, r0
 80030e4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                              /* check result */
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <mpu6050_dmp_set_tap_time_multi+0x7c>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                   /* write mem failed */
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	4806      	ldr	r0, [pc, #24]	; (800310c <mpu6050_dmp_set_tap_time_multi+0x90>)
 80030f2:	4798      	blx	r3

        return 1;                                                              /* return error */
 80030f4:	2301      	movs	r3, #1
 80030f6:	e000      	b.n	80030fa <mpu6050_dmp_set_tap_time_multi+0x7e>
    }

    return 0;                                                                  /* success return 0 */
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	0800bb64 	.word	0x0800bb64
 8003108:	cccccccd 	.word	0xcccccccd
 800310c:	0800bae8 	.word	0x0800bae8

08003110 <mpu6050_dmp_set_tap_time>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_tap_time(mpu6050_handle_t *handle, uint16_t ms)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t tmp[2];

    if (handle == NULL)                                                        /* check handle */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <mpu6050_dmp_set_tap_time+0x16>
    {
        return 2;                                                              /* return error */
 8003122:	2302      	movs	r3, #2
 8003124:	e033      	b.n	800318e <mpu6050_dmp_set_tap_time+0x7e>
    }
    if (handle->inited != 1)                                                   /* check handle initialization */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800312c:	2b01      	cmp	r3, #1
 800312e:	d001      	beq.n	8003134 <mpu6050_dmp_set_tap_time+0x24>
    {
        return 3;                                                              /* return error */
 8003130:	2303      	movs	r3, #3
 8003132:	e02c      	b.n	800318e <mpu6050_dmp_set_tap_time+0x7e>
    }
    if (handle->dmp_inited != 1)                                               /* check dmp initialization */
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800313a:	2b01      	cmp	r3, #1
 800313c:	d005      	beq.n	800314a <mpu6050_dmp_set_tap_time+0x3a>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                  /* dmp is not inited */
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	4815      	ldr	r0, [pc, #84]	; (8003198 <mpu6050_dmp_set_tap_time+0x88>)
 8003144:	4798      	blx	r3

        return 4;                                                              /* return error */
 8003146:	2304      	movs	r3, #4
 8003148:	e021      	b.n	800318e <mpu6050_dmp_set_tap_time+0x7e>
    }

    ms /= (1000 / MPU6050_DMP_SAMPLE_RATE);                                    /* convert time */
 800314a:	887b      	ldrh	r3, [r7, #2]
 800314c:	4a13      	ldr	r2, [pc, #76]	; (800319c <mpu6050_dmp_set_tap_time+0x8c>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	089b      	lsrs	r3, r3, #2
 8003154:	807b      	strh	r3, [r7, #2]
    tmp[0] = (ms >> 8) & 0xFF;                                                 /* set part 0 */
 8003156:	887b      	ldrh	r3, [r7, #2]
 8003158:	0a1b      	lsrs	r3, r3, #8
 800315a:	b29b      	uxth	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	733b      	strb	r3, [r7, #12]
    tmp[1] = (ms >> 0) & 0xFF;                                                 /* set part 1 */
 8003160:	887b      	ldrh	r3, [r7, #2]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	737b      	strb	r3, [r7, #13]

    res = a_mpu6050_write_mem(handle, MPU6050_DMP_TAPW_MIN, tmp, 2);           /* write data */
 8003166:	f107 020c 	add.w	r2, r7, #12
 800316a:	2302      	movs	r3, #2
 800316c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7fe fe01 	bl	8001d78 <a_mpu6050_write_mem>
 8003176:	4603      	mov	r3, r0
 8003178:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                              /* check result */
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <mpu6050_dmp_set_tap_time+0x7c>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                   /* write mem failed */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	4806      	ldr	r0, [pc, #24]	; (80031a0 <mpu6050_dmp_set_tap_time+0x90>)
 8003186:	4798      	blx	r3

        return 1;                                                              /* return error */
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <mpu6050_dmp_set_tap_time+0x7e>
    }

    return 0;                                                                  /* success return 0 */
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	0800bb64 	.word	0x0800bb64
 800319c:	cccccccd 	.word	0xcccccccd
 80031a0:	0800bae8 	.word	0x0800bae8

080031a4 <mpu6050_dmp_set_min_tap_count>:
 *            - 4 dmp is not inited
 *            - 5 cnt must be between 1 and 4
 * @note      1 <= cnt <= 4
 */
uint8_t mpu6050_dmp_set_min_tap_count(mpu6050_handle_t *handle, uint8_t cnt)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t tmp;

    if (handle == NULL)                                                        /* check handle */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <mpu6050_dmp_set_min_tap_count+0x16>
    {
        return 2;                                                              /* return error */
 80031b6:	2302      	movs	r3, #2
 80031b8:	e035      	b.n	8003226 <mpu6050_dmp_set_min_tap_count+0x82>
    }
    if (handle->inited != 1)                                                   /* check handle initialization */
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d001      	beq.n	80031c8 <mpu6050_dmp_set_min_tap_count+0x24>
    {
        return 3;                                                              /* return error */
 80031c4:	2303      	movs	r3, #3
 80031c6:	e02e      	b.n	8003226 <mpu6050_dmp_set_min_tap_count+0x82>
    }
    if (handle->dmp_inited != 1)                                               /* check dmp initialization */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d005      	beq.n	80031de <mpu6050_dmp_set_min_tap_count+0x3a>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                  /* dmp is not inited */
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	4816      	ldr	r0, [pc, #88]	; (8003230 <mpu6050_dmp_set_min_tap_count+0x8c>)
 80031d8:	4798      	blx	r3

        return 4;                                                              /* return error */
 80031da:	2304      	movs	r3, #4
 80031dc:	e023      	b.n	8003226 <mpu6050_dmp_set_min_tap_count+0x82>
    }
    if ((cnt < 1) || (cnt > 4))                                                /* check cnt */
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <mpu6050_dmp_set_min_tap_count+0x46>
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d905      	bls.n	80031f6 <mpu6050_dmp_set_min_tap_count+0x52>
    {
        handle->debug_print("mpu6050: cnt must be between 1 and 4.\n");        /* cnt must be between 1 and 4 */
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	4811      	ldr	r0, [pc, #68]	; (8003234 <mpu6050_dmp_set_min_tap_count+0x90>)
 80031f0:	4798      	blx	r3

        return 5;                                                              /* return error */
 80031f2:	2305      	movs	r3, #5
 80031f4:	e017      	b.n	8003226 <mpu6050_dmp_set_min_tap_count+0x82>
    }

    tmp = cnt - 1;                                                             /* set the counter */
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_79, &tmp, 1);            /* write data */
 80031fe:	f107 020e 	add.w	r2, r7, #14
 8003202:	2301      	movs	r3, #1
 8003204:	f240 114f 	movw	r1, #335	; 0x14f
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f7fe fdb5 	bl	8001d78 <a_mpu6050_write_mem>
 800320e:	4603      	mov	r3, r0
 8003210:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                              /* check result */
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <mpu6050_dmp_set_min_tap_count+0x80>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                   /* write mem failed */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	4806      	ldr	r0, [pc, #24]	; (8003238 <mpu6050_dmp_set_min_tap_count+0x94>)
 800321e:	4798      	blx	r3

        return 1;                                                              /* return error */
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <mpu6050_dmp_set_min_tap_count+0x82>
    }

    return 0;                                                                  /* success return 0 */
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	0800bb64 	.word	0x0800bb64
 8003234:	0800bb84 	.word	0x0800bb84
 8003238:	0800bae8 	.word	0x0800bae8

0800323c <mpu6050_dmp_set_interrupt_mode>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_interrupt_mode(mpu6050_handle_t *handle, mpu6050_dmp_interrupt_mode_t mode)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	70fb      	strb	r3, [r7, #3]
    uint8_t res;

    if (handle == NULL)                                                       /* check handle */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <mpu6050_dmp_set_interrupt_mode+0x16>
    {
        return 2;                                                             /* return error */
 800324e:	2302      	movs	r3, #2
 8003250:	e04f      	b.n	80032f2 <mpu6050_dmp_set_interrupt_mode+0xb6>
    }
    if (handle->inited != 1)                                                  /* check handle initialization */
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003258:	2b01      	cmp	r3, #1
 800325a:	d001      	beq.n	8003260 <mpu6050_dmp_set_interrupt_mode+0x24>
    {
        return 3;                                                             /* return error */
 800325c:	2303      	movs	r3, #3
 800325e:	e048      	b.n	80032f2 <mpu6050_dmp_set_interrupt_mode+0xb6>
    }
    if (handle->dmp_inited != 1)                                              /* check dmp initialization */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003266:	2b01      	cmp	r3, #1
 8003268:	d005      	beq.n	8003276 <mpu6050_dmp_set_interrupt_mode+0x3a>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                 /* dmp is not inited */
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699b      	ldr	r3, [r3, #24]
 800326e:	4823      	ldr	r0, [pc, #140]	; (80032fc <mpu6050_dmp_set_interrupt_mode+0xc0>)
 8003270:	4798      	blx	r3

        return 4;                                                             /* return error */
 8003272:	2304      	movs	r3, #4
 8003274:	e03d      	b.n	80032f2 <mpu6050_dmp_set_interrupt_mode+0xb6>
    }

    if (mode == MPU6050_DMP_INTERRUPT_MODE_CONTINUOUS)                        /* continuous */
 8003276:	78fb      	ldrb	r3, [r7, #3]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d11d      	bne.n	80032b8 <mpu6050_dmp_set_interrupt_mode+0x7c>
    {
        uint8_t regs_continuous[11] = {0xd8, 0xb1, 0xb9,
 800327c:	4a20      	ldr	r2, [pc, #128]	; (8003300 <mpu6050_dmp_set_interrupt_mode+0xc4>)
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	ca07      	ldmia	r2, {r0, r1, r2}
 8003284:	c303      	stmia	r3!, {r0, r1}
 8003286:	801a      	strh	r2, [r3, #0]
 8003288:	3302      	adds	r3, #2
 800328a:	0c12      	lsrs	r2, r2, #16
 800328c:	701a      	strb	r2, [r3, #0]
                                       0xf3, 0x8b, 0xa3,
                                       0x91, 0xb6, 0x09,
                                       0xb4, 0xd9};

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_FIFO_ON_EVENT,
 800328e:	f107 0214 	add.w	r2, r7, #20
 8003292:	230b      	movs	r3, #11
 8003294:	f640 2182 	movw	r1, #2690	; 0xa82
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fe fd6d 	bl	8001d78 <a_mpu6050_write_mem>
 800329e:	4603      	mov	r3, r0
 80032a0:	77fb      	strb	r3, [r7, #31]
                                  (uint8_t *)regs_continuous, 11);            /* write data */
        if (res != 0)                                                         /* check result */
 80032a2:	7ffb      	ldrb	r3, [r7, #31]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <mpu6050_dmp_set_interrupt_mode+0x78>
        {
            handle->debug_print("mpu6050: write mem failed.\n");              /* write mem failed */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	4815      	ldr	r0, [pc, #84]	; (8003304 <mpu6050_dmp_set_interrupt_mode+0xc8>)
 80032ae:	4798      	blx	r3

            return 1;                                                         /* return error */
 80032b0:	2301      	movs	r3, #1
 80032b2:	e01e      	b.n	80032f2 <mpu6050_dmp_set_interrupt_mode+0xb6>
        }

        return 0;                                                             /* success return 0 */
 80032b4:	2300      	movs	r3, #0
 80032b6:	e01c      	b.n	80032f2 <mpu6050_dmp_set_interrupt_mode+0xb6>
    }
    else                                                                      /* disable */
    {
        uint8_t regs_gesture[11] = {0xda, 0xb1, 0xb9,
 80032b8:	4a13      	ldr	r2, [pc, #76]	; (8003308 <mpu6050_dmp_set_interrupt_mode+0xcc>)
 80032ba:	f107 0308 	add.w	r3, r7, #8
 80032be:	ca07      	ldmia	r2, {r0, r1, r2}
 80032c0:	c303      	stmia	r3!, {r0, r1}
 80032c2:	801a      	strh	r2, [r3, #0]
 80032c4:	3302      	adds	r3, #2
 80032c6:	0c12      	lsrs	r2, r2, #16
 80032c8:	701a      	strb	r2, [r3, #0]
                                    0xf3, 0x8b, 0xa3,
                                    0x91, 0xb6, 0xda,
                                    0xb4, 0xda};

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_FIFO_ON_EVENT,
 80032ca:	f107 0208 	add.w	r2, r7, #8
 80032ce:	230b      	movs	r3, #11
 80032d0:	f640 2182 	movw	r1, #2690	; 0xa82
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7fe fd4f 	bl	8001d78 <a_mpu6050_write_mem>
 80032da:	4603      	mov	r3, r0
 80032dc:	77fb      	strb	r3, [r7, #31]
                                  (uint8_t *)regs_gesture, 11);               /* write data */
        if (res != 0)                                                         /* check result */
 80032de:	7ffb      	ldrb	r3, [r7, #31]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <mpu6050_dmp_set_interrupt_mode+0xb4>
        {
            handle->debug_print("mpu6050: write mem failed.\n");              /* write mem failed */
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	4806      	ldr	r0, [pc, #24]	; (8003304 <mpu6050_dmp_set_interrupt_mode+0xc8>)
 80032ea:	4798      	blx	r3

            return 1;                                                         /* return error */
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <mpu6050_dmp_set_interrupt_mode+0xb6>
        }

        return 0;                                                             /* success return 0 */
 80032f0:	2300      	movs	r3, #0
    }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	0800bb64 	.word	0x0800bb64
 8003300:	0800bbe4 	.word	0x0800bbe4
 8003304:	0800bae8 	.word	0x0800bae8
 8003308:	0800bbf0 	.word	0x0800bbf0

0800330c <mpu6050_dmp_set_gyro_bias>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_gyro_bias(mpu6050_handle_t *handle, int32_t bias[3])
{
 800330c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003310:	b08e      	sub	sp, #56	; 0x38
 8003312:	af00      	add	r7, sp, #0
 8003314:	61f8      	str	r0, [r7, #28]
 8003316:	61b9      	str	r1, [r7, #24]
    uint8_t res;
    uint8_t regs[4];
    int32_t gyro_bias_body[3];

    if (handle == NULL)                                                                             /* check handle */
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <mpu6050_dmp_set_gyro_bias+0x16>
    {
        return 2;                                                                                   /* return error */
 800331e:	2302      	movs	r3, #2
 8003320:	e127      	b.n	8003572 <mpu6050_dmp_set_gyro_bias+0x266>
    }
    if (handle->inited != 1)                                                                        /* check handle initialization */
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003328:	2b01      	cmp	r3, #1
 800332a:	d001      	beq.n	8003330 <mpu6050_dmp_set_gyro_bias+0x24>
    {
        return 3;                                                                                   /* return error */
 800332c:	2303      	movs	r3, #3
 800332e:	e120      	b.n	8003572 <mpu6050_dmp_set_gyro_bias+0x266>
    }
    if (handle->dmp_inited != 1)                                                                    /* check dmp initialization */
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003336:	2b01      	cmp	r3, #1
 8003338:	d005      	beq.n	8003346 <mpu6050_dmp_set_gyro_bias+0x3a>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                                       /* dmp is not inited */
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	488f      	ldr	r0, [pc, #572]	; (800357c <mpu6050_dmp_set_gyro_bias+0x270>)
 8003340:	4798      	blx	r3

        return 4;                                                                                   /* return error */
 8003342:	2304      	movs	r3, #4
 8003344:	e115      	b.n	8003572 <mpu6050_dmp_set_gyro_bias+0x266>
    }

    gyro_bias_body[0] = bias[handle->orient & 3];                                                   /* set the body 0 */
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4413      	add	r3, r2
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
    if ((handle->orient & 4) != 0)                                                                  /* check bit 3 */
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <mpu6050_dmp_set_gyro_bias+0x5e>
    {
        gyro_bias_body[0] *= -1;                                                                    /* *(-1) */
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	425b      	negs	r3, r3
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
    }
    gyro_bias_body[1] = bias[(handle->orient >> 3) & 3];                                            /* set the body 1 */
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	08db      	lsrs	r3, r3, #3
 8003370:	b29b      	uxth	r3, r3
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4413      	add	r3, r2
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
    if ((handle->orient & 0x20) != 0)                                                               /* check bit 6 */
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <mpu6050_dmp_set_gyro_bias+0x86>
    {
        gyro_bias_body[1] *= -1;                                                                    /* *(-1) */
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	425b      	negs	r3, r3
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    gyro_bias_body[2] = bias[(handle->orient >> 6) & 3];                                            /* set the body 2 */
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003396:	099b      	lsrs	r3, r3, #6
 8003398:	b29b      	uxth	r3, r3
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4413      	add	r3, r2
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ((handle->orient & 0x100) != 0)                                                              /* check bit 9 */
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <mpu6050_dmp_set_gyro_bias+0xae>
    {
        gyro_bias_body[2] *= -1;                                                                    /* *(-1) */
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	425b      	negs	r3, r3
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    gyro_bias_body[0] = (int32_t)(((int64_t)gyro_bias_body[0] * MPU6050_DMP_GYRO_SF) >> 30);        /* set body 0 */
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	17da      	asrs	r2, r3, #31
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	617a      	str	r2, [r7, #20]
 80033c2:	4b6f      	ldr	r3, [pc, #444]	; (8003580 <mpu6050_dmp_set_gyro_bias+0x274>)
 80033c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033c8:	460a      	mov	r2, r1
 80033ca:	fb03 f202 	mul.w	r2, r3, r2
 80033ce:	2300      	movs	r3, #0
 80033d0:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80033d4:	4601      	mov	r1, r0
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	4a68      	ldr	r2, [pc, #416]	; (8003580 <mpu6050_dmp_set_gyro_bias+0x274>)
 80033de:	6939      	ldr	r1, [r7, #16]
 80033e0:	fba1 ab02 	umull	sl, fp, r1, r2
 80033e4:	445b      	add	r3, fp
 80033e6:	469b      	mov	fp, r3
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80033f4:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 80033f8:	ea4f 73ab 	mov.w	r3, fp, asr #30
 80033fc:	4613      	mov	r3, r2
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
    gyro_bias_body[1] = (int32_t)(((int64_t)gyro_bias_body[1] * MPU6050_DMP_GYRO_SF) >> 30);        /* set body 1 */
 8003400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003402:	17da      	asrs	r2, r3, #31
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	60fa      	str	r2, [r7, #12]
 8003408:	4b5d      	ldr	r3, [pc, #372]	; (8003580 <mpu6050_dmp_set_gyro_bias+0x274>)
 800340a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800340e:	465a      	mov	r2, fp
 8003410:	fb03 f202 	mul.w	r2, r3, r2
 8003414:	2300      	movs	r3, #0
 8003416:	4651      	mov	r1, sl
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	4413      	add	r3, r2
 800341e:	4a58      	ldr	r2, [pc, #352]	; (8003580 <mpu6050_dmp_set_gyro_bias+0x274>)
 8003420:	4651      	mov	r1, sl
 8003422:	fba1 8902 	umull	r8, r9, r1, r2
 8003426:	444b      	add	r3, r9
 8003428:	4699      	mov	r9, r3
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	f04f 0300 	mov.w	r3, #0
 8003432:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8003436:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800343a:	ea4f 73a9 	mov.w	r3, r9, asr #30
 800343e:	4613      	mov	r3, r2
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
    gyro_bias_body[2] = (int32_t)(((int64_t)gyro_bias_body[2] * MPU6050_DMP_GYRO_SF) >> 30);        /* set body 2 */
 8003442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003444:	17da      	asrs	r2, r3, #31
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	607a      	str	r2, [r7, #4]
 800344a:	4b4d      	ldr	r3, [pc, #308]	; (8003580 <mpu6050_dmp_set_gyro_bias+0x274>)
 800344c:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003450:	464a      	mov	r2, r9
 8003452:	fb03 f202 	mul.w	r2, r3, r2
 8003456:	2300      	movs	r3, #0
 8003458:	4641      	mov	r1, r8
 800345a:	fb01 f303 	mul.w	r3, r1, r3
 800345e:	4413      	add	r3, r2
 8003460:	4a47      	ldr	r2, [pc, #284]	; (8003580 <mpu6050_dmp_set_gyro_bias+0x274>)
 8003462:	4641      	mov	r1, r8
 8003464:	fba1 4502 	umull	r4, r5, r1, r2
 8003468:	442b      	add	r3, r5
 800346a:	461d      	mov	r5, r3
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	0fa2      	lsrs	r2, r4, #30
 8003476:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800347a:	17ab      	asrs	r3, r5, #30
 800347c:	4613      	mov	r3, r2
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c

    regs[0] = (uint8_t)((gyro_bias_body[0] >> 24) & 0xFF);                                          /* set part 0 */
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	161b      	asrs	r3, r3, #24
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    regs[1] = (uint8_t)((gyro_bias_body[0] >> 16) & 0xFF);                                          /* set part 1 */
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	141b      	asrs	r3, r3, #16
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    regs[2] = (uint8_t)((gyro_bias_body[0] >> 8) & 0xFF);                                           /* set part 2 */
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	121b      	asrs	r3, r3, #8
 8003498:	b2db      	uxtb	r3, r3
 800349a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    regs[3] = (uint8_t)(gyro_bias_body[0] & 0xFF);                                                  /* set part 3 */
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_EXT_GYRO_BIAS_X, (uint8_t *)regs, 4);           /* write data */
 80034a6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80034aa:	2304      	movs	r3, #4
 80034ac:	f44f 7174 	mov.w	r1, #976	; 0x3d0
 80034b0:	69f8      	ldr	r0, [r7, #28]
 80034b2:	f7fe fc61 	bl	8001d78 <a_mpu6050_write_mem>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (res != 0)                                                                                   /* check result */
 80034bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <mpu6050_dmp_set_gyro_bias+0x1c4>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                                        /* write mem failed */
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	482e      	ldr	r0, [pc, #184]	; (8003584 <mpu6050_dmp_set_gyro_bias+0x278>)
 80034ca:	4798      	blx	r3

        return 1;                                                                                   /* return error */
 80034cc:	2301      	movs	r3, #1
 80034ce:	e050      	b.n	8003572 <mpu6050_dmp_set_gyro_bias+0x266>
    }
    regs[0] = (uint8_t)((gyro_bias_body[1] >> 24) & 0xFF);                                          /* set part 0 */
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	161b      	asrs	r3, r3, #24
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    regs[1] = (uint8_t)((gyro_bias_body[1] >> 16) & 0xFF);                                          /* set part 1 */
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	141b      	asrs	r3, r3, #16
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    regs[2] = (uint8_t)((gyro_bias_body[1] >> 8) & 0xFF);                                           /* set part 2 */
 80034e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e6:	121b      	asrs	r3, r3, #8
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    regs[3] = (uint8_t)(gyro_bias_body[1] & 0xFF);                                                  /* set part 3 */
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_EXT_GYRO_BIAS_Y, (uint8_t *)regs, 4);           /* write data */
 80034f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80034fa:	2304      	movs	r3, #4
 80034fc:	f44f 7175 	mov.w	r1, #980	; 0x3d4
 8003500:	69f8      	ldr	r0, [r7, #28]
 8003502:	f7fe fc39 	bl	8001d78 <a_mpu6050_write_mem>
 8003506:	4603      	mov	r3, r0
 8003508:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (res != 0)                                                                                   /* check result */
 800350c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <mpu6050_dmp_set_gyro_bias+0x214>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                                        /* write mem failed */
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	481a      	ldr	r0, [pc, #104]	; (8003584 <mpu6050_dmp_set_gyro_bias+0x278>)
 800351a:	4798      	blx	r3

        return 1;                                                                                   /* return error */
 800351c:	2301      	movs	r3, #1
 800351e:	e028      	b.n	8003572 <mpu6050_dmp_set_gyro_bias+0x266>
    }
    regs[0] = (uint8_t)((gyro_bias_body[2] >> 24) & 0xFF);                                          /* set part 0 */
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	161b      	asrs	r3, r3, #24
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    regs[1] = (uint8_t)((gyro_bias_body[2] >> 16) & 0xFF);                                          /* set part 1 */
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	141b      	asrs	r3, r3, #16
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    regs[2] = (uint8_t)((gyro_bias_body[2] >> 8) & 0xFF);                                           /* set part 2 */
 8003534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003536:	121b      	asrs	r3, r3, #8
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    regs[3] = (uint8_t)(gyro_bias_body[2] & 0xFF);                                                  /* set part 3 */
 800353e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_EXT_GYRO_BIAS_Z, (uint8_t *)regs, 4);           /* write data */
 8003546:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800354a:	2304      	movs	r3, #4
 800354c:	f44f 7176 	mov.w	r1, #984	; 0x3d8
 8003550:	69f8      	ldr	r0, [r7, #28]
 8003552:	f7fe fc11 	bl	8001d78 <a_mpu6050_write_mem>
 8003556:	4603      	mov	r3, r0
 8003558:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (res != 0)                                                                                   /* check result */
 800355c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <mpu6050_dmp_set_gyro_bias+0x264>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                                        /* write mem failed */
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	4806      	ldr	r0, [pc, #24]	; (8003584 <mpu6050_dmp_set_gyro_bias+0x278>)
 800356a:	4798      	blx	r3

        return 1;                                                                                   /* return error */
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <mpu6050_dmp_set_gyro_bias+0x266>
    }

    return 0;                                                                                       /* success return 0 */
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3738      	adds	r7, #56	; 0x38
 8003576:	46bd      	mov	sp, r7
 8003578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800357c:	0800bb64 	.word	0x0800bb64
 8003580:	02cae309 	.word	0x02cae309
 8003584:	0800bae8 	.word	0x0800bae8

08003588 <mpu6050_dmp_set_accel_bias>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_accel_bias(mpu6050_handle_t *handle, int32_t bias[3])
{
 8003588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800358c:	b092      	sub	sp, #72	; 0x48
 800358e:	af00      	add	r7, sp, #0
 8003590:	61f8      	str	r0, [r7, #28]
 8003592:	61b9      	str	r1, [r7, #24]
    uint8_t range;
    int32_t accel_bias_body[3];
    uint8_t regs[12];
    int64_t accel_sf;

    if (handle == NULL)                                                                     /* check handle */
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <mpu6050_dmp_set_accel_bias+0x16>
    {
        return 2;                                                                           /* return error */
 800359a:	2302      	movs	r3, #2
 800359c:	e140      	b.n	8003820 <mpu6050_dmp_set_accel_bias+0x298>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d001      	beq.n	80035ac <mpu6050_dmp_set_accel_bias+0x24>
    {
        return 3;                                                                           /* return error */
 80035a8:	2303      	movs	r3, #3
 80035aa:	e139      	b.n	8003820 <mpu6050_dmp_set_accel_bias+0x298>
    }
    if (handle->dmp_inited != 1)                                                            /* check dmp initialization */
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d005      	beq.n	80035c2 <mpu6050_dmp_set_accel_bias+0x3a>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                               /* dmp is not inited */
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	489c      	ldr	r0, [pc, #624]	; (800382c <mpu6050_dmp_set_accel_bias+0x2a4>)
 80035bc:	4798      	blx	r3

        return 4;                                                                           /* return error */
 80035be:	2304      	movs	r3, #4
 80035c0:	e12e      	b.n	8003820 <mpu6050_dmp_set_accel_bias+0x298>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 80035c2:	f107 023d 	add.w	r2, r7, #61	; 0x3d
 80035c6:	2301      	movs	r3, #1
 80035c8:	211c      	movs	r1, #28
 80035ca:	69f8      	ldr	r0, [r7, #28]
 80035cc:	f7fe fb9c 	bl	8001d08 <a_mpu6050_iic_read>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (res != 0)                                                                           /* check result */
 80035d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <mpu6050_dmp_set_accel_bias+0x62>
    {
        handle->debug_print("mpu6050: read accelerometer config failed.\n");                /* read accelerometer config failed */
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	4893      	ldr	r0, [pc, #588]	; (8003830 <mpu6050_dmp_set_accel_bias+0x2a8>)
 80035e4:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80035e6:	2301      	movs	r3, #1
 80035e8:	e11a      	b.n	8003820 <mpu6050_dmp_set_accel_bias+0x298>
    }
    range = ((prev >> 3) & 0x3);                                                            /* get the range */
 80035ea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80035ee:	08db      	lsrs	r3, r3, #3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    if (range == 0)                                                                         /* if 2g */
 80035fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <mpu6050_dmp_set_accel_bias+0x88>
    {
        accel_sf = (int64_t)16384 << 15;                                                    /* set the accel sf */
 8003602:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800360e:	e01b      	b.n	8003648 <mpu6050_dmp_set_accel_bias+0xc0>
    }
    else if (range == 1)                                                                    /* if 4g */
 8003610:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003614:	2b01      	cmp	r3, #1
 8003616:	d106      	bne.n	8003626 <mpu6050_dmp_set_accel_bias+0x9e>
    {
        accel_sf = (int64_t)8192 << 15;                                                     /* set the accel sf */
 8003618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8003624:	e010      	b.n	8003648 <mpu6050_dmp_set_accel_bias+0xc0>
    }
    else if (range == 2)                                                                    /* if 8g */
 8003626:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800362a:	2b02      	cmp	r3, #2
 800362c:	d106      	bne.n	800363c <mpu6050_dmp_set_accel_bias+0xb4>
    {
        accel_sf = (int64_t)4096 << 15;                                                     /* set the accel sf */
 800362e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 800363a:	e005      	b.n	8003648 <mpu6050_dmp_set_accel_bias+0xc0>
    }
    else                                                                                    /* if 16g */
    {
        accel_sf = (int64_t)2048 << 15;                                                     /* set the accel sf */
 800363c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003640:	f04f 0300 	mov.w	r3, #0
 8003644:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    accel_bias_body[0] = bias[handle->orient & 3];                                          /* set the bias body 0 */
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	69ba      	ldr	r2, [r7, #24]
 8003654:	4413      	add	r3, r2
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	633b      	str	r3, [r7, #48]	; 0x30
    if ((handle->orient & 4) != 0)                                                          /* check the orient */
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <mpu6050_dmp_set_accel_bias+0xe4>
    {
        accel_bias_body[0] *= -1;                                                           /* *(-1) */
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	425b      	negs	r3, r3
 800366a:	633b      	str	r3, [r7, #48]	; 0x30
    }
    accel_bias_body[1] = bias[(handle->orient >> 3) & 3];                                   /* set the bias body 1 */
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003670:	08db      	lsrs	r3, r3, #3
 8003672:	b29b      	uxth	r3, r3
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4413      	add	r3, r2
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	637b      	str	r3, [r7, #52]	; 0x34
    if ((handle->orient & 0x20) != 0)                                                       /* check the orient */
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <mpu6050_dmp_set_accel_bias+0x10c>
    {
        accel_bias_body[1] *= -1;                                                           /* *(-1) */
 800368e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003690:	425b      	negs	r3, r3
 8003692:	637b      	str	r3, [r7, #52]	; 0x34
    }
    accel_bias_body[2] = bias[(handle->orient >> 6) & 3];                                   /* set the bias body 2 */
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003698:	099b      	lsrs	r3, r3, #6
 800369a:	b29b      	uxth	r3, r3
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4413      	add	r3, r2
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	63bb      	str	r3, [r7, #56]	; 0x38
    if ((handle->orient & 0x100) != 0)                                                      /* check the orient */
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <mpu6050_dmp_set_accel_bias+0x134>
    {
        accel_bias_body[2] *= -1;                                                           /* *(-1) */
 80036b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b8:	425b      	negs	r3, r3
 80036ba:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    accel_bias_body[0] = (int32_t)(((int64_t)accel_bias_body[0] * accel_sf) >> 30);         /* set the bias body 0 */
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	17da      	asrs	r2, r3, #31
 80036c0:	613b      	str	r3, [r7, #16]
 80036c2:	617a      	str	r2, [r7, #20]
 80036c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036ca:	460a      	mov	r2, r1
 80036cc:	fb02 f203 	mul.w	r2, r2, r3
 80036d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80036d6:	4601      	mov	r1, r0
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	4413      	add	r3, r2
 80036de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036e0:	6939      	ldr	r1, [r7, #16]
 80036e2:	fba2 ab01 	umull	sl, fp, r2, r1
 80036e6:	445b      	add	r3, fp
 80036e8:	469b      	mov	fp, r3
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	ea4f 729a 	mov.w	r2, sl, lsr #30
 80036f6:	ea42 028b 	orr.w	r2, r2, fp, lsl #2
 80036fa:	ea4f 73ab 	mov.w	r3, fp, asr #30
 80036fe:	4613      	mov	r3, r2
 8003700:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias_body[1] = (int32_t)(((int64_t)accel_bias_body[1] * accel_sf) >> 30);         /* set the bias body 1 */
 8003702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003704:	17da      	asrs	r2, r3, #31
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	60fa      	str	r2, [r7, #12]
 800370a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800370c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003710:	465a      	mov	r2, fp
 8003712:	fb02 f203 	mul.w	r2, r2, r3
 8003716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003718:	4651      	mov	r1, sl
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003722:	4651      	mov	r1, sl
 8003724:	fba2 8901 	umull	r8, r9, r2, r1
 8003728:	444b      	add	r3, r9
 800372a:	4699      	mov	r9, r3
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8003738:	ea42 0289 	orr.w	r2, r2, r9, lsl #2
 800373c:	ea4f 73a9 	mov.w	r3, r9, asr #30
 8003740:	4613      	mov	r3, r2
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
    accel_bias_body[2] = (int32_t)(((int64_t)accel_bias_body[2] * accel_sf) >> 30);         /* set the bias body 2 */
 8003744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003746:	17da      	asrs	r2, r3, #31
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800374e:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003752:	464a      	mov	r2, r9
 8003754:	fb02 f203 	mul.w	r2, r2, r3
 8003758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800375a:	4641      	mov	r1, r8
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003764:	4641      	mov	r1, r8
 8003766:	fba2 4501 	umull	r4, r5, r2, r1
 800376a:	442b      	add	r3, r5
 800376c:	461d      	mov	r5, r3
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	0fa2      	lsrs	r2, r4, #30
 8003778:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800377c:	17ab      	asrs	r3, r5, #30
 800377e:	4613      	mov	r3, r2
 8003780:	63bb      	str	r3, [r7, #56]	; 0x38
    regs[0] = (uint8_t)((accel_bias_body[0] >> 24) & 0xFF);                                 /* set reg 0 */
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	161b      	asrs	r3, r3, #24
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    regs[1] = (uint8_t)((accel_bias_body[0] >> 16) & 0xFF);                                 /* set reg 1 */
 800378c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378e:	141b      	asrs	r3, r3, #16
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    regs[2] = (uint8_t)((accel_bias_body[0] >> 8) & 0xFF);                                  /* set reg 2 */
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	121b      	asrs	r3, r3, #8
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    regs[3] = (uint8_t)(accel_bias_body[0] & 0xFF);                                         /* set reg 3 */
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    regs[4] = (uint8_t)((accel_bias_body[1] >> 24) & 0xFF);                                 /* set reg 4 */
 80037a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037aa:	161b      	asrs	r3, r3, #24
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    regs[5] = (uint8_t)((accel_bias_body[1] >> 16) & 0xFF);                                 /* set reg 5 */
 80037b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037b4:	141b      	asrs	r3, r3, #16
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    regs[6] = (uint8_t)((accel_bias_body[1] >> 8) & 0xFF);                                  /* set reg 6 */
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	121b      	asrs	r3, r3, #8
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    regs[7] = (uint8_t)(accel_bias_body[1] & 0xFF);                                         /* set reg 7 */
 80037c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    regs[8] = (uint8_t)((accel_bias_body[2] >> 24) & 0xFF);                                 /* set reg 8 */
 80037ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d0:	161b      	asrs	r3, r3, #24
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    regs[9] = (uint8_t)((accel_bias_body[2] >> 16) & 0xFF);                                 /* set reg 9 */
 80037d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037da:	141b      	asrs	r3, r3, #16
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    regs[10] = (uint8_t)((accel_bias_body[2] >> 8) & 0xFF);                                 /* set reg 10 */
 80037e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e4:	121b      	asrs	r3, r3, #8
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    regs[11] = (uint8_t)(accel_bias_body[2] & 0xFF);                                        /* set reg 11 */
 80037ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_ACCEL_BIAS, (uint8_t *)regs, 12);       /* write data */
 80037f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80037f8:	230c      	movs	r3, #12
 80037fa:	f44f 7125 	mov.w	r1, #660	; 0x294
 80037fe:	69f8      	ldr	r0, [r7, #28]
 8003800:	f7fe faba 	bl	8001d78 <a_mpu6050_write_mem>
 8003804:	4603      	mov	r3, r0
 8003806:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (res != 0)                                                                           /* check result */
 800380a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <mpu6050_dmp_set_accel_bias+0x296>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                                /* write mem failed */
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	4807      	ldr	r0, [pc, #28]	; (8003834 <mpu6050_dmp_set_accel_bias+0x2ac>)
 8003818:	4798      	blx	r3

        return 1;                                                                           /* return error */
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <mpu6050_dmp_set_accel_bias+0x298>
    }

    return 0;                                                                               /* success return 0 */
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3748      	adds	r7, #72	; 0x48
 8003824:	46bd      	mov	sp, r7
 8003826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382a:	bf00      	nop
 800382c:	0800bb64 	.word	0x0800bb64
 8003830:	0800bbfc 	.word	0x0800bbfc
 8003834:	0800bae8 	.word	0x0800bae8

08003838 <mpu6050_dmp_set_orientation>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_orientation(mpu6050_handle_t *handle, int8_t mat[9])
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
    uint8_t gyro_axes[4] = {0x4C, 0xCD, 0x6C, 0x00};
 8003842:	4b7c      	ldr	r3, [pc, #496]	; (8003a34 <mpu6050_dmp_set_orientation+0x1fc>)
 8003844:	623b      	str	r3, [r7, #32]
    uint8_t accel_axes[4] = {0x0C, 0xC9, 0x2C, 0x00 };
 8003846:	4b7c      	ldr	r3, [pc, #496]	; (8003a38 <mpu6050_dmp_set_orientation+0x200>)
 8003848:	61fb      	str	r3, [r7, #28]
    uint8_t gyro_sign[4] = {0x36, 0x56, 0x76, 0x00 };
 800384a:	4b7c      	ldr	r3, [pc, #496]	; (8003a3c <mpu6050_dmp_set_orientation+0x204>)
 800384c:	61bb      	str	r3, [r7, #24]
    uint8_t accel_sign[4] = {0x26, 0x46, 0x66, 0x00 };
 800384e:	4b7c      	ldr	r3, [pc, #496]	; (8003a40 <mpu6050_dmp_set_orientation+0x208>)
 8003850:	617b      	str	r3, [r7, #20]
    uint8_t res;
    uint8_t gyro_regs[3];
    uint8_t accel_regs[3];
    uint16_t orient;

    if (handle == NULL)                                                   /* check handle */
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <mpu6050_dmp_set_orientation+0x24>
    {
        return 2;                                                         /* return error */
 8003858:	2302      	movs	r3, #2
 800385a:	e0e7      	b.n	8003a2c <mpu6050_dmp_set_orientation+0x1f4>
    }
    if (handle->inited != 1)                                              /* check handle initialization */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003862:	2b01      	cmp	r3, #1
 8003864:	d001      	beq.n	800386a <mpu6050_dmp_set_orientation+0x32>
    {
        return 3;                                                         /* return error */
 8003866:	2303      	movs	r3, #3
 8003868:	e0e0      	b.n	8003a2c <mpu6050_dmp_set_orientation+0x1f4>
    }
    if (handle->dmp_inited != 1)                                          /* check dmp initialization */
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003870:	2b01      	cmp	r3, #1
 8003872:	d005      	beq.n	8003880 <mpu6050_dmp_set_orientation+0x48>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");             /* dmp is not inited */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	4872      	ldr	r0, [pc, #456]	; (8003a44 <mpu6050_dmp_set_orientation+0x20c>)
 800387a:	4798      	blx	r3

        return 4;                                                         /* return error */
 800387c:	2304      	movs	r3, #4
 800387e:	e0d5      	b.n	8003a2c <mpu6050_dmp_set_orientation+0x1f4>
    }

    orient = a_mpu6050_inv_orientation_matrix_to_scalar(mat);             /* inv orientation matrix to scalar */
 8003880:	6838      	ldr	r0, [r7, #0]
 8003882:	f7fe fc1a 	bl	80020ba <a_mpu6050_inv_orientation_matrix_to_scalar>
 8003886:	4603      	mov	r3, r0
 8003888:	84fb      	strh	r3, [r7, #38]	; 0x26
    gyro_regs[0] = gyro_axes[orient & 3];                                 /* set the gyro regs 0 */
 800388a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	3328      	adds	r3, #40	; 0x28
 8003892:	443b      	add	r3, r7
 8003894:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8003898:	743b      	strb	r3, [r7, #16]
    gyro_regs[1] = gyro_axes[(orient >> 3) & 3];                          /* set the gyro regs 1 */
 800389a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800389c:	08db      	lsrs	r3, r3, #3
 800389e:	b29b      	uxth	r3, r3
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	3328      	adds	r3, #40	; 0x28
 80038a6:	443b      	add	r3, r7
 80038a8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80038ac:	747b      	strb	r3, [r7, #17]
    gyro_regs[2] = gyro_axes[(orient >> 6) & 3];                          /* set the gyro regs 2 */
 80038ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038b0:	099b      	lsrs	r3, r3, #6
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	3328      	adds	r3, #40	; 0x28
 80038ba:	443b      	add	r3, r7
 80038bc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80038c0:	74bb      	strb	r3, [r7, #18]
    accel_regs[0] = accel_axes[orient & 3];                               /* set the accel regs 0 */
 80038c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	3328      	adds	r3, #40	; 0x28
 80038ca:	443b      	add	r3, r7
 80038cc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80038d0:	733b      	strb	r3, [r7, #12]
    accel_regs[1] = accel_axes[(orient >> 3) & 3];                        /* set the accel regs 1 */
 80038d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038d4:	08db      	lsrs	r3, r3, #3
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	3328      	adds	r3, #40	; 0x28
 80038de:	443b      	add	r3, r7
 80038e0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80038e4:	737b      	strb	r3, [r7, #13]
    accel_regs[2] = accel_axes[(orient >> 6) & 3];                        /* set the accel regs 2 */
 80038e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038e8:	099b      	lsrs	r3, r3, #6
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	3328      	adds	r3, #40	; 0x28
 80038f2:	443b      	add	r3, r7
 80038f4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80038f8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_FCFG_1,
 80038fa:	f107 0210 	add.w	r2, r7, #16
 80038fe:	2303      	movs	r3, #3
 8003900:	f240 4126 	movw	r1, #1062	; 0x426
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7fe fa37 	bl	8001d78 <a_mpu6050_write_mem>
 800390a:	4603      	mov	r3, r0
 800390c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                              (uint8_t *)gyro_regs, 3);                   /* write data */
    if (res != 0)                                                         /* check result */
 8003910:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <mpu6050_dmp_set_orientation+0xec>
    {
        handle->debug_print("mpu6050: write mem failed.\n");              /* write mem failed */
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	484a      	ldr	r0, [pc, #296]	; (8003a48 <mpu6050_dmp_set_orientation+0x210>)
 800391e:	4798      	blx	r3

        return 1;                                                         /* return error */
 8003920:	2301      	movs	r3, #1
 8003922:	e083      	b.n	8003a2c <mpu6050_dmp_set_orientation+0x1f4>
    }
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_FCFG_2,
 8003924:	f107 020c 	add.w	r2, r7, #12
 8003928:	2303      	movs	r3, #3
 800392a:	f240 412a 	movw	r1, #1066	; 0x42a
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fe fa22 	bl	8001d78 <a_mpu6050_write_mem>
 8003934:	4603      	mov	r3, r0
 8003936:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                              (uint8_t *)accel_regs, 3);                  /* write data */
    if (res != 0)                                                         /* check result */
 800393a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <mpu6050_dmp_set_orientation+0x116>
    {
        handle->debug_print("mpu6050: write mem failed.\n");              /* write mem failed */
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	4840      	ldr	r0, [pc, #256]	; (8003a48 <mpu6050_dmp_set_orientation+0x210>)
 8003948:	4798      	blx	r3

        return 1;                                                         /* return error */
 800394a:	2301      	movs	r3, #1
 800394c:	e06e      	b.n	8003a2c <mpu6050_dmp_set_orientation+0x1f4>
    }

    memcpy(gyro_regs, gyro_sign, 3);                                      /* copy the gyro regs */
 800394e:	f107 0310 	add.w	r3, r7, #16
 8003952:	f107 0218 	add.w	r2, r7, #24
 8003956:	6812      	ldr	r2, [r2, #0]
 8003958:	4611      	mov	r1, r2
 800395a:	8019      	strh	r1, [r3, #0]
 800395c:	3302      	adds	r3, #2
 800395e:	0c12      	lsrs	r2, r2, #16
 8003960:	701a      	strb	r2, [r3, #0]
    memcpy(accel_regs, accel_sign, 3);                                    /* copy the accel regs */
 8003962:	f107 030c 	add.w	r3, r7, #12
 8003966:	f107 0214 	add.w	r2, r7, #20
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	4611      	mov	r1, r2
 800396e:	8019      	strh	r1, [r3, #0]
 8003970:	3302      	adds	r3, #2
 8003972:	0c12      	lsrs	r2, r2, #16
 8003974:	701a      	strb	r2, [r3, #0]
    if ((orient & 4) != 0)                                                /* bit 3 */
 8003976:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d009      	beq.n	8003994 <mpu6050_dmp_set_orientation+0x15c>
    {
        gyro_regs[0] |= 1;                                                /* set 1 */
 8003980:	7c3b      	ldrb	r3, [r7, #16]
 8003982:	f043 0301 	orr.w	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	743b      	strb	r3, [r7, #16]
        accel_regs[0] |= 1;                                               /* set 1 */
 800398a:	7b3b      	ldrb	r3, [r7, #12]
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	b2db      	uxtb	r3, r3
 8003992:	733b      	strb	r3, [r7, #12]
    }
    if ((orient & 0x20) != 0)                                             /* bit 6 */
 8003994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <mpu6050_dmp_set_orientation+0x17a>
    {
        gyro_regs[1] |= 1;                                                /* set 1 */
 800399e:	7c7b      	ldrb	r3, [r7, #17]
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	747b      	strb	r3, [r7, #17]
        accel_regs[1] |= 1;                                               /* set 1 */
 80039a8:	7b7b      	ldrb	r3, [r7, #13]
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	737b      	strb	r3, [r7, #13]
    }
    if ((orient & 0x100) != 0)                                            /* bit 9 */
 80039b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d009      	beq.n	80039d0 <mpu6050_dmp_set_orientation+0x198>
    {
        gyro_regs[2] |= 1;                                                /* set 1 */
 80039bc:	7cbb      	ldrb	r3, [r7, #18]
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	74bb      	strb	r3, [r7, #18]
        accel_regs[2] |= 1;                                               /* set 1 */
 80039c6:	7bbb      	ldrb	r3, [r7, #14]
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	73bb      	strb	r3, [r7, #14]
    }
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_FCFG_3,
 80039d0:	f107 0210 	add.w	r2, r7, #16
 80039d4:	2303      	movs	r3, #3
 80039d6:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fe f9cc 	bl	8001d78 <a_mpu6050_write_mem>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                              (uint8_t *)gyro_regs, 3);                   /* write data */
    if (res != 0)                                                         /* check result */
 80039e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <mpu6050_dmp_set_orientation+0x1c2>
    {
        handle->debug_print("mpu6050: write mem failed.\n");              /* write mem failed */
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	4815      	ldr	r0, [pc, #84]	; (8003a48 <mpu6050_dmp_set_orientation+0x210>)
 80039f4:	4798      	blx	r3

        return 1;                                                         /* return error */
 80039f6:	2301      	movs	r3, #1
 80039f8:	e018      	b.n	8003a2c <mpu6050_dmp_set_orientation+0x1f4>
    }
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_FCFG_7,
 80039fa:	f107 020c 	add.w	r2, r7, #12
 80039fe:	2303      	movs	r3, #3
 8003a00:	f240 4131 	movw	r1, #1073	; 0x431
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7fe f9b7 	bl	8001d78 <a_mpu6050_write_mem>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                              (uint8_t *)accel_regs, 3);                  /* write data */
    if (res != 0)                                                         /* check result */
 8003a10:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <mpu6050_dmp_set_orientation+0x1ec>
    {
        handle->debug_print("mpu6050: write mem failed.\n");              /* write mem failed */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	480a      	ldr	r0, [pc, #40]	; (8003a48 <mpu6050_dmp_set_orientation+0x210>)
 8003a1e:	4798      	blx	r3

        return 1;                                                         /* return error */
 8003a20:	2301      	movs	r3, #1
 8003a22:	e003      	b.n	8003a2c <mpu6050_dmp_set_orientation+0x1f4>
    }
    handle->orient = orient;                                              /* set the orient */
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a28:	855a      	strh	r2, [r3, #42]	; 0x2a

    return 0;                                                             /* success return 0 */
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3728      	adds	r7, #40	; 0x28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	006ccd4c 	.word	0x006ccd4c
 8003a38:	002cc90c 	.word	0x002cc90c
 8003a3c:	00765636 	.word	0x00765636
 8003a40:	00664626 	.word	0x00664626
 8003a44:	0800bb64 	.word	0x0800bb64
 8003a48:	0800bae8 	.word	0x0800bae8

08003a4c <mpu6050_dmp_set_feature>:
 *            MPU6050_DMP_FEATURE_6X_QUAT, MPU6050_DMP_FEATURE_GYRO_CAL
 *            MPU6050_DMP_FEATURE_SEND_RAW_ACCEL, MPU6050_DMP_FEATURE_SEND_RAW_GYRO
 *            MPU6050_DMP_FEATURE_SEND_CAL_GYRO or combination
 */
uint8_t mpu6050_dmp_set_feature(mpu6050_handle_t *handle, uint16_t mask)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b096      	sub	sp, #88	; 0x58
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t tmp[10];

    if (handle == NULL)                                                                  /* check handle */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d102      	bne.n	8003a64 <mpu6050_dmp_set_feature+0x18>
    {
        return 2;                                                                        /* return error */
 8003a5e:	2302      	movs	r3, #2
 8003a60:	f000 bc7b 	b.w	800435a <mpu6050_dmp_set_feature+0x90e>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d002      	beq.n	8003a74 <mpu6050_dmp_set_feature+0x28>
    {
        return 3;                                                                        /* return error */
 8003a6e:	2303      	movs	r3, #3
 8003a70:	f000 bc73 	b.w	800435a <mpu6050_dmp_set_feature+0x90e>
    }
    if (handle->dmp_inited != 1)                                                         /* check dmp initialization */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d006      	beq.n	8003a8c <mpu6050_dmp_set_feature+0x40>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                            /* dmp is not inited */
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	48c0      	ldr	r0, [pc, #768]	; (8003d84 <mpu6050_dmp_set_feature+0x338>)
 8003a84:	4798      	blx	r3

        return 4;                                                                        /* return error */
 8003a86:	2304      	movs	r3, #4
 8003a88:	f000 bc67 	b.w	800435a <mpu6050_dmp_set_feature+0x90e>
    }

    tmp[0] = (uint8_t)((MPU6050_DMP_GYRO_SF >> 24) & 0xFF);                              /* set the param 0 */
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    tmp[1] = (uint8_t)((MPU6050_DMP_GYRO_SF >> 16) & 0xFF);                              /* set the param 1 */
 8003a92:	23ca      	movs	r3, #202	; 0xca
 8003a94:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    tmp[2] = (uint8_t)((MPU6050_DMP_GYRO_SF >> 8) & 0xFF);                               /* set the param 2 */
 8003a98:	23e3      	movs	r3, #227	; 0xe3
 8003a9a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    tmp[3] = (uint8_t)(MPU6050_DMP_GYRO_SF & 0xFF);                                      /* set the param 3 */
 8003a9e:	2309      	movs	r3, #9
 8003aa0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_0_104, tmp, 4);                      /* write data */
 8003aa4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	2168      	movs	r1, #104	; 0x68
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fe f963 	bl	8001d78 <a_mpu6050_write_mem>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (res != 0)                                                                        /* check result */
 8003ab8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d006      	beq.n	8003ace <mpu6050_dmp_set_feature+0x82>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                             /* write mem failed */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	48b0      	ldr	r0, [pc, #704]	; (8003d88 <mpu6050_dmp_set_feature+0x33c>)
 8003ac6:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f000 bc46 	b.w	800435a <mpu6050_dmp_set_feature+0x90e>
    }

    tmp[0] = 0xA3;
 8003ace:	23a3      	movs	r3, #163	; 0xa3
 8003ad0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    if ((mask & MPU6050_DMP_FEATURE_SEND_RAW_ACCEL) != 0)                                /* set the raw accel */
 8003ad4:	887b      	ldrh	r3, [r7, #2]
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d009      	beq.n	8003af2 <mpu6050_dmp_set_feature+0xa6>
    {
        tmp[1] = 0xC0;                                                                   /* set the param 1 */
 8003ade:	23c0      	movs	r3, #192	; 0xc0
 8003ae0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        tmp[2] = 0xC8;                                                                   /* set the param 2 */
 8003ae4:	23c8      	movs	r3, #200	; 0xc8
 8003ae6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        tmp[3] = 0xC2;                                                                   /* set the param 3 */
 8003aea:	23c2      	movs	r3, #194	; 0xc2
 8003aec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003af0:	e008      	b.n	8003b04 <mpu6050_dmp_set_feature+0xb8>
    }
    else
    {
        tmp[1] = 0xA3;                                                                   /* set the param 1 */
 8003af2:	23a3      	movs	r3, #163	; 0xa3
 8003af4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        tmp[2] = 0xA3;                                                                   /* set the param 2 */
 8003af8:	23a3      	movs	r3, #163	; 0xa3
 8003afa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        tmp[3] = 0xA3;                                                                   /* set the param 3 */
 8003afe:	23a3      	movs	r3, #163	; 0xa3
 8003b00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }
    if ((mask & MPU6050_DMP_FEATURE_SEND_ANY_GYRO) != 0)                                 /* set any gyro */
 8003b04:	887b      	ldrh	r3, [r7, #2]
 8003b06:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <mpu6050_dmp_set_feature+0xd6>
    {
        tmp[4] = 0xC4;                                                                   /* set the param 4 */
 8003b0e:	23c4      	movs	r3, #196	; 0xc4
 8003b10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        tmp[5] = 0xCC;                                                                   /* set the param 5 */
 8003b14:	23cc      	movs	r3, #204	; 0xcc
 8003b16:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
        tmp[6] = 0xC6;                                                                   /* set the param 6 */
 8003b1a:	23c6      	movs	r3, #198	; 0xc6
 8003b1c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8003b20:	e008      	b.n	8003b34 <mpu6050_dmp_set_feature+0xe8>
    }
    else
    {
        tmp[4] = 0xA3;                                                                   /* set the param 4 */
 8003b22:	23a3      	movs	r3, #163	; 0xa3
 8003b24:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        tmp[5] = 0xA3;                                                                   /* set the param 5 */
 8003b28:	23a3      	movs	r3, #163	; 0xa3
 8003b2a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
        tmp[6] = 0xA3;                                                                   /* set the param 6 */
 8003b2e:	23a3      	movs	r3, #163	; 0xa3
 8003b30:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    }
    tmp[7] = 0xA3;                                                                       /* set the param 7 */
 8003b34:	23a3      	movs	r3, #163	; 0xa3
 8003b36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    tmp[8] = 0xA3;                                                                       /* set the param 8 */
 8003b3a:	23a3      	movs	r3, #163	; 0xa3
 8003b3c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    tmp[9] = 0xA3;                                                                       /* set the param 9 */
 8003b40:	23a3      	movs	r3, #163	; 0xa3
 8003b42:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_15, tmp, 10);                      /* write data */
 8003b46:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003b4a:	230a      	movs	r3, #10
 8003b4c:	f640 21a7 	movw	r1, #2727	; 0xaa7
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7fe f911 	bl	8001d78 <a_mpu6050_write_mem>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (res != 0)                                                                        /* check result */
 8003b5c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <mpu6050_dmp_set_feature+0x124>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                             /* write mem failed */
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	4887      	ldr	r0, [pc, #540]	; (8003d88 <mpu6050_dmp_set_feature+0x33c>)
 8003b6a:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e3f4      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
    }

    if ((mask & (MPU6050_DMP_FEATURE_TAP | MPU6050_DMP_FEATURE_ORIENT)) != 0)            /* set the cfg */
 8003b70:	887b      	ldrh	r3, [r7, #2]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <mpu6050_dmp_set_feature+0x136>
    {
        tmp[0] = 0x20;                                                                   /* set the param */
 8003b7a:	2320      	movs	r3, #32
 8003b7c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8003b80:	e002      	b.n	8003b88 <mpu6050_dmp_set_feature+0x13c>
    }
    else
    {
        tmp[0] = 0xD8;                                                                   /* set the param */
 8003b82:	23d8      	movs	r3, #216	; 0xd8
 8003b84:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    }
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_27, tmp, 1);                       /* write data */
 8003b88:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	f640 21b6 	movw	r1, #2742	; 0xab6
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe f8f0 	bl	8001d78 <a_mpu6050_write_mem>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (res != 0)                                                                        /* check result */
 8003b9e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <mpu6050_dmp_set_feature+0x166>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                             /* write mem failed */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	4877      	ldr	r0, [pc, #476]	; (8003d88 <mpu6050_dmp_set_feature+0x33c>)
 8003bac:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e3d3      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
    }

    if ((mask & MPU6050_DMP_FEATURE_GYRO_CAL) != 0)                                      /* if true */
 8003bb2:	887b      	ldrh	r3, [r7, #2]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01a      	beq.n	8003bf2 <mpu6050_dmp_set_feature+0x1a6>
    {
        uint8_t regs[9] = {0xb8, 0xaa, 0xb3, 0x8d, 0xb4, 0x98, 0x0d, 0x35, 0x5d};
 8003bbc:	4a73      	ldr	r2, [pc, #460]	; (8003d8c <mpu6050_dmp_set_feature+0x340>)
 8003bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bc4:	c303      	stmia	r3!, {r0, r1}
 8003bc6:	701a      	strb	r2, [r3, #0]

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_MOTION_BIAS, regs, 9);         /* write data */
 8003bc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bcc:	2309      	movs	r3, #9
 8003bce:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fe f8d0 	bl	8001d78 <a_mpu6050_write_mem>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003bde:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d020      	beq.n	8003c28 <mpu6050_dmp_set_feature+0x1dc>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	4867      	ldr	r0, [pc, #412]	; (8003d88 <mpu6050_dmp_set_feature+0x33c>)
 8003bec:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e3b3      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
    }
    else
    {
        uint8_t regs[9] = {0xb8, 0xaa, 0xaa, 0xaa, 0xb0, 0x88, 0xc3, 0xc5, 0xc7};
 8003bf2:	4a67      	ldr	r2, [pc, #412]	; (8003d90 <mpu6050_dmp_set_feature+0x344>)
 8003bf4:	f107 031c 	add.w	r3, r7, #28
 8003bf8:	ca07      	ldmia	r2, {r0, r1, r2}
 8003bfa:	c303      	stmia	r3!, {r0, r1}
 8003bfc:	701a      	strb	r2, [r3, #0]

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_MOTION_BIAS, regs, 9);         /* write data */
 8003bfe:	f107 021c 	add.w	r2, r7, #28
 8003c02:	2309      	movs	r3, #9
 8003c04:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7fe f8b5 	bl	8001d78 <a_mpu6050_write_mem>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003c14:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d005      	beq.n	8003c28 <mpu6050_dmp_set_feature+0x1dc>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	4859      	ldr	r0, [pc, #356]	; (8003d88 <mpu6050_dmp_set_feature+0x33c>)
 8003c22:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003c24:	2301      	movs	r3, #1
 8003c26:	e398      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
    }

    if ((mask & MPU6050_DMP_FEATURE_SEND_ANY_GYRO) != 0)                                 /* check the gyro */
 8003c28:	887b      	ldrh	r3, [r7, #2]
 8003c2a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d032      	beq.n	8003c98 <mpu6050_dmp_set_feature+0x24c>
    {
        if ((mask & MPU6050_DMP_FEATURE_SEND_CAL_GYRO) != 0)                             /* set the cal gyro */
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00c      	beq.n	8003c56 <mpu6050_dmp_set_feature+0x20a>
        {
            tmp[0] = 0xB2;                                                               /* set the param 0 */
 8003c3c:	23b2      	movs	r3, #178	; 0xb2
 8003c3e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            tmp[1] = 0x8B;                                                               /* set the param 1 */
 8003c42:	238b      	movs	r3, #139	; 0x8b
 8003c44:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            tmp[2] = 0xB6;                                                               /* set the param 2 */
 8003c48:	23b6      	movs	r3, #182	; 0xb6
 8003c4a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
            tmp[3] = 0x9B;                                                               /* set the param 3 */
 8003c4e:	239b      	movs	r3, #155	; 0x9b
 8003c50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003c54:	e00b      	b.n	8003c6e <mpu6050_dmp_set_feature+0x222>
        }
        else
        {
            tmp[0] = 0xC0;                                                               /* set the param 0 */
 8003c56:	23c0      	movs	r3, #192	; 0xc0
 8003c58:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
            tmp[1] = 0x80;                                                               /* set the param 1 */
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
            tmp[2] = 0xC2;                                                               /* set the param 2 */
 8003c62:	23c2      	movs	r3, #194	; 0xc2
 8003c64:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
            tmp[3] = 0x90;                                                               /* set the param 3 */
 8003c68:	2390      	movs	r3, #144	; 0x90
 8003c6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_GYRO_RAW_DATA, tmp, 4);        /* write data */
 8003c6e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c72:	2304      	movs	r3, #4
 8003c74:	f640 21a2 	movw	r1, #2722	; 0xaa2
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7fe f87d 	bl	8001d78 <a_mpu6050_write_mem>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003c84:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <mpu6050_dmp_set_feature+0x24c>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	483d      	ldr	r0, [pc, #244]	; (8003d88 <mpu6050_dmp_set_feature+0x33c>)
 8003c92:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003c94:	2301      	movs	r3, #1
 8003c96:	e360      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
    }

    if ((mask & MPU6050_DMP_FEATURE_TAP) != 0)                                           /* check the tap */
 8003c98:	887b      	ldrh	r3, [r7, #2]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8270 	beq.w	8004184 <mpu6050_dmp_set_feature+0x738>
        uint8_t range;
        uint16_t dmp_thresh;
        uint16_t dmp_thresh_2;
        float scaled_thresh;

        tmp[0] = 0xF8;                                                                   /* set the param */
 8003ca4:	23f8      	movs	r3, #248	; 0xf8
 8003ca6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_20, tmp, 1);                   /* write data */
 8003caa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7fe f85f 	bl	8001d78 <a_mpu6050_write_mem>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003cc0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <mpu6050_dmp_set_feature+0x288>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	482e      	ldr	r0, [pc, #184]	; (8003d88 <mpu6050_dmp_set_feature+0x33c>)
 8003cce:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e342      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }

        scaled_thresh = (float)MPU6050_DMP_TAP_THRESH / MPU6050_DMP_SAMPLE_RATE;         /* get the scaled thresh */
 8003cd4:	4b2f      	ldr	r3, [pc, #188]	; (8003d94 <mpu6050_dmp_set_feature+0x348>)
 8003cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
        res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG,
 8003cd8:	f107 021b 	add.w	r2, r7, #27
 8003cdc:	2301      	movs	r3, #1
 8003cde:	211c      	movs	r1, #28
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7fe f811 	bl	8001d08 <a_mpu6050_iic_read>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                                (uint8_t *)&prev, 1);                                    /* read accelerometer config */
        if (res != 0)                                                                    /* check result */
 8003cec:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <mpu6050_dmp_set_feature+0x2b4>
        {
            handle->debug_print("mpu6050: read accelerometer config failed.\n");         /* read accelerometer config failed */
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	4827      	ldr	r0, [pc, #156]	; (8003d98 <mpu6050_dmp_set_feature+0x34c>)
 8003cfa:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e32c      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
        range = ((prev >> 3) & 0x3);                                                     /* get the range */
 8003d00:	7efb      	ldrb	r3, [r7, #27]
 8003d02:	08db      	lsrs	r3, r3, #3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        if (range == 0)                                                                  /* if 2g */
 8003d0e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d118      	bne.n	8003d48 <mpu6050_dmp_set_feature+0x2fc>
        {
            dmp_thresh = (uint16_t)(scaled_thresh * 16384);                              /* set dmp thresh */
 8003d16:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003d1a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003d9c <mpu6050_dmp_set_feature+0x350>
 8003d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d26:	ee17 3a90 	vmov	r3, s15
 8003d2a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            dmp_thresh_2 = (uint16_t)(scaled_thresh * 12288);                            /* set dmp thresh2 */
 8003d2e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003d32:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003da0 <mpu6050_dmp_set_feature+0x354>
 8003d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d3e:	ee17 3a90 	vmov	r3, s15
 8003d42:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003d46:	e06e      	b.n	8003e26 <mpu6050_dmp_set_feature+0x3da>
        }
        else if (range == 1)                                                             /* if 4g */
 8003d48:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d135      	bne.n	8003dbc <mpu6050_dmp_set_feature+0x370>
        {
            dmp_thresh = (uint16_t)(scaled_thresh * 8192);                               /* set dmp thresh */
 8003d50:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003d54:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003da4 <mpu6050_dmp_set_feature+0x358>
 8003d58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d60:	ee17 3a90 	vmov	r3, s15
 8003d64:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            dmp_thresh_2 = (uint16_t)(scaled_thresh * 6144);                             /* set dmp thresh2 */
 8003d68:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003d6c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8003da8 <mpu6050_dmp_set_feature+0x35c>
 8003d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d78:	ee17 3a90 	vmov	r3, s15
 8003d7c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003d80:	e051      	b.n	8003e26 <mpu6050_dmp_set_feature+0x3da>
 8003d82:	bf00      	nop
 8003d84:	0800bb64 	.word	0x0800bb64
 8003d88:	0800bae8 	.word	0x0800bae8
 8003d8c:	0800bbac 	.word	0x0800bbac
 8003d90:	0800bbb8 	.word	0x0800bbb8
 8003d94:	3fa00000 	.word	0x3fa00000
 8003d98:	0800bbfc 	.word	0x0800bbfc
 8003d9c:	46800000 	.word	0x46800000
 8003da0:	46400000 	.word	0x46400000
 8003da4:	46000000 	.word	0x46000000
 8003da8:	45c00000 	.word	0x45c00000
 8003dac:	45800000 	.word	0x45800000
 8003db0:	45400000 	.word	0x45400000
 8003db4:	45000000 	.word	0x45000000
 8003db8:	44c00000 	.word	0x44c00000
        }
        else if (range == 2)                                                             /* if 8g */
 8003dbc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d118      	bne.n	8003df6 <mpu6050_dmp_set_feature+0x3aa>
        {
            dmp_thresh = (uint16_t)(scaled_thresh * 4096);                               /* set dmp thresh */
 8003dc4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003dc8:	ed1f 7a08 	vldr	s14, [pc, #-32]	; 8003dac <mpu6050_dmp_set_feature+0x360>
 8003dcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd4:	ee17 3a90 	vmov	r3, s15
 8003dd8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            dmp_thresh_2 = (uint16_t)(scaled_thresh * 3072);                             /* set dmp thresh2 */
 8003ddc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003de0:	ed1f 7a0d 	vldr	s14, [pc, #-52]	; 8003db0 <mpu6050_dmp_set_feature+0x364>
 8003de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dec:	ee17 3a90 	vmov	r3, s15
 8003df0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8003df4:	e017      	b.n	8003e26 <mpu6050_dmp_set_feature+0x3da>
        }
        else                                                                             /* if 16g */
        {
            dmp_thresh = (uint16_t)(scaled_thresh * 2048);                               /* set dmp thresh */
 8003df6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003dfa:	ed1f 7a12 	vldr	s14, [pc, #-72]	; 8003db4 <mpu6050_dmp_set_feature+0x368>
 8003dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e06:	ee17 3a90 	vmov	r3, s15
 8003e0a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            dmp_thresh_2 = (uint16_t)(scaled_thresh * 1536);                             /* set dmp thresh2 */
 8003e0e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8003e12:	ed1f 7a17 	vldr	s14, [pc, #-92]	; 8003db8 <mpu6050_dmp_set_feature+0x36c>
 8003e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e1e:	ee17 3a90 	vmov	r3, s15
 8003e22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
        }
        tmp[0] = (uint8_t)(dmp_thresh >> 8);                                             /* set part 0 */
 8003e26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        tmp[1] = (uint8_t)(dmp_thresh & 0xFF);                                           /* set part 1 */
 8003e34:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        tmp[2] = (uint8_t)(dmp_thresh_2 >> 8);                                           /* set part 2 */
 8003e3e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e42:	0a1b      	lsrs	r3, r3, #8
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        tmp[3] = (uint8_t)(dmp_thresh_2 & 0xFF);                                         /* set part 3 */
 8003e4c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_TAP_THX, tmp, 2);                  /* write tap threshold x */
 8003e56:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fd ff89 	bl	8001d78 <a_mpu6050_write_mem>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003e6c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <mpu6050_dmp_set_feature+0x434>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	48aa      	ldr	r0, [pc, #680]	; (8004124 <mpu6050_dmp_set_feature+0x6d8>)
 8003e7a:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e26c      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_36, tmp + 2, 2);               /* write register 36 */
 8003e80:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003e84:	3202      	adds	r2, #2
 8003e86:	2302      	movs	r3, #2
 8003e88:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f7fd ff73 	bl	8001d78 <a_mpu6050_write_mem>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003e98:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <mpu6050_dmp_set_feature+0x460>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	489f      	ldr	r0, [pc, #636]	; (8004124 <mpu6050_dmp_set_feature+0x6d8>)
 8003ea6:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e256      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_TAP_THY, tmp, 2);                  /* write tap threshold y */
 8003eac:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7fd ff5e 	bl	8001d78 <a_mpu6050_write_mem>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003ec2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <mpu6050_dmp_set_feature+0x48a>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	4895      	ldr	r0, [pc, #596]	; (8004124 <mpu6050_dmp_set_feature+0x6d8>)
 8003ed0:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e241      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_40, tmp + 2, 2);               /* write register 40 */
 8003ed6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003eda:	3202      	adds	r2, #2
 8003edc:	2302      	movs	r3, #2
 8003ede:	f44f 7194 	mov.w	r1, #296	; 0x128
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fd ff48 	bl	8001d78 <a_mpu6050_write_mem>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003eee:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <mpu6050_dmp_set_feature+0x4b6>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	488a      	ldr	r0, [pc, #552]	; (8004124 <mpu6050_dmp_set_feature+0x6d8>)
 8003efc:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003efe:	2301      	movs	r3, #1
 8003f00:	e22b      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_TAP_THZ, tmp, 2);                  /* write tap threshold z */
 8003f02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f06:	2302      	movs	r3, #2
 8003f08:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7fd ff33 	bl	8001d78 <a_mpu6050_write_mem>
 8003f12:	4603      	mov	r3, r0
 8003f14:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003f18:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <mpu6050_dmp_set_feature+0x4e0>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	487f      	ldr	r0, [pc, #508]	; (8004124 <mpu6050_dmp_set_feature+0x6d8>)
 8003f26:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e216      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_44, tmp + 2, 2);               /* write register 44 */
 8003f2c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f30:	3202      	adds	r2, #2
 8003f32:	2302      	movs	r3, #2
 8003f34:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7fd ff1d 	bl	8001d78 <a_mpu6050_write_mem>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003f44:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <mpu6050_dmp_set_feature+0x50c>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	4874      	ldr	r0, [pc, #464]	; (8004124 <mpu6050_dmp_set_feature+0x6d8>)
 8003f52:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003f54:	2301      	movs	r3, #1
 8003f56:	e200      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }

        tmp[0] = 0x3F;                                                                   /* enable all tap axis */
 8003f58:	233f      	movs	r3, #63	; 0x3f
 8003f5a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_72, tmp, 1);                   /* write data */
 8003f5e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f62:	2301      	movs	r3, #1
 8003f64:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7fd ff05 	bl	8001d78 <a_mpu6050_write_mem>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003f74:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <mpu6050_dmp_set_feature+0x53c>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4868      	ldr	r0, [pc, #416]	; (8004124 <mpu6050_dmp_set_feature+0x6d8>)
 8003f82:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003f84:	2301      	movs	r3, #1
 8003f86:	e1e8      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }

        tmp[0] = MPU6050_DMP_TAP_MIN_TAP_COUNT - 1;                                      /* set the counter */
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_79, tmp, 1);                   /* write data */
 8003f8e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f92:	2301      	movs	r3, #1
 8003f94:	f240 114f 	movw	r1, #335	; 0x14f
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f7fd feed 	bl	8001d78 <a_mpu6050_write_mem>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003fa4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <mpu6050_dmp_set_feature+0x56c>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	485c      	ldr	r0, [pc, #368]	; (8004124 <mpu6050_dmp_set_feature+0x6d8>)
 8003fb2:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e1d0      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }

        ms = MPU6050_DMP_TAP_TIME;                                                       /* set tap time */
 8003fb8:	2364      	movs	r3, #100	; 0x64
 8003fba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        ms /= (1000 / MPU6050_DMP_SAMPLE_RATE);                                          /* convert time */
 8003fbe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003fc2:	4a59      	ldr	r2, [pc, #356]	; (8004128 <mpu6050_dmp_set_feature+0x6dc>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	089b      	lsrs	r3, r3, #2
 8003fca:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        tmp[0] = (ms >> 8) & 0xFF;                                                       /* set part 0 */
 8003fce:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        tmp[1] = (ms >> 0) & 0xFF;                                                       /* set part 1 */
 8003fdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_TAPW_MIN, tmp, 2);                 /* write data */
 8003fe6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003fea:	2302      	movs	r3, #2
 8003fec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fd fec1 	bl	8001d78 <a_mpu6050_write_mem>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8003ffc:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <mpu6050_dmp_set_feature+0x5c4>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	4846      	ldr	r0, [pc, #280]	; (8004124 <mpu6050_dmp_set_feature+0x6d8>)
 800400a:	4798      	blx	r3

            return 1;                                                                    /* return error */
 800400c:	2301      	movs	r3, #1
 800400e:	e1a4      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }

        ms = MPU6050_DMP_TAP_TIME_MULTI;                                                 /* set tap time multi */
 8004010:	23c8      	movs	r3, #200	; 0xc8
 8004012:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        ms /= (1000 / MPU6050_DMP_SAMPLE_RATE);                                          /* convert time */
 8004016:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800401a:	4a43      	ldr	r2, [pc, #268]	; (8004128 <mpu6050_dmp_set_feature+0x6dc>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	089b      	lsrs	r3, r3, #2
 8004022:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        tmp[0] = (ms >> 8) & 0xFF;                                                       /* set part 0 */
 8004026:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800402a:	0a1b      	lsrs	r3, r3, #8
 800402c:	b29b      	uxth	r3, r3
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        tmp[1] = (ms >> 0) & 0xFF;                                                       /* set part 1 */
 8004034:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004038:	b2db      	uxtb	r3, r3
 800403a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_218, tmp, 2);                  /* write data */
 800403e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004042:	2302      	movs	r3, #2
 8004044:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7fd fe95 	bl	8001d78 <a_mpu6050_write_mem>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8004054:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <mpu6050_dmp_set_feature+0x61c>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	4830      	ldr	r0, [pc, #192]	; (8004124 <mpu6050_dmp_set_feature+0x6d8>)
 8004062:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8004064:	2301      	movs	r3, #1
 8004066:	e178      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }

        dps = MPU6050_DMP_SHAKE_REJECT_THRESH;                                           /* set the shake reject thresh */
 8004068:	23c8      	movs	r3, #200	; 0xc8
 800406a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        thresh_scaled = MPU6050_DMP_GYRO_SF / 1000 * dps;                                /* convert to thresh scaled */
 800406e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004072:	f24b 7202 	movw	r2, #46850	; 0xb702
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	643b      	str	r3, [r7, #64]	; 0x40
        tmp[0] = (uint8_t)(((uint32_t)thresh_scaled >> 24) & 0xFF);                      /* set the part 3 */
 800407c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800407e:	0e1b      	lsrs	r3, r3, #24
 8004080:	b2db      	uxtb	r3, r3
 8004082:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        tmp[1] = (uint8_t)(((uint32_t)thresh_scaled >> 16) & 0xFF);                      /* set the part 2 */
 8004086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004088:	0c1b      	lsrs	r3, r3, #16
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
        tmp[2] = (uint8_t)(((uint32_t)thresh_scaled >> 8) & 0xFF);                       /* set the part 1 */
 8004090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004092:	0a1b      	lsrs	r3, r3, #8
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        tmp[3] = (uint8_t)((uint32_t)thresh_scaled & 0xFF);                              /* set the part 0 */
 800409a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_92, tmp, 4);                   /* write data */
 80040a2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80040a6:	2304      	movs	r3, #4
 80040a8:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7fd fe63 	bl	8001d78 <a_mpu6050_write_mem>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 80040b8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <mpu6050_dmp_set_feature+0x680>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	4817      	ldr	r0, [pc, #92]	; (8004124 <mpu6050_dmp_set_feature+0x6d8>)
 80040c6:	4798      	blx	r3

            return 1;                                                                    /* return error */
 80040c8:	2301      	movs	r3, #1
 80040ca:	e146      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }

        ms = MPU6050_DMP_SHAKE_REJECT_TIME;                                              /* set the reject time */
 80040cc:	2328      	movs	r3, #40	; 0x28
 80040ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        ms /= (1000 / MPU6050_DMP_SAMPLE_RATE);                                          /* convert time */
 80040d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80040d6:	4a14      	ldr	r2, [pc, #80]	; (8004128 <mpu6050_dmp_set_feature+0x6dc>)
 80040d8:	fba2 2303 	umull	r2, r3, r2, r3
 80040dc:	089b      	lsrs	r3, r3, #2
 80040de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        tmp[0] = (ms >> 8) & 0xFF;                                                       /* set part 0 */
 80040e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        tmp[1] = (ms >> 0) & 0xFF;                                                       /* set part 1 */
 80040f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_90, tmp, 2);                   /* write data */
 80040fa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80040fe:	2302      	movs	r3, #2
 8004100:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7fd fe37 	bl	8001d78 <a_mpu6050_write_mem>
 800410a:	4603      	mov	r3, r0
 800410c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8004110:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <mpu6050_dmp_set_feature+0x6e0>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	4801      	ldr	r0, [pc, #4]	; (8004124 <mpu6050_dmp_set_feature+0x6d8>)
 800411e:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8004120:	2301      	movs	r3, #1
 8004122:	e11a      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
 8004124:	0800bae8 	.word	0x0800bae8
 8004128:	cccccccd 	.word	0xcccccccd
        }

        ms = MPU6050_DMP_SHAKE_REJECT_TIMEOUT;                                           /* set the reject timeout */
 800412c:	230a      	movs	r3, #10
 800412e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        ms /= (1000 / MPU6050_DMP_SAMPLE_RATE);                                          /* convert time */
 8004132:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004136:	4a8b      	ldr	r2, [pc, #556]	; (8004364 <mpu6050_dmp_set_feature+0x918>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
        tmp[0] = (ms >> 8) & 0xFF;                                                       /* set part 0 */
 8004142:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	b29b      	uxth	r3, r3
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        tmp[1] = (ms >> 0) & 0xFF;                                                       /* set part 1 */
 8004150:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_88, tmp, 2);                   /* write data */
 800415a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800415e:	2302      	movs	r3, #2
 8004160:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fd fe07 	bl	8001d78 <a_mpu6050_write_mem>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8004170:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004174:	2b00      	cmp	r3, #0
 8004176:	d01d      	beq.n	80041b4 <mpu6050_dmp_set_feature+0x768>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	487a      	ldr	r0, [pc, #488]	; (8004368 <mpu6050_dmp_set_feature+0x91c>)
 800417e:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8004180:	2301      	movs	r3, #1
 8004182:	e0ea      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
    }
    else
    {
        tmp[0] = 0xD8;                                                                   /* set the param */
 8004184:	23d8      	movs	r3, #216	; 0xd8
 8004186:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_20, tmp, 1);                   /* write data */
 800418a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800418e:	2301      	movs	r3, #1
 8004190:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f7fd fdef 	bl	8001d78 <a_mpu6050_write_mem>
 800419a:	4603      	mov	r3, r0
 800419c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 80041a0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <mpu6050_dmp_set_feature+0x768>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	486e      	ldr	r0, [pc, #440]	; (8004368 <mpu6050_dmp_set_feature+0x91c>)
 80041ae:	4798      	blx	r3

            return 1;                                                                    /* return error */
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0d2      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
    }

    if ((mask & MPU6050_DMP_FEATURE_ORIENT) != 0)                                        /* set the orient */
 80041b4:	887b      	ldrh	r3, [r7, #2]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <mpu6050_dmp_set_feature+0x77a>
    {
        tmp[0] = 0xD9;                                                                   /* set the param */
 80041be:	23d9      	movs	r3, #217	; 0xd9
 80041c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80041c4:	e002      	b.n	80041cc <mpu6050_dmp_set_feature+0x780>
    }
    else
    {
        tmp[0] = 0xD8;                                                                   /* set the param */
 80041c6:	23d8      	movs	r3, #216	; 0xd8
 80041c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    }
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_ORIENT_INT, tmp, 1);               /* write data */
 80041cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80041d0:	2301      	movs	r3, #1
 80041d2:	f240 713d 	movw	r1, #1853	; 0x73d
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd fdce 	bl	8001d78 <a_mpu6050_write_mem>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    if (res != 0)                                                                        /* check result */
 80041e2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <mpu6050_dmp_set_feature+0x7aa>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                             /* write mem failed */
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	485e      	ldr	r0, [pc, #376]	; (8004368 <mpu6050_dmp_set_feature+0x91c>)
 80041f0:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80041f2:	2301      	movs	r3, #1
 80041f4:	e0b1      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
    }

    if ((mask & MPU6050_DMP_FEATURE_3X_QUAT) != 0)                                       /* true */
 80041f6:	887b      	ldrh	r3, [r7, #2]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d026      	beq.n	800424e <mpu6050_dmp_set_feature+0x802>
    {
        uint8_t regs[4] = {0xC0, 0xC2, 0xC4, 0xC6};
 8004200:	4b5a      	ldr	r3, [pc, #360]	; (800436c <mpu6050_dmp_set_feature+0x920>)
 8004202:	617b      	str	r3, [r7, #20]

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_LP_QUAT, regs, 4);             /* write data */
 8004204:	f107 0214 	add.w	r2, r7, #20
 8004208:	2304      	movs	r3, #4
 800420a:	f640 2198 	movw	r1, #2712	; 0xa98
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fd fdb2 	bl	8001d78 <a_mpu6050_write_mem>
 8004214:	4603      	mov	r3, r0
 8004216:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 800421a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <mpu6050_dmp_set_feature+0x7e2>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	4850      	ldr	r0, [pc, #320]	; (8004368 <mpu6050_dmp_set_feature+0x91c>)
 8004228:	4798      	blx	r3

            return 1;                                                                    /* return error */
 800422a:	2301      	movs	r3, #1
 800422c:	e095      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
        res = a_mpu6050_reset_fifo(handle);                                              /* reset the fifo */
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fd fe18 	bl	8001e64 <a_mpu6050_reset_fifo>
 8004234:	4603      	mov	r3, r0
 8004236:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 800423a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800423e:	2b00      	cmp	r3, #0
 8004240:	d02d      	beq.n	800429e <mpu6050_dmp_set_feature+0x852>
        {
            handle->debug_print("mpu6050: reset fifo failed.\n");                        /* reset fifo failed */
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	484a      	ldr	r0, [pc, #296]	; (8004370 <mpu6050_dmp_set_feature+0x924>)
 8004248:	4798      	blx	r3

            return 1;                                                                    /* return error */
 800424a:	2301      	movs	r3, #1
 800424c:	e085      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
    }
    else
    {
        uint8_t regs[4] = {0x8B, 0x8B, 0x8B, 0x8B};
 800424e:	f04f 338b 	mov.w	r3, #2341178251	; 0x8b8b8b8b
 8004252:	613b      	str	r3, [r7, #16]

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_LP_QUAT, regs, 4);             /* write data */
 8004254:	f107 0210 	add.w	r2, r7, #16
 8004258:	2304      	movs	r3, #4
 800425a:	f640 2198 	movw	r1, #2712	; 0xa98
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7fd fd8a 	bl	8001d78 <a_mpu6050_write_mem>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 800426a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800426e:	2b00      	cmp	r3, #0
 8004270:	d005      	beq.n	800427e <mpu6050_dmp_set_feature+0x832>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	483c      	ldr	r0, [pc, #240]	; (8004368 <mpu6050_dmp_set_feature+0x91c>)
 8004278:	4798      	blx	r3

            return 1;                                                                    /* return error */
 800427a:	2301      	movs	r3, #1
 800427c:	e06d      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
        res = a_mpu6050_reset_fifo(handle);                                              /* reset the fifo */
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fd fdf0 	bl	8001e64 <a_mpu6050_reset_fifo>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 800428a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <mpu6050_dmp_set_feature+0x852>
        {
            handle->debug_print("mpu6050: reset fifo failed.\n");                        /* reset fifo failed */
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	4836      	ldr	r0, [pc, #216]	; (8004370 <mpu6050_dmp_set_feature+0x924>)
 8004298:	4798      	blx	r3

            return 1;                                                                    /* return error */
 800429a:	2301      	movs	r3, #1
 800429c:	e05d      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
    }

    if ((mask & MPU6050_DMP_FEATURE_6X_QUAT) != 0)                                       /* enable */
 800429e:	887b      	ldrh	r3, [r7, #2]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d026      	beq.n	80042f6 <mpu6050_dmp_set_feature+0x8aa>
    {
        uint8_t regs[4] = {0x20, 0x28, 0x30, 0x38};
 80042a8:	4b32      	ldr	r3, [pc, #200]	; (8004374 <mpu6050_dmp_set_feature+0x928>)
 80042aa:	60fb      	str	r3, [r7, #12]

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_8, regs, 4);                   /* write data */
 80042ac:	f107 020c 	add.w	r2, r7, #12
 80042b0:	2304      	movs	r3, #4
 80042b2:	f640 219e 	movw	r1, #2718	; 0xa9e
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fd fd5e 	bl	8001d78 <a_mpu6050_write_mem>
 80042bc:	4603      	mov	r3, r0
 80042be:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 80042c2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <mpu6050_dmp_set_feature+0x88a>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	4826      	ldr	r0, [pc, #152]	; (8004368 <mpu6050_dmp_set_feature+0x91c>)
 80042d0:	4798      	blx	r3

            return 1;                                                                    /* return error */
 80042d2:	2301      	movs	r3, #1
 80042d4:	e041      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
        res = a_mpu6050_reset_fifo(handle);                                              /* reset the fifo */
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fd fdc4 	bl	8001e64 <a_mpu6050_reset_fifo>
 80042dc:	4603      	mov	r3, r0
 80042de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 80042e2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d02d      	beq.n	8004346 <mpu6050_dmp_set_feature+0x8fa>
        {
            handle->debug_print("mpu6050: reset fifo failed.\n");                        /* reset fifo failed */
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	4820      	ldr	r0, [pc, #128]	; (8004370 <mpu6050_dmp_set_feature+0x924>)
 80042f0:	4798      	blx	r3

            return 1;                                                                    /* return error */
 80042f2:	2301      	movs	r3, #1
 80042f4:	e031      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
    }
    else
    {
        uint8_t regs[4] = {0xA3, 0xA3, 0xA3, 0xA3};
 80042f6:	f04f 33a3 	mov.w	r3, #2745410467	; 0xa3a3a3a3
 80042fa:	60bb      	str	r3, [r7, #8]

        res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_8, regs, 4);                   /* write data */
 80042fc:	f107 0208 	add.w	r2, r7, #8
 8004300:	2304      	movs	r3, #4
 8004302:	f640 219e 	movw	r1, #2718	; 0xa9e
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fd fd36 	bl	8001d78 <a_mpu6050_write_mem>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8004312:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <mpu6050_dmp_set_feature+0x8da>
        {
            handle->debug_print("mpu6050: write mem failed.\n");                         /* write mem failed */
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	4812      	ldr	r0, [pc, #72]	; (8004368 <mpu6050_dmp_set_feature+0x91c>)
 8004320:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8004322:	2301      	movs	r3, #1
 8004324:	e019      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
        res = a_mpu6050_reset_fifo(handle);                                              /* reset the fifo */
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fd fd9c 	bl	8001e64 <a_mpu6050_reset_fifo>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        if (res != 0)                                                                    /* check result */
 8004332:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <mpu6050_dmp_set_feature+0x8fa>
        {
            handle->debug_print("mpu6050: reset fifo failed.\n");                        /* reset fifo failed */
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	480c      	ldr	r0, [pc, #48]	; (8004370 <mpu6050_dmp_set_feature+0x924>)
 8004340:	4798      	blx	r3

            return 1;                                                                    /* return error */
 8004342:	2301      	movs	r3, #1
 8004344:	e009      	b.n	800435a <mpu6050_dmp_set_feature+0x90e>
        }
    }

    handle->mask = mask | MPU6050_DMP_FEATURE_PEDOMETER;                                 /* set the mask */
 8004346:	887b      	ldrh	r3, [r7, #2]
 8004348:	f043 0308 	orr.w	r3, r3, #8
 800434c:	b29a      	uxth	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	859a      	strh	r2, [r3, #44]	; 0x2c

    return a_mpu6050_reset_fifo(handle);                                                 /* reset the fifo */
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fd fd86 	bl	8001e64 <a_mpu6050_reset_fifo>
 8004358:	4603      	mov	r3, r0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3758      	adds	r7, #88	; 0x58
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	cccccccd 	.word	0xcccccccd
 8004368:	0800bae8 	.word	0x0800bae8
 800436c:	c6c4c2c0 	.word	0xc6c4c2c0
 8004370:	0800bbc4 	.word	0x0800bbc4
 8004374:	38302820 	.word	0x38302820

08004378 <mpu6050_dmp_set_fifo_rate>:
 *            - 4 dmp is not inited
 *            - 5 rate > 200
 * @note      none
 */
uint8_t mpu6050_dmp_set_fifo_rate(mpu6050_handle_t *handle, uint16_t rate)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
    uint8_t regs_end[12] = {0xFE, 0xF2, 0xAB,
 8004384:	4a2f      	ldr	r2, [pc, #188]	; (8004444 <mpu6050_dmp_set_fifo_rate+0xcc>)
 8004386:	f107 0310 	add.w	r3, r7, #16
 800438a:	ca07      	ldmia	r2, {r0, r1, r2}
 800438c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                            0xAF, 0xDF, 0xDF};
    uint8_t res;
    uint16_t d;
    uint8_t tmp[2];

    if (handle == NULL)                                                        /* check handle */
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <mpu6050_dmp_set_fifo_rate+0x22>
    {
        return 2;                                                              /* return error */
 8004396:	2302      	movs	r3, #2
 8004398:	e050      	b.n	800443c <mpu6050_dmp_set_fifo_rate+0xc4>
    }
    if (handle->inited != 1)                                                   /* check handle initialization */
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d001      	beq.n	80043a8 <mpu6050_dmp_set_fifo_rate+0x30>
    {
        return 3;                                                              /* return error */
 80043a4:	2303      	movs	r3, #3
 80043a6:	e049      	b.n	800443c <mpu6050_dmp_set_fifo_rate+0xc4>
    }
    if (handle->dmp_inited != 1)                                               /* check dmp initialization */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d005      	beq.n	80043be <mpu6050_dmp_set_fifo_rate+0x46>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                  /* dmp is not inited */
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	4824      	ldr	r0, [pc, #144]	; (8004448 <mpu6050_dmp_set_fifo_rate+0xd0>)
 80043b8:	4798      	blx	r3

        return 4;                                                              /* return error */
 80043ba:	2304      	movs	r3, #4
 80043bc:	e03e      	b.n	800443c <mpu6050_dmp_set_fifo_rate+0xc4>
    }
    if (rate > MPU6050_DMP_SAMPLE_RATE)                                        /* check rate */
 80043be:	887b      	ldrh	r3, [r7, #2]
 80043c0:	2bc8      	cmp	r3, #200	; 0xc8
 80043c2:	d905      	bls.n	80043d0 <mpu6050_dmp_set_fifo_rate+0x58>
    {
        handle->debug_print("mpu6050: rate > 200.\n");                         /* rate > 200 */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	4820      	ldr	r0, [pc, #128]	; (800444c <mpu6050_dmp_set_fifo_rate+0xd4>)
 80043ca:	4798      	blx	r3

        return 5;                                                              /* return error */
 80043cc:	2305      	movs	r3, #5
 80043ce:	e035      	b.n	800443c <mpu6050_dmp_set_fifo_rate+0xc4>
    }

    d = MPU6050_DMP_SAMPLE_RATE / rate - 1;                                    /* set div */
 80043d0:	887b      	ldrh	r3, [r7, #2]
 80043d2:	22c8      	movs	r2, #200	; 0xc8
 80043d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	83fb      	strh	r3, [r7, #30]
    tmp[0] = (uint8_t)((d >> 8) & 0xFF);                                       /* set tmp part0 */
 80043de:	8bfb      	ldrh	r3, [r7, #30]
 80043e0:	0a1b      	lsrs	r3, r3, #8
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	733b      	strb	r3, [r7, #12]
    tmp[1] = (uint8_t)(d & 0xFF);                                              /* set tmp part1 */
 80043e8:	8bfb      	ldrh	r3, [r7, #30]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	737b      	strb	r3, [r7, #13]

    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_0_22, tmp, 2);             /* write data */
 80043ee:	f107 020c 	add.w	r2, r7, #12
 80043f2:	2302      	movs	r3, #2
 80043f4:	f240 2116 	movw	r1, #534	; 0x216
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7fd fcbd 	bl	8001d78 <a_mpu6050_write_mem>
 80043fe:	4603      	mov	r3, r0
 8004400:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                              /* check result */
 8004402:	7f7b      	ldrb	r3, [r7, #29]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d005      	beq.n	8004414 <mpu6050_dmp_set_fifo_rate+0x9c>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                   /* write mem failed */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	4810      	ldr	r0, [pc, #64]	; (8004450 <mpu6050_dmp_set_fifo_rate+0xd8>)
 800440e:	4798      	blx	r3

        return 1;                                                              /* return error */
 8004410:	2301      	movs	r3, #1
 8004412:	e013      	b.n	800443c <mpu6050_dmp_set_fifo_rate+0xc4>
    }
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_CFG_6,
 8004414:	f107 0210 	add.w	r2, r7, #16
 8004418:	230c      	movs	r3, #12
 800441a:	f640 21c1 	movw	r1, #2753	; 0xac1
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7fd fcaa 	bl	8001d78 <a_mpu6050_write_mem>
 8004424:	4603      	mov	r3, r0
 8004426:	777b      	strb	r3, [r7, #29]
                             (uint8_t *)regs_end, 12);                         /* write data */
    if (res != 0)                                                              /* check result */
 8004428:	7f7b      	ldrb	r3, [r7, #29]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d005      	beq.n	800443a <mpu6050_dmp_set_fifo_rate+0xc2>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                   /* write mem failed */
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	4807      	ldr	r0, [pc, #28]	; (8004450 <mpu6050_dmp_set_fifo_rate+0xd8>)
 8004434:	4798      	blx	r3

        return 1;                                                              /* return error */
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <mpu6050_dmp_set_fifo_rate+0xc4>
    }

    return 0;                                                                  /* success return 0 */
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	0800bc40 	.word	0x0800bc40
 8004448:	0800bb64 	.word	0x0800bb64
 800444c:	0800bc28 	.word	0x0800bc28
 8004450:	0800bae8 	.word	0x0800bae8

08004454 <mpu6050_dmp_set_tap_axes>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_tap_axes(mpu6050_handle_t *handle, mpu6050_axis_t axis, mpu6050_bool_t enable)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	70fb      	strb	r3, [r7, #3]
 8004460:	4613      	mov	r3, r2
 8004462:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t tmp;
    uint8_t pos;

    if (handle == NULL)                                                        /* check handle */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <mpu6050_dmp_set_tap_axes+0x1a>
    {
        return 2;                                                              /* return error */
 800446a:	2302      	movs	r3, #2
 800446c:	e059      	b.n	8004522 <mpu6050_dmp_set_tap_axes+0xce>
    }
    if (handle->inited != 1)                                                   /* check handle initialization */
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004474:	2b01      	cmp	r3, #1
 8004476:	d001      	beq.n	800447c <mpu6050_dmp_set_tap_axes+0x28>
    {
        return 3;                                                              /* return error */
 8004478:	2303      	movs	r3, #3
 800447a:	e052      	b.n	8004522 <mpu6050_dmp_set_tap_axes+0xce>
    }
    if (handle->dmp_inited != 1)                                               /* check dmp initialization */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004482:	2b01      	cmp	r3, #1
 8004484:	d005      	beq.n	8004492 <mpu6050_dmp_set_tap_axes+0x3e>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                  /* dmp is not inited */
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	4828      	ldr	r0, [pc, #160]	; (800452c <mpu6050_dmp_set_tap_axes+0xd8>)
 800448c:	4798      	blx	r3

        return 4;                                                              /* return error */
 800448e:	2304      	movs	r3, #4
 8004490:	e047      	b.n	8004522 <mpu6050_dmp_set_tap_axes+0xce>
    }

    res = a_mpu6050_read_mem(handle, MPU6050_DMP_D_1_72, &tmp, 1);             /* read data */
 8004492:	f107 020d 	add.w	r2, r7, #13
 8004496:	2301      	movs	r3, #1
 8004498:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7fd fca6 	bl	8001dee <a_mpu6050_read_mem>
 80044a2:	4603      	mov	r3, r0
 80044a4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                              /* check result */
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <mpu6050_dmp_set_tap_axes+0x64>
    {
        handle->debug_print("mpu6050: read mem failed.\n");                    /* read mem failed */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	481f      	ldr	r0, [pc, #124]	; (8004530 <mpu6050_dmp_set_tap_axes+0xdc>)
 80044b2:	4798      	blx	r3

        return 1;                                                              /* return error */
 80044b4:	2301      	movs	r3, #1
 80044b6:	e034      	b.n	8004522 <mpu6050_dmp_set_tap_axes+0xce>
    }
    pos = (uint8_t)((axis - 5) * 2);                                           /* get the pos */
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	3b05      	subs	r3, #5
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	73bb      	strb	r3, [r7, #14]
    if (enable == MPU6050_BOOL_TRUE)                                           /* if enable */
 80044c2:	78bb      	ldrb	r3, [r7, #2]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d10b      	bne.n	80044e0 <mpu6050_dmp_set_tap_axes+0x8c>
    {
        tmp |= (3 << pos);                                                     /* enable */
 80044c8:	7bbb      	ldrb	r3, [r7, #14]
 80044ca:	2203      	movs	r2, #3
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	b25a      	sxtb	r2, r3
 80044d2:	7b7b      	ldrb	r3, [r7, #13]
 80044d4:	b25b      	sxtb	r3, r3
 80044d6:	4313      	orrs	r3, r2
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	737b      	strb	r3, [r7, #13]
 80044de:	e00c      	b.n	80044fa <mpu6050_dmp_set_tap_axes+0xa6>
    }
    else
    {
        tmp &= ~(3 << pos);                                                    /* disable */
 80044e0:	7bbb      	ldrb	r3, [r7, #14]
 80044e2:	2203      	movs	r2, #3
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	b25b      	sxtb	r3, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	b25a      	sxtb	r2, r3
 80044ee:	7b7b      	ldrb	r3, [r7, #13]
 80044f0:	b25b      	sxtb	r3, r3
 80044f2:	4013      	ands	r3, r2
 80044f4:	b25b      	sxtb	r3, r3
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	737b      	strb	r3, [r7, #13]
    }
    res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_72, &tmp, 1);            /* write data */
 80044fa:	f107 020d 	add.w	r2, r7, #13
 80044fe:	2301      	movs	r3, #1
 8004500:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fd fc37 	bl	8001d78 <a_mpu6050_write_mem>
 800450a:	4603      	mov	r3, r0
 800450c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                              /* check result */
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <mpu6050_dmp_set_tap_axes+0xcc>
    {
        handle->debug_print("mpu6050: write mem failed.\n");                   /* write mem failed */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	4806      	ldr	r0, [pc, #24]	; (8004534 <mpu6050_dmp_set_tap_axes+0xe0>)
 800451a:	4798      	blx	r3

        return 1;                                                              /* return error */
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <mpu6050_dmp_set_tap_axes+0xce>
    }

    return 0;                                                                  /* success return 0 */
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	0800bb64 	.word	0x0800bb64
 8004530:	0800bb04 	.word	0x0800bb04
 8004534:	0800bae8 	.word	0x0800bae8

08004538 <mpu6050_dmp_set_tap_thresh>:
 *            - 5 mg/ms > 1600
 *            - 6 invalid axis
 * @note      none
 */
uint8_t mpu6050_dmp_set_tap_thresh(mpu6050_handle_t *handle, mpu6050_axis_t axis, uint16_t mg_ms)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	70fb      	strb	r3, [r7, #3]
 8004544:	4613      	mov	r3, r2
 8004546:	803b      	strh	r3, [r7, #0]
    uint8_t tmp[4];
    uint16_t dmp_thresh;
    uint16_t dmp_thresh_2;
    float scaled_thresh;

    if (handle == NULL)                                                        /* check handle */
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <mpu6050_dmp_set_tap_thresh+0x1a>
    {
        return 2;                                                              /* return error */
 800454e:	2302      	movs	r3, #2
 8004550:	e13b      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
    }
    if (handle->inited != 1)                                                   /* check handle initialization */
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004558:	2b01      	cmp	r3, #1
 800455a:	d001      	beq.n	8004560 <mpu6050_dmp_set_tap_thresh+0x28>
    {
        return 3;                                                              /* return error */
 800455c:	2303      	movs	r3, #3
 800455e:	e134      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
    }
    if (handle->dmp_inited != 1)                                               /* check dmp initialization */
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004566:	2b01      	cmp	r3, #1
 8004568:	d005      	beq.n	8004576 <mpu6050_dmp_set_tap_thresh+0x3e>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                  /* dmp is not inited */
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	4899      	ldr	r0, [pc, #612]	; (80047d4 <mpu6050_dmp_set_tap_thresh+0x29c>)
 8004570:	4798      	blx	r3

        return 4;                                                              /* return error */
 8004572:	2304      	movs	r3, #4
 8004574:	e129      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
    }
    if (mg_ms > 1600)                                                          /* check the mg/ms */
 8004576:	883b      	ldrh	r3, [r7, #0]
 8004578:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800457c:	d905      	bls.n	800458a <mpu6050_dmp_set_tap_thresh+0x52>
    {
        handle->debug_print("mpu6050: mg/ms > 1600.\n");                       /* mg/ms > 1600 */
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	4895      	ldr	r0, [pc, #596]	; (80047d8 <mpu6050_dmp_set_tap_thresh+0x2a0>)
 8004584:	4798      	blx	r3

        return 5;                                                              /* return error */
 8004586:	2305      	movs	r3, #5
 8004588:	e11f      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
    }

    scaled_thresh = (float)mg_ms / MPU6050_DMP_SAMPLE_RATE;                    /* get the scaled thresh */
 800458a:	883b      	ldrh	r3, [r7, #0]
 800458c:	ee07 3a90 	vmov	s15, r3
 8004590:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004594:	eddf 6a91 	vldr	s13, [pc, #580]	; 80047dc <mpu6050_dmp_set_tap_thresh+0x2a4>
 8004598:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800459c:	edc7 7a04 	vstr	s15, [r7, #16]
    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG,
 80045a0:	f107 020d 	add.w	r2, r7, #13
 80045a4:	2301      	movs	r3, #1
 80045a6:	211c      	movs	r1, #28
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fd fbad 	bl	8001d08 <a_mpu6050_iic_read>
 80045ae:	4603      	mov	r3, r0
 80045b0:	73fb      	strb	r3, [r7, #15]
                            (uint8_t *)&prev, 1);                              /* read accelerometer config */
    if (res != 0)                                                              /* check result */
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <mpu6050_dmp_set_tap_thresh+0x8c>
    {
        handle->debug_print("mpu6050: read accelerometer config failed.\n");   /* read accelerometer config failed */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	4888      	ldr	r0, [pc, #544]	; (80047e0 <mpu6050_dmp_set_tap_thresh+0x2a8>)
 80045be:	4798      	blx	r3

        return 1;                                                              /* return error */
 80045c0:	2301      	movs	r3, #1
 80045c2:	e102      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
    }
    range = ((prev >> 3) & 0x3);                                               /* get the range */
 80045c4:	7b7b      	ldrb	r3, [r7, #13]
 80045c6:	08db      	lsrs	r3, r3, #3
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	73bb      	strb	r3, [r7, #14]
    if (range == 0)                                                            /* if 2g */
 80045d0:	7bbb      	ldrb	r3, [r7, #14]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d116      	bne.n	8004604 <mpu6050_dmp_set_tap_thresh+0xcc>
    {
        dmp_thresh = (uint16_t)(scaled_thresh * 16384);                        /* set dmp thresh */
 80045d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80045da:	ed9f 7a82 	vldr	s14, [pc, #520]	; 80047e4 <mpu6050_dmp_set_tap_thresh+0x2ac>
 80045de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e6:	ee17 3a90 	vmov	r3, s15
 80045ea:	82fb      	strh	r3, [r7, #22]
        dmp_thresh_2 = (uint16_t)(scaled_thresh * 12288);                      /* set dmp thresh2 */
 80045ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80045f0:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80047e8 <mpu6050_dmp_set_tap_thresh+0x2b0>
 80045f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045fc:	ee17 3a90 	vmov	r3, s15
 8004600:	82bb      	strh	r3, [r7, #20]
 8004602:	e049      	b.n	8004698 <mpu6050_dmp_set_tap_thresh+0x160>
    }
    else if (range == 1)                                                       /* if 4g */
 8004604:	7bbb      	ldrb	r3, [r7, #14]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d116      	bne.n	8004638 <mpu6050_dmp_set_tap_thresh+0x100>
    {
        dmp_thresh = (uint16_t)(scaled_thresh * 8192);                         /* set dmp thresh */
 800460a:	edd7 7a04 	vldr	s15, [r7, #16]
 800460e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80047ec <mpu6050_dmp_set_tap_thresh+0x2b4>
 8004612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800461a:	ee17 3a90 	vmov	r3, s15
 800461e:	82fb      	strh	r3, [r7, #22]
        dmp_thresh_2 = (uint16_t)(scaled_thresh * 6144);                       /* set dmp thresh2 */
 8004620:	edd7 7a04 	vldr	s15, [r7, #16]
 8004624:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80047f0 <mpu6050_dmp_set_tap_thresh+0x2b8>
 8004628:	ee67 7a87 	vmul.f32	s15, s15, s14
 800462c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004630:	ee17 3a90 	vmov	r3, s15
 8004634:	82bb      	strh	r3, [r7, #20]
 8004636:	e02f      	b.n	8004698 <mpu6050_dmp_set_tap_thresh+0x160>
    }
    else if (range == 2)                                                       /* if 8g */
 8004638:	7bbb      	ldrb	r3, [r7, #14]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d116      	bne.n	800466c <mpu6050_dmp_set_tap_thresh+0x134>
    {
        dmp_thresh = (uint16_t)(scaled_thresh * 4096);                         /* set dmp thresh */
 800463e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004642:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80047f4 <mpu6050_dmp_set_tap_thresh+0x2bc>
 8004646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800464a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800464e:	ee17 3a90 	vmov	r3, s15
 8004652:	82fb      	strh	r3, [r7, #22]
        dmp_thresh_2 = (uint16_t)(scaled_thresh * 3072);                       /* set dmp thresh2 */
 8004654:	edd7 7a04 	vldr	s15, [r7, #16]
 8004658:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80047f8 <mpu6050_dmp_set_tap_thresh+0x2c0>
 800465c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004664:	ee17 3a90 	vmov	r3, s15
 8004668:	82bb      	strh	r3, [r7, #20]
 800466a:	e015      	b.n	8004698 <mpu6050_dmp_set_tap_thresh+0x160>
    }
    else                                                                       /* if 16g */
    {
        dmp_thresh = (uint16_t)(scaled_thresh * 2048);                         /* set dmp thresh */
 800466c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004670:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80047fc <mpu6050_dmp_set_tap_thresh+0x2c4>
 8004674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467c:	ee17 3a90 	vmov	r3, s15
 8004680:	82fb      	strh	r3, [r7, #22]
        dmp_thresh_2 = (uint16_t)(scaled_thresh * 1536);                       /* set dmp thresh2 */
 8004682:	edd7 7a04 	vldr	s15, [r7, #16]
 8004686:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8004800 <mpu6050_dmp_set_tap_thresh+0x2c8>
 800468a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800468e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004692:	ee17 3a90 	vmov	r3, s15
 8004696:	82bb      	strh	r3, [r7, #20]
    }
    tmp[0] = (uint8_t)(dmp_thresh >> 8);                                       /* set part 0 */
 8004698:	8afb      	ldrh	r3, [r7, #22]
 800469a:	0a1b      	lsrs	r3, r3, #8
 800469c:	b29b      	uxth	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	723b      	strb	r3, [r7, #8]
    tmp[1] = (uint8_t)(dmp_thresh & 0xFF);                                     /* set part 1 */
 80046a2:	8afb      	ldrh	r3, [r7, #22]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	727b      	strb	r3, [r7, #9]
    tmp[2] = (uint8_t)(dmp_thresh_2 >> 8);                                     /* set part 2 */
 80046a8:	8abb      	ldrh	r3, [r7, #20]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	72bb      	strb	r3, [r7, #10]
    tmp[3] = (uint8_t)(dmp_thresh_2 & 0xFF);                                   /* set part 3 */
 80046b2:	8abb      	ldrh	r3, [r7, #20]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	72fb      	strb	r3, [r7, #11]

    if (axis == MPU6050_AXIS_X)                                                /* if axis x */
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	2b07      	cmp	r3, #7
 80046bc:	d128      	bne.n	8004710 <mpu6050_dmp_set_tap_thresh+0x1d8>
    {
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_TAP_THX, tmp, 2);        /* write tap threshold x */
 80046be:	f107 0208 	add.w	r2, r7, #8
 80046c2:	2302      	movs	r3, #2
 80046c4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7fd fb55 	bl	8001d78 <a_mpu6050_write_mem>
 80046ce:	4603      	mov	r3, r0
 80046d0:	73fb      	strb	r3, [r7, #15]
        if (res != 0)                                                          /* check result */
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <mpu6050_dmp_set_tap_thresh+0x1ac>
        {
            handle->debug_print("mpu6050: write mem failed.\n");               /* write mem failed */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	4849      	ldr	r0, [pc, #292]	; (8004804 <mpu6050_dmp_set_tap_thresh+0x2cc>)
 80046de:	4798      	blx	r3

            return 1;                                                          /* return error */
 80046e0:	2301      	movs	r3, #1
 80046e2:	e072      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
        }
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_36, tmp + 2, 2);     /* write register 36 */
 80046e4:	f107 0208 	add.w	r2, r7, #8
 80046e8:	3202      	adds	r2, #2
 80046ea:	2302      	movs	r3, #2
 80046ec:	f44f 7192 	mov.w	r1, #292	; 0x124
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7fd fb41 	bl	8001d78 <a_mpu6050_write_mem>
 80046f6:	4603      	mov	r3, r0
 80046f8:	73fb      	strb	r3, [r7, #15]
        if (res != 0)                                                          /* check result */
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <mpu6050_dmp_set_tap_thresh+0x1d4>
        {
            handle->debug_print("mpu6050: write mem failed.\n");               /* write mem failed */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	483f      	ldr	r0, [pc, #252]	; (8004804 <mpu6050_dmp_set_tap_thresh+0x2cc>)
 8004706:	4798      	blx	r3

            return 1;                                                          /* return error */
 8004708:	2301      	movs	r3, #1
 800470a:	e05e      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
        }

        return 0;                                                              /* success return 0 */
 800470c:	2300      	movs	r3, #0
 800470e:	e05c      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
    }
    else if (axis == MPU6050_AXIS_Y)                                           /* if axis y */
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	2b06      	cmp	r3, #6
 8004714:	d128      	bne.n	8004768 <mpu6050_dmp_set_tap_thresh+0x230>
    {
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_TAP_THY, tmp, 2);        /* write tap threshold y */
 8004716:	f107 0208 	add.w	r2, r7, #8
 800471a:	2302      	movs	r3, #2
 800471c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7fd fb29 	bl	8001d78 <a_mpu6050_write_mem>
 8004726:	4603      	mov	r3, r0
 8004728:	73fb      	strb	r3, [r7, #15]
        if (res != 0)                                                          /* check result */
 800472a:	7bfb      	ldrb	r3, [r7, #15]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <mpu6050_dmp_set_tap_thresh+0x204>
        {
            handle->debug_print("mpu6050: write mem failed.\n");               /* write mem failed */
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	4833      	ldr	r0, [pc, #204]	; (8004804 <mpu6050_dmp_set_tap_thresh+0x2cc>)
 8004736:	4798      	blx	r3

            return 1;                                                          /* return error */
 8004738:	2301      	movs	r3, #1
 800473a:	e046      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
        }
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_40, tmp + 2, 2);     /* write register 40 */
 800473c:	f107 0208 	add.w	r2, r7, #8
 8004740:	3202      	adds	r2, #2
 8004742:	2302      	movs	r3, #2
 8004744:	f44f 7194 	mov.w	r1, #296	; 0x128
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7fd fb15 	bl	8001d78 <a_mpu6050_write_mem>
 800474e:	4603      	mov	r3, r0
 8004750:	73fb      	strb	r3, [r7, #15]
        if (res != 0)                                                          /* check result */
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <mpu6050_dmp_set_tap_thresh+0x22c>
        {
            handle->debug_print("mpu6050: write mem failed.\n");               /* write mem failed */
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	4829      	ldr	r0, [pc, #164]	; (8004804 <mpu6050_dmp_set_tap_thresh+0x2cc>)
 800475e:	4798      	blx	r3

            return 1;                                                          /* return error */
 8004760:	2301      	movs	r3, #1
 8004762:	e032      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
        }

        return 0;                                                              /* success return 0 */
 8004764:	2300      	movs	r3, #0
 8004766:	e030      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
    }
    else if (axis == MPU6050_AXIS_Z)                                           /* if axis z */
 8004768:	78fb      	ldrb	r3, [r7, #3]
 800476a:	2b05      	cmp	r3, #5
 800476c:	d128      	bne.n	80047c0 <mpu6050_dmp_set_tap_thresh+0x288>
    {
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_TAP_THZ, tmp, 2);        /* write tap threshold z */
 800476e:	f107 0208 	add.w	r2, r7, #8
 8004772:	2302      	movs	r3, #2
 8004774:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7fd fafd 	bl	8001d78 <a_mpu6050_write_mem>
 800477e:	4603      	mov	r3, r0
 8004780:	73fb      	strb	r3, [r7, #15]
        if (res != 0)                                                          /* check result */
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <mpu6050_dmp_set_tap_thresh+0x25c>
        {
            handle->debug_print("mpu6050: write mem failed.\n");               /* write mem failed */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	481d      	ldr	r0, [pc, #116]	; (8004804 <mpu6050_dmp_set_tap_thresh+0x2cc>)
 800478e:	4798      	blx	r3

            return 1;                                                          /* return error */
 8004790:	2301      	movs	r3, #1
 8004792:	e01a      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
        }
        res = a_mpu6050_write_mem(handle, MPU6050_DMP_D_1_44, tmp + 2, 2);     /* write register 44 */
 8004794:	f107 0208 	add.w	r2, r7, #8
 8004798:	3202      	adds	r2, #2
 800479a:	2302      	movs	r3, #2
 800479c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7fd fae9 	bl	8001d78 <a_mpu6050_write_mem>
 80047a6:	4603      	mov	r3, r0
 80047a8:	73fb      	strb	r3, [r7, #15]
        if (res != 0)                                                          /* check result */
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d005      	beq.n	80047bc <mpu6050_dmp_set_tap_thresh+0x284>
        {
            handle->debug_print("mpu6050: write mem failed.\n");               /* write mem failed */
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	4813      	ldr	r0, [pc, #76]	; (8004804 <mpu6050_dmp_set_tap_thresh+0x2cc>)
 80047b6:	4798      	blx	r3

            return 1;                                                          /* return error */
 80047b8:	2301      	movs	r3, #1
 80047ba:	e006      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
        }

        return 0;                                                              /* success return 0 */
 80047bc:	2300      	movs	r3, #0
 80047be:	e004      	b.n	80047ca <mpu6050_dmp_set_tap_thresh+0x292>
    }
    else
    {
        handle->debug_print("mpu6050: invalid axis.\n");                       /* invalid axis */
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	4810      	ldr	r0, [pc, #64]	; (8004808 <mpu6050_dmp_set_tap_thresh+0x2d0>)
 80047c6:	4798      	blx	r3

        return 6;                                                              /* return error */
 80047c8:	2306      	movs	r3, #6
    }
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	0800bb64 	.word	0x0800bb64
 80047d8:	0800bc4c 	.word	0x0800bc4c
 80047dc:	43480000 	.word	0x43480000
 80047e0:	0800bbfc 	.word	0x0800bbfc
 80047e4:	46800000 	.word	0x46800000
 80047e8:	46400000 	.word	0x46400000
 80047ec:	46000000 	.word	0x46000000
 80047f0:	45c00000 	.word	0x45c00000
 80047f4:	45800000 	.word	0x45800000
 80047f8:	45400000 	.word	0x45400000
 80047fc:	45000000 	.word	0x45000000
 8004800:	44c00000 	.word	0x44c00000
 8004804:	0800bae8 	.word	0x0800bae8
 8004808:	0800bc64 	.word	0x0800bc64

0800480c <mpu6050_dmp_read>:
                         int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                         int32_t (*quat)[4],
                         float *pitch, float *roll, float *yaw,
                         uint16_t *l
                        )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b094      	sub	sp, #80	; 0x50
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
 8004818:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t i = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    uint8_t buf[2];
    uint8_t prev;
    uint16_t count;
    uint16_t j;

    if (handle == NULL)                                                                                                   /* check handle */
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d102      	bne.n	800482c <mpu6050_dmp_read+0x20>
    {
        return 2;                                                                                                         /* return error */
 8004826:	2302      	movs	r3, #2
 8004828:	f001 b853 	b.w	80058d2 <mpu6050_dmp_read+0x10c6>
    }
    if (handle->inited != 1)                                                                                              /* check handle initialization */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004832:	2b01      	cmp	r3, #1
 8004834:	d002      	beq.n	800483c <mpu6050_dmp_read+0x30>
    {
        return 3;                                                                                                         /* return error */
 8004836:	2303      	movs	r3, #3
 8004838:	f001 b84b 	b.w	80058d2 <mpu6050_dmp_read+0x10c6>
    }
    if (handle->dmp_inited != 1)                                                                                          /* check dmp initialization */
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004842:	2b01      	cmp	r3, #1
 8004844:	d006      	beq.n	8004854 <mpu6050_dmp_read+0x48>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                                                             /* dmp is not inited */
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	486d      	ldr	r0, [pc, #436]	; (8004a00 <mpu6050_dmp_read+0x1f4>)
 800484c:	4798      	blx	r3

        return 4;                                                                                                         /* return error */
 800484e:	2304      	movs	r3, #4
 8004850:	f001 b83f 	b.w	80058d2 <mpu6050_dmp_read+0x10c6>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_STATUS, (uint8_t *)&prev, 1);                                        /* read config */
 8004854:	f107 022b 	add.w	r2, r7, #43	; 0x2b
 8004858:	2301      	movs	r3, #1
 800485a:	213a      	movs	r1, #58	; 0x3a
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f7fd fa53 	bl	8001d08 <a_mpu6050_iic_read>
 8004862:	4603      	mov	r3, r0
 8004864:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    if (res != 0)                                                                                                         /* check result */
 8004868:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800486c:	2b00      	cmp	r3, #0
 800486e:	d006      	beq.n	800487e <mpu6050_dmp_read+0x72>
    {
        handle->debug_print("mpu6050: read int status failed.\n");                                                        /* read int status failed */
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	4863      	ldr	r0, [pc, #396]	; (8004a04 <mpu6050_dmp_read+0x1f8>)
 8004876:	4798      	blx	r3

        return 1;                                                                                                         /* return error */
 8004878:	2301      	movs	r3, #1
 800487a:	f001 b82a 	b.w	80058d2 <mpu6050_dmp_read+0x10c6>
    }
    if ((prev & (1 << MPU6050_INTERRUPT_FIFO_OVERFLOW)) != 0)                                                             /* if fifo overflow */
 800487e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <mpu6050_dmp_read+0x92>
    {
        handle->debug_print("mpu6050: fifo overflow.\n");                                                                 /* fifo overflow */
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	485e      	ldr	r0, [pc, #376]	; (8004a08 <mpu6050_dmp_read+0x1fc>)
 8004890:	4798      	blx	r3
        (void)a_mpu6050_reset_fifo(handle);                                                                               /* reset the fifo */
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7fd fae6 	bl	8001e64 <a_mpu6050_reset_fifo>

        return 6;                                                                                                         /* return error */
 8004898:	2306      	movs	r3, #6
 800489a:	f001 b81a 	b.w	80058d2 <mpu6050_dmp_read+0x10c6>
    }

    len = 0;                                                                                                              /* set len 0 */
 800489e:	2300      	movs	r3, #0
 80048a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if ((handle->mask & MPU6050_DMP_FEATURE_SEND_RAW_ACCEL) != 0)                                                         /* check the accel */
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <mpu6050_dmp_read+0xae>
    {
        len += 6;                                                                                                         /* size += 6 */
 80048b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80048b4:	3306      	adds	r3, #6
 80048b6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    }
    if ((handle->mask & MPU6050_DMP_FEATURE_SEND_ANY_GYRO) != 0)                                                          /* check the gyro */
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048be:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d004      	beq.n	80048d0 <mpu6050_dmp_read+0xc4>
    {
        len += 6;                                                                                                         /* size += 6 */
 80048c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80048ca:	3306      	adds	r3, #6
 80048cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    }
    if ((handle->mask & (MPU6050_DMP_FEATURE_3X_QUAT | MPU6050_DMP_FEATURE_6X_QUAT)) != 0)                                /* check the quat */
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048d4:	f003 0314 	and.w	r3, r3, #20
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d004      	beq.n	80048e6 <mpu6050_dmp_read+0xda>
    {
        len += 16;                                                                                                        /* size += 16 */
 80048dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80048e0:	3310      	adds	r3, #16
 80048e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    }
    if ((handle->mask & (MPU6050_DMP_FEATURE_TAP | MPU6050_DMP_FEATURE_ORIENT)) != 0)                                     /* check the tap and orient */
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d004      	beq.n	80048fc <mpu6050_dmp_read+0xf0>
    {
        len += 4;                                                                                                         /* size += 4 */
 80048f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80048f6:	3304      	adds	r3, #4
 80048f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    }
    if (len == 0)                                                                                                         /* check the len */
 80048fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d106      	bne.n	8004912 <mpu6050_dmp_read+0x106>
    {
        handle->debug_print("mpu6050: no data.\n");                                                                       /* no data */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	4840      	ldr	r0, [pc, #256]	; (8004a0c <mpu6050_dmp_read+0x200>)
 800490a:	4798      	blx	r3

        return 8;                                                                                                         /* return error */
 800490c:	2308      	movs	r3, #8
 800490e:	f000 bfe0 	b.w	80058d2 <mpu6050_dmp_read+0x10c6>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_COUNTH, (uint8_t *)buf, 2);                                         /* read fifo count */
 8004912:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004916:	2302      	movs	r3, #2
 8004918:	2172      	movs	r1, #114	; 0x72
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f7fd f9f4 	bl	8001d08 <a_mpu6050_iic_read>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    if (res != 0)                                                                                                         /* check result */
 8004926:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800492a:	2b00      	cmp	r3, #0
 800492c:	d006      	beq.n	800493c <mpu6050_dmp_read+0x130>
    {
        handle->debug_print("mpu6050: read fifo count failed.\n");                                                        /* read fifo count failed */
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	4837      	ldr	r0, [pc, #220]	; (8004a10 <mpu6050_dmp_read+0x204>)
 8004934:	4798      	blx	r3

        return 1;                                                                                                         /* return error */
 8004936:	2301      	movs	r3, #1
 8004938:	f000 bfcb 	b.w	80058d2 <mpu6050_dmp_read+0x10c6>
    }
    count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                                                 /* set count */
 800493c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004940:	021b      	lsls	r3, r3, #8
 8004942:	b21a      	sxth	r2, r3
 8004944:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004948:	b21b      	sxth	r3, r3
 800494a:	4313      	orrs	r3, r2
 800494c:	b21b      	sxth	r3, r3
 800494e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    count = (count < 1024) ? count : 1024;                                                                                /* just the counter */
 8004952:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495a:	bf28      	it	cs
 800495c:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8004960:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    count = (count < (*l) * len) ? count : ((*l) *len);                                                                   /* just outer buffer size */
 8004964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800496e:	fb03 f202 	mul.w	r2, r3, r2
 8004972:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004976:	4293      	cmp	r3, r2
 8004978:	bfa8      	it	ge
 800497a:	4613      	movge	r3, r2
 800497c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    count = (count / len) * len;                                                                                          /* len times */
 8004980:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004984:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	b29b      	uxth	r3, r3
 800498e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004992:	fb12 f303 	smulbb	r3, r2, r3
 8004996:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    *l = count / len;                                                                                                     /* set the output length */
 800499a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800499e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80049a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049aa:	801a      	strh	r2, [r3, #0]
    res = a_mpu6050_iic_read(handle, MPU6050_REG_R_W, handle->buf, count);                                                /* read data */
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 80049b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049b6:	2174      	movs	r1, #116	; 0x74
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f7fd f9a5 	bl	8001d08 <a_mpu6050_iic_read>
 80049be:	4603      	mov	r3, r0
 80049c0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
    if (res != 0)                                                                                                         /* check result */
 80049c4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d006      	beq.n	80049da <mpu6050_dmp_read+0x1ce>
    {
        handle->debug_print("mpu6050: read failed.\n");                                                                   /* read failed */
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	4810      	ldr	r0, [pc, #64]	; (8004a14 <mpu6050_dmp_read+0x208>)
 80049d2:	4798      	blx	r3

        return 1;                                                                                                         /* return error */
 80049d4:	2301      	movs	r3, #1
 80049d6:	f000 bf7c 	b.w	80058d2 <mpu6050_dmp_read+0x10c6>
    }
    if (count < len)                                                                                                      /* check the count */
 80049da:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80049de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d206      	bcs.n	80049f4 <mpu6050_dmp_read+0x1e8>
    {
        handle->debug_print("mpu6050: fifo data is too little.\n");                                                       /* fifo data is too little */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	480b      	ldr	r0, [pc, #44]	; (8004a18 <mpu6050_dmp_read+0x20c>)
 80049ec:	4798      	blx	r3

        return 7;                                                                                                         /* return error */
 80049ee:	2307      	movs	r3, #7
 80049f0:	f000 bf6f 	b.w	80058d2 <mpu6050_dmp_read+0x10c6>
    }

    for (j = 0; j < (*l); j++)                                                                                            /* (*l) times */
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80049fa:	f000 bf62 	b.w	80058c2 <mpu6050_dmp_read+0x10b6>
 80049fe:	bf00      	nop
 8004a00:	0800bb64 	.word	0x0800bb64
 8004a04:	0800bc7c 	.word	0x0800bc7c
 8004a08:	0800bca0 	.word	0x0800bca0
 8004a0c:	0800bcbc 	.word	0x0800bcbc
 8004a10:	0800bcd0 	.word	0x0800bcd0
 8004a14:	0800bcf4 	.word	0x0800bcf4
 8004a18:	0800bd0c 	.word	0x0800bd0c
    {
        if ((handle->mask & (MPU6050_DMP_FEATURE_3X_QUAT | MPU6050_DMP_FEATURE_6X_QUAT)) != 0)                            /* check the quat */
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a20:	f003 0314 	and.w	r3, r3, #20
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8219 	beq.w	8004e5c <mpu6050_dmp_read+0x650>
        {
            int32_t quat_q14[4];
            int32_t quat_mag_sq;
            float q0=1.0f, q1=0.0f, q2=0.0f, q3=0.0f;
 8004a2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	637b      	str	r3, [r7, #52]	; 0x34

            i = 0;                                                                                                        /* set 0 */
 8004a42:	2300      	movs	r3, #0
 8004a44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            quat[j][0] = ((int32_t)handle->buf[0 + len * j] << 24) | ((int32_t)handle->buf[1 + len * j] << 16) |
 8004a48:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a4c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004a50:	fb02 f303 	mul.w	r3, r2, r3
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004a5c:	061a      	lsls	r2, r3, #24
 8004a5e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a62:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004a66:	fb01 f303 	mul.w	r3, r1, r3
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	68f9      	ldr	r1, [r7, #12]
 8004a6e:	440b      	add	r3, r1
 8004a70:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004a74:	041b      	lsls	r3, r3, #16
 8004a76:	431a      	orrs	r2, r3
                         ((int32_t)handle->buf[2 + len * j] << 8) | handle->buf[3 + len * j];                             /* set the quat 0 */
 8004a78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a7c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	3302      	adds	r3, #2
 8004a86:	68f9      	ldr	r1, [r7, #12]
 8004a88:	440b      	add	r3, r1
 8004a8a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004a8e:	021b      	lsls	r3, r3, #8
            quat[j][0] = ((int32_t)handle->buf[0 + len * j] << 24) | ((int32_t)handle->buf[1 + len * j] << 16) |
 8004a90:	431a      	orrs	r2, r3
                         ((int32_t)handle->buf[2 + len * j] << 8) | handle->buf[3 + len * j];                             /* set the quat 0 */
 8004a92:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004a96:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004a9a:	fb01 f303 	mul.w	r3, r1, r3
 8004a9e:	3303      	adds	r3, #3
 8004aa0:	68f9      	ldr	r1, [r7, #12]
 8004aa2:	440b      	add	r3, r1
 8004aa4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004aa8:	4618      	mov	r0, r3
            quat[j][0] = ((int32_t)handle->buf[0 + len * j] << 24) | ((int32_t)handle->buf[1 + len * j] << 16) |
 8004aaa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004aae:	011b      	lsls	r3, r3, #4
 8004ab0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004ab2:	440b      	add	r3, r1
                         ((int32_t)handle->buf[2 + len * j] << 8) | handle->buf[3 + len * j];                             /* set the quat 0 */
 8004ab4:	4302      	orrs	r2, r0
            quat[j][0] = ((int32_t)handle->buf[0 + len * j] << 24) | ((int32_t)handle->buf[1 + len * j] << 16) |
 8004ab6:	601a      	str	r2, [r3, #0]
            quat[j][1] = ((int32_t)handle->buf[4 + len * j] << 24) | ((int32_t)handle->buf[5 + len * j] << 16) |
 8004ab8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004abc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004ac0:	fb02 f303 	mul.w	r3, r2, r3
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004ace:	061a      	lsls	r2, r3, #24
 8004ad0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ad4:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004ad8:	fb01 f303 	mul.w	r3, r1, r3
 8004adc:	3305      	adds	r3, #5
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	440b      	add	r3, r1
 8004ae2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004ae6:	041b      	lsls	r3, r3, #16
 8004ae8:	431a      	orrs	r2, r3
                         ((int32_t)handle->buf[6 + len * j] << 8) | handle->buf[7 + len * j];                             /* set the quat 1 */
 8004aea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004aee:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004af2:	fb01 f303 	mul.w	r3, r1, r3
 8004af6:	3306      	adds	r3, #6
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	440b      	add	r3, r1
 8004afc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004b00:	021b      	lsls	r3, r3, #8
            quat[j][1] = ((int32_t)handle->buf[4 + len * j] << 24) | ((int32_t)handle->buf[5 + len * j] << 16) |
 8004b02:	431a      	orrs	r2, r3
                         ((int32_t)handle->buf[6 + len * j] << 8) | handle->buf[7 + len * j];                             /* set the quat 1 */
 8004b04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b08:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004b0c:	fb01 f303 	mul.w	r3, r1, r3
 8004b10:	3307      	adds	r3, #7
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	440b      	add	r3, r1
 8004b16:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004b1a:	4618      	mov	r0, r3
            quat[j][1] = ((int32_t)handle->buf[4 + len * j] << 24) | ((int32_t)handle->buf[5 + len * j] << 16) |
 8004b1c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b24:	440b      	add	r3, r1
                         ((int32_t)handle->buf[6 + len * j] << 8) | handle->buf[7 + len * j];                             /* set the quat 1 */
 8004b26:	4302      	orrs	r2, r0
            quat[j][1] = ((int32_t)handle->buf[4 + len * j] << 24) | ((int32_t)handle->buf[5 + len * j] << 16) |
 8004b28:	605a      	str	r2, [r3, #4]
            quat[j][2] = ((int32_t)handle->buf[8 + len * j] << 24) | ((int32_t)handle->buf[9 + len * j] << 16) |
 8004b2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b2e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004b32:	fb02 f303 	mul.w	r3, r2, r3
 8004b36:	3308      	adds	r3, #8
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004b40:	061a      	lsls	r2, r3, #24
 8004b42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b46:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	3309      	adds	r3, #9
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	440b      	add	r3, r1
 8004b54:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	431a      	orrs	r2, r3
                         ((int32_t)handle->buf[10 + len * j] << 8) | handle->buf[11 + len * j];                           /* set the quat 2 */
 8004b5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b60:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004b64:	fb01 f303 	mul.w	r3, r1, r3
 8004b68:	330a      	adds	r3, #10
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	440b      	add	r3, r1
 8004b6e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004b72:	021b      	lsls	r3, r3, #8
            quat[j][2] = ((int32_t)handle->buf[8 + len * j] << 24) | ((int32_t)handle->buf[9 + len * j] << 16) |
 8004b74:	431a      	orrs	r2, r3
                         ((int32_t)handle->buf[10 + len * j] << 8) | handle->buf[11 + len * j];                           /* set the quat 2 */
 8004b76:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004b7a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004b7e:	fb01 f303 	mul.w	r3, r1, r3
 8004b82:	330b      	adds	r3, #11
 8004b84:	68f9      	ldr	r1, [r7, #12]
 8004b86:	440b      	add	r3, r1
 8004b88:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004b8c:	4618      	mov	r0, r3
            quat[j][2] = ((int32_t)handle->buf[8 + len * j] << 24) | ((int32_t)handle->buf[9 + len * j] << 16) |
 8004b8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b96:	440b      	add	r3, r1
                         ((int32_t)handle->buf[10 + len * j] << 8) | handle->buf[11 + len * j];                           /* set the quat 2 */
 8004b98:	4302      	orrs	r2, r0
            quat[j][2] = ((int32_t)handle->buf[8 + len * j] << 24) | ((int32_t)handle->buf[9 + len * j] << 16) |
 8004b9a:	609a      	str	r2, [r3, #8]
            quat[j][3] = ((int32_t)handle->buf[12 + len * j] << 24) | ((int32_t)handle->buf[13 + len * j] << 16) |
 8004b9c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ba0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004ba4:	fb02 f303 	mul.w	r3, r2, r3
 8004ba8:	330c      	adds	r3, #12
 8004baa:	68fa      	ldr	r2, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004bb2:	061a      	lsls	r2, r3, #24
 8004bb4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bb8:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	330d      	adds	r3, #13
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	440b      	add	r3, r1
 8004bc6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004bca:	041b      	lsls	r3, r3, #16
 8004bcc:	431a      	orrs	r2, r3
                         ((int32_t)handle->buf[14 + len * j] << 8) | handle->buf[15 + len * j];                           /* set the quat 3 */
 8004bce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bd2:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004bd6:	fb01 f303 	mul.w	r3, r1, r3
 8004bda:	330e      	adds	r3, #14
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	440b      	add	r3, r1
 8004be0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004be4:	021b      	lsls	r3, r3, #8
            quat[j][3] = ((int32_t)handle->buf[12 + len * j] << 24) | ((int32_t)handle->buf[13 + len * j] << 16) |
 8004be6:	431a      	orrs	r2, r3
                         ((int32_t)handle->buf[14 + len * j] << 8) | handle->buf[15 + len * j];                           /* set the quat 3 */
 8004be8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bec:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	330f      	adds	r3, #15
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	440b      	add	r3, r1
 8004bfa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004bfe:	4618      	mov	r0, r3
            quat[j][3] = ((int32_t)handle->buf[12 + len * j] << 24) | ((int32_t)handle->buf[13 + len * j] << 16) |
 8004c00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004c08:	440b      	add	r3, r1
                         ((int32_t)handle->buf[14 + len * j] << 8) | handle->buf[15 + len * j];                           /* set the quat 3 */
 8004c0a:	4302      	orrs	r2, r0
            quat[j][3] = ((int32_t)handle->buf[12 + len * j] << 24) | ((int32_t)handle->buf[13 + len * j] << 16) |
 8004c0c:	60da      	str	r2, [r3, #12]
            i += 16;                                                                                                      /* size += 16 */
 8004c0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004c12:	3310      	adds	r3, #16
 8004c14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

            quat_q14[0] = quat[j][0] >> 16;                                                                               /* set the quat q14[0] */
 8004c18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c20:	4413      	add	r3, r2
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	141b      	asrs	r3, r3, #16
 8004c26:	61bb      	str	r3, [r7, #24]
            quat_q14[1] = quat[j][1] >> 16;                                                                               /* set the quat q14[1] */
 8004c28:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c30:	4413      	add	r3, r2
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	141b      	asrs	r3, r3, #16
 8004c36:	61fb      	str	r3, [r7, #28]
            quat_q14[2] = quat[j][2] >> 16;                                                                               /* set the quat q14[2] */
 8004c38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c40:	4413      	add	r3, r2
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	141b      	asrs	r3, r3, #16
 8004c46:	623b      	str	r3, [r7, #32]
            quat_q14[3] = quat[j][3] >> 16;                                                                               /* set the quat q14[3] */
 8004c48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c50:	4413      	add	r3, r2
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	141b      	asrs	r3, r3, #16
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
            quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	fb03 f202 	mul.w	r2, r3, r2
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	69f9      	ldr	r1, [r7, #28]
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	441a      	add	r2, r3
                          quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];                                          /* get the quat mag sq */
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	6a39      	ldr	r1, [r7, #32]
 8004c6e:	fb01 f303 	mul.w	r3, r1, r3
            quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004c72:	441a      	add	r2, r3
                          quat_q14[2] * quat_q14[2] + quat_q14[3] * quat_q14[3];                                          /* get the quat mag sq */
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
            quat_mag_sq = quat_q14[0] * quat_q14[0] + quat_q14[1] * quat_q14[1] +
 8004c7c:	4413      	add	r3, r2
 8004c7e:	633b      	str	r3, [r7, #48]	; 0x30
            if ((quat_mag_sq < MPU6050_DMP_QUAT_MAG_SQ_MIN) ||
 8004c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c82:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004c86:	db03      	blt.n	8004c90 <mpu6050_dmp_read+0x484>
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	f1b3 5f88 	cmp.w	r3, #285212672	; 0x11000000
 8004c8e:	dd09      	ble.n	8004ca4 <mpu6050_dmp_read+0x498>
                (quat_mag_sq > MPU6050_DMP_QUAT_MAG_SQ_MAX))                                                              /* check the size */
            {
                handle->debug_print("mpu6050: quat check error.\n");                                                      /* quat check error */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	48dd      	ldr	r0, [pc, #884]	; (800500c <mpu6050_dmp_read+0x800>)
 8004c96:	4798      	blx	r3
                (void)a_mpu6050_reset_fifo(handle);                                                                       /* reset the fifo */
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f7fd f8e3 	bl	8001e64 <a_mpu6050_reset_fifo>

                return 5;                                                                                                 /* return error */
 8004c9e:	2305      	movs	r3, #5
 8004ca0:	f000 be17 	b.w	80058d2 <mpu6050_dmp_read+0x10c6>
            }
            q0 = quat[j][0] / 1073741824.0f;                                                                              /* set q0 */
 8004ca4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cac:	4413      	add	r3, r2
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	ee07 3a90 	vmov	s15, r3
 8004cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cb8:	eddf 6ad5 	vldr	s13, [pc, #852]	; 8005010 <mpu6050_dmp_read+0x804>
 8004cbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cc0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            q1 = quat[j][1] / 1073741824.0f;                                                                              /* set q1 */
 8004cc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ccc:	4413      	add	r3, r2
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cd8:	eddf 6acd 	vldr	s13, [pc, #820]	; 8005010 <mpu6050_dmp_read+0x804>
 8004cdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ce0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            q2 = quat[j][2] / 1073741824.0f;                                                                              /* set q2 */
 8004ce4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ce8:	011b      	lsls	r3, r3, #4
 8004cea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cec:	4413      	add	r3, r2
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	ee07 3a90 	vmov	s15, r3
 8004cf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cf8:	eddf 6ac5 	vldr	s13, [pc, #788]	; 8005010 <mpu6050_dmp_read+0x804>
 8004cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d00:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            q3 = quat[j][3] / 1073741824.0f;                                                                              /* set q3 */
 8004d04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d0c:	4413      	add	r3, r2
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	ee07 3a90 	vmov	s15, r3
 8004d14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d18:	eddf 6abd 	vldr	s13, [pc, #756]	; 8005010 <mpu6050_dmp_read+0x804>
 8004d1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d20:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            pitch[j] = asinf(-2 * q1 * q3 + 2 * q0* q2)* 57.3f;                                                           /* set pitch */
 8004d24:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004d28:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004d2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d30:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004d34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d38:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004d3c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004d40:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d50:	f005 ff52 	bl	800abf8 <asinf>
 8004d54:	eef0 7a40 	vmov.f32	s15, s0
 8004d58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d60:	4413      	add	r3, r2
 8004d62:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8005014 <mpu6050_dmp_read+0x808>
 8004d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d6a:	edc3 7a00 	vstr	s15, [r3]
            roll[j] = atan2f(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1)* 57.3f;                           /* set roll */
 8004d6e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004d72:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004d76:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d7e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004d82:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004d86:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004d8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d8e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004d92:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004d96:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004d9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d9e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004da2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004da6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004daa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004dae:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004db2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004dc2:	eef0 0a67 	vmov.f32	s1, s15
 8004dc6:	eeb0 0a46 	vmov.f32	s0, s12
 8004dca:	f005 ff41 	bl	800ac50 <atan2f>
 8004dce:	eef0 7a40 	vmov.f32	s15, s0
 8004dd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004dda:	4413      	add	r3, r2
 8004ddc:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8005014 <mpu6050_dmp_read+0x808>
 8004de0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004de4:	edc3 7a00 	vstr	s15, [r3]
            yaw[j] = atan2f(2 * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3) * 57.3f;                      /* set yaw */
 8004de8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004dec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004df4:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8004df8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e04:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8004e08:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004e0c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004e10:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004e14:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004e18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e1c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004e20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004e24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e28:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004e2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e34:	eef0 0a67 	vmov.f32	s1, s15
 8004e38:	eeb0 0a66 	vmov.f32	s0, s13
 8004e3c:	f005 ff08 	bl	800ac50 <atan2f>
 8004e40:	eef0 7a40 	vmov.f32	s15, s0
 8004e44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e4c:	4413      	add	r3, r2
 8004e4e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8005014 <mpu6050_dmp_read+0x808>
 8004e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e56:	edc3 7a00 	vstr	s15, [r3]
 8004e5a:	e033      	b.n	8004ec4 <mpu6050_dmp_read+0x6b8>
        }
        else
        {
            quat[j][0] = 0;                                                                                               /* set 0 */
 8004e5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e64:	4413      	add	r3, r2
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
            quat[j][1] = 0;                                                                                               /* set 0 */
 8004e6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e72:	4413      	add	r3, r2
 8004e74:	2200      	movs	r2, #0
 8004e76:	605a      	str	r2, [r3, #4]
            quat[j][2] = 0;                                                                                               /* set 0 */
 8004e78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e80:	4413      	add	r3, r2
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
            quat[j][3] = 0;                                                                                               /* set 0 */
 8004e86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e8a:	011b      	lsls	r3, r3, #4
 8004e8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e8e:	4413      	add	r3, r2
 8004e90:	2200      	movs	r2, #0
 8004e92:	60da      	str	r2, [r3, #12]
            pitch[j] = 0.0f;                                                                                              /* set 0.0f */
 8004e94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
            roll[j] = 0.0f;                                                                                               /* set 0.0f */
 8004ea4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004eac:	4413      	add	r3, r2
 8004eae:	f04f 0200 	mov.w	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
            yaw[j] = 0.0f;                                                                                                /* set 0.0f */
 8004eb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
        }
        if ((handle->mask & MPU6050_DMP_FEATURE_SEND_RAW_ACCEL) != 0)                                                     /* check the accel */
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8229 	beq.w	8005324 <mpu6050_dmp_read+0xb18>
        {
            uint8_t accel_conf;

            accel_raw[j][0] = ((int16_t)handle->buf[i + 0 + len * j] << 8) | handle->buf[i + 1 + len * j];                /* set the accel x raw data */
 8004ed2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004ed6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004eda:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004ede:	fb01 f303 	mul.w	r3, r1, r3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	b218      	sxth	r0, r3
 8004ef0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004efa:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004efe:	fb01 f303 	mul.w	r3, r1, r3
 8004f02:	4413      	add	r3, r2
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4413      	add	r3, r2
 8004f08:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004f0c:	b219      	sxth	r1, r3
 8004f0e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004f12:	4613      	mov	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4413      	add	r3, r2
 8004f20:	ea40 0201 	orr.w	r2, r0, r1
 8004f24:	b212      	sxth	r2, r2
 8004f26:	801a      	strh	r2, [r3, #0]
            accel_raw[j][1] = ((int16_t)handle->buf[i + 2 + len * j] << 8) | handle->buf[i + 3 + len * j];                /* set the accel y raw data */
 8004f28:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f2c:	1c9a      	adds	r2, r3, #2
 8004f2e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004f32:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004f36:	fb01 f303 	mul.w	r3, r1, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004f44:	021b      	lsls	r3, r3, #8
 8004f46:	b218      	sxth	r0, r3
 8004f48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f4c:	1cda      	adds	r2, r3, #3
 8004f4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004f52:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004f56:	fb01 f303 	mul.w	r3, r1, r3
 8004f5a:	4413      	add	r3, r2
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004f64:	b219      	sxth	r1, r3
 8004f66:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	4413      	add	r3, r2
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	461a      	mov	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4413      	add	r3, r2
 8004f78:	ea40 0201 	orr.w	r2, r0, r1
 8004f7c:	b212      	sxth	r2, r2
 8004f7e:	805a      	strh	r2, [r3, #2]
            accel_raw[j][2] = ((int16_t)handle->buf[i + 4 + len * j] << 8) | handle->buf[i + 5 + len * j];                /* set the accel z raw data */
 8004f80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004f84:	1d1a      	adds	r2, r3, #4
 8004f86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004f8a:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4413      	add	r3, r2
 8004f98:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	b218      	sxth	r0, r3
 8004fa0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fa4:	1d5a      	adds	r2, r3, #5
 8004fa6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004faa:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004fae:	fb01 f303 	mul.w	r3, r1, r3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004fbc:	b219      	sxth	r1, r3
 8004fbe:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	005b      	lsls	r3, r3, #1
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4413      	add	r3, r2
 8004fd0:	ea40 0201 	orr.w	r2, r0, r1
 8004fd4:	b212      	sxth	r2, r2
 8004fd6:	809a      	strh	r2, [r3, #4]
            i += 6;                                                                                                       /* size += 6 */
 8004fd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004fdc:	3306      	adds	r3, #6
 8004fde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

            res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);                        /* read accel config */
 8004fe2:	f107 0217 	add.w	r2, r7, #23
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	211c      	movs	r1, #28
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f7fc fe8c 	bl	8001d08 <a_mpu6050_iic_read>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
            if (res != 0)                                                                                                 /* check result */
 8004ff6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d016      	beq.n	800502c <mpu6050_dmp_read+0x820>
            {
                handle->debug_print("mpu6050: read accel config failed.\n");                                              /* read accel config failed */
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	4805      	ldr	r0, [pc, #20]	; (8005018 <mpu6050_dmp_read+0x80c>)
 8005004:	4798      	blx	r3

                return 1;                                                                                                 /* return error */
 8005006:	2301      	movs	r3, #1
 8005008:	f000 bc63 	b.w	80058d2 <mpu6050_dmp_read+0x10c6>
 800500c:	0800bd30 	.word	0x0800bd30
 8005010:	4e800000 	.word	0x4e800000
 8005014:	42653333 	.word	0x42653333
 8005018:	0800bd4c 	.word	0x0800bd4c
 800501c:	46800000 	.word	0x46800000
 8005020:	46000000 	.word	0x46000000
 8005024:	45800000 	.word	0x45800000
 8005028:	45000000 	.word	0x45000000
            }
            accel_conf = (accel_conf >> 3) & 0x3;                                                                         /* get the accel conf */
 800502c:	7dfb      	ldrb	r3, [r7, #23]
 800502e:	08db      	lsrs	r3, r3, #3
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	b2db      	uxtb	r3, r3
 8005038:	75fb      	strb	r3, [r7, #23]
            if (accel_conf == 0)                                                                                          /* ±2g */
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d15a      	bne.n	80050f6 <mpu6050_dmp_read+0x8ea>
            {
                accel_g[j][0] = (float)(accel_raw[j][0]) / 16384.0f;                                                      /* set accel x */
 8005040:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005044:	4613      	mov	r3, r2
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	4413      	add	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	461a      	mov	r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4413      	add	r3, r2
 8005052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800505e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005062:	4613      	mov	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	461a      	mov	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4413      	add	r3, r2
 8005070:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 800501c <mpu6050_dmp_read+0x810>
 8005074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005078:	edc3 7a00 	vstr	s15, [r3]
                accel_g[j][1] = (float)(accel_raw[j][1]) / 16384.0f;                                                      /* set accel y */
 800507c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005080:	4613      	mov	r3, r2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	4413      	add	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	461a      	mov	r2, r3
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4413      	add	r3, r2
 800508e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800509a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800509e:	4613      	mov	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	461a      	mov	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4413      	add	r3, r2
 80050ac:	ed5f 6a25 	vldr	s13, [pc, #-148]	; 800501c <mpu6050_dmp_read+0x810>
 80050b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050b4:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[j][2] = (float)(accel_raw[j][2]) / 16384.0f;                                                      /* set accel z */
 80050b8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80050bc:	4613      	mov	r3, r2
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	4413      	add	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	461a      	mov	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4413      	add	r3, r2
 80050ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80050ce:	ee07 3a90 	vmov	s15, r3
 80050d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050d6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80050da:	4613      	mov	r3, r2
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	461a      	mov	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4413      	add	r3, r2
 80050e8:	ed5f 6a34 	vldr	s13, [pc, #-208]	; 800501c <mpu6050_dmp_read+0x810>
 80050ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050f0:	edc3 7a02 	vstr	s15, [r3, #8]
 80050f4:	e15b      	b.n	80053ae <mpu6050_dmp_read+0xba2>
            }
            else if (accel_conf == 1)                                                                                     /* ±4g */
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d15a      	bne.n	80051b2 <mpu6050_dmp_read+0x9a6>
            {
                accel_g[j][0] = (float)(accel_raw[j][0]) / 8192.0f;                                                       /* set accel x */
 80050fc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005100:	4613      	mov	r3, r2
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	4413      	add	r3, r2
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	461a      	mov	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	4413      	add	r3, r2
 800510e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005112:	ee07 3a90 	vmov	s15, r3
 8005116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800511a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800511e:	4613      	mov	r3, r2
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	461a      	mov	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4413      	add	r3, r2
 800512c:	ed5f 6a44 	vldr	s13, [pc, #-272]	; 8005020 <mpu6050_dmp_read+0x814>
 8005130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005134:	edc3 7a00 	vstr	s15, [r3]
                accel_g[j][1] = (float)(accel_raw[j][1]) / 8192.0f;                                                       /* set accel y */
 8005138:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800513c:	4613      	mov	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	4413      	add	r3, r2
 8005142:	005b      	lsls	r3, r3, #1
 8005144:	461a      	mov	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4413      	add	r3, r2
 800514a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005156:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800515a:	4613      	mov	r3, r2
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	461a      	mov	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	ed5f 6a53 	vldr	s13, [pc, #-332]	; 8005020 <mpu6050_dmp_read+0x814>
 800516c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005170:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[j][2] = (float)(accel_raw[j][2]) / 8192.0f;                                                       /* set accel z */
 8005174:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005178:	4613      	mov	r3, r2
 800517a:	005b      	lsls	r3, r3, #1
 800517c:	4413      	add	r3, r2
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	461a      	mov	r2, r3
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4413      	add	r3, r2
 8005186:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005192:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	461a      	mov	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4413      	add	r3, r2
 80051a4:	ed5f 6a62 	vldr	s13, [pc, #-392]	; 8005020 <mpu6050_dmp_read+0x814>
 80051a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051ac:	edc3 7a02 	vstr	s15, [r3, #8]
 80051b0:	e0fd      	b.n	80053ae <mpu6050_dmp_read+0xba2>
            }
            else if (accel_conf == 2)                                                                                     /* ±8g */
 80051b2:	7dfb      	ldrb	r3, [r7, #23]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d15a      	bne.n	800526e <mpu6050_dmp_read+0xa62>
            {
                accel_g[j][0] = (float)(accel_raw[j][0]) / 4096.0f;                                                       /* set accel x */
 80051b8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80051bc:	4613      	mov	r3, r2
 80051be:	005b      	lsls	r3, r3, #1
 80051c0:	4413      	add	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	461a      	mov	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	4413      	add	r3, r2
 80051ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80051d6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80051da:	4613      	mov	r3, r2
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	461a      	mov	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4413      	add	r3, r2
 80051e8:	ed5f 6a72 	vldr	s13, [pc, #-456]	; 8005024 <mpu6050_dmp_read+0x818>
 80051ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80051f0:	edc3 7a00 	vstr	s15, [r3]
                accel_g[j][1] = (float)(accel_raw[j][1]) / 4096.0f;                                                       /* set accel y */
 80051f4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80051f8:	4613      	mov	r3, r2
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	461a      	mov	r2, r3
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	4413      	add	r3, r2
 8005206:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005212:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005216:	4613      	mov	r3, r2
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	461a      	mov	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4413      	add	r3, r2
 8005224:	ed5f 6a81 	vldr	s13, [pc, #-516]	; 8005024 <mpu6050_dmp_read+0x818>
 8005228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800522c:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[j][2] = (float)(accel_raw[j][2]) / 4096.0f;                                                       /* set accel z */
 8005230:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	461a      	mov	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	4413      	add	r3, r2
 8005242:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005246:	ee07 3a90 	vmov	s15, r3
 800524a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800524e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005252:	4613      	mov	r3, r2
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	461a      	mov	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4413      	add	r3, r2
 8005260:	ed5f 6a90 	vldr	s13, [pc, #-576]	; 8005024 <mpu6050_dmp_read+0x818>
 8005264:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005268:	edc3 7a02 	vstr	s15, [r3, #8]
 800526c:	e09f      	b.n	80053ae <mpu6050_dmp_read+0xba2>
            }
            else                                                                                                          /* ±16g */
            {
                accel_g[j][0] = (float)(accel_raw[j][0]) / 2048.0f;                                                       /* set accel x */
 800526e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005272:	4613      	mov	r3, r2
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	4413      	add	r3, r2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	461a      	mov	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4413      	add	r3, r2
 8005280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005284:	ee07 3a90 	vmov	s15, r3
 8005288:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800528c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005290:	4613      	mov	r3, r2
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	461a      	mov	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4413      	add	r3, r2
 800529e:	ed5f 6a9e 	vldr	s13, [pc, #-632]	; 8005028 <mpu6050_dmp_read+0x81c>
 80052a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052a6:	edc3 7a00 	vstr	s15, [r3]
                accel_g[j][1] = (float)(accel_raw[j][1]) / 2048.0f;                                                       /* set accel y */
 80052aa:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80052ae:	4613      	mov	r3, r2
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	4413      	add	r3, r2
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	461a      	mov	r2, r3
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4413      	add	r3, r2
 80052bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80052c0:	ee07 3a90 	vmov	s15, r3
 80052c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052c8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80052cc:	4613      	mov	r3, r2
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	461a      	mov	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4413      	add	r3, r2
 80052da:	ed5f 6aad 	vldr	s13, [pc, #-692]	; 8005028 <mpu6050_dmp_read+0x81c>
 80052de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052e2:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[j][2] = (float)(accel_raw[j][2]) / 2048.0f;                                                       /* set accel z */
 80052e6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80052ea:	4613      	mov	r3, r2
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	4413      	add	r3, r2
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	461a      	mov	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4413      	add	r3, r2
 80052f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80052fc:	ee07 3a90 	vmov	s15, r3
 8005300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005304:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005308:	4613      	mov	r3, r2
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	461a      	mov	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4413      	add	r3, r2
 8005316:	ed5f 6abc 	vldr	s13, [pc, #-752]	; 8005028 <mpu6050_dmp_read+0x81c>
 800531a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800531e:	edc3 7a02 	vstr	s15, [r3, #8]
 8005322:	e044      	b.n	80053ae <mpu6050_dmp_read+0xba2>
            }
        }
        else
        {
            accel_raw[j][0] = 0;                                                                                          /* set 0 */
 8005324:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005328:	4613      	mov	r3, r2
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	4413      	add	r3, r2
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	461a      	mov	r2, r3
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4413      	add	r3, r2
 8005336:	2200      	movs	r2, #0
 8005338:	801a      	strh	r2, [r3, #0]
            accel_raw[j][1] = 0;                                                                                          /* set 0 */
 800533a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800533e:	4613      	mov	r3, r2
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	4413      	add	r3, r2
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	461a      	mov	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4413      	add	r3, r2
 800534c:	2200      	movs	r2, #0
 800534e:	805a      	strh	r2, [r3, #2]
            accel_raw[j][2] = 0;                                                                                          /* set 0 */
 8005350:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005354:	4613      	mov	r3, r2
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	4413      	add	r3, r2
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	461a      	mov	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4413      	add	r3, r2
 8005362:	2200      	movs	r2, #0
 8005364:	809a      	strh	r2, [r3, #4]
            accel_g[j][0] = 0.0f;                                                                                         /* set 0.0f */
 8005366:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800536a:	4613      	mov	r3, r2
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	461a      	mov	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4413      	add	r3, r2
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
            accel_g[j][1] = 0.0f;                                                                                         /* set 0.0f */
 800537e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005382:	4613      	mov	r3, r2
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	461a      	mov	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4413      	add	r3, r2
 8005390:	f04f 0200 	mov.w	r2, #0
 8005394:	605a      	str	r2, [r3, #4]
            accel_g[j][2] = 0.0f;                                                                                         /* set 0.0f */
 8005396:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800539a:	4613      	mov	r3, r2
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	461a      	mov	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4413      	add	r3, r2
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	609a      	str	r2, [r3, #8]
        }
        if ((handle->mask & MPU6050_DMP_FEATURE_SEND_ANY_GYRO) != 0)                                                      /* check the gyro */
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053b2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 8222 	beq.w	8005800 <mpu6050_dmp_read+0xff4>
        {
            uint8_t gyro_conf;

            gyro_raw[j][0] = ((int16_t)handle->buf[i + 0 + len * j] << 8) | handle->buf[i + 1 + len * j];                 /* set the gyro x raw data */
 80053bc:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80053c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80053c4:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80053c8:	fb01 f303 	mul.w	r3, r1, r3
 80053cc:	4413      	add	r3, r2
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	b218      	sxth	r0, r3
 80053da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80053e4:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 80053e8:	fb01 f303 	mul.w	r3, r1, r3
 80053ec:	4413      	add	r3, r2
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80053f6:	b219      	sxth	r1, r3
 80053f8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80053fc:	4613      	mov	r3, r2
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	4413      	add	r3, r2
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	461a      	mov	r2, r3
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	4413      	add	r3, r2
 800540a:	ea40 0201 	orr.w	r2, r0, r1
 800540e:	b212      	sxth	r2, r2
 8005410:	801a      	strh	r2, [r3, #0]
            gyro_raw[j][1] = ((int16_t)handle->buf[i + 2 + len * j] << 8) | handle->buf[i + 3 + len * j];                 /* set the gyro y raw data */
 8005412:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005416:	1c9a      	adds	r2, r3, #2
 8005418:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800541c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8005420:	fb01 f303 	mul.w	r3, r1, r3
 8005424:	4413      	add	r3, r2
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800542e:	021b      	lsls	r3, r3, #8
 8005430:	b218      	sxth	r0, r3
 8005432:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005436:	1cda      	adds	r2, r3, #3
 8005438:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800543c:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8005440:	fb01 f303 	mul.w	r3, r1, r3
 8005444:	4413      	add	r3, r2
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800544e:	b219      	sxth	r1, r3
 8005450:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005454:	4613      	mov	r3, r2
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	4413      	add	r3, r2
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	461a      	mov	r2, r3
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	4413      	add	r3, r2
 8005462:	ea40 0201 	orr.w	r2, r0, r1
 8005466:	b212      	sxth	r2, r2
 8005468:	805a      	strh	r2, [r3, #2]
            gyro_raw[j][2] = ((int16_t)handle->buf[i + 4 + len * j] << 8) | handle->buf[i + 5 + len * j];                 /* set the gyro z raw data */
 800546a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800546e:	1d1a      	adds	r2, r3, #4
 8005470:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005474:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	4413      	add	r3, r2
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	b218      	sxth	r0, r3
 800548a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800548e:	1d5a      	adds	r2, r3, #5
 8005490:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005494:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	4413      	add	r3, r2
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80054a6:	b219      	sxth	r1, r3
 80054a8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80054ac:	4613      	mov	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	4413      	add	r3, r2
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	461a      	mov	r2, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	4413      	add	r3, r2
 80054ba:	ea40 0201 	orr.w	r2, r0, r1
 80054be:	b212      	sxth	r2, r2
 80054c0:	809a      	strh	r2, [r3, #4]
            i += 6;                                                                                                       /* size += 6 */
 80054c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80054c6:	3306      	adds	r3, #6
 80054c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

            res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);                          /* read gyro config */
 80054cc:	f107 0216 	add.w	r2, r7, #22
 80054d0:	2301      	movs	r3, #1
 80054d2:	211b      	movs	r1, #27
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f7fc fc17 	bl	8001d08 <a_mpu6050_iic_read>
 80054da:	4603      	mov	r3, r0
 80054dc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
            if (res != 0)                                                                                                 /* check result */
 80054e0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <mpu6050_dmp_read+0xce8>
            {
                handle->debug_print("mpu6050: read gyro config failed.\n");                                               /* read gyro config failed */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	48bf      	ldr	r0, [pc, #764]	; (80057ec <mpu6050_dmp_read+0xfe0>)
 80054ee:	4798      	blx	r3

                return 1;                                                                                                 /* return error */
 80054f0:	2301      	movs	r3, #1
 80054f2:	e1ee      	b.n	80058d2 <mpu6050_dmp_read+0x10c6>
            }
            gyro_conf = (gyro_conf >> 3) & 0x3;                                                                           /* get the gyro conf */
 80054f4:	7dbb      	ldrb	r3, [r7, #22]
 80054f6:	08db      	lsrs	r3, r3, #3
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	75bb      	strb	r3, [r7, #22]
            if (gyro_conf == 0)                                                                                           /* ±250dps */
 8005502:	7dbb      	ldrb	r3, [r7, #22]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d15a      	bne.n	80055be <mpu6050_dmp_read+0xdb2>
            {
                gyro_dps[j][0] = (float)(gyro_raw[j][0]) / 131.0f;                                                        /* set gyro x */
 8005508:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800550c:	4613      	mov	r3, r2
 800550e:	005b      	lsls	r3, r3, #1
 8005510:	4413      	add	r3, r2
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	461a      	mov	r2, r3
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	4413      	add	r3, r2
 800551a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005526:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800552a:	4613      	mov	r3, r2
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	461a      	mov	r2, r3
 8005534:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005536:	4413      	add	r3, r2
 8005538:	eddf 6aad 	vldr	s13, [pc, #692]	; 80057f0 <mpu6050_dmp_read+0xfe4>
 800553c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005540:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[j][1] = (float)(gyro_raw[j][1]) / 131.0f;                                                        /* set gyro y */
 8005544:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005548:	4613      	mov	r3, r2
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	4413      	add	r3, r2
 800554e:	005b      	lsls	r3, r3, #1
 8005550:	461a      	mov	r2, r3
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	4413      	add	r3, r2
 8005556:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005562:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005566:	4613      	mov	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	461a      	mov	r2, r3
 8005570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005572:	4413      	add	r3, r2
 8005574:	eddf 6a9e 	vldr	s13, [pc, #632]	; 80057f0 <mpu6050_dmp_read+0xfe4>
 8005578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800557c:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[j][2] = (float)(gyro_raw[j][2]) / 131.0f;                                                        /* set gyro z */
 8005580:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005584:	4613      	mov	r3, r2
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	4413      	add	r3, r2
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	461a      	mov	r2, r3
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	4413      	add	r3, r2
 8005592:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800559e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80055a2:	4613      	mov	r3, r2
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	4413      	add	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	461a      	mov	r2, r3
 80055ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055ae:	4413      	add	r3, r2
 80055b0:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80057f0 <mpu6050_dmp_read+0xfe4>
 80055b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055b8:	edc3 7a02 	vstr	s15, [r3, #8]
 80055bc:	e165      	b.n	800588a <mpu6050_dmp_read+0x107e>
            }
            else if (gyro_conf == 1)                                                                                      /* ±500dps */
 80055be:	7dbb      	ldrb	r3, [r7, #22]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d15a      	bne.n	800567a <mpu6050_dmp_read+0xe6e>
            {
                gyro_dps[j][0] = (float)(gyro_raw[j][0]) / 65.5f;                                                         /* set gyro x */
 80055c4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80055c8:	4613      	mov	r3, r2
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	4413      	add	r3, r2
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	461a      	mov	r2, r3
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	4413      	add	r3, r2
 80055d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055da:	ee07 3a90 	vmov	s15, r3
 80055de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055e2:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80055e6:	4613      	mov	r3, r2
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	461a      	mov	r2, r3
 80055f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055f2:	4413      	add	r3, r2
 80055f4:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80057f4 <mpu6050_dmp_read+0xfe8>
 80055f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055fc:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[j][1] = (float)(gyro_raw[j][1]) / 65.5f;                                                         /* set gyro y */
 8005600:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005604:	4613      	mov	r3, r2
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	4413      	add	r3, r2
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	461a      	mov	r2, r3
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	4413      	add	r3, r2
 8005612:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800561e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005622:	4613      	mov	r3, r2
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	461a      	mov	r2, r3
 800562c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800562e:	4413      	add	r3, r2
 8005630:	eddf 6a70 	vldr	s13, [pc, #448]	; 80057f4 <mpu6050_dmp_read+0xfe8>
 8005634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005638:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[j][2] = (float)(gyro_raw[j][2]) / 65.5f;                                                         /* set gyro z */
 800563c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005640:	4613      	mov	r3, r2
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	4413      	add	r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	461a      	mov	r2, r3
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	4413      	add	r3, r2
 800564e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005652:	ee07 3a90 	vmov	s15, r3
 8005656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800565a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800565e:	4613      	mov	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	461a      	mov	r2, r3
 8005668:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800566a:	4413      	add	r3, r2
 800566c:	eddf 6a61 	vldr	s13, [pc, #388]	; 80057f4 <mpu6050_dmp_read+0xfe8>
 8005670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005674:	edc3 7a02 	vstr	s15, [r3, #8]
 8005678:	e107      	b.n	800588a <mpu6050_dmp_read+0x107e>
            }
            else if (gyro_conf == 2)                                                                                      /* ±1000dps */
 800567a:	7dbb      	ldrb	r3, [r7, #22]
 800567c:	2b02      	cmp	r3, #2
 800567e:	d15a      	bne.n	8005736 <mpu6050_dmp_read+0xf2a>
            {
                gyro_dps[j][0] = (float)(gyro_raw[j][0]) / 32.8f;                                                         /* set gyro x */
 8005680:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005684:	4613      	mov	r3, r2
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	4413      	add	r3, r2
 800568a:	005b      	lsls	r3, r3, #1
 800568c:	461a      	mov	r2, r3
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	4413      	add	r3, r2
 8005692:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005696:	ee07 3a90 	vmov	s15, r3
 800569a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800569e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80056a2:	4613      	mov	r3, r2
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	461a      	mov	r2, r3
 80056ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ae:	4413      	add	r3, r2
 80056b0:	eddf 6a51 	vldr	s13, [pc, #324]	; 80057f8 <mpu6050_dmp_read+0xfec>
 80056b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056b8:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[j][1] = (float)(gyro_raw[j][1]) / 32.8f;                                                         /* set gyro y */
 80056bc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80056c0:	4613      	mov	r3, r2
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	4413      	add	r3, r2
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	461a      	mov	r2, r3
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	4413      	add	r3, r2
 80056ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056da:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80056de:	4613      	mov	r3, r2
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	461a      	mov	r2, r3
 80056e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056ea:	4413      	add	r3, r2
 80056ec:	eddf 6a42 	vldr	s13, [pc, #264]	; 80057f8 <mpu6050_dmp_read+0xfec>
 80056f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056f4:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[j][2] = (float)(gyro_raw[j][2]) / 32.8f;                                                         /* set gyro z */
 80056f8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80056fc:	4613      	mov	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	4413      	add	r3, r2
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	461a      	mov	r2, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	4413      	add	r3, r2
 800570a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005716:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800571a:	4613      	mov	r3, r2
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	4413      	add	r3, r2
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	461a      	mov	r2, r3
 8005724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005726:	4413      	add	r3, r2
 8005728:	eddf 6a33 	vldr	s13, [pc, #204]	; 80057f8 <mpu6050_dmp_read+0xfec>
 800572c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005730:	edc3 7a02 	vstr	s15, [r3, #8]
 8005734:	e0a9      	b.n	800588a <mpu6050_dmp_read+0x107e>
            }
            else                                                                                                          /* ±2000dps */
            {
                gyro_dps[j][0] = (float)(gyro_raw[j][0]) / 16.4f;                                                         /* set gyro x */
 8005736:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800573a:	4613      	mov	r3, r2
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	4413      	add	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	461a      	mov	r2, r3
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	4413      	add	r3, r2
 8005748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005754:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005758:	4613      	mov	r3, r2
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	4413      	add	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	461a      	mov	r2, r3
 8005762:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005764:	4413      	add	r3, r2
 8005766:	eddf 6a25 	vldr	s13, [pc, #148]	; 80057fc <mpu6050_dmp_read+0xff0>
 800576a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800576e:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[j][1] = (float)(gyro_raw[j][1]) / 16.4f;                                                         /* set gyro y */
 8005772:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005776:	4613      	mov	r3, r2
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4413      	add	r3, r2
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	461a      	mov	r2, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	4413      	add	r3, r2
 8005784:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005790:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005794:	4613      	mov	r3, r2
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	4413      	add	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	461a      	mov	r2, r3
 800579e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057a0:	4413      	add	r3, r2
 80057a2:	eddf 6a16 	vldr	s13, [pc, #88]	; 80057fc <mpu6050_dmp_read+0xff0>
 80057a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057aa:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[j][2] = (float)(gyro_raw[j][2]) / 16.4f;                                                         /* set gyro z */
 80057ae:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80057b2:	4613      	mov	r3, r2
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	4413      	add	r3, r2
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	461a      	mov	r2, r3
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	4413      	add	r3, r2
 80057c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80057c4:	ee07 3a90 	vmov	s15, r3
 80057c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057cc:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80057d0:	4613      	mov	r3, r2
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	461a      	mov	r2, r3
 80057da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057dc:	4413      	add	r3, r2
 80057de:	eddf 6a07 	vldr	s13, [pc, #28]	; 80057fc <mpu6050_dmp_read+0xff0>
 80057e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057e6:	edc3 7a02 	vstr	s15, [r3, #8]
 80057ea:	e04e      	b.n	800588a <mpu6050_dmp_read+0x107e>
 80057ec:	0800bd70 	.word	0x0800bd70
 80057f0:	43030000 	.word	0x43030000
 80057f4:	42830000 	.word	0x42830000
 80057f8:	42033333 	.word	0x42033333
 80057fc:	41833333 	.word	0x41833333
            }
        }
        else
        {
            gyro_raw[j][0] = 0;                                                                                           /* set 0 */
 8005800:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005804:	4613      	mov	r3, r2
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	4413      	add	r3, r2
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	461a      	mov	r2, r3
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	4413      	add	r3, r2
 8005812:	2200      	movs	r2, #0
 8005814:	801a      	strh	r2, [r3, #0]
            gyro_raw[j][1] = 0;                                                                                           /* set 0 */
 8005816:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800581a:	4613      	mov	r3, r2
 800581c:	005b      	lsls	r3, r3, #1
 800581e:	4413      	add	r3, r2
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	461a      	mov	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	4413      	add	r3, r2
 8005828:	2200      	movs	r2, #0
 800582a:	805a      	strh	r2, [r3, #2]
            gyro_raw[j][2] = 0;                                                                                           /* set 0 */
 800582c:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005830:	4613      	mov	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	4413      	add	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	461a      	mov	r2, r3
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	4413      	add	r3, r2
 800583e:	2200      	movs	r2, #0
 8005840:	809a      	strh	r2, [r3, #4]
            gyro_dps[j][0] = 0.0f;                                                                                        /* set 0.0f */
 8005842:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005846:	4613      	mov	r3, r2
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	461a      	mov	r2, r3
 8005850:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005852:	4413      	add	r3, r2
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
            gyro_dps[j][1] = 0.0f;                                                                                        /* set 0.0f */
 800585a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800585e:	4613      	mov	r3, r2
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	461a      	mov	r2, r3
 8005868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800586a:	4413      	add	r3, r2
 800586c:	f04f 0200 	mov.w	r2, #0
 8005870:	605a      	str	r2, [r3, #4]
            gyro_dps[j][2] = 0.0f;                                                                                        /* set 0.0f */
 8005872:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8005876:	4613      	mov	r3, r2
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	461a      	mov	r2, r3
 8005880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005882:	4413      	add	r3, r2
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	609a      	str	r2, [r3, #8]
        }
        if ((handle->mask & (MPU6050_DMP_FEATURE_TAP | MPU6050_DMP_FEATURE_ORIENT)) != 0)                                 /* check the tap and orient */
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d010      	beq.n	80058b8 <mpu6050_dmp_read+0x10ac>
        {
            a_mpu6050_dmp_decode_gesture(handle, handle->buf + i + len * j);                                              /* run the decode gesture */
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800589c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80058a0:	f8b7 104c 	ldrh.w	r1, [r7, #76]	; 0x4c
 80058a4:	f8b7 004a 	ldrh.w	r0, [r7, #74]	; 0x4a
 80058a8:	fb00 f101 	mul.w	r1, r0, r1
 80058ac:	440b      	add	r3, r1
 80058ae:	4413      	add	r3, r2
 80058b0:	4619      	mov	r1, r3
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f7fc fc29 	bl	800210a <a_mpu6050_dmp_decode_gesture>
    for (j = 0; j < (*l); j++)                                                                                            /* (*l) times */
 80058b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80058bc:	3301      	adds	r3, #1
 80058be:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80058c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80058ca:	429a      	cmp	r2, r3
 80058cc:	f4ff a8a6 	bcc.w	8004a1c <mpu6050_dmp_read+0x210>
        }
    }

    return 0;                                                                                                             /* success return 0 */
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3750      	adds	r7, #80	; 0x50
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop

080058dc <mpu6050_dmp_set_tap_callback>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_tap_callback(mpu6050_handle_t *handle, void (*callback)(uint8_t count, uint8_t direction))
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
    if (handle == NULL)                                              /* check handle */
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <mpu6050_dmp_set_tap_callback+0x14>
    {
        return 2;                                                    /* return error */
 80058ec:	2302      	movs	r3, #2
 80058ee:	e015      	b.n	800591c <mpu6050_dmp_set_tap_callback+0x40>
    }
    if (handle->inited != 1)                                         /* check handle initialization */
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d001      	beq.n	80058fe <mpu6050_dmp_set_tap_callback+0x22>
    {
        return 3;                                                    /* return error */
 80058fa:	2303      	movs	r3, #3
 80058fc:	e00e      	b.n	800591c <mpu6050_dmp_set_tap_callback+0x40>
    }
    if (handle->dmp_inited != 1)                                     /* check dmp initialization */
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005904:	2b01      	cmp	r3, #1
 8005906:	d005      	beq.n	8005914 <mpu6050_dmp_set_tap_callback+0x38>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");        /* dmp is not inited */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	4805      	ldr	r0, [pc, #20]	; (8005924 <mpu6050_dmp_set_tap_callback+0x48>)
 800590e:	4798      	blx	r3

        return 4;                                                    /* return error */
 8005910:	2304      	movs	r3, #4
 8005912:	e003      	b.n	800591c <mpu6050_dmp_set_tap_callback+0x40>
    }

    handle->dmp_tap_callback = callback;                             /* set the callback */
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	621a      	str	r2, [r3, #32]

    return 0;                                                        /* success return 0 */
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	0800bb64 	.word	0x0800bb64

08005928 <mpu6050_dmp_set_orient_callback>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_orient_callback(mpu6050_handle_t *handle, void (*callback)(uint8_t orientation))
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
    if (handle == NULL)                                              /* check handle */
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <mpu6050_dmp_set_orient_callback+0x14>
    {
        return 2;                                                    /* return error */
 8005938:	2302      	movs	r3, #2
 800593a:	e015      	b.n	8005968 <mpu6050_dmp_set_orient_callback+0x40>
    }
    if (handle->inited != 1)                                         /* check handle initialization */
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005942:	2b01      	cmp	r3, #1
 8005944:	d001      	beq.n	800594a <mpu6050_dmp_set_orient_callback+0x22>
    {
        return 3;                                                    /* return error */
 8005946:	2303      	movs	r3, #3
 8005948:	e00e      	b.n	8005968 <mpu6050_dmp_set_orient_callback+0x40>
    }
    if (handle->dmp_inited != 1)                                     /* check dmp initialization */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005950:	2b01      	cmp	r3, #1
 8005952:	d005      	beq.n	8005960 <mpu6050_dmp_set_orient_callback+0x38>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");        /* dmp is not inited */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	4805      	ldr	r0, [pc, #20]	; (8005970 <mpu6050_dmp_set_orient_callback+0x48>)
 800595a:	4798      	blx	r3

        return 4;                                                    /* return error */
 800595c:	2304      	movs	r3, #4
 800595e:	e003      	b.n	8005968 <mpu6050_dmp_set_orient_callback+0x40>
    }

    handle->dmp_orient_callback = callback;                          /* set the callback */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	625a      	str	r2, [r3, #36]	; 0x24

    return 0;                                                        /* success return 0 */
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	0800bb64 	.word	0x0800bb64

08005974 <mpu6050_dmp_set_enable>:
 *            - 3 handle is not initialized
 *            - 4 dmp is not inited
 * @note      none
 */
uint8_t mpu6050_dmp_set_enable(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <mpu6050_dmp_set_enable+0x16>
    {
        return 2;                                                                        /* return error */
 8005986:	2302      	movs	r3, #2
 8005988:	e044      	b.n	8005a14 <mpu6050_dmp_set_enable+0xa0>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005990:	2b01      	cmp	r3, #1
 8005992:	d001      	beq.n	8005998 <mpu6050_dmp_set_enable+0x24>
    {
        return 3;                                                                        /* return error */
 8005994:	2303      	movs	r3, #3
 8005996:	e03d      	b.n	8005a14 <mpu6050_dmp_set_enable+0xa0>
    }
    if (handle->dmp_inited != 1)                                                         /* check dmp initialization */
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d005      	beq.n	80059ae <mpu6050_dmp_set_enable+0x3a>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                            /* dmp is not inited */
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	481d      	ldr	r0, [pc, #116]	; (8005a1c <mpu6050_dmp_set_enable+0xa8>)
 80059a8:	4798      	blx	r3

        return 4;                                                                        /* return error */
 80059aa:	2304      	movs	r3, #4
 80059ac:	e032      	b.n	8005a14 <mpu6050_dmp_set_enable+0xa0>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 80059ae:	f107 020e 	add.w	r2, r7, #14
 80059b2:	2301      	movs	r3, #1
 80059b4:	216a      	movs	r1, #106	; 0x6a
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fc f9a6 	bl	8001d08 <a_mpu6050_iic_read>
 80059bc:	4603      	mov	r3, r0
 80059be:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d005      	beq.n	80059d2 <mpu6050_dmp_set_enable+0x5e>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                        /* read user ctrl failed */
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	4815      	ldr	r0, [pc, #84]	; (8005a20 <mpu6050_dmp_set_enable+0xac>)
 80059cc:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80059ce:	2301      	movs	r3, #1
 80059d0:	e020      	b.n	8005a14 <mpu6050_dmp_set_enable+0xa0>
    }
    prev &= ~(1 << 7);                                                                   /* clear config */
 80059d2:	7bbb      	ldrb	r3, [r7, #14]
 80059d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 7;                                                                 /* set config */
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	01db      	lsls	r3, r3, #7
 80059e0:	b25a      	sxtb	r2, r3
 80059e2:	7bbb      	ldrb	r3, [r7, #14]
 80059e4:	b25b      	sxtb	r3, r3
 80059e6:	4313      	orrs	r3, r2
 80059e8:	b25b      	sxtb	r3, r3
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 80059ee:	f107 020e 	add.w	r2, r7, #14
 80059f2:	2301      	movs	r3, #1
 80059f4:	216a      	movs	r1, #106	; 0x6a
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7fc f9a2 	bl	8001d40 <a_mpu6050_iic_write>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <mpu6050_dmp_set_enable+0x9e>
    {
        handle->debug_print("mpu6050: write user ctrl failed.\n");                       /* write user ctrl failed */
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	4806      	ldr	r0, [pc, #24]	; (8005a24 <mpu6050_dmp_set_enable+0xb0>)
 8005a0c:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <mpu6050_dmp_set_enable+0xa0>
    }

    return 0;                                                                            /* success return 0 */
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	0800bb64 	.word	0x0800bb64
 8005a20:	0800bd94 	.word	0x0800bd94
 8005a24:	0800bdb8 	.word	0x0800bdb8

08005a28 <mpu6050_dmp_gyro_accel_raw_offset_convert>:
 * @note       none
 */
uint8_t mpu6050_dmp_gyro_accel_raw_offset_convert(mpu6050_handle_t *handle,
                                                  int32_t gyro_offset_raw[3], int32_t accel_offset_raw[3],
                                                  int32_t gyro_offset[3], int32_t accel_offset[3])
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t accel_conf;
    uint8_t gyro_conf;

    if (handle == NULL)                                                                           /* check handle */
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x18>
    {
        return 2;                                                                                 /* return error */
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e212      	b.n	8005e66 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x43e>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d001      	beq.n	8005a4e <mpu6050_dmp_gyro_accel_raw_offset_convert+0x26>
    {
        return 3;                                                                                 /* return error */
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e20b      	b.n	8005e66 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x43e>
    }
    if (handle->dmp_inited != 1)                                                                  /* check dmp initialization */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d005      	beq.n	8005a64 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x3c>
    {
        handle->debug_print("mpu6050: dmp is not inited.\n");                                     /* dmp is not inited */
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	48c0      	ldr	r0, [pc, #768]	; (8005d60 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x338>)
 8005a5e:	4798      	blx	r3

        return 4;                                                                                 /* return error */
 8005a60:	2304      	movs	r3, #4
 8005a62:	e200      	b.n	8005e66 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x43e>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);        /* read accel config */
 8005a64:	f107 0216 	add.w	r2, r7, #22
 8005a68:	2301      	movs	r3, #1
 8005a6a:	211c      	movs	r1, #28
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7fc f94b 	bl	8001d08 <a_mpu6050_iic_read>
 8005a72:	4603      	mov	r3, r0
 8005a74:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                                                 /* check result */
 8005a76:	7dfb      	ldrb	r3, [r7, #23]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x60>
    {
        handle->debug_print("mpu6050: read accel config failed.\n");                              /* read accel config failed */
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	48b8      	ldr	r0, [pc, #736]	; (8005d64 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x33c>)
 8005a82:	4798      	blx	r3

        return 1;                                                                                 /* return error */
 8005a84:	2301      	movs	r3, #1
 8005a86:	e1ee      	b.n	8005e66 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x43e>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);          /* read gyro config */
 8005a88:	f107 0215 	add.w	r2, r7, #21
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	211b      	movs	r1, #27
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f7fc f939 	bl	8001d08 <a_mpu6050_iic_read>
 8005a96:	4603      	mov	r3, r0
 8005a98:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                                                 /* check result */
 8005a9a:	7dfb      	ldrb	r3, [r7, #23]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <mpu6050_dmp_gyro_accel_raw_offset_convert+0x84>
    {
        handle->debug_print("mpu6050: read gyro config failed.\n");                               /* read gyro config failed */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	48b0      	ldr	r0, [pc, #704]	; (8005d68 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x340>)
 8005aa6:	4798      	blx	r3

        return 1;                                                                                 /* return error */
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e1dc      	b.n	8005e66 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x43e>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                         /* get the accel conf */
 8005aac:	7dbb      	ldrb	r3, [r7, #22]
 8005aae:	08db      	lsrs	r3, r3, #3
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	75bb      	strb	r3, [r7, #22]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                           /* get the gyro conf */
 8005aba:	7d7b      	ldrb	r3, [r7, #21]
 8005abc:	08db      	lsrs	r3, r3, #3
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f003 0303 	and.w	r3, r3, #3
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	757b      	strb	r3, [r7, #21]
    if (accel_conf == 0)                                                                          /* ±2g */
 8005ac8:	7dbb      	ldrb	r3, [r7, #22]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d134      	bne.n	8005b38 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x110>
    {
        accel_offset[0] = (int32_t)(accel_offset_raw[0] * 16384.0f);                              /* set accel offset 0 */
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	ee07 3a90 	vmov	s15, r3
 8005ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ada:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8005d6c <mpu6050_dmp_gyro_accel_raw_offset_convert+0x344>
 8005ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ae6:	ee17 2a90 	vmov	r2, s15
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	601a      	str	r2, [r3, #0]
        accel_offset[1] = (int32_t)(accel_offset_raw[1] * 16384.0f);                              /* set accel offset 1 */
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3304      	adds	r3, #4
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	ee07 3a90 	vmov	s15, r3
 8005af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005afc:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8005d6c <mpu6050_dmp_gyro_accel_raw_offset_convert+0x344>
 8005b00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	3304      	adds	r3, #4
 8005b08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b0c:	ee17 2a90 	vmov	r2, s15
 8005b10:	601a      	str	r2, [r3, #0]
        accel_offset[2] = (int32_t)(accel_offset_raw[2] * 16384.0f);                              /* set accel offset 2 */
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	3308      	adds	r3, #8
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b20:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8005d6c <mpu6050_dmp_gyro_accel_raw_offset_convert+0x344>
 8005b24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b30:	ee17 2a90 	vmov	r2, s15
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e0a3      	b.n	8005c80 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x258>
    }
    else if (accel_conf == 1)                                                                     /* ±4g */
 8005b38:	7dbb      	ldrb	r3, [r7, #22]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d134      	bne.n	8005ba8 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x180>
    {
        accel_offset[0] = (int32_t)(accel_offset_raw[0] * 8192.0f);                               /* set accel offset 0 */
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b4a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8005d70 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x348>
 8005b4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b56:	ee17 2a90 	vmov	r2, s15
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	601a      	str	r2, [r3, #0]
        accel_offset[1] = (int32_t)(accel_offset_raw[1] * 8192.0f);                               /* set accel offset 1 */
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3304      	adds	r3, #4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	ee07 3a90 	vmov	s15, r3
 8005b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b6c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8005d70 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x348>
 8005b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	3304      	adds	r3, #4
 8005b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b7c:	ee17 2a90 	vmov	r2, s15
 8005b80:	601a      	str	r2, [r3, #0]
        accel_offset[2] = (int32_t)(accel_offset_raw[2] * 8192.0f);                               /* set accel offset 2 */
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3308      	adds	r3, #8
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	ee07 3a90 	vmov	s15, r3
 8005b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b90:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8005d70 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x348>
 8005b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	3308      	adds	r3, #8
 8005b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ba0:	ee17 2a90 	vmov	r2, s15
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	e06b      	b.n	8005c80 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x258>
    }
    else if (accel_conf == 2)                                                                     /* ±8g */
 8005ba8:	7dbb      	ldrb	r3, [r7, #22]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d134      	bne.n	8005c18 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x1f0>
    {
        accel_offset[0] = (int32_t)(accel_offset_raw[0] * 4096.0f);                               /* set accel offset 0 */
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bba:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8005d74 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x34c>
 8005bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bc6:	ee17 2a90 	vmov	r2, s15
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	601a      	str	r2, [r3, #0]
        accel_offset[1] = (int32_t)(accel_offset_raw[1] * 4096.0f);                               /* set accel offset 1 */
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	ee07 3a90 	vmov	s15, r3
 8005bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bdc:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005d74 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x34c>
 8005be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005be4:	6a3b      	ldr	r3, [r7, #32]
 8005be6:	3304      	adds	r3, #4
 8005be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bec:	ee17 2a90 	vmov	r2, s15
 8005bf0:	601a      	str	r2, [r3, #0]
        accel_offset[2] = (int32_t)(accel_offset_raw[2] * 4096.0f);                               /* set accel offset 2 */
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	ee07 3a90 	vmov	s15, r3
 8005bfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c00:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8005d74 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x34c>
 8005c04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c10:	ee17 2a90 	vmov	r2, s15
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	e033      	b.n	8005c80 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x258>
    }
    else                                                                                          /* ±16g */
    {
        accel_offset[0] = (int32_t)(accel_offset_raw[0] * 2048.0f);                               /* set accel offset 0 */
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	ee07 3a90 	vmov	s15, r3
 8005c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c24:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8005d78 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x350>
 8005c28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c30:	ee17 2a90 	vmov	r2, s15
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	601a      	str	r2, [r3, #0]
        accel_offset[1] = (int32_t)(accel_offset_raw[1] * 2048.0f);                               /* set accel offset 1 */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c46:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8005d78 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x350>
 8005c4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	3304      	adds	r3, #4
 8005c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c56:	ee17 2a90 	vmov	r2, s15
 8005c5a:	601a      	str	r2, [r3, #0]
        accel_offset[2] = (int32_t)(accel_offset_raw[2] * 2048.0f);                               /* set accel offset 2 */
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	3308      	adds	r3, #8
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c6a:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8005d78 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x350>
 8005c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	3308      	adds	r3, #8
 8005c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c7a:	ee17 2a90 	vmov	r2, s15
 8005c7e:	601a      	str	r2, [r3, #0]
    }
    if (gyro_conf == 0)                                                                           /* ±250dps */
 8005c80:	7d7b      	ldrb	r3, [r7, #21]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d134      	bne.n	8005cf0 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x2c8>
    {
        gyro_offset[0] = (int32_t)(gyro_offset_raw[0] * 131.f);                                   /* set gyro offset 0 */
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	ee07 3a90 	vmov	s15, r3
 8005c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c92:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8005d7c <mpu6050_dmp_gyro_accel_raw_offset_convert+0x354>
 8005c96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c9e:	ee17 2a90 	vmov	r2, s15
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	601a      	str	r2, [r3, #0]
        gyro_offset[1] = (int32_t)(gyro_offset_raw[1] * 131.f);                                   /* set gyro offset 1 */
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	3304      	adds	r3, #4
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	ee07 3a90 	vmov	s15, r3
 8005cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005d7c <mpu6050_dmp_gyro_accel_raw_offset_convert+0x354>
 8005cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cc4:	ee17 2a90 	vmov	r2, s15
 8005cc8:	601a      	str	r2, [r3, #0]
        gyro_offset[2] = (int32_t)(gyro_offset_raw[2] * 131.f);                                   /* set gyro offset 2 */
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	3308      	adds	r3, #8
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cd8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8005d7c <mpu6050_dmp_gyro_accel_raw_offset_convert+0x354>
 8005cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ce8:	ee17 2a90 	vmov	r2, s15
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e0b9      	b.n	8005e64 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x43c>
    }
    else if (gyro_conf == 1)                                                                      /* ±500dps */
 8005cf0:	7d7b      	ldrb	r3, [r7, #21]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d14a      	bne.n	8005d8c <mpu6050_dmp_gyro_accel_raw_offset_convert+0x364>
    {
        gyro_offset[0] = (int32_t)(gyro_offset_raw[0] * 65.5f);                                   /* set gyro offset 0 */
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d02:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005d80 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x358>
 8005d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d0e:	ee17 2a90 	vmov	r2, s15
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	601a      	str	r2, [r3, #0]
        gyro_offset[1] = (int32_t)(gyro_offset_raw[1] * 65.5f);                                   /* set gyro offset 1 */
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	ee07 3a90 	vmov	s15, r3
 8005d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d24:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005d80 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x358>
 8005d28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d34:	ee17 2a90 	vmov	r2, s15
 8005d38:	601a      	str	r2, [r3, #0]
        gyro_offset[2] = (int32_t)(gyro_offset_raw[2] * 65.5f);                                   /* set gyro offset 2 */
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	ee07 3a90 	vmov	s15, r3
 8005d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d48:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005d80 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x358>
 8005d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	3308      	adds	r3, #8
 8005d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d58:	ee17 2a90 	vmov	r2, s15
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	e081      	b.n	8005e64 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x43c>
 8005d60:	0800bb64 	.word	0x0800bb64
 8005d64:	0800bd4c 	.word	0x0800bd4c
 8005d68:	0800bd70 	.word	0x0800bd70
 8005d6c:	46800000 	.word	0x46800000
 8005d70:	46000000 	.word	0x46000000
 8005d74:	45800000 	.word	0x45800000
 8005d78:	45000000 	.word	0x45000000
 8005d7c:	43030000 	.word	0x43030000
 8005d80:	42830000 	.word	0x42830000
 8005d84:	42033333 	.word	0x42033333
 8005d88:	41833333 	.word	0x41833333
    }
    else if (gyro_conf == 2)                                                                      /* ±1000dps */
 8005d8c:	7d7b      	ldrb	r3, [r7, #21]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d134      	bne.n	8005dfc <mpu6050_dmp_gyro_accel_raw_offset_convert+0x3d4>
    {
        gyro_offset[0] = (int32_t)(gyro_offset_raw[0] * 32.8f);                                   /* set gyro offset 0 */
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d9e:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8005d84 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x35c>
 8005da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005daa:	ee17 2a90 	vmov	r2, s15
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	601a      	str	r2, [r3, #0]
        gyro_offset[1] = (int32_t)(gyro_offset_raw[1] * 32.8f);                                   /* set gyro offset 1 */
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	3304      	adds	r3, #4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	ee07 3a90 	vmov	s15, r3
 8005dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dc0:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 8005d84 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x35c>
 8005dc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dd0:	ee17 2a90 	vmov	r2, s15
 8005dd4:	601a      	str	r2, [r3, #0]
        gyro_offset[2] = (int32_t)(gyro_offset_raw[2] * 32.8f);                                   /* set gyro offset 2 */
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	3308      	adds	r3, #8
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005de4:	ed1f 7a19 	vldr	s14, [pc, #-100]	; 8005d84 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x35c>
 8005de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	3308      	adds	r3, #8
 8005df0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005df4:	ee17 2a90 	vmov	r2, s15
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	e033      	b.n	8005e64 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x43c>
    }
    else                                                                                          /* ±2000dps */
    {
        gyro_offset[0] = (int32_t)(gyro_offset_raw[0] * 16.4f);                                   /* set gyro offset 0 */
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	ee07 3a90 	vmov	s15, r3
 8005e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e08:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 8005d88 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x360>
 8005e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e14:	ee17 2a90 	vmov	r2, s15
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	601a      	str	r2, [r3, #0]
        gyro_offset[1] = (int32_t)(gyro_offset_raw[1] * 16.4f);                                   /* set gyro offset 1 */
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e2a:	ed1f 7a29 	vldr	s14, [pc, #-164]	; 8005d88 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x360>
 8005e2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	3304      	adds	r3, #4
 8005e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e3a:	ee17 2a90 	vmov	r2, s15
 8005e3e:	601a      	str	r2, [r3, #0]
        gyro_offset[2] = (int32_t)(gyro_offset_raw[2] * 16.4f);                                   /* set gyro offset 2 */
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	3308      	adds	r3, #8
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e4e:	ed1f 7a32 	vldr	s14, [pc, #-200]	; 8005d88 <mpu6050_dmp_gyro_accel_raw_offset_convert+0x360>
 8005e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e5e:	ee17 2a90 	vmov	r2, s15
 8005e62:	601a      	str	r2, [r3, #0]
    }

    return 0;                                                                                     /* success return 0 */
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop

08005e70 <mpu6050_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6050_set_addr_pin(mpu6050_handle_t *handle, mpu6050_address_t addr_pin)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <mpu6050_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 8005e82:	2302      	movs	r3, #2
 8005e84:	e003      	b.n	8005e8e <mpu6050_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	78fa      	ldrb	r2, [r7, #3]
 8005e8a:	701a      	strb	r2, [r3, #0]

    return 0;                                    /* success return 0 */
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <mpu6050_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu6050_init(mpu6050_handle_t *handle)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;

    if (handle == NULL)                                                             /* check handle */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <mpu6050_init+0x12>
    {
        return 2;                                                                   /* return error */
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e0bc      	b.n	8006028 <mpu6050_init+0x18c>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <mpu6050_init+0x1e>
    {
        return 3;                                                                   /* return error */
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e0b6      	b.n	8006028 <mpu6050_init+0x18c>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d105      	bne.n	8005ece <mpu6050_init+0x32>
    {
        handle->debug_print("mpu6050: iic_init is null.\n");                        /* iic_init is null */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	485a      	ldr	r0, [pc, #360]	; (8006030 <mpu6050_init+0x194>)
 8005ec8:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e0ac      	b.n	8006028 <mpu6050_init+0x18c>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d105      	bne.n	8005ee2 <mpu6050_init+0x46>
    {
        handle->debug_print("mpu6050: iic_deinit is null.\n");                      /* iic_deinit is null */
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	4856      	ldr	r0, [pc, #344]	; (8006034 <mpu6050_init+0x198>)
 8005edc:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e0a2      	b.n	8006028 <mpu6050_init+0x18c>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d105      	bne.n	8005ef6 <mpu6050_init+0x5a>
    {
        handle->debug_print("mpu6050: iic_read is null.\n");                        /* iic_read is null */
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	4852      	ldr	r0, [pc, #328]	; (8006038 <mpu6050_init+0x19c>)
 8005ef0:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e098      	b.n	8006028 <mpu6050_init+0x18c>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d105      	bne.n	8005f0a <mpu6050_init+0x6e>
    {
        handle->debug_print("mpu6050: iic_write is null.\n");                       /* iic_write is null */
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	484e      	ldr	r0, [pc, #312]	; (800603c <mpu6050_init+0x1a0>)
 8005f04:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8005f06:	2303      	movs	r3, #3
 8005f08:	e08e      	b.n	8006028 <mpu6050_init+0x18c>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d105      	bne.n	8005f1e <mpu6050_init+0x82>
    {
        handle->debug_print("mpu6050: delay_ms is null.\n");                        /* delay_ms is null */
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	484a      	ldr	r0, [pc, #296]	; (8006040 <mpu6050_init+0x1a4>)
 8005f18:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e084      	b.n	8006028 <mpu6050_init+0x18c>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d105      	bne.n	8005f32 <mpu6050_init+0x96>
    {
        handle->debug_print("mpu6050: receive_callback is null.\n");                /* receive_callback is null */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	4846      	ldr	r0, [pc, #280]	; (8006044 <mpu6050_init+0x1a8>)
 8005f2c:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e07a      	b.n	8006028 <mpu6050_init+0x18c>
    }

    res = handle->iic_init();                                                       /* iic init */
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	4798      	blx	r3
 8005f38:	4603      	mov	r3, r0
 8005f3a:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8005f3c:	7afb      	ldrb	r3, [r7, #11]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <mpu6050_init+0xb2>
    {
        handle->debug_print("mpu6050: iic init failed.\n");                         /* iic init failed */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	4840      	ldr	r0, [pc, #256]	; (8006048 <mpu6050_init+0x1ac>)
 8005f48:	4798      	blx	r3

        return 1;                                                                   /* return error */
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e06c      	b.n	8006028 <mpu6050_init+0x18c>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_WHO_AM_I, &prev, 1);               /* read who am I */
 8005f4e:	f107 020a 	add.w	r2, r7, #10
 8005f52:	2301      	movs	r3, #1
 8005f54:	2175      	movs	r1, #117	; 0x75
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fb fed6 	bl	8001d08 <a_mpu6050_iic_read>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8005f60:	7afb      	ldrb	r3, [r7, #11]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d008      	beq.n	8005f78 <mpu6050_init+0xdc>
    {
        handle->debug_print("mpu6050: read who am i failed.\n");                    /* read who am I failed */
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	4838      	ldr	r0, [pc, #224]	; (800604c <mpu6050_init+0x1b0>)
 8005f6c:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	4798      	blx	r3

        return 5;                                                                   /* return error */
 8005f74:	2305      	movs	r3, #5
 8005f76:	e057      	b.n	8006028 <mpu6050_init+0x18c>
    }
    if (prev != 0x68)                                                               /* check the id */
 8005f78:	7abb      	ldrb	r3, [r7, #10]
 8005f7a:	2b68      	cmp	r3, #104	; 0x68
 8005f7c:	d008      	beq.n	8005f90 <mpu6050_init+0xf4>
    {
        handle->debug_print("mpu6050: id is invalid.\n");                           /* id is invalid */
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	4833      	ldr	r0, [pc, #204]	; (8006050 <mpu6050_init+0x1b4>)
 8005f84:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	4798      	blx	r3

        return 5;                                                                   /* return error */
 8005f8c:	2305      	movs	r3, #5
 8005f8e:	e04b      	b.n	8006028 <mpu6050_init+0x18c>
    }

    prev = 1 << 7;                                                                  /* reset the device */
 8005f90:	2380      	movs	r3, #128	; 0x80
 8005f92:	72bb      	strb	r3, [r7, #10]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8005f94:	f107 020a 	add.w	r2, r7, #10
 8005f98:	2301      	movs	r3, #1
 8005f9a:	216b      	movs	r1, #107	; 0x6b
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7fb fecf 	bl	8001d40 <a_mpu6050_iic_write>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <mpu6050_init+0x122>
    {
        handle->debug_print("mpu6050: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	4828      	ldr	r0, [pc, #160]	; (8006054 <mpu6050_init+0x1b8>)
 8005fb2:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	4798      	blx	r3

        return 4;                                                                   /* return error */
 8005fba:	2304      	movs	r3, #4
 8005fbc:	e034      	b.n	8006028 <mpu6050_init+0x18c>
    }
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 8005fbe:	2364      	movs	r3, #100	; 0x64
 8005fc0:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8005fc2:	e029      	b.n	8006018 <mpu6050_init+0x17c>
    {
        res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);         /* read pwr mgmt 1 */
 8005fc4:	f107 020a 	add.w	r2, r7, #10
 8005fc8:	2301      	movs	r3, #1
 8005fca:	216b      	movs	r1, #107	; 0x6b
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7fb fe9b 	bl	8001d08 <a_mpu6050_iic_read>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d008      	beq.n	8005fee <mpu6050_init+0x152>
        {
            handle->debug_print("mpu6050: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	481d      	ldr	r0, [pc, #116]	; (8006058 <mpu6050_init+0x1bc>)
 8005fe2:	4798      	blx	r3
            (void)handle->iic_deinit();                                             /* iic deinit */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	4798      	blx	r3

            return 4;                                                               /* return error */
 8005fea:	2304      	movs	r3, #4
 8005fec:	e01c      	b.n	8006028 <mpu6050_init+0x18c>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 8005fee:	7abb      	ldrb	r3, [r7, #10]
 8005ff0:	b25b      	sxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	db09      	blt.n	800600a <mpu6050_init+0x16e>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            handle->dmp_inited = 0;                                                 /* flag closed */
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

            return 0;                                                               /* success return 0 */
 8006006:	2300      	movs	r3, #0
 8006008:	e00e      	b.n	8006028 <mpu6050_init+0x18c>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	200a      	movs	r0, #10
 8006010:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	3b01      	subs	r3, #1
 8006016:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1d2      	bne.n	8005fc4 <mpu6050_init+0x128>
    }

    handle->debug_print("mpu6050: reset failed.\n");                                /* reset failed */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	480e      	ldr	r0, [pc, #56]	; (800605c <mpu6050_init+0x1c0>)
 8006024:	4798      	blx	r3

    return 4;                                                                       /* return error */
 8006026:	2304      	movs	r3, #4
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	0800bddc 	.word	0x0800bddc
 8006034:	0800bdf8 	.word	0x0800bdf8
 8006038:	0800be18 	.word	0x0800be18
 800603c:	0800be34 	.word	0x0800be34
 8006040:	0800be54 	.word	0x0800be54
 8006044:	0800be70 	.word	0x0800be70
 8006048:	0800be94 	.word	0x0800be94
 800604c:	0800beb0 	.word	0x0800beb0
 8006050:	0800bed0 	.word	0x0800bed0
 8006054:	0800beec 	.word	0x0800beec
 8006058:	0800bf10 	.word	0x0800bf10
 800605c:	0800bf34 	.word	0x0800bf34

08006060 <mpu6050_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu6050_deinit(mpu6050_handle_t *handle)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                             /* check handle */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <mpu6050_deinit+0x12>
    {
        return 2;                                                                   /* return error */
 800606e:	2302      	movs	r3, #2
 8006070:	e031      	b.n	80060d6 <mpu6050_deinit+0x76>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006078:	2b01      	cmp	r3, #1
 800607a:	d001      	beq.n	8006080 <mpu6050_deinit+0x20>
    {
        return 3;                                                                   /* return error */
 800607c:	2303      	movs	r3, #3
 800607e:	e02a      	b.n	80060d6 <mpu6050_deinit+0x76>
    }

    prev = (1 << 6) | (1 << 3) | (7 << 0);                                          /* enter sleep mode */
 8006080:	234f      	movs	r3, #79	; 0x4f
 8006082:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8006084:	f107 020e 	add.w	r2, r7, #14
 8006088:	2301      	movs	r3, #1
 800608a:	216b      	movs	r1, #107	; 0x6b
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7fb fe57 	bl	8001d40 <a_mpu6050_iic_write>
 8006092:	4603      	mov	r3, r0
 8006094:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <mpu6050_deinit+0x48>
    {
        handle->debug_print("mpu6050: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	480f      	ldr	r0, [pc, #60]	; (80060e0 <mpu6050_deinit+0x80>)
 80060a2:	4798      	blx	r3

        return 4;                                                                   /* return error */
 80060a4:	2304      	movs	r3, #4
 80060a6:	e016      	b.n	80060d6 <mpu6050_deinit+0x76>
    }
    res = handle->iic_deinit();                                                     /* iic deinit */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	4798      	blx	r3
 80060ae:	4603      	mov	r3, r0
 80060b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d005      	beq.n	80060c4 <mpu6050_deinit+0x64>
    {
        handle->debug_print("mpu6050: iic deinit failed.\n");                       /* iic deinit failed */
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	4809      	ldr	r0, [pc, #36]	; (80060e4 <mpu6050_deinit+0x84>)
 80060be:	4798      	blx	r3

        return 1;                                                                   /* return error */
 80060c0:	2301      	movs	r3, #1
 80060c2:	e008      	b.n	80060d6 <mpu6050_deinit+0x76>
    }
    handle->inited = 0;                                                             /* flag closed */
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    handle->dmp_inited = 0;                                                         /* flag closed */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    return 0;                                                                       /* success return 0 */
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	0800beec 	.word	0x0800beec
 80060e4:	0800bf4c 	.word	0x0800bf4c

080060e8 <mpu6050_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fifo(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                   /* check handle */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <mpu6050_set_fifo+0x16>
    {
        return 2;                                                                         /* return error */
 80060fa:	2302      	movs	r3, #2
 80060fc:	e039      	b.n	8006172 <mpu6050_set_fifo+0x8a>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006104:	2b01      	cmp	r3, #1
 8006106:	d001      	beq.n	800610c <mpu6050_set_fifo+0x24>
    {
        return 3;                                                                         /* return error */
 8006108:	2303      	movs	r3, #3
 800610a:	e032      	b.n	8006172 <mpu6050_set_fifo+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 800610c:	f107 020e 	add.w	r2, r7, #14
 8006110:	2301      	movs	r3, #1
 8006112:	216a      	movs	r1, #106	; 0x6a
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f7fb fdf7 	bl	8001d08 <a_mpu6050_iic_read>
 800611a:	4603      	mov	r3, r0
 800611c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800611e:	7bfb      	ldrb	r3, [r7, #15]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <mpu6050_set_fifo+0x48>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                         /* read user ctrl failed */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	4814      	ldr	r0, [pc, #80]	; (800617c <mpu6050_set_fifo+0x94>)
 800612a:	4798      	blx	r3

        return 1;                                                                         /* return error */
 800612c:	2301      	movs	r3, #1
 800612e:	e020      	b.n	8006172 <mpu6050_set_fifo+0x8a>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006136:	b2db      	uxtb	r3, r3
 8006138:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                  /* set config */
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	019b      	lsls	r3, r3, #6
 800613e:	b25a      	sxtb	r2, r3
 8006140:	7bbb      	ldrb	r3, [r7, #14]
 8006142:	b25b      	sxtb	r3, r3
 8006144:	4313      	orrs	r3, r2
 8006146:	b25b      	sxtb	r3, r3
 8006148:	b2db      	uxtb	r3, r3
 800614a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 800614c:	f107 020e 	add.w	r2, r7, #14
 8006150:	2301      	movs	r3, #1
 8006152:	216a      	movs	r1, #106	; 0x6a
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7fb fdf3 	bl	8001d40 <a_mpu6050_iic_write>
 800615a:	4603      	mov	r3, r0
 800615c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <mpu6050_set_fifo+0x88>
    {
        handle->debug_print("mpu6050: write user ctrl failed.\n");                        /* write user ctrl failed */
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	4805      	ldr	r0, [pc, #20]	; (8006180 <mpu6050_set_fifo+0x98>)
 800616a:	4798      	blx	r3

        return 1;                                                                         /* return error */
 800616c:	2301      	movs	r3, #1
 800616e:	e000      	b.n	8006172 <mpu6050_set_fifo+0x8a>
    }

    return 0;                                                                             /* success return 0 */
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	0800bd94 	.word	0x0800bd94
 8006180:	0800bdb8 	.word	0x0800bdb8

08006184 <mpu6050_force_fifo_reset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_force_fifo_reset(mpu6050_handle_t *handle)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
    uint8_t res;

    if (handle == NULL)                                                    /* check handle */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d101      	bne.n	8006196 <mpu6050_force_fifo_reset+0x12>
    {
        return 2;                                                          /* return error */
 8006192:	2302      	movs	r3, #2
 8006194:	e015      	b.n	80061c2 <mpu6050_force_fifo_reset+0x3e>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800619c:	2b01      	cmp	r3, #1
 800619e:	d001      	beq.n	80061a4 <mpu6050_force_fifo_reset+0x20>
    {
        return 3;                                                          /* return error */
 80061a0:	2303      	movs	r3, #3
 80061a2:	e00e      	b.n	80061c2 <mpu6050_force_fifo_reset+0x3e>
    }

    res = a_mpu6050_reset_fifo(handle);                                    /* reset the fifo */
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7fb fe5d 	bl	8001e64 <a_mpu6050_reset_fifo>
 80061aa:	4603      	mov	r3, r0
 80061ac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d005      	beq.n	80061c0 <mpu6050_force_fifo_reset+0x3c>
    {
        handle->debug_print("mpu6050: force reset fifo failed.\n");        /* force reset fifo failed */
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	4804      	ldr	r0, [pc, #16]	; (80061cc <mpu6050_force_fifo_reset+0x48>)
 80061ba:	4798      	blx	r3

        return 1;                                                          /* return error */
 80061bc:	2301      	movs	r3, #1
 80061be:	e000      	b.n	80061c2 <mpu6050_force_fifo_reset+0x3e>
    }

    return 0;                                                              /* success return 0 */
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	0800bfcc 	.word	0x0800bfcc

080061d0 <mpu6050_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_iic_master(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <mpu6050_set_iic_master+0x16>
    {
        return 2;                                                                        /* return error */
 80061e2:	2302      	movs	r3, #2
 80061e4:	e039      	b.n	800625a <mpu6050_set_iic_master+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d001      	beq.n	80061f4 <mpu6050_set_iic_master+0x24>
    {
        return 3;                                                                        /* return error */
 80061f0:	2303      	movs	r3, #3
 80061f2:	e032      	b.n	800625a <mpu6050_set_iic_master+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 80061f4:	f107 020e 	add.w	r2, r7, #14
 80061f8:	2301      	movs	r3, #1
 80061fa:	216a      	movs	r1, #106	; 0x6a
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7fb fd83 	bl	8001d08 <a_mpu6050_iic_read>
 8006202:	4603      	mov	r3, r0
 8006204:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006206:	7bfb      	ldrb	r3, [r7, #15]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <mpu6050_set_iic_master+0x48>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                        /* read user ctrl failed */
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	699b      	ldr	r3, [r3, #24]
 8006210:	4814      	ldr	r0, [pc, #80]	; (8006264 <mpu6050_set_iic_master+0x94>)
 8006212:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006214:	2301      	movs	r3, #1
 8006216:	e020      	b.n	800625a <mpu6050_set_iic_master+0x8a>
    }
    prev &= ~(1 << 5);                                                                   /* clear config */
 8006218:	7bbb      	ldrb	r3, [r7, #14]
 800621a:	f023 0320 	bic.w	r3, r3, #32
 800621e:	b2db      	uxtb	r3, r3
 8006220:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                                 /* set config */
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	015b      	lsls	r3, r3, #5
 8006226:	b25a      	sxtb	r2, r3
 8006228:	7bbb      	ldrb	r3, [r7, #14]
 800622a:	b25b      	sxtb	r3, r3
 800622c:	4313      	orrs	r3, r2
 800622e:	b25b      	sxtb	r3, r3
 8006230:	b2db      	uxtb	r3, r3
 8006232:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8006234:	f107 020e 	add.w	r2, r7, #14
 8006238:	2301      	movs	r3, #1
 800623a:	216a      	movs	r1, #106	; 0x6a
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7fb fd7f 	bl	8001d40 <a_mpu6050_iic_write>
 8006242:	4603      	mov	r3, r0
 8006244:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006246:	7bfb      	ldrb	r3, [r7, #15]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <mpu6050_set_iic_master+0x88>
    {
        handle->debug_print("mpu6050: write user ctrl failed.\n");                       /* write user ctrl failed */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	4805      	ldr	r0, [pc, #20]	; (8006268 <mpu6050_set_iic_master+0x98>)
 8006252:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <mpu6050_set_iic_master+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	0800bd94 	.word	0x0800bd94
 8006268:	0800bdb8 	.word	0x0800bdb8

0800626c <mpu6050_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_clock_source(mpu6050_handle_t *handle, mpu6050_clock_source_t clock_source)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <mpu6050_set_clock_source+0x16>
    {
        return 2;                                                                        /* return error */
 800627e:	2302      	movs	r3, #2
 8006280:	e035      	b.n	80062ee <mpu6050_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006288:	2b01      	cmp	r3, #1
 800628a:	d001      	beq.n	8006290 <mpu6050_set_clock_source+0x24>
    {
        return 3;                                                                        /* return error */
 800628c:	2303      	movs	r3, #3
 800628e:	e02e      	b.n	80062ee <mpu6050_set_clock_source+0x82>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006290:	f107 020e 	add.w	r2, r7, #14
 8006294:	2301      	movs	r3, #1
 8006296:	216b      	movs	r1, #107	; 0x6b
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f7fb fd35 	bl	8001d08 <a_mpu6050_iic_read>
 800629e:	4603      	mov	r3, r0
 80062a0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d005      	beq.n	80062b4 <mpu6050_set_clock_source+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	4812      	ldr	r0, [pc, #72]	; (80062f8 <mpu6050_set_clock_source+0x8c>)
 80062ae:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80062b0:	2301      	movs	r3, #1
 80062b2:	e01c      	b.n	80062ee <mpu6050_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                                 /* clear config */
 80062b4:	7bbb      	ldrb	r3, [r7, #14]
 80062b6:	f023 0307 	bic.w	r3, r3, #7
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                           /* set config */
 80062be:	7bba      	ldrb	r2, [r7, #14]
 80062c0:	78fb      	ldrb	r3, [r7, #3]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80062c8:	f107 020e 	add.w	r2, r7, #14
 80062cc:	2301      	movs	r3, #1
 80062ce:	216b      	movs	r1, #107	; 0x6b
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7fb fd35 	bl	8001d40 <a_mpu6050_iic_write>
 80062d6:	4603      	mov	r3, r0
 80062d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d005      	beq.n	80062ec <mpu6050_set_clock_source+0x80>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	4805      	ldr	r0, [pc, #20]	; (80062fc <mpu6050_set_clock_source+0x90>)
 80062e6:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80062e8:	2301      	movs	r3, #1
 80062ea:	e000      	b.n	80062ee <mpu6050_set_clock_source+0x82>
    }

    return 0;                                                                            /* success return 0 */
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	0800bff0 	.word	0x0800bff0
 80062fc:	0800c01c 	.word	0x0800c01c

08006300 <mpu6050_set_temperature_sensor>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_temperature_sensor(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <mpu6050_set_temperature_sensor+0x16>
    {
        return 2;                                                                        /* return error */
 8006312:	2302      	movs	r3, #2
 8006314:	e03c      	b.n	8006390 <mpu6050_set_temperature_sensor+0x90>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800631c:	2b01      	cmp	r3, #1
 800631e:	d001      	beq.n	8006324 <mpu6050_set_temperature_sensor+0x24>
    {
        return 3;                                                                        /* return error */
 8006320:	2303      	movs	r3, #3
 8006322:	e035      	b.n	8006390 <mpu6050_set_temperature_sensor+0x90>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006324:	f107 020e 	add.w	r2, r7, #14
 8006328:	2301      	movs	r3, #1
 800632a:	216b      	movs	r1, #107	; 0x6b
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fb fceb 	bl	8001d08 <a_mpu6050_iic_read>
 8006332:	4603      	mov	r3, r0
 8006334:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d005      	beq.n	8006348 <mpu6050_set_temperature_sensor+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	4815      	ldr	r0, [pc, #84]	; (8006398 <mpu6050_set_temperature_sensor+0x98>)
 8006342:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006344:	2301      	movs	r3, #1
 8006346:	e023      	b.n	8006390 <mpu6050_set_temperature_sensor+0x90>
    }
    prev &= ~(1 << 3);                                                                   /* clear config */
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	f023 0308 	bic.w	r3, r3, #8
 800634e:	b2db      	uxtb	r3, r3
 8006350:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                              /* set config */
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <mpu6050_set_temperature_sensor+0x5c>
 8006358:	2208      	movs	r2, #8
 800635a:	e000      	b.n	800635e <mpu6050_set_temperature_sensor+0x5e>
 800635c:	2200      	movs	r2, #0
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	b25b      	sxtb	r3, r3
 8006362:	4313      	orrs	r3, r2
 8006364:	b25b      	sxtb	r3, r3
 8006366:	b2db      	uxtb	r3, r3
 8006368:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 800636a:	f107 020e 	add.w	r2, r7, #14
 800636e:	2301      	movs	r3, #1
 8006370:	216b      	movs	r1, #107	; 0x6b
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fb fce4 	bl	8001d40 <a_mpu6050_iic_write>
 8006378:	4603      	mov	r3, r0
 800637a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d005      	beq.n	800638e <mpu6050_set_temperature_sensor+0x8e>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	4805      	ldr	r0, [pc, #20]	; (800639c <mpu6050_set_temperature_sensor+0x9c>)
 8006388:	4798      	blx	r3

        return 1;                                                                        /* return error */
 800638a:	2301      	movs	r3, #1
 800638c:	e000      	b.n	8006390 <mpu6050_set_temperature_sensor+0x90>
    }

    return 0;                                                                            /* success return 0 */
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	0800bff0 	.word	0x0800bff0
 800639c:	0800c01c 	.word	0x0800c01c

080063a0 <mpu6050_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_cycle_wake_up(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <mpu6050_set_cycle_wake_up+0x16>
    {
        return 2;                                                                        /* return error */
 80063b2:	2302      	movs	r3, #2
 80063b4:	e039      	b.n	800642a <mpu6050_set_cycle_wake_up+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d001      	beq.n	80063c4 <mpu6050_set_cycle_wake_up+0x24>
    {
        return 3;                                                                        /* return error */
 80063c0:	2303      	movs	r3, #3
 80063c2:	e032      	b.n	800642a <mpu6050_set_cycle_wake_up+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80063c4:	f107 020e 	add.w	r2, r7, #14
 80063c8:	2301      	movs	r3, #1
 80063ca:	216b      	movs	r1, #107	; 0x6b
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7fb fc9b 	bl	8001d08 <a_mpu6050_iic_read>
 80063d2:	4603      	mov	r3, r0
 80063d4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d005      	beq.n	80063e8 <mpu6050_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	4814      	ldr	r0, [pc, #80]	; (8006434 <mpu6050_set_cycle_wake_up+0x94>)
 80063e2:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80063e4:	2301      	movs	r3, #1
 80063e6:	e020      	b.n	800642a <mpu6050_set_cycle_wake_up+0x8a>
    }
    prev &= ~(1 << 5);                                                                   /* clear config */
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
 80063ea:	f023 0320 	bic.w	r3, r3, #32
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                                 /* set config */
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	015b      	lsls	r3, r3, #5
 80063f6:	b25a      	sxtb	r2, r3
 80063f8:	7bbb      	ldrb	r3, [r7, #14]
 80063fa:	b25b      	sxtb	r3, r3
 80063fc:	4313      	orrs	r3, r2
 80063fe:	b25b      	sxtb	r3, r3
 8006400:	b2db      	uxtb	r3, r3
 8006402:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006404:	f107 020e 	add.w	r2, r7, #14
 8006408:	2301      	movs	r3, #1
 800640a:	216b      	movs	r1, #107	; 0x6b
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7fb fc97 	bl	8001d40 <a_mpu6050_iic_write>
 8006412:	4603      	mov	r3, r0
 8006414:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <mpu6050_set_cycle_wake_up+0x88>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	4805      	ldr	r0, [pc, #20]	; (8006438 <mpu6050_set_cycle_wake_up+0x98>)
 8006422:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006424:	2301      	movs	r3, #1
 8006426:	e000      	b.n	800642a <mpu6050_set_cycle_wake_up+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	0800bff0 	.word	0x0800bff0
 8006438:	0800c01c 	.word	0x0800c01c

0800643c <mpu6050_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_sleep(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	460b      	mov	r3, r1
 8006446:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <mpu6050_set_sleep+0x16>
    {
        return 2;                                                                        /* return error */
 800644e:	2302      	movs	r3, #2
 8006450:	e039      	b.n	80064c6 <mpu6050_set_sleep+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006458:	2b01      	cmp	r3, #1
 800645a:	d001      	beq.n	8006460 <mpu6050_set_sleep+0x24>
    {
        return 3;                                                                        /* return error */
 800645c:	2303      	movs	r3, #3
 800645e:	e032      	b.n	80064c6 <mpu6050_set_sleep+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006460:	f107 020e 	add.w	r2, r7, #14
 8006464:	2301      	movs	r3, #1
 8006466:	216b      	movs	r1, #107	; 0x6b
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7fb fc4d 	bl	8001d08 <a_mpu6050_iic_read>
 800646e:	4603      	mov	r3, r0
 8006470:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <mpu6050_set_sleep+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	4814      	ldr	r0, [pc, #80]	; (80064d0 <mpu6050_set_sleep+0x94>)
 800647e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006480:	2301      	movs	r3, #1
 8006482:	e020      	b.n	80064c6 <mpu6050_set_sleep+0x8a>
    }
    prev &= ~(1 << 6);                                                                   /* clear config */
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800648a:	b2db      	uxtb	r3, r3
 800648c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                 /* set config */
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	019b      	lsls	r3, r3, #6
 8006492:	b25a      	sxtb	r2, r3
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	b25b      	sxtb	r3, r3
 8006498:	4313      	orrs	r3, r2
 800649a:	b25b      	sxtb	r3, r3
 800649c:	b2db      	uxtb	r3, r3
 800649e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80064a0:	f107 020e 	add.w	r2, r7, #14
 80064a4:	2301      	movs	r3, #1
 80064a6:	216b      	movs	r1, #107	; 0x6b
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7fb fc49 	bl	8001d40 <a_mpu6050_iic_write>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <mpu6050_set_sleep+0x88>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	4805      	ldr	r0, [pc, #20]	; (80064d4 <mpu6050_set_sleep+0x98>)
 80064be:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <mpu6050_set_sleep+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	0800bff0 	.word	0x0800bff0
 80064d4:	0800c01c 	.word	0x0800c01c

080064d8 <mpu6050_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_standby_mode(mpu6050_handle_t *handle, mpu6050_source_t source, mpu6050_bool_t enable)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
 80064e4:	4613      	mov	r3, r2
 80064e6:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <mpu6050_set_standby_mode+0x1a>
    {
        return 2;                                                                        /* return error */
 80064ee:	2302      	movs	r3, #2
 80064f0:	e043      	b.n	800657a <mpu6050_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d001      	beq.n	8006500 <mpu6050_set_standby_mode+0x28>
    {
        return 3;                                                                        /* return error */
 80064fc:	2303      	movs	r3, #3
 80064fe:	e03c      	b.n	800657a <mpu6050_set_standby_mode+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 8006500:	f107 020e 	add.w	r2, r7, #14
 8006504:	2301      	movs	r3, #1
 8006506:	216c      	movs	r1, #108	; 0x6c
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7fb fbfd 	bl	8001d08 <a_mpu6050_iic_read>
 800650e:	4603      	mov	r3, r0
 8006510:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <mpu6050_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu6050: read power management 2 failed.\n");               /* read power management 2 failed */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	4819      	ldr	r0, [pc, #100]	; (8006584 <mpu6050_set_standby_mode+0xac>)
 800651e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006520:	2301      	movs	r3, #1
 8006522:	e02a      	b.n	800657a <mpu6050_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                              /* clear config */
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	2201      	movs	r2, #1
 8006528:	fa02 f303 	lsl.w	r3, r2, r3
 800652c:	b25b      	sxtb	r3, r3
 800652e:	43db      	mvns	r3, r3
 8006530:	b25a      	sxtb	r2, r3
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	b25b      	sxtb	r3, r3
 8006536:	4013      	ands	r3, r2
 8006538:	b25b      	sxtb	r3, r3
 800653a:	b2db      	uxtb	r3, r3
 800653c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                            /* set config */
 800653e:	78ba      	ldrb	r2, [r7, #2]
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	b25a      	sxtb	r2, r3
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	b25b      	sxtb	r3, r3
 800654c:	4313      	orrs	r3, r2
 800654e:	b25b      	sxtb	r3, r3
 8006550:	b2db      	uxtb	r3, r3
 8006552:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8006554:	f107 020e 	add.w	r2, r7, #14
 8006558:	2301      	movs	r3, #1
 800655a:	216c      	movs	r1, #108	; 0x6c
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f7fb fbef 	bl	8001d40 <a_mpu6050_iic_write>
 8006562:	4603      	mov	r3, r0
 8006564:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006566:	7bfb      	ldrb	r3, [r7, #15]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <mpu6050_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu6050: write power management 2 failed.\n");              /* write power management 2 failed */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	699b      	ldr	r3, [r3, #24]
 8006570:	4805      	ldr	r0, [pc, #20]	; (8006588 <mpu6050_set_standby_mode+0xb0>)
 8006572:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <mpu6050_set_standby_mode+0xa2>
    }

    return 0;                                                                            /* success return 0 */
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	0800c048 	.word	0x0800c048
 8006588:	0800c074 	.word	0x0800c074

0800658c <mpu6050_set_wake_up_frequency>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_wake_up_frequency(mpu6050_handle_t *handle, mpu6050_wake_up_frequency_t frequency)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	460b      	mov	r3, r1
 8006596:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <mpu6050_set_wake_up_frequency+0x16>
    {
        return 2;                                                                        /* return error */
 800659e:	2302      	movs	r3, #2
 80065a0:	e039      	b.n	8006616 <mpu6050_set_wake_up_frequency+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d001      	beq.n	80065b0 <mpu6050_set_wake_up_frequency+0x24>
    {
        return 3;                                                                        /* return error */
 80065ac:	2303      	movs	r3, #3
 80065ae:	e032      	b.n	8006616 <mpu6050_set_wake_up_frequency+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 80065b0:	f107 020e 	add.w	r2, r7, #14
 80065b4:	2301      	movs	r3, #1
 80065b6:	216c      	movs	r1, #108	; 0x6c
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7fb fba5 	bl	8001d08 <a_mpu6050_iic_read>
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d005      	beq.n	80065d4 <mpu6050_set_wake_up_frequency+0x48>
    {
        handle->debug_print("mpu6050: read power management 2 failed.\n");               /* read power management 2 failed */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	4814      	ldr	r0, [pc, #80]	; (8006620 <mpu6050_set_wake_up_frequency+0x94>)
 80065ce:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80065d0:	2301      	movs	r3, #1
 80065d2:	e020      	b.n	8006616 <mpu6050_set_wake_up_frequency+0x8a>
    }
    prev &= ~(0x3 << 6);                                                                 /* clear config */
 80065d4:	7bbb      	ldrb	r3, [r7, #14]
 80065d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	73bb      	strb	r3, [r7, #14]
    prev |= frequency << 6;                                                              /* set config */
 80065de:	78fb      	ldrb	r3, [r7, #3]
 80065e0:	019b      	lsls	r3, r3, #6
 80065e2:	b25a      	sxtb	r2, r3
 80065e4:	7bbb      	ldrb	r3, [r7, #14]
 80065e6:	b25b      	sxtb	r3, r3
 80065e8:	4313      	orrs	r3, r2
 80065ea:	b25b      	sxtb	r3, r3
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 80065f0:	f107 020e 	add.w	r2, r7, #14
 80065f4:	2301      	movs	r3, #1
 80065f6:	216c      	movs	r1, #108	; 0x6c
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7fb fba1 	bl	8001d40 <a_mpu6050_iic_write>
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <mpu6050_set_wake_up_frequency+0x88>
    {
        handle->debug_print("mpu6050: write power management 2 failed.\n");              /* write power management 2 failed */
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	4805      	ldr	r0, [pc, #20]	; (8006624 <mpu6050_set_wake_up_frequency+0x98>)
 800660e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <mpu6050_set_wake_up_frequency+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	0800c048 	.word	0x0800c048
 8006624:	0800c074 	.word	0x0800c074

08006628 <mpu6050_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_sample_rate_divider(mpu6050_handle_t *handle, uint8_t d)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	70fb      	strb	r3, [r7, #3]
    uint8_t res;

    if (handle == NULL)                                                                  /* check handle */
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <mpu6050_set_sample_rate_divider+0x16>
    {
        return 2;                                                                        /* return error */
 800663a:	2302      	movs	r3, #2
 800663c:	e018      	b.n	8006670 <mpu6050_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006644:	2b01      	cmp	r3, #1
 8006646:	d001      	beq.n	800664c <mpu6050_set_sample_rate_divider+0x24>
    {
        return 3;                                                                        /* return error */
 8006648:	2303      	movs	r3, #3
 800664a:	e011      	b.n	8006670 <mpu6050_set_sample_rate_divider+0x48>
    }

    res = a_mpu6050_iic_write(handle, MPU6050_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 800664c:	1cfa      	adds	r2, r7, #3
 800664e:	2301      	movs	r3, #1
 8006650:	2119      	movs	r1, #25
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fb fb74 	bl	8001d40 <a_mpu6050_iic_write>
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800665c:	7bfb      	ldrb	r3, [r7, #15]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <mpu6050_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu6050: write smprt div failed.\n");                       /* write smprt div failed */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	4804      	ldr	r0, [pc, #16]	; (8006678 <mpu6050_set_sample_rate_divider+0x50>)
 8006668:	4798      	blx	r3

        return 1;                                                                        /* return error */
 800666a:	2301      	movs	r3, #1
 800666c:	e000      	b.n	8006670 <mpu6050_set_sample_rate_divider+0x48>
    }

    return 0;                                                                            /* success return 0 */
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	0800c134 	.word	0x0800c134

0800667c <mpu6050_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_extern_sync(mpu6050_handle_t *handle, mpu6050_extern_sync_t sync)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                /* check handle */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <mpu6050_set_extern_sync+0x16>
    {
        return 2;                                                                      /* return error */
 800668e:	2302      	movs	r3, #2
 8006690:	e039      	b.n	8006706 <mpu6050_set_extern_sync+0x8a>
    }
    if (handle->inited != 1)                                                           /* check handle initialization */
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006698:	2b01      	cmp	r3, #1
 800669a:	d001      	beq.n	80066a0 <mpu6050_set_extern_sync+0x24>
    {
        return 3;                                                                      /* return error */
 800669c:	2303      	movs	r3, #3
 800669e:	e032      	b.n	8006706 <mpu6050_set_extern_sync+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 80066a0:	f107 020e 	add.w	r2, r7, #14
 80066a4:	2301      	movs	r3, #1
 80066a6:	211a      	movs	r1, #26
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7fb fb2d 	bl	8001d08 <a_mpu6050_iic_read>
 80066ae:	4603      	mov	r3, r0
 80066b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <mpu6050_set_extern_sync+0x48>
    {
        handle->debug_print("mpu6050: read config failed.\n");                         /* read config failed */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	4814      	ldr	r0, [pc, #80]	; (8006710 <mpu6050_set_extern_sync+0x94>)
 80066be:	4798      	blx	r3

        return 1;                                                                      /* return error */
 80066c0:	2301      	movs	r3, #1
 80066c2:	e020      	b.n	8006706 <mpu6050_set_extern_sync+0x8a>
    }
    prev &= ~(0x7 << 3);                                                               /* clear config */
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                                 /* set config */
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	b25a      	sxtb	r2, r3
 80066d4:	7bbb      	ldrb	r3, [r7, #14]
 80066d6:	b25b      	sxtb	r3, r3
 80066d8:	4313      	orrs	r3, r2
 80066da:	b25b      	sxtb	r3, r3
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 80066e0:	f107 020e 	add.w	r2, r7, #14
 80066e4:	2301      	movs	r3, #1
 80066e6:	211a      	movs	r1, #26
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7fb fb29 	bl	8001d40 <a_mpu6050_iic_write>
 80066ee:	4603      	mov	r3, r0
 80066f0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <mpu6050_set_extern_sync+0x88>
    {
        handle->debug_print("mpu6050: write config failed.\n");                        /* write config failed */
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	4805      	ldr	r0, [pc, #20]	; (8006714 <mpu6050_set_extern_sync+0x98>)
 80066fe:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8006700:	2301      	movs	r3, #1
 8006702:	e000      	b.n	8006706 <mpu6050_set_extern_sync+0x8a>
    }

    return 0;                                                                          /* success return 0 */
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	0800c17c 	.word	0x0800c17c
 8006714:	0800c19c 	.word	0x0800c19c

08006718 <mpu6050_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_low_pass_filter(mpu6050_handle_t *handle, mpu6050_low_pass_filter_t filter)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                /* check handle */
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <mpu6050_set_low_pass_filter+0x16>
    {
        return 2;                                                                      /* return error */
 800672a:	2302      	movs	r3, #2
 800672c:	e035      	b.n	800679a <mpu6050_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                           /* check handle initialization */
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006734:	2b01      	cmp	r3, #1
 8006736:	d001      	beq.n	800673c <mpu6050_set_low_pass_filter+0x24>
    {
        return 3;                                                                      /* return error */
 8006738:	2303      	movs	r3, #3
 800673a:	e02e      	b.n	800679a <mpu6050_set_low_pass_filter+0x82>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 800673c:	f107 020e 	add.w	r2, r7, #14
 8006740:	2301      	movs	r3, #1
 8006742:	211a      	movs	r1, #26
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7fb fadf 	bl	8001d08 <a_mpu6050_iic_read>
 800674a:	4603      	mov	r3, r0
 800674c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 800674e:	7bfb      	ldrb	r3, [r7, #15]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <mpu6050_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6050: read config failed.\n");                         /* read config failed */
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	4812      	ldr	r0, [pc, #72]	; (80067a4 <mpu6050_set_low_pass_filter+0x8c>)
 800675a:	4798      	blx	r3

        return 1;                                                                      /* return error */
 800675c:	2301      	movs	r3, #1
 800675e:	e01c      	b.n	800679a <mpu6050_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                               /* clear config */
 8006760:	7bbb      	ldrb	r3, [r7, #14]
 8006762:	f023 0307 	bic.w	r3, r3, #7
 8006766:	b2db      	uxtb	r3, r3
 8006768:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                               /* set config */
 800676a:	7bba      	ldrb	r2, [r7, #14]
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	4313      	orrs	r3, r2
 8006770:	b2db      	uxtb	r3, r3
 8006772:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006774:	f107 020e 	add.w	r2, r7, #14
 8006778:	2301      	movs	r3, #1
 800677a:	211a      	movs	r1, #26
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7fb fadf 	bl	8001d40 <a_mpu6050_iic_write>
 8006782:	4603      	mov	r3, r0
 8006784:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 8006786:	7bfb      	ldrb	r3, [r7, #15]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d005      	beq.n	8006798 <mpu6050_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6050: write config failed.\n");                        /* write config failed */
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	4805      	ldr	r0, [pc, #20]	; (80067a8 <mpu6050_set_low_pass_filter+0x90>)
 8006792:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8006794:	2301      	movs	r3, #1
 8006796:	e000      	b.n	800679a <mpu6050_set_low_pass_filter+0x82>
    }

    return 0;                                                                          /* success return 0 */
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	0800c17c 	.word	0x0800c17c
 80067a8:	0800c19c 	.word	0x0800c19c

080067ac <mpu6050_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_gyroscope_test(mpu6050_handle_t *handle, mpu6050_axis_t axis, mpu6050_bool_t enable)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	70fb      	strb	r3, [r7, #3]
 80067b8:	4613      	mov	r3, r2
 80067ba:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <mpu6050_set_gyroscope_test+0x1a>
    {
        return 2;                                                                           /* return error */
 80067c2:	2302      	movs	r3, #2
 80067c4:	e043      	b.n	800684e <mpu6050_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d001      	beq.n	80067d4 <mpu6050_set_gyroscope_test+0x28>
    {
        return 3;                                                                           /* return error */
 80067d0:	2303      	movs	r3, #3
 80067d2:	e03c      	b.n	800684e <mpu6050_set_gyroscope_test+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 80067d4:	f107 020e 	add.w	r2, r7, #14
 80067d8:	2301      	movs	r3, #1
 80067da:	211b      	movs	r1, #27
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7fb fa93 	bl	8001d08 <a_mpu6050_iic_read>
 80067e2:	4603      	mov	r3, r0
 80067e4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <mpu6050_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu6050: read gyroscope config failed.\n");                    /* read gyroscope config failed */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	4819      	ldr	r0, [pc, #100]	; (8006858 <mpu6050_set_gyroscope_test+0xac>)
 80067f2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80067f4:	2301      	movs	r3, #1
 80067f6:	e02a      	b.n	800684e <mpu6050_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                                   /* clear config */
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	2201      	movs	r2, #1
 80067fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006800:	b25b      	sxtb	r3, r3
 8006802:	43db      	mvns	r3, r3
 8006804:	b25a      	sxtb	r2, r3
 8006806:	7bbb      	ldrb	r3, [r7, #14]
 8006808:	b25b      	sxtb	r3, r3
 800680a:	4013      	ands	r3, r2
 800680c:	b25b      	sxtb	r3, r3
 800680e:	b2db      	uxtb	r3, r3
 8006810:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                                 /* set config */
 8006812:	78ba      	ldrb	r2, [r7, #2]
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	b25a      	sxtb	r2, r3
 800681c:	7bbb      	ldrb	r3, [r7, #14]
 800681e:	b25b      	sxtb	r3, r3
 8006820:	4313      	orrs	r3, r2
 8006822:	b25b      	sxtb	r3, r3
 8006824:	b2db      	uxtb	r3, r3
 8006826:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006828:	f107 020e 	add.w	r2, r7, #14
 800682c:	2301      	movs	r3, #1
 800682e:	211b      	movs	r1, #27
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7fb fa85 	bl	8001d40 <a_mpu6050_iic_write>
 8006836:	4603      	mov	r3, r0
 8006838:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800683a:	7bfb      	ldrb	r3, [r7, #15]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d005      	beq.n	800684c <mpu6050_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu6050: write gyroscope config failed.\n");                   /* write gyroscope config failed */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	4805      	ldr	r0, [pc, #20]	; (800685c <mpu6050_set_gyroscope_test+0xb0>)
 8006846:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <mpu6050_set_gyroscope_test+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	0800c1bc 	.word	0x0800c1bc
 800685c:	0800c1e4 	.word	0x0800c1e4

08006860 <mpu6050_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_gyroscope_range(mpu6050_handle_t *handle, mpu6050_gyroscope_range_t range)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	460b      	mov	r3, r1
 800686a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <mpu6050_set_gyroscope_range+0x16>
    {
        return 2;                                                                           /* return error */
 8006872:	2302      	movs	r3, #2
 8006874:	e039      	b.n	80068ea <mpu6050_set_gyroscope_range+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800687c:	2b01      	cmp	r3, #1
 800687e:	d001      	beq.n	8006884 <mpu6050_set_gyroscope_range+0x24>
    {
        return 3;                                                                           /* return error */
 8006880:	2303      	movs	r3, #3
 8006882:	e032      	b.n	80068ea <mpu6050_set_gyroscope_range+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006884:	f107 020e 	add.w	r2, r7, #14
 8006888:	2301      	movs	r3, #1
 800688a:	211b      	movs	r1, #27
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f7fb fa3b 	bl	8001d08 <a_mpu6050_iic_read>
 8006892:	4603      	mov	r3, r0
 8006894:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006896:	7bfb      	ldrb	r3, [r7, #15]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <mpu6050_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu6050: read gyroscope config failed.\n");                    /* read gyroscope config failed */
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	4814      	ldr	r0, [pc, #80]	; (80068f4 <mpu6050_set_gyroscope_range+0x94>)
 80068a2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80068a4:	2301      	movs	r3, #1
 80068a6:	e020      	b.n	80068ea <mpu6050_set_gyroscope_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                      /* clear config */
 80068a8:	7bbb      	ldrb	r3, [r7, #14]
 80068aa:	f023 0318 	bic.w	r3, r3, #24
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                     /* set config */
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	b25a      	sxtb	r2, r3
 80068b8:	7bbb      	ldrb	r3, [r7, #14]
 80068ba:	b25b      	sxtb	r3, r3
 80068bc:	4313      	orrs	r3, r2
 80068be:	b25b      	sxtb	r3, r3
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 80068c4:	f107 020e 	add.w	r2, r7, #14
 80068c8:	2301      	movs	r3, #1
 80068ca:	211b      	movs	r1, #27
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7fb fa37 	bl	8001d40 <a_mpu6050_iic_write>
 80068d2:	4603      	mov	r3, r0
 80068d4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <mpu6050_set_gyroscope_range+0x88>
    {
        handle->debug_print("mpu6050: write gyroscope config failed.\n");                   /* write gyroscope config failed */
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	4805      	ldr	r0, [pc, #20]	; (80068f8 <mpu6050_set_gyroscope_range+0x98>)
 80068e2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <mpu6050_set_gyroscope_range+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	0800c1bc 	.word	0x0800c1bc
 80068f8:	0800c1e4 	.word	0x0800c1e4

080068fc <mpu6050_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_accelerometer_test(mpu6050_handle_t *handle, mpu6050_axis_t axis, mpu6050_bool_t enable)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	70fb      	strb	r3, [r7, #3]
 8006908:	4613      	mov	r3, r2
 800690a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <mpu6050_set_accelerometer_test+0x1a>
    {
        return 2;                                                                           /* return error */
 8006912:	2302      	movs	r3, #2
 8006914:	e043      	b.n	800699e <mpu6050_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800691c:	2b01      	cmp	r3, #1
 800691e:	d001      	beq.n	8006924 <mpu6050_set_accelerometer_test+0x28>
    {
        return 3;                                                                           /* return error */
 8006920:	2303      	movs	r3, #3
 8006922:	e03c      	b.n	800699e <mpu6050_set_accelerometer_test+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8006924:	f107 020e 	add.w	r2, r7, #14
 8006928:	2301      	movs	r3, #1
 800692a:	211c      	movs	r1, #28
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7fb f9eb 	bl	8001d08 <a_mpu6050_iic_read>
 8006932:	4603      	mov	r3, r0
 8006934:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006936:	7bfb      	ldrb	r3, [r7, #15]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d005      	beq.n	8006948 <mpu6050_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu6050: read accelerometer config failed.\n");                /* read accelerometer config failed */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	4819      	ldr	r0, [pc, #100]	; (80069a8 <mpu6050_set_accelerometer_test+0xac>)
 8006942:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006944:	2301      	movs	r3, #1
 8006946:	e02a      	b.n	800699e <mpu6050_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                                   /* clear config */
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	2201      	movs	r2, #1
 800694c:	fa02 f303 	lsl.w	r3, r2, r3
 8006950:	b25b      	sxtb	r3, r3
 8006952:	43db      	mvns	r3, r3
 8006954:	b25a      	sxtb	r2, r3
 8006956:	7bbb      	ldrb	r3, [r7, #14]
 8006958:	b25b      	sxtb	r3, r3
 800695a:	4013      	ands	r3, r2
 800695c:	b25b      	sxtb	r3, r3
 800695e:	b2db      	uxtb	r3, r3
 8006960:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                                 /* set config */
 8006962:	78ba      	ldrb	r2, [r7, #2]
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	fa02 f303 	lsl.w	r3, r2, r3
 800696a:	b25a      	sxtb	r2, r3
 800696c:	7bbb      	ldrb	r3, [r7, #14]
 800696e:	b25b      	sxtb	r3, r3
 8006970:	4313      	orrs	r3, r2
 8006972:	b25b      	sxtb	r3, r3
 8006974:	b2db      	uxtb	r3, r3
 8006976:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8006978:	f107 020e 	add.w	r2, r7, #14
 800697c:	2301      	movs	r3, #1
 800697e:	211c      	movs	r1, #28
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7fb f9dd 	bl	8001d40 <a_mpu6050_iic_write>
 8006986:	4603      	mov	r3, r0
 8006988:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800698a:	7bfb      	ldrb	r3, [r7, #15]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d005      	beq.n	800699c <mpu6050_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu6050: write accelerometer config failed.\n");               /* write accelerometer config failed */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	4805      	ldr	r0, [pc, #20]	; (80069ac <mpu6050_set_accelerometer_test+0xb0>)
 8006996:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <mpu6050_set_accelerometer_test+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	0800bbfc 	.word	0x0800bbfc
 80069ac:	0800c210 	.word	0x0800c210

080069b0 <mpu6050_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_accelerometer_range(mpu6050_handle_t *handle, mpu6050_accelerometer_range_t range)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <mpu6050_set_accelerometer_range+0x16>
    {
        return 2;                                                                           /* return error */
 80069c2:	2302      	movs	r3, #2
 80069c4:	e039      	b.n	8006a3a <mpu6050_set_accelerometer_range+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d001      	beq.n	80069d4 <mpu6050_set_accelerometer_range+0x24>
    {
        return 3;                                                                           /* return error */
 80069d0:	2303      	movs	r3, #3
 80069d2:	e032      	b.n	8006a3a <mpu6050_set_accelerometer_range+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 80069d4:	f107 020e 	add.w	r2, r7, #14
 80069d8:	2301      	movs	r3, #1
 80069da:	211c      	movs	r1, #28
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7fb f993 	bl	8001d08 <a_mpu6050_iic_read>
 80069e2:	4603      	mov	r3, r0
 80069e4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <mpu6050_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu6050: read accelerometer config failed.\n");                /* read accelerometer config failed */
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	4814      	ldr	r0, [pc, #80]	; (8006a44 <mpu6050_set_accelerometer_range+0x94>)
 80069f2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80069f4:	2301      	movs	r3, #1
 80069f6:	e020      	b.n	8006a3a <mpu6050_set_accelerometer_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                      /* clear config */
 80069f8:	7bbb      	ldrb	r3, [r7, #14]
 80069fa:	f023 0318 	bic.w	r3, r3, #24
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                     /* set config */
 8006a02:	78fb      	ldrb	r3, [r7, #3]
 8006a04:	00db      	lsls	r3, r3, #3
 8006a06:	b25a      	sxtb	r2, r3
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	b25b      	sxtb	r3, r3
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	b25b      	sxtb	r3, r3
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8006a14:	f107 020e 	add.w	r2, r7, #14
 8006a18:	2301      	movs	r3, #1
 8006a1a:	211c      	movs	r1, #28
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7fb f98f 	bl	8001d40 <a_mpu6050_iic_write>
 8006a22:	4603      	mov	r3, r0
 8006a24:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d005      	beq.n	8006a38 <mpu6050_set_accelerometer_range+0x88>
    {
        handle->debug_print("mpu6050: write accelerometer config failed.\n");               /* write accelerometer config failed */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	4805      	ldr	r0, [pc, #20]	; (8006a48 <mpu6050_set_accelerometer_range+0x98>)
 8006a32:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006a34:	2301      	movs	r3, #1
 8006a36:	e000      	b.n	8006a3a <mpu6050_set_accelerometer_range+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3710      	adds	r7, #16
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	0800bbfc 	.word	0x0800bbfc
 8006a48:	0800c210 	.word	0x0800c210

08006a4c <mpu6050_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fifo_enable(mpu6050_handle_t *handle, mpu6050_fifo_t fifo, mpu6050_bool_t enable)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	70fb      	strb	r3, [r7, #3]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                 /* check handle */
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <mpu6050_set_fifo_enable+0x1a>
    {
        return 2;                                                                       /* return error */
 8006a62:	2302      	movs	r3, #2
 8006a64:	e043      	b.n	8006aee <mpu6050_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d001      	beq.n	8006a74 <mpu6050_set_fifo_enable+0x28>
    {
        return 3;                                                                       /* return error */
 8006a70:	2303      	movs	r3, #3
 8006a72:	e03c      	b.n	8006aee <mpu6050_set_fifo_enable+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 8006a74:	f107 020e 	add.w	r2, r7, #14
 8006a78:	2301      	movs	r3, #1
 8006a7a:	2123      	movs	r1, #35	; 0x23
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7fb f943 	bl	8001d08 <a_mpu6050_iic_read>
 8006a82:	4603      	mov	r3, r0
 8006a84:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <mpu6050_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu6050: read fifo enable config failed.\n");              /* read fifo enable config failed */
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	699b      	ldr	r3, [r3, #24]
 8006a90:	4819      	ldr	r0, [pc, #100]	; (8006af8 <mpu6050_set_fifo_enable+0xac>)
 8006a92:	4798      	blx	r3

        return 1;                                                                       /* return error */
 8006a94:	2301      	movs	r3, #1
 8006a96:	e02a      	b.n	8006aee <mpu6050_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                               /* clear config */
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	b25b      	sxtb	r3, r3
 8006aa2:	43db      	mvns	r3, r3
 8006aa4:	b25a      	sxtb	r2, r3
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	b25b      	sxtb	r3, r3
 8006aaa:	4013      	ands	r3, r2
 8006aac:	b25b      	sxtb	r3, r3
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                             /* set config */
 8006ab2:	78ba      	ldrb	r2, [r7, #2]
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aba:	b25a      	sxtb	r2, r3
 8006abc:	7bbb      	ldrb	r3, [r7, #14]
 8006abe:	b25b      	sxtb	r3, r3
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	b25b      	sxtb	r3, r3
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 8006ac8:	f107 020e 	add.w	r2, r7, #14
 8006acc:	2301      	movs	r3, #1
 8006ace:	2123      	movs	r1, #35	; 0x23
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7fb f935 	bl	8001d40 <a_mpu6050_iic_write>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <mpu6050_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu6050: write fifo enable config failed.\n");             /* write fifo enable config failed */
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	4805      	ldr	r0, [pc, #20]	; (8006afc <mpu6050_set_fifo_enable+0xb0>)
 8006ae6:	4798      	blx	r3

        return 1;                                                                       /* return error */
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <mpu6050_set_fifo_enable+0xa2>
    }

    return 0;                                                                           /* success return 0 */
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	0800c240 	.word	0x0800c240
 8006afc:	0800c26c 	.word	0x0800c26c

08006b00 <mpu6050_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_level(mpu6050_handle_t *handle, mpu6050_pin_level_t level)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <mpu6050_set_interrupt_level+0x16>
    {
        return 2;                                                                           /* return error */
 8006b12:	2302      	movs	r3, #2
 8006b14:	e039      	b.n	8006b8a <mpu6050_set_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d001      	beq.n	8006b24 <mpu6050_set_interrupt_level+0x24>
    {
        return 3;                                                                           /* return error */
 8006b20:	2303      	movs	r3, #3
 8006b22:	e032      	b.n	8006b8a <mpu6050_set_interrupt_level+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8006b24:	f107 020e 	add.w	r2, r7, #14
 8006b28:	2301      	movs	r3, #1
 8006b2a:	2137      	movs	r1, #55	; 0x37
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7fb f8eb 	bl	8001d08 <a_mpu6050_iic_read>
 8006b32:	4603      	mov	r3, r0
 8006b34:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <mpu6050_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	4814      	ldr	r0, [pc, #80]	; (8006b94 <mpu6050_set_interrupt_level+0x94>)
 8006b42:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006b44:	2301      	movs	r3, #1
 8006b46:	e020      	b.n	8006b8a <mpu6050_set_interrupt_level+0x8a>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                     /* set config */
 8006b52:	78fb      	ldrb	r3, [r7, #3]
 8006b54:	01db      	lsls	r3, r3, #7
 8006b56:	b25a      	sxtb	r2, r3
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	b25b      	sxtb	r3, r3
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	b25b      	sxtb	r3, r3
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8006b64:	f107 020e 	add.w	r2, r7, #14
 8006b68:	2301      	movs	r3, #1
 8006b6a:	2137      	movs	r1, #55	; 0x37
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7fb f8e7 	bl	8001d40 <a_mpu6050_iic_write>
 8006b72:	4603      	mov	r3, r0
 8006b74:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <mpu6050_set_interrupt_level+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	4805      	ldr	r0, [pc, #20]	; (8006b98 <mpu6050_set_interrupt_level+0x98>)
 8006b82:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <mpu6050_set_interrupt_level+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	0800c298 	.word	0x0800c298
 8006b98:	0800c2c0 	.word	0x0800c2c0

08006b9c <mpu6050_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_pin_type(mpu6050_handle_t *handle, mpu6050_pin_type_t type)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <mpu6050_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                           /* return error */
 8006bae:	2302      	movs	r3, #2
 8006bb0:	e039      	b.n	8006c26 <mpu6050_set_interrupt_pin_type+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d001      	beq.n	8006bc0 <mpu6050_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                           /* return error */
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e032      	b.n	8006c26 <mpu6050_set_interrupt_pin_type+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8006bc0:	f107 020e 	add.w	r2, r7, #14
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	2137      	movs	r1, #55	; 0x37
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7fb f89d 	bl	8001d08 <a_mpu6050_iic_read>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d005      	beq.n	8006be4 <mpu6050_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	4814      	ldr	r0, [pc, #80]	; (8006c30 <mpu6050_set_interrupt_pin_type+0x94>)
 8006bde:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006be0:	2301      	movs	r3, #1
 8006be2:	e020      	b.n	8006c26 <mpu6050_set_interrupt_pin_type+0x8a>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                      /* set config */
 8006bee:	78fb      	ldrb	r3, [r7, #3]
 8006bf0:	019b      	lsls	r3, r3, #6
 8006bf2:	b25a      	sxtb	r2, r3
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	b25b      	sxtb	r3, r3
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	b25b      	sxtb	r3, r3
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8006c00:	f107 020e 	add.w	r2, r7, #14
 8006c04:	2301      	movs	r3, #1
 8006c06:	2137      	movs	r1, #55	; 0x37
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7fb f899 	bl	8001d40 <a_mpu6050_iic_write>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <mpu6050_set_interrupt_pin_type+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	4805      	ldr	r0, [pc, #20]	; (8006c34 <mpu6050_set_interrupt_pin_type+0x98>)
 8006c1e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <mpu6050_set_interrupt_pin_type+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	0800c298 	.word	0x0800c298
 8006c34:	0800c2c0 	.word	0x0800c2c0

08006c38 <mpu6050_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_latch(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <mpu6050_set_interrupt_latch+0x16>
    {
        return 2;                                                                           /* return error */
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e03c      	b.n	8006cc8 <mpu6050_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d001      	beq.n	8006c5c <mpu6050_set_interrupt_latch+0x24>
    {
        return 3;                                                                           /* return error */
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e035      	b.n	8006cc8 <mpu6050_set_interrupt_latch+0x90>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8006c5c:	f107 020e 	add.w	r2, r7, #14
 8006c60:	2301      	movs	r3, #1
 8006c62:	2137      	movs	r1, #55	; 0x37
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fb f84f 	bl	8001d08 <a_mpu6050_iic_read>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <mpu6050_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	4815      	ldr	r0, [pc, #84]	; (8006cd0 <mpu6050_set_interrupt_latch+0x98>)
 8006c7a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e023      	b.n	8006cc8 <mpu6050_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                      /* clear config */
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	f023 0320 	bic.w	r3, r3, #32
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                                 /* set config */
 8006c8a:	78fb      	ldrb	r3, [r7, #3]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <mpu6050_set_interrupt_latch+0x5c>
 8006c90:	2220      	movs	r2, #32
 8006c92:	e000      	b.n	8006c96 <mpu6050_set_interrupt_latch+0x5e>
 8006c94:	2200      	movs	r2, #0
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	b25b      	sxtb	r3, r3
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	b25b      	sxtb	r3, r3
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8006ca2:	f107 020e 	add.w	r2, r7, #14
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	2137      	movs	r1, #55	; 0x37
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fb f848 	bl	8001d40 <a_mpu6050_iic_write>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d005      	beq.n	8006cc6 <mpu6050_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	699b      	ldr	r3, [r3, #24]
 8006cbe:	4805      	ldr	r0, [pc, #20]	; (8006cd4 <mpu6050_set_interrupt_latch+0x9c>)
 8006cc0:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e000      	b.n	8006cc8 <mpu6050_set_interrupt_latch+0x90>
    }

    return 0;                                                                               /* success return 0 */
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	0800c298 	.word	0x0800c298
 8006cd4:	0800c2c0 	.word	0x0800c2c0

08006cd8 <mpu6050_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_read_clear(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <mpu6050_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                           /* return error */
 8006cea:	2302      	movs	r3, #2
 8006cec:	e039      	b.n	8006d62 <mpu6050_set_interrupt_read_clear+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d001      	beq.n	8006cfc <mpu6050_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                           /* return error */
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e032      	b.n	8006d62 <mpu6050_set_interrupt_read_clear+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8006cfc:	f107 020e 	add.w	r2, r7, #14
 8006d00:	2301      	movs	r3, #1
 8006d02:	2137      	movs	r1, #55	; 0x37
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fa ffff 	bl	8001d08 <a_mpu6050_iic_read>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <mpu6050_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	4814      	ldr	r0, [pc, #80]	; (8006d6c <mpu6050_set_interrupt_read_clear+0x94>)
 8006d1a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e020      	b.n	8006d62 <mpu6050_set_interrupt_read_clear+0x8a>
    }
    prev &= ~(1 << 4);                                                                      /* clear config */
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	f023 0310 	bic.w	r3, r3, #16
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                    /* set config */
 8006d2a:	78fb      	ldrb	r3, [r7, #3]
 8006d2c:	011b      	lsls	r3, r3, #4
 8006d2e:	b25a      	sxtb	r2, r3
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	b25b      	sxtb	r3, r3
 8006d34:	4313      	orrs	r3, r2
 8006d36:	b25b      	sxtb	r3, r3
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8006d3c:	f107 020e 	add.w	r2, r7, #14
 8006d40:	2301      	movs	r3, #1
 8006d42:	2137      	movs	r1, #55	; 0x37
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7fa fffb 	bl	8001d40 <a_mpu6050_iic_write>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <mpu6050_set_interrupt_read_clear+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	4805      	ldr	r0, [pc, #20]	; (8006d70 <mpu6050_set_interrupt_read_clear+0x98>)
 8006d5a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <mpu6050_set_interrupt_read_clear+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	0800c298 	.word	0x0800c298
 8006d70:	0800c2c0 	.word	0x0800c2c0

08006d74 <mpu6050_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fsync_interrupt_level(mpu6050_handle_t *handle, mpu6050_pin_level_t level)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <mpu6050_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                           /* return error */
 8006d86:	2302      	movs	r3, #2
 8006d88:	e039      	b.n	8006dfe <mpu6050_set_fsync_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d001      	beq.n	8006d98 <mpu6050_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                           /* return error */
 8006d94:	2303      	movs	r3, #3
 8006d96:	e032      	b.n	8006dfe <mpu6050_set_fsync_interrupt_level+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8006d98:	f107 020e 	add.w	r2, r7, #14
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	2137      	movs	r1, #55	; 0x37
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7fa ffb1 	bl	8001d08 <a_mpu6050_iic_read>
 8006da6:	4603      	mov	r3, r0
 8006da8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d005      	beq.n	8006dbc <mpu6050_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	4814      	ldr	r0, [pc, #80]	; (8006e08 <mpu6050_set_fsync_interrupt_level+0x94>)
 8006db6:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006db8:	2301      	movs	r3, #1
 8006dba:	e020      	b.n	8006dfe <mpu6050_set_fsync_interrupt_level+0x8a>
    }
    prev &= ~(1 << 3);                                                                      /* clear config */
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	f023 0308 	bic.w	r3, r3, #8
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                     /* set config */
 8006dc6:	78fb      	ldrb	r3, [r7, #3]
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	b25a      	sxtb	r2, r3
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
 8006dce:	b25b      	sxtb	r3, r3
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	b25b      	sxtb	r3, r3
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8006dd8:	f107 020e 	add.w	r2, r7, #14
 8006ddc:	2301      	movs	r3, #1
 8006dde:	2137      	movs	r1, #55	; 0x37
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7fa ffad 	bl	8001d40 <a_mpu6050_iic_write>
 8006de6:	4603      	mov	r3, r0
 8006de8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <mpu6050_set_fsync_interrupt_level+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	4805      	ldr	r0, [pc, #20]	; (8006e0c <mpu6050_set_fsync_interrupt_level+0x98>)
 8006df6:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <mpu6050_set_fsync_interrupt_level+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	0800c298 	.word	0x0800c298
 8006e0c:	0800c2c0 	.word	0x0800c2c0

08006e10 <mpu6050_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fsync_interrupt(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <mpu6050_set_fsync_interrupt+0x16>
    {
        return 2;                                                                           /* return error */
 8006e22:	2302      	movs	r3, #2
 8006e24:	e039      	b.n	8006e9a <mpu6050_set_fsync_interrupt+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d001      	beq.n	8006e34 <mpu6050_set_fsync_interrupt+0x24>
    {
        return 3;                                                                           /* return error */
 8006e30:	2303      	movs	r3, #3
 8006e32:	e032      	b.n	8006e9a <mpu6050_set_fsync_interrupt+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8006e34:	f107 020e 	add.w	r2, r7, #14
 8006e38:	2301      	movs	r3, #1
 8006e3a:	2137      	movs	r1, #55	; 0x37
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7fa ff63 	bl	8001d08 <a_mpu6050_iic_read>
 8006e42:	4603      	mov	r3, r0
 8006e44:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <mpu6050_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	4814      	ldr	r0, [pc, #80]	; (8006ea4 <mpu6050_set_fsync_interrupt+0x94>)
 8006e52:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006e54:	2301      	movs	r3, #1
 8006e56:	e020      	b.n	8006e9a <mpu6050_set_fsync_interrupt+0x8a>
    }
    prev &= ~(1 << 2);                                                                      /* clear config */
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	f023 0304 	bic.w	r3, r3, #4
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                    /* set config */
 8006e62:	78fb      	ldrb	r3, [r7, #3]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	b25a      	sxtb	r2, r3
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	b25b      	sxtb	r3, r3
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	b25b      	sxtb	r3, r3
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8006e74:	f107 020e 	add.w	r2, r7, #14
 8006e78:	2301      	movs	r3, #1
 8006e7a:	2137      	movs	r1, #55	; 0x37
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7fa ff5f 	bl	8001d40 <a_mpu6050_iic_write>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <mpu6050_set_fsync_interrupt+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	4805      	ldr	r0, [pc, #20]	; (8006ea8 <mpu6050_set_fsync_interrupt+0x98>)
 8006e92:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006e94:	2301      	movs	r3, #1
 8006e96:	e000      	b.n	8006e9a <mpu6050_set_fsync_interrupt+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	0800c298 	.word	0x0800c298
 8006ea8:	0800c2c0 	.word	0x0800c2c0

08006eac <mpu6050_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_iic_bypass(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <mpu6050_set_iic_bypass+0x16>
    {
        return 2;                                                                           /* return error */
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	e039      	b.n	8006f36 <mpu6050_set_iic_bypass+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d001      	beq.n	8006ed0 <mpu6050_set_iic_bypass+0x24>
    {
        return 3;                                                                           /* return error */
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e032      	b.n	8006f36 <mpu6050_set_iic_bypass+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 8006ed0:	f107 020e 	add.w	r2, r7, #14
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	2137      	movs	r1, #55	; 0x37
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f7fa ff15 	bl	8001d08 <a_mpu6050_iic_read>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <mpu6050_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	4814      	ldr	r0, [pc, #80]	; (8006f40 <mpu6050_set_iic_bypass+0x94>)
 8006eee:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e020      	b.n	8006f36 <mpu6050_set_iic_bypass+0x8a>
    }
    prev &= ~(1 << 1);                                                                      /* clear config */
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	f023 0302 	bic.w	r3, r3, #2
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                    /* set config */
 8006efe:	78fb      	ldrb	r3, [r7, #3]
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	b25a      	sxtb	r2, r3
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	b25b      	sxtb	r3, r3
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	b25b      	sxtb	r3, r3
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8006f10:	f107 020e 	add.w	r2, r7, #14
 8006f14:	2301      	movs	r3, #1
 8006f16:	2137      	movs	r1, #55	; 0x37
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fa ff11 	bl	8001d40 <a_mpu6050_iic_write>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <mpu6050_set_iic_bypass+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	4805      	ldr	r0, [pc, #20]	; (8006f44 <mpu6050_set_iic_bypass+0x98>)
 8006f2e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <mpu6050_set_iic_bypass+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	0800c298 	.word	0x0800c298
 8006f44:	0800c2c0 	.word	0x0800c2c0

08006f48 <mpu6050_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt(mpu6050_handle_t *handle, mpu6050_interrupt_t type, mpu6050_bool_t enable)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
 8006f54:	4613      	mov	r3, r2
 8006f56:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <mpu6050_set_interrupt+0x1a>
    {
        return 2;                                                                           /* return error */
 8006f5e:	2302      	movs	r3, #2
 8006f60:	e043      	b.n	8006fea <mpu6050_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d001      	beq.n	8006f70 <mpu6050_set_interrupt+0x28>
    {
        return 3;                                                                           /* return error */
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e03c      	b.n	8006fea <mpu6050_set_interrupt+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 8006f70:	f107 020e 	add.w	r2, r7, #14
 8006f74:	2301      	movs	r3, #1
 8006f76:	2138      	movs	r1, #56	; 0x38
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7fa fec5 	bl	8001d08 <a_mpu6050_iic_read>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <mpu6050_set_interrupt+0x4c>
    {
        handle->debug_print("mpu6050: read interrupt enable failed.\n");                    /* read interrupt enable failed */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	4819      	ldr	r0, [pc, #100]	; (8006ff4 <mpu6050_set_interrupt+0xac>)
 8006f8e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006f90:	2301      	movs	r3, #1
 8006f92:	e02a      	b.n	8006fea <mpu6050_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                                   /* clear config */
 8006f94:	78fb      	ldrb	r3, [r7, #3]
 8006f96:	2201      	movs	r2, #1
 8006f98:	fa02 f303 	lsl.w	r3, r2, r3
 8006f9c:	b25b      	sxtb	r3, r3
 8006f9e:	43db      	mvns	r3, r3
 8006fa0:	b25a      	sxtb	r2, r3
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	b25b      	sxtb	r3, r3
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	b25b      	sxtb	r3, r3
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                                 /* set config */
 8006fae:	78ba      	ldrb	r2, [r7, #2]
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb6:	b25a      	sxtb	r2, r3
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	b25b      	sxtb	r3, r3
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	b25b      	sxtb	r3, r3
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 8006fc4:	f107 020e 	add.w	r2, r7, #14
 8006fc8:	2301      	movs	r3, #1
 8006fca:	2138      	movs	r1, #56	; 0x38
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7fa feb7 	bl	8001d40 <a_mpu6050_iic_write>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <mpu6050_set_interrupt+0xa0>
    {
        handle->debug_print("mpu6050: write interrupt enable failed.\n");                   /* write interrupt enable failed */
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	4805      	ldr	r0, [pc, #20]	; (8006ff8 <mpu6050_set_interrupt+0xb0>)
 8006fe2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e000      	b.n	8006fea <mpu6050_set_interrupt+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	0800c2e8 	.word	0x0800c2e8
 8006ff8:	0800c310 	.word	0x0800c310

08006ffc <mpu6050_set_motion_threshold>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_motion_threshold(mpu6050_handle_t *handle, uint8_t threshold)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	70fb      	strb	r3, [r7, #3]
    uint8_t res;

    if (handle == NULL)                                                                               /* check handle */
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d101      	bne.n	8007012 <mpu6050_set_motion_threshold+0x16>
    {
        return 2;                                                                                     /* return error */
 800700e:	2302      	movs	r3, #2
 8007010:	e018      	b.n	8007044 <mpu6050_set_motion_threshold+0x48>
    }
    if (handle->inited != 1)                                                                          /* check handle initialization */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007018:	2b01      	cmp	r3, #1
 800701a:	d001      	beq.n	8007020 <mpu6050_set_motion_threshold+0x24>
    {
        return 3;                                                                                     /* return error */
 800701c:	2303      	movs	r3, #3
 800701e:	e011      	b.n	8007044 <mpu6050_set_motion_threshold+0x48>
    }

    res = a_mpu6050_iic_write(handle, MPU6050_REG_MOTION_THRESHOLD, (uint8_t *)&threshold, 1);        /* write motion threshold */
 8007020:	1cfa      	adds	r2, r7, #3
 8007022:	2301      	movs	r3, #1
 8007024:	211f      	movs	r1, #31
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7fa fe8a 	bl	8001d40 <a_mpu6050_iic_write>
 800702c:	4603      	mov	r3, r0
 800702e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                     /* check result */
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d005      	beq.n	8007042 <mpu6050_set_motion_threshold+0x46>
    {
        handle->debug_print("mpu6050: write motion threshold failed.\n");                             /* write motion threshold failed*/
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	4804      	ldr	r0, [pc, #16]	; (800704c <mpu6050_set_motion_threshold+0x50>)
 800703c:	4798      	blx	r3

        return 1;                                                                                     /* return error */
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <mpu6050_set_motion_threshold+0x48>
    }

    return 0;                                                                                         /* success return 0 */
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	0800c4a4 	.word	0x0800c4a4

08007050 <mpu6050_motion_threshold_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6050_motion_threshold_convert_to_register(mpu6050_handle_t *handle, float mg, uint8_t *reg)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	ed87 0a02 	vstr	s0, [r7, #8]
 800705c:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                  /* check handle */
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <mpu6050_motion_threshold_convert_to_register+0x18>
    {
        return 2;                        /* return error */
 8007064:	2302      	movs	r3, #2
 8007066:	e015      	b.n	8007094 <mpu6050_motion_threshold_convert_to_register+0x44>
    }
    if (handle->inited != 1)             /* check handle initialization */
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800706e:	2b01      	cmp	r3, #1
 8007070:	d001      	beq.n	8007076 <mpu6050_motion_threshold_convert_to_register+0x26>
    {
        return 3;                        /* return error */
 8007072:	2303      	movs	r3, #3
 8007074:	e00e      	b.n	8007094 <mpu6050_motion_threshold_convert_to_register+0x44>
    }

    *reg = (uint8_t)(mg / 32.0f);        /* convert real data to register data */
 8007076:	ed97 7a02 	vldr	s14, [r7, #8]
 800707a:	eddf 6a09 	vldr	s13, [pc, #36]	; 80070a0 <mpu6050_motion_threshold_convert_to_register+0x50>
 800707e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007086:	edc7 7a00 	vstr	s15, [r7]
 800708a:	783b      	ldrb	r3, [r7, #0]
 800708c:	b2da      	uxtb	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	701a      	strb	r2, [r3, #0]

    return 0;                            /* success return 0 */
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	42000000 	.word	0x42000000

080070a4 <mpu6050_set_motion_duration>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_motion_duration(mpu6050_handle_t *handle, uint8_t duration)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	70fb      	strb	r3, [r7, #3]
    uint8_t res;

    if (handle == NULL)                                                                             /* check handle */
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <mpu6050_set_motion_duration+0x16>
    {
        return 2;                                                                                   /* return error */
 80070b6:	2302      	movs	r3, #2
 80070b8:	e018      	b.n	80070ec <mpu6050_set_motion_duration+0x48>
    }
    if (handle->inited != 1)                                                                        /* check handle initialization */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d001      	beq.n	80070c8 <mpu6050_set_motion_duration+0x24>
    {
        return 3;                                                                                   /* return error */
 80070c4:	2303      	movs	r3, #3
 80070c6:	e011      	b.n	80070ec <mpu6050_set_motion_duration+0x48>
    }

    res = a_mpu6050_iic_write(handle, MPU6050_REG_MOTION_DURATION, (uint8_t *)&duration, 1);        /* write motion duration */
 80070c8:	1cfa      	adds	r2, r7, #3
 80070ca:	2301      	movs	r3, #1
 80070cc:	2120      	movs	r1, #32
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fa fe36 	bl	8001d40 <a_mpu6050_iic_write>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                   /* check result */
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d005      	beq.n	80070ea <mpu6050_set_motion_duration+0x46>
    {
        handle->debug_print("mpu6050: write motion duration failed.\n");                            /* write motion duration failed*/
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	4804      	ldr	r0, [pc, #16]	; (80070f4 <mpu6050_set_motion_duration+0x50>)
 80070e4:	4798      	blx	r3

        return 1;                                                                                   /* return error */
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <mpu6050_set_motion_duration+0x48>
    }

    return 0;                                                                                       /* success return 0 */
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	0800c4f8 	.word	0x0800c4f8

080070f8 <mpu6050_motion_duration_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6050_motion_duration_convert_to_register(mpu6050_handle_t *handle, uint8_t ms, uint8_t *reg)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	460b      	mov	r3, r1
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	72fb      	strb	r3, [r7, #11]
    if (handle == NULL)             /* check handle */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <mpu6050_motion_duration_convert_to_register+0x18>
    {
        return 2;                   /* return error */
 800710c:	2302      	movs	r3, #2
 800710e:	e00a      	b.n	8007126 <mpu6050_motion_duration_convert_to_register+0x2e>
    }
    if (handle->inited != 1)        /* check handle initialization */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007116:	2b01      	cmp	r3, #1
 8007118:	d001      	beq.n	800711e <mpu6050_motion_duration_convert_to_register+0x26>
    {
        return 3;                   /* return error */
 800711a:	2303      	movs	r3, #3
 800711c:	e003      	b.n	8007126 <mpu6050_motion_duration_convert_to_register+0x2e>
    }

    *reg = (uint8_t)ms;             /* convert real data to register data */
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	7afa      	ldrb	r2, [r7, #11]
 8007122:	701a      	strb	r2, [r3, #0]

    return 0;                       /* success return 0 */
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3714      	adds	r7, #20
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
	...

08007134 <mpu6050_set_force_accel_sample>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_force_accel_sample(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                      /* check handle */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <mpu6050_set_force_accel_sample+0x16>
    {
        return 2;                                                                            /* return error */
 8007146:	2302      	movs	r3, #2
 8007148:	e03d      	b.n	80071c6 <mpu6050_set_force_accel_sample+0x92>
    }
    if (handle->inited != 1)                                                                 /* check handle initialization */
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007150:	2b01      	cmp	r3, #1
 8007152:	d001      	beq.n	8007158 <mpu6050_set_force_accel_sample+0x24>
    {
        return 3;                                                                            /* return error */
 8007154:	2303      	movs	r3, #3
 8007156:	e036      	b.n	80071c6 <mpu6050_set_force_accel_sample+0x92>
    }

    handle->delay_ms(5);                                                                     /* 5ms */
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	2005      	movs	r0, #5
 800715e:	4798      	blx	r3
    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);         /* read accel config */
 8007160:	f107 020e 	add.w	r2, r7, #14
 8007164:	2301      	movs	r3, #1
 8007166:	211c      	movs	r1, #28
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f7fa fdcd 	bl	8001d08 <a_mpu6050_iic_read>
 800716e:	4603      	mov	r3, r0
 8007170:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                            /* check result */
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <mpu6050_set_force_accel_sample+0x50>
    {
        handle->debug_print("mpu6050: read accel config failed.\n");                         /* read accel config failed */
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	4814      	ldr	r0, [pc, #80]	; (80071d0 <mpu6050_set_force_accel_sample+0x9c>)
 800717e:	4798      	blx	r3

        return 1;                                                                            /* return error */
 8007180:	2301      	movs	r3, #1
 8007182:	e020      	b.n	80071c6 <mpu6050_set_force_accel_sample+0x92>
    }
    if (enable == MPU6050_BOOL_TRUE)                                                         /* enable */
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d105      	bne.n	8007196 <mpu6050_set_force_accel_sample+0x62>
    {
        prev |= 0x7;                                                                         /* set the accel sample */
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	f043 0307 	orr.w	r3, r3, #7
 8007190:	b2db      	uxtb	r3, r3
 8007192:	73bb      	strb	r3, [r7, #14]
 8007194:	e004      	b.n	80071a0 <mpu6050_set_force_accel_sample+0x6c>
    }
    else                                                                                     /* disable */
    {
        prev &= ~0x7;                                                                        /* clear the accel sample */
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	f023 0307 	bic.w	r3, r3, #7
 800719c:	b2db      	uxtb	r3, r3
 800719e:	73bb      	strb	r3, [r7, #14]
    }
    res = a_mpu6050_iic_write(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* write accel config */
 80071a0:	f107 020e 	add.w	r2, r7, #14
 80071a4:	2301      	movs	r3, #1
 80071a6:	211c      	movs	r1, #28
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7fa fdc9 	bl	8001d40 <a_mpu6050_iic_write>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                            /* check result */
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d005      	beq.n	80071c4 <mpu6050_set_force_accel_sample+0x90>
    {
        handle->debug_print("mpu6050: write accel config failed.\n");                        /* write accel config failed */
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	4805      	ldr	r0, [pc, #20]	; (80071d4 <mpu6050_set_force_accel_sample+0xa0>)
 80071be:	4798      	blx	r3

        return 1;                                                                            /* return error */
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <mpu6050_set_force_accel_sample+0x92>
    }

    return 0;                                                                                /* success return 0 */
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	0800bd4c 	.word	0x0800bd4c
 80071d4:	0800c548 	.word	0x0800c548

080071d8 <mpu6050_self_test>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6050_self_test(mpu6050_handle_t *handle, int32_t gyro_offset_raw[3], int32_t accel_offset_raw[3])
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08c      	sub	sp, #48	; 0x30
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
    uint8_t res;
    uint8_t prev;
    int32_t gyro_offset_raw_st[3];
    int32_t accel_offset_raw_st[3];

    if (handle == NULL)                                                                    /* check handle */
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <mpu6050_self_test+0x16>
    {
        return 2;                                                                          /* return error */
 80071ea:	2302      	movs	r3, #2
 80071ec:	e0a1      	b.n	8007332 <mpu6050_self_test+0x15a>
    }
    if (handle->inited != 1)                                                               /* check handle initialization */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d001      	beq.n	80071fc <mpu6050_self_test+0x24>
    {
        return 3;                                                                          /* return error */
 80071f8:	2303      	movs	r3, #3
 80071fa:	e09a      	b.n	8007332 <mpu6050_self_test+0x15a>
    }

    res = a_mpu6050_get_st_biases(handle, gyro_offset_raw, accel_offset_raw, 0);           /* get st biases */
 80071fc:	2300      	movs	r3, #0
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7fb f9bc 	bl	8002580 <a_mpu6050_get_st_biases>
 8007208:	4603      	mov	r3, r0
 800720a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (res != 0)                                                                          /* check result */
 800720e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007212:	2b00      	cmp	r3, #0
 8007214:	d005      	beq.n	8007222 <mpu6050_self_test+0x4a>
    {
        handle->debug_print("mpu6050: get st biases failed.\n");                           /* get st biases failed */
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	4848      	ldr	r0, [pc, #288]	; (800733c <mpu6050_self_test+0x164>)
 800721c:	4798      	blx	r3

        return 1;                                                                          /* return error */
 800721e:	2301      	movs	r3, #1
 8007220:	e087      	b.n	8007332 <mpu6050_self_test+0x15a>
    }
    res = a_mpu6050_get_st_biases(handle, gyro_offset_raw_st, accel_offset_raw_st, 1);     /* get st biases */
 8007222:	f107 0214 	add.w	r2, r7, #20
 8007226:	f107 0120 	add.w	r1, r7, #32
 800722a:	2301      	movs	r3, #1
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f7fb f9a7 	bl	8002580 <a_mpu6050_get_st_biases>
 8007232:	4603      	mov	r3, r0
 8007234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (res != 0)                                                                          /* check result */
 8007238:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <mpu6050_self_test+0x74>
    {
        handle->debug_print("mpu6050: get st biases failed.\n");                           /* get st biases failed */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	483d      	ldr	r0, [pc, #244]	; (800733c <mpu6050_self_test+0x164>)
 8007246:	4798      	blx	r3

        return 1;                                                                          /* return error */
 8007248:	2301      	movs	r3, #1
 800724a:	e072      	b.n	8007332 <mpu6050_self_test+0x15a>
    }
    res = a_mpu6050_accel_self_test(handle, accel_offset_raw, accel_offset_raw_st);        /* accel self test */
 800724c:	f107 0314 	add.w	r3, r7, #20
 8007250:	461a      	mov	r2, r3
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7fb f827 	bl	80022a8 <a_mpu6050_accel_self_test>
 800725a:	4603      	mov	r3, r0
 800725c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (res != 0)                                                                          /* check result */
 8007260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <mpu6050_self_test+0x9c>
    {
        handle->debug_print("mpu6050: accel self test failed.\n");                         /* accel self test failed */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	699b      	ldr	r3, [r3, #24]
 800726c:	4834      	ldr	r0, [pc, #208]	; (8007340 <mpu6050_self_test+0x168>)
 800726e:	4798      	blx	r3

        return 1;                                                                          /* return error */
 8007270:	2301      	movs	r3, #1
 8007272:	e05e      	b.n	8007332 <mpu6050_self_test+0x15a>
    }
    res = a_mpu6050_gyro_self_test(handle, gyro_offset_raw, gyro_offset_raw_st);           /* gyro self test */
 8007274:	f107 0320 	add.w	r3, r7, #32
 8007278:	461a      	mov	r2, r3
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f7fb f8b7 	bl	80023f0 <a_mpu6050_gyro_self_test>
 8007282:	4603      	mov	r3, r0
 8007284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (res != 0)                                                                          /* check result */
 8007288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <mpu6050_self_test+0xc4>
    {
        handle->debug_print("mpu6050: gyro self test failed.\n");                          /* gyro self test failed */
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	482b      	ldr	r0, [pc, #172]	; (8007344 <mpu6050_self_test+0x16c>)
 8007296:	4798      	blx	r3

        return 1;                                                                          /* return error */
 8007298:	2301      	movs	r3, #1
 800729a:	e04a      	b.n	8007332 <mpu6050_self_test+0x15a>
    }

    prev = 1 << 7;                                                                         /* reset the device */
 800729c:	2380      	movs	r3, #128	; 0x80
 800729e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);                   /* write pwr mgmt 1 */
 80072a2:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80072a6:	2301      	movs	r3, #1
 80072a8:	216b      	movs	r1, #107	; 0x6b
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f7fa fd48 	bl	8001d40 <a_mpu6050_iic_write>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (res != 0)                                                                          /* check the result */
 80072b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d005      	beq.n	80072ca <mpu6050_self_test+0xf2>
    {
        handle->debug_print("mpu6050: write pwr mgmt 1 failed.\n");                        /* write pwr mgmt 1 failed */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	4821      	ldr	r0, [pc, #132]	; (8007348 <mpu6050_self_test+0x170>)
 80072c4:	4798      	blx	r3

        return 1;                                                                          /* return error */
 80072c6:	2301      	movs	r3, #1
 80072c8:	e033      	b.n	8007332 <mpu6050_self_test+0x15a>
    }
    handle->delay_ms(100);                                                                 /* delay 100ms */
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	2064      	movs	r0, #100	; 0x64
 80072d0:	4798      	blx	r3
    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);         /* read config */
 80072d2:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80072d6:	2301      	movs	r3, #1
 80072d8:	216b      	movs	r1, #107	; 0x6b
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f7fa fd14 	bl	8001d08 <a_mpu6050_iic_read>
 80072e0:	4603      	mov	r3, r0
 80072e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (res != 0)                                                                          /* check result */
 80072e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <mpu6050_self_test+0x122>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");                 /* read power management 1 failed */
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	4816      	ldr	r0, [pc, #88]	; (800734c <mpu6050_self_test+0x174>)
 80072f4:	4798      	blx	r3

        return 1;                                                                          /* return error */
 80072f6:	2301      	movs	r3, #1
 80072f8:	e01b      	b.n	8007332 <mpu6050_self_test+0x15a>
    }
    prev &= ~(1 << 6);                                                                     /* clear config */
 80072fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80072fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);        /* write config */
 8007308:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800730c:	2301      	movs	r3, #1
 800730e:	216b      	movs	r1, #107	; 0x6b
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7fa fd15 	bl	8001d40 <a_mpu6050_iic_write>
 8007316:	4603      	mov	r3, r0
 8007318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (res != 0)                                                                          /* check result */
 800731c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007320:	2b00      	cmp	r3, #0
 8007322:	d005      	beq.n	8007330 <mpu6050_self_test+0x158>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");                /* write power management 1 failed */
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	4809      	ldr	r0, [pc, #36]	; (8007350 <mpu6050_self_test+0x178>)
 800732a:	4798      	blx	r3

        return 1;                                                                          /* return error */
 800732c:	2301      	movs	r3, #1
 800732e:	e000      	b.n	8007332 <mpu6050_self_test+0x15a>
    }

    return 0;                                                                              /* success return 0 */
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3730      	adds	r7, #48	; 0x30
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	0800c570 	.word	0x0800c570
 8007340:	0800c590 	.word	0x0800c590
 8007344:	0800c5b4 	.word	0x0800c5b4
 8007348:	0800beec 	.word	0x0800beec
 800734c:	0800bff0 	.word	0x0800bff0
 8007350:	0800c01c 	.word	0x0800c01c

08007354 <mpu6050_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu6050_interface_iic_init(void)
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
    return 0;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <mpu6050_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu6050_interface_iic_deinit(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
    return 0;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <mpu6050_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6050_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af02      	add	r7, sp, #8
 800737a:	603a      	str	r2, [r7, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	4603      	mov	r3, r0
 8007380:	71fb      	strb	r3, [r7, #7]
 8007382:	460b      	mov	r3, r1
 8007384:	71bb      	strb	r3, [r7, #6]
 8007386:	4613      	mov	r3, r2
 8007388:	80bb      	strh	r3, [r7, #4]
	if(i2c_read_reg(I2C1, addr, reg, buf, len, 100) != true){
 800738a:	88bb      	ldrh	r3, [r7, #4]
 800738c:	79ba      	ldrb	r2, [r7, #6]
 800738e:	79f9      	ldrb	r1, [r7, #7]
 8007390:	2064      	movs	r0, #100	; 0x64
 8007392:	9001      	str	r0, [sp, #4]
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	4807      	ldr	r0, [pc, #28]	; (80073b8 <mpu6050_interface_iic_read+0x44>)
 800739a:	f000 fc8f 	bl	8007cbc <i2c_read_reg>
 800739e:	4603      	mov	r3, r0
 80073a0:	f083 0301 	eor.w	r3, r3, #1
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <mpu6050_interface_iic_read+0x3a>
		return 1;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <mpu6050_interface_iic_read+0x3c>
	}
    return 0;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40005400 	.word	0x40005400

080073bc <mpu6050_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6050_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af02      	add	r7, sp, #8
 80073c2:	603a      	str	r2, [r7, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	71fb      	strb	r3, [r7, #7]
 80073ca:	460b      	mov	r3, r1
 80073cc:	71bb      	strb	r3, [r7, #6]
 80073ce:	4613      	mov	r3, r2
 80073d0:	80bb      	strh	r3, [r7, #4]
	if(i2c_write_reg(I2C1, addr, reg, buf,len, 100) != true){
 80073d2:	88bb      	ldrh	r3, [r7, #4]
 80073d4:	79ba      	ldrb	r2, [r7, #6]
 80073d6:	79f9      	ldrb	r1, [r7, #7]
 80073d8:	2064      	movs	r0, #100	; 0x64
 80073da:	9001      	str	r0, [sp, #4]
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	4807      	ldr	r0, [pc, #28]	; (8007400 <mpu6050_interface_iic_write+0x44>)
 80073e2:	f000 fc45 	bl	8007c70 <i2c_write_reg>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f083 0301 	eor.w	r3, r3, #1
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <mpu6050_interface_iic_write+0x3a>
		return 1;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <mpu6050_interface_iic_write+0x3c>
	}
    return 0;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	40005400 	.word	0x40005400

08007404 <mpu6050_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void mpu6050_interface_delay_ms(uint32_t ms)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
	delay_ms(ms);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f949 	bl	80076a4 <delay_ms>
}
 8007412:	bf00      	nop
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <mpu6050_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mpu6050_interface_debug_print(const char *const fmt, ...)
{
 800741a:	b40f      	push	{r0, r1, r2, r3}
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
	va_list  ap;
	va_start(ap, fmt);
 8007422:	f107 0314 	add.w	r3, r7, #20
 8007426:	607b      	str	r3, [r7, #4]
	vprintf(fmt, ap);
 8007428:	6879      	ldr	r1, [r7, #4]
 800742a:	6938      	ldr	r0, [r7, #16]
 800742c:	f001 fb20 	bl	8008a70 <viprintf>
	return;
 8007430:	bf00      	nop
}
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800743a:	b004      	add	sp, #16
 800743c:	4770      	bx	lr
	...

08007440 <mpu6050_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type is the irq type
 * @note      none
 */
void mpu6050_interface_receive_callback(uint8_t type)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	4603      	mov	r3, r0
 8007448:	71fb      	strb	r3, [r7, #7]
    switch (type)
 800744a:	79fb      	ldrb	r3, [r7, #7]
 800744c:	2b06      	cmp	r3, #6
 800744e:	d825      	bhi.n	800749c <mpu6050_interface_receive_callback+0x5c>
 8007450:	a201      	add	r2, pc, #4	; (adr r2, 8007458 <mpu6050_interface_receive_callback+0x18>)
 8007452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007456:	bf00      	nop
 8007458:	08007495 	.word	0x08007495
 800745c:	0800748d 	.word	0x0800748d
 8007460:	0800749d 	.word	0x0800749d
 8007464:	08007485 	.word	0x08007485
 8007468:	0800747d 	.word	0x0800747d
 800746c:	0800749d 	.word	0x0800749d
 8007470:	08007475 	.word	0x08007475
    {
        case MPU6050_INTERRUPT_MOTION :
        {
            mpu6050_interface_debug_print("mpu6050: irq motion.\n");
 8007474:	480d      	ldr	r0, [pc, #52]	; (80074ac <mpu6050_interface_receive_callback+0x6c>)
 8007476:	f7ff ffd0 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 800747a:	e013      	b.n	80074a4 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu6050_interface_debug_print("mpu6050: irq fifo overflow.\n");
 800747c:	480c      	ldr	r0, [pc, #48]	; (80074b0 <mpu6050_interface_receive_callback+0x70>)
 800747e:	f7ff ffcc 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 8007482:	e00f      	b.n	80074a4 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_I2C_MAST :
        {
            mpu6050_interface_debug_print("mpu6050: irq i2c master.\n");
 8007484:	480b      	ldr	r0, [pc, #44]	; (80074b4 <mpu6050_interface_receive_callback+0x74>)
 8007486:	f7ff ffc8 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 800748a:	e00b      	b.n	80074a4 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_DMP :
        {
            mpu6050_interface_debug_print("mpu6050: irq dmp\n");
 800748c:	480a      	ldr	r0, [pc, #40]	; (80074b8 <mpu6050_interface_receive_callback+0x78>)
 800748e:	f7ff ffc4 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 8007492:	e007      	b.n	80074a4 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_DATA_READY :
        {
            mpu6050_interface_debug_print("mpu6050: irq data ready\n");
 8007494:	4809      	ldr	r0, [pc, #36]	; (80074bc <mpu6050_interface_receive_callback+0x7c>)
 8007496:	f7ff ffc0 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 800749a:	e003      	b.n	80074a4 <mpu6050_interface_receive_callback+0x64>
        }
        default :
        {
            mpu6050_interface_debug_print("mpu6050: irq unknown code.\n");
 800749c:	4808      	ldr	r0, [pc, #32]	; (80074c0 <mpu6050_interface_receive_callback+0x80>)
 800749e:	f7ff ffbc 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 80074a2:	bf00      	nop
        }
    }
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	0800cdb0 	.word	0x0800cdb0
 80074b0:	0800cdc8 	.word	0x0800cdc8
 80074b4:	0800cde8 	.word	0x0800cde8
 80074b8:	0800ce04 	.word	0x0800ce04
 80074bc:	0800ce18 	.word	0x0800ce18
 80074c0:	0800ce34 	.word	0x0800ce34

080074c4 <mpu6050_interface_dmp_tap_callback>:
 * @param[in] count is the tap count
 * @param[in] direction is the tap direction
 * @note      none
 */
void mpu6050_interface_dmp_tap_callback(uint8_t count, uint8_t direction)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	4603      	mov	r3, r0
 80074cc:	460a      	mov	r2, r1
 80074ce:	71fb      	strb	r3, [r7, #7]
 80074d0:	4613      	mov	r3, r2
 80074d2:	71bb      	strb	r3, [r7, #6]
    switch (direction)
 80074d4:	79bb      	ldrb	r3, [r7, #6]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	2b05      	cmp	r3, #5
 80074da:	d833      	bhi.n	8007544 <mpu6050_interface_dmp_tap_callback+0x80>
 80074dc:	a201      	add	r2, pc, #4	; (adr r2, 80074e4 <mpu6050_interface_dmp_tap_callback+0x20>)
 80074de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e2:	bf00      	nop
 80074e4:	080074fd 	.word	0x080074fd
 80074e8:	08007509 	.word	0x08007509
 80074ec:	08007515 	.word	0x08007515
 80074f0:	08007521 	.word	0x08007521
 80074f4:	0800752d 	.word	0x0800752d
 80074f8:	08007539 	.word	0x08007539
    {
        case MPU6050_DMP_TAP_X_UP :
        {
            mpu6050_interface_debug_print("mpu6050: tap irq x up with %d.\n", count);
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	4619      	mov	r1, r3
 8007500:	4814      	ldr	r0, [pc, #80]	; (8007554 <mpu6050_interface_dmp_tap_callback+0x90>)
 8007502:	f7ff ff8a 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 8007506:	e021      	b.n	800754c <mpu6050_interface_dmp_tap_callback+0x88>
        }
        case MPU6050_DMP_TAP_X_DOWN :
        {
            mpu6050_interface_debug_print("mpu6050: tap irq x down with %d.\n", count);
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	4619      	mov	r1, r3
 800750c:	4812      	ldr	r0, [pc, #72]	; (8007558 <mpu6050_interface_dmp_tap_callback+0x94>)
 800750e:	f7ff ff84 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 8007512:	e01b      	b.n	800754c <mpu6050_interface_dmp_tap_callback+0x88>
        }
        case MPU6050_DMP_TAP_Y_UP :
        {
            mpu6050_interface_debug_print("mpu6050: tap irq y up with %d.\n", count);
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	4619      	mov	r1, r3
 8007518:	4810      	ldr	r0, [pc, #64]	; (800755c <mpu6050_interface_dmp_tap_callback+0x98>)
 800751a:	f7ff ff7e 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 800751e:	e015      	b.n	800754c <mpu6050_interface_dmp_tap_callback+0x88>
        }
        case MPU6050_DMP_TAP_Y_DOWN :
        {
            mpu6050_interface_debug_print("mpu6050: tap irq y down with %d.\n", count);
 8007520:	79fb      	ldrb	r3, [r7, #7]
 8007522:	4619      	mov	r1, r3
 8007524:	480e      	ldr	r0, [pc, #56]	; (8007560 <mpu6050_interface_dmp_tap_callback+0x9c>)
 8007526:	f7ff ff78 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 800752a:	e00f      	b.n	800754c <mpu6050_interface_dmp_tap_callback+0x88>
        }
        case MPU6050_DMP_TAP_Z_UP :
        {
            mpu6050_interface_debug_print("mpu6050: tap irq z up with %d.\n", count);
 800752c:	79fb      	ldrb	r3, [r7, #7]
 800752e:	4619      	mov	r1, r3
 8007530:	480c      	ldr	r0, [pc, #48]	; (8007564 <mpu6050_interface_dmp_tap_callback+0xa0>)
 8007532:	f7ff ff72 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 8007536:	e009      	b.n	800754c <mpu6050_interface_dmp_tap_callback+0x88>
        }
        case MPU6050_DMP_TAP_Z_DOWN :
        {
            mpu6050_interface_debug_print("mpu6050: tap irq z down with %d.\n", count);
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	4619      	mov	r1, r3
 800753c:	480a      	ldr	r0, [pc, #40]	; (8007568 <mpu6050_interface_dmp_tap_callback+0xa4>)
 800753e:	f7ff ff6c 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 8007542:	e003      	b.n	800754c <mpu6050_interface_dmp_tap_callback+0x88>
        }
        default :
        {
            mpu6050_interface_debug_print("mpu6050: tap irq unknown code.\n");
 8007544:	4809      	ldr	r0, [pc, #36]	; (800756c <mpu6050_interface_dmp_tap_callback+0xa8>)
 8007546:	f7ff ff68 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 800754a:	bf00      	nop
        }
    }
}
 800754c:	bf00      	nop
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}
 8007554:	0800ce50 	.word	0x0800ce50
 8007558:	0800ce70 	.word	0x0800ce70
 800755c:	0800ce94 	.word	0x0800ce94
 8007560:	0800ceb4 	.word	0x0800ceb4
 8007564:	0800ced8 	.word	0x0800ced8
 8007568:	0800cef8 	.word	0x0800cef8
 800756c:	0800cf1c 	.word	0x0800cf1c

08007570 <mpu6050_interface_dmp_orient_callback>:
 * @brief     interface dmp orient callback
 * @param[in] orientation is the dmp orientation
 * @note      none
 */
void mpu6050_interface_dmp_orient_callback(uint8_t orientation)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	71fb      	strb	r3, [r7, #7]
    switch (orientation)
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	2b03      	cmp	r3, #3
 800757e:	d81b      	bhi.n	80075b8 <mpu6050_interface_dmp_orient_callback+0x48>
 8007580:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <mpu6050_interface_dmp_orient_callback+0x18>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	08007599 	.word	0x08007599
 800758c:	080075a1 	.word	0x080075a1
 8007590:	080075a9 	.word	0x080075a9
 8007594:	080075b1 	.word	0x080075b1
    {
        case MPU6050_DMP_ORIENT_PORTRAIT :
        {
            mpu6050_interface_debug_print("mpu6050: orient irq portrait.\n");
 8007598:	480b      	ldr	r0, [pc, #44]	; (80075c8 <mpu6050_interface_dmp_orient_callback+0x58>)
 800759a:	f7ff ff3e 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 800759e:	e00f      	b.n	80075c0 <mpu6050_interface_dmp_orient_callback+0x50>
        }
        case MPU6050_DMP_ORIENT_LANDSCAPE :
        {
            mpu6050_interface_debug_print("mpu6050: orient irq landscape.\n");
 80075a0:	480a      	ldr	r0, [pc, #40]	; (80075cc <mpu6050_interface_dmp_orient_callback+0x5c>)
 80075a2:	f7ff ff3a 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 80075a6:	e00b      	b.n	80075c0 <mpu6050_interface_dmp_orient_callback+0x50>
        }
        case MPU6050_DMP_ORIENT_REVERSE_PORTRAIT :
        {
            mpu6050_interface_debug_print("mpu6050: orient irq reverse portrait.\n");
 80075a8:	4809      	ldr	r0, [pc, #36]	; (80075d0 <mpu6050_interface_dmp_orient_callback+0x60>)
 80075aa:	f7ff ff36 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 80075ae:	e007      	b.n	80075c0 <mpu6050_interface_dmp_orient_callback+0x50>
        }
        case MPU6050_DMP_ORIENT_REVERSE_LANDSCAPE :
        {
            mpu6050_interface_debug_print("mpu6050: orient irq reverse landscape.\n");
 80075b0:	4808      	ldr	r0, [pc, #32]	; (80075d4 <mpu6050_interface_dmp_orient_callback+0x64>)
 80075b2:	f7ff ff32 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 80075b6:	e003      	b.n	80075c0 <mpu6050_interface_dmp_orient_callback+0x50>
        }
        default :
        {
            mpu6050_interface_debug_print("mpu6050: orient irq unknown code.\n");
 80075b8:	4807      	ldr	r0, [pc, #28]	; (80075d8 <mpu6050_interface_dmp_orient_callback+0x68>)
 80075ba:	f7ff ff2e 	bl	800741a <mpu6050_interface_debug_print>
            
            break;
 80075be:	bf00      	nop
        }
    }
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	0800cf3c 	.word	0x0800cf3c
 80075cc:	0800cf5c 	.word	0x0800cf5c
 80075d0:	0800cf7c 	.word	0x0800cf7c
 80075d4:	0800cfa4 	.word	0x0800cfa4
 80075d8:	0800cfcc 	.word	0x0800cfcc

080075dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	4603      	mov	r3, r0
 80075e4:	6039      	str	r1, [r7, #0]
 80075e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	db0a      	blt.n	8007606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	490c      	ldr	r1, [pc, #48]	; (8007628 <__NVIC_SetPriority+0x4c>)
 80075f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075fa:	0112      	lsls	r2, r2, #4
 80075fc:	b2d2      	uxtb	r2, r2
 80075fe:	440b      	add	r3, r1
 8007600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007604:	e00a      	b.n	800761c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	b2da      	uxtb	r2, r3
 800760a:	4908      	ldr	r1, [pc, #32]	; (800762c <__NVIC_SetPriority+0x50>)
 800760c:	79fb      	ldrb	r3, [r7, #7]
 800760e:	f003 030f 	and.w	r3, r3, #15
 8007612:	3b04      	subs	r3, #4
 8007614:	0112      	lsls	r2, r2, #4
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	440b      	add	r3, r1
 800761a:	761a      	strb	r2, [r3, #24]
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	e000e100 	.word	0xe000e100
 800762c:	e000ed00 	.word	0xe000ed00

08007630 <SysTickInit>:

/*Global variables -------------------------------------------------*/
volatile uint32_t uwTick = 0;


void SysTickInit(void){
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
	uint32_t temp;
	SystemCoreClockUpdate();
 8007636:	f000 fcad 	bl	8007f94 <SystemCoreClockUpdate>
	//1. deshabilitar el conteo de la systick
	SysTick->CTRL &=~ SysTick_CTRL_ENABLE_Msk;
 800763a:	4b17      	ldr	r3, [pc, #92]	; (8007698 <SysTickInit+0x68>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a16      	ldr	r2, [pc, #88]	; (8007698 <SysTickInit+0x68>)
 8007640:	f023 0301 	bic.w	r3, r3, #1
 8007644:	6013      	str	r3, [r2, #0]
	//2. configurar el valor del registro reload
	SystemCoreClockUpdate();
 8007646:	f000 fca5 	bl	8007f94 <SystemCoreClockUpdate>
	temp = SystemCoreClock / 1000 - 1;
 800764a:	4b14      	ldr	r3, [pc, #80]	; (800769c <SysTickInit+0x6c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a14      	ldr	r2, [pc, #80]	; (80076a0 <SysTickInit+0x70>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	099b      	lsrs	r3, r3, #6
 8007656:	3b01      	subs	r3, #1
 8007658:	607b      	str	r3, [r7, #4]
	SysTick->LOAD = temp;
 800765a:	4a0f      	ldr	r2, [pc, #60]	; (8007698 <SysTickInit+0x68>)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6053      	str	r3, [r2, #4]
	//3. Configuras el registro de control y habilitas el conteo
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; 			//system core clock
 8007660:	4b0d      	ldr	r3, [pc, #52]	; (8007698 <SysTickInit+0x68>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a0c      	ldr	r2, [pc, #48]	; (8007698 <SysTickInit+0x68>)
 8007666:	f043 0304 	orr.w	r3, r3, #4
 800766a:	6013      	str	r3, [r2, #0]

	//configurar la IT
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;				//habilita la IT
 800766c:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <SysTickInit+0x68>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a09      	ldr	r2, [pc, #36]	; (8007698 <SysTickInit+0x68>)
 8007672:	f043 0302 	orr.w	r3, r3, #2
 8007676:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(SysTick_IRQn, 15);
 8007678:	210f      	movs	r1, #15
 800767a:	f04f 30ff 	mov.w	r0, #4294967295
 800767e:	f7ff ffad 	bl	80075dc <__NVIC_SetPriority>

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;				//habilita el conteo
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <SysTickInit+0x68>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a04      	ldr	r2, [pc, #16]	; (8007698 <SysTickInit+0x68>)
 8007688:	f043 0301 	orr.w	r3, r3, #1
 800768c:	6013      	str	r3, [r2, #0]

	return;
 800768e:	bf00      	nop
}
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	e000e010 	.word	0xe000e010
 800769c:	20000bf8 	.word	0x20000bf8
 80076a0:	10624dd3 	.word	0x10624dd3

080076a4 <delay_ms>:


/**
 * @brief funcion para generar retardos en ms
 */
void delay_ms(uint32_t delay){
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = GetTicks();
 80076ac:	f000 f810 	bl	80076d0 <GetTicks>
 80076b0:	60f8      	str	r0, [r7, #12]
	uint32_t wait = delay;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	60bb      	str	r3, [r7, #8]
	//generacion del retardo
	while((GetTicks() - tickstart)<wait);
 80076b6:	bf00      	nop
 80076b8:	f000 f80a 	bl	80076d0 <GetTicks>
 80076bc:	4602      	mov	r2, r0
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d8f7      	bhi.n	80076b8 <delay_ms+0x14>
	return;
 80076c8:	bf00      	nop
}
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <GetTicks>:
/**
 * @brief retorna el ticks generado por la SysTick
 * @return uint32_t
 */
uint32_t GetTicks(void){
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
	return (uint32_t)uwTick;
 80076d4:	4b03      	ldr	r3, [pc, #12]	; (80076e4 <GetTicks+0x14>)
 80076d6:	681b      	ldr	r3, [r3, #0]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	20001218 	.word	0x20001218

080076e8 <TickInc_Callback>:


void TickInc_Callback(void){
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
	uwTick += 1;
 80076ec:	4b04      	ldr	r3, [pc, #16]	; (8007700 <TickInc_Callback+0x18>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3301      	adds	r3, #1
 80076f2:	4a03      	ldr	r2, [pc, #12]	; (8007700 <TickInc_Callback+0x18>)
 80076f4:	6013      	str	r3, [r2, #0]
	return;
 80076f6:	bf00      	nop
}
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	20001218 	.word	0x20001218

08007704 <__NVIC_EnableIRQ>:
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800770e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007712:	2b00      	cmp	r3, #0
 8007714:	db0b      	blt.n	800772e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007716:	79fb      	ldrb	r3, [r7, #7]
 8007718:	f003 021f 	and.w	r2, r3, #31
 800771c:	4907      	ldr	r1, [pc, #28]	; (800773c <__NVIC_EnableIRQ+0x38>)
 800771e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007722:	095b      	lsrs	r3, r3, #5
 8007724:	2001      	movs	r0, #1
 8007726:	fa00 f202 	lsl.w	r2, r0, r2
 800772a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	e000e100 	.word	0xe000e100

08007740 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007748:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800774c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d013      	beq.n	8007780 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007758:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800775c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007760:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007768:	e000      	b.n	800776c <ITM_SendChar+0x2c>
    {
      __NOP();
 800776a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800776c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0f9      	beq.n	800776a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007776:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	b2d2      	uxtb	r2, r2
 800777e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007780:	687b      	ldr	r3, [r7, #4]
}
 8007782:	4618      	mov	r0, r3
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <main>:
bool I2C_isDeviceConnected(I2C_TypeDef *I2Cx, uint8_t slaveAddr, uint32_t timeout);

/*main function --------------------------------------------------------------*/

int main(void)
{
 8007790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007794:	b0a2      	sub	sp, #136	; 0x88
 8007796:	af0c      	add	r7, sp, #48	; 0x30
	/*Local variables ----------------------------*/

	/*Peripheral init ----------------------------*/
	SysTickInit();
 8007798:	f7ff ff4a 	bl	8007630 <SysTickInit>
	I2C1_Init();
 800779c:	f000 f874 	bl	8007888 <I2C1_Init>
	GPIO_Config();
 80077a0:	f000 fab0 	bl	8007d04 <GPIO_Config>
	/*Sensor init --------------------------------*/
//	mpu6050_basic_init(0x68);
//	mpu6050_fifo_init(0x68);
	mpu6050_dmp_init(0x68,  mpu6050_interface_receive_callback, mpu6050_interface_dmp_tap_callback, mpu6050_interface_dmp_orient_callback);
 80077a4:	4b34      	ldr	r3, [pc, #208]	; (8007878 <main+0xe8>)
 80077a6:	4a35      	ldr	r2, [pc, #212]	; (800787c <main+0xec>)
 80077a8:	4935      	ldr	r1, [pc, #212]	; (8007880 <main+0xf0>)
 80077aa:	2068      	movs	r0, #104	; 0x68
 80077ac:	f7f9 fbe6 	bl	8000f7c <mpu6050_dmp_init>

	float a[3];
	float g[3];
	float temp = 0;
 80077b0:	f04f 0300 	mov.w	r3, #0
 80077b4:	657b      	str	r3, [r7, #84]	; 0x54
	int16_t araw;
	int16_t graw;
	uint16_t len = 14;
 80077b6:	230e      	movs	r3, #14
 80077b8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* Loop forever */
	for(;;){

//		mpu6050_basic_read_temperature(&temp);
//		mpu6050_basic_read(a, g);
		mpu6050_dmp_read_all(araw, a, graw, g, quat, &pitch, &roll, &yaw, &len);
 80077ba:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80077be:	4618      	mov	r0, r3
 80077c0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80077c4:	461c      	mov	r4, r3
 80077c6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80077ca:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80077ce:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80077d2:	9304      	str	r3, [sp, #16]
 80077d4:	f107 0318 	add.w	r3, r7, #24
 80077d8:	9303      	str	r3, [sp, #12]
 80077da:	f107 031c 	add.w	r3, r7, #28
 80077de:	9302      	str	r3, [sp, #8]
 80077e0:	f107 0320 	add.w	r3, r7, #32
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	4613      	mov	r3, r2
 80077ee:	4622      	mov	r2, r4
 80077f0:	f7fa fa60 	bl	8001cb4 <mpu6050_dmp_read_all>
		printf("accel: %.4f, %.4f, %.4f  gyro: %.4f, %.4f %.4f, temp: %.4f\r\n", a[0], a[1], a[2], g[0], g[1], g[2], temp);
 80077f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7f8 feb6 	bl	8000568 <__aeabi_f2d>
 80077fc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8007800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007802:	4618      	mov	r0, r3
 8007804:	f7f8 feb0 	bl	8000568 <__aeabi_f2d>
 8007808:	4680      	mov	r8, r0
 800780a:	4689      	mov	r9, r1
 800780c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800780e:	4618      	mov	r0, r3
 8007810:	f7f8 feaa 	bl	8000568 <__aeabi_f2d>
 8007814:	4682      	mov	sl, r0
 8007816:	468b      	mov	fp, r1
 8007818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781a:	4618      	mov	r0, r3
 800781c:	f7f8 fea4 	bl	8000568 <__aeabi_f2d>
 8007820:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007826:	4618      	mov	r0, r3
 8007828:	f7f8 fe9e 	bl	8000568 <__aeabi_f2d>
 800782c:	e9c7 0100 	strd	r0, r1, [r7]
 8007830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007832:	4618      	mov	r0, r3
 8007834:	f7f8 fe98 	bl	8000568 <__aeabi_f2d>
 8007838:	4604      	mov	r4, r0
 800783a:	460d      	mov	r5, r1
 800783c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800783e:	f7f8 fe93 	bl	8000568 <__aeabi_f2d>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800784a:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800784e:	ed97 7b00 	vldr	d7, [r7]
 8007852:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007856:	ed97 7b02 	vldr	d7, [r7, #8]
 800785a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800785e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8007862:	e9cd 8900 	strd	r8, r9, [sp]
 8007866:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800786a:	4806      	ldr	r0, [pc, #24]	; (8007884 <main+0xf4>)
 800786c:	f001 f8e8 	bl	8008a40 <iprintf>
		delay_ms(100);
 8007870:	2064      	movs	r0, #100	; 0x64
 8007872:	f7ff ff17 	bl	80076a4 <delay_ms>
		mpu6050_dmp_read_all(araw, a, graw, g, quat, &pitch, &roll, &yaw, &len);
 8007876:	e7a0      	b.n	80077ba <main+0x2a>
 8007878:	08007571 	.word	0x08007571
 800787c:	080074c5 	.word	0x080074c5
 8007880:	08007441 	.word	0x08007441
 8007884:	0800cff0 	.word	0x0800cff0

08007888 <I2C1_Init>:
	}
}

/*Function definition ---------------------------------------------------------*/
void I2C1_Init(void){
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
	uint32_t temp;
	RCC->AHB1ENR |= GPIOX_CLOCK(I2C1_SCL);
 800788e:	4b4c      	ldr	r3, [pc, #304]	; (80079c0 <I2C1_Init+0x138>)
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	4a4b      	ldr	r2, [pc, #300]	; (80079c0 <I2C1_Init+0x138>)
 8007894:	f043 0302 	orr.w	r3, r3, #2
 8007898:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_ALTER, I2C1_SCL);
 800789a:	4b4a      	ldr	r3, [pc, #296]	; (80079c4 <I2C1_Init+0x13c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80078a2:	4a48      	ldr	r2, [pc, #288]	; (80079c4 <I2C1_Init+0x13c>)
 80078a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078a8:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_ALTER, I2C1_SDA);
 80078aa:	4b46      	ldr	r3, [pc, #280]	; (80079c4 <I2C1_Init+0x13c>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80078b2:	4a44      	ldr	r2, [pc, #272]	; (80079c4 <I2C1_Init+0x13c>)
 80078b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078b8:	6013      	str	r3, [r2, #0]
	GPIOX_OTYPER(MODE_OT_OD, I2C1_SCL);		//Habilita el modo open drain
 80078ba:	4b42      	ldr	r3, [pc, #264]	; (80079c4 <I2C1_Init+0x13c>)
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	4a41      	ldr	r2, [pc, #260]	; (80079c4 <I2C1_Init+0x13c>)
 80078c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c4:	6053      	str	r3, [r2, #4]
	GPIOX_OTYPER(MODE_OT_OD, I2C1_SDA);
 80078c6:	4b3f      	ldr	r3, [pc, #252]	; (80079c4 <I2C1_Init+0x13c>)
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	4a3e      	ldr	r2, [pc, #248]	; (80079c4 <I2C1_Init+0x13c>)
 80078cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d0:	6053      	str	r3, [r2, #4]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, I2C1_SCL);
 80078d2:	4b3c      	ldr	r3, [pc, #240]	; (80079c4 <I2C1_Init+0x13c>)
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	4a3b      	ldr	r2, [pc, #236]	; (80079c4 <I2C1_Init+0x13c>)
 80078d8:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80078dc:	6093      	str	r3, [r2, #8]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, I2C1_SDA);//VERY HIGH SPEED
 80078de:	4b39      	ldr	r3, [pc, #228]	; (80079c4 <I2C1_Init+0x13c>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	4a38      	ldr	r2, [pc, #224]	; (80079c4 <I2C1_Init+0x13c>)
 80078e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078e8:	6093      	str	r3, [r2, #8]
	GPIOX_PUPDR(MODE_PU_UP, I2C1_SCL);
 80078ea:	4b36      	ldr	r3, [pc, #216]	; (80079c4 <I2C1_Init+0x13c>)
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80078f2:	4a34      	ldr	r2, [pc, #208]	; (80079c4 <I2C1_Init+0x13c>)
 80078f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078f8:	60d3      	str	r3, [r2, #12]
	GPIOX_PUPDR(MODE_PU_UP, I2C1_SDA);		//Habilita las resitencias pull up internas
 80078fa:	4b32      	ldr	r3, [pc, #200]	; (80079c4 <I2C1_Init+0x13c>)
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007902:	4a30      	ldr	r2, [pc, #192]	; (80079c4 <I2C1_Init+0x13c>)
 8007904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007908:	60d3      	str	r3, [r2, #12]
	GPIOX_AFR(4, I2C1_SCL);
 800790a:	4b2e      	ldr	r3, [pc, #184]	; (80079c4 <I2C1_Init+0x13c>)
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8007912:	4a2c      	ldr	r2, [pc, #176]	; (80079c4 <I2C1_Init+0x13c>)
 8007914:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007918:	6213      	str	r3, [r2, #32]
	GPIOX_AFR(4, I2C1_SDA);
 800791a:	4b2a      	ldr	r3, [pc, #168]	; (80079c4 <I2C1_Init+0x13c>)
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007922:	4a28      	ldr	r2, [pc, #160]	; (80079c4 <I2C1_Init+0x13c>)
 8007924:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007928:	6213      	str	r3, [r2, #32]
	/*I2C1 -------------------------------------------------*/
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800792a:	4b25      	ldr	r3, [pc, #148]	; (80079c0 <I2C1_Init+0x138>)
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	4a24      	ldr	r2, [pc, #144]	; (80079c0 <I2C1_Init+0x138>)
 8007930:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007934:	6413      	str	r3, [r2, #64]	; 0x40
	//RESET
	I2C1->CR1 |= I2C_CR1_SWRST;
 8007936:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <I2C1_Init+0x140>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a23      	ldr	r2, [pc, #140]	; (80079c8 <I2C1_Init+0x140>)
 800793c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007940:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &=~ I2C_CR1_SWRST;
 8007942:	4b21      	ldr	r3, [pc, #132]	; (80079c8 <I2C1_Init+0x140>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a20      	ldr	r2, [pc, #128]	; (80079c8 <I2C1_Init+0x140>)
 8007948:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800794c:	6013      	str	r3, [r2, #0]
	/**
	 * PCLK1 -> FREQ = 16MHz
	 */
	temp = SystemCoreClock / 1E+6;
 800794e:	4b1f      	ldr	r3, [pc, #124]	; (80079cc <I2C1_Init+0x144>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4618      	mov	r0, r3
 8007954:	f7f8 fde6 	bl	8000524 <__aeabi_ui2d>
 8007958:	a317      	add	r3, pc, #92	; (adr r3, 80079b8 <I2C1_Init+0x130>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7f8 ff85 	bl	800086c <__aeabi_ddiv>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4610      	mov	r0, r2
 8007968:	4619      	mov	r1, r3
 800796a:	f7f9 f92d 	bl	8000bc8 <__aeabi_d2uiz>
 800796e:	4603      	mov	r3, r0
 8007970:	607b      	str	r3, [r7, #4]
	I2C1->CR2 = temp & 0x3F;
 8007972:	4a15      	ldr	r2, [pc, #84]	; (80079c8 <I2C1_Init+0x140>)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800797a:	6053      	str	r3, [r2, #4]
	 * CCR = PCLK1 / (3 * 400000)
	 * DUTY == 1
	 * CCR = PCLK1 / (25 * 400000)
	 * ->FAST MODE PLUS
	 */
	temp = 16E+6 / (3 * 400E+3);
 800797c:	230d      	movs	r3, #13
 800797e:	607b      	str	r3, [r7, #4]
	temp = 13;
 8007980:	230d      	movs	r3, #13
 8007982:	607b      	str	r3, [r7, #4]
	I2C1->CCR = temp & 0xFFF;
 8007984:	4a10      	ldr	r2, [pc, #64]	; (80079c8 <I2C1_Init+0x140>)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800798c:	61d3      	str	r3, [r2, #28]
	 * SM
	 * TRISE = PCLK1 / 1000000 + 1
	 * FS
	 * TRISE = (PCLK1 * 300) / (1000000000U) + 1
	 */
	temp = ((16E+6) * 300) / (1000000000U) + 1;
 800798e:	2305      	movs	r3, #5
 8007990:	607b      	str	r3, [r7, #4]
	I2C1->TRISE = temp;
 8007992:	4a0d      	ldr	r2, [pc, #52]	; (80079c8 <I2C1_Init+0x140>)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6213      	str	r3, [r2, #32]
	/*configurar la direccion esclava*/
	I2C1->OAR1 = 0x73;
 8007998:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <I2C1_Init+0x140>)
 800799a:	2273      	movs	r2, #115	; 0x73
 800799c:	609a      	str	r2, [r3, #8]
	/*habilitar el I2C1*/
	I2C1->CR1 |= I2C_CR1_PE;
 800799e:	4b0a      	ldr	r3, [pc, #40]	; (80079c8 <I2C1_Init+0x140>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a09      	ldr	r2, [pc, #36]	; (80079c8 <I2C1_Init+0x140>)
 80079a4:	f043 0301 	orr.w	r3, r3, #1
 80079a8:	6013      	str	r3, [r2, #0]
}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	f3af 8000 	nop.w
 80079b8:	00000000 	.word	0x00000000
 80079bc:	412e8480 	.word	0x412e8480
 80079c0:	40023800 	.word	0x40023800
 80079c4:	40020400 	.word	0x40020400
 80079c8:	40005400 	.word	0x40005400
 80079cc:	20000bf8 	.word	0x20000bf8

080079d0 <I2C_MasterSendData>:
bool I2C_MasterSendData(I2C_TypeDef *I2Cx, uint8_t slaveAddr, uint8_t *pData, uint32_t Len, uint32_t timeout){
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	607a      	str	r2, [r7, #4]
 80079da:	603b      	str	r3, [r7, #0]
 80079dc:	460b      	mov	r3, r1
 80079de:	72fb      	strb	r3, [r7, #11]
	volatile uint32_t temp;

	uint32_t tickstart = GetTicks();
 80079e0:	f7ff fe76 	bl	80076d0 <GetTicks>
 80079e4:	61b8      	str	r0, [r7, #24]
	uint8_t stateuml = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	77fb      	strb	r3, [r7, #31]
	//verificas el estado de los datos a transmitir
	if(Len <= 0 || pData == ((void *)0)){
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <I2C_MasterSendData+0x26>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d17b      	bne.n	8007aee <I2C_MasterSendData+0x11e>
		return false;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e08a      	b.n	8007b10 <I2C_MasterSendData+0x140>
	}

	/*esperar la linea se libere*/
	while((GetTicks() - tickstart)<timeout){
		switch(stateuml){
 80079fa:	7ffb      	ldrb	r3, [r7, #31]
 80079fc:	2b06      	cmp	r3, #6
 80079fe:	d877      	bhi.n	8007af0 <I2C_MasterSendData+0x120>
 8007a00:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <I2C_MasterSendData+0x38>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007a25 	.word	0x08007a25
 8007a0c:	08007a37 	.word	0x08007a37
 8007a10:	08007a47 	.word	0x08007a47
 8007a14:	08007a59 	.word	0x08007a59
 8007a18:	08007a73 	.word	0x08007a73
 8007a1c:	08007a93 	.word	0x08007a93
 8007a20:	08007ac3 	.word	0x08007ac3
		case 0: //esperar que la linea se libere
			if(!(I2Cx->SR2 & I2C_SR2_BUSY)){
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d15f      	bne.n	8007af0 <I2C_MasterSendData+0x120>
				stateuml = 1;
 8007a30:	2301      	movs	r3, #1
 8007a32:	77fb      	strb	r3, [r7, #31]
			}
			break;
 8007a34:	e05c      	b.n	8007af0 <I2C_MasterSendData+0x120>
		case 1: //generar la condicion de inicio
			I2Cx->CR1 |= I2C_CR1_START;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	601a      	str	r2, [r3, #0]
			stateuml = 2;
 8007a42:	2302      	movs	r3, #2
 8007a44:	77fb      	strb	r3, [r7, #31]
		case 2: //esperar la respuesta al start
			if(I2Cx->SR1 & I2C_SR1_SB){
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d04e      	beq.n	8007af0 <I2C_MasterSendData+0x120>
				stateuml = 3;
 8007a52:	2303      	movs	r3, #3
 8007a54:	77fb      	strb	r3, [r7, #31]
			}
			break;
 8007a56:	e04b      	b.n	8007af0 <I2C_MasterSendData+0x120>
		case 3: //enviar la direccion del esclavo
			slaveAddr = slaveAddr<<1;
 8007a58:	7afb      	ldrb	r3, [r7, #11]
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	72fb      	strb	r3, [r7, #11]
			slaveAddr &=~ (1U);			//write
 8007a5e:	7afb      	ldrb	r3, [r7, #11]
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	72fb      	strb	r3, [r7, #11]
			I2Cx->DR = slaveAddr;
 8007a66:	7afa      	ldrb	r2, [r7, #11]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	611a      	str	r2, [r3, #16]
			stateuml = 4;
 8007a6c:	2304      	movs	r3, #4
 8007a6e:	77fb      	strb	r3, [r7, #31]
			break;
 8007a70:	e03e      	b.n	8007af0 <I2C_MasterSendData+0x120>
		case 4:	//esperar la respuesta del esclavo
			if(I2Cx->SR1 & I2C_SR1_ADDR){
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d038      	beq.n	8007af0 <I2C_MasterSendData+0x120>
				//limpiar los registros de estado
				temp = I2Cx->SR1;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	617b      	str	r3, [r7, #20]
				temp = I2Cx->SR2;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	617b      	str	r3, [r7, #20]
				(void)temp;
 8007a8a:	697b      	ldr	r3, [r7, #20]
				stateuml = 5;
 8007a8c:	2305      	movs	r3, #5
 8007a8e:	77fb      	strb	r3, [r7, #31]
			}
			break;
 8007a90:	e02e      	b.n	8007af0 <I2C_MasterSendData+0x120>
		case 5: //enviar los datos
			if(Len>0){
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d011      	beq.n	8007abc <I2C_MasterSendData+0xec>
				if(I2Cx->SR1 & I2C_SR1_TXE){
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d025      	beq.n	8007af0 <I2C_MasterSendData+0x120>
					I2Cx->DR = *pData;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	611a      	str	r2, [r3, #16]
					pData++;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	607b      	str	r3, [r7, #4]
					Len--;
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	603b      	str	r3, [r7, #0]
 8007aba:	e019      	b.n	8007af0 <I2C_MasterSendData+0x120>
				}
			}else{
				stateuml  = 6;
 8007abc:	2306      	movs	r3, #6
 8007abe:	77fb      	strb	r3, [r7, #31]
			}
			break;
 8007ac0:	e016      	b.n	8007af0 <I2C_MasterSendData+0x120>
		case 6: //esperar que se transmitan los datos y generar la condicion de parada
			while(!(I2Cx->SR1 & I2C_SR1_TXE));
 8007ac2:	bf00      	nop
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0f9      	beq.n	8007ac4 <I2C_MasterSendData+0xf4>
			while(!(I2Cx->SR1 & I2C_SR1_BTF));
 8007ad0:	bf00      	nop
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d0f9      	beq.n	8007ad2 <I2C_MasterSendData+0x102>
			I2Cx->CR1 |= I2C_CR1_STOP;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	601a      	str	r2, [r3, #0]
			return true;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e010      	b.n	8007b10 <I2C_MasterSendData+0x140>
	while((GetTicks() - tickstart)<timeout){
 8007aee:	bf00      	nop
 8007af0:	f7ff fdee 	bl	80076d0 <GetTicks>
 8007af4:	4602      	mov	r2, r0
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007afc:	429a      	cmp	r2, r3
 8007afe:	f63f af7c 	bhi.w	80079fa <I2C_MasterSendData+0x2a>
		}
	}
	I2Cx->CR1 |= I2C_CR1_STOP;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	601a      	str	r2, [r3, #0]
	return false;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3720      	adds	r7, #32
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <I2C_MasterReceiveData>:
		}
	}
	I2Cx->CR1 |= I2C_CR1_STOP;
	return false;
}
bool I2C_MasterReceiveData(I2C_TypeDef *I2Cx, uint8_t slaveAddr, uint8_t *pData, uint32_t Len, uint32_t timeout){
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b088      	sub	sp, #32
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	607a      	str	r2, [r7, #4]
 8007b22:	603b      	str	r3, [r7, #0]
 8007b24:	460b      	mov	r3, r1
 8007b26:	72fb      	strb	r3, [r7, #11]
	volatile uint32_t temp;
	uint32_t tickstart = GetTicks();
 8007b28:	f7ff fdd2 	bl	80076d0 <GetTicks>
 8007b2c:	61b8      	str	r0, [r7, #24]
	uint8_t stateuml = 0;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	77fb      	strb	r3, [r7, #31]
	//verificas el estado de los datos a transmitir
	if(Len <= 0 || pData == ((void *)0)){
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <I2C_MasterReceiveData+0x28>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f040 8082 	bne.w	8007c44 <I2C_MasterReceiveData+0x12c>
		return false;
 8007b40:	2300      	movs	r3, #0
 8007b42:	e090      	b.n	8007c66 <I2C_MasterReceiveData+0x14e>
	}

	while((GetTicks() - tickstart)<timeout){
		switch(stateuml){
 8007b44:	7ffb      	ldrb	r3, [r7, #31]
 8007b46:	2b05      	cmp	r3, #5
 8007b48:	d87d      	bhi.n	8007c46 <I2C_MasterReceiveData+0x12e>
 8007b4a:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <I2C_MasterReceiveData+0x38>)
 8007b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b50:	08007b69 	.word	0x08007b69
 8007b54:	08007b7b 	.word	0x08007b7b
 8007b58:	08007b8b 	.word	0x08007b8b
 8007b5c:	08007b9d 	.word	0x08007b9d
 8007b60:	08007bb7 	.word	0x08007bb7
 8007b64:	08007be3 	.word	0x08007be3
		case 0: //esperar que la linea se libere
			if(!(I2Cx->SR2 & I2C_SR2_BUSY)){
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d168      	bne.n	8007c46 <I2C_MasterReceiveData+0x12e>
				stateuml = 1;
 8007b74:	2301      	movs	r3, #1
 8007b76:	77fb      	strb	r3, [r7, #31]
			}
			break;
 8007b78:	e065      	b.n	8007c46 <I2C_MasterReceiveData+0x12e>
		case 1: //generar la condicion de inicio
			I2Cx->CR1 |= I2C_CR1_START;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	601a      	str	r2, [r3, #0]
			stateuml = 2;
 8007b86:	2302      	movs	r3, #2
 8007b88:	77fb      	strb	r3, [r7, #31]
		case 2: //esperar la respuesta del start
			if(I2Cx->SR1 & I2C_SR1_SB){
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d057      	beq.n	8007c46 <I2C_MasterReceiveData+0x12e>
				stateuml = 3;
 8007b96:	2303      	movs	r3, #3
 8007b98:	77fb      	strb	r3, [r7, #31]
			}
			break;
 8007b9a:	e054      	b.n	8007c46 <I2C_MasterReceiveData+0x12e>
		case 3:  //enviar la direccion del esclavo
			slaveAddr = slaveAddr<<1;
 8007b9c:	7afb      	ldrb	r3, [r7, #11]
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	72fb      	strb	r3, [r7, #11]
			slaveAddr |= (1U);			//read
 8007ba2:	7afb      	ldrb	r3, [r7, #11]
 8007ba4:	f043 0301 	orr.w	r3, r3, #1
 8007ba8:	72fb      	strb	r3, [r7, #11]
			I2Cx->DR = slaveAddr;
 8007baa:	7afa      	ldrb	r2, [r7, #11]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	611a      	str	r2, [r3, #16]
			stateuml = 4;
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	77fb      	strb	r3, [r7, #31]
			break;
 8007bb4:	e047      	b.n	8007c46 <I2C_MasterReceiveData+0x12e>
		case 4:	//esperar la respuesta del esclavo
			if(I2Cx->SR1 & I2C_SR1_ADDR){
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d041      	beq.n	8007c46 <I2C_MasterReceiveData+0x12e>
				//limpiar los registros de estado
				temp = I2Cx->SR1;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	617b      	str	r3, [r7, #20]
				temp = I2Cx->SR2;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	617b      	str	r3, [r7, #20]
				(void)temp;
 8007bce:	697b      	ldr	r3, [r7, #20]
				/*habilitar el acknowlegde signal*/
				I2Cx->CR1 |= I2C_CR1_ACK;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	601a      	str	r2, [r3, #0]
				stateuml = 5;
 8007bdc:	2305      	movs	r3, #5
 8007bde:	77fb      	strb	r3, [r7, #31]
			}
			break;
 8007be0:	e031      	b.n	8007c46 <I2C_MasterReceiveData+0x12e>
		case 5: //recibir los datos
			if(Len>1){
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d911      	bls.n	8007c0c <I2C_MasterReceiveData+0xf4>
				//esperar el bit RXNE se ponga 1
				if(I2Cx->SR1 & I2C_SR1_RXNE){
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d028      	beq.n	8007c46 <I2C_MasterReceiveData+0x12e>
					*pData = I2Cx->DR;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	b2da      	uxtb	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	701a      	strb	r2, [r3, #0]
					pData++;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	3301      	adds	r3, #1
 8007c02:	607b      	str	r3, [r7, #4]
					Len--;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	603b      	str	r3, [r7, #0]
 8007c0a:	e01c      	b.n	8007c46 <I2C_MasterReceiveData+0x12e>
				}
			}else{
				/*deshabilitar el bit ACK*/
				I2Cx->CR1 &=~ I2C_CR1_ACK;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	601a      	str	r2, [r3, #0]
				/*esperamos el dato*/
				if(I2Cx->SR1 & I2C_SR1_RXNE){
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	695b      	ldr	r3, [r3, #20]
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d010      	beq.n	8007c46 <I2C_MasterReceiveData+0x12e>
					//generar la condicion de parada
					I2Cx->CR1 |= I2C_CR1_STOP;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	601a      	str	r2, [r3, #0]
					//lee el dato
					*pData = I2Cx->DR;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	701a      	strb	r2, [r3, #0]
					Len--;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	603b      	str	r3, [r7, #0]
					return true;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e010      	b.n	8007c66 <I2C_MasterReceiveData+0x14e>
	while((GetTicks() - tickstart)<timeout){
 8007c44:	bf00      	nop
 8007c46:	f7ff fd43 	bl	80076d0 <GetTicks>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c52:	429a      	cmp	r2, r3
 8007c54:	f63f af76 	bhi.w	8007b44 <I2C_MasterReceiveData+0x2c>
				}
			}
			break;
		}
	}
	I2Cx->CR1 |= I2C_CR1_STOP;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	601a      	str	r2, [r3, #0]

	return false;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3720      	adds	r7, #32
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop

08007c70 <i2c_write_reg>:

bool i2c_write_reg(I2C_TypeDef *I2Cx, uint8_t slaveAddr,uint8_t reg_addr, uint8_t *pData, uint32_t Len, uint32_t timeout){
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af02      	add	r7, sp, #8
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	607b      	str	r3, [r7, #4]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	72fb      	strb	r3, [r7, #11]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	72bb      	strb	r3, [r7, #10]
	bool state = I2C_MasterSendData(I2Cx, slaveAddr, &reg_addr, 1, timeout);
 8007c82:	f107 020a 	add.w	r2, r7, #10
 8007c86:	7af9      	ldrb	r1, [r7, #11]
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f7ff fe9e 	bl	80079d0 <I2C_MasterSendData>
 8007c94:	4603      	mov	r3, r0
 8007c96:	75fb      	strb	r3, [r7, #23]
	if(state == true){
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d009      	beq.n	8007cb2 <i2c_write_reg+0x42>
		state = I2C_MasterSendData(I2Cx, slaveAddr, pData, Len, timeout);
 8007c9e:	7af9      	ldrb	r1, [r7, #11]
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f7ff fe91 	bl	80079d0 <I2C_MasterSendData>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75fb      	strb	r3, [r7, #23]
	}
	return state;
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3718      	adds	r7, #24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <i2c_read_reg>:

bool i2c_read_reg(I2C_TypeDef *I2Cx, uint8_t slaveAddr, uint8_t reg_addr, uint8_t *pData, uint32_t Len, uint32_t timeout){
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af02      	add	r7, sp, #8
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	607b      	str	r3, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	72fb      	strb	r3, [r7, #11]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	72bb      	strb	r3, [r7, #10]

	if(I2C_MasterSendData(I2Cx, slaveAddr, &reg_addr, 1, timeout) == true){
 8007cce:	f107 020a 	add.w	r2, r7, #10
 8007cd2:	7af9      	ldrb	r1, [r7, #11]
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	2301      	movs	r3, #1
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff fe78 	bl	80079d0 <I2C_MasterSendData>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d009      	beq.n	8007cfa <i2c_read_reg+0x3e>
		return I2C_MasterReceiveData(I2Cx, slaveAddr, pData, Len, timeout);
 8007ce6:	7af9      	ldrb	r1, [r7, #11]
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f7ff ff11 	bl	8007b18 <I2C_MasterReceiveData>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	e000      	b.n	8007cfc <i2c_read_reg+0x40>
	}
	return false;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <GPIO_Config>:

/**
  * @fn configura los pines necesarios
	*/
void GPIO_Config(void){
 8007d04:	b580      	push	{r7, lr}
 8007d06:	af00      	add	r7, sp, #0

	/*PA6 -> EXTI */
	RCC->AHB1ENR |= GPIOX_CLOCK(MPU6050_IT);
 8007d08:	4b1c      	ldr	r3, [pc, #112]	; (8007d7c <GPIO_Config+0x78>)
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	4a1b      	ldr	r2, [pc, #108]	; (8007d7c <GPIO_Config+0x78>)
 8007d0e:	f043 0301 	orr.w	r3, r3, #1
 8007d12:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_DIGITAL_INPUT, MPU6050_IT);
 8007d14:	4b1a      	ldr	r3, [pc, #104]	; (8007d80 <GPIO_Config+0x7c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a19      	ldr	r2, [pc, #100]	; (8007d80 <GPIO_Config+0x7c>)
 8007d1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007d1e:	6013      	str	r3, [r2, #0]

	GPIOX_PUPDR(MODE_PU_NONE, MPU6050_IT);
 8007d20:	4b17      	ldr	r3, [pc, #92]	; (8007d80 <GPIO_Config+0x7c>)
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	4a16      	ldr	r2, [pc, #88]	; (8007d80 <GPIO_Config+0x7c>)
 8007d26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007d2a:	60d3      	str	r3, [r2, #12]

	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8007d2c:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <GPIO_Config+0x78>)
 8007d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d30:	4a12      	ldr	r2, [pc, #72]	; (8007d7c <GPIO_Config+0x78>)
 8007d32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d36:	6453      	str	r3, [r2, #68]	; 0x44

	EXTI->IMR |= EXTI_IMR_IM6;
 8007d38:	4b12      	ldr	r3, [pc, #72]	; (8007d84 <GPIO_Config+0x80>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a11      	ldr	r2, [pc, #68]	; (8007d84 <GPIO_Config+0x80>)
 8007d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d42:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= EXTI_RTSR_TR6;
 8007d44:	4b0f      	ldr	r3, [pc, #60]	; (8007d84 <GPIO_Config+0x80>)
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	4a0e      	ldr	r2, [pc, #56]	; (8007d84 <GPIO_Config+0x80>)
 8007d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d4e:	6093      	str	r3, [r2, #8]
	EXTI->PR |= EXTI_PR_PR6;
 8007d50:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <GPIO_Config+0x80>)
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	4a0b      	ldr	r2, [pc, #44]	; (8007d84 <GPIO_Config+0x80>)
 8007d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d5a:	6153      	str	r3, [r2, #20]

	SYSCFG->EXTICR[1] &=~ SYSCFG_EXTICR2_EXTI6;
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <GPIO_Config+0x84>)
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	4a09      	ldr	r2, [pc, #36]	; (8007d88 <GPIO_Config+0x84>)
 8007d62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d66:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI6_PA;
 8007d68:	4b07      	ldr	r3, [pc, #28]	; (8007d88 <GPIO_Config+0x84>)
 8007d6a:	4a07      	ldr	r2, [pc, #28]	; (8007d88 <GPIO_Config+0x84>)
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007d70:	2017      	movs	r0, #23
 8007d72:	f7ff fcc7 	bl	8007704 <__NVIC_EnableIRQ>

	return;
 8007d76:	bf00      	nop
}
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40023800 	.word	0x40023800
 8007d80:	40020000 	.word	0x40020000
 8007d84:	40013c00 	.word	0x40013c00
 8007d88:	40013800 	.word	0x40013800

08007d8c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR6){
 8007d90:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <EXTI9_5_IRQHandler+0x2c>)
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d008      	beq.n	8007dae <EXTI9_5_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR6;
 8007d9c:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <EXTI9_5_IRQHandler+0x2c>)
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	4a05      	ldr	r2, [pc, #20]	; (8007db8 <EXTI9_5_IRQHandler+0x2c>)
 8007da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da6:	6153      	str	r3, [r2, #20]
		/*CODE HERE*/
		read = 1;
 8007da8:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <EXTI9_5_IRQHandler+0x30>)
 8007daa:	2201      	movs	r2, #1
 8007dac:	601a      	str	r2, [r3, #0]

	}
}
 8007dae:	bf00      	nop
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	40013c00 	.word	0x40013c00
 8007dbc:	2000121c 	.word	0x2000121c

08007dc0 <__io_putchar>:


int __io_putchar(int ch){
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff fcb8 	bl	8007740 <ITM_SendChar>
	return ch;
 8007dd0:	687b      	ldr	r3, [r7, #4]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <SysTick_Handler>:
#include "delay.h"

/**
 * @brief ISR -> SYSTICK
 */
void SysTick_Handler(void){
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	af00      	add	r7, sp, #0
	TickInc_Callback();
 8007dde:	f7ff fc83 	bl	80076e8 <TickInc_Callback>
}
 8007de2:	bf00      	nop
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007de6:	b480      	push	{r7}
 8007de8:	af00      	add	r7, sp, #0
  return 1;
 8007dea:	2301      	movs	r3, #1
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <_kill>:

int _kill(int pid, int sig)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007e00:	f000 f972 	bl	80080e8 <__errno>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2216      	movs	r2, #22
 8007e08:	601a      	str	r2, [r3, #0]
  return -1;
 8007e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <_exit>:

void _exit (int status)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff ffe7 	bl	8007df6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007e28:	e7fe      	b.n	8007e28 <_exit+0x12>

08007e2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b086      	sub	sp, #24
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	60b9      	str	r1, [r7, #8]
 8007e34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e36:	2300      	movs	r3, #0
 8007e38:	617b      	str	r3, [r7, #20]
 8007e3a:	e00a      	b.n	8007e52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007e3c:	f3af 8000 	nop.w
 8007e40:	4601      	mov	r1, r0
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	1c5a      	adds	r2, r3, #1
 8007e46:	60ba      	str	r2, [r7, #8]
 8007e48:	b2ca      	uxtb	r2, r1
 8007e4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	617b      	str	r3, [r7, #20]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	dbf0      	blt.n	8007e3c <_read+0x12>
  }

  return len;
 8007e5a:	687b      	ldr	r3, [r7, #4]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	60b9      	str	r1, [r7, #8]
 8007e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e70:	2300      	movs	r3, #0
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e009      	b.n	8007e8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	60ba      	str	r2, [r7, #8]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7ff ff9e 	bl	8007dc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	3301      	adds	r3, #1
 8007e88:	617b      	str	r3, [r7, #20]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	dbf1      	blt.n	8007e76 <_write+0x12>
  }
  return len;
 8007e92:	687b      	ldr	r3, [r7, #4]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <_close>:

int _close(int file)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007ec4:	605a      	str	r2, [r3, #4]
  return 0;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <_isatty>:

int _isatty(int file)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007edc:	2301      	movs	r3, #1
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	370c      	adds	r7, #12
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr

08007eea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b085      	sub	sp, #20
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007f0c:	4a14      	ldr	r2, [pc, #80]	; (8007f60 <_sbrk+0x5c>)
 8007f0e:	4b15      	ldr	r3, [pc, #84]	; (8007f64 <_sbrk+0x60>)
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007f18:	4b13      	ldr	r3, [pc, #76]	; (8007f68 <_sbrk+0x64>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d102      	bne.n	8007f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007f20:	4b11      	ldr	r3, [pc, #68]	; (8007f68 <_sbrk+0x64>)
 8007f22:	4a12      	ldr	r2, [pc, #72]	; (8007f6c <_sbrk+0x68>)
 8007f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007f26:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <_sbrk+0x64>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	693a      	ldr	r2, [r7, #16]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d207      	bcs.n	8007f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007f34:	f000 f8d8 	bl	80080e8 <__errno>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	220c      	movs	r2, #12
 8007f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f42:	e009      	b.n	8007f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007f44:	4b08      	ldr	r3, [pc, #32]	; (8007f68 <_sbrk+0x64>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007f4a:	4b07      	ldr	r3, [pc, #28]	; (8007f68 <_sbrk+0x64>)
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4413      	add	r3, r2
 8007f52:	4a05      	ldr	r2, [pc, #20]	; (8007f68 <_sbrk+0x64>)
 8007f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007f56:	68fb      	ldr	r3, [r7, #12]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3718      	adds	r7, #24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20020000 	.word	0x20020000
 8007f64:	00000400 	.word	0x00000400
 8007f68:	20001220 	.word	0x20001220
 8007f6c:	20001238 	.word	0x20001238

08007f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007f74:	4b06      	ldr	r3, [pc, #24]	; (8007f90 <SystemInit+0x20>)
 8007f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f7a:	4a05      	ldr	r2, [pc, #20]	; (8007f90 <SystemInit+0x20>)
 8007f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007f84:	bf00      	nop
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop
 8007f90:	e000ed00 	.word	0xe000ed00

08007f94 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	613b      	str	r3, [r7, #16]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	60fb      	str	r3, [r7, #12]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	60bb      	str	r3, [r7, #8]
 8007faa:	2302      	movs	r3, #2
 8007fac:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8007fae:	4b34      	ldr	r3, [pc, #208]	; (8008080 <SystemCoreClockUpdate+0xec>)
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f003 030c 	and.w	r3, r3, #12
 8007fb6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d011      	beq.n	8007fe2 <SystemCoreClockUpdate+0x4e>
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b08      	cmp	r3, #8
 8007fc2:	d844      	bhi.n	800804e <SystemCoreClockUpdate+0xba>
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <SystemCoreClockUpdate+0x3e>
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d004      	beq.n	8007fda <SystemCoreClockUpdate+0x46>
 8007fd0:	e03d      	b.n	800804e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8007fd2:	4b2c      	ldr	r3, [pc, #176]	; (8008084 <SystemCoreClockUpdate+0xf0>)
 8007fd4:	4a2c      	ldr	r2, [pc, #176]	; (8008088 <SystemCoreClockUpdate+0xf4>)
 8007fd6:	601a      	str	r2, [r3, #0]
      break;
 8007fd8:	e03d      	b.n	8008056 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8007fda:	4b2a      	ldr	r3, [pc, #168]	; (8008084 <SystemCoreClockUpdate+0xf0>)
 8007fdc:	4a2b      	ldr	r2, [pc, #172]	; (800808c <SystemCoreClockUpdate+0xf8>)
 8007fde:	601a      	str	r2, [r3, #0]
      break;
 8007fe0:	e039      	b.n	8008056 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8007fe2:	4b27      	ldr	r3, [pc, #156]	; (8008080 <SystemCoreClockUpdate+0xec>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	0d9b      	lsrs	r3, r3, #22
 8007fe8:	f003 0301 	and.w	r3, r3, #1
 8007fec:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007fee:	4b24      	ldr	r3, [pc, #144]	; (8008080 <SystemCoreClockUpdate+0xec>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ff6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00c      	beq.n	8008018 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8007ffe:	4a23      	ldr	r2, [pc, #140]	; (800808c <SystemCoreClockUpdate+0xf8>)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	fbb2 f3f3 	udiv	r3, r2, r3
 8008006:	4a1e      	ldr	r2, [pc, #120]	; (8008080 <SystemCoreClockUpdate+0xec>)
 8008008:	6852      	ldr	r2, [r2, #4]
 800800a:	0992      	lsrs	r2, r2, #6
 800800c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008010:	fb02 f303 	mul.w	r3, r2, r3
 8008014:	617b      	str	r3, [r7, #20]
 8008016:	e00b      	b.n	8008030 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8008018:	4a1b      	ldr	r2, [pc, #108]	; (8008088 <SystemCoreClockUpdate+0xf4>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008020:	4a17      	ldr	r2, [pc, #92]	; (8008080 <SystemCoreClockUpdate+0xec>)
 8008022:	6852      	ldr	r2, [r2, #4]
 8008024:	0992      	lsrs	r2, r2, #6
 8008026:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800802a:	fb02 f303 	mul.w	r3, r2, r3
 800802e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8008030:	4b13      	ldr	r3, [pc, #76]	; (8008080 <SystemCoreClockUpdate+0xec>)
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	0c1b      	lsrs	r3, r3, #16
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	3301      	adds	r3, #1
 800803c:	005b      	lsls	r3, r3, #1
 800803e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	fbb2 f3f3 	udiv	r3, r2, r3
 8008048:	4a0e      	ldr	r2, [pc, #56]	; (8008084 <SystemCoreClockUpdate+0xf0>)
 800804a:	6013      	str	r3, [r2, #0]
      break;
 800804c:	e003      	b.n	8008056 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800804e:	4b0d      	ldr	r3, [pc, #52]	; (8008084 <SystemCoreClockUpdate+0xf0>)
 8008050:	4a0d      	ldr	r2, [pc, #52]	; (8008088 <SystemCoreClockUpdate+0xf4>)
 8008052:	601a      	str	r2, [r3, #0]
      break;
 8008054:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8008056:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <SystemCoreClockUpdate+0xec>)
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	091b      	lsrs	r3, r3, #4
 800805c:	f003 030f 	and.w	r3, r3, #15
 8008060:	4a0b      	ldr	r2, [pc, #44]	; (8008090 <SystemCoreClockUpdate+0xfc>)
 8008062:	5cd3      	ldrb	r3, [r2, r3]
 8008064:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8008066:	4b07      	ldr	r3, [pc, #28]	; (8008084 <SystemCoreClockUpdate+0xf0>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	fa22 f303 	lsr.w	r3, r2, r3
 8008070:	4a04      	ldr	r2, [pc, #16]	; (8008084 <SystemCoreClockUpdate+0xf0>)
 8008072:	6013      	str	r3, [r2, #0]
}
 8008074:	bf00      	nop
 8008076:	371c      	adds	r7, #28
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	40023800 	.word	0x40023800
 8008084:	20000bf8 	.word	0x20000bf8
 8008088:	00f42400 	.word	0x00f42400
 800808c:	017d7840 	.word	0x017d7840
 8008090:	0800d030 	.word	0x0800d030

08008094 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008094:	480d      	ldr	r0, [pc, #52]	; (80080cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008096:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008098:	f7ff ff6a 	bl	8007f70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800809c:	480c      	ldr	r0, [pc, #48]	; (80080d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800809e:	490d      	ldr	r1, [pc, #52]	; (80080d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80080a0:	4a0d      	ldr	r2, [pc, #52]	; (80080d8 <LoopForever+0xe>)
  movs r3, #0
 80080a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80080a4:	e002      	b.n	80080ac <LoopCopyDataInit>

080080a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80080a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80080a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80080aa:	3304      	adds	r3, #4

080080ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80080ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80080ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80080b0:	d3f9      	bcc.n	80080a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80080b2:	4a0a      	ldr	r2, [pc, #40]	; (80080dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80080b4:	4c0a      	ldr	r4, [pc, #40]	; (80080e0 <LoopForever+0x16>)
  movs r3, #0
 80080b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80080b8:	e001      	b.n	80080be <LoopFillZerobss>

080080ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80080ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80080bc:	3204      	adds	r2, #4

080080be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80080be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80080c0:	d3fb      	bcc.n	80080ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80080c2:	f000 f817 	bl	80080f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80080c6:	f7ff fb63 	bl	8007790 <main>

080080ca <LoopForever>:

LoopForever:
  b LoopForever
 80080ca:	e7fe      	b.n	80080ca <LoopForever>
  ldr   r0, =_estack
 80080cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80080d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80080d4:	20000dcc 	.word	0x20000dcc
  ldr r2, =_sidata
 80080d8:	0800d464 	.word	0x0800d464
  ldr r2, =_sbss
 80080dc:	20000dcc 	.word	0x20000dcc
  ldr r4, =_ebss
 80080e0:	20001234 	.word	0x20001234

080080e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80080e4:	e7fe      	b.n	80080e4 <ADC_IRQHandler>
	...

080080e8 <__errno>:
 80080e8:	4b01      	ldr	r3, [pc, #4]	; (80080f0 <__errno+0x8>)
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	20000bfc 	.word	0x20000bfc

080080f4 <__libc_init_array>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	4d0d      	ldr	r5, [pc, #52]	; (800812c <__libc_init_array+0x38>)
 80080f8:	4c0d      	ldr	r4, [pc, #52]	; (8008130 <__libc_init_array+0x3c>)
 80080fa:	1b64      	subs	r4, r4, r5
 80080fc:	10a4      	asrs	r4, r4, #2
 80080fe:	2600      	movs	r6, #0
 8008100:	42a6      	cmp	r6, r4
 8008102:	d109      	bne.n	8008118 <__libc_init_array+0x24>
 8008104:	4d0b      	ldr	r5, [pc, #44]	; (8008134 <__libc_init_array+0x40>)
 8008106:	4c0c      	ldr	r4, [pc, #48]	; (8008138 <__libc_init_array+0x44>)
 8008108:	f003 f810 	bl	800b12c <_init>
 800810c:	1b64      	subs	r4, r4, r5
 800810e:	10a4      	asrs	r4, r4, #2
 8008110:	2600      	movs	r6, #0
 8008112:	42a6      	cmp	r6, r4
 8008114:	d105      	bne.n	8008122 <__libc_init_array+0x2e>
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	f855 3b04 	ldr.w	r3, [r5], #4
 800811c:	4798      	blx	r3
 800811e:	3601      	adds	r6, #1
 8008120:	e7ee      	b.n	8008100 <__libc_init_array+0xc>
 8008122:	f855 3b04 	ldr.w	r3, [r5], #4
 8008126:	4798      	blx	r3
 8008128:	3601      	adds	r6, #1
 800812a:	e7f2      	b.n	8008112 <__libc_init_array+0x1e>
 800812c:	0800d45c 	.word	0x0800d45c
 8008130:	0800d45c 	.word	0x0800d45c
 8008134:	0800d45c 	.word	0x0800d45c
 8008138:	0800d460 	.word	0x0800d460

0800813c <memcmp>:
 800813c:	b510      	push	{r4, lr}
 800813e:	3901      	subs	r1, #1
 8008140:	4402      	add	r2, r0
 8008142:	4290      	cmp	r0, r2
 8008144:	d101      	bne.n	800814a <memcmp+0xe>
 8008146:	2000      	movs	r0, #0
 8008148:	e005      	b.n	8008156 <memcmp+0x1a>
 800814a:	7803      	ldrb	r3, [r0, #0]
 800814c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008150:	42a3      	cmp	r3, r4
 8008152:	d001      	beq.n	8008158 <memcmp+0x1c>
 8008154:	1b18      	subs	r0, r3, r4
 8008156:	bd10      	pop	{r4, pc}
 8008158:	3001      	adds	r0, #1
 800815a:	e7f2      	b.n	8008142 <memcmp+0x6>

0800815c <memset>:
 800815c:	4402      	add	r2, r0
 800815e:	4603      	mov	r3, r0
 8008160:	4293      	cmp	r3, r2
 8008162:	d100      	bne.n	8008166 <memset+0xa>
 8008164:	4770      	bx	lr
 8008166:	f803 1b01 	strb.w	r1, [r3], #1
 800816a:	e7f9      	b.n	8008160 <memset+0x4>

0800816c <__cvt>:
 800816c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008170:	ec55 4b10 	vmov	r4, r5, d0
 8008174:	2d00      	cmp	r5, #0
 8008176:	460e      	mov	r6, r1
 8008178:	4619      	mov	r1, r3
 800817a:	462b      	mov	r3, r5
 800817c:	bfbb      	ittet	lt
 800817e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008182:	461d      	movlt	r5, r3
 8008184:	2300      	movge	r3, #0
 8008186:	232d      	movlt	r3, #45	; 0x2d
 8008188:	700b      	strb	r3, [r1, #0]
 800818a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800818c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008190:	4691      	mov	r9, r2
 8008192:	f023 0820 	bic.w	r8, r3, #32
 8008196:	bfbc      	itt	lt
 8008198:	4622      	movlt	r2, r4
 800819a:	4614      	movlt	r4, r2
 800819c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081a0:	d005      	beq.n	80081ae <__cvt+0x42>
 80081a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80081a6:	d100      	bne.n	80081aa <__cvt+0x3e>
 80081a8:	3601      	adds	r6, #1
 80081aa:	2102      	movs	r1, #2
 80081ac:	e000      	b.n	80081b0 <__cvt+0x44>
 80081ae:	2103      	movs	r1, #3
 80081b0:	ab03      	add	r3, sp, #12
 80081b2:	9301      	str	r3, [sp, #4]
 80081b4:	ab02      	add	r3, sp, #8
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	ec45 4b10 	vmov	d0, r4, r5
 80081bc:	4653      	mov	r3, sl
 80081be:	4632      	mov	r2, r6
 80081c0:	f000 fcfa 	bl	8008bb8 <_dtoa_r>
 80081c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80081c8:	4607      	mov	r7, r0
 80081ca:	d102      	bne.n	80081d2 <__cvt+0x66>
 80081cc:	f019 0f01 	tst.w	r9, #1
 80081d0:	d022      	beq.n	8008218 <__cvt+0xac>
 80081d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80081d6:	eb07 0906 	add.w	r9, r7, r6
 80081da:	d110      	bne.n	80081fe <__cvt+0x92>
 80081dc:	783b      	ldrb	r3, [r7, #0]
 80081de:	2b30      	cmp	r3, #48	; 0x30
 80081e0:	d10a      	bne.n	80081f8 <__cvt+0x8c>
 80081e2:	2200      	movs	r2, #0
 80081e4:	2300      	movs	r3, #0
 80081e6:	4620      	mov	r0, r4
 80081e8:	4629      	mov	r1, r5
 80081ea:	f7f8 fc7d 	bl	8000ae8 <__aeabi_dcmpeq>
 80081ee:	b918      	cbnz	r0, 80081f8 <__cvt+0x8c>
 80081f0:	f1c6 0601 	rsb	r6, r6, #1
 80081f4:	f8ca 6000 	str.w	r6, [sl]
 80081f8:	f8da 3000 	ldr.w	r3, [sl]
 80081fc:	4499      	add	r9, r3
 80081fe:	2200      	movs	r2, #0
 8008200:	2300      	movs	r3, #0
 8008202:	4620      	mov	r0, r4
 8008204:	4629      	mov	r1, r5
 8008206:	f7f8 fc6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800820a:	b108      	cbz	r0, 8008210 <__cvt+0xa4>
 800820c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008210:	2230      	movs	r2, #48	; 0x30
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	454b      	cmp	r3, r9
 8008216:	d307      	bcc.n	8008228 <__cvt+0xbc>
 8008218:	9b03      	ldr	r3, [sp, #12]
 800821a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800821c:	1bdb      	subs	r3, r3, r7
 800821e:	4638      	mov	r0, r7
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	b004      	add	sp, #16
 8008224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008228:	1c59      	adds	r1, r3, #1
 800822a:	9103      	str	r1, [sp, #12]
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	e7f0      	b.n	8008212 <__cvt+0xa6>

08008230 <__exponent>:
 8008230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008232:	4603      	mov	r3, r0
 8008234:	2900      	cmp	r1, #0
 8008236:	bfb8      	it	lt
 8008238:	4249      	neglt	r1, r1
 800823a:	f803 2b02 	strb.w	r2, [r3], #2
 800823e:	bfb4      	ite	lt
 8008240:	222d      	movlt	r2, #45	; 0x2d
 8008242:	222b      	movge	r2, #43	; 0x2b
 8008244:	2909      	cmp	r1, #9
 8008246:	7042      	strb	r2, [r0, #1]
 8008248:	dd2a      	ble.n	80082a0 <__exponent+0x70>
 800824a:	f10d 0407 	add.w	r4, sp, #7
 800824e:	46a4      	mov	ip, r4
 8008250:	270a      	movs	r7, #10
 8008252:	46a6      	mov	lr, r4
 8008254:	460a      	mov	r2, r1
 8008256:	fb91 f6f7 	sdiv	r6, r1, r7
 800825a:	fb07 1516 	mls	r5, r7, r6, r1
 800825e:	3530      	adds	r5, #48	; 0x30
 8008260:	2a63      	cmp	r2, #99	; 0x63
 8008262:	f104 34ff 	add.w	r4, r4, #4294967295
 8008266:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800826a:	4631      	mov	r1, r6
 800826c:	dcf1      	bgt.n	8008252 <__exponent+0x22>
 800826e:	3130      	adds	r1, #48	; 0x30
 8008270:	f1ae 0502 	sub.w	r5, lr, #2
 8008274:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008278:	1c44      	adds	r4, r0, #1
 800827a:	4629      	mov	r1, r5
 800827c:	4561      	cmp	r1, ip
 800827e:	d30a      	bcc.n	8008296 <__exponent+0x66>
 8008280:	f10d 0209 	add.w	r2, sp, #9
 8008284:	eba2 020e 	sub.w	r2, r2, lr
 8008288:	4565      	cmp	r5, ip
 800828a:	bf88      	it	hi
 800828c:	2200      	movhi	r2, #0
 800828e:	4413      	add	r3, r2
 8008290:	1a18      	subs	r0, r3, r0
 8008292:	b003      	add	sp, #12
 8008294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800829a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800829e:	e7ed      	b.n	800827c <__exponent+0x4c>
 80082a0:	2330      	movs	r3, #48	; 0x30
 80082a2:	3130      	adds	r1, #48	; 0x30
 80082a4:	7083      	strb	r3, [r0, #2]
 80082a6:	70c1      	strb	r1, [r0, #3]
 80082a8:	1d03      	adds	r3, r0, #4
 80082aa:	e7f1      	b.n	8008290 <__exponent+0x60>

080082ac <_printf_float>:
 80082ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b0:	ed2d 8b02 	vpush	{d8}
 80082b4:	b08d      	sub	sp, #52	; 0x34
 80082b6:	460c      	mov	r4, r1
 80082b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80082bc:	4616      	mov	r6, r2
 80082be:	461f      	mov	r7, r3
 80082c0:	4605      	mov	r5, r0
 80082c2:	f001 fb5d 	bl	8009980 <_localeconv_r>
 80082c6:	f8d0 a000 	ldr.w	sl, [r0]
 80082ca:	4650      	mov	r0, sl
 80082cc:	f7f7 ff90 	bl	80001f0 <strlen>
 80082d0:	2300      	movs	r3, #0
 80082d2:	930a      	str	r3, [sp, #40]	; 0x28
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	9305      	str	r3, [sp, #20]
 80082d8:	f8d8 3000 	ldr.w	r3, [r8]
 80082dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80082e0:	3307      	adds	r3, #7
 80082e2:	f023 0307 	bic.w	r3, r3, #7
 80082e6:	f103 0208 	add.w	r2, r3, #8
 80082ea:	f8c8 2000 	str.w	r2, [r8]
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80082f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80082fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80082fe:	9307      	str	r3, [sp, #28]
 8008300:	f8cd 8018 	str.w	r8, [sp, #24]
 8008304:	ee08 0a10 	vmov	s16, r0
 8008308:	4b9f      	ldr	r3, [pc, #636]	; (8008588 <_printf_float+0x2dc>)
 800830a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800830e:	f04f 32ff 	mov.w	r2, #4294967295
 8008312:	f7f8 fc1b 	bl	8000b4c <__aeabi_dcmpun>
 8008316:	bb88      	cbnz	r0, 800837c <_printf_float+0xd0>
 8008318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800831c:	4b9a      	ldr	r3, [pc, #616]	; (8008588 <_printf_float+0x2dc>)
 800831e:	f04f 32ff 	mov.w	r2, #4294967295
 8008322:	f7f8 fbf5 	bl	8000b10 <__aeabi_dcmple>
 8008326:	bb48      	cbnz	r0, 800837c <_printf_float+0xd0>
 8008328:	2200      	movs	r2, #0
 800832a:	2300      	movs	r3, #0
 800832c:	4640      	mov	r0, r8
 800832e:	4649      	mov	r1, r9
 8008330:	f7f8 fbe4 	bl	8000afc <__aeabi_dcmplt>
 8008334:	b110      	cbz	r0, 800833c <_printf_float+0x90>
 8008336:	232d      	movs	r3, #45	; 0x2d
 8008338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800833c:	4b93      	ldr	r3, [pc, #588]	; (800858c <_printf_float+0x2e0>)
 800833e:	4894      	ldr	r0, [pc, #592]	; (8008590 <_printf_float+0x2e4>)
 8008340:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008344:	bf94      	ite	ls
 8008346:	4698      	movls	r8, r3
 8008348:	4680      	movhi	r8, r0
 800834a:	2303      	movs	r3, #3
 800834c:	6123      	str	r3, [r4, #16]
 800834e:	9b05      	ldr	r3, [sp, #20]
 8008350:	f023 0204 	bic.w	r2, r3, #4
 8008354:	6022      	str	r2, [r4, #0]
 8008356:	f04f 0900 	mov.w	r9, #0
 800835a:	9700      	str	r7, [sp, #0]
 800835c:	4633      	mov	r3, r6
 800835e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008360:	4621      	mov	r1, r4
 8008362:	4628      	mov	r0, r5
 8008364:	f000 f9d8 	bl	8008718 <_printf_common>
 8008368:	3001      	adds	r0, #1
 800836a:	f040 8090 	bne.w	800848e <_printf_float+0x1e2>
 800836e:	f04f 30ff 	mov.w	r0, #4294967295
 8008372:	b00d      	add	sp, #52	; 0x34
 8008374:	ecbd 8b02 	vpop	{d8}
 8008378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837c:	4642      	mov	r2, r8
 800837e:	464b      	mov	r3, r9
 8008380:	4640      	mov	r0, r8
 8008382:	4649      	mov	r1, r9
 8008384:	f7f8 fbe2 	bl	8000b4c <__aeabi_dcmpun>
 8008388:	b140      	cbz	r0, 800839c <_printf_float+0xf0>
 800838a:	464b      	mov	r3, r9
 800838c:	2b00      	cmp	r3, #0
 800838e:	bfbc      	itt	lt
 8008390:	232d      	movlt	r3, #45	; 0x2d
 8008392:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008396:	487f      	ldr	r0, [pc, #508]	; (8008594 <_printf_float+0x2e8>)
 8008398:	4b7f      	ldr	r3, [pc, #508]	; (8008598 <_printf_float+0x2ec>)
 800839a:	e7d1      	b.n	8008340 <_printf_float+0x94>
 800839c:	6863      	ldr	r3, [r4, #4]
 800839e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80083a2:	9206      	str	r2, [sp, #24]
 80083a4:	1c5a      	adds	r2, r3, #1
 80083a6:	d13f      	bne.n	8008428 <_printf_float+0x17c>
 80083a8:	2306      	movs	r3, #6
 80083aa:	6063      	str	r3, [r4, #4]
 80083ac:	9b05      	ldr	r3, [sp, #20]
 80083ae:	6861      	ldr	r1, [r4, #4]
 80083b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80083b4:	2300      	movs	r3, #0
 80083b6:	9303      	str	r3, [sp, #12]
 80083b8:	ab0a      	add	r3, sp, #40	; 0x28
 80083ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80083be:	ab09      	add	r3, sp, #36	; 0x24
 80083c0:	ec49 8b10 	vmov	d0, r8, r9
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	6022      	str	r2, [r4, #0]
 80083c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80083cc:	4628      	mov	r0, r5
 80083ce:	f7ff fecd 	bl	800816c <__cvt>
 80083d2:	9b06      	ldr	r3, [sp, #24]
 80083d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083d6:	2b47      	cmp	r3, #71	; 0x47
 80083d8:	4680      	mov	r8, r0
 80083da:	d108      	bne.n	80083ee <_printf_float+0x142>
 80083dc:	1cc8      	adds	r0, r1, #3
 80083de:	db02      	blt.n	80083e6 <_printf_float+0x13a>
 80083e0:	6863      	ldr	r3, [r4, #4]
 80083e2:	4299      	cmp	r1, r3
 80083e4:	dd41      	ble.n	800846a <_printf_float+0x1be>
 80083e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80083ea:	fa5f fb8b 	uxtb.w	fp, fp
 80083ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083f2:	d820      	bhi.n	8008436 <_printf_float+0x18a>
 80083f4:	3901      	subs	r1, #1
 80083f6:	465a      	mov	r2, fp
 80083f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80083fc:	9109      	str	r1, [sp, #36]	; 0x24
 80083fe:	f7ff ff17 	bl	8008230 <__exponent>
 8008402:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008404:	1813      	adds	r3, r2, r0
 8008406:	2a01      	cmp	r2, #1
 8008408:	4681      	mov	r9, r0
 800840a:	6123      	str	r3, [r4, #16]
 800840c:	dc02      	bgt.n	8008414 <_printf_float+0x168>
 800840e:	6822      	ldr	r2, [r4, #0]
 8008410:	07d2      	lsls	r2, r2, #31
 8008412:	d501      	bpl.n	8008418 <_printf_float+0x16c>
 8008414:	3301      	adds	r3, #1
 8008416:	6123      	str	r3, [r4, #16]
 8008418:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800841c:	2b00      	cmp	r3, #0
 800841e:	d09c      	beq.n	800835a <_printf_float+0xae>
 8008420:	232d      	movs	r3, #45	; 0x2d
 8008422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008426:	e798      	b.n	800835a <_printf_float+0xae>
 8008428:	9a06      	ldr	r2, [sp, #24]
 800842a:	2a47      	cmp	r2, #71	; 0x47
 800842c:	d1be      	bne.n	80083ac <_printf_float+0x100>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1bc      	bne.n	80083ac <_printf_float+0x100>
 8008432:	2301      	movs	r3, #1
 8008434:	e7b9      	b.n	80083aa <_printf_float+0xfe>
 8008436:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800843a:	d118      	bne.n	800846e <_printf_float+0x1c2>
 800843c:	2900      	cmp	r1, #0
 800843e:	6863      	ldr	r3, [r4, #4]
 8008440:	dd0b      	ble.n	800845a <_printf_float+0x1ae>
 8008442:	6121      	str	r1, [r4, #16]
 8008444:	b913      	cbnz	r3, 800844c <_printf_float+0x1a0>
 8008446:	6822      	ldr	r2, [r4, #0]
 8008448:	07d0      	lsls	r0, r2, #31
 800844a:	d502      	bpl.n	8008452 <_printf_float+0x1a6>
 800844c:	3301      	adds	r3, #1
 800844e:	440b      	add	r3, r1
 8008450:	6123      	str	r3, [r4, #16]
 8008452:	65a1      	str	r1, [r4, #88]	; 0x58
 8008454:	f04f 0900 	mov.w	r9, #0
 8008458:	e7de      	b.n	8008418 <_printf_float+0x16c>
 800845a:	b913      	cbnz	r3, 8008462 <_printf_float+0x1b6>
 800845c:	6822      	ldr	r2, [r4, #0]
 800845e:	07d2      	lsls	r2, r2, #31
 8008460:	d501      	bpl.n	8008466 <_printf_float+0x1ba>
 8008462:	3302      	adds	r3, #2
 8008464:	e7f4      	b.n	8008450 <_printf_float+0x1a4>
 8008466:	2301      	movs	r3, #1
 8008468:	e7f2      	b.n	8008450 <_printf_float+0x1a4>
 800846a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800846e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008470:	4299      	cmp	r1, r3
 8008472:	db05      	blt.n	8008480 <_printf_float+0x1d4>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	6121      	str	r1, [r4, #16]
 8008478:	07d8      	lsls	r0, r3, #31
 800847a:	d5ea      	bpl.n	8008452 <_printf_float+0x1a6>
 800847c:	1c4b      	adds	r3, r1, #1
 800847e:	e7e7      	b.n	8008450 <_printf_float+0x1a4>
 8008480:	2900      	cmp	r1, #0
 8008482:	bfd4      	ite	le
 8008484:	f1c1 0202 	rsble	r2, r1, #2
 8008488:	2201      	movgt	r2, #1
 800848a:	4413      	add	r3, r2
 800848c:	e7e0      	b.n	8008450 <_printf_float+0x1a4>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	055a      	lsls	r2, r3, #21
 8008492:	d407      	bmi.n	80084a4 <_printf_float+0x1f8>
 8008494:	6923      	ldr	r3, [r4, #16]
 8008496:	4642      	mov	r2, r8
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	d12c      	bne.n	80084fc <_printf_float+0x250>
 80084a2:	e764      	b.n	800836e <_printf_float+0xc2>
 80084a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084a8:	f240 80e0 	bls.w	800866c <_printf_float+0x3c0>
 80084ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084b0:	2200      	movs	r2, #0
 80084b2:	2300      	movs	r3, #0
 80084b4:	f7f8 fb18 	bl	8000ae8 <__aeabi_dcmpeq>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d034      	beq.n	8008526 <_printf_float+0x27a>
 80084bc:	4a37      	ldr	r2, [pc, #220]	; (800859c <_printf_float+0x2f0>)
 80084be:	2301      	movs	r3, #1
 80084c0:	4631      	mov	r1, r6
 80084c2:	4628      	mov	r0, r5
 80084c4:	47b8      	blx	r7
 80084c6:	3001      	adds	r0, #1
 80084c8:	f43f af51 	beq.w	800836e <_printf_float+0xc2>
 80084cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084d0:	429a      	cmp	r2, r3
 80084d2:	db02      	blt.n	80084da <_printf_float+0x22e>
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	07d8      	lsls	r0, r3, #31
 80084d8:	d510      	bpl.n	80084fc <_printf_float+0x250>
 80084da:	ee18 3a10 	vmov	r3, s16
 80084de:	4652      	mov	r2, sl
 80084e0:	4631      	mov	r1, r6
 80084e2:	4628      	mov	r0, r5
 80084e4:	47b8      	blx	r7
 80084e6:	3001      	adds	r0, #1
 80084e8:	f43f af41 	beq.w	800836e <_printf_float+0xc2>
 80084ec:	f04f 0800 	mov.w	r8, #0
 80084f0:	f104 091a 	add.w	r9, r4, #26
 80084f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f6:	3b01      	subs	r3, #1
 80084f8:	4543      	cmp	r3, r8
 80084fa:	dc09      	bgt.n	8008510 <_printf_float+0x264>
 80084fc:	6823      	ldr	r3, [r4, #0]
 80084fe:	079b      	lsls	r3, r3, #30
 8008500:	f100 8105 	bmi.w	800870e <_printf_float+0x462>
 8008504:	68e0      	ldr	r0, [r4, #12]
 8008506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008508:	4298      	cmp	r0, r3
 800850a:	bfb8      	it	lt
 800850c:	4618      	movlt	r0, r3
 800850e:	e730      	b.n	8008372 <_printf_float+0xc6>
 8008510:	2301      	movs	r3, #1
 8008512:	464a      	mov	r2, r9
 8008514:	4631      	mov	r1, r6
 8008516:	4628      	mov	r0, r5
 8008518:	47b8      	blx	r7
 800851a:	3001      	adds	r0, #1
 800851c:	f43f af27 	beq.w	800836e <_printf_float+0xc2>
 8008520:	f108 0801 	add.w	r8, r8, #1
 8008524:	e7e6      	b.n	80084f4 <_printf_float+0x248>
 8008526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008528:	2b00      	cmp	r3, #0
 800852a:	dc39      	bgt.n	80085a0 <_printf_float+0x2f4>
 800852c:	4a1b      	ldr	r2, [pc, #108]	; (800859c <_printf_float+0x2f0>)
 800852e:	2301      	movs	r3, #1
 8008530:	4631      	mov	r1, r6
 8008532:	4628      	mov	r0, r5
 8008534:	47b8      	blx	r7
 8008536:	3001      	adds	r0, #1
 8008538:	f43f af19 	beq.w	800836e <_printf_float+0xc2>
 800853c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008540:	4313      	orrs	r3, r2
 8008542:	d102      	bne.n	800854a <_printf_float+0x29e>
 8008544:	6823      	ldr	r3, [r4, #0]
 8008546:	07d9      	lsls	r1, r3, #31
 8008548:	d5d8      	bpl.n	80084fc <_printf_float+0x250>
 800854a:	ee18 3a10 	vmov	r3, s16
 800854e:	4652      	mov	r2, sl
 8008550:	4631      	mov	r1, r6
 8008552:	4628      	mov	r0, r5
 8008554:	47b8      	blx	r7
 8008556:	3001      	adds	r0, #1
 8008558:	f43f af09 	beq.w	800836e <_printf_float+0xc2>
 800855c:	f04f 0900 	mov.w	r9, #0
 8008560:	f104 0a1a 	add.w	sl, r4, #26
 8008564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008566:	425b      	negs	r3, r3
 8008568:	454b      	cmp	r3, r9
 800856a:	dc01      	bgt.n	8008570 <_printf_float+0x2c4>
 800856c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800856e:	e792      	b.n	8008496 <_printf_float+0x1ea>
 8008570:	2301      	movs	r3, #1
 8008572:	4652      	mov	r2, sl
 8008574:	4631      	mov	r1, r6
 8008576:	4628      	mov	r0, r5
 8008578:	47b8      	blx	r7
 800857a:	3001      	adds	r0, #1
 800857c:	f43f aef7 	beq.w	800836e <_printf_float+0xc2>
 8008580:	f109 0901 	add.w	r9, r9, #1
 8008584:	e7ee      	b.n	8008564 <_printf_float+0x2b8>
 8008586:	bf00      	nop
 8008588:	7fefffff 	.word	0x7fefffff
 800858c:	0800d044 	.word	0x0800d044
 8008590:	0800d048 	.word	0x0800d048
 8008594:	0800d050 	.word	0x0800d050
 8008598:	0800d04c 	.word	0x0800d04c
 800859c:	0800d054 	.word	0x0800d054
 80085a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085a4:	429a      	cmp	r2, r3
 80085a6:	bfa8      	it	ge
 80085a8:	461a      	movge	r2, r3
 80085aa:	2a00      	cmp	r2, #0
 80085ac:	4691      	mov	r9, r2
 80085ae:	dc37      	bgt.n	8008620 <_printf_float+0x374>
 80085b0:	f04f 0b00 	mov.w	fp, #0
 80085b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085b8:	f104 021a 	add.w	r2, r4, #26
 80085bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085be:	9305      	str	r3, [sp, #20]
 80085c0:	eba3 0309 	sub.w	r3, r3, r9
 80085c4:	455b      	cmp	r3, fp
 80085c6:	dc33      	bgt.n	8008630 <_printf_float+0x384>
 80085c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085cc:	429a      	cmp	r2, r3
 80085ce:	db3b      	blt.n	8008648 <_printf_float+0x39c>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	07da      	lsls	r2, r3, #31
 80085d4:	d438      	bmi.n	8008648 <_printf_float+0x39c>
 80085d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085d8:	9a05      	ldr	r2, [sp, #20]
 80085da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085dc:	1a9a      	subs	r2, r3, r2
 80085de:	eba3 0901 	sub.w	r9, r3, r1
 80085e2:	4591      	cmp	r9, r2
 80085e4:	bfa8      	it	ge
 80085e6:	4691      	movge	r9, r2
 80085e8:	f1b9 0f00 	cmp.w	r9, #0
 80085ec:	dc35      	bgt.n	800865a <_printf_float+0x3ae>
 80085ee:	f04f 0800 	mov.w	r8, #0
 80085f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085f6:	f104 0a1a 	add.w	sl, r4, #26
 80085fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085fe:	1a9b      	subs	r3, r3, r2
 8008600:	eba3 0309 	sub.w	r3, r3, r9
 8008604:	4543      	cmp	r3, r8
 8008606:	f77f af79 	ble.w	80084fc <_printf_float+0x250>
 800860a:	2301      	movs	r3, #1
 800860c:	4652      	mov	r2, sl
 800860e:	4631      	mov	r1, r6
 8008610:	4628      	mov	r0, r5
 8008612:	47b8      	blx	r7
 8008614:	3001      	adds	r0, #1
 8008616:	f43f aeaa 	beq.w	800836e <_printf_float+0xc2>
 800861a:	f108 0801 	add.w	r8, r8, #1
 800861e:	e7ec      	b.n	80085fa <_printf_float+0x34e>
 8008620:	4613      	mov	r3, r2
 8008622:	4631      	mov	r1, r6
 8008624:	4642      	mov	r2, r8
 8008626:	4628      	mov	r0, r5
 8008628:	47b8      	blx	r7
 800862a:	3001      	adds	r0, #1
 800862c:	d1c0      	bne.n	80085b0 <_printf_float+0x304>
 800862e:	e69e      	b.n	800836e <_printf_float+0xc2>
 8008630:	2301      	movs	r3, #1
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	9205      	str	r2, [sp, #20]
 8008638:	47b8      	blx	r7
 800863a:	3001      	adds	r0, #1
 800863c:	f43f ae97 	beq.w	800836e <_printf_float+0xc2>
 8008640:	9a05      	ldr	r2, [sp, #20]
 8008642:	f10b 0b01 	add.w	fp, fp, #1
 8008646:	e7b9      	b.n	80085bc <_printf_float+0x310>
 8008648:	ee18 3a10 	vmov	r3, s16
 800864c:	4652      	mov	r2, sl
 800864e:	4631      	mov	r1, r6
 8008650:	4628      	mov	r0, r5
 8008652:	47b8      	blx	r7
 8008654:	3001      	adds	r0, #1
 8008656:	d1be      	bne.n	80085d6 <_printf_float+0x32a>
 8008658:	e689      	b.n	800836e <_printf_float+0xc2>
 800865a:	9a05      	ldr	r2, [sp, #20]
 800865c:	464b      	mov	r3, r9
 800865e:	4442      	add	r2, r8
 8008660:	4631      	mov	r1, r6
 8008662:	4628      	mov	r0, r5
 8008664:	47b8      	blx	r7
 8008666:	3001      	adds	r0, #1
 8008668:	d1c1      	bne.n	80085ee <_printf_float+0x342>
 800866a:	e680      	b.n	800836e <_printf_float+0xc2>
 800866c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800866e:	2a01      	cmp	r2, #1
 8008670:	dc01      	bgt.n	8008676 <_printf_float+0x3ca>
 8008672:	07db      	lsls	r3, r3, #31
 8008674:	d538      	bpl.n	80086e8 <_printf_float+0x43c>
 8008676:	2301      	movs	r3, #1
 8008678:	4642      	mov	r2, r8
 800867a:	4631      	mov	r1, r6
 800867c:	4628      	mov	r0, r5
 800867e:	47b8      	blx	r7
 8008680:	3001      	adds	r0, #1
 8008682:	f43f ae74 	beq.w	800836e <_printf_float+0xc2>
 8008686:	ee18 3a10 	vmov	r3, s16
 800868a:	4652      	mov	r2, sl
 800868c:	4631      	mov	r1, r6
 800868e:	4628      	mov	r0, r5
 8008690:	47b8      	blx	r7
 8008692:	3001      	adds	r0, #1
 8008694:	f43f ae6b 	beq.w	800836e <_printf_float+0xc2>
 8008698:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800869c:	2200      	movs	r2, #0
 800869e:	2300      	movs	r3, #0
 80086a0:	f7f8 fa22 	bl	8000ae8 <__aeabi_dcmpeq>
 80086a4:	b9d8      	cbnz	r0, 80086de <_printf_float+0x432>
 80086a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a8:	f108 0201 	add.w	r2, r8, #1
 80086ac:	3b01      	subs	r3, #1
 80086ae:	4631      	mov	r1, r6
 80086b0:	4628      	mov	r0, r5
 80086b2:	47b8      	blx	r7
 80086b4:	3001      	adds	r0, #1
 80086b6:	d10e      	bne.n	80086d6 <_printf_float+0x42a>
 80086b8:	e659      	b.n	800836e <_printf_float+0xc2>
 80086ba:	2301      	movs	r3, #1
 80086bc:	4652      	mov	r2, sl
 80086be:	4631      	mov	r1, r6
 80086c0:	4628      	mov	r0, r5
 80086c2:	47b8      	blx	r7
 80086c4:	3001      	adds	r0, #1
 80086c6:	f43f ae52 	beq.w	800836e <_printf_float+0xc2>
 80086ca:	f108 0801 	add.w	r8, r8, #1
 80086ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d0:	3b01      	subs	r3, #1
 80086d2:	4543      	cmp	r3, r8
 80086d4:	dcf1      	bgt.n	80086ba <_printf_float+0x40e>
 80086d6:	464b      	mov	r3, r9
 80086d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80086dc:	e6dc      	b.n	8008498 <_printf_float+0x1ec>
 80086de:	f04f 0800 	mov.w	r8, #0
 80086e2:	f104 0a1a 	add.w	sl, r4, #26
 80086e6:	e7f2      	b.n	80086ce <_printf_float+0x422>
 80086e8:	2301      	movs	r3, #1
 80086ea:	4642      	mov	r2, r8
 80086ec:	e7df      	b.n	80086ae <_printf_float+0x402>
 80086ee:	2301      	movs	r3, #1
 80086f0:	464a      	mov	r2, r9
 80086f2:	4631      	mov	r1, r6
 80086f4:	4628      	mov	r0, r5
 80086f6:	47b8      	blx	r7
 80086f8:	3001      	adds	r0, #1
 80086fa:	f43f ae38 	beq.w	800836e <_printf_float+0xc2>
 80086fe:	f108 0801 	add.w	r8, r8, #1
 8008702:	68e3      	ldr	r3, [r4, #12]
 8008704:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008706:	1a5b      	subs	r3, r3, r1
 8008708:	4543      	cmp	r3, r8
 800870a:	dcf0      	bgt.n	80086ee <_printf_float+0x442>
 800870c:	e6fa      	b.n	8008504 <_printf_float+0x258>
 800870e:	f04f 0800 	mov.w	r8, #0
 8008712:	f104 0919 	add.w	r9, r4, #25
 8008716:	e7f4      	b.n	8008702 <_printf_float+0x456>

08008718 <_printf_common>:
 8008718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800871c:	4616      	mov	r6, r2
 800871e:	4699      	mov	r9, r3
 8008720:	688a      	ldr	r2, [r1, #8]
 8008722:	690b      	ldr	r3, [r1, #16]
 8008724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008728:	4293      	cmp	r3, r2
 800872a:	bfb8      	it	lt
 800872c:	4613      	movlt	r3, r2
 800872e:	6033      	str	r3, [r6, #0]
 8008730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008734:	4607      	mov	r7, r0
 8008736:	460c      	mov	r4, r1
 8008738:	b10a      	cbz	r2, 800873e <_printf_common+0x26>
 800873a:	3301      	adds	r3, #1
 800873c:	6033      	str	r3, [r6, #0]
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	0699      	lsls	r1, r3, #26
 8008742:	bf42      	ittt	mi
 8008744:	6833      	ldrmi	r3, [r6, #0]
 8008746:	3302      	addmi	r3, #2
 8008748:	6033      	strmi	r3, [r6, #0]
 800874a:	6825      	ldr	r5, [r4, #0]
 800874c:	f015 0506 	ands.w	r5, r5, #6
 8008750:	d106      	bne.n	8008760 <_printf_common+0x48>
 8008752:	f104 0a19 	add.w	sl, r4, #25
 8008756:	68e3      	ldr	r3, [r4, #12]
 8008758:	6832      	ldr	r2, [r6, #0]
 800875a:	1a9b      	subs	r3, r3, r2
 800875c:	42ab      	cmp	r3, r5
 800875e:	dc26      	bgt.n	80087ae <_printf_common+0x96>
 8008760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008764:	1e13      	subs	r3, r2, #0
 8008766:	6822      	ldr	r2, [r4, #0]
 8008768:	bf18      	it	ne
 800876a:	2301      	movne	r3, #1
 800876c:	0692      	lsls	r2, r2, #26
 800876e:	d42b      	bmi.n	80087c8 <_printf_common+0xb0>
 8008770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008774:	4649      	mov	r1, r9
 8008776:	4638      	mov	r0, r7
 8008778:	47c0      	blx	r8
 800877a:	3001      	adds	r0, #1
 800877c:	d01e      	beq.n	80087bc <_printf_common+0xa4>
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	68e5      	ldr	r5, [r4, #12]
 8008782:	6832      	ldr	r2, [r6, #0]
 8008784:	f003 0306 	and.w	r3, r3, #6
 8008788:	2b04      	cmp	r3, #4
 800878a:	bf08      	it	eq
 800878c:	1aad      	subeq	r5, r5, r2
 800878e:	68a3      	ldr	r3, [r4, #8]
 8008790:	6922      	ldr	r2, [r4, #16]
 8008792:	bf0c      	ite	eq
 8008794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008798:	2500      	movne	r5, #0
 800879a:	4293      	cmp	r3, r2
 800879c:	bfc4      	itt	gt
 800879e:	1a9b      	subgt	r3, r3, r2
 80087a0:	18ed      	addgt	r5, r5, r3
 80087a2:	2600      	movs	r6, #0
 80087a4:	341a      	adds	r4, #26
 80087a6:	42b5      	cmp	r5, r6
 80087a8:	d11a      	bne.n	80087e0 <_printf_common+0xc8>
 80087aa:	2000      	movs	r0, #0
 80087ac:	e008      	b.n	80087c0 <_printf_common+0xa8>
 80087ae:	2301      	movs	r3, #1
 80087b0:	4652      	mov	r2, sl
 80087b2:	4649      	mov	r1, r9
 80087b4:	4638      	mov	r0, r7
 80087b6:	47c0      	blx	r8
 80087b8:	3001      	adds	r0, #1
 80087ba:	d103      	bne.n	80087c4 <_printf_common+0xac>
 80087bc:	f04f 30ff 	mov.w	r0, #4294967295
 80087c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087c4:	3501      	adds	r5, #1
 80087c6:	e7c6      	b.n	8008756 <_printf_common+0x3e>
 80087c8:	18e1      	adds	r1, r4, r3
 80087ca:	1c5a      	adds	r2, r3, #1
 80087cc:	2030      	movs	r0, #48	; 0x30
 80087ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087d2:	4422      	add	r2, r4
 80087d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087dc:	3302      	adds	r3, #2
 80087de:	e7c7      	b.n	8008770 <_printf_common+0x58>
 80087e0:	2301      	movs	r3, #1
 80087e2:	4622      	mov	r2, r4
 80087e4:	4649      	mov	r1, r9
 80087e6:	4638      	mov	r0, r7
 80087e8:	47c0      	blx	r8
 80087ea:	3001      	adds	r0, #1
 80087ec:	d0e6      	beq.n	80087bc <_printf_common+0xa4>
 80087ee:	3601      	adds	r6, #1
 80087f0:	e7d9      	b.n	80087a6 <_printf_common+0x8e>
	...

080087f4 <_printf_i>:
 80087f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087f8:	7e0f      	ldrb	r7, [r1, #24]
 80087fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087fc:	2f78      	cmp	r7, #120	; 0x78
 80087fe:	4691      	mov	r9, r2
 8008800:	4680      	mov	r8, r0
 8008802:	460c      	mov	r4, r1
 8008804:	469a      	mov	sl, r3
 8008806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800880a:	d807      	bhi.n	800881c <_printf_i+0x28>
 800880c:	2f62      	cmp	r7, #98	; 0x62
 800880e:	d80a      	bhi.n	8008826 <_printf_i+0x32>
 8008810:	2f00      	cmp	r7, #0
 8008812:	f000 80d8 	beq.w	80089c6 <_printf_i+0x1d2>
 8008816:	2f58      	cmp	r7, #88	; 0x58
 8008818:	f000 80a3 	beq.w	8008962 <_printf_i+0x16e>
 800881c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008824:	e03a      	b.n	800889c <_printf_i+0xa8>
 8008826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800882a:	2b15      	cmp	r3, #21
 800882c:	d8f6      	bhi.n	800881c <_printf_i+0x28>
 800882e:	a101      	add	r1, pc, #4	; (adr r1, 8008834 <_printf_i+0x40>)
 8008830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008834:	0800888d 	.word	0x0800888d
 8008838:	080088a1 	.word	0x080088a1
 800883c:	0800881d 	.word	0x0800881d
 8008840:	0800881d 	.word	0x0800881d
 8008844:	0800881d 	.word	0x0800881d
 8008848:	0800881d 	.word	0x0800881d
 800884c:	080088a1 	.word	0x080088a1
 8008850:	0800881d 	.word	0x0800881d
 8008854:	0800881d 	.word	0x0800881d
 8008858:	0800881d 	.word	0x0800881d
 800885c:	0800881d 	.word	0x0800881d
 8008860:	080089ad 	.word	0x080089ad
 8008864:	080088d1 	.word	0x080088d1
 8008868:	0800898f 	.word	0x0800898f
 800886c:	0800881d 	.word	0x0800881d
 8008870:	0800881d 	.word	0x0800881d
 8008874:	080089cf 	.word	0x080089cf
 8008878:	0800881d 	.word	0x0800881d
 800887c:	080088d1 	.word	0x080088d1
 8008880:	0800881d 	.word	0x0800881d
 8008884:	0800881d 	.word	0x0800881d
 8008888:	08008997 	.word	0x08008997
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	1d1a      	adds	r2, r3, #4
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	602a      	str	r2, [r5, #0]
 8008894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800889c:	2301      	movs	r3, #1
 800889e:	e0a3      	b.n	80089e8 <_printf_i+0x1f4>
 80088a0:	6820      	ldr	r0, [r4, #0]
 80088a2:	6829      	ldr	r1, [r5, #0]
 80088a4:	0606      	lsls	r6, r0, #24
 80088a6:	f101 0304 	add.w	r3, r1, #4
 80088aa:	d50a      	bpl.n	80088c2 <_printf_i+0xce>
 80088ac:	680e      	ldr	r6, [r1, #0]
 80088ae:	602b      	str	r3, [r5, #0]
 80088b0:	2e00      	cmp	r6, #0
 80088b2:	da03      	bge.n	80088bc <_printf_i+0xc8>
 80088b4:	232d      	movs	r3, #45	; 0x2d
 80088b6:	4276      	negs	r6, r6
 80088b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088bc:	485e      	ldr	r0, [pc, #376]	; (8008a38 <_printf_i+0x244>)
 80088be:	230a      	movs	r3, #10
 80088c0:	e019      	b.n	80088f6 <_printf_i+0x102>
 80088c2:	680e      	ldr	r6, [r1, #0]
 80088c4:	602b      	str	r3, [r5, #0]
 80088c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088ca:	bf18      	it	ne
 80088cc:	b236      	sxthne	r6, r6
 80088ce:	e7ef      	b.n	80088b0 <_printf_i+0xbc>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	6820      	ldr	r0, [r4, #0]
 80088d4:	1d19      	adds	r1, r3, #4
 80088d6:	6029      	str	r1, [r5, #0]
 80088d8:	0601      	lsls	r1, r0, #24
 80088da:	d501      	bpl.n	80088e0 <_printf_i+0xec>
 80088dc:	681e      	ldr	r6, [r3, #0]
 80088de:	e002      	b.n	80088e6 <_printf_i+0xf2>
 80088e0:	0646      	lsls	r6, r0, #25
 80088e2:	d5fb      	bpl.n	80088dc <_printf_i+0xe8>
 80088e4:	881e      	ldrh	r6, [r3, #0]
 80088e6:	4854      	ldr	r0, [pc, #336]	; (8008a38 <_printf_i+0x244>)
 80088e8:	2f6f      	cmp	r7, #111	; 0x6f
 80088ea:	bf0c      	ite	eq
 80088ec:	2308      	moveq	r3, #8
 80088ee:	230a      	movne	r3, #10
 80088f0:	2100      	movs	r1, #0
 80088f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088f6:	6865      	ldr	r5, [r4, #4]
 80088f8:	60a5      	str	r5, [r4, #8]
 80088fa:	2d00      	cmp	r5, #0
 80088fc:	bfa2      	ittt	ge
 80088fe:	6821      	ldrge	r1, [r4, #0]
 8008900:	f021 0104 	bicge.w	r1, r1, #4
 8008904:	6021      	strge	r1, [r4, #0]
 8008906:	b90e      	cbnz	r6, 800890c <_printf_i+0x118>
 8008908:	2d00      	cmp	r5, #0
 800890a:	d04d      	beq.n	80089a8 <_printf_i+0x1b4>
 800890c:	4615      	mov	r5, r2
 800890e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008912:	fb03 6711 	mls	r7, r3, r1, r6
 8008916:	5dc7      	ldrb	r7, [r0, r7]
 8008918:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800891c:	4637      	mov	r7, r6
 800891e:	42bb      	cmp	r3, r7
 8008920:	460e      	mov	r6, r1
 8008922:	d9f4      	bls.n	800890e <_printf_i+0x11a>
 8008924:	2b08      	cmp	r3, #8
 8008926:	d10b      	bne.n	8008940 <_printf_i+0x14c>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	07de      	lsls	r6, r3, #31
 800892c:	d508      	bpl.n	8008940 <_printf_i+0x14c>
 800892e:	6923      	ldr	r3, [r4, #16]
 8008930:	6861      	ldr	r1, [r4, #4]
 8008932:	4299      	cmp	r1, r3
 8008934:	bfde      	ittt	le
 8008936:	2330      	movle	r3, #48	; 0x30
 8008938:	f805 3c01 	strble.w	r3, [r5, #-1]
 800893c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008940:	1b52      	subs	r2, r2, r5
 8008942:	6122      	str	r2, [r4, #16]
 8008944:	f8cd a000 	str.w	sl, [sp]
 8008948:	464b      	mov	r3, r9
 800894a:	aa03      	add	r2, sp, #12
 800894c:	4621      	mov	r1, r4
 800894e:	4640      	mov	r0, r8
 8008950:	f7ff fee2 	bl	8008718 <_printf_common>
 8008954:	3001      	adds	r0, #1
 8008956:	d14c      	bne.n	80089f2 <_printf_i+0x1fe>
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	b004      	add	sp, #16
 800895e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008962:	4835      	ldr	r0, [pc, #212]	; (8008a38 <_printf_i+0x244>)
 8008964:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008968:	6829      	ldr	r1, [r5, #0]
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008970:	6029      	str	r1, [r5, #0]
 8008972:	061d      	lsls	r5, r3, #24
 8008974:	d514      	bpl.n	80089a0 <_printf_i+0x1ac>
 8008976:	07df      	lsls	r7, r3, #31
 8008978:	bf44      	itt	mi
 800897a:	f043 0320 	orrmi.w	r3, r3, #32
 800897e:	6023      	strmi	r3, [r4, #0]
 8008980:	b91e      	cbnz	r6, 800898a <_printf_i+0x196>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	f023 0320 	bic.w	r3, r3, #32
 8008988:	6023      	str	r3, [r4, #0]
 800898a:	2310      	movs	r3, #16
 800898c:	e7b0      	b.n	80088f0 <_printf_i+0xfc>
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	f043 0320 	orr.w	r3, r3, #32
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	2378      	movs	r3, #120	; 0x78
 8008998:	4828      	ldr	r0, [pc, #160]	; (8008a3c <_printf_i+0x248>)
 800899a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800899e:	e7e3      	b.n	8008968 <_printf_i+0x174>
 80089a0:	0659      	lsls	r1, r3, #25
 80089a2:	bf48      	it	mi
 80089a4:	b2b6      	uxthmi	r6, r6
 80089a6:	e7e6      	b.n	8008976 <_printf_i+0x182>
 80089a8:	4615      	mov	r5, r2
 80089aa:	e7bb      	b.n	8008924 <_printf_i+0x130>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	6826      	ldr	r6, [r4, #0]
 80089b0:	6961      	ldr	r1, [r4, #20]
 80089b2:	1d18      	adds	r0, r3, #4
 80089b4:	6028      	str	r0, [r5, #0]
 80089b6:	0635      	lsls	r5, r6, #24
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	d501      	bpl.n	80089c0 <_printf_i+0x1cc>
 80089bc:	6019      	str	r1, [r3, #0]
 80089be:	e002      	b.n	80089c6 <_printf_i+0x1d2>
 80089c0:	0670      	lsls	r0, r6, #25
 80089c2:	d5fb      	bpl.n	80089bc <_printf_i+0x1c8>
 80089c4:	8019      	strh	r1, [r3, #0]
 80089c6:	2300      	movs	r3, #0
 80089c8:	6123      	str	r3, [r4, #16]
 80089ca:	4615      	mov	r5, r2
 80089cc:	e7ba      	b.n	8008944 <_printf_i+0x150>
 80089ce:	682b      	ldr	r3, [r5, #0]
 80089d0:	1d1a      	adds	r2, r3, #4
 80089d2:	602a      	str	r2, [r5, #0]
 80089d4:	681d      	ldr	r5, [r3, #0]
 80089d6:	6862      	ldr	r2, [r4, #4]
 80089d8:	2100      	movs	r1, #0
 80089da:	4628      	mov	r0, r5
 80089dc:	f7f7 fc10 	bl	8000200 <memchr>
 80089e0:	b108      	cbz	r0, 80089e6 <_printf_i+0x1f2>
 80089e2:	1b40      	subs	r0, r0, r5
 80089e4:	6060      	str	r0, [r4, #4]
 80089e6:	6863      	ldr	r3, [r4, #4]
 80089e8:	6123      	str	r3, [r4, #16]
 80089ea:	2300      	movs	r3, #0
 80089ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089f0:	e7a8      	b.n	8008944 <_printf_i+0x150>
 80089f2:	6923      	ldr	r3, [r4, #16]
 80089f4:	462a      	mov	r2, r5
 80089f6:	4649      	mov	r1, r9
 80089f8:	4640      	mov	r0, r8
 80089fa:	47d0      	blx	sl
 80089fc:	3001      	adds	r0, #1
 80089fe:	d0ab      	beq.n	8008958 <_printf_i+0x164>
 8008a00:	6823      	ldr	r3, [r4, #0]
 8008a02:	079b      	lsls	r3, r3, #30
 8008a04:	d413      	bmi.n	8008a2e <_printf_i+0x23a>
 8008a06:	68e0      	ldr	r0, [r4, #12]
 8008a08:	9b03      	ldr	r3, [sp, #12]
 8008a0a:	4298      	cmp	r0, r3
 8008a0c:	bfb8      	it	lt
 8008a0e:	4618      	movlt	r0, r3
 8008a10:	e7a4      	b.n	800895c <_printf_i+0x168>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4632      	mov	r2, r6
 8008a16:	4649      	mov	r1, r9
 8008a18:	4640      	mov	r0, r8
 8008a1a:	47d0      	blx	sl
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d09b      	beq.n	8008958 <_printf_i+0x164>
 8008a20:	3501      	adds	r5, #1
 8008a22:	68e3      	ldr	r3, [r4, #12]
 8008a24:	9903      	ldr	r1, [sp, #12]
 8008a26:	1a5b      	subs	r3, r3, r1
 8008a28:	42ab      	cmp	r3, r5
 8008a2a:	dcf2      	bgt.n	8008a12 <_printf_i+0x21e>
 8008a2c:	e7eb      	b.n	8008a06 <_printf_i+0x212>
 8008a2e:	2500      	movs	r5, #0
 8008a30:	f104 0619 	add.w	r6, r4, #25
 8008a34:	e7f5      	b.n	8008a22 <_printf_i+0x22e>
 8008a36:	bf00      	nop
 8008a38:	0800d056 	.word	0x0800d056
 8008a3c:	0800d067 	.word	0x0800d067

08008a40 <iprintf>:
 8008a40:	b40f      	push	{r0, r1, r2, r3}
 8008a42:	4b0a      	ldr	r3, [pc, #40]	; (8008a6c <iprintf+0x2c>)
 8008a44:	b513      	push	{r0, r1, r4, lr}
 8008a46:	681c      	ldr	r4, [r3, #0]
 8008a48:	b124      	cbz	r4, 8008a54 <iprintf+0x14>
 8008a4a:	69a3      	ldr	r3, [r4, #24]
 8008a4c:	b913      	cbnz	r3, 8008a54 <iprintf+0x14>
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 fef8 	bl	8009844 <__sinit>
 8008a54:	ab05      	add	r3, sp, #20
 8008a56:	9a04      	ldr	r2, [sp, #16]
 8008a58:	68a1      	ldr	r1, [r4, #8]
 8008a5a:	9301      	str	r3, [sp, #4]
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f001 fc51 	bl	800a304 <_vfiprintf_r>
 8008a62:	b002      	add	sp, #8
 8008a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a68:	b004      	add	sp, #16
 8008a6a:	4770      	bx	lr
 8008a6c:	20000bfc 	.word	0x20000bfc

08008a70 <viprintf>:
 8008a70:	b513      	push	{r0, r1, r4, lr}
 8008a72:	460b      	mov	r3, r1
 8008a74:	4909      	ldr	r1, [pc, #36]	; (8008a9c <viprintf+0x2c>)
 8008a76:	680c      	ldr	r4, [r1, #0]
 8008a78:	4602      	mov	r2, r0
 8008a7a:	b144      	cbz	r4, 8008a8e <viprintf+0x1e>
 8008a7c:	69a1      	ldr	r1, [r4, #24]
 8008a7e:	b931      	cbnz	r1, 8008a8e <viprintf+0x1e>
 8008a80:	e9cd 0300 	strd	r0, r3, [sp]
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 fedd 	bl	8009844 <__sinit>
 8008a8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a8e:	68a1      	ldr	r1, [r4, #8]
 8008a90:	4620      	mov	r0, r4
 8008a92:	b002      	add	sp, #8
 8008a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a98:	f001 bc34 	b.w	800a304 <_vfiprintf_r>
 8008a9c:	20000bfc 	.word	0x20000bfc

08008aa0 <quorem>:
 8008aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	6903      	ldr	r3, [r0, #16]
 8008aa6:	690c      	ldr	r4, [r1, #16]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	4607      	mov	r7, r0
 8008aac:	f2c0 8081 	blt.w	8008bb2 <quorem+0x112>
 8008ab0:	3c01      	subs	r4, #1
 8008ab2:	f101 0814 	add.w	r8, r1, #20
 8008ab6:	f100 0514 	add.w	r5, r0, #20
 8008aba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008abe:	9301      	str	r3, [sp, #4]
 8008ac0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	429a      	cmp	r2, r3
 8008acc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ad0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ad4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ad8:	d331      	bcc.n	8008b3e <quorem+0x9e>
 8008ada:	f04f 0e00 	mov.w	lr, #0
 8008ade:	4640      	mov	r0, r8
 8008ae0:	46ac      	mov	ip, r5
 8008ae2:	46f2      	mov	sl, lr
 8008ae4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ae8:	b293      	uxth	r3, r2
 8008aea:	fb06 e303 	mla	r3, r6, r3, lr
 8008aee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	ebaa 0303 	sub.w	r3, sl, r3
 8008af8:	f8dc a000 	ldr.w	sl, [ip]
 8008afc:	0c12      	lsrs	r2, r2, #16
 8008afe:	fa13 f38a 	uxtah	r3, r3, sl
 8008b02:	fb06 e202 	mla	r2, r6, r2, lr
 8008b06:	9300      	str	r3, [sp, #0]
 8008b08:	9b00      	ldr	r3, [sp, #0]
 8008b0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b0e:	b292      	uxth	r2, r2
 8008b10:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b18:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b1c:	4581      	cmp	r9, r0
 8008b1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b22:	f84c 3b04 	str.w	r3, [ip], #4
 8008b26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b2a:	d2db      	bcs.n	8008ae4 <quorem+0x44>
 8008b2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b30:	b92b      	cbnz	r3, 8008b3e <quorem+0x9e>
 8008b32:	9b01      	ldr	r3, [sp, #4]
 8008b34:	3b04      	subs	r3, #4
 8008b36:	429d      	cmp	r5, r3
 8008b38:	461a      	mov	r2, r3
 8008b3a:	d32e      	bcc.n	8008b9a <quorem+0xfa>
 8008b3c:	613c      	str	r4, [r7, #16]
 8008b3e:	4638      	mov	r0, r7
 8008b40:	f001 f9be 	bl	8009ec0 <__mcmp>
 8008b44:	2800      	cmp	r0, #0
 8008b46:	db24      	blt.n	8008b92 <quorem+0xf2>
 8008b48:	3601      	adds	r6, #1
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f04f 0c00 	mov.w	ip, #0
 8008b50:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b54:	f8d0 e000 	ldr.w	lr, [r0]
 8008b58:	b293      	uxth	r3, r2
 8008b5a:	ebac 0303 	sub.w	r3, ip, r3
 8008b5e:	0c12      	lsrs	r2, r2, #16
 8008b60:	fa13 f38e 	uxtah	r3, r3, lr
 8008b64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008b68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b72:	45c1      	cmp	r9, r8
 8008b74:	f840 3b04 	str.w	r3, [r0], #4
 8008b78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008b7c:	d2e8      	bcs.n	8008b50 <quorem+0xb0>
 8008b7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b86:	b922      	cbnz	r2, 8008b92 <quorem+0xf2>
 8008b88:	3b04      	subs	r3, #4
 8008b8a:	429d      	cmp	r5, r3
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	d30a      	bcc.n	8008ba6 <quorem+0x106>
 8008b90:	613c      	str	r4, [r7, #16]
 8008b92:	4630      	mov	r0, r6
 8008b94:	b003      	add	sp, #12
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	6812      	ldr	r2, [r2, #0]
 8008b9c:	3b04      	subs	r3, #4
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	d1cc      	bne.n	8008b3c <quorem+0x9c>
 8008ba2:	3c01      	subs	r4, #1
 8008ba4:	e7c7      	b.n	8008b36 <quorem+0x96>
 8008ba6:	6812      	ldr	r2, [r2, #0]
 8008ba8:	3b04      	subs	r3, #4
 8008baa:	2a00      	cmp	r2, #0
 8008bac:	d1f0      	bne.n	8008b90 <quorem+0xf0>
 8008bae:	3c01      	subs	r4, #1
 8008bb0:	e7eb      	b.n	8008b8a <quorem+0xea>
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	e7ee      	b.n	8008b94 <quorem+0xf4>
	...

08008bb8 <_dtoa_r>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	ed2d 8b04 	vpush	{d8-d9}
 8008bc0:	ec57 6b10 	vmov	r6, r7, d0
 8008bc4:	b093      	sub	sp, #76	; 0x4c
 8008bc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008bcc:	9106      	str	r1, [sp, #24]
 8008bce:	ee10 aa10 	vmov	sl, s0
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8008bd8:	46bb      	mov	fp, r7
 8008bda:	b975      	cbnz	r5, 8008bfa <_dtoa_r+0x42>
 8008bdc:	2010      	movs	r0, #16
 8008bde:	f000 fed7 	bl	8009990 <malloc>
 8008be2:	4602      	mov	r2, r0
 8008be4:	6260      	str	r0, [r4, #36]	; 0x24
 8008be6:	b920      	cbnz	r0, 8008bf2 <_dtoa_r+0x3a>
 8008be8:	4ba7      	ldr	r3, [pc, #668]	; (8008e88 <_dtoa_r+0x2d0>)
 8008bea:	21ea      	movs	r1, #234	; 0xea
 8008bec:	48a7      	ldr	r0, [pc, #668]	; (8008e8c <_dtoa_r+0x2d4>)
 8008bee:	f001 fddf 	bl	800a7b0 <__assert_func>
 8008bf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008bf6:	6005      	str	r5, [r0, #0]
 8008bf8:	60c5      	str	r5, [r0, #12]
 8008bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bfc:	6819      	ldr	r1, [r3, #0]
 8008bfe:	b151      	cbz	r1, 8008c16 <_dtoa_r+0x5e>
 8008c00:	685a      	ldr	r2, [r3, #4]
 8008c02:	604a      	str	r2, [r1, #4]
 8008c04:	2301      	movs	r3, #1
 8008c06:	4093      	lsls	r3, r2
 8008c08:	608b      	str	r3, [r1, #8]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f000 ff16 	bl	8009a3c <_Bfree>
 8008c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]
 8008c16:	1e3b      	subs	r3, r7, #0
 8008c18:	bfaa      	itet	ge
 8008c1a:	2300      	movge	r3, #0
 8008c1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c20:	f8c8 3000 	strge.w	r3, [r8]
 8008c24:	4b9a      	ldr	r3, [pc, #616]	; (8008e90 <_dtoa_r+0x2d8>)
 8008c26:	bfbc      	itt	lt
 8008c28:	2201      	movlt	r2, #1
 8008c2a:	f8c8 2000 	strlt.w	r2, [r8]
 8008c2e:	ea33 030b 	bics.w	r3, r3, fp
 8008c32:	d11b      	bne.n	8008c6c <_dtoa_r+0xb4>
 8008c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c36:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c40:	4333      	orrs	r3, r6
 8008c42:	f000 8592 	beq.w	800976a <_dtoa_r+0xbb2>
 8008c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c48:	b963      	cbnz	r3, 8008c64 <_dtoa_r+0xac>
 8008c4a:	4b92      	ldr	r3, [pc, #584]	; (8008e94 <_dtoa_r+0x2dc>)
 8008c4c:	e022      	b.n	8008c94 <_dtoa_r+0xdc>
 8008c4e:	4b92      	ldr	r3, [pc, #584]	; (8008e98 <_dtoa_r+0x2e0>)
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	3308      	adds	r3, #8
 8008c54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c56:	6013      	str	r3, [r2, #0]
 8008c58:	9801      	ldr	r0, [sp, #4]
 8008c5a:	b013      	add	sp, #76	; 0x4c
 8008c5c:	ecbd 8b04 	vpop	{d8-d9}
 8008c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c64:	4b8b      	ldr	r3, [pc, #556]	; (8008e94 <_dtoa_r+0x2dc>)
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	3303      	adds	r3, #3
 8008c6a:	e7f3      	b.n	8008c54 <_dtoa_r+0x9c>
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2300      	movs	r3, #0
 8008c70:	4650      	mov	r0, sl
 8008c72:	4659      	mov	r1, fp
 8008c74:	f7f7 ff38 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c78:	ec4b ab19 	vmov	d9, sl, fp
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	b158      	cbz	r0, 8008c98 <_dtoa_r+0xe0>
 8008c80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c82:	2301      	movs	r3, #1
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 856b 	beq.w	8009764 <_dtoa_r+0xbac>
 8008c8e:	4883      	ldr	r0, [pc, #524]	; (8008e9c <_dtoa_r+0x2e4>)
 8008c90:	6018      	str	r0, [r3, #0]
 8008c92:	1e43      	subs	r3, r0, #1
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	e7df      	b.n	8008c58 <_dtoa_r+0xa0>
 8008c98:	ec4b ab10 	vmov	d0, sl, fp
 8008c9c:	aa10      	add	r2, sp, #64	; 0x40
 8008c9e:	a911      	add	r1, sp, #68	; 0x44
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f001 f9b3 	bl	800a00c <__d2b>
 8008ca6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008caa:	ee08 0a10 	vmov	s16, r0
 8008cae:	2d00      	cmp	r5, #0
 8008cb0:	f000 8084 	beq.w	8008dbc <_dtoa_r+0x204>
 8008cb4:	ee19 3a90 	vmov	r3, s19
 8008cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008cc0:	4656      	mov	r6, sl
 8008cc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008cc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008cca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008cce:	4b74      	ldr	r3, [pc, #464]	; (8008ea0 <_dtoa_r+0x2e8>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	4630      	mov	r0, r6
 8008cd4:	4639      	mov	r1, r7
 8008cd6:	f7f7 fae7 	bl	80002a8 <__aeabi_dsub>
 8008cda:	a365      	add	r3, pc, #404	; (adr r3, 8008e70 <_dtoa_r+0x2b8>)
 8008cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce0:	f7f7 fc9a 	bl	8000618 <__aeabi_dmul>
 8008ce4:	a364      	add	r3, pc, #400	; (adr r3, 8008e78 <_dtoa_r+0x2c0>)
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f7f7 fadf 	bl	80002ac <__adddf3>
 8008cee:	4606      	mov	r6, r0
 8008cf0:	4628      	mov	r0, r5
 8008cf2:	460f      	mov	r7, r1
 8008cf4:	f7f7 fc26 	bl	8000544 <__aeabi_i2d>
 8008cf8:	a361      	add	r3, pc, #388	; (adr r3, 8008e80 <_dtoa_r+0x2c8>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	f7f7 fc8b 	bl	8000618 <__aeabi_dmul>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4630      	mov	r0, r6
 8008d08:	4639      	mov	r1, r7
 8008d0a:	f7f7 facf 	bl	80002ac <__adddf3>
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460f      	mov	r7, r1
 8008d12:	f7f7 ff31 	bl	8000b78 <__aeabi_d2iz>
 8008d16:	2200      	movs	r2, #0
 8008d18:	9000      	str	r0, [sp, #0]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	4639      	mov	r1, r7
 8008d20:	f7f7 feec 	bl	8000afc <__aeabi_dcmplt>
 8008d24:	b150      	cbz	r0, 8008d3c <_dtoa_r+0x184>
 8008d26:	9800      	ldr	r0, [sp, #0]
 8008d28:	f7f7 fc0c 	bl	8000544 <__aeabi_i2d>
 8008d2c:	4632      	mov	r2, r6
 8008d2e:	463b      	mov	r3, r7
 8008d30:	f7f7 feda 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d34:	b910      	cbnz	r0, 8008d3c <_dtoa_r+0x184>
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	9b00      	ldr	r3, [sp, #0]
 8008d3e:	2b16      	cmp	r3, #22
 8008d40:	d85a      	bhi.n	8008df8 <_dtoa_r+0x240>
 8008d42:	9a00      	ldr	r2, [sp, #0]
 8008d44:	4b57      	ldr	r3, [pc, #348]	; (8008ea4 <_dtoa_r+0x2ec>)
 8008d46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	ec51 0b19 	vmov	r0, r1, d9
 8008d52:	f7f7 fed3 	bl	8000afc <__aeabi_dcmplt>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d050      	beq.n	8008dfc <_dtoa_r+0x244>
 8008d5a:	9b00      	ldr	r3, [sp, #0]
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	2300      	movs	r3, #0
 8008d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d66:	1b5d      	subs	r5, r3, r5
 8008d68:	1e6b      	subs	r3, r5, #1
 8008d6a:	9305      	str	r3, [sp, #20]
 8008d6c:	bf45      	ittet	mi
 8008d6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d72:	9304      	strmi	r3, [sp, #16]
 8008d74:	2300      	movpl	r3, #0
 8008d76:	2300      	movmi	r3, #0
 8008d78:	bf4c      	ite	mi
 8008d7a:	9305      	strmi	r3, [sp, #20]
 8008d7c:	9304      	strpl	r3, [sp, #16]
 8008d7e:	9b00      	ldr	r3, [sp, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	db3d      	blt.n	8008e00 <_dtoa_r+0x248>
 8008d84:	9b05      	ldr	r3, [sp, #20]
 8008d86:	9a00      	ldr	r2, [sp, #0]
 8008d88:	920a      	str	r2, [sp, #40]	; 0x28
 8008d8a:	4413      	add	r3, r2
 8008d8c:	9305      	str	r3, [sp, #20]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	9307      	str	r3, [sp, #28]
 8008d92:	9b06      	ldr	r3, [sp, #24]
 8008d94:	2b09      	cmp	r3, #9
 8008d96:	f200 8089 	bhi.w	8008eac <_dtoa_r+0x2f4>
 8008d9a:	2b05      	cmp	r3, #5
 8008d9c:	bfc4      	itt	gt
 8008d9e:	3b04      	subgt	r3, #4
 8008da0:	9306      	strgt	r3, [sp, #24]
 8008da2:	9b06      	ldr	r3, [sp, #24]
 8008da4:	f1a3 0302 	sub.w	r3, r3, #2
 8008da8:	bfcc      	ite	gt
 8008daa:	2500      	movgt	r5, #0
 8008dac:	2501      	movle	r5, #1
 8008dae:	2b03      	cmp	r3, #3
 8008db0:	f200 8087 	bhi.w	8008ec2 <_dtoa_r+0x30a>
 8008db4:	e8df f003 	tbb	[pc, r3]
 8008db8:	59383a2d 	.word	0x59383a2d
 8008dbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008dc0:	441d      	add	r5, r3
 8008dc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	bfc1      	itttt	gt
 8008dca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008dce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008dd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8008dd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008dda:	bfda      	itte	le
 8008ddc:	f1c3 0320 	rsble	r3, r3, #32
 8008de0:	fa06 f003 	lslle.w	r0, r6, r3
 8008de4:	4318      	orrgt	r0, r3
 8008de6:	f7f7 fb9d 	bl	8000524 <__aeabi_ui2d>
 8008dea:	2301      	movs	r3, #1
 8008dec:	4606      	mov	r6, r0
 8008dee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008df2:	3d01      	subs	r5, #1
 8008df4:	930e      	str	r3, [sp, #56]	; 0x38
 8008df6:	e76a      	b.n	8008cce <_dtoa_r+0x116>
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e7b2      	b.n	8008d62 <_dtoa_r+0x1aa>
 8008dfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8008dfe:	e7b1      	b.n	8008d64 <_dtoa_r+0x1ac>
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	9a00      	ldr	r2, [sp, #0]
 8008e04:	1a9b      	subs	r3, r3, r2
 8008e06:	9304      	str	r3, [sp, #16]
 8008e08:	4253      	negs	r3, r2
 8008e0a:	9307      	str	r3, [sp, #28]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e10:	e7bf      	b.n	8008d92 <_dtoa_r+0x1da>
 8008e12:	2300      	movs	r3, #0
 8008e14:	9308      	str	r3, [sp, #32]
 8008e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	dc55      	bgt.n	8008ec8 <_dtoa_r+0x310>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e22:	461a      	mov	r2, r3
 8008e24:	9209      	str	r2, [sp, #36]	; 0x24
 8008e26:	e00c      	b.n	8008e42 <_dtoa_r+0x28a>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e7f3      	b.n	8008e14 <_dtoa_r+0x25c>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e30:	9308      	str	r3, [sp, #32]
 8008e32:	9b00      	ldr	r3, [sp, #0]
 8008e34:	4413      	add	r3, r2
 8008e36:	9302      	str	r3, [sp, #8]
 8008e38:	3301      	adds	r3, #1
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	9303      	str	r3, [sp, #12]
 8008e3e:	bfb8      	it	lt
 8008e40:	2301      	movlt	r3, #1
 8008e42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e44:	2200      	movs	r2, #0
 8008e46:	6042      	str	r2, [r0, #4]
 8008e48:	2204      	movs	r2, #4
 8008e4a:	f102 0614 	add.w	r6, r2, #20
 8008e4e:	429e      	cmp	r6, r3
 8008e50:	6841      	ldr	r1, [r0, #4]
 8008e52:	d93d      	bls.n	8008ed0 <_dtoa_r+0x318>
 8008e54:	4620      	mov	r0, r4
 8008e56:	f000 fdb1 	bl	80099bc <_Balloc>
 8008e5a:	9001      	str	r0, [sp, #4]
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d13b      	bne.n	8008ed8 <_dtoa_r+0x320>
 8008e60:	4b11      	ldr	r3, [pc, #68]	; (8008ea8 <_dtoa_r+0x2f0>)
 8008e62:	4602      	mov	r2, r0
 8008e64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008e68:	e6c0      	b.n	8008bec <_dtoa_r+0x34>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e7df      	b.n	8008e2e <_dtoa_r+0x276>
 8008e6e:	bf00      	nop
 8008e70:	636f4361 	.word	0x636f4361
 8008e74:	3fd287a7 	.word	0x3fd287a7
 8008e78:	8b60c8b3 	.word	0x8b60c8b3
 8008e7c:	3fc68a28 	.word	0x3fc68a28
 8008e80:	509f79fb 	.word	0x509f79fb
 8008e84:	3fd34413 	.word	0x3fd34413
 8008e88:	0800d085 	.word	0x0800d085
 8008e8c:	0800d09c 	.word	0x0800d09c
 8008e90:	7ff00000 	.word	0x7ff00000
 8008e94:	0800d081 	.word	0x0800d081
 8008e98:	0800d078 	.word	0x0800d078
 8008e9c:	0800d055 	.word	0x0800d055
 8008ea0:	3ff80000 	.word	0x3ff80000
 8008ea4:	0800d1f0 	.word	0x0800d1f0
 8008ea8:	0800d0f7 	.word	0x0800d0f7
 8008eac:	2501      	movs	r5, #1
 8008eae:	2300      	movs	r3, #0
 8008eb0:	9306      	str	r3, [sp, #24]
 8008eb2:	9508      	str	r5, [sp, #32]
 8008eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008eb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	2312      	movs	r3, #18
 8008ec0:	e7b0      	b.n	8008e24 <_dtoa_r+0x26c>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	9308      	str	r3, [sp, #32]
 8008ec6:	e7f5      	b.n	8008eb4 <_dtoa_r+0x2fc>
 8008ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008ece:	e7b8      	b.n	8008e42 <_dtoa_r+0x28a>
 8008ed0:	3101      	adds	r1, #1
 8008ed2:	6041      	str	r1, [r0, #4]
 8008ed4:	0052      	lsls	r2, r2, #1
 8008ed6:	e7b8      	b.n	8008e4a <_dtoa_r+0x292>
 8008ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eda:	9a01      	ldr	r2, [sp, #4]
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	9b03      	ldr	r3, [sp, #12]
 8008ee0:	2b0e      	cmp	r3, #14
 8008ee2:	f200 809d 	bhi.w	8009020 <_dtoa_r+0x468>
 8008ee6:	2d00      	cmp	r5, #0
 8008ee8:	f000 809a 	beq.w	8009020 <_dtoa_r+0x468>
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dd32      	ble.n	8008f58 <_dtoa_r+0x3a0>
 8008ef2:	4ab7      	ldr	r2, [pc, #732]	; (80091d0 <_dtoa_r+0x618>)
 8008ef4:	f003 030f 	and.w	r3, r3, #15
 8008ef8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008efc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f00:	9b00      	ldr	r3, [sp, #0]
 8008f02:	05d8      	lsls	r0, r3, #23
 8008f04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f08:	d516      	bpl.n	8008f38 <_dtoa_r+0x380>
 8008f0a:	4bb2      	ldr	r3, [pc, #712]	; (80091d4 <_dtoa_r+0x61c>)
 8008f0c:	ec51 0b19 	vmov	r0, r1, d9
 8008f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f14:	f7f7 fcaa 	bl	800086c <__aeabi_ddiv>
 8008f18:	f007 070f 	and.w	r7, r7, #15
 8008f1c:	4682      	mov	sl, r0
 8008f1e:	468b      	mov	fp, r1
 8008f20:	2503      	movs	r5, #3
 8008f22:	4eac      	ldr	r6, [pc, #688]	; (80091d4 <_dtoa_r+0x61c>)
 8008f24:	b957      	cbnz	r7, 8008f3c <_dtoa_r+0x384>
 8008f26:	4642      	mov	r2, r8
 8008f28:	464b      	mov	r3, r9
 8008f2a:	4650      	mov	r0, sl
 8008f2c:	4659      	mov	r1, fp
 8008f2e:	f7f7 fc9d 	bl	800086c <__aeabi_ddiv>
 8008f32:	4682      	mov	sl, r0
 8008f34:	468b      	mov	fp, r1
 8008f36:	e028      	b.n	8008f8a <_dtoa_r+0x3d2>
 8008f38:	2502      	movs	r5, #2
 8008f3a:	e7f2      	b.n	8008f22 <_dtoa_r+0x36a>
 8008f3c:	07f9      	lsls	r1, r7, #31
 8008f3e:	d508      	bpl.n	8008f52 <_dtoa_r+0x39a>
 8008f40:	4640      	mov	r0, r8
 8008f42:	4649      	mov	r1, r9
 8008f44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f48:	f7f7 fb66 	bl	8000618 <__aeabi_dmul>
 8008f4c:	3501      	adds	r5, #1
 8008f4e:	4680      	mov	r8, r0
 8008f50:	4689      	mov	r9, r1
 8008f52:	107f      	asrs	r7, r7, #1
 8008f54:	3608      	adds	r6, #8
 8008f56:	e7e5      	b.n	8008f24 <_dtoa_r+0x36c>
 8008f58:	f000 809b 	beq.w	8009092 <_dtoa_r+0x4da>
 8008f5c:	9b00      	ldr	r3, [sp, #0]
 8008f5e:	4f9d      	ldr	r7, [pc, #628]	; (80091d4 <_dtoa_r+0x61c>)
 8008f60:	425e      	negs	r6, r3
 8008f62:	4b9b      	ldr	r3, [pc, #620]	; (80091d0 <_dtoa_r+0x618>)
 8008f64:	f006 020f 	and.w	r2, r6, #15
 8008f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	ec51 0b19 	vmov	r0, r1, d9
 8008f74:	f7f7 fb50 	bl	8000618 <__aeabi_dmul>
 8008f78:	1136      	asrs	r6, r6, #4
 8008f7a:	4682      	mov	sl, r0
 8008f7c:	468b      	mov	fp, r1
 8008f7e:	2300      	movs	r3, #0
 8008f80:	2502      	movs	r5, #2
 8008f82:	2e00      	cmp	r6, #0
 8008f84:	d17a      	bne.n	800907c <_dtoa_r+0x4c4>
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1d3      	bne.n	8008f32 <_dtoa_r+0x37a>
 8008f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 8082 	beq.w	8009096 <_dtoa_r+0x4de>
 8008f92:	4b91      	ldr	r3, [pc, #580]	; (80091d8 <_dtoa_r+0x620>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	4650      	mov	r0, sl
 8008f98:	4659      	mov	r1, fp
 8008f9a:	f7f7 fdaf 	bl	8000afc <__aeabi_dcmplt>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d079      	beq.n	8009096 <_dtoa_r+0x4de>
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d076      	beq.n	8009096 <_dtoa_r+0x4de>
 8008fa8:	9b02      	ldr	r3, [sp, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	dd36      	ble.n	800901c <_dtoa_r+0x464>
 8008fae:	9b00      	ldr	r3, [sp, #0]
 8008fb0:	4650      	mov	r0, sl
 8008fb2:	4659      	mov	r1, fp
 8008fb4:	1e5f      	subs	r7, r3, #1
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	4b88      	ldr	r3, [pc, #544]	; (80091dc <_dtoa_r+0x624>)
 8008fba:	f7f7 fb2d 	bl	8000618 <__aeabi_dmul>
 8008fbe:	9e02      	ldr	r6, [sp, #8]
 8008fc0:	4682      	mov	sl, r0
 8008fc2:	468b      	mov	fp, r1
 8008fc4:	3501      	adds	r5, #1
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	f7f7 fabc 	bl	8000544 <__aeabi_i2d>
 8008fcc:	4652      	mov	r2, sl
 8008fce:	465b      	mov	r3, fp
 8008fd0:	f7f7 fb22 	bl	8000618 <__aeabi_dmul>
 8008fd4:	4b82      	ldr	r3, [pc, #520]	; (80091e0 <_dtoa_r+0x628>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f7f7 f968 	bl	80002ac <__adddf3>
 8008fdc:	46d0      	mov	r8, sl
 8008fde:	46d9      	mov	r9, fp
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008fe6:	2e00      	cmp	r6, #0
 8008fe8:	d158      	bne.n	800909c <_dtoa_r+0x4e4>
 8008fea:	4b7e      	ldr	r3, [pc, #504]	; (80091e4 <_dtoa_r+0x62c>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	4640      	mov	r0, r8
 8008ff0:	4649      	mov	r1, r9
 8008ff2:	f7f7 f959 	bl	80002a8 <__aeabi_dsub>
 8008ff6:	4652      	mov	r2, sl
 8008ff8:	465b      	mov	r3, fp
 8008ffa:	4680      	mov	r8, r0
 8008ffc:	4689      	mov	r9, r1
 8008ffe:	f7f7 fd9b 	bl	8000b38 <__aeabi_dcmpgt>
 8009002:	2800      	cmp	r0, #0
 8009004:	f040 8295 	bne.w	8009532 <_dtoa_r+0x97a>
 8009008:	4652      	mov	r2, sl
 800900a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800900e:	4640      	mov	r0, r8
 8009010:	4649      	mov	r1, r9
 8009012:	f7f7 fd73 	bl	8000afc <__aeabi_dcmplt>
 8009016:	2800      	cmp	r0, #0
 8009018:	f040 8289 	bne.w	800952e <_dtoa_r+0x976>
 800901c:	ec5b ab19 	vmov	sl, fp, d9
 8009020:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009022:	2b00      	cmp	r3, #0
 8009024:	f2c0 8148 	blt.w	80092b8 <_dtoa_r+0x700>
 8009028:	9a00      	ldr	r2, [sp, #0]
 800902a:	2a0e      	cmp	r2, #14
 800902c:	f300 8144 	bgt.w	80092b8 <_dtoa_r+0x700>
 8009030:	4b67      	ldr	r3, [pc, #412]	; (80091d0 <_dtoa_r+0x618>)
 8009032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009036:	e9d3 8900 	ldrd	r8, r9, [r3]
 800903a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800903c:	2b00      	cmp	r3, #0
 800903e:	f280 80d5 	bge.w	80091ec <_dtoa_r+0x634>
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	2b00      	cmp	r3, #0
 8009046:	f300 80d1 	bgt.w	80091ec <_dtoa_r+0x634>
 800904a:	f040 826f 	bne.w	800952c <_dtoa_r+0x974>
 800904e:	4b65      	ldr	r3, [pc, #404]	; (80091e4 <_dtoa_r+0x62c>)
 8009050:	2200      	movs	r2, #0
 8009052:	4640      	mov	r0, r8
 8009054:	4649      	mov	r1, r9
 8009056:	f7f7 fadf 	bl	8000618 <__aeabi_dmul>
 800905a:	4652      	mov	r2, sl
 800905c:	465b      	mov	r3, fp
 800905e:	f7f7 fd61 	bl	8000b24 <__aeabi_dcmpge>
 8009062:	9e03      	ldr	r6, [sp, #12]
 8009064:	4637      	mov	r7, r6
 8009066:	2800      	cmp	r0, #0
 8009068:	f040 8245 	bne.w	80094f6 <_dtoa_r+0x93e>
 800906c:	9d01      	ldr	r5, [sp, #4]
 800906e:	2331      	movs	r3, #49	; 0x31
 8009070:	f805 3b01 	strb.w	r3, [r5], #1
 8009074:	9b00      	ldr	r3, [sp, #0]
 8009076:	3301      	adds	r3, #1
 8009078:	9300      	str	r3, [sp, #0]
 800907a:	e240      	b.n	80094fe <_dtoa_r+0x946>
 800907c:	07f2      	lsls	r2, r6, #31
 800907e:	d505      	bpl.n	800908c <_dtoa_r+0x4d4>
 8009080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009084:	f7f7 fac8 	bl	8000618 <__aeabi_dmul>
 8009088:	3501      	adds	r5, #1
 800908a:	2301      	movs	r3, #1
 800908c:	1076      	asrs	r6, r6, #1
 800908e:	3708      	adds	r7, #8
 8009090:	e777      	b.n	8008f82 <_dtoa_r+0x3ca>
 8009092:	2502      	movs	r5, #2
 8009094:	e779      	b.n	8008f8a <_dtoa_r+0x3d2>
 8009096:	9f00      	ldr	r7, [sp, #0]
 8009098:	9e03      	ldr	r6, [sp, #12]
 800909a:	e794      	b.n	8008fc6 <_dtoa_r+0x40e>
 800909c:	9901      	ldr	r1, [sp, #4]
 800909e:	4b4c      	ldr	r3, [pc, #304]	; (80091d0 <_dtoa_r+0x618>)
 80090a0:	4431      	add	r1, r6
 80090a2:	910d      	str	r1, [sp, #52]	; 0x34
 80090a4:	9908      	ldr	r1, [sp, #32]
 80090a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090ae:	2900      	cmp	r1, #0
 80090b0:	d043      	beq.n	800913a <_dtoa_r+0x582>
 80090b2:	494d      	ldr	r1, [pc, #308]	; (80091e8 <_dtoa_r+0x630>)
 80090b4:	2000      	movs	r0, #0
 80090b6:	f7f7 fbd9 	bl	800086c <__aeabi_ddiv>
 80090ba:	4652      	mov	r2, sl
 80090bc:	465b      	mov	r3, fp
 80090be:	f7f7 f8f3 	bl	80002a8 <__aeabi_dsub>
 80090c2:	9d01      	ldr	r5, [sp, #4]
 80090c4:	4682      	mov	sl, r0
 80090c6:	468b      	mov	fp, r1
 80090c8:	4649      	mov	r1, r9
 80090ca:	4640      	mov	r0, r8
 80090cc:	f7f7 fd54 	bl	8000b78 <__aeabi_d2iz>
 80090d0:	4606      	mov	r6, r0
 80090d2:	f7f7 fa37 	bl	8000544 <__aeabi_i2d>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4640      	mov	r0, r8
 80090dc:	4649      	mov	r1, r9
 80090de:	f7f7 f8e3 	bl	80002a8 <__aeabi_dsub>
 80090e2:	3630      	adds	r6, #48	; 0x30
 80090e4:	f805 6b01 	strb.w	r6, [r5], #1
 80090e8:	4652      	mov	r2, sl
 80090ea:	465b      	mov	r3, fp
 80090ec:	4680      	mov	r8, r0
 80090ee:	4689      	mov	r9, r1
 80090f0:	f7f7 fd04 	bl	8000afc <__aeabi_dcmplt>
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d163      	bne.n	80091c0 <_dtoa_r+0x608>
 80090f8:	4642      	mov	r2, r8
 80090fa:	464b      	mov	r3, r9
 80090fc:	4936      	ldr	r1, [pc, #216]	; (80091d8 <_dtoa_r+0x620>)
 80090fe:	2000      	movs	r0, #0
 8009100:	f7f7 f8d2 	bl	80002a8 <__aeabi_dsub>
 8009104:	4652      	mov	r2, sl
 8009106:	465b      	mov	r3, fp
 8009108:	f7f7 fcf8 	bl	8000afc <__aeabi_dcmplt>
 800910c:	2800      	cmp	r0, #0
 800910e:	f040 80b5 	bne.w	800927c <_dtoa_r+0x6c4>
 8009112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009114:	429d      	cmp	r5, r3
 8009116:	d081      	beq.n	800901c <_dtoa_r+0x464>
 8009118:	4b30      	ldr	r3, [pc, #192]	; (80091dc <_dtoa_r+0x624>)
 800911a:	2200      	movs	r2, #0
 800911c:	4650      	mov	r0, sl
 800911e:	4659      	mov	r1, fp
 8009120:	f7f7 fa7a 	bl	8000618 <__aeabi_dmul>
 8009124:	4b2d      	ldr	r3, [pc, #180]	; (80091dc <_dtoa_r+0x624>)
 8009126:	4682      	mov	sl, r0
 8009128:	468b      	mov	fp, r1
 800912a:	4640      	mov	r0, r8
 800912c:	4649      	mov	r1, r9
 800912e:	2200      	movs	r2, #0
 8009130:	f7f7 fa72 	bl	8000618 <__aeabi_dmul>
 8009134:	4680      	mov	r8, r0
 8009136:	4689      	mov	r9, r1
 8009138:	e7c6      	b.n	80090c8 <_dtoa_r+0x510>
 800913a:	4650      	mov	r0, sl
 800913c:	4659      	mov	r1, fp
 800913e:	f7f7 fa6b 	bl	8000618 <__aeabi_dmul>
 8009142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009144:	9d01      	ldr	r5, [sp, #4]
 8009146:	930f      	str	r3, [sp, #60]	; 0x3c
 8009148:	4682      	mov	sl, r0
 800914a:	468b      	mov	fp, r1
 800914c:	4649      	mov	r1, r9
 800914e:	4640      	mov	r0, r8
 8009150:	f7f7 fd12 	bl	8000b78 <__aeabi_d2iz>
 8009154:	4606      	mov	r6, r0
 8009156:	f7f7 f9f5 	bl	8000544 <__aeabi_i2d>
 800915a:	3630      	adds	r6, #48	; 0x30
 800915c:	4602      	mov	r2, r0
 800915e:	460b      	mov	r3, r1
 8009160:	4640      	mov	r0, r8
 8009162:	4649      	mov	r1, r9
 8009164:	f7f7 f8a0 	bl	80002a8 <__aeabi_dsub>
 8009168:	f805 6b01 	strb.w	r6, [r5], #1
 800916c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800916e:	429d      	cmp	r5, r3
 8009170:	4680      	mov	r8, r0
 8009172:	4689      	mov	r9, r1
 8009174:	f04f 0200 	mov.w	r2, #0
 8009178:	d124      	bne.n	80091c4 <_dtoa_r+0x60c>
 800917a:	4b1b      	ldr	r3, [pc, #108]	; (80091e8 <_dtoa_r+0x630>)
 800917c:	4650      	mov	r0, sl
 800917e:	4659      	mov	r1, fp
 8009180:	f7f7 f894 	bl	80002ac <__adddf3>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4640      	mov	r0, r8
 800918a:	4649      	mov	r1, r9
 800918c:	f7f7 fcd4 	bl	8000b38 <__aeabi_dcmpgt>
 8009190:	2800      	cmp	r0, #0
 8009192:	d173      	bne.n	800927c <_dtoa_r+0x6c4>
 8009194:	4652      	mov	r2, sl
 8009196:	465b      	mov	r3, fp
 8009198:	4913      	ldr	r1, [pc, #76]	; (80091e8 <_dtoa_r+0x630>)
 800919a:	2000      	movs	r0, #0
 800919c:	f7f7 f884 	bl	80002a8 <__aeabi_dsub>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 fca8 	bl	8000afc <__aeabi_dcmplt>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	f43f af35 	beq.w	800901c <_dtoa_r+0x464>
 80091b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80091b4:	1e6b      	subs	r3, r5, #1
 80091b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091bc:	2b30      	cmp	r3, #48	; 0x30
 80091be:	d0f8      	beq.n	80091b2 <_dtoa_r+0x5fa>
 80091c0:	9700      	str	r7, [sp, #0]
 80091c2:	e049      	b.n	8009258 <_dtoa_r+0x6a0>
 80091c4:	4b05      	ldr	r3, [pc, #20]	; (80091dc <_dtoa_r+0x624>)
 80091c6:	f7f7 fa27 	bl	8000618 <__aeabi_dmul>
 80091ca:	4680      	mov	r8, r0
 80091cc:	4689      	mov	r9, r1
 80091ce:	e7bd      	b.n	800914c <_dtoa_r+0x594>
 80091d0:	0800d1f0 	.word	0x0800d1f0
 80091d4:	0800d1c8 	.word	0x0800d1c8
 80091d8:	3ff00000 	.word	0x3ff00000
 80091dc:	40240000 	.word	0x40240000
 80091e0:	401c0000 	.word	0x401c0000
 80091e4:	40140000 	.word	0x40140000
 80091e8:	3fe00000 	.word	0x3fe00000
 80091ec:	9d01      	ldr	r5, [sp, #4]
 80091ee:	4656      	mov	r6, sl
 80091f0:	465f      	mov	r7, fp
 80091f2:	4642      	mov	r2, r8
 80091f4:	464b      	mov	r3, r9
 80091f6:	4630      	mov	r0, r6
 80091f8:	4639      	mov	r1, r7
 80091fa:	f7f7 fb37 	bl	800086c <__aeabi_ddiv>
 80091fe:	f7f7 fcbb 	bl	8000b78 <__aeabi_d2iz>
 8009202:	4682      	mov	sl, r0
 8009204:	f7f7 f99e 	bl	8000544 <__aeabi_i2d>
 8009208:	4642      	mov	r2, r8
 800920a:	464b      	mov	r3, r9
 800920c:	f7f7 fa04 	bl	8000618 <__aeabi_dmul>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4630      	mov	r0, r6
 8009216:	4639      	mov	r1, r7
 8009218:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800921c:	f7f7 f844 	bl	80002a8 <__aeabi_dsub>
 8009220:	f805 6b01 	strb.w	r6, [r5], #1
 8009224:	9e01      	ldr	r6, [sp, #4]
 8009226:	9f03      	ldr	r7, [sp, #12]
 8009228:	1bae      	subs	r6, r5, r6
 800922a:	42b7      	cmp	r7, r6
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	d135      	bne.n	800929e <_dtoa_r+0x6e6>
 8009232:	f7f7 f83b 	bl	80002ac <__adddf3>
 8009236:	4642      	mov	r2, r8
 8009238:	464b      	mov	r3, r9
 800923a:	4606      	mov	r6, r0
 800923c:	460f      	mov	r7, r1
 800923e:	f7f7 fc7b 	bl	8000b38 <__aeabi_dcmpgt>
 8009242:	b9d0      	cbnz	r0, 800927a <_dtoa_r+0x6c2>
 8009244:	4642      	mov	r2, r8
 8009246:	464b      	mov	r3, r9
 8009248:	4630      	mov	r0, r6
 800924a:	4639      	mov	r1, r7
 800924c:	f7f7 fc4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009250:	b110      	cbz	r0, 8009258 <_dtoa_r+0x6a0>
 8009252:	f01a 0f01 	tst.w	sl, #1
 8009256:	d110      	bne.n	800927a <_dtoa_r+0x6c2>
 8009258:	4620      	mov	r0, r4
 800925a:	ee18 1a10 	vmov	r1, s16
 800925e:	f000 fbed 	bl	8009a3c <_Bfree>
 8009262:	2300      	movs	r3, #0
 8009264:	9800      	ldr	r0, [sp, #0]
 8009266:	702b      	strb	r3, [r5, #0]
 8009268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800926a:	3001      	adds	r0, #1
 800926c:	6018      	str	r0, [r3, #0]
 800926e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009270:	2b00      	cmp	r3, #0
 8009272:	f43f acf1 	beq.w	8008c58 <_dtoa_r+0xa0>
 8009276:	601d      	str	r5, [r3, #0]
 8009278:	e4ee      	b.n	8008c58 <_dtoa_r+0xa0>
 800927a:	9f00      	ldr	r7, [sp, #0]
 800927c:	462b      	mov	r3, r5
 800927e:	461d      	mov	r5, r3
 8009280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009284:	2a39      	cmp	r2, #57	; 0x39
 8009286:	d106      	bne.n	8009296 <_dtoa_r+0x6de>
 8009288:	9a01      	ldr	r2, [sp, #4]
 800928a:	429a      	cmp	r2, r3
 800928c:	d1f7      	bne.n	800927e <_dtoa_r+0x6c6>
 800928e:	9901      	ldr	r1, [sp, #4]
 8009290:	2230      	movs	r2, #48	; 0x30
 8009292:	3701      	adds	r7, #1
 8009294:	700a      	strb	r2, [r1, #0]
 8009296:	781a      	ldrb	r2, [r3, #0]
 8009298:	3201      	adds	r2, #1
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	e790      	b.n	80091c0 <_dtoa_r+0x608>
 800929e:	4ba6      	ldr	r3, [pc, #664]	; (8009538 <_dtoa_r+0x980>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	f7f7 f9b9 	bl	8000618 <__aeabi_dmul>
 80092a6:	2200      	movs	r2, #0
 80092a8:	2300      	movs	r3, #0
 80092aa:	4606      	mov	r6, r0
 80092ac:	460f      	mov	r7, r1
 80092ae:	f7f7 fc1b 	bl	8000ae8 <__aeabi_dcmpeq>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	d09d      	beq.n	80091f2 <_dtoa_r+0x63a>
 80092b6:	e7cf      	b.n	8009258 <_dtoa_r+0x6a0>
 80092b8:	9a08      	ldr	r2, [sp, #32]
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	f000 80d7 	beq.w	800946e <_dtoa_r+0x8b6>
 80092c0:	9a06      	ldr	r2, [sp, #24]
 80092c2:	2a01      	cmp	r2, #1
 80092c4:	f300 80ba 	bgt.w	800943c <_dtoa_r+0x884>
 80092c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092ca:	2a00      	cmp	r2, #0
 80092cc:	f000 80b2 	beq.w	8009434 <_dtoa_r+0x87c>
 80092d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092d4:	9e07      	ldr	r6, [sp, #28]
 80092d6:	9d04      	ldr	r5, [sp, #16]
 80092d8:	9a04      	ldr	r2, [sp, #16]
 80092da:	441a      	add	r2, r3
 80092dc:	9204      	str	r2, [sp, #16]
 80092de:	9a05      	ldr	r2, [sp, #20]
 80092e0:	2101      	movs	r1, #1
 80092e2:	441a      	add	r2, r3
 80092e4:	4620      	mov	r0, r4
 80092e6:	9205      	str	r2, [sp, #20]
 80092e8:	f000 fc60 	bl	8009bac <__i2b>
 80092ec:	4607      	mov	r7, r0
 80092ee:	2d00      	cmp	r5, #0
 80092f0:	dd0c      	ble.n	800930c <_dtoa_r+0x754>
 80092f2:	9b05      	ldr	r3, [sp, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dd09      	ble.n	800930c <_dtoa_r+0x754>
 80092f8:	42ab      	cmp	r3, r5
 80092fa:	9a04      	ldr	r2, [sp, #16]
 80092fc:	bfa8      	it	ge
 80092fe:	462b      	movge	r3, r5
 8009300:	1ad2      	subs	r2, r2, r3
 8009302:	9204      	str	r2, [sp, #16]
 8009304:	9a05      	ldr	r2, [sp, #20]
 8009306:	1aed      	subs	r5, r5, r3
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	9305      	str	r3, [sp, #20]
 800930c:	9b07      	ldr	r3, [sp, #28]
 800930e:	b31b      	cbz	r3, 8009358 <_dtoa_r+0x7a0>
 8009310:	9b08      	ldr	r3, [sp, #32]
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 80af 	beq.w	8009476 <_dtoa_r+0x8be>
 8009318:	2e00      	cmp	r6, #0
 800931a:	dd13      	ble.n	8009344 <_dtoa_r+0x78c>
 800931c:	4639      	mov	r1, r7
 800931e:	4632      	mov	r2, r6
 8009320:	4620      	mov	r0, r4
 8009322:	f000 fd03 	bl	8009d2c <__pow5mult>
 8009326:	ee18 2a10 	vmov	r2, s16
 800932a:	4601      	mov	r1, r0
 800932c:	4607      	mov	r7, r0
 800932e:	4620      	mov	r0, r4
 8009330:	f000 fc52 	bl	8009bd8 <__multiply>
 8009334:	ee18 1a10 	vmov	r1, s16
 8009338:	4680      	mov	r8, r0
 800933a:	4620      	mov	r0, r4
 800933c:	f000 fb7e 	bl	8009a3c <_Bfree>
 8009340:	ee08 8a10 	vmov	s16, r8
 8009344:	9b07      	ldr	r3, [sp, #28]
 8009346:	1b9a      	subs	r2, r3, r6
 8009348:	d006      	beq.n	8009358 <_dtoa_r+0x7a0>
 800934a:	ee18 1a10 	vmov	r1, s16
 800934e:	4620      	mov	r0, r4
 8009350:	f000 fcec 	bl	8009d2c <__pow5mult>
 8009354:	ee08 0a10 	vmov	s16, r0
 8009358:	2101      	movs	r1, #1
 800935a:	4620      	mov	r0, r4
 800935c:	f000 fc26 	bl	8009bac <__i2b>
 8009360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009362:	2b00      	cmp	r3, #0
 8009364:	4606      	mov	r6, r0
 8009366:	f340 8088 	ble.w	800947a <_dtoa_r+0x8c2>
 800936a:	461a      	mov	r2, r3
 800936c:	4601      	mov	r1, r0
 800936e:	4620      	mov	r0, r4
 8009370:	f000 fcdc 	bl	8009d2c <__pow5mult>
 8009374:	9b06      	ldr	r3, [sp, #24]
 8009376:	2b01      	cmp	r3, #1
 8009378:	4606      	mov	r6, r0
 800937a:	f340 8081 	ble.w	8009480 <_dtoa_r+0x8c8>
 800937e:	f04f 0800 	mov.w	r8, #0
 8009382:	6933      	ldr	r3, [r6, #16]
 8009384:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009388:	6918      	ldr	r0, [r3, #16]
 800938a:	f000 fbbf 	bl	8009b0c <__hi0bits>
 800938e:	f1c0 0020 	rsb	r0, r0, #32
 8009392:	9b05      	ldr	r3, [sp, #20]
 8009394:	4418      	add	r0, r3
 8009396:	f010 001f 	ands.w	r0, r0, #31
 800939a:	f000 8092 	beq.w	80094c2 <_dtoa_r+0x90a>
 800939e:	f1c0 0320 	rsb	r3, r0, #32
 80093a2:	2b04      	cmp	r3, #4
 80093a4:	f340 808a 	ble.w	80094bc <_dtoa_r+0x904>
 80093a8:	f1c0 001c 	rsb	r0, r0, #28
 80093ac:	9b04      	ldr	r3, [sp, #16]
 80093ae:	4403      	add	r3, r0
 80093b0:	9304      	str	r3, [sp, #16]
 80093b2:	9b05      	ldr	r3, [sp, #20]
 80093b4:	4403      	add	r3, r0
 80093b6:	4405      	add	r5, r0
 80093b8:	9305      	str	r3, [sp, #20]
 80093ba:	9b04      	ldr	r3, [sp, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dd07      	ble.n	80093d0 <_dtoa_r+0x818>
 80093c0:	ee18 1a10 	vmov	r1, s16
 80093c4:	461a      	mov	r2, r3
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 fd0a 	bl	8009de0 <__lshift>
 80093cc:	ee08 0a10 	vmov	s16, r0
 80093d0:	9b05      	ldr	r3, [sp, #20]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	dd05      	ble.n	80093e2 <_dtoa_r+0x82a>
 80093d6:	4631      	mov	r1, r6
 80093d8:	461a      	mov	r2, r3
 80093da:	4620      	mov	r0, r4
 80093dc:	f000 fd00 	bl	8009de0 <__lshift>
 80093e0:	4606      	mov	r6, r0
 80093e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d06e      	beq.n	80094c6 <_dtoa_r+0x90e>
 80093e8:	ee18 0a10 	vmov	r0, s16
 80093ec:	4631      	mov	r1, r6
 80093ee:	f000 fd67 	bl	8009ec0 <__mcmp>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	da67      	bge.n	80094c6 <_dtoa_r+0x90e>
 80093f6:	9b00      	ldr	r3, [sp, #0]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	ee18 1a10 	vmov	r1, s16
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	220a      	movs	r2, #10
 8009402:	2300      	movs	r3, #0
 8009404:	4620      	mov	r0, r4
 8009406:	f000 fb3b 	bl	8009a80 <__multadd>
 800940a:	9b08      	ldr	r3, [sp, #32]
 800940c:	ee08 0a10 	vmov	s16, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 81b1 	beq.w	8009778 <_dtoa_r+0xbc0>
 8009416:	2300      	movs	r3, #0
 8009418:	4639      	mov	r1, r7
 800941a:	220a      	movs	r2, #10
 800941c:	4620      	mov	r0, r4
 800941e:	f000 fb2f 	bl	8009a80 <__multadd>
 8009422:	9b02      	ldr	r3, [sp, #8]
 8009424:	2b00      	cmp	r3, #0
 8009426:	4607      	mov	r7, r0
 8009428:	f300 808e 	bgt.w	8009548 <_dtoa_r+0x990>
 800942c:	9b06      	ldr	r3, [sp, #24]
 800942e:	2b02      	cmp	r3, #2
 8009430:	dc51      	bgt.n	80094d6 <_dtoa_r+0x91e>
 8009432:	e089      	b.n	8009548 <_dtoa_r+0x990>
 8009434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800943a:	e74b      	b.n	80092d4 <_dtoa_r+0x71c>
 800943c:	9b03      	ldr	r3, [sp, #12]
 800943e:	1e5e      	subs	r6, r3, #1
 8009440:	9b07      	ldr	r3, [sp, #28]
 8009442:	42b3      	cmp	r3, r6
 8009444:	bfbf      	itttt	lt
 8009446:	9b07      	ldrlt	r3, [sp, #28]
 8009448:	9607      	strlt	r6, [sp, #28]
 800944a:	1af2      	sublt	r2, r6, r3
 800944c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800944e:	bfb6      	itet	lt
 8009450:	189b      	addlt	r3, r3, r2
 8009452:	1b9e      	subge	r6, r3, r6
 8009454:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009456:	9b03      	ldr	r3, [sp, #12]
 8009458:	bfb8      	it	lt
 800945a:	2600      	movlt	r6, #0
 800945c:	2b00      	cmp	r3, #0
 800945e:	bfb7      	itett	lt
 8009460:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009464:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009468:	1a9d      	sublt	r5, r3, r2
 800946a:	2300      	movlt	r3, #0
 800946c:	e734      	b.n	80092d8 <_dtoa_r+0x720>
 800946e:	9e07      	ldr	r6, [sp, #28]
 8009470:	9d04      	ldr	r5, [sp, #16]
 8009472:	9f08      	ldr	r7, [sp, #32]
 8009474:	e73b      	b.n	80092ee <_dtoa_r+0x736>
 8009476:	9a07      	ldr	r2, [sp, #28]
 8009478:	e767      	b.n	800934a <_dtoa_r+0x792>
 800947a:	9b06      	ldr	r3, [sp, #24]
 800947c:	2b01      	cmp	r3, #1
 800947e:	dc18      	bgt.n	80094b2 <_dtoa_r+0x8fa>
 8009480:	f1ba 0f00 	cmp.w	sl, #0
 8009484:	d115      	bne.n	80094b2 <_dtoa_r+0x8fa>
 8009486:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800948a:	b993      	cbnz	r3, 80094b2 <_dtoa_r+0x8fa>
 800948c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009490:	0d1b      	lsrs	r3, r3, #20
 8009492:	051b      	lsls	r3, r3, #20
 8009494:	b183      	cbz	r3, 80094b8 <_dtoa_r+0x900>
 8009496:	9b04      	ldr	r3, [sp, #16]
 8009498:	3301      	adds	r3, #1
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	9b05      	ldr	r3, [sp, #20]
 800949e:	3301      	adds	r3, #1
 80094a0:	9305      	str	r3, [sp, #20]
 80094a2:	f04f 0801 	mov.w	r8, #1
 80094a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f47f af6a 	bne.w	8009382 <_dtoa_r+0x7ca>
 80094ae:	2001      	movs	r0, #1
 80094b0:	e76f      	b.n	8009392 <_dtoa_r+0x7da>
 80094b2:	f04f 0800 	mov.w	r8, #0
 80094b6:	e7f6      	b.n	80094a6 <_dtoa_r+0x8ee>
 80094b8:	4698      	mov	r8, r3
 80094ba:	e7f4      	b.n	80094a6 <_dtoa_r+0x8ee>
 80094bc:	f43f af7d 	beq.w	80093ba <_dtoa_r+0x802>
 80094c0:	4618      	mov	r0, r3
 80094c2:	301c      	adds	r0, #28
 80094c4:	e772      	b.n	80093ac <_dtoa_r+0x7f4>
 80094c6:	9b03      	ldr	r3, [sp, #12]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	dc37      	bgt.n	800953c <_dtoa_r+0x984>
 80094cc:	9b06      	ldr	r3, [sp, #24]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	dd34      	ble.n	800953c <_dtoa_r+0x984>
 80094d2:	9b03      	ldr	r3, [sp, #12]
 80094d4:	9302      	str	r3, [sp, #8]
 80094d6:	9b02      	ldr	r3, [sp, #8]
 80094d8:	b96b      	cbnz	r3, 80094f6 <_dtoa_r+0x93e>
 80094da:	4631      	mov	r1, r6
 80094dc:	2205      	movs	r2, #5
 80094de:	4620      	mov	r0, r4
 80094e0:	f000 face 	bl	8009a80 <__multadd>
 80094e4:	4601      	mov	r1, r0
 80094e6:	4606      	mov	r6, r0
 80094e8:	ee18 0a10 	vmov	r0, s16
 80094ec:	f000 fce8 	bl	8009ec0 <__mcmp>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	f73f adbb 	bgt.w	800906c <_dtoa_r+0x4b4>
 80094f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f8:	9d01      	ldr	r5, [sp, #4]
 80094fa:	43db      	mvns	r3, r3
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	f04f 0800 	mov.w	r8, #0
 8009502:	4631      	mov	r1, r6
 8009504:	4620      	mov	r0, r4
 8009506:	f000 fa99 	bl	8009a3c <_Bfree>
 800950a:	2f00      	cmp	r7, #0
 800950c:	f43f aea4 	beq.w	8009258 <_dtoa_r+0x6a0>
 8009510:	f1b8 0f00 	cmp.w	r8, #0
 8009514:	d005      	beq.n	8009522 <_dtoa_r+0x96a>
 8009516:	45b8      	cmp	r8, r7
 8009518:	d003      	beq.n	8009522 <_dtoa_r+0x96a>
 800951a:	4641      	mov	r1, r8
 800951c:	4620      	mov	r0, r4
 800951e:	f000 fa8d 	bl	8009a3c <_Bfree>
 8009522:	4639      	mov	r1, r7
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fa89 	bl	8009a3c <_Bfree>
 800952a:	e695      	b.n	8009258 <_dtoa_r+0x6a0>
 800952c:	2600      	movs	r6, #0
 800952e:	4637      	mov	r7, r6
 8009530:	e7e1      	b.n	80094f6 <_dtoa_r+0x93e>
 8009532:	9700      	str	r7, [sp, #0]
 8009534:	4637      	mov	r7, r6
 8009536:	e599      	b.n	800906c <_dtoa_r+0x4b4>
 8009538:	40240000 	.word	0x40240000
 800953c:	9b08      	ldr	r3, [sp, #32]
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 80ca 	beq.w	80096d8 <_dtoa_r+0xb20>
 8009544:	9b03      	ldr	r3, [sp, #12]
 8009546:	9302      	str	r3, [sp, #8]
 8009548:	2d00      	cmp	r5, #0
 800954a:	dd05      	ble.n	8009558 <_dtoa_r+0x9a0>
 800954c:	4639      	mov	r1, r7
 800954e:	462a      	mov	r2, r5
 8009550:	4620      	mov	r0, r4
 8009552:	f000 fc45 	bl	8009de0 <__lshift>
 8009556:	4607      	mov	r7, r0
 8009558:	f1b8 0f00 	cmp.w	r8, #0
 800955c:	d05b      	beq.n	8009616 <_dtoa_r+0xa5e>
 800955e:	6879      	ldr	r1, [r7, #4]
 8009560:	4620      	mov	r0, r4
 8009562:	f000 fa2b 	bl	80099bc <_Balloc>
 8009566:	4605      	mov	r5, r0
 8009568:	b928      	cbnz	r0, 8009576 <_dtoa_r+0x9be>
 800956a:	4b87      	ldr	r3, [pc, #540]	; (8009788 <_dtoa_r+0xbd0>)
 800956c:	4602      	mov	r2, r0
 800956e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009572:	f7ff bb3b 	b.w	8008bec <_dtoa_r+0x34>
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	3202      	adds	r2, #2
 800957a:	0092      	lsls	r2, r2, #2
 800957c:	f107 010c 	add.w	r1, r7, #12
 8009580:	300c      	adds	r0, #12
 8009582:	f000 fa0d 	bl	80099a0 <memcpy>
 8009586:	2201      	movs	r2, #1
 8009588:	4629      	mov	r1, r5
 800958a:	4620      	mov	r0, r4
 800958c:	f000 fc28 	bl	8009de0 <__lshift>
 8009590:	9b01      	ldr	r3, [sp, #4]
 8009592:	f103 0901 	add.w	r9, r3, #1
 8009596:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800959a:	4413      	add	r3, r2
 800959c:	9305      	str	r3, [sp, #20]
 800959e:	f00a 0301 	and.w	r3, sl, #1
 80095a2:	46b8      	mov	r8, r7
 80095a4:	9304      	str	r3, [sp, #16]
 80095a6:	4607      	mov	r7, r0
 80095a8:	4631      	mov	r1, r6
 80095aa:	ee18 0a10 	vmov	r0, s16
 80095ae:	f7ff fa77 	bl	8008aa0 <quorem>
 80095b2:	4641      	mov	r1, r8
 80095b4:	9002      	str	r0, [sp, #8]
 80095b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80095ba:	ee18 0a10 	vmov	r0, s16
 80095be:	f000 fc7f 	bl	8009ec0 <__mcmp>
 80095c2:	463a      	mov	r2, r7
 80095c4:	9003      	str	r0, [sp, #12]
 80095c6:	4631      	mov	r1, r6
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 fc95 	bl	8009ef8 <__mdiff>
 80095ce:	68c2      	ldr	r2, [r0, #12]
 80095d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80095d4:	4605      	mov	r5, r0
 80095d6:	bb02      	cbnz	r2, 800961a <_dtoa_r+0xa62>
 80095d8:	4601      	mov	r1, r0
 80095da:	ee18 0a10 	vmov	r0, s16
 80095de:	f000 fc6f 	bl	8009ec0 <__mcmp>
 80095e2:	4602      	mov	r2, r0
 80095e4:	4629      	mov	r1, r5
 80095e6:	4620      	mov	r0, r4
 80095e8:	9207      	str	r2, [sp, #28]
 80095ea:	f000 fa27 	bl	8009a3c <_Bfree>
 80095ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80095f2:	ea43 0102 	orr.w	r1, r3, r2
 80095f6:	9b04      	ldr	r3, [sp, #16]
 80095f8:	430b      	orrs	r3, r1
 80095fa:	464d      	mov	r5, r9
 80095fc:	d10f      	bne.n	800961e <_dtoa_r+0xa66>
 80095fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009602:	d02a      	beq.n	800965a <_dtoa_r+0xaa2>
 8009604:	9b03      	ldr	r3, [sp, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	dd02      	ble.n	8009610 <_dtoa_r+0xa58>
 800960a:	9b02      	ldr	r3, [sp, #8]
 800960c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009610:	f88b a000 	strb.w	sl, [fp]
 8009614:	e775      	b.n	8009502 <_dtoa_r+0x94a>
 8009616:	4638      	mov	r0, r7
 8009618:	e7ba      	b.n	8009590 <_dtoa_r+0x9d8>
 800961a:	2201      	movs	r2, #1
 800961c:	e7e2      	b.n	80095e4 <_dtoa_r+0xa2c>
 800961e:	9b03      	ldr	r3, [sp, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	db04      	blt.n	800962e <_dtoa_r+0xa76>
 8009624:	9906      	ldr	r1, [sp, #24]
 8009626:	430b      	orrs	r3, r1
 8009628:	9904      	ldr	r1, [sp, #16]
 800962a:	430b      	orrs	r3, r1
 800962c:	d122      	bne.n	8009674 <_dtoa_r+0xabc>
 800962e:	2a00      	cmp	r2, #0
 8009630:	ddee      	ble.n	8009610 <_dtoa_r+0xa58>
 8009632:	ee18 1a10 	vmov	r1, s16
 8009636:	2201      	movs	r2, #1
 8009638:	4620      	mov	r0, r4
 800963a:	f000 fbd1 	bl	8009de0 <__lshift>
 800963e:	4631      	mov	r1, r6
 8009640:	ee08 0a10 	vmov	s16, r0
 8009644:	f000 fc3c 	bl	8009ec0 <__mcmp>
 8009648:	2800      	cmp	r0, #0
 800964a:	dc03      	bgt.n	8009654 <_dtoa_r+0xa9c>
 800964c:	d1e0      	bne.n	8009610 <_dtoa_r+0xa58>
 800964e:	f01a 0f01 	tst.w	sl, #1
 8009652:	d0dd      	beq.n	8009610 <_dtoa_r+0xa58>
 8009654:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009658:	d1d7      	bne.n	800960a <_dtoa_r+0xa52>
 800965a:	2339      	movs	r3, #57	; 0x39
 800965c:	f88b 3000 	strb.w	r3, [fp]
 8009660:	462b      	mov	r3, r5
 8009662:	461d      	mov	r5, r3
 8009664:	3b01      	subs	r3, #1
 8009666:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800966a:	2a39      	cmp	r2, #57	; 0x39
 800966c:	d071      	beq.n	8009752 <_dtoa_r+0xb9a>
 800966e:	3201      	adds	r2, #1
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	e746      	b.n	8009502 <_dtoa_r+0x94a>
 8009674:	2a00      	cmp	r2, #0
 8009676:	dd07      	ble.n	8009688 <_dtoa_r+0xad0>
 8009678:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800967c:	d0ed      	beq.n	800965a <_dtoa_r+0xaa2>
 800967e:	f10a 0301 	add.w	r3, sl, #1
 8009682:	f88b 3000 	strb.w	r3, [fp]
 8009686:	e73c      	b.n	8009502 <_dtoa_r+0x94a>
 8009688:	9b05      	ldr	r3, [sp, #20]
 800968a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800968e:	4599      	cmp	r9, r3
 8009690:	d047      	beq.n	8009722 <_dtoa_r+0xb6a>
 8009692:	ee18 1a10 	vmov	r1, s16
 8009696:	2300      	movs	r3, #0
 8009698:	220a      	movs	r2, #10
 800969a:	4620      	mov	r0, r4
 800969c:	f000 f9f0 	bl	8009a80 <__multadd>
 80096a0:	45b8      	cmp	r8, r7
 80096a2:	ee08 0a10 	vmov	s16, r0
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	f04f 020a 	mov.w	r2, #10
 80096ae:	4641      	mov	r1, r8
 80096b0:	4620      	mov	r0, r4
 80096b2:	d106      	bne.n	80096c2 <_dtoa_r+0xb0a>
 80096b4:	f000 f9e4 	bl	8009a80 <__multadd>
 80096b8:	4680      	mov	r8, r0
 80096ba:	4607      	mov	r7, r0
 80096bc:	f109 0901 	add.w	r9, r9, #1
 80096c0:	e772      	b.n	80095a8 <_dtoa_r+0x9f0>
 80096c2:	f000 f9dd 	bl	8009a80 <__multadd>
 80096c6:	4639      	mov	r1, r7
 80096c8:	4680      	mov	r8, r0
 80096ca:	2300      	movs	r3, #0
 80096cc:	220a      	movs	r2, #10
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 f9d6 	bl	8009a80 <__multadd>
 80096d4:	4607      	mov	r7, r0
 80096d6:	e7f1      	b.n	80096bc <_dtoa_r+0xb04>
 80096d8:	9b03      	ldr	r3, [sp, #12]
 80096da:	9302      	str	r3, [sp, #8]
 80096dc:	9d01      	ldr	r5, [sp, #4]
 80096de:	ee18 0a10 	vmov	r0, s16
 80096e2:	4631      	mov	r1, r6
 80096e4:	f7ff f9dc 	bl	8008aa0 <quorem>
 80096e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80096ec:	9b01      	ldr	r3, [sp, #4]
 80096ee:	f805 ab01 	strb.w	sl, [r5], #1
 80096f2:	1aea      	subs	r2, r5, r3
 80096f4:	9b02      	ldr	r3, [sp, #8]
 80096f6:	4293      	cmp	r3, r2
 80096f8:	dd09      	ble.n	800970e <_dtoa_r+0xb56>
 80096fa:	ee18 1a10 	vmov	r1, s16
 80096fe:	2300      	movs	r3, #0
 8009700:	220a      	movs	r2, #10
 8009702:	4620      	mov	r0, r4
 8009704:	f000 f9bc 	bl	8009a80 <__multadd>
 8009708:	ee08 0a10 	vmov	s16, r0
 800970c:	e7e7      	b.n	80096de <_dtoa_r+0xb26>
 800970e:	9b02      	ldr	r3, [sp, #8]
 8009710:	2b00      	cmp	r3, #0
 8009712:	bfc8      	it	gt
 8009714:	461d      	movgt	r5, r3
 8009716:	9b01      	ldr	r3, [sp, #4]
 8009718:	bfd8      	it	le
 800971a:	2501      	movle	r5, #1
 800971c:	441d      	add	r5, r3
 800971e:	f04f 0800 	mov.w	r8, #0
 8009722:	ee18 1a10 	vmov	r1, s16
 8009726:	2201      	movs	r2, #1
 8009728:	4620      	mov	r0, r4
 800972a:	f000 fb59 	bl	8009de0 <__lshift>
 800972e:	4631      	mov	r1, r6
 8009730:	ee08 0a10 	vmov	s16, r0
 8009734:	f000 fbc4 	bl	8009ec0 <__mcmp>
 8009738:	2800      	cmp	r0, #0
 800973a:	dc91      	bgt.n	8009660 <_dtoa_r+0xaa8>
 800973c:	d102      	bne.n	8009744 <_dtoa_r+0xb8c>
 800973e:	f01a 0f01 	tst.w	sl, #1
 8009742:	d18d      	bne.n	8009660 <_dtoa_r+0xaa8>
 8009744:	462b      	mov	r3, r5
 8009746:	461d      	mov	r5, r3
 8009748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800974c:	2a30      	cmp	r2, #48	; 0x30
 800974e:	d0fa      	beq.n	8009746 <_dtoa_r+0xb8e>
 8009750:	e6d7      	b.n	8009502 <_dtoa_r+0x94a>
 8009752:	9a01      	ldr	r2, [sp, #4]
 8009754:	429a      	cmp	r2, r3
 8009756:	d184      	bne.n	8009662 <_dtoa_r+0xaaa>
 8009758:	9b00      	ldr	r3, [sp, #0]
 800975a:	3301      	adds	r3, #1
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	2331      	movs	r3, #49	; 0x31
 8009760:	7013      	strb	r3, [r2, #0]
 8009762:	e6ce      	b.n	8009502 <_dtoa_r+0x94a>
 8009764:	4b09      	ldr	r3, [pc, #36]	; (800978c <_dtoa_r+0xbd4>)
 8009766:	f7ff ba95 	b.w	8008c94 <_dtoa_r+0xdc>
 800976a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800976c:	2b00      	cmp	r3, #0
 800976e:	f47f aa6e 	bne.w	8008c4e <_dtoa_r+0x96>
 8009772:	4b07      	ldr	r3, [pc, #28]	; (8009790 <_dtoa_r+0xbd8>)
 8009774:	f7ff ba8e 	b.w	8008c94 <_dtoa_r+0xdc>
 8009778:	9b02      	ldr	r3, [sp, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	dcae      	bgt.n	80096dc <_dtoa_r+0xb24>
 800977e:	9b06      	ldr	r3, [sp, #24]
 8009780:	2b02      	cmp	r3, #2
 8009782:	f73f aea8 	bgt.w	80094d6 <_dtoa_r+0x91e>
 8009786:	e7a9      	b.n	80096dc <_dtoa_r+0xb24>
 8009788:	0800d0f7 	.word	0x0800d0f7
 800978c:	0800d054 	.word	0x0800d054
 8009790:	0800d078 	.word	0x0800d078

08009794 <std>:
 8009794:	2300      	movs	r3, #0
 8009796:	b510      	push	{r4, lr}
 8009798:	4604      	mov	r4, r0
 800979a:	e9c0 3300 	strd	r3, r3, [r0]
 800979e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097a2:	6083      	str	r3, [r0, #8]
 80097a4:	8181      	strh	r1, [r0, #12]
 80097a6:	6643      	str	r3, [r0, #100]	; 0x64
 80097a8:	81c2      	strh	r2, [r0, #14]
 80097aa:	6183      	str	r3, [r0, #24]
 80097ac:	4619      	mov	r1, r3
 80097ae:	2208      	movs	r2, #8
 80097b0:	305c      	adds	r0, #92	; 0x5c
 80097b2:	f7fe fcd3 	bl	800815c <memset>
 80097b6:	4b05      	ldr	r3, [pc, #20]	; (80097cc <std+0x38>)
 80097b8:	6263      	str	r3, [r4, #36]	; 0x24
 80097ba:	4b05      	ldr	r3, [pc, #20]	; (80097d0 <std+0x3c>)
 80097bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80097be:	4b05      	ldr	r3, [pc, #20]	; (80097d4 <std+0x40>)
 80097c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097c2:	4b05      	ldr	r3, [pc, #20]	; (80097d8 <std+0x44>)
 80097c4:	6224      	str	r4, [r4, #32]
 80097c6:	6323      	str	r3, [r4, #48]	; 0x30
 80097c8:	bd10      	pop	{r4, pc}
 80097ca:	bf00      	nop
 80097cc:	0800a585 	.word	0x0800a585
 80097d0:	0800a5a7 	.word	0x0800a5a7
 80097d4:	0800a5df 	.word	0x0800a5df
 80097d8:	0800a603 	.word	0x0800a603

080097dc <_cleanup_r>:
 80097dc:	4901      	ldr	r1, [pc, #4]	; (80097e4 <_cleanup_r+0x8>)
 80097de:	f000 b8af 	b.w	8009940 <_fwalk_reent>
 80097e2:	bf00      	nop
 80097e4:	0800a919 	.word	0x0800a919

080097e8 <__sfmoreglue>:
 80097e8:	b570      	push	{r4, r5, r6, lr}
 80097ea:	2268      	movs	r2, #104	; 0x68
 80097ec:	1e4d      	subs	r5, r1, #1
 80097ee:	4355      	muls	r5, r2
 80097f0:	460e      	mov	r6, r1
 80097f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097f6:	f000 fce7 	bl	800a1c8 <_malloc_r>
 80097fa:	4604      	mov	r4, r0
 80097fc:	b140      	cbz	r0, 8009810 <__sfmoreglue+0x28>
 80097fe:	2100      	movs	r1, #0
 8009800:	e9c0 1600 	strd	r1, r6, [r0]
 8009804:	300c      	adds	r0, #12
 8009806:	60a0      	str	r0, [r4, #8]
 8009808:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800980c:	f7fe fca6 	bl	800815c <memset>
 8009810:	4620      	mov	r0, r4
 8009812:	bd70      	pop	{r4, r5, r6, pc}

08009814 <__sfp_lock_acquire>:
 8009814:	4801      	ldr	r0, [pc, #4]	; (800981c <__sfp_lock_acquire+0x8>)
 8009816:	f000 b8b8 	b.w	800998a <__retarget_lock_acquire_recursive>
 800981a:	bf00      	nop
 800981c:	20001225 	.word	0x20001225

08009820 <__sfp_lock_release>:
 8009820:	4801      	ldr	r0, [pc, #4]	; (8009828 <__sfp_lock_release+0x8>)
 8009822:	f000 b8b3 	b.w	800998c <__retarget_lock_release_recursive>
 8009826:	bf00      	nop
 8009828:	20001225 	.word	0x20001225

0800982c <__sinit_lock_acquire>:
 800982c:	4801      	ldr	r0, [pc, #4]	; (8009834 <__sinit_lock_acquire+0x8>)
 800982e:	f000 b8ac 	b.w	800998a <__retarget_lock_acquire_recursive>
 8009832:	bf00      	nop
 8009834:	20001226 	.word	0x20001226

08009838 <__sinit_lock_release>:
 8009838:	4801      	ldr	r0, [pc, #4]	; (8009840 <__sinit_lock_release+0x8>)
 800983a:	f000 b8a7 	b.w	800998c <__retarget_lock_release_recursive>
 800983e:	bf00      	nop
 8009840:	20001226 	.word	0x20001226

08009844 <__sinit>:
 8009844:	b510      	push	{r4, lr}
 8009846:	4604      	mov	r4, r0
 8009848:	f7ff fff0 	bl	800982c <__sinit_lock_acquire>
 800984c:	69a3      	ldr	r3, [r4, #24]
 800984e:	b11b      	cbz	r3, 8009858 <__sinit+0x14>
 8009850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009854:	f7ff bff0 	b.w	8009838 <__sinit_lock_release>
 8009858:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800985c:	6523      	str	r3, [r4, #80]	; 0x50
 800985e:	4b13      	ldr	r3, [pc, #76]	; (80098ac <__sinit+0x68>)
 8009860:	4a13      	ldr	r2, [pc, #76]	; (80098b0 <__sinit+0x6c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	62a2      	str	r2, [r4, #40]	; 0x28
 8009866:	42a3      	cmp	r3, r4
 8009868:	bf04      	itt	eq
 800986a:	2301      	moveq	r3, #1
 800986c:	61a3      	streq	r3, [r4, #24]
 800986e:	4620      	mov	r0, r4
 8009870:	f000 f820 	bl	80098b4 <__sfp>
 8009874:	6060      	str	r0, [r4, #4]
 8009876:	4620      	mov	r0, r4
 8009878:	f000 f81c 	bl	80098b4 <__sfp>
 800987c:	60a0      	str	r0, [r4, #8]
 800987e:	4620      	mov	r0, r4
 8009880:	f000 f818 	bl	80098b4 <__sfp>
 8009884:	2200      	movs	r2, #0
 8009886:	60e0      	str	r0, [r4, #12]
 8009888:	2104      	movs	r1, #4
 800988a:	6860      	ldr	r0, [r4, #4]
 800988c:	f7ff ff82 	bl	8009794 <std>
 8009890:	68a0      	ldr	r0, [r4, #8]
 8009892:	2201      	movs	r2, #1
 8009894:	2109      	movs	r1, #9
 8009896:	f7ff ff7d 	bl	8009794 <std>
 800989a:	68e0      	ldr	r0, [r4, #12]
 800989c:	2202      	movs	r2, #2
 800989e:	2112      	movs	r1, #18
 80098a0:	f7ff ff78 	bl	8009794 <std>
 80098a4:	2301      	movs	r3, #1
 80098a6:	61a3      	str	r3, [r4, #24]
 80098a8:	e7d2      	b.n	8009850 <__sinit+0xc>
 80098aa:	bf00      	nop
 80098ac:	0800d040 	.word	0x0800d040
 80098b0:	080097dd 	.word	0x080097dd

080098b4 <__sfp>:
 80098b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b6:	4607      	mov	r7, r0
 80098b8:	f7ff ffac 	bl	8009814 <__sfp_lock_acquire>
 80098bc:	4b1e      	ldr	r3, [pc, #120]	; (8009938 <__sfp+0x84>)
 80098be:	681e      	ldr	r6, [r3, #0]
 80098c0:	69b3      	ldr	r3, [r6, #24]
 80098c2:	b913      	cbnz	r3, 80098ca <__sfp+0x16>
 80098c4:	4630      	mov	r0, r6
 80098c6:	f7ff ffbd 	bl	8009844 <__sinit>
 80098ca:	3648      	adds	r6, #72	; 0x48
 80098cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098d0:	3b01      	subs	r3, #1
 80098d2:	d503      	bpl.n	80098dc <__sfp+0x28>
 80098d4:	6833      	ldr	r3, [r6, #0]
 80098d6:	b30b      	cbz	r3, 800991c <__sfp+0x68>
 80098d8:	6836      	ldr	r6, [r6, #0]
 80098da:	e7f7      	b.n	80098cc <__sfp+0x18>
 80098dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098e0:	b9d5      	cbnz	r5, 8009918 <__sfp+0x64>
 80098e2:	4b16      	ldr	r3, [pc, #88]	; (800993c <__sfp+0x88>)
 80098e4:	60e3      	str	r3, [r4, #12]
 80098e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098ea:	6665      	str	r5, [r4, #100]	; 0x64
 80098ec:	f000 f84c 	bl	8009988 <__retarget_lock_init_recursive>
 80098f0:	f7ff ff96 	bl	8009820 <__sfp_lock_release>
 80098f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098fc:	6025      	str	r5, [r4, #0]
 80098fe:	61a5      	str	r5, [r4, #24]
 8009900:	2208      	movs	r2, #8
 8009902:	4629      	mov	r1, r5
 8009904:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009908:	f7fe fc28 	bl	800815c <memset>
 800990c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009910:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009914:	4620      	mov	r0, r4
 8009916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009918:	3468      	adds	r4, #104	; 0x68
 800991a:	e7d9      	b.n	80098d0 <__sfp+0x1c>
 800991c:	2104      	movs	r1, #4
 800991e:	4638      	mov	r0, r7
 8009920:	f7ff ff62 	bl	80097e8 <__sfmoreglue>
 8009924:	4604      	mov	r4, r0
 8009926:	6030      	str	r0, [r6, #0]
 8009928:	2800      	cmp	r0, #0
 800992a:	d1d5      	bne.n	80098d8 <__sfp+0x24>
 800992c:	f7ff ff78 	bl	8009820 <__sfp_lock_release>
 8009930:	230c      	movs	r3, #12
 8009932:	603b      	str	r3, [r7, #0]
 8009934:	e7ee      	b.n	8009914 <__sfp+0x60>
 8009936:	bf00      	nop
 8009938:	0800d040 	.word	0x0800d040
 800993c:	ffff0001 	.word	0xffff0001

08009940 <_fwalk_reent>:
 8009940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009944:	4606      	mov	r6, r0
 8009946:	4688      	mov	r8, r1
 8009948:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800994c:	2700      	movs	r7, #0
 800994e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009952:	f1b9 0901 	subs.w	r9, r9, #1
 8009956:	d505      	bpl.n	8009964 <_fwalk_reent+0x24>
 8009958:	6824      	ldr	r4, [r4, #0]
 800995a:	2c00      	cmp	r4, #0
 800995c:	d1f7      	bne.n	800994e <_fwalk_reent+0xe>
 800995e:	4638      	mov	r0, r7
 8009960:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009964:	89ab      	ldrh	r3, [r5, #12]
 8009966:	2b01      	cmp	r3, #1
 8009968:	d907      	bls.n	800997a <_fwalk_reent+0x3a>
 800996a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800996e:	3301      	adds	r3, #1
 8009970:	d003      	beq.n	800997a <_fwalk_reent+0x3a>
 8009972:	4629      	mov	r1, r5
 8009974:	4630      	mov	r0, r6
 8009976:	47c0      	blx	r8
 8009978:	4307      	orrs	r7, r0
 800997a:	3568      	adds	r5, #104	; 0x68
 800997c:	e7e9      	b.n	8009952 <_fwalk_reent+0x12>
	...

08009980 <_localeconv_r>:
 8009980:	4800      	ldr	r0, [pc, #0]	; (8009984 <_localeconv_r+0x4>)
 8009982:	4770      	bx	lr
 8009984:	20000d50 	.word	0x20000d50

08009988 <__retarget_lock_init_recursive>:
 8009988:	4770      	bx	lr

0800998a <__retarget_lock_acquire_recursive>:
 800998a:	4770      	bx	lr

0800998c <__retarget_lock_release_recursive>:
 800998c:	4770      	bx	lr
	...

08009990 <malloc>:
 8009990:	4b02      	ldr	r3, [pc, #8]	; (800999c <malloc+0xc>)
 8009992:	4601      	mov	r1, r0
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	f000 bc17 	b.w	800a1c8 <_malloc_r>
 800999a:	bf00      	nop
 800999c:	20000bfc 	.word	0x20000bfc

080099a0 <memcpy>:
 80099a0:	440a      	add	r2, r1
 80099a2:	4291      	cmp	r1, r2
 80099a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80099a8:	d100      	bne.n	80099ac <memcpy+0xc>
 80099aa:	4770      	bx	lr
 80099ac:	b510      	push	{r4, lr}
 80099ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099b6:	4291      	cmp	r1, r2
 80099b8:	d1f9      	bne.n	80099ae <memcpy+0xe>
 80099ba:	bd10      	pop	{r4, pc}

080099bc <_Balloc>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80099c0:	4604      	mov	r4, r0
 80099c2:	460d      	mov	r5, r1
 80099c4:	b976      	cbnz	r6, 80099e4 <_Balloc+0x28>
 80099c6:	2010      	movs	r0, #16
 80099c8:	f7ff ffe2 	bl	8009990 <malloc>
 80099cc:	4602      	mov	r2, r0
 80099ce:	6260      	str	r0, [r4, #36]	; 0x24
 80099d0:	b920      	cbnz	r0, 80099dc <_Balloc+0x20>
 80099d2:	4b18      	ldr	r3, [pc, #96]	; (8009a34 <_Balloc+0x78>)
 80099d4:	4818      	ldr	r0, [pc, #96]	; (8009a38 <_Balloc+0x7c>)
 80099d6:	2166      	movs	r1, #102	; 0x66
 80099d8:	f000 feea 	bl	800a7b0 <__assert_func>
 80099dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099e0:	6006      	str	r6, [r0, #0]
 80099e2:	60c6      	str	r6, [r0, #12]
 80099e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80099e6:	68f3      	ldr	r3, [r6, #12]
 80099e8:	b183      	cbz	r3, 8009a0c <_Balloc+0x50>
 80099ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099f2:	b9b8      	cbnz	r0, 8009a24 <_Balloc+0x68>
 80099f4:	2101      	movs	r1, #1
 80099f6:	fa01 f605 	lsl.w	r6, r1, r5
 80099fa:	1d72      	adds	r2, r6, #5
 80099fc:	0092      	lsls	r2, r2, #2
 80099fe:	4620      	mov	r0, r4
 8009a00:	f000 fb60 	bl	800a0c4 <_calloc_r>
 8009a04:	b160      	cbz	r0, 8009a20 <_Balloc+0x64>
 8009a06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a0a:	e00e      	b.n	8009a2a <_Balloc+0x6e>
 8009a0c:	2221      	movs	r2, #33	; 0x21
 8009a0e:	2104      	movs	r1, #4
 8009a10:	4620      	mov	r0, r4
 8009a12:	f000 fb57 	bl	800a0c4 <_calloc_r>
 8009a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a18:	60f0      	str	r0, [r6, #12]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e4      	bne.n	80099ea <_Balloc+0x2e>
 8009a20:	2000      	movs	r0, #0
 8009a22:	bd70      	pop	{r4, r5, r6, pc}
 8009a24:	6802      	ldr	r2, [r0, #0]
 8009a26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a30:	e7f7      	b.n	8009a22 <_Balloc+0x66>
 8009a32:	bf00      	nop
 8009a34:	0800d085 	.word	0x0800d085
 8009a38:	0800d168 	.word	0x0800d168

08009a3c <_Bfree>:
 8009a3c:	b570      	push	{r4, r5, r6, lr}
 8009a3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a40:	4605      	mov	r5, r0
 8009a42:	460c      	mov	r4, r1
 8009a44:	b976      	cbnz	r6, 8009a64 <_Bfree+0x28>
 8009a46:	2010      	movs	r0, #16
 8009a48:	f7ff ffa2 	bl	8009990 <malloc>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	6268      	str	r0, [r5, #36]	; 0x24
 8009a50:	b920      	cbnz	r0, 8009a5c <_Bfree+0x20>
 8009a52:	4b09      	ldr	r3, [pc, #36]	; (8009a78 <_Bfree+0x3c>)
 8009a54:	4809      	ldr	r0, [pc, #36]	; (8009a7c <_Bfree+0x40>)
 8009a56:	218a      	movs	r1, #138	; 0x8a
 8009a58:	f000 feaa 	bl	800a7b0 <__assert_func>
 8009a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a60:	6006      	str	r6, [r0, #0]
 8009a62:	60c6      	str	r6, [r0, #12]
 8009a64:	b13c      	cbz	r4, 8009a76 <_Bfree+0x3a>
 8009a66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009a68:	6862      	ldr	r2, [r4, #4]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a70:	6021      	str	r1, [r4, #0]
 8009a72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a76:	bd70      	pop	{r4, r5, r6, pc}
 8009a78:	0800d085 	.word	0x0800d085
 8009a7c:	0800d168 	.word	0x0800d168

08009a80 <__multadd>:
 8009a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a84:	690d      	ldr	r5, [r1, #16]
 8009a86:	4607      	mov	r7, r0
 8009a88:	460c      	mov	r4, r1
 8009a8a:	461e      	mov	r6, r3
 8009a8c:	f101 0c14 	add.w	ip, r1, #20
 8009a90:	2000      	movs	r0, #0
 8009a92:	f8dc 3000 	ldr.w	r3, [ip]
 8009a96:	b299      	uxth	r1, r3
 8009a98:	fb02 6101 	mla	r1, r2, r1, r6
 8009a9c:	0c1e      	lsrs	r6, r3, #16
 8009a9e:	0c0b      	lsrs	r3, r1, #16
 8009aa0:	fb02 3306 	mla	r3, r2, r6, r3
 8009aa4:	b289      	uxth	r1, r1
 8009aa6:	3001      	adds	r0, #1
 8009aa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009aac:	4285      	cmp	r5, r0
 8009aae:	f84c 1b04 	str.w	r1, [ip], #4
 8009ab2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ab6:	dcec      	bgt.n	8009a92 <__multadd+0x12>
 8009ab8:	b30e      	cbz	r6, 8009afe <__multadd+0x7e>
 8009aba:	68a3      	ldr	r3, [r4, #8]
 8009abc:	42ab      	cmp	r3, r5
 8009abe:	dc19      	bgt.n	8009af4 <__multadd+0x74>
 8009ac0:	6861      	ldr	r1, [r4, #4]
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	3101      	adds	r1, #1
 8009ac6:	f7ff ff79 	bl	80099bc <_Balloc>
 8009aca:	4680      	mov	r8, r0
 8009acc:	b928      	cbnz	r0, 8009ada <__multadd+0x5a>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <__multadd+0x84>)
 8009ad2:	480d      	ldr	r0, [pc, #52]	; (8009b08 <__multadd+0x88>)
 8009ad4:	21b5      	movs	r1, #181	; 0xb5
 8009ad6:	f000 fe6b 	bl	800a7b0 <__assert_func>
 8009ada:	6922      	ldr	r2, [r4, #16]
 8009adc:	3202      	adds	r2, #2
 8009ade:	f104 010c 	add.w	r1, r4, #12
 8009ae2:	0092      	lsls	r2, r2, #2
 8009ae4:	300c      	adds	r0, #12
 8009ae6:	f7ff ff5b 	bl	80099a0 <memcpy>
 8009aea:	4621      	mov	r1, r4
 8009aec:	4638      	mov	r0, r7
 8009aee:	f7ff ffa5 	bl	8009a3c <_Bfree>
 8009af2:	4644      	mov	r4, r8
 8009af4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009af8:	3501      	adds	r5, #1
 8009afa:	615e      	str	r6, [r3, #20]
 8009afc:	6125      	str	r5, [r4, #16]
 8009afe:	4620      	mov	r0, r4
 8009b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b04:	0800d0f7 	.word	0x0800d0f7
 8009b08:	0800d168 	.word	0x0800d168

08009b0c <__hi0bits>:
 8009b0c:	0c03      	lsrs	r3, r0, #16
 8009b0e:	041b      	lsls	r3, r3, #16
 8009b10:	b9d3      	cbnz	r3, 8009b48 <__hi0bits+0x3c>
 8009b12:	0400      	lsls	r0, r0, #16
 8009b14:	2310      	movs	r3, #16
 8009b16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b1a:	bf04      	itt	eq
 8009b1c:	0200      	lsleq	r0, r0, #8
 8009b1e:	3308      	addeq	r3, #8
 8009b20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b24:	bf04      	itt	eq
 8009b26:	0100      	lsleq	r0, r0, #4
 8009b28:	3304      	addeq	r3, #4
 8009b2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b2e:	bf04      	itt	eq
 8009b30:	0080      	lsleq	r0, r0, #2
 8009b32:	3302      	addeq	r3, #2
 8009b34:	2800      	cmp	r0, #0
 8009b36:	db05      	blt.n	8009b44 <__hi0bits+0x38>
 8009b38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b3c:	f103 0301 	add.w	r3, r3, #1
 8009b40:	bf08      	it	eq
 8009b42:	2320      	moveq	r3, #32
 8009b44:	4618      	mov	r0, r3
 8009b46:	4770      	bx	lr
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e7e4      	b.n	8009b16 <__hi0bits+0xa>

08009b4c <__lo0bits>:
 8009b4c:	6803      	ldr	r3, [r0, #0]
 8009b4e:	f013 0207 	ands.w	r2, r3, #7
 8009b52:	4601      	mov	r1, r0
 8009b54:	d00b      	beq.n	8009b6e <__lo0bits+0x22>
 8009b56:	07da      	lsls	r2, r3, #31
 8009b58:	d423      	bmi.n	8009ba2 <__lo0bits+0x56>
 8009b5a:	0798      	lsls	r0, r3, #30
 8009b5c:	bf49      	itett	mi
 8009b5e:	085b      	lsrmi	r3, r3, #1
 8009b60:	089b      	lsrpl	r3, r3, #2
 8009b62:	2001      	movmi	r0, #1
 8009b64:	600b      	strmi	r3, [r1, #0]
 8009b66:	bf5c      	itt	pl
 8009b68:	600b      	strpl	r3, [r1, #0]
 8009b6a:	2002      	movpl	r0, #2
 8009b6c:	4770      	bx	lr
 8009b6e:	b298      	uxth	r0, r3
 8009b70:	b9a8      	cbnz	r0, 8009b9e <__lo0bits+0x52>
 8009b72:	0c1b      	lsrs	r3, r3, #16
 8009b74:	2010      	movs	r0, #16
 8009b76:	b2da      	uxtb	r2, r3
 8009b78:	b90a      	cbnz	r2, 8009b7e <__lo0bits+0x32>
 8009b7a:	3008      	adds	r0, #8
 8009b7c:	0a1b      	lsrs	r3, r3, #8
 8009b7e:	071a      	lsls	r2, r3, #28
 8009b80:	bf04      	itt	eq
 8009b82:	091b      	lsreq	r3, r3, #4
 8009b84:	3004      	addeq	r0, #4
 8009b86:	079a      	lsls	r2, r3, #30
 8009b88:	bf04      	itt	eq
 8009b8a:	089b      	lsreq	r3, r3, #2
 8009b8c:	3002      	addeq	r0, #2
 8009b8e:	07da      	lsls	r2, r3, #31
 8009b90:	d403      	bmi.n	8009b9a <__lo0bits+0x4e>
 8009b92:	085b      	lsrs	r3, r3, #1
 8009b94:	f100 0001 	add.w	r0, r0, #1
 8009b98:	d005      	beq.n	8009ba6 <__lo0bits+0x5a>
 8009b9a:	600b      	str	r3, [r1, #0]
 8009b9c:	4770      	bx	lr
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	e7e9      	b.n	8009b76 <__lo0bits+0x2a>
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	4770      	bx	lr
 8009ba6:	2020      	movs	r0, #32
 8009ba8:	4770      	bx	lr
	...

08009bac <__i2b>:
 8009bac:	b510      	push	{r4, lr}
 8009bae:	460c      	mov	r4, r1
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	f7ff ff03 	bl	80099bc <_Balloc>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	b928      	cbnz	r0, 8009bc6 <__i2b+0x1a>
 8009bba:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <__i2b+0x24>)
 8009bbc:	4805      	ldr	r0, [pc, #20]	; (8009bd4 <__i2b+0x28>)
 8009bbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009bc2:	f000 fdf5 	bl	800a7b0 <__assert_func>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	6144      	str	r4, [r0, #20]
 8009bca:	6103      	str	r3, [r0, #16]
 8009bcc:	bd10      	pop	{r4, pc}
 8009bce:	bf00      	nop
 8009bd0:	0800d0f7 	.word	0x0800d0f7
 8009bd4:	0800d168 	.word	0x0800d168

08009bd8 <__multiply>:
 8009bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bdc:	4691      	mov	r9, r2
 8009bde:	690a      	ldr	r2, [r1, #16]
 8009be0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	bfb8      	it	lt
 8009be8:	460b      	movlt	r3, r1
 8009bea:	460c      	mov	r4, r1
 8009bec:	bfbc      	itt	lt
 8009bee:	464c      	movlt	r4, r9
 8009bf0:	4699      	movlt	r9, r3
 8009bf2:	6927      	ldr	r7, [r4, #16]
 8009bf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009bf8:	68a3      	ldr	r3, [r4, #8]
 8009bfa:	6861      	ldr	r1, [r4, #4]
 8009bfc:	eb07 060a 	add.w	r6, r7, sl
 8009c00:	42b3      	cmp	r3, r6
 8009c02:	b085      	sub	sp, #20
 8009c04:	bfb8      	it	lt
 8009c06:	3101      	addlt	r1, #1
 8009c08:	f7ff fed8 	bl	80099bc <_Balloc>
 8009c0c:	b930      	cbnz	r0, 8009c1c <__multiply+0x44>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	4b44      	ldr	r3, [pc, #272]	; (8009d24 <__multiply+0x14c>)
 8009c12:	4845      	ldr	r0, [pc, #276]	; (8009d28 <__multiply+0x150>)
 8009c14:	f240 115d 	movw	r1, #349	; 0x15d
 8009c18:	f000 fdca 	bl	800a7b0 <__assert_func>
 8009c1c:	f100 0514 	add.w	r5, r0, #20
 8009c20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c24:	462b      	mov	r3, r5
 8009c26:	2200      	movs	r2, #0
 8009c28:	4543      	cmp	r3, r8
 8009c2a:	d321      	bcc.n	8009c70 <__multiply+0x98>
 8009c2c:	f104 0314 	add.w	r3, r4, #20
 8009c30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c34:	f109 0314 	add.w	r3, r9, #20
 8009c38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c3c:	9202      	str	r2, [sp, #8]
 8009c3e:	1b3a      	subs	r2, r7, r4
 8009c40:	3a15      	subs	r2, #21
 8009c42:	f022 0203 	bic.w	r2, r2, #3
 8009c46:	3204      	adds	r2, #4
 8009c48:	f104 0115 	add.w	r1, r4, #21
 8009c4c:	428f      	cmp	r7, r1
 8009c4e:	bf38      	it	cc
 8009c50:	2204      	movcc	r2, #4
 8009c52:	9201      	str	r2, [sp, #4]
 8009c54:	9a02      	ldr	r2, [sp, #8]
 8009c56:	9303      	str	r3, [sp, #12]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d80c      	bhi.n	8009c76 <__multiply+0x9e>
 8009c5c:	2e00      	cmp	r6, #0
 8009c5e:	dd03      	ble.n	8009c68 <__multiply+0x90>
 8009c60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d05a      	beq.n	8009d1e <__multiply+0x146>
 8009c68:	6106      	str	r6, [r0, #16]
 8009c6a:	b005      	add	sp, #20
 8009c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c70:	f843 2b04 	str.w	r2, [r3], #4
 8009c74:	e7d8      	b.n	8009c28 <__multiply+0x50>
 8009c76:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c7a:	f1ba 0f00 	cmp.w	sl, #0
 8009c7e:	d024      	beq.n	8009cca <__multiply+0xf2>
 8009c80:	f104 0e14 	add.w	lr, r4, #20
 8009c84:	46a9      	mov	r9, r5
 8009c86:	f04f 0c00 	mov.w	ip, #0
 8009c8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c8e:	f8d9 1000 	ldr.w	r1, [r9]
 8009c92:	fa1f fb82 	uxth.w	fp, r2
 8009c96:	b289      	uxth	r1, r1
 8009c98:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8009ca4:	4461      	add	r1, ip
 8009ca6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009caa:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cb2:	b289      	uxth	r1, r1
 8009cb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cb8:	4577      	cmp	r7, lr
 8009cba:	f849 1b04 	str.w	r1, [r9], #4
 8009cbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cc2:	d8e2      	bhi.n	8009c8a <__multiply+0xb2>
 8009cc4:	9a01      	ldr	r2, [sp, #4]
 8009cc6:	f845 c002 	str.w	ip, [r5, r2]
 8009cca:	9a03      	ldr	r2, [sp, #12]
 8009ccc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	f1b9 0f00 	cmp.w	r9, #0
 8009cd6:	d020      	beq.n	8009d1a <__multiply+0x142>
 8009cd8:	6829      	ldr	r1, [r5, #0]
 8009cda:	f104 0c14 	add.w	ip, r4, #20
 8009cde:	46ae      	mov	lr, r5
 8009ce0:	f04f 0a00 	mov.w	sl, #0
 8009ce4:	f8bc b000 	ldrh.w	fp, [ip]
 8009ce8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009cec:	fb09 220b 	mla	r2, r9, fp, r2
 8009cf0:	4492      	add	sl, r2
 8009cf2:	b289      	uxth	r1, r1
 8009cf4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009cf8:	f84e 1b04 	str.w	r1, [lr], #4
 8009cfc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009d00:	f8be 1000 	ldrh.w	r1, [lr]
 8009d04:	0c12      	lsrs	r2, r2, #16
 8009d06:	fb09 1102 	mla	r1, r9, r2, r1
 8009d0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009d0e:	4567      	cmp	r7, ip
 8009d10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d14:	d8e6      	bhi.n	8009ce4 <__multiply+0x10c>
 8009d16:	9a01      	ldr	r2, [sp, #4]
 8009d18:	50a9      	str	r1, [r5, r2]
 8009d1a:	3504      	adds	r5, #4
 8009d1c:	e79a      	b.n	8009c54 <__multiply+0x7c>
 8009d1e:	3e01      	subs	r6, #1
 8009d20:	e79c      	b.n	8009c5c <__multiply+0x84>
 8009d22:	bf00      	nop
 8009d24:	0800d0f7 	.word	0x0800d0f7
 8009d28:	0800d168 	.word	0x0800d168

08009d2c <__pow5mult>:
 8009d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d30:	4615      	mov	r5, r2
 8009d32:	f012 0203 	ands.w	r2, r2, #3
 8009d36:	4606      	mov	r6, r0
 8009d38:	460f      	mov	r7, r1
 8009d3a:	d007      	beq.n	8009d4c <__pow5mult+0x20>
 8009d3c:	4c25      	ldr	r4, [pc, #148]	; (8009dd4 <__pow5mult+0xa8>)
 8009d3e:	3a01      	subs	r2, #1
 8009d40:	2300      	movs	r3, #0
 8009d42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d46:	f7ff fe9b 	bl	8009a80 <__multadd>
 8009d4a:	4607      	mov	r7, r0
 8009d4c:	10ad      	asrs	r5, r5, #2
 8009d4e:	d03d      	beq.n	8009dcc <__pow5mult+0xa0>
 8009d50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009d52:	b97c      	cbnz	r4, 8009d74 <__pow5mult+0x48>
 8009d54:	2010      	movs	r0, #16
 8009d56:	f7ff fe1b 	bl	8009990 <malloc>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	6270      	str	r0, [r6, #36]	; 0x24
 8009d5e:	b928      	cbnz	r0, 8009d6c <__pow5mult+0x40>
 8009d60:	4b1d      	ldr	r3, [pc, #116]	; (8009dd8 <__pow5mult+0xac>)
 8009d62:	481e      	ldr	r0, [pc, #120]	; (8009ddc <__pow5mult+0xb0>)
 8009d64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009d68:	f000 fd22 	bl	800a7b0 <__assert_func>
 8009d6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d70:	6004      	str	r4, [r0, #0]
 8009d72:	60c4      	str	r4, [r0, #12]
 8009d74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009d78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d7c:	b94c      	cbnz	r4, 8009d92 <__pow5mult+0x66>
 8009d7e:	f240 2171 	movw	r1, #625	; 0x271
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7ff ff12 	bl	8009bac <__i2b>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d8e:	4604      	mov	r4, r0
 8009d90:	6003      	str	r3, [r0, #0]
 8009d92:	f04f 0900 	mov.w	r9, #0
 8009d96:	07eb      	lsls	r3, r5, #31
 8009d98:	d50a      	bpl.n	8009db0 <__pow5mult+0x84>
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f7ff ff1a 	bl	8009bd8 <__multiply>
 8009da4:	4639      	mov	r1, r7
 8009da6:	4680      	mov	r8, r0
 8009da8:	4630      	mov	r0, r6
 8009daa:	f7ff fe47 	bl	8009a3c <_Bfree>
 8009dae:	4647      	mov	r7, r8
 8009db0:	106d      	asrs	r5, r5, #1
 8009db2:	d00b      	beq.n	8009dcc <__pow5mult+0xa0>
 8009db4:	6820      	ldr	r0, [r4, #0]
 8009db6:	b938      	cbnz	r0, 8009dc8 <__pow5mult+0x9c>
 8009db8:	4622      	mov	r2, r4
 8009dba:	4621      	mov	r1, r4
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f7ff ff0b 	bl	8009bd8 <__multiply>
 8009dc2:	6020      	str	r0, [r4, #0]
 8009dc4:	f8c0 9000 	str.w	r9, [r0]
 8009dc8:	4604      	mov	r4, r0
 8009dca:	e7e4      	b.n	8009d96 <__pow5mult+0x6a>
 8009dcc:	4638      	mov	r0, r7
 8009dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dd2:	bf00      	nop
 8009dd4:	0800d2b8 	.word	0x0800d2b8
 8009dd8:	0800d085 	.word	0x0800d085
 8009ddc:	0800d168 	.word	0x0800d168

08009de0 <__lshift>:
 8009de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009de4:	460c      	mov	r4, r1
 8009de6:	6849      	ldr	r1, [r1, #4]
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009dee:	68a3      	ldr	r3, [r4, #8]
 8009df0:	4607      	mov	r7, r0
 8009df2:	4691      	mov	r9, r2
 8009df4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009df8:	f108 0601 	add.w	r6, r8, #1
 8009dfc:	42b3      	cmp	r3, r6
 8009dfe:	db0b      	blt.n	8009e18 <__lshift+0x38>
 8009e00:	4638      	mov	r0, r7
 8009e02:	f7ff fddb 	bl	80099bc <_Balloc>
 8009e06:	4605      	mov	r5, r0
 8009e08:	b948      	cbnz	r0, 8009e1e <__lshift+0x3e>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	4b2a      	ldr	r3, [pc, #168]	; (8009eb8 <__lshift+0xd8>)
 8009e0e:	482b      	ldr	r0, [pc, #172]	; (8009ebc <__lshift+0xdc>)
 8009e10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009e14:	f000 fccc 	bl	800a7b0 <__assert_func>
 8009e18:	3101      	adds	r1, #1
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	e7ee      	b.n	8009dfc <__lshift+0x1c>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	f100 0114 	add.w	r1, r0, #20
 8009e24:	f100 0210 	add.w	r2, r0, #16
 8009e28:	4618      	mov	r0, r3
 8009e2a:	4553      	cmp	r3, sl
 8009e2c:	db37      	blt.n	8009e9e <__lshift+0xbe>
 8009e2e:	6920      	ldr	r0, [r4, #16]
 8009e30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e34:	f104 0314 	add.w	r3, r4, #20
 8009e38:	f019 091f 	ands.w	r9, r9, #31
 8009e3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009e44:	d02f      	beq.n	8009ea6 <__lshift+0xc6>
 8009e46:	f1c9 0e20 	rsb	lr, r9, #32
 8009e4a:	468a      	mov	sl, r1
 8009e4c:	f04f 0c00 	mov.w	ip, #0
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	fa02 f209 	lsl.w	r2, r2, r9
 8009e56:	ea42 020c 	orr.w	r2, r2, ip
 8009e5a:	f84a 2b04 	str.w	r2, [sl], #4
 8009e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e62:	4298      	cmp	r0, r3
 8009e64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009e68:	d8f2      	bhi.n	8009e50 <__lshift+0x70>
 8009e6a:	1b03      	subs	r3, r0, r4
 8009e6c:	3b15      	subs	r3, #21
 8009e6e:	f023 0303 	bic.w	r3, r3, #3
 8009e72:	3304      	adds	r3, #4
 8009e74:	f104 0215 	add.w	r2, r4, #21
 8009e78:	4290      	cmp	r0, r2
 8009e7a:	bf38      	it	cc
 8009e7c:	2304      	movcc	r3, #4
 8009e7e:	f841 c003 	str.w	ip, [r1, r3]
 8009e82:	f1bc 0f00 	cmp.w	ip, #0
 8009e86:	d001      	beq.n	8009e8c <__lshift+0xac>
 8009e88:	f108 0602 	add.w	r6, r8, #2
 8009e8c:	3e01      	subs	r6, #1
 8009e8e:	4638      	mov	r0, r7
 8009e90:	612e      	str	r6, [r5, #16]
 8009e92:	4621      	mov	r1, r4
 8009e94:	f7ff fdd2 	bl	8009a3c <_Bfree>
 8009e98:	4628      	mov	r0, r5
 8009e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	e7c1      	b.n	8009e2a <__lshift+0x4a>
 8009ea6:	3904      	subs	r1, #4
 8009ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eac:	f841 2f04 	str.w	r2, [r1, #4]!
 8009eb0:	4298      	cmp	r0, r3
 8009eb2:	d8f9      	bhi.n	8009ea8 <__lshift+0xc8>
 8009eb4:	e7ea      	b.n	8009e8c <__lshift+0xac>
 8009eb6:	bf00      	nop
 8009eb8:	0800d0f7 	.word	0x0800d0f7
 8009ebc:	0800d168 	.word	0x0800d168

08009ec0 <__mcmp>:
 8009ec0:	b530      	push	{r4, r5, lr}
 8009ec2:	6902      	ldr	r2, [r0, #16]
 8009ec4:	690c      	ldr	r4, [r1, #16]
 8009ec6:	1b12      	subs	r2, r2, r4
 8009ec8:	d10e      	bne.n	8009ee8 <__mcmp+0x28>
 8009eca:	f100 0314 	add.w	r3, r0, #20
 8009ece:	3114      	adds	r1, #20
 8009ed0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ed4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ed8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009edc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ee0:	42a5      	cmp	r5, r4
 8009ee2:	d003      	beq.n	8009eec <__mcmp+0x2c>
 8009ee4:	d305      	bcc.n	8009ef2 <__mcmp+0x32>
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4610      	mov	r0, r2
 8009eea:	bd30      	pop	{r4, r5, pc}
 8009eec:	4283      	cmp	r3, r0
 8009eee:	d3f3      	bcc.n	8009ed8 <__mcmp+0x18>
 8009ef0:	e7fa      	b.n	8009ee8 <__mcmp+0x28>
 8009ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ef6:	e7f7      	b.n	8009ee8 <__mcmp+0x28>

08009ef8 <__mdiff>:
 8009ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009efc:	460c      	mov	r4, r1
 8009efe:	4606      	mov	r6, r0
 8009f00:	4611      	mov	r1, r2
 8009f02:	4620      	mov	r0, r4
 8009f04:	4690      	mov	r8, r2
 8009f06:	f7ff ffdb 	bl	8009ec0 <__mcmp>
 8009f0a:	1e05      	subs	r5, r0, #0
 8009f0c:	d110      	bne.n	8009f30 <__mdiff+0x38>
 8009f0e:	4629      	mov	r1, r5
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff fd53 	bl	80099bc <_Balloc>
 8009f16:	b930      	cbnz	r0, 8009f26 <__mdiff+0x2e>
 8009f18:	4b3a      	ldr	r3, [pc, #232]	; (800a004 <__mdiff+0x10c>)
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	f240 2132 	movw	r1, #562	; 0x232
 8009f20:	4839      	ldr	r0, [pc, #228]	; (800a008 <__mdiff+0x110>)
 8009f22:	f000 fc45 	bl	800a7b0 <__assert_func>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f30:	bfa4      	itt	ge
 8009f32:	4643      	movge	r3, r8
 8009f34:	46a0      	movge	r8, r4
 8009f36:	4630      	mov	r0, r6
 8009f38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f3c:	bfa6      	itte	ge
 8009f3e:	461c      	movge	r4, r3
 8009f40:	2500      	movge	r5, #0
 8009f42:	2501      	movlt	r5, #1
 8009f44:	f7ff fd3a 	bl	80099bc <_Balloc>
 8009f48:	b920      	cbnz	r0, 8009f54 <__mdiff+0x5c>
 8009f4a:	4b2e      	ldr	r3, [pc, #184]	; (800a004 <__mdiff+0x10c>)
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009f52:	e7e5      	b.n	8009f20 <__mdiff+0x28>
 8009f54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f58:	6926      	ldr	r6, [r4, #16]
 8009f5a:	60c5      	str	r5, [r0, #12]
 8009f5c:	f104 0914 	add.w	r9, r4, #20
 8009f60:	f108 0514 	add.w	r5, r8, #20
 8009f64:	f100 0e14 	add.w	lr, r0, #20
 8009f68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f70:	f108 0210 	add.w	r2, r8, #16
 8009f74:	46f2      	mov	sl, lr
 8009f76:	2100      	movs	r1, #0
 8009f78:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f80:	fa1f f883 	uxth.w	r8, r3
 8009f84:	fa11 f18b 	uxtah	r1, r1, fp
 8009f88:	0c1b      	lsrs	r3, r3, #16
 8009f8a:	eba1 0808 	sub.w	r8, r1, r8
 8009f8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f96:	fa1f f888 	uxth.w	r8, r8
 8009f9a:	1419      	asrs	r1, r3, #16
 8009f9c:	454e      	cmp	r6, r9
 8009f9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fa2:	f84a 3b04 	str.w	r3, [sl], #4
 8009fa6:	d8e7      	bhi.n	8009f78 <__mdiff+0x80>
 8009fa8:	1b33      	subs	r3, r6, r4
 8009faa:	3b15      	subs	r3, #21
 8009fac:	f023 0303 	bic.w	r3, r3, #3
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	3415      	adds	r4, #21
 8009fb4:	42a6      	cmp	r6, r4
 8009fb6:	bf38      	it	cc
 8009fb8:	2304      	movcc	r3, #4
 8009fba:	441d      	add	r5, r3
 8009fbc:	4473      	add	r3, lr
 8009fbe:	469e      	mov	lr, r3
 8009fc0:	462e      	mov	r6, r5
 8009fc2:	4566      	cmp	r6, ip
 8009fc4:	d30e      	bcc.n	8009fe4 <__mdiff+0xec>
 8009fc6:	f10c 0203 	add.w	r2, ip, #3
 8009fca:	1b52      	subs	r2, r2, r5
 8009fcc:	f022 0203 	bic.w	r2, r2, #3
 8009fd0:	3d03      	subs	r5, #3
 8009fd2:	45ac      	cmp	ip, r5
 8009fd4:	bf38      	it	cc
 8009fd6:	2200      	movcc	r2, #0
 8009fd8:	441a      	add	r2, r3
 8009fda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009fde:	b17b      	cbz	r3, 800a000 <__mdiff+0x108>
 8009fe0:	6107      	str	r7, [r0, #16]
 8009fe2:	e7a3      	b.n	8009f2c <__mdiff+0x34>
 8009fe4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009fe8:	fa11 f288 	uxtah	r2, r1, r8
 8009fec:	1414      	asrs	r4, r2, #16
 8009fee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ff2:	b292      	uxth	r2, r2
 8009ff4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ff8:	f84e 2b04 	str.w	r2, [lr], #4
 8009ffc:	1421      	asrs	r1, r4, #16
 8009ffe:	e7e0      	b.n	8009fc2 <__mdiff+0xca>
 800a000:	3f01      	subs	r7, #1
 800a002:	e7ea      	b.n	8009fda <__mdiff+0xe2>
 800a004:	0800d0f7 	.word	0x0800d0f7
 800a008:	0800d168 	.word	0x0800d168

0800a00c <__d2b>:
 800a00c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a010:	4689      	mov	r9, r1
 800a012:	2101      	movs	r1, #1
 800a014:	ec57 6b10 	vmov	r6, r7, d0
 800a018:	4690      	mov	r8, r2
 800a01a:	f7ff fccf 	bl	80099bc <_Balloc>
 800a01e:	4604      	mov	r4, r0
 800a020:	b930      	cbnz	r0, 800a030 <__d2b+0x24>
 800a022:	4602      	mov	r2, r0
 800a024:	4b25      	ldr	r3, [pc, #148]	; (800a0bc <__d2b+0xb0>)
 800a026:	4826      	ldr	r0, [pc, #152]	; (800a0c0 <__d2b+0xb4>)
 800a028:	f240 310a 	movw	r1, #778	; 0x30a
 800a02c:	f000 fbc0 	bl	800a7b0 <__assert_func>
 800a030:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a034:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a038:	bb35      	cbnz	r5, 800a088 <__d2b+0x7c>
 800a03a:	2e00      	cmp	r6, #0
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	d028      	beq.n	800a092 <__d2b+0x86>
 800a040:	4668      	mov	r0, sp
 800a042:	9600      	str	r6, [sp, #0]
 800a044:	f7ff fd82 	bl	8009b4c <__lo0bits>
 800a048:	9900      	ldr	r1, [sp, #0]
 800a04a:	b300      	cbz	r0, 800a08e <__d2b+0x82>
 800a04c:	9a01      	ldr	r2, [sp, #4]
 800a04e:	f1c0 0320 	rsb	r3, r0, #32
 800a052:	fa02 f303 	lsl.w	r3, r2, r3
 800a056:	430b      	orrs	r3, r1
 800a058:	40c2      	lsrs	r2, r0
 800a05a:	6163      	str	r3, [r4, #20]
 800a05c:	9201      	str	r2, [sp, #4]
 800a05e:	9b01      	ldr	r3, [sp, #4]
 800a060:	61a3      	str	r3, [r4, #24]
 800a062:	2b00      	cmp	r3, #0
 800a064:	bf14      	ite	ne
 800a066:	2202      	movne	r2, #2
 800a068:	2201      	moveq	r2, #1
 800a06a:	6122      	str	r2, [r4, #16]
 800a06c:	b1d5      	cbz	r5, 800a0a4 <__d2b+0x98>
 800a06e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a072:	4405      	add	r5, r0
 800a074:	f8c9 5000 	str.w	r5, [r9]
 800a078:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a07c:	f8c8 0000 	str.w	r0, [r8]
 800a080:	4620      	mov	r0, r4
 800a082:	b003      	add	sp, #12
 800a084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a08c:	e7d5      	b.n	800a03a <__d2b+0x2e>
 800a08e:	6161      	str	r1, [r4, #20]
 800a090:	e7e5      	b.n	800a05e <__d2b+0x52>
 800a092:	a801      	add	r0, sp, #4
 800a094:	f7ff fd5a 	bl	8009b4c <__lo0bits>
 800a098:	9b01      	ldr	r3, [sp, #4]
 800a09a:	6163      	str	r3, [r4, #20]
 800a09c:	2201      	movs	r2, #1
 800a09e:	6122      	str	r2, [r4, #16]
 800a0a0:	3020      	adds	r0, #32
 800a0a2:	e7e3      	b.n	800a06c <__d2b+0x60>
 800a0a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0ac:	f8c9 0000 	str.w	r0, [r9]
 800a0b0:	6918      	ldr	r0, [r3, #16]
 800a0b2:	f7ff fd2b 	bl	8009b0c <__hi0bits>
 800a0b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0ba:	e7df      	b.n	800a07c <__d2b+0x70>
 800a0bc:	0800d0f7 	.word	0x0800d0f7
 800a0c0:	0800d168 	.word	0x0800d168

0800a0c4 <_calloc_r>:
 800a0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0c6:	fba1 2402 	umull	r2, r4, r1, r2
 800a0ca:	b94c      	cbnz	r4, 800a0e0 <_calloc_r+0x1c>
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	9201      	str	r2, [sp, #4]
 800a0d0:	f000 f87a 	bl	800a1c8 <_malloc_r>
 800a0d4:	9a01      	ldr	r2, [sp, #4]
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	b930      	cbnz	r0, 800a0e8 <_calloc_r+0x24>
 800a0da:	4628      	mov	r0, r5
 800a0dc:	b003      	add	sp, #12
 800a0de:	bd30      	pop	{r4, r5, pc}
 800a0e0:	220c      	movs	r2, #12
 800a0e2:	6002      	str	r2, [r0, #0]
 800a0e4:	2500      	movs	r5, #0
 800a0e6:	e7f8      	b.n	800a0da <_calloc_r+0x16>
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	f7fe f837 	bl	800815c <memset>
 800a0ee:	e7f4      	b.n	800a0da <_calloc_r+0x16>

0800a0f0 <_free_r>:
 800a0f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	d044      	beq.n	800a180 <_free_r+0x90>
 800a0f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0fa:	9001      	str	r0, [sp, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f1a1 0404 	sub.w	r4, r1, #4
 800a102:	bfb8      	it	lt
 800a104:	18e4      	addlt	r4, r4, r3
 800a106:	f000 fcdf 	bl	800aac8 <__malloc_lock>
 800a10a:	4a1e      	ldr	r2, [pc, #120]	; (800a184 <_free_r+0x94>)
 800a10c:	9801      	ldr	r0, [sp, #4]
 800a10e:	6813      	ldr	r3, [r2, #0]
 800a110:	b933      	cbnz	r3, 800a120 <_free_r+0x30>
 800a112:	6063      	str	r3, [r4, #4]
 800a114:	6014      	str	r4, [r2, #0]
 800a116:	b003      	add	sp, #12
 800a118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a11c:	f000 bcda 	b.w	800aad4 <__malloc_unlock>
 800a120:	42a3      	cmp	r3, r4
 800a122:	d908      	bls.n	800a136 <_free_r+0x46>
 800a124:	6825      	ldr	r5, [r4, #0]
 800a126:	1961      	adds	r1, r4, r5
 800a128:	428b      	cmp	r3, r1
 800a12a:	bf01      	itttt	eq
 800a12c:	6819      	ldreq	r1, [r3, #0]
 800a12e:	685b      	ldreq	r3, [r3, #4]
 800a130:	1949      	addeq	r1, r1, r5
 800a132:	6021      	streq	r1, [r4, #0]
 800a134:	e7ed      	b.n	800a112 <_free_r+0x22>
 800a136:	461a      	mov	r2, r3
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	b10b      	cbz	r3, 800a140 <_free_r+0x50>
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	d9fa      	bls.n	800a136 <_free_r+0x46>
 800a140:	6811      	ldr	r1, [r2, #0]
 800a142:	1855      	adds	r5, r2, r1
 800a144:	42a5      	cmp	r5, r4
 800a146:	d10b      	bne.n	800a160 <_free_r+0x70>
 800a148:	6824      	ldr	r4, [r4, #0]
 800a14a:	4421      	add	r1, r4
 800a14c:	1854      	adds	r4, r2, r1
 800a14e:	42a3      	cmp	r3, r4
 800a150:	6011      	str	r1, [r2, #0]
 800a152:	d1e0      	bne.n	800a116 <_free_r+0x26>
 800a154:	681c      	ldr	r4, [r3, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	6053      	str	r3, [r2, #4]
 800a15a:	4421      	add	r1, r4
 800a15c:	6011      	str	r1, [r2, #0]
 800a15e:	e7da      	b.n	800a116 <_free_r+0x26>
 800a160:	d902      	bls.n	800a168 <_free_r+0x78>
 800a162:	230c      	movs	r3, #12
 800a164:	6003      	str	r3, [r0, #0]
 800a166:	e7d6      	b.n	800a116 <_free_r+0x26>
 800a168:	6825      	ldr	r5, [r4, #0]
 800a16a:	1961      	adds	r1, r4, r5
 800a16c:	428b      	cmp	r3, r1
 800a16e:	bf04      	itt	eq
 800a170:	6819      	ldreq	r1, [r3, #0]
 800a172:	685b      	ldreq	r3, [r3, #4]
 800a174:	6063      	str	r3, [r4, #4]
 800a176:	bf04      	itt	eq
 800a178:	1949      	addeq	r1, r1, r5
 800a17a:	6021      	streq	r1, [r4, #0]
 800a17c:	6054      	str	r4, [r2, #4]
 800a17e:	e7ca      	b.n	800a116 <_free_r+0x26>
 800a180:	b003      	add	sp, #12
 800a182:	bd30      	pop	{r4, r5, pc}
 800a184:	20001228 	.word	0x20001228

0800a188 <sbrk_aligned>:
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	4e0e      	ldr	r6, [pc, #56]	; (800a1c4 <sbrk_aligned+0x3c>)
 800a18c:	460c      	mov	r4, r1
 800a18e:	6831      	ldr	r1, [r6, #0]
 800a190:	4605      	mov	r5, r0
 800a192:	b911      	cbnz	r1, 800a19a <sbrk_aligned+0x12>
 800a194:	f000 f9e6 	bl	800a564 <_sbrk_r>
 800a198:	6030      	str	r0, [r6, #0]
 800a19a:	4621      	mov	r1, r4
 800a19c:	4628      	mov	r0, r5
 800a19e:	f000 f9e1 	bl	800a564 <_sbrk_r>
 800a1a2:	1c43      	adds	r3, r0, #1
 800a1a4:	d00a      	beq.n	800a1bc <sbrk_aligned+0x34>
 800a1a6:	1cc4      	adds	r4, r0, #3
 800a1a8:	f024 0403 	bic.w	r4, r4, #3
 800a1ac:	42a0      	cmp	r0, r4
 800a1ae:	d007      	beq.n	800a1c0 <sbrk_aligned+0x38>
 800a1b0:	1a21      	subs	r1, r4, r0
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f000 f9d6 	bl	800a564 <_sbrk_r>
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d101      	bne.n	800a1c0 <sbrk_aligned+0x38>
 800a1bc:	f04f 34ff 	mov.w	r4, #4294967295
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	2000122c 	.word	0x2000122c

0800a1c8 <_malloc_r>:
 800a1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1cc:	1ccd      	adds	r5, r1, #3
 800a1ce:	f025 0503 	bic.w	r5, r5, #3
 800a1d2:	3508      	adds	r5, #8
 800a1d4:	2d0c      	cmp	r5, #12
 800a1d6:	bf38      	it	cc
 800a1d8:	250c      	movcc	r5, #12
 800a1da:	2d00      	cmp	r5, #0
 800a1dc:	4607      	mov	r7, r0
 800a1de:	db01      	blt.n	800a1e4 <_malloc_r+0x1c>
 800a1e0:	42a9      	cmp	r1, r5
 800a1e2:	d905      	bls.n	800a1f0 <_malloc_r+0x28>
 800a1e4:	230c      	movs	r3, #12
 800a1e6:	603b      	str	r3, [r7, #0]
 800a1e8:	2600      	movs	r6, #0
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f0:	4e2e      	ldr	r6, [pc, #184]	; (800a2ac <_malloc_r+0xe4>)
 800a1f2:	f000 fc69 	bl	800aac8 <__malloc_lock>
 800a1f6:	6833      	ldr	r3, [r6, #0]
 800a1f8:	461c      	mov	r4, r3
 800a1fa:	bb34      	cbnz	r4, 800a24a <_malloc_r+0x82>
 800a1fc:	4629      	mov	r1, r5
 800a1fe:	4638      	mov	r0, r7
 800a200:	f7ff ffc2 	bl	800a188 <sbrk_aligned>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	4604      	mov	r4, r0
 800a208:	d14d      	bne.n	800a2a6 <_malloc_r+0xde>
 800a20a:	6834      	ldr	r4, [r6, #0]
 800a20c:	4626      	mov	r6, r4
 800a20e:	2e00      	cmp	r6, #0
 800a210:	d140      	bne.n	800a294 <_malloc_r+0xcc>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	4631      	mov	r1, r6
 800a216:	4638      	mov	r0, r7
 800a218:	eb04 0803 	add.w	r8, r4, r3
 800a21c:	f000 f9a2 	bl	800a564 <_sbrk_r>
 800a220:	4580      	cmp	r8, r0
 800a222:	d13a      	bne.n	800a29a <_malloc_r+0xd2>
 800a224:	6821      	ldr	r1, [r4, #0]
 800a226:	3503      	adds	r5, #3
 800a228:	1a6d      	subs	r5, r5, r1
 800a22a:	f025 0503 	bic.w	r5, r5, #3
 800a22e:	3508      	adds	r5, #8
 800a230:	2d0c      	cmp	r5, #12
 800a232:	bf38      	it	cc
 800a234:	250c      	movcc	r5, #12
 800a236:	4629      	mov	r1, r5
 800a238:	4638      	mov	r0, r7
 800a23a:	f7ff ffa5 	bl	800a188 <sbrk_aligned>
 800a23e:	3001      	adds	r0, #1
 800a240:	d02b      	beq.n	800a29a <_malloc_r+0xd2>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	442b      	add	r3, r5
 800a246:	6023      	str	r3, [r4, #0]
 800a248:	e00e      	b.n	800a268 <_malloc_r+0xa0>
 800a24a:	6822      	ldr	r2, [r4, #0]
 800a24c:	1b52      	subs	r2, r2, r5
 800a24e:	d41e      	bmi.n	800a28e <_malloc_r+0xc6>
 800a250:	2a0b      	cmp	r2, #11
 800a252:	d916      	bls.n	800a282 <_malloc_r+0xba>
 800a254:	1961      	adds	r1, r4, r5
 800a256:	42a3      	cmp	r3, r4
 800a258:	6025      	str	r5, [r4, #0]
 800a25a:	bf18      	it	ne
 800a25c:	6059      	strne	r1, [r3, #4]
 800a25e:	6863      	ldr	r3, [r4, #4]
 800a260:	bf08      	it	eq
 800a262:	6031      	streq	r1, [r6, #0]
 800a264:	5162      	str	r2, [r4, r5]
 800a266:	604b      	str	r3, [r1, #4]
 800a268:	4638      	mov	r0, r7
 800a26a:	f104 060b 	add.w	r6, r4, #11
 800a26e:	f000 fc31 	bl	800aad4 <__malloc_unlock>
 800a272:	f026 0607 	bic.w	r6, r6, #7
 800a276:	1d23      	adds	r3, r4, #4
 800a278:	1af2      	subs	r2, r6, r3
 800a27a:	d0b6      	beq.n	800a1ea <_malloc_r+0x22>
 800a27c:	1b9b      	subs	r3, r3, r6
 800a27e:	50a3      	str	r3, [r4, r2]
 800a280:	e7b3      	b.n	800a1ea <_malloc_r+0x22>
 800a282:	6862      	ldr	r2, [r4, #4]
 800a284:	42a3      	cmp	r3, r4
 800a286:	bf0c      	ite	eq
 800a288:	6032      	streq	r2, [r6, #0]
 800a28a:	605a      	strne	r2, [r3, #4]
 800a28c:	e7ec      	b.n	800a268 <_malloc_r+0xa0>
 800a28e:	4623      	mov	r3, r4
 800a290:	6864      	ldr	r4, [r4, #4]
 800a292:	e7b2      	b.n	800a1fa <_malloc_r+0x32>
 800a294:	4634      	mov	r4, r6
 800a296:	6876      	ldr	r6, [r6, #4]
 800a298:	e7b9      	b.n	800a20e <_malloc_r+0x46>
 800a29a:	230c      	movs	r3, #12
 800a29c:	603b      	str	r3, [r7, #0]
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f000 fc18 	bl	800aad4 <__malloc_unlock>
 800a2a4:	e7a1      	b.n	800a1ea <_malloc_r+0x22>
 800a2a6:	6025      	str	r5, [r4, #0]
 800a2a8:	e7de      	b.n	800a268 <_malloc_r+0xa0>
 800a2aa:	bf00      	nop
 800a2ac:	20001228 	.word	0x20001228

0800a2b0 <__sfputc_r>:
 800a2b0:	6893      	ldr	r3, [r2, #8]
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	b410      	push	{r4}
 800a2b8:	6093      	str	r3, [r2, #8]
 800a2ba:	da08      	bge.n	800a2ce <__sfputc_r+0x1e>
 800a2bc:	6994      	ldr	r4, [r2, #24]
 800a2be:	42a3      	cmp	r3, r4
 800a2c0:	db01      	blt.n	800a2c6 <__sfputc_r+0x16>
 800a2c2:	290a      	cmp	r1, #10
 800a2c4:	d103      	bne.n	800a2ce <__sfputc_r+0x1e>
 800a2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2ca:	f000 b99f 	b.w	800a60c <__swbuf_r>
 800a2ce:	6813      	ldr	r3, [r2, #0]
 800a2d0:	1c58      	adds	r0, r3, #1
 800a2d2:	6010      	str	r0, [r2, #0]
 800a2d4:	7019      	strb	r1, [r3, #0]
 800a2d6:	4608      	mov	r0, r1
 800a2d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <__sfputs_r>:
 800a2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e0:	4606      	mov	r6, r0
 800a2e2:	460f      	mov	r7, r1
 800a2e4:	4614      	mov	r4, r2
 800a2e6:	18d5      	adds	r5, r2, r3
 800a2e8:	42ac      	cmp	r4, r5
 800a2ea:	d101      	bne.n	800a2f0 <__sfputs_r+0x12>
 800a2ec:	2000      	movs	r0, #0
 800a2ee:	e007      	b.n	800a300 <__sfputs_r+0x22>
 800a2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f4:	463a      	mov	r2, r7
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f7ff ffda 	bl	800a2b0 <__sfputc_r>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d1f3      	bne.n	800a2e8 <__sfputs_r+0xa>
 800a300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a304 <_vfiprintf_r>:
 800a304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	460d      	mov	r5, r1
 800a30a:	b09d      	sub	sp, #116	; 0x74
 800a30c:	4614      	mov	r4, r2
 800a30e:	4698      	mov	r8, r3
 800a310:	4606      	mov	r6, r0
 800a312:	b118      	cbz	r0, 800a31c <_vfiprintf_r+0x18>
 800a314:	6983      	ldr	r3, [r0, #24]
 800a316:	b90b      	cbnz	r3, 800a31c <_vfiprintf_r+0x18>
 800a318:	f7ff fa94 	bl	8009844 <__sinit>
 800a31c:	4b89      	ldr	r3, [pc, #548]	; (800a544 <_vfiprintf_r+0x240>)
 800a31e:	429d      	cmp	r5, r3
 800a320:	d11b      	bne.n	800a35a <_vfiprintf_r+0x56>
 800a322:	6875      	ldr	r5, [r6, #4]
 800a324:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a326:	07d9      	lsls	r1, r3, #31
 800a328:	d405      	bmi.n	800a336 <_vfiprintf_r+0x32>
 800a32a:	89ab      	ldrh	r3, [r5, #12]
 800a32c:	059a      	lsls	r2, r3, #22
 800a32e:	d402      	bmi.n	800a336 <_vfiprintf_r+0x32>
 800a330:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a332:	f7ff fb2a 	bl	800998a <__retarget_lock_acquire_recursive>
 800a336:	89ab      	ldrh	r3, [r5, #12]
 800a338:	071b      	lsls	r3, r3, #28
 800a33a:	d501      	bpl.n	800a340 <_vfiprintf_r+0x3c>
 800a33c:	692b      	ldr	r3, [r5, #16]
 800a33e:	b9eb      	cbnz	r3, 800a37c <_vfiprintf_r+0x78>
 800a340:	4629      	mov	r1, r5
 800a342:	4630      	mov	r0, r6
 800a344:	f000 f9c6 	bl	800a6d4 <__swsetup_r>
 800a348:	b1c0      	cbz	r0, 800a37c <_vfiprintf_r+0x78>
 800a34a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a34c:	07dc      	lsls	r4, r3, #31
 800a34e:	d50e      	bpl.n	800a36e <_vfiprintf_r+0x6a>
 800a350:	f04f 30ff 	mov.w	r0, #4294967295
 800a354:	b01d      	add	sp, #116	; 0x74
 800a356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35a:	4b7b      	ldr	r3, [pc, #492]	; (800a548 <_vfiprintf_r+0x244>)
 800a35c:	429d      	cmp	r5, r3
 800a35e:	d101      	bne.n	800a364 <_vfiprintf_r+0x60>
 800a360:	68b5      	ldr	r5, [r6, #8]
 800a362:	e7df      	b.n	800a324 <_vfiprintf_r+0x20>
 800a364:	4b79      	ldr	r3, [pc, #484]	; (800a54c <_vfiprintf_r+0x248>)
 800a366:	429d      	cmp	r5, r3
 800a368:	bf08      	it	eq
 800a36a:	68f5      	ldreq	r5, [r6, #12]
 800a36c:	e7da      	b.n	800a324 <_vfiprintf_r+0x20>
 800a36e:	89ab      	ldrh	r3, [r5, #12]
 800a370:	0598      	lsls	r0, r3, #22
 800a372:	d4ed      	bmi.n	800a350 <_vfiprintf_r+0x4c>
 800a374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a376:	f7ff fb09 	bl	800998c <__retarget_lock_release_recursive>
 800a37a:	e7e9      	b.n	800a350 <_vfiprintf_r+0x4c>
 800a37c:	2300      	movs	r3, #0
 800a37e:	9309      	str	r3, [sp, #36]	; 0x24
 800a380:	2320      	movs	r3, #32
 800a382:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a386:	f8cd 800c 	str.w	r8, [sp, #12]
 800a38a:	2330      	movs	r3, #48	; 0x30
 800a38c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a550 <_vfiprintf_r+0x24c>
 800a390:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a394:	f04f 0901 	mov.w	r9, #1
 800a398:	4623      	mov	r3, r4
 800a39a:	469a      	mov	sl, r3
 800a39c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3a0:	b10a      	cbz	r2, 800a3a6 <_vfiprintf_r+0xa2>
 800a3a2:	2a25      	cmp	r2, #37	; 0x25
 800a3a4:	d1f9      	bne.n	800a39a <_vfiprintf_r+0x96>
 800a3a6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3aa:	d00b      	beq.n	800a3c4 <_vfiprintf_r+0xc0>
 800a3ac:	465b      	mov	r3, fp
 800a3ae:	4622      	mov	r2, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f7ff ff93 	bl	800a2de <__sfputs_r>
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	f000 80aa 	beq.w	800a512 <_vfiprintf_r+0x20e>
 800a3be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c0:	445a      	add	r2, fp
 800a3c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 80a2 	beq.w	800a512 <_vfiprintf_r+0x20e>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3d8:	f10a 0a01 	add.w	sl, sl, #1
 800a3dc:	9304      	str	r3, [sp, #16]
 800a3de:	9307      	str	r3, [sp, #28]
 800a3e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3e4:	931a      	str	r3, [sp, #104]	; 0x68
 800a3e6:	4654      	mov	r4, sl
 800a3e8:	2205      	movs	r2, #5
 800a3ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3ee:	4858      	ldr	r0, [pc, #352]	; (800a550 <_vfiprintf_r+0x24c>)
 800a3f0:	f7f5 ff06 	bl	8000200 <memchr>
 800a3f4:	9a04      	ldr	r2, [sp, #16]
 800a3f6:	b9d8      	cbnz	r0, 800a430 <_vfiprintf_r+0x12c>
 800a3f8:	06d1      	lsls	r1, r2, #27
 800a3fa:	bf44      	itt	mi
 800a3fc:	2320      	movmi	r3, #32
 800a3fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a402:	0713      	lsls	r3, r2, #28
 800a404:	bf44      	itt	mi
 800a406:	232b      	movmi	r3, #43	; 0x2b
 800a408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a40c:	f89a 3000 	ldrb.w	r3, [sl]
 800a410:	2b2a      	cmp	r3, #42	; 0x2a
 800a412:	d015      	beq.n	800a440 <_vfiprintf_r+0x13c>
 800a414:	9a07      	ldr	r2, [sp, #28]
 800a416:	4654      	mov	r4, sl
 800a418:	2000      	movs	r0, #0
 800a41a:	f04f 0c0a 	mov.w	ip, #10
 800a41e:	4621      	mov	r1, r4
 800a420:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a424:	3b30      	subs	r3, #48	; 0x30
 800a426:	2b09      	cmp	r3, #9
 800a428:	d94e      	bls.n	800a4c8 <_vfiprintf_r+0x1c4>
 800a42a:	b1b0      	cbz	r0, 800a45a <_vfiprintf_r+0x156>
 800a42c:	9207      	str	r2, [sp, #28]
 800a42e:	e014      	b.n	800a45a <_vfiprintf_r+0x156>
 800a430:	eba0 0308 	sub.w	r3, r0, r8
 800a434:	fa09 f303 	lsl.w	r3, r9, r3
 800a438:	4313      	orrs	r3, r2
 800a43a:	9304      	str	r3, [sp, #16]
 800a43c:	46a2      	mov	sl, r4
 800a43e:	e7d2      	b.n	800a3e6 <_vfiprintf_r+0xe2>
 800a440:	9b03      	ldr	r3, [sp, #12]
 800a442:	1d19      	adds	r1, r3, #4
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	9103      	str	r1, [sp, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	bfbb      	ittet	lt
 800a44c:	425b      	neglt	r3, r3
 800a44e:	f042 0202 	orrlt.w	r2, r2, #2
 800a452:	9307      	strge	r3, [sp, #28]
 800a454:	9307      	strlt	r3, [sp, #28]
 800a456:	bfb8      	it	lt
 800a458:	9204      	strlt	r2, [sp, #16]
 800a45a:	7823      	ldrb	r3, [r4, #0]
 800a45c:	2b2e      	cmp	r3, #46	; 0x2e
 800a45e:	d10c      	bne.n	800a47a <_vfiprintf_r+0x176>
 800a460:	7863      	ldrb	r3, [r4, #1]
 800a462:	2b2a      	cmp	r3, #42	; 0x2a
 800a464:	d135      	bne.n	800a4d2 <_vfiprintf_r+0x1ce>
 800a466:	9b03      	ldr	r3, [sp, #12]
 800a468:	1d1a      	adds	r2, r3, #4
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	9203      	str	r2, [sp, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	bfb8      	it	lt
 800a472:	f04f 33ff 	movlt.w	r3, #4294967295
 800a476:	3402      	adds	r4, #2
 800a478:	9305      	str	r3, [sp, #20]
 800a47a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a560 <_vfiprintf_r+0x25c>
 800a47e:	7821      	ldrb	r1, [r4, #0]
 800a480:	2203      	movs	r2, #3
 800a482:	4650      	mov	r0, sl
 800a484:	f7f5 febc 	bl	8000200 <memchr>
 800a488:	b140      	cbz	r0, 800a49c <_vfiprintf_r+0x198>
 800a48a:	2340      	movs	r3, #64	; 0x40
 800a48c:	eba0 000a 	sub.w	r0, r0, sl
 800a490:	fa03 f000 	lsl.w	r0, r3, r0
 800a494:	9b04      	ldr	r3, [sp, #16]
 800a496:	4303      	orrs	r3, r0
 800a498:	3401      	adds	r4, #1
 800a49a:	9304      	str	r3, [sp, #16]
 800a49c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a0:	482c      	ldr	r0, [pc, #176]	; (800a554 <_vfiprintf_r+0x250>)
 800a4a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4a6:	2206      	movs	r2, #6
 800a4a8:	f7f5 feaa 	bl	8000200 <memchr>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d03f      	beq.n	800a530 <_vfiprintf_r+0x22c>
 800a4b0:	4b29      	ldr	r3, [pc, #164]	; (800a558 <_vfiprintf_r+0x254>)
 800a4b2:	bb1b      	cbnz	r3, 800a4fc <_vfiprintf_r+0x1f8>
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	3307      	adds	r3, #7
 800a4b8:	f023 0307 	bic.w	r3, r3, #7
 800a4bc:	3308      	adds	r3, #8
 800a4be:	9303      	str	r3, [sp, #12]
 800a4c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4c2:	443b      	add	r3, r7
 800a4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800a4c6:	e767      	b.n	800a398 <_vfiprintf_r+0x94>
 800a4c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4cc:	460c      	mov	r4, r1
 800a4ce:	2001      	movs	r0, #1
 800a4d0:	e7a5      	b.n	800a41e <_vfiprintf_r+0x11a>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	3401      	adds	r4, #1
 800a4d6:	9305      	str	r3, [sp, #20]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f04f 0c0a 	mov.w	ip, #10
 800a4de:	4620      	mov	r0, r4
 800a4e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4e4:	3a30      	subs	r2, #48	; 0x30
 800a4e6:	2a09      	cmp	r2, #9
 800a4e8:	d903      	bls.n	800a4f2 <_vfiprintf_r+0x1ee>
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d0c5      	beq.n	800a47a <_vfiprintf_r+0x176>
 800a4ee:	9105      	str	r1, [sp, #20]
 800a4f0:	e7c3      	b.n	800a47a <_vfiprintf_r+0x176>
 800a4f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e7f0      	b.n	800a4de <_vfiprintf_r+0x1da>
 800a4fc:	ab03      	add	r3, sp, #12
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	462a      	mov	r2, r5
 800a502:	4b16      	ldr	r3, [pc, #88]	; (800a55c <_vfiprintf_r+0x258>)
 800a504:	a904      	add	r1, sp, #16
 800a506:	4630      	mov	r0, r6
 800a508:	f7fd fed0 	bl	80082ac <_printf_float>
 800a50c:	4607      	mov	r7, r0
 800a50e:	1c78      	adds	r0, r7, #1
 800a510:	d1d6      	bne.n	800a4c0 <_vfiprintf_r+0x1bc>
 800a512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a514:	07d9      	lsls	r1, r3, #31
 800a516:	d405      	bmi.n	800a524 <_vfiprintf_r+0x220>
 800a518:	89ab      	ldrh	r3, [r5, #12]
 800a51a:	059a      	lsls	r2, r3, #22
 800a51c:	d402      	bmi.n	800a524 <_vfiprintf_r+0x220>
 800a51e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a520:	f7ff fa34 	bl	800998c <__retarget_lock_release_recursive>
 800a524:	89ab      	ldrh	r3, [r5, #12]
 800a526:	065b      	lsls	r3, r3, #25
 800a528:	f53f af12 	bmi.w	800a350 <_vfiprintf_r+0x4c>
 800a52c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a52e:	e711      	b.n	800a354 <_vfiprintf_r+0x50>
 800a530:	ab03      	add	r3, sp, #12
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	462a      	mov	r2, r5
 800a536:	4b09      	ldr	r3, [pc, #36]	; (800a55c <_vfiprintf_r+0x258>)
 800a538:	a904      	add	r1, sp, #16
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7fe f95a 	bl	80087f4 <_printf_i>
 800a540:	e7e4      	b.n	800a50c <_vfiprintf_r+0x208>
 800a542:	bf00      	nop
 800a544:	0800d128 	.word	0x0800d128
 800a548:	0800d148 	.word	0x0800d148
 800a54c:	0800d108 	.word	0x0800d108
 800a550:	0800d2c4 	.word	0x0800d2c4
 800a554:	0800d2ce 	.word	0x0800d2ce
 800a558:	080082ad 	.word	0x080082ad
 800a55c:	0800a2df 	.word	0x0800a2df
 800a560:	0800d2ca 	.word	0x0800d2ca

0800a564 <_sbrk_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d06      	ldr	r5, [pc, #24]	; (800a580 <_sbrk_r+0x1c>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	f7fd fcc8 	bl	8007f04 <_sbrk>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_sbrk_r+0x1a>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_sbrk_r+0x1a>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	20001230 	.word	0x20001230

0800a584 <__sread>:
 800a584:	b510      	push	{r4, lr}
 800a586:	460c      	mov	r4, r1
 800a588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58c:	f000 faa8 	bl	800aae0 <_read_r>
 800a590:	2800      	cmp	r0, #0
 800a592:	bfab      	itete	ge
 800a594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a596:	89a3      	ldrhlt	r3, [r4, #12]
 800a598:	181b      	addge	r3, r3, r0
 800a59a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a59e:	bfac      	ite	ge
 800a5a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5a2:	81a3      	strhlt	r3, [r4, #12]
 800a5a4:	bd10      	pop	{r4, pc}

0800a5a6 <__swrite>:
 800a5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5aa:	461f      	mov	r7, r3
 800a5ac:	898b      	ldrh	r3, [r1, #12]
 800a5ae:	05db      	lsls	r3, r3, #23
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	4616      	mov	r6, r2
 800a5b6:	d505      	bpl.n	800a5c4 <__swrite+0x1e>
 800a5b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5bc:	2302      	movs	r3, #2
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f000 f9f8 	bl	800a9b4 <_lseek_r>
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5ce:	81a3      	strh	r3, [r4, #12]
 800a5d0:	4632      	mov	r2, r6
 800a5d2:	463b      	mov	r3, r7
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5da:	f000 b869 	b.w	800a6b0 <_write_r>

0800a5de <__sseek>:
 800a5de:	b510      	push	{r4, lr}
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e6:	f000 f9e5 	bl	800a9b4 <_lseek_r>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	bf15      	itete	ne
 800a5f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5fa:	81a3      	strheq	r3, [r4, #12]
 800a5fc:	bf18      	it	ne
 800a5fe:	81a3      	strhne	r3, [r4, #12]
 800a600:	bd10      	pop	{r4, pc}

0800a602 <__sclose>:
 800a602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a606:	f000 b8f1 	b.w	800a7ec <_close_r>
	...

0800a60c <__swbuf_r>:
 800a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60e:	460e      	mov	r6, r1
 800a610:	4614      	mov	r4, r2
 800a612:	4605      	mov	r5, r0
 800a614:	b118      	cbz	r0, 800a61e <__swbuf_r+0x12>
 800a616:	6983      	ldr	r3, [r0, #24]
 800a618:	b90b      	cbnz	r3, 800a61e <__swbuf_r+0x12>
 800a61a:	f7ff f913 	bl	8009844 <__sinit>
 800a61e:	4b21      	ldr	r3, [pc, #132]	; (800a6a4 <__swbuf_r+0x98>)
 800a620:	429c      	cmp	r4, r3
 800a622:	d12b      	bne.n	800a67c <__swbuf_r+0x70>
 800a624:	686c      	ldr	r4, [r5, #4]
 800a626:	69a3      	ldr	r3, [r4, #24]
 800a628:	60a3      	str	r3, [r4, #8]
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	071a      	lsls	r2, r3, #28
 800a62e:	d52f      	bpl.n	800a690 <__swbuf_r+0x84>
 800a630:	6923      	ldr	r3, [r4, #16]
 800a632:	b36b      	cbz	r3, 800a690 <__swbuf_r+0x84>
 800a634:	6923      	ldr	r3, [r4, #16]
 800a636:	6820      	ldr	r0, [r4, #0]
 800a638:	1ac0      	subs	r0, r0, r3
 800a63a:	6963      	ldr	r3, [r4, #20]
 800a63c:	b2f6      	uxtb	r6, r6
 800a63e:	4283      	cmp	r3, r0
 800a640:	4637      	mov	r7, r6
 800a642:	dc04      	bgt.n	800a64e <__swbuf_r+0x42>
 800a644:	4621      	mov	r1, r4
 800a646:	4628      	mov	r0, r5
 800a648:	f000 f966 	bl	800a918 <_fflush_r>
 800a64c:	bb30      	cbnz	r0, 800a69c <__swbuf_r+0x90>
 800a64e:	68a3      	ldr	r3, [r4, #8]
 800a650:	3b01      	subs	r3, #1
 800a652:	60a3      	str	r3, [r4, #8]
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	1c5a      	adds	r2, r3, #1
 800a658:	6022      	str	r2, [r4, #0]
 800a65a:	701e      	strb	r6, [r3, #0]
 800a65c:	6963      	ldr	r3, [r4, #20]
 800a65e:	3001      	adds	r0, #1
 800a660:	4283      	cmp	r3, r0
 800a662:	d004      	beq.n	800a66e <__swbuf_r+0x62>
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	07db      	lsls	r3, r3, #31
 800a668:	d506      	bpl.n	800a678 <__swbuf_r+0x6c>
 800a66a:	2e0a      	cmp	r6, #10
 800a66c:	d104      	bne.n	800a678 <__swbuf_r+0x6c>
 800a66e:	4621      	mov	r1, r4
 800a670:	4628      	mov	r0, r5
 800a672:	f000 f951 	bl	800a918 <_fflush_r>
 800a676:	b988      	cbnz	r0, 800a69c <__swbuf_r+0x90>
 800a678:	4638      	mov	r0, r7
 800a67a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a67c:	4b0a      	ldr	r3, [pc, #40]	; (800a6a8 <__swbuf_r+0x9c>)
 800a67e:	429c      	cmp	r4, r3
 800a680:	d101      	bne.n	800a686 <__swbuf_r+0x7a>
 800a682:	68ac      	ldr	r4, [r5, #8]
 800a684:	e7cf      	b.n	800a626 <__swbuf_r+0x1a>
 800a686:	4b09      	ldr	r3, [pc, #36]	; (800a6ac <__swbuf_r+0xa0>)
 800a688:	429c      	cmp	r4, r3
 800a68a:	bf08      	it	eq
 800a68c:	68ec      	ldreq	r4, [r5, #12]
 800a68e:	e7ca      	b.n	800a626 <__swbuf_r+0x1a>
 800a690:	4621      	mov	r1, r4
 800a692:	4628      	mov	r0, r5
 800a694:	f000 f81e 	bl	800a6d4 <__swsetup_r>
 800a698:	2800      	cmp	r0, #0
 800a69a:	d0cb      	beq.n	800a634 <__swbuf_r+0x28>
 800a69c:	f04f 37ff 	mov.w	r7, #4294967295
 800a6a0:	e7ea      	b.n	800a678 <__swbuf_r+0x6c>
 800a6a2:	bf00      	nop
 800a6a4:	0800d128 	.word	0x0800d128
 800a6a8:	0800d148 	.word	0x0800d148
 800a6ac:	0800d108 	.word	0x0800d108

0800a6b0 <_write_r>:
 800a6b0:	b538      	push	{r3, r4, r5, lr}
 800a6b2:	4d07      	ldr	r5, [pc, #28]	; (800a6d0 <_write_r+0x20>)
 800a6b4:	4604      	mov	r4, r0
 800a6b6:	4608      	mov	r0, r1
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	602a      	str	r2, [r5, #0]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f7fd fbd0 	bl	8007e64 <_write>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d102      	bne.n	800a6ce <_write_r+0x1e>
 800a6c8:	682b      	ldr	r3, [r5, #0]
 800a6ca:	b103      	cbz	r3, 800a6ce <_write_r+0x1e>
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	bd38      	pop	{r3, r4, r5, pc}
 800a6d0:	20001230 	.word	0x20001230

0800a6d4 <__swsetup_r>:
 800a6d4:	4b32      	ldr	r3, [pc, #200]	; (800a7a0 <__swsetup_r+0xcc>)
 800a6d6:	b570      	push	{r4, r5, r6, lr}
 800a6d8:	681d      	ldr	r5, [r3, #0]
 800a6da:	4606      	mov	r6, r0
 800a6dc:	460c      	mov	r4, r1
 800a6de:	b125      	cbz	r5, 800a6ea <__swsetup_r+0x16>
 800a6e0:	69ab      	ldr	r3, [r5, #24]
 800a6e2:	b913      	cbnz	r3, 800a6ea <__swsetup_r+0x16>
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	f7ff f8ad 	bl	8009844 <__sinit>
 800a6ea:	4b2e      	ldr	r3, [pc, #184]	; (800a7a4 <__swsetup_r+0xd0>)
 800a6ec:	429c      	cmp	r4, r3
 800a6ee:	d10f      	bne.n	800a710 <__swsetup_r+0x3c>
 800a6f0:	686c      	ldr	r4, [r5, #4]
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a6f8:	0719      	lsls	r1, r3, #28
 800a6fa:	d42c      	bmi.n	800a756 <__swsetup_r+0x82>
 800a6fc:	06dd      	lsls	r5, r3, #27
 800a6fe:	d411      	bmi.n	800a724 <__swsetup_r+0x50>
 800a700:	2309      	movs	r3, #9
 800a702:	6033      	str	r3, [r6, #0]
 800a704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a708:	81a3      	strh	r3, [r4, #12]
 800a70a:	f04f 30ff 	mov.w	r0, #4294967295
 800a70e:	e03e      	b.n	800a78e <__swsetup_r+0xba>
 800a710:	4b25      	ldr	r3, [pc, #148]	; (800a7a8 <__swsetup_r+0xd4>)
 800a712:	429c      	cmp	r4, r3
 800a714:	d101      	bne.n	800a71a <__swsetup_r+0x46>
 800a716:	68ac      	ldr	r4, [r5, #8]
 800a718:	e7eb      	b.n	800a6f2 <__swsetup_r+0x1e>
 800a71a:	4b24      	ldr	r3, [pc, #144]	; (800a7ac <__swsetup_r+0xd8>)
 800a71c:	429c      	cmp	r4, r3
 800a71e:	bf08      	it	eq
 800a720:	68ec      	ldreq	r4, [r5, #12]
 800a722:	e7e6      	b.n	800a6f2 <__swsetup_r+0x1e>
 800a724:	0758      	lsls	r0, r3, #29
 800a726:	d512      	bpl.n	800a74e <__swsetup_r+0x7a>
 800a728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a72a:	b141      	cbz	r1, 800a73e <__swsetup_r+0x6a>
 800a72c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a730:	4299      	cmp	r1, r3
 800a732:	d002      	beq.n	800a73a <__swsetup_r+0x66>
 800a734:	4630      	mov	r0, r6
 800a736:	f7ff fcdb 	bl	800a0f0 <_free_r>
 800a73a:	2300      	movs	r3, #0
 800a73c:	6363      	str	r3, [r4, #52]	; 0x34
 800a73e:	89a3      	ldrh	r3, [r4, #12]
 800a740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a744:	81a3      	strh	r3, [r4, #12]
 800a746:	2300      	movs	r3, #0
 800a748:	6063      	str	r3, [r4, #4]
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	89a3      	ldrh	r3, [r4, #12]
 800a750:	f043 0308 	orr.w	r3, r3, #8
 800a754:	81a3      	strh	r3, [r4, #12]
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	b94b      	cbnz	r3, 800a76e <__swsetup_r+0x9a>
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a764:	d003      	beq.n	800a76e <__swsetup_r+0x9a>
 800a766:	4621      	mov	r1, r4
 800a768:	4630      	mov	r0, r6
 800a76a:	f000 f95b 	bl	800aa24 <__smakebuf_r>
 800a76e:	89a0      	ldrh	r0, [r4, #12]
 800a770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a774:	f010 0301 	ands.w	r3, r0, #1
 800a778:	d00a      	beq.n	800a790 <__swsetup_r+0xbc>
 800a77a:	2300      	movs	r3, #0
 800a77c:	60a3      	str	r3, [r4, #8]
 800a77e:	6963      	ldr	r3, [r4, #20]
 800a780:	425b      	negs	r3, r3
 800a782:	61a3      	str	r3, [r4, #24]
 800a784:	6923      	ldr	r3, [r4, #16]
 800a786:	b943      	cbnz	r3, 800a79a <__swsetup_r+0xc6>
 800a788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a78c:	d1ba      	bne.n	800a704 <__swsetup_r+0x30>
 800a78e:	bd70      	pop	{r4, r5, r6, pc}
 800a790:	0781      	lsls	r1, r0, #30
 800a792:	bf58      	it	pl
 800a794:	6963      	ldrpl	r3, [r4, #20]
 800a796:	60a3      	str	r3, [r4, #8]
 800a798:	e7f4      	b.n	800a784 <__swsetup_r+0xb0>
 800a79a:	2000      	movs	r0, #0
 800a79c:	e7f7      	b.n	800a78e <__swsetup_r+0xba>
 800a79e:	bf00      	nop
 800a7a0:	20000bfc 	.word	0x20000bfc
 800a7a4:	0800d128 	.word	0x0800d128
 800a7a8:	0800d148 	.word	0x0800d148
 800a7ac:	0800d108 	.word	0x0800d108

0800a7b0 <__assert_func>:
 800a7b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7b2:	4614      	mov	r4, r2
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <__assert_func+0x2c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	68d8      	ldr	r0, [r3, #12]
 800a7be:	b14c      	cbz	r4, 800a7d4 <__assert_func+0x24>
 800a7c0:	4b07      	ldr	r3, [pc, #28]	; (800a7e0 <__assert_func+0x30>)
 800a7c2:	9100      	str	r1, [sp, #0]
 800a7c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7c8:	4906      	ldr	r1, [pc, #24]	; (800a7e4 <__assert_func+0x34>)
 800a7ca:	462b      	mov	r3, r5
 800a7cc:	f000 f8e0 	bl	800a990 <fiprintf>
 800a7d0:	f000 f9a5 	bl	800ab1e <abort>
 800a7d4:	4b04      	ldr	r3, [pc, #16]	; (800a7e8 <__assert_func+0x38>)
 800a7d6:	461c      	mov	r4, r3
 800a7d8:	e7f3      	b.n	800a7c2 <__assert_func+0x12>
 800a7da:	bf00      	nop
 800a7dc:	20000bfc 	.word	0x20000bfc
 800a7e0:	0800d2d5 	.word	0x0800d2d5
 800a7e4:	0800d2e2 	.word	0x0800d2e2
 800a7e8:	0800d310 	.word	0x0800d310

0800a7ec <_close_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4d06      	ldr	r5, [pc, #24]	; (800a808 <_close_r+0x1c>)
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4604      	mov	r4, r0
 800a7f4:	4608      	mov	r0, r1
 800a7f6:	602b      	str	r3, [r5, #0]
 800a7f8:	f7fd fb50 	bl	8007e9c <_close>
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	d102      	bne.n	800a806 <_close_r+0x1a>
 800a800:	682b      	ldr	r3, [r5, #0]
 800a802:	b103      	cbz	r3, 800a806 <_close_r+0x1a>
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	bd38      	pop	{r3, r4, r5, pc}
 800a808:	20001230 	.word	0x20001230

0800a80c <__sflush_r>:
 800a80c:	898a      	ldrh	r2, [r1, #12]
 800a80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a812:	4605      	mov	r5, r0
 800a814:	0710      	lsls	r0, r2, #28
 800a816:	460c      	mov	r4, r1
 800a818:	d458      	bmi.n	800a8cc <__sflush_r+0xc0>
 800a81a:	684b      	ldr	r3, [r1, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	dc05      	bgt.n	800a82c <__sflush_r+0x20>
 800a820:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a822:	2b00      	cmp	r3, #0
 800a824:	dc02      	bgt.n	800a82c <__sflush_r+0x20>
 800a826:	2000      	movs	r0, #0
 800a828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a82c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a82e:	2e00      	cmp	r6, #0
 800a830:	d0f9      	beq.n	800a826 <__sflush_r+0x1a>
 800a832:	2300      	movs	r3, #0
 800a834:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a838:	682f      	ldr	r7, [r5, #0]
 800a83a:	602b      	str	r3, [r5, #0]
 800a83c:	d032      	beq.n	800a8a4 <__sflush_r+0x98>
 800a83e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	075a      	lsls	r2, r3, #29
 800a844:	d505      	bpl.n	800a852 <__sflush_r+0x46>
 800a846:	6863      	ldr	r3, [r4, #4]
 800a848:	1ac0      	subs	r0, r0, r3
 800a84a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a84c:	b10b      	cbz	r3, 800a852 <__sflush_r+0x46>
 800a84e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a850:	1ac0      	subs	r0, r0, r3
 800a852:	2300      	movs	r3, #0
 800a854:	4602      	mov	r2, r0
 800a856:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a858:	6a21      	ldr	r1, [r4, #32]
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b0      	blx	r6
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	d106      	bne.n	800a872 <__sflush_r+0x66>
 800a864:	6829      	ldr	r1, [r5, #0]
 800a866:	291d      	cmp	r1, #29
 800a868:	d82c      	bhi.n	800a8c4 <__sflush_r+0xb8>
 800a86a:	4a2a      	ldr	r2, [pc, #168]	; (800a914 <__sflush_r+0x108>)
 800a86c:	40ca      	lsrs	r2, r1
 800a86e:	07d6      	lsls	r6, r2, #31
 800a870:	d528      	bpl.n	800a8c4 <__sflush_r+0xb8>
 800a872:	2200      	movs	r2, #0
 800a874:	6062      	str	r2, [r4, #4]
 800a876:	04d9      	lsls	r1, r3, #19
 800a878:	6922      	ldr	r2, [r4, #16]
 800a87a:	6022      	str	r2, [r4, #0]
 800a87c:	d504      	bpl.n	800a888 <__sflush_r+0x7c>
 800a87e:	1c42      	adds	r2, r0, #1
 800a880:	d101      	bne.n	800a886 <__sflush_r+0x7a>
 800a882:	682b      	ldr	r3, [r5, #0]
 800a884:	b903      	cbnz	r3, 800a888 <__sflush_r+0x7c>
 800a886:	6560      	str	r0, [r4, #84]	; 0x54
 800a888:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a88a:	602f      	str	r7, [r5, #0]
 800a88c:	2900      	cmp	r1, #0
 800a88e:	d0ca      	beq.n	800a826 <__sflush_r+0x1a>
 800a890:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a894:	4299      	cmp	r1, r3
 800a896:	d002      	beq.n	800a89e <__sflush_r+0x92>
 800a898:	4628      	mov	r0, r5
 800a89a:	f7ff fc29 	bl	800a0f0 <_free_r>
 800a89e:	2000      	movs	r0, #0
 800a8a0:	6360      	str	r0, [r4, #52]	; 0x34
 800a8a2:	e7c1      	b.n	800a828 <__sflush_r+0x1c>
 800a8a4:	6a21      	ldr	r1, [r4, #32]
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	47b0      	blx	r6
 800a8ac:	1c41      	adds	r1, r0, #1
 800a8ae:	d1c7      	bne.n	800a840 <__sflush_r+0x34>
 800a8b0:	682b      	ldr	r3, [r5, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0c4      	beq.n	800a840 <__sflush_r+0x34>
 800a8b6:	2b1d      	cmp	r3, #29
 800a8b8:	d001      	beq.n	800a8be <__sflush_r+0xb2>
 800a8ba:	2b16      	cmp	r3, #22
 800a8bc:	d101      	bne.n	800a8c2 <__sflush_r+0xb6>
 800a8be:	602f      	str	r7, [r5, #0]
 800a8c0:	e7b1      	b.n	800a826 <__sflush_r+0x1a>
 800a8c2:	89a3      	ldrh	r3, [r4, #12]
 800a8c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c8:	81a3      	strh	r3, [r4, #12]
 800a8ca:	e7ad      	b.n	800a828 <__sflush_r+0x1c>
 800a8cc:	690f      	ldr	r7, [r1, #16]
 800a8ce:	2f00      	cmp	r7, #0
 800a8d0:	d0a9      	beq.n	800a826 <__sflush_r+0x1a>
 800a8d2:	0793      	lsls	r3, r2, #30
 800a8d4:	680e      	ldr	r6, [r1, #0]
 800a8d6:	bf08      	it	eq
 800a8d8:	694b      	ldreq	r3, [r1, #20]
 800a8da:	600f      	str	r7, [r1, #0]
 800a8dc:	bf18      	it	ne
 800a8de:	2300      	movne	r3, #0
 800a8e0:	eba6 0807 	sub.w	r8, r6, r7
 800a8e4:	608b      	str	r3, [r1, #8]
 800a8e6:	f1b8 0f00 	cmp.w	r8, #0
 800a8ea:	dd9c      	ble.n	800a826 <__sflush_r+0x1a>
 800a8ec:	6a21      	ldr	r1, [r4, #32]
 800a8ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8f0:	4643      	mov	r3, r8
 800a8f2:	463a      	mov	r2, r7
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	47b0      	blx	r6
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	dc06      	bgt.n	800a90a <__sflush_r+0xfe>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a902:	81a3      	strh	r3, [r4, #12]
 800a904:	f04f 30ff 	mov.w	r0, #4294967295
 800a908:	e78e      	b.n	800a828 <__sflush_r+0x1c>
 800a90a:	4407      	add	r7, r0
 800a90c:	eba8 0800 	sub.w	r8, r8, r0
 800a910:	e7e9      	b.n	800a8e6 <__sflush_r+0xda>
 800a912:	bf00      	nop
 800a914:	20400001 	.word	0x20400001

0800a918 <_fflush_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	690b      	ldr	r3, [r1, #16]
 800a91c:	4605      	mov	r5, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	b913      	cbnz	r3, 800a928 <_fflush_r+0x10>
 800a922:	2500      	movs	r5, #0
 800a924:	4628      	mov	r0, r5
 800a926:	bd38      	pop	{r3, r4, r5, pc}
 800a928:	b118      	cbz	r0, 800a932 <_fflush_r+0x1a>
 800a92a:	6983      	ldr	r3, [r0, #24]
 800a92c:	b90b      	cbnz	r3, 800a932 <_fflush_r+0x1a>
 800a92e:	f7fe ff89 	bl	8009844 <__sinit>
 800a932:	4b14      	ldr	r3, [pc, #80]	; (800a984 <_fflush_r+0x6c>)
 800a934:	429c      	cmp	r4, r3
 800a936:	d11b      	bne.n	800a970 <_fflush_r+0x58>
 800a938:	686c      	ldr	r4, [r5, #4]
 800a93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d0ef      	beq.n	800a922 <_fflush_r+0xa>
 800a942:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a944:	07d0      	lsls	r0, r2, #31
 800a946:	d404      	bmi.n	800a952 <_fflush_r+0x3a>
 800a948:	0599      	lsls	r1, r3, #22
 800a94a:	d402      	bmi.n	800a952 <_fflush_r+0x3a>
 800a94c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a94e:	f7ff f81c 	bl	800998a <__retarget_lock_acquire_recursive>
 800a952:	4628      	mov	r0, r5
 800a954:	4621      	mov	r1, r4
 800a956:	f7ff ff59 	bl	800a80c <__sflush_r>
 800a95a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a95c:	07da      	lsls	r2, r3, #31
 800a95e:	4605      	mov	r5, r0
 800a960:	d4e0      	bmi.n	800a924 <_fflush_r+0xc>
 800a962:	89a3      	ldrh	r3, [r4, #12]
 800a964:	059b      	lsls	r3, r3, #22
 800a966:	d4dd      	bmi.n	800a924 <_fflush_r+0xc>
 800a968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a96a:	f7ff f80f 	bl	800998c <__retarget_lock_release_recursive>
 800a96e:	e7d9      	b.n	800a924 <_fflush_r+0xc>
 800a970:	4b05      	ldr	r3, [pc, #20]	; (800a988 <_fflush_r+0x70>)
 800a972:	429c      	cmp	r4, r3
 800a974:	d101      	bne.n	800a97a <_fflush_r+0x62>
 800a976:	68ac      	ldr	r4, [r5, #8]
 800a978:	e7df      	b.n	800a93a <_fflush_r+0x22>
 800a97a:	4b04      	ldr	r3, [pc, #16]	; (800a98c <_fflush_r+0x74>)
 800a97c:	429c      	cmp	r4, r3
 800a97e:	bf08      	it	eq
 800a980:	68ec      	ldreq	r4, [r5, #12]
 800a982:	e7da      	b.n	800a93a <_fflush_r+0x22>
 800a984:	0800d128 	.word	0x0800d128
 800a988:	0800d148 	.word	0x0800d148
 800a98c:	0800d108 	.word	0x0800d108

0800a990 <fiprintf>:
 800a990:	b40e      	push	{r1, r2, r3}
 800a992:	b503      	push	{r0, r1, lr}
 800a994:	4601      	mov	r1, r0
 800a996:	ab03      	add	r3, sp, #12
 800a998:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <fiprintf+0x20>)
 800a99a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a99e:	6800      	ldr	r0, [r0, #0]
 800a9a0:	9301      	str	r3, [sp, #4]
 800a9a2:	f7ff fcaf 	bl	800a304 <_vfiprintf_r>
 800a9a6:	b002      	add	sp, #8
 800a9a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9ac:	b003      	add	sp, #12
 800a9ae:	4770      	bx	lr
 800a9b0:	20000bfc 	.word	0x20000bfc

0800a9b4 <_lseek_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4d07      	ldr	r5, [pc, #28]	; (800a9d4 <_lseek_r+0x20>)
 800a9b8:	4604      	mov	r4, r0
 800a9ba:	4608      	mov	r0, r1
 800a9bc:	4611      	mov	r1, r2
 800a9be:	2200      	movs	r2, #0
 800a9c0:	602a      	str	r2, [r5, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	f7fd fa91 	bl	8007eea <_lseek>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d102      	bne.n	800a9d2 <_lseek_r+0x1e>
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	b103      	cbz	r3, 800a9d2 <_lseek_r+0x1e>
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	20001230 	.word	0x20001230

0800a9d8 <__swhatbuf_r>:
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	460e      	mov	r6, r1
 800a9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e0:	2900      	cmp	r1, #0
 800a9e2:	b096      	sub	sp, #88	; 0x58
 800a9e4:	4614      	mov	r4, r2
 800a9e6:	461d      	mov	r5, r3
 800a9e8:	da08      	bge.n	800a9fc <__swhatbuf_r+0x24>
 800a9ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	602a      	str	r2, [r5, #0]
 800a9f2:	061a      	lsls	r2, r3, #24
 800a9f4:	d410      	bmi.n	800aa18 <__swhatbuf_r+0x40>
 800a9f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9fa:	e00e      	b.n	800aa1a <__swhatbuf_r+0x42>
 800a9fc:	466a      	mov	r2, sp
 800a9fe:	f000 f895 	bl	800ab2c <_fstat_r>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	dbf1      	blt.n	800a9ea <__swhatbuf_r+0x12>
 800aa06:	9a01      	ldr	r2, [sp, #4]
 800aa08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa10:	425a      	negs	r2, r3
 800aa12:	415a      	adcs	r2, r3
 800aa14:	602a      	str	r2, [r5, #0]
 800aa16:	e7ee      	b.n	800a9f6 <__swhatbuf_r+0x1e>
 800aa18:	2340      	movs	r3, #64	; 0x40
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	b016      	add	sp, #88	; 0x58
 800aa20:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa24 <__smakebuf_r>:
 800aa24:	898b      	ldrh	r3, [r1, #12]
 800aa26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa28:	079d      	lsls	r5, r3, #30
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	d507      	bpl.n	800aa40 <__smakebuf_r+0x1c>
 800aa30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	6123      	str	r3, [r4, #16]
 800aa38:	2301      	movs	r3, #1
 800aa3a:	6163      	str	r3, [r4, #20]
 800aa3c:	b002      	add	sp, #8
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}
 800aa40:	ab01      	add	r3, sp, #4
 800aa42:	466a      	mov	r2, sp
 800aa44:	f7ff ffc8 	bl	800a9d8 <__swhatbuf_r>
 800aa48:	9900      	ldr	r1, [sp, #0]
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	f7ff fbbb 	bl	800a1c8 <_malloc_r>
 800aa52:	b948      	cbnz	r0, 800aa68 <__smakebuf_r+0x44>
 800aa54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa58:	059a      	lsls	r2, r3, #22
 800aa5a:	d4ef      	bmi.n	800aa3c <__smakebuf_r+0x18>
 800aa5c:	f023 0303 	bic.w	r3, r3, #3
 800aa60:	f043 0302 	orr.w	r3, r3, #2
 800aa64:	81a3      	strh	r3, [r4, #12]
 800aa66:	e7e3      	b.n	800aa30 <__smakebuf_r+0xc>
 800aa68:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <__smakebuf_r+0x7c>)
 800aa6a:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	6020      	str	r0, [r4, #0]
 800aa70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa74:	81a3      	strh	r3, [r4, #12]
 800aa76:	9b00      	ldr	r3, [sp, #0]
 800aa78:	6163      	str	r3, [r4, #20]
 800aa7a:	9b01      	ldr	r3, [sp, #4]
 800aa7c:	6120      	str	r0, [r4, #16]
 800aa7e:	b15b      	cbz	r3, 800aa98 <__smakebuf_r+0x74>
 800aa80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa84:	4630      	mov	r0, r6
 800aa86:	f000 f863 	bl	800ab50 <_isatty_r>
 800aa8a:	b128      	cbz	r0, 800aa98 <__smakebuf_r+0x74>
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	f023 0303 	bic.w	r3, r3, #3
 800aa92:	f043 0301 	orr.w	r3, r3, #1
 800aa96:	81a3      	strh	r3, [r4, #12]
 800aa98:	89a0      	ldrh	r0, [r4, #12]
 800aa9a:	4305      	orrs	r5, r0
 800aa9c:	81a5      	strh	r5, [r4, #12]
 800aa9e:	e7cd      	b.n	800aa3c <__smakebuf_r+0x18>
 800aaa0:	080097dd 	.word	0x080097dd

0800aaa4 <__ascii_mbtowc>:
 800aaa4:	b082      	sub	sp, #8
 800aaa6:	b901      	cbnz	r1, 800aaaa <__ascii_mbtowc+0x6>
 800aaa8:	a901      	add	r1, sp, #4
 800aaaa:	b142      	cbz	r2, 800aabe <__ascii_mbtowc+0x1a>
 800aaac:	b14b      	cbz	r3, 800aac2 <__ascii_mbtowc+0x1e>
 800aaae:	7813      	ldrb	r3, [r2, #0]
 800aab0:	600b      	str	r3, [r1, #0]
 800aab2:	7812      	ldrb	r2, [r2, #0]
 800aab4:	1e10      	subs	r0, r2, #0
 800aab6:	bf18      	it	ne
 800aab8:	2001      	movne	r0, #1
 800aaba:	b002      	add	sp, #8
 800aabc:	4770      	bx	lr
 800aabe:	4610      	mov	r0, r2
 800aac0:	e7fb      	b.n	800aaba <__ascii_mbtowc+0x16>
 800aac2:	f06f 0001 	mvn.w	r0, #1
 800aac6:	e7f8      	b.n	800aaba <__ascii_mbtowc+0x16>

0800aac8 <__malloc_lock>:
 800aac8:	4801      	ldr	r0, [pc, #4]	; (800aad0 <__malloc_lock+0x8>)
 800aaca:	f7fe bf5e 	b.w	800998a <__retarget_lock_acquire_recursive>
 800aace:	bf00      	nop
 800aad0:	20001224 	.word	0x20001224

0800aad4 <__malloc_unlock>:
 800aad4:	4801      	ldr	r0, [pc, #4]	; (800aadc <__malloc_unlock+0x8>)
 800aad6:	f7fe bf59 	b.w	800998c <__retarget_lock_release_recursive>
 800aada:	bf00      	nop
 800aadc:	20001224 	.word	0x20001224

0800aae0 <_read_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4d07      	ldr	r5, [pc, #28]	; (800ab00 <_read_r+0x20>)
 800aae4:	4604      	mov	r4, r0
 800aae6:	4608      	mov	r0, r1
 800aae8:	4611      	mov	r1, r2
 800aaea:	2200      	movs	r2, #0
 800aaec:	602a      	str	r2, [r5, #0]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f7fd f99b 	bl	8007e2a <_read>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d102      	bne.n	800aafe <_read_r+0x1e>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	b103      	cbz	r3, 800aafe <_read_r+0x1e>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	20001230 	.word	0x20001230

0800ab04 <__ascii_wctomb>:
 800ab04:	b149      	cbz	r1, 800ab1a <__ascii_wctomb+0x16>
 800ab06:	2aff      	cmp	r2, #255	; 0xff
 800ab08:	bf85      	ittet	hi
 800ab0a:	238a      	movhi	r3, #138	; 0x8a
 800ab0c:	6003      	strhi	r3, [r0, #0]
 800ab0e:	700a      	strbls	r2, [r1, #0]
 800ab10:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab14:	bf98      	it	ls
 800ab16:	2001      	movls	r0, #1
 800ab18:	4770      	bx	lr
 800ab1a:	4608      	mov	r0, r1
 800ab1c:	4770      	bx	lr

0800ab1e <abort>:
 800ab1e:	b508      	push	{r3, lr}
 800ab20:	2006      	movs	r0, #6
 800ab22:	f000 f84d 	bl	800abc0 <raise>
 800ab26:	2001      	movs	r0, #1
 800ab28:	f7fd f975 	bl	8007e16 <_exit>

0800ab2c <_fstat_r>:
 800ab2c:	b538      	push	{r3, r4, r5, lr}
 800ab2e:	4d07      	ldr	r5, [pc, #28]	; (800ab4c <_fstat_r+0x20>)
 800ab30:	2300      	movs	r3, #0
 800ab32:	4604      	mov	r4, r0
 800ab34:	4608      	mov	r0, r1
 800ab36:	4611      	mov	r1, r2
 800ab38:	602b      	str	r3, [r5, #0]
 800ab3a:	f7fd f9bb 	bl	8007eb4 <_fstat>
 800ab3e:	1c43      	adds	r3, r0, #1
 800ab40:	d102      	bne.n	800ab48 <_fstat_r+0x1c>
 800ab42:	682b      	ldr	r3, [r5, #0]
 800ab44:	b103      	cbz	r3, 800ab48 <_fstat_r+0x1c>
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	bd38      	pop	{r3, r4, r5, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20001230 	.word	0x20001230

0800ab50 <_isatty_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4d06      	ldr	r5, [pc, #24]	; (800ab6c <_isatty_r+0x1c>)
 800ab54:	2300      	movs	r3, #0
 800ab56:	4604      	mov	r4, r0
 800ab58:	4608      	mov	r0, r1
 800ab5a:	602b      	str	r3, [r5, #0]
 800ab5c:	f7fd f9ba 	bl	8007ed4 <_isatty>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d102      	bne.n	800ab6a <_isatty_r+0x1a>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	b103      	cbz	r3, 800ab6a <_isatty_r+0x1a>
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	20001230 	.word	0x20001230

0800ab70 <_raise_r>:
 800ab70:	291f      	cmp	r1, #31
 800ab72:	b538      	push	{r3, r4, r5, lr}
 800ab74:	4604      	mov	r4, r0
 800ab76:	460d      	mov	r5, r1
 800ab78:	d904      	bls.n	800ab84 <_raise_r+0x14>
 800ab7a:	2316      	movs	r3, #22
 800ab7c:	6003      	str	r3, [r0, #0]
 800ab7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab82:	bd38      	pop	{r3, r4, r5, pc}
 800ab84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ab86:	b112      	cbz	r2, 800ab8e <_raise_r+0x1e>
 800ab88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab8c:	b94b      	cbnz	r3, 800aba2 <_raise_r+0x32>
 800ab8e:	4620      	mov	r0, r4
 800ab90:	f000 f830 	bl	800abf4 <_getpid_r>
 800ab94:	462a      	mov	r2, r5
 800ab96:	4601      	mov	r1, r0
 800ab98:	4620      	mov	r0, r4
 800ab9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab9e:	f000 b817 	b.w	800abd0 <_kill_r>
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d00a      	beq.n	800abbc <_raise_r+0x4c>
 800aba6:	1c59      	adds	r1, r3, #1
 800aba8:	d103      	bne.n	800abb2 <_raise_r+0x42>
 800abaa:	2316      	movs	r3, #22
 800abac:	6003      	str	r3, [r0, #0]
 800abae:	2001      	movs	r0, #1
 800abb0:	e7e7      	b.n	800ab82 <_raise_r+0x12>
 800abb2:	2400      	movs	r4, #0
 800abb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abb8:	4628      	mov	r0, r5
 800abba:	4798      	blx	r3
 800abbc:	2000      	movs	r0, #0
 800abbe:	e7e0      	b.n	800ab82 <_raise_r+0x12>

0800abc0 <raise>:
 800abc0:	4b02      	ldr	r3, [pc, #8]	; (800abcc <raise+0xc>)
 800abc2:	4601      	mov	r1, r0
 800abc4:	6818      	ldr	r0, [r3, #0]
 800abc6:	f7ff bfd3 	b.w	800ab70 <_raise_r>
 800abca:	bf00      	nop
 800abcc:	20000bfc 	.word	0x20000bfc

0800abd0 <_kill_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	4d07      	ldr	r5, [pc, #28]	; (800abf0 <_kill_r+0x20>)
 800abd4:	2300      	movs	r3, #0
 800abd6:	4604      	mov	r4, r0
 800abd8:	4608      	mov	r0, r1
 800abda:	4611      	mov	r1, r2
 800abdc:	602b      	str	r3, [r5, #0]
 800abde:	f7fd f90a 	bl	8007df6 <_kill>
 800abe2:	1c43      	adds	r3, r0, #1
 800abe4:	d102      	bne.n	800abec <_kill_r+0x1c>
 800abe6:	682b      	ldr	r3, [r5, #0]
 800abe8:	b103      	cbz	r3, 800abec <_kill_r+0x1c>
 800abea:	6023      	str	r3, [r4, #0]
 800abec:	bd38      	pop	{r3, r4, r5, pc}
 800abee:	bf00      	nop
 800abf0:	20001230 	.word	0x20001230

0800abf4 <_getpid_r>:
 800abf4:	f7fd b8f7 	b.w	8007de6 <_getpid>

0800abf8 <asinf>:
 800abf8:	b508      	push	{r3, lr}
 800abfa:	ed2d 8b02 	vpush	{d8}
 800abfe:	eeb0 8a40 	vmov.f32	s16, s0
 800ac02:	f000 f827 	bl	800ac54 <__ieee754_asinf>
 800ac06:	eeb4 8a48 	vcmp.f32	s16, s16
 800ac0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac0e:	eef0 8a40 	vmov.f32	s17, s0
 800ac12:	d615      	bvs.n	800ac40 <asinf+0x48>
 800ac14:	eeb0 0a48 	vmov.f32	s0, s16
 800ac18:	f000 fa7a 	bl	800b110 <fabsf>
 800ac1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ac20:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ac24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac28:	dd0a      	ble.n	800ac40 <asinf+0x48>
 800ac2a:	f7fd fa5d 	bl	80080e8 <__errno>
 800ac2e:	ecbd 8b02 	vpop	{d8}
 800ac32:	2321      	movs	r3, #33	; 0x21
 800ac34:	6003      	str	r3, [r0, #0]
 800ac36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ac3a:	4804      	ldr	r0, [pc, #16]	; (800ac4c <asinf+0x54>)
 800ac3c:	f000 ba70 	b.w	800b120 <nanf>
 800ac40:	eeb0 0a68 	vmov.f32	s0, s17
 800ac44:	ecbd 8b02 	vpop	{d8}
 800ac48:	bd08      	pop	{r3, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0800d310 	.word	0x0800d310

0800ac50 <atan2f>:
 800ac50:	f000 b8e6 	b.w	800ae20 <__ieee754_atan2f>

0800ac54 <__ieee754_asinf>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	ee10 5a10 	vmov	r5, s0
 800ac5a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800ac5e:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ac62:	ed2d 8b04 	vpush	{d8-d9}
 800ac66:	d10c      	bne.n	800ac82 <__ieee754_asinf+0x2e>
 800ac68:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800ade0 <__ieee754_asinf+0x18c>
 800ac6c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800ade4 <__ieee754_asinf+0x190>
 800ac70:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ac74:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ac78:	eeb0 0a67 	vmov.f32	s0, s15
 800ac7c:	ecbd 8b04 	vpop	{d8-d9}
 800ac80:	bd38      	pop	{r3, r4, r5, pc}
 800ac82:	dd04      	ble.n	800ac8e <__ieee754_asinf+0x3a>
 800ac84:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ac88:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ac8c:	e7f6      	b.n	800ac7c <__ieee754_asinf+0x28>
 800ac8e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ac92:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ac96:	da0b      	bge.n	800acb0 <__ieee754_asinf+0x5c>
 800ac98:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ac9c:	da52      	bge.n	800ad44 <__ieee754_asinf+0xf0>
 800ac9e:	eddf 7a52 	vldr	s15, [pc, #328]	; 800ade8 <__ieee754_asinf+0x194>
 800aca2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800aca6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800acaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acae:	dce5      	bgt.n	800ac7c <__ieee754_asinf+0x28>
 800acb0:	f000 fa2e 	bl	800b110 <fabsf>
 800acb4:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800acb8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800acbc:	ee20 8a08 	vmul.f32	s16, s0, s16
 800acc0:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800adec <__ieee754_asinf+0x198>
 800acc4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800adf0 <__ieee754_asinf+0x19c>
 800acc8:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800adf4 <__ieee754_asinf+0x1a0>
 800accc:	eea8 7a27 	vfma.f32	s14, s16, s15
 800acd0:	eddf 7a49 	vldr	s15, [pc, #292]	; 800adf8 <__ieee754_asinf+0x1a4>
 800acd4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800acd8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800adfc <__ieee754_asinf+0x1a8>
 800acdc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ace0:	eddf 7a47 	vldr	s15, [pc, #284]	; 800ae00 <__ieee754_asinf+0x1ac>
 800ace4:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ace8:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800ae04 <__ieee754_asinf+0x1b0>
 800acec:	eea7 9a88 	vfma.f32	s18, s15, s16
 800acf0:	eddf 7a45 	vldr	s15, [pc, #276]	; 800ae08 <__ieee754_asinf+0x1b4>
 800acf4:	eee8 7a07 	vfma.f32	s15, s16, s14
 800acf8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800ae0c <__ieee754_asinf+0x1b8>
 800acfc:	eea7 7a88 	vfma.f32	s14, s15, s16
 800ad00:	eddf 7a43 	vldr	s15, [pc, #268]	; 800ae10 <__ieee754_asinf+0x1bc>
 800ad04:	eee7 7a08 	vfma.f32	s15, s14, s16
 800ad08:	eeb0 0a48 	vmov.f32	s0, s16
 800ad0c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800ad10:	f000 f926 	bl	800af60 <__ieee754_sqrtf>
 800ad14:	4b3f      	ldr	r3, [pc, #252]	; (800ae14 <__ieee754_asinf+0x1c0>)
 800ad16:	ee29 9a08 	vmul.f32	s18, s18, s16
 800ad1a:	429c      	cmp	r4, r3
 800ad1c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800ad20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ad24:	dd3d      	ble.n	800ada2 <__ieee754_asinf+0x14e>
 800ad26:	eea0 0a06 	vfma.f32	s0, s0, s12
 800ad2a:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800ae18 <__ieee754_asinf+0x1c4>
 800ad2e:	eee0 7a26 	vfma.f32	s15, s0, s13
 800ad32:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800ade4 <__ieee754_asinf+0x190>
 800ad36:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ad3a:	2d00      	cmp	r5, #0
 800ad3c:	bfd8      	it	le
 800ad3e:	eeb1 0a40 	vnegle.f32	s0, s0
 800ad42:	e79b      	b.n	800ac7c <__ieee754_asinf+0x28>
 800ad44:	ee60 7a00 	vmul.f32	s15, s0, s0
 800ad48:	eddf 6a28 	vldr	s13, [pc, #160]	; 800adec <__ieee754_asinf+0x198>
 800ad4c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800adf0 <__ieee754_asinf+0x19c>
 800ad50:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800ae04 <__ieee754_asinf+0x1b0>
 800ad54:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ad58:	eddf 6a27 	vldr	s13, [pc, #156]	; 800adf8 <__ieee754_asinf+0x1a4>
 800ad5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad60:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800adfc <__ieee754_asinf+0x1a8>
 800ad64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ad68:	eddf 6a25 	vldr	s13, [pc, #148]	; 800ae00 <__ieee754_asinf+0x1ac>
 800ad6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ad70:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800adf4 <__ieee754_asinf+0x1a0>
 800ad74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ad78:	eddf 6a23 	vldr	s13, [pc, #140]	; 800ae08 <__ieee754_asinf+0x1b4>
 800ad7c:	eee7 6a86 	vfma.f32	s13, s15, s12
 800ad80:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800ae0c <__ieee754_asinf+0x1b8>
 800ad84:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800ad88:	eddf 6a21 	vldr	s13, [pc, #132]	; 800ae10 <__ieee754_asinf+0x1bc>
 800ad8c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800ad90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad94:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800ad98:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800ad9c:	eea0 0a27 	vfma.f32	s0, s0, s15
 800ada0:	e76c      	b.n	800ac7c <__ieee754_asinf+0x28>
 800ada2:	ee10 3a10 	vmov	r3, s0
 800ada6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800adaa:	f023 030f 	bic.w	r3, r3, #15
 800adae:	ee07 3a10 	vmov	s14, r3
 800adb2:	eea7 8a47 	vfms.f32	s16, s14, s14
 800adb6:	ee70 7a07 	vadd.f32	s15, s0, s14
 800adba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800adbe:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800adc2:	eddf 7a07 	vldr	s15, [pc, #28]	; 800ade0 <__ieee754_asinf+0x18c>
 800adc6:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800adca:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800adce:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800ae1c <__ieee754_asinf+0x1c8>
 800add2:	eeb0 6a40 	vmov.f32	s12, s0
 800add6:	eea7 6a66 	vfms.f32	s12, s14, s13
 800adda:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800adde:	e7aa      	b.n	800ad36 <__ieee754_asinf+0xe2>
 800ade0:	b33bbd2e 	.word	0xb33bbd2e
 800ade4:	3fc90fdb 	.word	0x3fc90fdb
 800ade8:	7149f2ca 	.word	0x7149f2ca
 800adec:	3811ef08 	.word	0x3811ef08
 800adf0:	3a4f7f04 	.word	0x3a4f7f04
 800adf4:	3e2aaaab 	.word	0x3e2aaaab
 800adf8:	bd241146 	.word	0xbd241146
 800adfc:	3e4e0aa8 	.word	0x3e4e0aa8
 800ae00:	bea6b090 	.word	0xbea6b090
 800ae04:	3d9dc62e 	.word	0x3d9dc62e
 800ae08:	bf303361 	.word	0xbf303361
 800ae0c:	4001572d 	.word	0x4001572d
 800ae10:	c019d139 	.word	0xc019d139
 800ae14:	3f799999 	.word	0x3f799999
 800ae18:	333bbd2e 	.word	0x333bbd2e
 800ae1c:	3f490fdb 	.word	0x3f490fdb

0800ae20 <__ieee754_atan2f>:
 800ae20:	ee10 2a90 	vmov	r2, s1
 800ae24:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800ae28:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ae2c:	b510      	push	{r4, lr}
 800ae2e:	eef0 7a40 	vmov.f32	s15, s0
 800ae32:	dc06      	bgt.n	800ae42 <__ieee754_atan2f+0x22>
 800ae34:	ee10 0a10 	vmov	r0, s0
 800ae38:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800ae3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae40:	dd04      	ble.n	800ae4c <__ieee754_atan2f+0x2c>
 800ae42:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800ae46:	eeb0 0a67 	vmov.f32	s0, s15
 800ae4a:	bd10      	pop	{r4, pc}
 800ae4c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800ae50:	d103      	bne.n	800ae5a <__ieee754_atan2f+0x3a>
 800ae52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae56:	f000 b887 	b.w	800af68 <atanf>
 800ae5a:	1794      	asrs	r4, r2, #30
 800ae5c:	f004 0402 	and.w	r4, r4, #2
 800ae60:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ae64:	b943      	cbnz	r3, 800ae78 <__ieee754_atan2f+0x58>
 800ae66:	2c02      	cmp	r4, #2
 800ae68:	d05e      	beq.n	800af28 <__ieee754_atan2f+0x108>
 800ae6a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800af3c <__ieee754_atan2f+0x11c>
 800ae6e:	2c03      	cmp	r4, #3
 800ae70:	bf08      	it	eq
 800ae72:	eef0 7a47 	vmoveq.f32	s15, s14
 800ae76:	e7e6      	b.n	800ae46 <__ieee754_atan2f+0x26>
 800ae78:	b941      	cbnz	r1, 800ae8c <__ieee754_atan2f+0x6c>
 800ae7a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800af40 <__ieee754_atan2f+0x120>
 800ae7e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800af44 <__ieee754_atan2f+0x124>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	bfb8      	it	lt
 800ae86:	eef0 7a40 	vmovlt.f32	s15, s0
 800ae8a:	e7dc      	b.n	800ae46 <__ieee754_atan2f+0x26>
 800ae8c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ae90:	d110      	bne.n	800aeb4 <__ieee754_atan2f+0x94>
 800ae92:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae96:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae9a:	d107      	bne.n	800aeac <__ieee754_atan2f+0x8c>
 800ae9c:	2c02      	cmp	r4, #2
 800ae9e:	d846      	bhi.n	800af2e <__ieee754_atan2f+0x10e>
 800aea0:	4b29      	ldr	r3, [pc, #164]	; (800af48 <__ieee754_atan2f+0x128>)
 800aea2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aea6:	edd4 7a00 	vldr	s15, [r4]
 800aeaa:	e7cc      	b.n	800ae46 <__ieee754_atan2f+0x26>
 800aeac:	2c02      	cmp	r4, #2
 800aeae:	d841      	bhi.n	800af34 <__ieee754_atan2f+0x114>
 800aeb0:	4b26      	ldr	r3, [pc, #152]	; (800af4c <__ieee754_atan2f+0x12c>)
 800aeb2:	e7f6      	b.n	800aea2 <__ieee754_atan2f+0x82>
 800aeb4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800aeb8:	d0df      	beq.n	800ae7a <__ieee754_atan2f+0x5a>
 800aeba:	1a5b      	subs	r3, r3, r1
 800aebc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800aec0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800aec4:	da1a      	bge.n	800aefc <__ieee754_atan2f+0xdc>
 800aec6:	2a00      	cmp	r2, #0
 800aec8:	da01      	bge.n	800aece <__ieee754_atan2f+0xae>
 800aeca:	313c      	adds	r1, #60	; 0x3c
 800aecc:	db19      	blt.n	800af02 <__ieee754_atan2f+0xe2>
 800aece:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800aed2:	f000 f91d 	bl	800b110 <fabsf>
 800aed6:	f000 f847 	bl	800af68 <atanf>
 800aeda:	eef0 7a40 	vmov.f32	s15, s0
 800aede:	2c01      	cmp	r4, #1
 800aee0:	d012      	beq.n	800af08 <__ieee754_atan2f+0xe8>
 800aee2:	2c02      	cmp	r4, #2
 800aee4:	d017      	beq.n	800af16 <__ieee754_atan2f+0xf6>
 800aee6:	2c00      	cmp	r4, #0
 800aee8:	d0ad      	beq.n	800ae46 <__ieee754_atan2f+0x26>
 800aeea:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800af50 <__ieee754_atan2f+0x130>
 800aeee:	ee77 7a80 	vadd.f32	s15, s15, s0
 800aef2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800af54 <__ieee754_atan2f+0x134>
 800aef6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800aefa:	e7a4      	b.n	800ae46 <__ieee754_atan2f+0x26>
 800aefc:	eddf 7a10 	vldr	s15, [pc, #64]	; 800af40 <__ieee754_atan2f+0x120>
 800af00:	e7ed      	b.n	800aede <__ieee754_atan2f+0xbe>
 800af02:	eddf 7a15 	vldr	s15, [pc, #84]	; 800af58 <__ieee754_atan2f+0x138>
 800af06:	e7ea      	b.n	800aede <__ieee754_atan2f+0xbe>
 800af08:	ee17 3a90 	vmov	r3, s15
 800af0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af10:	ee07 3a90 	vmov	s15, r3
 800af14:	e797      	b.n	800ae46 <__ieee754_atan2f+0x26>
 800af16:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800af50 <__ieee754_atan2f+0x130>
 800af1a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800af1e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800af54 <__ieee754_atan2f+0x134>
 800af22:	ee70 7a67 	vsub.f32	s15, s0, s15
 800af26:	e78e      	b.n	800ae46 <__ieee754_atan2f+0x26>
 800af28:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800af54 <__ieee754_atan2f+0x134>
 800af2c:	e78b      	b.n	800ae46 <__ieee754_atan2f+0x26>
 800af2e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800af5c <__ieee754_atan2f+0x13c>
 800af32:	e788      	b.n	800ae46 <__ieee754_atan2f+0x26>
 800af34:	eddf 7a08 	vldr	s15, [pc, #32]	; 800af58 <__ieee754_atan2f+0x138>
 800af38:	e785      	b.n	800ae46 <__ieee754_atan2f+0x26>
 800af3a:	bf00      	nop
 800af3c:	c0490fdb 	.word	0xc0490fdb
 800af40:	3fc90fdb 	.word	0x3fc90fdb
 800af44:	bfc90fdb 	.word	0xbfc90fdb
 800af48:	0800d41c 	.word	0x0800d41c
 800af4c:	0800d428 	.word	0x0800d428
 800af50:	33bbbd2e 	.word	0x33bbbd2e
 800af54:	40490fdb 	.word	0x40490fdb
 800af58:	00000000 	.word	0x00000000
 800af5c:	3f490fdb 	.word	0x3f490fdb

0800af60 <__ieee754_sqrtf>:
 800af60:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800af64:	4770      	bx	lr
	...

0800af68 <atanf>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	ee10 5a10 	vmov	r5, s0
 800af6e:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800af72:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800af76:	eef0 7a40 	vmov.f32	s15, s0
 800af7a:	db10      	blt.n	800af9e <atanf+0x36>
 800af7c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800af80:	dd04      	ble.n	800af8c <atanf+0x24>
 800af82:	ee70 7a00 	vadd.f32	s15, s0, s0
 800af86:	eeb0 0a67 	vmov.f32	s0, s15
 800af8a:	bd38      	pop	{r3, r4, r5, pc}
 800af8c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800b0c4 <atanf+0x15c>
 800af90:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800b0c8 <atanf+0x160>
 800af94:	2d00      	cmp	r5, #0
 800af96:	bfd8      	it	le
 800af98:	eef0 7a40 	vmovle.f32	s15, s0
 800af9c:	e7f3      	b.n	800af86 <atanf+0x1e>
 800af9e:	4b4b      	ldr	r3, [pc, #300]	; (800b0cc <atanf+0x164>)
 800afa0:	429c      	cmp	r4, r3
 800afa2:	dc10      	bgt.n	800afc6 <atanf+0x5e>
 800afa4:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800afa8:	da0a      	bge.n	800afc0 <atanf+0x58>
 800afaa:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b0d0 <atanf+0x168>
 800afae:	ee30 7a07 	vadd.f32	s14, s0, s14
 800afb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afb6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800afba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afbe:	dce2      	bgt.n	800af86 <atanf+0x1e>
 800afc0:	f04f 33ff 	mov.w	r3, #4294967295
 800afc4:	e013      	b.n	800afee <atanf+0x86>
 800afc6:	f000 f8a3 	bl	800b110 <fabsf>
 800afca:	4b42      	ldr	r3, [pc, #264]	; (800b0d4 <atanf+0x16c>)
 800afcc:	429c      	cmp	r4, r3
 800afce:	dc4f      	bgt.n	800b070 <atanf+0x108>
 800afd0:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800afd4:	429c      	cmp	r4, r3
 800afd6:	dc41      	bgt.n	800b05c <atanf+0xf4>
 800afd8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800afdc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800afe0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800afe4:	2300      	movs	r3, #0
 800afe6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800afea:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800afee:	1c5a      	adds	r2, r3, #1
 800aff0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800aff4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b0d8 <atanf+0x170>
 800aff8:	eddf 5a38 	vldr	s11, [pc, #224]	; 800b0dc <atanf+0x174>
 800affc:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800b0e0 <atanf+0x178>
 800b000:	ee66 6a06 	vmul.f32	s13, s12, s12
 800b004:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b008:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b0e4 <atanf+0x17c>
 800b00c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b010:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b0e8 <atanf+0x180>
 800b014:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b018:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b0ec <atanf+0x184>
 800b01c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b020:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b0f0 <atanf+0x188>
 800b024:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b028:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b0f4 <atanf+0x18c>
 800b02c:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b030:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b0f8 <atanf+0x190>
 800b034:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b038:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800b0fc <atanf+0x194>
 800b03c:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b040:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b100 <atanf+0x198>
 800b044:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b048:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b04c:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b050:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b054:	d121      	bne.n	800b09a <atanf+0x132>
 800b056:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b05a:	e794      	b.n	800af86 <atanf+0x1e>
 800b05c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b060:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b064:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b068:	2301      	movs	r3, #1
 800b06a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b06e:	e7be      	b.n	800afee <atanf+0x86>
 800b070:	4b24      	ldr	r3, [pc, #144]	; (800b104 <atanf+0x19c>)
 800b072:	429c      	cmp	r4, r3
 800b074:	dc0b      	bgt.n	800b08e <atanf+0x126>
 800b076:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b07a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b07e:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b082:	2302      	movs	r3, #2
 800b084:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b08c:	e7af      	b.n	800afee <atanf+0x86>
 800b08e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b092:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b096:	2303      	movs	r3, #3
 800b098:	e7a9      	b.n	800afee <atanf+0x86>
 800b09a:	4a1b      	ldr	r2, [pc, #108]	; (800b108 <atanf+0x1a0>)
 800b09c:	491b      	ldr	r1, [pc, #108]	; (800b10c <atanf+0x1a4>)
 800b09e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b0a2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b0a6:	ed93 0a00 	vldr	s0, [r3]
 800b0aa:	ee37 7a40 	vsub.f32	s14, s14, s0
 800b0ae:	ed92 0a00 	vldr	s0, [r2]
 800b0b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0b6:	2d00      	cmp	r5, #0
 800b0b8:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b0bc:	bfb8      	it	lt
 800b0be:	eef1 7a67 	vneglt.f32	s15, s15
 800b0c2:	e760      	b.n	800af86 <atanf+0x1e>
 800b0c4:	3fc90fdb 	.word	0x3fc90fdb
 800b0c8:	bfc90fdb 	.word	0xbfc90fdb
 800b0cc:	3edfffff 	.word	0x3edfffff
 800b0d0:	7149f2ca 	.word	0x7149f2ca
 800b0d4:	3f97ffff 	.word	0x3f97ffff
 800b0d8:	3c8569d7 	.word	0x3c8569d7
 800b0dc:	3d4bda59 	.word	0x3d4bda59
 800b0e0:	bd6ef16b 	.word	0xbd6ef16b
 800b0e4:	3d886b35 	.word	0x3d886b35
 800b0e8:	3dba2e6e 	.word	0x3dba2e6e
 800b0ec:	3e124925 	.word	0x3e124925
 800b0f0:	3eaaaaab 	.word	0x3eaaaaab
 800b0f4:	bd15a221 	.word	0xbd15a221
 800b0f8:	bd9d8795 	.word	0xbd9d8795
 800b0fc:	bde38e38 	.word	0xbde38e38
 800b100:	be4ccccd 	.word	0xbe4ccccd
 800b104:	401bffff 	.word	0x401bffff
 800b108:	0800d434 	.word	0x0800d434
 800b10c:	0800d444 	.word	0x0800d444

0800b110 <fabsf>:
 800b110:	ee10 3a10 	vmov	r3, s0
 800b114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b118:	ee00 3a10 	vmov	s0, r3
 800b11c:	4770      	bx	lr
	...

0800b120 <nanf>:
 800b120:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b128 <nanf+0x8>
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	7fc00000 	.word	0x7fc00000

0800b12c <_init>:
 800b12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12e:	bf00      	nop
 800b130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b132:	bc08      	pop	{r3}
 800b134:	469e      	mov	lr, r3
 800b136:	4770      	bx	lr

0800b138 <_fini>:
 800b138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13a:	bf00      	nop
 800b13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b13e:	bc08      	pop	{r3}
 800b140:	469e      	mov	lr, r3
 800b142:	4770      	bx	lr
