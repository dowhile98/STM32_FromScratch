
USART_RING_BUFFER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000236c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800251c  0800251c  0001251c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002658  08002658  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002658  08002658  00012658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002660  08002660  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002660  08002660  00012660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002664  08002664  00012664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000464  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004cc  200004cc  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003b53  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f9c  00000000  00000000  00023beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002e0  00000000  00000000  00024b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000248  00000000  00000000  00024e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ac6e  00000000  00000000  000250b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004698  00000000  00000000  0003fd1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000902d4  00000000  00000000  000443b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d468a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000125c  00000000  00000000  000d46dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002504 	.word	0x08002504

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08002504 	.word	0x08002504

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <AT_Device_Init>:
/*Globla variables ----------------------------------*/

/**
 * @brief inicializar la instancia para el manejo del dispositivo por comandos AT
 */
void AT_Device_Init(AT_CMD_Parse_t *dev){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	//inicializar el buffer
	lwrb_init(&(dev->buff), dev->buff_data, 1024);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3314      	adds	r3, #20
 80005c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005c6:	4619      	mov	r1, r3
 80005c8:	f000 fd01 	bl	8000fce <lwrb_init>
	//comando activo
	dev->ACTIV_CMD = CMD_NONE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	return;
 80005d4:	bf00      	nop
}
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <AT_Device_TickInc>:


/**
 * @brief incrementar la base de tiempo
 */
void AT_Device_TickInc(AT_CMD_Parse_t *dev){
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	dev->ticks += 1;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
}
 80005f2:	bf00      	nop
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
	...

08000600 <AT_Device_SendComand>:
}

/**
 * @brief envia commandos al dispositivo
 */
AT_DeviceState_t AT_Device_SendComand(AT_CMD_Parse_t *dev, CMD_List_t cmd){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]

	dev->ACTIV_CMD = cmd;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	78fa      	ldrb	r2, [r7, #3]
 8000610:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
	lwrb_reset(&dev->buff);			//reinicia el buffer
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fefe 	bl	8001418 <lwrb_reset>
	switch(cmd){
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	3b01      	subs	r3, #1
 8000620:	2b03      	cmp	r3, #3
 8000622:	d81b      	bhi.n	800065c <AT_Device_SendComand+0x5c>
 8000624:	a201      	add	r2, pc, #4	; (adr r2, 800062c <AT_Device_SendComand+0x2c>)
 8000626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062a:	bf00      	nop
 800062c:	0800063d 	.word	0x0800063d
 8000630:	08000645 	.word	0x08000645
 8000634:	0800064d 	.word	0x0800064d
 8000638:	08000655 	.word	0x08000655
	case CMD_AT:
		//se envía el comando AT
		printf("%s", AT);				//OK\r\n
 800063c:	480a      	ldr	r0, [pc, #40]	; (8000668 <AT_Device_SendComand+0x68>)
 800063e:	f000 ffe3 	bl	8001608 <puts>
		break;
 8000642:	e00b      	b.n	800065c <AT_Device_SendComand+0x5c>
	case CMD_ID:
		printf("%s", ID);
 8000644:	4809      	ldr	r0, [pc, #36]	; (800066c <AT_Device_SendComand+0x6c>)
 8000646:	f000 ffdf 	bl	8001608 <puts>
		break;							//ABSCDDA123\r\n
 800064a:	e007      	b.n	800065c <AT_Device_SendComand+0x5c>
	case CMD_PAC:
		printf("%s", PAC);				//010201233232\r\n
 800064c:	4808      	ldr	r0, [pc, #32]	; (8000670 <AT_Device_SendComand+0x70>)
 800064e:	f000 ffdb 	bl	8001608 <puts>
		break;
 8000652:	e003      	b.n	800065c <AT_Device_SendComand+0x5c>
	case CMD_V:
		printf("%s", VOLT);				//2345\r\n0\r\n
 8000654:	4807      	ldr	r0, [pc, #28]	; (8000674 <AT_Device_SendComand+0x74>)
 8000656:	f000 ffd7 	bl	8001608 <puts>
		break;
 800065a:	bf00      	nop
	}
	return AT_DEVICE_OK ;
 800065c:	2301      	movs	r3, #1
}
 800065e:	4618      	mov	r0, r3
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	0800251c 	.word	0x0800251c
 800066c:	08002520 	.word	0x08002520
 8000670:	0800252c 	.word	0x0800252c
 8000674:	08002538 	.word	0x08002538

08000678 <AT_DeviceUpdate>:


/**
 * @brief funcion para verificar la respuesta del dispositivo
 */
AT_DeviceResponse_t AT_DeviceUpdate(AT_CMD_Parse_t *dev){
 8000678:	b590      	push	{r4, r7, lr}
 800067a:	b08b      	sub	sp, #44	; 0x2c
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	uint8_t ch;
	char data[30] = {0};
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]
 8000696:	831a      	strh	r2, [r3, #24]
	if(lwrb_get_full(&dev->buff) > 0){
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fe7d 	bl	800139a <lwrb_get_full>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d03f      	beq.n	8000726 <AT_DeviceUpdate+0xae>
		lwrb_peek(&dev->buff, lwrb_get_full(&dev->buff) - 1 , &ch, 1);
 80006a6:	687c      	ldr	r4, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fe75 	bl	800139a <lwrb_get_full>
 80006b0:	4603      	mov	r3, r0
 80006b2:	1e59      	subs	r1, r3, #1
 80006b4:	f107 0227 	add.w	r2, r7, #39	; 0x27
 80006b8:	2301      	movs	r3, #1
 80006ba:	4620      	mov	r0, r4
 80006bc:	f000 fdb8 	bl	8001230 <lwrb_peek>
		switch(dev->ACTIV_CMD){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f893 3414 	ldrb.w	r3, [r3, #1044]	; 0x414
 80006c6:	3b01      	subs	r3, #1
 80006c8:	2b03      	cmp	r3, #3
 80006ca:	d82f      	bhi.n	800072c <AT_DeviceUpdate+0xb4>
 80006cc:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <AT_DeviceUpdate+0x5c>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	080006e5 	.word	0x080006e5
 80006d8:	0800072d 	.word	0x0800072d
 80006dc:	0800072d 	.word	0x0800072d
 80006e0:	0800072d 	.word	0x0800072d
		case CMD_AT:
			if(ch == '\n'){
 80006e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80006e8:	2b0a      	cmp	r3, #10
 80006ea:	d11e      	bne.n	800072a <AT_DeviceUpdate+0xb2>
				//repuesta
				lwrb_read(&dev->buff, data, lwrb_get_full(&dev->buff));
 80006ec:	687c      	ldr	r4, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fe52 	bl	800139a <lwrb_get_full>
 80006f6:	4602      	mov	r2, r0
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	4619      	mov	r1, r3
 80006fe:	4620      	mov	r0, r4
 8000700:	f000 fd16 	bl	8001130 <lwrb_read>
				if(strcmp(data, "OK\r\n") == 0){
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	490b      	ldr	r1, [pc, #44]	; (8000738 <AT_DeviceUpdate+0xc0>)
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fd70 	bl	80001f0 <strcmp>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d105      	bne.n	8000722 <AT_DeviceUpdate+0xaa>
					dev->ACTIV_CMD = CMD_NONE;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
					return DEVICE_AT_OK;
 800071e:	2301      	movs	r3, #1
 8000720:	e005      	b.n	800072e <AT_DeviceUpdate+0xb6>
				}else{
					return DEVICE_ERR;
 8000722:	2300      	movs	r3, #0
 8000724:	e003      	b.n	800072e <AT_DeviceUpdate+0xb6>
		case CMD_PAC:
			break;
		case CMD_V:
			break;
		}
	}
 8000726:	bf00      	nop
 8000728:	e000      	b.n	800072c <AT_DeviceUpdate+0xb4>
			break;
 800072a:	bf00      	nop
	return DEVICE_WAIT;
 800072c:	2305      	movs	r3, #5
}
 800072e:	4618      	mov	r0, r3
 8000730:	372c      	adds	r7, #44	; 0x2c
 8000732:	46bd      	mov	sp, r7
 8000734:	bd90      	pop	{r4, r7, pc}
 8000736:	bf00      	nop
 8000738:	08002540 	.word	0x08002540

0800073c <ButtonInit>:
 * @param [BT]: Puntero a una estructura que representa el pulsador
 * @param [GPIO]: Puerto donde esta conectado el pulsador
 * @param [pin]: numbero de pin donde esta conectado el pulsador
 * @param [callback]: puntero a la funcion callback
 */
void ButtonInit(Button_t *BT, GPIO_TypeDef *GPIO, uint32_t pin, void (*callback)(void)){
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
 8000748:	603b      	str	r3, [r7, #0]
	BT->GPIO = GPIO;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	605a      	str	r2, [r3, #4]
	BT->pin = pin;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	b2da      	uxtb	r2, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	721a      	strb	r2, [r3, #8]
	BT->callback = callback;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	60da      	str	r2, [r3, #12]
	BT->state = PIN_INIT;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	return;
 8000764:	bf00      	nop
}
 8000766:	3714      	adds	r7, #20
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	6039      	str	r1, [r7, #0]
 800077a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000780:	2b00      	cmp	r3, #0
 8000782:	db0a      	blt.n	800079a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	b2da      	uxtb	r2, r3
 8000788:	490c      	ldr	r1, [pc, #48]	; (80007bc <__NVIC_SetPriority+0x4c>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	0112      	lsls	r2, r2, #4
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	440b      	add	r3, r1
 8000794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000798:	e00a      	b.n	80007b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	b2da      	uxtb	r2, r3
 800079e:	4908      	ldr	r1, [pc, #32]	; (80007c0 <__NVIC_SetPriority+0x50>)
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	f003 030f 	and.w	r3, r3, #15
 80007a6:	3b04      	subs	r3, #4
 80007a8:	0112      	lsls	r2, r2, #4
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	440b      	add	r3, r1
 80007ae:	761a      	strb	r2, [r3, #24]
}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	e000e100 	.word	0xe000e100
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <SysTickInit>:

/*Global variables -------------------------------------------------*/
volatile uint32_t uwTick = 0;


void SysTickInit(void){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
	uint32_t temp;
	//1. deshabilitar el conteo de la systick
	SysTick->CTRL &=~ SysTick_CTRL_ENABLE_Msk;
 80007ca:	4b17      	ldr	r3, [pc, #92]	; (8000828 <SysTickInit+0x64>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a16      	ldr	r2, [pc, #88]	; (8000828 <SysTickInit+0x64>)
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	6013      	str	r3, [r2, #0]
	//2. configurar el valor del registro reload
	SystemCoreClockUpdate();
 80007d6:	f000 fb51 	bl	8000e7c <SystemCoreClockUpdate>
	temp = SystemCoreClock / 1000 - 1;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <SysTickInit+0x68>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <SysTickInit+0x6c>)
 80007e0:	fba2 2303 	umull	r2, r3, r2, r3
 80007e4:	099b      	lsrs	r3, r3, #6
 80007e6:	3b01      	subs	r3, #1
 80007e8:	607b      	str	r3, [r7, #4]
	SysTick->LOAD = temp;
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <SysTickInit+0x64>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6053      	str	r3, [r2, #4]
	//3. Configuras el registro de control y habilitas el conteo
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; 			//system core clock
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <SysTickInit+0x64>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <SysTickInit+0x64>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6013      	str	r3, [r2, #0]

	//configurar la IT
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;				//habilita la IT
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <SysTickInit+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a09      	ldr	r2, [pc, #36]	; (8000828 <SysTickInit+0x64>)
 8000802:	f043 0302 	orr.w	r3, r3, #2
 8000806:	6013      	str	r3, [r2, #0]
	NVIC_SetPriority(SysTick_IRQn, 15);
 8000808:	210f      	movs	r1, #15
 800080a:	f04f 30ff 	mov.w	r0, #4294967295
 800080e:	f7ff ffaf 	bl	8000770 <__NVIC_SetPriority>

	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;				//habilita el conteo
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <SysTickInit+0x64>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a04      	ldr	r2, [pc, #16]	; (8000828 <SysTickInit+0x64>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6013      	str	r3, [r2, #0]

	return;
 800081e:	bf00      	nop
}
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	e000e010 	.word	0xe000e010
 800082c:	20000000 	.word	0x20000000
 8000830:	10624dd3 	.word	0x10624dd3

08000834 <delay_ms>:


/**
 * @brief funcion para generar retardos en ms
 */
void delay_ms(uint32_t delay){
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = GetTicks();
 800083c:	f000 f810 	bl	8000860 <GetTicks>
 8000840:	60f8      	str	r0, [r7, #12]
	uint32_t wait = delay;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	60bb      	str	r3, [r7, #8]
	//generacion del retardo
	while((GetTicks() - tickstart)<wait);
 8000846:	bf00      	nop
 8000848:	f000 f80a 	bl	8000860 <GetTicks>
 800084c:	4602      	mov	r2, r0
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	429a      	cmp	r2, r3
 8000856:	d8f7      	bhi.n	8000848 <delay_ms+0x14>
	return;
 8000858:	bf00      	nop
}
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <GetTicks>:
/**
 * @brief retorna el ticks generado por la SysTick
 * @return uint32_t
 */
uint32_t GetTicks(void){
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
	return (uint32_t)uwTick;
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <GetTicks+0x14>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000084 	.word	0x20000084

08000878 <TickInc_Callback>:


void TickInc_Callback(void){
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	uwTick += 1;
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <TickInc_Callback+0x18>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	4a03      	ldr	r2, [pc, #12]	; (8000890 <TickInc_Callback+0x18>)
 8000884:	6013      	str	r3, [r2, #0]
	return;
 8000886:	bf00      	nop
}
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	20000084 	.word	0x20000084

08000894 <__NVIC_EnableIRQ>:
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	db0b      	blt.n	80008be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f003 021f 	and.w	r2, r3, #31
 80008ac:	4907      	ldr	r1, [pc, #28]	; (80008cc <__NVIC_EnableIRQ+0x38>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	095b      	lsrs	r3, r3, #5
 80008b4:	2001      	movs	r0, #1
 80008b6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000e100 	.word	0xe000e100

080008d0 <__NVIC_SetPriority>:
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	db0a      	blt.n	80008fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	490c      	ldr	r1, [pc, #48]	; (800091c <__NVIC_SetPriority+0x4c>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	0112      	lsls	r2, r2, #4
 80008f0:	b2d2      	uxtb	r2, r2
 80008f2:	440b      	add	r3, r1
 80008f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80008f8:	e00a      	b.n	8000910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4908      	ldr	r1, [pc, #32]	; (8000920 <__NVIC_SetPriority+0x50>)
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	f003 030f 	and.w	r3, r3, #15
 8000906:	3b04      	subs	r3, #4
 8000908:	0112      	lsls	r2, r2, #4
 800090a:	b2d2      	uxtb	r2, r2
 800090c:	440b      	add	r3, r1
 800090e:	761a      	strb	r2, [r3, #24]
}
 8000910:	bf00      	nop
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	e000e100 	.word	0xe000e100
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800092c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000930:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000934:	f003 0301 	and.w	r3, r3, #1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d013      	beq.n	8000964 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800093c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000940:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000944:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000948:	2b00      	cmp	r3, #0
 800094a:	d00b      	beq.n	8000964 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800094c:	e000      	b.n	8000950 <ITM_SendChar+0x2c>
    {
      __NOP();
 800094e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000950:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0f9      	beq.n	800094e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800095a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000964:	687b      	ldr	r3, [r7, #4]
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <main>:

UART_Status_t UART_ReceiveData(USART_TypeDef *USARTx, uint8_t *pData, uint32_t len, uint32_t timeout);
/*main function --------------------------------------------------------------*/

int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	//USART1
	USART1_Init(9600);
 8000978:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800097c:	f000 f890 	bl	8000aa0 <USART1_Init>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
	//habilitar la interrupcion
	__disable_irq();
	USART1->CR1 |= USART_CR1_RXNEIE;		//habilita la interrupcion para RX
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <main+0xd8>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <main+0xd8>)
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	60d3      	str	r3, [r2, #12]
	NVIC_EnableIRQ(USART1_IRQn);			//Habilita la interrupcion para USART1 EN LA NVIC
 8000990:	2025      	movs	r0, #37	; 0x25
 8000992:	f7ff ff7f 	bl	8000894 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART1_IRQn, 1);
 8000996:	2101      	movs	r1, #1
 8000998:	2025      	movs	r0, #37	; 0x25
 800099a:	f7ff ff99 	bl	80008d0 <__NVIC_SetPriority>
  __ASM volatile ("cpsie i" : : : "memory");
 800099e:	b662      	cpsie	i
}
 80009a0:	bf00      	nop
	__enable_irq();
	//Todo

	printf("EJEMPLO GPIO1\r\n");
 80009a2:	482b      	ldr	r0, [pc, #172]	; (8000a50 <main+0xdc>)
 80009a4:	f000 fe30 	bl	8001608 <puts>
	printf("%s, %s\r\n", __DATE__, __TIME__);
 80009a8:	4a2a      	ldr	r2, [pc, #168]	; (8000a54 <main+0xe0>)
 80009aa:	492b      	ldr	r1, [pc, #172]	; (8000a58 <main+0xe4>)
 80009ac:	482b      	ldr	r0, [pc, #172]	; (8000a5c <main+0xe8>)
 80009ae:	f000 fda5 	bl	80014fc <iprintf>
	//PD12 (LED1)
	RCC->AHB1ENR |= GPIOX_CLOCK(LED) | GPIOX_CLOCK(SW);
 80009b2:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <main+0xec>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <main+0xec>)
 80009b8:	f043 0309 	orr.w	r3, r3, #9
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_OUT, LED);
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <main+0xf0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80009c6:	4a27      	ldr	r2, [pc, #156]	; (8000a64 <main+0xf0>)
 80009c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009cc:	6013      	str	r3, [r2, #0]
	GPIOX_OTYPER(MODE_OT_PP, LED);
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <main+0xf0>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <main+0xf0>)
 80009d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009d8:	6053      	str	r3, [r2, #4]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, LED);
 80009da:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <main+0xf0>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	4a21      	ldr	r2, [pc, #132]	; (8000a64 <main+0xf0>)
 80009e0:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 80009e4:	6093      	str	r3, [r2, #8]
	GPIOX_PUPDR(MODE_PU_NONE, LED);
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <main+0xf0>)
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <main+0xf0>)
 80009ec:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80009f0:	60d3      	str	r3, [r2, #12]

	//PA0
	GPIOX_MODER(MODE_DIGITAL_INPUT, SW);
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <main+0xf4>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <main+0xf4>)
 80009f8:	f023 0303 	bic.w	r3, r3, #3
 80009fc:	6013      	str	r3, [r2, #0]
	GPIOX_PUPDR(MODE_PU_NONE, SW);
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <main+0xf4>)
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <main+0xf4>)
 8000a04:	f023 0303 	bic.w	r3, r3, #3
 8000a08:	60d3      	str	r3, [r2, #12]
	//systick
	SysTickInit();
 8000a0a:	f7ff fedb 	bl	80007c4 <SysTickInit>

	//inicializar
	ButtonInit(&button1, GPIOA, 0, &button1_callback);
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <main+0xf8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	4915      	ldr	r1, [pc, #84]	; (8000a68 <main+0xf4>)
 8000a14:	4816      	ldr	r0, [pc, #88]	; (8000a70 <main+0xfc>)
 8000a16:	f7ff fe91 	bl	800073c <ButtonInit>
	//AT DEVICE
	AT_Device_Init(&tinyfox);
 8000a1a:	4816      	ldr	r0, [pc, #88]	; (8000a74 <main+0x100>)
 8000a1c:	f7ff fdca 	bl	80005b4 <AT_Device_Init>
	AT_Device_SendComand(&tinyfox, CMD_AT);
 8000a20:	2101      	movs	r1, #1
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <main+0x100>)
 8000a24:	f7ff fdec 	bl	8000600 <AT_Device_SendComand>
	delay_ms(5000);
 8000a28:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a2c:	f7ff ff02 	bl	8000834 <delay_ms>
	if(AT_DeviceUpdate(&tinyfox) == DEVICE_AT_OK){
 8000a30:	4810      	ldr	r0, [pc, #64]	; (8000a74 <main+0x100>)
 8000a32:	f7ff fe21 	bl	8000678 <AT_DeviceUpdate>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d103      	bne.n	8000a44 <main+0xd0>
		//RESPUESTA CORRECTA
		printf("dispositivo respondio\r\n");
 8000a3c:	480e      	ldr	r0, [pc, #56]	; (8000a78 <main+0x104>)
 8000a3e:	f000 fde3 	bl	8001608 <puts>
 8000a42:	e002      	b.n	8000a4a <main+0xd6>
	}else{
		printf("dispositivo no respondio\r\n");
 8000a44:	480d      	ldr	r0, [pc, #52]	; (8000a7c <main+0x108>)
 8000a46:	f000 fddf 	bl	8001608 <puts>
	}
    /* Loop forever */
	for(;;){
 8000a4a:	e7fe      	b.n	8000a4a <main+0xd6>
 8000a4c:	40011000 	.word	0x40011000
 8000a50:	08002548 	.word	0x08002548
 8000a54:	08002558 	.word	0x08002558
 8000a58:	08002564 	.word	0x08002564
 8000a5c:	08002570 	.word	0x08002570
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020c00 	.word	0x40020c00
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	08000a81 	.word	0x08000a81
 8000a70:	20000088 	.word	0x20000088
 8000a74:	2000009c 	.word	0x2000009c
 8000a78:	0800257c 	.word	0x0800257c
 8000a7c:	08002594 	.word	0x08002594

08000a80 <button1_callback>:

	}
}

/*Function definition ---------------------------------------------------------*/
void button1_callback(void){
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	GPIOX_ODR(LED) ^= 0x1;
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <button1_callback+0x1c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <button1_callback+0x1c>)
 8000a8a:	f083 0301 	eor.w	r3, r3, #1
 8000a8e:	6013      	str	r3, [r2, #0]

}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	424182b0 	.word	0x424182b0

08000aa0 <USART1_Init>:

void USART1_Init(uint32_t baud){
 8000aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
	//1. RCC
	RCC->AHB1ENR |= GPIOX_CLOCK(USART1_RX);
 8000aaa:	4b5b      	ldr	r3, [pc, #364]	; (8000c18 <USART1_Init+0x178>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a5a      	ldr	r2, [pc, #360]	; (8000c18 <USART1_Init+0x178>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOX_MODER(MODE_ALTER, USART1_TX);
 8000ab6:	4b59      	ldr	r3, [pc, #356]	; (8000c1c <USART1_Init+0x17c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000abe:	4a57      	ldr	r2, [pc, #348]	; (8000c1c <USART1_Init+0x17c>)
 8000ac0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ac4:	6013      	str	r3, [r2, #0]
	GPIOX_MODER(MODE_ALTER, USART1_RX);
 8000ac6:	4b55      	ldr	r3, [pc, #340]	; (8000c1c <USART1_Init+0x17c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ace:	4a53      	ldr	r2, [pc, #332]	; (8000c1c <USART1_Init+0x17c>)
 8000ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ad4:	6013      	str	r3, [r2, #0]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, USART1_TX);
 8000ad6:	4b51      	ldr	r3, [pc, #324]	; (8000c1c <USART1_Init+0x17c>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	4a50      	ldr	r2, [pc, #320]	; (8000c1c <USART1_Init+0x17c>)
 8000adc:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000ae0:	6093      	str	r3, [r2, #8]
	GPIOX_OSPEEDR(MODE_SPD_VHIGH, USART1_RX);
 8000ae2:	4b4e      	ldr	r3, [pc, #312]	; (8000c1c <USART1_Init+0x17c>)
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	4a4d      	ldr	r2, [pc, #308]	; (8000c1c <USART1_Init+0x17c>)
 8000ae8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aec:	6093      	str	r3, [r2, #8]
	GPIOX_AFR(7, USART1_TX);
 8000aee:	4b4b      	ldr	r3, [pc, #300]	; (8000c1c <USART1_Init+0x17c>)
 8000af0:	6a1b      	ldr	r3, [r3, #32]
 8000af2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000af6:	4a49      	ldr	r2, [pc, #292]	; (8000c1c <USART1_Init+0x17c>)
 8000af8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000afc:	6213      	str	r3, [r2, #32]
//	GPIOB->AFR[0] &=~ (GPIO_AFRL_AFRL7);
//	GPIOB->AFR[0] |= 0x7U<<GPIO_AFRL_AFSEL7_Pos;
	GPIOX_AFR(7, USART1_RX);
 8000afe:	4b47      	ldr	r3, [pc, #284]	; (8000c1c <USART1_Init+0x17c>)
 8000b00:	6a1b      	ldr	r3, [r3, #32]
 8000b02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000b06:	4a45      	ldr	r2, [pc, #276]	; (8000c1c <USART1_Init+0x17c>)
 8000b08:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8000b0c:	6213      	str	r3, [r2, #32]
	//USART1
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000b0e:	4b42      	ldr	r3, [pc, #264]	; (8000c18 <USART1_Init+0x178>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a41      	ldr	r2, [pc, #260]	; (8000c18 <USART1_Init+0x178>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
	//deshabilitar el USART
	USART1->CR1 = 0x0U;						//reset state
 8000b1a:	4b41      	ldr	r3, [pc, #260]	; (8000c20 <USART1_Init+0x180>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
	USART1->BRR = UART_BRR_SAMPLING16(16E+6, baud);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2200      	movs	r2, #0
 8000b24:	469a      	mov	sl, r3
 8000b26:	4693      	mov	fp, r2
 8000b28:	f04f 0200 	mov.w	r2, #0
 8000b2c:	f04f 0300 	mov.w	r3, #0
 8000b30:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8000b34:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8000b38:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8000b3c:	a134      	add	r1, pc, #208	; (adr r1, 8000c10 <USART1_Init+0x170>)
 8000b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b42:	f7ff fbb5 	bl	80002b0 <__aeabi_uldivmod>
 8000b46:	4602      	mov	r2, r0
 8000b48:	460b      	mov	r3, r1
 8000b4a:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <USART1_Init+0x184>)
 8000b4c:	fba3 2302 	umull	r2, r3, r3, r2
 8000b50:	095b      	lsrs	r3, r3, #5
 8000b52:	011e      	lsls	r6, r3, #4
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	4698      	mov	r8, r3
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	f04f 0200 	mov.w	r2, #0
 8000b60:	f04f 0300 	mov.w	r3, #0
 8000b64:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8000b68:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8000b6c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8000b70:	a127      	add	r1, pc, #156	; (adr r1, 8000c10 <USART1_Init+0x170>)
 8000b72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b76:	f7ff fb9b 	bl	80002b0 <__aeabi_uldivmod>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	460b      	mov	r3, r1
 8000b7e:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <USART1_Init+0x184>)
 8000b80:	fba3 1302 	umull	r1, r3, r3, r2
 8000b84:	095b      	lsrs	r3, r3, #5
 8000b86:	2164      	movs	r1, #100	; 0x64
 8000b88:	fb01 f303 	mul.w	r3, r1, r3
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	3332      	adds	r3, #50	; 0x32
 8000b92:	4a24      	ldr	r2, [pc, #144]	; (8000c24 <USART1_Init+0x184>)
 8000b94:	fba2 2303 	umull	r2, r3, r2, r3
 8000b98:	095b      	lsrs	r3, r3, #5
 8000b9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b9e:	441e      	add	r6, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	461c      	mov	r4, r3
 8000ba6:	4615      	mov	r5, r2
 8000ba8:	f04f 0200 	mov.w	r2, #0
 8000bac:	f04f 0300 	mov.w	r3, #0
 8000bb0:	00ab      	lsls	r3, r5, #2
 8000bb2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8000bb6:	00a2      	lsls	r2, r4, #2
 8000bb8:	a115      	add	r1, pc, #84	; (adr r1, 8000c10 <USART1_Init+0x170>)
 8000bba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bbe:	f7ff fb77 	bl	80002b0 <__aeabi_uldivmod>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <USART1_Init+0x184>)
 8000bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8000bcc:	095b      	lsrs	r3, r3, #5
 8000bce:	2164      	movs	r1, #100	; 0x64
 8000bd0:	fb01 f303 	mul.w	r3, r1, r3
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	011b      	lsls	r3, r3, #4
 8000bd8:	3332      	adds	r3, #50	; 0x32
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <USART1_Init+0x184>)
 8000bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000be0:	095b      	lsrs	r3, r3, #5
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <USART1_Init+0x180>)
 8000be8:	4433      	add	r3, r6
 8000bea:	6093      	str	r3, [r2, #8]
	//bit parada (STOP)

	//longitud de los datos (M)

	//habilitar RX, TX (RE, DE)
	USART1->CR1 |= USART_CR1_RE | USART_CR1_TE;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <USART1_Init+0x180>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <USART1_Init+0x180>)
 8000bf2:	f043 030c 	orr.w	r3, r3, #12
 8000bf6:	60d3      	str	r3, [r2, #12]


	//habilitas el uart
	USART1->CR1 |= USART_CR1_UE;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <USART1_Init+0x180>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <USART1_Init+0x180>)
 8000bfe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c02:	60d3      	str	r3, [r2, #12]

	return;
 8000c04:	bf00      	nop
}
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c0e:	bf00      	nop
 8000c10:	17d78400 	.word	0x17d78400
 8000c14:	00000000 	.word	0x00000000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020400 	.word	0x40020400
 8000c20:	40011000 	.word	0x40011000
 8000c24:	51eb851f 	.word	0x51eb851f

08000c28 <UART_SendData>:
 * @param [pData] : puntero a los datos a transmitir
 * @param [len]: tamaño de datos a transmitir
 * @param [timeout] tiempo maximo para transimitir los datos
 * @return UART_Status_t
 */
UART_Status_t UART_SendData(USART_TypeDef *USARTx, uint8_t *pData, uint32_t len, uint32_t timeout){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	603b      	str	r3, [r7, #0]

	uint32_t tickStart = GetTicks();
 8000c36:	f7ff fe13 	bl	8000860 <GetTicks>
 8000c3a:	6178      	str	r0, [r7, #20]
	if(pData == NULL){
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d117      	bne.n	8000c72 <UART_SendData+0x4a>
		return UART_ERROR;
 8000c42:	2302      	movs	r3, #2
 8000c44:	e01e      	b.n	8000c84 <UART_SendData+0x5c>
	}

	while((GetTicks() - tickStart) <= timeout){
		if(USARTx->SR & USART_SR_TXE){			//buffer listo para recibir otro dato
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00f      	beq.n	8000c72 <UART_SendData+0x4a>
			USARTx->DR = *pData;
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	605a      	str	r2, [r3, #4]
			pData++;
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
//			if(*pData == '\0'){
//				return UART_OK;
//			}
			len--;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
			if(len <= 0){
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d101      	bne.n	8000c72 <UART_SendData+0x4a>
				return UART_OK;					//termina de transmitir los datos
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e008      	b.n	8000c84 <UART_SendData+0x5c>
	while((GetTicks() - tickStart) <= timeout){
 8000c72:	f7ff fdf5 	bl	8000860 <GetTicks>
 8000c76:	4602      	mov	r2, r0
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	429a      	cmp	r2, r3
 8000c80:	d2e1      	bcs.n	8000c46 <UART_SendData+0x1e>
			}
		}
	}
	//timout
	return UART_TIMOUT;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <__io_putchar>:
	return UART_TIMOUT;
}



int __io_putchar(int ch){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	uint8_t c = ch & 0xFF;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	73fb      	strb	r3, [r7, #15]
	ITM_SendChar(ch);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fe41 	bl	8000924 <ITM_SendChar>

	UART_SendData(USART1, &c, 1, 1);
 8000ca2:	f107 010f 	add.w	r1, r7, #15
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4804      	ldr	r0, [pc, #16]	; (8000cbc <__io_putchar+0x30>)
 8000cac:	f7ff ffbc 	bl	8000c28 <UART_SendData>
	return ch;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40011000 	.word	0x40011000

08000cc0 <SysTick_Handler>:

extern AT_CMD_Parse_t tinyfox;
/**
 * @brief ISR -> SYSTICK
 */
void SysTick_Handler(void){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	TickInc_Callback();
 8000cc4:	f7ff fdd8 	bl	8000878 <TickInc_Callback>
	AT_Device_TickInc(&tinyfox);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <SysTick_Handler+0x14>)
 8000cca:	f7ff fc87 	bl	80005dc <AT_Device_TickInc>
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000009c 	.word	0x2000009c

08000cd8 <USART1_IRQHandler>:

/**
 * @brief ISR -> USART1
 */
void USART1_IRQHandler (void){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
	volatile uint8_t temp;
	//TX

	//RX
	if(USART1->SR & USART_SR_RXNE){		//interrupcion por RXNE
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <USART1_IRQHandler+0x30>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d009      	beq.n	8000cfe <USART1_IRQHandler+0x26>
		temp = USART1->DR;
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <USART1_IRQHandler+0x30>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	71fb      	strb	r3, [r7, #7]
//		while(!(USART1->SR & USART_SR_TXE));
//		USART1->DR = temp;
		lwrb_write(&tinyfox.buff, &temp, 1);
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <USART1_IRQHandler+0x34>)
 8000cfa:	f000 f999 	bl	8001030 <lwrb_write>
	}
	//PE

	//OV
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40011000 	.word	0x40011000
 8000d0c:	2000009c 	.word	0x2000009c

08000d10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e00a      	b.n	8000d38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d22:	f3af 8000 	nop.w
 8000d26:	4601      	mov	r1, r0
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	60ba      	str	r2, [r7, #8]
 8000d2e:	b2ca      	uxtb	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3301      	adds	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697a      	ldr	r2, [r7, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	dbf0      	blt.n	8000d22 <_read+0x12>
  }

  return len;
 8000d40:	687b      	ldr	r3, [r7, #4]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	60f8      	str	r0, [r7, #12]
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	e009      	b.n	8000d70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60ba      	str	r2, [r7, #8]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff91 	bl	8000c8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf1      	blt.n	8000d5c <_write+0x12>
  }
  return len;
 8000d78:	687b      	ldr	r3, [r7, #4]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_close>:

int _close(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000daa:	605a      	str	r2, [r3, #4]
  return 0;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <_isatty>:

int _isatty(int file)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f000 fb2e 	bl	800147c <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20020000 	.word	0x20020000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	200004b8 	.word	0x200004b8
 8000e54:	200004d0 	.word	0x200004d0

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	2302      	movs	r3, #2
 8000e94:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <SystemCoreClockUpdate+0xec>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	2b08      	cmp	r3, #8
 8000ea4:	d011      	beq.n	8000eca <SystemCoreClockUpdate+0x4e>
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d844      	bhi.n	8000f36 <SystemCoreClockUpdate+0xba>
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <SystemCoreClockUpdate+0x3e>
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d004      	beq.n	8000ec2 <SystemCoreClockUpdate+0x46>
 8000eb8:	e03d      	b.n	8000f36 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <SystemCoreClockUpdate+0xf0>)
 8000ebc:	4a2c      	ldr	r2, [pc, #176]	; (8000f70 <SystemCoreClockUpdate+0xf4>)
 8000ebe:	601a      	str	r2, [r3, #0]
      break;
 8000ec0:	e03d      	b.n	8000f3e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000ec2:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <SystemCoreClockUpdate+0xf0>)
 8000ec4:	4a2b      	ldr	r2, [pc, #172]	; (8000f74 <SystemCoreClockUpdate+0xf8>)
 8000ec6:	601a      	str	r2, [r3, #0]
      break;
 8000ec8:	e039      	b.n	8000f3e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <SystemCoreClockUpdate+0xec>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	0d9b      	lsrs	r3, r3, #22
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ed6:	4b24      	ldr	r3, [pc, #144]	; (8000f68 <SystemCoreClockUpdate+0xec>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ede:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00c      	beq.n	8000f00 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ee6:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <SystemCoreClockUpdate+0xf8>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <SystemCoreClockUpdate+0xec>)
 8000ef0:	6852      	ldr	r2, [r2, #4]
 8000ef2:	0992      	lsrs	r2, r2, #6
 8000ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ef8:	fb02 f303 	mul.w	r3, r2, r3
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	e00b      	b.n	8000f18 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000f00:	4a1b      	ldr	r2, [pc, #108]	; (8000f70 <SystemCoreClockUpdate+0xf4>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <SystemCoreClockUpdate+0xec>)
 8000f0a:	6852      	ldr	r2, [r2, #4]
 8000f0c:	0992      	lsrs	r2, r2, #6
 8000f0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <SystemCoreClockUpdate+0xec>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	0c1b      	lsrs	r3, r3, #16
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	3301      	adds	r3, #1
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <SystemCoreClockUpdate+0xf0>)
 8000f32:	6013      	str	r3, [r2, #0]
      break;
 8000f34:	e003      	b.n	8000f3e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <SystemCoreClockUpdate+0xf0>)
 8000f38:	4a0d      	ldr	r2, [pc, #52]	; (8000f70 <SystemCoreClockUpdate+0xf4>)
 8000f3a:	601a      	str	r2, [r3, #0]
      break;
 8000f3c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <SystemCoreClockUpdate+0xec>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	091b      	lsrs	r3, r3, #4
 8000f44:	f003 030f 	and.w	r3, r3, #15
 8000f48:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <SystemCoreClockUpdate+0xfc>)
 8000f4a:	5cd3      	ldrb	r3, [r2, r3]
 8000f4c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <SystemCoreClockUpdate+0xf0>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	fa22 f303 	lsr.w	r3, r2, r3
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <SystemCoreClockUpdate+0xf0>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	371c      	adds	r7, #28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	00f42400 	.word	0x00f42400
 8000f74:	017d7840 	.word	0x017d7840
 8000f78:	080025b0 	.word	0x080025b0

08000f7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f7e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f80:	f7ff ff6a 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f86:	490d      	ldr	r1, [pc, #52]	; (8000fbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f88:	4a0d      	ldr	r2, [pc, #52]	; (8000fc0 <LoopForever+0xe>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f8c:	e002      	b.n	8000f94 <LoopCopyDataInit>

08000f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f92:	3304      	adds	r3, #4

08000f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f98:	d3f9      	bcc.n	8000f8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f9c:	4c0a      	ldr	r4, [pc, #40]	; (8000fc8 <LoopForever+0x16>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa0:	e001      	b.n	8000fa6 <LoopFillZerobss>

08000fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa4:	3204      	adds	r2, #4

08000fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa8:	d3fb      	bcc.n	8000fa2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000faa:	f000 fa6d 	bl	8001488 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fae:	f7ff fce1 	bl	8000974 <main>

08000fb2 <LoopForever>:

LoopForever:
  b LoopForever
 8000fb2:	e7fe      	b.n	8000fb2 <LoopForever>
  ldr   r0, =_estack
 8000fb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fbc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fc0:	08002668 	.word	0x08002668
  ldr r2, =_sbss
 8000fc4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fc8:	200004cc 	.word	0x200004cc

08000fcc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fcc:	e7fe      	b.n	8000fcc <ADC_IRQHandler>

08000fce <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, size_t size) {
 8000fce:	b480      	push	{r7}
 8000fd0:	b089      	sub	sp, #36	; 0x24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	60f8      	str	r0, [r7, #12]
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <lwrb_init+0x1e>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <lwrb_init+0x1e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <lwrb_init+0x22>
        return 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	e019      	b.n	8001024 <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
    buff->size = size;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	330c      	adds	r3, #12
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	3308      	adds	r3, #8
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	601a      	str	r2, [r3, #0]
    return 1;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3724      	adds	r7, #36	; 0x24
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(lwrb_t* buff, const void* data, size_t btw) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
    size_t tocopy, free, buff_w_ptr;
    const uint8_t* d = data;
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d00d      	beq.n	8001062 <lwrb_write+0x32>
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d009      	beq.n	8001062 <lwrb_write+0x32>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <lwrb_write+0x32>
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d002      	beq.n	8001062 <lwrb_write+0x32>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <lwrb_write+0x36>
        return 0;
 8001062:	2300      	movs	r3, #0
 8001064:	e060      	b.n	8001128 <lwrb_write+0xf8>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f000 f956 	bl	8001318 <lwrb_get_free>
 800106c:	6278      	str	r0, [r7, #36]	; 0x24
    btw = BUF_MIN(free, btw);
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	4293      	cmp	r3, r2
 8001074:	bf28      	it	cs
 8001076:	4613      	movcs	r3, r2
 8001078:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <lwrb_write+0x54>
        return 0;
 8001080:	2300      	movs	r3, #0
 8001082:	e051      	b.n	8001128 <lwrb_write+0xf8>
    }
    buff_w_ptr = LWRB_LOAD(buff->w, memory_order_acquire);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	330c      	adds	r3, #12
 8001088:	623b      	str	r3, [r7, #32]
 800108a:	6a3b      	ldr	r3, [r7, #32]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f3bf 8f5b 	dmb	ish
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4293      	cmp	r3, r2
 80010a4:	bf28      	it	cs
 80010a6:	4613      	movcs	r3, r2
 80010a8:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b0:	4413      	add	r3, r2
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fa0a 	bl	80014d0 <memcpy>
    buff_w_ptr += tocopy;
 80010bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	4413      	add	r3, r2
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    btw -= tocopy;
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00a      	beq.n	80010e8 <lwrb_write+0xb8>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	4413      	add	r3, r2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4619      	mov	r1, r3
 80010e0:	f000 f9f6 	bl	80014d0 <memcpy>
        buff_w_ptr = btw;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d301      	bcc.n	80010f6 <lwrb_write+0xc6>
        buff_w_ptr = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    LWRB_STORE(buff->w, buff_w_ptr, memory_order_release);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	330c      	adds	r3, #12
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	f3bf 8f5b 	dmb	ish
 8001108:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <lwrb_write+0xf2>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	69f9      	ldr	r1, [r7, #28]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	440a      	add	r2, r1
 800111c:	2101      	movs	r1, #1
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	4798      	blx	r3
    return tocopy + btw;
 8001122:	69fa      	ldr	r2, [r7, #28]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4413      	add	r3, r2
}
 8001128:	4618      	mov	r0, r3
 800112a:	3730      	adds	r7, #48	; 0x30
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
lwrb_read(lwrb_t* buff, void* data, size_t btr) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
    size_t tocopy, full, buff_r_ptr;
    uint8_t* d = data;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d00d      	beq.n	8001162 <lwrb_read+0x32>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <lwrb_read+0x32>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <lwrb_read+0x32>
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d002      	beq.n	8001162 <lwrb_read+0x32>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <lwrb_read+0x36>
        return 0;
 8001162:	2300      	movs	r3, #0
 8001164:	e060      	b.n	8001228 <lwrb_read+0xf8>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f000 f917 	bl	800139a <lwrb_get_full>
 800116c:	6278      	str	r0, [r7, #36]	; 0x24
    btr = BUF_MIN(full, btr);
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	4293      	cmp	r3, r2
 8001174:	bf28      	it	cs
 8001176:	4613      	movcs	r3, r2
 8001178:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <lwrb_read+0x54>
        return 0;
 8001180:	2300      	movs	r3, #0
 8001182:	e051      	b.n	8001228 <lwrb_read+0xf8>
    }
    buff_r_ptr = LWRB_LOAD(buff->r, memory_order_acquire);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3308      	adds	r3, #8
 8001188:	623b      	str	r3, [r7, #32]
 800118a:	6a3b      	ldr	r3, [r7, #32]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f3bf 8f5b 	dmb	ish
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4293      	cmp	r3, r2
 80011a4:	bf28      	it	cs
 80011a6:	4613      	movcs	r3, r2
 80011a8:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b0:	4413      	add	r3, r2
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	4619      	mov	r1, r3
 80011b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80011b8:	f000 f98a 	bl	80014d0 <memcpy>
    buff_r_ptr += tocopy;
 80011bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	4413      	add	r3, r2
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    btr -= tocopy;
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d00a      	beq.n	80011e8 <lwrb_read+0xb8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 80011d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	18d0      	adds	r0, r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	4619      	mov	r1, r3
 80011e0:	f000 f976 	bl	80014d0 <memcpy>
        buff_r_ptr = btr;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d301      	bcc.n	80011f6 <lwrb_read+0xc6>
        buff_r_ptr = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    LWRB_STORE(buff->r, buff_r_ptr, memory_order_release);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3308      	adds	r3, #8
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	f3bf 8f5b 	dmb	ish
 8001208:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d007      	beq.n	8001222 <lwrb_read+0xf2>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	69f9      	ldr	r1, [r7, #28]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	440a      	add	r2, r1
 800121c:	2100      	movs	r1, #0
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	4798      	blx	r3
    return tocopy + btr;
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4413      	add	r3, r2
}
 8001228:	4618      	mov	r0, r3
 800122a:	3730      	adds	r7, #48	; 0x30
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <lwrb_peek>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btp: Number of bytes to peek
 * \return          Number of bytes peeked and written to output array
 */
size_t
lwrb_peek(const lwrb_t* buff, size_t skip_count, void* data, size_t btp) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	603b      	str	r3, [r7, #0]
    size_t full, tocopy, r;
    uint8_t* d = data;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	623b      	str	r3, [r7, #32]

    if (!BUF_IS_VALID(buff) || data == NULL || btp == 0) {
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00d      	beq.n	8001264 <lwrb_peek+0x34>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d009      	beq.n	8001264 <lwrb_peek+0x34>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <lwrb_peek+0x34>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d002      	beq.n	8001264 <lwrb_peek+0x34>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <lwrb_peek+0x38>
        return 0;
 8001264:	2300      	movs	r3, #0
 8001266:	e053      	b.n	8001310 <lwrb_peek+0xe0>

    /*
     * Calculate maximum number of bytes available to read
     * and check if we can even fit to it
     */
    full = lwrb_get_full(buff);
 8001268:	68f8      	ldr	r0, [r7, #12]
 800126a:	f000 f896 	bl	800139a <lwrb_get_full>
 800126e:	61f8      	str	r0, [r7, #28]
    if (skip_count >= full) {
 8001270:	68ba      	ldr	r2, [r7, #8]
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	429a      	cmp	r2, r3
 8001276:	d301      	bcc.n	800127c <lwrb_peek+0x4c>
        return 0;
 8001278:	2300      	movs	r3, #0
 800127a:	e049      	b.n	8001310 <lwrb_peek+0xe0>
    }
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3308      	adds	r3, #8
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    r += skip_count;
 800128c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4413      	add	r3, r2
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    full -= skip_count;
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	61fb      	str	r3, [r7, #28]
    if (r >= buff->size) {
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d304      	bcc.n	80012b0 <lwrb_peek+0x80>
        r -= buff->size;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Check maximum number of bytes available to read after skip */
    btp = BUF_MIN(full, btp);
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	4293      	cmp	r3, r2
 80012b6:	bf28      	it	cs
 80012b8:	4613      	movcs	r3, r2
 80012ba:	603b      	str	r3, [r7, #0]
    if (btp == 0) {
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <lwrb_peek+0x96>
        return 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e024      	b.n	8001310 <lwrb_peek+0xe0>
    }

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - r, btp);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	4293      	cmp	r3, r2
 80012d2:	bf28      	it	cs
 80012d4:	4613      	movcs	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
    BUF_MEMCPY(d, &buff->buff[r], tocopy);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	4413      	add	r3, r2
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	4619      	mov	r1, r3
 80012e4:	6a38      	ldr	r0, [r7, #32]
 80012e6:	f000 f8f3 	bl	80014d0 <memcpy>
    btp -= tocopy;
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	603b      	str	r3, [r7, #0]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btp > 0) {
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d008      	beq.n	800130a <lwrb_peek+0xda>
        BUF_MEMCPY(&d[tocopy], buff->buff, btp);
 80012f8:	6a3a      	ldr	r2, [r7, #32]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	18d0      	adds	r0, r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	683a      	ldr	r2, [r7, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f000 f8e3 	bl	80014d0 <memcpy>
    }
    return tocopy + btp;
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4413      	add	r3, r2
}
 8001310:	4618      	mov	r0, r3
 8001312:	3728      	adds	r7, #40	; 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(const lwrb_t* buff) {
 8001318:	b480      	push	{r7}
 800131a:	b08b      	sub	sp, #44	; 0x2c
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <lwrb_get_free+0x1e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d003      	beq.n	8001336 <lwrb_get_free+0x1e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <lwrb_get_free+0x22>
        return 0;
 8001336:	2300      	movs	r3, #0
 8001338:	e029      	b.n	800138e <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	330c      	adds	r3, #12
 800133e:	623b      	str	r3, [r7, #32]
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	3308      	adds	r3, #8
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	617b      	str	r3, [r7, #20]

    if (w == r) {
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	429a      	cmp	r2, r3
 8001360:	d103      	bne.n	800136a <lwrb_get_free+0x52>
        size = buff->size;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
 8001368:	e00f      	b.n	800138a <lwrb_get_free+0x72>
    } else if (r > w) {
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	429a      	cmp	r2, r3
 8001370:	d904      	bls.n	800137c <lwrb_get_free+0x64>
        size = r - w;
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
 800137a:	e006      	b.n	800138a <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	6979      	ldr	r1, [r7, #20]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	1acb      	subs	r3, r1, r3
 8001386:	4413      	add	r3, r2
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	3b01      	subs	r3, #1
}
 800138e:	4618      	mov	r0, r3
 8001390:	372c      	adds	r7, #44	; 0x2c
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(const lwrb_t* buff) {
 800139a:	b480      	push	{r7}
 800139c:	b08b      	sub	sp, #44	; 0x2c
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <lwrb_get_full+0x1e>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <lwrb_get_full+0x1e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <lwrb_get_full+0x22>
        return 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e027      	b.n	800140c <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	330c      	adds	r3, #12
 80013c0:	623b      	str	r3, [r7, #32]
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3308      	adds	r3, #8
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	617b      	str	r3, [r7, #20]

    if (w == r) {
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d102      	bne.n	80013ea <lwrb_get_full+0x50>
        size = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
 80013e8:	e00f      	b.n	800140a <lwrb_get_full+0x70>
    } else if (w > r) {
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d904      	bls.n	80013fc <lwrb_get_full+0x62>
        size = w - r;
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	e006      	b.n	800140a <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	69f9      	ldr	r1, [r7, #28]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	1acb      	subs	r3, r1, r3
 8001406:	4413      	add	r3, r2
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return size;
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800140c:	4618      	mov	r0, r3
 800140e:	372c      	adds	r7, #44	; 0x2c
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <lwrb_reset>:
 * \note            This function is not thread safe.
 *                      When used, application must ensure there is no active read/write operation
 * \param[in]       buff: Buffer handle
 */
void
lwrb_reset(lwrb_t* buff) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
    if (BUF_IS_VALID(buff)) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d025      	beq.n	8001472 <lwrb_reset+0x5a>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d021      	beq.n	8001472 <lwrb_reset+0x5a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d01d      	beq.n	8001472 <lwrb_reset+0x5a>
        LWRB_STORE(buff->w, 0, memory_order_release);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	330c      	adds	r3, #12
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f3bf 8f5b 	dmb	ish
 8001448:	601a      	str	r2, [r3, #0]
        LWRB_STORE(buff->r, 0, memory_order_release);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3308      	adds	r3, #8
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f3bf 8f5b 	dmb	ish
 800145c:	601a      	str	r2, [r3, #0]
        BUF_SEND_EVT(buff, LWRB_EVT_RESET, 0);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <lwrb_reset+0x5a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	2200      	movs	r2, #0
 800146c:	2102      	movs	r1, #2
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	4798      	blx	r3
    }
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <__errno>:
 800147c:	4b01      	ldr	r3, [pc, #4]	; (8001484 <__errno+0x8>)
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	20000004 	.word	0x20000004

08001488 <__libc_init_array>:
 8001488:	b570      	push	{r4, r5, r6, lr}
 800148a:	4d0d      	ldr	r5, [pc, #52]	; (80014c0 <__libc_init_array+0x38>)
 800148c:	4c0d      	ldr	r4, [pc, #52]	; (80014c4 <__libc_init_array+0x3c>)
 800148e:	1b64      	subs	r4, r4, r5
 8001490:	10a4      	asrs	r4, r4, #2
 8001492:	2600      	movs	r6, #0
 8001494:	42a6      	cmp	r6, r4
 8001496:	d109      	bne.n	80014ac <__libc_init_array+0x24>
 8001498:	4d0b      	ldr	r5, [pc, #44]	; (80014c8 <__libc_init_array+0x40>)
 800149a:	4c0c      	ldr	r4, [pc, #48]	; (80014cc <__libc_init_array+0x44>)
 800149c:	f001 f832 	bl	8002504 <_init>
 80014a0:	1b64      	subs	r4, r4, r5
 80014a2:	10a4      	asrs	r4, r4, #2
 80014a4:	2600      	movs	r6, #0
 80014a6:	42a6      	cmp	r6, r4
 80014a8:	d105      	bne.n	80014b6 <__libc_init_array+0x2e>
 80014aa:	bd70      	pop	{r4, r5, r6, pc}
 80014ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80014b0:	4798      	blx	r3
 80014b2:	3601      	adds	r6, #1
 80014b4:	e7ee      	b.n	8001494 <__libc_init_array+0xc>
 80014b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80014ba:	4798      	blx	r3
 80014bc:	3601      	adds	r6, #1
 80014be:	e7f2      	b.n	80014a6 <__libc_init_array+0x1e>
 80014c0:	08002660 	.word	0x08002660
 80014c4:	08002660 	.word	0x08002660
 80014c8:	08002660 	.word	0x08002660
 80014cc:	08002664 	.word	0x08002664

080014d0 <memcpy>:
 80014d0:	440a      	add	r2, r1
 80014d2:	4291      	cmp	r1, r2
 80014d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80014d8:	d100      	bne.n	80014dc <memcpy+0xc>
 80014da:	4770      	bx	lr
 80014dc:	b510      	push	{r4, lr}
 80014de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80014e6:	4291      	cmp	r1, r2
 80014e8:	d1f9      	bne.n	80014de <memcpy+0xe>
 80014ea:	bd10      	pop	{r4, pc}

080014ec <memset>:
 80014ec:	4402      	add	r2, r0
 80014ee:	4603      	mov	r3, r0
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d100      	bne.n	80014f6 <memset+0xa>
 80014f4:	4770      	bx	lr
 80014f6:	f803 1b01 	strb.w	r1, [r3], #1
 80014fa:	e7f9      	b.n	80014f0 <memset+0x4>

080014fc <iprintf>:
 80014fc:	b40f      	push	{r0, r1, r2, r3}
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <iprintf+0x2c>)
 8001500:	b513      	push	{r0, r1, r4, lr}
 8001502:	681c      	ldr	r4, [r3, #0]
 8001504:	b124      	cbz	r4, 8001510 <iprintf+0x14>
 8001506:	69a3      	ldr	r3, [r4, #24]
 8001508:	b913      	cbnz	r3, 8001510 <iprintf+0x14>
 800150a:	4620      	mov	r0, r4
 800150c:	f000 fa5e 	bl	80019cc <__sinit>
 8001510:	ab05      	add	r3, sp, #20
 8001512:	9a04      	ldr	r2, [sp, #16]
 8001514:	68a1      	ldr	r1, [r4, #8]
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	4620      	mov	r0, r4
 800151a:	f000 fc67 	bl	8001dec <_vfiprintf_r>
 800151e:	b002      	add	sp, #8
 8001520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001524:	b004      	add	sp, #16
 8001526:	4770      	bx	lr
 8001528:	20000004 	.word	0x20000004

0800152c <_puts_r>:
 800152c:	b570      	push	{r4, r5, r6, lr}
 800152e:	460e      	mov	r6, r1
 8001530:	4605      	mov	r5, r0
 8001532:	b118      	cbz	r0, 800153c <_puts_r+0x10>
 8001534:	6983      	ldr	r3, [r0, #24]
 8001536:	b90b      	cbnz	r3, 800153c <_puts_r+0x10>
 8001538:	f000 fa48 	bl	80019cc <__sinit>
 800153c:	69ab      	ldr	r3, [r5, #24]
 800153e:	68ac      	ldr	r4, [r5, #8]
 8001540:	b913      	cbnz	r3, 8001548 <_puts_r+0x1c>
 8001542:	4628      	mov	r0, r5
 8001544:	f000 fa42 	bl	80019cc <__sinit>
 8001548:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <_puts_r+0xd0>)
 800154a:	429c      	cmp	r4, r3
 800154c:	d120      	bne.n	8001590 <_puts_r+0x64>
 800154e:	686c      	ldr	r4, [r5, #4]
 8001550:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001552:	07db      	lsls	r3, r3, #31
 8001554:	d405      	bmi.n	8001562 <_puts_r+0x36>
 8001556:	89a3      	ldrh	r3, [r4, #12]
 8001558:	0598      	lsls	r0, r3, #22
 800155a:	d402      	bmi.n	8001562 <_puts_r+0x36>
 800155c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800155e:	f000 fad3 	bl	8001b08 <__retarget_lock_acquire_recursive>
 8001562:	89a3      	ldrh	r3, [r4, #12]
 8001564:	0719      	lsls	r1, r3, #28
 8001566:	d51d      	bpl.n	80015a4 <_puts_r+0x78>
 8001568:	6923      	ldr	r3, [r4, #16]
 800156a:	b1db      	cbz	r3, 80015a4 <_puts_r+0x78>
 800156c:	3e01      	subs	r6, #1
 800156e:	68a3      	ldr	r3, [r4, #8]
 8001570:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001574:	3b01      	subs	r3, #1
 8001576:	60a3      	str	r3, [r4, #8]
 8001578:	bb39      	cbnz	r1, 80015ca <_puts_r+0x9e>
 800157a:	2b00      	cmp	r3, #0
 800157c:	da38      	bge.n	80015f0 <_puts_r+0xc4>
 800157e:	4622      	mov	r2, r4
 8001580:	210a      	movs	r1, #10
 8001582:	4628      	mov	r0, r5
 8001584:	f000 f848 	bl	8001618 <__swbuf_r>
 8001588:	3001      	adds	r0, #1
 800158a:	d011      	beq.n	80015b0 <_puts_r+0x84>
 800158c:	250a      	movs	r5, #10
 800158e:	e011      	b.n	80015b4 <_puts_r+0x88>
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <_puts_r+0xd4>)
 8001592:	429c      	cmp	r4, r3
 8001594:	d101      	bne.n	800159a <_puts_r+0x6e>
 8001596:	68ac      	ldr	r4, [r5, #8]
 8001598:	e7da      	b.n	8001550 <_puts_r+0x24>
 800159a:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <_puts_r+0xd8>)
 800159c:	429c      	cmp	r4, r3
 800159e:	bf08      	it	eq
 80015a0:	68ec      	ldreq	r4, [r5, #12]
 80015a2:	e7d5      	b.n	8001550 <_puts_r+0x24>
 80015a4:	4621      	mov	r1, r4
 80015a6:	4628      	mov	r0, r5
 80015a8:	f000 f888 	bl	80016bc <__swsetup_r>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d0dd      	beq.n	800156c <_puts_r+0x40>
 80015b0:	f04f 35ff 	mov.w	r5, #4294967295
 80015b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015b6:	07da      	lsls	r2, r3, #31
 80015b8:	d405      	bmi.n	80015c6 <_puts_r+0x9a>
 80015ba:	89a3      	ldrh	r3, [r4, #12]
 80015bc:	059b      	lsls	r3, r3, #22
 80015be:	d402      	bmi.n	80015c6 <_puts_r+0x9a>
 80015c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015c2:	f000 faa2 	bl	8001b0a <__retarget_lock_release_recursive>
 80015c6:	4628      	mov	r0, r5
 80015c8:	bd70      	pop	{r4, r5, r6, pc}
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da04      	bge.n	80015d8 <_puts_r+0xac>
 80015ce:	69a2      	ldr	r2, [r4, #24]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dc06      	bgt.n	80015e2 <_puts_r+0xb6>
 80015d4:	290a      	cmp	r1, #10
 80015d6:	d004      	beq.n	80015e2 <_puts_r+0xb6>
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	1c5a      	adds	r2, r3, #1
 80015dc:	6022      	str	r2, [r4, #0]
 80015de:	7019      	strb	r1, [r3, #0]
 80015e0:	e7c5      	b.n	800156e <_puts_r+0x42>
 80015e2:	4622      	mov	r2, r4
 80015e4:	4628      	mov	r0, r5
 80015e6:	f000 f817 	bl	8001618 <__swbuf_r>
 80015ea:	3001      	adds	r0, #1
 80015ec:	d1bf      	bne.n	800156e <_puts_r+0x42>
 80015ee:	e7df      	b.n	80015b0 <_puts_r+0x84>
 80015f0:	6823      	ldr	r3, [r4, #0]
 80015f2:	250a      	movs	r5, #10
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	6022      	str	r2, [r4, #0]
 80015f8:	701d      	strb	r5, [r3, #0]
 80015fa:	e7db      	b.n	80015b4 <_puts_r+0x88>
 80015fc:	080025e4 	.word	0x080025e4
 8001600:	08002604 	.word	0x08002604
 8001604:	080025c4 	.word	0x080025c4

08001608 <puts>:
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <puts+0xc>)
 800160a:	4601      	mov	r1, r0
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	f7ff bf8d 	b.w	800152c <_puts_r>
 8001612:	bf00      	nop
 8001614:	20000004 	.word	0x20000004

08001618 <__swbuf_r>:
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	460e      	mov	r6, r1
 800161c:	4614      	mov	r4, r2
 800161e:	4605      	mov	r5, r0
 8001620:	b118      	cbz	r0, 800162a <__swbuf_r+0x12>
 8001622:	6983      	ldr	r3, [r0, #24]
 8001624:	b90b      	cbnz	r3, 800162a <__swbuf_r+0x12>
 8001626:	f000 f9d1 	bl	80019cc <__sinit>
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <__swbuf_r+0x98>)
 800162c:	429c      	cmp	r4, r3
 800162e:	d12b      	bne.n	8001688 <__swbuf_r+0x70>
 8001630:	686c      	ldr	r4, [r5, #4]
 8001632:	69a3      	ldr	r3, [r4, #24]
 8001634:	60a3      	str	r3, [r4, #8]
 8001636:	89a3      	ldrh	r3, [r4, #12]
 8001638:	071a      	lsls	r2, r3, #28
 800163a:	d52f      	bpl.n	800169c <__swbuf_r+0x84>
 800163c:	6923      	ldr	r3, [r4, #16]
 800163e:	b36b      	cbz	r3, 800169c <__swbuf_r+0x84>
 8001640:	6923      	ldr	r3, [r4, #16]
 8001642:	6820      	ldr	r0, [r4, #0]
 8001644:	1ac0      	subs	r0, r0, r3
 8001646:	6963      	ldr	r3, [r4, #20]
 8001648:	b2f6      	uxtb	r6, r6
 800164a:	4283      	cmp	r3, r0
 800164c:	4637      	mov	r7, r6
 800164e:	dc04      	bgt.n	800165a <__swbuf_r+0x42>
 8001650:	4621      	mov	r1, r4
 8001652:	4628      	mov	r0, r5
 8001654:	f000 f926 	bl	80018a4 <_fflush_r>
 8001658:	bb30      	cbnz	r0, 80016a8 <__swbuf_r+0x90>
 800165a:	68a3      	ldr	r3, [r4, #8]
 800165c:	3b01      	subs	r3, #1
 800165e:	60a3      	str	r3, [r4, #8]
 8001660:	6823      	ldr	r3, [r4, #0]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	6022      	str	r2, [r4, #0]
 8001666:	701e      	strb	r6, [r3, #0]
 8001668:	6963      	ldr	r3, [r4, #20]
 800166a:	3001      	adds	r0, #1
 800166c:	4283      	cmp	r3, r0
 800166e:	d004      	beq.n	800167a <__swbuf_r+0x62>
 8001670:	89a3      	ldrh	r3, [r4, #12]
 8001672:	07db      	lsls	r3, r3, #31
 8001674:	d506      	bpl.n	8001684 <__swbuf_r+0x6c>
 8001676:	2e0a      	cmp	r6, #10
 8001678:	d104      	bne.n	8001684 <__swbuf_r+0x6c>
 800167a:	4621      	mov	r1, r4
 800167c:	4628      	mov	r0, r5
 800167e:	f000 f911 	bl	80018a4 <_fflush_r>
 8001682:	b988      	cbnz	r0, 80016a8 <__swbuf_r+0x90>
 8001684:	4638      	mov	r0, r7
 8001686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <__swbuf_r+0x9c>)
 800168a:	429c      	cmp	r4, r3
 800168c:	d101      	bne.n	8001692 <__swbuf_r+0x7a>
 800168e:	68ac      	ldr	r4, [r5, #8]
 8001690:	e7cf      	b.n	8001632 <__swbuf_r+0x1a>
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <__swbuf_r+0xa0>)
 8001694:	429c      	cmp	r4, r3
 8001696:	bf08      	it	eq
 8001698:	68ec      	ldreq	r4, [r5, #12]
 800169a:	e7ca      	b.n	8001632 <__swbuf_r+0x1a>
 800169c:	4621      	mov	r1, r4
 800169e:	4628      	mov	r0, r5
 80016a0:	f000 f80c 	bl	80016bc <__swsetup_r>
 80016a4:	2800      	cmp	r0, #0
 80016a6:	d0cb      	beq.n	8001640 <__swbuf_r+0x28>
 80016a8:	f04f 37ff 	mov.w	r7, #4294967295
 80016ac:	e7ea      	b.n	8001684 <__swbuf_r+0x6c>
 80016ae:	bf00      	nop
 80016b0:	080025e4 	.word	0x080025e4
 80016b4:	08002604 	.word	0x08002604
 80016b8:	080025c4 	.word	0x080025c4

080016bc <__swsetup_r>:
 80016bc:	4b32      	ldr	r3, [pc, #200]	; (8001788 <__swsetup_r+0xcc>)
 80016be:	b570      	push	{r4, r5, r6, lr}
 80016c0:	681d      	ldr	r5, [r3, #0]
 80016c2:	4606      	mov	r6, r0
 80016c4:	460c      	mov	r4, r1
 80016c6:	b125      	cbz	r5, 80016d2 <__swsetup_r+0x16>
 80016c8:	69ab      	ldr	r3, [r5, #24]
 80016ca:	b913      	cbnz	r3, 80016d2 <__swsetup_r+0x16>
 80016cc:	4628      	mov	r0, r5
 80016ce:	f000 f97d 	bl	80019cc <__sinit>
 80016d2:	4b2e      	ldr	r3, [pc, #184]	; (800178c <__swsetup_r+0xd0>)
 80016d4:	429c      	cmp	r4, r3
 80016d6:	d10f      	bne.n	80016f8 <__swsetup_r+0x3c>
 80016d8:	686c      	ldr	r4, [r5, #4]
 80016da:	89a3      	ldrh	r3, [r4, #12]
 80016dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80016e0:	0719      	lsls	r1, r3, #28
 80016e2:	d42c      	bmi.n	800173e <__swsetup_r+0x82>
 80016e4:	06dd      	lsls	r5, r3, #27
 80016e6:	d411      	bmi.n	800170c <__swsetup_r+0x50>
 80016e8:	2309      	movs	r3, #9
 80016ea:	6033      	str	r3, [r6, #0]
 80016ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80016f0:	81a3      	strh	r3, [r4, #12]
 80016f2:	f04f 30ff 	mov.w	r0, #4294967295
 80016f6:	e03e      	b.n	8001776 <__swsetup_r+0xba>
 80016f8:	4b25      	ldr	r3, [pc, #148]	; (8001790 <__swsetup_r+0xd4>)
 80016fa:	429c      	cmp	r4, r3
 80016fc:	d101      	bne.n	8001702 <__swsetup_r+0x46>
 80016fe:	68ac      	ldr	r4, [r5, #8]
 8001700:	e7eb      	b.n	80016da <__swsetup_r+0x1e>
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <__swsetup_r+0xd8>)
 8001704:	429c      	cmp	r4, r3
 8001706:	bf08      	it	eq
 8001708:	68ec      	ldreq	r4, [r5, #12]
 800170a:	e7e6      	b.n	80016da <__swsetup_r+0x1e>
 800170c:	0758      	lsls	r0, r3, #29
 800170e:	d512      	bpl.n	8001736 <__swsetup_r+0x7a>
 8001710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001712:	b141      	cbz	r1, 8001726 <__swsetup_r+0x6a>
 8001714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001718:	4299      	cmp	r1, r3
 800171a:	d002      	beq.n	8001722 <__swsetup_r+0x66>
 800171c:	4630      	mov	r0, r6
 800171e:	f000 fa5b 	bl	8001bd8 <_free_r>
 8001722:	2300      	movs	r3, #0
 8001724:	6363      	str	r3, [r4, #52]	; 0x34
 8001726:	89a3      	ldrh	r3, [r4, #12]
 8001728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800172c:	81a3      	strh	r3, [r4, #12]
 800172e:	2300      	movs	r3, #0
 8001730:	6063      	str	r3, [r4, #4]
 8001732:	6923      	ldr	r3, [r4, #16]
 8001734:	6023      	str	r3, [r4, #0]
 8001736:	89a3      	ldrh	r3, [r4, #12]
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	81a3      	strh	r3, [r4, #12]
 800173e:	6923      	ldr	r3, [r4, #16]
 8001740:	b94b      	cbnz	r3, 8001756 <__swsetup_r+0x9a>
 8001742:	89a3      	ldrh	r3, [r4, #12]
 8001744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800174c:	d003      	beq.n	8001756 <__swsetup_r+0x9a>
 800174e:	4621      	mov	r1, r4
 8001750:	4630      	mov	r0, r6
 8001752:	f000 fa01 	bl	8001b58 <__smakebuf_r>
 8001756:	89a0      	ldrh	r0, [r4, #12]
 8001758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800175c:	f010 0301 	ands.w	r3, r0, #1
 8001760:	d00a      	beq.n	8001778 <__swsetup_r+0xbc>
 8001762:	2300      	movs	r3, #0
 8001764:	60a3      	str	r3, [r4, #8]
 8001766:	6963      	ldr	r3, [r4, #20]
 8001768:	425b      	negs	r3, r3
 800176a:	61a3      	str	r3, [r4, #24]
 800176c:	6923      	ldr	r3, [r4, #16]
 800176e:	b943      	cbnz	r3, 8001782 <__swsetup_r+0xc6>
 8001770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001774:	d1ba      	bne.n	80016ec <__swsetup_r+0x30>
 8001776:	bd70      	pop	{r4, r5, r6, pc}
 8001778:	0781      	lsls	r1, r0, #30
 800177a:	bf58      	it	pl
 800177c:	6963      	ldrpl	r3, [r4, #20]
 800177e:	60a3      	str	r3, [r4, #8]
 8001780:	e7f4      	b.n	800176c <__swsetup_r+0xb0>
 8001782:	2000      	movs	r0, #0
 8001784:	e7f7      	b.n	8001776 <__swsetup_r+0xba>
 8001786:	bf00      	nop
 8001788:	20000004 	.word	0x20000004
 800178c:	080025e4 	.word	0x080025e4
 8001790:	08002604 	.word	0x08002604
 8001794:	080025c4 	.word	0x080025c4

08001798 <__sflush_r>:
 8001798:	898a      	ldrh	r2, [r1, #12]
 800179a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800179e:	4605      	mov	r5, r0
 80017a0:	0710      	lsls	r0, r2, #28
 80017a2:	460c      	mov	r4, r1
 80017a4:	d458      	bmi.n	8001858 <__sflush_r+0xc0>
 80017a6:	684b      	ldr	r3, [r1, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dc05      	bgt.n	80017b8 <__sflush_r+0x20>
 80017ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	dc02      	bgt.n	80017b8 <__sflush_r+0x20>
 80017b2:	2000      	movs	r0, #0
 80017b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017ba:	2e00      	cmp	r6, #0
 80017bc:	d0f9      	beq.n	80017b2 <__sflush_r+0x1a>
 80017be:	2300      	movs	r3, #0
 80017c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80017c4:	682f      	ldr	r7, [r5, #0]
 80017c6:	602b      	str	r3, [r5, #0]
 80017c8:	d032      	beq.n	8001830 <__sflush_r+0x98>
 80017ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80017cc:	89a3      	ldrh	r3, [r4, #12]
 80017ce:	075a      	lsls	r2, r3, #29
 80017d0:	d505      	bpl.n	80017de <__sflush_r+0x46>
 80017d2:	6863      	ldr	r3, [r4, #4]
 80017d4:	1ac0      	subs	r0, r0, r3
 80017d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80017d8:	b10b      	cbz	r3, 80017de <__sflush_r+0x46>
 80017da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80017dc:	1ac0      	subs	r0, r0, r3
 80017de:	2300      	movs	r3, #0
 80017e0:	4602      	mov	r2, r0
 80017e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80017e4:	6a21      	ldr	r1, [r4, #32]
 80017e6:	4628      	mov	r0, r5
 80017e8:	47b0      	blx	r6
 80017ea:	1c43      	adds	r3, r0, #1
 80017ec:	89a3      	ldrh	r3, [r4, #12]
 80017ee:	d106      	bne.n	80017fe <__sflush_r+0x66>
 80017f0:	6829      	ldr	r1, [r5, #0]
 80017f2:	291d      	cmp	r1, #29
 80017f4:	d82c      	bhi.n	8001850 <__sflush_r+0xb8>
 80017f6:	4a2a      	ldr	r2, [pc, #168]	; (80018a0 <__sflush_r+0x108>)
 80017f8:	40ca      	lsrs	r2, r1
 80017fa:	07d6      	lsls	r6, r2, #31
 80017fc:	d528      	bpl.n	8001850 <__sflush_r+0xb8>
 80017fe:	2200      	movs	r2, #0
 8001800:	6062      	str	r2, [r4, #4]
 8001802:	04d9      	lsls	r1, r3, #19
 8001804:	6922      	ldr	r2, [r4, #16]
 8001806:	6022      	str	r2, [r4, #0]
 8001808:	d504      	bpl.n	8001814 <__sflush_r+0x7c>
 800180a:	1c42      	adds	r2, r0, #1
 800180c:	d101      	bne.n	8001812 <__sflush_r+0x7a>
 800180e:	682b      	ldr	r3, [r5, #0]
 8001810:	b903      	cbnz	r3, 8001814 <__sflush_r+0x7c>
 8001812:	6560      	str	r0, [r4, #84]	; 0x54
 8001814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001816:	602f      	str	r7, [r5, #0]
 8001818:	2900      	cmp	r1, #0
 800181a:	d0ca      	beq.n	80017b2 <__sflush_r+0x1a>
 800181c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001820:	4299      	cmp	r1, r3
 8001822:	d002      	beq.n	800182a <__sflush_r+0x92>
 8001824:	4628      	mov	r0, r5
 8001826:	f000 f9d7 	bl	8001bd8 <_free_r>
 800182a:	2000      	movs	r0, #0
 800182c:	6360      	str	r0, [r4, #52]	; 0x34
 800182e:	e7c1      	b.n	80017b4 <__sflush_r+0x1c>
 8001830:	6a21      	ldr	r1, [r4, #32]
 8001832:	2301      	movs	r3, #1
 8001834:	4628      	mov	r0, r5
 8001836:	47b0      	blx	r6
 8001838:	1c41      	adds	r1, r0, #1
 800183a:	d1c7      	bne.n	80017cc <__sflush_r+0x34>
 800183c:	682b      	ldr	r3, [r5, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0c4      	beq.n	80017cc <__sflush_r+0x34>
 8001842:	2b1d      	cmp	r3, #29
 8001844:	d001      	beq.n	800184a <__sflush_r+0xb2>
 8001846:	2b16      	cmp	r3, #22
 8001848:	d101      	bne.n	800184e <__sflush_r+0xb6>
 800184a:	602f      	str	r7, [r5, #0]
 800184c:	e7b1      	b.n	80017b2 <__sflush_r+0x1a>
 800184e:	89a3      	ldrh	r3, [r4, #12]
 8001850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001854:	81a3      	strh	r3, [r4, #12]
 8001856:	e7ad      	b.n	80017b4 <__sflush_r+0x1c>
 8001858:	690f      	ldr	r7, [r1, #16]
 800185a:	2f00      	cmp	r7, #0
 800185c:	d0a9      	beq.n	80017b2 <__sflush_r+0x1a>
 800185e:	0793      	lsls	r3, r2, #30
 8001860:	680e      	ldr	r6, [r1, #0]
 8001862:	bf08      	it	eq
 8001864:	694b      	ldreq	r3, [r1, #20]
 8001866:	600f      	str	r7, [r1, #0]
 8001868:	bf18      	it	ne
 800186a:	2300      	movne	r3, #0
 800186c:	eba6 0807 	sub.w	r8, r6, r7
 8001870:	608b      	str	r3, [r1, #8]
 8001872:	f1b8 0f00 	cmp.w	r8, #0
 8001876:	dd9c      	ble.n	80017b2 <__sflush_r+0x1a>
 8001878:	6a21      	ldr	r1, [r4, #32]
 800187a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800187c:	4643      	mov	r3, r8
 800187e:	463a      	mov	r2, r7
 8001880:	4628      	mov	r0, r5
 8001882:	47b0      	blx	r6
 8001884:	2800      	cmp	r0, #0
 8001886:	dc06      	bgt.n	8001896 <__sflush_r+0xfe>
 8001888:	89a3      	ldrh	r3, [r4, #12]
 800188a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800188e:	81a3      	strh	r3, [r4, #12]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	e78e      	b.n	80017b4 <__sflush_r+0x1c>
 8001896:	4407      	add	r7, r0
 8001898:	eba8 0800 	sub.w	r8, r8, r0
 800189c:	e7e9      	b.n	8001872 <__sflush_r+0xda>
 800189e:	bf00      	nop
 80018a0:	20400001 	.word	0x20400001

080018a4 <_fflush_r>:
 80018a4:	b538      	push	{r3, r4, r5, lr}
 80018a6:	690b      	ldr	r3, [r1, #16]
 80018a8:	4605      	mov	r5, r0
 80018aa:	460c      	mov	r4, r1
 80018ac:	b913      	cbnz	r3, 80018b4 <_fflush_r+0x10>
 80018ae:	2500      	movs	r5, #0
 80018b0:	4628      	mov	r0, r5
 80018b2:	bd38      	pop	{r3, r4, r5, pc}
 80018b4:	b118      	cbz	r0, 80018be <_fflush_r+0x1a>
 80018b6:	6983      	ldr	r3, [r0, #24]
 80018b8:	b90b      	cbnz	r3, 80018be <_fflush_r+0x1a>
 80018ba:	f000 f887 	bl	80019cc <__sinit>
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <_fflush_r+0x6c>)
 80018c0:	429c      	cmp	r4, r3
 80018c2:	d11b      	bne.n	80018fc <_fflush_r+0x58>
 80018c4:	686c      	ldr	r4, [r5, #4]
 80018c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0ef      	beq.n	80018ae <_fflush_r+0xa>
 80018ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80018d0:	07d0      	lsls	r0, r2, #31
 80018d2:	d404      	bmi.n	80018de <_fflush_r+0x3a>
 80018d4:	0599      	lsls	r1, r3, #22
 80018d6:	d402      	bmi.n	80018de <_fflush_r+0x3a>
 80018d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018da:	f000 f915 	bl	8001b08 <__retarget_lock_acquire_recursive>
 80018de:	4628      	mov	r0, r5
 80018e0:	4621      	mov	r1, r4
 80018e2:	f7ff ff59 	bl	8001798 <__sflush_r>
 80018e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80018e8:	07da      	lsls	r2, r3, #31
 80018ea:	4605      	mov	r5, r0
 80018ec:	d4e0      	bmi.n	80018b0 <_fflush_r+0xc>
 80018ee:	89a3      	ldrh	r3, [r4, #12]
 80018f0:	059b      	lsls	r3, r3, #22
 80018f2:	d4dd      	bmi.n	80018b0 <_fflush_r+0xc>
 80018f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80018f6:	f000 f908 	bl	8001b0a <__retarget_lock_release_recursive>
 80018fa:	e7d9      	b.n	80018b0 <_fflush_r+0xc>
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <_fflush_r+0x70>)
 80018fe:	429c      	cmp	r4, r3
 8001900:	d101      	bne.n	8001906 <_fflush_r+0x62>
 8001902:	68ac      	ldr	r4, [r5, #8]
 8001904:	e7df      	b.n	80018c6 <_fflush_r+0x22>
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <_fflush_r+0x74>)
 8001908:	429c      	cmp	r4, r3
 800190a:	bf08      	it	eq
 800190c:	68ec      	ldreq	r4, [r5, #12]
 800190e:	e7da      	b.n	80018c6 <_fflush_r+0x22>
 8001910:	080025e4 	.word	0x080025e4
 8001914:	08002604 	.word	0x08002604
 8001918:	080025c4 	.word	0x080025c4

0800191c <std>:
 800191c:	2300      	movs	r3, #0
 800191e:	b510      	push	{r4, lr}
 8001920:	4604      	mov	r4, r0
 8001922:	e9c0 3300 	strd	r3, r3, [r0]
 8001926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800192a:	6083      	str	r3, [r0, #8]
 800192c:	8181      	strh	r1, [r0, #12]
 800192e:	6643      	str	r3, [r0, #100]	; 0x64
 8001930:	81c2      	strh	r2, [r0, #14]
 8001932:	6183      	str	r3, [r0, #24]
 8001934:	4619      	mov	r1, r3
 8001936:	2208      	movs	r2, #8
 8001938:	305c      	adds	r0, #92	; 0x5c
 800193a:	f7ff fdd7 	bl	80014ec <memset>
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <std+0x38>)
 8001940:	6263      	str	r3, [r4, #36]	; 0x24
 8001942:	4b05      	ldr	r3, [pc, #20]	; (8001958 <std+0x3c>)
 8001944:	62a3      	str	r3, [r4, #40]	; 0x28
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <std+0x40>)
 8001948:	62e3      	str	r3, [r4, #44]	; 0x2c
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <std+0x44>)
 800194c:	6224      	str	r4, [r4, #32]
 800194e:	6323      	str	r3, [r4, #48]	; 0x30
 8001950:	bd10      	pop	{r4, pc}
 8001952:	bf00      	nop
 8001954:	08002395 	.word	0x08002395
 8001958:	080023b7 	.word	0x080023b7
 800195c:	080023ef 	.word	0x080023ef
 8001960:	08002413 	.word	0x08002413

08001964 <_cleanup_r>:
 8001964:	4901      	ldr	r1, [pc, #4]	; (800196c <_cleanup_r+0x8>)
 8001966:	f000 b8af 	b.w	8001ac8 <_fwalk_reent>
 800196a:	bf00      	nop
 800196c:	080018a5 	.word	0x080018a5

08001970 <__sfmoreglue>:
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	2268      	movs	r2, #104	; 0x68
 8001974:	1e4d      	subs	r5, r1, #1
 8001976:	4355      	muls	r5, r2
 8001978:	460e      	mov	r6, r1
 800197a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800197e:	f000 f997 	bl	8001cb0 <_malloc_r>
 8001982:	4604      	mov	r4, r0
 8001984:	b140      	cbz	r0, 8001998 <__sfmoreglue+0x28>
 8001986:	2100      	movs	r1, #0
 8001988:	e9c0 1600 	strd	r1, r6, [r0]
 800198c:	300c      	adds	r0, #12
 800198e:	60a0      	str	r0, [r4, #8]
 8001990:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001994:	f7ff fdaa 	bl	80014ec <memset>
 8001998:	4620      	mov	r0, r4
 800199a:	bd70      	pop	{r4, r5, r6, pc}

0800199c <__sfp_lock_acquire>:
 800199c:	4801      	ldr	r0, [pc, #4]	; (80019a4 <__sfp_lock_acquire+0x8>)
 800199e:	f000 b8b3 	b.w	8001b08 <__retarget_lock_acquire_recursive>
 80019a2:	bf00      	nop
 80019a4:	200004bd 	.word	0x200004bd

080019a8 <__sfp_lock_release>:
 80019a8:	4801      	ldr	r0, [pc, #4]	; (80019b0 <__sfp_lock_release+0x8>)
 80019aa:	f000 b8ae 	b.w	8001b0a <__retarget_lock_release_recursive>
 80019ae:	bf00      	nop
 80019b0:	200004bd 	.word	0x200004bd

080019b4 <__sinit_lock_acquire>:
 80019b4:	4801      	ldr	r0, [pc, #4]	; (80019bc <__sinit_lock_acquire+0x8>)
 80019b6:	f000 b8a7 	b.w	8001b08 <__retarget_lock_acquire_recursive>
 80019ba:	bf00      	nop
 80019bc:	200004be 	.word	0x200004be

080019c0 <__sinit_lock_release>:
 80019c0:	4801      	ldr	r0, [pc, #4]	; (80019c8 <__sinit_lock_release+0x8>)
 80019c2:	f000 b8a2 	b.w	8001b0a <__retarget_lock_release_recursive>
 80019c6:	bf00      	nop
 80019c8:	200004be 	.word	0x200004be

080019cc <__sinit>:
 80019cc:	b510      	push	{r4, lr}
 80019ce:	4604      	mov	r4, r0
 80019d0:	f7ff fff0 	bl	80019b4 <__sinit_lock_acquire>
 80019d4:	69a3      	ldr	r3, [r4, #24]
 80019d6:	b11b      	cbz	r3, 80019e0 <__sinit+0x14>
 80019d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019dc:	f7ff bff0 	b.w	80019c0 <__sinit_lock_release>
 80019e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80019e4:	6523      	str	r3, [r4, #80]	; 0x50
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <__sinit+0x68>)
 80019e8:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <__sinit+0x6c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80019ee:	42a3      	cmp	r3, r4
 80019f0:	bf04      	itt	eq
 80019f2:	2301      	moveq	r3, #1
 80019f4:	61a3      	streq	r3, [r4, #24]
 80019f6:	4620      	mov	r0, r4
 80019f8:	f000 f820 	bl	8001a3c <__sfp>
 80019fc:	6060      	str	r0, [r4, #4]
 80019fe:	4620      	mov	r0, r4
 8001a00:	f000 f81c 	bl	8001a3c <__sfp>
 8001a04:	60a0      	str	r0, [r4, #8]
 8001a06:	4620      	mov	r0, r4
 8001a08:	f000 f818 	bl	8001a3c <__sfp>
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	60e0      	str	r0, [r4, #12]
 8001a10:	2104      	movs	r1, #4
 8001a12:	6860      	ldr	r0, [r4, #4]
 8001a14:	f7ff ff82 	bl	800191c <std>
 8001a18:	68a0      	ldr	r0, [r4, #8]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	2109      	movs	r1, #9
 8001a1e:	f7ff ff7d 	bl	800191c <std>
 8001a22:	68e0      	ldr	r0, [r4, #12]
 8001a24:	2202      	movs	r2, #2
 8001a26:	2112      	movs	r1, #18
 8001a28:	f7ff ff78 	bl	800191c <std>
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	61a3      	str	r3, [r4, #24]
 8001a30:	e7d2      	b.n	80019d8 <__sinit+0xc>
 8001a32:	bf00      	nop
 8001a34:	080025c0 	.word	0x080025c0
 8001a38:	08001965 	.word	0x08001965

08001a3c <__sfp>:
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	4607      	mov	r7, r0
 8001a40:	f7ff ffac 	bl	800199c <__sfp_lock_acquire>
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <__sfp+0x84>)
 8001a46:	681e      	ldr	r6, [r3, #0]
 8001a48:	69b3      	ldr	r3, [r6, #24]
 8001a4a:	b913      	cbnz	r3, 8001a52 <__sfp+0x16>
 8001a4c:	4630      	mov	r0, r6
 8001a4e:	f7ff ffbd 	bl	80019cc <__sinit>
 8001a52:	3648      	adds	r6, #72	; 0x48
 8001a54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	d503      	bpl.n	8001a64 <__sfp+0x28>
 8001a5c:	6833      	ldr	r3, [r6, #0]
 8001a5e:	b30b      	cbz	r3, 8001aa4 <__sfp+0x68>
 8001a60:	6836      	ldr	r6, [r6, #0]
 8001a62:	e7f7      	b.n	8001a54 <__sfp+0x18>
 8001a64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001a68:	b9d5      	cbnz	r5, 8001aa0 <__sfp+0x64>
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <__sfp+0x88>)
 8001a6c:	60e3      	str	r3, [r4, #12]
 8001a6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001a72:	6665      	str	r5, [r4, #100]	; 0x64
 8001a74:	f000 f847 	bl	8001b06 <__retarget_lock_init_recursive>
 8001a78:	f7ff ff96 	bl	80019a8 <__sfp_lock_release>
 8001a7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001a80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001a84:	6025      	str	r5, [r4, #0]
 8001a86:	61a5      	str	r5, [r4, #24]
 8001a88:	2208      	movs	r2, #8
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001a90:	f7ff fd2c 	bl	80014ec <memset>
 8001a94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001a98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aa0:	3468      	adds	r4, #104	; 0x68
 8001aa2:	e7d9      	b.n	8001a58 <__sfp+0x1c>
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	4638      	mov	r0, r7
 8001aa8:	f7ff ff62 	bl	8001970 <__sfmoreglue>
 8001aac:	4604      	mov	r4, r0
 8001aae:	6030      	str	r0, [r6, #0]
 8001ab0:	2800      	cmp	r0, #0
 8001ab2:	d1d5      	bne.n	8001a60 <__sfp+0x24>
 8001ab4:	f7ff ff78 	bl	80019a8 <__sfp_lock_release>
 8001ab8:	230c      	movs	r3, #12
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	e7ee      	b.n	8001a9c <__sfp+0x60>
 8001abe:	bf00      	nop
 8001ac0:	080025c0 	.word	0x080025c0
 8001ac4:	ffff0001 	.word	0xffff0001

08001ac8 <_fwalk_reent>:
 8001ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001acc:	4606      	mov	r6, r0
 8001ace:	4688      	mov	r8, r1
 8001ad0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ad4:	2700      	movs	r7, #0
 8001ad6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ada:	f1b9 0901 	subs.w	r9, r9, #1
 8001ade:	d505      	bpl.n	8001aec <_fwalk_reent+0x24>
 8001ae0:	6824      	ldr	r4, [r4, #0]
 8001ae2:	2c00      	cmp	r4, #0
 8001ae4:	d1f7      	bne.n	8001ad6 <_fwalk_reent+0xe>
 8001ae6:	4638      	mov	r0, r7
 8001ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001aec:	89ab      	ldrh	r3, [r5, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d907      	bls.n	8001b02 <_fwalk_reent+0x3a>
 8001af2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001af6:	3301      	adds	r3, #1
 8001af8:	d003      	beq.n	8001b02 <_fwalk_reent+0x3a>
 8001afa:	4629      	mov	r1, r5
 8001afc:	4630      	mov	r0, r6
 8001afe:	47c0      	blx	r8
 8001b00:	4307      	orrs	r7, r0
 8001b02:	3568      	adds	r5, #104	; 0x68
 8001b04:	e7e9      	b.n	8001ada <_fwalk_reent+0x12>

08001b06 <__retarget_lock_init_recursive>:
 8001b06:	4770      	bx	lr

08001b08 <__retarget_lock_acquire_recursive>:
 8001b08:	4770      	bx	lr

08001b0a <__retarget_lock_release_recursive>:
 8001b0a:	4770      	bx	lr

08001b0c <__swhatbuf_r>:
 8001b0c:	b570      	push	{r4, r5, r6, lr}
 8001b0e:	460e      	mov	r6, r1
 8001b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b14:	2900      	cmp	r1, #0
 8001b16:	b096      	sub	sp, #88	; 0x58
 8001b18:	4614      	mov	r4, r2
 8001b1a:	461d      	mov	r5, r3
 8001b1c:	da08      	bge.n	8001b30 <__swhatbuf_r+0x24>
 8001b1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	602a      	str	r2, [r5, #0]
 8001b26:	061a      	lsls	r2, r3, #24
 8001b28:	d410      	bmi.n	8001b4c <__swhatbuf_r+0x40>
 8001b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2e:	e00e      	b.n	8001b4e <__swhatbuf_r+0x42>
 8001b30:	466a      	mov	r2, sp
 8001b32:	f000 fc95 	bl	8002460 <_fstat_r>
 8001b36:	2800      	cmp	r0, #0
 8001b38:	dbf1      	blt.n	8001b1e <__swhatbuf_r+0x12>
 8001b3a:	9a01      	ldr	r2, [sp, #4]
 8001b3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001b40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001b44:	425a      	negs	r2, r3
 8001b46:	415a      	adcs	r2, r3
 8001b48:	602a      	str	r2, [r5, #0]
 8001b4a:	e7ee      	b.n	8001b2a <__swhatbuf_r+0x1e>
 8001b4c:	2340      	movs	r3, #64	; 0x40
 8001b4e:	2000      	movs	r0, #0
 8001b50:	6023      	str	r3, [r4, #0]
 8001b52:	b016      	add	sp, #88	; 0x58
 8001b54:	bd70      	pop	{r4, r5, r6, pc}
	...

08001b58 <__smakebuf_r>:
 8001b58:	898b      	ldrh	r3, [r1, #12]
 8001b5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001b5c:	079d      	lsls	r5, r3, #30
 8001b5e:	4606      	mov	r6, r0
 8001b60:	460c      	mov	r4, r1
 8001b62:	d507      	bpl.n	8001b74 <__smakebuf_r+0x1c>
 8001b64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001b68:	6023      	str	r3, [r4, #0]
 8001b6a:	6123      	str	r3, [r4, #16]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	6163      	str	r3, [r4, #20]
 8001b70:	b002      	add	sp, #8
 8001b72:	bd70      	pop	{r4, r5, r6, pc}
 8001b74:	ab01      	add	r3, sp, #4
 8001b76:	466a      	mov	r2, sp
 8001b78:	f7ff ffc8 	bl	8001b0c <__swhatbuf_r>
 8001b7c:	9900      	ldr	r1, [sp, #0]
 8001b7e:	4605      	mov	r5, r0
 8001b80:	4630      	mov	r0, r6
 8001b82:	f000 f895 	bl	8001cb0 <_malloc_r>
 8001b86:	b948      	cbnz	r0, 8001b9c <__smakebuf_r+0x44>
 8001b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b8c:	059a      	lsls	r2, r3, #22
 8001b8e:	d4ef      	bmi.n	8001b70 <__smakebuf_r+0x18>
 8001b90:	f023 0303 	bic.w	r3, r3, #3
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	81a3      	strh	r3, [r4, #12]
 8001b9a:	e7e3      	b.n	8001b64 <__smakebuf_r+0xc>
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <__smakebuf_r+0x7c>)
 8001b9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ba0:	89a3      	ldrh	r3, [r4, #12]
 8001ba2:	6020      	str	r0, [r4, #0]
 8001ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba8:	81a3      	strh	r3, [r4, #12]
 8001baa:	9b00      	ldr	r3, [sp, #0]
 8001bac:	6163      	str	r3, [r4, #20]
 8001bae:	9b01      	ldr	r3, [sp, #4]
 8001bb0:	6120      	str	r0, [r4, #16]
 8001bb2:	b15b      	cbz	r3, 8001bcc <__smakebuf_r+0x74>
 8001bb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bb8:	4630      	mov	r0, r6
 8001bba:	f000 fc63 	bl	8002484 <_isatty_r>
 8001bbe:	b128      	cbz	r0, 8001bcc <__smakebuf_r+0x74>
 8001bc0:	89a3      	ldrh	r3, [r4, #12]
 8001bc2:	f023 0303 	bic.w	r3, r3, #3
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	81a3      	strh	r3, [r4, #12]
 8001bcc:	89a0      	ldrh	r0, [r4, #12]
 8001bce:	4305      	orrs	r5, r0
 8001bd0:	81a5      	strh	r5, [r4, #12]
 8001bd2:	e7cd      	b.n	8001b70 <__smakebuf_r+0x18>
 8001bd4:	08001965 	.word	0x08001965

08001bd8 <_free_r>:
 8001bd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bda:	2900      	cmp	r1, #0
 8001bdc:	d044      	beq.n	8001c68 <_free_r+0x90>
 8001bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001be2:	9001      	str	r0, [sp, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f1a1 0404 	sub.w	r4, r1, #4
 8001bea:	bfb8      	it	lt
 8001bec:	18e4      	addlt	r4, r4, r3
 8001bee:	f000 fc6b 	bl	80024c8 <__malloc_lock>
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <_free_r+0x94>)
 8001bf4:	9801      	ldr	r0, [sp, #4]
 8001bf6:	6813      	ldr	r3, [r2, #0]
 8001bf8:	b933      	cbnz	r3, 8001c08 <_free_r+0x30>
 8001bfa:	6063      	str	r3, [r4, #4]
 8001bfc:	6014      	str	r4, [r2, #0]
 8001bfe:	b003      	add	sp, #12
 8001c00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001c04:	f000 bc66 	b.w	80024d4 <__malloc_unlock>
 8001c08:	42a3      	cmp	r3, r4
 8001c0a:	d908      	bls.n	8001c1e <_free_r+0x46>
 8001c0c:	6825      	ldr	r5, [r4, #0]
 8001c0e:	1961      	adds	r1, r4, r5
 8001c10:	428b      	cmp	r3, r1
 8001c12:	bf01      	itttt	eq
 8001c14:	6819      	ldreq	r1, [r3, #0]
 8001c16:	685b      	ldreq	r3, [r3, #4]
 8001c18:	1949      	addeq	r1, r1, r5
 8001c1a:	6021      	streq	r1, [r4, #0]
 8001c1c:	e7ed      	b.n	8001bfa <_free_r+0x22>
 8001c1e:	461a      	mov	r2, r3
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	b10b      	cbz	r3, 8001c28 <_free_r+0x50>
 8001c24:	42a3      	cmp	r3, r4
 8001c26:	d9fa      	bls.n	8001c1e <_free_r+0x46>
 8001c28:	6811      	ldr	r1, [r2, #0]
 8001c2a:	1855      	adds	r5, r2, r1
 8001c2c:	42a5      	cmp	r5, r4
 8001c2e:	d10b      	bne.n	8001c48 <_free_r+0x70>
 8001c30:	6824      	ldr	r4, [r4, #0]
 8001c32:	4421      	add	r1, r4
 8001c34:	1854      	adds	r4, r2, r1
 8001c36:	42a3      	cmp	r3, r4
 8001c38:	6011      	str	r1, [r2, #0]
 8001c3a:	d1e0      	bne.n	8001bfe <_free_r+0x26>
 8001c3c:	681c      	ldr	r4, [r3, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	6053      	str	r3, [r2, #4]
 8001c42:	4421      	add	r1, r4
 8001c44:	6011      	str	r1, [r2, #0]
 8001c46:	e7da      	b.n	8001bfe <_free_r+0x26>
 8001c48:	d902      	bls.n	8001c50 <_free_r+0x78>
 8001c4a:	230c      	movs	r3, #12
 8001c4c:	6003      	str	r3, [r0, #0]
 8001c4e:	e7d6      	b.n	8001bfe <_free_r+0x26>
 8001c50:	6825      	ldr	r5, [r4, #0]
 8001c52:	1961      	adds	r1, r4, r5
 8001c54:	428b      	cmp	r3, r1
 8001c56:	bf04      	itt	eq
 8001c58:	6819      	ldreq	r1, [r3, #0]
 8001c5a:	685b      	ldreq	r3, [r3, #4]
 8001c5c:	6063      	str	r3, [r4, #4]
 8001c5e:	bf04      	itt	eq
 8001c60:	1949      	addeq	r1, r1, r5
 8001c62:	6021      	streq	r1, [r4, #0]
 8001c64:	6054      	str	r4, [r2, #4]
 8001c66:	e7ca      	b.n	8001bfe <_free_r+0x26>
 8001c68:	b003      	add	sp, #12
 8001c6a:	bd30      	pop	{r4, r5, pc}
 8001c6c:	200004c0 	.word	0x200004c0

08001c70 <sbrk_aligned>:
 8001c70:	b570      	push	{r4, r5, r6, lr}
 8001c72:	4e0e      	ldr	r6, [pc, #56]	; (8001cac <sbrk_aligned+0x3c>)
 8001c74:	460c      	mov	r4, r1
 8001c76:	6831      	ldr	r1, [r6, #0]
 8001c78:	4605      	mov	r5, r0
 8001c7a:	b911      	cbnz	r1, 8001c82 <sbrk_aligned+0x12>
 8001c7c:	f000 fb7a 	bl	8002374 <_sbrk_r>
 8001c80:	6030      	str	r0, [r6, #0]
 8001c82:	4621      	mov	r1, r4
 8001c84:	4628      	mov	r0, r5
 8001c86:	f000 fb75 	bl	8002374 <_sbrk_r>
 8001c8a:	1c43      	adds	r3, r0, #1
 8001c8c:	d00a      	beq.n	8001ca4 <sbrk_aligned+0x34>
 8001c8e:	1cc4      	adds	r4, r0, #3
 8001c90:	f024 0403 	bic.w	r4, r4, #3
 8001c94:	42a0      	cmp	r0, r4
 8001c96:	d007      	beq.n	8001ca8 <sbrk_aligned+0x38>
 8001c98:	1a21      	subs	r1, r4, r0
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	f000 fb6a 	bl	8002374 <_sbrk_r>
 8001ca0:	3001      	adds	r0, #1
 8001ca2:	d101      	bne.n	8001ca8 <sbrk_aligned+0x38>
 8001ca4:	f04f 34ff 	mov.w	r4, #4294967295
 8001ca8:	4620      	mov	r0, r4
 8001caa:	bd70      	pop	{r4, r5, r6, pc}
 8001cac:	200004c4 	.word	0x200004c4

08001cb0 <_malloc_r>:
 8001cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb4:	1ccd      	adds	r5, r1, #3
 8001cb6:	f025 0503 	bic.w	r5, r5, #3
 8001cba:	3508      	adds	r5, #8
 8001cbc:	2d0c      	cmp	r5, #12
 8001cbe:	bf38      	it	cc
 8001cc0:	250c      	movcc	r5, #12
 8001cc2:	2d00      	cmp	r5, #0
 8001cc4:	4607      	mov	r7, r0
 8001cc6:	db01      	blt.n	8001ccc <_malloc_r+0x1c>
 8001cc8:	42a9      	cmp	r1, r5
 8001cca:	d905      	bls.n	8001cd8 <_malloc_r+0x28>
 8001ccc:	230c      	movs	r3, #12
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	2600      	movs	r6, #0
 8001cd2:	4630      	mov	r0, r6
 8001cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001cd8:	4e2e      	ldr	r6, [pc, #184]	; (8001d94 <_malloc_r+0xe4>)
 8001cda:	f000 fbf5 	bl	80024c8 <__malloc_lock>
 8001cde:	6833      	ldr	r3, [r6, #0]
 8001ce0:	461c      	mov	r4, r3
 8001ce2:	bb34      	cbnz	r4, 8001d32 <_malloc_r+0x82>
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	4638      	mov	r0, r7
 8001ce8:	f7ff ffc2 	bl	8001c70 <sbrk_aligned>
 8001cec:	1c43      	adds	r3, r0, #1
 8001cee:	4604      	mov	r4, r0
 8001cf0:	d14d      	bne.n	8001d8e <_malloc_r+0xde>
 8001cf2:	6834      	ldr	r4, [r6, #0]
 8001cf4:	4626      	mov	r6, r4
 8001cf6:	2e00      	cmp	r6, #0
 8001cf8:	d140      	bne.n	8001d7c <_malloc_r+0xcc>
 8001cfa:	6823      	ldr	r3, [r4, #0]
 8001cfc:	4631      	mov	r1, r6
 8001cfe:	4638      	mov	r0, r7
 8001d00:	eb04 0803 	add.w	r8, r4, r3
 8001d04:	f000 fb36 	bl	8002374 <_sbrk_r>
 8001d08:	4580      	cmp	r8, r0
 8001d0a:	d13a      	bne.n	8001d82 <_malloc_r+0xd2>
 8001d0c:	6821      	ldr	r1, [r4, #0]
 8001d0e:	3503      	adds	r5, #3
 8001d10:	1a6d      	subs	r5, r5, r1
 8001d12:	f025 0503 	bic.w	r5, r5, #3
 8001d16:	3508      	adds	r5, #8
 8001d18:	2d0c      	cmp	r5, #12
 8001d1a:	bf38      	it	cc
 8001d1c:	250c      	movcc	r5, #12
 8001d1e:	4629      	mov	r1, r5
 8001d20:	4638      	mov	r0, r7
 8001d22:	f7ff ffa5 	bl	8001c70 <sbrk_aligned>
 8001d26:	3001      	adds	r0, #1
 8001d28:	d02b      	beq.n	8001d82 <_malloc_r+0xd2>
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	442b      	add	r3, r5
 8001d2e:	6023      	str	r3, [r4, #0]
 8001d30:	e00e      	b.n	8001d50 <_malloc_r+0xa0>
 8001d32:	6822      	ldr	r2, [r4, #0]
 8001d34:	1b52      	subs	r2, r2, r5
 8001d36:	d41e      	bmi.n	8001d76 <_malloc_r+0xc6>
 8001d38:	2a0b      	cmp	r2, #11
 8001d3a:	d916      	bls.n	8001d6a <_malloc_r+0xba>
 8001d3c:	1961      	adds	r1, r4, r5
 8001d3e:	42a3      	cmp	r3, r4
 8001d40:	6025      	str	r5, [r4, #0]
 8001d42:	bf18      	it	ne
 8001d44:	6059      	strne	r1, [r3, #4]
 8001d46:	6863      	ldr	r3, [r4, #4]
 8001d48:	bf08      	it	eq
 8001d4a:	6031      	streq	r1, [r6, #0]
 8001d4c:	5162      	str	r2, [r4, r5]
 8001d4e:	604b      	str	r3, [r1, #4]
 8001d50:	4638      	mov	r0, r7
 8001d52:	f104 060b 	add.w	r6, r4, #11
 8001d56:	f000 fbbd 	bl	80024d4 <__malloc_unlock>
 8001d5a:	f026 0607 	bic.w	r6, r6, #7
 8001d5e:	1d23      	adds	r3, r4, #4
 8001d60:	1af2      	subs	r2, r6, r3
 8001d62:	d0b6      	beq.n	8001cd2 <_malloc_r+0x22>
 8001d64:	1b9b      	subs	r3, r3, r6
 8001d66:	50a3      	str	r3, [r4, r2]
 8001d68:	e7b3      	b.n	8001cd2 <_malloc_r+0x22>
 8001d6a:	6862      	ldr	r2, [r4, #4]
 8001d6c:	42a3      	cmp	r3, r4
 8001d6e:	bf0c      	ite	eq
 8001d70:	6032      	streq	r2, [r6, #0]
 8001d72:	605a      	strne	r2, [r3, #4]
 8001d74:	e7ec      	b.n	8001d50 <_malloc_r+0xa0>
 8001d76:	4623      	mov	r3, r4
 8001d78:	6864      	ldr	r4, [r4, #4]
 8001d7a:	e7b2      	b.n	8001ce2 <_malloc_r+0x32>
 8001d7c:	4634      	mov	r4, r6
 8001d7e:	6876      	ldr	r6, [r6, #4]
 8001d80:	e7b9      	b.n	8001cf6 <_malloc_r+0x46>
 8001d82:	230c      	movs	r3, #12
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	4638      	mov	r0, r7
 8001d88:	f000 fba4 	bl	80024d4 <__malloc_unlock>
 8001d8c:	e7a1      	b.n	8001cd2 <_malloc_r+0x22>
 8001d8e:	6025      	str	r5, [r4, #0]
 8001d90:	e7de      	b.n	8001d50 <_malloc_r+0xa0>
 8001d92:	bf00      	nop
 8001d94:	200004c0 	.word	0x200004c0

08001d98 <__sfputc_r>:
 8001d98:	6893      	ldr	r3, [r2, #8]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	b410      	push	{r4}
 8001da0:	6093      	str	r3, [r2, #8]
 8001da2:	da08      	bge.n	8001db6 <__sfputc_r+0x1e>
 8001da4:	6994      	ldr	r4, [r2, #24]
 8001da6:	42a3      	cmp	r3, r4
 8001da8:	db01      	blt.n	8001dae <__sfputc_r+0x16>
 8001daa:	290a      	cmp	r1, #10
 8001dac:	d103      	bne.n	8001db6 <__sfputc_r+0x1e>
 8001dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001db2:	f7ff bc31 	b.w	8001618 <__swbuf_r>
 8001db6:	6813      	ldr	r3, [r2, #0]
 8001db8:	1c58      	adds	r0, r3, #1
 8001dba:	6010      	str	r0, [r2, #0]
 8001dbc:	7019      	strb	r1, [r3, #0]
 8001dbe:	4608      	mov	r0, r1
 8001dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <__sfputs_r>:
 8001dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc8:	4606      	mov	r6, r0
 8001dca:	460f      	mov	r7, r1
 8001dcc:	4614      	mov	r4, r2
 8001dce:	18d5      	adds	r5, r2, r3
 8001dd0:	42ac      	cmp	r4, r5
 8001dd2:	d101      	bne.n	8001dd8 <__sfputs_r+0x12>
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	e007      	b.n	8001de8 <__sfputs_r+0x22>
 8001dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ddc:	463a      	mov	r2, r7
 8001dde:	4630      	mov	r0, r6
 8001de0:	f7ff ffda 	bl	8001d98 <__sfputc_r>
 8001de4:	1c43      	adds	r3, r0, #1
 8001de6:	d1f3      	bne.n	8001dd0 <__sfputs_r+0xa>
 8001de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001dec <_vfiprintf_r>:
 8001dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001df0:	460d      	mov	r5, r1
 8001df2:	b09d      	sub	sp, #116	; 0x74
 8001df4:	4614      	mov	r4, r2
 8001df6:	4698      	mov	r8, r3
 8001df8:	4606      	mov	r6, r0
 8001dfa:	b118      	cbz	r0, 8001e04 <_vfiprintf_r+0x18>
 8001dfc:	6983      	ldr	r3, [r0, #24]
 8001dfe:	b90b      	cbnz	r3, 8001e04 <_vfiprintf_r+0x18>
 8001e00:	f7ff fde4 	bl	80019cc <__sinit>
 8001e04:	4b89      	ldr	r3, [pc, #548]	; (800202c <_vfiprintf_r+0x240>)
 8001e06:	429d      	cmp	r5, r3
 8001e08:	d11b      	bne.n	8001e42 <_vfiprintf_r+0x56>
 8001e0a:	6875      	ldr	r5, [r6, #4]
 8001e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e0e:	07d9      	lsls	r1, r3, #31
 8001e10:	d405      	bmi.n	8001e1e <_vfiprintf_r+0x32>
 8001e12:	89ab      	ldrh	r3, [r5, #12]
 8001e14:	059a      	lsls	r2, r3, #22
 8001e16:	d402      	bmi.n	8001e1e <_vfiprintf_r+0x32>
 8001e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e1a:	f7ff fe75 	bl	8001b08 <__retarget_lock_acquire_recursive>
 8001e1e:	89ab      	ldrh	r3, [r5, #12]
 8001e20:	071b      	lsls	r3, r3, #28
 8001e22:	d501      	bpl.n	8001e28 <_vfiprintf_r+0x3c>
 8001e24:	692b      	ldr	r3, [r5, #16]
 8001e26:	b9eb      	cbnz	r3, 8001e64 <_vfiprintf_r+0x78>
 8001e28:	4629      	mov	r1, r5
 8001e2a:	4630      	mov	r0, r6
 8001e2c:	f7ff fc46 	bl	80016bc <__swsetup_r>
 8001e30:	b1c0      	cbz	r0, 8001e64 <_vfiprintf_r+0x78>
 8001e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001e34:	07dc      	lsls	r4, r3, #31
 8001e36:	d50e      	bpl.n	8001e56 <_vfiprintf_r+0x6a>
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295
 8001e3c:	b01d      	add	sp, #116	; 0x74
 8001e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e42:	4b7b      	ldr	r3, [pc, #492]	; (8002030 <_vfiprintf_r+0x244>)
 8001e44:	429d      	cmp	r5, r3
 8001e46:	d101      	bne.n	8001e4c <_vfiprintf_r+0x60>
 8001e48:	68b5      	ldr	r5, [r6, #8]
 8001e4a:	e7df      	b.n	8001e0c <_vfiprintf_r+0x20>
 8001e4c:	4b79      	ldr	r3, [pc, #484]	; (8002034 <_vfiprintf_r+0x248>)
 8001e4e:	429d      	cmp	r5, r3
 8001e50:	bf08      	it	eq
 8001e52:	68f5      	ldreq	r5, [r6, #12]
 8001e54:	e7da      	b.n	8001e0c <_vfiprintf_r+0x20>
 8001e56:	89ab      	ldrh	r3, [r5, #12]
 8001e58:	0598      	lsls	r0, r3, #22
 8001e5a:	d4ed      	bmi.n	8001e38 <_vfiprintf_r+0x4c>
 8001e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001e5e:	f7ff fe54 	bl	8001b0a <__retarget_lock_release_recursive>
 8001e62:	e7e9      	b.n	8001e38 <_vfiprintf_r+0x4c>
 8001e64:	2300      	movs	r3, #0
 8001e66:	9309      	str	r3, [sp, #36]	; 0x24
 8001e68:	2320      	movs	r3, #32
 8001e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e72:	2330      	movs	r3, #48	; 0x30
 8001e74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002038 <_vfiprintf_r+0x24c>
 8001e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e7c:	f04f 0901 	mov.w	r9, #1
 8001e80:	4623      	mov	r3, r4
 8001e82:	469a      	mov	sl, r3
 8001e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e88:	b10a      	cbz	r2, 8001e8e <_vfiprintf_r+0xa2>
 8001e8a:	2a25      	cmp	r2, #37	; 0x25
 8001e8c:	d1f9      	bne.n	8001e82 <_vfiprintf_r+0x96>
 8001e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8001e92:	d00b      	beq.n	8001eac <_vfiprintf_r+0xc0>
 8001e94:	465b      	mov	r3, fp
 8001e96:	4622      	mov	r2, r4
 8001e98:	4629      	mov	r1, r5
 8001e9a:	4630      	mov	r0, r6
 8001e9c:	f7ff ff93 	bl	8001dc6 <__sfputs_r>
 8001ea0:	3001      	adds	r0, #1
 8001ea2:	f000 80aa 	beq.w	8001ffa <_vfiprintf_r+0x20e>
 8001ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ea8:	445a      	add	r2, fp
 8001eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8001eac:	f89a 3000 	ldrb.w	r3, [sl]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80a2 	beq.w	8001ffa <_vfiprintf_r+0x20e>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001ec0:	f10a 0a01 	add.w	sl, sl, #1
 8001ec4:	9304      	str	r3, [sp, #16]
 8001ec6:	9307      	str	r3, [sp, #28]
 8001ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8001ece:	4654      	mov	r4, sl
 8001ed0:	2205      	movs	r2, #5
 8001ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ed6:	4858      	ldr	r0, [pc, #352]	; (8002038 <_vfiprintf_r+0x24c>)
 8001ed8:	f7fe f99a 	bl	8000210 <memchr>
 8001edc:	9a04      	ldr	r2, [sp, #16]
 8001ede:	b9d8      	cbnz	r0, 8001f18 <_vfiprintf_r+0x12c>
 8001ee0:	06d1      	lsls	r1, r2, #27
 8001ee2:	bf44      	itt	mi
 8001ee4:	2320      	movmi	r3, #32
 8001ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001eea:	0713      	lsls	r3, r2, #28
 8001eec:	bf44      	itt	mi
 8001eee:	232b      	movmi	r3, #43	; 0x2b
 8001ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8001ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8001efa:	d015      	beq.n	8001f28 <_vfiprintf_r+0x13c>
 8001efc:	9a07      	ldr	r2, [sp, #28]
 8001efe:	4654      	mov	r4, sl
 8001f00:	2000      	movs	r0, #0
 8001f02:	f04f 0c0a 	mov.w	ip, #10
 8001f06:	4621      	mov	r1, r4
 8001f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f0c:	3b30      	subs	r3, #48	; 0x30
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	d94e      	bls.n	8001fb0 <_vfiprintf_r+0x1c4>
 8001f12:	b1b0      	cbz	r0, 8001f42 <_vfiprintf_r+0x156>
 8001f14:	9207      	str	r2, [sp, #28]
 8001f16:	e014      	b.n	8001f42 <_vfiprintf_r+0x156>
 8001f18:	eba0 0308 	sub.w	r3, r0, r8
 8001f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8001f20:	4313      	orrs	r3, r2
 8001f22:	9304      	str	r3, [sp, #16]
 8001f24:	46a2      	mov	sl, r4
 8001f26:	e7d2      	b.n	8001ece <_vfiprintf_r+0xe2>
 8001f28:	9b03      	ldr	r3, [sp, #12]
 8001f2a:	1d19      	adds	r1, r3, #4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	9103      	str	r1, [sp, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bfbb      	ittet	lt
 8001f34:	425b      	neglt	r3, r3
 8001f36:	f042 0202 	orrlt.w	r2, r2, #2
 8001f3a:	9307      	strge	r3, [sp, #28]
 8001f3c:	9307      	strlt	r3, [sp, #28]
 8001f3e:	bfb8      	it	lt
 8001f40:	9204      	strlt	r2, [sp, #16]
 8001f42:	7823      	ldrb	r3, [r4, #0]
 8001f44:	2b2e      	cmp	r3, #46	; 0x2e
 8001f46:	d10c      	bne.n	8001f62 <_vfiprintf_r+0x176>
 8001f48:	7863      	ldrb	r3, [r4, #1]
 8001f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8001f4c:	d135      	bne.n	8001fba <_vfiprintf_r+0x1ce>
 8001f4e:	9b03      	ldr	r3, [sp, #12]
 8001f50:	1d1a      	adds	r2, r3, #4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	9203      	str	r2, [sp, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bfb8      	it	lt
 8001f5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f5e:	3402      	adds	r4, #2
 8001f60:	9305      	str	r3, [sp, #20]
 8001f62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002048 <_vfiprintf_r+0x25c>
 8001f66:	7821      	ldrb	r1, [r4, #0]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	4650      	mov	r0, sl
 8001f6c:	f7fe f950 	bl	8000210 <memchr>
 8001f70:	b140      	cbz	r0, 8001f84 <_vfiprintf_r+0x198>
 8001f72:	2340      	movs	r3, #64	; 0x40
 8001f74:	eba0 000a 	sub.w	r0, r0, sl
 8001f78:	fa03 f000 	lsl.w	r0, r3, r0
 8001f7c:	9b04      	ldr	r3, [sp, #16]
 8001f7e:	4303      	orrs	r3, r0
 8001f80:	3401      	adds	r4, #1
 8001f82:	9304      	str	r3, [sp, #16]
 8001f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f88:	482c      	ldr	r0, [pc, #176]	; (800203c <_vfiprintf_r+0x250>)
 8001f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f8e:	2206      	movs	r2, #6
 8001f90:	f7fe f93e 	bl	8000210 <memchr>
 8001f94:	2800      	cmp	r0, #0
 8001f96:	d03f      	beq.n	8002018 <_vfiprintf_r+0x22c>
 8001f98:	4b29      	ldr	r3, [pc, #164]	; (8002040 <_vfiprintf_r+0x254>)
 8001f9a:	bb1b      	cbnz	r3, 8001fe4 <_vfiprintf_r+0x1f8>
 8001f9c:	9b03      	ldr	r3, [sp, #12]
 8001f9e:	3307      	adds	r3, #7
 8001fa0:	f023 0307 	bic.w	r3, r3, #7
 8001fa4:	3308      	adds	r3, #8
 8001fa6:	9303      	str	r3, [sp, #12]
 8001fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001faa:	443b      	add	r3, r7
 8001fac:	9309      	str	r3, [sp, #36]	; 0x24
 8001fae:	e767      	b.n	8001e80 <_vfiprintf_r+0x94>
 8001fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	e7a5      	b.n	8001f06 <_vfiprintf_r+0x11a>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	3401      	adds	r4, #1
 8001fbe:	9305      	str	r3, [sp, #20]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f04f 0c0a 	mov.w	ip, #10
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001fcc:	3a30      	subs	r2, #48	; 0x30
 8001fce:	2a09      	cmp	r2, #9
 8001fd0:	d903      	bls.n	8001fda <_vfiprintf_r+0x1ee>
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0c5      	beq.n	8001f62 <_vfiprintf_r+0x176>
 8001fd6:	9105      	str	r1, [sp, #20]
 8001fd8:	e7c3      	b.n	8001f62 <_vfiprintf_r+0x176>
 8001fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8001fde:	4604      	mov	r4, r0
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e7f0      	b.n	8001fc6 <_vfiprintf_r+0x1da>
 8001fe4:	ab03      	add	r3, sp, #12
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	462a      	mov	r2, r5
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <_vfiprintf_r+0x258>)
 8001fec:	a904      	add	r1, sp, #16
 8001fee:	4630      	mov	r0, r6
 8001ff0:	f3af 8000 	nop.w
 8001ff4:	4607      	mov	r7, r0
 8001ff6:	1c78      	adds	r0, r7, #1
 8001ff8:	d1d6      	bne.n	8001fa8 <_vfiprintf_r+0x1bc>
 8001ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ffc:	07d9      	lsls	r1, r3, #31
 8001ffe:	d405      	bmi.n	800200c <_vfiprintf_r+0x220>
 8002000:	89ab      	ldrh	r3, [r5, #12]
 8002002:	059a      	lsls	r2, r3, #22
 8002004:	d402      	bmi.n	800200c <_vfiprintf_r+0x220>
 8002006:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002008:	f7ff fd7f 	bl	8001b0a <__retarget_lock_release_recursive>
 800200c:	89ab      	ldrh	r3, [r5, #12]
 800200e:	065b      	lsls	r3, r3, #25
 8002010:	f53f af12 	bmi.w	8001e38 <_vfiprintf_r+0x4c>
 8002014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002016:	e711      	b.n	8001e3c <_vfiprintf_r+0x50>
 8002018:	ab03      	add	r3, sp, #12
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	462a      	mov	r2, r5
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <_vfiprintf_r+0x258>)
 8002020:	a904      	add	r1, sp, #16
 8002022:	4630      	mov	r0, r6
 8002024:	f000 f880 	bl	8002128 <_printf_i>
 8002028:	e7e4      	b.n	8001ff4 <_vfiprintf_r+0x208>
 800202a:	bf00      	nop
 800202c:	080025e4 	.word	0x080025e4
 8002030:	08002604 	.word	0x08002604
 8002034:	080025c4 	.word	0x080025c4
 8002038:	08002624 	.word	0x08002624
 800203c:	0800262e 	.word	0x0800262e
 8002040:	00000000 	.word	0x00000000
 8002044:	08001dc7 	.word	0x08001dc7
 8002048:	0800262a 	.word	0x0800262a

0800204c <_printf_common>:
 800204c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002050:	4616      	mov	r6, r2
 8002052:	4699      	mov	r9, r3
 8002054:	688a      	ldr	r2, [r1, #8]
 8002056:	690b      	ldr	r3, [r1, #16]
 8002058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800205c:	4293      	cmp	r3, r2
 800205e:	bfb8      	it	lt
 8002060:	4613      	movlt	r3, r2
 8002062:	6033      	str	r3, [r6, #0]
 8002064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002068:	4607      	mov	r7, r0
 800206a:	460c      	mov	r4, r1
 800206c:	b10a      	cbz	r2, 8002072 <_printf_common+0x26>
 800206e:	3301      	adds	r3, #1
 8002070:	6033      	str	r3, [r6, #0]
 8002072:	6823      	ldr	r3, [r4, #0]
 8002074:	0699      	lsls	r1, r3, #26
 8002076:	bf42      	ittt	mi
 8002078:	6833      	ldrmi	r3, [r6, #0]
 800207a:	3302      	addmi	r3, #2
 800207c:	6033      	strmi	r3, [r6, #0]
 800207e:	6825      	ldr	r5, [r4, #0]
 8002080:	f015 0506 	ands.w	r5, r5, #6
 8002084:	d106      	bne.n	8002094 <_printf_common+0x48>
 8002086:	f104 0a19 	add.w	sl, r4, #25
 800208a:	68e3      	ldr	r3, [r4, #12]
 800208c:	6832      	ldr	r2, [r6, #0]
 800208e:	1a9b      	subs	r3, r3, r2
 8002090:	42ab      	cmp	r3, r5
 8002092:	dc26      	bgt.n	80020e2 <_printf_common+0x96>
 8002094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002098:	1e13      	subs	r3, r2, #0
 800209a:	6822      	ldr	r2, [r4, #0]
 800209c:	bf18      	it	ne
 800209e:	2301      	movne	r3, #1
 80020a0:	0692      	lsls	r2, r2, #26
 80020a2:	d42b      	bmi.n	80020fc <_printf_common+0xb0>
 80020a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80020a8:	4649      	mov	r1, r9
 80020aa:	4638      	mov	r0, r7
 80020ac:	47c0      	blx	r8
 80020ae:	3001      	adds	r0, #1
 80020b0:	d01e      	beq.n	80020f0 <_printf_common+0xa4>
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	68e5      	ldr	r5, [r4, #12]
 80020b6:	6832      	ldr	r2, [r6, #0]
 80020b8:	f003 0306 	and.w	r3, r3, #6
 80020bc:	2b04      	cmp	r3, #4
 80020be:	bf08      	it	eq
 80020c0:	1aad      	subeq	r5, r5, r2
 80020c2:	68a3      	ldr	r3, [r4, #8]
 80020c4:	6922      	ldr	r2, [r4, #16]
 80020c6:	bf0c      	ite	eq
 80020c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020cc:	2500      	movne	r5, #0
 80020ce:	4293      	cmp	r3, r2
 80020d0:	bfc4      	itt	gt
 80020d2:	1a9b      	subgt	r3, r3, r2
 80020d4:	18ed      	addgt	r5, r5, r3
 80020d6:	2600      	movs	r6, #0
 80020d8:	341a      	adds	r4, #26
 80020da:	42b5      	cmp	r5, r6
 80020dc:	d11a      	bne.n	8002114 <_printf_common+0xc8>
 80020de:	2000      	movs	r0, #0
 80020e0:	e008      	b.n	80020f4 <_printf_common+0xa8>
 80020e2:	2301      	movs	r3, #1
 80020e4:	4652      	mov	r2, sl
 80020e6:	4649      	mov	r1, r9
 80020e8:	4638      	mov	r0, r7
 80020ea:	47c0      	blx	r8
 80020ec:	3001      	adds	r0, #1
 80020ee:	d103      	bne.n	80020f8 <_printf_common+0xac>
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020f8:	3501      	adds	r5, #1
 80020fa:	e7c6      	b.n	800208a <_printf_common+0x3e>
 80020fc:	18e1      	adds	r1, r4, r3
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	2030      	movs	r0, #48	; 0x30
 8002102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002106:	4422      	add	r2, r4
 8002108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800210c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002110:	3302      	adds	r3, #2
 8002112:	e7c7      	b.n	80020a4 <_printf_common+0x58>
 8002114:	2301      	movs	r3, #1
 8002116:	4622      	mov	r2, r4
 8002118:	4649      	mov	r1, r9
 800211a:	4638      	mov	r0, r7
 800211c:	47c0      	blx	r8
 800211e:	3001      	adds	r0, #1
 8002120:	d0e6      	beq.n	80020f0 <_printf_common+0xa4>
 8002122:	3601      	adds	r6, #1
 8002124:	e7d9      	b.n	80020da <_printf_common+0x8e>
	...

08002128 <_printf_i>:
 8002128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800212c:	7e0f      	ldrb	r7, [r1, #24]
 800212e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002130:	2f78      	cmp	r7, #120	; 0x78
 8002132:	4691      	mov	r9, r2
 8002134:	4680      	mov	r8, r0
 8002136:	460c      	mov	r4, r1
 8002138:	469a      	mov	sl, r3
 800213a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800213e:	d807      	bhi.n	8002150 <_printf_i+0x28>
 8002140:	2f62      	cmp	r7, #98	; 0x62
 8002142:	d80a      	bhi.n	800215a <_printf_i+0x32>
 8002144:	2f00      	cmp	r7, #0
 8002146:	f000 80d8 	beq.w	80022fa <_printf_i+0x1d2>
 800214a:	2f58      	cmp	r7, #88	; 0x58
 800214c:	f000 80a3 	beq.w	8002296 <_printf_i+0x16e>
 8002150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002158:	e03a      	b.n	80021d0 <_printf_i+0xa8>
 800215a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800215e:	2b15      	cmp	r3, #21
 8002160:	d8f6      	bhi.n	8002150 <_printf_i+0x28>
 8002162:	a101      	add	r1, pc, #4	; (adr r1, 8002168 <_printf_i+0x40>)
 8002164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002168:	080021c1 	.word	0x080021c1
 800216c:	080021d5 	.word	0x080021d5
 8002170:	08002151 	.word	0x08002151
 8002174:	08002151 	.word	0x08002151
 8002178:	08002151 	.word	0x08002151
 800217c:	08002151 	.word	0x08002151
 8002180:	080021d5 	.word	0x080021d5
 8002184:	08002151 	.word	0x08002151
 8002188:	08002151 	.word	0x08002151
 800218c:	08002151 	.word	0x08002151
 8002190:	08002151 	.word	0x08002151
 8002194:	080022e1 	.word	0x080022e1
 8002198:	08002205 	.word	0x08002205
 800219c:	080022c3 	.word	0x080022c3
 80021a0:	08002151 	.word	0x08002151
 80021a4:	08002151 	.word	0x08002151
 80021a8:	08002303 	.word	0x08002303
 80021ac:	08002151 	.word	0x08002151
 80021b0:	08002205 	.word	0x08002205
 80021b4:	08002151 	.word	0x08002151
 80021b8:	08002151 	.word	0x08002151
 80021bc:	080022cb 	.word	0x080022cb
 80021c0:	682b      	ldr	r3, [r5, #0]
 80021c2:	1d1a      	adds	r2, r3, #4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	602a      	str	r2, [r5, #0]
 80021c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0a3      	b.n	800231c <_printf_i+0x1f4>
 80021d4:	6820      	ldr	r0, [r4, #0]
 80021d6:	6829      	ldr	r1, [r5, #0]
 80021d8:	0606      	lsls	r6, r0, #24
 80021da:	f101 0304 	add.w	r3, r1, #4
 80021de:	d50a      	bpl.n	80021f6 <_printf_i+0xce>
 80021e0:	680e      	ldr	r6, [r1, #0]
 80021e2:	602b      	str	r3, [r5, #0]
 80021e4:	2e00      	cmp	r6, #0
 80021e6:	da03      	bge.n	80021f0 <_printf_i+0xc8>
 80021e8:	232d      	movs	r3, #45	; 0x2d
 80021ea:	4276      	negs	r6, r6
 80021ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021f0:	485e      	ldr	r0, [pc, #376]	; (800236c <_printf_i+0x244>)
 80021f2:	230a      	movs	r3, #10
 80021f4:	e019      	b.n	800222a <_printf_i+0x102>
 80021f6:	680e      	ldr	r6, [r1, #0]
 80021f8:	602b      	str	r3, [r5, #0]
 80021fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80021fe:	bf18      	it	ne
 8002200:	b236      	sxthne	r6, r6
 8002202:	e7ef      	b.n	80021e4 <_printf_i+0xbc>
 8002204:	682b      	ldr	r3, [r5, #0]
 8002206:	6820      	ldr	r0, [r4, #0]
 8002208:	1d19      	adds	r1, r3, #4
 800220a:	6029      	str	r1, [r5, #0]
 800220c:	0601      	lsls	r1, r0, #24
 800220e:	d501      	bpl.n	8002214 <_printf_i+0xec>
 8002210:	681e      	ldr	r6, [r3, #0]
 8002212:	e002      	b.n	800221a <_printf_i+0xf2>
 8002214:	0646      	lsls	r6, r0, #25
 8002216:	d5fb      	bpl.n	8002210 <_printf_i+0xe8>
 8002218:	881e      	ldrh	r6, [r3, #0]
 800221a:	4854      	ldr	r0, [pc, #336]	; (800236c <_printf_i+0x244>)
 800221c:	2f6f      	cmp	r7, #111	; 0x6f
 800221e:	bf0c      	ite	eq
 8002220:	2308      	moveq	r3, #8
 8002222:	230a      	movne	r3, #10
 8002224:	2100      	movs	r1, #0
 8002226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800222a:	6865      	ldr	r5, [r4, #4]
 800222c:	60a5      	str	r5, [r4, #8]
 800222e:	2d00      	cmp	r5, #0
 8002230:	bfa2      	ittt	ge
 8002232:	6821      	ldrge	r1, [r4, #0]
 8002234:	f021 0104 	bicge.w	r1, r1, #4
 8002238:	6021      	strge	r1, [r4, #0]
 800223a:	b90e      	cbnz	r6, 8002240 <_printf_i+0x118>
 800223c:	2d00      	cmp	r5, #0
 800223e:	d04d      	beq.n	80022dc <_printf_i+0x1b4>
 8002240:	4615      	mov	r5, r2
 8002242:	fbb6 f1f3 	udiv	r1, r6, r3
 8002246:	fb03 6711 	mls	r7, r3, r1, r6
 800224a:	5dc7      	ldrb	r7, [r0, r7]
 800224c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002250:	4637      	mov	r7, r6
 8002252:	42bb      	cmp	r3, r7
 8002254:	460e      	mov	r6, r1
 8002256:	d9f4      	bls.n	8002242 <_printf_i+0x11a>
 8002258:	2b08      	cmp	r3, #8
 800225a:	d10b      	bne.n	8002274 <_printf_i+0x14c>
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	07de      	lsls	r6, r3, #31
 8002260:	d508      	bpl.n	8002274 <_printf_i+0x14c>
 8002262:	6923      	ldr	r3, [r4, #16]
 8002264:	6861      	ldr	r1, [r4, #4]
 8002266:	4299      	cmp	r1, r3
 8002268:	bfde      	ittt	le
 800226a:	2330      	movle	r3, #48	; 0x30
 800226c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002270:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002274:	1b52      	subs	r2, r2, r5
 8002276:	6122      	str	r2, [r4, #16]
 8002278:	f8cd a000 	str.w	sl, [sp]
 800227c:	464b      	mov	r3, r9
 800227e:	aa03      	add	r2, sp, #12
 8002280:	4621      	mov	r1, r4
 8002282:	4640      	mov	r0, r8
 8002284:	f7ff fee2 	bl	800204c <_printf_common>
 8002288:	3001      	adds	r0, #1
 800228a:	d14c      	bne.n	8002326 <_printf_i+0x1fe>
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	b004      	add	sp, #16
 8002292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002296:	4835      	ldr	r0, [pc, #212]	; (800236c <_printf_i+0x244>)
 8002298:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800229c:	6829      	ldr	r1, [r5, #0]
 800229e:	6823      	ldr	r3, [r4, #0]
 80022a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80022a4:	6029      	str	r1, [r5, #0]
 80022a6:	061d      	lsls	r5, r3, #24
 80022a8:	d514      	bpl.n	80022d4 <_printf_i+0x1ac>
 80022aa:	07df      	lsls	r7, r3, #31
 80022ac:	bf44      	itt	mi
 80022ae:	f043 0320 	orrmi.w	r3, r3, #32
 80022b2:	6023      	strmi	r3, [r4, #0]
 80022b4:	b91e      	cbnz	r6, 80022be <_printf_i+0x196>
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	f023 0320 	bic.w	r3, r3, #32
 80022bc:	6023      	str	r3, [r4, #0]
 80022be:	2310      	movs	r3, #16
 80022c0:	e7b0      	b.n	8002224 <_printf_i+0xfc>
 80022c2:	6823      	ldr	r3, [r4, #0]
 80022c4:	f043 0320 	orr.w	r3, r3, #32
 80022c8:	6023      	str	r3, [r4, #0]
 80022ca:	2378      	movs	r3, #120	; 0x78
 80022cc:	4828      	ldr	r0, [pc, #160]	; (8002370 <_printf_i+0x248>)
 80022ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80022d2:	e7e3      	b.n	800229c <_printf_i+0x174>
 80022d4:	0659      	lsls	r1, r3, #25
 80022d6:	bf48      	it	mi
 80022d8:	b2b6      	uxthmi	r6, r6
 80022da:	e7e6      	b.n	80022aa <_printf_i+0x182>
 80022dc:	4615      	mov	r5, r2
 80022de:	e7bb      	b.n	8002258 <_printf_i+0x130>
 80022e0:	682b      	ldr	r3, [r5, #0]
 80022e2:	6826      	ldr	r6, [r4, #0]
 80022e4:	6961      	ldr	r1, [r4, #20]
 80022e6:	1d18      	adds	r0, r3, #4
 80022e8:	6028      	str	r0, [r5, #0]
 80022ea:	0635      	lsls	r5, r6, #24
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	d501      	bpl.n	80022f4 <_printf_i+0x1cc>
 80022f0:	6019      	str	r1, [r3, #0]
 80022f2:	e002      	b.n	80022fa <_printf_i+0x1d2>
 80022f4:	0670      	lsls	r0, r6, #25
 80022f6:	d5fb      	bpl.n	80022f0 <_printf_i+0x1c8>
 80022f8:	8019      	strh	r1, [r3, #0]
 80022fa:	2300      	movs	r3, #0
 80022fc:	6123      	str	r3, [r4, #16]
 80022fe:	4615      	mov	r5, r2
 8002300:	e7ba      	b.n	8002278 <_printf_i+0x150>
 8002302:	682b      	ldr	r3, [r5, #0]
 8002304:	1d1a      	adds	r2, r3, #4
 8002306:	602a      	str	r2, [r5, #0]
 8002308:	681d      	ldr	r5, [r3, #0]
 800230a:	6862      	ldr	r2, [r4, #4]
 800230c:	2100      	movs	r1, #0
 800230e:	4628      	mov	r0, r5
 8002310:	f7fd ff7e 	bl	8000210 <memchr>
 8002314:	b108      	cbz	r0, 800231a <_printf_i+0x1f2>
 8002316:	1b40      	subs	r0, r0, r5
 8002318:	6060      	str	r0, [r4, #4]
 800231a:	6863      	ldr	r3, [r4, #4]
 800231c:	6123      	str	r3, [r4, #16]
 800231e:	2300      	movs	r3, #0
 8002320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002324:	e7a8      	b.n	8002278 <_printf_i+0x150>
 8002326:	6923      	ldr	r3, [r4, #16]
 8002328:	462a      	mov	r2, r5
 800232a:	4649      	mov	r1, r9
 800232c:	4640      	mov	r0, r8
 800232e:	47d0      	blx	sl
 8002330:	3001      	adds	r0, #1
 8002332:	d0ab      	beq.n	800228c <_printf_i+0x164>
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	079b      	lsls	r3, r3, #30
 8002338:	d413      	bmi.n	8002362 <_printf_i+0x23a>
 800233a:	68e0      	ldr	r0, [r4, #12]
 800233c:	9b03      	ldr	r3, [sp, #12]
 800233e:	4298      	cmp	r0, r3
 8002340:	bfb8      	it	lt
 8002342:	4618      	movlt	r0, r3
 8002344:	e7a4      	b.n	8002290 <_printf_i+0x168>
 8002346:	2301      	movs	r3, #1
 8002348:	4632      	mov	r2, r6
 800234a:	4649      	mov	r1, r9
 800234c:	4640      	mov	r0, r8
 800234e:	47d0      	blx	sl
 8002350:	3001      	adds	r0, #1
 8002352:	d09b      	beq.n	800228c <_printf_i+0x164>
 8002354:	3501      	adds	r5, #1
 8002356:	68e3      	ldr	r3, [r4, #12]
 8002358:	9903      	ldr	r1, [sp, #12]
 800235a:	1a5b      	subs	r3, r3, r1
 800235c:	42ab      	cmp	r3, r5
 800235e:	dcf2      	bgt.n	8002346 <_printf_i+0x21e>
 8002360:	e7eb      	b.n	800233a <_printf_i+0x212>
 8002362:	2500      	movs	r5, #0
 8002364:	f104 0619 	add.w	r6, r4, #25
 8002368:	e7f5      	b.n	8002356 <_printf_i+0x22e>
 800236a:	bf00      	nop
 800236c:	08002635 	.word	0x08002635
 8002370:	08002646 	.word	0x08002646

08002374 <_sbrk_r>:
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	4d06      	ldr	r5, [pc, #24]	; (8002390 <_sbrk_r+0x1c>)
 8002378:	2300      	movs	r3, #0
 800237a:	4604      	mov	r4, r0
 800237c:	4608      	mov	r0, r1
 800237e:	602b      	str	r3, [r5, #0]
 8002380:	f7fe fd34 	bl	8000dec <_sbrk>
 8002384:	1c43      	adds	r3, r0, #1
 8002386:	d102      	bne.n	800238e <_sbrk_r+0x1a>
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	b103      	cbz	r3, 800238e <_sbrk_r+0x1a>
 800238c:	6023      	str	r3, [r4, #0]
 800238e:	bd38      	pop	{r3, r4, r5, pc}
 8002390:	200004c8 	.word	0x200004c8

08002394 <__sread>:
 8002394:	b510      	push	{r4, lr}
 8002396:	460c      	mov	r4, r1
 8002398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800239c:	f000 f8a0 	bl	80024e0 <_read_r>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	bfab      	itete	ge
 80023a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80023a6:	89a3      	ldrhlt	r3, [r4, #12]
 80023a8:	181b      	addge	r3, r3, r0
 80023aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80023ae:	bfac      	ite	ge
 80023b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80023b2:	81a3      	strhlt	r3, [r4, #12]
 80023b4:	bd10      	pop	{r4, pc}

080023b6 <__swrite>:
 80023b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ba:	461f      	mov	r7, r3
 80023bc:	898b      	ldrh	r3, [r1, #12]
 80023be:	05db      	lsls	r3, r3, #23
 80023c0:	4605      	mov	r5, r0
 80023c2:	460c      	mov	r4, r1
 80023c4:	4616      	mov	r6, r2
 80023c6:	d505      	bpl.n	80023d4 <__swrite+0x1e>
 80023c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023cc:	2302      	movs	r3, #2
 80023ce:	2200      	movs	r2, #0
 80023d0:	f000 f868 	bl	80024a4 <_lseek_r>
 80023d4:	89a3      	ldrh	r3, [r4, #12]
 80023d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023de:	81a3      	strh	r3, [r4, #12]
 80023e0:	4632      	mov	r2, r6
 80023e2:	463b      	mov	r3, r7
 80023e4:	4628      	mov	r0, r5
 80023e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023ea:	f000 b817 	b.w	800241c <_write_r>

080023ee <__sseek>:
 80023ee:	b510      	push	{r4, lr}
 80023f0:	460c      	mov	r4, r1
 80023f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023f6:	f000 f855 	bl	80024a4 <_lseek_r>
 80023fa:	1c43      	adds	r3, r0, #1
 80023fc:	89a3      	ldrh	r3, [r4, #12]
 80023fe:	bf15      	itete	ne
 8002400:	6560      	strne	r0, [r4, #84]	; 0x54
 8002402:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002406:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800240a:	81a3      	strheq	r3, [r4, #12]
 800240c:	bf18      	it	ne
 800240e:	81a3      	strhne	r3, [r4, #12]
 8002410:	bd10      	pop	{r4, pc}

08002412 <__sclose>:
 8002412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002416:	f000 b813 	b.w	8002440 <_close_r>
	...

0800241c <_write_r>:
 800241c:	b538      	push	{r3, r4, r5, lr}
 800241e:	4d07      	ldr	r5, [pc, #28]	; (800243c <_write_r+0x20>)
 8002420:	4604      	mov	r4, r0
 8002422:	4608      	mov	r0, r1
 8002424:	4611      	mov	r1, r2
 8002426:	2200      	movs	r2, #0
 8002428:	602a      	str	r2, [r5, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	f7fe fc8d 	bl	8000d4a <_write>
 8002430:	1c43      	adds	r3, r0, #1
 8002432:	d102      	bne.n	800243a <_write_r+0x1e>
 8002434:	682b      	ldr	r3, [r5, #0]
 8002436:	b103      	cbz	r3, 800243a <_write_r+0x1e>
 8002438:	6023      	str	r3, [r4, #0]
 800243a:	bd38      	pop	{r3, r4, r5, pc}
 800243c:	200004c8 	.word	0x200004c8

08002440 <_close_r>:
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	4d06      	ldr	r5, [pc, #24]	; (800245c <_close_r+0x1c>)
 8002444:	2300      	movs	r3, #0
 8002446:	4604      	mov	r4, r0
 8002448:	4608      	mov	r0, r1
 800244a:	602b      	str	r3, [r5, #0]
 800244c:	f7fe fc99 	bl	8000d82 <_close>
 8002450:	1c43      	adds	r3, r0, #1
 8002452:	d102      	bne.n	800245a <_close_r+0x1a>
 8002454:	682b      	ldr	r3, [r5, #0]
 8002456:	b103      	cbz	r3, 800245a <_close_r+0x1a>
 8002458:	6023      	str	r3, [r4, #0]
 800245a:	bd38      	pop	{r3, r4, r5, pc}
 800245c:	200004c8 	.word	0x200004c8

08002460 <_fstat_r>:
 8002460:	b538      	push	{r3, r4, r5, lr}
 8002462:	4d07      	ldr	r5, [pc, #28]	; (8002480 <_fstat_r+0x20>)
 8002464:	2300      	movs	r3, #0
 8002466:	4604      	mov	r4, r0
 8002468:	4608      	mov	r0, r1
 800246a:	4611      	mov	r1, r2
 800246c:	602b      	str	r3, [r5, #0]
 800246e:	f7fe fc94 	bl	8000d9a <_fstat>
 8002472:	1c43      	adds	r3, r0, #1
 8002474:	d102      	bne.n	800247c <_fstat_r+0x1c>
 8002476:	682b      	ldr	r3, [r5, #0]
 8002478:	b103      	cbz	r3, 800247c <_fstat_r+0x1c>
 800247a:	6023      	str	r3, [r4, #0]
 800247c:	bd38      	pop	{r3, r4, r5, pc}
 800247e:	bf00      	nop
 8002480:	200004c8 	.word	0x200004c8

08002484 <_isatty_r>:
 8002484:	b538      	push	{r3, r4, r5, lr}
 8002486:	4d06      	ldr	r5, [pc, #24]	; (80024a0 <_isatty_r+0x1c>)
 8002488:	2300      	movs	r3, #0
 800248a:	4604      	mov	r4, r0
 800248c:	4608      	mov	r0, r1
 800248e:	602b      	str	r3, [r5, #0]
 8002490:	f7fe fc93 	bl	8000dba <_isatty>
 8002494:	1c43      	adds	r3, r0, #1
 8002496:	d102      	bne.n	800249e <_isatty_r+0x1a>
 8002498:	682b      	ldr	r3, [r5, #0]
 800249a:	b103      	cbz	r3, 800249e <_isatty_r+0x1a>
 800249c:	6023      	str	r3, [r4, #0]
 800249e:	bd38      	pop	{r3, r4, r5, pc}
 80024a0:	200004c8 	.word	0x200004c8

080024a4 <_lseek_r>:
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	4d07      	ldr	r5, [pc, #28]	; (80024c4 <_lseek_r+0x20>)
 80024a8:	4604      	mov	r4, r0
 80024aa:	4608      	mov	r0, r1
 80024ac:	4611      	mov	r1, r2
 80024ae:	2200      	movs	r2, #0
 80024b0:	602a      	str	r2, [r5, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f7fe fc8c 	bl	8000dd0 <_lseek>
 80024b8:	1c43      	adds	r3, r0, #1
 80024ba:	d102      	bne.n	80024c2 <_lseek_r+0x1e>
 80024bc:	682b      	ldr	r3, [r5, #0]
 80024be:	b103      	cbz	r3, 80024c2 <_lseek_r+0x1e>
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	bd38      	pop	{r3, r4, r5, pc}
 80024c4:	200004c8 	.word	0x200004c8

080024c8 <__malloc_lock>:
 80024c8:	4801      	ldr	r0, [pc, #4]	; (80024d0 <__malloc_lock+0x8>)
 80024ca:	f7ff bb1d 	b.w	8001b08 <__retarget_lock_acquire_recursive>
 80024ce:	bf00      	nop
 80024d0:	200004bc 	.word	0x200004bc

080024d4 <__malloc_unlock>:
 80024d4:	4801      	ldr	r0, [pc, #4]	; (80024dc <__malloc_unlock+0x8>)
 80024d6:	f7ff bb18 	b.w	8001b0a <__retarget_lock_release_recursive>
 80024da:	bf00      	nop
 80024dc:	200004bc 	.word	0x200004bc

080024e0 <_read_r>:
 80024e0:	b538      	push	{r3, r4, r5, lr}
 80024e2:	4d07      	ldr	r5, [pc, #28]	; (8002500 <_read_r+0x20>)
 80024e4:	4604      	mov	r4, r0
 80024e6:	4608      	mov	r0, r1
 80024e8:	4611      	mov	r1, r2
 80024ea:	2200      	movs	r2, #0
 80024ec:	602a      	str	r2, [r5, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f7fe fc0e 	bl	8000d10 <_read>
 80024f4:	1c43      	adds	r3, r0, #1
 80024f6:	d102      	bne.n	80024fe <_read_r+0x1e>
 80024f8:	682b      	ldr	r3, [r5, #0]
 80024fa:	b103      	cbz	r3, 80024fe <_read_r+0x1e>
 80024fc:	6023      	str	r3, [r4, #0]
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
 8002500:	200004c8 	.word	0x200004c8

08002504 <_init>:
 8002504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002506:	bf00      	nop
 8002508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800250a:	bc08      	pop	{r3}
 800250c:	469e      	mov	lr, r3
 800250e:	4770      	bx	lr

08002510 <_fini>:
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	bf00      	nop
 8002514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002516:	bc08      	pop	{r3}
 8002518:	469e      	mov	lr, r3
 800251a:	4770      	bx	lr
