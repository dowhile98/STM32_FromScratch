
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007998  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b10  08007b20  08007b20  00017b20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009630  08009630  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009630  08009630  00019630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009638  08009638  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009638  08009638  00019638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800963c  0800963c  0001963c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004b4  200004b4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6c8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d8b  00000000  00000000  0002e704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  00030490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d60  00000000  00000000  000312d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021e2a  00000000  00000000  00032030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000125e9  00000000  00000000  00053e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c8424  00000000  00000000  00066443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e867  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003eb0  00000000  00000000  0012e8b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b08 	.word	0x08007b08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08007b08 	.word	0x08007b08

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_ldivmod>:
 8000a74:	b97b      	cbnz	r3, 8000a96 <__aeabi_ldivmod+0x22>
 8000a76:	b972      	cbnz	r2, 8000a96 <__aeabi_ldivmod+0x22>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	bfbe      	ittt	lt
 8000a7c:	2000      	movlt	r0, #0
 8000a7e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a82:	e006      	blt.n	8000a92 <__aeabi_ldivmod+0x1e>
 8000a84:	bf08      	it	eq
 8000a86:	2800      	cmpeq	r0, #0
 8000a88:	bf1c      	itt	ne
 8000a8a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a8e:	f04f 30ff 	movne.w	r0, #4294967295
 8000a92:	f000 b9f5 	b.w	8000e80 <__aeabi_idiv0>
 8000a96:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a9a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	db09      	blt.n	8000ab6 <__aeabi_ldivmod+0x42>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db1a      	blt.n	8000adc <__aeabi_ldivmod+0x68>
 8000aa6:	f000 f883 	bl	8000bb0 <__udivmoddi4>
 8000aaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab2:	b004      	add	sp, #16
 8000ab4:	4770      	bx	lr
 8000ab6:	4240      	negs	r0, r0
 8000ab8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db1b      	blt.n	8000af8 <__aeabi_ldivmod+0x84>
 8000ac0:	f000 f876 	bl	8000bb0 <__udivmoddi4>
 8000ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000acc:	b004      	add	sp, #16
 8000ace:	4240      	negs	r0, r0
 8000ad0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad4:	4252      	negs	r2, r2
 8000ad6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ada:	4770      	bx	lr
 8000adc:	4252      	negs	r2, r2
 8000ade:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ae2:	f000 f865 	bl	8000bb0 <__udivmoddi4>
 8000ae6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aee:	b004      	add	sp, #16
 8000af0:	4240      	negs	r0, r0
 8000af2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af6:	4770      	bx	lr
 8000af8:	4252      	negs	r2, r2
 8000afa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afe:	f000 f857 	bl	8000bb0 <__udivmoddi4>
 8000b02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0a:	b004      	add	sp, #16
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b9aa 	b.w	8000e80 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f83c 	bl	8000bb0 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2lz>:
 8000b44:	b538      	push	{r3, r4, r5, lr}
 8000b46:	2200      	movs	r2, #0
 8000b48:	2300      	movs	r3, #0
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	460d      	mov	r5, r1
 8000b4e:	f7ff ff69 	bl	8000a24 <__aeabi_dcmplt>
 8000b52:	b928      	cbnz	r0, 8000b60 <__aeabi_d2lz+0x1c>
 8000b54:	4620      	mov	r0, r4
 8000b56:	4629      	mov	r1, r5
 8000b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b5c:	f000 b80a 	b.w	8000b74 <__aeabi_d2ulz>
 8000b60:	4620      	mov	r0, r4
 8000b62:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000b66:	f000 f805 	bl	8000b74 <__aeabi_d2ulz>
 8000b6a:	4240      	negs	r0, r0
 8000b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b70:	bd38      	pop	{r3, r4, r5, pc}
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2ulz>:
 8000b74:	b5d0      	push	{r4, r6, r7, lr}
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <__aeabi_d2ulz+0x34>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4606      	mov	r6, r0
 8000b7c:	460f      	mov	r7, r1
 8000b7e:	f7ff fcdf 	bl	8000540 <__aeabi_dmul>
 8000b82:	f000 f97f 	bl	8000e84 <__aeabi_d2uiz>
 8000b86:	4604      	mov	r4, r0
 8000b88:	f7ff fc60 	bl	800044c <__aeabi_ui2d>
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <__aeabi_d2ulz+0x38>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f7ff fcd6 	bl	8000540 <__aeabi_dmul>
 8000b94:	4602      	mov	r2, r0
 8000b96:	460b      	mov	r3, r1
 8000b98:	4630      	mov	r0, r6
 8000b9a:	4639      	mov	r1, r7
 8000b9c:	f7ff fb18 	bl	80001d0 <__aeabi_dsub>
 8000ba0:	f000 f970 	bl	8000e84 <__aeabi_d2uiz>
 8000ba4:	4621      	mov	r1, r4
 8000ba6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ba8:	3df00000 	.word	0x3df00000
 8000bac:	41f00000 	.word	0x41f00000

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <__aeabi_d2uiz>:
 8000e84:	004a      	lsls	r2, r1, #1
 8000e86:	d211      	bcs.n	8000eac <__aeabi_d2uiz+0x28>
 8000e88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e8c:	d211      	bcs.n	8000eb2 <__aeabi_d2uiz+0x2e>
 8000e8e:	d50d      	bpl.n	8000eac <__aeabi_d2uiz+0x28>
 8000e90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e98:	d40e      	bmi.n	8000eb8 <__aeabi_d2uiz+0x34>
 8000e9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ea2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ea6:	fa23 f002 	lsr.w	r0, r3, r2
 8000eaa:	4770      	bx	lr
 8000eac:	f04f 0000 	mov.w	r0, #0
 8000eb0:	4770      	bx	lr
 8000eb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000eb6:	d102      	bne.n	8000ebe <__aeabi_d2uiz+0x3a>
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	4770      	bx	lr
 8000ebe:	f04f 0000 	mov.w	r0, #0
 8000ec2:	4770      	bx	lr

08000ec4 <mpu6050_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      none
 */
uint8_t mpu6050_basic_init(mpu6050_address_t addr_pin)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
    uint8_t res;
    
    /* link interface function */
    DRIVER_MPU6050_LINK_INIT(&gs_handle, mpu6050_handle_t);
 8000ece:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	48b0      	ldr	r0, [pc, #704]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000ed6:	f006 fdfb 	bl	8007ad0 <memset>
    DRIVER_MPU6050_LINK_IIC_INIT(&gs_handle, mpu6050_interface_iic_init);
 8000eda:	4baf      	ldr	r3, [pc, #700]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000edc:	4aaf      	ldr	r2, [pc, #700]	; (800119c <mpu6050_basic_init+0x2d8>)
 8000ede:	605a      	str	r2, [r3, #4]
    DRIVER_MPU6050_LINK_IIC_DEINIT(&gs_handle, mpu6050_interface_iic_deinit);
 8000ee0:	4bad      	ldr	r3, [pc, #692]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000ee2:	4aaf      	ldr	r2, [pc, #700]	; (80011a0 <mpu6050_basic_init+0x2dc>)
 8000ee4:	609a      	str	r2, [r3, #8]
    DRIVER_MPU6050_LINK_IIC_READ(&gs_handle, mpu6050_interface_iic_read);
 8000ee6:	4bac      	ldr	r3, [pc, #688]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000ee8:	4aae      	ldr	r2, [pc, #696]	; (80011a4 <mpu6050_basic_init+0x2e0>)
 8000eea:	60da      	str	r2, [r3, #12]
    DRIVER_MPU6050_LINK_IIC_WRITE(&gs_handle, mpu6050_interface_iic_write);
 8000eec:	4baa      	ldr	r3, [pc, #680]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000eee:	4aae      	ldr	r2, [pc, #696]	; (80011a8 <mpu6050_basic_init+0x2e4>)
 8000ef0:	611a      	str	r2, [r3, #16]
    DRIVER_MPU6050_LINK_DELAY_MS(&gs_handle, mpu6050_interface_delay_ms);
 8000ef2:	4ba9      	ldr	r3, [pc, #676]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000ef4:	4aad      	ldr	r2, [pc, #692]	; (80011ac <mpu6050_basic_init+0x2e8>)
 8000ef6:	615a      	str	r2, [r3, #20]
    DRIVER_MPU6050_LINK_DEBUG_PRINT(&gs_handle, mpu6050_interface_debug_print);
 8000ef8:	4ba7      	ldr	r3, [pc, #668]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000efa:	4aad      	ldr	r2, [pc, #692]	; (80011b0 <mpu6050_basic_init+0x2ec>)
 8000efc:	619a      	str	r2, [r3, #24]
    DRIVER_MPU6050_LINK_RECEIVE_CALLBACK(&gs_handle, mpu6050_interface_receive_callback);
 8000efe:	4ba6      	ldr	r3, [pc, #664]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000f00:	4aac      	ldr	r2, [pc, #688]	; (80011b4 <mpu6050_basic_init+0x2f0>)
 8000f02:	61da      	str	r2, [r3, #28]
    
    /* set the addr pin */
    res = mpu6050_set_addr_pin(&gs_handle, addr_pin);
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	4619      	mov	r1, r3
 8000f08:	48a3      	ldr	r0, [pc, #652]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000f0a:	f004 fe8f 	bl	8005c2c <mpu6050_set_addr_pin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d004      	beq.n	8000f22 <mpu6050_basic_init+0x5e>
    {
        mpu6050_interface_debug_print("mpu6050: set addr pin failed.\n");
 8000f18:	48a7      	ldr	r0, [pc, #668]	; (80011b8 <mpu6050_basic_init+0x2f4>)
 8000f1a:	f000 fbe0 	bl	80016de <mpu6050_interface_debug_print>
       
        return 1;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e322      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* init */
    res = mpu6050_init(&gs_handle);
 8000f22:	489d      	ldr	r0, [pc, #628]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000f24:	f004 fe98 	bl	8005c58 <mpu6050_init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d004      	beq.n	8000f3c <mpu6050_basic_init+0x78>
    {
        mpu6050_interface_debug_print("mpu6050: init failed.\n");
 8000f32:	48a2      	ldr	r0, [pc, #648]	; (80011bc <mpu6050_basic_init+0x2f8>)
 8000f34:	f000 fbd3 	bl	80016de <mpu6050_interface_debug_print>
       
        return 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e315      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* delay 100 ms */
    mpu6050_interface_delay_ms(100);
 8000f3c:	2064      	movs	r0, #100	; 0x64
 8000f3e:	f000 fbc3 	bl	80016c8 <mpu6050_interface_delay_ms>
    
    /* disable sleep */
    res = mpu6050_set_sleep(&gs_handle, MPU6050_BOOL_FALSE);
 8000f42:	2100      	movs	r1, #0
 8000f44:	4894      	ldr	r0, [pc, #592]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000f46:	f005 ffbf 	bl	8006ec8 <mpu6050_set_sleep>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d007      	beq.n	8000f64 <mpu6050_basic_init+0xa0>
    {
        mpu6050_interface_debug_print("mpu6050: set sleep failed.\n");
 8000f54:	489a      	ldr	r0, [pc, #616]	; (80011c0 <mpu6050_basic_init+0x2fc>)
 8000f56:	f000 fbc2 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8000f5a:	488f      	ldr	r0, [pc, #572]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000f5c:	f004 ff5e 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e301      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default clock source */
    res = mpu6050_set_clock_source(&gs_handle, MPU6050_BASIC_DEFAULT_CLOCK_SOURCE);
 8000f64:	2101      	movs	r1, #1
 8000f66:	488c      	ldr	r0, [pc, #560]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000f68:	f005 fec6 	bl	8006cf8 <mpu6050_set_clock_source>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d007      	beq.n	8000f86 <mpu6050_basic_init+0xc2>
    {
        mpu6050_interface_debug_print("mpu6050: set clock source failed.\n");
 8000f76:	4893      	ldr	r0, [pc, #588]	; (80011c4 <mpu6050_basic_init+0x300>)
 8000f78:	f000 fbb1 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8000f7c:	4886      	ldr	r0, [pc, #536]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000f7e:	f004 ff4d 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e2f0      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default rate */
    res = mpu6050_set_sample_rate_divider(&gs_handle, 1000 / (MPU6050_BASIC_DEFAULT_RATE - 1));
 8000f86:	2114      	movs	r1, #20
 8000f88:	4883      	ldr	r0, [pc, #524]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000f8a:	f006 f893 	bl	80070b4 <mpu6050_set_sample_rate_divider>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d007      	beq.n	8000fa8 <mpu6050_basic_init+0xe4>
    {
        mpu6050_interface_debug_print("mpu6050: set sample rate divider failed.\n");
 8000f98:	488b      	ldr	r0, [pc, #556]	; (80011c8 <mpu6050_basic_init+0x304>)
 8000f9a:	f000 fba0 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8000f9e:	487e      	ldr	r0, [pc, #504]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000fa0:	f004 ff3c 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e2df      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default low pass filter */
    res = mpu6050_set_low_pass_filter(&gs_handle, MPU6050_BASIC_DEFAULT_LOW_PASS_FILTER);
 8000fa8:	2103      	movs	r1, #3
 8000faa:	487b      	ldr	r0, [pc, #492]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000fac:	f006 f8fa 	bl	80071a4 <mpu6050_set_low_pass_filter>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8000fb4:	7bfb      	ldrb	r3, [r7, #15]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d007      	beq.n	8000fca <mpu6050_basic_init+0x106>
    {
        mpu6050_interface_debug_print("mpu6050: set low pass filter failed.\n");
 8000fba:	4884      	ldr	r0, [pc, #528]	; (80011cc <mpu6050_basic_init+0x308>)
 8000fbc:	f000 fb8f 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8000fc0:	4875      	ldr	r0, [pc, #468]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000fc2:	f004 ff2b 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e2ce      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* enable temperature sensor */
    res = mpu6050_set_temperature_sensor(&gs_handle, MPU6050_BOOL_TRUE);
 8000fca:	2101      	movs	r1, #1
 8000fcc:	4872      	ldr	r0, [pc, #456]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000fce:	f005 fedd 	bl	8006d8c <mpu6050_set_temperature_sensor>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d007      	beq.n	8000fec <mpu6050_basic_init+0x128>
    {
        mpu6050_interface_debug_print("mpu6050: set temperature sensor failed.\n");
 8000fdc:	487c      	ldr	r0, [pc, #496]	; (80011d0 <mpu6050_basic_init+0x30c>)
 8000fde:	f000 fb7e 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8000fe2:	486d      	ldr	r0, [pc, #436]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000fe4:	f004 ff1a 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e2bd      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default cycle wake up */
    res = mpu6050_set_cycle_wake_up(&gs_handle, MPU6050_BASIC_DEFAULT_CYCLE_WAKE_UP);
 8000fec:	2100      	movs	r1, #0
 8000fee:	486a      	ldr	r0, [pc, #424]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8000ff0:	f005 ff1c 	bl	8006e2c <mpu6050_set_cycle_wake_up>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d007      	beq.n	800100e <mpu6050_basic_init+0x14a>
    {
        mpu6050_interface_debug_print("mpu6050: set cycle wake up failed.\n");
 8000ffe:	4875      	ldr	r0, [pc, #468]	; (80011d4 <mpu6050_basic_init+0x310>)
 8001000:	f000 fb6d 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001004:	4864      	ldr	r0, [pc, #400]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8001006:	f004 ff09 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 800100a:	2301      	movs	r3, #1
 800100c:	e2ac      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default wake up frequency */
    res = mpu6050_set_wake_up_frequency(&gs_handle, MPU6050_BASIC_DEFAULT_WAKE_UP_FREQUENCY);
 800100e:	2100      	movs	r1, #0
 8001010:	4861      	ldr	r0, [pc, #388]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8001012:	f006 f801 	bl	8007018 <mpu6050_set_wake_up_frequency>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <mpu6050_basic_init+0x16c>
    {
        mpu6050_interface_debug_print("mpu6050: set wake up frequency failed.\n");
 8001020:	486d      	ldr	r0, [pc, #436]	; (80011d8 <mpu6050_basic_init+0x314>)
 8001022:	f000 fb5c 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001026:	485c      	ldr	r0, [pc, #368]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8001028:	f004 fef8 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 800102c:	2301      	movs	r3, #1
 800102e:	e29b      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* enable acc x */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_X, MPU6050_BOOL_FALSE);
 8001030:	2200      	movs	r2, #0
 8001032:	2105      	movs	r1, #5
 8001034:	4858      	ldr	r0, [pc, #352]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8001036:	f005 ff95 	bl	8006f64 <mpu6050_set_standby_mode>
 800103a:	4603      	mov	r3, r0
 800103c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d007      	beq.n	8001054 <mpu6050_basic_init+0x190>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 8001044:	4865      	ldr	r0, [pc, #404]	; (80011dc <mpu6050_basic_init+0x318>)
 8001046:	f000 fb4a 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800104a:	4853      	ldr	r0, [pc, #332]	; (8001198 <mpu6050_basic_init+0x2d4>)
 800104c:	f004 fee6 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001050:	2301      	movs	r3, #1
 8001052:	e289      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* enable acc y */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_Y, MPU6050_BOOL_FALSE);
 8001054:	2200      	movs	r2, #0
 8001056:	2104      	movs	r1, #4
 8001058:	484f      	ldr	r0, [pc, #316]	; (8001198 <mpu6050_basic_init+0x2d4>)
 800105a:	f005 ff83 	bl	8006f64 <mpu6050_set_standby_mode>
 800105e:	4603      	mov	r3, r0
 8001060:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d007      	beq.n	8001078 <mpu6050_basic_init+0x1b4>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 8001068:	485c      	ldr	r0, [pc, #368]	; (80011dc <mpu6050_basic_init+0x318>)
 800106a:	f000 fb38 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800106e:	484a      	ldr	r0, [pc, #296]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8001070:	f004 fed4 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001074:	2301      	movs	r3, #1
 8001076:	e277      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* enable acc z */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_Z, MPU6050_BOOL_FALSE);
 8001078:	2200      	movs	r2, #0
 800107a:	2103      	movs	r1, #3
 800107c:	4846      	ldr	r0, [pc, #280]	; (8001198 <mpu6050_basic_init+0x2d4>)
 800107e:	f005 ff71 	bl	8006f64 <mpu6050_set_standby_mode>
 8001082:	4603      	mov	r3, r0
 8001084:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d007      	beq.n	800109c <mpu6050_basic_init+0x1d8>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 800108c:	4853      	ldr	r0, [pc, #332]	; (80011dc <mpu6050_basic_init+0x318>)
 800108e:	f000 fb26 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001092:	4841      	ldr	r0, [pc, #260]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8001094:	f004 fec2 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001098:	2301      	movs	r3, #1
 800109a:	e265      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* enable gyro x */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_X, MPU6050_BOOL_FALSE);
 800109c:	2200      	movs	r2, #0
 800109e:	2102      	movs	r1, #2
 80010a0:	483d      	ldr	r0, [pc, #244]	; (8001198 <mpu6050_basic_init+0x2d4>)
 80010a2:	f005 ff5f 	bl	8006f64 <mpu6050_set_standby_mode>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d007      	beq.n	80010c0 <mpu6050_basic_init+0x1fc>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 80010b0:	484a      	ldr	r0, [pc, #296]	; (80011dc <mpu6050_basic_init+0x318>)
 80010b2:	f000 fb14 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80010b6:	4838      	ldr	r0, [pc, #224]	; (8001198 <mpu6050_basic_init+0x2d4>)
 80010b8:	f004 feb0 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 80010bc:	2301      	movs	r3, #1
 80010be:	e253      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* enable gyro y */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_Y, MPU6050_BOOL_FALSE);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2101      	movs	r1, #1
 80010c4:	4834      	ldr	r0, [pc, #208]	; (8001198 <mpu6050_basic_init+0x2d4>)
 80010c6:	f005 ff4d 	bl	8006f64 <mpu6050_set_standby_mode>
 80010ca:	4603      	mov	r3, r0
 80010cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d007      	beq.n	80010e4 <mpu6050_basic_init+0x220>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 80010d4:	4841      	ldr	r0, [pc, #260]	; (80011dc <mpu6050_basic_init+0x318>)
 80010d6:	f000 fb02 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80010da:	482f      	ldr	r0, [pc, #188]	; (8001198 <mpu6050_basic_init+0x2d4>)
 80010dc:	f004 fe9e 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e241      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* enable gyro z */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_Z, MPU6050_BOOL_FALSE);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	482b      	ldr	r0, [pc, #172]	; (8001198 <mpu6050_basic_init+0x2d4>)
 80010ea:	f005 ff3b 	bl	8006f64 <mpu6050_set_standby_mode>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d007      	beq.n	8001108 <mpu6050_basic_init+0x244>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 80010f8:	4838      	ldr	r0, [pc, #224]	; (80011dc <mpu6050_basic_init+0x318>)
 80010fa:	f000 faf0 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80010fe:	4826      	ldr	r0, [pc, #152]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8001100:	f004 fe8c 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001104:	2301      	movs	r3, #1
 8001106:	e22f      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* disable gyroscope x test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_X, MPU6050_BOOL_FALSE);
 8001108:	2200      	movs	r2, #0
 800110a:	2107      	movs	r1, #7
 800110c:	4822      	ldr	r0, [pc, #136]	; (8001198 <mpu6050_basic_init+0x2d4>)
 800110e:	f006 f893 	bl	8007238 <mpu6050_set_gyroscope_test>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d007      	beq.n	800112c <mpu6050_basic_init+0x268>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 800111c:	4830      	ldr	r0, [pc, #192]	; (80011e0 <mpu6050_basic_init+0x31c>)
 800111e:	f000 fade 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001122:	481d      	ldr	r0, [pc, #116]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8001124:	f004 fe7a 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001128:	2301      	movs	r3, #1
 800112a:	e21d      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* disable gyroscope y test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_Y, MPU6050_BOOL_FALSE);
 800112c:	2200      	movs	r2, #0
 800112e:	2106      	movs	r1, #6
 8001130:	4819      	ldr	r0, [pc, #100]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8001132:	f006 f881 	bl	8007238 <mpu6050_set_gyroscope_test>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d007      	beq.n	8001150 <mpu6050_basic_init+0x28c>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 8001140:	4827      	ldr	r0, [pc, #156]	; (80011e0 <mpu6050_basic_init+0x31c>)
 8001142:	f000 facc 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001146:	4814      	ldr	r0, [pc, #80]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8001148:	f004 fe68 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 800114c:	2301      	movs	r3, #1
 800114e:	e20b      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* disable gyroscope z test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_Z, MPU6050_BOOL_FALSE);
 8001150:	2200      	movs	r2, #0
 8001152:	2105      	movs	r1, #5
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8001156:	f006 f86f 	bl	8007238 <mpu6050_set_gyroscope_test>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <mpu6050_basic_init+0x2b0>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 8001164:	481e      	ldr	r0, [pc, #120]	; (80011e0 <mpu6050_basic_init+0x31c>)
 8001166:	f000 faba 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800116a:	480b      	ldr	r0, [pc, #44]	; (8001198 <mpu6050_basic_init+0x2d4>)
 800116c:	f004 fe56 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001170:	2301      	movs	r3, #1
 8001172:	e1f9      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* disable accelerometer x test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_X, MPU6050_BOOL_FALSE);
 8001174:	2200      	movs	r2, #0
 8001176:	2107      	movs	r1, #7
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <mpu6050_basic_init+0x2d4>)
 800117a:	f006 f905 	bl	8007388 <mpu6050_set_accelerometer_test>
 800117e:	4603      	mov	r3, r0
 8001180:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d02f      	beq.n	80011e8 <mpu6050_basic_init+0x324>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 8001188:	4816      	ldr	r0, [pc, #88]	; (80011e4 <mpu6050_basic_init+0x320>)
 800118a:	f000 faa8 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800118e:	4802      	ldr	r0, [pc, #8]	; (8001198 <mpu6050_basic_init+0x2d4>)
 8001190:	f004 fe44 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001194:	2301      	movs	r3, #1
 8001196:	e1e7      	b.n	8001568 <mpu6050_basic_init+0x6a4>
 8001198:	20000028 	.word	0x20000028
 800119c:	080015fd 	.word	0x080015fd
 80011a0:	0800160d 	.word	0x0800160d
 80011a4:	08001621 	.word	0x08001621
 80011a8:	08001675 	.word	0x08001675
 80011ac:	080016c9 	.word	0x080016c9
 80011b0:	080016df 	.word	0x080016df
 80011b4:	08001705 	.word	0x08001705
 80011b8:	08007b20 	.word	0x08007b20
 80011bc:	08007b40 	.word	0x08007b40
 80011c0:	08007b58 	.word	0x08007b58
 80011c4:	08007b74 	.word	0x08007b74
 80011c8:	08007b98 	.word	0x08007b98
 80011cc:	08007bc4 	.word	0x08007bc4
 80011d0:	08007bec 	.word	0x08007bec
 80011d4:	08007c18 	.word	0x08007c18
 80011d8:	08007c3c 	.word	0x08007c3c
 80011dc:	08007c64 	.word	0x08007c64
 80011e0:	08007c88 	.word	0x08007c88
 80011e4:	08007cb0 	.word	0x08007cb0
    }
    
    /* disable accelerometer y test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_Y, MPU6050_BOOL_FALSE);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2106      	movs	r1, #6
 80011ec:	48ae      	ldr	r0, [pc, #696]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80011ee:	f006 f8cb 	bl	8007388 <mpu6050_set_accelerometer_test>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d007      	beq.n	800120c <mpu6050_basic_init+0x348>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 80011fc:	48ab      	ldr	r0, [pc, #684]	; (80014ac <mpu6050_basic_init+0x5e8>)
 80011fe:	f000 fa6e 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001202:	48a9      	ldr	r0, [pc, #676]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001204:	f004 fe0a 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001208:	2301      	movs	r3, #1
 800120a:	e1ad      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* disable accelerometer z test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_Z, MPU6050_BOOL_FALSE);
 800120c:	2200      	movs	r2, #0
 800120e:	2105      	movs	r1, #5
 8001210:	48a5      	ldr	r0, [pc, #660]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001212:	f006 f8b9 	bl	8007388 <mpu6050_set_accelerometer_test>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800121a:	7bfb      	ldrb	r3, [r7, #15]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <mpu6050_basic_init+0x36c>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 8001220:	48a2      	ldr	r0, [pc, #648]	; (80014ac <mpu6050_basic_init+0x5e8>)
 8001222:	f000 fa5c 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001226:	48a0      	ldr	r0, [pc, #640]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001228:	f004 fdf8 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 800122c:	2301      	movs	r3, #1
 800122e:	e19b      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* disable fifo */
    res = mpu6050_set_fifo(&gs_handle, MPU6050_BOOL_FALSE);
 8001230:	2100      	movs	r1, #0
 8001232:	489d      	ldr	r0, [pc, #628]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001234:	f005 fcc4 	bl	8006bc0 <mpu6050_set_fifo>
 8001238:	4603      	mov	r3, r0
 800123a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d007      	beq.n	8001252 <mpu6050_basic_init+0x38e>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo failed.\n");
 8001242:	489b      	ldr	r0, [pc, #620]	; (80014b0 <mpu6050_basic_init+0x5ec>)
 8001244:	f000 fa4b 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001248:	4897      	ldr	r0, [pc, #604]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 800124a:	f004 fde7 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 800124e:	2301      	movs	r3, #1
 8001250:	e18a      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* disable temp fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_TEMP, MPU6050_BOOL_FALSE);
 8001252:	2200      	movs	r2, #0
 8001254:	2107      	movs	r1, #7
 8001256:	4894      	ldr	r0, [pc, #592]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001258:	f006 f93e 	bl	80074d8 <mpu6050_set_fifo_enable>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <mpu6050_basic_init+0x3b2>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 8001266:	4893      	ldr	r0, [pc, #588]	; (80014b4 <mpu6050_basic_init+0x5f0>)
 8001268:	f000 fa39 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800126c:	488e      	ldr	r0, [pc, #568]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 800126e:	f004 fdd5 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001272:	2301      	movs	r3, #1
 8001274:	e178      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* disable xg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_XG, MPU6050_BOOL_FALSE);
 8001276:	2200      	movs	r2, #0
 8001278:	2106      	movs	r1, #6
 800127a:	488b      	ldr	r0, [pc, #556]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 800127c:	f006 f92c 	bl	80074d8 <mpu6050_set_fifo_enable>
 8001280:	4603      	mov	r3, r0
 8001282:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d007      	beq.n	800129a <mpu6050_basic_init+0x3d6>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 800128a:	488a      	ldr	r0, [pc, #552]	; (80014b4 <mpu6050_basic_init+0x5f0>)
 800128c:	f000 fa27 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001290:	4885      	ldr	r0, [pc, #532]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001292:	f004 fdc3 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001296:	2301      	movs	r3, #1
 8001298:	e166      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* disable yg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_YG, MPU6050_BOOL_FALSE);
 800129a:	2200      	movs	r2, #0
 800129c:	2105      	movs	r1, #5
 800129e:	4882      	ldr	r0, [pc, #520]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80012a0:	f006 f91a 	bl	80074d8 <mpu6050_set_fifo_enable>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <mpu6050_basic_init+0x3fa>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 80012ae:	4881      	ldr	r0, [pc, #516]	; (80014b4 <mpu6050_basic_init+0x5f0>)
 80012b0:	f000 fa15 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80012b4:	487c      	ldr	r0, [pc, #496]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80012b6:	f004 fdb1 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e154      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* disable zg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_ZG, MPU6050_BOOL_FALSE);
 80012be:	2200      	movs	r2, #0
 80012c0:	2104      	movs	r1, #4
 80012c2:	4879      	ldr	r0, [pc, #484]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80012c4:	f006 f908 	bl	80074d8 <mpu6050_set_fifo_enable>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80012cc:	7bfb      	ldrb	r3, [r7, #15]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <mpu6050_basic_init+0x41e>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 80012d2:	4878      	ldr	r0, [pc, #480]	; (80014b4 <mpu6050_basic_init+0x5f0>)
 80012d4:	f000 fa03 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80012d8:	4873      	ldr	r0, [pc, #460]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80012da:	f004 fd9f 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 80012de:	2301      	movs	r3, #1
 80012e0:	e142      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* disable accel fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_ACCEL, MPU6050_BOOL_FALSE);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2103      	movs	r1, #3
 80012e6:	4870      	ldr	r0, [pc, #448]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80012e8:	f006 f8f6 	bl	80074d8 <mpu6050_set_fifo_enable>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d007      	beq.n	8001306 <mpu6050_basic_init+0x442>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 80012f6:	486f      	ldr	r0, [pc, #444]	; (80014b4 <mpu6050_basic_init+0x5f0>)
 80012f8:	f000 f9f1 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80012fc:	486a      	ldr	r0, [pc, #424]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80012fe:	f004 fd8d 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001302:	2301      	movs	r3, #1
 8001304:	e130      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default interrupt level */
    res = mpu6050_set_interrupt_level(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 8001306:	2101      	movs	r1, #1
 8001308:	4867      	ldr	r0, [pc, #412]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 800130a:	f006 f93f 	bl	800758c <mpu6050_set_interrupt_level>
 800130e:	4603      	mov	r3, r0
 8001310:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d007      	beq.n	8001328 <mpu6050_basic_init+0x464>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt level failed.\n");
 8001318:	4867      	ldr	r0, [pc, #412]	; (80014b8 <mpu6050_basic_init+0x5f4>)
 800131a:	f000 f9e0 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800131e:	4862      	ldr	r0, [pc, #392]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001320:	f004 fd7c 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001324:	2301      	movs	r3, #1
 8001326:	e11f      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default pin type */
    res = mpu6050_set_interrupt_pin_type(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 8001328:	2100      	movs	r1, #0
 800132a:	485f      	ldr	r0, [pc, #380]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 800132c:	f006 f97c 	bl	8007628 <mpu6050_set_interrupt_pin_type>
 8001330:	4603      	mov	r3, r0
 8001332:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d007      	beq.n	800134a <mpu6050_basic_init+0x486>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt pin type failed.\n");
 800133a:	4860      	ldr	r0, [pc, #384]	; (80014bc <mpu6050_basic_init+0x5f8>)
 800133c:	f000 f9cf 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001340:	4859      	ldr	r0, [pc, #356]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001342:	f004 fd6b 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001346:	2301      	movs	r3, #1
 8001348:	e10e      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default motion interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_MOTION, MPU6050_BASIC_DEFAULT_INTERRUPT_MOTION);
 800134a:	2200      	movs	r2, #0
 800134c:	2106      	movs	r1, #6
 800134e:	4856      	ldr	r0, [pc, #344]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001350:	f006 fb40 	bl	80079d4 <mpu6050_set_interrupt>
 8001354:	4603      	mov	r3, r0
 8001356:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <mpu6050_basic_init+0x4aa>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 800135e:	4858      	ldr	r0, [pc, #352]	; (80014c0 <mpu6050_basic_init+0x5fc>)
 8001360:	f000 f9bd 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001364:	4850      	ldr	r0, [pc, #320]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001366:	f004 fd59 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 800136a:	2301      	movs	r3, #1
 800136c:	e0fc      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_FIFO_OVERFLOW, MPU6050_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 800136e:	2200      	movs	r2, #0
 8001370:	2104      	movs	r1, #4
 8001372:	484d      	ldr	r0, [pc, #308]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001374:	f006 fb2e 	bl	80079d4 <mpu6050_set_interrupt>
 8001378:	4603      	mov	r3, r0
 800137a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d007      	beq.n	8001392 <mpu6050_basic_init+0x4ce>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 8001382:	484f      	ldr	r0, [pc, #316]	; (80014c0 <mpu6050_basic_init+0x5fc>)
 8001384:	f000 f9ab 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001388:	4847      	ldr	r0, [pc, #284]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 800138a:	f004 fd47 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 800138e:	2301      	movs	r3, #1
 8001390:	e0ea      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default dmp interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_DMP, MPU6050_BASIC_DEFAULT_INTERRUPT_DMP);
 8001392:	2200      	movs	r2, #0
 8001394:	2101      	movs	r1, #1
 8001396:	4844      	ldr	r0, [pc, #272]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001398:	f006 fb1c 	bl	80079d4 <mpu6050_set_interrupt>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d007      	beq.n	80013b6 <mpu6050_basic_init+0x4f2>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 80013a6:	4846      	ldr	r0, [pc, #280]	; (80014c0 <mpu6050_basic_init+0x5fc>)
 80013a8:	f000 f999 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80013ac:	483e      	ldr	r0, [pc, #248]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80013ae:	f004 fd35 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0d8      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default i2c master interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_I2C_MAST, MPU6050_BASIC_DEFAULT_INTERRUPT_I2C_MAST);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2103      	movs	r1, #3
 80013ba:	483b      	ldr	r0, [pc, #236]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80013bc:	f006 fb0a 	bl	80079d4 <mpu6050_set_interrupt>
 80013c0:	4603      	mov	r3, r0
 80013c2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <mpu6050_basic_init+0x516>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 80013ca:	483d      	ldr	r0, [pc, #244]	; (80014c0 <mpu6050_basic_init+0x5fc>)
 80013cc:	f000 f987 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80013d0:	4835      	ldr	r0, [pc, #212]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80013d2:	f004 fd23 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e0c6      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default data ready interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_DATA_READY, MPU6050_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	4832      	ldr	r0, [pc, #200]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80013e0:	f006 faf8 	bl	80079d4 <mpu6050_set_interrupt>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d007      	beq.n	80013fe <mpu6050_basic_init+0x53a>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 80013ee:	4834      	ldr	r0, [pc, #208]	; (80014c0 <mpu6050_basic_init+0x5fc>)
 80013f0:	f000 f975 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80013f4:	482c      	ldr	r0, [pc, #176]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80013f6:	f004 fd11 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0b4      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default interrupt latch */
    res = mpu6050_set_interrupt_latch(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_LATCH);
 80013fe:	2101      	movs	r1, #1
 8001400:	4829      	ldr	r0, [pc, #164]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001402:	f006 f95f 	bl	80076c4 <mpu6050_set_interrupt_latch>
 8001406:	4603      	mov	r3, r0
 8001408:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d007      	beq.n	8001420 <mpu6050_basic_init+0x55c>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt latch failed.\n");
 8001410:	482c      	ldr	r0, [pc, #176]	; (80014c4 <mpu6050_basic_init+0x600>)
 8001412:	f000 f964 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001416:	4824      	ldr	r0, [pc, #144]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001418:	f004 fd00 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 800141c:	2301      	movs	r3, #1
 800141e:	e0a3      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default interrupt read clear */
    res = mpu6050_set_interrupt_read_clear(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 8001420:	2101      	movs	r1, #1
 8001422:	4821      	ldr	r0, [pc, #132]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001424:	f006 f99e 	bl	8007764 <mpu6050_set_interrupt_read_clear>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d007      	beq.n	8001442 <mpu6050_basic_init+0x57e>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt read clear failed.\n");
 8001432:	4825      	ldr	r0, [pc, #148]	; (80014c8 <mpu6050_basic_init+0x604>)
 8001434:	f000 f953 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001438:	481b      	ldr	r0, [pc, #108]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 800143a:	f004 fcef 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 800143e:	2301      	movs	r3, #1
 8001440:	e092      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the extern sync */
    res = mpu6050_set_extern_sync(&gs_handle, MPU6050_BASIC_DEFAULT_EXTERN_SYNC);
 8001442:	2100      	movs	r1, #0
 8001444:	4818      	ldr	r0, [pc, #96]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001446:	f005 fe5f 	bl	8007108 <mpu6050_set_extern_sync>
 800144a:	4603      	mov	r3, r0
 800144c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <mpu6050_basic_init+0x5a0>
    {
        mpu6050_interface_debug_print("mpu6050: set extern sync failed.\n");
 8001454:	481d      	ldr	r0, [pc, #116]	; (80014cc <mpu6050_basic_init+0x608>)
 8001456:	f000 f942 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800145a:	4813      	ldr	r0, [pc, #76]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 800145c:	f004 fcde 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001460:	2301      	movs	r3, #1
 8001462:	e081      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default fsync interrupt */
    res = mpu6050_set_fsync_interrupt(&gs_handle, MPU6050_BASIC_DEFAULT_FSYNC_INTERRUPT);
 8001464:	2100      	movs	r1, #0
 8001466:	4810      	ldr	r0, [pc, #64]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 8001468:	f006 fa18 	bl	800789c <mpu6050_set_fsync_interrupt>
 800146c:	4603      	mov	r3, r0
 800146e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001470:	7bfb      	ldrb	r3, [r7, #15]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <mpu6050_basic_init+0x5c2>
    {
        mpu6050_interface_debug_print("mpu6050: set fsync interrupt failed.\n");
 8001476:	4816      	ldr	r0, [pc, #88]	; (80014d0 <mpu6050_basic_init+0x60c>)
 8001478:	f000 f931 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800147c:	480a      	ldr	r0, [pc, #40]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 800147e:	f004 fccd 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001482:	2301      	movs	r3, #1
 8001484:	e070      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default fsync interrupt level */
    res = mpu6050_set_fsync_interrupt_level(&gs_handle, MPU6050_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 8001486:	2101      	movs	r1, #1
 8001488:	4807      	ldr	r0, [pc, #28]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 800148a:	f006 f9b9 	bl	8007800 <mpu6050_set_fsync_interrupt_level>
 800148e:	4603      	mov	r3, r0
 8001490:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01f      	beq.n	80014d8 <mpu6050_basic_init+0x614>
    {
        mpu6050_interface_debug_print("mpu6050: set fsync interrupt level failed.\n");
 8001498:	480e      	ldr	r0, [pc, #56]	; (80014d4 <mpu6050_basic_init+0x610>)
 800149a:	f000 f920 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800149e:	4802      	ldr	r0, [pc, #8]	; (80014a8 <mpu6050_basic_init+0x5e4>)
 80014a0:	f004 fcbc 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e05f      	b.n	8001568 <mpu6050_basic_init+0x6a4>
 80014a8:	20000028 	.word	0x20000028
 80014ac:	08007cb0 	.word	0x08007cb0
 80014b0:	08007cdc 	.word	0x08007cdc
 80014b4:	08007cf8 	.word	0x08007cf8
 80014b8:	08007d1c 	.word	0x08007d1c
 80014bc:	08007d44 	.word	0x08007d44
 80014c0:	08007d70 	.word	0x08007d70
 80014c4:	08007d90 	.word	0x08007d90
 80014c8:	08007db8 	.word	0x08007db8
 80014cc:	08007de4 	.word	0x08007de4
 80014d0:	08007e08 	.word	0x08007e08
 80014d4:	08007e30 	.word	0x08007e30
    }
    
    /* set the default iic master */
    res = mpu6050_set_iic_master(&gs_handle, MPU6050_BASIC_DEFAULT_IIC_MASTER);
 80014d8:	2100      	movs	r1, #0
 80014da:	4825      	ldr	r0, [pc, #148]	; (8001570 <mpu6050_basic_init+0x6ac>)
 80014dc:	f005 fbbe 	bl	8006c5c <mpu6050_set_iic_master>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <mpu6050_basic_init+0x636>
    {
        mpu6050_interface_debug_print("mpu6050: set iic master failed.\n");
 80014ea:	4822      	ldr	r0, [pc, #136]	; (8001574 <mpu6050_basic_init+0x6b0>)
 80014ec:	f000 f8f7 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80014f0:	481f      	ldr	r0, [pc, #124]	; (8001570 <mpu6050_basic_init+0x6ac>)
 80014f2:	f004 fc93 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e036      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default iic bypass */
    res = mpu6050_set_iic_bypass(&gs_handle, MPU6050_BASIC_DEFAULT_IIC_BYPASS);
 80014fa:	2100      	movs	r1, #0
 80014fc:	481c      	ldr	r0, [pc, #112]	; (8001570 <mpu6050_basic_init+0x6ac>)
 80014fe:	f006 fa1b 	bl	8007938 <mpu6050_set_iic_bypass>
 8001502:	4603      	mov	r3, r0
 8001504:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <mpu6050_basic_init+0x658>
    {
        mpu6050_interface_debug_print("mpu6050: set iic bypass failed.\n");
 800150c:	481a      	ldr	r0, [pc, #104]	; (8001578 <mpu6050_basic_init+0x6b4>)
 800150e:	f000 f8e6 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001512:	4817      	ldr	r0, [pc, #92]	; (8001570 <mpu6050_basic_init+0x6ac>)
 8001514:	f004 fc82 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 8001518:	2301      	movs	r3, #1
 800151a:	e025      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default accelerometer range */
    res = mpu6050_set_accelerometer_range(&gs_handle, MPU6050_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 800151c:	2100      	movs	r1, #0
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <mpu6050_basic_init+0x6ac>)
 8001520:	f005 ff8c 	bl	800743c <mpu6050_set_accelerometer_range>
 8001524:	4603      	mov	r3, r0
 8001526:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d007      	beq.n	800153e <mpu6050_basic_init+0x67a>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer range failed.\n");
 800152e:	4813      	ldr	r0, [pc, #76]	; (800157c <mpu6050_basic_init+0x6b8>)
 8001530:	f000 f8d5 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001534:	480e      	ldr	r0, [pc, #56]	; (8001570 <mpu6050_basic_init+0x6ac>)
 8001536:	f004 fc71 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 800153a:	2301      	movs	r3, #1
 800153c:	e014      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    
    /* set the default gyroscope range */
    res = mpu6050_set_gyroscope_range(&gs_handle, MPU6050_BASIC_DEFAULT_GYROSCOPE_RANGE);
 800153e:	2103      	movs	r1, #3
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <mpu6050_basic_init+0x6ac>)
 8001542:	f005 fed3 	bl	80072ec <mpu6050_set_gyroscope_range>
 8001546:	4603      	mov	r3, r0
 8001548:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d007      	beq.n	8001560 <mpu6050_basic_init+0x69c>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope range failed.\n");
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <mpu6050_basic_init+0x6bc>)
 8001552:	f000 f8c4 	bl	80016de <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8001556:	4806      	ldr	r0, [pc, #24]	; (8001570 <mpu6050_basic_init+0x6ac>)
 8001558:	f004 fc60 	bl	8005e1c <mpu6050_deinit>
       
        return 1;
 800155c:	2301      	movs	r3, #1
 800155e:	e003      	b.n	8001568 <mpu6050_basic_init+0x6a4>
    }
    mpu6050_interface_debug_print("mpu6050: Init sucess\r\n");
 8001560:	4808      	ldr	r0, [pc, #32]	; (8001584 <mpu6050_basic_init+0x6c0>)
 8001562:	f000 f8bc 	bl	80016de <mpu6050_interface_debug_print>
    return 0;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000028 	.word	0x20000028
 8001574:	08007e5c 	.word	0x08007e5c
 8001578:	08007e80 	.word	0x08007e80
 800157c:	08007ea4 	.word	0x08007ea4
 8001580:	08007ed0 	.word	0x08007ed0
 8001584:	08007ef8 	.word	0x08007ef8

08001588 <mpu6050_basic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6050_basic_read(float g[3], float dps[3])
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	; 0x38
 800158c:	af02      	add	r7, sp, #8
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
    int16_t gyro_raw[3];
    float accel[3];
    float gyro[3];
    
    /* set 1 */
    len = 1;
 8001592:	2301      	movs	r3, #1
 8001594:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    /* read data */
    if (mpu6050_read(&gs_handle,
 8001596:	f107 0020 	add.w	r0, r7, #32
 800159a:	f107 0214 	add.w	r2, r7, #20
 800159e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015a2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	9300      	str	r3, [sp, #0]
 80015ae:	4603      	mov	r3, r0
 80015b0:	4811      	ldr	r0, [pc, #68]	; (80015f8 <mpu6050_basic_read+0x70>)
 80015b2:	f004 fc77 	bl	8005ea4 <mpu6050_read>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <mpu6050_basic_read+0x38>
                    (int16_t (*)[3])&accel_raw, (float (*)[3])&accel,
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                     &len) != 0
                    )
    {
        return 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	e016      	b.n	80015ee <mpu6050_basic_read+0x66>
    }
    
    /* copy the data */
    g[0] = accel[0];
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	601a      	str	r2, [r3, #0]
    g[1] = accel[1];
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3304      	adds	r3, #4
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	601a      	str	r2, [r3, #0]
    g[2] = accel[2];
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3308      	adds	r3, #8
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	601a      	str	r2, [r3, #0]
    dps[0] = gyro[0];
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	601a      	str	r2, [r3, #0]
    dps[1] = gyro[1];
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	3304      	adds	r3, #4
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	601a      	str	r2, [r3, #0]
    dps[2] = gyro[2];
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	3308      	adds	r3, #8
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	601a      	str	r2, [r3, #0]
    
    return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3730      	adds	r7, #48	; 0x30
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000028 	.word	0x20000028

080015fc <mpu6050_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu6050_interface_iic_init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
    MX_I2C1_Init();
 8001600:	f000 f8ea 	bl	80017d8 <MX_I2C1_Init>
    return 0;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <mpu6050_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu6050_interface_iic_deinit(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(MPU6050I2C);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <mpu6050_interface_iic_deinit+0x10>)
 8001612:	f001 f83d 	bl	8002690 <HAL_I2C_DeInit>
    return 0;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000458 	.word	0x20000458

08001620 <mpu6050_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6050_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af04      	add	r7, sp, #16
 8001626:	603a      	str	r2, [r7, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
 800162e:	460b      	mov	r3, r1
 8001630:	71bb      	strb	r3, [r7, #6]
 8001632:	4613      	mov	r3, r2
 8001634:	80bb      	strh	r3, [r7, #4]
	addr = addr<<1;
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Read(MPU6050I2C, addr, reg, I2C_MEMADD_SIZE_8BIT, buf, len, MPU6050I2C_TIMOUT) == HAL_OK){
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	b299      	uxth	r1, r3
 8001640:	79bb      	ldrb	r3, [r7, #6]
 8001642:	b29a      	uxth	r2, r3
 8001644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001648:	9302      	str	r3, [sp, #8]
 800164a:	88bb      	ldrh	r3, [r7, #4]
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2301      	movs	r3, #1
 8001654:	4806      	ldr	r0, [pc, #24]	; (8001670 <mpu6050_interface_iic_read+0x50>)
 8001656:	f001 f945 	bl	80028e4 <HAL_I2C_Mem_Read>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <mpu6050_interface_iic_read+0x44>
		return 0;
 8001660:	2300      	movs	r3, #0
 8001662:	e000      	b.n	8001666 <mpu6050_interface_iic_read+0x46>
	}
    return 1;
 8001664:	2301      	movs	r3, #1
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000458 	.word	0x20000458

08001674 <mpu6050_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6050_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af04      	add	r7, sp, #16
 800167a:	603a      	str	r2, [r7, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
 8001682:	460b      	mov	r3, r1
 8001684:	71bb      	strb	r3, [r7, #6]
 8001686:	4613      	mov	r3, r2
 8001688:	80bb      	strh	r3, [r7, #4]
	addr = addr <<1;
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Mem_Write(MPU6050I2C, addr, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)buf, len, MPU6050I2C_TIMOUT) == HAL_OK){
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	b299      	uxth	r1, r3
 8001694:	79bb      	ldrb	r3, [r7, #6]
 8001696:	b29a      	uxth	r2, r3
 8001698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	88bb      	ldrh	r3, [r7, #4]
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2301      	movs	r3, #1
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <mpu6050_interface_iic_write+0x50>)
 80016aa:	f001 f821 	bl	80026f0 <HAL_I2C_Mem_Write>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <mpu6050_interface_iic_write+0x44>
		return 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e000      	b.n	80016ba <mpu6050_interface_iic_write+0x46>
	}
    return 1;
 80016b8:	2301      	movs	r3, #1
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000458 	.word	0x20000458

080016c8 <mpu6050_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void mpu6050_interface_delay_ms(uint32_t ms)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 faf7 	bl	8001cc4 <HAL_Delay>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <mpu6050_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mpu6050_interface_debug_print(const char *const fmt, ...)
{
 80016de:	b40f      	push	{r0, r1, r2, r3}
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
	va_list ap;
	va_start(ap, fmt);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	607b      	str	r3, [r7, #4]
	vprintf(fmt, ap);
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6939      	ldr	r1, [r7, #16]
 80016f0:	2000      	movs	r0, #0
 80016f2:	f004 fa1f 	bl	8005b34 <lwprintf_vprintf_ex>
	return;
 80016f6:	bf00      	nop
}
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001700:	b004      	add	sp, #16
 8001702:	4770      	bx	lr

08001704 <mpu6050_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type is the irq type
 * @note      none
 */
void mpu6050_interface_receive_callback(uint8_t type)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
    switch (type)
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	2b06      	cmp	r3, #6
 8001712:	d825      	bhi.n	8001760 <mpu6050_interface_receive_callback+0x5c>
 8001714:	a201      	add	r2, pc, #4	; (adr r2, 800171c <mpu6050_interface_receive_callback+0x18>)
 8001716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171a:	bf00      	nop
 800171c:	08001759 	.word	0x08001759
 8001720:	08001751 	.word	0x08001751
 8001724:	08001761 	.word	0x08001761
 8001728:	08001749 	.word	0x08001749
 800172c:	08001741 	.word	0x08001741
 8001730:	08001761 	.word	0x08001761
 8001734:	08001739 	.word	0x08001739
    {
        case MPU6050_INTERRUPT_MOTION :
        {
            mpu6050_interface_debug_print("mpu6050: irq motion.\n");
 8001738:	480d      	ldr	r0, [pc, #52]	; (8001770 <mpu6050_interface_receive_callback+0x6c>)
 800173a:	f7ff ffd0 	bl	80016de <mpu6050_interface_debug_print>
            
            break;
 800173e:	e013      	b.n	8001768 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu6050_interface_debug_print("mpu6050: irq fifo overflow.\n");
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <mpu6050_interface_receive_callback+0x70>)
 8001742:	f7ff ffcc 	bl	80016de <mpu6050_interface_debug_print>
            
            break;
 8001746:	e00f      	b.n	8001768 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_I2C_MAST :
        {
            mpu6050_interface_debug_print("mpu6050: irq i2c master.\n");
 8001748:	480b      	ldr	r0, [pc, #44]	; (8001778 <mpu6050_interface_receive_callback+0x74>)
 800174a:	f7ff ffc8 	bl	80016de <mpu6050_interface_debug_print>
            
            break;
 800174e:	e00b      	b.n	8001768 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_DMP :
        {
            mpu6050_interface_debug_print("mpu6050: irq dmp\n");
 8001750:	480a      	ldr	r0, [pc, #40]	; (800177c <mpu6050_interface_receive_callback+0x78>)
 8001752:	f7ff ffc4 	bl	80016de <mpu6050_interface_debug_print>
            
            break;
 8001756:	e007      	b.n	8001768 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_DATA_READY :
        {
            mpu6050_interface_debug_print("mpu6050: irq data ready\n");
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <mpu6050_interface_receive_callback+0x7c>)
 800175a:	f7ff ffc0 	bl	80016de <mpu6050_interface_debug_print>
            
            break;
 800175e:	e003      	b.n	8001768 <mpu6050_interface_receive_callback+0x64>
        }
        default :
        {
            mpu6050_interface_debug_print("mpu6050: irq unknown code.\n");
 8001760:	4808      	ldr	r0, [pc, #32]	; (8001784 <mpu6050_interface_receive_callback+0x80>)
 8001762:	f7ff ffbc 	bl	80016de <mpu6050_interface_debug_print>
            
            break;
 8001766:	bf00      	nop
        }
    }
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	08007f10 	.word	0x08007f10
 8001774:	08007f28 	.word	0x08007f28
 8001778:	08007f48 	.word	0x08007f48
 800177c:	08007f64 	.word	0x08007f64
 8001780:	08007f78 	.word	0x08007f78
 8001784:	08007f94 	.word	0x08007f94

08001788 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <MX_GPIO_Init+0x4c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <MX_GPIO_Init+0x4c>)
 8001798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <MX_GPIO_Init+0x4c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_GPIO_Init+0x4c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <MX_GPIO_Init+0x4c>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_GPIO_Init+0x4c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]

}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_I2C1_Init+0x50>)
 80017de:	4a13      	ldr	r2, [pc, #76]	; (800182c <MX_I2C1_Init+0x54>)
 80017e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <MX_I2C1_Init+0x50>)
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <MX_I2C1_Init+0x58>)
 80017e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f4:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_I2C1_Init+0x50>)
 80017f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <MX_I2C1_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_I2C1_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <MX_I2C1_Init+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_I2C1_Init+0x50>)
 8001810:	2200      	movs	r2, #0
 8001812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_I2C1_Init+0x50>)
 8001816:	f000 fdf7 	bl	8002408 <HAL_I2C_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001820:	f000 f94a 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000458 	.word	0x20000458
 800182c:	40005400 	.word	0x40005400
 8001830:	000186a0 	.word	0x000186a0

08001834 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a19      	ldr	r2, [pc, #100]	; (80018b8 <HAL_I2C_MspInit+0x84>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d12b      	bne.n	80018ae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b18      	ldr	r3, [pc, #96]	; (80018bc <HAL_I2C_MspInit+0x88>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <HAL_I2C_MspInit+0x88>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_I2C_MspInit+0x88>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001872:	23c0      	movs	r3, #192	; 0xc0
 8001874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001876:	2312      	movs	r3, #18
 8001878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001882:	2304      	movs	r3, #4
 8001884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	4619      	mov	r1, r3
 800188c:	480c      	ldr	r0, [pc, #48]	; (80018c0 <HAL_I2C_MspInit+0x8c>)
 800188e:	f000 fb23 	bl	8001ed8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_I2C_MspInit+0x88>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a08      	ldr	r2, [pc, #32]	; (80018bc <HAL_I2C_MspInit+0x88>)
 800189c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_I2C_MspInit+0x88>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018ae:	bf00      	nop
 80018b0:	3728      	adds	r7, #40	; 0x28
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40005400 	.word	0x40005400
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020400 	.word	0x40020400

080018c4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_I2C_MspDeInit+0x38>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d10d      	bne.n	80018f2 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_I2C_MspDeInit+0x3c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_I2C_MspDeInit+0x3c>)
 80018dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018e0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80018e2:	2140      	movs	r1, #64	; 0x40
 80018e4:	4807      	ldr	r0, [pc, #28]	; (8001904 <HAL_I2C_MspDeInit+0x40>)
 80018e6:	f000 fc93 	bl	8002210 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80018ea:	2180      	movs	r1, #128	; 0x80
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <HAL_I2C_MspDeInit+0x40>)
 80018ee:	f000 fc8f 	bl	8002210 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40005400 	.word	0x40005400
 8001900:	40023800 	.word	0x40023800
 8001904:	40020400 	.word	0x40020400

08001908 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001910:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001914:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001920:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001924:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001928:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00b      	beq.n	8001948 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001930:	e000      	b.n	8001934 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001932:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001934:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f9      	beq.n	8001932 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800193e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001948:	687b      	ldr	r3, [r7, #4]
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <lwprintf_my_out_func>:
 * \param[in]       ch: Character to output
 * \param[in]       p: \ref lwprintf_t handle
 * \return          ch on success, 0 on failure
 */
static int
lwprintf_my_out_func(int ch, lwprintf_t* p) {
 8001956:	b580      	push	{r7, lr}
 8001958:	b084      	sub	sp, #16
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
    uint8_t c = (uint8_t)ch;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]

    /* Don't print zero */
    if (c == '\0') {
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <lwprintf_my_out_func+0x18>
        return ch;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	e004      	b.n	8001978 <lwprintf_my_out_func+0x22>
    }
    ITM_SendChar(ch);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ffc9 	bl	8001908 <ITM_SendChar>
    return ch;
 8001976:	687b      	ldr	r3, [r7, #4]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001980:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001984:	b08a      	sub	sp, #40	; 0x28
 8001986:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001988:	f000 f92a 	bl	8001be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800198c:	f000 f836 	bl	80019fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001990:	f7ff fefa 	bl	8001788 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001994:	f7ff ff20 	bl	80017d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lwprintf_init(lwprintf_my_out_func);
 8001998:	4916      	ldr	r1, [pc, #88]	; (80019f4 <main+0x74>)
 800199a:	2000      	movs	r0, #0
 800199c:	f004 f8b4 	bl	8005b08 <lwprintf_init_ex>

  mpu6050_basic_init(0x68);
 80019a0:	2068      	movs	r0, #104	; 0x68
 80019a2:	f7ff fa8f 	bl	8000ec4 <mpu6050_basic_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mpu6050_basic_read(g, dps);
 80019a6:	463a      	mov	r2, r7
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fdea 	bl	8001588 <mpu6050_basic_read>

	  printf("%.4f - %.4f - %.4f \r\n", g[0], g[1], g[2]);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fd6a 	bl	8000490 <__aeabi_f2d>
 80019bc:	4680      	mov	r8, r0
 80019be:	4689      	mov	r9, r1
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fd64 	bl	8000490 <__aeabi_f2d>
 80019c8:	4604      	mov	r4, r0
 80019ca:	460d      	mov	r5, r1
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fd5e 	bl	8000490 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019dc:	e9cd 4500 	strd	r4, r5, [sp]
 80019e0:	4642      	mov	r2, r8
 80019e2:	464b      	mov	r3, r9
 80019e4:	4904      	ldr	r1, [pc, #16]	; (80019f8 <main+0x78>)
 80019e6:	2000      	movs	r0, #0
 80019e8:	f004 f8d2 	bl	8005b90 <lwprintf_printf_ex>
	  HAL_Delay(100);
 80019ec:	2064      	movs	r0, #100	; 0x64
 80019ee:	f000 f969 	bl	8001cc4 <HAL_Delay>
	  mpu6050_basic_read(g, dps);
 80019f2:	e7d8      	b.n	80019a6 <main+0x26>
 80019f4:	08001957 	.word	0x08001957
 80019f8:	08008150 	.word	0x08008150

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b094      	sub	sp, #80	; 0x50
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 0320 	add.w	r3, r7, #32
 8001a06:	2230      	movs	r2, #48	; 0x30
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f006 f860 	bl	8007ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <SystemClock_Config+0xb4>)
 8001a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a28:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <SystemClock_Config+0xb4>)
 8001a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <SystemClock_Config+0xb4>)
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <SystemClock_Config+0xb8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1b      	ldr	r2, [pc, #108]	; (8001ab4 <SystemClock_Config+0xb8>)
 8001a46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <SystemClock_Config+0xb8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a60:	2310      	movs	r3, #16
 8001a62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f001 fcbb 	bl	80033e8 <HAL_RCC_OscConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001a78:	f000 f81e 	bl	8001ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 ff1e 	bl	80038d8 <HAL_RCC_ClockConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001aa2:	f000 f809 	bl	8001ab8 <Error_Handler>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3750      	adds	r7, #80	; 0x50
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <Error_Handler+0x8>
	...

08001ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <HAL_MspInit+0x4c>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <HAL_MspInit+0x4c>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ada:	4b0d      	ldr	r3, [pc, #52]	; (8001b10 <HAL_MspInit+0x4c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_MspInit+0x4c>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_MspInit+0x4c>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_MspInit+0x4c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler+0x4>

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b60:	f000 f890 	bl	8001c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <SystemInit+0x20>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <SystemInit+0x20>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b90:	480d      	ldr	r0, [pc, #52]	; (8001bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b92:	490e      	ldr	r1, [pc, #56]	; (8001bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ba8:	4c0b      	ldr	r4, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bb6:	f7ff ffd7 	bl	8001b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bba:	f005 ff65 	bl	8007a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bbe:	f7ff fedf 	bl	8001980 <main>
  bx  lr    
 8001bc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bd0:	08009640 	.word	0x08009640
  ldr r2, =_sbss
 8001bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001bd8:	200004b4 	.word	0x200004b4

08001bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC_IRQHandler>
	...

08001be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0d      	ldr	r2, [pc, #52]	; (8001c20 <HAL_Init+0x40>)
 8001bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <HAL_Init+0x40>)
 8001bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	; (8001c20 <HAL_Init+0x40>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 f931 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	200f      	movs	r0, #15
 8001c10:	f000 f808 	bl	8001c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff ff56 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_InitTick+0x54>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <HAL_InitTick+0x58>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 f93b 	bl	8001ebe <HAL_SYSTICK_Config>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00e      	b.n	8001c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d80a      	bhi.n	8001c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 f911 	bl	8001e86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c64:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <HAL_InitTick+0x5c>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000008 	.word	0x20000008
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_IncTick+0x20>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4413      	add	r3, r2
 8001c94:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <HAL_IncTick+0x24>)
 8001c96:	6013      	str	r3, [r2, #0]
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	200004ac 	.word	0x200004ac

08001cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_GetTick+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	200004ac 	.word	0x200004ac

08001cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff ffee 	bl	8001cac <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_Delay+0x44>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffde 	bl	8001cac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d8f7      	bhi.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000008 	.word	0x20000008

08001d0c <__NVIC_SetPriorityGrouping>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_SetPriority>:
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ff47 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e98:	f7ff ff5c 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001e9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	68b9      	ldr	r1, [r7, #8]
 8001ea2:	6978      	ldr	r0, [r7, #20]
 8001ea4:	f7ff ff8e 	bl	8001dc4 <NVIC_EncodePriority>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff ff5d 	bl	8001d70 <__NVIC_SetPriority>
}
 8001eb6:	bf00      	nop
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b082      	sub	sp, #8
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffb0 	bl	8001e2c <SysTick_Config>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	e16b      	b.n	80021cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	f040 815a 	bne.w	80021c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d005      	beq.n	8001f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d130      	bne.n	8001f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	2203      	movs	r2, #3
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f003 0201 	and.w	r2, r3, #1
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d017      	beq.n	8001fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d123      	bne.n	800201c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	220f      	movs	r2, #15
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	08da      	lsrs	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	69b9      	ldr	r1, [r7, #24]
 8002018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	2203      	movs	r2, #3
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0203 	and.w	r2, r3, #3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80b4 	beq.w	80021c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	4b60      	ldr	r3, [pc, #384]	; (80021e4 <HAL_GPIO_Init+0x30c>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	4a5f      	ldr	r2, [pc, #380]	; (80021e4 <HAL_GPIO_Init+0x30c>)
 8002068:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206c:	6453      	str	r3, [r2, #68]	; 0x44
 800206e:	4b5d      	ldr	r3, [pc, #372]	; (80021e4 <HAL_GPIO_Init+0x30c>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800207a:	4a5b      	ldr	r2, [pc, #364]	; (80021e8 <HAL_GPIO_Init+0x310>)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	220f      	movs	r2, #15
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4013      	ands	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a52      	ldr	r2, [pc, #328]	; (80021ec <HAL_GPIO_Init+0x314>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d02b      	beq.n	80020fe <HAL_GPIO_Init+0x226>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a51      	ldr	r2, [pc, #324]	; (80021f0 <HAL_GPIO_Init+0x318>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d025      	beq.n	80020fa <HAL_GPIO_Init+0x222>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a50      	ldr	r2, [pc, #320]	; (80021f4 <HAL_GPIO_Init+0x31c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01f      	beq.n	80020f6 <HAL_GPIO_Init+0x21e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4f      	ldr	r2, [pc, #316]	; (80021f8 <HAL_GPIO_Init+0x320>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d019      	beq.n	80020f2 <HAL_GPIO_Init+0x21a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4e      	ldr	r2, [pc, #312]	; (80021fc <HAL_GPIO_Init+0x324>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_GPIO_Init+0x216>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a4d      	ldr	r2, [pc, #308]	; (8002200 <HAL_GPIO_Init+0x328>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00d      	beq.n	80020ea <HAL_GPIO_Init+0x212>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a4c      	ldr	r2, [pc, #304]	; (8002204 <HAL_GPIO_Init+0x32c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d007      	beq.n	80020e6 <HAL_GPIO_Init+0x20e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a4b      	ldr	r2, [pc, #300]	; (8002208 <HAL_GPIO_Init+0x330>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d101      	bne.n	80020e2 <HAL_GPIO_Init+0x20a>
 80020de:	2307      	movs	r3, #7
 80020e0:	e00e      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020e2:	2308      	movs	r3, #8
 80020e4:	e00c      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020e6:	2306      	movs	r3, #6
 80020e8:	e00a      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020ea:	2305      	movs	r3, #5
 80020ec:	e008      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020ee:	2304      	movs	r3, #4
 80020f0:	e006      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020f2:	2303      	movs	r3, #3
 80020f4:	e004      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e002      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_GPIO_Init+0x228>
 80020fe:	2300      	movs	r3, #0
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	f002 0203 	and.w	r2, r2, #3
 8002106:	0092      	lsls	r2, r2, #2
 8002108:	4093      	lsls	r3, r2
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002110:	4935      	ldr	r1, [pc, #212]	; (80021e8 <HAL_GPIO_Init+0x310>)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	089b      	lsrs	r3, r3, #2
 8002116:	3302      	adds	r3, #2
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211e:	4b3b      	ldr	r3, [pc, #236]	; (800220c <HAL_GPIO_Init+0x334>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002142:	4a32      	ldr	r2, [pc, #200]	; (800220c <HAL_GPIO_Init+0x334>)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002148:	4b30      	ldr	r3, [pc, #192]	; (800220c <HAL_GPIO_Init+0x334>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800216c:	4a27      	ldr	r2, [pc, #156]	; (800220c <HAL_GPIO_Init+0x334>)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002172:	4b26      	ldr	r3, [pc, #152]	; (800220c <HAL_GPIO_Init+0x334>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002196:	4a1d      	ldr	r2, [pc, #116]	; (800220c <HAL_GPIO_Init+0x334>)
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_GPIO_Init+0x334>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021c0:	4a12      	ldr	r2, [pc, #72]	; (800220c <HAL_GPIO_Init+0x334>)
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61fb      	str	r3, [r7, #28]
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b0f      	cmp	r3, #15
 80021d0:	f67f ae90 	bls.w	8001ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40013800 	.word	0x40013800
 80021ec:	40020000 	.word	0x40020000
 80021f0:	40020400 	.word	0x40020400
 80021f4:	40020800 	.word	0x40020800
 80021f8:	40020c00 	.word	0x40020c00
 80021fc:	40021000 	.word	0x40021000
 8002200:	40021400 	.word	0x40021400
 8002204:	40021800 	.word	0x40021800
 8002208:	40021c00 	.word	0x40021c00
 800220c:	40013c00 	.word	0x40013c00

08002210 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e0cd      	b.n	80023c8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800222c:	2201      	movs	r2, #1
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	429a      	cmp	r2, r3
 8002244:	f040 80bd 	bne.w	80023c2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002248:	4a65      	ldr	r2, [pc, #404]	; (80023e0 <HAL_GPIO_DeInit+0x1d0>)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002254:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	220f      	movs	r2, #15
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	4013      	ands	r3, r2
 8002268:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a5d      	ldr	r2, [pc, #372]	; (80023e4 <HAL_GPIO_DeInit+0x1d4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d02b      	beq.n	80022ca <HAL_GPIO_DeInit+0xba>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a5c      	ldr	r2, [pc, #368]	; (80023e8 <HAL_GPIO_DeInit+0x1d8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d025      	beq.n	80022c6 <HAL_GPIO_DeInit+0xb6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a5b      	ldr	r2, [pc, #364]	; (80023ec <HAL_GPIO_DeInit+0x1dc>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01f      	beq.n	80022c2 <HAL_GPIO_DeInit+0xb2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a5a      	ldr	r2, [pc, #360]	; (80023f0 <HAL_GPIO_DeInit+0x1e0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d019      	beq.n	80022be <HAL_GPIO_DeInit+0xae>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a59      	ldr	r2, [pc, #356]	; (80023f4 <HAL_GPIO_DeInit+0x1e4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d013      	beq.n	80022ba <HAL_GPIO_DeInit+0xaa>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a58      	ldr	r2, [pc, #352]	; (80023f8 <HAL_GPIO_DeInit+0x1e8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00d      	beq.n	80022b6 <HAL_GPIO_DeInit+0xa6>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a57      	ldr	r2, [pc, #348]	; (80023fc <HAL_GPIO_DeInit+0x1ec>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <HAL_GPIO_DeInit+0xa2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a56      	ldr	r2, [pc, #344]	; (8002400 <HAL_GPIO_DeInit+0x1f0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_GPIO_DeInit+0x9e>
 80022aa:	2307      	movs	r3, #7
 80022ac:	e00e      	b.n	80022cc <HAL_GPIO_DeInit+0xbc>
 80022ae:	2308      	movs	r3, #8
 80022b0:	e00c      	b.n	80022cc <HAL_GPIO_DeInit+0xbc>
 80022b2:	2306      	movs	r3, #6
 80022b4:	e00a      	b.n	80022cc <HAL_GPIO_DeInit+0xbc>
 80022b6:	2305      	movs	r3, #5
 80022b8:	e008      	b.n	80022cc <HAL_GPIO_DeInit+0xbc>
 80022ba:	2304      	movs	r3, #4
 80022bc:	e006      	b.n	80022cc <HAL_GPIO_DeInit+0xbc>
 80022be:	2303      	movs	r3, #3
 80022c0:	e004      	b.n	80022cc <HAL_GPIO_DeInit+0xbc>
 80022c2:	2302      	movs	r3, #2
 80022c4:	e002      	b.n	80022cc <HAL_GPIO_DeInit+0xbc>
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_GPIO_DeInit+0xbc>
 80022ca:	2300      	movs	r3, #0
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	f002 0203 	and.w	r2, r2, #3
 80022d2:	0092      	lsls	r2, r2, #2
 80022d4:	4093      	lsls	r3, r2
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d132      	bne.n	8002342 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80022dc:	4b49      	ldr	r3, [pc, #292]	; (8002404 <HAL_GPIO_DeInit+0x1f4>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	4947      	ldr	r1, [pc, #284]	; (8002404 <HAL_GPIO_DeInit+0x1f4>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80022ea:	4b46      	ldr	r3, [pc, #280]	; (8002404 <HAL_GPIO_DeInit+0x1f4>)
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	4944      	ldr	r1, [pc, #272]	; (8002404 <HAL_GPIO_DeInit+0x1f4>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80022f8:	4b42      	ldr	r3, [pc, #264]	; (8002404 <HAL_GPIO_DeInit+0x1f4>)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	43db      	mvns	r3, r3
 8002300:	4940      	ldr	r1, [pc, #256]	; (8002404 <HAL_GPIO_DeInit+0x1f4>)
 8002302:	4013      	ands	r3, r2
 8002304:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002306:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_GPIO_DeInit+0x1f4>)
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	43db      	mvns	r3, r3
 800230e:	493d      	ldr	r1, [pc, #244]	; (8002404 <HAL_GPIO_DeInit+0x1f4>)
 8002310:	4013      	ands	r3, r2
 8002312:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002324:	4a2e      	ldr	r2, [pc, #184]	; (80023e0 <HAL_GPIO_DeInit+0x1d0>)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	43da      	mvns	r2, r3
 8002334:	482a      	ldr	r0, [pc, #168]	; (80023e0 <HAL_GPIO_DeInit+0x1d0>)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	089b      	lsrs	r3, r3, #2
 800233a:	400a      	ands	r2, r1
 800233c:	3302      	adds	r3, #2
 800233e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2103      	movs	r1, #3
 800234c:	fa01 f303 	lsl.w	r3, r1, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	401a      	ands	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	08da      	lsrs	r2, r3, #3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3208      	adds	r2, #8
 8002360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	08d2      	lsrs	r2, r2, #3
 8002378:	4019      	ands	r1, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3208      	adds	r2, #8
 800237e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2103      	movs	r1, #3
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	401a      	ands	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	2101      	movs	r1, #1
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	43db      	mvns	r3, r3
 80023a6:	401a      	ands	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	2103      	movs	r1, #3
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43db      	mvns	r3, r3
 80023bc:	401a      	ands	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	3301      	adds	r3, #1
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	2b0f      	cmp	r3, #15
 80023cc:	f67f af2e 	bls.w	800222c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	371c      	adds	r7, #28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40013800 	.word	0x40013800
 80023e4:	40020000 	.word	0x40020000
 80023e8:	40020400 	.word	0x40020400
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40020c00 	.word	0x40020c00
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40021400 	.word	0x40021400
 80023fc:	40021800 	.word	0x40021800
 8002400:	40021c00 	.word	0x40021c00
 8002404:	40013c00 	.word	0x40013c00

08002408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e12b      	b.n	8002672 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fa00 	bl	8001834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2224      	movs	r2, #36	; 0x24
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0201 	bic.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800245a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800246a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800246c:	f001 fbec 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 8002470:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4a81      	ldr	r2, [pc, #516]	; (800267c <HAL_I2C_Init+0x274>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d807      	bhi.n	800248c <HAL_I2C_Init+0x84>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4a80      	ldr	r2, [pc, #512]	; (8002680 <HAL_I2C_Init+0x278>)
 8002480:	4293      	cmp	r3, r2
 8002482:	bf94      	ite	ls
 8002484:	2301      	movls	r3, #1
 8002486:	2300      	movhi	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	e006      	b.n	800249a <HAL_I2C_Init+0x92>
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4a7d      	ldr	r2, [pc, #500]	; (8002684 <HAL_I2C_Init+0x27c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	bf94      	ite	ls
 8002494:	2301      	movls	r3, #1
 8002496:	2300      	movhi	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e0e7      	b.n	8002672 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4a78      	ldr	r2, [pc, #480]	; (8002688 <HAL_I2C_Init+0x280>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0c9b      	lsrs	r3, r3, #18
 80024ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a6a      	ldr	r2, [pc, #424]	; (800267c <HAL_I2C_Init+0x274>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d802      	bhi.n	80024dc <HAL_I2C_Init+0xd4>
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	3301      	adds	r3, #1
 80024da:	e009      	b.n	80024f0 <HAL_I2C_Init+0xe8>
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	4a69      	ldr	r2, [pc, #420]	; (800268c <HAL_I2C_Init+0x284>)
 80024e8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	3301      	adds	r3, #1
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002502:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	495c      	ldr	r1, [pc, #368]	; (800267c <HAL_I2C_Init+0x274>)
 800250c:	428b      	cmp	r3, r1
 800250e:	d819      	bhi.n	8002544 <HAL_I2C_Init+0x13c>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1e59      	subs	r1, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	fbb1 f3f3 	udiv	r3, r1, r3
 800251e:	1c59      	adds	r1, r3, #1
 8002520:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002524:	400b      	ands	r3, r1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_I2C_Init+0x138>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1e59      	subs	r1, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fbb1 f3f3 	udiv	r3, r1, r3
 8002538:	3301      	adds	r3, #1
 800253a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800253e:	e051      	b.n	80025e4 <HAL_I2C_Init+0x1dc>
 8002540:	2304      	movs	r3, #4
 8002542:	e04f      	b.n	80025e4 <HAL_I2C_Init+0x1dc>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d111      	bne.n	8002570 <HAL_I2C_Init+0x168>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1e58      	subs	r0, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	440b      	add	r3, r1
 800255a:	fbb0 f3f3 	udiv	r3, r0, r3
 800255e:	3301      	adds	r3, #1
 8002560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	e012      	b.n	8002596 <HAL_I2C_Init+0x18e>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1e58      	subs	r0, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	0099      	lsls	r1, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	fbb0 f3f3 	udiv	r3, r0, r3
 8002586:	3301      	adds	r3, #1
 8002588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf0c      	ite	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	2300      	movne	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_I2C_Init+0x196>
 800259a:	2301      	movs	r3, #1
 800259c:	e022      	b.n	80025e4 <HAL_I2C_Init+0x1dc>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d10e      	bne.n	80025c4 <HAL_I2C_Init+0x1bc>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1e58      	subs	r0, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6859      	ldr	r1, [r3, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	440b      	add	r3, r1
 80025b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b8:	3301      	adds	r3, #1
 80025ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c2:	e00f      	b.n	80025e4 <HAL_I2C_Init+0x1dc>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1e58      	subs	r0, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6859      	ldr	r1, [r3, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	0099      	lsls	r1, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025da:	3301      	adds	r3, #1
 80025dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	6809      	ldr	r1, [r1, #0]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002612:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6911      	ldr	r1, [r2, #16]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68d2      	ldr	r2, [r2, #12]
 800261e:	4311      	orrs	r1, r2
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	430b      	orrs	r3, r1
 8002626:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	000186a0 	.word	0x000186a0
 8002680:	001e847f 	.word	0x001e847f
 8002684:	003d08ff 	.word	0x003d08ff
 8002688:	431bde83 	.word	0x431bde83
 800268c:	10624dd3 	.word	0x10624dd3

08002690 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e021      	b.n	80026e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2224      	movs	r2, #36	; 0x24
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff f902 	bl	80018c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	461a      	mov	r2, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	817b      	strh	r3, [r7, #10]
 8002702:	460b      	mov	r3, r1
 8002704:	813b      	strh	r3, [r7, #8]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800270a:	f7ff facf 	bl	8001cac <HAL_GetTick>
 800270e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b20      	cmp	r3, #32
 800271a:	f040 80d9 	bne.w	80028d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2319      	movs	r3, #25
 8002724:	2201      	movs	r2, #1
 8002726:	496d      	ldr	r1, [pc, #436]	; (80028dc <HAL_I2C_Mem_Write+0x1ec>)
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fc7f 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002734:	2302      	movs	r3, #2
 8002736:	e0cc      	b.n	80028d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_I2C_Mem_Write+0x56>
 8002742:	2302      	movs	r3, #2
 8002744:	e0c5      	b.n	80028d2 <HAL_I2C_Mem_Write+0x1e2>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d007      	beq.n	800276c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800277a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2221      	movs	r2, #33	; 0x21
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2240      	movs	r2, #64	; 0x40
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a3a      	ldr	r2, [r7, #32]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800279c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a4d      	ldr	r2, [pc, #308]	; (80028e0 <HAL_I2C_Mem_Write+0x1f0>)
 80027ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027ae:	88f8      	ldrh	r0, [r7, #6]
 80027b0:	893a      	ldrh	r2, [r7, #8]
 80027b2:	8979      	ldrh	r1, [r7, #10]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	4603      	mov	r3, r0
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fab6 	bl	8002d30 <I2C_RequestMemoryWrite>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d052      	beq.n	8002870 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e081      	b.n	80028d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f000 fd00 	bl	80031d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00d      	beq.n	80027fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d107      	bne.n	80027f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e06b      	b.n	80028d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	781a      	ldrb	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	1c5a      	adds	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	3b01      	subs	r3, #1
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b04      	cmp	r3, #4
 8002836:	d11b      	bne.n	8002870 <HAL_I2C_Mem_Write+0x180>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	d017      	beq.n	8002870 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	781a      	ldrb	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1aa      	bne.n	80027ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fcec 	bl	800325a <I2C_WaitOnBTFFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	2b04      	cmp	r3, #4
 800288e:	d107      	bne.n	80028a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e016      	b.n	80028d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2220      	movs	r2, #32
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	00100002 	.word	0x00100002
 80028e0:	ffff0000 	.word	0xffff0000

080028e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	; 0x30
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	4608      	mov	r0, r1
 80028ee:	4611      	mov	r1, r2
 80028f0:	461a      	mov	r2, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	817b      	strh	r3, [r7, #10]
 80028f6:	460b      	mov	r3, r1
 80028f8:	813b      	strh	r3, [r7, #8]
 80028fa:	4613      	mov	r3, r2
 80028fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028fe:	f7ff f9d5 	bl	8001cac <HAL_GetTick>
 8002902:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b20      	cmp	r3, #32
 800290e:	f040 8208 	bne.w	8002d22 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	2319      	movs	r3, #25
 8002918:	2201      	movs	r2, #1
 800291a:	497b      	ldr	r1, [pc, #492]	; (8002b08 <HAL_I2C_Mem_Read+0x224>)
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fb85 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002928:	2302      	movs	r3, #2
 800292a:	e1fb      	b.n	8002d24 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_I2C_Mem_Read+0x56>
 8002936:	2302      	movs	r3, #2
 8002938:	e1f4      	b.n	8002d24 <HAL_I2C_Mem_Read+0x440>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d007      	beq.n	8002960 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2222      	movs	r2, #34	; 0x22
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2240      	movs	r2, #64	; 0x40
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002990:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002996:	b29a      	uxth	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4a5b      	ldr	r2, [pc, #364]	; (8002b0c <HAL_I2C_Mem_Read+0x228>)
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029a2:	88f8      	ldrh	r0, [r7, #6]
 80029a4:	893a      	ldrh	r2, [r7, #8]
 80029a6:	8979      	ldrh	r1, [r7, #10]
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4603      	mov	r3, r0
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fa52 	bl	8002e5c <I2C_RequestMemoryRead>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e1b0      	b.n	8002d24 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d113      	bne.n	80029f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ca:	2300      	movs	r3, #0
 80029cc:	623b      	str	r3, [r7, #32]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	623b      	str	r3, [r7, #32]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	623b      	str	r3, [r7, #32]
 80029de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	e184      	b.n	8002cfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d11b      	bne.n	8002a32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	e164      	b.n	8002cfc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d11b      	bne.n	8002a72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695b      	ldr	r3, [r3, #20]
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	e144      	b.n	8002cfc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a88:	e138      	b.n	8002cfc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	2b03      	cmp	r3, #3
 8002a90:	f200 80f1 	bhi.w	8002c76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d123      	bne.n	8002ae4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 fc1b 	bl	80032dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e139      	b.n	8002d24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ae2:	e10b      	b.n	8002cfc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d14e      	bne.n	8002b8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af2:	2200      	movs	r2, #0
 8002af4:	4906      	ldr	r1, [pc, #24]	; (8002b10 <HAL_I2C_Mem_Read+0x22c>)
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fa98 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e10e      	b.n	8002d24 <HAL_I2C_Mem_Read+0x440>
 8002b06:	bf00      	nop
 8002b08:	00100002 	.word	0x00100002
 8002b0c:	ffff0000 	.word	0xffff0000
 8002b10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691a      	ldr	r2, [r3, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b88:	e0b8      	b.n	8002cfc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b90:	2200      	movs	r2, #0
 8002b92:	4966      	ldr	r1, [pc, #408]	; (8002d2c <HAL_I2C_Mem_Read+0x448>)
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 fa49 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e0bf      	b.n	8002d24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	2200      	movs	r2, #0
 8002bee:	494f      	ldr	r1, [pc, #316]	; (8002d2c <HAL_I2C_Mem_Read+0x448>)
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fa1b 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e091      	b.n	8002d24 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c74:	e042      	b.n	8002cfc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fb2e 	bl	80032dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e04c      	b.n	8002d24 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d118      	bne.n	8002cfc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f47f aec2 	bne.w	8002a8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
  }
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3728      	adds	r7, #40	; 0x28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	00010004 	.word	0x00010004

08002d30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4603      	mov	r3, r0
 8002d40:	817b      	strh	r3, [r7, #10]
 8002d42:	460b      	mov	r3, r1
 8002d44:	813b      	strh	r3, [r7, #8]
 8002d46:	4613      	mov	r3, r2
 8002d48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f960 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d80:	d103      	bne.n	8002d8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e05f      	b.n	8002e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d8e:	897b      	ldrh	r3, [r7, #10]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	6a3a      	ldr	r2, [r7, #32]
 8002da2:	492d      	ldr	r1, [pc, #180]	; (8002e58 <I2C_RequestMemoryWrite+0x128>)
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f998 	bl	80030da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e04c      	b.n	8002e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dcc:	6a39      	ldr	r1, [r7, #32]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fa02 	bl	80031d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00d      	beq.n	8002df6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d107      	bne.n	8002df2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e02b      	b.n	8002e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d105      	bne.n	8002e08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dfc:	893b      	ldrh	r3, [r7, #8]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	611a      	str	r2, [r3, #16]
 8002e06:	e021      	b.n	8002e4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e08:	893b      	ldrh	r3, [r7, #8]
 8002e0a:	0a1b      	lsrs	r3, r3, #8
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e18:	6a39      	ldr	r1, [r7, #32]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f9dc 	bl	80031d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00d      	beq.n	8002e42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d107      	bne.n	8002e3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e005      	b.n	8002e4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e42:	893b      	ldrh	r3, [r7, #8]
 8002e44:	b2da      	uxtb	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	00010002 	.word	0x00010002

08002e5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	4608      	mov	r0, r1
 8002e66:	4611      	mov	r1, r2
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	817b      	strh	r3, [r7, #10]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	813b      	strh	r3, [r7, #8]
 8002e72:	4613      	mov	r3, r2
 8002e74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f8c2 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ebc:	d103      	bne.n	8002ec6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e0aa      	b.n	8003020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eca:	897b      	ldrh	r3, [r7, #10]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ed8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	6a3a      	ldr	r2, [r7, #32]
 8002ede:	4952      	ldr	r1, [pc, #328]	; (8003028 <I2C_RequestMemoryRead+0x1cc>)
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f8fa 	bl	80030da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e097      	b.n	8003020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	617b      	str	r3, [r7, #20]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f08:	6a39      	ldr	r1, [r7, #32]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f964 	bl	80031d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00d      	beq.n	8002f32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d107      	bne.n	8002f2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e076      	b.n	8003020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f32:	88fb      	ldrh	r3, [r7, #6]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f38:	893b      	ldrh	r3, [r7, #8]
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	611a      	str	r2, [r3, #16]
 8002f42:	e021      	b.n	8002f88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f44:	893b      	ldrh	r3, [r7, #8]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	6a39      	ldr	r1, [r7, #32]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f93e 	bl	80031d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00d      	beq.n	8002f7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d107      	bne.n	8002f7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e050      	b.n	8003020 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f7e:	893b      	ldrh	r3, [r7, #8]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f8a:	6a39      	ldr	r1, [r7, #32]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f923 	bl	80031d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d107      	bne.n	8002fb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e035      	b.n	8003020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 f82b 	bl	800302c <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00d      	beq.n	8002ff8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fea:	d103      	bne.n	8002ff4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e013      	b.n	8003020 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ff8:	897b      	ldrh	r3, [r7, #10]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	6a3a      	ldr	r2, [r7, #32]
 800300c:	4906      	ldr	r1, [pc, #24]	; (8003028 <I2C_RequestMemoryRead+0x1cc>)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f863 	bl	80030da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	00010002 	.word	0x00010002

0800302c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	4613      	mov	r3, r2
 800303a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800303c:	e025      	b.n	800308a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d021      	beq.n	800308a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003046:	f7fe fe31 	bl	8001cac <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d116      	bne.n	800308a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0220 	orr.w	r2, r3, #32
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e023      	b.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10d      	bne.n	80030b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	43da      	mvns	r2, r3
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	4013      	ands	r3, r2
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	e00c      	b.n	80030ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	43da      	mvns	r2, r3
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4013      	ands	r3, r2
 80030bc:	b29b      	uxth	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d0b6      	beq.n	800303e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	60f8      	str	r0, [r7, #12]
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030e8:	e051      	b.n	800318e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f8:	d123      	bne.n	8003142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003108:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003112:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	f043 0204 	orr.w	r2, r3, #4
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e046      	b.n	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d021      	beq.n	800318e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314a:	f7fe fdaf 	bl	8001cac <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d116      	bne.n	800318e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f043 0220 	orr.w	r2, r3, #32
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e020      	b.n	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d10c      	bne.n	80031b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	43da      	mvns	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4013      	ands	r3, r2
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	bf14      	ite	ne
 80031aa:	2301      	movne	r3, #1
 80031ac:	2300      	moveq	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	e00b      	b.n	80031ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	43da      	mvns	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4013      	ands	r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf14      	ite	ne
 80031c4:	2301      	movne	r3, #1
 80031c6:	2300      	moveq	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d18d      	bne.n	80030ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e4:	e02d      	b.n	8003242 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f8ce 	bl	8003388 <I2C_IsAcknowledgeFailed>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e02d      	b.n	8003252 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d021      	beq.n	8003242 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fe:	f7fe fd55 	bl	8001cac <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	d302      	bcc.n	8003214 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d116      	bne.n	8003242 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f043 0220 	orr.w	r2, r3, #32
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e007      	b.n	8003252 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324c:	2b80      	cmp	r3, #128	; 0x80
 800324e:	d1ca      	bne.n	80031e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003266:	e02d      	b.n	80032c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f88d 	bl	8003388 <I2C_IsAcknowledgeFailed>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e02d      	b.n	80032d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327e:	d021      	beq.n	80032c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003280:	f7fe fd14 	bl	8001cac <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	429a      	cmp	r2, r3
 800328e:	d302      	bcc.n	8003296 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d116      	bne.n	80032c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e007      	b.n	80032d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d1ca      	bne.n	8003268 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032e8:	e042      	b.n	8003370 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d119      	bne.n	800332c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f06f 0210 	mvn.w	r2, #16
 8003300:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e029      	b.n	8003380 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332c:	f7fe fcbe 	bl	8001cac <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	429a      	cmp	r2, r3
 800333a:	d302      	bcc.n	8003342 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d116      	bne.n	8003370 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f043 0220 	orr.w	r2, r3, #32
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e007      	b.n	8003380 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337a:	2b40      	cmp	r3, #64	; 0x40
 800337c:	d1b5      	bne.n	80032ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d11b      	bne.n	80033d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f043 0204 	orr.w	r2, r3, #4
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e267      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d075      	beq.n	80034f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003406:	4b88      	ldr	r3, [pc, #544]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b04      	cmp	r3, #4
 8003410:	d00c      	beq.n	800342c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003412:	4b85      	ldr	r3, [pc, #532]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800341a:	2b08      	cmp	r3, #8
 800341c:	d112      	bne.n	8003444 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341e:	4b82      	ldr	r3, [pc, #520]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800342a:	d10b      	bne.n	8003444 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342c:	4b7e      	ldr	r3, [pc, #504]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d05b      	beq.n	80034f0 <HAL_RCC_OscConfig+0x108>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d157      	bne.n	80034f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e242      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800344c:	d106      	bne.n	800345c <HAL_RCC_OscConfig+0x74>
 800344e:	4b76      	ldr	r3, [pc, #472]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a75      	ldr	r2, [pc, #468]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e01d      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003464:	d10c      	bne.n	8003480 <HAL_RCC_OscConfig+0x98>
 8003466:	4b70      	ldr	r3, [pc, #448]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6f      	ldr	r2, [pc, #444]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800346c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	4b6d      	ldr	r3, [pc, #436]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6c      	ldr	r2, [pc, #432]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e00b      	b.n	8003498 <HAL_RCC_OscConfig+0xb0>
 8003480:	4b69      	ldr	r3, [pc, #420]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a68      	ldr	r2, [pc, #416]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	4b66      	ldr	r3, [pc, #408]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a65      	ldr	r2, [pc, #404]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7fe fc04 	bl	8001cac <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034a8:	f7fe fc00 	bl	8001cac <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b64      	cmp	r3, #100	; 0x64
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e207      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ba:	4b5b      	ldr	r3, [pc, #364]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0xc0>
 80034c6:	e014      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7fe fbf0 	bl	8001cac <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d0:	f7fe fbec 	bl	8001cac <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b64      	cmp	r3, #100	; 0x64
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e1f3      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e2:	4b51      	ldr	r3, [pc, #324]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0xe8>
 80034ee:	e000      	b.n	80034f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d063      	beq.n	80035c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fe:	4b4a      	ldr	r3, [pc, #296]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800350a:	4b47      	ldr	r3, [pc, #284]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003512:	2b08      	cmp	r3, #8
 8003514:	d11c      	bne.n	8003550 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b44      	ldr	r3, [pc, #272]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d116      	bne.n	8003550 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	4b41      	ldr	r3, [pc, #260]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <HAL_RCC_OscConfig+0x152>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d001      	beq.n	800353a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e1c7      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800353a:	4b3b      	ldr	r3, [pc, #236]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4937      	ldr	r1, [pc, #220]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800354a:	4313      	orrs	r3, r2
 800354c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354e:	e03a      	b.n	80035c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d020      	beq.n	800359a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003558:	4b34      	ldr	r3, [pc, #208]	; (800362c <HAL_RCC_OscConfig+0x244>)
 800355a:	2201      	movs	r2, #1
 800355c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355e:	f7fe fba5 	bl	8001cac <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003566:	f7fe fba1 	bl	8001cac <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e1a8      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003578:	4b2b      	ldr	r3, [pc, #172]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0f0      	beq.n	8003566 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003584:	4b28      	ldr	r3, [pc, #160]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4925      	ldr	r1, [pc, #148]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 8003594:	4313      	orrs	r3, r2
 8003596:	600b      	str	r3, [r1, #0]
 8003598:	e015      	b.n	80035c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <HAL_RCC_OscConfig+0x244>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fb84 	bl	8001cac <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a8:	f7fe fb80 	bl	8001cac <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e187      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ba:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d036      	beq.n	8003640 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035da:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HAL_RCC_OscConfig+0x248>)
 80035dc:	2201      	movs	r2, #1
 80035de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fe fb64 	bl	8001cac <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e8:	f7fe fb60 	bl	8001cac <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e167      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_OscConfig+0x240>)
 80035fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d0f0      	beq.n	80035e8 <HAL_RCC_OscConfig+0x200>
 8003606:	e01b      	b.n	8003640 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <HAL_RCC_OscConfig+0x248>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800360e:	f7fe fb4d 	bl	8001cac <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003614:	e00e      	b.n	8003634 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003616:	f7fe fb49 	bl	8001cac <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d907      	bls.n	8003634 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e150      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
 8003628:	40023800 	.word	0x40023800
 800362c:	42470000 	.word	0x42470000
 8003630:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003634:	4b88      	ldr	r3, [pc, #544]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1ea      	bne.n	8003616 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 8097 	beq.w	800377c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003652:	4b81      	ldr	r3, [pc, #516]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10f      	bne.n	800367e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	4b7d      	ldr	r3, [pc, #500]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	4a7c      	ldr	r2, [pc, #496]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366c:	6413      	str	r3, [r2, #64]	; 0x40
 800366e:	4b7a      	ldr	r3, [pc, #488]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367a:	2301      	movs	r3, #1
 800367c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367e:	4b77      	ldr	r3, [pc, #476]	; (800385c <HAL_RCC_OscConfig+0x474>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003686:	2b00      	cmp	r3, #0
 8003688:	d118      	bne.n	80036bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368a:	4b74      	ldr	r3, [pc, #464]	; (800385c <HAL_RCC_OscConfig+0x474>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a73      	ldr	r2, [pc, #460]	; (800385c <HAL_RCC_OscConfig+0x474>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003696:	f7fe fb09 	bl	8001cac <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7fe fb05 	bl	8001cac <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e10c      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_RCC_OscConfig+0x474>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <HAL_RCC_OscConfig+0x2ea>
 80036c4:	4b64      	ldr	r3, [pc, #400]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a63      	ldr	r2, [pc, #396]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
 80036d0:	e01c      	b.n	800370c <HAL_RCC_OscConfig+0x324>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCC_OscConfig+0x30c>
 80036da:	4b5f      	ldr	r3, [pc, #380]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a5e      	ldr	r2, [pc, #376]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036e0:	f043 0304 	orr.w	r3, r3, #4
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
 80036e6:	4b5c      	ldr	r3, [pc, #368]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ea:	4a5b      	ldr	r2, [pc, #364]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6713      	str	r3, [r2, #112]	; 0x70
 80036f2:	e00b      	b.n	800370c <HAL_RCC_OscConfig+0x324>
 80036f4:	4b58      	ldr	r3, [pc, #352]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	4a57      	ldr	r2, [pc, #348]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80036fa:	f023 0301 	bic.w	r3, r3, #1
 80036fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003700:	4b55      	ldr	r3, [pc, #340]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003704:	4a54      	ldr	r2, [pc, #336]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 0304 	bic.w	r3, r3, #4
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d015      	beq.n	8003740 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fe faca 	bl	8001cac <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	e00a      	b.n	8003732 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800371c:	f7fe fac6 	bl	8001cac <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	f241 3288 	movw	r2, #5000	; 0x1388
 800372a:	4293      	cmp	r3, r2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e0cb      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	4b49      	ldr	r3, [pc, #292]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0ee      	beq.n	800371c <HAL_RCC_OscConfig+0x334>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003740:	f7fe fab4 	bl	8001cac <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003746:	e00a      	b.n	800375e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003748:	f7fe fab0 	bl	8001cac <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	f241 3288 	movw	r2, #5000	; 0x1388
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e0b5      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375e:	4b3e      	ldr	r3, [pc, #248]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1ee      	bne.n	8003748 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d105      	bne.n	800377c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003770:	4b39      	ldr	r3, [pc, #228]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	4a38      	ldr	r2, [pc, #224]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003776:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 80a1 	beq.w	80038c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003786:	4b34      	ldr	r3, [pc, #208]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b08      	cmp	r3, #8
 8003790:	d05c      	beq.n	800384c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d141      	bne.n	800381e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b31      	ldr	r3, [pc, #196]	; (8003860 <HAL_RCC_OscConfig+0x478>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe fa84 	bl	8001cac <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a8:	f7fe fa80 	bl	8001cac <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e087      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	4b27      	ldr	r3, [pc, #156]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	431a      	orrs	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	019b      	lsls	r3, r3, #6
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037dc:	085b      	lsrs	r3, r3, #1
 80037de:	3b01      	subs	r3, #1
 80037e0:	041b      	lsls	r3, r3, #16
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	061b      	lsls	r3, r3, #24
 80037ea:	491b      	ldr	r1, [pc, #108]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_RCC_OscConfig+0x478>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f6:	f7fe fa59 	bl	8001cac <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037fe:	f7fe fa55 	bl	8001cac <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e05c      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003810:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x416>
 800381c:	e054      	b.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <HAL_RCC_OscConfig+0x478>)
 8003820:	2200      	movs	r2, #0
 8003822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003824:	f7fe fa42 	bl	8001cac <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382c:	f7fe fa3e 	bl	8001cac <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e045      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800383e:	4b06      	ldr	r3, [pc, #24]	; (8003858 <HAL_RCC_OscConfig+0x470>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x444>
 800384a:	e03d      	b.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d107      	bne.n	8003864 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e038      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
 8003858:	40023800 	.word	0x40023800
 800385c:	40007000 	.word	0x40007000
 8003860:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCC_OscConfig+0x4ec>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d028      	beq.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d121      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d11a      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003894:	4013      	ands	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800389a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800389c:	4293      	cmp	r3, r2
 800389e:	d111      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	085b      	lsrs	r3, r3, #1
 80038ac:	3b01      	subs	r3, #1
 80038ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d107      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e000      	b.n	80038ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3718      	adds	r7, #24
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40023800 	.word	0x40023800

080038d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0cc      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d90c      	bls.n	8003914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b65      	ldr	r3, [pc, #404]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b63      	ldr	r3, [pc, #396]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0b8      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800392c:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a58      	ldr	r2, [pc, #352]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003944:	4b53      	ldr	r3, [pc, #332]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a52      	ldr	r2, [pc, #328]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800394e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003950:	4b50      	ldr	r3, [pc, #320]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	494d      	ldr	r1, [pc, #308]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d044      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b47      	ldr	r3, [pc, #284]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d119      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d003      	beq.n	8003996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	2b03      	cmp	r3, #3
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b3f      	ldr	r3, [pc, #252]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e06f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b3b      	ldr	r3, [pc, #236]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e067      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4934      	ldr	r1, [pc, #208]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c8:	f7fe f970 	bl	8001cac <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fe f96c 	bl	8001cac <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e04f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b2b      	ldr	r3, [pc, #172]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d20c      	bcs.n	8003a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e032      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4916      	ldr	r1, [pc, #88]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	490e      	ldr	r1, [pc, #56]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a5e:	f000 f821 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003a62:	4602      	mov	r2, r0
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	490a      	ldr	r1, [pc, #40]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	5ccb      	ldrb	r3, [r1, r3]
 8003a72:	fa22 f303 	lsr.w	r3, r2, r3
 8003a76:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fe f8d0 	bl	8001c24 <HAL_InitTick>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023c00 	.word	0x40023c00
 8003a94:	40023800 	.word	0x40023800
 8003a98:	0800957c 	.word	0x0800957c
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	20000004 	.word	0x20000004

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b090      	sub	sp, #64	; 0x40
 8003aaa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003abc:	4b59      	ldr	r3, [pc, #356]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d00d      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	f200 80a1 	bhi.w	8003c10 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x3a>
 8003ad6:	e09b      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad8:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ada:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003adc:	e09b      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ade:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ae2:	e098      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ae4:	4b4f      	ldr	r3, [pc, #316]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aee:	4b4d      	ldr	r3, [pc, #308]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d028      	beq.n	8003b4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afa:	4b4a      	ldr	r3, [pc, #296]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	099b      	lsrs	r3, r3, #6
 8003b00:	2200      	movs	r2, #0
 8003b02:	623b      	str	r3, [r7, #32]
 8003b04:	627a      	str	r2, [r7, #36]	; 0x24
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b10:	fb03 f201 	mul.w	r2, r3, r1
 8003b14:	2300      	movs	r3, #0
 8003b16:	fb00 f303 	mul.w	r3, r0, r3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	4a43      	ldr	r2, [pc, #268]	; (8003c2c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b1e:	fba0 1202 	umull	r1, r2, r0, r2
 8003b22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b24:	460a      	mov	r2, r1
 8003b26:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b2a:	4413      	add	r3, r2
 8003b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b30:	2200      	movs	r2, #0
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	61fa      	str	r2, [r7, #28]
 8003b36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b3e:	f7fc ffe9 	bl	8000b14 <__aeabi_uldivmod>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4613      	mov	r3, r2
 8003b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b4a:	e053      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4c:	4b35      	ldr	r3, [pc, #212]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	2200      	movs	r2, #0
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	617a      	str	r2, [r7, #20]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b5e:	f04f 0b00 	mov.w	fp, #0
 8003b62:	4652      	mov	r2, sl
 8003b64:	465b      	mov	r3, fp
 8003b66:	f04f 0000 	mov.w	r0, #0
 8003b6a:	f04f 0100 	mov.w	r1, #0
 8003b6e:	0159      	lsls	r1, r3, #5
 8003b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b74:	0150      	lsls	r0, r2, #5
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b7e:	eb63 090b 	sbc.w	r9, r3, fp
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b96:	ebb2 0408 	subs.w	r4, r2, r8
 8003b9a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	00eb      	lsls	r3, r5, #3
 8003ba8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bac:	00e2      	lsls	r2, r4, #3
 8003bae:	4614      	mov	r4, r2
 8003bb0:	461d      	mov	r5, r3
 8003bb2:	eb14 030a 	adds.w	r3, r4, sl
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	eb45 030b 	adc.w	r3, r5, fp
 8003bbc:	607b      	str	r3, [r7, #4]
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bca:	4629      	mov	r1, r5
 8003bcc:	028b      	lsls	r3, r1, #10
 8003bce:	4621      	mov	r1, r4
 8003bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	028a      	lsls	r2, r1, #10
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bde:	2200      	movs	r2, #0
 8003be0:	60bb      	str	r3, [r7, #8]
 8003be2:	60fa      	str	r2, [r7, #12]
 8003be4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be8:	f7fc ff94 	bl	8000b14 <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	0c1b      	lsrs	r3, r3, #16
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	3301      	adds	r3, #1
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c0e:	e002      	b.n	8003c16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3740      	adds	r7, #64	; 0x40
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	00f42400 	.word	0x00f42400
 8003c2c:	017d7840 	.word	0x017d7840

08003c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000000 	.word	0x20000000

08003c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c4c:	f7ff fff0 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	0a9b      	lsrs	r3, r3, #10
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4903      	ldr	r1, [pc, #12]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	0800958c 	.word	0x0800958c

08003c70 <prv_out_fn_print>:
 * \param[in]       p: LwPRINTF internal instance
 * \param[in]       c: Character to print
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_fn_print(lwprintf_int_t* p, const char c) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
    if (p->is_print_cancelled) {
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	7e1b      	ldrb	r3, [r3, #24]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <prv_out_fn_print+0x18>
        return 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e01a      	b.n	8003cbe <prv_out_fn_print+0x4e>
    }
    if (!p->lwobj->out_fn(c, p->lwobj)) { /*!< Send character to output */
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	78f8      	ldrb	r0, [r7, #3]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	6812      	ldr	r2, [r2, #0]
 8003c94:	4611      	mov	r1, r2
 8003c96:	4798      	blx	r3
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <prv_out_fn_print+0x34>
        p->is_print_cancelled = 1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	761a      	strb	r2, [r3, #24]
    }
    if (c != '\0' && !p->is_print_cancelled) {
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d008      	beq.n	8003cbc <prv_out_fn_print+0x4c>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	7e1b      	ldrb	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d104      	bne.n	8003cbc <prv_out_fn_print+0x4c>
        ++p->n;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	611a      	str	r2, [r3, #16]
    }
    return 1;
 8003cbc:	2301      	movs	r3, #1
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <prv_parse_num>:
 * \brief           Parse number from input string
 * \param[in,out]   format: Input text to process
 * \return          Parsed number
 */
static int
prv_parse_num(const char** format) {
 8003cc6:	b480      	push	{r7}
 8003cc8:	b085      	sub	sp, #20
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
    const char* fmt = *format;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	60fb      	str	r3, [r7, #12]
    int n = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60bb      	str	r3, [r7, #8]

    for (; CHARISNUM(*fmt); ++fmt) {
 8003cd8:	e00d      	b.n	8003cf6 <prv_parse_num+0x30>
        n = 10 * n + CHARTONUM(*fmt);
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4413      	add	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	3b30      	subs	r3, #48	; 0x30
 8003cec:	4413      	add	r3, r2
 8003cee:	60bb      	str	r3, [r7, #8]
    for (; CHARISNUM(*fmt); ++fmt) {
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b2f      	cmp	r3, #47	; 0x2f
 8003cfc:	d903      	bls.n	8003d06 <prv_parse_num+0x40>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	2b39      	cmp	r3, #57	; 0x39
 8003d04:	d9e9      	bls.n	8003cda <prv_parse_num+0x14>
    }
    *format = fmt;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	601a      	str	r2, [r3, #0]
    return n;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <prv_out_str_before>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_before(lwprintf_int_t* p, size_t buff_size) {
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b084      	sub	sp, #16
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
    /* Check for width */
    if (p->m.width > 0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	dd12      	ble.n	8003d52 <prv_out_str_before+0x38>
        /* If number is negative, add negative sign or if positive and has plus sign forced */
        && (p->m.flags.is_negative || p->m.flags.plus)) {
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7f5b      	ldrb	r3, [r3, #29]
 8003d30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <prv_out_str_before+0x2e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	7f1b      	ldrb	r3, [r3, #28]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <prv_out_str_before+0x38>
        --p->m.width;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	1e5a      	subs	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Check for alternate mode */
    if (p->m.flags.alt && !p->m.flags.is_num_zero) {
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	7f1b      	ldrb	r3, [r3, #28]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d02c      	beq.n	8003dba <prv_out_str_before+0xa0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	7f9b      	ldrb	r3, [r3, #30]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d125      	bne.n	8003dba <prv_out_str_before+0xa0>
        if (p->m.base == 8) {
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d109      	bne.n	8003d8c <prv_out_str_before+0x72>
            if (p->m.width > 0) {
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	dd1c      	ble.n	8003dba <prv_out_str_before+0xa0>
                --p->m.width;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	1e5a      	subs	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24
 8003d8a:	e016      	b.n	8003dba <prv_out_str_before+0xa0>
            }
        } else if (p->m.base == 16 || p->m.base == 2) {
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d92:	2b10      	cmp	r3, #16
 8003d94:	d004      	beq.n	8003da0 <prv_out_str_before+0x86>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d10c      	bne.n	8003dba <prv_out_str_before+0xa0>
            if (p->m.width >= 2) {
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	dd05      	ble.n	8003db4 <prv_out_str_before+0x9a>
                p->m.width -= 2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	1e9a      	subs	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	625a      	str	r2, [r3, #36]	; 0x24
 8003db2:	e002      	b.n	8003dba <prv_out_str_before+0xa0>
            } else {
                p->m.width = 0;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
    }

    /* Add negative sign (or positive in case of + flag or space in case of space flag) before when zeros are used to fill width */
    if (p->m.flags.zero) {
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	7f1b      	ldrb	r3, [r3, #28]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d025      	beq.n	8003e14 <prv_out_str_before+0xfa>
        if (p->m.flags.is_negative) {
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	7f5b      	ldrb	r3, [r3, #29]
 8003dcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <prv_out_str_before+0xc8>
            p->out_fn(p, '-');
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	212d      	movs	r1, #45	; 0x2d
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	4798      	blx	r3
 8003de0:	e018      	b.n	8003e14 <prv_out_str_before+0xfa>
        } else if (p->m.flags.plus) {
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	7f1b      	ldrb	r3, [r3, #28]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <prv_out_str_before+0xe2>
            p->out_fn(p, '+');
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	212b      	movs	r1, #43	; 0x2b
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	4798      	blx	r3
 8003dfa:	e00b      	b.n	8003e14 <prv_out_str_before+0xfa>
        } else if (p->m.flags.space) {
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	7f1b      	ldrb	r3, [r3, #28]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d004      	beq.n	8003e14 <prv_out_str_before+0xfa>
            p->out_fn(p, ' ');
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	2120      	movs	r1, #32
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	4798      	blx	r3
        }
    }

    /* Check for flags output */
    if (p->m.flags.alt && !p->m.flags.is_num_zero) {
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7f1b      	ldrb	r3, [r3, #28]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d044      	beq.n	8003eac <prv_out_str_before+0x192>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7f9b      	ldrb	r3, [r3, #30]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d13d      	bne.n	8003eac <prv_out_str_before+0x192>
        if (p->m.base == 8) {
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e36:	2b08      	cmp	r3, #8
 8003e38:	d105      	bne.n	8003e46 <prv_out_str_before+0x12c>
            p->out_fn(p, '0');
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	2130      	movs	r1, #48	; 0x30
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	4798      	blx	r3
 8003e44:	e032      	b.n	8003eac <prv_out_str_before+0x192>
        } else if (p->m.base == 16) {
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d114      	bne.n	8003e7a <prv_out_str_before+0x160>
            p->out_fn(p, '0');
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	2130      	movs	r1, #48	; 0x30
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	4798      	blx	r3
            p->out_fn(p, p->m.flags.uc ? 'X' : 'x');
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	7f52      	ldrb	r2, [r2, #29]
 8003e62:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	2a00      	cmp	r2, #0
 8003e6a:	d001      	beq.n	8003e70 <prv_out_str_before+0x156>
 8003e6c:	2258      	movs	r2, #88	; 0x58
 8003e6e:	e000      	b.n	8003e72 <prv_out_str_before+0x158>
 8003e70:	2278      	movs	r2, #120	; 0x78
 8003e72:	4611      	mov	r1, r2
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4798      	blx	r3
 8003e78:	e018      	b.n	8003eac <prv_out_str_before+0x192>
        } else if (p->m.base == 2) {
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d113      	bne.n	8003eac <prv_out_str_before+0x192>
            p->out_fn(p, '0');
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	2130      	movs	r1, #48	; 0x30
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	4798      	blx	r3
            p->out_fn(p, p->m.flags.uc ? 'B' : 'b');
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	7f52      	ldrb	r2, [r2, #29]
 8003e96:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	2a00      	cmp	r2, #0
 8003e9e:	d001      	beq.n	8003ea4 <prv_out_str_before+0x18a>
 8003ea0:	2242      	movs	r2, #66	; 0x42
 8003ea2:	e000      	b.n	8003ea6 <prv_out_str_before+0x18c>
 8003ea4:	2262      	movs	r2, #98	; 0x62
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	4798      	blx	r3
        }
    }

    /* Right alignment, spaces or zeros */
    if (!p->m.flags.left_align && p->m.width > 0) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	7f1b      	ldrb	r3, [r3, #28]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d125      	bne.n	8003f06 <prv_out_str_before+0x1ec>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	dd21      	ble.n	8003f06 <prv_out_str_before+0x1ec>
        for (size_t i = buff_size; !p->m.flags.left_align && i < (size_t)p->m.width; ++i) {
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e011      	b.n	8003eec <prv_out_str_before+0x1d2>
            p->out_fn(p, p->m.flags.zero ? '0' : ' ');
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	7f12      	ldrb	r2, [r2, #28]
 8003ed0:	f002 0208 	and.w	r2, r2, #8
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	2a00      	cmp	r2, #0
 8003ed8:	d001      	beq.n	8003ede <prv_out_str_before+0x1c4>
 8003eda:	2230      	movs	r2, #48	; 0x30
 8003edc:	e000      	b.n	8003ee0 <prv_out_str_before+0x1c6>
 8003ede:	2220      	movs	r2, #32
 8003ee0:	4611      	mov	r1, r2
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4798      	blx	r3
        for (size_t i = buff_size; !p->m.flags.left_align && i < (size_t)p->m.width; ++i) {
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	7f1b      	ldrb	r3, [r3, #28]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <prv_out_str_before+0x1ec>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d3e0      	bcc.n	8003ec8 <prv_out_str_before+0x1ae>
        }
    }

    /* Add negative sign here when spaces are used for width */
    if (!p->m.flags.zero) {
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	7f1b      	ldrb	r3, [r3, #28]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d12b      	bne.n	8003f6c <prv_out_str_before+0x252>
        if (p->m.flags.is_negative) {
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	7f5b      	ldrb	r3, [r3, #29]
 8003f18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <prv_out_str_before+0x214>
            p->out_fn(p, '-');
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	212d      	movs	r1, #45	; 0x2d
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
 8003f2c:	e01e      	b.n	8003f6c <prv_out_str_before+0x252>
        } else if (p->m.flags.plus) {
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7f1b      	ldrb	r3, [r3, #28]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <prv_out_str_before+0x22e>
            p->out_fn(p, '+');
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	212b      	movs	r1, #43	; 0x2b
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	4798      	blx	r3
 8003f46:	e011      	b.n	8003f6c <prv_out_str_before+0x252>
        } else if (p->m.flags.space && buff_size >= (size_t)p->m.width) {
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7f1b      	ldrb	r3, [r3, #28]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <prv_out_str_before+0x252>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d304      	bcc.n	8003f6c <prv_out_str_before+0x252>
            p->out_fn(p, ' ');
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	2120      	movs	r1, #32
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	4798      	blx	r3
        }
    }

    return 1;
 8003f6c:	2301      	movs	r3, #1
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <prv_out_str_after>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_after(lwprintf_int_t* p, size_t buff_size) {
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
    /* Left alignment, but only with spaces */
    if (p->m.flags.left_align) {
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7f1b      	ldrb	r3, [r3, #28]
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <prv_out_str_after+0x3a>
        for (size_t i = buff_size; i < (size_t)p->m.width; ++i) {
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	e007      	b.n	8003fa4 <prv_out_str_after+0x2e>
            p->out_fn(p, ' ');
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	2120      	movs	r1, #32
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	4798      	blx	r3
        for (size_t i = buff_size; i < (size_t)p->m.width; ++i) {
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	461a      	mov	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d3f1      	bcc.n	8003f94 <prv_out_str_after+0x1e>
        }
    }
    return 1;
 8003fb0:	2301      	movs	r3, #1
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <prv_out_str_raw>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_raw(lwprintf_int_t* p, const char* buff, size_t buff_size) {
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b086      	sub	sp, #24
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < buff_size; ++i) {
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
 8003fca:	e00b      	b.n	8003fe4 <prv_out_str_raw+0x2a>
        p->out_fn(p, buff[i]);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	440a      	add	r2, r1
 8003fd6:	7812      	ldrb	r2, [r2, #0]
 8003fd8:	4611      	mov	r1, r2
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	4798      	blx	r3
    for (size_t i = 0; i < buff_size; ++i) {
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	617b      	str	r3, [r7, #20]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d3ef      	bcc.n	8003fcc <prv_out_str_raw+0x12>
    }
    return 1;
 8003fec:	2301      	movs	r3, #1
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <prv_out_str>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str(lwprintf_int_t* p, const char* buff, size_t buff_size) {
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	60f8      	str	r0, [r7, #12]
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
    prv_out_str_before(p, buff_size);    /* Implement pre-format */
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f7ff fe88 	bl	8003d1a <prv_out_str_before>
    prv_out_str_raw(p, buff, buff_size); /* Print actual string */
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff ffd3 	bl	8003fba <prv_out_str_raw>
    prv_out_str_after(p, buff_size);     /* Implement post-format */
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f7ff ffad 	bl	8003f76 <prv_out_str_after>

    return 1;
 800401c:	2301      	movs	r3, #1
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <prv_unsigned_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_int_to_str(lwprintf_int_t* p, unsigned int num) {
 8004026:	b580      	push	{r7, lr}
 8004028:	b086      	sub	sp, #24
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(unsigned int, num);
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	bf0c      	ite	eq
 8004036:	2301      	moveq	r3, #1
 8004038:	2300      	movne	r3, #0
 800403a:	b2d9      	uxtb	r1, r3
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	7f93      	ldrb	r3, [r2, #30]
 8004040:	f361 0300 	bfi	r3, r1, #0, #1
 8004044:	7793      	strb	r3, [r2, #30]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10d      	bne.n	8004068 <prv_unsigned_int_to_str+0x42>
 800404c:	2101      	movs	r1, #1
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff fe63 	bl	8003d1a <prv_out_str_before>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	2130      	movs	r1, #48	; 0x30
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	4798      	blx	r3
 800405e:	2101      	movs	r1, #1
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff ff88 	bl	8003f76 <prv_out_str_after>
 8004066:	e063      	b.n	8004130 <prv_unsigned_int_to_str+0x10a>
 8004068:	2300      	movs	r3, #0
 800406a:	74fb      	strb	r3, [r7, #19]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e00a      	b.n	8004088 <prv_unsigned_int_to_str+0x62>
 8004072:	7cfb      	ldrb	r3, [r7, #19]
 8004074:	3301      	adds	r3, #1
 8004076:	74fb      	strb	r3, [r7, #19]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407e:	461a      	mov	r2, r3
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	fbb3 f3f2 	udiv	r3, r3, r2
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f1      	bne.n	8004072 <prv_unsigned_int_to_str+0x4c>
 800408e:	2301      	movs	r3, #1
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e007      	b.n	80040a4 <prv_unsigned_int_to_str+0x7e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800409a:	461a      	mov	r2, r3
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	fb02 f303 	mul.w	r3, r2, r3
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d2ee      	bcs.n	8004094 <prv_unsigned_int_to_str+0x6e>
 80040b6:	7cfb      	ldrb	r3, [r7, #19]
 80040b8:	4619      	mov	r1, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff fe2d 	bl	8003d1a <prv_out_str_before>
 80040c0:	e02e      	b.n	8004120 <prv_unsigned_int_to_str+0xfa>
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80040d4:	6979      	ldr	r1, [r7, #20]
 80040d6:	fb01 f202 	mul.w	r2, r1, r2
 80040da:	1a9b      	subs	r3, r3, r2
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040e4:	461a      	mov	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2b09      	cmp	r3, #9
 80040f6:	d90a      	bls.n	800410e <prv_unsigned_int_to_str+0xe8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	7f5b      	ldrb	r3, [r3, #29]
 80040fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <prv_unsigned_int_to_str+0xe4>
 8004106:	2337      	movs	r3, #55	; 0x37
 8004108:	e002      	b.n	8004110 <prv_unsigned_int_to_str+0xea>
 800410a:	2357      	movs	r3, #87	; 0x57
 800410c:	e000      	b.n	8004110 <prv_unsigned_int_to_str+0xea>
 800410e:	2330      	movs	r3, #48	; 0x30
 8004110:	4413      	add	r3, r2
 8004112:	72fb      	strb	r3, [r7, #11]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	7afa      	ldrb	r2, [r7, #11]
 800411a:	4611      	mov	r1, r2
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1cd      	bne.n	80040c2 <prv_unsigned_int_to_str+0x9c>
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff ff23 	bl	8003f76 <prv_out_str_after>
    return 1;
 8004130:	2301      	movs	r3, #1
}
 8004132:	4618      	mov	r0, r3
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <prv_unsigned_long_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_long_int_to_str(lwprintf_int_t* p, unsigned long int num) {
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
 8004142:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(unsigned long int, num);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2d9      	uxtb	r1, r3
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	7f93      	ldrb	r3, [r2, #30]
 8004154:	f361 0300 	bfi	r3, r1, #0, #1
 8004158:	7793      	strb	r3, [r2, #30]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10d      	bne.n	800417c <prv_unsigned_long_int_to_str+0x42>
 8004160:	2101      	movs	r1, #1
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7ff fdd9 	bl	8003d1a <prv_out_str_before>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	2130      	movs	r1, #48	; 0x30
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	4798      	blx	r3
 8004172:	2101      	movs	r1, #1
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff fefe 	bl	8003f76 <prv_out_str_after>
 800417a:	e063      	b.n	8004244 <prv_unsigned_long_int_to_str+0x10a>
 800417c:	2300      	movs	r3, #0
 800417e:	74fb      	strb	r3, [r7, #19]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	e00a      	b.n	800419c <prv_unsigned_long_int_to_str+0x62>
 8004186:	7cfb      	ldrb	r3, [r7, #19]
 8004188:	3301      	adds	r3, #1
 800418a:	74fb      	strb	r3, [r7, #19]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004192:	461a      	mov	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	fbb3 f3f2 	udiv	r3, r3, r2
 800419a:	617b      	str	r3, [r7, #20]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f1      	bne.n	8004186 <prv_unsigned_long_int_to_str+0x4c>
 80041a2:	2301      	movs	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
 80041a6:	e007      	b.n	80041b8 <prv_unsigned_long_int_to_str+0x7e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ae:	461a      	mov	r2, r3
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d2ee      	bcs.n	80041a8 <prv_unsigned_long_int_to_str+0x6e>
 80041ca:	7cfb      	ldrb	r3, [r7, #19]
 80041cc:	4619      	mov	r1, r3
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff fda3 	bl	8003d1a <prv_out_str_before>
 80041d4:	e02e      	b.n	8004234 <prv_unsigned_long_int_to_str+0xfa>
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80041e8:	6979      	ldr	r1, [r7, #20]
 80041ea:	fb01 f202 	mul.w	r2, r1, r2
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041f8:	461a      	mov	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b09      	cmp	r3, #9
 800420a:	d90a      	bls.n	8004222 <prv_unsigned_long_int_to_str+0xe8>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	7f5b      	ldrb	r3, [r3, #29]
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <prv_unsigned_long_int_to_str+0xe4>
 800421a:	2337      	movs	r3, #55	; 0x37
 800421c:	e002      	b.n	8004224 <prv_unsigned_long_int_to_str+0xea>
 800421e:	2357      	movs	r3, #87	; 0x57
 8004220:	e000      	b.n	8004224 <prv_unsigned_long_int_to_str+0xea>
 8004222:	2330      	movs	r3, #48	; 0x30
 8004224:	4413      	add	r3, r2
 8004226:	72fb      	strb	r3, [r7, #11]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	7afa      	ldrb	r2, [r7, #11]
 800422e:	4611      	mov	r1, r2
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	4798      	blx	r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1cd      	bne.n	80041d6 <prv_unsigned_long_int_to_str+0x9c>
 800423a:	7cfb      	ldrb	r3, [r7, #19]
 800423c:	4619      	mov	r1, r3
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7ff fe99 	bl	8003f76 <prv_out_str_after>
    return 1;
 8004244:	2301      	movs	r3, #1
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <prv_unsigned_longlong_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_longlong_int_to_str(lwprintf_int_t* p, unsigned long long int num) {
 800424e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004252:	b090      	sub	sp, #64	; 0x40
 8004254:	af00      	add	r7, sp, #0
 8004256:	61f8      	str	r0, [r7, #28]
 8004258:	e9c7 2304 	strd	r2, r3, [r7, #16]
    OUTPUT_ANY_INT_TYPE(unsigned long long int, num);
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	2b00      	cmp	r3, #0
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2d9      	uxtb	r1, r3
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	7f93      	ldrb	r3, [r2, #30]
 8004270:	f361 0300 	bfi	r3, r1, #0, #1
 8004274:	7793      	strb	r3, [r2, #30]
 8004276:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	d10d      	bne.n	800429a <prv_unsigned_longlong_int_to_str+0x4c>
 800427e:	2101      	movs	r1, #1
 8004280:	69f8      	ldr	r0, [r7, #28]
 8004282:	f7ff fd4a 	bl	8003d1a <prv_out_str_before>
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	2130      	movs	r1, #48	; 0x30
 800428c:	69f8      	ldr	r0, [r7, #28]
 800428e:	4798      	blx	r3
 8004290:	2101      	movs	r1, #1
 8004292:	69f8      	ldr	r0, [r7, #28]
 8004294:	f7ff fe6f 	bl	8003f76 <prv_out_str_after>
 8004298:	e0a4      	b.n	80043e4 <prv_unsigned_longlong_int_to_str+0x196>
 800429a:	2300      	movs	r3, #0
 800429c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80042a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80042a8:	e015      	b.n	80042d6 <prv_unsigned_longlong_int_to_str+0x88>
 80042aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042ae:	3301      	adds	r3, #1
 80042b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2200      	movs	r2, #0
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	60fa      	str	r2, [r7, #12]
 80042c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042c6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80042ca:	f7fc fc23 	bl	8000b14 <__aeabi_uldivmod>
 80042ce:	4602      	mov	r2, r0
 80042d0:	460b      	mov	r3, r1
 80042d2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80042d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042da:	4313      	orrs	r3, r2
 80042dc:	d1e5      	bne.n	80042aa <prv_unsigned_longlong_int_to_str+0x5c>
 80042de:	f04f 0201 	mov.w	r2, #1
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80042ea:	e016      	b.n	800431a <prv_unsigned_longlong_int_to_str+0xcc>
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2200      	movs	r2, #0
 80042f6:	4698      	mov	r8, r3
 80042f8:	4691      	mov	r9, r2
 80042fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fc:	fb08 f203 	mul.w	r2, r8, r3
 8004300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004302:	fb09 f303 	mul.w	r3, r9, r3
 8004306:	4413      	add	r3, r2
 8004308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800430a:	fba2 4508 	umull	r4, r5, r2, r8
 800430e:	442b      	add	r3, r5
 8004310:	461d      	mov	r5, r3
 8004312:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8004316:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800431a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800431e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004322:	f7fc fbf7 	bl	8000b14 <__aeabi_uldivmod>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	69f9      	ldr	r1, [r7, #28]
 800432c:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8004330:	b2c9      	uxtb	r1, r1
 8004332:	2000      	movs	r0, #0
 8004334:	468a      	mov	sl, r1
 8004336:	4683      	mov	fp, r0
 8004338:	4552      	cmp	r2, sl
 800433a:	eb73 030b 	sbcs.w	r3, r3, fp
 800433e:	d2d5      	bcs.n	80042ec <prv_unsigned_longlong_int_to_str+0x9e>
 8004340:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004344:	4619      	mov	r1, r3
 8004346:	69f8      	ldr	r0, [r7, #28]
 8004348:	f7ff fce7 	bl	8003d1a <prv_out_str_before>
 800434c:	e040      	b.n	80043d0 <prv_unsigned_longlong_int_to_str+0x182>
 800434e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004352:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004356:	f7fc fbdd 	bl	8000b14 <__aeabi_uldivmod>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004362:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004366:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800436a:	f7fc fbd3 	bl	8000b14 <__aeabi_uldivmod>
 800436e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2200      	movs	r2, #0
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004384:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004388:	f7fc fbc4 	bl	8000b14 <__aeabi_uldivmod>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004394:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004398:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800439c:	2a0a      	cmp	r2, #10
 800439e:	f173 0300 	sbcs.w	r3, r3, #0
 80043a2:	d30a      	bcc.n	80043ba <prv_unsigned_longlong_int_to_str+0x16c>
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	7f5b      	ldrb	r3, [r3, #29]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <prv_unsigned_longlong_int_to_str+0x168>
 80043b2:	2337      	movs	r3, #55	; 0x37
 80043b4:	e002      	b.n	80043bc <prv_unsigned_longlong_int_to_str+0x16e>
 80043b6:	2357      	movs	r3, #87	; 0x57
 80043b8:	e000      	b.n	80043bc <prv_unsigned_longlong_int_to_str+0x16e>
 80043ba:	2330      	movs	r3, #48	; 0x30
 80043bc:	440b      	add	r3, r1
 80043be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80043ca:	4611      	mov	r1, r2
 80043cc:	69f8      	ldr	r0, [r7, #28]
 80043ce:	4798      	blx	r3
 80043d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043d4:	4313      	orrs	r3, r2
 80043d6:	d1ba      	bne.n	800434e <prv_unsigned_longlong_int_to_str+0x100>
 80043d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80043dc:	4619      	mov	r1, r3
 80043de:	69f8      	ldr	r0, [r7, #28]
 80043e0:	f7ff fdc9 	bl	8003f76 <prv_out_str_after>
    return 1;
 80043e4:	2301      	movs	r3, #1
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3740      	adds	r7, #64	; 0x40
 80043ea:	46bd      	mov	sp, r7
 80043ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080043f0 <prv_uintptr_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_uintptr_to_str(lwprintf_int_t* p, uintptr_t num) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(uintptr_t, num);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2d9      	uxtb	r1, r3
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	7f93      	ldrb	r3, [r2, #30]
 800440a:	f361 0300 	bfi	r3, r1, #0, #1
 800440e:	7793      	strb	r3, [r2, #30]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10d      	bne.n	8004432 <prv_uintptr_to_str+0x42>
 8004416:	2101      	movs	r1, #1
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff fc7e 	bl	8003d1a <prv_out_str_before>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	2130      	movs	r1, #48	; 0x30
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	4798      	blx	r3
 8004428:	2101      	movs	r1, #1
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff fda3 	bl	8003f76 <prv_out_str_after>
 8004430:	e063      	b.n	80044fa <prv_uintptr_to_str+0x10a>
 8004432:	2300      	movs	r3, #0
 8004434:	74fb      	strb	r3, [r7, #19]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e00a      	b.n	8004452 <prv_uintptr_to_str+0x62>
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	3301      	adds	r3, #1
 8004440:	74fb      	strb	r3, [r7, #19]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004448:	461a      	mov	r2, r3
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d1f1      	bne.n	800443c <prv_uintptr_to_str+0x4c>
 8004458:	2301      	movs	r3, #1
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e007      	b.n	800446e <prv_uintptr_to_str+0x7e>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004464:	461a      	mov	r2, r3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	fb02 f303 	mul.w	r3, r2, r3
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	fbb2 f3f3 	udiv	r3, r2, r3
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800447c:	4293      	cmp	r3, r2
 800447e:	d2ee      	bcs.n	800445e <prv_uintptr_to_str+0x6e>
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	4619      	mov	r1, r3
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f7ff fc48 	bl	8003d1a <prv_out_str_before>
 800448a:	e02e      	b.n	80044ea <prv_uintptr_to_str+0xfa>
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	fbb3 f2f2 	udiv	r2, r3, r2
 800449e:	6979      	ldr	r1, [r7, #20]
 80044a0:	fb01 f202 	mul.w	r2, r1, r2
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	603b      	str	r3, [r7, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ae:	461a      	mov	r2, r3
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b09      	cmp	r3, #9
 80044c0:	d90a      	bls.n	80044d8 <prv_uintptr_to_str+0xe8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	7f5b      	ldrb	r3, [r3, #29]
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <prv_uintptr_to_str+0xe4>
 80044d0:	2337      	movs	r3, #55	; 0x37
 80044d2:	e002      	b.n	80044da <prv_uintptr_to_str+0xea>
 80044d4:	2357      	movs	r3, #87	; 0x57
 80044d6:	e000      	b.n	80044da <prv_uintptr_to_str+0xea>
 80044d8:	2330      	movs	r3, #48	; 0x30
 80044da:	4413      	add	r3, r2
 80044dc:	72fb      	strb	r3, [r7, #11]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	7afa      	ldrb	r2, [r7, #11]
 80044e4:	4611      	mov	r1, r2
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	4798      	blx	r3
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1cd      	bne.n	800448c <prv_uintptr_to_str+0x9c>
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	4619      	mov	r1, r3
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fd3e 	bl	8003f76 <prv_out_str_after>
    return 1;
 80044fa:	2301      	movs	r3, #1
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <prv_sizet_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_sizet_to_str(lwprintf_int_t* p, size_t num) {
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(size_t, num);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2d9      	uxtb	r1, r3
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	7f93      	ldrb	r3, [r2, #30]
 800451e:	f361 0300 	bfi	r3, r1, #0, #1
 8004522:	7793      	strb	r3, [r2, #30]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10d      	bne.n	8004546 <prv_sizet_to_str+0x42>
 800452a:	2101      	movs	r1, #1
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7ff fbf4 	bl	8003d1a <prv_out_str_before>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	2130      	movs	r1, #48	; 0x30
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
 800453c:	2101      	movs	r1, #1
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7ff fd19 	bl	8003f76 <prv_out_str_after>
 8004544:	e063      	b.n	800460e <prv_sizet_to_str+0x10a>
 8004546:	2300      	movs	r3, #0
 8004548:	74fb      	strb	r3, [r7, #19]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	e00a      	b.n	8004566 <prv_sizet_to_str+0x62>
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	3301      	adds	r3, #1
 8004554:	74fb      	strb	r3, [r7, #19]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800455c:	461a      	mov	r2, r3
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	fbb3 f3f2 	udiv	r3, r3, r2
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1f1      	bne.n	8004550 <prv_sizet_to_str+0x4c>
 800456c:	2301      	movs	r3, #1
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e007      	b.n	8004582 <prv_sizet_to_str+0x7e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004578:	461a      	mov	r2, r3
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	fb02 f303 	mul.w	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8004590:	4293      	cmp	r3, r2
 8004592:	d2ee      	bcs.n	8004572 <prv_sizet_to_str+0x6e>
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	4619      	mov	r1, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff fbbe 	bl	8003d1a <prv_out_str_before>
 800459e:	e02e      	b.n	80045fe <prv_sizet_to_str+0xfa>
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	697a      	ldr	r2, [r7, #20]
 80045ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80045b2:	6979      	ldr	r1, [r7, #20]
 80045b4:	fb01 f202 	mul.w	r2, r1, r2
 80045b8:	1a9b      	subs	r3, r3, r2
 80045ba:	603b      	str	r3, [r7, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045c2:	461a      	mov	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b09      	cmp	r3, #9
 80045d4:	d90a      	bls.n	80045ec <prv_sizet_to_str+0xe8>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	7f5b      	ldrb	r3, [r3, #29]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <prv_sizet_to_str+0xe4>
 80045e4:	2337      	movs	r3, #55	; 0x37
 80045e6:	e002      	b.n	80045ee <prv_sizet_to_str+0xea>
 80045e8:	2357      	movs	r3, #87	; 0x57
 80045ea:	e000      	b.n	80045ee <prv_sizet_to_str+0xea>
 80045ec:	2330      	movs	r3, #48	; 0x30
 80045ee:	4413      	add	r3, r2
 80045f0:	72fb      	strb	r3, [r7, #11]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	7afa      	ldrb	r2, [r7, #11]
 80045f8:	4611      	mov	r1, r2
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	4798      	blx	r3
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1cd      	bne.n	80045a0 <prv_sizet_to_str+0x9c>
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff fcb4 	bl	8003f76 <prv_out_str_after>
    return 1;
 800460e:	2301      	movs	r3, #1
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <prv_umaxt_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_umaxt_to_str(lwprintf_int_t* p, uintmax_t num) {
 8004618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800461c:	b090      	sub	sp, #64	; 0x40
 800461e:	af00      	add	r7, sp, #0
 8004620:	61f8      	str	r0, [r7, #28]
 8004622:	e9c7 2304 	strd	r2, r3, [r7, #16]
    OUTPUT_ANY_INT_TYPE(uintmax_t, num);
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2d9      	uxtb	r1, r3
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	7f93      	ldrb	r3, [r2, #30]
 800463a:	f361 0300 	bfi	r3, r1, #0, #1
 800463e:	7793      	strb	r3, [r2, #30]
 8004640:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004644:	4313      	orrs	r3, r2
 8004646:	d10d      	bne.n	8004664 <prv_umaxt_to_str+0x4c>
 8004648:	2101      	movs	r1, #1
 800464a:	69f8      	ldr	r0, [r7, #28]
 800464c:	f7ff fb65 	bl	8003d1a <prv_out_str_before>
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	2130      	movs	r1, #48	; 0x30
 8004656:	69f8      	ldr	r0, [r7, #28]
 8004658:	4798      	blx	r3
 800465a:	2101      	movs	r1, #1
 800465c:	69f8      	ldr	r0, [r7, #28]
 800465e:	f7ff fc8a 	bl	8003f76 <prv_out_str_after>
 8004662:	e0a4      	b.n	80047ae <prv_umaxt_to_str+0x196>
 8004664:	2300      	movs	r3, #0
 8004666:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800466a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800466e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004672:	e015      	b.n	80046a0 <prv_umaxt_to_str+0x88>
 8004674:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004678:	3301      	adds	r3, #1
 800467a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2200      	movs	r2, #0
 8004688:	60bb      	str	r3, [r7, #8]
 800468a:	60fa      	str	r2, [r7, #12]
 800468c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004690:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004694:	f7fc fa3e 	bl	8000b14 <__aeabi_uldivmod>
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80046a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046a4:	4313      	orrs	r3, r2
 80046a6:	d1e5      	bne.n	8004674 <prv_umaxt_to_str+0x5c>
 80046a8:	f04f 0201 	mov.w	r2, #1
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80046b4:	e016      	b.n	80046e4 <prv_umaxt_to_str+0xcc>
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2200      	movs	r2, #0
 80046c0:	4698      	mov	r8, r3
 80046c2:	4691      	mov	r9, r2
 80046c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c6:	fb08 f203 	mul.w	r2, r8, r3
 80046ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046cc:	fb09 f303 	mul.w	r3, r9, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046d4:	fba2 4508 	umull	r4, r5, r2, r8
 80046d8:	442b      	add	r3, r5
 80046da:	461d      	mov	r5, r3
 80046dc:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 80046e0:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 80046e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80046ec:	f7fc fa12 	bl	8000b14 <__aeabi_uldivmod>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	69f9      	ldr	r1, [r7, #28]
 80046f6:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 80046fa:	b2c9      	uxtb	r1, r1
 80046fc:	2000      	movs	r0, #0
 80046fe:	468a      	mov	sl, r1
 8004700:	4683      	mov	fp, r0
 8004702:	4552      	cmp	r2, sl
 8004704:	eb73 030b 	sbcs.w	r3, r3, fp
 8004708:	d2d5      	bcs.n	80046b6 <prv_umaxt_to_str+0x9e>
 800470a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800470e:	4619      	mov	r1, r3
 8004710:	69f8      	ldr	r0, [r7, #28]
 8004712:	f7ff fb02 	bl	8003d1a <prv_out_str_before>
 8004716:	e040      	b.n	800479a <prv_umaxt_to_str+0x182>
 8004718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800471c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004720:	f7fc f9f8 	bl	8000b14 <__aeabi_uldivmod>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800472c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004730:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004734:	f7fc f9ee 	bl	8000b14 <__aeabi_uldivmod>
 8004738:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2200      	movs	r2, #0
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800474e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004752:	f7fc f9df 	bl	8000b14 <__aeabi_uldivmod>
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800475e:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8004762:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004766:	2a0a      	cmp	r2, #10
 8004768:	f173 0300 	sbcs.w	r3, r3, #0
 800476c:	d30a      	bcc.n	8004784 <prv_umaxt_to_str+0x16c>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	7f5b      	ldrb	r3, [r3, #29]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <prv_umaxt_to_str+0x168>
 800477c:	2337      	movs	r3, #55	; 0x37
 800477e:	e002      	b.n	8004786 <prv_umaxt_to_str+0x16e>
 8004780:	2357      	movs	r3, #87	; 0x57
 8004782:	e000      	b.n	8004786 <prv_umaxt_to_str+0x16e>
 8004784:	2330      	movs	r3, #48	; 0x30
 8004786:	440b      	add	r3, r1
 8004788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004794:	4611      	mov	r1, r2
 8004796:	69f8      	ldr	r0, [r7, #28]
 8004798:	4798      	blx	r3
 800479a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800479e:	4313      	orrs	r3, r2
 80047a0:	d1ba      	bne.n	8004718 <prv_umaxt_to_str+0x100>
 80047a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80047a6:	4619      	mov	r1, r3
 80047a8:	69f8      	ldr	r0, [r7, #28]
 80047aa:	f7ff fbe4 	bl	8003f76 <prv_out_str_after>
    return 1;
 80047ae:	2301      	movs	r3, #1
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3740      	adds	r7, #64	; 0x40
 80047b4:	46bd      	mov	sp, r7
 80047b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080047ba <prv_signed_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_int_to_str(lwprintf_int_t* p, signed int num) {
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	6039      	str	r1, [r7, #0]
    SIGNED_CHECK_NEGATIVE(p, num);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	da07      	bge.n	80047da <prv_signed_int_to_str+0x20>
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	7f53      	ldrb	r3, [r2, #29]
 80047ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047d2:	7753      	strb	r3, [r2, #29]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	425b      	negs	r3, r3
 80047d8:	603b      	str	r3, [r7, #0]
    return prv_unsigned_int_to_str(p, num);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	4619      	mov	r1, r3
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff fc21 	bl	8004026 <prv_unsigned_int_to_str>
 80047e4:	4603      	mov	r3, r0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <prv_signed_long_int_to_str>:
 * \param[in,out]   p: LwPRINTF instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_long_int_to_str(lwprintf_int_t* p, signed long int num) {
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
    SIGNED_CHECK_NEGATIVE(p, num);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	da07      	bge.n	800480e <prv_signed_long_int_to_str+0x20>
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	7f53      	ldrb	r3, [r2, #29]
 8004802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004806:	7753      	strb	r3, [r2, #29]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	425b      	negs	r3, r3
 800480c:	603b      	str	r3, [r7, #0]
    return prv_unsigned_long_int_to_str(p, num);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	4619      	mov	r1, r3
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff fc91 	bl	800413a <prv_unsigned_long_int_to_str>
 8004818:	4603      	mov	r3, r0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <prv_signed_longlong_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_longlong_int_to_str(lwprintf_int_t* p, signed long long int num) {
 8004822:	b5b0      	push	{r4, r5, r7, lr}
 8004824:	b084      	sub	sp, #16
 8004826:	af00      	add	r7, sp, #0
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	e9c7 2300 	strd	r2, r3, [r7]
    SIGNED_CHECK_NEGATIVE(p, num);
 800482e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004832:	2b00      	cmp	r3, #0
 8004834:	da0c      	bge.n	8004850 <prv_signed_longlong_int_to_str+0x2e>
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	7f53      	ldrb	r3, [r2, #29]
 800483a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800483e:	7753      	strb	r3, [r2, #29]
 8004840:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004844:	2100      	movs	r1, #0
 8004846:	4254      	negs	r4, r2
 8004848:	eb61 0503 	sbc.w	r5, r1, r3
 800484c:	e9c7 4500 	strd	r4, r5, [r7]
    return prv_unsigned_longlong_int_to_str(p, num);
 8004850:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f7ff fcfa 	bl	800424e <prv_unsigned_longlong_int_to_str>
 800485a:	4603      	mov	r3, r0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bdb0      	pop	{r4, r5, r7, pc}
 8004864:	0000      	movs	r0, r0
	...

08004868 <prv_calculate_dbl_num_data>:
 * \param[in]       num: Input number
 * \param[in]       e: Exponent number (to normalize)
 * \param[in]       type: Format type
 */
static void
prv_calculate_dbl_num_data(lwprintf_int_t* p, float_num_t* n, double num, uint8_t e, const char type) {
 8004868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800486c:	b090      	sub	sp, #64	; 0x40
 800486e:	af00      	add	r7, sp, #0
 8004870:	6278      	str	r0, [r7, #36]	; 0x24
 8004872:	6239      	str	r1, [r7, #32]
 8004874:	ed87 0b06 	vstr	d0, [r7, #24]
 8004878:	4611      	mov	r1, r2
 800487a:	461a      	mov	r2, r3
 800487c:	460b      	mov	r3, r1
 800487e:	75fb      	strb	r3, [r7, #23]
 8004880:	4613      	mov	r3, r2
 8004882:	75bb      	strb	r3, [r7, #22]
    memset(n, 0x00, sizeof(*n));
 8004884:	2228      	movs	r2, #40	; 0x28
 8004886:	2100      	movs	r1, #0
 8004888:	6a38      	ldr	r0, [r7, #32]
 800488a:	f003 f921 	bl	8007ad0 <memset>

    if (p->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	2b12      	cmp	r3, #18
 8004894:	dd02      	ble.n	800489c <prv_calculate_dbl_num_data+0x34>
        p->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1;
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	2212      	movs	r2, #18
 800489a:	621a      	str	r2, [r3, #32]
     * decimal_part_dbl = 3456.78   -> Decimal part multiplied by 10^precision, keeping it in double format
     * decimal_part = 3456          -> Integer part of decimal number
     * diff = 0.78                  -> Difference between actual decimal and integer part of decimal
     *                                  This is used for rounding of last digit (if necessary)
     */
    num += 0.000000000000005;
 800489c:	a3a0      	add	r3, pc, #640	; (adr r3, 8004b20 <prv_calculate_dbl_num_data+0x2b8>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80048a6:	f7fb fc95 	bl	80001d4 <__adddf3>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    n->integer_part = (float_long_t)num;
 80048b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80048b6:	f7fc f945 	bl	8000b44 <__aeabi_d2lz>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	6a39      	ldr	r1, [r7, #32]
 80048c0:	e9c1 2300 	strd	r2, r3, [r1]
    n->decimal_part_dbl = (num - (double)n->integer_part) * (double)powers_of_10[p->m.precision];
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	f7fb fe09 	bl	80004e4 <__aeabi_l2d>
 80048d2:	4602      	mov	r2, r0
 80048d4:	460b      	mov	r3, r1
 80048d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80048da:	f7fb fc79 	bl	80001d0 <__aeabi_dsub>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4614      	mov	r4, r2
 80048e4:	461d      	mov	r5, r3
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	4a8b      	ldr	r2, [pc, #556]	; (8004b18 <prv_calculate_dbl_num_data+0x2b0>)
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	4413      	add	r3, r2
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	4610      	mov	r0, r2
 80048f6:	4619      	mov	r1, r3
 80048f8:	f7fb fdf4 	bl	80004e4 <__aeabi_l2d>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4620      	mov	r0, r4
 8004902:	4629      	mov	r1, r5
 8004904:	f7fb fe1c 	bl	8000540 <__aeabi_dmul>
 8004908:	4602      	mov	r2, r0
 800490a:	460b      	mov	r3, r1
 800490c:	6a39      	ldr	r1, [r7, #32]
 800490e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    n->decimal_part = (float_long_t)n->decimal_part_dbl;
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	f7fc f912 	bl	8000b44 <__aeabi_d2lz>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	6a39      	ldr	r1, [r7, #32]
 8004926:	e9c1 2304 	strd	r2, r3, [r1, #16]
    n->diff = n->decimal_part_dbl - (float_long_t)n->decimal_part;
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004936:	4610      	mov	r0, r2
 8004938:	4619      	mov	r1, r3
 800493a:	f7fb fdd3 	bl	80004e4 <__aeabi_l2d>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4620      	mov	r0, r4
 8004944:	4629      	mov	r1, r5
 8004946:	f7fb fc43 	bl	80001d0 <__aeabi_dsub>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	6a39      	ldr	r1, [r7, #32]
 8004950:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* Rounding check of last digit */
    if (n->diff > 0.5f) {
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800495a:	f04f 0200 	mov.w	r2, #0
 800495e:	4b6f      	ldr	r3, [pc, #444]	; (8004b1c <prv_calculate_dbl_num_data+0x2b4>)
 8004960:	f7fc f87e 	bl	8000a60 <__aeabi_dcmpgt>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d02f      	beq.n	80049ca <prv_calculate_dbl_num_data+0x162>
        ++n->decimal_part;
 800496a:	6a3b      	ldr	r3, [r7, #32]
 800496c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004970:	1c51      	adds	r1, r2, #1
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	f143 0300 	adc.w	r3, r3, #0
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004980:	e9c3 1204 	strd	r1, r2, [r3, #16]
        if (n->decimal_part >= powers_of_10[p->m.precision]) {
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	4a62      	ldr	r2, [pc, #392]	; (8004b18 <prv_calculate_dbl_num_data+0x2b0>)
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	4413      	add	r3, r2
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	4290      	cmp	r0, r2
 800499a:	eb71 0303 	sbcs.w	r3, r1, r3
 800499e:	db39      	blt.n	8004a14 <prv_calculate_dbl_num_data+0x1ac>
            n->decimal_part = 0;
 80049a0:	6a39      	ldr	r1, [r7, #32]
 80049a2:	f04f 0200 	mov.w	r2, #0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	e9c1 2304 	strd	r2, r3, [r1, #16]
            ++n->integer_part;
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b4:	1c51      	adds	r1, r2, #1
 80049b6:	6039      	str	r1, [r7, #0]
 80049b8:	f143 0300 	adc.w	r3, r3, #0
 80049bc:	607b      	str	r3, [r7, #4]
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80049c4:	e9c3 1200 	strd	r1, r2, [r3]
 80049c8:	e024      	b.n	8004a14 <prv_calculate_dbl_num_data+0x1ac>
        }
    } else if (n->diff < 0.5f) {
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	4b51      	ldr	r3, [pc, #324]	; (8004b1c <prv_calculate_dbl_num_data+0x2b4>)
 80049d6:	f7fc f825 	bl	8000a24 <__aeabi_dcmplt>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d119      	bne.n	8004a14 <prv_calculate_dbl_num_data+0x1ac>
        /* Used in separate if, since comparing float to == will certainly result to false */
    } else {
        /* Difference is exactly 0.5 */
        if (n->decimal_part == 0) {
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	d10a      	bne.n	8004a00 <prv_calculate_dbl_num_data+0x198>
            ++n->integer_part;
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f112 0a01 	adds.w	sl, r2, #1
 80049f4:	f143 0b00 	adc.w	fp, r3, #0
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	e9c3 ab00 	strd	sl, fp, [r3]
 80049fe:	e009      	b.n	8004a14 <prv_calculate_dbl_num_data+0x1ac>
        } else {
            ++n->decimal_part;
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a06:	f112 0801 	adds.w	r8, r2, #1
 8004a0a:	f143 0900 	adc.w	r9, r3, #0
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	e9c3 8904 	strd	r8, r9, [r3, #16]
        }
    }

    /* Calculate number of digits for integer and decimal parts */
    if (n->integer_part == 0) {
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	d103      	bne.n	8004a26 <prv_calculate_dbl_num_data+0x1be>
        n->digits_cnt_integer_part = 1;
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	2201      	movs	r2, #1
 8004a22:	841a      	strh	r2, [r3, #32]
 8004a24:	e023      	b.n	8004a6e <prv_calculate_dbl_num_data+0x206>
    } else {
        float_long_t tmp;
        for (n->digits_cnt_integer_part = 0, tmp = n->integer_part; tmp > 0; ++n->digits_cnt_integer_part, tmp /= 10) {}
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	841a      	strh	r2, [r3, #32]
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004a36:	e014      	b.n	8004a62 <prv_calculate_dbl_num_data+0x1fa>
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3301      	adds	r3, #1
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	b21a      	sxth	r2, r3
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	841a      	strh	r2, [r3, #32]
 8004a4a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004a4e:	f04f 020a 	mov.w	r2, #10
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	f7fc f80d 	bl	8000a74 <__aeabi_ldivmod>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004a62:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a66:	2a01      	cmp	r2, #1
 8004a68:	f173 0300 	sbcs.w	r3, r3, #0
 8004a6c:	dae4      	bge.n	8004a38 <prv_calculate_dbl_num_data+0x1d0>
    }
    n->digits_cnt_decimal_part = p->m.precision;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	b21a      	sxth	r2, r3
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	845a      	strh	r2, [r3, #34]	; 0x22

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Calculate minimum useful digits for decimal (excl last useless zeros) */
    if (type == 'g') {
 8004a78:	7dbb      	ldrb	r3, [r7, #22]
 8004a7a:	2b67      	cmp	r3, #103	; 0x67
 8004a7c:	d141      	bne.n	8004b02 <prv_calculate_dbl_num_data+0x29a>
        float_long_t tmp = n->decimal_part;
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004a84:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        size_t adder, i;
        for (adder = 0, i = 0; tmp > 0 || i < (size_t)p->m.precision;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a90:	e02a      	b.n	8004ae8 <prv_calculate_dbl_num_data+0x280>
             tmp /= 10, n->digits_cnt_decimal_part_useful += adder, ++i) {
            if (adder == 0 && (tmp % 10) > 0) {
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10d      	bne.n	8004ab4 <prv_calculate_dbl_num_data+0x24c>
 8004a98:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004a9c:	f04f 020a 	mov.w	r2, #10
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	f7fb ffe6 	bl	8000a74 <__aeabi_ldivmod>
 8004aa8:	2a01      	cmp	r2, #1
 8004aaa:	f173 0300 	sbcs.w	r3, r3, #0
 8004aae:	db01      	blt.n	8004ab4 <prv_calculate_dbl_num_data+0x24c>
                adder = 1;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
             tmp /= 10, n->digits_cnt_decimal_part_useful += adder, ++i) {
 8004ab4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004ab8:	f04f 020a 	mov.w	r2, #10
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	f7fb ffd8 	bl	8000a74 <__aeabi_ldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	b21a      	sxth	r2, r3
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	849a      	strh	r2, [r3, #36]	; 0x24
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
        for (adder = 0, i = 0; tmp > 0 || i < (size_t)p->m.precision;
 8004ae8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aec:	2a01      	cmp	r2, #1
 8004aee:	f173 0300 	sbcs.w	r3, r3, #0
 8004af2:	dace      	bge.n	8004a92 <prv_calculate_dbl_num_data+0x22a>
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d3c8      	bcc.n	8004a92 <prv_calculate_dbl_num_data+0x22a>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    {
        n->digits_cnt_decimal_part_useful = p->m.precision;
    }
    (void)e;
}
 8004b00:	e004      	b.n	8004b0c <prv_calculate_dbl_num_data+0x2a4>
        n->digits_cnt_decimal_part_useful = p->m.precision;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	6a1b      	ldr	r3, [r3, #32]
 8004b06:	b21a      	sxth	r2, r3
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8004b0c:	bf00      	nop
 8004b0e:	3740      	adds	r7, #64	; 0x40
 8004b10:	46bd      	mov	sp, r7
 8004b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b16:	bf00      	nop
 8004b18:	08009598 	.word	0x08009598
 8004b1c:	3fe00000 	.word	0x3fe00000
 8004b20:	86a12b9b 	.word	0x86a12b9b
 8004b24:	3cf6849b 	.word	0x3cf6849b

08004b28 <prv_double_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_double_to_str(lwprintf_int_t* p, double in_num) {
 8004b28:	b5b0      	push	{r4, r5, r7, lr}
 8004b2a:	b0a0      	sub	sp, #128	; 0x80
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	ed87 0b00 	vstr	d0, [r7]
    float_num_t dblnum;
    size_t i;
    double orig_num = in_num;
 8004b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b38:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    int digits_cnt, exp_cnt = 0, chosen_precision;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	677b      	str	r3, [r7, #116]	; 0x74
    char def_type = p->m.type;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
     * - Print negative infinity if number is less than -FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Print positive infinity if number is greater than absolute minimum
     * - Print positive infinity if number is greater than FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Go to engineering mode if it is enabled and `in_num < -FLOAT_MAX_B_ENG` or `in_num > FLOAT_MAX_B_ENG`
     */
    if (in_num != in_num) {
 8004b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b52:	f7fb ff5d 	bl	8000a10 <__aeabi_dcmpeq>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d110      	bne.n	8004b7e <prv_double_to_str+0x56>
        return prv_out_str(p, p->m.flags.uc ? "NAN" : "nan", 3);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	7f5b      	ldrb	r3, [r3, #29]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <prv_double_to_str+0x46>
 8004b6a:	4ba7      	ldr	r3, [pc, #668]	; (8004e08 <prv_double_to_str+0x2e0>)
 8004b6c:	e000      	b.n	8004b70 <prv_double_to_str+0x48>
 8004b6e:	4ba7      	ldr	r3, [pc, #668]	; (8004e0c <prv_double_to_str+0x2e4>)
 8004b70:	2203      	movs	r2, #3
 8004b72:	4619      	mov	r1, r3
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7ff fa3e 	bl	8003ff6 <prv_out_str>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	e336      	b.n	80051ec <prv_double_to_str+0x6c4>
    } else if (in_num < -DBL_MAX
 8004b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b82:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004b86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b8a:	f7fb ff4b 	bl	8000a24 <__aeabi_dcmplt>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d010      	beq.n	8004bb6 <prv_double_to_str+0x8e>
#if !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
               || in_num < -FLOAT_MAX_B_ENG
#endif /* !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    ) {
        return prv_out_str(p, p->m.flags.uc ? "-INF" : "-inf", 4);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	7f5b      	ldrb	r3, [r3, #29]
 8004b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <prv_double_to_str+0x7e>
 8004ba2:	4b9b      	ldr	r3, [pc, #620]	; (8004e10 <prv_double_to_str+0x2e8>)
 8004ba4:	e000      	b.n	8004ba8 <prv_double_to_str+0x80>
 8004ba6:	4b9b      	ldr	r3, [pc, #620]	; (8004e14 <prv_double_to_str+0x2ec>)
 8004ba8:	2204      	movs	r2, #4
 8004baa:	4619      	mov	r1, r3
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7ff fa22 	bl	8003ff6 <prv_out_str>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	e31a      	b.n	80051ec <prv_double_to_str+0x6c4>
    } else if (in_num > DBL_MAX
 8004bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bba:	4b97      	ldr	r3, [pc, #604]	; (8004e18 <prv_double_to_str+0x2f0>)
 8004bbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bc0:	f7fb ff4e 	bl	8000a60 <__aeabi_dcmpgt>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d02e      	beq.n	8004c28 <prv_double_to_str+0x100>
#if !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
               || in_num > FLOAT_MAX_B_ENG
#endif /* !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    ) {
        char str[5], *s_ptr = str;
 8004bca:	f107 0310 	add.w	r3, r7, #16
 8004bce:	66bb      	str	r3, [r7, #104]	; 0x68
        if (p->m.flags.plus) {
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	7f1b      	ldrb	r3, [r3, #28]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d004      	beq.n	8004be8 <prv_double_to_str+0xc0>
            *s_ptr++ = '+';
 8004bde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	66ba      	str	r2, [r7, #104]	; 0x68
 8004be4:	222b      	movs	r2, #43	; 0x2b
 8004be6:	701a      	strb	r2, [r3, #0]
        }
        strcpy(s_ptr, p->m.flags.uc ? "INF" : "inf");
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	7f5b      	ldrb	r3, [r3, #29]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <prv_double_to_str+0xd2>
 8004bf6:	4b89      	ldr	r3, [pc, #548]	; (8004e1c <prv_double_to_str+0x2f4>)
 8004bf8:	e000      	b.n	8004bfc <prv_double_to_str+0xd4>
 8004bfa:	4b89      	ldr	r3, [pc, #548]	; (8004e20 <prv_double_to_str+0x2f8>)
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004c00:	f002 ff6e 	bl	8007ae0 <strcpy>
        return prv_out_str(p, str, p->m.flags.plus ? 4 : 3);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	7f1b      	ldrb	r3, [r3, #28]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <prv_double_to_str+0xee>
 8004c12:	2204      	movs	r2, #4
 8004c14:	e000      	b.n	8004c18 <prv_double_to_str+0xf0>
 8004c16:	2203      	movs	r2, #3
 8004c18:	f107 0310 	add.w	r3, r7, #16
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff f9e9 	bl	8003ff6 <prv_out_str>
 8004c24:	4603      	mov	r3, r0
 8004c26:	e2e1      	b.n	80051ec <prv_double_to_str+0x6c4>
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    } else if ((in_num < -FLOAT_MAX_B_ENG || in_num > FLOAT_MAX_B_ENG) && def_type != 'g') {
 8004c28:	a371      	add	r3, pc, #452	; (adr r3, 8004df0 <prv_double_to_str+0x2c8>)
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c32:	f7fb fef7 	bl	8000a24 <__aeabi_dcmplt>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d109      	bne.n	8004c50 <prv_double_to_str+0x128>
 8004c3c:	a36e      	add	r3, pc, #440	; (adr r3, 8004df8 <prv_double_to_str+0x2d0>)
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c46:	f7fb ff0b 	bl	8000a60 <__aeabi_dcmpgt>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00b      	beq.n	8004c68 <prv_double_to_str+0x140>
 8004c50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c54:	2b67      	cmp	r3, #103	; 0x67
 8004c56:	d007      	beq.n	8004c68 <prv_double_to_str+0x140>
        p->m.type = def_type = 'e'; /* Go to engineering mode */
 8004c58:	2365      	movs	r3, #101	; 0x65
 8004c5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004c64:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#endif                              /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    }

    /* Check sign of the number */
    SIGNED_CHECK_NEGATIVE(p, in_num);
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c74:	f7fb fed6 	bl	8000a24 <__aeabi_dcmplt>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <prv_double_to_str+0x16c>
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	7f53      	ldrb	r3, [r2, #29]
 8004c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c86:	7753      	strb	r3, [r2, #29]
 8004c88:	683c      	ldr	r4, [r7, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004c90:	e9c7 4500 	strd	r4, r5, [r7]
    orig_num = in_num;
 8004c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c98:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Engineering mode check for number of exponents */
    if (def_type == 'e' || def_type == 'g'
 8004c9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ca0:	2b65      	cmp	r3, #101	; 0x65
 8004ca2:	d013      	beq.n	8004ccc <prv_double_to_str+0x1a4>
 8004ca4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ca8:	2b67      	cmp	r3, #103	; 0x67
 8004caa:	d00f      	beq.n	8004ccc <prv_double_to_str+0x1a4>
        || in_num > (powers_of_10[LWPRINTF_ARRAYSIZE(powers_of_10) - 1])) { /* More vs what float can hold */
 8004cac:	a354      	add	r3, pc, #336	; (adr r3, 8004e00 <prv_double_to_str+0x2d8>)
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f7fb fc15 	bl	80004e4 <__aeabi_l2d>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cc2:	f7fb fecd 	bl	8000a60 <__aeabi_dcmpgt>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d054      	beq.n	8004d76 <prv_double_to_str+0x24e>
        if (p->m.type != 'g') {
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004cd2:	2b67      	cmp	r3, #103	; 0x67
 8004cd4:	d003      	beq.n	8004cde <prv_double_to_str+0x1b6>
            p->m.type = 'e';
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2265      	movs	r2, #101	; 0x65
 8004cda:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        }

        /* Normalize number to be between 0 and 1 and count decimals for exponent */
        if (in_num < 1) {
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	4b50      	ldr	r3, [pc, #320]	; (8004e24 <prv_double_to_str+0x2fc>)
 8004ce4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ce8:	f7fb fe9c 	bl	8000a24 <__aeabi_dcmplt>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d026      	beq.n	8004d40 <prv_double_to_str+0x218>
            for (exp_cnt = 0; in_num < 1 && in_num > 0; in_num *= 10, --exp_cnt) {}
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	677b      	str	r3, [r7, #116]	; 0x74
 8004cf6:	e00d      	b.n	8004d14 <prv_double_to_str+0x1ec>
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	4b4a      	ldr	r3, [pc, #296]	; (8004e28 <prv_double_to_str+0x300>)
 8004cfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d02:	f7fb fc1d 	bl	8000540 <__aeabi_dmul>
 8004d06:	4602      	mov	r2, r0
 8004d08:	460b      	mov	r3, r1
 8004d0a:	e9c7 2300 	strd	r2, r3, [r7]
 8004d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d10:	3b01      	subs	r3, #1
 8004d12:	677b      	str	r3, [r7, #116]	; 0x74
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	4b42      	ldr	r3, [pc, #264]	; (8004e24 <prv_double_to_str+0x2fc>)
 8004d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d1e:	f7fb fe81 	bl	8000a24 <__aeabi_dcmplt>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d026      	beq.n	8004d76 <prv_double_to_str+0x24e>
 8004d28:	f04f 0200 	mov.w	r2, #0
 8004d2c:	f04f 0300 	mov.w	r3, #0
 8004d30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d34:	f7fb fe94 	bl	8000a60 <__aeabi_dcmpgt>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1dc      	bne.n	8004cf8 <prv_double_to_str+0x1d0>
 8004d3e:	e01a      	b.n	8004d76 <prv_double_to_str+0x24e>
        } else {
            for (exp_cnt = 0; in_num >= 10; in_num /= 10, ++exp_cnt) {}
 8004d40:	2300      	movs	r3, #0
 8004d42:	677b      	str	r3, [r7, #116]	; 0x74
 8004d44:	e00d      	b.n	8004d62 <prv_double_to_str+0x23a>
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	4b37      	ldr	r3, [pc, #220]	; (8004e28 <prv_double_to_str+0x300>)
 8004d4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d50:	f7fb fd20 	bl	8000794 <__aeabi_ddiv>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	e9c7 2300 	strd	r2, r3, [r7]
 8004d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d5e:	3301      	adds	r3, #1
 8004d60:	677b      	str	r3, [r7, #116]	; 0x74
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	4b30      	ldr	r3, [pc, #192]	; (8004e28 <prv_double_to_str+0x300>)
 8004d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d6c:	f7fb fe6e 	bl	8000a4c <__aeabi_dcmpge>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e7      	bne.n	8004d46 <prv_double_to_str+0x21e>
        }
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Check precision data */
    chosen_precision = p->m.precision; /* This is default value coming from app */
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	673b      	str	r3, [r7, #112]	; 0x70
    if (p->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	2b12      	cmp	r3, #18
 8004d82:	dd03      	ble.n	8004d8c <prv_double_to_str+0x264>
        p->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1; /* Limit to maximum precision */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2212      	movs	r2, #18
 8004d88:	621a      	str	r2, [r3, #32]
 8004d8a:	e01f      	b.n	8004dcc <prv_double_to_str+0x2a4>
        /*
         * Precision is lower than the one selected by app (or user).
         * It means that we have to append ending zeros for precision when printing data
         */
    } else if (!p->m.flags.precision) {
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	7f1b      	ldrb	r3, [r3, #28]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <prv_double_to_str+0x280>
        p->m.precision = LWPRINTF_CFG_FLOAT_DEFAULT_PRECISION; /* Default precision when not used */
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2206      	movs	r2, #6
 8004d9e:	621a      	str	r2, [r3, #32]
        chosen_precision = p->m.precision;                     /* There was no precision, update chosen precision */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	673b      	str	r3, [r7, #112]	; 0x70
 8004da6:	e011      	b.n	8004dcc <prv_double_to_str+0x2a4>
    } else if (p->m.flags.precision && p->m.precision == 0) {
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	7f1b      	ldrb	r3, [r3, #28]
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <prv_double_to_str+0x2a4>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <prv_double_to_str+0x2a4>
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
        /* Precision must be set to 1 if set to 0 by default */
        if (def_type == 'g') {
 8004dbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004dc2:	2b67      	cmp	r3, #103	; 0x67
 8004dc4:	d102      	bne.n	8004dcc <prv_double_to_str+0x2a4>
            p->m.precision = 1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	621a      	str	r2, [r3, #32]
     *
     * A double argument representing an infinity or 'NaN' is converted in the style of an 'f' or 'F' conversion specifier.
     */

    /* Calculate data for number */
    prv_calculate_dbl_num_data(p, &dblnum, def_type == 'e' ? in_num : orig_num, def_type == 'e' ? 0 : exp_cnt,
 8004dcc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004dd0:	2b65      	cmp	r3, #101	; 0x65
 8004dd2:	d102      	bne.n	8004dda <prv_double_to_str+0x2b2>
 8004dd4:	ed97 7b00 	vldr	d7, [r7]
 8004dd8:	e001      	b.n	8004dde <prv_double_to_str+0x2b6>
 8004dda:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004dde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004de2:	2b65      	cmp	r3, #101	; 0x65
 8004de4:	d022      	beq.n	8004e2c <prv_double_to_str+0x304>
 8004de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	e020      	b.n	8004e2e <prv_double_to_str+0x306>
 8004dec:	f3af 8000 	nop.w
 8004df0:	674ec800 	.word	0x674ec800
 8004df4:	c3abc16d 	.word	0xc3abc16d
 8004df8:	674ec800 	.word	0x674ec800
 8004dfc:	43abc16d 	.word	0x43abc16d
 8004e00:	a7640000 	.word	0xa7640000
 8004e04:	0de0b6b3 	.word	0x0de0b6b3
 8004e08:	08008168 	.word	0x08008168
 8004e0c:	0800816c 	.word	0x0800816c
 8004e10:	08008170 	.word	0x08008170
 8004e14:	08008178 	.word	0x08008178
 8004e18:	7fefffff 	.word	0x7fefffff
 8004e1c:	08008180 	.word	0x08008180
 8004e20:	08008184 	.word	0x08008184
 8004e24:	3ff00000 	.word	0x3ff00000
 8004e28:	40240000 	.word	0x40240000
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e32:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004e36:	eeb0 0a47 	vmov.f32	s0, s14
 8004e3a:	eef0 0a67 	vmov.f32	s1, s15
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff fd12 	bl	8004868 <prv_calculate_dbl_num_data>
                               def_type);
    //prv_calculate_dbl_num_data(p, &dblnum, orig_num, exp_cnt, def_type);

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Set type G */
    if (def_type == 'g') {
 8004e44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e48:	2b67      	cmp	r3, #103	; 0x67
 8004e4a:	d142      	bne.n	8004ed2 <prv_double_to_str+0x3aa>
        /* As per standard to decide level of precision */
        if (exp_cnt >= -4 && exp_cnt < p->m.precision) {
 8004e4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e4e:	f113 0f04 	cmn.w	r3, #4
 8004e52:	db24      	blt.n	8004e9e <prv_double_to_str+0x376>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	da1f      	bge.n	8004e9e <prv_double_to_str+0x376>
            if (p->m.precision > exp_cnt) {
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e64:	429a      	cmp	r2, r3
 8004e66:	da0c      	bge.n	8004e82 <prv_double_to_str+0x35a>
                p->m.precision -= exp_cnt + 1;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a1a      	ldr	r2, [r3, #32]
 8004e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e6e:	3301      	adds	r3, #1
 8004e70:	1ad2      	subs	r2, r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	621a      	str	r2, [r3, #32]
                chosen_precision -= exp_cnt + 1;
 8004e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e78:	3301      	adds	r3, #1
 8004e7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8004e80:	e004      	b.n	8004e8c <prv_double_to_str+0x364>
            } else {
                p->m.precision = 0;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	621a      	str	r2, [r3, #32]
                chosen_precision = 0;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	673b      	str	r3, [r7, #112]	; 0x70
            }
            p->m.type = 'f';
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2266      	movs	r2, #102	; 0x66
 8004e90:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            in_num = orig_num;
 8004e94:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e98:	e9c7 2300 	strd	r2, r3, [r7]
 8004e9c:	e00f      	b.n	8004ebe <prv_double_to_str+0x396>
        } else {
            p->m.type = 'e';
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2265      	movs	r2, #101	; 0x65
 8004ea2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            if (p->m.precision > 0) {
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	dd07      	ble.n	8004ebe <prv_double_to_str+0x396>
                --p->m.precision;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	1e5a      	subs	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	621a      	str	r2, [r3, #32]
                --chosen_precision;
 8004eb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }
        prv_calculate_dbl_num_data(p, &dblnum, in_num, 0, def_type);
 8004ebe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ec2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	ed97 0b00 	vldr	d0, [r7]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	f7ff fccb 	bl	8004868 <prv_calculate_dbl_num_data>
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Set number of digits to display */
    digits_cnt = dblnum.digits_cnt_integer_part;
 8004ed2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8004ed6:	67bb      	str	r3, [r7, #120]	; 0x78
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    if (def_type == 'g' && p->m.precision > 0) {
 8004ed8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004edc:	2b67      	cmp	r3, #103	; 0x67
 8004ede:	d111      	bne.n	8004f04 <prv_double_to_str+0x3dc>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	dd0d      	ble.n	8004f04 <prv_double_to_str+0x3dc>
        digits_cnt += dblnum.digits_cnt_decimal_part_useful;
 8004ee8:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004eec:	461a      	mov	r2, r3
 8004eee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ef0:	4413      	add	r3, r2
 8004ef2:	67bb      	str	r3, [r7, #120]	; 0x78
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 8004ef4:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	dd12      	ble.n	8004f22 <prv_double_to_str+0x3fa>
            ++digits_cnt;
 8004efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004efe:	3301      	adds	r3, #1
 8004f00:	67bb      	str	r3, [r7, #120]	; 0x78
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 8004f02:	e00e      	b.n	8004f22 <prv_double_to_str+0x3fa>
        }
    } else
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        if (chosen_precision > 0 && p->m.flags.precision) {
 8004f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	dd0b      	ble.n	8004f22 <prv_double_to_str+0x3fa>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	7f1b      	ldrb	r3, [r3, #28]
 8004f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d004      	beq.n	8004f22 <prv_double_to_str+0x3fa>
            /* Add precision digits + dot separator */
            digits_cnt += chosen_precision + 1;
 8004f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f1e:	4413      	add	r3, r2
 8004f20:	67bb      	str	r3, [r7, #120]	; 0x78
        }

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Increase number of digits to display */
    if (p->m.type == 'e') {
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004f28:	2b65      	cmp	r3, #101	; 0x65
 8004f2a:	d10d      	bne.n	8004f48 <prv_double_to_str+0x420>
        /* Format is +Exxx, so add 4 or 5 characters (max is 307, min is 00 for exponent) */
        digits_cnt += 4 + (exp_cnt >= 100 || exp_cnt <= -100);
 8004f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f2e:	2b63      	cmp	r3, #99	; 0x63
 8004f30:	dc03      	bgt.n	8004f3a <prv_double_to_str+0x412>
 8004f32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f34:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004f38:	da01      	bge.n	8004f3e <prv_double_to_str+0x416>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e000      	b.n	8004f40 <prv_double_to_str+0x418>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	3304      	adds	r3, #4
 8004f42:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f44:	4413      	add	r3, r2
 8004f46:	67bb      	str	r3, [r7, #120]	; 0x78
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Output strings */
    prv_out_str_before(p, digits_cnt);
 8004f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7fe fee4 	bl	8003d1a <prv_out_str_before>

    /* Output integer part of number */
    if (dblnum.integer_part == 0) {
 8004f52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f56:	4313      	orrs	r3, r2
 8004f58:	d105      	bne.n	8004f66 <prv_double_to_str+0x43e>
        p->out_fn(p, '0');
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	2130      	movs	r1, #48	; 0x30
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	4798      	blx	r3
 8004f64:	e03a      	b.n	8004fdc <prv_double_to_str+0x4b4>
    } else {
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 8004f66:	2300      	movs	r3, #0
 8004f68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f6a:	e01f      	b.n	8004fac <prv_double_to_str+0x484>
            str[i] = '0' + (char)(dblnum.integer_part % 10);
 8004f6c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004f70:	f04f 020a 	mov.w	r2, #10
 8004f74:	f04f 0300 	mov.w	r3, #0
 8004f78:	f7fb fd7c 	bl	8000a74 <__aeabi_ldivmod>
 8004f7c:	b2d3      	uxtb	r3, r2
 8004f7e:	3330      	adds	r3, #48	; 0x30
 8004f80:	b2d9      	uxtb	r1, r3
 8004f82:	f107 0218 	add.w	r2, r7, #24
 8004f86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f88:	4413      	add	r3, r2
 8004f8a:	460a      	mov	r2, r1
 8004f8c:	701a      	strb	r2, [r3, #0]
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 8004f8e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004f92:	f04f 020a 	mov.w	r2, #10
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	f7fb fd6b 	bl	8000a74 <__aeabi_ldivmod>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004fa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fa8:	3301      	adds	r3, #1
 8004faa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fb0:	2a01      	cmp	r2, #1
 8004fb2:	f173 0300 	sbcs.w	r3, r3, #0
 8004fb6:	dad9      	bge.n	8004f6c <prv_double_to_str+0x444>
        }
        for (; i > 0; --i) {
 8004fb8:	e00d      	b.n	8004fd6 <prv_double_to_str+0x4ae>
            p->out_fn(p, str[i - 1]);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004fc0:	3a01      	subs	r2, #1
 8004fc2:	3280      	adds	r2, #128	; 0x80
 8004fc4:	443a      	add	r2, r7
 8004fc6:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8004fca:	4611      	mov	r1, r2
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	4798      	blx	r3
        for (; i > 0; --i) {
 8004fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1ee      	bne.n	8004fba <prv_double_to_str+0x492>
        }
    }

    /* Output decimal part */
    if (p->m.precision > 0) {
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f340 809b 	ble.w	800511c <prv_double_to_str+0x5f4>
        int x;
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 8004fe6:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dd04      	ble.n	8004ff8 <prv_double_to_str+0x4d0>
            p->out_fn(p, '.');
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	212e      	movs	r1, #46	; 0x2e
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	4798      	blx	r3
        }
        for (i = 0; dblnum.decimal_part > 0; dblnum.decimal_part /= 10, ++i) {
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ffc:	e01f      	b.n	800503e <prv_double_to_str+0x516>
            str[i] = '0' + (dblnum.decimal_part % 10);
 8004ffe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005002:	f04f 020a 	mov.w	r2, #10
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	f7fb fd33 	bl	8000a74 <__aeabi_ldivmod>
 800500e:	b2d3      	uxtb	r3, r2
 8005010:	3330      	adds	r3, #48	; 0x30
 8005012:	b2d9      	uxtb	r1, r3
 8005014:	f107 0218 	add.w	r2, r7, #24
 8005018:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800501a:	4413      	add	r3, r2
 800501c:	460a      	mov	r2, r1
 800501e:	701a      	strb	r2, [r3, #0]
        for (i = 0; dblnum.decimal_part > 0; dblnum.decimal_part /= 10, ++i) {
 8005020:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005024:	f04f 020a 	mov.w	r2, #10
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	f7fb fd22 	bl	8000a74 <__aeabi_ldivmod>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8005038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800503a:	3301      	adds	r3, #1
 800503c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800503e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005042:	2a01      	cmp	r2, #1
 8005044:	f173 0300 	sbcs.w	r3, r3, #0
 8005048:	dad9      	bge.n	8004ffe <prv_double_to_str+0x4d6>
        }

        /* Output relevant zeros first, string to print is opposite way */
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
        if (def_type == 'g') {
 800504a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800504e:	2b67      	cmp	r3, #103	; 0x67
 8005050:	d11f      	bne.n	8005092 <prv_double_to_str+0x56a>
            /* TODO: This is to be checked */
            for (x = 0; (size_t)x < p->m.precision - i && dblnum.digits_cnt_decimal_part_useful > 0;
 8005052:	2300      	movs	r3, #0
 8005054:	667b      	str	r3, [r7, #100]	; 0x64
 8005056:	e00f      	b.n	8005078 <prv_double_to_str+0x550>
                 ++x, --dblnum.digits_cnt_decimal_part_useful) {
                p->out_fn(p, '0');
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	2130      	movs	r1, #48	; 0x30
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	4798      	blx	r3
                 ++x, --dblnum.digits_cnt_decimal_part_useful) {
 8005062:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005064:	3301      	adds	r3, #1
 8005066:	667b      	str	r3, [r7, #100]	; 0x64
 8005068:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800506c:	b29b      	uxth	r3, r3
 800506e:	3b01      	subs	r3, #1
 8005070:	b29b      	uxth	r3, r3
 8005072:	b21b      	sxth	r3, r3
 8005074:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            for (x = 0; (size_t)x < p->m.precision - i && dblnum.digits_cnt_decimal_part_useful > 0;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	461a      	mov	r2, r3
 800507e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005080:	1ad2      	subs	r2, r2, r3
 8005082:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005084:	429a      	cmp	r2, r3
 8005086:	d933      	bls.n	80050f0 <prv_double_to_str+0x5c8>
 8005088:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 800508c:	2b00      	cmp	r3, #0
 800508e:	dce3      	bgt.n	8005058 <prv_double_to_str+0x530>
 8005090:	e02e      	b.n	80050f0 <prv_double_to_str+0x5c8>
            }
        } else
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        {
            for (x = i; x < p->m.precision; ++x) {
 8005092:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005094:	667b      	str	r3, [r7, #100]	; 0x64
 8005096:	e007      	b.n	80050a8 <prv_double_to_str+0x580>
                p->out_fn(p, '0');
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	2130      	movs	r1, #48	; 0x30
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	4798      	blx	r3
            for (x = i; x < p->m.precision; ++x) {
 80050a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050a4:	3301      	adds	r3, #1
 80050a6:	667b      	str	r3, [r7, #100]	; 0x64
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80050ae:	429a      	cmp	r2, r3
 80050b0:	dbf2      	blt.n	8005098 <prv_double_to_str+0x570>
            }
        }

        /* Now print string itself */
        for (; i > 0; --i) {
 80050b2:	e01d      	b.n	80050f0 <prv_double_to_str+0x5c8>
            p->out_fn(p, str[i - 1]);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80050ba:	3a01      	subs	r2, #1
 80050bc:	3280      	adds	r2, #128	; 0x80
 80050be:	443a      	add	r2, r7
 80050c0:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80050c4:	4611      	mov	r1, r2
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	4798      	blx	r3
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
            if (def_type == 'g' && --dblnum.digits_cnt_decimal_part_useful == 0) {
 80050ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80050ce:	2b67      	cmp	r3, #103	; 0x67
 80050d0:	d10b      	bne.n	80050ea <prv_double_to_str+0x5c2>
 80050d2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29b      	uxth	r3, r3
 80050dc:	b21b      	sxth	r3, r3
 80050de:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80050e2:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d006      	beq.n	80050f8 <prv_double_to_str+0x5d0>
        for (; i > 0; --i) {
 80050ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050ec:	3b01      	subs	r3, #1
 80050ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1de      	bne.n	80050b4 <prv_double_to_str+0x58c>
 80050f6:	e000      	b.n	80050fa <prv_double_to_str+0x5d2>
                break;
 80050f8:	bf00      	nop
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        }

        /* Print ending zeros if selected precision is bigger than maximum supported */
        if (def_type != 'g') {
 80050fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80050fe:	2b67      	cmp	r3, #103	; 0x67
 8005100:	d00c      	beq.n	800511c <prv_double_to_str+0x5f4>
            for (; x < chosen_precision; ++x) {
 8005102:	e007      	b.n	8005114 <prv_double_to_str+0x5ec>
                p->out_fn(p, '0');
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	2130      	movs	r1, #48	; 0x30
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	4798      	blx	r3
            for (; x < chosen_precision; ++x) {
 800510e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005110:	3301      	adds	r3, #1
 8005112:	667b      	str	r3, [r7, #100]	; 0x64
 8005114:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005118:	429a      	cmp	r2, r3
 800511a:	dbf3      	blt.n	8005104 <prv_double_to_str+0x5dc>
        }
    }

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Engineering mode output, add exponent part */
    if (p->m.type == 'e') {
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005122:	2b65      	cmp	r3, #101	; 0x65
 8005124:	d15c      	bne.n	80051e0 <prv_double_to_str+0x6b8>
        p->out_fn(p, p->m.flags.uc ? 'E' : 'e');
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	7f52      	ldrb	r2, [r2, #29]
 800512e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	2a00      	cmp	r2, #0
 8005136:	d001      	beq.n	800513c <prv_double_to_str+0x614>
 8005138:	2245      	movs	r2, #69	; 0x45
 800513a:	e000      	b.n	800513e <prv_double_to_str+0x616>
 800513c:	2265      	movs	r2, #101	; 0x65
 800513e:	4611      	mov	r1, r2
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	4798      	blx	r3
        p->out_fn(p, exp_cnt >= 0 ? '+' : '-');
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800514a:	2a00      	cmp	r2, #0
 800514c:	db01      	blt.n	8005152 <prv_double_to_str+0x62a>
 800514e:	222b      	movs	r2, #43	; 0x2b
 8005150:	e000      	b.n	8005154 <prv_double_to_str+0x62c>
 8005152:	222d      	movs	r2, #45	; 0x2d
 8005154:	4611      	mov	r1, r2
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	4798      	blx	r3
        if (exp_cnt < 0) {
 800515a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800515c:	2b00      	cmp	r3, #0
 800515e:	da02      	bge.n	8005166 <prv_double_to_str+0x63e>
            exp_cnt = -exp_cnt;
 8005160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005162:	425b      	negs	r3, r3
 8005164:	677b      	str	r3, [r7, #116]	; 0x74
        }
        if (exp_cnt >= 100) {
 8005166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005168:	2b63      	cmp	r3, #99	; 0x63
 800516a:	dd16      	ble.n	800519a <prv_double_to_str+0x672>
            p->out_fn(p, '0' + (char)(exp_cnt / 100));
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	695a      	ldr	r2, [r3, #20]
 8005170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005172:	4920      	ldr	r1, [pc, #128]	; (80051f4 <prv_double_to_str+0x6cc>)
 8005174:	fb81 0103 	smull	r0, r1, r1, r3
 8005178:	1149      	asrs	r1, r1, #5
 800517a:	17db      	asrs	r3, r3, #31
 800517c:	1acb      	subs	r3, r1, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	3330      	adds	r3, #48	; 0x30
 8005182:	b2db      	uxtb	r3, r3
 8005184:	4619      	mov	r1, r3
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	4790      	blx	r2
            exp_cnt /= 100;
 800518a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800518c:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <prv_double_to_str+0x6cc>)
 800518e:	fb82 1203 	smull	r1, r2, r2, r3
 8005192:	1152      	asrs	r2, r2, #5
 8005194:	17db      	asrs	r3, r3, #31
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	677b      	str	r3, [r7, #116]	; 0x74
        }
        p->out_fn(p, '0' + (char)(exp_cnt / 10));
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051a0:	4915      	ldr	r1, [pc, #84]	; (80051f8 <prv_double_to_str+0x6d0>)
 80051a2:	fb81 0103 	smull	r0, r1, r1, r3
 80051a6:	1089      	asrs	r1, r1, #2
 80051a8:	17db      	asrs	r3, r3, #31
 80051aa:	1acb      	subs	r3, r1, r3
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	3330      	adds	r3, #48	; 0x30
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	4619      	mov	r1, r3
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	4790      	blx	r2
        p->out_fn(p, '0' + (char)(exp_cnt % 10));
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	695c      	ldr	r4, [r3, #20]
 80051bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80051be:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <prv_double_to_str+0x6d0>)
 80051c0:	fb83 1302 	smull	r1, r3, r3, r2
 80051c4:	1099      	asrs	r1, r3, #2
 80051c6:	17d3      	asrs	r3, r2, #31
 80051c8:	1ac9      	subs	r1, r1, r3
 80051ca:	460b      	mov	r3, r1
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	1ad1      	subs	r1, r2, r3
 80051d4:	b2cb      	uxtb	r3, r1
 80051d6:	3330      	adds	r3, #48	; 0x30
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	4619      	mov	r1, r3
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	47a0      	blx	r4
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    prv_out_str_after(p, digits_cnt);
 80051e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051e2:	4619      	mov	r1, r3
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f7fe fec6 	bl	8003f76 <prv_out_str_after>

    return 1;
 80051ea:	2301      	movs	r3, #1
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3780      	adds	r7, #128	; 0x80
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bdb0      	pop	{r4, r5, r7, pc}
 80051f4:	51eb851f 	.word	0x51eb851f
 80051f8:	66666667 	.word	0x66666667

080051fc <prv_format>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       arg: Variable parameters list
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_format(lwprintf_int_t* p, va_list arg) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08e      	sub	sp, #56	; 0x38
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
    uint8_t detected = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    const char* fmt = p->fmt;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	60bb      	str	r3, [r7, #8]
         || !lwprintf_sys_mutex_wait(&p->lwobj->mutex))) { /* Cannot acquire mutex */
        return 0;
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */

    while (fmt != NULL && *fmt != '\0') {
 8005212:	f000 bc65 	b.w	8005ae0 <prv_format+0x8e4>
        /* Check if we should stop processing */
        if (p->is_print_cancelled) {
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	7e1b      	ldrb	r3, [r3, #24]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f040 8469 	bne.w	8005af2 <prv_format+0x8f6>
            break;
        }

        /* Detect beginning */
        if (*fmt != '%') {
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b25      	cmp	r3, #37	; 0x25
 8005226:	d00b      	beq.n	8005240 <prv_format+0x44>
            p->out_fn(p, *fmt); /* Output character */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	7812      	ldrb	r2, [r2, #0]
 8005230:	4611      	mov	r1, r2
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	4798      	blx	r3
            ++fmt;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	3301      	adds	r3, #1
 800523a:	60bb      	str	r3, [r7, #8]
            continue;
 800523c:	f000 bc50 	b.w	8005ae0 <prv_format+0x8e4>
        }
        ++fmt;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	3301      	adds	r3, #1
 8005244:	60bb      	str	r3, [r7, #8]
        memset(&p->m, 0x00, sizeof(p->m)); /* Reset structure */
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	331c      	adds	r3, #28
 800524a:	2210      	movs	r2, #16
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f002 fc3e 	bl	8007ad0 <memset>
        /* %[flags][width][.precision][length]type */
        /* Go to https://docs.majerle.eu for more info about supported features */

        /* Check [flags] */
        /* It can have multiple flags in any order */
        detected = 1;
 8005254:	2301      	movs	r3, #1
 8005256:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        do {
            switch (*fmt) {
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	3b20      	subs	r3, #32
 8005260:	2b10      	cmp	r3, #16
 8005262:	d849      	bhi.n	80052f8 <prv_format+0xfc>
 8005264:	a201      	add	r2, pc, #4	; (adr r2, 800526c <prv_format+0x70>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	080052c9 	.word	0x080052c9
 8005270:	080052f9 	.word	0x080052f9
 8005274:	080052f9 	.word	0x080052f9
 8005278:	080052ed 	.word	0x080052ed
 800527c:	080052f9 	.word	0x080052f9
 8005280:	080052f9 	.word	0x080052f9
 8005284:	080052f9 	.word	0x080052f9
 8005288:	080052e1 	.word	0x080052e1
 800528c:	080052f9 	.word	0x080052f9
 8005290:	080052f9 	.word	0x080052f9
 8005294:	080052f9 	.word	0x080052f9
 8005298:	080052bd 	.word	0x080052bd
 800529c:	080052f9 	.word	0x080052f9
 80052a0:	080052b1 	.word	0x080052b1
 80052a4:	080052f9 	.word	0x080052f9
 80052a8:	080052f9 	.word	0x080052f9
 80052ac:	080052d5 	.word	0x080052d5
                case '-':
                    p->m.flags.left_align = 1;
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	7f13      	ldrb	r3, [r2, #28]
 80052b4:	f043 0301 	orr.w	r3, r3, #1
 80052b8:	7713      	strb	r3, [r2, #28]
                    break;
 80052ba:	e021      	b.n	8005300 <prv_format+0x104>
                case '+':
                    p->m.flags.plus = 1;
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	7f13      	ldrb	r3, [r2, #28]
 80052c0:	f043 0302 	orr.w	r3, r3, #2
 80052c4:	7713      	strb	r3, [r2, #28]
                    break;
 80052c6:	e01b      	b.n	8005300 <prv_format+0x104>
                case ' ':
                    p->m.flags.space = 1;
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	7f13      	ldrb	r3, [r2, #28]
 80052cc:	f043 0304 	orr.w	r3, r3, #4
 80052d0:	7713      	strb	r3, [r2, #28]
                    break;
 80052d2:	e015      	b.n	8005300 <prv_format+0x104>
                case '0':
                    p->m.flags.zero = 1;
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	7f13      	ldrb	r3, [r2, #28]
 80052d8:	f043 0308 	orr.w	r3, r3, #8
 80052dc:	7713      	strb	r3, [r2, #28]
                    break;
 80052de:	e00f      	b.n	8005300 <prv_format+0x104>
                case '\'':
                    p->m.flags.thousands = 1;
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	7f13      	ldrb	r3, [r2, #28]
 80052e4:	f043 0310 	orr.w	r3, r3, #16
 80052e8:	7713      	strb	r3, [r2, #28]
                    break;
 80052ea:	e009      	b.n	8005300 <prv_format+0x104>
                case '#':
                    p->m.flags.alt = 1;
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	7f13      	ldrb	r3, [r2, #28]
 80052f0:	f043 0320 	orr.w	r3, r3, #32
 80052f4:	7713      	strb	r3, [r2, #28]
                    break;
 80052f6:	e003      	b.n	8005300 <prv_format+0x104>
                default:
                    detected = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    break;
 80052fe:	bf00      	nop
            }
            if (detected) {
 8005300:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <prv_format+0x112>
                ++fmt;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	3301      	adds	r3, #1
 800530c:	60bb      	str	r3, [r7, #8]
            }
        } while (detected);
 800530e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1a1      	bne.n	800525a <prv_format+0x5e>

        /* Check [width] */
        p->m.width = 0;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CHARISNUM(*fmt)) { /* Fixed width check */
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b2f      	cmp	r3, #47	; 0x2f
 8005322:	d90c      	bls.n	800533e <prv_format+0x142>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b39      	cmp	r3, #57	; 0x39
 800532a:	d808      	bhi.n	800533e <prv_format+0x142>
            /* If number is negative, it has been captured from previous step (left align) */
            p->m.width = prv_parse_num(&fmt); /* Number from string directly */
 800532c:	f107 0308 	add.w	r3, r7, #8
 8005330:	4618      	mov	r0, r3
 8005332:	f7fe fcc8 	bl	8003cc6 <prv_parse_num>
 8005336:	4602      	mov	r2, r0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	625a      	str	r2, [r3, #36]	; 0x24
 800533c:	e01b      	b.n	8005376 <prv_format+0x17a>
        } else if (*fmt == '*') {             /* Or variable check */
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b2a      	cmp	r3, #42	; 0x2a
 8005344:	d117      	bne.n	8005376 <prv_format+0x17a>
            const int w = (int)va_arg(arg, int);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	1d1a      	adds	r2, r3, #4
 800534a:	603a      	str	r2, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	623b      	str	r3, [r7, #32]
            if (w < 0) {
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	2b00      	cmp	r3, #0
 8005354:	da09      	bge.n	800536a <prv_format+0x16e>
                p->m.flags.left_align = 1; /* Negative width means left aligned */
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	7f13      	ldrb	r3, [r2, #28]
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	7713      	strb	r3, [r2, #28]
                p->m.width = -w;
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	425a      	negs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	625a      	str	r2, [r3, #36]	; 0x24
 8005368:	e002      	b.n	8005370 <prv_format+0x174>
            } else {
                p->m.width = w;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a3a      	ldr	r2, [r7, #32]
 800536e:	625a      	str	r2, [r3, #36]	; 0x24
            }
            ++fmt;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	3301      	adds	r3, #1
 8005374:	60bb      	str	r3, [r7, #8]
        }

        /* Check [.precision] */
        p->m.precision = 0;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	621a      	str	r2, [r3, #32]
        if (*fmt == '.') { /* Precision flag is detected */
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b2e      	cmp	r3, #46	; 0x2e
 8005382:	d129      	bne.n	80053d8 <prv_format+0x1dc>
            p->m.flags.precision = 1;
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	7f13      	ldrb	r3, [r2, #28]
 8005388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800538c:	7713      	strb	r3, [r2, #28]
            if (*++fmt == '*') { /* Variable check */
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	3301      	adds	r3, #1
 8005392:	60bb      	str	r3, [r7, #8]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b2a      	cmp	r3, #42	; 0x2a
 800539a:	d10d      	bne.n	80053b8 <prv_format+0x1bc>
                const int pr = (int)va_arg(arg, int);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	1d1a      	adds	r2, r3, #4
 80053a0:	603a      	str	r2, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	61fb      	str	r3, [r7, #28]
                p->m.precision = pr > 0 ? pr : 0;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	621a      	str	r2, [r3, #32]
                ++fmt;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	3301      	adds	r3, #1
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	e00f      	b.n	80053d8 <prv_format+0x1dc>
            } else if (CHARISNUM(*fmt)) { /* Directly in the string */
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b2f      	cmp	r3, #47	; 0x2f
 80053be:	d90b      	bls.n	80053d8 <prv_format+0x1dc>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b39      	cmp	r3, #57	; 0x39
 80053c6:	d807      	bhi.n	80053d8 <prv_format+0x1dc>
                p->m.precision = prv_parse_num(&fmt);
 80053c8:	f107 0308 	add.w	r3, r7, #8
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fe fc7a 	bl	8003cc6 <prv_parse_num>
 80053d2:	4602      	mov	r2, r0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	621a      	str	r2, [r3, #32]
            }
        }

        /* Check [length] */
        detected = 1;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        switch (*fmt) {
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	3b4c      	subs	r3, #76	; 0x4c
 80053e4:	2b2e      	cmp	r3, #46	; 0x2e
 80053e6:	f200 80a1 	bhi.w	800552c <prv_format+0x330>
 80053ea:	a201      	add	r2, pc, #4	; (adr r2, 80053f0 <prv_format+0x1f4>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005535 	.word	0x08005535
 80053f4:	0800552d 	.word	0x0800552d
 80053f8:	0800552d 	.word	0x0800552d
 80053fc:	0800552d 	.word	0x0800552d
 8005400:	0800552d 	.word	0x0800552d
 8005404:	0800552d 	.word	0x0800552d
 8005408:	0800552d 	.word	0x0800552d
 800540c:	0800552d 	.word	0x0800552d
 8005410:	0800552d 	.word	0x0800552d
 8005414:	0800552d 	.word	0x0800552d
 8005418:	0800552d 	.word	0x0800552d
 800541c:	0800552d 	.word	0x0800552d
 8005420:	0800552d 	.word	0x0800552d
 8005424:	0800552d 	.word	0x0800552d
 8005428:	0800552d 	.word	0x0800552d
 800542c:	0800552d 	.word	0x0800552d
 8005430:	0800552d 	.word	0x0800552d
 8005434:	0800552d 	.word	0x0800552d
 8005438:	0800552d 	.word	0x0800552d
 800543c:	0800552d 	.word	0x0800552d
 8005440:	0800552d 	.word	0x0800552d
 8005444:	0800552d 	.word	0x0800552d
 8005448:	0800552d 	.word	0x0800552d
 800544c:	0800552d 	.word	0x0800552d
 8005450:	0800552d 	.word	0x0800552d
 8005454:	0800552d 	.word	0x0800552d
 8005458:	0800552d 	.word	0x0800552d
 800545c:	0800552d 	.word	0x0800552d
 8005460:	080054ad 	.word	0x080054ad
 8005464:	0800552d 	.word	0x0800552d
 8005468:	0800551b 	.word	0x0800551b
 800546c:	0800552d 	.word	0x0800552d
 8005470:	080054db 	.word	0x080054db
 8005474:	0800552d 	.word	0x0800552d
 8005478:	0800552d 	.word	0x0800552d
 800547c:	0800552d 	.word	0x0800552d
 8005480:	0800552d 	.word	0x0800552d
 8005484:	0800552d 	.word	0x0800552d
 8005488:	0800552d 	.word	0x0800552d
 800548c:	0800552d 	.word	0x0800552d
 8005490:	08005535 	.word	0x08005535
 8005494:	0800552d 	.word	0x0800552d
 8005498:	0800552d 	.word	0x0800552d
 800549c:	0800552d 	.word	0x0800552d
 80054a0:	0800552d 	.word	0x0800552d
 80054a4:	0800552d 	.word	0x0800552d
 80054a8:	08005509 	.word	0x08005509
            case 'h':
                p->m.flags.char_short = 1;     /* Single h detected */
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	7f53      	ldrb	r3, [r2, #29]
 80054b0:	2101      	movs	r1, #1
 80054b2:	f361 0383 	bfi	r3, r1, #2, #2
 80054b6:	7753      	strb	r3, [r2, #29]
                if (*++fmt == 'h') {           /* Does it follow by another h? */
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b68      	cmp	r3, #104	; 0x68
 80054c4:	d138      	bne.n	8005538 <prv_format+0x33c>
                    p->m.flags.char_short = 2; /* Second h detected */
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	7f53      	ldrb	r3, [r2, #29]
 80054ca:	2102      	movs	r1, #2
 80054cc:	f361 0383 	bfi	r3, r1, #2, #2
 80054d0:	7753      	strb	r3, [r2, #29]
                    ++fmt;
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	3301      	adds	r3, #1
 80054d6:	60bb      	str	r3, [r7, #8]
                }
                break;
 80054d8:	e02e      	b.n	8005538 <prv_format+0x33c>
            case 'l':
                p->m.flags.longlong = 1;     /* Single l detected */
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	7f53      	ldrb	r3, [r2, #29]
 80054de:	2101      	movs	r1, #1
 80054e0:	f361 0301 	bfi	r3, r1, #0, #2
 80054e4:	7753      	strb	r3, [r2, #29]
                if (*++fmt == 'l') {         /* Does it follow by another l? */
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	3301      	adds	r3, #1
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b6c      	cmp	r3, #108	; 0x6c
 80054f2:	d123      	bne.n	800553c <prv_format+0x340>
                    p->m.flags.longlong = 2; /* Second l detected */
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	7f53      	ldrb	r3, [r2, #29]
 80054f8:	2102      	movs	r1, #2
 80054fa:	f361 0301 	bfi	r3, r1, #0, #2
 80054fe:	7753      	strb	r3, [r2, #29]
                    ++fmt;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	3301      	adds	r3, #1
 8005504:	60bb      	str	r3, [r7, #8]
                }
                break;
 8005506:	e019      	b.n	800553c <prv_format+0x340>
            case 'L':
                break;
            case 'z':
                p->m.flags.sz_t = 1; /* Size T flag */
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	7f53      	ldrb	r3, [r2, #29]
 800550c:	f043 0310 	orr.w	r3, r3, #16
 8005510:	7753      	strb	r3, [r2, #29]
                ++fmt;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	3301      	adds	r3, #1
 8005516:	60bb      	str	r3, [r7, #8]
                break;
 8005518:	e011      	b.n	800553e <prv_format+0x342>
            case 'j':
                p->m.flags.umax_t = 1; /* uintmax_t flag */
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	7f53      	ldrb	r3, [r2, #29]
 800551e:	f043 0320 	orr.w	r3, r3, #32
 8005522:	7753      	strb	r3, [r2, #29]
                ++fmt;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	3301      	adds	r3, #1
 8005528:	60bb      	str	r3, [r7, #8]
                break;
 800552a:	e008      	b.n	800553e <prv_format+0x342>
            case 't':
                break;
            default:
                detected = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8005532:	e004      	b.n	800553e <prv_format+0x342>
                break;
 8005534:	bf00      	nop
 8005536:	e002      	b.n	800553e <prv_format+0x342>
                break;
 8005538:	bf00      	nop
 800553a:	e000      	b.n	800553e <prv_format+0x342>
                break;
 800553c:	bf00      	nop
        }

        /* Check type */
        p->m.type = *fmt + ((*fmt >= 'A' && *fmt <= 'Z') ? 0x20 : 0x00);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	7812      	ldrb	r2, [r2, #0]
 8005546:	2a40      	cmp	r2, #64	; 0x40
 8005548:	d905      	bls.n	8005556 <prv_format+0x35a>
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	7812      	ldrb	r2, [r2, #0]
 800554e:	2a5a      	cmp	r2, #90	; 0x5a
 8005550:	d801      	bhi.n	8005556 <prv_format+0x35a>
 8005552:	2220      	movs	r2, #32
 8005554:	e000      	b.n	8005558 <prv_format+0x35c>
 8005556:	2200      	movs	r2, #0
 8005558:	4413      	add	r3, r2
 800555a:	b2da      	uxtb	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        if (*fmt >= 'A' && *fmt <= 'Z') {
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b40      	cmp	r3, #64	; 0x40
 8005568:	d908      	bls.n	800557c <prv_format+0x380>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b5a      	cmp	r3, #90	; 0x5a
 8005570:	d804      	bhi.n	800557c <prv_format+0x380>
            p->m.flags.uc = 1;
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	7f53      	ldrb	r3, [r2, #29]
 8005576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557a:	7753      	strb	r3, [r2, #29]
        }
        switch (*fmt) {
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	3b25      	subs	r3, #37	; 0x25
 8005582:	2b53      	cmp	r3, #83	; 0x53
 8005584:	f200 829c 	bhi.w	8005ac0 <prv_format+0x8c4>
 8005588:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <prv_format+0x394>)
 800558a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558e:	bf00      	nop
 8005590:	08005987 	.word	0x08005987
 8005594:	08005ac1 	.word	0x08005ac1
 8005598:	08005ac1 	.word	0x08005ac1
 800559c:	08005ac1 	.word	0x08005ac1
 80055a0:	08005ac1 	.word	0x08005ac1
 80055a4:	08005ac1 	.word	0x08005ac1
 80055a8:	08005ac1 	.word	0x08005ac1
 80055ac:	08005ac1 	.word	0x08005ac1
 80055b0:	08005ac1 	.word	0x08005ac1
 80055b4:	08005ac1 	.word	0x08005ac1
 80055b8:	08005ac1 	.word	0x08005ac1
 80055bc:	08005ac1 	.word	0x08005ac1
 80055c0:	08005ac1 	.word	0x08005ac1
 80055c4:	08005ac1 	.word	0x08005ac1
 80055c8:	08005ac1 	.word	0x08005ac1
 80055cc:	08005ac1 	.word	0x08005ac1
 80055d0:	08005ac1 	.word	0x08005ac1
 80055d4:	08005ac1 	.word	0x08005ac1
 80055d8:	08005ac1 	.word	0x08005ac1
 80055dc:	08005ac1 	.word	0x08005ac1
 80055e0:	08005ac1 	.word	0x08005ac1
 80055e4:	08005ac1 	.word	0x08005ac1
 80055e8:	08005ac1 	.word	0x08005ac1
 80055ec:	08005ac1 	.word	0x08005ac1
 80055f0:	08005ac1 	.word	0x08005ac1
 80055f4:	08005ac1 	.word	0x08005ac1
 80055f8:	08005ac1 	.word	0x08005ac1
 80055fc:	08005ac1 	.word	0x08005ac1
 8005600:	080056e1 	.word	0x080056e1
 8005604:	08005781 	.word	0x08005781
 8005608:	08005ac1 	.word	0x08005ac1
 800560c:	08005ac1 	.word	0x08005ac1
 8005610:	0800594b 	.word	0x0800594b
 8005614:	0800594b 	.word	0x0800594b
 8005618:	0800594b 	.word	0x0800594b
 800561c:	08005ac1 	.word	0x08005ac1
 8005620:	08005ac1 	.word	0x08005ac1
 8005624:	08005ac1 	.word	0x08005ac1
 8005628:	08005993 	.word	0x08005993
 800562c:	08005ac1 	.word	0x08005ac1
 8005630:	08005ac1 	.word	0x08005ac1
 8005634:	08005ac1 	.word	0x08005ac1
 8005638:	08005ac1 	.word	0x08005ac1
 800563c:	08005ac1 	.word	0x08005ac1
 8005640:	08005ac1 	.word	0x08005ac1
 8005644:	08005ac1 	.word	0x08005ac1
 8005648:	08005ac1 	.word	0x08005ac1
 800564c:	08005ac1 	.word	0x08005ac1
 8005650:	08005ac1 	.word	0x08005ac1
 8005654:	08005ac1 	.word	0x08005ac1
 8005658:	08005ac1 	.word	0x08005ac1
 800565c:	08005781 	.word	0x08005781
 8005660:	08005ac1 	.word	0x08005ac1
 8005664:	08005ac1 	.word	0x08005ac1
 8005668:	08005ac1 	.word	0x08005ac1
 800566c:	08005ac1 	.word	0x08005ac1
 8005670:	08005ac1 	.word	0x08005ac1
 8005674:	08005ac1 	.word	0x08005ac1
 8005678:	08005ac1 	.word	0x08005ac1
 800567c:	08005ac1 	.word	0x08005ac1
 8005680:	080056e1 	.word	0x080056e1
 8005684:	08005781 	.word	0x08005781
 8005688:	080056f9 	.word	0x080056f9
 800568c:	0800570f 	.word	0x0800570f
 8005690:	0800594b 	.word	0x0800594b
 8005694:	0800594b 	.word	0x0800594b
 8005698:	0800594b 	.word	0x0800594b
 800569c:	08005ac1 	.word	0x08005ac1
 80056a0:	0800570f 	.word	0x0800570f
 80056a4:	08005ac1 	.word	0x08005ac1
 80056a8:	08005993 	.word	0x08005993
 80056ac:	08005ac1 	.word	0x08005ac1
 80056b0:	08005ac1 	.word	0x08005ac1
 80056b4:	08005971 	.word	0x08005971
 80056b8:	08005781 	.word	0x08005781
 80056bc:	08005917 	.word	0x08005917
 80056c0:	08005ac1 	.word	0x08005ac1
 80056c4:	08005ac1 	.word	0x08005ac1
 80056c8:	080058d1 	.word	0x080058d1
 80056cc:	08005ac1 	.word	0x08005ac1
 80056d0:	08005781 	.word	0x08005781
 80056d4:	08005ac1 	.word	0x08005ac1
 80056d8:	08005ac1 	.word	0x08005ac1
 80056dc:	08005781 	.word	0x08005781
            case 'a':
            case 'A':
                /* Double in hexadecimal notation */
                (void)va_arg(arg, double);    /* Read argument to ignore it and move to next one */
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	3307      	adds	r3, #7
 80056e4:	f023 0307 	bic.w	r3, r3, #7
 80056e8:	3308      	adds	r3, #8
 80056ea:	603b      	str	r3, [r7, #0]
                prv_out_str_raw(p, "NaN", 3); /* Print string */
 80056ec:	2203      	movs	r2, #3
 80056ee:	499f      	ldr	r1, [pc, #636]	; (800596c <prv_format+0x770>)
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fe fc62 	bl	8003fba <prv_out_str_raw>
                break;
 80056f6:	e1f0      	b.n	8005ada <prv_format+0x8de>
            case 'c':
                p->out_fn(p, (char)va_arg(arg, int));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	695a      	ldr	r2, [r3, #20]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	1d19      	adds	r1, r3, #4
 8005700:	6039      	str	r1, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4790      	blx	r2
                break;
 800570c:	e1e5      	b.n	8005ada <prv_format+0x8de>
#if LWPRINTF_CFG_SUPPORT_TYPE_INT
            case 'd':
            case 'i': {
                /* Check for different length parameters */
                p->m.base = 10;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	220a      	movs	r2, #10
 8005712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                if (p->m.flags.longlong == 0) {
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	7f5b      	ldrb	r3, [r3, #29]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d108      	bne.n	8005736 <prv_format+0x53a>
                    prv_signed_int_to_str(p, (signed int)va_arg(arg, signed int));
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	1d1a      	adds	r2, r3, #4
 8005728:	603a      	str	r2, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff f843 	bl	80047ba <prv_signed_int_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (p->m.flags.longlong == 2) {
                    prv_signed_longlong_int_to_str(p, (signed long long int)va_arg(arg, signed long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 8005734:	e1cc      	b.n	8005ad0 <prv_format+0x8d4>
                } else if (p->m.flags.longlong == 1) {
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	7f5b      	ldrb	r3, [r3, #29]
 800573a:	f003 0303 	and.w	r3, r3, #3
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b01      	cmp	r3, #1
 8005742:	d108      	bne.n	8005756 <prv_format+0x55a>
                    prv_signed_long_int_to_str(p, (signed long int)va_arg(arg, signed long int));
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	1d1a      	adds	r2, r3, #4
 8005748:	603a      	str	r2, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff f84d 	bl	80047ee <prv_signed_long_int_to_str>
                break;
 8005754:	e1bc      	b.n	8005ad0 <prv_format+0x8d4>
                } else if (p->m.flags.longlong == 2) {
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	7f5b      	ldrb	r3, [r3, #29]
 800575a:	f003 0303 	and.w	r3, r3, #3
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	f040 81b5 	bne.w	8005ad0 <prv_format+0x8d4>
                    prv_signed_longlong_int_to_str(p, (signed long long int)va_arg(arg, signed long long int));
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	3307      	adds	r3, #7
 800576a:	f023 0307 	bic.w	r3, r3, #7
 800576e:	f103 0208 	add.w	r2, r3, #8
 8005772:	603a      	str	r2, [r7, #0]
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff f852 	bl	8004822 <prv_signed_longlong_int_to_str>
                break;
 800577e:	e1a7      	b.n	8005ad0 <prv_format+0x8d4>
            case 'B':
            case 'o':
            case 'u':
            case 'x':
            case 'X':
                if (*fmt == 'b' || *fmt == 'B') {
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b62      	cmp	r3, #98	; 0x62
 8005786:	d003      	beq.n	8005790 <prv_format+0x594>
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b42      	cmp	r3, #66	; 0x42
 800578e:	d104      	bne.n	800579a <prv_format+0x59e>
                    p->m.base = 2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005798:	e01d      	b.n	80057d6 <prv_format+0x5da>
                } else if (*fmt == 'o') {
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	2b6f      	cmp	r3, #111	; 0x6f
 80057a0:	d104      	bne.n	80057ac <prv_format+0x5b0>
                    p->m.base = 8;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2208      	movs	r2, #8
 80057a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80057aa:	e014      	b.n	80057d6 <prv_format+0x5da>
                } else if (*fmt == 'u') {
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b75      	cmp	r3, #117	; 0x75
 80057b2:	d104      	bne.n	80057be <prv_format+0x5c2>
                    p->m.base = 10;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	220a      	movs	r2, #10
 80057b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80057bc:	e00b      	b.n	80057d6 <prv_format+0x5da>
                } else if (*fmt == 'x' || *fmt == 'X') {
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b78      	cmp	r3, #120	; 0x78
 80057c4:	d003      	beq.n	80057ce <prv_format+0x5d2>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	2b58      	cmp	r3, #88	; 0x58
 80057cc:	d103      	bne.n	80057d6 <prv_format+0x5da>
                    p->m.base = 16;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2210      	movs	r2, #16
 80057d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                }
                p->m.flags.space = 0; /* Space flag has no meaning here */
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	7f13      	ldrb	r3, [r2, #28]
 80057da:	f36f 0382 	bfc	r3, #2, #1
 80057de:	7713      	strb	r3, [r2, #28]

                /* Check for different length parameters */
                if (0) {

                } else if (p->m.flags.sz_t) {
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	7f5b      	ldrb	r3, [r3, #29]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <prv_format+0x604>
                    prv_sizet_to_str(p, (size_t)va_arg(arg, size_t));
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	1d1a      	adds	r2, r3, #4
 80057f2:	603a      	str	r2, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f7fe fe83 	bl	8004504 <prv_sizet_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (p->m.flags.longlong == 2) {
                    prv_unsigned_longlong_int_to_str(p, (unsigned long long int)va_arg(arg, unsigned long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 80057fe:	e169      	b.n	8005ad4 <prv_format+0x8d8>
                } else if (p->m.flags.umax_t) {
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	7f5b      	ldrb	r3, [r3, #29]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00c      	beq.n	8005828 <prv_format+0x62c>
                    prv_umaxt_to_str(p, (uintmax_t)va_arg(arg, uintmax_t));
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	3307      	adds	r3, #7
 8005812:	f023 0307 	bic.w	r3, r3, #7
 8005816:	f103 0208 	add.w	r2, r3, #8
 800581a:	603a      	str	r2, [r7, #0]
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7fe fef9 	bl	8004618 <prv_umaxt_to_str>
                break;
 8005826:	e155      	b.n	8005ad4 <prv_format+0x8d8>
                } else if (p->m.flags.longlong == 0 || p->m.base == 2) {
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	7f5b      	ldrb	r3, [r3, #29]
 800582c:	f003 0303 	and.w	r3, r3, #3
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <prv_format+0x644>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800583c:	2b02      	cmp	r3, #2
 800583e:	d122      	bne.n	8005886 <prv_format+0x68a>
                    switch (p->m.flags.char_short) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	7f5b      	ldrb	r3, [r3, #29]
 8005844:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b01      	cmp	r3, #1
 800584c:	d008      	beq.n	8005860 <prv_format+0x664>
 800584e:	2b02      	cmp	r3, #2
 8005850:	d10d      	bne.n	800586e <prv_format+0x672>
                            v = (unsigned int)((unsigned char)va_arg(arg, unsigned int));
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	1d1a      	adds	r2, r3, #4
 8005856:	603a      	str	r2, [r7, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 800585e:	e00c      	b.n	800587a <prv_format+0x67e>
                            v = (unsigned int)((unsigned short int)va_arg(arg, unsigned int));
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	1d1a      	adds	r2, r3, #4
 8005864:	603a      	str	r2, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 800586c:	e005      	b.n	800587a <prv_format+0x67e>
                            v = (unsigned int)((unsigned int)va_arg(arg, unsigned int));
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	1d1a      	adds	r2, r3, #4
 8005872:	603a      	str	r2, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 8005878:	bf00      	nop
                    prv_unsigned_int_to_str(p, v);
 800587a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7fe fbd2 	bl	8004026 <prv_unsigned_int_to_str>
                } else if (p->m.flags.longlong == 0 || p->m.base == 2) {
 8005882:	bf00      	nop
                break;
 8005884:	e126      	b.n	8005ad4 <prv_format+0x8d8>
                } else if (p->m.flags.longlong == 1) {
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	7f5b      	ldrb	r3, [r3, #29]
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	d108      	bne.n	80058a6 <prv_format+0x6aa>
                    prv_unsigned_long_int_to_str(p, (unsigned long int)va_arg(arg, unsigned long int));
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	1d1a      	adds	r2, r3, #4
 8005898:	603a      	str	r2, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4619      	mov	r1, r3
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fe fc4b 	bl	800413a <prv_unsigned_long_int_to_str>
                break;
 80058a4:	e116      	b.n	8005ad4 <prv_format+0x8d8>
                } else if (p->m.flags.longlong == 2) {
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	7f5b      	ldrb	r3, [r3, #29]
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	f040 810f 	bne.w	8005ad4 <prv_format+0x8d8>
                    prv_unsigned_longlong_int_to_str(p, (unsigned long long int)va_arg(arg, unsigned long long int));
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	3307      	adds	r3, #7
 80058ba:	f023 0307 	bic.w	r3, r3, #7
 80058be:	f103 0208 	add.w	r2, r3, #8
 80058c2:	603a      	str	r2, [r7, #0]
 80058c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fe fcc0 	bl	800424e <prv_unsigned_longlong_int_to_str>
                break;
 80058ce:	e101      	b.n	8005ad4 <prv_format+0x8d8>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_INT */
#if LWPRINTF_CFG_SUPPORT_TYPE_STRING
            case 's': {
                const char* b = va_arg(arg, const char*);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	1d1a      	adds	r2, r3, #4
 80058d4:	603a      	str	r2, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	61bb      	str	r3, [r7, #24]
                 * - If precision is given, max len is up to precision value
                 * - if user selects write to buffer, go up to buffer size (-1 actually, but handled by write function)
                 * - Otherwise use max available system length
                 */
                prv_out_str(p, b,
                            strnlen(b, p->m.flags.precision ? (size_t)p->m.precision
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7f1b      	ldrb	r3, [r3, #28]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	b2db      	uxtb	r3, r3
                prv_out_str(p, b,
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <prv_format+0x6f2>
                            strnlen(b, p->m.flags.precision ? (size_t)p->m.precision
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	e008      	b.n	8005900 <prv_format+0x704>
                                                            : (p->buff != NULL ? p->buff_size : SIZE_MAX)));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <prv_format+0x700>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	e001      	b.n	8005900 <prv_format+0x704>
 80058fc:	f04f 33ff 	mov.w	r3, #4294967295
                prv_out_str(p, b,
 8005900:	4619      	mov	r1, r3
 8005902:	69b8      	ldr	r0, [r7, #24]
 8005904:	f002 f8f4 	bl	8007af0 <strnlen>
 8005908:	4603      	mov	r3, r0
 800590a:	461a      	mov	r2, r3
 800590c:	69b9      	ldr	r1, [r7, #24]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fe fb71 	bl	8003ff6 <prv_out_str>
                break;
 8005914:	e0e1      	b.n	8005ada <prv_format+0x8de>
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_STRING */
#if LWPRINTF_CFG_SUPPORT_TYPE_POINTER
            case 'p': {
                p->m.base = 16;                     /* Go to hex format */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2210      	movs	r2, #16
 800591a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                p->m.flags.uc = 0;                  /* Uppercase characters */
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	7f53      	ldrb	r3, [r2, #29]
 8005922:	f36f 1386 	bfc	r3, #6, #1
 8005926:	7753      	strb	r3, [r2, #29]
                p->m.flags.zero = 1;                /* Zero padding */
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	7f13      	ldrb	r3, [r2, #28]
 800592c:	f043 0308 	orr.w	r3, r3, #8
 8005930:	7713      	strb	r3, [r2, #28]
                p->m.width = sizeof(uintptr_t) * 2; /* Number is in hex format and byte is represented with 2 letters */
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2208      	movs	r2, #8
 8005936:	625a      	str	r2, [r3, #36]	; 0x24

                prv_uintptr_to_str(p, (uintptr_t)va_arg(arg, uintptr_t));
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	1d1a      	adds	r2, r3, #4
 800593c:	603a      	str	r2, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7fe fd54 	bl	80043f0 <prv_uintptr_to_str>
                break;
 8005948:	e0c7      	b.n	8005ada <prv_format+0x8de>
            case 'E':
            case 'g':
            case 'G':
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
                /* Double number in different format. Final output depends on type of format */
                prv_double_to_str(p, (double)va_arg(arg, double));
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	3307      	adds	r3, #7
 800594e:	f023 0307 	bic.w	r3, r3, #7
 8005952:	f103 0208 	add.w	r2, r3, #8
 8005956:	603a      	str	r2, [r7, #0]
 8005958:	ed93 7b00 	vldr	d7, [r3]
 800595c:	eeb0 0a47 	vmov.f32	s0, s14
 8005960:	eef0 0a67 	vmov.f32	s1, s15
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7ff f8df 	bl	8004b28 <prv_double_to_str>
                break;
 800596a:	e0b6      	b.n	8005ada <prv_format+0x8de>
 800596c:	08008188 	.word	0x08008188
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_FLOAT */
            case 'n': {
                int* ptr = (void*)va_arg(arg, int*);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	1d1a      	adds	r2, r3, #4
 8005974:	603a      	str	r2, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	617b      	str	r3, [r7, #20]
                *ptr = p->n; /* Write current length */
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	461a      	mov	r2, r3
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	601a      	str	r2, [r3, #0]

                break;
 8005984:	e0a9      	b.n	8005ada <prv_format+0x8de>
            }
            case '%':
                p->out_fn(p, '%');
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	2125      	movs	r1, #37	; 0x25
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	4798      	blx	r3
                break;
 8005990:	e0a3      	b.n	8005ada <prv_format+0x8de>
             * char arr[] = {0, 1, 2, 3, 255};
             * "%5K" would produce 00010203FF
             */
            case 'k':
            case 'K': {
                unsigned char* ptr =
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	1d1a      	adds	r2, r3, #4
 8005996:	603a      	str	r2, [r7, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    (void*)va_arg(arg, unsigned char*); /* Get input parameter as unsigned char pointer */
                int len = p->m.width, full_width;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	613b      	str	r3, [r7, #16]
                uint8_t is_space = p->m.flags.space == 1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	7f1b      	ldrb	r3, [r3, #28]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bf14      	ite	ne
 80059b0:	2301      	movne	r3, #1
 80059b2:	2300      	moveq	r3, #0
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	73fb      	strb	r3, [r7, #15]

                if (ptr == NULL || len == 0) {
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 808c 	beq.w	8005ad8 <prv_format+0x8dc>
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8088 	beq.w	8005ad8 <prv_format+0x8dc>
                    break;
                }

                p->m.flags.zero = 1;  /* Prepend with zeros if necessary */
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	7f13      	ldrb	r3, [r2, #28]
 80059cc:	f043 0308 	orr.w	r3, r3, #8
 80059d0:	7713      	strb	r3, [r2, #28]
                p->m.width = 0;       /* No width parameter */
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	625a      	str	r2, [r3, #36]	; 0x24
                p->m.base = 16;       /* Hex format */
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2210      	movs	r2, #16
 80059dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                p->m.flags.space = 0; /* Delete any flag for space */
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	7f13      	ldrb	r3, [r2, #28]
 80059e4:	f36f 0382 	bfc	r3, #2, #1
 80059e8:	7713      	strb	r3, [r2, #28]

                /* Full width of digits to print */
                full_width = len * (2 + (int)is_space);
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	1c9a      	adds	r2, r3, #2
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	62bb      	str	r3, [r7, #40]	; 0x28
                if (is_space && full_width > 0) {
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <prv_format+0x80c>
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	dd02      	ble.n	8005a08 <prv_format+0x80c>
                    --full_width; /* Remove space after last number */
 8005a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a04:	3b01      	subs	r3, #1
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28
                }

                /* Output byte by byte w/o hex prefix */
                prv_out_str_before(p, full_width);
 8005a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7fe f984 	bl	8003d1a <prv_out_str_before>
                for (int i = 0; i < len; ++i, ++ptr) {
 8005a12:	2300      	movs	r3, #0
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
 8005a16:	e049      	b.n	8005aac <prv_format+0x8b0>
                    uint8_t d;

                    d = (*ptr >> 0x04) & 0x0F; /* Print MSB */
 8005a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	091b      	lsrs	r3, r3, #4
 8005a1e:	73bb      	strb	r3, [r7, #14]
                    p->out_fn(p, (char)(d) + (d >= 10 ? ((p->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	695a      	ldr	r2, [r3, #20]
 8005a24:	7bbb      	ldrb	r3, [r7, #14]
 8005a26:	2b09      	cmp	r3, #9
 8005a28:	d90a      	bls.n	8005a40 <prv_format+0x844>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	7f5b      	ldrb	r3, [r3, #29]
 8005a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <prv_format+0x840>
 8005a38:	2337      	movs	r3, #55	; 0x37
 8005a3a:	e002      	b.n	8005a42 <prv_format+0x846>
 8005a3c:	2357      	movs	r3, #87	; 0x57
 8005a3e:	e000      	b.n	8005a42 <prv_format+0x846>
 8005a40:	2330      	movs	r3, #48	; 0x30
 8005a42:	7bb9      	ldrb	r1, [r7, #14]
 8005a44:	440b      	add	r3, r1
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4790      	blx	r2
                    d = *ptr & 0x0F; /* Print LSB */
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	73bb      	strb	r3, [r7, #14]
                    p->out_fn(p, (char)(d) + (d >= 10 ? ((p->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	695a      	ldr	r2, [r3, #20]
 8005a5c:	7bbb      	ldrb	r3, [r7, #14]
 8005a5e:	2b09      	cmp	r3, #9
 8005a60:	d90a      	bls.n	8005a78 <prv_format+0x87c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	7f5b      	ldrb	r3, [r3, #29]
 8005a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <prv_format+0x878>
 8005a70:	2337      	movs	r3, #55	; 0x37
 8005a72:	e002      	b.n	8005a7a <prv_format+0x87e>
 8005a74:	2357      	movs	r3, #87	; 0x57
 8005a76:	e000      	b.n	8005a7a <prv_format+0x87e>
 8005a78:	2330      	movs	r3, #48	; 0x30
 8005a7a:	7bb9      	ldrb	r1, [r7, #14]
 8005a7c:	440b      	add	r3, r1
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	4619      	mov	r1, r3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4790      	blx	r2

                    if (is_space && i < (len - 1)) {
 8005a86:	7bfb      	ldrb	r3, [r7, #15]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d009      	beq.n	8005aa0 <prv_format+0x8a4>
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a92:	429a      	cmp	r2, r3
 8005a94:	da04      	bge.n	8005aa0 <prv_format+0x8a4>
                        p->out_fn(p, ' '); /* Generate space between numbers */
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	2120      	movs	r1, #32
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4798      	blx	r3
                for (int i = 0; i < len; ++i, ++ptr) {
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	dbb1      	blt.n	8005a18 <prv_format+0x81c>
                    }
                }
                prv_out_str_after(p, full_width);
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7fe fa5c 	bl	8003f76 <prv_out_str_after>
                break;
 8005abe:	e00c      	b.n	8005ada <prv_format+0x8de>
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_BYTE_ARRAY */
            default:
                p->out_fn(p, *fmt);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	68ba      	ldr	r2, [r7, #8]
 8005ac6:	7812      	ldrb	r2, [r2, #0]
 8005ac8:	4611      	mov	r1, r2
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	4798      	blx	r3
 8005ace:	e004      	b.n	8005ada <prv_format+0x8de>
                break;
 8005ad0:	bf00      	nop
 8005ad2:	e002      	b.n	8005ada <prv_format+0x8de>
                break;
 8005ad4:	bf00      	nop
 8005ad6:	e000      	b.n	8005ada <prv_format+0x8de>
        }
        ++fmt;
 8005ad8:	bf00      	nop
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60bb      	str	r3, [r7, #8]
    while (fmt != NULL && *fmt != '\0') {
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d006      	beq.n	8005af4 <prv_format+0x8f8>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f47f ab93 	bne.w	8005216 <prv_format+0x1a>
 8005af0:	e000      	b.n	8005af4 <prv_format+0x8f8>
            break;
 8005af2:	bf00      	nop
    }
    p->out_fn(p, '\0'); /* Output last zero number */
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	2100      	movs	r1, #0
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	4798      	blx	r3
#if LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT
    if (IS_PRINT_MODE(p)) { /* Mutex only for print operation */
        lwprintf_sys_mutex_release(&p->lwobj->mutex);
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */
    return 1;
 8005afe:	2301      	movs	r3, #1
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3738      	adds	r7, #56	; 0x38
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <lwprintf_init_ex>:
 * \param[in,out]   lwobj: LwPRINTF working instance
 * \param[in]       out_fn: Output function used for print operation
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwprintf_init_ex(lwprintf_t* lwobj, lwprintf_output_fn out_fn) {
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
    LWPRINTF_GET_LWOBJ(lwobj)->out_fn = out_fn;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <lwprintf_init_ex+0x14>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	e000      	b.n	8005b1e <lwprintf_init_ex+0x16>
 8005b1c:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <lwprintf_init_ex+0x28>)
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	601a      	str	r2, [r3, #0]
    if (lwprintf_sys_mutex_isvalid(&LWPRINTF_GET_LWOBJ(lwobj)->mutex)
        || !lwprintf_sys_mutex_create(&LWPRINTF_GET_LWOBJ(lwobj)->mutex)) {
        return 0;
    }
#endif /* LWPRINTF_CFG_OS */
    return 1;
 8005b22:	2301      	movs	r3, #1
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	200004b0 	.word	0x200004b0

08005b34 <lwprintf_vprintf_ex>:
 *                      `va_list` is a special type defined in `<cstdarg>`.
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_vprintf_ex(lwprintf_t* const lwobj, const char* format, va_list arg) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b090      	sub	sp, #64	; 0x40
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
    lwprintf_int_t f = {
 8005b40:	f107 0314 	add.w	r3, r7, #20
 8005b44:	222c      	movs	r2, #44	; 0x2c
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f001 ffc1 	bl	8007ad0 <memset>
        .lwobj = LWPRINTF_GET_LWOBJ(lwobj),
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <lwprintf_vprintf_ex+0x24>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	e000      	b.n	8005b5a <lwprintf_vprintf_ex+0x26>
 8005b58:	4b0b      	ldr	r3, [pc, #44]	; (8005b88 <lwprintf_vprintf_ex+0x54>)
    lwprintf_int_t f = {
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	61bb      	str	r3, [r7, #24]
 8005b60:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <lwprintf_vprintf_ex+0x58>)
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
        .fmt = format,
        .buff = NULL,
        .buff_size = 0,
    };
    /* For direct print, output function must be set by user */
    if (f.lwobj->out_fn == NULL) {
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <lwprintf_vprintf_ex+0x3c>
        return 0;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e006      	b.n	8005b7e <lwprintf_vprintf_ex+0x4a>
    }
    prv_format(&f, arg);
 8005b70:	f107 0314 	add.w	r3, r7, #20
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff fb40 	bl	80051fc <prv_format>
    return f.n;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3740      	adds	r7, #64	; 0x40
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	200004b0 	.word	0x200004b0
 8005b8c:	08003c71 	.word	0x08003c71

08005b90 <lwprintf_printf_ex>:
 * \param[in]       ...: Optional arguments for format string
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_printf_ex(lwprintf_t* const lwobj, const char* format, ...) {
 8005b90:	b40e      	push	{r1, r2, r3}
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
    va_list va;
    int n;

    va_start(va, format);
 8005b9a:	f107 0320 	add.w	r3, r7, #32
 8005b9e:	60bb      	str	r3, [r7, #8]
    n = lwprintf_vprintf_ex(lwobj, format, va);
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	69f9      	ldr	r1, [r7, #28]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff ffc5 	bl	8005b34 <lwprintf_vprintf_ex>
 8005baa:	60f8      	str	r0, [r7, #12]
    va_end(va);

    return n;
 8005bac:	68fb      	ldr	r3, [r7, #12]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bb8:	b003      	add	sp, #12
 8005bba:	4770      	bx	lr

08005bbc <a_mpu6050_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu6050_iic_read(mpu6050_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005bbc:	b590      	push	{r4, r7, lr}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	460b      	mov	r3, r1
 8005bca:	72fb      	strb	r3, [r7, #11]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	813b      	strh	r3, [r7, #8]
    if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	68dc      	ldr	r4, [r3, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	7818      	ldrb	r0, [r3, #0]
 8005bd8:	893b      	ldrh	r3, [r7, #8]
 8005bda:	7af9      	ldrb	r1, [r7, #11]
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	47a0      	blx	r4
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <a_mpu6050_iic_read+0x2e>
    {
        return 1;                                                                 /* return error */
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <a_mpu6050_iic_read+0x30>
    }
    else
    {
        return 0;                                                                 /* success return 0 */
 8005bea:	2300      	movs	r3, #0
    }
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd90      	pop	{r4, r7, pc}

08005bf4 <a_mpu6050_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu6050_iic_write(mpu6050_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005bf4:	b590      	push	{r4, r7, lr}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	607a      	str	r2, [r7, #4]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	460b      	mov	r3, r1
 8005c02:	72fb      	strb	r3, [r7, #11]
 8005c04:	4613      	mov	r3, r2
 8005c06:	813b      	strh	r3, [r7, #8]
    if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691c      	ldr	r4, [r3, #16]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	7818      	ldrb	r0, [r3, #0]
 8005c10:	893b      	ldrh	r3, [r7, #8]
 8005c12:	7af9      	ldrb	r1, [r7, #11]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	47a0      	blx	r4
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <a_mpu6050_iic_write+0x2e>
    {
        return 1;                                                                  /* return error */
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <a_mpu6050_iic_write+0x30>
    }
    else
    {
        return 0;                                                                  /* success return 0 */
 8005c22:	2300      	movs	r3, #0
    }
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd90      	pop	{r4, r7, pc}

08005c2c <mpu6050_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6050_set_addr_pin(mpu6050_handle_t *handle, mpu6050_address_t addr_pin)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	460b      	mov	r3, r1
 8005c36:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <mpu6050_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 8005c3e:	2302      	movs	r3, #2
 8005c40:	e003      	b.n	8005c4a <mpu6050_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	78fa      	ldrb	r2, [r7, #3]
 8005c46:	701a      	strb	r2, [r3, #0]

    return 0;                                    /* success return 0 */
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
	...

08005c58 <mpu6050_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu6050_init(mpu6050_handle_t *handle)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;

    if (handle == NULL)                                                             /* check handle */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <mpu6050_init+0x12>
    {
        return 2;                                                                   /* return error */
 8005c66:	2302      	movs	r3, #2
 8005c68:	e0bc      	b.n	8005de4 <mpu6050_init+0x18c>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <mpu6050_init+0x1e>
    {
        return 3;                                                                   /* return error */
 8005c72:	2303      	movs	r3, #3
 8005c74:	e0b6      	b.n	8005de4 <mpu6050_init+0x18c>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d105      	bne.n	8005c8a <mpu6050_init+0x32>
    {
        handle->debug_print("mpu6050: iic_init is null.\n");                        /* iic_init is null */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	485a      	ldr	r0, [pc, #360]	; (8005dec <mpu6050_init+0x194>)
 8005c84:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8005c86:	2303      	movs	r3, #3
 8005c88:	e0ac      	b.n	8005de4 <mpu6050_init+0x18c>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d105      	bne.n	8005c9e <mpu6050_init+0x46>
    {
        handle->debug_print("mpu6050: iic_deinit is null.\n");                      /* iic_deinit is null */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	4856      	ldr	r0, [pc, #344]	; (8005df0 <mpu6050_init+0x198>)
 8005c98:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e0a2      	b.n	8005de4 <mpu6050_init+0x18c>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d105      	bne.n	8005cb2 <mpu6050_init+0x5a>
    {
        handle->debug_print("mpu6050: iic_read is null.\n");                        /* iic_read is null */
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	4852      	ldr	r0, [pc, #328]	; (8005df4 <mpu6050_init+0x19c>)
 8005cac:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e098      	b.n	8005de4 <mpu6050_init+0x18c>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d105      	bne.n	8005cc6 <mpu6050_init+0x6e>
    {
        handle->debug_print("mpu6050: iic_write is null.\n");                       /* iic_write is null */
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	484e      	ldr	r0, [pc, #312]	; (8005df8 <mpu6050_init+0x1a0>)
 8005cc0:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e08e      	b.n	8005de4 <mpu6050_init+0x18c>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d105      	bne.n	8005cda <mpu6050_init+0x82>
    {
        handle->debug_print("mpu6050: delay_ms is null.\n");                        /* delay_ms is null */
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	484a      	ldr	r0, [pc, #296]	; (8005dfc <mpu6050_init+0x1a4>)
 8005cd4:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e084      	b.n	8005de4 <mpu6050_init+0x18c>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d105      	bne.n	8005cee <mpu6050_init+0x96>
    {
        handle->debug_print("mpu6050: receive_callback is null.\n");                /* receive_callback is null */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	4846      	ldr	r0, [pc, #280]	; (8005e00 <mpu6050_init+0x1a8>)
 8005ce8:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8005cea:	2303      	movs	r3, #3
 8005cec:	e07a      	b.n	8005de4 <mpu6050_init+0x18c>
    }

    res = handle->iic_init();                                                       /* iic init */
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	4798      	blx	r3
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8005cf8:	7afb      	ldrb	r3, [r7, #11]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <mpu6050_init+0xb2>
    {
        handle->debug_print("mpu6050: iic init failed.\n");                         /* iic init failed */
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	4840      	ldr	r0, [pc, #256]	; (8005e04 <mpu6050_init+0x1ac>)
 8005d04:	4798      	blx	r3

        return 1;                                                                   /* return error */
 8005d06:	2301      	movs	r3, #1
 8005d08:	e06c      	b.n	8005de4 <mpu6050_init+0x18c>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_WHO_AM_I, &prev, 1);               /* read who am I */
 8005d0a:	f107 020a 	add.w	r2, r7, #10
 8005d0e:	2301      	movs	r3, #1
 8005d10:	2175      	movs	r1, #117	; 0x75
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff ff52 	bl	8005bbc <a_mpu6050_iic_read>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8005d1c:	7afb      	ldrb	r3, [r7, #11]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d008      	beq.n	8005d34 <mpu6050_init+0xdc>
    {
        handle->debug_print("mpu6050: read who am i failed.\n");                    /* read who am I failed */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	4838      	ldr	r0, [pc, #224]	; (8005e08 <mpu6050_init+0x1b0>)
 8005d28:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	4798      	blx	r3

        return 5;                                                                   /* return error */
 8005d30:	2305      	movs	r3, #5
 8005d32:	e057      	b.n	8005de4 <mpu6050_init+0x18c>
    }
    if (prev != 0x68)                                                               /* check the id */
 8005d34:	7abb      	ldrb	r3, [r7, #10]
 8005d36:	2b68      	cmp	r3, #104	; 0x68
 8005d38:	d008      	beq.n	8005d4c <mpu6050_init+0xf4>
    {
        handle->debug_print("mpu6050: id is invalid.\n");                           /* id is invalid */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	4833      	ldr	r0, [pc, #204]	; (8005e0c <mpu6050_init+0x1b4>)
 8005d40:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	4798      	blx	r3

        return 5;                                                                   /* return error */
 8005d48:	2305      	movs	r3, #5
 8005d4a:	e04b      	b.n	8005de4 <mpu6050_init+0x18c>
    }

    prev = 1 << 7;                                                                  /* reset the device */
 8005d4c:	2380      	movs	r3, #128	; 0x80
 8005d4e:	72bb      	strb	r3, [r7, #10]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8005d50:	f107 020a 	add.w	r2, r7, #10
 8005d54:	2301      	movs	r3, #1
 8005d56:	216b      	movs	r1, #107	; 0x6b
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f7ff ff4b 	bl	8005bf4 <a_mpu6050_iic_write>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8005d62:	7afb      	ldrb	r3, [r7, #11]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d008      	beq.n	8005d7a <mpu6050_init+0x122>
    {
        handle->debug_print("mpu6050: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	4828      	ldr	r0, [pc, #160]	; (8005e10 <mpu6050_init+0x1b8>)
 8005d6e:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	4798      	blx	r3

        return 4;                                                                   /* return error */
 8005d76:	2304      	movs	r3, #4
 8005d78:	e034      	b.n	8005de4 <mpu6050_init+0x18c>
    }
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 8005d7a:	2364      	movs	r3, #100	; 0x64
 8005d7c:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8005d7e:	e029      	b.n	8005dd4 <mpu6050_init+0x17c>
    {
        res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);         /* read pwr mgmt 1 */
 8005d80:	f107 020a 	add.w	r2, r7, #10
 8005d84:	2301      	movs	r3, #1
 8005d86:	216b      	movs	r1, #107	; 0x6b
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff ff17 	bl	8005bbc <a_mpu6050_iic_read>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8005d92:	7afb      	ldrb	r3, [r7, #11]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <mpu6050_init+0x152>
        {
            handle->debug_print("mpu6050: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	481d      	ldr	r0, [pc, #116]	; (8005e14 <mpu6050_init+0x1bc>)
 8005d9e:	4798      	blx	r3
            (void)handle->iic_deinit();                                             /* iic deinit */
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	4798      	blx	r3

            return 4;                                                               /* return error */
 8005da6:	2304      	movs	r3, #4
 8005da8:	e01c      	b.n	8005de4 <mpu6050_init+0x18c>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 8005daa:	7abb      	ldrb	r3, [r7, #10]
 8005dac:	b25b      	sxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	db09      	blt.n	8005dc6 <mpu6050_init+0x16e>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            handle->dmp_inited = 0;                                                 /* flag closed */
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

            return 0;                                                               /* success return 0 */
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	e00e      	b.n	8005de4 <mpu6050_init+0x18c>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	200a      	movs	r0, #10
 8005dcc:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1d2      	bne.n	8005d80 <mpu6050_init+0x128>
    }

    handle->debug_print("mpu6050: reset failed.\n");                                /* reset failed */
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	480e      	ldr	r0, [pc, #56]	; (8005e18 <mpu6050_init+0x1c0>)
 8005de0:	4798      	blx	r3

    return 4;                                                                       /* return error */
 8005de2:	2304      	movs	r3, #4
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	080085a8 	.word	0x080085a8
 8005df0:	080085c4 	.word	0x080085c4
 8005df4:	080085e4 	.word	0x080085e4
 8005df8:	08008600 	.word	0x08008600
 8005dfc:	08008620 	.word	0x08008620
 8005e00:	0800863c 	.word	0x0800863c
 8005e04:	08008660 	.word	0x08008660
 8005e08:	0800867c 	.word	0x0800867c
 8005e0c:	0800869c 	.word	0x0800869c
 8005e10:	080086b8 	.word	0x080086b8
 8005e14:	080086dc 	.word	0x080086dc
 8005e18:	08008700 	.word	0x08008700

08005e1c <mpu6050_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu6050_deinit(mpu6050_handle_t *handle)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                             /* check handle */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <mpu6050_deinit+0x12>
    {
        return 2;                                                                   /* return error */
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e031      	b.n	8005e92 <mpu6050_deinit+0x76>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d001      	beq.n	8005e3c <mpu6050_deinit+0x20>
    {
        return 3;                                                                   /* return error */
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e02a      	b.n	8005e92 <mpu6050_deinit+0x76>
    }

    prev = (1 << 6) | (1 << 3) | (7 << 0);                                          /* enter sleep mode */
 8005e3c:	234f      	movs	r3, #79	; 0x4f
 8005e3e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8005e40:	f107 020e 	add.w	r2, r7, #14
 8005e44:	2301      	movs	r3, #1
 8005e46:	216b      	movs	r1, #107	; 0x6b
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff fed3 	bl	8005bf4 <a_mpu6050_iic_write>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <mpu6050_deinit+0x48>
    {
        handle->debug_print("mpu6050: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	480f      	ldr	r0, [pc, #60]	; (8005e9c <mpu6050_deinit+0x80>)
 8005e5e:	4798      	blx	r3

        return 4;                                                                   /* return error */
 8005e60:	2304      	movs	r3, #4
 8005e62:	e016      	b.n	8005e92 <mpu6050_deinit+0x76>
    }
    res = handle->iic_deinit();                                                     /* iic deinit */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4798      	blx	r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <mpu6050_deinit+0x64>
    {
        handle->debug_print("mpu6050: iic deinit failed.\n");                       /* iic deinit failed */
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	4809      	ldr	r0, [pc, #36]	; (8005ea0 <mpu6050_deinit+0x84>)
 8005e7a:	4798      	blx	r3

        return 1;                                                                   /* return error */
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e008      	b.n	8005e92 <mpu6050_deinit+0x76>
    }
    handle->inited = 0;                                                             /* flag closed */
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    handle->dmp_inited = 0;                                                         /* flag closed */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    return 0;                                                                       /* success return 0 */
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	080086b8 	.word	0x080086b8
 8005ea0:	08008718 	.word	0x08008718

08005ea4 <mpu6050_read>:
 *                - 6 fifo conf is error
 * @note          none
 */
uint8_t mpu6050_read(mpu6050_handle_t *handle, int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3], uint16_t *len)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;

    if (handle == NULL)                                                                            /* check handle */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d102      	bne.n	8005ebe <mpu6050_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 8005eb8:	2302      	movs	r3, #2
 8005eba:	f000 be7c 	b.w	8006bb6 <mpu6050_read+0xd12>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d002      	beq.n	8005ece <mpu6050_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 8005ec8:	2303      	movs	r3, #3
 8005eca:	f000 be74 	b.w	8006bb6 <mpu6050_read+0xd12>
    }
    if ((*len) == 0)                                                                               /* check length */
 8005ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d106      	bne.n	8005ee4 <mpu6050_read+0x40>
    {
        handle->debug_print("mpu6050: length is zero.\n");                                         /* length is zero */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	486a      	ldr	r0, [pc, #424]	; (8006084 <mpu6050_read+0x1e0>)
 8005edc:	4798      	blx	r3

        return 4;                                                                                  /* return error */
 8005ede:	2304      	movs	r3, #4
 8005ee0:	f000 be69 	b.w	8006bb6 <mpu6050_read+0xd12>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d006      	beq.n	8005efc <mpu6050_read+0x58>
    {
        handle->debug_print("mpu6050: dmp is running.\n");                                         /* dmp is running */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	4865      	ldr	r0, [pc, #404]	; (8006088 <mpu6050_read+0x1e4>)
 8005ef4:	4798      	blx	r3

        return 5;                                                                                  /* return error */
 8005ef6:	2305      	movs	r3, #5
 8005ef8:	f000 be5d 	b.w	8006bb6 <mpu6050_read+0xd12>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);                  /* read config */
 8005efc:	f107 0219 	add.w	r2, r7, #25
 8005f00:	2301      	movs	r3, #1
 8005f02:	216a      	movs	r1, #106	; 0x6a
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7ff fe59 	bl	8005bbc <a_mpu6050_iic_read>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8005f0e:	7f7b      	ldrb	r3, [r7, #29]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d006      	beq.n	8005f22 <mpu6050_read+0x7e>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                                  /* read user ctrl failed */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	485c      	ldr	r0, [pc, #368]	; (800608c <mpu6050_read+0x1e8>)
 8005f1a:	4798      	blx	r3

        return 1;                                                                                  /* return error */
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f000 be4a 	b.w	8006bb6 <mpu6050_read+0xd12>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);         /* read accel config */
 8005f22:	f107 0218 	add.w	r2, r7, #24
 8005f26:	2301      	movs	r3, #1
 8005f28:	211c      	movs	r1, #28
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff fe46 	bl	8005bbc <a_mpu6050_iic_read>
 8005f30:	4603      	mov	r3, r0
 8005f32:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8005f34:	7f7b      	ldrb	r3, [r7, #29]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d006      	beq.n	8005f48 <mpu6050_read+0xa4>
    {
        handle->debug_print("mpu6050: read accel config failed.\n");                               /* read accel config failed */
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	4854      	ldr	r0, [pc, #336]	; (8006090 <mpu6050_read+0x1ec>)
 8005f40:	4798      	blx	r3

        return 1;                                                                                  /* return error */
 8005f42:	2301      	movs	r3, #1
 8005f44:	f000 be37 	b.w	8006bb6 <mpu6050_read+0xd12>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);           /* read gyro config */
 8005f48:	f107 0217 	add.w	r2, r7, #23
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	211b      	movs	r1, #27
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f7ff fe33 	bl	8005bbc <a_mpu6050_iic_read>
 8005f56:	4603      	mov	r3, r0
 8005f58:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8005f5a:	7f7b      	ldrb	r3, [r7, #29]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d006      	beq.n	8005f6e <mpu6050_read+0xca>
    {
        handle->debug_print("mpu6050: read gyro config failed.\n");                                /* read gyro config failed */
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	484b      	ldr	r0, [pc, #300]	; (8006094 <mpu6050_read+0x1f0>)
 8005f66:	4798      	blx	r3

        return 1;                                                                                  /* return error */
 8005f68:	2301      	movs	r3, #1
 8005f6a:	f000 be24 	b.w	8006bb6 <mpu6050_read+0xd12>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 8005f6e:	7e3b      	ldrb	r3, [r7, #24]
 8005f70:	08db      	lsrs	r3, r3, #3
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f003 0303 	and.w	r3, r3, #3
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	763b      	strb	r3, [r7, #24]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
 8005f7e:	08db      	lsrs	r3, r3, #3
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0303 	and.w	r3, r3, #3
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	75fb      	strb	r3, [r7, #23]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 8005f8a:	7e7b      	ldrb	r3, [r7, #25]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 8430 	beq.w	80067f6 <mpu6050_read+0x952>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;

        res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&conf, 1);                /* read fifo enable */
 8005f96:	f107 0216 	add.w	r2, r7, #22
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	2123      	movs	r1, #35	; 0x23
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f7ff fe0c 	bl	8005bbc <a_mpu6050_iic_read>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8005fa8:	7f7b      	ldrb	r3, [r7, #29]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d006      	beq.n	8005fbc <mpu6050_read+0x118>
        {
            handle->debug_print("mpu6050: read fifo enable failed.\n");                            /* read fifo enable failed */
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	4839      	ldr	r0, [pc, #228]	; (8006098 <mpu6050_read+0x1f4>)
 8005fb4:	4798      	blx	r3

            return 1;                                                                              /* return error */
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	f000 bdfd 	b.w	8006bb6 <mpu6050_read+0xd12>
        }
        if (conf != 0x78)                                                                          /* check the conf */
 8005fbc:	7dbb      	ldrb	r3, [r7, #22]
 8005fbe:	2b78      	cmp	r3, #120	; 0x78
 8005fc0:	d006      	beq.n	8005fd0 <mpu6050_read+0x12c>
        {
            handle->debug_print("mpu6050: fifo conf is error.\n");                                 /* fifo conf is error */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	4835      	ldr	r0, [pc, #212]	; (800609c <mpu6050_read+0x1f8>)
 8005fc8:	4798      	blx	r3

            return 6;                                                                              /* return error */
 8005fca:	2306      	movs	r3, #6
 8005fcc:	f000 bdf3 	b.w	8006bb6 <mpu6050_read+0xd12>
        }

        res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_COUNTH, (uint8_t *)buf, 2);              /* read fifo count */
 8005fd0:	f107 0214 	add.w	r2, r7, #20
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	2172      	movs	r1, #114	; 0x72
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f7ff fdef 	bl	8005bbc <a_mpu6050_iic_read>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8005fe2:	7f7b      	ldrb	r3, [r7, #29]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d006      	beq.n	8005ff6 <mpu6050_read+0x152>
        {
            handle->debug_print("mpu6050: read fifo count failed.\n");                             /* read fifo count failed */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	482c      	ldr	r0, [pc, #176]	; (80060a0 <mpu6050_read+0x1fc>)
 8005fee:	4798      	blx	r3

            return 1;                                                                              /* return error */
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f000 bde0 	b.w	8006bb6 <mpu6050_read+0xd12>
        }
        count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                      /* set count */
 8005ff6:	7d3b      	ldrb	r3, [r7, #20]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	b21a      	sxth	r2, r3
 8005ffc:	7d7b      	ldrb	r3, [r7, #21]
 8005ffe:	b21b      	sxth	r3, r3
 8006000:	4313      	orrs	r3, r2
 8006002:	b21b      	sxth	r3, r3
 8006004:	837b      	strh	r3, [r7, #26]
        count = (count < 1024) ? count : 1024;                                                     /* just the counter */
 8006006:	8b7b      	ldrh	r3, [r7, #26]
 8006008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800600c:	bf28      	it	cs
 800600e:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8006012:	837b      	strh	r3, [r7, #26]
        count = (count < ((*len) * 12)) ? count : ((*len) * 12);                                   /* just outer buffer size */
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	4613      	mov	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	461a      	mov	r2, r3
 8006024:	8b7b      	ldrh	r3, [r7, #26]
 8006026:	4293      	cmp	r3, r2
 8006028:	bfa8      	it	ge
 800602a:	4613      	movge	r3, r2
 800602c:	837b      	strh	r3, [r7, #26]
        count = (count / 12) * 12;                                                                 /* 12 times */
 800602e:	8b7b      	ldrh	r3, [r7, #26]
 8006030:	4a1c      	ldr	r2, [pc, #112]	; (80060a4 <mpu6050_read+0x200>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	08db      	lsrs	r3, r3, #3
 8006038:	b29b      	uxth	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	0052      	lsls	r2, r2, #1
 800603e:	4413      	add	r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	837b      	strh	r3, [r7, #26]
        *len = count / 12;                                                                         /* set the output length */
 8006044:	8b7b      	ldrh	r3, [r7, #26]
 8006046:	4a17      	ldr	r2, [pc, #92]	; (80060a4 <mpu6050_read+0x200>)
 8006048:	fba2 2303 	umull	r2, r3, r2, r3
 800604c:	08db      	lsrs	r3, r3, #3
 800604e:	b29a      	uxth	r2, r3
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	801a      	strh	r2, [r3, #0]
        res = a_mpu6050_iic_read(handle, MPU6050_REG_R_W, handle->buf, count);                     /* read data */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800605a:	8b7b      	ldrh	r3, [r7, #26]
 800605c:	2174      	movs	r1, #116	; 0x74
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f7ff fdac 	bl	8005bbc <a_mpu6050_iic_read>
 8006064:	4603      	mov	r3, r0
 8006066:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006068:	7f7b      	ldrb	r3, [r7, #29]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d006      	beq.n	800607c <mpu6050_read+0x1d8>
        {
            handle->debug_print("mpu6050: read failed.\n");                                        /* read failed */
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	480d      	ldr	r0, [pc, #52]	; (80060a8 <mpu6050_read+0x204>)
 8006074:	4798      	blx	r3

            return 1;                                                                              /* return error */
 8006076:	2301      	movs	r3, #1
 8006078:	f000 bd9d 	b.w	8006bb6 <mpu6050_read+0xd12>
        }
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 800607c:	2300      	movs	r3, #0
 800607e:	83fb      	strh	r3, [r7, #30]
 8006080:	e3b1      	b.n	80067e6 <mpu6050_read+0x942>
 8006082:	bf00      	nop
 8006084:	08008738 	.word	0x08008738
 8006088:	08008298 	.word	0x08008298
 800608c:	08008560 	.word	0x08008560
 8006090:	08008518 	.word	0x08008518
 8006094:	0800853c 	.word	0x0800853c
 8006098:	08008754 	.word	0x08008754
 800609c:	08008778 	.word	0x08008778
 80060a0:	0800849c 	.word	0x0800849c
 80060a4:	aaaaaaab 	.word	0xaaaaaaab
 80060a8:	080084c0 	.word	0x080084c0
 80060ac:	46800000 	.word	0x46800000
 80060b0:	46000000 	.word	0x46000000
        {
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) |
 80060b4:	8bfa      	ldrh	r2, [r7, #30]
 80060b6:	4613      	mov	r3, r2
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	461a      	mov	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 1];                                  /* set raw accel x */
 80060cc:	8bfa      	ldrh	r2, [r7, #30]
 80060ce:	4613      	mov	r3, r2
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	3301      	adds	r3, #1
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80060e0:	b219      	sxth	r1, r3
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) |
 80060e2:	8bfa      	ldrh	r2, [r7, #30]
 80060e4:	4613      	mov	r3, r2
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	4413      	add	r3, r2
 80060ea:	005b      	lsls	r3, r3, #1
 80060ec:	461a      	mov	r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	4413      	add	r3, r2
 80060f2:	ea40 0201 	orr.w	r2, r0, r1
 80060f6:	b212      	sxth	r2, r2
 80060f8:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) |
 80060fa:	8bfa      	ldrh	r2, [r7, #30]
 80060fc:	4613      	mov	r3, r2
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	3302      	adds	r3, #2
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 3];                                  /* set raw accel y */
 8006112:	8bfa      	ldrh	r2, [r7, #30]
 8006114:	4613      	mov	r3, r2
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	4413      	add	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	3303      	adds	r3, #3
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4413      	add	r3, r2
 8006122:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006126:	b219      	sxth	r1, r3
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) |
 8006128:	8bfa      	ldrh	r2, [r7, #30]
 800612a:	4613      	mov	r3, r2
 800612c:	005b      	lsls	r3, r3, #1
 800612e:	4413      	add	r3, r2
 8006130:	005b      	lsls	r3, r3, #1
 8006132:	461a      	mov	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4413      	add	r3, r2
 8006138:	ea40 0201 	orr.w	r2, r0, r1
 800613c:	b212      	sxth	r2, r2
 800613e:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) |
 8006140:	8bfa      	ldrh	r2, [r7, #30]
 8006142:	4613      	mov	r3, r2
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	3304      	adds	r3, #4
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 5];                                  /* set raw accel z */
 8006158:	8bfa      	ldrh	r2, [r7, #30]
 800615a:	4613      	mov	r3, r2
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	3305      	adds	r3, #5
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800616c:	b219      	sxth	r1, r3
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) |
 800616e:	8bfa      	ldrh	r2, [r7, #30]
 8006170:	4613      	mov	r3, r2
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	4413      	add	r3, r2
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	461a      	mov	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	4413      	add	r3, r2
 800617e:	ea40 0201 	orr.w	r2, r0, r1
 8006182:	b212      	sxth	r2, r2
 8006184:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) |
 8006186:	8bfa      	ldrh	r2, [r7, #30]
 8006188:	4613      	mov	r3, r2
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	3306      	adds	r3, #6
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800619a:	021b      	lsls	r3, r3, #8
 800619c:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 7];                                   /* set raw gyro x */
 800619e:	8bfa      	ldrh	r2, [r7, #30]
 80061a0:	4613      	mov	r3, r2
 80061a2:	005b      	lsls	r3, r3, #1
 80061a4:	4413      	add	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	3307      	adds	r3, #7
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4413      	add	r3, r2
 80061ae:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80061b2:	b219      	sxth	r1, r3
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) |
 80061b4:	8bfa      	ldrh	r2, [r7, #30]
 80061b6:	4613      	mov	r3, r2
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	4413      	add	r3, r2
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	461a      	mov	r2, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	4413      	add	r3, r2
 80061c4:	ea40 0201 	orr.w	r2, r0, r1
 80061c8:	b212      	sxth	r2, r2
 80061ca:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) |
 80061cc:	8bfa      	ldrh	r2, [r7, #30]
 80061ce:	4613      	mov	r3, r2
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	4413      	add	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	3308      	adds	r3, #8
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	4413      	add	r3, r2
 80061dc:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80061e0:	021b      	lsls	r3, r3, #8
 80061e2:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 9];                                   /* set raw gyro y */
 80061e4:	8bfa      	ldrh	r2, [r7, #30]
 80061e6:	4613      	mov	r3, r2
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	4413      	add	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	3309      	adds	r3, #9
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80061f8:	b219      	sxth	r1, r3
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) |
 80061fa:	8bfa      	ldrh	r2, [r7, #30]
 80061fc:	4613      	mov	r3, r2
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	4413      	add	r3, r2
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	461a      	mov	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	4413      	add	r3, r2
 800620a:	ea40 0201 	orr.w	r2, r0, r1
 800620e:	b212      	sxth	r2, r2
 8006210:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) |
 8006212:	8bfa      	ldrh	r2, [r7, #30]
 8006214:	4613      	mov	r3, r2
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	330a      	adds	r3, #10
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006226:	021b      	lsls	r3, r3, #8
 8006228:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 11];                                  /* set raw gyro z */
 800622a:	8bfa      	ldrh	r2, [r7, #30]
 800622c:	4613      	mov	r3, r2
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	330b      	adds	r3, #11
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4413      	add	r3, r2
 800623a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800623e:	b219      	sxth	r1, r3
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) |
 8006240:	8bfa      	ldrh	r2, [r7, #30]
 8006242:	4613      	mov	r3, r2
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4413      	add	r3, r2
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	461a      	mov	r2, r3
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	4413      	add	r3, r2
 8006250:	ea40 0201 	orr.w	r2, r0, r1
 8006254:	b212      	sxth	r2, r2
 8006256:	809a      	strh	r2, [r3, #4]

            if (accel_conf == 0)                                                                   /* ±2g */
 8006258:	7e3b      	ldrb	r3, [r7, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d154      	bne.n	8006308 <mpu6050_read+0x464>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                               /* set accel x */
 800625e:	8bfa      	ldrh	r2, [r7, #30]
 8006260:	4613      	mov	r3, r2
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	4413      	add	r3, r2
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	461a      	mov	r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4413      	add	r3, r2
 800626e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800627a:	8bfa      	ldrh	r2, [r7, #30]
 800627c:	4613      	mov	r3, r2
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	4413      	add	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	461a      	mov	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4413      	add	r3, r2
 800628a:	ed5f 6a78 	vldr	s13, [pc, #-480]	; 80060ac <mpu6050_read+0x208>
 800628e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006292:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                               /* set accel y */
 8006296:	8bfa      	ldrh	r2, [r7, #30]
 8006298:	4613      	mov	r3, r2
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	4413      	add	r3, r2
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	461a      	mov	r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	4413      	add	r3, r2
 80062a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062b2:	8bfa      	ldrh	r2, [r7, #30]
 80062b4:	4613      	mov	r3, r2
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	4413      	add	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	461a      	mov	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4413      	add	r3, r2
 80062c2:	ed5f 6a86 	vldr	s13, [pc, #-536]	; 80060ac <mpu6050_read+0x208>
 80062c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062ca:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                               /* set accel z */
 80062ce:	8bfa      	ldrh	r2, [r7, #30]
 80062d0:	4613      	mov	r3, r2
 80062d2:	005b      	lsls	r3, r3, #1
 80062d4:	4413      	add	r3, r2
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	461a      	mov	r2, r3
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	4413      	add	r3, r2
 80062de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ea:	8bfa      	ldrh	r2, [r7, #30]
 80062ec:	4613      	mov	r3, r2
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	4413      	add	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	461a      	mov	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4413      	add	r3, r2
 80062fa:	ed5f 6a94 	vldr	s13, [pc, #-592]	; 80060ac <mpu6050_read+0x208>
 80062fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006302:	edc3 7a02 	vstr	s15, [r3, #8]
 8006306:	e103      	b.n	8006510 <mpu6050_read+0x66c>
            }
            else if (accel_conf == 1)                                                              /* ±4g */
 8006308:	7e3b      	ldrb	r3, [r7, #24]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d154      	bne.n	80063b8 <mpu6050_read+0x514>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                                /* set accel x */
 800630e:	8bfa      	ldrh	r2, [r7, #30]
 8006310:	4613      	mov	r3, r2
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	4413      	add	r3, r2
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	461a      	mov	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	4413      	add	r3, r2
 800631e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006322:	ee07 3a90 	vmov	s15, r3
 8006326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800632a:	8bfa      	ldrh	r2, [r7, #30]
 800632c:	4613      	mov	r3, r2
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	461a      	mov	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4413      	add	r3, r2
 800633a:	ed5f 6aa3 	vldr	s13, [pc, #-652]	; 80060b0 <mpu6050_read+0x20c>
 800633e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006342:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                                /* set accel y */
 8006346:	8bfa      	ldrh	r2, [r7, #30]
 8006348:	4613      	mov	r3, r2
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	4413      	add	r3, r2
 800634e:	005b      	lsls	r3, r3, #1
 8006350:	461a      	mov	r2, r3
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	4413      	add	r3, r2
 8006356:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006362:	8bfa      	ldrh	r2, [r7, #30]
 8006364:	4613      	mov	r3, r2
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	461a      	mov	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4413      	add	r3, r2
 8006372:	ed5f 6ab1 	vldr	s13, [pc, #-708]	; 80060b0 <mpu6050_read+0x20c>
 8006376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800637a:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                                /* set accel z */
 800637e:	8bfa      	ldrh	r2, [r7, #30]
 8006380:	4613      	mov	r3, r2
 8006382:	005b      	lsls	r3, r3, #1
 8006384:	4413      	add	r3, r2
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	461a      	mov	r2, r3
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	4413      	add	r3, r2
 800638e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800639a:	8bfa      	ldrh	r2, [r7, #30]
 800639c:	4613      	mov	r3, r2
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	4413      	add	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	461a      	mov	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4413      	add	r3, r2
 80063aa:	ed5f 6abf 	vldr	s13, [pc, #-764]	; 80060b0 <mpu6050_read+0x20c>
 80063ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063b2:	edc3 7a02 	vstr	s15, [r3, #8]
 80063b6:	e0ab      	b.n	8006510 <mpu6050_read+0x66c>
            }
            else if (accel_conf == 2)                                                              /* ±8g */
 80063b8:	7e3b      	ldrb	r3, [r7, #24]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d154      	bne.n	8006468 <mpu6050_read+0x5c4>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                                /* set accel x */
 80063be:	8bfa      	ldrh	r2, [r7, #30]
 80063c0:	4613      	mov	r3, r2
 80063c2:	005b      	lsls	r3, r3, #1
 80063c4:	4413      	add	r3, r2
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	461a      	mov	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	4413      	add	r3, r2
 80063ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063da:	8bfa      	ldrh	r2, [r7, #30]
 80063dc:	4613      	mov	r3, r2
 80063de:	005b      	lsls	r3, r3, #1
 80063e0:	4413      	add	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	461a      	mov	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4413      	add	r3, r2
 80063ea:	eddf 6acd 	vldr	s13, [pc, #820]	; 8006720 <mpu6050_read+0x87c>
 80063ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063f2:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                                /* set accel y */
 80063f6:	8bfa      	ldrh	r2, [r7, #30]
 80063f8:	4613      	mov	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	4413      	add	r3, r2
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	461a      	mov	r2, r3
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	4413      	add	r3, r2
 8006406:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800640a:	ee07 3a90 	vmov	s15, r3
 800640e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006412:	8bfa      	ldrh	r2, [r7, #30]
 8006414:	4613      	mov	r3, r2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	461a      	mov	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4413      	add	r3, r2
 8006422:	eddf 6abf 	vldr	s13, [pc, #764]	; 8006720 <mpu6050_read+0x87c>
 8006426:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800642a:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                                /* set accel z */
 800642e:	8bfa      	ldrh	r2, [r7, #30]
 8006430:	4613      	mov	r3, r2
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	4413      	add	r3, r2
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	461a      	mov	r2, r3
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	4413      	add	r3, r2
 800643e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800644a:	8bfa      	ldrh	r2, [r7, #30]
 800644c:	4613      	mov	r3, r2
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	461a      	mov	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8006720 <mpu6050_read+0x87c>
 800645e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006462:	edc3 7a02 	vstr	s15, [r3, #8]
 8006466:	e053      	b.n	8006510 <mpu6050_read+0x66c>
            }
            else                                                                                   /* ±16g */
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                                /* set accel x */
 8006468:	8bfa      	ldrh	r2, [r7, #30]
 800646a:	4613      	mov	r3, r2
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	4413      	add	r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	461a      	mov	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4413      	add	r3, r2
 8006478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800647c:	ee07 3a90 	vmov	s15, r3
 8006480:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006484:	8bfa      	ldrh	r2, [r7, #30]
 8006486:	4613      	mov	r3, r2
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	461a      	mov	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4413      	add	r3, r2
 8006494:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8006724 <mpu6050_read+0x880>
 8006498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800649c:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                                /* set accel y */
 80064a0:	8bfa      	ldrh	r2, [r7, #30]
 80064a2:	4613      	mov	r3, r2
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	4413      	add	r3, r2
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	461a      	mov	r2, r3
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	4413      	add	r3, r2
 80064b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80064b4:	ee07 3a90 	vmov	s15, r3
 80064b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064bc:	8bfa      	ldrh	r2, [r7, #30]
 80064be:	4613      	mov	r3, r2
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	461a      	mov	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4413      	add	r3, r2
 80064cc:	eddf 6a95 	vldr	s13, [pc, #596]	; 8006724 <mpu6050_read+0x880>
 80064d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064d4:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                                /* set accel z */
 80064d8:	8bfa      	ldrh	r2, [r7, #30]
 80064da:	4613      	mov	r3, r2
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	4413      	add	r3, r2
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	461a      	mov	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	4413      	add	r3, r2
 80064e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80064ec:	ee07 3a90 	vmov	s15, r3
 80064f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064f4:	8bfa      	ldrh	r2, [r7, #30]
 80064f6:	4613      	mov	r3, r2
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	4413      	add	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	461a      	mov	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4413      	add	r3, r2
 8006504:	eddf 6a87 	vldr	s13, [pc, #540]	; 8006724 <mpu6050_read+0x880>
 8006508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800650c:	edc3 7a02 	vstr	s15, [r3, #8]
            }

            if (gyro_conf == 0)                                                                    /* ±250dps */
 8006510:	7dfb      	ldrb	r3, [r7, #23]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d154      	bne.n	80065c0 <mpu6050_read+0x71c>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                                 /* set gyro x */
 8006516:	8bfa      	ldrh	r2, [r7, #30]
 8006518:	4613      	mov	r3, r2
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	4413      	add	r3, r2
 800651e:	005b      	lsls	r3, r3, #1
 8006520:	461a      	mov	r2, r3
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	4413      	add	r3, r2
 8006526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800652a:	ee07 3a90 	vmov	s15, r3
 800652e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006532:	8bfa      	ldrh	r2, [r7, #30]
 8006534:	4613      	mov	r3, r2
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	461a      	mov	r2, r3
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	4413      	add	r3, r2
 8006542:	eddf 6a79 	vldr	s13, [pc, #484]	; 8006728 <mpu6050_read+0x884>
 8006546:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800654a:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                                 /* set gyro y */
 800654e:	8bfa      	ldrh	r2, [r7, #30]
 8006550:	4613      	mov	r3, r2
 8006552:	005b      	lsls	r3, r3, #1
 8006554:	4413      	add	r3, r2
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	461a      	mov	r2, r3
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	4413      	add	r3, r2
 800655e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800656a:	8bfa      	ldrh	r2, [r7, #30]
 800656c:	4613      	mov	r3, r2
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	461a      	mov	r2, r3
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	4413      	add	r3, r2
 800657a:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8006728 <mpu6050_read+0x884>
 800657e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006582:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                                 /* set gyro z */
 8006586:	8bfa      	ldrh	r2, [r7, #30]
 8006588:	4613      	mov	r3, r2
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	4413      	add	r3, r2
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	461a      	mov	r2, r3
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	4413      	add	r3, r2
 8006596:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800659a:	ee07 3a90 	vmov	s15, r3
 800659e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065a2:	8bfa      	ldrh	r2, [r7, #30]
 80065a4:	4613      	mov	r3, r2
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	461a      	mov	r2, r3
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	4413      	add	r3, r2
 80065b2:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8006728 <mpu6050_read+0x884>
 80065b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065ba:	edc3 7a02 	vstr	s15, [r3, #8]
 80065be:	e10f      	b.n	80067e0 <mpu6050_read+0x93c>
            }
            else if (gyro_conf == 1)                                                               /* ±500dps */
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d154      	bne.n	8006670 <mpu6050_read+0x7cc>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                                  /* set gyro x */
 80065c6:	8bfa      	ldrh	r2, [r7, #30]
 80065c8:	4613      	mov	r3, r2
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	4413      	add	r3, r2
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	461a      	mov	r2, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	4413      	add	r3, r2
 80065d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065e2:	8bfa      	ldrh	r2, [r7, #30]
 80065e4:	4613      	mov	r3, r2
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	461a      	mov	r2, r3
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	4413      	add	r3, r2
 80065f2:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800672c <mpu6050_read+0x888>
 80065f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065fa:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                                  /* set gyro y */
 80065fe:	8bfa      	ldrh	r2, [r7, #30]
 8006600:	4613      	mov	r3, r2
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	4413      	add	r3, r2
 8006606:	005b      	lsls	r3, r3, #1
 8006608:	461a      	mov	r2, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	4413      	add	r3, r2
 800660e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800661a:	8bfa      	ldrh	r2, [r7, #30]
 800661c:	4613      	mov	r3, r2
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	461a      	mov	r2, r3
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	4413      	add	r3, r2
 800662a:	eddf 6a40 	vldr	s13, [pc, #256]	; 800672c <mpu6050_read+0x888>
 800662e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006632:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                                  /* set gyro z */
 8006636:	8bfa      	ldrh	r2, [r7, #30]
 8006638:	4613      	mov	r3, r2
 800663a:	005b      	lsls	r3, r3, #1
 800663c:	4413      	add	r3, r2
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	461a      	mov	r2, r3
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	4413      	add	r3, r2
 8006646:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800664a:	ee07 3a90 	vmov	s15, r3
 800664e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006652:	8bfa      	ldrh	r2, [r7, #30]
 8006654:	4613      	mov	r3, r2
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	461a      	mov	r2, r3
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	4413      	add	r3, r2
 8006662:	eddf 6a32 	vldr	s13, [pc, #200]	; 800672c <mpu6050_read+0x888>
 8006666:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800666a:	edc3 7a02 	vstr	s15, [r3, #8]
 800666e:	e0b7      	b.n	80067e0 <mpu6050_read+0x93c>
            }
            else if (gyro_conf == 2)                                                               /* ±1000dps */
 8006670:	7dfb      	ldrb	r3, [r7, #23]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d160      	bne.n	8006738 <mpu6050_read+0x894>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                                  /* set gyro x */
 8006676:	8bfa      	ldrh	r2, [r7, #30]
 8006678:	4613      	mov	r3, r2
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	4413      	add	r3, r2
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	461a      	mov	r2, r3
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	4413      	add	r3, r2
 8006686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006692:	8bfa      	ldrh	r2, [r7, #30]
 8006694:	4613      	mov	r3, r2
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	461a      	mov	r2, r3
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	4413      	add	r3, r2
 80066a2:	eddf 6a23 	vldr	s13, [pc, #140]	; 8006730 <mpu6050_read+0x88c>
 80066a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066aa:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                                  /* set gyro y */
 80066ae:	8bfa      	ldrh	r2, [r7, #30]
 80066b0:	4613      	mov	r3, r2
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	4413      	add	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	461a      	mov	r2, r3
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	4413      	add	r3, r2
 80066be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80066c2:	ee07 3a90 	vmov	s15, r3
 80066c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066ca:	8bfa      	ldrh	r2, [r7, #30]
 80066cc:	4613      	mov	r3, r2
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	461a      	mov	r2, r3
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	4413      	add	r3, r2
 80066da:	eddf 6a15 	vldr	s13, [pc, #84]	; 8006730 <mpu6050_read+0x88c>
 80066de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066e2:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                                  /* set gyro z */
 80066e6:	8bfa      	ldrh	r2, [r7, #30]
 80066e8:	4613      	mov	r3, r2
 80066ea:	005b      	lsls	r3, r3, #1
 80066ec:	4413      	add	r3, r2
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	461a      	mov	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	4413      	add	r3, r2
 80066f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006702:	8bfa      	ldrh	r2, [r7, #30]
 8006704:	4613      	mov	r3, r2
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	461a      	mov	r2, r3
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	4413      	add	r3, r2
 8006712:	eddf 6a07 	vldr	s13, [pc, #28]	; 8006730 <mpu6050_read+0x88c>
 8006716:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800671a:	edc3 7a02 	vstr	s15, [r3, #8]
 800671e:	e05f      	b.n	80067e0 <mpu6050_read+0x93c>
 8006720:	45800000 	.word	0x45800000
 8006724:	45000000 	.word	0x45000000
 8006728:	43030000 	.word	0x43030000
 800672c:	42830000 	.word	0x42830000
 8006730:	42033333 	.word	0x42033333
 8006734:	41833333 	.word	0x41833333
            }
            else                                                                                   /* ±2000dps */
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                                  /* set gyro x */
 8006738:	8bfa      	ldrh	r2, [r7, #30]
 800673a:	4613      	mov	r3, r2
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	4413      	add	r3, r2
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	461a      	mov	r2, r3
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	4413      	add	r3, r2
 8006748:	f9b3 3000 	ldrsh.w	r3, [r3]
 800674c:	ee07 3a90 	vmov	s15, r3
 8006750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006754:	8bfa      	ldrh	r2, [r7, #30]
 8006756:	4613      	mov	r3, r2
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	461a      	mov	r2, r3
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	4413      	add	r3, r2
 8006764:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8006734 <mpu6050_read+0x890>
 8006768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800676c:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                                  /* set gyro y */
 8006770:	8bfa      	ldrh	r2, [r7, #30]
 8006772:	4613      	mov	r3, r2
 8006774:	005b      	lsls	r3, r3, #1
 8006776:	4413      	add	r3, r2
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	461a      	mov	r2, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	4413      	add	r3, r2
 8006780:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800678c:	8bfa      	ldrh	r2, [r7, #30]
 800678e:	4613      	mov	r3, r2
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	4413      	add	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	461a      	mov	r2, r3
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	4413      	add	r3, r2
 800679c:	ed5f 6a1b 	vldr	s13, [pc, #-108]	; 8006734 <mpu6050_read+0x890>
 80067a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067a4:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                                  /* set gyro z */
 80067a8:	8bfa      	ldrh	r2, [r7, #30]
 80067aa:	4613      	mov	r3, r2
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	4413      	add	r3, r2
 80067b0:	005b      	lsls	r3, r3, #1
 80067b2:	461a      	mov	r2, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	4413      	add	r3, r2
 80067b8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80067bc:	ee07 3a90 	vmov	s15, r3
 80067c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067c4:	8bfa      	ldrh	r2, [r7, #30]
 80067c6:	4613      	mov	r3, r2
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	461a      	mov	r2, r3
 80067d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d2:	4413      	add	r3, r2
 80067d4:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 8006734 <mpu6050_read+0x890>
 80067d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067dc:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 80067e0:	8bfb      	ldrh	r3, [r7, #30]
 80067e2:	3301      	adds	r3, #1
 80067e4:	83fb      	strh	r3, [r7, #30]
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	8bfa      	ldrh	r2, [r7, #30]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	f4ff ac61 	bcc.w	80060b4 <mpu6050_read+0x210>
            }
        }

        return 0;                                                                                  /* success return 0 */
 80067f2:	2300      	movs	r3, #0
 80067f4:	e1df      	b.n	8006bb6 <mpu6050_read+0xd12>
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 80067f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f8:	2201      	movs	r2, #1
 80067fa:	801a      	strh	r2, [r3, #0]
        res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_XOUT_H, handle->buf, 14);               /* read data */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8006802:	230e      	movs	r3, #14
 8006804:	213b      	movs	r1, #59	; 0x3b
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7ff f9d8 	bl	8005bbc <a_mpu6050_iic_read>
 800680c:	4603      	mov	r3, r0
 800680e:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006810:	7f7b      	ldrb	r3, [r7, #29]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <mpu6050_read+0x97e>
        {
            handle->debug_print("mpu6050: read failed.\n");                                        /* read failed */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	48b1      	ldr	r0, [pc, #708]	; (8006ae0 <mpu6050_read+0xc3c>)
 800681c:	4798      	blx	r3

            return 1;                                                                              /* return error */
 800681e:	2301      	movs	r3, #1
 8006820:	e1c9      	b.n	8006bb6 <mpu6050_read+0xd12>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	b21a      	sxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006832:	b21b      	sxth	r3, r3
 8006834:	4313      	orrs	r3, r2
 8006836:	b21a      	sxth	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	b21a      	sxth	r2, r3
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800684c:	b21b      	sxth	r3, r3
 800684e:	4313      	orrs	r3, r2
 8006850:	b21a      	sxth	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800685c:	021b      	lsls	r3, r3, #8
 800685e:	b21a      	sxth	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8006866:	b21b      	sxth	r3, r3
 8006868:	4313      	orrs	r3, r2
 800686a:	b21a      	sxth	r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	b21a      	sxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8006880:	b21b      	sxth	r3, r3
 8006882:	4313      	orrs	r3, r2
 8006884:	b21a      	sxth	r2, r3
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006890:	021b      	lsls	r3, r3, #8
 8006892:	b21a      	sxth	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800689a:	b21b      	sxth	r3, r3
 800689c:	4313      	orrs	r3, r2
 800689e:	b21a      	sxth	r2, r3
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	b21a      	sxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80068b4:	b21b      	sxth	r3, r3
 80068b6:	4313      	orrs	r3, r2
 80068b8:	b21a      	sxth	r2, r3
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	809a      	strh	r2, [r3, #4]

        if (accel_conf == 0)                                                                       /* ±2g */
 80068be:	7e3b      	ldrb	r3, [r7, #24]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d12a      	bne.n	800691a <mpu6050_read+0xa76>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068d2:	eddf 6a84 	vldr	s13, [pc, #528]	; 8006ae4 <mpu6050_read+0xc40>
 80068d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068ee:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8006ae4 <mpu6050_read+0xc40>
 80068f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800690a:	eddf 6a76 	vldr	s13, [pc, #472]	; 8006ae4 <mpu6050_read+0xc40>
 800690e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	edc3 7a02 	vstr	s15, [r3, #8]
 8006918:	e085      	b.n	8006a26 <mpu6050_read+0xb82>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 800691a:	7e3b      	ldrb	r3, [r7, #24]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d12a      	bne.n	8006976 <mpu6050_read+0xad2>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800692e:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006ae8 <mpu6050_read+0xc44>
 8006932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800694a:	eddf 6a67 	vldr	s13, [pc, #412]	; 8006ae8 <mpu6050_read+0xc44>
 800694e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006966:	eddf 6a60 	vldr	s13, [pc, #384]	; 8006ae8 <mpu6050_read+0xc44>
 800696a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	edc3 7a02 	vstr	s15, [r3, #8]
 8006974:	e057      	b.n	8006a26 <mpu6050_read+0xb82>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 8006976:	7e3b      	ldrb	r3, [r7, #24]
 8006978:	2b02      	cmp	r3, #2
 800697a:	d12a      	bne.n	80069d2 <mpu6050_read+0xb2e>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800698a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006aec <mpu6050_read+0xc48>
 800698e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069a6:	eddf 6a51 	vldr	s13, [pc, #324]	; 8006aec <mpu6050_read+0xc48>
 80069aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069c2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8006aec <mpu6050_read+0xc48>
 80069c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	edc3 7a02 	vstr	s15, [r3, #8]
 80069d0:	e029      	b.n	8006a26 <mpu6050_read+0xb82>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069d8:	ee07 3a90 	vmov	s15, r3
 80069dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069e0:	eddf 6a43 	vldr	s13, [pc, #268]	; 8006af0 <mpu6050_read+0xc4c>
 80069e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80069f4:	ee07 3a90 	vmov	s15, r3
 80069f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069fc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006af0 <mpu6050_read+0xc4c>
 8006a00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a10:	ee07 3a90 	vmov	s15, r3
 8006a14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a18:	eddf 6a35 	vldr	s13, [pc, #212]	; 8006af0 <mpu6050_read+0xc4c>
 8006a1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        if (gyro_conf == 0)                                                                        /* ±250dps */
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d12a      	bne.n	8006a82 <mpu6050_read+0xbde>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a32:	ee07 3a90 	vmov	s15, r3
 8006a36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a3a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8006af4 <mpu6050_read+0xc50>
 8006a3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a56:	eddf 6a27 	vldr	s13, [pc, #156]	; 8006af4 <mpu6050_read+0xc50>
 8006a5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a60:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a72:	eddf 6a20 	vldr	s13, [pc, #128]	; 8006af4 <mpu6050_read+0xc50>
 8006a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a7c:	edc3 7a02 	vstr	s15, [r3, #8]
 8006a80:	e098      	b.n	8006bb4 <mpu6050_read+0xd10>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d13d      	bne.n	8006b04 <mpu6050_read+0xc60>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a8e:	ee07 3a90 	vmov	s15, r3
 8006a92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a96:	eddf 6a18 	vldr	s13, [pc, #96]	; 8006af8 <mpu6050_read+0xc54>
 8006a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006aaa:	ee07 3a90 	vmov	s15, r3
 8006aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ab2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8006af8 <mpu6050_read+0xc54>
 8006ab6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ac6:	ee07 3a90 	vmov	s15, r3
 8006aca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ace:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006af8 <mpu6050_read+0xc54>
 8006ad2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	edc3 7a02 	vstr	s15, [r3, #8]
 8006adc:	e06a      	b.n	8006bb4 <mpu6050_read+0xd10>
 8006ade:	bf00      	nop
 8006ae0:	080084c0 	.word	0x080084c0
 8006ae4:	46800000 	.word	0x46800000
 8006ae8:	46000000 	.word	0x46000000
 8006aec:	45800000 	.word	0x45800000
 8006af0:	45000000 	.word	0x45000000
 8006af4:	43030000 	.word	0x43030000
 8006af8:	42830000 	.word	0x42830000
 8006afc:	42033333 	.word	0x42033333
 8006b00:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d12a      	bne.n	8006b60 <mpu6050_read+0xcbc>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b10:	ee07 3a90 	vmov	s15, r3
 8006b14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b18:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 8006afc <mpu6050_read+0xc58>
 8006b1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b2c:	ee07 3a90 	vmov	s15, r3
 8006b30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b34:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8006afc <mpu6050_read+0xc58>
 8006b38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b48:	ee07 3a90 	vmov	s15, r3
 8006b4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b50:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 8006afc <mpu6050_read+0xc58>
 8006b54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	edc3 7a02 	vstr	s15, [r3, #8]
 8006b5e:	e029      	b.n	8006bb4 <mpu6050_read+0xd10>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b6e:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 8006b00 <mpu6050_read+0xc5c>
 8006b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b8a:	ed5f 6a23 	vldr	s13, [pc, #-140]	; 8006b00 <mpu6050_read+0xc5c>
 8006b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b9e:	ee07 3a90 	vmov	s15, r3
 8006ba2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ba6:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 8006b00 <mpu6050_read+0xc5c>
 8006baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        return 0;                                                                                  /* success return 0 */
 8006bb4:	2300      	movs	r3, #0
    }
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3720      	adds	r7, #32
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop

08006bc0 <mpu6050_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fifo(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                   /* check handle */
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <mpu6050_set_fifo+0x16>
    {
        return 2;                                                                         /* return error */
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e039      	b.n	8006c4a <mpu6050_set_fifo+0x8a>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d001      	beq.n	8006be4 <mpu6050_set_fifo+0x24>
    {
        return 3;                                                                         /* return error */
 8006be0:	2303      	movs	r3, #3
 8006be2:	e032      	b.n	8006c4a <mpu6050_set_fifo+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8006be4:	f107 020e 	add.w	r2, r7, #14
 8006be8:	2301      	movs	r3, #1
 8006bea:	216a      	movs	r1, #106	; 0x6a
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7fe ffe5 	bl	8005bbc <a_mpu6050_iic_read>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d005      	beq.n	8006c08 <mpu6050_set_fifo+0x48>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                         /* read user ctrl failed */
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	4814      	ldr	r0, [pc, #80]	; (8006c54 <mpu6050_set_fifo+0x94>)
 8006c02:	4798      	blx	r3

        return 1;                                                                         /* return error */
 8006c04:	2301      	movs	r3, #1
 8006c06:	e020      	b.n	8006c4a <mpu6050_set_fifo+0x8a>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                  /* set config */
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	019b      	lsls	r3, r3, #6
 8006c16:	b25a      	sxtb	r2, r3
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	b25b      	sxtb	r3, r3
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	b25b      	sxtb	r3, r3
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 8006c24:	f107 020e 	add.w	r2, r7, #14
 8006c28:	2301      	movs	r3, #1
 8006c2a:	216a      	movs	r1, #106	; 0x6a
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7fe ffe1 	bl	8005bf4 <a_mpu6050_iic_write>
 8006c32:	4603      	mov	r3, r0
 8006c34:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d005      	beq.n	8006c48 <mpu6050_set_fifo+0x88>
    {
        handle->debug_print("mpu6050: write user ctrl failed.\n");                        /* write user ctrl failed */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	4805      	ldr	r0, [pc, #20]	; (8006c58 <mpu6050_set_fifo+0x98>)
 8006c42:	4798      	blx	r3

        return 1;                                                                         /* return error */
 8006c44:	2301      	movs	r3, #1
 8006c46:	e000      	b.n	8006c4a <mpu6050_set_fifo+0x8a>
    }

    return 0;                                                                             /* success return 0 */
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3710      	adds	r7, #16
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	08008560 	.word	0x08008560
 8006c58:	08008584 	.word	0x08008584

08006c5c <mpu6050_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_iic_master(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <mpu6050_set_iic_master+0x16>
    {
        return 2;                                                                        /* return error */
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e039      	b.n	8006ce6 <mpu6050_set_iic_master+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d001      	beq.n	8006c80 <mpu6050_set_iic_master+0x24>
    {
        return 3;                                                                        /* return error */
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e032      	b.n	8006ce6 <mpu6050_set_iic_master+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8006c80:	f107 020e 	add.w	r2, r7, #14
 8006c84:	2301      	movs	r3, #1
 8006c86:	216a      	movs	r1, #106	; 0x6a
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7fe ff97 	bl	8005bbc <a_mpu6050_iic_read>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006c92:	7bfb      	ldrb	r3, [r7, #15]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <mpu6050_set_iic_master+0x48>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                        /* read user ctrl failed */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	4814      	ldr	r0, [pc, #80]	; (8006cf0 <mpu6050_set_iic_master+0x94>)
 8006c9e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e020      	b.n	8006ce6 <mpu6050_set_iic_master+0x8a>
    }
    prev &= ~(1 << 5);                                                                   /* clear config */
 8006ca4:	7bbb      	ldrb	r3, [r7, #14]
 8006ca6:	f023 0320 	bic.w	r3, r3, #32
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                                 /* set config */
 8006cae:	78fb      	ldrb	r3, [r7, #3]
 8006cb0:	015b      	lsls	r3, r3, #5
 8006cb2:	b25a      	sxtb	r2, r3
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	b25b      	sxtb	r3, r3
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	b25b      	sxtb	r3, r3
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8006cc0:	f107 020e 	add.w	r2, r7, #14
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	216a      	movs	r1, #106	; 0x6a
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f7fe ff93 	bl	8005bf4 <a_mpu6050_iic_write>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006cd2:	7bfb      	ldrb	r3, [r7, #15]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <mpu6050_set_iic_master+0x88>
    {
        handle->debug_print("mpu6050: write user ctrl failed.\n");                       /* write user ctrl failed */
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	4805      	ldr	r0, [pc, #20]	; (8006cf4 <mpu6050_set_iic_master+0x98>)
 8006cde:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e000      	b.n	8006ce6 <mpu6050_set_iic_master+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	08008560 	.word	0x08008560
 8006cf4:	08008584 	.word	0x08008584

08006cf8 <mpu6050_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_clock_source(mpu6050_handle_t *handle, mpu6050_clock_source_t clock_source)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <mpu6050_set_clock_source+0x16>
    {
        return 2;                                                                        /* return error */
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	e035      	b.n	8006d7a <mpu6050_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d001      	beq.n	8006d1c <mpu6050_set_clock_source+0x24>
    {
        return 3;                                                                        /* return error */
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e02e      	b.n	8006d7a <mpu6050_set_clock_source+0x82>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006d1c:	f107 020e 	add.w	r2, r7, #14
 8006d20:	2301      	movs	r3, #1
 8006d22:	216b      	movs	r1, #107	; 0x6b
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7fe ff49 	bl	8005bbc <a_mpu6050_iic_read>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <mpu6050_set_clock_source+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	4812      	ldr	r0, [pc, #72]	; (8006d84 <mpu6050_set_clock_source+0x8c>)
 8006d3a:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e01c      	b.n	8006d7a <mpu6050_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                                 /* clear config */
 8006d40:	7bbb      	ldrb	r3, [r7, #14]
 8006d42:	f023 0307 	bic.w	r3, r3, #7
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                           /* set config */
 8006d4a:	7bba      	ldrb	r2, [r7, #14]
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006d54:	f107 020e 	add.w	r2, r7, #14
 8006d58:	2301      	movs	r3, #1
 8006d5a:	216b      	movs	r1, #107	; 0x6b
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7fe ff49 	bl	8005bf4 <a_mpu6050_iic_write>
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <mpu6050_set_clock_source+0x80>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	4805      	ldr	r0, [pc, #20]	; (8006d88 <mpu6050_set_clock_source+0x90>)
 8006d72:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <mpu6050_set_clock_source+0x82>
    }

    return 0;                                                                            /* success return 0 */
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	080087bc 	.word	0x080087bc
 8006d88:	080087e8 	.word	0x080087e8

08006d8c <mpu6050_set_temperature_sensor>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_temperature_sensor(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	460b      	mov	r3, r1
 8006d96:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <mpu6050_set_temperature_sensor+0x16>
    {
        return 2;                                                                        /* return error */
 8006d9e:	2302      	movs	r3, #2
 8006da0:	e03c      	b.n	8006e1c <mpu6050_set_temperature_sensor+0x90>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d001      	beq.n	8006db0 <mpu6050_set_temperature_sensor+0x24>
    {
        return 3;                                                                        /* return error */
 8006dac:	2303      	movs	r3, #3
 8006dae:	e035      	b.n	8006e1c <mpu6050_set_temperature_sensor+0x90>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006db0:	f107 020e 	add.w	r2, r7, #14
 8006db4:	2301      	movs	r3, #1
 8006db6:	216b      	movs	r1, #107	; 0x6b
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7fe feff 	bl	8005bbc <a_mpu6050_iic_read>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <mpu6050_set_temperature_sensor+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	4815      	ldr	r0, [pc, #84]	; (8006e24 <mpu6050_set_temperature_sensor+0x98>)
 8006dce:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e023      	b.n	8006e1c <mpu6050_set_temperature_sensor+0x90>
    }
    prev &= ~(1 << 3);                                                                   /* clear config */
 8006dd4:	7bbb      	ldrb	r3, [r7, #14]
 8006dd6:	f023 0308 	bic.w	r3, r3, #8
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                              /* set config */
 8006dde:	78fb      	ldrb	r3, [r7, #3]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <mpu6050_set_temperature_sensor+0x5c>
 8006de4:	2208      	movs	r2, #8
 8006de6:	e000      	b.n	8006dea <mpu6050_set_temperature_sensor+0x5e>
 8006de8:	2200      	movs	r2, #0
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	b25b      	sxtb	r3, r3
 8006dee:	4313      	orrs	r3, r2
 8006df0:	b25b      	sxtb	r3, r3
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006df6:	f107 020e 	add.w	r2, r7, #14
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	216b      	movs	r1, #107	; 0x6b
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7fe fef8 	bl	8005bf4 <a_mpu6050_iic_write>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d005      	beq.n	8006e1a <mpu6050_set_temperature_sensor+0x8e>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	4805      	ldr	r0, [pc, #20]	; (8006e28 <mpu6050_set_temperature_sensor+0x9c>)
 8006e14:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <mpu6050_set_temperature_sensor+0x90>
    }

    return 0;                                                                            /* success return 0 */
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	080087bc 	.word	0x080087bc
 8006e28:	080087e8 	.word	0x080087e8

08006e2c <mpu6050_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_cycle_wake_up(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	460b      	mov	r3, r1
 8006e36:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <mpu6050_set_cycle_wake_up+0x16>
    {
        return 2;                                                                        /* return error */
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e039      	b.n	8006eb6 <mpu6050_set_cycle_wake_up+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d001      	beq.n	8006e50 <mpu6050_set_cycle_wake_up+0x24>
    {
        return 3;                                                                        /* return error */
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e032      	b.n	8006eb6 <mpu6050_set_cycle_wake_up+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006e50:	f107 020e 	add.w	r2, r7, #14
 8006e54:	2301      	movs	r3, #1
 8006e56:	216b      	movs	r1, #107	; 0x6b
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7fe feaf 	bl	8005bbc <a_mpu6050_iic_read>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <mpu6050_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	4814      	ldr	r0, [pc, #80]	; (8006ec0 <mpu6050_set_cycle_wake_up+0x94>)
 8006e6e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006e70:	2301      	movs	r3, #1
 8006e72:	e020      	b.n	8006eb6 <mpu6050_set_cycle_wake_up+0x8a>
    }
    prev &= ~(1 << 5);                                                                   /* clear config */
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	f023 0320 	bic.w	r3, r3, #32
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                                 /* set config */
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	015b      	lsls	r3, r3, #5
 8006e82:	b25a      	sxtb	r2, r3
 8006e84:	7bbb      	ldrb	r3, [r7, #14]
 8006e86:	b25b      	sxtb	r3, r3
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	b25b      	sxtb	r3, r3
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006e90:	f107 020e 	add.w	r2, r7, #14
 8006e94:	2301      	movs	r3, #1
 8006e96:	216b      	movs	r1, #107	; 0x6b
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7fe feab 	bl	8005bf4 <a_mpu6050_iic_write>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <mpu6050_set_cycle_wake_up+0x88>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	4805      	ldr	r0, [pc, #20]	; (8006ec4 <mpu6050_set_cycle_wake_up+0x98>)
 8006eae:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <mpu6050_set_cycle_wake_up+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3710      	adds	r7, #16
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	080087bc 	.word	0x080087bc
 8006ec4:	080087e8 	.word	0x080087e8

08006ec8 <mpu6050_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_sleep(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <mpu6050_set_sleep+0x16>
    {
        return 2;                                                                        /* return error */
 8006eda:	2302      	movs	r3, #2
 8006edc:	e039      	b.n	8006f52 <mpu6050_set_sleep+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d001      	beq.n	8006eec <mpu6050_set_sleep+0x24>
    {
        return 3;                                                                        /* return error */
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e032      	b.n	8006f52 <mpu6050_set_sleep+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006eec:	f107 020e 	add.w	r2, r7, #14
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	216b      	movs	r1, #107	; 0x6b
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7fe fe61 	bl	8005bbc <a_mpu6050_iic_read>
 8006efa:	4603      	mov	r3, r0
 8006efc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <mpu6050_set_sleep+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	4814      	ldr	r0, [pc, #80]	; (8006f5c <mpu6050_set_sleep+0x94>)
 8006f0a:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e020      	b.n	8006f52 <mpu6050_set_sleep+0x8a>
    }
    prev &= ~(1 << 6);                                                                   /* clear config */
 8006f10:	7bbb      	ldrb	r3, [r7, #14]
 8006f12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                 /* set config */
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	019b      	lsls	r3, r3, #6
 8006f1e:	b25a      	sxtb	r2, r3
 8006f20:	7bbb      	ldrb	r3, [r7, #14]
 8006f22:	b25b      	sxtb	r3, r3
 8006f24:	4313      	orrs	r3, r2
 8006f26:	b25b      	sxtb	r3, r3
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006f2c:	f107 020e 	add.w	r2, r7, #14
 8006f30:	2301      	movs	r3, #1
 8006f32:	216b      	movs	r1, #107	; 0x6b
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7fe fe5d 	bl	8005bf4 <a_mpu6050_iic_write>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d005      	beq.n	8006f50 <mpu6050_set_sleep+0x88>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	4805      	ldr	r0, [pc, #20]	; (8006f60 <mpu6050_set_sleep+0x98>)
 8006f4a:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e000      	b.n	8006f52 <mpu6050_set_sleep+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	080087bc 	.word	0x080087bc
 8006f60:	080087e8 	.word	0x080087e8

08006f64 <mpu6050_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_standby_mode(mpu6050_handle_t *handle, mpu6050_source_t source, mpu6050_bool_t enable)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]
 8006f70:	4613      	mov	r3, r2
 8006f72:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <mpu6050_set_standby_mode+0x1a>
    {
        return 2;                                                                        /* return error */
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	e043      	b.n	8007006 <mpu6050_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d001      	beq.n	8006f8c <mpu6050_set_standby_mode+0x28>
    {
        return 3;                                                                        /* return error */
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e03c      	b.n	8007006 <mpu6050_set_standby_mode+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 8006f8c:	f107 020e 	add.w	r2, r7, #14
 8006f90:	2301      	movs	r3, #1
 8006f92:	216c      	movs	r1, #108	; 0x6c
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f7fe fe11 	bl	8005bbc <a_mpu6050_iic_read>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <mpu6050_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu6050: read power management 2 failed.\n");               /* read power management 2 failed */
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	4819      	ldr	r0, [pc, #100]	; (8007010 <mpu6050_set_standby_mode+0xac>)
 8006faa:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8006fac:	2301      	movs	r3, #1
 8006fae:	e02a      	b.n	8007006 <mpu6050_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                              /* clear config */
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb8:	b25b      	sxtb	r3, r3
 8006fba:	43db      	mvns	r3, r3
 8006fbc:	b25a      	sxtb	r2, r3
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	b25b      	sxtb	r3, r3
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	b25b      	sxtb	r3, r3
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                            /* set config */
 8006fca:	78ba      	ldrb	r2, [r7, #2]
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd2:	b25a      	sxtb	r2, r3
 8006fd4:	7bbb      	ldrb	r3, [r7, #14]
 8006fd6:	b25b      	sxtb	r3, r3
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	b25b      	sxtb	r3, r3
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8006fe0:	f107 020e 	add.w	r2, r7, #14
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	216c      	movs	r1, #108	; 0x6c
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f7fe fe03 	bl	8005bf4 <a_mpu6050_iic_write>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <mpu6050_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu6050: write power management 2 failed.\n");              /* write power management 2 failed */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	4805      	ldr	r0, [pc, #20]	; (8007014 <mpu6050_set_standby_mode+0xb0>)
 8006ffe:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <mpu6050_set_standby_mode+0xa2>
    }

    return 0;                                                                            /* success return 0 */
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	08008814 	.word	0x08008814
 8007014:	08008840 	.word	0x08008840

08007018 <mpu6050_set_wake_up_frequency>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_wake_up_frequency(mpu6050_handle_t *handle, mpu6050_wake_up_frequency_t frequency)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <mpu6050_set_wake_up_frequency+0x16>
    {
        return 2;                                                                        /* return error */
 800702a:	2302      	movs	r3, #2
 800702c:	e039      	b.n	80070a2 <mpu6050_set_wake_up_frequency+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007034:	2b01      	cmp	r3, #1
 8007036:	d001      	beq.n	800703c <mpu6050_set_wake_up_frequency+0x24>
    {
        return 3;                                                                        /* return error */
 8007038:	2303      	movs	r3, #3
 800703a:	e032      	b.n	80070a2 <mpu6050_set_wake_up_frequency+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 800703c:	f107 020e 	add.w	r2, r7, #14
 8007040:	2301      	movs	r3, #1
 8007042:	216c      	movs	r1, #108	; 0x6c
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7fe fdb9 	bl	8005bbc <a_mpu6050_iic_read>
 800704a:	4603      	mov	r3, r0
 800704c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <mpu6050_set_wake_up_frequency+0x48>
    {
        handle->debug_print("mpu6050: read power management 2 failed.\n");               /* read power management 2 failed */
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	4814      	ldr	r0, [pc, #80]	; (80070ac <mpu6050_set_wake_up_frequency+0x94>)
 800705a:	4798      	blx	r3

        return 1;                                                                        /* return error */
 800705c:	2301      	movs	r3, #1
 800705e:	e020      	b.n	80070a2 <mpu6050_set_wake_up_frequency+0x8a>
    }
    prev &= ~(0x3 << 6);                                                                 /* clear config */
 8007060:	7bbb      	ldrb	r3, [r7, #14]
 8007062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007066:	b2db      	uxtb	r3, r3
 8007068:	73bb      	strb	r3, [r7, #14]
    prev |= frequency << 6;                                                              /* set config */
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	019b      	lsls	r3, r3, #6
 800706e:	b25a      	sxtb	r2, r3
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	b25b      	sxtb	r3, r3
 8007074:	4313      	orrs	r3, r2
 8007076:	b25b      	sxtb	r3, r3
 8007078:	b2db      	uxtb	r3, r3
 800707a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 800707c:	f107 020e 	add.w	r2, r7, #14
 8007080:	2301      	movs	r3, #1
 8007082:	216c      	movs	r1, #108	; 0x6c
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7fe fdb5 	bl	8005bf4 <a_mpu6050_iic_write>
 800708a:	4603      	mov	r3, r0
 800708c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <mpu6050_set_wake_up_frequency+0x88>
    {
        handle->debug_print("mpu6050: write power management 2 failed.\n");              /* write power management 2 failed */
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	4805      	ldr	r0, [pc, #20]	; (80070b0 <mpu6050_set_wake_up_frequency+0x98>)
 800709a:	4798      	blx	r3

        return 1;                                                                        /* return error */
 800709c:	2301      	movs	r3, #1
 800709e:	e000      	b.n	80070a2 <mpu6050_set_wake_up_frequency+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	08008814 	.word	0x08008814
 80070b0:	08008840 	.word	0x08008840

080070b4 <mpu6050_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_sample_rate_divider(mpu6050_handle_t *handle, uint8_t d)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	70fb      	strb	r3, [r7, #3]
    uint8_t res;

    if (handle == NULL)                                                                  /* check handle */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d101      	bne.n	80070ca <mpu6050_set_sample_rate_divider+0x16>
    {
        return 2;                                                                        /* return error */
 80070c6:	2302      	movs	r3, #2
 80070c8:	e018      	b.n	80070fc <mpu6050_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d001      	beq.n	80070d8 <mpu6050_set_sample_rate_divider+0x24>
    {
        return 3;                                                                        /* return error */
 80070d4:	2303      	movs	r3, #3
 80070d6:	e011      	b.n	80070fc <mpu6050_set_sample_rate_divider+0x48>
    }

    res = a_mpu6050_iic_write(handle, MPU6050_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 80070d8:	1cfa      	adds	r2, r7, #3
 80070da:	2301      	movs	r3, #1
 80070dc:	2119      	movs	r1, #25
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fe fd88 	bl	8005bf4 <a_mpu6050_iic_write>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <mpu6050_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu6050: write smprt div failed.\n");                       /* write smprt div failed */
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	4804      	ldr	r0, [pc, #16]	; (8007104 <mpu6050_set_sample_rate_divider+0x50>)
 80070f4:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <mpu6050_set_sample_rate_divider+0x48>
    }

    return 0;                                                                            /* success return 0 */
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	08008900 	.word	0x08008900

08007108 <mpu6050_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_extern_sync(mpu6050_handle_t *handle, mpu6050_extern_sync_t sync)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                /* check handle */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <mpu6050_set_extern_sync+0x16>
    {
        return 2;                                                                      /* return error */
 800711a:	2302      	movs	r3, #2
 800711c:	e039      	b.n	8007192 <mpu6050_set_extern_sync+0x8a>
    }
    if (handle->inited != 1)                                                           /* check handle initialization */
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007124:	2b01      	cmp	r3, #1
 8007126:	d001      	beq.n	800712c <mpu6050_set_extern_sync+0x24>
    {
        return 3;                                                                      /* return error */
 8007128:	2303      	movs	r3, #3
 800712a:	e032      	b.n	8007192 <mpu6050_set_extern_sync+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 800712c:	f107 020e 	add.w	r2, r7, #14
 8007130:	2301      	movs	r3, #1
 8007132:	211a      	movs	r1, #26
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7fe fd41 	bl	8005bbc <a_mpu6050_iic_read>
 800713a:	4603      	mov	r3, r0
 800713c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d005      	beq.n	8007150 <mpu6050_set_extern_sync+0x48>
    {
        handle->debug_print("mpu6050: read config failed.\n");                         /* read config failed */
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	4814      	ldr	r0, [pc, #80]	; (800719c <mpu6050_set_extern_sync+0x94>)
 800714a:	4798      	blx	r3

        return 1;                                                                      /* return error */
 800714c:	2301      	movs	r3, #1
 800714e:	e020      	b.n	8007192 <mpu6050_set_extern_sync+0x8a>
    }
    prev &= ~(0x7 << 3);                                                               /* clear config */
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007156:	b2db      	uxtb	r3, r3
 8007158:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                                 /* set config */
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	b25a      	sxtb	r2, r3
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	b25b      	sxtb	r3, r3
 8007164:	4313      	orrs	r3, r2
 8007166:	b25b      	sxtb	r3, r3
 8007168:	b2db      	uxtb	r3, r3
 800716a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 800716c:	f107 020e 	add.w	r2, r7, #14
 8007170:	2301      	movs	r3, #1
 8007172:	211a      	movs	r1, #26
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7fe fd3d 	bl	8005bf4 <a_mpu6050_iic_write>
 800717a:	4603      	mov	r3, r0
 800717c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <mpu6050_set_extern_sync+0x88>
    {
        handle->debug_print("mpu6050: write config failed.\n");                        /* write config failed */
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	4805      	ldr	r0, [pc, #20]	; (80071a0 <mpu6050_set_extern_sync+0x98>)
 800718a:	4798      	blx	r3

        return 1;                                                                      /* return error */
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <mpu6050_set_extern_sync+0x8a>
    }

    return 0;                                                                          /* success return 0 */
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	08008948 	.word	0x08008948
 80071a0:	08008968 	.word	0x08008968

080071a4 <mpu6050_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_low_pass_filter(mpu6050_handle_t *handle, mpu6050_low_pass_filter_t filter)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                /* check handle */
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <mpu6050_set_low_pass_filter+0x16>
    {
        return 2;                                                                      /* return error */
 80071b6:	2302      	movs	r3, #2
 80071b8:	e035      	b.n	8007226 <mpu6050_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                           /* check handle initialization */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d001      	beq.n	80071c8 <mpu6050_set_low_pass_filter+0x24>
    {
        return 3;                                                                      /* return error */
 80071c4:	2303      	movs	r3, #3
 80071c6:	e02e      	b.n	8007226 <mpu6050_set_low_pass_filter+0x82>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 80071c8:	f107 020e 	add.w	r2, r7, #14
 80071cc:	2301      	movs	r3, #1
 80071ce:	211a      	movs	r1, #26
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7fe fcf3 	bl	8005bbc <a_mpu6050_iic_read>
 80071d6:	4603      	mov	r3, r0
 80071d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 80071da:	7bfb      	ldrb	r3, [r7, #15]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <mpu6050_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6050: read config failed.\n");                         /* read config failed */
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	4812      	ldr	r0, [pc, #72]	; (8007230 <mpu6050_set_low_pass_filter+0x8c>)
 80071e6:	4798      	blx	r3

        return 1;                                                                      /* return error */
 80071e8:	2301      	movs	r3, #1
 80071ea:	e01c      	b.n	8007226 <mpu6050_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                               /* clear config */
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	f023 0307 	bic.w	r3, r3, #7
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                               /* set config */
 80071f6:	7bba      	ldrb	r2, [r7, #14]
 80071f8:	78fb      	ldrb	r3, [r7, #3]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8007200:	f107 020e 	add.w	r2, r7, #14
 8007204:	2301      	movs	r3, #1
 8007206:	211a      	movs	r1, #26
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7fe fcf3 	bl	8005bf4 <a_mpu6050_iic_write>
 800720e:	4603      	mov	r3, r0
 8007210:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d005      	beq.n	8007224 <mpu6050_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6050: write config failed.\n");                        /* write config failed */
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	4805      	ldr	r0, [pc, #20]	; (8007234 <mpu6050_set_low_pass_filter+0x90>)
 800721e:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <mpu6050_set_low_pass_filter+0x82>
    }

    return 0;                                                                          /* success return 0 */
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	08008948 	.word	0x08008948
 8007234:	08008968 	.word	0x08008968

08007238 <mpu6050_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_gyroscope_test(mpu6050_handle_t *handle, mpu6050_axis_t axis, mpu6050_bool_t enable)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
 8007244:	4613      	mov	r3, r2
 8007246:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <mpu6050_set_gyroscope_test+0x1a>
    {
        return 2;                                                                           /* return error */
 800724e:	2302      	movs	r3, #2
 8007250:	e043      	b.n	80072da <mpu6050_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007258:	2b01      	cmp	r3, #1
 800725a:	d001      	beq.n	8007260 <mpu6050_set_gyroscope_test+0x28>
    {
        return 3;                                                                           /* return error */
 800725c:	2303      	movs	r3, #3
 800725e:	e03c      	b.n	80072da <mpu6050_set_gyroscope_test+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8007260:	f107 020e 	add.w	r2, r7, #14
 8007264:	2301      	movs	r3, #1
 8007266:	211b      	movs	r1, #27
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7fe fca7 	bl	8005bbc <a_mpu6050_iic_read>
 800726e:	4603      	mov	r3, r0
 8007270:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <mpu6050_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu6050: read gyroscope config failed.\n");                    /* read gyroscope config failed */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	4819      	ldr	r0, [pc, #100]	; (80072e4 <mpu6050_set_gyroscope_test+0xac>)
 800727e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007280:	2301      	movs	r3, #1
 8007282:	e02a      	b.n	80072da <mpu6050_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                                   /* clear config */
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	2201      	movs	r2, #1
 8007288:	fa02 f303 	lsl.w	r3, r2, r3
 800728c:	b25b      	sxtb	r3, r3
 800728e:	43db      	mvns	r3, r3
 8007290:	b25a      	sxtb	r2, r3
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	b25b      	sxtb	r3, r3
 8007296:	4013      	ands	r3, r2
 8007298:	b25b      	sxtb	r3, r3
 800729a:	b2db      	uxtb	r3, r3
 800729c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                                 /* set config */
 800729e:	78ba      	ldrb	r2, [r7, #2]
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	fa02 f303 	lsl.w	r3, r2, r3
 80072a6:	b25a      	sxtb	r2, r3
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	b25b      	sxtb	r3, r3
 80072ac:	4313      	orrs	r3, r2
 80072ae:	b25b      	sxtb	r3, r3
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 80072b4:	f107 020e 	add.w	r2, r7, #14
 80072b8:	2301      	movs	r3, #1
 80072ba:	211b      	movs	r1, #27
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7fe fc99 	bl	8005bf4 <a_mpu6050_iic_write>
 80072c2:	4603      	mov	r3, r0
 80072c4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d005      	beq.n	80072d8 <mpu6050_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu6050: write gyroscope config failed.\n");                   /* write gyroscope config failed */
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	4805      	ldr	r0, [pc, #20]	; (80072e8 <mpu6050_set_gyroscope_test+0xb0>)
 80072d2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80072d4:	2301      	movs	r3, #1
 80072d6:	e000      	b.n	80072da <mpu6050_set_gyroscope_test+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	08008988 	.word	0x08008988
 80072e8:	080089b0 	.word	0x080089b0

080072ec <mpu6050_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_gyroscope_range(mpu6050_handle_t *handle, mpu6050_gyroscope_range_t range)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	460b      	mov	r3, r1
 80072f6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <mpu6050_set_gyroscope_range+0x16>
    {
        return 2;                                                                           /* return error */
 80072fe:	2302      	movs	r3, #2
 8007300:	e039      	b.n	8007376 <mpu6050_set_gyroscope_range+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007308:	2b01      	cmp	r3, #1
 800730a:	d001      	beq.n	8007310 <mpu6050_set_gyroscope_range+0x24>
    {
        return 3;                                                                           /* return error */
 800730c:	2303      	movs	r3, #3
 800730e:	e032      	b.n	8007376 <mpu6050_set_gyroscope_range+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8007310:	f107 020e 	add.w	r2, r7, #14
 8007314:	2301      	movs	r3, #1
 8007316:	211b      	movs	r1, #27
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fe fc4f 	bl	8005bbc <a_mpu6050_iic_read>
 800731e:	4603      	mov	r3, r0
 8007320:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d005      	beq.n	8007334 <mpu6050_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu6050: read gyroscope config failed.\n");                    /* read gyroscope config failed */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	4814      	ldr	r0, [pc, #80]	; (8007380 <mpu6050_set_gyroscope_range+0x94>)
 800732e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007330:	2301      	movs	r3, #1
 8007332:	e020      	b.n	8007376 <mpu6050_set_gyroscope_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                      /* clear config */
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	f023 0318 	bic.w	r3, r3, #24
 800733a:	b2db      	uxtb	r3, r3
 800733c:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                     /* set config */
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	00db      	lsls	r3, r3, #3
 8007342:	b25a      	sxtb	r2, r3
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	b25b      	sxtb	r3, r3
 8007348:	4313      	orrs	r3, r2
 800734a:	b25b      	sxtb	r3, r3
 800734c:	b2db      	uxtb	r3, r3
 800734e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8007350:	f107 020e 	add.w	r2, r7, #14
 8007354:	2301      	movs	r3, #1
 8007356:	211b      	movs	r1, #27
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7fe fc4b 	bl	8005bf4 <a_mpu6050_iic_write>
 800735e:	4603      	mov	r3, r0
 8007360:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <mpu6050_set_gyroscope_range+0x88>
    {
        handle->debug_print("mpu6050: write gyroscope config failed.\n");                   /* write gyroscope config failed */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	4805      	ldr	r0, [pc, #20]	; (8007384 <mpu6050_set_gyroscope_range+0x98>)
 800736e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007370:	2301      	movs	r3, #1
 8007372:	e000      	b.n	8007376 <mpu6050_set_gyroscope_range+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	08008988 	.word	0x08008988
 8007384:	080089b0 	.word	0x080089b0

08007388 <mpu6050_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_accelerometer_test(mpu6050_handle_t *handle, mpu6050_axis_t axis, mpu6050_bool_t enable)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b084      	sub	sp, #16
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	70fb      	strb	r3, [r7, #3]
 8007394:	4613      	mov	r3, r2
 8007396:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <mpu6050_set_accelerometer_test+0x1a>
    {
        return 2;                                                                           /* return error */
 800739e:	2302      	movs	r3, #2
 80073a0:	e043      	b.n	800742a <mpu6050_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d001      	beq.n	80073b0 <mpu6050_set_accelerometer_test+0x28>
    {
        return 3;                                                                           /* return error */
 80073ac:	2303      	movs	r3, #3
 80073ae:	e03c      	b.n	800742a <mpu6050_set_accelerometer_test+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 80073b0:	f107 020e 	add.w	r2, r7, #14
 80073b4:	2301      	movs	r3, #1
 80073b6:	211c      	movs	r1, #28
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7fe fbff 	bl	8005bbc <a_mpu6050_iic_read>
 80073be:	4603      	mov	r3, r0
 80073c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d005      	beq.n	80073d4 <mpu6050_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu6050: read accelerometer config failed.\n");                /* read accelerometer config failed */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	4819      	ldr	r0, [pc, #100]	; (8007434 <mpu6050_set_accelerometer_test+0xac>)
 80073ce:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80073d0:	2301      	movs	r3, #1
 80073d2:	e02a      	b.n	800742a <mpu6050_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                                   /* clear config */
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	2201      	movs	r2, #1
 80073d8:	fa02 f303 	lsl.w	r3, r2, r3
 80073dc:	b25b      	sxtb	r3, r3
 80073de:	43db      	mvns	r3, r3
 80073e0:	b25a      	sxtb	r2, r3
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	b25b      	sxtb	r3, r3
 80073e6:	4013      	ands	r3, r2
 80073e8:	b25b      	sxtb	r3, r3
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                                 /* set config */
 80073ee:	78ba      	ldrb	r2, [r7, #2]
 80073f0:	78fb      	ldrb	r3, [r7, #3]
 80073f2:	fa02 f303 	lsl.w	r3, r2, r3
 80073f6:	b25a      	sxtb	r2, r3
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	b25b      	sxtb	r3, r3
 80073fc:	4313      	orrs	r3, r2
 80073fe:	b25b      	sxtb	r3, r3
 8007400:	b2db      	uxtb	r3, r3
 8007402:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8007404:	f107 020e 	add.w	r2, r7, #14
 8007408:	2301      	movs	r3, #1
 800740a:	211c      	movs	r1, #28
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7fe fbf1 	bl	8005bf4 <a_mpu6050_iic_write>
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d005      	beq.n	8007428 <mpu6050_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu6050: write accelerometer config failed.\n");               /* write accelerometer config failed */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	4805      	ldr	r0, [pc, #20]	; (8007438 <mpu6050_set_accelerometer_test+0xb0>)
 8007422:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007424:	2301      	movs	r3, #1
 8007426:	e000      	b.n	800742a <mpu6050_set_accelerometer_test+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	080083c8 	.word	0x080083c8
 8007438:	080089dc 	.word	0x080089dc

0800743c <mpu6050_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_accelerometer_range(mpu6050_handle_t *handle, mpu6050_accelerometer_range_t range)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <mpu6050_set_accelerometer_range+0x16>
    {
        return 2;                                                                           /* return error */
 800744e:	2302      	movs	r3, #2
 8007450:	e039      	b.n	80074c6 <mpu6050_set_accelerometer_range+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007458:	2b01      	cmp	r3, #1
 800745a:	d001      	beq.n	8007460 <mpu6050_set_accelerometer_range+0x24>
    {
        return 3;                                                                           /* return error */
 800745c:	2303      	movs	r3, #3
 800745e:	e032      	b.n	80074c6 <mpu6050_set_accelerometer_range+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8007460:	f107 020e 	add.w	r2, r7, #14
 8007464:	2301      	movs	r3, #1
 8007466:	211c      	movs	r1, #28
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7fe fba7 	bl	8005bbc <a_mpu6050_iic_read>
 800746e:	4603      	mov	r3, r0
 8007470:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <mpu6050_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu6050: read accelerometer config failed.\n");                /* read accelerometer config failed */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	4814      	ldr	r0, [pc, #80]	; (80074d0 <mpu6050_set_accelerometer_range+0x94>)
 800747e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007480:	2301      	movs	r3, #1
 8007482:	e020      	b.n	80074c6 <mpu6050_set_accelerometer_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                      /* clear config */
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	f023 0318 	bic.w	r3, r3, #24
 800748a:	b2db      	uxtb	r3, r3
 800748c:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                     /* set config */
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	b25a      	sxtb	r2, r3
 8007494:	7bbb      	ldrb	r3, [r7, #14]
 8007496:	b25b      	sxtb	r3, r3
 8007498:	4313      	orrs	r3, r2
 800749a:	b25b      	sxtb	r3, r3
 800749c:	b2db      	uxtb	r3, r3
 800749e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 80074a0:	f107 020e 	add.w	r2, r7, #14
 80074a4:	2301      	movs	r3, #1
 80074a6:	211c      	movs	r1, #28
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7fe fba3 	bl	8005bf4 <a_mpu6050_iic_write>
 80074ae:	4603      	mov	r3, r0
 80074b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <mpu6050_set_accelerometer_range+0x88>
    {
        handle->debug_print("mpu6050: write accelerometer config failed.\n");               /* write accelerometer config failed */
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	4805      	ldr	r0, [pc, #20]	; (80074d4 <mpu6050_set_accelerometer_range+0x98>)
 80074be:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80074c0:	2301      	movs	r3, #1
 80074c2:	e000      	b.n	80074c6 <mpu6050_set_accelerometer_range+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	080083c8 	.word	0x080083c8
 80074d4:	080089dc 	.word	0x080089dc

080074d8 <mpu6050_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fifo_enable(mpu6050_handle_t *handle, mpu6050_fifo_t fifo, mpu6050_bool_t enable)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
 80074e4:	4613      	mov	r3, r2
 80074e6:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                 /* check handle */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <mpu6050_set_fifo_enable+0x1a>
    {
        return 2;                                                                       /* return error */
 80074ee:	2302      	movs	r3, #2
 80074f0:	e043      	b.n	800757a <mpu6050_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d001      	beq.n	8007500 <mpu6050_set_fifo_enable+0x28>
    {
        return 3;                                                                       /* return error */
 80074fc:	2303      	movs	r3, #3
 80074fe:	e03c      	b.n	800757a <mpu6050_set_fifo_enable+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 8007500:	f107 020e 	add.w	r2, r7, #14
 8007504:	2301      	movs	r3, #1
 8007506:	2123      	movs	r1, #35	; 0x23
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7fe fb57 	bl	8005bbc <a_mpu6050_iic_read>
 800750e:	4603      	mov	r3, r0
 8007510:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <mpu6050_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu6050: read fifo enable config failed.\n");              /* read fifo enable config failed */
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	4819      	ldr	r0, [pc, #100]	; (8007584 <mpu6050_set_fifo_enable+0xac>)
 800751e:	4798      	blx	r3

        return 1;                                                                       /* return error */
 8007520:	2301      	movs	r3, #1
 8007522:	e02a      	b.n	800757a <mpu6050_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                               /* clear config */
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	2201      	movs	r2, #1
 8007528:	fa02 f303 	lsl.w	r3, r2, r3
 800752c:	b25b      	sxtb	r3, r3
 800752e:	43db      	mvns	r3, r3
 8007530:	b25a      	sxtb	r2, r3
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	b25b      	sxtb	r3, r3
 8007536:	4013      	ands	r3, r2
 8007538:	b25b      	sxtb	r3, r3
 800753a:	b2db      	uxtb	r3, r3
 800753c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                             /* set config */
 800753e:	78ba      	ldrb	r2, [r7, #2]
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	fa02 f303 	lsl.w	r3, r2, r3
 8007546:	b25a      	sxtb	r2, r3
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	b25b      	sxtb	r3, r3
 800754c:	4313      	orrs	r3, r2
 800754e:	b25b      	sxtb	r3, r3
 8007550:	b2db      	uxtb	r3, r3
 8007552:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 8007554:	f107 020e 	add.w	r2, r7, #14
 8007558:	2301      	movs	r3, #1
 800755a:	2123      	movs	r1, #35	; 0x23
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f7fe fb49 	bl	8005bf4 <a_mpu6050_iic_write>
 8007562:	4603      	mov	r3, r0
 8007564:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007566:	7bfb      	ldrb	r3, [r7, #15]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <mpu6050_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu6050: write fifo enable config failed.\n");             /* write fifo enable config failed */
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	4805      	ldr	r0, [pc, #20]	; (8007588 <mpu6050_set_fifo_enable+0xb0>)
 8007572:	4798      	blx	r3

        return 1;                                                                       /* return error */
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <mpu6050_set_fifo_enable+0xa2>
    }

    return 0;                                                                           /* success return 0 */
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	08008a0c 	.word	0x08008a0c
 8007588:	08008a38 	.word	0x08008a38

0800758c <mpu6050_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_level(mpu6050_handle_t *handle, mpu6050_pin_level_t level)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	460b      	mov	r3, r1
 8007596:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <mpu6050_set_interrupt_level+0x16>
    {
        return 2;                                                                           /* return error */
 800759e:	2302      	movs	r3, #2
 80075a0:	e039      	b.n	8007616 <mpu6050_set_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d001      	beq.n	80075b0 <mpu6050_set_interrupt_level+0x24>
    {
        return 3;                                                                           /* return error */
 80075ac:	2303      	movs	r3, #3
 80075ae:	e032      	b.n	8007616 <mpu6050_set_interrupt_level+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80075b0:	f107 020e 	add.w	r2, r7, #14
 80075b4:	2301      	movs	r3, #1
 80075b6:	2137      	movs	r1, #55	; 0x37
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7fe faff 	bl	8005bbc <a_mpu6050_iic_read>
 80075be:	4603      	mov	r3, r0
 80075c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d005      	beq.n	80075d4 <mpu6050_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	4814      	ldr	r0, [pc, #80]	; (8007620 <mpu6050_set_interrupt_level+0x94>)
 80075ce:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80075d0:	2301      	movs	r3, #1
 80075d2:	e020      	b.n	8007616 <mpu6050_set_interrupt_level+0x8a>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                     /* set config */
 80075de:	78fb      	ldrb	r3, [r7, #3]
 80075e0:	01db      	lsls	r3, r3, #7
 80075e2:	b25a      	sxtb	r2, r3
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	b25b      	sxtb	r3, r3
 80075e8:	4313      	orrs	r3, r2
 80075ea:	b25b      	sxtb	r3, r3
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80075f0:	f107 020e 	add.w	r2, r7, #14
 80075f4:	2301      	movs	r3, #1
 80075f6:	2137      	movs	r1, #55	; 0x37
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fe fafb 	bl	8005bf4 <a_mpu6050_iic_write>
 80075fe:	4603      	mov	r3, r0
 8007600:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <mpu6050_set_interrupt_level+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	4805      	ldr	r0, [pc, #20]	; (8007624 <mpu6050_set_interrupt_level+0x98>)
 800760e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007610:	2301      	movs	r3, #1
 8007612:	e000      	b.n	8007616 <mpu6050_set_interrupt_level+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	08008a64 	.word	0x08008a64
 8007624:	08008a8c 	.word	0x08008a8c

08007628 <mpu6050_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_pin_type(mpu6050_handle_t *handle, mpu6050_pin_type_t type)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <mpu6050_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                           /* return error */
 800763a:	2302      	movs	r3, #2
 800763c:	e039      	b.n	80076b2 <mpu6050_set_interrupt_pin_type+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007644:	2b01      	cmp	r3, #1
 8007646:	d001      	beq.n	800764c <mpu6050_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                           /* return error */
 8007648:	2303      	movs	r3, #3
 800764a:	e032      	b.n	80076b2 <mpu6050_set_interrupt_pin_type+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 800764c:	f107 020e 	add.w	r2, r7, #14
 8007650:	2301      	movs	r3, #1
 8007652:	2137      	movs	r1, #55	; 0x37
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7fe fab1 	bl	8005bbc <a_mpu6050_iic_read>
 800765a:	4603      	mov	r3, r0
 800765c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <mpu6050_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	4814      	ldr	r0, [pc, #80]	; (80076bc <mpu6050_set_interrupt_pin_type+0x94>)
 800766a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 800766c:	2301      	movs	r3, #1
 800766e:	e020      	b.n	80076b2 <mpu6050_set_interrupt_pin_type+0x8a>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 8007670:	7bbb      	ldrb	r3, [r7, #14]
 8007672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007676:	b2db      	uxtb	r3, r3
 8007678:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                      /* set config */
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	019b      	lsls	r3, r3, #6
 800767e:	b25a      	sxtb	r2, r3
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	b25b      	sxtb	r3, r3
 8007684:	4313      	orrs	r3, r2
 8007686:	b25b      	sxtb	r3, r3
 8007688:	b2db      	uxtb	r3, r3
 800768a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800768c:	f107 020e 	add.w	r2, r7, #14
 8007690:	2301      	movs	r3, #1
 8007692:	2137      	movs	r1, #55	; 0x37
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7fe faad 	bl	8005bf4 <a_mpu6050_iic_write>
 800769a:	4603      	mov	r3, r0
 800769c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d005      	beq.n	80076b0 <mpu6050_set_interrupt_pin_type+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	699b      	ldr	r3, [r3, #24]
 80076a8:	4805      	ldr	r0, [pc, #20]	; (80076c0 <mpu6050_set_interrupt_pin_type+0x98>)
 80076aa:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80076ac:	2301      	movs	r3, #1
 80076ae:	e000      	b.n	80076b2 <mpu6050_set_interrupt_pin_type+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 80076b0:	2300      	movs	r3, #0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	08008a64 	.word	0x08008a64
 80076c0:	08008a8c 	.word	0x08008a8c

080076c4 <mpu6050_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_latch(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <mpu6050_set_interrupt_latch+0x16>
    {
        return 2;                                                                           /* return error */
 80076d6:	2302      	movs	r3, #2
 80076d8:	e03c      	b.n	8007754 <mpu6050_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d001      	beq.n	80076e8 <mpu6050_set_interrupt_latch+0x24>
    {
        return 3;                                                                           /* return error */
 80076e4:	2303      	movs	r3, #3
 80076e6:	e035      	b.n	8007754 <mpu6050_set_interrupt_latch+0x90>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80076e8:	f107 020e 	add.w	r2, r7, #14
 80076ec:	2301      	movs	r3, #1
 80076ee:	2137      	movs	r1, #55	; 0x37
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7fe fa63 	bl	8005bbc <a_mpu6050_iic_read>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <mpu6050_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	4815      	ldr	r0, [pc, #84]	; (800775c <mpu6050_set_interrupt_latch+0x98>)
 8007706:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007708:	2301      	movs	r3, #1
 800770a:	e023      	b.n	8007754 <mpu6050_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                      /* clear config */
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	f023 0320 	bic.w	r3, r3, #32
 8007712:	b2db      	uxtb	r3, r3
 8007714:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                                 /* set config */
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <mpu6050_set_interrupt_latch+0x5c>
 800771c:	2220      	movs	r2, #32
 800771e:	e000      	b.n	8007722 <mpu6050_set_interrupt_latch+0x5e>
 8007720:	2200      	movs	r2, #0
 8007722:	7bbb      	ldrb	r3, [r7, #14]
 8007724:	b25b      	sxtb	r3, r3
 8007726:	4313      	orrs	r3, r2
 8007728:	b25b      	sxtb	r3, r3
 800772a:	b2db      	uxtb	r3, r3
 800772c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800772e:	f107 020e 	add.w	r2, r7, #14
 8007732:	2301      	movs	r3, #1
 8007734:	2137      	movs	r1, #55	; 0x37
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fe fa5c 	bl	8005bf4 <a_mpu6050_iic_write>
 800773c:	4603      	mov	r3, r0
 800773e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <mpu6050_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	4805      	ldr	r0, [pc, #20]	; (8007760 <mpu6050_set_interrupt_latch+0x9c>)
 800774c:	4798      	blx	r3

        return 1;                                                                           /* return error */
 800774e:	2301      	movs	r3, #1
 8007750:	e000      	b.n	8007754 <mpu6050_set_interrupt_latch+0x90>
    }

    return 0;                                                                               /* success return 0 */
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	08008a64 	.word	0x08008a64
 8007760:	08008a8c 	.word	0x08008a8c

08007764 <mpu6050_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_read_clear(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <mpu6050_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                           /* return error */
 8007776:	2302      	movs	r3, #2
 8007778:	e039      	b.n	80077ee <mpu6050_set_interrupt_read_clear+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007780:	2b01      	cmp	r3, #1
 8007782:	d001      	beq.n	8007788 <mpu6050_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                           /* return error */
 8007784:	2303      	movs	r3, #3
 8007786:	e032      	b.n	80077ee <mpu6050_set_interrupt_read_clear+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007788:	f107 020e 	add.w	r2, r7, #14
 800778c:	2301      	movs	r3, #1
 800778e:	2137      	movs	r1, #55	; 0x37
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7fe fa13 	bl	8005bbc <a_mpu6050_iic_read>
 8007796:	4603      	mov	r3, r0
 8007798:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d005      	beq.n	80077ac <mpu6050_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	699b      	ldr	r3, [r3, #24]
 80077a4:	4814      	ldr	r0, [pc, #80]	; (80077f8 <mpu6050_set_interrupt_read_clear+0x94>)
 80077a6:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80077a8:	2301      	movs	r3, #1
 80077aa:	e020      	b.n	80077ee <mpu6050_set_interrupt_read_clear+0x8a>
    }
    prev &= ~(1 << 4);                                                                      /* clear config */
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	f023 0310 	bic.w	r3, r3, #16
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                    /* set config */
 80077b6:	78fb      	ldrb	r3, [r7, #3]
 80077b8:	011b      	lsls	r3, r3, #4
 80077ba:	b25a      	sxtb	r2, r3
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	b25b      	sxtb	r3, r3
 80077c0:	4313      	orrs	r3, r2
 80077c2:	b25b      	sxtb	r3, r3
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80077c8:	f107 020e 	add.w	r2, r7, #14
 80077cc:	2301      	movs	r3, #1
 80077ce:	2137      	movs	r1, #55	; 0x37
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7fe fa0f 	bl	8005bf4 <a_mpu6050_iic_write>
 80077d6:	4603      	mov	r3, r0
 80077d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80077da:	7bfb      	ldrb	r3, [r7, #15]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <mpu6050_set_interrupt_read_clear+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	4805      	ldr	r0, [pc, #20]	; (80077fc <mpu6050_set_interrupt_read_clear+0x98>)
 80077e6:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80077e8:	2301      	movs	r3, #1
 80077ea:	e000      	b.n	80077ee <mpu6050_set_interrupt_read_clear+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	08008a64 	.word	0x08008a64
 80077fc:	08008a8c 	.word	0x08008a8c

08007800 <mpu6050_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fsync_interrupt_level(mpu6050_handle_t *handle, mpu6050_pin_level_t level)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <mpu6050_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                           /* return error */
 8007812:	2302      	movs	r3, #2
 8007814:	e039      	b.n	800788a <mpu6050_set_fsync_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800781c:	2b01      	cmp	r3, #1
 800781e:	d001      	beq.n	8007824 <mpu6050_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                           /* return error */
 8007820:	2303      	movs	r3, #3
 8007822:	e032      	b.n	800788a <mpu6050_set_fsync_interrupt_level+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007824:	f107 020e 	add.w	r2, r7, #14
 8007828:	2301      	movs	r3, #1
 800782a:	2137      	movs	r1, #55	; 0x37
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7fe f9c5 	bl	8005bbc <a_mpu6050_iic_read>
 8007832:	4603      	mov	r3, r0
 8007834:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <mpu6050_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	4814      	ldr	r0, [pc, #80]	; (8007894 <mpu6050_set_fsync_interrupt_level+0x94>)
 8007842:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007844:	2301      	movs	r3, #1
 8007846:	e020      	b.n	800788a <mpu6050_set_fsync_interrupt_level+0x8a>
    }
    prev &= ~(1 << 3);                                                                      /* clear config */
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	f023 0308 	bic.w	r3, r3, #8
 800784e:	b2db      	uxtb	r3, r3
 8007850:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                     /* set config */
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	b25a      	sxtb	r2, r3
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	b25b      	sxtb	r3, r3
 800785c:	4313      	orrs	r3, r2
 800785e:	b25b      	sxtb	r3, r3
 8007860:	b2db      	uxtb	r3, r3
 8007862:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007864:	f107 020e 	add.w	r2, r7, #14
 8007868:	2301      	movs	r3, #1
 800786a:	2137      	movs	r1, #55	; 0x37
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7fe f9c1 	bl	8005bf4 <a_mpu6050_iic_write>
 8007872:	4603      	mov	r3, r0
 8007874:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d005      	beq.n	8007888 <mpu6050_set_fsync_interrupt_level+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	4805      	ldr	r0, [pc, #20]	; (8007898 <mpu6050_set_fsync_interrupt_level+0x98>)
 8007882:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007884:	2301      	movs	r3, #1
 8007886:	e000      	b.n	800788a <mpu6050_set_fsync_interrupt_level+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	08008a64 	.word	0x08008a64
 8007898:	08008a8c 	.word	0x08008a8c

0800789c <mpu6050_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fsync_interrupt(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	460b      	mov	r3, r1
 80078a6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <mpu6050_set_fsync_interrupt+0x16>
    {
        return 2;                                                                           /* return error */
 80078ae:	2302      	movs	r3, #2
 80078b0:	e039      	b.n	8007926 <mpu6050_set_fsync_interrupt+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d001      	beq.n	80078c0 <mpu6050_set_fsync_interrupt+0x24>
    {
        return 3;                                                                           /* return error */
 80078bc:	2303      	movs	r3, #3
 80078be:	e032      	b.n	8007926 <mpu6050_set_fsync_interrupt+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80078c0:	f107 020e 	add.w	r2, r7, #14
 80078c4:	2301      	movs	r3, #1
 80078c6:	2137      	movs	r1, #55	; 0x37
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7fe f977 	bl	8005bbc <a_mpu6050_iic_read>
 80078ce:	4603      	mov	r3, r0
 80078d0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <mpu6050_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	4814      	ldr	r0, [pc, #80]	; (8007930 <mpu6050_set_fsync_interrupt+0x94>)
 80078de:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80078e0:	2301      	movs	r3, #1
 80078e2:	e020      	b.n	8007926 <mpu6050_set_fsync_interrupt+0x8a>
    }
    prev &= ~(1 << 2);                                                                      /* clear config */
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	f023 0304 	bic.w	r3, r3, #4
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                    /* set config */
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	b25a      	sxtb	r2, r3
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	b25b      	sxtb	r3, r3
 80078f8:	4313      	orrs	r3, r2
 80078fa:	b25b      	sxtb	r3, r3
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007900:	f107 020e 	add.w	r2, r7, #14
 8007904:	2301      	movs	r3, #1
 8007906:	2137      	movs	r1, #55	; 0x37
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7fe f973 	bl	8005bf4 <a_mpu6050_iic_write>
 800790e:	4603      	mov	r3, r0
 8007910:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <mpu6050_set_fsync_interrupt+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	4805      	ldr	r0, [pc, #20]	; (8007934 <mpu6050_set_fsync_interrupt+0x98>)
 800791e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007920:	2301      	movs	r3, #1
 8007922:	e000      	b.n	8007926 <mpu6050_set_fsync_interrupt+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	08008a64 	.word	0x08008a64
 8007934:	08008a8c 	.word	0x08008a8c

08007938 <mpu6050_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_iic_bypass(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <mpu6050_set_iic_bypass+0x16>
    {
        return 2;                                                                           /* return error */
 800794a:	2302      	movs	r3, #2
 800794c:	e039      	b.n	80079c2 <mpu6050_set_iic_bypass+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007954:	2b01      	cmp	r3, #1
 8007956:	d001      	beq.n	800795c <mpu6050_set_iic_bypass+0x24>
    {
        return 3;                                                                           /* return error */
 8007958:	2303      	movs	r3, #3
 800795a:	e032      	b.n	80079c2 <mpu6050_set_iic_bypass+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 800795c:	f107 020e 	add.w	r2, r7, #14
 8007960:	2301      	movs	r3, #1
 8007962:	2137      	movs	r1, #55	; 0x37
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fe f929 	bl	8005bbc <a_mpu6050_iic_read>
 800796a:	4603      	mov	r3, r0
 800796c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d005      	beq.n	8007980 <mpu6050_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	4814      	ldr	r0, [pc, #80]	; (80079cc <mpu6050_set_iic_bypass+0x94>)
 800797a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 800797c:	2301      	movs	r3, #1
 800797e:	e020      	b.n	80079c2 <mpu6050_set_iic_bypass+0x8a>
    }
    prev &= ~(1 << 1);                                                                      /* clear config */
 8007980:	7bbb      	ldrb	r3, [r7, #14]
 8007982:	f023 0302 	bic.w	r3, r3, #2
 8007986:	b2db      	uxtb	r3, r3
 8007988:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                    /* set config */
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	b25a      	sxtb	r2, r3
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	b25b      	sxtb	r3, r3
 8007994:	4313      	orrs	r3, r2
 8007996:	b25b      	sxtb	r3, r3
 8007998:	b2db      	uxtb	r3, r3
 800799a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800799c:	f107 020e 	add.w	r2, r7, #14
 80079a0:	2301      	movs	r3, #1
 80079a2:	2137      	movs	r1, #55	; 0x37
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7fe f925 	bl	8005bf4 <a_mpu6050_iic_write>
 80079aa:	4603      	mov	r3, r0
 80079ac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d005      	beq.n	80079c0 <mpu6050_set_iic_bypass+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	4805      	ldr	r0, [pc, #20]	; (80079d0 <mpu6050_set_iic_bypass+0x98>)
 80079ba:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <mpu6050_set_iic_bypass+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	08008a64 	.word	0x08008a64
 80079d0:	08008a8c 	.word	0x08008a8c

080079d4 <mpu6050_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt(mpu6050_handle_t *handle, mpu6050_interrupt_t type, mpu6050_bool_t enable)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
 80079e0:	4613      	mov	r3, r2
 80079e2:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <mpu6050_set_interrupt+0x1a>
    {
        return 2;                                                                           /* return error */
 80079ea:	2302      	movs	r3, #2
 80079ec:	e043      	b.n	8007a76 <mpu6050_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d001      	beq.n	80079fc <mpu6050_set_interrupt+0x28>
    {
        return 3;                                                                           /* return error */
 80079f8:	2303      	movs	r3, #3
 80079fa:	e03c      	b.n	8007a76 <mpu6050_set_interrupt+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 80079fc:	f107 020e 	add.w	r2, r7, #14
 8007a00:	2301      	movs	r3, #1
 8007a02:	2138      	movs	r1, #56	; 0x38
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f7fe f8d9 	bl	8005bbc <a_mpu6050_iic_read>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d005      	beq.n	8007a20 <mpu6050_set_interrupt+0x4c>
    {
        handle->debug_print("mpu6050: read interrupt enable failed.\n");                    /* read interrupt enable failed */
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	4819      	ldr	r0, [pc, #100]	; (8007a80 <mpu6050_set_interrupt+0xac>)
 8007a1a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e02a      	b.n	8007a76 <mpu6050_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                                   /* clear config */
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	2201      	movs	r2, #1
 8007a24:	fa02 f303 	lsl.w	r3, r2, r3
 8007a28:	b25b      	sxtb	r3, r3
 8007a2a:	43db      	mvns	r3, r3
 8007a2c:	b25a      	sxtb	r2, r3
 8007a2e:	7bbb      	ldrb	r3, [r7, #14]
 8007a30:	b25b      	sxtb	r3, r3
 8007a32:	4013      	ands	r3, r2
 8007a34:	b25b      	sxtb	r3, r3
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                                 /* set config */
 8007a3a:	78ba      	ldrb	r2, [r7, #2]
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a42:	b25a      	sxtb	r2, r3
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	b25b      	sxtb	r3, r3
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	b25b      	sxtb	r3, r3
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 8007a50:	f107 020e 	add.w	r2, r7, #14
 8007a54:	2301      	movs	r3, #1
 8007a56:	2138      	movs	r1, #56	; 0x38
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7fe f8cb 	bl	8005bf4 <a_mpu6050_iic_write>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d005      	beq.n	8007a74 <mpu6050_set_interrupt+0xa0>
    {
        handle->debug_print("mpu6050: write interrupt enable failed.\n");                   /* write interrupt enable failed */
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	4805      	ldr	r0, [pc, #20]	; (8007a84 <mpu6050_set_interrupt+0xb0>)
 8007a6e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8007a70:	2301      	movs	r3, #1
 8007a72:	e000      	b.n	8007a76 <mpu6050_set_interrupt+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	08008ab4 	.word	0x08008ab4
 8007a84:	08008adc 	.word	0x08008adc

08007a88 <__libc_init_array>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	4d0d      	ldr	r5, [pc, #52]	; (8007ac0 <__libc_init_array+0x38>)
 8007a8c:	4c0d      	ldr	r4, [pc, #52]	; (8007ac4 <__libc_init_array+0x3c>)
 8007a8e:	1b64      	subs	r4, r4, r5
 8007a90:	10a4      	asrs	r4, r4, #2
 8007a92:	2600      	movs	r6, #0
 8007a94:	42a6      	cmp	r6, r4
 8007a96:	d109      	bne.n	8007aac <__libc_init_array+0x24>
 8007a98:	4d0b      	ldr	r5, [pc, #44]	; (8007ac8 <__libc_init_array+0x40>)
 8007a9a:	4c0c      	ldr	r4, [pc, #48]	; (8007acc <__libc_init_array+0x44>)
 8007a9c:	f000 f834 	bl	8007b08 <_init>
 8007aa0:	1b64      	subs	r4, r4, r5
 8007aa2:	10a4      	asrs	r4, r4, #2
 8007aa4:	2600      	movs	r6, #0
 8007aa6:	42a6      	cmp	r6, r4
 8007aa8:	d105      	bne.n	8007ab6 <__libc_init_array+0x2e>
 8007aaa:	bd70      	pop	{r4, r5, r6, pc}
 8007aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab0:	4798      	blx	r3
 8007ab2:	3601      	adds	r6, #1
 8007ab4:	e7ee      	b.n	8007a94 <__libc_init_array+0xc>
 8007ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aba:	4798      	blx	r3
 8007abc:	3601      	adds	r6, #1
 8007abe:	e7f2      	b.n	8007aa6 <__libc_init_array+0x1e>
 8007ac0:	08009638 	.word	0x08009638
 8007ac4:	08009638 	.word	0x08009638
 8007ac8:	08009638 	.word	0x08009638
 8007acc:	0800963c 	.word	0x0800963c

08007ad0 <memset>:
 8007ad0:	4402      	add	r2, r0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d100      	bne.n	8007ada <memset+0xa>
 8007ad8:	4770      	bx	lr
 8007ada:	f803 1b01 	strb.w	r1, [r3], #1
 8007ade:	e7f9      	b.n	8007ad4 <memset+0x4>

08007ae0 <strcpy>:
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ae6:	f803 2b01 	strb.w	r2, [r3], #1
 8007aea:	2a00      	cmp	r2, #0
 8007aec:	d1f9      	bne.n	8007ae2 <strcpy+0x2>
 8007aee:	4770      	bx	lr

08007af0 <strnlen>:
 8007af0:	b510      	push	{r4, lr}
 8007af2:	4602      	mov	r2, r0
 8007af4:	4401      	add	r1, r0
 8007af6:	428a      	cmp	r2, r1
 8007af8:	4613      	mov	r3, r2
 8007afa:	d003      	beq.n	8007b04 <strnlen+0x14>
 8007afc:	781c      	ldrb	r4, [r3, #0]
 8007afe:	3201      	adds	r2, #1
 8007b00:	2c00      	cmp	r4, #0
 8007b02:	d1f8      	bne.n	8007af6 <strnlen+0x6>
 8007b04:	1a18      	subs	r0, r3, r0
 8007b06:	bd10      	pop	{r4, pc}

08007b08 <_init>:
 8007b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0a:	bf00      	nop
 8007b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0e:	bc08      	pop	{r3}
 8007b10:	469e      	mov	lr, r3
 8007b12:	4770      	bx	lr

08007b14 <_fini>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	bf00      	nop
 8007b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1a:	bc08      	pop	{r3}
 8007b1c:	469e      	mov	lr, r3
 8007b1e:	4770      	bx	lr
