
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  0800cc80  0800cc80  0001cc80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1c4  0800d1c4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1c4  0800d1c4  0001d1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1cc  0800d1cc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1cc  0800d1cc  0001d1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1d0  0800d1d0  0001d1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d1d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000043a0  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004584  20004584  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019f2a  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a43  00000000  00000000  0003a13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  0003db88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001270  00000000  00000000  0003ef80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248dd  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ddc  00000000  00000000  00064acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6cea  00000000  00000000  0007c8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00153593  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000066c4  00000000  00000000  001535e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc64 	.word	0x0800cc64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800cc64 	.word	0x0800cc64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <__io_putchar>:
extern osSemaphoreId ControlFlagHandle;
extern osMessageQId OutputHandle;
uint8_t byte;
extern osSemaphoreId DataRxHandle;
/*Funciones privadas ------------------------------------*/
int __io_putchar(int ch){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	uint8_t c = ch & 0xFF;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &c, 1, 10);
 8001006:	f107 010f 	add.w	r1, r7, #15
 800100a:	230a      	movs	r3, #10
 800100c:	2201      	movs	r2, #1
 800100e:	4804      	ldr	r0, [pc, #16]	; (8001020 <__io_putchar+0x28>)
 8001010:	f003 fcec 	bl	80049ec <HAL_UART_Transmit>
	return ch;
 8001014:	687b      	ldr	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200007a8 	.word	0x200007a8

08001024 <HAL_TIM_SampleCallback>:
void HAL_TIM_SampleCallback(TIM_HandleTypeDef *htim)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(ControlFlagHandle);
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <HAL_TIM_SampleCallback+0x1c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f004 fe93 	bl	8005d5c <osSemaphoreRelease>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000218 	.word	0x20000218

08001044 <HAL_UART_DataCallback>:

void HAL_UART_DataCallback(UART_HandleTypeDef *huart){
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(DataRxHandle);
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_UART_DataCallback+0x24>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f004 fe83 	bl	8005d5c <osSemaphoreRelease>
	HAL_UART_Receive_IT(huart, &byte, 1);
 8001056:	2201      	movs	r2, #1
 8001058:	4904      	ldr	r1, [pc, #16]	; (800106c <HAL_UART_DataCallback+0x28>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f003 fd58 	bl	8004b10 <HAL_UART_Receive_IT>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000021c 	.word	0x2000021c
 800106c:	20000200 	.word	0x20000200

08001070 <StartDefaultTask>:
/*Definicion de las tareas ------------------------------*/

void StartDefaultTask(void const * argument){
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

	/*Secuancia de inicio*/

	for(;;){
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001078:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <StartDefaultTask+0x1c>)
 800107e:	f001 fb96 	bl	80027ae <HAL_GPIO_TogglePin>
		osDelay(150);
 8001082:	2096      	movs	r0, #150	; 0x96
 8001084:	f004 fdd5 	bl	8005c32 <osDelay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001088:	e7f6      	b.n	8001078 <StartDefaultTask+0x8>
 800108a:	bf00      	nop
 800108c:	40020c00 	.word	0x40020c00

08001090 <Control_Task>:
	}
}
void Control_Task(void const * argument){
 8001090:	b580      	push	{r7, lr}
 8001092:	b09c      	sub	sp, #112	; 0x70
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	/*Local variables -----------------------------------*/
	float ref = 100;
 8001098:	4b6b      	ldr	r3, [pc, #428]	; (8001248 <Control_Task+0x1b8>)
 800109a:	66fb      	str	r3, [r7, #108]	; 0x6c
	float uc;
	uint16_t duty;
	PID_Def_t motor;
	uint32_t pulsos;
	osEvent evt;
	char txt[10] = {0};
 800109c:	2300      	movs	r3, #0
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	809a      	strh	r2, [r3, #4]
	//secuencia de inicio
	PID_Init(&motor, KP, KI, KD, Ts, UMIN, UMAX);
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	eddf 2a67 	vldr	s5, [pc, #412]	; 800124c <Control_Task+0x1bc>
 80010b2:	ed9f 2a67 	vldr	s4, [pc, #412]	; 8001250 <Control_Task+0x1c0>
 80010b6:	eddf 1a67 	vldr	s3, [pc, #412]	; 8001254 <Control_Task+0x1c4>
 80010ba:	ed9f 1a67 	vldr	s2, [pc, #412]	; 8001258 <Control_Task+0x1c8>
 80010be:	eddf 0a67 	vldr	s1, [pc, #412]	; 800125c <Control_Task+0x1cc>
 80010c2:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8001260 <Control_Task+0x1d0>
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f986 	bl	80013d8 <PID_Init>
	//timer
	HAL_TIM_RegisterCallback(&htim7, HAL_TIM_PERIOD_ELAPSED_CB_ID, HAL_TIM_SampleCallback);
 80010cc:	4a65      	ldr	r2, [pc, #404]	; (8001264 <Control_Task+0x1d4>)
 80010ce:	210e      	movs	r1, #14
 80010d0:	4865      	ldr	r0, [pc, #404]	; (8001268 <Control_Task+0x1d8>)
 80010d2:	f002 fdc7 	bl	8003c64 <HAL_TIM_RegisterCallback>
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2110      	movs	r1, #16
 80010da:	4864      	ldr	r0, [pc, #400]	; (800126c <Control_Task+0x1dc>)
 80010dc:	f001 fb4e 	bl	800277c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2120      	movs	r1, #32
 80010e4:	4861      	ldr	r0, [pc, #388]	; (800126c <Control_Task+0x1dc>)
 80010e6:	f001 fb49 	bl	800277c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim2);
 80010ea:	4861      	ldr	r0, [pc, #388]	; (8001270 <Control_Task+0x1e0>)
 80010ec:	f002 f8a0 	bl	8003230 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010f0:	2100      	movs	r1, #0
 80010f2:	4860      	ldr	r0, [pc, #384]	; (8001274 <Control_Task+0x1e4>)
 80010f4:	f002 f9f8 	bl	80034e8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim7);
 80010f8:	485b      	ldr	r0, [pc, #364]	; (8001268 <Control_Task+0x1d8>)
 80010fa:	f002 f929 	bl	8003350 <HAL_TIM_Base_Start_IT>

	for(;;){
		//se espera una bandera
		if(osSemaphoreWait(ControlFlagHandle, osWaitForever) == osOK){
 80010fe:	4b5e      	ldr	r3, [pc, #376]	; (8001278 <Control_Task+0x1e8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f04f 31ff 	mov.w	r1, #4294967295
 8001106:	4618      	mov	r0, r3
 8001108:	f004 fdda 	bl	8005cc0 <osSemaphoreWait>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f5      	bne.n	80010fe <Control_Task+0x6e>
			//todo
			pulsos = __HAL_TIM_GET_COUNTER(&htim2);	//se lee la cantidad de pulsos leidos en un segundo
 8001112:	4b57      	ldr	r3, [pc, #348]	; (8001270 <Control_Task+0x1e0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001118:	66bb      	str	r3, [r7, #104]	; 0x68
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 800111a:	4b55      	ldr	r3, [pc, #340]	; (8001270 <Control_Task+0x1e0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
			rpm = (float)pulsos * 60.0 / (Ts * S);
 8001122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800112c:	ee17 0a90 	vmov	r0, s15
 8001130:	f7ff fa0a 	bl	8000548 <__aeabi_f2d>
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <Control_Task+0x1ec>)
 800113a:	f7ff fa5d 	bl	80005f8 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800114a:	4b4d      	ldr	r3, [pc, #308]	; (8001280 <Control_Task+0x1f0>)
 800114c:	f7ff fb7e 	bl	800084c <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fd46 	bl	8000be8 <__aeabi_d2f>
 800115c:	4603      	mov	r3, r0
 800115e:	667b      	str	r3, [r7, #100]	; 0x64
			rads = rpm * (2 * M_PI) / 60;
 8001160:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001162:	f7ff f9f1 	bl	8000548 <__aeabi_f2d>
 8001166:	a334      	add	r3, pc, #208	; (adr r3, 8001238 <Control_Task+0x1a8>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	f7ff fa44 	bl	80005f8 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4610      	mov	r0, r2
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	4b3f      	ldr	r3, [pc, #252]	; (800127c <Control_Task+0x1ec>)
 800117e:	f7ff fb65 	bl	800084c <__aeabi_ddiv>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fd2d 	bl	8000be8 <__aeabi_d2f>
 800118e:	4603      	mov	r3, r0
 8001190:	663b      	str	r3, [r7, #96]	; 0x60
			//Filtro digital pasa bajo

			//->referencia
			evt = osMessageGet(RefHandle, 1);
 8001192:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <Control_Task+0x1f4>)
 8001194:	6819      	ldr	r1, [r3, #0]
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	2201      	movs	r2, #1
 800119c:	4618      	mov	r0, r3
 800119e:	f004 fe7b 	bl	8005e98 <osMessageGet>
			if(evt.status == osEventMessage){
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	2b10      	cmp	r3, #16
 80011a6:	d102      	bne.n	80011ae <Control_Task+0x11e>
				ref = *((float*)evt.value.p);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			//->control
			uc = PID_Compute(&motor, ref, rads); //voltaje
 80011ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b2:	edd7 0a18 	vldr	s1, [r7, #96]	; 0x60
 80011b6:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f941 	bl	8001442 <PID_Compute>
 80011c0:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

			duty = (uint16_t)(uc * htim3.Instance->ARR / UMAX); //voltaje -> duty
 80011c4:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <Control_Task+0x1e4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80011d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011da:	ee17 0a90 	vmov	r0, s15
 80011de:	f7ff f9b3 	bl	8000548 <__aeabi_f2d>
 80011e2:	a317      	add	r3, pc, #92	; (adr r3, 8001240 <Control_Task+0x1b0>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff fb30 	bl	800084c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fcd8 	bl	8000ba8 <__aeabi_d2uiz>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty);
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <Control_Task+0x1e4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8001206:	635a      	str	r2, [r3, #52]	; 0x34

			//->dato a labview
			//osMessagePut(OutputHandle, (uint32_t)&rads, 5);
			sprintf(txt, "%.2f\r\n",rads);
 8001208:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800120a:	f7ff f99d 	bl	8000548 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	f107 000c 	add.w	r0, r7, #12
 8001216:	491c      	ldr	r1, [pc, #112]	; (8001288 <Control_Task+0x1f8>)
 8001218:	f008 f95e 	bl	80094d8 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)txt, strlen(txt), 10);
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4618      	mov	r0, r3
 8001222:	f7fe ffd5 	bl	80001d0 <strlen>
 8001226:	4603      	mov	r3, r0
 8001228:	b29a      	uxth	r2, r3
 800122a:	f107 010c 	add.w	r1, r7, #12
 800122e:	230a      	movs	r3, #10
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <Control_Task+0x1fc>)
 8001232:	f003 fbdb 	bl	80049ec <HAL_UART_Transmit>
		if(osSemaphoreWait(ControlFlagHandle, osWaitForever) == osOK){
 8001236:	e762      	b.n	80010fe <Control_Task+0x6e>
 8001238:	54442d18 	.word	0x54442d18
 800123c:	401921fb 	.word	0x401921fb
 8001240:	cccccccd 	.word	0xcccccccd
 8001244:	4026cccc 	.word	0x4026cccc
 8001248:	42c80000 	.word	0x42c80000
 800124c:	41366666 	.word	0x41366666
 8001250:	00000000 	.word	0x00000000
 8001254:	3c23d70a 	.word	0x3c23d70a
 8001258:	39f12c28 	.word	0x39f12c28
 800125c:	3f8f62b7 	.word	0x3f8f62b7
 8001260:	3d3923a3 	.word	0x3d3923a3
 8001264:	08001025 	.word	0x08001025
 8001268:	200006f4 	.word	0x200006f4
 800126c:	40020000 	.word	0x40020000
 8001270:	2000058c 	.word	0x2000058c
 8001274:	20000640 	.word	0x20000640
 8001278:	20000218 	.word	0x20000218
 800127c:	404e0000 	.word	0x404e0000
 8001280:	3ff33333 	.word	0x3ff33333
 8001284:	20000210 	.word	0x20000210
 8001288:	0800cc80 	.word	0x0800cc80
 800128c:	200007a8 	.word	0x200007a8

08001290 <Labview_Task>:
			//printf("%.2f\r\n", rads);
		}
	}
}
void Labview_Task(void const * argument){
 8001290:	b580      	push	{r7, lr}
 8001292:	b08c      	sub	sp, #48	; 0x30
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	uint8_t data[20];
	uint8_t i = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	float ref;
	float output;
	osEvent evt;
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, HAL_UART_DataCallback);
 800129e:	4a47      	ldr	r2, [pc, #284]	; (80013bc <Labview_Task+0x12c>)
 80012a0:	2103      	movs	r1, #3
 80012a2:	4847      	ldr	r0, [pc, #284]	; (80013c0 <Labview_Task+0x130>)
 80012a4:	f003 fafa 	bl	800489c <HAL_UART_RegisterCallback>
	HAL_UART_Receive_IT(&huart2, &byte, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	4946      	ldr	r1, [pc, #280]	; (80013c4 <Labview_Task+0x134>)
 80012ac:	4844      	ldr	r0, [pc, #272]	; (80013c0 <Labview_Task+0x130>)
 80012ae:	f003 fc2f 	bl	8004b10 <HAL_UART_Receive_IT>
	for(;;){
		//se espera la bandera de recepcio de dato
		if (osSemaphoreWait(DataRxHandle, osWaitForever) == osOK){
 80012b2:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <Labview_Task+0x138>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f04f 31ff 	mov.w	r1, #4294967295
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fd00 	bl	8005cc0 <osSemaphoreWait>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f5      	bne.n	80012b2 <Labview_Task+0x22>
			//todo
			if(byte != 'x' && byte != 'c'){
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <Labview_Task+0x134>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b78      	cmp	r3, #120	; 0x78
 80012cc:	d011      	beq.n	80012f2 <Labview_Task+0x62>
 80012ce:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <Labview_Task+0x134>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b63      	cmp	r3, #99	; 0x63
 80012d4:	d00d      	beq.n	80012f2 <Labview_Task+0x62>
				data[i] = byte;
 80012d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012da:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <Labview_Task+0x134>)
 80012dc:	7812      	ldrb	r2, [r2, #0]
 80012de:	3330      	adds	r3, #48	; 0x30
 80012e0:	443b      	add	r3, r7
 80012e2:	f803 2c18 	strb.w	r2, [r3, #-24]
				i++;
 80012e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012ea:	3301      	adds	r3, #1
 80012ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80012f0:	e063      	b.n	80013ba <Labview_Task+0x12a>
			}
			else if(byte == 'c' && data[0] == '1'){
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <Labview_Task+0x134>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b63      	cmp	r3, #99	; 0x63
 80012f8:	d11f      	bne.n	800133a <Labview_Task+0xaa>
 80012fa:	7e3b      	ldrb	r3, [r7, #24]
 80012fc:	2b31      	cmp	r3, #49	; 0x31
 80012fe:	d11c      	bne.n	800133a <Labview_Task+0xaa>
				HAL_TIM_Base_Start(&htim2);
 8001300:	4832      	ldr	r0, [pc, #200]	; (80013cc <Labview_Task+0x13c>)
 8001302:	f001 ff95 	bl	8003230 <HAL_TIM_Base_Start>
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <Labview_Task+0x13c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);		//se inicia el PWM
 800130e:	2100      	movs	r1, #0
 8001310:	482f      	ldr	r0, [pc, #188]	; (80013d0 <Labview_Task+0x140>)
 8001312:	f002 f8e9 	bl	80034e8 <HAL_TIM_PWM_Start>
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,0);
 8001316:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <Labview_Task+0x13c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
				memset(data, 0, i-1);
 800131e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001322:	3b01      	subs	r3, #1
 8001324:	461a      	mov	r2, r3
 8001326:	f107 0318 	add.w	r3, r7, #24
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f007 fb52 	bl	80089d6 <memset>
				i = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001338:	e03f      	b.n	80013ba <Labview_Task+0x12a>
			}else if(byte == 'c'){
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <Labview_Task+0x134>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b63      	cmp	r3, #99	; 0x63
 8001340:	d114      	bne.n	800136c <Labview_Task+0xdc>
				HAL_TIM_Base_Stop(&htim2);
 8001342:	4822      	ldr	r0, [pc, #136]	; (80013cc <Labview_Task+0x13c>)
 8001344:	f001 ffdc 	bl	8003300 <HAL_TIM_Base_Stop>
				HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001348:	2100      	movs	r1, #0
 800134a:	4821      	ldr	r0, [pc, #132]	; (80013d0 <Labview_Task+0x140>)
 800134c:	f002 f994 	bl	8003678 <HAL_TIM_PWM_Stop>
				memset(data, 0, i-1);
 8001350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001354:	3b01      	subs	r3, #1
 8001356:	461a      	mov	r2, r3
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f007 fb39 	bl	80089d6 <memset>
				i = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800136a:	e7a2      	b.n	80012b2 <Labview_Task+0x22>
			}else{
				data[i] = '\0';
 800136c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001370:	3330      	adds	r3, #48	; 0x30
 8001372:	443b      	add	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	f803 2c18 	strb.w	r2, [r3, #-24]
				ref = atof((char*)data);
 800137a:	f107 0318 	add.w	r3, r7, #24
 800137e:	4618      	mov	r0, r3
 8001380:	f007 f9f4 	bl	800876c <atof>
 8001384:	ec53 2b10 	vmov	r2, r3, d0
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fc2c 	bl	8000be8 <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	617b      	str	r3, [r7, #20]
				memset(data, 0, i);
 8001394:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001398:	f107 0318 	add.w	r3, r7, #24
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f007 fb19 	bl	80089d6 <memset>
				i = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				//se envia la referencia a la tarea de control
				osMessagePut(RefHandle, (uint32_t)&ref, 4);
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <Labview_Task+0x144>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f107 0114 	add.w	r1, r7, #20
 80013b2:	2204      	movs	r2, #4
 80013b4:	4618      	mov	r0, r3
 80013b6:	f004 fd2f 	bl	8005e18 <osMessagePut>
		if (osSemaphoreWait(DataRxHandle, osWaitForever) == osOK){
 80013ba:	e77a      	b.n	80012b2 <Labview_Task+0x22>
 80013bc:	08001045 	.word	0x08001045
 80013c0:	200007a8 	.word	0x200007a8
 80013c4:	20000200 	.word	0x20000200
 80013c8:	2000021c 	.word	0x2000021c
 80013cc:	2000058c 	.word	0x2000058c
 80013d0:	20000640 	.word	0x20000640
 80013d4:	20000210 	.word	0x20000210

080013d8 <PID_Init>:
#include "PID.h"

/**
 * @brief PID init parameters
 */
void PID_Init(PID_Def_t *pidx,float Kp,float Ki,float Kd,float Ts,float Umin,float Umax){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	61f8      	str	r0, [r7, #28]
 80013e0:	ed87 0a06 	vstr	s0, [r7, #24]
 80013e4:	edc7 0a05 	vstr	s1, [r7, #20]
 80013e8:	ed87 1a04 	vstr	s2, [r7, #16]
 80013ec:	edc7 1a03 	vstr	s3, [r7, #12]
 80013f0:	ed87 2a02 	vstr	s4, [r7, #8]
 80013f4:	edc7 2a01 	vstr	s5, [r7, #4]
	memset(pidx,0,sizeof(&pidx));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	2204      	movs	r2, #4
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f007 fae9 	bl	80089d6 <memset>
	pidx->Kp = Kp;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	601a      	str	r2, [r3, #0]
	pidx->Ki = Ki;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	605a      	str	r2, [r3, #4]
	pidx->Kd = Kd;
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	609a      	str	r2, [r3, #8]
	pidx->Kaw = Ki/Kp;
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	edd7 6a05 	vldr	s13, [r7, #20]
 800141c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001424:	edc3 7a03 	vstr	s15, [r3, #12]
	pidx->Ts = Ts;
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	611a      	str	r2, [r3, #16]
	pidx->Umin = Umin;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	68ba      	ldr	r2, [r7, #8]
 8001432:	62da      	str	r2, [r3, #44]	; 0x2c
	pidx->Umax = Umax;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	631a      	str	r2, [r3, #48]	; 0x30
}
 800143a:	bf00      	nop
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <PID_Compute>:

/**
 * @brief compute pid
 */
float PID_Compute(PID_Def_t *pidx, float Ref, float yk){
 8001442:	b480      	push	{r7}
 8001444:	b087      	sub	sp, #28
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	ed87 0a02 	vstr	s0, [r7, #8]
 800144e:	edc7 0a01 	vstr	s1, [r7, #4]
	float e_1 = pidx->e;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	613b      	str	r3, [r7, #16]
	float Uk;
	pidx->e = Ref - yk;
 8001458:	ed97 7a02 	vldr	s14, [r7, #8]
 800145c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	edc3 7a05 	vstr	s15, [r3, #20]
	/*parte proporcional*/
	pidx->Pk = pidx->e * pidx->Kp;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	edc3 7a06 	vstr	s15, [r3, #24]
	/*parte integral*/
	pidx->Ik += pidx->Ts*pidx->Ki*pidx->e + pidx->Ts*pidx->Kaw*pidx->Wk;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	ed93 7a07 	vldr	s14, [r3, #28]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	edd3 6a04 	vldr	s13, [r3, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001492:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	edd3 7a05 	vldr	s15, [r3, #20]
 800149c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	ed93 6a04 	vldr	s12, [r3, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	edd3 7a03 	vldr	s15, [r3, #12]
 80014ac:	ee26 6a27 	vmul.f32	s12, s12, s15
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80014b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	edc3 7a07 	vstr	s15, [r3, #28]
	/*parte derivativa*/
	pidx->Dk = (pidx->Kd/pidx->Ts)*(pidx->e - e_1);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80014d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	edd3 6a05 	vldr	s13, [r3, #20]
 80014de:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	edc3 7a08 	vstr	s15, [r3, #32]
	/*salida pid*/
	pidx->Vk = pidx->Pk + pidx->Ik + pidx->Dk;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	ed93 7a06 	vldr	s14, [r3, #24]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80014fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	edd3 7a08 	vldr	s15, [r3, #32]
 8001506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	/*saturador*/
	if(pidx->Vk > pidx->Umax)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800151c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	dd03      	ble.n	800152e <PID_Compute+0xec>
		Uk = pidx->Umax;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e011      	b.n	8001552 <PID_Compute+0x110>
	else if(pidx->Vk < pidx->Umin)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800153a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800153e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001542:	d503      	bpl.n	800154c <PID_Compute+0x10a>
		Uk = pidx->Umin;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	e002      	b.n	8001552 <PID_Compute+0x110>
	else
		Uk = pidx->Vk;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	617b      	str	r3, [r7, #20]
	/*error wind up*/
	pidx->Wk = Uk - pidx->Vk;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001558:	ed97 7a05 	vldr	s14, [r7, #20]
 800155c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/*se retorna la salida el valor calculado*/
	return Uk;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	ee07 3a90 	vmov	s15, r3
}
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	371c      	adds	r7, #28
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800158c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	4a06      	ldr	r2, [pc, #24]	; (80015ac <vApplicationGetIdleTaskMemory+0x30>)
 8001592:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800159a:	bf00      	nop
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000220 	.word	0x20000220
 80015ac:	200002d4 	.word	0x200002d4

080015b0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b0a2      	sub	sp, #136	; 0x88
 80015b4:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of ControlFlag */
  osSemaphoreDef(ControlFlag);
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  ControlFlagHandle = osSemaphoreCreate(osSemaphore(ControlFlag), 1);
 80015c2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80015c6:	2101      	movs	r1, #1
 80015c8:	4618      	mov	r0, r3
 80015ca:	f004 fb46 	bl	8005c5a <osSemaphoreCreate>
 80015ce:	4603      	mov	r3, r0
 80015d0:	4a33      	ldr	r2, [pc, #204]	; (80016a0 <MX_FREERTOS_Init+0xf0>)
 80015d2:	6013      	str	r3, [r2, #0]

  /* definition and creation of DataRx */
  osSemaphoreDef(DataRx);
 80015d4:	2300      	movs	r3, #0
 80015d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80015d8:	2300      	movs	r3, #0
 80015da:	67fb      	str	r3, [r7, #124]	; 0x7c
  DataRxHandle = osSemaphoreCreate(osSemaphore(DataRx), 1);
 80015dc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80015e0:	2101      	movs	r1, #1
 80015e2:	4618      	mov	r0, r3
 80015e4:	f004 fb39 	bl	8005c5a <osSemaphoreCreate>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a2e      	ldr	r2, [pc, #184]	; (80016a4 <MX_FREERTOS_Init+0xf4>)
 80015ec:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of Ref */
  osMessageQDef(Ref, 2, float);
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <MX_FREERTOS_Init+0xf8>)
 80015f0:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80015f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  RefHandle = osMessageCreate(osMessageQ(Ref), NULL);
 80015fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015fe:	2100      	movs	r1, #0
 8001600:	4618      	mov	r0, r3
 8001602:	f004 fbe1 	bl	8005dc8 <osMessageCreate>
 8001606:	4603      	mov	r3, r0
 8001608:	4a28      	ldr	r2, [pc, #160]	; (80016ac <MX_FREERTOS_Init+0xfc>)
 800160a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Output */
  osMessageQDef(Output, 2, float);
 800160c:	4b26      	ldr	r3, [pc, #152]	; (80016a8 <MX_FREERTOS_Init+0xf8>)
 800160e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  OutputHandle = osMessageCreate(osMessageQ(Output), NULL);
 8001618:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f004 fbd2 	bl	8005dc8 <osMessageCreate>
 8001624:	4603      	mov	r3, r0
 8001626:	4a22      	ldr	r2, [pc, #136]	; (80016b0 <MX_FREERTOS_Init+0x100>)
 8001628:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <MX_FREERTOS_Init+0x104>)
 800162c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001630:	461d      	mov	r5, r3
 8001632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800163a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800163e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f004 faa8 	bl	8005b9a <osThreadCreate>
 800164a:	4603      	mov	r3, r0
 800164c:	4a1a      	ldr	r2, [pc, #104]	; (80016b8 <MX_FREERTOS_Init+0x108>)
 800164e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Control */
  osThreadDef(Control, Control_Task, osPriorityAboveNormal, 0, 512);
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_FREERTOS_Init+0x10c>)
 8001652:	f107 0420 	add.w	r4, r7, #32
 8001656:	461d      	mov	r5, r3
 8001658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlHandle = osThreadCreate(osThread(Control), NULL);
 8001664:	f107 0320 	add.w	r3, r7, #32
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f004 fa95 	bl	8005b9a <osThreadCreate>
 8001670:	4603      	mov	r3, r0
 8001672:	4a13      	ldr	r2, [pc, #76]	; (80016c0 <MX_FREERTOS_Init+0x110>)
 8001674:	6013      	str	r3, [r2, #0]

  /* definition and creation of Labview */
  osThreadDef(Labview, Labview_Task, osPriorityNormal, 0, 128);
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <MX_FREERTOS_Init+0x114>)
 8001678:	1d3c      	adds	r4, r7, #4
 800167a:	461d      	mov	r5, r3
 800167c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800167e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001680:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001684:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LabviewHandle = osThreadCreate(osThread(Labview), NULL);
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	2100      	movs	r1, #0
 800168c:	4618      	mov	r0, r3
 800168e:	f004 fa84 	bl	8005b9a <osThreadCreate>
 8001692:	4603      	mov	r3, r0
 8001694:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <MX_FREERTOS_Init+0x118>)
 8001696:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001698:	bf00      	nop
 800169a:	3788      	adds	r7, #136	; 0x88
 800169c:	46bd      	mov	sp, r7
 800169e:	bdb0      	pop	{r4, r5, r7, pc}
 80016a0:	20000218 	.word	0x20000218
 80016a4:	2000021c 	.word	0x2000021c
 80016a8:	0800cca4 	.word	0x0800cca4
 80016ac:	20000210 	.word	0x20000210
 80016b0:	20000214 	.word	0x20000214
 80016b4:	0800ccb4 	.word	0x0800ccb4
 80016b8:	20000204 	.word	0x20000204
 80016bc:	0800ccd0 	.word	0x0800ccd0
 80016c0:	20000208 	.word	0x20000208
 80016c4:	0800ccec 	.word	0x0800ccec
 80016c8:	2000020c 	.word	0x2000020c

080016cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <MX_GPIO_Init+0xdc>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a2f      	ldr	r2, [pc, #188]	; (80017a8 <MX_GPIO_Init+0xdc>)
 80016ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <MX_GPIO_Init+0xdc>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <MX_GPIO_Init+0xdc>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a28      	ldr	r2, [pc, #160]	; (80017a8 <MX_GPIO_Init+0xdc>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b26      	ldr	r3, [pc, #152]	; (80017a8 <MX_GPIO_Init+0xdc>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_GPIO_Init+0xdc>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <MX_GPIO_Init+0xdc>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MX_GPIO_Init+0xdc>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2130      	movs	r1, #48	; 0x30
 800173a:	481c      	ldr	r0, [pc, #112]	; (80017ac <MX_GPIO_Init+0xe0>)
 800173c:	f001 f81e 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001746:	481a      	ldr	r0, [pc, #104]	; (80017b0 <MX_GPIO_Init+0xe4>)
 8001748:	f001 f818 	bl	800277c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 800174c:	2301      	movs	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	4619      	mov	r1, r3
 800175e:	4813      	ldr	r0, [pc, #76]	; (80017ac <MX_GPIO_Init+0xe0>)
 8001760:	f000 fe70 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8001764:	2330      	movs	r3, #48	; 0x30
 8001766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	4619      	mov	r1, r3
 800177a:	480c      	ldr	r0, [pc, #48]	; (80017ac <MX_GPIO_Init+0xe0>)
 800177c:	f000 fe62 	bl	8002444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001786:	2301      	movs	r3, #1
 8001788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 030c 	add.w	r3, r7, #12
 8001796:	4619      	mov	r1, r3
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <MX_GPIO_Init+0xe4>)
 800179a:	f000 fe53 	bl	8002444 <HAL_GPIO_Init>

}
 800179e:	bf00      	nop
 80017a0:	3720      	adds	r7, #32
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40020c00 	.word	0x40020c00

080017b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b8:	f000 fc8e 	bl	80020d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017bc:	f000 f810 	bl	80017e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c0:	f7ff ff84 	bl	80016cc <MX_GPIO_Init>
  MX_TIM2_Init();
 80017c4:	f000 fa42 	bl	8001c4c <MX_TIM2_Init>
  MX_TIM3_Init();
 80017c8:	f000 fa92 	bl	8001cf0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80017cc:	f000 fbe0 	bl	8001f90 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80017d0:	f000 fae8 	bl	8001da4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80017d4:	f7ff feec 	bl	80015b0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80017d8:	f004 f9d8 	bl	8005b8c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017dc:	e7fe      	b.n	80017dc <main+0x28>
	...

080017e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b094      	sub	sp, #80	; 0x50
 80017e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e6:	f107 0320 	add.w	r3, r7, #32
 80017ea:	2230      	movs	r2, #48	; 0x30
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f007 f8f1 	bl	80089d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <SystemClock_Config+0xcc>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	4a27      	ldr	r2, [pc, #156]	; (80018ac <SystemClock_Config+0xcc>)
 800180e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001812:	6413      	str	r3, [r2, #64]	; 0x40
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <SystemClock_Config+0xcc>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <SystemClock_Config+0xd0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <SystemClock_Config+0xd0>)
 800182a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <SystemClock_Config+0xd0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183c:	2301      	movs	r3, #1
 800183e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001846:	2302      	movs	r3, #2
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001850:	2304      	movs	r3, #4
 8001852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001854:	23a8      	movs	r3, #168	; 0xa8
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001858:	2302      	movs	r3, #2
 800185a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800185c:	2304      	movs	r3, #4
 800185e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	4618      	mov	r0, r3
 8001866:	f000 ffbd 	bl	80027e4 <HAL_RCC_OscConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001870:	f000 f832 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001874:	230f      	movs	r3, #15
 8001876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001878:	2302      	movs	r3, #2
 800187a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001880:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2105      	movs	r1, #5
 8001892:	4618      	mov	r0, r3
 8001894:	f001 fa1e 	bl	8002cd4 <HAL_RCC_ClockConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800189e:	f000 f81b 	bl	80018d8 <Error_Handler>
  }
}
 80018a2:	bf00      	nop
 80018a4:	3750      	adds	r7, #80	; 0x50
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000

080018b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018c6:	f000 fc29 	bl	800211c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40001000 	.word	0x40001000

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_MspInit+0x54>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a11      	ldr	r2, [pc, #68]	; (8001938 <HAL_MspInit+0x54>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <HAL_MspInit+0x54>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	603b      	str	r3, [r7, #0]
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_MspInit+0x54>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_MspInit+0x54>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	6413      	str	r3, [r2, #64]	; 0x40
 8001916:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_MspInit+0x54>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001922:	2200      	movs	r2, #0
 8001924:	210f      	movs	r1, #15
 8001926:	f06f 0001 	mvn.w	r0, #1
 800192a:	f000 fccf 	bl	80022cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08e      	sub	sp, #56	; 0x38
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	4b33      	ldr	r3, [pc, #204]	; (8001a20 <HAL_InitTick+0xe4>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	4a32      	ldr	r2, [pc, #200]	; (8001a20 <HAL_InitTick+0xe4>)
 8001956:	f043 0310 	orr.w	r3, r3, #16
 800195a:	6413      	str	r3, [r2, #64]	; 0x40
 800195c:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_InitTick+0xe4>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f003 0310 	and.w	r3, r3, #16
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001968:	f107 0210 	add.w	r2, r7, #16
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f001 fbce 	bl	8003114 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800197c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001982:	f001 fb9f 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 8001986:	6378      	str	r0, [r7, #52]	; 0x34
 8001988:	e004      	b.n	8001994 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800198a:	f001 fb9b 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 800198e:	4603      	mov	r3, r0
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	4a23      	ldr	r2, [pc, #140]	; (8001a24 <HAL_InitTick+0xe8>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	0c9b      	lsrs	r3, r3, #18
 800199e:	3b01      	subs	r3, #1
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <HAL_InitTick+0xec>)
 80019a4:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <HAL_InitTick+0xf0>)
 80019a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <HAL_InitTick+0xec>)
 80019aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019b0:	4a1d      	ldr	r2, [pc, #116]	; (8001a28 <HAL_InitTick+0xec>)
 80019b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <HAL_InitTick+0xec>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_InitTick+0xec>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <HAL_InitTick+0xec>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80019c8:	4817      	ldr	r0, [pc, #92]	; (8001a28 <HAL_InitTick+0xec>)
 80019ca:	f001 fbd5 	bl	8003178 <HAL_TIM_Base_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80019d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d11b      	bne.n	8001a14 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80019dc:	4812      	ldr	r0, [pc, #72]	; (8001a28 <HAL_InitTick+0xec>)
 80019de:	f001 fcb7 	bl	8003350 <HAL_TIM_Base_Start_IT>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80019e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d111      	bne.n	8001a14 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019f0:	2036      	movs	r0, #54	; 0x36
 80019f2:	f000 fc87 	bl	8002304 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d808      	bhi.n	8001a0e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	2036      	movs	r0, #54	; 0x36
 8001a02:	f000 fc63 	bl	80022cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_InitTick+0xf4>)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e002      	b.n	8001a14 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3738      	adds	r7, #56	; 0x38
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	431bde83 	.word	0x431bde83
 8001a28:	200004d4 	.word	0x200004d4
 8001a2c:	40001000 	.word	0x40001000
 8001a30:	20000004 	.word	0x20000004

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <NMI_Handler+0x4>

08001a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <MemManage_Handler+0x4>

08001a46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <USART2_IRQHandler+0x10>)
 8001a66:	f003 f883 	bl	8004b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200007a8 	.word	0x200007a8

08001a74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <TIM6_DAC_IRQHandler+0x10>)
 8001a7a:	f001 fe6d 	bl	8003758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200004d4 	.word	0x200004d4

08001a88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a8c:	4802      	ldr	r0, [pc, #8]	; (8001a98 <TIM7_IRQHandler+0x10>)
 8001a8e:	f001 fe63 	bl	8003758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200006f4 	.word	0x200006f4

08001a9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return 1;
 8001aa0:	2301      	movs	r3, #1
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_kill>:

int _kill(int pid, int sig)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ab6:	f006 fe5d 	bl	8008774 <__errno>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2216      	movs	r2, #22
 8001abe:	601a      	str	r2, [r3, #0]
  return -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_exit>:

void _exit (int status)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ffe7 	bl	8001aac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ade:	e7fe      	b.n	8001ade <_exit+0x12>

08001ae0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	e00a      	b.n	8001b08 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001af2:	f3af 8000 	nop.w
 8001af6:	4601      	mov	r1, r0
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	1c5a      	adds	r2, r3, #1
 8001afc:	60ba      	str	r2, [r7, #8]
 8001afe:	b2ca      	uxtb	r2, r1
 8001b00:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf0      	blt.n	8001af2 <_read+0x12>
  }

  return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	e009      	b.n	8001b40 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	60ba      	str	r2, [r7, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fa5f 	bl	8000ff8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dbf1      	blt.n	8001b2c <_write+0x12>
  }
  return len;
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_close>:

int _close(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b7a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <_isatty>:

int _isatty(int file)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <_sbrk+0x5c>)
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <_sbrk+0x60>)
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <_sbrk+0x64>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <_sbrk+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bde:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d207      	bcs.n	8001bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bec:	f006 fdc2 	bl	8008774 <__errno>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	e009      	b.n	8001c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	; (8001c20 <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a05      	ldr	r2, [pc, #20]	; (8001c20 <_sbrk+0x64>)
 8001c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20020000 	.word	0x20020000
 8001c1c:	00000400 	.word	0x00000400
 8001c20:	20000588 	.word	0x20000588
 8001c24:	20004588 	.word	0x20004588

08001c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <SystemInit+0x20>)
 8001c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <SystemInit+0x20>)
 8001c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
 8001c60:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <MX_TIM2_Init+0xa0>)
 8001c6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <MX_TIM2_Init+0xa0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <MX_TIM2_Init+0xa0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c7e:	4b1b      	ldr	r3, [pc, #108]	; (8001cec <MX_TIM2_Init+0xa0>)
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295
 8001c84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <MX_TIM2_Init+0xa0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <MX_TIM2_Init+0xa0>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c92:	4816      	ldr	r0, [pc, #88]	; (8001cec <MX_TIM2_Init+0xa0>)
 8001c94:	f001 fa70 	bl	8003178 <HAL_TIM_Base_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c9e:	f7ff fe1b 	bl	80018d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI2FP2;
 8001ca6:	2360      	movs	r3, #96	; 0x60
 8001ca8:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	; (8001cec <MX_TIM2_Init+0xa0>)
 8001cba:	f001 ff37 	bl	8003b2c <HAL_TIM_SlaveConfigSynchro>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001cc4:	f7ff fe08 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_TIM2_Init+0xa0>)
 8001cd6:	f002 fced 	bl	80046b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001ce0:	f7ff fdfa 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3720      	adds	r7, #32
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	2000058c 	.word	0x2000058c

08001cf0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf6:	f107 0320 	add.w	r3, r7, #32
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]
 8001d0a:	60da      	str	r2, [r3, #12]
 8001d0c:	611a      	str	r2, [r3, #16]
 8001d0e:	615a      	str	r2, [r3, #20]
 8001d10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <MX_TIM3_Init+0xac>)
 8001d14:	4a22      	ldr	r2, [pc, #136]	; (8001da0 <MX_TIM3_Init+0xb0>)
 8001d16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4 - 1;
 8001d18:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <MX_TIM3_Init+0xac>)
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <MX_TIM3_Init+0xac>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2100 - 1;
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <MX_TIM3_Init+0xac>)
 8001d26:	f640 0233 	movw	r2, #2099	; 0x833
 8001d2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <MX_TIM3_Init+0xac>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <MX_TIM3_Init+0xac>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d38:	4818      	ldr	r0, [pc, #96]	; (8001d9c <MX_TIM3_Init+0xac>)
 8001d3a:	f001 fb79 	bl	8003430 <HAL_TIM_PWM_Init>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d44:	f7ff fdc8 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d50:	f107 0320 	add.w	r3, r7, #32
 8001d54:	4619      	mov	r1, r3
 8001d56:	4811      	ldr	r0, [pc, #68]	; (8001d9c <MX_TIM3_Init+0xac>)
 8001d58:	f002 fcac 	bl	80046b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d62:	f7ff fdb9 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d66:	2360      	movs	r3, #96	; 0x60
 8001d68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4807      	ldr	r0, [pc, #28]	; (8001d9c <MX_TIM3_Init+0xac>)
 8001d7e:	f001 fe13 	bl	80039a8 <HAL_TIM_PWM_ConfigChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d88:	f7ff fda6 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d8c:	4803      	ldr	r0, [pc, #12]	; (8001d9c <MX_TIM3_Init+0xac>)
 8001d8e:	f000 f8c5 	bl	8001f1c <HAL_TIM_MspPostInit>

}
 8001d92:	bf00      	nop
 8001d94:	3728      	adds	r7, #40	; 0x28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000640 	.word	0x20000640
 8001da0:	40000400 	.word	0x40000400

08001da4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001daa:	463b      	mov	r3, r7
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <MX_TIM7_Init+0x64>)
 8001db4:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <MX_TIM7_Init+0x68>)
 8001db6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84 - 1;
 8001db8:	4b13      	ldr	r3, [pc, #76]	; (8001e08 <MX_TIM7_Init+0x64>)
 8001dba:	2253      	movs	r2, #83	; 0x53
 8001dbc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <MX_TIM7_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000 - 1;
 8001dc4:	4b10      	ldr	r3, [pc, #64]	; (8001e08 <MX_TIM7_Init+0x64>)
 8001dc6:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <MX_TIM7_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001dd2:	480d      	ldr	r0, [pc, #52]	; (8001e08 <MX_TIM7_Init+0x64>)
 8001dd4:	f001 f9d0 	bl	8003178 <HAL_TIM_Base_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001dde:	f7ff fd7b 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001dea:	463b      	mov	r3, r7
 8001dec:	4619      	mov	r1, r3
 8001dee:	4806      	ldr	r0, [pc, #24]	; (8001e08 <MX_TIM7_Init+0x64>)
 8001df0:	f002 fc60 	bl	80046b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001dfa:	f7ff fd6d 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200006f4 	.word	0x200006f4
 8001e0c:	40001400 	.word	0x40001400

08001e10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d12c      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <HAL_TIM_Base_MspInit+0xbc>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <HAL_TIM_Base_MspInit+0xbc>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b22      	ldr	r3, [pc, #136]	; (8001ecc <HAL_TIM_Base_MspInit+0xbc>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_TIM_Base_MspInit+0xbc>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a1d      	ldr	r2, [pc, #116]	; (8001ecc <HAL_TIM_Base_MspInit+0xbc>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_TIM_Base_MspInit+0xbc>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PULSOS_Pin;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PULSOS_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	4619      	mov	r1, r3
 8001e84:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <HAL_TIM_Base_MspInit+0xc0>)
 8001e86:	f000 fadd 	bl	8002444 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001e8a:	e01a      	b.n	8001ec2 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM7)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <HAL_TIM_Base_MspInit+0xc4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d115      	bne.n	8001ec2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_TIM_Base_MspInit+0xbc>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <HAL_TIM_Base_MspInit+0xbc>)
 8001ea0:	f043 0320 	orr.w	r3, r3, #32
 8001ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_TIM_Base_MspInit+0xbc>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2105      	movs	r1, #5
 8001eb6:	2037      	movs	r0, #55	; 0x37
 8001eb8:	f000 fa08 	bl	80022cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ebc:	2037      	movs	r0, #55	; 0x37
 8001ebe:	f000 fa21 	bl	8002304 <HAL_NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020000 	.word	0x40020000
 8001ed4:	40001400 	.word	0x40001400

08001ed8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <HAL_TIM_PWM_MspInit+0x3c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d10d      	bne.n	8001f06 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_TIM_PWM_MspInit+0x40>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a09      	ldr	r2, [pc, #36]	; (8001f18 <HAL_TIM_PWM_MspInit+0x40>)
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <HAL_TIM_PWM_MspInit+0x40>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40000400 	.word	0x40000400
 8001f18:	40023800 	.word	0x40023800

08001f1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <HAL_TIM_MspPostInit+0x68>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d11d      	bne.n	8001f7a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_TIM_MspPostInit+0x6c>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_TIM_MspPostInit+0x6c>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_TIM_MspPostInit+0x6c>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = EN1_Pin;
 8001f5a:	2340      	movs	r3, #64	; 0x40
 8001f5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(EN1_GPIO_Port, &GPIO_InitStruct);
 8001f6e:	f107 030c 	add.w	r3, r7, #12
 8001f72:	4619      	mov	r1, r3
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <HAL_TIM_MspPostInit+0x70>)
 8001f76:	f000 fa65 	bl	8002444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f7a:	bf00      	nop
 8001f7c:	3720      	adds	r7, #32
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020000 	.word	0x40020000

08001f90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <MX_USART2_UART_Init+0x4c>)
 8001f96:	4a12      	ldr	r2, [pc, #72]	; (8001fe0 <MX_USART2_UART_Init+0x50>)
 8001f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <MX_USART2_UART_Init+0x4c>)
 8001f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <MX_USART2_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <MX_USART2_UART_Init+0x4c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fae:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <MX_USART2_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <MX_USART2_UART_Init+0x4c>)
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <MX_USART2_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_USART2_UART_Init+0x4c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc6:	4805      	ldr	r0, [pc, #20]	; (8001fdc <MX_USART2_UART_Init+0x4c>)
 8001fc8:	f002 fc0e 	bl	80047e8 <HAL_UART_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fd2:	f7ff fc81 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200007a8 	.word	0x200007a8
 8001fe0:	40004400 	.word	0x40004400

08001fe4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <HAL_UART_MspInit+0x94>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d133      	bne.n	800206e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b1c      	ldr	r3, [pc, #112]	; (800207c <HAL_UART_MspInit+0x98>)
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	4a1b      	ldr	r2, [pc, #108]	; (800207c <HAL_UART_MspInit+0x98>)
 8002010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002014:	6413      	str	r3, [r2, #64]	; 0x40
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <HAL_UART_MspInit+0x98>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_UART_MspInit+0x98>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a14      	ldr	r2, [pc, #80]	; (800207c <HAL_UART_MspInit+0x98>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_UART_MspInit+0x98>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800203e:	230c      	movs	r3, #12
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204e:	2307      	movs	r3, #7
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	4809      	ldr	r0, [pc, #36]	; (8002080 <HAL_UART_MspInit+0x9c>)
 800205a:	f000 f9f3 	bl	8002444 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2105      	movs	r1, #5
 8002062:	2026      	movs	r0, #38	; 0x26
 8002064:	f000 f932 	bl	80022cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002068:	2026      	movs	r0, #38	; 0x26
 800206a:	f000 f94b 	bl	8002304 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800206e:	bf00      	nop
 8002070:	3728      	adds	r7, #40	; 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40004400 	.word	0x40004400
 800207c:	40023800 	.word	0x40023800
 8002080:	40020000 	.word	0x40020000

08002084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002088:	480d      	ldr	r0, [pc, #52]	; (80020c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800208a:	490e      	ldr	r1, [pc, #56]	; (80020c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800208e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002090:	e002      	b.n	8002098 <LoopCopyDataInit>

08002092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002096:	3304      	adds	r3, #4

08002098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800209a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800209c:	d3f9      	bcc.n	8002092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209e:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020a0:	4c0b      	ldr	r4, [pc, #44]	; (80020d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a4:	e001      	b.n	80020aa <LoopFillZerobss>

080020a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a8:	3204      	adds	r2, #4

080020aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ac:	d3fb      	bcc.n	80020a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ae:	f7ff fdbb 	bl	8001c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020b2:	f006 fc5b 	bl	800896c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b6:	f7ff fb7d 	bl	80017b4 <main>
  bx  lr    
 80020ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80020c8:	0800d1d4 	.word	0x0800d1d4
  ldr r2, =_sbss
 80020cc:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80020d0:	20004584 	.word	0x20004584

080020d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d4:	e7fe      	b.n	80020d4 <ADC_IRQHandler>
	...

080020d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <HAL_Init+0x40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0d      	ldr	r2, [pc, #52]	; (8002118 <HAL_Init+0x40>)
 80020e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0a      	ldr	r2, [pc, #40]	; (8002118 <HAL_Init+0x40>)
 80020ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <HAL_Init+0x40>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002100:	2003      	movs	r0, #3
 8002102:	f000 f8d8 	bl	80022b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002106:	200f      	movs	r0, #15
 8002108:	f7ff fc18 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800210c:	f7ff fbea 	bl	80018e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023c00 	.word	0x40023c00

0800211c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002120:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x20>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_IncTick+0x24>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4413      	add	r3, r2
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <HAL_IncTick+0x24>)
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000008 	.word	0x20000008
 8002140:	2000081c 	.word	0x2000081c

08002144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return uwTick;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_GetTick+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	2000081c 	.word	0x2000081c

0800215c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002178:	4013      	ands	r3, r2
 800217a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800218c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	60d3      	str	r3, [r2, #12]
}
 8002194:	bf00      	nop
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00

080021a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a8:	4b04      	ldr	r3, [pc, #16]	; (80021bc <__NVIC_GetPriorityGrouping+0x18>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0a1b      	lsrs	r3, r3, #8
 80021ae:	f003 0307 	and.w	r3, r3, #7
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	db0b      	blt.n	80021ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4907      	ldr	r1, [pc, #28]	; (80021f8 <__NVIC_EnableIRQ+0x38>)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	2001      	movs	r0, #1
 80021e2:	fa00 f202 	lsl.w	r2, r0, r2
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000e100 	.word	0xe000e100

080021fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	2b00      	cmp	r3, #0
 800220e:	db0a      	blt.n	8002226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	b2da      	uxtb	r2, r3
 8002214:	490c      	ldr	r1, [pc, #48]	; (8002248 <__NVIC_SetPriority+0x4c>)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	440b      	add	r3, r1
 8002220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002224:	e00a      	b.n	800223c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4908      	ldr	r1, [pc, #32]	; (800224c <__NVIC_SetPriority+0x50>)
 800222c:	79fb      	ldrb	r3, [r7, #7]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	3b04      	subs	r3, #4
 8002234:	0112      	lsls	r2, r2, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	440b      	add	r3, r1
 800223a:	761a      	strb	r2, [r3, #24]
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000e100 	.word	0xe000e100
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002250:	b480      	push	{r7}
 8002252:	b089      	sub	sp, #36	; 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	f1c3 0307 	rsb	r3, r3, #7
 800226a:	2b04      	cmp	r3, #4
 800226c:	bf28      	it	cs
 800226e:	2304      	movcs	r3, #4
 8002270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3304      	adds	r3, #4
 8002276:	2b06      	cmp	r3, #6
 8002278:	d902      	bls.n	8002280 <NVIC_EncodePriority+0x30>
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3b03      	subs	r3, #3
 800227e:	e000      	b.n	8002282 <NVIC_EncodePriority+0x32>
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43da      	mvns	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	401a      	ands	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002298:	f04f 31ff 	mov.w	r1, #4294967295
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	fa01 f303 	lsl.w	r3, r1, r3
 80022a2:	43d9      	mvns	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	4313      	orrs	r3, r2
         );
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3724      	adds	r7, #36	; 0x24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff ff4c 	bl	800215c <__NVIC_SetPriorityGrouping>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
 80022d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022de:	f7ff ff61 	bl	80021a4 <__NVIC_GetPriorityGrouping>
 80022e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	6978      	ldr	r0, [r7, #20]
 80022ea:	f7ff ffb1 	bl	8002250 <NVIC_EncodePriority>
 80022ee:	4602      	mov	r2, r0
 80022f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff80 	bl	80021fc <__NVIC_SetPriority>
}
 80022fc:	bf00      	nop
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff ff54 	bl	80021c0 <__NVIC_EnableIRQ>
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800232e:	f7ff ff09 	bl	8002144 <HAL_GetTick>
 8002332:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d008      	beq.n	8002352 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2280      	movs	r2, #128	; 0x80
 8002344:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e052      	b.n	80023f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0216 	bic.w	r2, r2, #22
 8002360:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002370:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d103      	bne.n	8002382 <HAL_DMA_Abort+0x62>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0208 	bic.w	r2, r2, #8
 8002390:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0201 	bic.w	r2, r2, #1
 80023a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023a2:	e013      	b.n	80023cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023a4:	f7ff fece 	bl	8002144 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d90c      	bls.n	80023cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2220      	movs	r2, #32
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2203      	movs	r2, #3
 80023bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e015      	b.n	80023f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1e4      	bne.n	80023a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023de:	223f      	movs	r2, #63	; 0x3f
 80023e0:	409a      	lsls	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d004      	beq.n	800241e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2280      	movs	r2, #128	; 0x80
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e00c      	b.n	8002438 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2205      	movs	r2, #5
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	e16b      	b.n	8002738 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002460:	2201      	movs	r2, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	429a      	cmp	r2, r3
 800247a:	f040 815a 	bne.w	8002732 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d005      	beq.n	8002496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002492:	2b02      	cmp	r3, #2
 8002494:	d130      	bne.n	80024f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2203      	movs	r2, #3
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024cc:	2201      	movs	r2, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 0201 	and.w	r2, r3, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b03      	cmp	r3, #3
 8002502:	d017      	beq.n	8002534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d123      	bne.n	8002588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	220f      	movs	r2, #15
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	08da      	lsrs	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3208      	adds	r2, #8
 8002582:	69b9      	ldr	r1, [r7, #24]
 8002584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0203 	and.w	r2, r3, #3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 80b4 	beq.w	8002732 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b60      	ldr	r3, [pc, #384]	; (8002750 <HAL_GPIO_Init+0x30c>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	4a5f      	ldr	r2, [pc, #380]	; (8002750 <HAL_GPIO_Init+0x30c>)
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d8:	6453      	str	r3, [r2, #68]	; 0x44
 80025da:	4b5d      	ldr	r3, [pc, #372]	; (8002750 <HAL_GPIO_Init+0x30c>)
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025e6:	4a5b      	ldr	r2, [pc, #364]	; (8002754 <HAL_GPIO_Init+0x310>)
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	3302      	adds	r3, #2
 80025ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	220f      	movs	r2, #15
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_GPIO_Init+0x314>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d02b      	beq.n	800266a <HAL_GPIO_Init+0x226>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a51      	ldr	r2, [pc, #324]	; (800275c <HAL_GPIO_Init+0x318>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d025      	beq.n	8002666 <HAL_GPIO_Init+0x222>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a50      	ldr	r2, [pc, #320]	; (8002760 <HAL_GPIO_Init+0x31c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d01f      	beq.n	8002662 <HAL_GPIO_Init+0x21e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4f      	ldr	r2, [pc, #316]	; (8002764 <HAL_GPIO_Init+0x320>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d019      	beq.n	800265e <HAL_GPIO_Init+0x21a>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4e      	ldr	r2, [pc, #312]	; (8002768 <HAL_GPIO_Init+0x324>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_GPIO_Init+0x216>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4d      	ldr	r2, [pc, #308]	; (800276c <HAL_GPIO_Init+0x328>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00d      	beq.n	8002656 <HAL_GPIO_Init+0x212>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4c      	ldr	r2, [pc, #304]	; (8002770 <HAL_GPIO_Init+0x32c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d007      	beq.n	8002652 <HAL_GPIO_Init+0x20e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4b      	ldr	r2, [pc, #300]	; (8002774 <HAL_GPIO_Init+0x330>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d101      	bne.n	800264e <HAL_GPIO_Init+0x20a>
 800264a:	2307      	movs	r3, #7
 800264c:	e00e      	b.n	800266c <HAL_GPIO_Init+0x228>
 800264e:	2308      	movs	r3, #8
 8002650:	e00c      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002652:	2306      	movs	r3, #6
 8002654:	e00a      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002656:	2305      	movs	r3, #5
 8002658:	e008      	b.n	800266c <HAL_GPIO_Init+0x228>
 800265a:	2304      	movs	r3, #4
 800265c:	e006      	b.n	800266c <HAL_GPIO_Init+0x228>
 800265e:	2303      	movs	r3, #3
 8002660:	e004      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002662:	2302      	movs	r3, #2
 8002664:	e002      	b.n	800266c <HAL_GPIO_Init+0x228>
 8002666:	2301      	movs	r3, #1
 8002668:	e000      	b.n	800266c <HAL_GPIO_Init+0x228>
 800266a:	2300      	movs	r3, #0
 800266c:	69fa      	ldr	r2, [r7, #28]
 800266e:	f002 0203 	and.w	r2, r2, #3
 8002672:	0092      	lsls	r2, r2, #2
 8002674:	4093      	lsls	r3, r2
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800267c:	4935      	ldr	r1, [pc, #212]	; (8002754 <HAL_GPIO_Init+0x310>)
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268a:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <HAL_GPIO_Init+0x334>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ae:	4a32      	ldr	r2, [pc, #200]	; (8002778 <HAL_GPIO_Init+0x334>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b4:	4b30      	ldr	r3, [pc, #192]	; (8002778 <HAL_GPIO_Init+0x334>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <HAL_GPIO_Init+0x334>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026de:	4b26      	ldr	r3, [pc, #152]	; (8002778 <HAL_GPIO_Init+0x334>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4013      	ands	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002702:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <HAL_GPIO_Init+0x334>)
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_GPIO_Init+0x334>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800272c:	4a12      	ldr	r2, [pc, #72]	; (8002778 <HAL_GPIO_Init+0x334>)
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3301      	adds	r3, #1
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	2b0f      	cmp	r3, #15
 800273c:	f67f ae90 	bls.w	8002460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002740:	bf00      	nop
 8002742:	bf00      	nop
 8002744:	3724      	adds	r7, #36	; 0x24
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40013800 	.word	0x40013800
 8002758:	40020000 	.word	0x40020000
 800275c:	40020400 	.word	0x40020400
 8002760:	40020800 	.word	0x40020800
 8002764:	40020c00 	.word	0x40020c00
 8002768:	40021000 	.word	0x40021000
 800276c:	40021400 	.word	0x40021400
 8002770:	40021800 	.word	0x40021800
 8002774:	40021c00 	.word	0x40021c00
 8002778:	40013c00 	.word	0x40013c00

0800277c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	807b      	strh	r3, [r7, #2]
 8002788:	4613      	mov	r3, r2
 800278a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800278c:	787b      	ldrb	r3, [r7, #1]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002798:	e003      	b.n	80027a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800279a:	887b      	ldrh	r3, [r7, #2]
 800279c:	041a      	lsls	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	619a      	str	r2, [r3, #24]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027c0:	887a      	ldrh	r2, [r7, #2]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4013      	ands	r3, r2
 80027c6:	041a      	lsls	r2, r3, #16
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	43d9      	mvns	r1, r3
 80027cc:	887b      	ldrh	r3, [r7, #2]
 80027ce:	400b      	ands	r3, r1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	619a      	str	r2, [r3, #24]
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e267      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d075      	beq.n	80028ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002802:	4b88      	ldr	r3, [pc, #544]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b04      	cmp	r3, #4
 800280c:	d00c      	beq.n	8002828 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280e:	4b85      	ldr	r3, [pc, #532]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002816:	2b08      	cmp	r3, #8
 8002818:	d112      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800281a:	4b82      	ldr	r3, [pc, #520]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002826:	d10b      	bne.n	8002840 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	4b7e      	ldr	r3, [pc, #504]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d05b      	beq.n	80028ec <HAL_RCC_OscConfig+0x108>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d157      	bne.n	80028ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e242      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002848:	d106      	bne.n	8002858 <HAL_RCC_OscConfig+0x74>
 800284a:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a75      	ldr	r2, [pc, #468]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	e01d      	b.n	8002894 <HAL_RCC_OscConfig+0xb0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x98>
 8002862:	4b70      	ldr	r3, [pc, #448]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a6f      	ldr	r2, [pc, #444]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a6c      	ldr	r2, [pc, #432]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0xb0>
 800287c:	4b69      	ldr	r3, [pc, #420]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a68      	ldr	r2, [pc, #416]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	4b66      	ldr	r3, [pc, #408]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a65      	ldr	r2, [pc, #404]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 800288e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d013      	beq.n	80028c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7ff fc52 	bl	8002144 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a4:	f7ff fc4e 	bl	8002144 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b64      	cmp	r3, #100	; 0x64
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e207      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0xc0>
 80028c2:	e014      	b.n	80028ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7ff fc3e 	bl	8002144 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028cc:	f7ff fc3a 	bl	8002144 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1f3      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028de:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0xe8>
 80028ea:	e000      	b.n	80028ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d063      	beq.n	80029c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028fa:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800290e:	2b08      	cmp	r3, #8
 8002910:	d11c      	bne.n	800294c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002912:	4b44      	ldr	r3, [pc, #272]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d116      	bne.n	800294c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_RCC_OscConfig+0x152>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e1c7      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4937      	ldr	r1, [pc, #220]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002946:	4313      	orrs	r3, r2
 8002948:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294a:	e03a      	b.n	80029c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d020      	beq.n	8002996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002954:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <HAL_RCC_OscConfig+0x244>)
 8002956:	2201      	movs	r2, #1
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295a:	f7ff fbf3 	bl	8002144 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002962:	f7ff fbef 	bl	8002144 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e1a8      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0f0      	beq.n	8002962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002980:	4b28      	ldr	r3, [pc, #160]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4925      	ldr	r1, [pc, #148]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]
 8002994:	e015      	b.n	80029c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002996:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_RCC_OscConfig+0x244>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7ff fbd2 	bl	8002144 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a4:	f7ff fbce 	bl	8002144 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e187      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d036      	beq.n	8002a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d6:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_RCC_OscConfig+0x248>)
 80029d8:	2201      	movs	r2, #1
 80029da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7ff fbb2 	bl	8002144 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e4:	f7ff fbae 	bl	8002144 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e167      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_OscConfig+0x240>)
 80029f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0x200>
 8002a02:	e01b      	b.n	8002a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_OscConfig+0x248>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0a:	f7ff fb9b 	bl	8002144 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a10:	e00e      	b.n	8002a30 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a12:	f7ff fb97 	bl	8002144 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d907      	bls.n	8002a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e150      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
 8002a24:	40023800 	.word	0x40023800
 8002a28:	42470000 	.word	0x42470000
 8002a2c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	4b88      	ldr	r3, [pc, #544]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ea      	bne.n	8002a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8097 	beq.w	8002b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4e:	4b81      	ldr	r3, [pc, #516]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10f      	bne.n	8002a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4a7c      	ldr	r2, [pc, #496]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6a:	4b7a      	ldr	r3, [pc, #488]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a76:	2301      	movs	r3, #1
 8002a78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	4b77      	ldr	r3, [pc, #476]	; (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d118      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a86:	4b74      	ldr	r3, [pc, #464]	; (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a73      	ldr	r2, [pc, #460]	; (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a92:	f7ff fb57 	bl	8002144 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a9a:	f7ff fb53 	bl	8002144 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e10c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCC_OscConfig+0x474>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d106      	bne.n	8002ace <HAL_RCC_OscConfig+0x2ea>
 8002ac0:	4b64      	ldr	r3, [pc, #400]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	4a63      	ldr	r2, [pc, #396]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	f043 0301 	orr.w	r3, r3, #1
 8002aca:	6713      	str	r3, [r2, #112]	; 0x70
 8002acc:	e01c      	b.n	8002b08 <HAL_RCC_OscConfig+0x324>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d10c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x30c>
 8002ad6:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	4a5e      	ldr	r2, [pc, #376]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae2:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a5b      	ldr	r2, [pc, #364]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70
 8002aee:	e00b      	b.n	8002b08 <HAL_RCC_OscConfig+0x324>
 8002af0:	4b58      	ldr	r3, [pc, #352]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a57      	ldr	r2, [pc, #348]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
 8002afc:	4b55      	ldr	r3, [pc, #340]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	4a54      	ldr	r2, [pc, #336]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b02:	f023 0304 	bic.w	r3, r3, #4
 8002b06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d015      	beq.n	8002b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b10:	f7ff fb18 	bl	8002144 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7ff fb14 	bl	8002144 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0cb      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2e:	4b49      	ldr	r3, [pc, #292]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ee      	beq.n	8002b18 <HAL_RCC_OscConfig+0x334>
 8002b3a:	e014      	b.n	8002b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3c:	f7ff fb02 	bl	8002144 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b44:	f7ff fafe 	bl	8002144 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e0b5      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b5a:	4b3e      	ldr	r3, [pc, #248]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1ee      	bne.n	8002b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6c:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	4a38      	ldr	r2, [pc, #224]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 80a1 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b82:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d05c      	beq.n	8002c48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d141      	bne.n	8002c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b96:	4b31      	ldr	r3, [pc, #196]	; (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7ff fad2 	bl	8002144 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7ff face 	bl	8002144 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e087      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	4b27      	ldr	r3, [pc, #156]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	491b      	ldr	r1, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bec:	4b1b      	ldr	r3, [pc, #108]	; (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf2:	f7ff faa7 	bl	8002144 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7ff faa3 	bl	8002144 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e05c      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x416>
 8002c18:	e054      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_RCC_OscConfig+0x478>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7ff fa90 	bl	8002144 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c28:	f7ff fa8c 	bl	8002144 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e045      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x444>
 8002c46:	e03d      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e038      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40007000 	.word	0x40007000
 8002c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_RCC_OscConfig+0x4ec>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d028      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d121      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d11a      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d111      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d107      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3718      	adds	r7, #24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023800 	.word	0x40023800

08002cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e0cc      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce8:	4b68      	ldr	r3, [pc, #416]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d90c      	bls.n	8002d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf6:	4b65      	ldr	r3, [pc, #404]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b63      	ldr	r3, [pc, #396]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0b8      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d020      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d28:	4b59      	ldr	r3, [pc, #356]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	4a58      	ldr	r2, [pc, #352]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0308 	and.w	r3, r3, #8
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d40:	4b53      	ldr	r3, [pc, #332]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	4a52      	ldr	r2, [pc, #328]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d4c:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	494d      	ldr	r1, [pc, #308]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d044      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d72:	4b47      	ldr	r3, [pc, #284]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d119      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e07f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d92:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d109      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e06f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e067      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002db2:	4b37      	ldr	r3, [pc, #220]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f023 0203 	bic.w	r2, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4934      	ldr	r1, [pc, #208]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc4:	f7ff f9be 	bl	8002144 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	f7ff f9ba 	bl	8002144 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e04f      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002de2:	4b2b      	ldr	r3, [pc, #172]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 020c 	and.w	r2, r3, #12
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1eb      	bne.n	8002dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d20c      	bcs.n	8002e1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b22      	ldr	r3, [pc, #136]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e032      	b.n	8002e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d008      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4916      	ldr	r1, [pc, #88]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d009      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e46:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	490e      	ldr	r1, [pc, #56]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e5a:	f000 f821 	bl	8002ea0 <HAL_RCC_GetSysClockFreq>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	091b      	lsrs	r3, r3, #4
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	490a      	ldr	r1, [pc, #40]	; (8002e94 <HAL_RCC_ClockConfig+0x1c0>)
 8002e6c:	5ccb      	ldrb	r3, [r1, r3]
 8002e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e72:	4a09      	ldr	r2, [pc, #36]	; (8002e98 <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCC_ClockConfig+0x1c8>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe fd5e 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023c00 	.word	0x40023c00
 8002e90:	40023800 	.word	0x40023800
 8002e94:	0800cd10 	.word	0x0800cd10
 8002e98:	20000000 	.word	0x20000000
 8002e9c:	20000004 	.word	0x20000004

08002ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea4:	b094      	sub	sp, #80	; 0x50
 8002ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8002eac:	2300      	movs	r3, #0
 8002eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb8:	4b79      	ldr	r3, [pc, #484]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	f200 80e1 	bhi.w	800308c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x3a>
 8002ed2:	e0db      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed4:	4b73      	ldr	r3, [pc, #460]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ed6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ed8:	e0db      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eda:	4b73      	ldr	r3, [pc, #460]	; (80030a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002edc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ede:	e0d8      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee0:	4b6f      	ldr	r3, [pc, #444]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eea:	4b6d      	ldr	r3, [pc, #436]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d063      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ef6:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	099b      	lsrs	r3, r3, #6
 8002efc:	2200      	movs	r2, #0
 8002efe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f08:	633b      	str	r3, [r7, #48]	; 0x30
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f12:	4622      	mov	r2, r4
 8002f14:	462b      	mov	r3, r5
 8002f16:	f04f 0000 	mov.w	r0, #0
 8002f1a:	f04f 0100 	mov.w	r1, #0
 8002f1e:	0159      	lsls	r1, r3, #5
 8002f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f24:	0150      	lsls	r0, r2, #5
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	1a51      	subs	r1, r2, r1
 8002f2e:	6139      	str	r1, [r7, #16]
 8002f30:	4629      	mov	r1, r5
 8002f32:	eb63 0301 	sbc.w	r3, r3, r1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f44:	4659      	mov	r1, fp
 8002f46:	018b      	lsls	r3, r1, #6
 8002f48:	4651      	mov	r1, sl
 8002f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f4e:	4651      	mov	r1, sl
 8002f50:	018a      	lsls	r2, r1, #6
 8002f52:	4651      	mov	r1, sl
 8002f54:	ebb2 0801 	subs.w	r8, r2, r1
 8002f58:	4659      	mov	r1, fp
 8002f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f72:	4690      	mov	r8, r2
 8002f74:	4699      	mov	r9, r3
 8002f76:	4623      	mov	r3, r4
 8002f78:	eb18 0303 	adds.w	r3, r8, r3
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	462b      	mov	r3, r5
 8002f80:	eb49 0303 	adc.w	r3, r9, r3
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f92:	4629      	mov	r1, r5
 8002f94:	024b      	lsls	r3, r1, #9
 8002f96:	4621      	mov	r1, r4
 8002f98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	024a      	lsls	r2, r1, #9
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002faa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fb0:	f7fd fe6a 	bl	8000c88 <__aeabi_uldivmod>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fbc:	e058      	b.n	8003070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fbe:	4b38      	ldr	r3, [pc, #224]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	099b      	lsrs	r3, r3, #6
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	4611      	mov	r1, r2
 8002fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fce:	623b      	str	r3, [r7, #32]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fd8:	4642      	mov	r2, r8
 8002fda:	464b      	mov	r3, r9
 8002fdc:	f04f 0000 	mov.w	r0, #0
 8002fe0:	f04f 0100 	mov.w	r1, #0
 8002fe4:	0159      	lsls	r1, r3, #5
 8002fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fea:	0150      	lsls	r0, r2, #5
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800300c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003010:	ebb2 040a 	subs.w	r4, r2, sl
 8003014:	eb63 050b 	sbc.w	r5, r3, fp
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	f04f 0300 	mov.w	r3, #0
 8003020:	00eb      	lsls	r3, r5, #3
 8003022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003026:	00e2      	lsls	r2, r4, #3
 8003028:	4614      	mov	r4, r2
 800302a:	461d      	mov	r5, r3
 800302c:	4643      	mov	r3, r8
 800302e:	18e3      	adds	r3, r4, r3
 8003030:	603b      	str	r3, [r7, #0]
 8003032:	464b      	mov	r3, r9
 8003034:	eb45 0303 	adc.w	r3, r5, r3
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003046:	4629      	mov	r1, r5
 8003048:	028b      	lsls	r3, r1, #10
 800304a:	4621      	mov	r1, r4
 800304c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003050:	4621      	mov	r1, r4
 8003052:	028a      	lsls	r2, r1, #10
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305a:	2200      	movs	r2, #0
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	61fa      	str	r2, [r7, #28]
 8003060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003064:	f7fd fe10 	bl	8000c88 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4613      	mov	r3, r2
 800306e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	0c1b      	lsrs	r3, r3, #16
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	3301      	adds	r3, #1
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003084:	fbb2 f3f3 	udiv	r3, r2, r3
 8003088:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800308a:	e002      	b.n	8003092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800308c:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003094:	4618      	mov	r0, r3
 8003096:	3750      	adds	r7, #80	; 0x50
 8003098:	46bd      	mov	sp, r7
 800309a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800309e:	bf00      	nop
 80030a0:	40023800 	.word	0x40023800
 80030a4:	00f42400 	.word	0x00f42400
 80030a8:	007a1200 	.word	0x007a1200

080030ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80030b2:	681b      	ldr	r3, [r3, #0]
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000000 	.word	0x20000000

080030c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030c8:	f7ff fff0 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	0a9b      	lsrs	r3, r3, #10
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	4903      	ldr	r1, [pc, #12]	; (80030e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40023800 	.word	0x40023800
 80030e8:	0800cd20 	.word	0x0800cd20

080030ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030f0:	f7ff ffdc 	bl	80030ac <HAL_RCC_GetHCLKFreq>
 80030f4:	4602      	mov	r2, r0
 80030f6:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_RCC_GetPCLK2Freq+0x20>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	0b5b      	lsrs	r3, r3, #13
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	4903      	ldr	r1, [pc, #12]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003102:	5ccb      	ldrb	r3, [r1, r3]
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	40023800 	.word	0x40023800
 8003110:	0800cd20 	.word	0x0800cd20

08003114 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	220f      	movs	r2, #15
 8003122:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003124:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_RCC_GetClockConfig+0x5c>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0203 	and.w	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003130:	4b0f      	ldr	r3, [pc, #60]	; (8003170 <HAL_RCC_GetClockConfig+0x5c>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <HAL_RCC_GetClockConfig+0x5c>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_GetClockConfig+0x5c>)
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	08db      	lsrs	r3, r3, #3
 800314e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003156:	4b07      	ldr	r3, [pc, #28]	; (8003174 <HAL_RCC_GetClockConfig+0x60>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0207 	and.w	r2, r3, #7
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	601a      	str	r2, [r3, #0]
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	40023c00 	.word	0x40023c00

08003178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e04c      	b.n	8003224 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d111      	bne.n	80031ba <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f001 fa30 	bl	8004604 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a1f      	ldr	r2, [pc, #124]	; (800322c <HAL_TIM_Base_Init+0xb4>)
 80031b0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	4619      	mov	r1, r3
 80031cc:	4610      	mov	r0, r2
 80031ce:	f000 fe93 	bl	8003ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	08001e11 	.word	0x08001e11

08003230 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b01      	cmp	r3, #1
 8003242:	d001      	beq.n	8003248 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e046      	b.n	80032d6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2202      	movs	r2, #2
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a23      	ldr	r2, [pc, #140]	; (80032e4 <HAL_TIM_Base_Start+0xb4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d022      	beq.n	80032a0 <HAL_TIM_Base_Start+0x70>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003262:	d01d      	beq.n	80032a0 <HAL_TIM_Base_Start+0x70>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <HAL_TIM_Base_Start+0xb8>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d018      	beq.n	80032a0 <HAL_TIM_Base_Start+0x70>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <HAL_TIM_Base_Start+0xbc>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d013      	beq.n	80032a0 <HAL_TIM_Base_Start+0x70>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_TIM_Base_Start+0xc0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00e      	beq.n	80032a0 <HAL_TIM_Base_Start+0x70>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1b      	ldr	r2, [pc, #108]	; (80032f4 <HAL_TIM_Base_Start+0xc4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d009      	beq.n	80032a0 <HAL_TIM_Base_Start+0x70>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <HAL_TIM_Base_Start+0xc8>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_TIM_Base_Start+0x70>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a18      	ldr	r2, [pc, #96]	; (80032fc <HAL_TIM_Base_Start+0xcc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d111      	bne.n	80032c4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d010      	beq.n	80032d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	e007      	b.n	80032d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40000c00 	.word	0x40000c00
 80032f4:	40010400 	.word	0x40010400
 80032f8:	40014000 	.word	0x40014000
 80032fc:	40001800 	.word	0x40001800

08003300 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6a1a      	ldr	r2, [r3, #32]
 800330e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10f      	bne.n	8003338 <HAL_TIM_Base_Stop+0x38>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6a1a      	ldr	r2, [r3, #32]
 800331e:	f240 4344 	movw	r3, #1092	; 0x444
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d107      	bne.n	8003338 <HAL_TIM_Base_Stop+0x38>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d001      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e04e      	b.n	8003406 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a23      	ldr	r2, [pc, #140]	; (8003414 <HAL_TIM_Base_Start_IT+0xc4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d022      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x80>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003392:	d01d      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x80>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <HAL_TIM_Base_Start_IT+0xc8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d018      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x80>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1e      	ldr	r2, [pc, #120]	; (800341c <HAL_TIM_Base_Start_IT+0xcc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x80>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <HAL_TIM_Base_Start_IT+0xd0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00e      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x80>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1b      	ldr	r2, [pc, #108]	; (8003424 <HAL_TIM_Base_Start_IT+0xd4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d009      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x80>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a19      	ldr	r2, [pc, #100]	; (8003428 <HAL_TIM_Base_Start_IT+0xd8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_TIM_Base_Start_IT+0x80>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a18      	ldr	r2, [pc, #96]	; (800342c <HAL_TIM_Base_Start_IT+0xdc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d111      	bne.n	80033f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b06      	cmp	r3, #6
 80033e0:	d010      	beq.n	8003404 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033f2:	e007      	b.n	8003404 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0201 	orr.w	r2, r2, #1
 8003402:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40010000 	.word	0x40010000
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	40000c00 	.word	0x40000c00
 8003424:	40010400 	.word	0x40010400
 8003428:	40014000 	.word	0x40014000
 800342c:	40001800 	.word	0x40001800

08003430 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e04c      	b.n	80034dc <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d111      	bne.n	8003472 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f001 f8d4 	bl	8004604 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a1f      	ldr	r2, [pc, #124]	; (80034e4 <HAL_TIM_PWM_Init+0xb4>)
 8003468:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2202      	movs	r2, #2
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3304      	adds	r3, #4
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f000 fd37 	bl	8003ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	08001ed9 	.word	0x08001ed9

080034e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <HAL_TIM_PWM_Start+0x24>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e022      	b.n	8003552 <HAL_TIM_PWM_Start+0x6a>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	2b04      	cmp	r3, #4
 8003510:	d109      	bne.n	8003526 <HAL_TIM_PWM_Start+0x3e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b01      	cmp	r3, #1
 800351c:	bf14      	ite	ne
 800351e:	2301      	movne	r3, #1
 8003520:	2300      	moveq	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	e015      	b.n	8003552 <HAL_TIM_PWM_Start+0x6a>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d109      	bne.n	8003540 <HAL_TIM_PWM_Start+0x58>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b01      	cmp	r3, #1
 8003536:	bf14      	ite	ne
 8003538:	2301      	movne	r3, #1
 800353a:	2300      	moveq	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	e008      	b.n	8003552 <HAL_TIM_PWM_Start+0x6a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	bf14      	ite	ne
 800354c:	2301      	movne	r3, #1
 800354e:	2300      	moveq	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e07c      	b.n	8003654 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <HAL_TIM_PWM_Start+0x82>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003568:	e013      	b.n	8003592 <HAL_TIM_PWM_Start+0xaa>
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	2b04      	cmp	r3, #4
 800356e:	d104      	bne.n	800357a <HAL_TIM_PWM_Start+0x92>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003578:	e00b      	b.n	8003592 <HAL_TIM_PWM_Start+0xaa>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d104      	bne.n	800358a <HAL_TIM_PWM_Start+0xa2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003588:	e003      	b.n	8003592 <HAL_TIM_PWM_Start+0xaa>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2201      	movs	r2, #1
 8003598:	6839      	ldr	r1, [r7, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f001 f80c 	bl	80045b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a2d      	ldr	r2, [pc, #180]	; (800365c <HAL_TIM_PWM_Start+0x174>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_TIM_PWM_Start+0xcc>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a2c      	ldr	r2, [pc, #176]	; (8003660 <HAL_TIM_PWM_Start+0x178>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_TIM_PWM_Start+0xd0>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_TIM_PWM_Start+0xd2>
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d007      	beq.n	80035ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a22      	ldr	r2, [pc, #136]	; (800365c <HAL_TIM_PWM_Start+0x174>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d022      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d01d      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1f      	ldr	r2, [pc, #124]	; (8003664 <HAL_TIM_PWM_Start+0x17c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d018      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1d      	ldr	r2, [pc, #116]	; (8003668 <HAL_TIM_PWM_Start+0x180>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1c      	ldr	r2, [pc, #112]	; (800366c <HAL_TIM_PWM_Start+0x184>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a16      	ldr	r2, [pc, #88]	; (8003660 <HAL_TIM_PWM_Start+0x178>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a18      	ldr	r2, [pc, #96]	; (8003670 <HAL_TIM_PWM_Start+0x188>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_TIM_PWM_Start+0x136>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a16      	ldr	r2, [pc, #88]	; (8003674 <HAL_TIM_PWM_Start+0x18c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d111      	bne.n	8003642 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b06      	cmp	r3, #6
 800362e:	d010      	beq.n	8003652 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003640:	e007      	b.n	8003652 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40010000 	.word	0x40010000
 8003660:	40010400 	.word	0x40010400
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800
 800366c:	40000c00 	.word	0x40000c00
 8003670:	40014000 	.word	0x40014000
 8003674:	40001800 	.word	0x40001800

08003678 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2200      	movs	r2, #0
 8003688:	6839      	ldr	r1, [r7, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 ff94 	bl	80045b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2e      	ldr	r2, [pc, #184]	; (8003750 <HAL_TIM_PWM_Stop+0xd8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_TIM_PWM_Stop+0x2c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <HAL_TIM_PWM_Stop+0xdc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d101      	bne.n	80036a8 <HAL_TIM_PWM_Stop+0x30>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <HAL_TIM_PWM_Stop+0x32>
 80036a8:	2300      	movs	r3, #0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d017      	beq.n	80036de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6a1a      	ldr	r2, [r3, #32]
 80036b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10f      	bne.n	80036de <HAL_TIM_PWM_Stop+0x66>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6a1a      	ldr	r2, [r3, #32]
 80036c4:	f240 4344 	movw	r3, #1092	; 0x444
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d107      	bne.n	80036de <HAL_TIM_PWM_Stop+0x66>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a1a      	ldr	r2, [r3, #32]
 80036e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10f      	bne.n	800370e <HAL_TIM_PWM_Stop+0x96>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6a1a      	ldr	r2, [r3, #32]
 80036f4:	f240 4344 	movw	r3, #1092	; 0x444
 80036f8:	4013      	ands	r3, r2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d107      	bne.n	800370e <HAL_TIM_PWM_Stop+0x96>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d104      	bne.n	800371e <HAL_TIM_PWM_Stop+0xa6>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800371c:	e013      	b.n	8003746 <HAL_TIM_PWM_Stop+0xce>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d104      	bne.n	800372e <HAL_TIM_PWM_Stop+0xb6>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800372c:	e00b      	b.n	8003746 <HAL_TIM_PWM_Stop+0xce>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d104      	bne.n	800373e <HAL_TIM_PWM_Stop+0xc6>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800373c:	e003      	b.n	8003746 <HAL_TIM_PWM_Stop+0xce>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40010000 	.word	0x40010000
 8003754:	40010400 	.word	0x40010400

08003758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d128      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b02      	cmp	r3, #2
 800377a:	d121      	bne.n	80037c0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0202 	mvn.w	r2, #2
 8003784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	4798      	blx	r3
 80037a4:	e009      	b.n	80037ba <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d128      	bne.n	8003820 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d121      	bne.n	8003820 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0204 	mvn.w	r2, #4
 80037e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2202      	movs	r2, #2
 80037ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d005      	beq.n	8003806 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	4798      	blx	r3
 8003804:	e009      	b.n	800381a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	2b08      	cmp	r3, #8
 800382c:	d128      	bne.n	8003880 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b08      	cmp	r3, #8
 800383a:	d121      	bne.n	8003880 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f06f 0208 	mvn.w	r2, #8
 8003844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2204      	movs	r2, #4
 800384a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	4798      	blx	r3
 8003864:	e009      	b.n	800387a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b10      	cmp	r3, #16
 800388c:	d128      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b10      	cmp	r3, #16
 800389a:	d121      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0210 	mvn.w	r2, #16
 80038a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2208      	movs	r2, #8
 80038aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d005      	beq.n	80038c6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
 80038c4:	e009      	b.n	80038da <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d110      	bne.n	8003910 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d109      	bne.n	8003910 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0201 	mvn.w	r2, #1
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391a:	2b80      	cmp	r3, #128	; 0x80
 800391c:	d110      	bne.n	8003940 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003928:	2b80      	cmp	r3, #128	; 0x80
 800392a:	d109      	bne.n	8003940 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d110      	bne.n	8003970 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003958:	2b40      	cmp	r3, #64	; 0x40
 800395a:	d109      	bne.n	8003970 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b20      	cmp	r3, #32
 800397c:	d110      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0320 	and.w	r3, r3, #32
 8003988:	2b20      	cmp	r3, #32
 800398a:	d109      	bne.n	80039a0 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f06f 0220 	mvn.w	r2, #32
 8003994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e0ae      	b.n	8003b24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b0c      	cmp	r3, #12
 80039d2:	f200 809f 	bhi.w	8003b14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039d6:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039dc:	08003a11 	.word	0x08003a11
 80039e0:	08003b15 	.word	0x08003b15
 80039e4:	08003b15 	.word	0x08003b15
 80039e8:	08003b15 	.word	0x08003b15
 80039ec:	08003a51 	.word	0x08003a51
 80039f0:	08003b15 	.word	0x08003b15
 80039f4:	08003b15 	.word	0x08003b15
 80039f8:	08003b15 	.word	0x08003b15
 80039fc:	08003a93 	.word	0x08003a93
 8003a00:	08003b15 	.word	0x08003b15
 8003a04:	08003b15 	.word	0x08003b15
 8003a08:	08003b15 	.word	0x08003b15
 8003a0c:	08003ad3 	.word	0x08003ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 fb0e 	bl	8004038 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0208 	orr.w	r2, r2, #8
 8003a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0204 	bic.w	r2, r2, #4
 8003a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6999      	ldr	r1, [r3, #24]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	619a      	str	r2, [r3, #24]
      break;
 8003a4e:	e064      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 fb5e 	bl	8004118 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699a      	ldr	r2, [r3, #24]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6999      	ldr	r1, [r3, #24]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	021a      	lsls	r2, r3, #8
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	619a      	str	r2, [r3, #24]
      break;
 8003a90:	e043      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fbb3 	bl	8004204 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f042 0208 	orr.w	r2, r2, #8
 8003aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69da      	ldr	r2, [r3, #28]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0204 	bic.w	r2, r2, #4
 8003abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69d9      	ldr	r1, [r3, #28]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	61da      	str	r2, [r3, #28]
      break;
 8003ad0:	e023      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68b9      	ldr	r1, [r7, #8]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fc07 	bl	80042ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003aec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69da      	ldr	r2, [r3, #28]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69d9      	ldr	r1, [r3, #28]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	021a      	lsls	r2, r3, #8
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	61da      	str	r2, [r3, #28]
      break;
 8003b12:	e002      	b.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	75fb      	strb	r3, [r7, #23]
      break;
 8003b18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e031      	b.n	8003ba8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003b54:	6839      	ldr	r1, [r7, #0]
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fc1e 	bl	8004398 <TIM_SlaveTimer_SetConfig>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e018      	b.n	8003ba8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b84:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b94:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e135      	b.n	8003eec <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_RegisterCallback+0x2a>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e12e      	b.n	8003eec <HAL_TIM_RegisterCallback+0x288>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	f040 80ba 	bne.w	8003e18 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8003ca4:	7afb      	ldrb	r3, [r7, #11]
 8003ca6:	2b1a      	cmp	r3, #26
 8003ca8:	f200 80b3 	bhi.w	8003e12 <HAL_TIM_RegisterCallback+0x1ae>
 8003cac:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <HAL_TIM_RegisterCallback+0x50>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003d21 	.word	0x08003d21
 8003cb8:	08003d29 	.word	0x08003d29
 8003cbc:	08003d31 	.word	0x08003d31
 8003cc0:	08003d39 	.word	0x08003d39
 8003cc4:	08003d41 	.word	0x08003d41
 8003cc8:	08003d49 	.word	0x08003d49
 8003ccc:	08003d51 	.word	0x08003d51
 8003cd0:	08003d59 	.word	0x08003d59
 8003cd4:	08003d61 	.word	0x08003d61
 8003cd8:	08003d69 	.word	0x08003d69
 8003cdc:	08003d71 	.word	0x08003d71
 8003ce0:	08003d79 	.word	0x08003d79
 8003ce4:	08003d81 	.word	0x08003d81
 8003ce8:	08003d89 	.word	0x08003d89
 8003cec:	08003d91 	.word	0x08003d91
 8003cf0:	08003d9b 	.word	0x08003d9b
 8003cf4:	08003da5 	.word	0x08003da5
 8003cf8:	08003daf 	.word	0x08003daf
 8003cfc:	08003db9 	.word	0x08003db9
 8003d00:	08003dc3 	.word	0x08003dc3
 8003d04:	08003dcd 	.word	0x08003dcd
 8003d08:	08003dd7 	.word	0x08003dd7
 8003d0c:	08003de1 	.word	0x08003de1
 8003d10:	08003deb 	.word	0x08003deb
 8003d14:	08003df5 	.word	0x08003df5
 8003d18:	08003dff 	.word	0x08003dff
 8003d1c:	08003e09 	.word	0x08003e09
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8003d26:	e0dc      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003d2e:	e0d8      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003d36:	e0d4      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003d3e:	e0d0      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003d46:	e0cc      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003d4e:	e0c8      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003d56:	e0c4      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003d5e:	e0c0      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003d66:	e0bc      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003d6e:	e0b8      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003d76:	e0b4      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003d7e:	e0b0      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003d86:	e0ac      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003d8e:	e0a8      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003d98:	e0a3      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8003da2:	e09e      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8003dac:	e099      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8003db6:	e094      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8003dc0:	e08f      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003dca:	e08a      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8003dd4:	e085      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8003dde:	e080      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8003de8:	e07b      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8003df2:	e076      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8003dfc:	e071      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8003e06:	e06c      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8003e10:	e067      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
        break;
 8003e16:	e064      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d15c      	bne.n	8003ede <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 8003e24:	7afb      	ldrb	r3, [r7, #11]
 8003e26:	2b0d      	cmp	r3, #13
 8003e28:	d856      	bhi.n	8003ed8 <HAL_TIM_RegisterCallback+0x274>
 8003e2a:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <HAL_TIM_RegisterCallback+0x1cc>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e69 	.word	0x08003e69
 8003e34:	08003e71 	.word	0x08003e71
 8003e38:	08003e79 	.word	0x08003e79
 8003e3c:	08003e81 	.word	0x08003e81
 8003e40:	08003e89 	.word	0x08003e89
 8003e44:	08003e91 	.word	0x08003e91
 8003e48:	08003e99 	.word	0x08003e99
 8003e4c:	08003ea1 	.word	0x08003ea1
 8003e50:	08003ea9 	.word	0x08003ea9
 8003e54:	08003eb1 	.word	0x08003eb1
 8003e58:	08003eb9 	.word	0x08003eb9
 8003e5c:	08003ec1 	.word	0x08003ec1
 8003e60:	08003ec9 	.word	0x08003ec9
 8003e64:	08003ed1 	.word	0x08003ed1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8003e6e:	e038      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003e76:	e034      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003e7e:	e030      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003e86:	e02c      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003e8e:	e028      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003e96:	e024      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003e9e:	e020      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003ea6:	e01c      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003eae:	e018      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003eb6:	e014      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003ebe:	e010      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003ec6:	e00c      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003ece:	e008      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003ed6:	e004      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	75fb      	strb	r3, [r7, #23]
        break;
 8003edc:	e001      	b.n	8003ee2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a40      	ldr	r2, [pc, #256]	; (800400c <TIM_Base_SetConfig+0x114>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d013      	beq.n	8003f38 <TIM_Base_SetConfig+0x40>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d00f      	beq.n	8003f38 <TIM_Base_SetConfig+0x40>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a3d      	ldr	r2, [pc, #244]	; (8004010 <TIM_Base_SetConfig+0x118>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <TIM_Base_SetConfig+0x40>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a3c      	ldr	r2, [pc, #240]	; (8004014 <TIM_Base_SetConfig+0x11c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d007      	beq.n	8003f38 <TIM_Base_SetConfig+0x40>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a3b      	ldr	r2, [pc, #236]	; (8004018 <TIM_Base_SetConfig+0x120>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_Base_SetConfig+0x40>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a3a      	ldr	r2, [pc, #232]	; (800401c <TIM_Base_SetConfig+0x124>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d108      	bne.n	8003f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a2f      	ldr	r2, [pc, #188]	; (800400c <TIM_Base_SetConfig+0x114>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d02b      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f58:	d027      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a2c      	ldr	r2, [pc, #176]	; (8004010 <TIM_Base_SetConfig+0x118>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d023      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a2b      	ldr	r2, [pc, #172]	; (8004014 <TIM_Base_SetConfig+0x11c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d01f      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a2a      	ldr	r2, [pc, #168]	; (8004018 <TIM_Base_SetConfig+0x120>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01b      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a29      	ldr	r2, [pc, #164]	; (800401c <TIM_Base_SetConfig+0x124>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d017      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a28      	ldr	r2, [pc, #160]	; (8004020 <TIM_Base_SetConfig+0x128>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a27      	ldr	r2, [pc, #156]	; (8004024 <TIM_Base_SetConfig+0x12c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00f      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a26      	ldr	r2, [pc, #152]	; (8004028 <TIM_Base_SetConfig+0x130>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00b      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a25      	ldr	r2, [pc, #148]	; (800402c <TIM_Base_SetConfig+0x134>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a24      	ldr	r2, [pc, #144]	; (8004030 <TIM_Base_SetConfig+0x138>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d003      	beq.n	8003faa <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a23      	ldr	r2, [pc, #140]	; (8004034 <TIM_Base_SetConfig+0x13c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d108      	bne.n	8003fbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a0a      	ldr	r2, [pc, #40]	; (800400c <TIM_Base_SetConfig+0x114>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d003      	beq.n	8003ff0 <TIM_Base_SetConfig+0xf8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a0c      	ldr	r2, [pc, #48]	; (800401c <TIM_Base_SetConfig+0x124>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d103      	bne.n	8003ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	615a      	str	r2, [r3, #20]
}
 8003ffe:	bf00      	nop
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40010000 	.word	0x40010000
 8004010:	40000400 	.word	0x40000400
 8004014:	40000800 	.word	0x40000800
 8004018:	40000c00 	.word	0x40000c00
 800401c:	40010400 	.word	0x40010400
 8004020:	40014000 	.word	0x40014000
 8004024:	40014400 	.word	0x40014400
 8004028:	40014800 	.word	0x40014800
 800402c:	40001800 	.word	0x40001800
 8004030:	40001c00 	.word	0x40001c00
 8004034:	40002000 	.word	0x40002000

08004038 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0201 	bic.w	r2, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	4313      	orrs	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f023 0302 	bic.w	r3, r3, #2
 8004080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a20      	ldr	r2, [pc, #128]	; (8004110 <TIM_OC1_SetConfig+0xd8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_OC1_SetConfig+0x64>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <TIM_OC1_SetConfig+0xdc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d10c      	bne.n	80040b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f023 0308 	bic.w	r3, r3, #8
 80040a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f023 0304 	bic.w	r3, r3, #4
 80040b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a15      	ldr	r2, [pc, #84]	; (8004110 <TIM_OC1_SetConfig+0xd8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d003      	beq.n	80040c6 <TIM_OC1_SetConfig+0x8e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a14      	ldr	r2, [pc, #80]	; (8004114 <TIM_OC1_SetConfig+0xdc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d111      	bne.n	80040ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	621a      	str	r2, [r3, #32]
}
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40010000 	.word	0x40010000
 8004114:	40010400 	.word	0x40010400

08004118 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f023 0210 	bic.w	r2, r3, #16
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0320 	bic.w	r3, r3, #32
 8004162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a22      	ldr	r2, [pc, #136]	; (80041fc <TIM_OC2_SetConfig+0xe4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_OC2_SetConfig+0x68>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a21      	ldr	r2, [pc, #132]	; (8004200 <TIM_OC2_SetConfig+0xe8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d10d      	bne.n	800419c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	4313      	orrs	r3, r2
 8004192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a17      	ldr	r2, [pc, #92]	; (80041fc <TIM_OC2_SetConfig+0xe4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_OC2_SetConfig+0x94>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a16      	ldr	r2, [pc, #88]	; (8004200 <TIM_OC2_SetConfig+0xe8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d113      	bne.n	80041d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	621a      	str	r2, [r3, #32]
}
 80041ee:	bf00      	nop
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40010000 	.word	0x40010000
 8004200:	40010400 	.word	0x40010400

08004204 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800424c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a21      	ldr	r2, [pc, #132]	; (80042e4 <TIM_OC3_SetConfig+0xe0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d003      	beq.n	800426a <TIM_OC3_SetConfig+0x66>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a20      	ldr	r2, [pc, #128]	; (80042e8 <TIM_OC3_SetConfig+0xe4>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d10d      	bne.n	8004286 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004270:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004284:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a16      	ldr	r2, [pc, #88]	; (80042e4 <TIM_OC3_SetConfig+0xe0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_OC3_SetConfig+0x92>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a15      	ldr	r2, [pc, #84]	; (80042e8 <TIM_OC3_SetConfig+0xe4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d113      	bne.n	80042be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800429c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	621a      	str	r2, [r3, #32]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40010000 	.word	0x40010000
 80042e8:	40010400 	.word	0x40010400

080042ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004322:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004336:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	031b      	lsls	r3, r3, #12
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a12      	ldr	r2, [pc, #72]	; (8004390 <TIM_OC4_SetConfig+0xa4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d003      	beq.n	8004354 <TIM_OC4_SetConfig+0x68>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a11      	ldr	r2, [pc, #68]	; (8004394 <TIM_OC4_SetConfig+0xa8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d109      	bne.n	8004368 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	019b      	lsls	r3, r3, #6
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	621a      	str	r2, [r3, #32]
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	40010000 	.word	0x40010000
 8004394:	40010400 	.word	0x40010400

08004398 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043a2:	2300      	movs	r3, #0
 80043a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	4313      	orrs	r3, r2
 80043be:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f023 0307 	bic.w	r3, r3, #7
 80043c6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b70      	cmp	r3, #112	; 0x70
 80043e0:	d01a      	beq.n	8004418 <TIM_SlaveTimer_SetConfig+0x80>
 80043e2:	2b70      	cmp	r3, #112	; 0x70
 80043e4:	d860      	bhi.n	80044a8 <TIM_SlaveTimer_SetConfig+0x110>
 80043e6:	2b60      	cmp	r3, #96	; 0x60
 80043e8:	d054      	beq.n	8004494 <TIM_SlaveTimer_SetConfig+0xfc>
 80043ea:	2b60      	cmp	r3, #96	; 0x60
 80043ec:	d85c      	bhi.n	80044a8 <TIM_SlaveTimer_SetConfig+0x110>
 80043ee:	2b50      	cmp	r3, #80	; 0x50
 80043f0:	d046      	beq.n	8004480 <TIM_SlaveTimer_SetConfig+0xe8>
 80043f2:	2b50      	cmp	r3, #80	; 0x50
 80043f4:	d858      	bhi.n	80044a8 <TIM_SlaveTimer_SetConfig+0x110>
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d019      	beq.n	800442e <TIM_SlaveTimer_SetConfig+0x96>
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	d854      	bhi.n	80044a8 <TIM_SlaveTimer_SetConfig+0x110>
 80043fe:	2b30      	cmp	r3, #48	; 0x30
 8004400:	d055      	beq.n	80044ae <TIM_SlaveTimer_SetConfig+0x116>
 8004402:	2b30      	cmp	r3, #48	; 0x30
 8004404:	d850      	bhi.n	80044a8 <TIM_SlaveTimer_SetConfig+0x110>
 8004406:	2b20      	cmp	r3, #32
 8004408:	d051      	beq.n	80044ae <TIM_SlaveTimer_SetConfig+0x116>
 800440a:	2b20      	cmp	r3, #32
 800440c:	d84c      	bhi.n	80044a8 <TIM_SlaveTimer_SetConfig+0x110>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d04d      	beq.n	80044ae <TIM_SlaveTimer_SetConfig+0x116>
 8004412:	2b10      	cmp	r3, #16
 8004414:	d04b      	beq.n	80044ae <TIM_SlaveTimer_SetConfig+0x116>
 8004416:	e047      	b.n	80044a8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	68d9      	ldr	r1, [r3, #12]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f000 f8a6 	bl	8004578 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800442c:	e040      	b.n	80044b0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b05      	cmp	r3, #5
 8004434:	d101      	bne.n	800443a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e03b      	b.n	80044b2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0201 	bic.w	r2, r2, #1
 8004450:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004460:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	4313      	orrs	r3, r2
 800446c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
      break;
 800447e:	e017      	b.n	80044b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6899      	ldr	r1, [r3, #8]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	461a      	mov	r2, r3
 800448e:	f000 f814 	bl	80044ba <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8004492:	e00d      	b.n	80044b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6899      	ldr	r1, [r3, #8]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	461a      	mov	r2, r3
 80044a2:	f000 f839 	bl	8004518 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80044a6:	e003      	b.n	80044b0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
      break;
 80044ac:	e000      	b.n	80044b0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80044ae:	bf00      	nop
  }

  return status;
 80044b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b087      	sub	sp, #28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f023 0201 	bic.w	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f023 030a 	bic.w	r3, r3, #10
 80044f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	621a      	str	r2, [r3, #32]
}
 800450c:	bf00      	nop
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f023 0210 	bic.w	r2, r3, #16
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004542:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	031b      	lsls	r3, r3, #12
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004554:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	621a      	str	r2, [r3, #32]
}
 800456c:	bf00      	nop
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004592:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	021a      	lsls	r2, r3, #8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	431a      	orrs	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4313      	orrs	r3, r2
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	609a      	str	r2, [r3, #8]
}
 80045ac:	bf00      	nop
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b087      	sub	sp, #28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	2201      	movs	r2, #1
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a1a      	ldr	r2, [r3, #32]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	43db      	mvns	r3, r3
 80045da:	401a      	ands	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1a      	ldr	r2, [r3, #32]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	fa01 f303 	lsl.w	r3, r1, r3
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
	...

08004604 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a1c      	ldr	r2, [pc, #112]	; (8004680 <TIM_ResetCallback+0x7c>)
 8004610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a1b      	ldr	r2, [pc, #108]	; (8004684 <TIM_ResetCallback+0x80>)
 8004618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a1a      	ldr	r2, [pc, #104]	; (8004688 <TIM_ResetCallback+0x84>)
 8004620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a19      	ldr	r2, [pc, #100]	; (800468c <TIM_ResetCallback+0x88>)
 8004628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a18      	ldr	r2, [pc, #96]	; (8004690 <TIM_ResetCallback+0x8c>)
 8004630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a17      	ldr	r2, [pc, #92]	; (8004694 <TIM_ResetCallback+0x90>)
 8004638:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a16      	ldr	r2, [pc, #88]	; (8004698 <TIM_ResetCallback+0x94>)
 8004640:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a15      	ldr	r2, [pc, #84]	; (800469c <TIM_ResetCallback+0x98>)
 8004648:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a14      	ldr	r2, [pc, #80]	; (80046a0 <TIM_ResetCallback+0x9c>)
 8004650:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a13      	ldr	r2, [pc, #76]	; (80046a4 <TIM_ResetCallback+0xa0>)
 8004658:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <TIM_ResetCallback+0xa4>)
 8004660:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a11      	ldr	r2, [pc, #68]	; (80046ac <TIM_ResetCallback+0xa8>)
 8004668:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a10      	ldr	r2, [pc, #64]	; (80046b0 <TIM_ResetCallback+0xac>)
 8004670:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	080018b5 	.word	0x080018b5
 8004684:	08003bb1 	.word	0x08003bb1
 8004688:	08003c29 	.word	0x08003c29
 800468c:	08003c3d 	.word	0x08003c3d
 8004690:	08003bd9 	.word	0x08003bd9
 8004694:	08003bed 	.word	0x08003bed
 8004698:	08003bc5 	.word	0x08003bc5
 800469c:	08003c01 	.word	0x08003c01
 80046a0:	08003c15 	.word	0x08003c15
 80046a4:	08003c51 	.word	0x08003c51
 80046a8:	080047ad 	.word	0x080047ad
 80046ac:	080047c1 	.word	0x080047c1
 80046b0:	080047d5 	.word	0x080047d5

080046b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e05a      	b.n	8004782 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a21      	ldr	r2, [pc, #132]	; (8004790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d022      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004718:	d01d      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1d      	ldr	r2, [pc, #116]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d018      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1b      	ldr	r2, [pc, #108]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d013      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1a      	ldr	r2, [pc, #104]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a18      	ldr	r2, [pc, #96]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d009      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a17      	ldr	r2, [pc, #92]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a15      	ldr	r2, [pc, #84]	; (80047a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10c      	bne.n	8004770 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800475c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4313      	orrs	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40010400 	.word	0x40010400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40001800 	.word	0x40001800

080047ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e04a      	b.n	8004890 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d111      	bne.n	800482a <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fc9c 	bl	800514c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a1e      	ldr	r2, [pc, #120]	; (8004898 <HAL_UART_Init+0xb0>)
 8004820:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2224      	movs	r2, #36	; 0x24
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68da      	ldr	r2, [r3, #12]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004840:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 ff04 	bl	8005650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691a      	ldr	r2, [r3, #16]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004856:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004866:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004876:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	08001fe5 	.word	0x08001fe5

0800489c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	460b      	mov	r3, r1
 80048a6:	607a      	str	r2, [r7, #4]
 80048a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d107      	bne.n	80048c4 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	f043 0220 	orr.w	r2, r3, #32
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e08c      	b.n	80049de <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_UART_RegisterCallback+0x36>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e085      	b.n	80049de <HAL_UART_RegisterCallback+0x142>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b20      	cmp	r3, #32
 80048e4:	d151      	bne.n	800498a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80048e6:	7afb      	ldrb	r3, [r7, #11]
 80048e8:	2b0c      	cmp	r3, #12
 80048ea:	d845      	bhi.n	8004978 <HAL_UART_RegisterCallback+0xdc>
 80048ec:	a201      	add	r2, pc, #4	; (adr r2, 80048f4 <HAL_UART_RegisterCallback+0x58>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004929 	.word	0x08004929
 80048f8:	08004931 	.word	0x08004931
 80048fc:	08004939 	.word	0x08004939
 8004900:	08004941 	.word	0x08004941
 8004904:	08004949 	.word	0x08004949
 8004908:	08004951 	.word	0x08004951
 800490c:	08004959 	.word	0x08004959
 8004910:	08004961 	.word	0x08004961
 8004914:	08004979 	.word	0x08004979
 8004918:	08004979 	.word	0x08004979
 800491c:	08004979 	.word	0x08004979
 8004920:	08004969 	.word	0x08004969
 8004924:	08004971 	.word	0x08004971
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800492e:	e051      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8004936:	e04d      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800493e:	e049      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8004946:	e045      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800494e:	e041      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8004956:	e03d      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800495e:	e039      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8004966:	e035      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800496e:	e031      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004976:	e02d      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	f043 0220 	orr.w	r2, r3, #32
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	75fb      	strb	r3, [r7, #23]
        break;
 8004988:	e024      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d116      	bne.n	80049c4 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8004996:	7afb      	ldrb	r3, [r7, #11]
 8004998:	2b0b      	cmp	r3, #11
 800499a:	d002      	beq.n	80049a2 <HAL_UART_RegisterCallback+0x106>
 800499c:	2b0c      	cmp	r3, #12
 800499e:	d004      	beq.n	80049aa <HAL_UART_RegisterCallback+0x10e>
 80049a0:	e007      	b.n	80049b2 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80049a8:	e014      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80049b0:	e010      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	f043 0220 	orr.w	r2, r3, #32
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	75fb      	strb	r3, [r7, #23]
        break;
 80049c2:	e007      	b.n	80049d4 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	f043 0220 	orr.w	r2, r3, #32
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop

080049ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08a      	sub	sp, #40	; 0x28
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d17c      	bne.n	8004b06 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_UART_Transmit+0x2c>
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e075      	b.n	8004b08 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_UART_Transmit+0x3e>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e06e      	b.n	8004b08 <HAL_UART_Transmit+0x11c>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2221      	movs	r2, #33	; 0x21
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a40:	f7fd fb80 	bl	8002144 <HAL_GetTick>
 8004a44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	88fa      	ldrh	r2, [r7, #6]
 8004a4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	88fa      	ldrh	r2, [r7, #6]
 8004a50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a5a:	d108      	bne.n	8004a6e <HAL_UART_Transmit+0x82>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	61bb      	str	r3, [r7, #24]
 8004a6c:	e003      	b.n	8004a76 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a7e:	e02a      	b.n	8004ad6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	2200      	movs	r2, #0
 8004a88:	2180      	movs	r1, #128	; 0x80
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fb96 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e036      	b.n	8004b08 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10b      	bne.n	8004ab8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004aae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	3302      	adds	r3, #2
 8004ab4:	61bb      	str	r3, [r7, #24]
 8004ab6:	e007      	b.n	8004ac8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	781a      	ldrb	r2, [r3, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1cf      	bne.n	8004a80 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2140      	movs	r1, #64	; 0x40
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fb66 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e006      	b.n	8004b08 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e000      	b.n	8004b08 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b06:	2302      	movs	r3, #2
  }
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3720      	adds	r7, #32
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d11d      	bne.n	8004b66 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_UART_Receive_IT+0x26>
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e016      	b.n	8004b68 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_UART_Receive_IT+0x38>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e00f      	b.n	8004b68 <HAL_UART_Receive_IT+0x58>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	68b9      	ldr	r1, [r7, #8]
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 fb9b 	bl	8005298 <UART_Start_Receive_IT>
 8004b62:	4603      	mov	r3, r0
 8004b64:	e000      	b.n	8004b68 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b66:	2302      	movs	r3, #2
  }
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b0ba      	sub	sp, #232	; 0xe8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ba6:	f003 030f 	and.w	r3, r3, #15
 8004baa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10f      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d009      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x66>
 8004bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fc81 	bl	80054d6 <UART_Receive_IT>
      return;
 8004bd4:	e25b      	b.n	800508e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 80e1 	beq.w	8004da2 <HAL_UART_IRQHandler+0x232>
 8004be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 80d4 	beq.w	8004da2 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <HAL_UART_IRQHandler+0xae>
 8004c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f043 0201 	orr.w	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00b      	beq.n	8004c42 <HAL_UART_IRQHandler+0xd2>
 8004c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f043 0202 	orr.w	r2, r3, #2
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00b      	beq.n	8004c66 <HAL_UART_IRQHandler+0xf6>
 8004c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f043 0204 	orr.w	r2, r3, #4
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d011      	beq.n	8004c96 <HAL_UART_IRQHandler+0x126>
 8004c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c76:	f003 0320 	and.w	r3, r3, #32
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f043 0208 	orr.w	r2, r3, #8
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 81f2 	beq.w	8005084 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_UART_IRQHandler+0x14e>
 8004cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fc0c 	bl	80054d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d103      	bne.n	8004cea <HAL_UART_IRQHandler+0x17a>
 8004ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d051      	beq.n	8004d8e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fb12 	bl	8005314 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d142      	bne.n	8004d84 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3314      	adds	r3, #20
 8004d04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3314      	adds	r3, #20
 8004d26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004d36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004d3a:	e841 2300 	strex	r3, r2, [r1]
 8004d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1d9      	bne.n	8004cfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d013      	beq.n	8004d7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	4a7f      	ldr	r2, [pc, #508]	; (8004f54 <HAL_UART_IRQHandler+0x3e4>)
 8004d58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fd fb4e 	bl	8002400 <HAL_DMA_Abort_IT>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d019      	beq.n	8004d9e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d74:	4610      	mov	r0, r2
 8004d76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d78:	e011      	b.n	8004d9e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d82:	e00c      	b.n	8004d9e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d8c:	e007      	b.n	8004d9e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d9c:	e172      	b.n	8005084 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d9e:	bf00      	nop
    return;
 8004da0:	e170      	b.n	8005084 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	f040 814c 	bne.w	8005044 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004db0:	f003 0310 	and.w	r3, r3, #16
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8145 	beq.w	8005044 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004dba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 813e 	beq.w	8005044 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	60bb      	str	r3, [r7, #8]
 8004ddc:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	f040 80b5 	bne.w	8004f58 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004dfa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 8142 	beq.w	8005088 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	f080 813b 	bcs.w	8005088 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e18:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e24:	f000 8088 	beq.w	8004f38 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	330c      	adds	r3, #12
 8004e50:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004e54:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004e60:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004e64:	e841 2300 	strex	r3, r2, [r1]
 8004e68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1d9      	bne.n	8004e28 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3314      	adds	r3, #20
 8004e7a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e86:	f023 0301 	bic.w	r3, r3, #1
 8004e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3314      	adds	r3, #20
 8004e94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e98:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e9c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ea0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ea4:	e841 2300 	strex	r3, r2, [r1]
 8004ea8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1e1      	bne.n	8004e74 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3314      	adds	r3, #20
 8004eb6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eba:	e853 3f00 	ldrex	r3, [r3]
 8004ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	3314      	adds	r3, #20
 8004ed0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ed4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ed6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004eda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ee2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e3      	bne.n	8004eb0 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	330c      	adds	r3, #12
 8004efc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f08:	f023 0310 	bic.w	r3, r3, #16
 8004f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f1c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e3      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fd f9f4 	bl	8002320 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8004f44:	b292      	uxth	r2, r2
 8004f46:	1a8a      	subs	r2, r1, r2
 8004f48:	b292      	uxth	r2, r2
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f50:	e09a      	b.n	8005088 <HAL_UART_IRQHandler+0x518>
 8004f52:	bf00      	nop
 8004f54:	080053db 	.word	0x080053db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 808c 	beq.w	800508c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 8087 	beq.w	800508c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	330c      	adds	r3, #12
 8004f9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004fa2:	647a      	str	r2, [r7, #68]	; 0x44
 8004fa4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004fa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e3      	bne.n	8004f7e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3314      	adds	r3, #20
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	623b      	str	r3, [r7, #32]
   return(result);
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	3314      	adds	r3, #20
 8004fd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004fda:	633a      	str	r2, [r7, #48]	; 0x30
 8004fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e3      	bne.n	8004fb6 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	330c      	adds	r3, #12
 8005002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	60fb      	str	r3, [r7, #12]
   return(result);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0310 	bic.w	r3, r3, #16
 8005012:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	330c      	adds	r3, #12
 800501c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005020:	61fa      	str	r2, [r7, #28]
 8005022:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	69b9      	ldr	r1, [r7, #24]
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	617b      	str	r3, [r7, #20]
   return(result);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e3      	bne.n	8004ffc <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005038:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800503c:	4611      	mov	r1, r2
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005042:	e023      	b.n	800508c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800504c:	2b00      	cmp	r3, #0
 800504e:	d009      	beq.n	8005064 <HAL_UART_IRQHandler+0x4f4>
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f9d1 	bl	8005404 <UART_Transmit_IT>
    return;
 8005062:	e014      	b.n	800508e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00e      	beq.n	800508e <HAL_UART_IRQHandler+0x51e>
 8005070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d008      	beq.n	800508e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fa11 	bl	80054a4 <UART_EndTransmit_IT>
    return;
 8005082:	e004      	b.n	800508e <HAL_UART_IRQHandler+0x51e>
    return;
 8005084:	bf00      	nop
 8005086:	e002      	b.n	800508e <HAL_UART_IRQHandler+0x51e>
      return;
 8005088:	bf00      	nop
 800508a:	e000      	b.n	800508e <HAL_UART_IRQHandler+0x51e>
      return;
 800508c:	bf00      	nop
  }
}
 800508e:	37e8      	adds	r7, #232	; 0xe8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a10      	ldr	r2, [pc, #64]	; (8005198 <UART_InitCallbacksToDefault+0x4c>)
 8005158:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a0f      	ldr	r2, [pc, #60]	; (800519c <UART_InitCallbacksToDefault+0x50>)
 800515e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a0f      	ldr	r2, [pc, #60]	; (80051a0 <UART_InitCallbacksToDefault+0x54>)
 8005164:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a0e      	ldr	r2, [pc, #56]	; (80051a4 <UART_InitCallbacksToDefault+0x58>)
 800516a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0e      	ldr	r2, [pc, #56]	; (80051a8 <UART_InitCallbacksToDefault+0x5c>)
 8005170:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a0d      	ldr	r2, [pc, #52]	; (80051ac <UART_InitCallbacksToDefault+0x60>)
 8005176:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a0d      	ldr	r2, [pc, #52]	; (80051b0 <UART_InitCallbacksToDefault+0x64>)
 800517c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a0c      	ldr	r2, [pc, #48]	; (80051b4 <UART_InitCallbacksToDefault+0x68>)
 8005182:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a0c      	ldr	r2, [pc, #48]	; (80051b8 <UART_InitCallbacksToDefault+0x6c>)
 8005188:	669a      	str	r2, [r3, #104]	; 0x68

}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	080050a9 	.word	0x080050a9
 800519c:	08005095 	.word	0x08005095
 80051a0:	080050d1 	.word	0x080050d1
 80051a4:	080050bd 	.word	0x080050bd
 80051a8:	080050e5 	.word	0x080050e5
 80051ac:	080050f9 	.word	0x080050f9
 80051b0:	0800510d 	.word	0x0800510d
 80051b4:	08005121 	.word	0x08005121
 80051b8:	08005135 	.word	0x08005135

080051bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b090      	sub	sp, #64	; 0x40
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051cc:	e050      	b.n	8005270 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d04c      	beq.n	8005270 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <UART_WaitOnFlagUntilTimeout+0x30>
 80051dc:	f7fc ffb2 	bl	8002144 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d241      	bcs.n	8005270 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	e853 3f00 	ldrex	r3, [r3]
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005202:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800520c:	637a      	str	r2, [r7, #52]	; 0x34
 800520e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005214:	e841 2300 	strex	r3, r2, [r1]
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1e5      	bne.n	80051ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3314      	adds	r3, #20
 8005226:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	e853 3f00 	ldrex	r3, [r3]
 800522e:	613b      	str	r3, [r7, #16]
   return(result);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f023 0301 	bic.w	r3, r3, #1
 8005236:	63bb      	str	r3, [r7, #56]	; 0x38
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	3314      	adds	r3, #20
 800523e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005240:	623a      	str	r2, [r7, #32]
 8005242:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005244:	69f9      	ldr	r1, [r7, #28]
 8005246:	6a3a      	ldr	r2, [r7, #32]
 8005248:	e841 2300 	strex	r3, r2, [r1]
 800524c:	61bb      	str	r3, [r7, #24]
   return(result);
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e5      	bne.n	8005220 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e00f      	b.n	8005290 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4013      	ands	r3, r2
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	429a      	cmp	r2, r3
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	461a      	mov	r2, r3
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	429a      	cmp	r2, r3
 800528c:	d09f      	beq.n	80051ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3740      	adds	r7, #64	; 0x40
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	4613      	mov	r3, r2
 80052a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	88fa      	ldrh	r2, [r7, #6]
 80052b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	88fa      	ldrh	r2, [r7, #6]
 80052b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2222      	movs	r2, #34	; 0x22
 80052c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f042 0220 	orr.w	r2, r2, #32
 8005304:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005314:	b480      	push	{r7}
 8005316:	b095      	sub	sp, #84	; 0x54
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	330c      	adds	r3, #12
 8005322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005326:	e853 3f00 	ldrex	r3, [r3]
 800532a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800533c:	643a      	str	r2, [r7, #64]	; 0x40
 800533e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005344:	e841 2300 	strex	r3, r2, [r1]
 8005348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1e5      	bne.n	800531c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	3314      	adds	r3, #20
 8005356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	e853 3f00 	ldrex	r3, [r3]
 800535e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f023 0301 	bic.w	r3, r3, #1
 8005366:	64bb      	str	r3, [r7, #72]	; 0x48
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3314      	adds	r3, #20
 800536e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005370:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005378:	e841 2300 	strex	r3, r2, [r1]
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1e5      	bne.n	8005350 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	2b01      	cmp	r3, #1
 800538a:	d119      	bne.n	80053c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	60bb      	str	r3, [r7, #8]
   return(result);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f023 0310 	bic.w	r3, r3, #16
 80053a2:	647b      	str	r3, [r7, #68]	; 0x44
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ac:	61ba      	str	r2, [r7, #24]
 80053ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6979      	ldr	r1, [r7, #20]
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e5      	bne.n	800538c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053ce:	bf00      	nop
 80053d0:	3754      	adds	r7, #84	; 0x54
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b21      	cmp	r3, #33	; 0x21
 8005416:	d13e      	bne.n	8005496 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005420:	d114      	bne.n	800544c <UART_Transmit_IT+0x48>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d110      	bne.n	800544c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800543e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	621a      	str	r2, [r3, #32]
 800544a:	e008      	b.n	800545e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6a1b      	ldr	r3, [r3, #32]
 8005450:	1c59      	adds	r1, r3, #1
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6211      	str	r1, [r2, #32]
 8005456:	781a      	ldrb	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29b      	uxth	r3, r3
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4619      	mov	r1, r3
 800546c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10f      	bne.n	8005492 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005480:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005490:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005492:	2300      	movs	r3, #0
 8005494:	e000      	b.n	8005498 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005496:	2302      	movs	r3, #2
  }
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b08c      	sub	sp, #48	; 0x30
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b22      	cmp	r3, #34	; 0x22
 80054e8:	f040 80ad 	bne.w	8005646 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f4:	d117      	bne.n	8005526 <UART_Receive_IT+0x50>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d113      	bne.n	8005526 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005514:	b29a      	uxth	r2, r3
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	1c9a      	adds	r2, r3, #2
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	629a      	str	r2, [r3, #40]	; 0x28
 8005524:	e026      	b.n	8005574 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005538:	d007      	beq.n	800554a <UART_Receive_IT+0x74>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <UART_Receive_IT+0x82>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	b2da      	uxtb	r2, r3
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	e008      	b.n	800556a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005564:	b2da      	uxtb	r2, r3
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005578:	b29b      	uxth	r3, r3
 800557a:	3b01      	subs	r3, #1
 800557c:	b29b      	uxth	r3, r3
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	4619      	mov	r1, r3
 8005582:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005584:	2b00      	cmp	r3, #0
 8005586:	d15c      	bne.n	8005642 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0220 	bic.w	r2, r2, #32
 8005596:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0201 	bic.w	r2, r2, #1
 80055b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d136      	bne.n	8005636 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	330c      	adds	r3, #12
 80055d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	613b      	str	r3, [r7, #16]
   return(result);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f023 0310 	bic.w	r3, r3, #16
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ee:	623a      	str	r2, [r7, #32]
 80055f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	69f9      	ldr	r1, [r7, #28]
 80055f4:	6a3a      	ldr	r2, [r7, #32]
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e5      	bne.n	80055ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	2b10      	cmp	r3, #16
 800560e:	d10a      	bne.n	8005626 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800562e:	4611      	mov	r1, r2
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	4798      	blx	r3
 8005634:	e003      	b.n	800563e <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e002      	b.n	8005648 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	e000      	b.n	8005648 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 8005646:	2302      	movs	r3, #2
  }
}
 8005648:	4618      	mov	r0, r3
 800564a:	3730      	adds	r7, #48	; 0x30
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005654:	b0c0      	sub	sp, #256	; 0x100
 8005656:	af00      	add	r7, sp, #0
 8005658:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	68d9      	ldr	r1, [r3, #12]
 800566e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	ea40 0301 	orr.w	r3, r0, r1
 8005678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	431a      	orrs	r2, r3
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	431a      	orrs	r2, r3
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056a8:	f021 010c 	bic.w	r1, r1, #12
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056b6:	430b      	orrs	r3, r1
 80056b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ca:	6999      	ldr	r1, [r3, #24]
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	ea40 0301 	orr.w	r3, r0, r1
 80056d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	4b8f      	ldr	r3, [pc, #572]	; (800591c <UART_SetConfig+0x2cc>)
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d005      	beq.n	80056f0 <UART_SetConfig+0xa0>
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b8d      	ldr	r3, [pc, #564]	; (8005920 <UART_SetConfig+0x2d0>)
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d104      	bne.n	80056fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056f0:	f7fd fcfc 	bl	80030ec <HAL_RCC_GetPCLK2Freq>
 80056f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056f8:	e003      	b.n	8005702 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056fa:	f7fd fce3 	bl	80030c4 <HAL_RCC_GetPCLK1Freq>
 80056fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800570c:	f040 810c 	bne.w	8005928 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005714:	2200      	movs	r2, #0
 8005716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800571a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800571e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005722:	4622      	mov	r2, r4
 8005724:	462b      	mov	r3, r5
 8005726:	1891      	adds	r1, r2, r2
 8005728:	65b9      	str	r1, [r7, #88]	; 0x58
 800572a:	415b      	adcs	r3, r3
 800572c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800572e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005732:	4621      	mov	r1, r4
 8005734:	eb12 0801 	adds.w	r8, r2, r1
 8005738:	4629      	mov	r1, r5
 800573a:	eb43 0901 	adc.w	r9, r3, r1
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800574a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800574e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005752:	4690      	mov	r8, r2
 8005754:	4699      	mov	r9, r3
 8005756:	4623      	mov	r3, r4
 8005758:	eb18 0303 	adds.w	r3, r8, r3
 800575c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005760:	462b      	mov	r3, r5
 8005762:	eb49 0303 	adc.w	r3, r9, r3
 8005766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005776:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800577a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800577e:	460b      	mov	r3, r1
 8005780:	18db      	adds	r3, r3, r3
 8005782:	653b      	str	r3, [r7, #80]	; 0x50
 8005784:	4613      	mov	r3, r2
 8005786:	eb42 0303 	adc.w	r3, r2, r3
 800578a:	657b      	str	r3, [r7, #84]	; 0x54
 800578c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005790:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005794:	f7fb fa78 	bl	8000c88 <__aeabi_uldivmod>
 8005798:	4602      	mov	r2, r0
 800579a:	460b      	mov	r3, r1
 800579c:	4b61      	ldr	r3, [pc, #388]	; (8005924 <UART_SetConfig+0x2d4>)
 800579e:	fba3 2302 	umull	r2, r3, r3, r2
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	011c      	lsls	r4, r3, #4
 80057a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057b8:	4642      	mov	r2, r8
 80057ba:	464b      	mov	r3, r9
 80057bc:	1891      	adds	r1, r2, r2
 80057be:	64b9      	str	r1, [r7, #72]	; 0x48
 80057c0:	415b      	adcs	r3, r3
 80057c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057c8:	4641      	mov	r1, r8
 80057ca:	eb12 0a01 	adds.w	sl, r2, r1
 80057ce:	4649      	mov	r1, r9
 80057d0:	eb43 0b01 	adc.w	fp, r3, r1
 80057d4:	f04f 0200 	mov.w	r2, #0
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057e8:	4692      	mov	sl, r2
 80057ea:	469b      	mov	fp, r3
 80057ec:	4643      	mov	r3, r8
 80057ee:	eb1a 0303 	adds.w	r3, sl, r3
 80057f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057f6:	464b      	mov	r3, r9
 80057f8:	eb4b 0303 	adc.w	r3, fp, r3
 80057fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800580c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005810:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005814:	460b      	mov	r3, r1
 8005816:	18db      	adds	r3, r3, r3
 8005818:	643b      	str	r3, [r7, #64]	; 0x40
 800581a:	4613      	mov	r3, r2
 800581c:	eb42 0303 	adc.w	r3, r2, r3
 8005820:	647b      	str	r3, [r7, #68]	; 0x44
 8005822:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005826:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800582a:	f7fb fa2d 	bl	8000c88 <__aeabi_uldivmod>
 800582e:	4602      	mov	r2, r0
 8005830:	460b      	mov	r3, r1
 8005832:	4611      	mov	r1, r2
 8005834:	4b3b      	ldr	r3, [pc, #236]	; (8005924 <UART_SetConfig+0x2d4>)
 8005836:	fba3 2301 	umull	r2, r3, r3, r1
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	2264      	movs	r2, #100	; 0x64
 800583e:	fb02 f303 	mul.w	r3, r2, r3
 8005842:	1acb      	subs	r3, r1, r3
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800584a:	4b36      	ldr	r3, [pc, #216]	; (8005924 <UART_SetConfig+0x2d4>)
 800584c:	fba3 2302 	umull	r2, r3, r3, r2
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005858:	441c      	add	r4, r3
 800585a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800585e:	2200      	movs	r2, #0
 8005860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005864:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005868:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	1891      	adds	r1, r2, r2
 8005872:	63b9      	str	r1, [r7, #56]	; 0x38
 8005874:	415b      	adcs	r3, r3
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800587c:	4641      	mov	r1, r8
 800587e:	1851      	adds	r1, r2, r1
 8005880:	6339      	str	r1, [r7, #48]	; 0x30
 8005882:	4649      	mov	r1, r9
 8005884:	414b      	adcs	r3, r1
 8005886:	637b      	str	r3, [r7, #52]	; 0x34
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005894:	4659      	mov	r1, fp
 8005896:	00cb      	lsls	r3, r1, #3
 8005898:	4651      	mov	r1, sl
 800589a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800589e:	4651      	mov	r1, sl
 80058a0:	00ca      	lsls	r2, r1, #3
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	4603      	mov	r3, r0
 80058a8:	4642      	mov	r2, r8
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058b0:	464b      	mov	r3, r9
 80058b2:	460a      	mov	r2, r1
 80058b4:	eb42 0303 	adc.w	r3, r2, r3
 80058b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058d0:	460b      	mov	r3, r1
 80058d2:	18db      	adds	r3, r3, r3
 80058d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d6:	4613      	mov	r3, r2
 80058d8:	eb42 0303 	adc.w	r3, r2, r3
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058e6:	f7fb f9cf 	bl	8000c88 <__aeabi_uldivmod>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <UART_SetConfig+0x2d4>)
 80058f0:	fba3 1302 	umull	r1, r3, r3, r2
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	2164      	movs	r1, #100	; 0x64
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	3332      	adds	r3, #50	; 0x32
 8005902:	4a08      	ldr	r2, [pc, #32]	; (8005924 <UART_SetConfig+0x2d4>)
 8005904:	fba2 2303 	umull	r2, r3, r2, r3
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	f003 0207 	and.w	r2, r3, #7
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4422      	add	r2, r4
 8005916:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005918:	e105      	b.n	8005b26 <UART_SetConfig+0x4d6>
 800591a:	bf00      	nop
 800591c:	40011000 	.word	0x40011000
 8005920:	40011400 	.word	0x40011400
 8005924:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800592c:	2200      	movs	r2, #0
 800592e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005932:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005936:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800593a:	4642      	mov	r2, r8
 800593c:	464b      	mov	r3, r9
 800593e:	1891      	adds	r1, r2, r2
 8005940:	6239      	str	r1, [r7, #32]
 8005942:	415b      	adcs	r3, r3
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
 8005946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800594a:	4641      	mov	r1, r8
 800594c:	1854      	adds	r4, r2, r1
 800594e:	4649      	mov	r1, r9
 8005950:	eb43 0501 	adc.w	r5, r3, r1
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	f04f 0300 	mov.w	r3, #0
 800595c:	00eb      	lsls	r3, r5, #3
 800595e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005962:	00e2      	lsls	r2, r4, #3
 8005964:	4614      	mov	r4, r2
 8005966:	461d      	mov	r5, r3
 8005968:	4643      	mov	r3, r8
 800596a:	18e3      	adds	r3, r4, r3
 800596c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005970:	464b      	mov	r3, r9
 8005972:	eb45 0303 	adc.w	r3, r5, r3
 8005976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005986:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005996:	4629      	mov	r1, r5
 8005998:	008b      	lsls	r3, r1, #2
 800599a:	4621      	mov	r1, r4
 800599c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059a0:	4621      	mov	r1, r4
 80059a2:	008a      	lsls	r2, r1, #2
 80059a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059a8:	f7fb f96e 	bl	8000c88 <__aeabi_uldivmod>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4b60      	ldr	r3, [pc, #384]	; (8005b34 <UART_SetConfig+0x4e4>)
 80059b2:	fba3 2302 	umull	r2, r3, r3, r2
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	011c      	lsls	r4, r3, #4
 80059ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059be:	2200      	movs	r2, #0
 80059c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	1891      	adds	r1, r2, r2
 80059d2:	61b9      	str	r1, [r7, #24]
 80059d4:	415b      	adcs	r3, r3
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059dc:	4641      	mov	r1, r8
 80059de:	1851      	adds	r1, r2, r1
 80059e0:	6139      	str	r1, [r7, #16]
 80059e2:	4649      	mov	r1, r9
 80059e4:	414b      	adcs	r3, r1
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059f4:	4659      	mov	r1, fp
 80059f6:	00cb      	lsls	r3, r1, #3
 80059f8:	4651      	mov	r1, sl
 80059fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059fe:	4651      	mov	r1, sl
 8005a00:	00ca      	lsls	r2, r1, #3
 8005a02:	4610      	mov	r0, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	4603      	mov	r3, r0
 8005a08:	4642      	mov	r2, r8
 8005a0a:	189b      	adds	r3, r3, r2
 8005a0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a10:	464b      	mov	r3, r9
 8005a12:	460a      	mov	r2, r1
 8005a14:	eb42 0303 	adc.w	r3, r2, r3
 8005a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a34:	4649      	mov	r1, r9
 8005a36:	008b      	lsls	r3, r1, #2
 8005a38:	4641      	mov	r1, r8
 8005a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a3e:	4641      	mov	r1, r8
 8005a40:	008a      	lsls	r2, r1, #2
 8005a42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a46:	f7fb f91f 	bl	8000c88 <__aeabi_uldivmod>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4b39      	ldr	r3, [pc, #228]	; (8005b34 <UART_SetConfig+0x4e4>)
 8005a50:	fba3 1302 	umull	r1, r3, r3, r2
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	2164      	movs	r1, #100	; 0x64
 8005a58:	fb01 f303 	mul.w	r3, r1, r3
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	3332      	adds	r3, #50	; 0x32
 8005a62:	4a34      	ldr	r2, [pc, #208]	; (8005b34 <UART_SetConfig+0x4e4>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a6e:	441c      	add	r4, r3
 8005a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a74:	2200      	movs	r2, #0
 8005a76:	673b      	str	r3, [r7, #112]	; 0x70
 8005a78:	677a      	str	r2, [r7, #116]	; 0x74
 8005a7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a7e:	4642      	mov	r2, r8
 8005a80:	464b      	mov	r3, r9
 8005a82:	1891      	adds	r1, r2, r2
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	415b      	adcs	r3, r3
 8005a88:	60fb      	str	r3, [r7, #12]
 8005a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a8e:	4641      	mov	r1, r8
 8005a90:	1851      	adds	r1, r2, r1
 8005a92:	6039      	str	r1, [r7, #0]
 8005a94:	4649      	mov	r1, r9
 8005a96:	414b      	adcs	r3, r1
 8005a98:	607b      	str	r3, [r7, #4]
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005aa6:	4659      	mov	r1, fp
 8005aa8:	00cb      	lsls	r3, r1, #3
 8005aaa:	4651      	mov	r1, sl
 8005aac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ab0:	4651      	mov	r1, sl
 8005ab2:	00ca      	lsls	r2, r1, #3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	4603      	mov	r3, r0
 8005aba:	4642      	mov	r2, r8
 8005abc:	189b      	adds	r3, r3, r2
 8005abe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	460a      	mov	r2, r1
 8005ac4:	eb42 0303 	adc.w	r3, r2, r3
 8005ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ad4:	667a      	str	r2, [r7, #100]	; 0x64
 8005ad6:	f04f 0200 	mov.w	r2, #0
 8005ada:	f04f 0300 	mov.w	r3, #0
 8005ade:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	008b      	lsls	r3, r1, #2
 8005ae6:	4641      	mov	r1, r8
 8005ae8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aec:	4641      	mov	r1, r8
 8005aee:	008a      	lsls	r2, r1, #2
 8005af0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005af4:	f7fb f8c8 	bl	8000c88 <__aeabi_uldivmod>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <UART_SetConfig+0x4e4>)
 8005afe:	fba3 1302 	umull	r1, r3, r3, r2
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	2164      	movs	r1, #100	; 0x64
 8005b06:	fb01 f303 	mul.w	r3, r1, r3
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	3332      	adds	r3, #50	; 0x32
 8005b10:	4a08      	ldr	r2, [pc, #32]	; (8005b34 <UART_SetConfig+0x4e4>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	f003 020f 	and.w	r2, r3, #15
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4422      	add	r2, r4
 8005b24:	609a      	str	r2, [r3, #8]
}
 8005b26:	bf00      	nop
 8005b28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b32:	bf00      	nop
 8005b34:	51eb851f 	.word	0x51eb851f

08005b38 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b4a:	2b84      	cmp	r3, #132	; 0x84
 8005b4c:	d005      	beq.n	8005b5a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005b4e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	3303      	adds	r3, #3
 8005b58:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b6e:	f3ef 8305 	mrs	r3, IPSR
 8005b72:	607b      	str	r3, [r7, #4]
  return(result);
 8005b74:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	bf14      	ite	ne
 8005b7a:	2301      	movne	r3, #1
 8005b7c:	2300      	moveq	r3, #0
 8005b7e:	b2db      	uxtb	r3, r3
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005b90:	f001 fb7c 	bl	800728c <vTaskStartScheduler>
  
  return osOK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005b9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b9c:	b089      	sub	sp, #36	; 0x24
 8005b9e:	af04      	add	r7, sp, #16
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d020      	beq.n	8005bee <osThreadCreate+0x54>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d01c      	beq.n	8005bee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685c      	ldr	r4, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681d      	ldr	r5, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691e      	ldr	r6, [r3, #16]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff ffb6 	bl	8005b38 <makeFreeRtosPriority>
 8005bcc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bd6:	9202      	str	r2, [sp, #8]
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	9100      	str	r1, [sp, #0]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	4632      	mov	r2, r6
 8005be0:	4629      	mov	r1, r5
 8005be2:	4620      	mov	r0, r4
 8005be4:	f001 f974 	bl	8006ed0 <xTaskCreateStatic>
 8005be8:	4603      	mov	r3, r0
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e01c      	b.n	8005c28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685c      	ldr	r4, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bfa:	b29e      	uxth	r6, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff ff98 	bl	8005b38 <makeFreeRtosPriority>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	f107 030c 	add.w	r3, r7, #12
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	9200      	str	r2, [sp, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	4632      	mov	r2, r6
 8005c16:	4629      	mov	r1, r5
 8005c18:	4620      	mov	r0, r4
 8005c1a:	f001 f9b6 	bl	8006f8a <xTaskCreate>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d001      	beq.n	8005c28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e000      	b.n	8005c2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005c28:	68fb      	ldr	r3, [r7, #12]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <osDelay+0x16>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	e000      	b.n	8005c4a <osDelay+0x18>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 faea 	bl	8007224 <vTaskDelay>
  
  return osOK;
 8005c50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b086      	sub	sp, #24
 8005c5e:	af02      	add	r7, sp, #8
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00f      	beq.n	8005c8c <osSemaphoreCreate+0x32>
    if (count == 1) {
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d10a      	bne.n	8005c88 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2203      	movs	r2, #3
 8005c78:	9200      	str	r2, [sp, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	2001      	movs	r0, #1
 8005c80:	f000 fa9a 	bl	80061b8 <xQueueGenericCreateStatic>
 8005c84:	4603      	mov	r3, r0
 8005c86:	e016      	b.n	8005cb6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	e014      	b.n	8005cb6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d110      	bne.n	8005cb4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005c92:	2203      	movs	r2, #3
 8005c94:	2100      	movs	r1, #0
 8005c96:	2001      	movs	r0, #1
 8005c98:	f000 fb06 	bl	80062a8 <xQueueGenericCreate>
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d005      	beq.n	8005cb0 <osSemaphoreCreate+0x56>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2100      	movs	r1, #0
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 fb56 	bl	800635c <xQueueGenericSend>
      return sema;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	e000      	b.n	8005cb6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005cb4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005cd4:	2380      	movs	r3, #128	; 0x80
 8005cd6:	e03a      	b.n	8005d4e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce2:	d103      	bne.n	8005cec <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	e009      	b.n	8005d00 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d006      	beq.n	8005d00 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <osSemaphoreWait+0x40>
      ticks = 1;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005d00:	f7ff ff32 	bl	8005b68 <inHandlerMode>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d017      	beq.n	8005d3a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005d0a:	f107 0308 	add.w	r3, r7, #8
 8005d0e:	461a      	mov	r2, r3
 8005d10:	2100      	movs	r1, #0
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 ff34 	bl	8006b80 <xQueueReceiveFromISR>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d001      	beq.n	8005d22 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005d1e:	23ff      	movs	r3, #255	; 0xff
 8005d20:	e015      	b.n	8005d4e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d011      	beq.n	8005d4c <osSemaphoreWait+0x8c>
 8005d28:	4b0b      	ldr	r3, [pc, #44]	; (8005d58 <osSemaphoreWait+0x98>)
 8005d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	e008      	b.n	8005d4c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005d3a:	68f9      	ldr	r1, [r7, #12]
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fe13 	bl	8006968 <xQueueSemaphoreTake>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d001      	beq.n	8005d4c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005d48:	23ff      	movs	r3, #255	; 0xff
 8005d4a:	e000      	b.n	8005d4e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005d6c:	f7ff fefc 	bl	8005b68 <inHandlerMode>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d016      	beq.n	8005da4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005d76:	f107 0308 	add.w	r3, r7, #8
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 fc86 	bl	800668e <xQueueGiveFromISR>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d001      	beq.n	8005d8c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005d88:	23ff      	movs	r3, #255	; 0xff
 8005d8a:	e017      	b.n	8005dbc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d013      	beq.n	8005dba <osSemaphoreRelease+0x5e>
 8005d92:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <osSemaphoreRelease+0x68>)
 8005d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	e00a      	b.n	8005dba <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005da4:	2300      	movs	r3, #0
 8005da6:	2200      	movs	r2, #0
 8005da8:	2100      	movs	r1, #0
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fad6 	bl	800635c <xQueueGenericSend>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d001      	beq.n	8005dba <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005db6:	23ff      	movs	r3, #255	; 0xff
 8005db8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005dba:	68fb      	ldr	r3, [r7, #12]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	e000ed04 	.word	0xe000ed04

08005dc8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d011      	beq.n	8005dfe <osMessageCreate+0x36>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00d      	beq.n	8005dfe <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6859      	ldr	r1, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	2400      	movs	r4, #0
 8005df4:	9400      	str	r4, [sp, #0]
 8005df6:	f000 f9df 	bl	80061b8 <xQueueGenericCreateStatic>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	e008      	b.n	8005e10 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6818      	ldr	r0, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f000 fa4d 	bl	80062a8 <xQueueGenericCreate>
 8005e0e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd90      	pop	{r4, r7, pc}

08005e18 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <osMessagePut+0x1e>
    ticks = 1;
 8005e32:	2301      	movs	r3, #1
 8005e34:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005e36:	f7ff fe97 	bl	8005b68 <inHandlerMode>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d018      	beq.n	8005e72 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005e40:	f107 0210 	add.w	r2, r7, #16
 8005e44:	f107 0108 	add.w	r1, r7, #8
 8005e48:	2300      	movs	r3, #0
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fb84 	bl	8006558 <xQueueGenericSendFromISR>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d001      	beq.n	8005e5a <osMessagePut+0x42>
      return osErrorOS;
 8005e56:	23ff      	movs	r3, #255	; 0xff
 8005e58:	e018      	b.n	8005e8c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d014      	beq.n	8005e8a <osMessagePut+0x72>
 8005e60:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <osMessagePut+0x7c>)
 8005e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	e00b      	b.n	8005e8a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005e72:	f107 0108 	add.w	r1, r7, #8
 8005e76:	2300      	movs	r3, #0
 8005e78:	697a      	ldr	r2, [r7, #20]
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 fa6e 	bl	800635c <xQueueGenericSend>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d001      	beq.n	8005e8a <osMessagePut+0x72>
      return osErrorOS;
 8005e86:	23ff      	movs	r3, #255	; 0xff
 8005e88:	e000      	b.n	8005e8c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005e8a:	2300      	movs	r3, #0
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	e000ed04 	.word	0xe000ed04

08005e98 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b08b      	sub	sp, #44	; 0x2c
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10a      	bne.n	8005ec8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005eb2:	2380      	movs	r3, #128	; 0x80
 8005eb4:	617b      	str	r3, [r7, #20]
    return event;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	461c      	mov	r4, r3
 8005eba:	f107 0314 	add.w	r3, r7, #20
 8005ebe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ec2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ec6:	e054      	b.n	8005f72 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed6:	d103      	bne.n	8005ee0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ede:	e009      	b.n	8005ef4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d006      	beq.n	8005ef4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <osMessageGet+0x5c>
      ticks = 1;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005ef4:	f7ff fe38 	bl	8005b68 <inHandlerMode>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01c      	beq.n	8005f38 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005efe:	f107 0220 	add.w	r2, r7, #32
 8005f02:	f107 0314 	add.w	r3, r7, #20
 8005f06:	3304      	adds	r3, #4
 8005f08:	4619      	mov	r1, r3
 8005f0a:	68b8      	ldr	r0, [r7, #8]
 8005f0c:	f000 fe38 	bl	8006b80 <xQueueReceiveFromISR>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d102      	bne.n	8005f1c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005f16:	2310      	movs	r3, #16
 8005f18:	617b      	str	r3, [r7, #20]
 8005f1a:	e001      	b.n	8005f20 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005f20:	6a3b      	ldr	r3, [r7, #32]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d01d      	beq.n	8005f62 <osMessageGet+0xca>
 8005f26:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <osMessageGet+0xe4>)
 8005f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	f3bf 8f6f 	isb	sy
 8005f36:	e014      	b.n	8005f62 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005f38:	f107 0314 	add.w	r3, r7, #20
 8005f3c:	3304      	adds	r3, #4
 8005f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f40:	4619      	mov	r1, r3
 8005f42:	68b8      	ldr	r0, [r7, #8]
 8005f44:	f000 fc30 	bl	80067a8 <xQueueReceive>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d102      	bne.n	8005f54 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005f4e:	2310      	movs	r3, #16
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	e006      	b.n	8005f62 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <osMessageGet+0xc6>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e000      	b.n	8005f60 <osMessageGet+0xc8>
 8005f5e:	2340      	movs	r3, #64	; 0x40
 8005f60:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	461c      	mov	r4, r3
 8005f66:	f107 0314 	add.w	r3, r7, #20
 8005f6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005f72:	68f8      	ldr	r0, [r7, #12]
 8005f74:	372c      	adds	r7, #44	; 0x2c
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd90      	pop	{r4, r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f103 0208 	add.w	r2, r3, #8
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f04f 32ff 	mov.w	r2, #4294967295
 8005f98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f103 0208 	add.w	r2, r3, #8
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f103 0208 	add.w	r2, r3, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
 8005fe2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689a      	ldr	r2, [r3, #8]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	601a      	str	r2, [r3, #0]
}
 8006016:	bf00      	nop
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d103      	bne.n	8006042 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	e00c      	b.n	800605c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3308      	adds	r3, #8
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	e002      	b.n	8006050 <vListInsert+0x2e>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	429a      	cmp	r2, r3
 800605a:	d2f6      	bcs.n	800604a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685a      	ldr	r2, [r3, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]
}
 8006088:	bf00      	nop
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6892      	ldr	r2, [r2, #8]
 80060aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6852      	ldr	r2, [r2, #4]
 80060b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d103      	bne.n	80060c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	1e5a      	subs	r2, r3, #1
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006112:	f002 f81f 	bl	8008154 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006122:	fb01 f303 	mul.w	r3, r1, r3
 8006126:	441a      	add	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006142:	3b01      	subs	r3, #1
 8006144:	68f9      	ldr	r1, [r7, #12]
 8006146:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	441a      	add	r2, r3
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	22ff      	movs	r2, #255	; 0xff
 8006156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	22ff      	movs	r2, #255	; 0xff
 800615e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d114      	bne.n	8006192 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01a      	beq.n	80061a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	3310      	adds	r3, #16
 8006174:	4618      	mov	r0, r3
 8006176:	f001 fadb 	bl	8007730 <xTaskRemoveFromEventList>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d012      	beq.n	80061a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006180:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <xQueueGenericReset+0xcc>)
 8006182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	e009      	b.n	80061a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	3310      	adds	r3, #16
 8006196:	4618      	mov	r0, r3
 8006198:	f7ff fef2 	bl	8005f80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3324      	adds	r3, #36	; 0x24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff feed 	bl	8005f80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80061a6:	f002 f805 	bl	80081b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80061aa:	2301      	movs	r3, #1
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	e000ed04 	.word	0xe000ed04

080061b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08e      	sub	sp, #56	; 0x38
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
 80061c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d10a      	bne.n	80061e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80061cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80061de:	bf00      	nop
 80061e0:	e7fe      	b.n	80061e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10a      	bne.n	80061fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <xQueueGenericCreateStatic+0x52>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <xQueueGenericCreateStatic+0x56>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <xQueueGenericCreateStatic+0x58>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10a      	bne.n	800622a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	623b      	str	r3, [r7, #32]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <xQueueGenericCreateStatic+0x7e>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d101      	bne.n	800623a <xQueueGenericCreateStatic+0x82>
 8006236:	2301      	movs	r3, #1
 8006238:	e000      	b.n	800623c <xQueueGenericCreateStatic+0x84>
 800623a:	2300      	movs	r3, #0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10a      	bne.n	8006256 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	61fb      	str	r3, [r7, #28]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006256:	2348      	movs	r3, #72	; 0x48
 8006258:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b48      	cmp	r3, #72	; 0x48
 800625e:	d00a      	beq.n	8006276 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	61bb      	str	r3, [r7, #24]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006276:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00d      	beq.n	800629e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800628a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	4613      	mov	r3, r2
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f83f 	bl	800631c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800629e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3730      	adds	r7, #48	; 0x30
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	; 0x28
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80062bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c0:	f383 8811 	msr	BASEPRI, r3
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	f3bf 8f4f 	dsb	sy
 80062cc:	613b      	str	r3, [r7, #16]
}
 80062ce:	bf00      	nop
 80062d0:	e7fe      	b.n	80062d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
 80062da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	3348      	adds	r3, #72	; 0x48
 80062e0:	4618      	mov	r0, r3
 80062e2:	f002 f859 	bl	8008398 <pvPortMalloc>
 80062e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d011      	beq.n	8006312 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	3348      	adds	r3, #72	; 0x48
 80062f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006300:	79fa      	ldrb	r2, [r7, #7]
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	9300      	str	r3, [sp, #0]
 8006306:	4613      	mov	r3, r2
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f000 f805 	bl	800631c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006312:	69bb      	ldr	r3, [r7, #24]
	}
 8006314:	4618      	mov	r0, r3
 8006316:	3720      	adds	r7, #32
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
 8006328:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d103      	bne.n	8006338 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	e002      	b.n	800633e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800634a:	2101      	movs	r1, #1
 800634c:	69b8      	ldr	r0, [r7, #24]
 800634e:	f7ff fecb 	bl	80060e8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08e      	sub	sp, #56	; 0x38
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800636a:	2300      	movs	r3, #0
 800636c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <xQueueGenericSend+0x32>
	__asm volatile
 8006378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800638a:	bf00      	nop
 800638c:	e7fe      	b.n	800638c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d103      	bne.n	800639c <xQueueGenericSend+0x40>
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <xQueueGenericSend+0x44>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <xQueueGenericSend+0x46>
 80063a0:	2300      	movs	r3, #0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <xQueueGenericSend+0x60>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d103      	bne.n	80063ca <xQueueGenericSend+0x6e>
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <xQueueGenericSend+0x72>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <xQueueGenericSend+0x74>
 80063ce:	2300      	movs	r3, #0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10a      	bne.n	80063ea <xQueueGenericSend+0x8e>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	623b      	str	r3, [r7, #32]
}
 80063e6:	bf00      	nop
 80063e8:	e7fe      	b.n	80063e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063ea:	f001 fb61 	bl	8007ab0 <xTaskGetSchedulerState>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d102      	bne.n	80063fa <xQueueGenericSend+0x9e>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <xQueueGenericSend+0xa2>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <xQueueGenericSend+0xa4>
 80063fe:	2300      	movs	r3, #0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10a      	bne.n	800641a <xQueueGenericSend+0xbe>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	61fb      	str	r3, [r7, #28]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800641a:	f001 fe9b 	bl	8008154 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006426:	429a      	cmp	r2, r3
 8006428:	d302      	bcc.n	8006430 <xQueueGenericSend+0xd4>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b02      	cmp	r3, #2
 800642e:	d129      	bne.n	8006484 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	68b9      	ldr	r1, [r7, #8]
 8006434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006436:	f000 fc3b 	bl	8006cb0 <prvCopyDataToQueue>
 800643a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800643c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	d010      	beq.n	8006466 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	3324      	adds	r3, #36	; 0x24
 8006448:	4618      	mov	r0, r3
 800644a:	f001 f971 	bl	8007730 <xTaskRemoveFromEventList>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d013      	beq.n	800647c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006454:	4b3f      	ldr	r3, [pc, #252]	; (8006554 <xQueueGenericSend+0x1f8>)
 8006456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	e00a      	b.n	800647c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800646c:	4b39      	ldr	r3, [pc, #228]	; (8006554 <xQueueGenericSend+0x1f8>)
 800646e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006472:	601a      	str	r2, [r3, #0]
 8006474:	f3bf 8f4f 	dsb	sy
 8006478:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800647c:	f001 fe9a 	bl	80081b4 <vPortExitCritical>
				return pdPASS;
 8006480:	2301      	movs	r3, #1
 8006482:	e063      	b.n	800654c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800648a:	f001 fe93 	bl	80081b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800648e:	2300      	movs	r3, #0
 8006490:	e05c      	b.n	800654c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	2b00      	cmp	r3, #0
 8006496:	d106      	bne.n	80064a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006498:	f107 0314 	add.w	r3, r7, #20
 800649c:	4618      	mov	r0, r3
 800649e:	f001 f9a9 	bl	80077f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064a2:	2301      	movs	r3, #1
 80064a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064a6:	f001 fe85 	bl	80081b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064aa:	f000 ff59 	bl	8007360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064ae:	f001 fe51 	bl	8008154 <vPortEnterCritical>
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064b8:	b25b      	sxtb	r3, r3
 80064ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064be:	d103      	bne.n	80064c8 <xQueueGenericSend+0x16c>
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064ce:	b25b      	sxtb	r3, r3
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d4:	d103      	bne.n	80064de <xQueueGenericSend+0x182>
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064de:	f001 fe69 	bl	80081b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064e2:	1d3a      	adds	r2, r7, #4
 80064e4:	f107 0314 	add.w	r3, r7, #20
 80064e8:	4611      	mov	r1, r2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 f998 	bl	8007820 <xTaskCheckForTimeOut>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d124      	bne.n	8006540 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f8:	f000 fcd2 	bl	8006ea0 <prvIsQueueFull>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d018      	beq.n	8006534 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	3310      	adds	r3, #16
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4611      	mov	r1, r2
 800650a:	4618      	mov	r0, r3
 800650c:	f001 f8ec 	bl	80076e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006512:	f000 fc5d 	bl	8006dd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006516:	f000 ff31 	bl	800737c <xTaskResumeAll>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	f47f af7c 	bne.w	800641a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <xQueueGenericSend+0x1f8>)
 8006524:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	e772      	b.n	800641a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006536:	f000 fc4b 	bl	8006dd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800653a:	f000 ff1f 	bl	800737c <xTaskResumeAll>
 800653e:	e76c      	b.n	800641a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006542:	f000 fc45 	bl	8006dd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006546:	f000 ff19 	bl	800737c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800654a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800654c:	4618      	mov	r0, r3
 800654e:	3738      	adds	r7, #56	; 0x38
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	e000ed04 	.word	0xe000ed04

08006558 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b090      	sub	sp, #64	; 0x40
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	d10a      	bne.n	8006586 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d103      	bne.n	8006594 <xQueueGenericSendFromISR+0x3c>
 800658c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <xQueueGenericSendFromISR+0x40>
 8006594:	2301      	movs	r3, #1
 8006596:	e000      	b.n	800659a <xQueueGenericSendFromISR+0x42>
 8006598:	2300      	movs	r3, #0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065b0:	bf00      	nop
 80065b2:	e7fe      	b.n	80065b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d103      	bne.n	80065c2 <xQueueGenericSendFromISR+0x6a>
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <xQueueGenericSendFromISR+0x6e>
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <xQueueGenericSendFromISR+0x70>
 80065c6:	2300      	movs	r3, #0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	623b      	str	r3, [r7, #32]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065e2:	f001 fe99 	bl	8008318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065e6:	f3ef 8211 	mrs	r2, BASEPRI
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	61fa      	str	r2, [r7, #28]
 80065fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006600:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006604:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800660a:	429a      	cmp	r2, r3
 800660c:	d302      	bcc.n	8006614 <xQueueGenericSendFromISR+0xbc>
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d12f      	bne.n	8006674 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006616:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800661a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800662a:	f000 fb41 	bl	8006cb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800662e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006636:	d112      	bne.n	800665e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	d016      	beq.n	800666e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006642:	3324      	adds	r3, #36	; 0x24
 8006644:	4618      	mov	r0, r3
 8006646:	f001 f873 	bl	8007730 <xTaskRemoveFromEventList>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00e      	beq.n	800666e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e007      	b.n	800666e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800665e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006662:	3301      	adds	r3, #1
 8006664:	b2db      	uxtb	r3, r3
 8006666:	b25a      	sxtb	r2, r3
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800666e:	2301      	movs	r3, #1
 8006670:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006672:	e001      	b.n	8006678 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006674:	2300      	movs	r3, #0
 8006676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800667a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006682:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006686:	4618      	mov	r0, r3
 8006688:	3740      	adds	r7, #64	; 0x40
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800668e:	b580      	push	{r7, lr}
 8006690:	b08e      	sub	sp, #56	; 0x38
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10a      	bne.n	80066b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	623b      	str	r3, [r7, #32]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	61fb      	str	r3, [r7, #28]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d103      	bne.n	80066e6 <xQueueGiveFromISR+0x58>
 80066de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <xQueueGiveFromISR+0x5c>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <xQueueGiveFromISR+0x5e>
 80066ea:	2300      	movs	r3, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xQueueGiveFromISR+0x78>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	61bb      	str	r3, [r7, #24]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006706:	f001 fe07 	bl	8008318 <vPortValidateInterruptPriority>
	__asm volatile
 800670a:	f3ef 8211 	mrs	r2, BASEPRI
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	617a      	str	r2, [r7, #20]
 8006720:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006722:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006724:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800672a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800672c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006732:	429a      	cmp	r2, r3
 8006734:	d22b      	bcs.n	800678e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800673c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	1c5a      	adds	r2, r3, #1
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006748:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d112      	bne.n	8006778 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	2b00      	cmp	r3, #0
 8006758:	d016      	beq.n	8006788 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800675a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675c:	3324      	adds	r3, #36	; 0x24
 800675e:	4618      	mov	r0, r3
 8006760:	f000 ffe6 	bl	8007730 <xTaskRemoveFromEventList>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00e      	beq.n	8006788 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e007      	b.n	8006788 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006778:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800677c:	3301      	adds	r3, #1
 800677e:	b2db      	uxtb	r3, r3
 8006780:	b25a      	sxtb	r2, r3
 8006782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006788:	2301      	movs	r3, #1
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
 800678c:	e001      	b.n	8006792 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800678e:	2300      	movs	r3, #0
 8006790:	637b      	str	r3, [r7, #52]	; 0x34
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f383 8811 	msr	BASEPRI, r3
}
 800679c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800679e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3738      	adds	r7, #56	; 0x38
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08c      	sub	sp, #48	; 0x30
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067b4:	2300      	movs	r3, #0
 80067b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <xQueueReceive+0x30>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	623b      	str	r3, [r7, #32]
}
 80067d4:	bf00      	nop
 80067d6:	e7fe      	b.n	80067d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d103      	bne.n	80067e6 <xQueueReceive+0x3e>
 80067de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <xQueueReceive+0x42>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <xQueueReceive+0x44>
 80067ea:	2300      	movs	r3, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <xQueueReceive+0x5e>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	61fb      	str	r3, [r7, #28]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006806:	f001 f953 	bl	8007ab0 <xTaskGetSchedulerState>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d102      	bne.n	8006816 <xQueueReceive+0x6e>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <xQueueReceive+0x72>
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <xQueueReceive+0x74>
 800681a:	2300      	movs	r3, #0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <xQueueReceive+0x8e>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	61bb      	str	r3, [r7, #24]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006836:	f001 fc8d 	bl	8008154 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	2b00      	cmp	r3, #0
 8006844:	d01f      	beq.n	8006886 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006846:	68b9      	ldr	r1, [r7, #8]
 8006848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800684a:	f000 fa9b 	bl	8006d84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	1e5a      	subs	r2, r3, #1
 8006852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006854:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00f      	beq.n	800687e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	3310      	adds	r3, #16
 8006862:	4618      	mov	r0, r3
 8006864:	f000 ff64 	bl	8007730 <xTaskRemoveFromEventList>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800686e:	4b3d      	ldr	r3, [pc, #244]	; (8006964 <xQueueReceive+0x1bc>)
 8006870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	f3bf 8f4f 	dsb	sy
 800687a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800687e:	f001 fc99 	bl	80081b4 <vPortExitCritical>
				return pdPASS;
 8006882:	2301      	movs	r3, #1
 8006884:	e069      	b.n	800695a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d103      	bne.n	8006894 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800688c:	f001 fc92 	bl	80081b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006890:	2300      	movs	r3, #0
 8006892:	e062      	b.n	800695a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800689a:	f107 0310 	add.w	r3, r7, #16
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 ffa8 	bl	80077f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068a4:	2301      	movs	r3, #1
 80068a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068a8:	f001 fc84 	bl	80081b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068ac:	f000 fd58 	bl	8007360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068b0:	f001 fc50 	bl	8008154 <vPortEnterCritical>
 80068b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068ba:	b25b      	sxtb	r3, r3
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d103      	bne.n	80068ca <xQueueReceive+0x122>
 80068c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068d0:	b25b      	sxtb	r3, r3
 80068d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d6:	d103      	bne.n	80068e0 <xQueueReceive+0x138>
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068e0:	f001 fc68 	bl	80081b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068e4:	1d3a      	adds	r2, r7, #4
 80068e6:	f107 0310 	add.w	r3, r7, #16
 80068ea:	4611      	mov	r1, r2
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 ff97 	bl	8007820 <xTaskCheckForTimeOut>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d123      	bne.n	8006940 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068fa:	f000 fabb 	bl	8006e74 <prvIsQueueEmpty>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d017      	beq.n	8006934 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006906:	3324      	adds	r3, #36	; 0x24
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	4611      	mov	r1, r2
 800690c:	4618      	mov	r0, r3
 800690e:	f000 feeb 	bl	80076e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006914:	f000 fa5c 	bl	8006dd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006918:	f000 fd30 	bl	800737c <xTaskResumeAll>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d189      	bne.n	8006836 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006922:	4b10      	ldr	r3, [pc, #64]	; (8006964 <xQueueReceive+0x1bc>)
 8006924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	f3bf 8f6f 	isb	sy
 8006932:	e780      	b.n	8006836 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006936:	f000 fa4b 	bl	8006dd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800693a:	f000 fd1f 	bl	800737c <xTaskResumeAll>
 800693e:	e77a      	b.n	8006836 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006942:	f000 fa45 	bl	8006dd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006946:	f000 fd19 	bl	800737c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800694a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800694c:	f000 fa92 	bl	8006e74 <prvIsQueueEmpty>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	f43f af6f 	beq.w	8006836 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006958:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800695a:	4618      	mov	r0, r3
 800695c:	3730      	adds	r7, #48	; 0x30
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08e      	sub	sp, #56	; 0x38
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006972:	2300      	movs	r3, #0
 8006974:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800697a:	2300      	movs	r3, #0
 800697c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800697e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	623b      	str	r3, [r7, #32]
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800699a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	61fb      	str	r3, [r7, #28]
}
 80069b4:	bf00      	nop
 80069b6:	e7fe      	b.n	80069b6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069b8:	f001 f87a 	bl	8007ab0 <xTaskGetSchedulerState>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d102      	bne.n	80069c8 <xQueueSemaphoreTake+0x60>
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <xQueueSemaphoreTake+0x64>
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <xQueueSemaphoreTake+0x66>
 80069cc:	2300      	movs	r3, #0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	61bb      	str	r3, [r7, #24]
}
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069e8:	f001 fbb4 	bl	8008154 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80069f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d024      	beq.n	8006a42 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80069f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069fa:	1e5a      	subs	r2, r3, #1
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d104      	bne.n	8006a12 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a08:	f001 f9fa 	bl	8007e00 <pvTaskIncrementMutexHeldCount>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a10:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00f      	beq.n	8006a3a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1c:	3310      	adds	r3, #16
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fe86 	bl	8007730 <xTaskRemoveFromEventList>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d007      	beq.n	8006a3a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a2a:	4b54      	ldr	r3, [pc, #336]	; (8006b7c <xQueueSemaphoreTake+0x214>)
 8006a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a30:	601a      	str	r2, [r3, #0]
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a3a:	f001 fbbb 	bl	80081b4 <vPortExitCritical>
				return pdPASS;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e097      	b.n	8006b72 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d111      	bne.n	8006a6c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00a      	beq.n	8006a64 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	617b      	str	r3, [r7, #20]
}
 8006a60:	bf00      	nop
 8006a62:	e7fe      	b.n	8006a62 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a64:	f001 fba6 	bl	80081b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e082      	b.n	8006b72 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d106      	bne.n	8006a80 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a72:	f107 030c 	add.w	r3, r7, #12
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 febc 	bl	80077f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a80:	f001 fb98 	bl	80081b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a84:	f000 fc6c 	bl	8007360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a88:	f001 fb64 	bl	8008154 <vPortEnterCritical>
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a92:	b25b      	sxtb	r3, r3
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a98:	d103      	bne.n	8006aa2 <xQueueSemaphoreTake+0x13a>
 8006a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006aa8:	b25b      	sxtb	r3, r3
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aae:	d103      	bne.n	8006ab8 <xQueueSemaphoreTake+0x150>
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab8:	f001 fb7c 	bl	80081b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006abc:	463a      	mov	r2, r7
 8006abe:	f107 030c 	add.w	r3, r7, #12
 8006ac2:	4611      	mov	r1, r2
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 feab 	bl	8007820 <xTaskCheckForTimeOut>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d132      	bne.n	8006b36 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ad2:	f000 f9cf 	bl	8006e74 <prvIsQueueEmpty>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d026      	beq.n	8006b2a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d109      	bne.n	8006af8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006ae4:	f001 fb36 	bl	8008154 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 fffd 	bl	8007aec <xTaskPriorityInherit>
 8006af2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006af4:	f001 fb5e 	bl	80081b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afa:	3324      	adds	r3, #36	; 0x24
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	4611      	mov	r1, r2
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fdf1 	bl	80076e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b08:	f000 f962 	bl	8006dd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b0c:	f000 fc36 	bl	800737c <xTaskResumeAll>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f47f af68 	bne.w	80069e8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006b18:	4b18      	ldr	r3, [pc, #96]	; (8006b7c <xQueueSemaphoreTake+0x214>)
 8006b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	e75e      	b.n	80069e8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b2c:	f000 f950 	bl	8006dd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b30:	f000 fc24 	bl	800737c <xTaskResumeAll>
 8006b34:	e758      	b.n	80069e8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b38:	f000 f94a 	bl	8006dd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b3c:	f000 fc1e 	bl	800737c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b42:	f000 f997 	bl	8006e74 <prvIsQueueEmpty>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f43f af4d 	beq.w	80069e8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00d      	beq.n	8006b70 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006b54:	f001 fafe 	bl	8008154 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b5a:	f000 f891 	bl	8006c80 <prvGetDisinheritPriorityAfterTimeout>
 8006b5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 f8bc 	bl	8007ce4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b6c:	f001 fb22 	bl	80081b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3738      	adds	r7, #56	; 0x38
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	e000ed04 	.word	0xe000ed04

08006b80 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08e      	sub	sp, #56	; 0x38
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	623b      	str	r3, [r7, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d103      	bne.n	8006bba <xQueueReceiveFromISR+0x3a>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <xQueueReceiveFromISR+0x3e>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <xQueueReceiveFromISR+0x40>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10a      	bne.n	8006bda <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	61fb      	str	r3, [r7, #28]
}
 8006bd6:	bf00      	nop
 8006bd8:	e7fe      	b.n	8006bd8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006bda:	f001 fb9d 	bl	8008318 <vPortValidateInterruptPriority>
	__asm volatile
 8006bde:	f3ef 8211 	mrs	r2, BASEPRI
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	61ba      	str	r2, [r7, #24]
 8006bf4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006bf6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d02f      	beq.n	8006c66 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c10:	68b9      	ldr	r1, [r7, #8]
 8006c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c14:	f000 f8b6 	bl	8006d84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	1e5a      	subs	r2, r3, #1
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006c20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c28:	d112      	bne.n	8006c50 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d016      	beq.n	8006c60 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	3310      	adds	r3, #16
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 fd7a 	bl	8007730 <xTaskRemoveFromEventList>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00e      	beq.n	8006c60 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00b      	beq.n	8006c60 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	e007      	b.n	8006c60 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c54:	3301      	adds	r3, #1
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	b25a      	sxtb	r2, r3
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006c60:	2301      	movs	r3, #1
 8006c62:	637b      	str	r3, [r7, #52]	; 0x34
 8006c64:	e001      	b.n	8006c6a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f383 8811 	msr	BASEPRI, r3
}
 8006c74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3738      	adds	r7, #56	; 0x38
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d006      	beq.n	8006c9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f1c3 0307 	rsb	r3, r3, #7
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	e001      	b.n	8006ca2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
	}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10d      	bne.n	8006cea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d14d      	bne.n	8006d72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 ff7c 	bl	8007bd8 <xTaskPriorityDisinherit>
 8006ce0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	609a      	str	r2, [r3, #8]
 8006ce8:	e043      	b.n	8006d72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d119      	bne.n	8006d24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6858      	ldr	r0, [r3, #4]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	f001 fe5d 	bl	80089ba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d08:	441a      	add	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d32b      	bcc.n	8006d72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	605a      	str	r2, [r3, #4]
 8006d22:	e026      	b.n	8006d72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	68d8      	ldr	r0, [r3, #12]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	f001 fe43 	bl	80089ba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	68da      	ldr	r2, [r3, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	425b      	negs	r3, r3
 8006d3e:	441a      	add	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d207      	bcs.n	8006d60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	425b      	negs	r3, r3
 8006d5a:	441a      	add	r2, r3
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d105      	bne.n	8006d72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006d7a:	697b      	ldr	r3, [r7, #20]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d018      	beq.n	8006dc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	441a      	add	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d303      	bcc.n	8006db8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	68d9      	ldr	r1, [r3, #12]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6838      	ldr	r0, [r7, #0]
 8006dc4:	f001 fdf9 	bl	80089ba <memcpy>
	}
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006dd8:	f001 f9bc 	bl	8008154 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006de2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006de4:	e011      	b.n	8006e0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d012      	beq.n	8006e14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3324      	adds	r3, #36	; 0x24
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fc9c 	bl	8007730 <xTaskRemoveFromEventList>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006dfe:	f000 fd71 	bl	80078e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dce9      	bgt.n	8006de6 <prvUnlockQueue+0x16>
 8006e12:	e000      	b.n	8006e16 <prvUnlockQueue+0x46>
					break;
 8006e14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	22ff      	movs	r2, #255	; 0xff
 8006e1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006e1e:	f001 f9c9 	bl	80081b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e22:	f001 f997 	bl	8008154 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e2e:	e011      	b.n	8006e54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d012      	beq.n	8006e5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3310      	adds	r3, #16
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fc77 	bl	8007730 <xTaskRemoveFromEventList>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e48:	f000 fd4c 	bl	80078e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e4c:	7bbb      	ldrb	r3, [r7, #14]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	dce9      	bgt.n	8006e30 <prvUnlockQueue+0x60>
 8006e5c:	e000      	b.n	8006e60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	22ff      	movs	r2, #255	; 0xff
 8006e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e68:	f001 f9a4 	bl	80081b4 <vPortExitCritical>
}
 8006e6c:	bf00      	nop
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e7c:	f001 f96a 	bl	8008154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d102      	bne.n	8006e8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e001      	b.n	8006e92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e92:	f001 f98f 	bl	80081b4 <vPortExitCritical>

	return xReturn;
 8006e96:	68fb      	ldr	r3, [r7, #12]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ea8:	f001 f954 	bl	8008154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d102      	bne.n	8006ebe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	60fb      	str	r3, [r7, #12]
 8006ebc:	e001      	b.n	8006ec2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ec2:	f001 f977 	bl	80081b4 <vPortExitCritical>

	return xReturn;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08e      	sub	sp, #56	; 0x38
 8006ed4:	af04      	add	r7, sp, #16
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <xTaskCreateStatic+0x2a>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	623b      	str	r3, [r7, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	e7fe      	b.n	8006ef8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10a      	bne.n	8006f16 <xTaskCreateStatic+0x46>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	61fb      	str	r3, [r7, #28]
}
 8006f12:	bf00      	nop
 8006f14:	e7fe      	b.n	8006f14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006f16:	23b4      	movs	r3, #180	; 0xb4
 8006f18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2bb4      	cmp	r3, #180	; 0xb4
 8006f1e:	d00a      	beq.n	8006f36 <xTaskCreateStatic+0x66>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	61bb      	str	r3, [r7, #24]
}
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d01e      	beq.n	8006f7c <xTaskCreateStatic+0xac>
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01b      	beq.n	8006f7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	2202      	movs	r2, #2
 8006f52:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f56:	2300      	movs	r3, #0
 8006f58:	9303      	str	r3, [sp, #12]
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	9302      	str	r3, [sp, #8]
 8006f5e:	f107 0314 	add.w	r3, r7, #20
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	68b9      	ldr	r1, [r7, #8]
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 f850 	bl	8007014 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f76:	f000 f8eb 	bl	8007150 <prvAddNewTaskToReadyList>
 8006f7a:	e001      	b.n	8006f80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f80:	697b      	ldr	r3, [r7, #20]
	}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3728      	adds	r7, #40	; 0x28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b08c      	sub	sp, #48	; 0x30
 8006f8e:	af04      	add	r7, sp, #16
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	603b      	str	r3, [r7, #0]
 8006f96:	4613      	mov	r3, r2
 8006f98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f9a:	88fb      	ldrh	r3, [r7, #6]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f001 f9fa 	bl	8008398 <pvPortMalloc>
 8006fa4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00e      	beq.n	8006fca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006fac:	20b4      	movs	r0, #180	; 0xb4
 8006fae:	f001 f9f3 	bl	8008398 <pvPortMalloc>
 8006fb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8006fc0:	e005      	b.n	8006fce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fc2:	6978      	ldr	r0, [r7, #20]
 8006fc4:	f001 fab4 	bl	8008530 <vPortFree>
 8006fc8:	e001      	b.n	8006fce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d017      	beq.n	8007004 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fdc:	88fa      	ldrh	r2, [r7, #6]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9303      	str	r3, [sp, #12]
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	9302      	str	r3, [sp, #8]
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f80e 	bl	8007014 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ff8:	69f8      	ldr	r0, [r7, #28]
 8006ffa:	f000 f8a9 	bl	8007150 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ffe:	2301      	movs	r3, #1
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	e002      	b.n	800700a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007004:	f04f 33ff 	mov.w	r3, #4294967295
 8007008:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800700a:	69bb      	ldr	r3, [r7, #24]
	}
 800700c:	4618      	mov	r0, r3
 800700e:	3720      	adds	r7, #32
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800702c:	3b01      	subs	r3, #1
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	f023 0307 	bic.w	r3, r3, #7
 800703a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00a      	beq.n	800705c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	617b      	str	r3, [r7, #20]
}
 8007058:	bf00      	nop
 800705a:	e7fe      	b.n	800705a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d01f      	beq.n	80070a2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007062:	2300      	movs	r3, #0
 8007064:	61fb      	str	r3, [r7, #28]
 8007066:	e012      	b.n	800708e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	4413      	add	r3, r2
 800706e:	7819      	ldrb	r1, [r3, #0]
 8007070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	4413      	add	r3, r2
 8007076:	3334      	adds	r3, #52	; 0x34
 8007078:	460a      	mov	r2, r1
 800707a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	4413      	add	r3, r2
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d006      	beq.n	8007096 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	3301      	adds	r3, #1
 800708c:	61fb      	str	r3, [r7, #28]
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	2b0f      	cmp	r3, #15
 8007092:	d9e9      	bls.n	8007068 <prvInitialiseNewTask+0x54>
 8007094:	e000      	b.n	8007098 <prvInitialiseNewTask+0x84>
			{
				break;
 8007096:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070a0:	e003      	b.n	80070aa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80070aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ac:	2b06      	cmp	r3, #6
 80070ae:	d901      	bls.n	80070b4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070b0:	2306      	movs	r3, #6
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80070b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070be:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	2200      	movs	r2, #0
 80070c4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	3304      	adds	r3, #4
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe ff78 	bl	8005fc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	3318      	adds	r3, #24
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fe ff73 	bl	8005fc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	f1c3 0207 	rsb	r2, r3, #7
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	334c      	adds	r3, #76	; 0x4c
 8007104:	2260      	movs	r2, #96	; 0x60
 8007106:	2100      	movs	r1, #0
 8007108:	4618      	mov	r0, r3
 800710a:	f001 fc64 	bl	80089d6 <memset>
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	4a0c      	ldr	r2, [pc, #48]	; (8007144 <prvInitialiseNewTask+0x130>)
 8007112:	651a      	str	r2, [r3, #80]	; 0x50
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	4a0c      	ldr	r2, [pc, #48]	; (8007148 <prvInitialiseNewTask+0x134>)
 8007118:	655a      	str	r2, [r3, #84]	; 0x54
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	4a0b      	ldr	r2, [pc, #44]	; (800714c <prvInitialiseNewTask+0x138>)
 800711e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	68f9      	ldr	r1, [r7, #12]
 8007124:	69b8      	ldr	r0, [r7, #24]
 8007126:	f000 fee5 	bl	8007ef4 <pxPortInitialiseStack>
 800712a:	4602      	mov	r2, r0
 800712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800713a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800713c:	bf00      	nop
 800713e:	3720      	adds	r7, #32
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	0800cd48 	.word	0x0800cd48
 8007148:	0800cd68 	.word	0x0800cd68
 800714c:	0800cd28 	.word	0x0800cd28

08007150 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007158:	f000 fffc 	bl	8008154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800715c:	4b2a      	ldr	r3, [pc, #168]	; (8007208 <prvAddNewTaskToReadyList+0xb8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3301      	adds	r3, #1
 8007162:	4a29      	ldr	r2, [pc, #164]	; (8007208 <prvAddNewTaskToReadyList+0xb8>)
 8007164:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007166:	4b29      	ldr	r3, [pc, #164]	; (800720c <prvAddNewTaskToReadyList+0xbc>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d109      	bne.n	8007182 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800716e:	4a27      	ldr	r2, [pc, #156]	; (800720c <prvAddNewTaskToReadyList+0xbc>)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007174:	4b24      	ldr	r3, [pc, #144]	; (8007208 <prvAddNewTaskToReadyList+0xb8>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d110      	bne.n	800719e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800717c:	f000 fbd6 	bl	800792c <prvInitialiseTaskLists>
 8007180:	e00d      	b.n	800719e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007182:	4b23      	ldr	r3, [pc, #140]	; (8007210 <prvAddNewTaskToReadyList+0xc0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d109      	bne.n	800719e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800718a:	4b20      	ldr	r3, [pc, #128]	; (800720c <prvAddNewTaskToReadyList+0xbc>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007194:	429a      	cmp	r2, r3
 8007196:	d802      	bhi.n	800719e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007198:	4a1c      	ldr	r2, [pc, #112]	; (800720c <prvAddNewTaskToReadyList+0xbc>)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800719e:	4b1d      	ldr	r3, [pc, #116]	; (8007214 <prvAddNewTaskToReadyList+0xc4>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3301      	adds	r3, #1
 80071a4:	4a1b      	ldr	r2, [pc, #108]	; (8007214 <prvAddNewTaskToReadyList+0xc4>)
 80071a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ac:	2201      	movs	r2, #1
 80071ae:	409a      	lsls	r2, r3
 80071b0:	4b19      	ldr	r3, [pc, #100]	; (8007218 <prvAddNewTaskToReadyList+0xc8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	4a18      	ldr	r2, [pc, #96]	; (8007218 <prvAddNewTaskToReadyList+0xc8>)
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071be:	4613      	mov	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4a15      	ldr	r2, [pc, #84]	; (800721c <prvAddNewTaskToReadyList+0xcc>)
 80071c8:	441a      	add	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	3304      	adds	r3, #4
 80071ce:	4619      	mov	r1, r3
 80071d0:	4610      	mov	r0, r2
 80071d2:	f7fe ff02 	bl	8005fda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071d6:	f000 ffed 	bl	80081b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071da:	4b0d      	ldr	r3, [pc, #52]	; (8007210 <prvAddNewTaskToReadyList+0xc0>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00e      	beq.n	8007200 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071e2:	4b0a      	ldr	r3, [pc, #40]	; (800720c <prvAddNewTaskToReadyList+0xbc>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d207      	bcs.n	8007200 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <prvAddNewTaskToReadyList+0xd0>)
 80071f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20000920 	.word	0x20000920
 800720c:	20000820 	.word	0x20000820
 8007210:	2000092c 	.word	0x2000092c
 8007214:	2000093c 	.word	0x2000093c
 8007218:	20000928 	.word	0x20000928
 800721c:	20000824 	.word	0x20000824
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d017      	beq.n	8007266 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007236:	4b13      	ldr	r3, [pc, #76]	; (8007284 <vTaskDelay+0x60>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <vTaskDelay+0x30>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	60bb      	str	r3, [r7, #8]
}
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007254:	f000 f884 	bl	8007360 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007258:	2100      	movs	r1, #0
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fde4 	bl	8007e28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007260:	f000 f88c 	bl	800737c <xTaskResumeAll>
 8007264:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d107      	bne.n	800727c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800726c:	4b06      	ldr	r3, [pc, #24]	; (8007288 <vTaskDelay+0x64>)
 800726e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800727c:	bf00      	nop
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20000948 	.word	0x20000948
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b08a      	sub	sp, #40	; 0x28
 8007290:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007292:	2300      	movs	r3, #0
 8007294:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007296:	2300      	movs	r3, #0
 8007298:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800729a:	463a      	mov	r2, r7
 800729c:	1d39      	adds	r1, r7, #4
 800729e:	f107 0308 	add.w	r3, r7, #8
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fa f96a 	bl	800157c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	9202      	str	r2, [sp, #8]
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	2300      	movs	r3, #0
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	2300      	movs	r3, #0
 80072b8:	460a      	mov	r2, r1
 80072ba:	4921      	ldr	r1, [pc, #132]	; (8007340 <vTaskStartScheduler+0xb4>)
 80072bc:	4821      	ldr	r0, [pc, #132]	; (8007344 <vTaskStartScheduler+0xb8>)
 80072be:	f7ff fe07 	bl	8006ed0 <xTaskCreateStatic>
 80072c2:	4603      	mov	r3, r0
 80072c4:	4a20      	ldr	r2, [pc, #128]	; (8007348 <vTaskStartScheduler+0xbc>)
 80072c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80072c8:	4b1f      	ldr	r3, [pc, #124]	; (8007348 <vTaskStartScheduler+0xbc>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072d0:	2301      	movs	r3, #1
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	e001      	b.n	80072da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d11b      	bne.n	8007318 <vTaskStartScheduler+0x8c>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	613b      	str	r3, [r7, #16]
}
 80072f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072f4:	4b15      	ldr	r3, [pc, #84]	; (800734c <vTaskStartScheduler+0xc0>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	334c      	adds	r3, #76	; 0x4c
 80072fa:	4a15      	ldr	r2, [pc, #84]	; (8007350 <vTaskStartScheduler+0xc4>)
 80072fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072fe:	4b15      	ldr	r3, [pc, #84]	; (8007354 <vTaskStartScheduler+0xc8>)
 8007300:	f04f 32ff 	mov.w	r2, #4294967295
 8007304:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007306:	4b14      	ldr	r3, [pc, #80]	; (8007358 <vTaskStartScheduler+0xcc>)
 8007308:	2201      	movs	r2, #1
 800730a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800730c:	4b13      	ldr	r3, [pc, #76]	; (800735c <vTaskStartScheduler+0xd0>)
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007312:	f000 fe7d 	bl	8008010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007316:	e00e      	b.n	8007336 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731e:	d10a      	bne.n	8007336 <vTaskStartScheduler+0xaa>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60fb      	str	r3, [r7, #12]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <vTaskStartScheduler+0xa8>
}
 8007336:	bf00      	nop
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	0800cd08 	.word	0x0800cd08
 8007344:	080078fd 	.word	0x080078fd
 8007348:	20000944 	.word	0x20000944
 800734c:	20000820 	.word	0x20000820
 8007350:	20000010 	.word	0x20000010
 8007354:	20000940 	.word	0x20000940
 8007358:	2000092c 	.word	0x2000092c
 800735c:	20000924 	.word	0x20000924

08007360 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007360:	b480      	push	{r7}
 8007362:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007364:	4b04      	ldr	r3, [pc, #16]	; (8007378 <vTaskSuspendAll+0x18>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3301      	adds	r3, #1
 800736a:	4a03      	ldr	r2, [pc, #12]	; (8007378 <vTaskSuspendAll+0x18>)
 800736c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800736e:	bf00      	nop
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	20000948 	.word	0x20000948

0800737c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007386:	2300      	movs	r3, #0
 8007388:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800738a:	4b41      	ldr	r3, [pc, #260]	; (8007490 <xTaskResumeAll+0x114>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10a      	bne.n	80073a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007396:	f383 8811 	msr	BASEPRI, r3
 800739a:	f3bf 8f6f 	isb	sy
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	603b      	str	r3, [r7, #0]
}
 80073a4:	bf00      	nop
 80073a6:	e7fe      	b.n	80073a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80073a8:	f000 fed4 	bl	8008154 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80073ac:	4b38      	ldr	r3, [pc, #224]	; (8007490 <xTaskResumeAll+0x114>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3b01      	subs	r3, #1
 80073b2:	4a37      	ldr	r2, [pc, #220]	; (8007490 <xTaskResumeAll+0x114>)
 80073b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073b6:	4b36      	ldr	r3, [pc, #216]	; (8007490 <xTaskResumeAll+0x114>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d161      	bne.n	8007482 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80073be:	4b35      	ldr	r3, [pc, #212]	; (8007494 <xTaskResumeAll+0x118>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d05d      	beq.n	8007482 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073c6:	e02e      	b.n	8007426 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073c8:	4b33      	ldr	r3, [pc, #204]	; (8007498 <xTaskResumeAll+0x11c>)
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	68db      	ldr	r3, [r3, #12]
 80073ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3318      	adds	r3, #24
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fe fe5d 	bl	8006094 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3304      	adds	r3, #4
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fe58 	bl	8006094 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	2201      	movs	r2, #1
 80073ea:	409a      	lsls	r2, r3
 80073ec:	4b2b      	ldr	r3, [pc, #172]	; (800749c <xTaskResumeAll+0x120>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	4a2a      	ldr	r2, [pc, #168]	; (800749c <xTaskResumeAll+0x120>)
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fa:	4613      	mov	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4413      	add	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4a27      	ldr	r2, [pc, #156]	; (80074a0 <xTaskResumeAll+0x124>)
 8007404:	441a      	add	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3304      	adds	r3, #4
 800740a:	4619      	mov	r1, r3
 800740c:	4610      	mov	r0, r2
 800740e:	f7fe fde4 	bl	8005fda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007416:	4b23      	ldr	r3, [pc, #140]	; (80074a4 <xTaskResumeAll+0x128>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	429a      	cmp	r2, r3
 800741e:	d302      	bcc.n	8007426 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007420:	4b21      	ldr	r3, [pc, #132]	; (80074a8 <xTaskResumeAll+0x12c>)
 8007422:	2201      	movs	r2, #1
 8007424:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007426:	4b1c      	ldr	r3, [pc, #112]	; (8007498 <xTaskResumeAll+0x11c>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1cc      	bne.n	80073c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007434:	f000 fb1c 	bl	8007a70 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007438:	4b1c      	ldr	r3, [pc, #112]	; (80074ac <xTaskResumeAll+0x130>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d010      	beq.n	8007466 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007444:	f000 f836 	bl	80074b4 <xTaskIncrementTick>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800744e:	4b16      	ldr	r3, [pc, #88]	; (80074a8 <xTaskResumeAll+0x12c>)
 8007450:	2201      	movs	r2, #1
 8007452:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3b01      	subs	r3, #1
 8007458:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1f1      	bne.n	8007444 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007460:	4b12      	ldr	r3, [pc, #72]	; (80074ac <xTaskResumeAll+0x130>)
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007466:	4b10      	ldr	r3, [pc, #64]	; (80074a8 <xTaskResumeAll+0x12c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d009      	beq.n	8007482 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800746e:	2301      	movs	r3, #1
 8007470:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007472:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <xTaskResumeAll+0x134>)
 8007474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007478:	601a      	str	r2, [r3, #0]
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007482:	f000 fe97 	bl	80081b4 <vPortExitCritical>

	return xAlreadyYielded;
 8007486:	68bb      	ldr	r3, [r7, #8]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20000948 	.word	0x20000948
 8007494:	20000920 	.word	0x20000920
 8007498:	200008e0 	.word	0x200008e0
 800749c:	20000928 	.word	0x20000928
 80074a0:	20000824 	.word	0x20000824
 80074a4:	20000820 	.word	0x20000820
 80074a8:	20000934 	.word	0x20000934
 80074ac:	20000930 	.word	0x20000930
 80074b0:	e000ed04 	.word	0xe000ed04

080074b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80074ba:	2300      	movs	r3, #0
 80074bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074be:	4b4e      	ldr	r3, [pc, #312]	; (80075f8 <xTaskIncrementTick+0x144>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f040 808e 	bne.w	80075e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80074c8:	4b4c      	ldr	r3, [pc, #304]	; (80075fc <xTaskIncrementTick+0x148>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3301      	adds	r3, #1
 80074ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80074d0:	4a4a      	ldr	r2, [pc, #296]	; (80075fc <xTaskIncrementTick+0x148>)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d120      	bne.n	800751e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80074dc:	4b48      	ldr	r3, [pc, #288]	; (8007600 <xTaskIncrementTick+0x14c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <xTaskIncrementTick+0x48>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	603b      	str	r3, [r7, #0]
}
 80074f8:	bf00      	nop
 80074fa:	e7fe      	b.n	80074fa <xTaskIncrementTick+0x46>
 80074fc:	4b40      	ldr	r3, [pc, #256]	; (8007600 <xTaskIncrementTick+0x14c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	4b40      	ldr	r3, [pc, #256]	; (8007604 <xTaskIncrementTick+0x150>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a3e      	ldr	r2, [pc, #248]	; (8007600 <xTaskIncrementTick+0x14c>)
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	4a3e      	ldr	r2, [pc, #248]	; (8007604 <xTaskIncrementTick+0x150>)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6013      	str	r3, [r2, #0]
 8007510:	4b3d      	ldr	r3, [pc, #244]	; (8007608 <xTaskIncrementTick+0x154>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	3301      	adds	r3, #1
 8007516:	4a3c      	ldr	r2, [pc, #240]	; (8007608 <xTaskIncrementTick+0x154>)
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	f000 faa9 	bl	8007a70 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800751e:	4b3b      	ldr	r3, [pc, #236]	; (800760c <xTaskIncrementTick+0x158>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	429a      	cmp	r2, r3
 8007526:	d348      	bcc.n	80075ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007528:	4b35      	ldr	r3, [pc, #212]	; (8007600 <xTaskIncrementTick+0x14c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d104      	bne.n	800753c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007532:	4b36      	ldr	r3, [pc, #216]	; (800760c <xTaskIncrementTick+0x158>)
 8007534:	f04f 32ff 	mov.w	r2, #4294967295
 8007538:	601a      	str	r2, [r3, #0]
					break;
 800753a:	e03e      	b.n	80075ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753c:	4b30      	ldr	r3, [pc, #192]	; (8007600 <xTaskIncrementTick+0x14c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	429a      	cmp	r2, r3
 8007552:	d203      	bcs.n	800755c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007554:	4a2d      	ldr	r2, [pc, #180]	; (800760c <xTaskIncrementTick+0x158>)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800755a:	e02e      	b.n	80075ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe fd97 	bl	8006094 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	3318      	adds	r3, #24
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe fd8e 	bl	8006094 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	2201      	movs	r2, #1
 800757e:	409a      	lsls	r2, r3
 8007580:	4b23      	ldr	r3, [pc, #140]	; (8007610 <xTaskIncrementTick+0x15c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4313      	orrs	r3, r2
 8007586:	4a22      	ldr	r2, [pc, #136]	; (8007610 <xTaskIncrementTick+0x15c>)
 8007588:	6013      	str	r3, [r2, #0]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4a1f      	ldr	r2, [pc, #124]	; (8007614 <xTaskIncrementTick+0x160>)
 8007598:	441a      	add	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	3304      	adds	r3, #4
 800759e:	4619      	mov	r1, r3
 80075a0:	4610      	mov	r0, r2
 80075a2:	f7fe fd1a 	bl	8005fda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075aa:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <xTaskIncrementTick+0x164>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d3b9      	bcc.n	8007528 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80075b4:	2301      	movs	r3, #1
 80075b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075b8:	e7b6      	b.n	8007528 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80075ba:	4b17      	ldr	r3, [pc, #92]	; (8007618 <xTaskIncrementTick+0x164>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075c0:	4914      	ldr	r1, [pc, #80]	; (8007614 <xTaskIncrementTick+0x160>)
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	440b      	add	r3, r1
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d901      	bls.n	80075d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80075d2:	2301      	movs	r3, #1
 80075d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80075d6:	4b11      	ldr	r3, [pc, #68]	; (800761c <xTaskIncrementTick+0x168>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80075de:	2301      	movs	r3, #1
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	e004      	b.n	80075ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80075e4:	4b0e      	ldr	r3, [pc, #56]	; (8007620 <xTaskIncrementTick+0x16c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	3301      	adds	r3, #1
 80075ea:	4a0d      	ldr	r2, [pc, #52]	; (8007620 <xTaskIncrementTick+0x16c>)
 80075ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075ee:	697b      	ldr	r3, [r7, #20]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20000948 	.word	0x20000948
 80075fc:	20000924 	.word	0x20000924
 8007600:	200008d8 	.word	0x200008d8
 8007604:	200008dc 	.word	0x200008dc
 8007608:	20000938 	.word	0x20000938
 800760c:	20000940 	.word	0x20000940
 8007610:	20000928 	.word	0x20000928
 8007614:	20000824 	.word	0x20000824
 8007618:	20000820 	.word	0x20000820
 800761c:	20000934 	.word	0x20000934
 8007620:	20000930 	.word	0x20000930

08007624 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800762a:	4b29      	ldr	r3, [pc, #164]	; (80076d0 <vTaskSwitchContext+0xac>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007632:	4b28      	ldr	r3, [pc, #160]	; (80076d4 <vTaskSwitchContext+0xb0>)
 8007634:	2201      	movs	r2, #1
 8007636:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007638:	e044      	b.n	80076c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800763a:	4b26      	ldr	r3, [pc, #152]	; (80076d4 <vTaskSwitchContext+0xb0>)
 800763c:	2200      	movs	r2, #0
 800763e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007640:	4b25      	ldr	r3, [pc, #148]	; (80076d8 <vTaskSwitchContext+0xb4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	fab3 f383 	clz	r3, r3
 800764c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800764e:	7afb      	ldrb	r3, [r7, #11]
 8007650:	f1c3 031f 	rsb	r3, r3, #31
 8007654:	617b      	str	r3, [r7, #20]
 8007656:	4921      	ldr	r1, [pc, #132]	; (80076dc <vTaskSwitchContext+0xb8>)
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	4613      	mov	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	440b      	add	r3, r1
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <vTaskSwitchContext+0x5c>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	607b      	str	r3, [r7, #4]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <vTaskSwitchContext+0x5a>
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	4613      	mov	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	4a14      	ldr	r2, [pc, #80]	; (80076dc <vTaskSwitchContext+0xb8>)
 800768c:	4413      	add	r3, r2
 800768e:	613b      	str	r3, [r7, #16]
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	605a      	str	r2, [r3, #4]
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	3308      	adds	r3, #8
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d104      	bne.n	80076b0 <vTaskSwitchContext+0x8c>
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	605a      	str	r2, [r3, #4]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	4a0a      	ldr	r2, [pc, #40]	; (80076e0 <vTaskSwitchContext+0xbc>)
 80076b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80076ba:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <vTaskSwitchContext+0xbc>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	334c      	adds	r3, #76	; 0x4c
 80076c0:	4a08      	ldr	r2, [pc, #32]	; (80076e4 <vTaskSwitchContext+0xc0>)
 80076c2:	6013      	str	r3, [r2, #0]
}
 80076c4:	bf00      	nop
 80076c6:	371c      	adds	r7, #28
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	20000948 	.word	0x20000948
 80076d4:	20000934 	.word	0x20000934
 80076d8:	20000928 	.word	0x20000928
 80076dc:	20000824 	.word	0x20000824
 80076e0:	20000820 	.word	0x20000820
 80076e4:	20000010 	.word	0x20000010

080076e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	60fb      	str	r3, [r7, #12]
}
 800770a:	bf00      	nop
 800770c:	e7fe      	b.n	800770c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800770e:	4b07      	ldr	r3, [pc, #28]	; (800772c <vTaskPlaceOnEventList+0x44>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3318      	adds	r3, #24
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fe fc83 	bl	8006022 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800771c:	2101      	movs	r1, #1
 800771e:	6838      	ldr	r0, [r7, #0]
 8007720:	f000 fb82 	bl	8007e28 <prvAddCurrentTaskToDelayedList>
}
 8007724:	bf00      	nop
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20000820 	.word	0x20000820

08007730 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774a:	f383 8811 	msr	BASEPRI, r3
 800774e:	f3bf 8f6f 	isb	sy
 8007752:	f3bf 8f4f 	dsb	sy
 8007756:	60fb      	str	r3, [r7, #12]
}
 8007758:	bf00      	nop
 800775a:	e7fe      	b.n	800775a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	3318      	adds	r3, #24
 8007760:	4618      	mov	r0, r3
 8007762:	f7fe fc97 	bl	8006094 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007766:	4b1d      	ldr	r3, [pc, #116]	; (80077dc <xTaskRemoveFromEventList+0xac>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d11c      	bne.n	80077a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	3304      	adds	r3, #4
 8007772:	4618      	mov	r0, r3
 8007774:	f7fe fc8e 	bl	8006094 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	2201      	movs	r2, #1
 800777e:	409a      	lsls	r2, r3
 8007780:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <xTaskRemoveFromEventList+0xb0>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4313      	orrs	r3, r2
 8007786:	4a16      	ldr	r2, [pc, #88]	; (80077e0 <xTaskRemoveFromEventList+0xb0>)
 8007788:	6013      	str	r3, [r2, #0]
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4a13      	ldr	r2, [pc, #76]	; (80077e4 <xTaskRemoveFromEventList+0xb4>)
 8007798:	441a      	add	r2, r3
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	3304      	adds	r3, #4
 800779e:	4619      	mov	r1, r3
 80077a0:	4610      	mov	r0, r2
 80077a2:	f7fe fc1a 	bl	8005fda <vListInsertEnd>
 80077a6:	e005      	b.n	80077b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	3318      	adds	r3, #24
 80077ac:	4619      	mov	r1, r3
 80077ae:	480e      	ldr	r0, [pc, #56]	; (80077e8 <xTaskRemoveFromEventList+0xb8>)
 80077b0:	f7fe fc13 	bl	8005fda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b8:	4b0c      	ldr	r3, [pc, #48]	; (80077ec <xTaskRemoveFromEventList+0xbc>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	429a      	cmp	r2, r3
 80077c0:	d905      	bls.n	80077ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80077c2:	2301      	movs	r3, #1
 80077c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80077c6:	4b0a      	ldr	r3, [pc, #40]	; (80077f0 <xTaskRemoveFromEventList+0xc0>)
 80077c8:	2201      	movs	r2, #1
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	e001      	b.n	80077d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80077ce:	2300      	movs	r3, #0
 80077d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80077d2:	697b      	ldr	r3, [r7, #20]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	20000948 	.word	0x20000948
 80077e0:	20000928 	.word	0x20000928
 80077e4:	20000824 	.word	0x20000824
 80077e8:	200008e0 	.word	0x200008e0
 80077ec:	20000820 	.word	0x20000820
 80077f0:	20000934 	.word	0x20000934

080077f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077fc:	4b06      	ldr	r3, [pc, #24]	; (8007818 <vTaskInternalSetTimeOutState+0x24>)
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007804:	4b05      	ldr	r3, [pc, #20]	; (800781c <vTaskInternalSetTimeOutState+0x28>)
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	605a      	str	r2, [r3, #4]
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	20000938 	.word	0x20000938
 800781c:	20000924 	.word	0x20000924

08007820 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	613b      	str	r3, [r7, #16]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	60fb      	str	r3, [r7, #12]
}
 800785e:	bf00      	nop
 8007860:	e7fe      	b.n	8007860 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007862:	f000 fc77 	bl	8008154 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007866:	4b1d      	ldr	r3, [pc, #116]	; (80078dc <xTaskCheckForTimeOut+0xbc>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	69ba      	ldr	r2, [r7, #24]
 8007872:	1ad3      	subs	r3, r2, r3
 8007874:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787e:	d102      	bne.n	8007886 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007880:	2300      	movs	r3, #0
 8007882:	61fb      	str	r3, [r7, #28]
 8007884:	e023      	b.n	80078ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <xTaskCheckForTimeOut+0xc0>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d007      	beq.n	80078a2 <xTaskCheckForTimeOut+0x82>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	429a      	cmp	r2, r3
 800789a:	d302      	bcc.n	80078a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800789c:	2301      	movs	r3, #1
 800789e:	61fb      	str	r3, [r7, #28]
 80078a0:	e015      	b.n	80078ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d20b      	bcs.n	80078c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff ff9b 	bl	80077f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80078be:	2300      	movs	r3, #0
 80078c0:	61fb      	str	r3, [r7, #28]
 80078c2:	e004      	b.n	80078ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80078ca:	2301      	movs	r3, #1
 80078cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80078ce:	f000 fc71 	bl	80081b4 <vPortExitCritical>

	return xReturn;
 80078d2:	69fb      	ldr	r3, [r7, #28]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3720      	adds	r7, #32
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	20000924 	.word	0x20000924
 80078e0:	20000938 	.word	0x20000938

080078e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80078e4:	b480      	push	{r7}
 80078e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80078e8:	4b03      	ldr	r3, [pc, #12]	; (80078f8 <vTaskMissedYield+0x14>)
 80078ea:	2201      	movs	r2, #1
 80078ec:	601a      	str	r2, [r3, #0]
}
 80078ee:	bf00      	nop
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr
 80078f8:	20000934 	.word	0x20000934

080078fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007904:	f000 f852 	bl	80079ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007908:	4b06      	ldr	r3, [pc, #24]	; (8007924 <prvIdleTask+0x28>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d9f9      	bls.n	8007904 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <prvIdleTask+0x2c>)
 8007912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007920:	e7f0      	b.n	8007904 <prvIdleTask+0x8>
 8007922:	bf00      	nop
 8007924:	20000824 	.word	0x20000824
 8007928:	e000ed04 	.word	0xe000ed04

0800792c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007932:	2300      	movs	r3, #0
 8007934:	607b      	str	r3, [r7, #4]
 8007936:	e00c      	b.n	8007952 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4a12      	ldr	r2, [pc, #72]	; (800798c <prvInitialiseTaskLists+0x60>)
 8007944:	4413      	add	r3, r2
 8007946:	4618      	mov	r0, r3
 8007948:	f7fe fb1a 	bl	8005f80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3301      	adds	r3, #1
 8007950:	607b      	str	r3, [r7, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b06      	cmp	r3, #6
 8007956:	d9ef      	bls.n	8007938 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007958:	480d      	ldr	r0, [pc, #52]	; (8007990 <prvInitialiseTaskLists+0x64>)
 800795a:	f7fe fb11 	bl	8005f80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800795e:	480d      	ldr	r0, [pc, #52]	; (8007994 <prvInitialiseTaskLists+0x68>)
 8007960:	f7fe fb0e 	bl	8005f80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007964:	480c      	ldr	r0, [pc, #48]	; (8007998 <prvInitialiseTaskLists+0x6c>)
 8007966:	f7fe fb0b 	bl	8005f80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800796a:	480c      	ldr	r0, [pc, #48]	; (800799c <prvInitialiseTaskLists+0x70>)
 800796c:	f7fe fb08 	bl	8005f80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007970:	480b      	ldr	r0, [pc, #44]	; (80079a0 <prvInitialiseTaskLists+0x74>)
 8007972:	f7fe fb05 	bl	8005f80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007976:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <prvInitialiseTaskLists+0x78>)
 8007978:	4a05      	ldr	r2, [pc, #20]	; (8007990 <prvInitialiseTaskLists+0x64>)
 800797a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <prvInitialiseTaskLists+0x7c>)
 800797e:	4a05      	ldr	r2, [pc, #20]	; (8007994 <prvInitialiseTaskLists+0x68>)
 8007980:	601a      	str	r2, [r3, #0]
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000824 	.word	0x20000824
 8007990:	200008b0 	.word	0x200008b0
 8007994:	200008c4 	.word	0x200008c4
 8007998:	200008e0 	.word	0x200008e0
 800799c:	200008f4 	.word	0x200008f4
 80079a0:	2000090c 	.word	0x2000090c
 80079a4:	200008d8 	.word	0x200008d8
 80079a8:	200008dc 	.word	0x200008dc

080079ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079b2:	e019      	b.n	80079e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80079b4:	f000 fbce 	bl	8008154 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079b8:	4b10      	ldr	r3, [pc, #64]	; (80079fc <prvCheckTasksWaitingTermination+0x50>)
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3304      	adds	r3, #4
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe fb65 	bl	8006094 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80079ca:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <prvCheckTasksWaitingTermination+0x54>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	4a0b      	ldr	r2, [pc, #44]	; (8007a00 <prvCheckTasksWaitingTermination+0x54>)
 80079d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80079d4:	4b0b      	ldr	r3, [pc, #44]	; (8007a04 <prvCheckTasksWaitingTermination+0x58>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3b01      	subs	r3, #1
 80079da:	4a0a      	ldr	r2, [pc, #40]	; (8007a04 <prvCheckTasksWaitingTermination+0x58>)
 80079dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80079de:	f000 fbe9 	bl	80081b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f810 	bl	8007a08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80079e8:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <prvCheckTasksWaitingTermination+0x58>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e1      	bne.n	80079b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	200008f4 	.word	0x200008f4
 8007a00:	20000920 	.word	0x20000920
 8007a04:	20000908 	.word	0x20000908

08007a08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	334c      	adds	r3, #76	; 0x4c
 8007a14:	4618      	mov	r0, r3
 8007a16:	f001 fcf3 	bl	8009400 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d108      	bne.n	8007a36 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 fd81 	bl	8008530 <vPortFree>
				vPortFree( pxTCB );
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fd7e 	bl	8008530 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007a34:	e018      	b.n	8007a68 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d103      	bne.n	8007a48 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fd75 	bl	8008530 <vPortFree>
	}
 8007a46:	e00f      	b.n	8007a68 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d00a      	beq.n	8007a68 <prvDeleteTCB+0x60>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	60fb      	str	r3, [r7, #12]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <prvDeleteTCB+0x5e>
	}
 8007a68:	bf00      	nop
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a76:	4b0c      	ldr	r3, [pc, #48]	; (8007aa8 <prvResetNextTaskUnblockTime+0x38>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a80:	4b0a      	ldr	r3, [pc, #40]	; (8007aac <prvResetNextTaskUnblockTime+0x3c>)
 8007a82:	f04f 32ff 	mov.w	r2, #4294967295
 8007a86:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a88:	e008      	b.n	8007a9c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a8a:	4b07      	ldr	r3, [pc, #28]	; (8007aa8 <prvResetNextTaskUnblockTime+0x38>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	4a04      	ldr	r2, [pc, #16]	; (8007aac <prvResetNextTaskUnblockTime+0x3c>)
 8007a9a:	6013      	str	r3, [r2, #0]
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	200008d8 	.word	0x200008d8
 8007aac:	20000940 	.word	0x20000940

08007ab0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007ab6:	4b0b      	ldr	r3, [pc, #44]	; (8007ae4 <xTaskGetSchedulerState+0x34>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d102      	bne.n	8007ac4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	607b      	str	r3, [r7, #4]
 8007ac2:	e008      	b.n	8007ad6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ac4:	4b08      	ldr	r3, [pc, #32]	; (8007ae8 <xTaskGetSchedulerState+0x38>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d102      	bne.n	8007ad2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007acc:	2302      	movs	r3, #2
 8007ace:	607b      	str	r3, [r7, #4]
 8007ad0:	e001      	b.n	8007ad6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007ad6:	687b      	ldr	r3, [r7, #4]
	}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	2000092c 	.word	0x2000092c
 8007ae8:	20000948 	.word	0x20000948

08007aec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d05e      	beq.n	8007bc0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b06:	4b31      	ldr	r3, [pc, #196]	; (8007bcc <xTaskPriorityInherit+0xe0>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d24e      	bcs.n	8007bae <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	db06      	blt.n	8007b26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b18:	4b2c      	ldr	r3, [pc, #176]	; (8007bcc <xTaskPriorityInherit+0xe0>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	f1c3 0207 	rsb	r2, r3, #7
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	6959      	ldr	r1, [r3, #20]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2e:	4613      	mov	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4a26      	ldr	r2, [pc, #152]	; (8007bd0 <xTaskPriorityInherit+0xe4>)
 8007b38:	4413      	add	r3, r2
 8007b3a:	4299      	cmp	r1, r3
 8007b3c:	d12f      	bne.n	8007b9e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fe faa6 	bl	8006094 <uxListRemove>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10a      	bne.n	8007b64 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b52:	2201      	movs	r2, #1
 8007b54:	fa02 f303 	lsl.w	r3, r2, r3
 8007b58:	43da      	mvns	r2, r3
 8007b5a:	4b1e      	ldr	r3, [pc, #120]	; (8007bd4 <xTaskPriorityInherit+0xe8>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4013      	ands	r3, r2
 8007b60:	4a1c      	ldr	r2, [pc, #112]	; (8007bd4 <xTaskPriorityInherit+0xe8>)
 8007b62:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b64:	4b19      	ldr	r3, [pc, #100]	; (8007bcc <xTaskPriorityInherit+0xe0>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b72:	2201      	movs	r2, #1
 8007b74:	409a      	lsls	r2, r3
 8007b76:	4b17      	ldr	r3, [pc, #92]	; (8007bd4 <xTaskPriorityInherit+0xe8>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	4a15      	ldr	r2, [pc, #84]	; (8007bd4 <xTaskPriorityInherit+0xe8>)
 8007b7e:	6013      	str	r3, [r2, #0]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b84:	4613      	mov	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	4413      	add	r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	4a10      	ldr	r2, [pc, #64]	; (8007bd0 <xTaskPriorityInherit+0xe4>)
 8007b8e:	441a      	add	r2, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f7fe fa1f 	bl	8005fda <vListInsertEnd>
 8007b9c:	e004      	b.n	8007ba8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b9e:	4b0b      	ldr	r3, [pc, #44]	; (8007bcc <xTaskPriorityInherit+0xe0>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e008      	b.n	8007bc0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bb2:	4b06      	ldr	r3, [pc, #24]	; (8007bcc <xTaskPriorityInherit+0xe0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d201      	bcs.n	8007bc0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
	}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000820 	.word	0x20000820
 8007bd0:	20000824 	.word	0x20000824
 8007bd4:	20000928 	.word	0x20000928

08007bd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007be4:	2300      	movs	r3, #0
 8007be6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d06e      	beq.n	8007ccc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007bee:	4b3a      	ldr	r3, [pc, #232]	; (8007cd8 <xTaskPriorityDisinherit+0x100>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d00a      	beq.n	8007c0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	60fb      	str	r3, [r7, #12]
}
 8007c0a:	bf00      	nop
 8007c0c:	e7fe      	b.n	8007c0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1a:	f383 8811 	msr	BASEPRI, r3
 8007c1e:	f3bf 8f6f 	isb	sy
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	60bb      	str	r3, [r7, #8]
}
 8007c28:	bf00      	nop
 8007c2a:	e7fe      	b.n	8007c2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c30:	1e5a      	subs	r2, r3, #1
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d044      	beq.n	8007ccc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d140      	bne.n	8007ccc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	3304      	adds	r3, #4
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fe fa20 	bl	8006094 <uxListRemove>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d115      	bne.n	8007c86 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5e:	491f      	ldr	r1, [pc, #124]	; (8007cdc <xTaskPriorityDisinherit+0x104>)
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	440b      	add	r3, r1
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d10a      	bne.n	8007c86 <xTaskPriorityDisinherit+0xae>
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c74:	2201      	movs	r2, #1
 8007c76:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7a:	43da      	mvns	r2, r3
 8007c7c:	4b18      	ldr	r3, [pc, #96]	; (8007ce0 <xTaskPriorityDisinherit+0x108>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4013      	ands	r3, r2
 8007c82:	4a17      	ldr	r2, [pc, #92]	; (8007ce0 <xTaskPriorityDisinherit+0x108>)
 8007c84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c92:	f1c3 0207 	rsb	r2, r3, #7
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	409a      	lsls	r2, r3
 8007ca2:	4b0f      	ldr	r3, [pc, #60]	; (8007ce0 <xTaskPriorityDisinherit+0x108>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	4a0d      	ldr	r2, [pc, #52]	; (8007ce0 <xTaskPriorityDisinherit+0x108>)
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4a08      	ldr	r2, [pc, #32]	; (8007cdc <xTaskPriorityDisinherit+0x104>)
 8007cba:	441a      	add	r2, r3
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	f7fe f989 	bl	8005fda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007cc8:	2301      	movs	r3, #1
 8007cca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ccc:	697b      	ldr	r3, [r7, #20]
	}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3718      	adds	r7, #24
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20000820 	.word	0x20000820
 8007cdc:	20000824 	.word	0x20000824
 8007ce0:	20000928 	.word	0x20000928

08007ce4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d077      	beq.n	8007dec <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10a      	bne.n	8007d1a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	60fb      	str	r3, [r7, #12]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d902      	bls.n	8007d2a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	61fb      	str	r3, [r7, #28]
 8007d28:	e002      	b.n	8007d30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	69fa      	ldr	r2, [r7, #28]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d058      	beq.n	8007dec <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d3e:	697a      	ldr	r2, [r7, #20]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d153      	bne.n	8007dec <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007d44:	4b2b      	ldr	r3, [pc, #172]	; (8007df4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d10a      	bne.n	8007d64 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	60bb      	str	r3, [r7, #8]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	69fa      	ldr	r2, [r7, #28]
 8007d6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	db04      	blt.n	8007d82 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	f1c3 0207 	rsb	r2, r3, #7
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	6959      	ldr	r1, [r3, #20]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4a19      	ldr	r2, [pc, #100]	; (8007df8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007d92:	4413      	add	r3, r2
 8007d94:	4299      	cmp	r1, r3
 8007d96:	d129      	bne.n	8007dec <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fe f979 	bl	8006094 <uxListRemove>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007da8:	69bb      	ldr	r3, [r7, #24]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	2201      	movs	r2, #1
 8007dae:	fa02 f303 	lsl.w	r3, r2, r3
 8007db2:	43da      	mvns	r2, r3
 8007db4:	4b11      	ldr	r3, [pc, #68]	; (8007dfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4013      	ands	r3, r2
 8007dba:	4a10      	ldr	r2, [pc, #64]	; (8007dfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007dbc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	409a      	lsls	r2, r3
 8007dc6:	4b0d      	ldr	r3, [pc, #52]	; (8007dfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	4a0b      	ldr	r2, [pc, #44]	; (8007dfc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	4a06      	ldr	r2, [pc, #24]	; (8007df8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007dde:	441a      	add	r2, r3
 8007de0:	69bb      	ldr	r3, [r7, #24]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4619      	mov	r1, r3
 8007de6:	4610      	mov	r0, r2
 8007de8:	f7fe f8f7 	bl	8005fda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007dec:	bf00      	nop
 8007dee:	3720      	adds	r7, #32
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20000820 	.word	0x20000820
 8007df8:	20000824 	.word	0x20000824
 8007dfc:	20000928 	.word	0x20000928

08007e00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007e04:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d004      	beq.n	8007e16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007e0c:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e12:	3201      	adds	r2, #1
 8007e14:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007e16:	4b03      	ldr	r3, [pc, #12]	; (8007e24 <pvTaskIncrementMutexHeldCount+0x24>)
 8007e18:	681b      	ldr	r3, [r3, #0]
	}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	20000820 	.word	0x20000820

08007e28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e32:	4b29      	ldr	r3, [pc, #164]	; (8007ed8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e38:	4b28      	ldr	r3, [pc, #160]	; (8007edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe f928 	bl	8006094 <uxListRemove>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10b      	bne.n	8007e62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007e4a:	4b24      	ldr	r3, [pc, #144]	; (8007edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	2201      	movs	r2, #1
 8007e52:	fa02 f303 	lsl.w	r3, r2, r3
 8007e56:	43da      	mvns	r2, r3
 8007e58:	4b21      	ldr	r3, [pc, #132]	; (8007ee0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	4a20      	ldr	r2, [pc, #128]	; (8007ee0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e68:	d10a      	bne.n	8007e80 <prvAddCurrentTaskToDelayedList+0x58>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d007      	beq.n	8007e80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e70:	4b1a      	ldr	r3, [pc, #104]	; (8007edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3304      	adds	r3, #4
 8007e76:	4619      	mov	r1, r3
 8007e78:	481a      	ldr	r0, [pc, #104]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e7a:	f7fe f8ae 	bl	8005fda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e7e:	e026      	b.n	8007ece <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4413      	add	r3, r2
 8007e86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e88:	4b14      	ldr	r3, [pc, #80]	; (8007edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d209      	bcs.n	8007eac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e98:	4b13      	ldr	r3, [pc, #76]	; (8007ee8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	4b0f      	ldr	r3, [pc, #60]	; (8007edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	f7fe f8bc 	bl	8006022 <vListInsert>
}
 8007eaa:	e010      	b.n	8007ece <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eac:	4b0f      	ldr	r3, [pc, #60]	; (8007eec <prvAddCurrentTaskToDelayedList+0xc4>)
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	4b0a      	ldr	r3, [pc, #40]	; (8007edc <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3304      	adds	r3, #4
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	4610      	mov	r0, r2
 8007eba:	f7fe f8b2 	bl	8006022 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ebe:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d202      	bcs.n	8007ece <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ec8:	4a09      	ldr	r2, [pc, #36]	; (8007ef0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	6013      	str	r3, [r2, #0]
}
 8007ece:	bf00      	nop
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20000924 	.word	0x20000924
 8007edc:	20000820 	.word	0x20000820
 8007ee0:	20000928 	.word	0x20000928
 8007ee4:	2000090c 	.word	0x2000090c
 8007ee8:	200008dc 	.word	0x200008dc
 8007eec:	200008d8 	.word	0x200008d8
 8007ef0:	20000940 	.word	0x20000940

08007ef4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	3b04      	subs	r3, #4
 8007f04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	3b04      	subs	r3, #4
 8007f12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f023 0201 	bic.w	r2, r3, #1
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3b04      	subs	r3, #4
 8007f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f24:	4a0c      	ldr	r2, [pc, #48]	; (8007f58 <pxPortInitialiseStack+0x64>)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3b14      	subs	r3, #20
 8007f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	3b04      	subs	r3, #4
 8007f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f06f 0202 	mvn.w	r2, #2
 8007f42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	3b20      	subs	r3, #32
 8007f48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	08007f5d 	.word	0x08007f5d

08007f5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f66:	4b12      	ldr	r3, [pc, #72]	; (8007fb0 <prvTaskExitError+0x54>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6e:	d00a      	beq.n	8007f86 <prvTaskExitError+0x2a>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	60fb      	str	r3, [r7, #12]
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <prvTaskExitError+0x28>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	60bb      	str	r3, [r7, #8]
}
 8007f98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f9a:	bf00      	nop
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d0fc      	beq.n	8007f9c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fa2:	bf00      	nop
 8007fa4:	bf00      	nop
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr
 8007fb0:	2000000c 	.word	0x2000000c
	...

08007fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fc0:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <pxCurrentTCBConst2>)
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	6808      	ldr	r0, [r1, #0]
 8007fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fca:	f380 8809 	msr	PSP, r0
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f04f 0000 	mov.w	r0, #0
 8007fd6:	f380 8811 	msr	BASEPRI, r0
 8007fda:	4770      	bx	lr
 8007fdc:	f3af 8000 	nop.w

08007fe0 <pxCurrentTCBConst2>:
 8007fe0:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop

08007fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fe8:	4808      	ldr	r0, [pc, #32]	; (800800c <prvPortStartFirstTask+0x24>)
 8007fea:	6800      	ldr	r0, [r0, #0]
 8007fec:	6800      	ldr	r0, [r0, #0]
 8007fee:	f380 8808 	msr	MSP, r0
 8007ff2:	f04f 0000 	mov.w	r0, #0
 8007ff6:	f380 8814 	msr	CONTROL, r0
 8007ffa:	b662      	cpsie	i
 8007ffc:	b661      	cpsie	f
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	df00      	svc	0
 8008008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800800a:	bf00      	nop
 800800c:	e000ed08 	.word	0xe000ed08

08008010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008016:	4b46      	ldr	r3, [pc, #280]	; (8008130 <xPortStartScheduler+0x120>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a46      	ldr	r2, [pc, #280]	; (8008134 <xPortStartScheduler+0x124>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d10a      	bne.n	8008036 <xPortStartScheduler+0x26>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	613b      	str	r3, [r7, #16]
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008036:	4b3e      	ldr	r3, [pc, #248]	; (8008130 <xPortStartScheduler+0x120>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a3f      	ldr	r2, [pc, #252]	; (8008138 <xPortStartScheduler+0x128>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d10a      	bne.n	8008056 <xPortStartScheduler+0x46>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	60fb      	str	r3, [r7, #12]
}
 8008052:	bf00      	nop
 8008054:	e7fe      	b.n	8008054 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008056:	4b39      	ldr	r3, [pc, #228]	; (800813c <xPortStartScheduler+0x12c>)
 8008058:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	b2db      	uxtb	r3, r3
 8008060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	22ff      	movs	r2, #255	; 0xff
 8008066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008078:	b2da      	uxtb	r2, r3
 800807a:	4b31      	ldr	r3, [pc, #196]	; (8008140 <xPortStartScheduler+0x130>)
 800807c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800807e:	4b31      	ldr	r3, [pc, #196]	; (8008144 <xPortStartScheduler+0x134>)
 8008080:	2207      	movs	r2, #7
 8008082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008084:	e009      	b.n	800809a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008086:	4b2f      	ldr	r3, [pc, #188]	; (8008144 <xPortStartScheduler+0x134>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3b01      	subs	r3, #1
 800808c:	4a2d      	ldr	r2, [pc, #180]	; (8008144 <xPortStartScheduler+0x134>)
 800808e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	b2db      	uxtb	r3, r3
 8008098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800809a:	78fb      	ldrb	r3, [r7, #3]
 800809c:	b2db      	uxtb	r3, r3
 800809e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a2:	2b80      	cmp	r3, #128	; 0x80
 80080a4:	d0ef      	beq.n	8008086 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080a6:	4b27      	ldr	r3, [pc, #156]	; (8008144 <xPortStartScheduler+0x134>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f1c3 0307 	rsb	r3, r3, #7
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d00a      	beq.n	80080c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80080b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b6:	f383 8811 	msr	BASEPRI, r3
 80080ba:	f3bf 8f6f 	isb	sy
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	60bb      	str	r3, [r7, #8]
}
 80080c4:	bf00      	nop
 80080c6:	e7fe      	b.n	80080c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080c8:	4b1e      	ldr	r3, [pc, #120]	; (8008144 <xPortStartScheduler+0x134>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	021b      	lsls	r3, r3, #8
 80080ce:	4a1d      	ldr	r2, [pc, #116]	; (8008144 <xPortStartScheduler+0x134>)
 80080d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080d2:	4b1c      	ldr	r3, [pc, #112]	; (8008144 <xPortStartScheduler+0x134>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080da:	4a1a      	ldr	r2, [pc, #104]	; (8008144 <xPortStartScheduler+0x134>)
 80080dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080e6:	4b18      	ldr	r3, [pc, #96]	; (8008148 <xPortStartScheduler+0x138>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a17      	ldr	r2, [pc, #92]	; (8008148 <xPortStartScheduler+0x138>)
 80080ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080f2:	4b15      	ldr	r3, [pc, #84]	; (8008148 <xPortStartScheduler+0x138>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a14      	ldr	r2, [pc, #80]	; (8008148 <xPortStartScheduler+0x138>)
 80080f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080fe:	f000 f8dd 	bl	80082bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008102:	4b12      	ldr	r3, [pc, #72]	; (800814c <xPortStartScheduler+0x13c>)
 8008104:	2200      	movs	r2, #0
 8008106:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008108:	f000 f8fc 	bl	8008304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800810c:	4b10      	ldr	r3, [pc, #64]	; (8008150 <xPortStartScheduler+0x140>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a0f      	ldr	r2, [pc, #60]	; (8008150 <xPortStartScheduler+0x140>)
 8008112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008116:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008118:	f7ff ff66 	bl	8007fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800811c:	f7ff fa82 	bl	8007624 <vTaskSwitchContext>
	prvTaskExitError();
 8008120:	f7ff ff1c 	bl	8007f5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	e000ed00 	.word	0xe000ed00
 8008134:	410fc271 	.word	0x410fc271
 8008138:	410fc270 	.word	0x410fc270
 800813c:	e000e400 	.word	0xe000e400
 8008140:	2000094c 	.word	0x2000094c
 8008144:	20000950 	.word	0x20000950
 8008148:	e000ed20 	.word	0xe000ed20
 800814c:	2000000c 	.word	0x2000000c
 8008150:	e000ef34 	.word	0xe000ef34

08008154 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	607b      	str	r3, [r7, #4]
}
 800816c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800816e:	4b0f      	ldr	r3, [pc, #60]	; (80081ac <vPortEnterCritical+0x58>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3301      	adds	r3, #1
 8008174:	4a0d      	ldr	r2, [pc, #52]	; (80081ac <vPortEnterCritical+0x58>)
 8008176:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008178:	4b0c      	ldr	r3, [pc, #48]	; (80081ac <vPortEnterCritical+0x58>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d10f      	bne.n	80081a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008180:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <vPortEnterCritical+0x5c>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800818a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818e:	f383 8811 	msr	BASEPRI, r3
 8008192:	f3bf 8f6f 	isb	sy
 8008196:	f3bf 8f4f 	dsb	sy
 800819a:	603b      	str	r3, [r7, #0]
}
 800819c:	bf00      	nop
 800819e:	e7fe      	b.n	800819e <vPortEnterCritical+0x4a>
	}
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	2000000c 	.word	0x2000000c
 80081b0:	e000ed04 	.word	0xe000ed04

080081b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081ba:	4b12      	ldr	r3, [pc, #72]	; (8008204 <vPortExitCritical+0x50>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10a      	bne.n	80081d8 <vPortExitCritical+0x24>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	607b      	str	r3, [r7, #4]
}
 80081d4:	bf00      	nop
 80081d6:	e7fe      	b.n	80081d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80081d8:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <vPortExitCritical+0x50>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3b01      	subs	r3, #1
 80081de:	4a09      	ldr	r2, [pc, #36]	; (8008204 <vPortExitCritical+0x50>)
 80081e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081e2:	4b08      	ldr	r3, [pc, #32]	; (8008204 <vPortExitCritical+0x50>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d105      	bne.n	80081f6 <vPortExitCritical+0x42>
 80081ea:	2300      	movs	r3, #0
 80081ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	f383 8811 	msr	BASEPRI, r3
}
 80081f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081f6:	bf00      	nop
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	2000000c 	.word	0x2000000c
	...

08008210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008210:	f3ef 8009 	mrs	r0, PSP
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	4b15      	ldr	r3, [pc, #84]	; (8008270 <pxCurrentTCBConst>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	f01e 0f10 	tst.w	lr, #16
 8008220:	bf08      	it	eq
 8008222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800822a:	6010      	str	r0, [r2, #0]
 800822c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008234:	f380 8811 	msr	BASEPRI, r0
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f7ff f9f0 	bl	8007624 <vTaskSwitchContext>
 8008244:	f04f 0000 	mov.w	r0, #0
 8008248:	f380 8811 	msr	BASEPRI, r0
 800824c:	bc09      	pop	{r0, r3}
 800824e:	6819      	ldr	r1, [r3, #0]
 8008250:	6808      	ldr	r0, [r1, #0]
 8008252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008256:	f01e 0f10 	tst.w	lr, #16
 800825a:	bf08      	it	eq
 800825c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008260:	f380 8809 	msr	PSP, r0
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	f3af 8000 	nop.w

08008270 <pxCurrentTCBConst>:
 8008270:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008274:	bf00      	nop
 8008276:	bf00      	nop

08008278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
	__asm volatile
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	607b      	str	r3, [r7, #4]
}
 8008290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008292:	f7ff f90f 	bl	80074b4 <xTaskIncrementTick>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800829c:	4b06      	ldr	r3, [pc, #24]	; (80082b8 <SysTick_Handler+0x40>)
 800829e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	2300      	movs	r3, #0
 80082a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	f383 8811 	msr	BASEPRI, r3
}
 80082ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80082b0:	bf00      	nop
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	e000ed04 	.word	0xe000ed04

080082bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082c0:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <vPortSetupTimerInterrupt+0x34>)
 80082c2:	2200      	movs	r2, #0
 80082c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082c6:	4b0b      	ldr	r3, [pc, #44]	; (80082f4 <vPortSetupTimerInterrupt+0x38>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082cc:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <vPortSetupTimerInterrupt+0x3c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a0a      	ldr	r2, [pc, #40]	; (80082fc <vPortSetupTimerInterrupt+0x40>)
 80082d2:	fba2 2303 	umull	r2, r3, r2, r3
 80082d6:	099b      	lsrs	r3, r3, #6
 80082d8:	4a09      	ldr	r2, [pc, #36]	; (8008300 <vPortSetupTimerInterrupt+0x44>)
 80082da:	3b01      	subs	r3, #1
 80082dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082de:	4b04      	ldr	r3, [pc, #16]	; (80082f0 <vPortSetupTimerInterrupt+0x34>)
 80082e0:	2207      	movs	r2, #7
 80082e2:	601a      	str	r2, [r3, #0]
}
 80082e4:	bf00      	nop
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	e000e010 	.word	0xe000e010
 80082f4:	e000e018 	.word	0xe000e018
 80082f8:	20000000 	.word	0x20000000
 80082fc:	10624dd3 	.word	0x10624dd3
 8008300:	e000e014 	.word	0xe000e014

08008304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008314 <vPortEnableVFP+0x10>
 8008308:	6801      	ldr	r1, [r0, #0]
 800830a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800830e:	6001      	str	r1, [r0, #0]
 8008310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008312:	bf00      	nop
 8008314:	e000ed88 	.word	0xe000ed88

08008318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800831e:	f3ef 8305 	mrs	r3, IPSR
 8008322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b0f      	cmp	r3, #15
 8008328:	d914      	bls.n	8008354 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800832a:	4a17      	ldr	r2, [pc, #92]	; (8008388 <vPortValidateInterruptPriority+0x70>)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	4413      	add	r3, r2
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008334:	4b15      	ldr	r3, [pc, #84]	; (800838c <vPortValidateInterruptPriority+0x74>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	7afa      	ldrb	r2, [r7, #11]
 800833a:	429a      	cmp	r2, r3
 800833c:	d20a      	bcs.n	8008354 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	607b      	str	r3, [r7, #4]
}
 8008350:	bf00      	nop
 8008352:	e7fe      	b.n	8008352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008354:	4b0e      	ldr	r3, [pc, #56]	; (8008390 <vPortValidateInterruptPriority+0x78>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800835c:	4b0d      	ldr	r3, [pc, #52]	; (8008394 <vPortValidateInterruptPriority+0x7c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	429a      	cmp	r2, r3
 8008362:	d90a      	bls.n	800837a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	f383 8811 	msr	BASEPRI, r3
 800836c:	f3bf 8f6f 	isb	sy
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	603b      	str	r3, [r7, #0]
}
 8008376:	bf00      	nop
 8008378:	e7fe      	b.n	8008378 <vPortValidateInterruptPriority+0x60>
	}
 800837a:	bf00      	nop
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	e000e3f0 	.word	0xe000e3f0
 800838c:	2000094c 	.word	0x2000094c
 8008390:	e000ed0c 	.word	0xe000ed0c
 8008394:	20000950 	.word	0x20000950

08008398 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08a      	sub	sp, #40	; 0x28
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083a4:	f7fe ffdc 	bl	8007360 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083a8:	4b5b      	ldr	r3, [pc, #364]	; (8008518 <pvPortMalloc+0x180>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083b0:	f000 f920 	bl	80085f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083b4:	4b59      	ldr	r3, [pc, #356]	; (800851c <pvPortMalloc+0x184>)
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4013      	ands	r3, r2
 80083bc:	2b00      	cmp	r3, #0
 80083be:	f040 8093 	bne.w	80084e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01d      	beq.n	8008404 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80083c8:	2208      	movs	r2, #8
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4413      	add	r3, r2
 80083ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d014      	beq.n	8008404 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f023 0307 	bic.w	r3, r3, #7
 80083e0:	3308      	adds	r3, #8
 80083e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00a      	beq.n	8008404 <pvPortMalloc+0x6c>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	617b      	str	r3, [r7, #20]
}
 8008400:	bf00      	nop
 8008402:	e7fe      	b.n	8008402 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d06e      	beq.n	80084e8 <pvPortMalloc+0x150>
 800840a:	4b45      	ldr	r3, [pc, #276]	; (8008520 <pvPortMalloc+0x188>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	429a      	cmp	r2, r3
 8008412:	d869      	bhi.n	80084e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008414:	4b43      	ldr	r3, [pc, #268]	; (8008524 <pvPortMalloc+0x18c>)
 8008416:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008418:	4b42      	ldr	r3, [pc, #264]	; (8008524 <pvPortMalloc+0x18c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800841e:	e004      	b.n	800842a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	429a      	cmp	r2, r3
 8008432:	d903      	bls.n	800843c <pvPortMalloc+0xa4>
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1f1      	bne.n	8008420 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800843c:	4b36      	ldr	r3, [pc, #216]	; (8008518 <pvPortMalloc+0x180>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008442:	429a      	cmp	r2, r3
 8008444:	d050      	beq.n	80084e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2208      	movs	r2, #8
 800844c:	4413      	add	r3, r2
 800844e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	6a3b      	ldr	r3, [r7, #32]
 8008456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	1ad2      	subs	r2, r2, r3
 8008460:	2308      	movs	r3, #8
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	429a      	cmp	r2, r3
 8008466:	d91f      	bls.n	80084a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	4413      	add	r3, r2
 800846e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <pvPortMalloc+0xf8>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	613b      	str	r3, [r7, #16]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	1ad2      	subs	r2, r2, r3
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084a2:	69b8      	ldr	r0, [r7, #24]
 80084a4:	f000 f908 	bl	80086b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084a8:	4b1d      	ldr	r3, [pc, #116]	; (8008520 <pvPortMalloc+0x188>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	4a1b      	ldr	r2, [pc, #108]	; (8008520 <pvPortMalloc+0x188>)
 80084b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084b6:	4b1a      	ldr	r3, [pc, #104]	; (8008520 <pvPortMalloc+0x188>)
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	4b1b      	ldr	r3, [pc, #108]	; (8008528 <pvPortMalloc+0x190>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d203      	bcs.n	80084ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084c2:	4b17      	ldr	r3, [pc, #92]	; (8008520 <pvPortMalloc+0x188>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a18      	ldr	r2, [pc, #96]	; (8008528 <pvPortMalloc+0x190>)
 80084c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	4b13      	ldr	r3, [pc, #76]	; (800851c <pvPortMalloc+0x184>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	431a      	orrs	r2, r3
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	2200      	movs	r2, #0
 80084dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80084de:	4b13      	ldr	r3, [pc, #76]	; (800852c <pvPortMalloc+0x194>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3301      	adds	r3, #1
 80084e4:	4a11      	ldr	r2, [pc, #68]	; (800852c <pvPortMalloc+0x194>)
 80084e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084e8:	f7fe ff48 	bl	800737c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	f003 0307 	and.w	r3, r3, #7
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <pvPortMalloc+0x174>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	60fb      	str	r3, [r7, #12]
}
 8008508:	bf00      	nop
 800850a:	e7fe      	b.n	800850a <pvPortMalloc+0x172>
	return pvReturn;
 800850c:	69fb      	ldr	r3, [r7, #28]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3728      	adds	r7, #40	; 0x28
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	2000455c 	.word	0x2000455c
 800851c:	20004570 	.word	0x20004570
 8008520:	20004560 	.word	0x20004560
 8008524:	20004554 	.word	0x20004554
 8008528:	20004564 	.word	0x20004564
 800852c:	20004568 	.word	0x20004568

08008530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d04d      	beq.n	80085de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008542:	2308      	movs	r3, #8
 8008544:	425b      	negs	r3, r3
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4413      	add	r3, r2
 800854a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	4b24      	ldr	r3, [pc, #144]	; (80085e8 <vPortFree+0xb8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4013      	ands	r3, r2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10a      	bne.n	8008574 <vPortFree+0x44>
	__asm volatile
 800855e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008562:	f383 8811 	msr	BASEPRI, r3
 8008566:	f3bf 8f6f 	isb	sy
 800856a:	f3bf 8f4f 	dsb	sy
 800856e:	60fb      	str	r3, [r7, #12]
}
 8008570:	bf00      	nop
 8008572:	e7fe      	b.n	8008572 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <vPortFree+0x62>
	__asm volatile
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	60bb      	str	r3, [r7, #8]
}
 800858e:	bf00      	nop
 8008590:	e7fe      	b.n	8008590 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	4b14      	ldr	r3, [pc, #80]	; (80085e8 <vPortFree+0xb8>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4013      	ands	r3, r2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01e      	beq.n	80085de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d11a      	bne.n	80085de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	685a      	ldr	r2, [r3, #4]
 80085ac:	4b0e      	ldr	r3, [pc, #56]	; (80085e8 <vPortFree+0xb8>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	43db      	mvns	r3, r3
 80085b2:	401a      	ands	r2, r3
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085b8:	f7fe fed2 	bl	8007360 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <vPortFree+0xbc>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4413      	add	r3, r2
 80085c6:	4a09      	ldr	r2, [pc, #36]	; (80085ec <vPortFree+0xbc>)
 80085c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085ca:	6938      	ldr	r0, [r7, #16]
 80085cc:	f000 f874 	bl	80086b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80085d0:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <vPortFree+0xc0>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	3301      	adds	r3, #1
 80085d6:	4a06      	ldr	r2, [pc, #24]	; (80085f0 <vPortFree+0xc0>)
 80085d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80085da:	f7fe fecf 	bl	800737c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085de:	bf00      	nop
 80085e0:	3718      	adds	r7, #24
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	20004570 	.word	0x20004570
 80085ec:	20004560 	.word	0x20004560
 80085f0:	2000456c 	.word	0x2000456c

080085f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80085fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008600:	4b27      	ldr	r3, [pc, #156]	; (80086a0 <prvHeapInit+0xac>)
 8008602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f003 0307 	and.w	r3, r3, #7
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00c      	beq.n	8008628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	3307      	adds	r3, #7
 8008612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0307 	bic.w	r3, r3, #7
 800861a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	4a1f      	ldr	r2, [pc, #124]	; (80086a0 <prvHeapInit+0xac>)
 8008624:	4413      	add	r3, r2
 8008626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800862c:	4a1d      	ldr	r2, [pc, #116]	; (80086a4 <prvHeapInit+0xb0>)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008632:	4b1c      	ldr	r3, [pc, #112]	; (80086a4 <prvHeapInit+0xb0>)
 8008634:	2200      	movs	r2, #0
 8008636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	4413      	add	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008640:	2208      	movs	r2, #8
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	1a9b      	subs	r3, r3, r2
 8008646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	f023 0307 	bic.w	r3, r3, #7
 800864e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4a15      	ldr	r2, [pc, #84]	; (80086a8 <prvHeapInit+0xb4>)
 8008654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008656:	4b14      	ldr	r3, [pc, #80]	; (80086a8 <prvHeapInit+0xb4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2200      	movs	r2, #0
 800865c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800865e:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <prvHeapInit+0xb4>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	1ad2      	subs	r2, r2, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008674:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <prvHeapInit+0xb4>)
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	4a0a      	ldr	r2, [pc, #40]	; (80086ac <prvHeapInit+0xb8>)
 8008682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	4a09      	ldr	r2, [pc, #36]	; (80086b0 <prvHeapInit+0xbc>)
 800868a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800868c:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <prvHeapInit+0xc0>)
 800868e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008692:	601a      	str	r2, [r3, #0]
}
 8008694:	bf00      	nop
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	20000954 	.word	0x20000954
 80086a4:	20004554 	.word	0x20004554
 80086a8:	2000455c 	.word	0x2000455c
 80086ac:	20004564 	.word	0x20004564
 80086b0:	20004560 	.word	0x20004560
 80086b4:	20004570 	.word	0x20004570

080086b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086c0:	4b28      	ldr	r3, [pc, #160]	; (8008764 <prvInsertBlockIntoFreeList+0xac>)
 80086c2:	60fb      	str	r3, [r7, #12]
 80086c4:	e002      	b.n	80086cc <prvInsertBlockIntoFreeList+0x14>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60fb      	str	r3, [r7, #12]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d8f7      	bhi.n	80086c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	4413      	add	r3, r2
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d108      	bne.n	80086fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	441a      	add	r2, r3
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	68ba      	ldr	r2, [r7, #8]
 8008704:	441a      	add	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	429a      	cmp	r2, r3
 800870c:	d118      	bne.n	8008740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	4b15      	ldr	r3, [pc, #84]	; (8008768 <prvInsertBlockIntoFreeList+0xb0>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d00d      	beq.n	8008736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	441a      	add	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	e008      	b.n	8008748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008736:	4b0c      	ldr	r3, [pc, #48]	; (8008768 <prvInsertBlockIntoFreeList+0xb0>)
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	e003      	b.n	8008748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	429a      	cmp	r2, r3
 800874e:	d002      	beq.n	8008756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008756:	bf00      	nop
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	20004554 	.word	0x20004554
 8008768:	2000455c 	.word	0x2000455c

0800876c <atof>:
 800876c:	2100      	movs	r1, #0
 800876e:	f001 bd39 	b.w	800a1e4 <strtod>
	...

08008774 <__errno>:
 8008774:	4b01      	ldr	r3, [pc, #4]	; (800877c <__errno+0x8>)
 8008776:	6818      	ldr	r0, [r3, #0]
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	20000010 	.word	0x20000010

08008780 <std>:
 8008780:	2300      	movs	r3, #0
 8008782:	b510      	push	{r4, lr}
 8008784:	4604      	mov	r4, r0
 8008786:	e9c0 3300 	strd	r3, r3, [r0]
 800878a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800878e:	6083      	str	r3, [r0, #8]
 8008790:	8181      	strh	r1, [r0, #12]
 8008792:	6643      	str	r3, [r0, #100]	; 0x64
 8008794:	81c2      	strh	r2, [r0, #14]
 8008796:	6183      	str	r3, [r0, #24]
 8008798:	4619      	mov	r1, r3
 800879a:	2208      	movs	r2, #8
 800879c:	305c      	adds	r0, #92	; 0x5c
 800879e:	f000 f91a 	bl	80089d6 <memset>
 80087a2:	4b05      	ldr	r3, [pc, #20]	; (80087b8 <std+0x38>)
 80087a4:	6263      	str	r3, [r4, #36]	; 0x24
 80087a6:	4b05      	ldr	r3, [pc, #20]	; (80087bc <std+0x3c>)
 80087a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80087aa:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <std+0x40>)
 80087ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087ae:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <std+0x44>)
 80087b0:	6224      	str	r4, [r4, #32]
 80087b2:	6323      	str	r3, [r4, #48]	; 0x30
 80087b4:	bd10      	pop	{r4, pc}
 80087b6:	bf00      	nop
 80087b8:	08009519 	.word	0x08009519
 80087bc:	0800953b 	.word	0x0800953b
 80087c0:	08009573 	.word	0x08009573
 80087c4:	08009597 	.word	0x08009597

080087c8 <_cleanup_r>:
 80087c8:	4901      	ldr	r1, [pc, #4]	; (80087d0 <_cleanup_r+0x8>)
 80087ca:	f000 b8af 	b.w	800892c <_fwalk_reent>
 80087ce:	bf00      	nop
 80087d0:	0800b041 	.word	0x0800b041

080087d4 <__sfmoreglue>:
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	2268      	movs	r2, #104	; 0x68
 80087d8:	1e4d      	subs	r5, r1, #1
 80087da:	4355      	muls	r5, r2
 80087dc:	460e      	mov	r6, r1
 80087de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087e2:	f000 f921 	bl	8008a28 <_malloc_r>
 80087e6:	4604      	mov	r4, r0
 80087e8:	b140      	cbz	r0, 80087fc <__sfmoreglue+0x28>
 80087ea:	2100      	movs	r1, #0
 80087ec:	e9c0 1600 	strd	r1, r6, [r0]
 80087f0:	300c      	adds	r0, #12
 80087f2:	60a0      	str	r0, [r4, #8]
 80087f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087f8:	f000 f8ed 	bl	80089d6 <memset>
 80087fc:	4620      	mov	r0, r4
 80087fe:	bd70      	pop	{r4, r5, r6, pc}

08008800 <__sfp_lock_acquire>:
 8008800:	4801      	ldr	r0, [pc, #4]	; (8008808 <__sfp_lock_acquire+0x8>)
 8008802:	f000 b8d8 	b.w	80089b6 <__retarget_lock_acquire_recursive>
 8008806:	bf00      	nop
 8008808:	20004575 	.word	0x20004575

0800880c <__sfp_lock_release>:
 800880c:	4801      	ldr	r0, [pc, #4]	; (8008814 <__sfp_lock_release+0x8>)
 800880e:	f000 b8d3 	b.w	80089b8 <__retarget_lock_release_recursive>
 8008812:	bf00      	nop
 8008814:	20004575 	.word	0x20004575

08008818 <__sinit_lock_acquire>:
 8008818:	4801      	ldr	r0, [pc, #4]	; (8008820 <__sinit_lock_acquire+0x8>)
 800881a:	f000 b8cc 	b.w	80089b6 <__retarget_lock_acquire_recursive>
 800881e:	bf00      	nop
 8008820:	20004576 	.word	0x20004576

08008824 <__sinit_lock_release>:
 8008824:	4801      	ldr	r0, [pc, #4]	; (800882c <__sinit_lock_release+0x8>)
 8008826:	f000 b8c7 	b.w	80089b8 <__retarget_lock_release_recursive>
 800882a:	bf00      	nop
 800882c:	20004576 	.word	0x20004576

08008830 <__sinit>:
 8008830:	b510      	push	{r4, lr}
 8008832:	4604      	mov	r4, r0
 8008834:	f7ff fff0 	bl	8008818 <__sinit_lock_acquire>
 8008838:	69a3      	ldr	r3, [r4, #24]
 800883a:	b11b      	cbz	r3, 8008844 <__sinit+0x14>
 800883c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008840:	f7ff bff0 	b.w	8008824 <__sinit_lock_release>
 8008844:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008848:	6523      	str	r3, [r4, #80]	; 0x50
 800884a:	4b13      	ldr	r3, [pc, #76]	; (8008898 <__sinit+0x68>)
 800884c:	4a13      	ldr	r2, [pc, #76]	; (800889c <__sinit+0x6c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	62a2      	str	r2, [r4, #40]	; 0x28
 8008852:	42a3      	cmp	r3, r4
 8008854:	bf04      	itt	eq
 8008856:	2301      	moveq	r3, #1
 8008858:	61a3      	streq	r3, [r4, #24]
 800885a:	4620      	mov	r0, r4
 800885c:	f000 f820 	bl	80088a0 <__sfp>
 8008860:	6060      	str	r0, [r4, #4]
 8008862:	4620      	mov	r0, r4
 8008864:	f000 f81c 	bl	80088a0 <__sfp>
 8008868:	60a0      	str	r0, [r4, #8]
 800886a:	4620      	mov	r0, r4
 800886c:	f000 f818 	bl	80088a0 <__sfp>
 8008870:	2200      	movs	r2, #0
 8008872:	60e0      	str	r0, [r4, #12]
 8008874:	2104      	movs	r1, #4
 8008876:	6860      	ldr	r0, [r4, #4]
 8008878:	f7ff ff82 	bl	8008780 <std>
 800887c:	68a0      	ldr	r0, [r4, #8]
 800887e:	2201      	movs	r2, #1
 8008880:	2109      	movs	r1, #9
 8008882:	f7ff ff7d 	bl	8008780 <std>
 8008886:	68e0      	ldr	r0, [r4, #12]
 8008888:	2202      	movs	r2, #2
 800888a:	2112      	movs	r1, #18
 800888c:	f7ff ff78 	bl	8008780 <std>
 8008890:	2301      	movs	r3, #1
 8008892:	61a3      	str	r3, [r4, #24]
 8008894:	e7d2      	b.n	800883c <__sinit+0xc>
 8008896:	bf00      	nop
 8008898:	0800cd88 	.word	0x0800cd88
 800889c:	080087c9 	.word	0x080087c9

080088a0 <__sfp>:
 80088a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a2:	4607      	mov	r7, r0
 80088a4:	f7ff ffac 	bl	8008800 <__sfp_lock_acquire>
 80088a8:	4b1e      	ldr	r3, [pc, #120]	; (8008924 <__sfp+0x84>)
 80088aa:	681e      	ldr	r6, [r3, #0]
 80088ac:	69b3      	ldr	r3, [r6, #24]
 80088ae:	b913      	cbnz	r3, 80088b6 <__sfp+0x16>
 80088b0:	4630      	mov	r0, r6
 80088b2:	f7ff ffbd 	bl	8008830 <__sinit>
 80088b6:	3648      	adds	r6, #72	; 0x48
 80088b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088bc:	3b01      	subs	r3, #1
 80088be:	d503      	bpl.n	80088c8 <__sfp+0x28>
 80088c0:	6833      	ldr	r3, [r6, #0]
 80088c2:	b30b      	cbz	r3, 8008908 <__sfp+0x68>
 80088c4:	6836      	ldr	r6, [r6, #0]
 80088c6:	e7f7      	b.n	80088b8 <__sfp+0x18>
 80088c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088cc:	b9d5      	cbnz	r5, 8008904 <__sfp+0x64>
 80088ce:	4b16      	ldr	r3, [pc, #88]	; (8008928 <__sfp+0x88>)
 80088d0:	60e3      	str	r3, [r4, #12]
 80088d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088d6:	6665      	str	r5, [r4, #100]	; 0x64
 80088d8:	f000 f86c 	bl	80089b4 <__retarget_lock_init_recursive>
 80088dc:	f7ff ff96 	bl	800880c <__sfp_lock_release>
 80088e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088e8:	6025      	str	r5, [r4, #0]
 80088ea:	61a5      	str	r5, [r4, #24]
 80088ec:	2208      	movs	r2, #8
 80088ee:	4629      	mov	r1, r5
 80088f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088f4:	f000 f86f 	bl	80089d6 <memset>
 80088f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008900:	4620      	mov	r0, r4
 8008902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008904:	3468      	adds	r4, #104	; 0x68
 8008906:	e7d9      	b.n	80088bc <__sfp+0x1c>
 8008908:	2104      	movs	r1, #4
 800890a:	4638      	mov	r0, r7
 800890c:	f7ff ff62 	bl	80087d4 <__sfmoreglue>
 8008910:	4604      	mov	r4, r0
 8008912:	6030      	str	r0, [r6, #0]
 8008914:	2800      	cmp	r0, #0
 8008916:	d1d5      	bne.n	80088c4 <__sfp+0x24>
 8008918:	f7ff ff78 	bl	800880c <__sfp_lock_release>
 800891c:	230c      	movs	r3, #12
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	e7ee      	b.n	8008900 <__sfp+0x60>
 8008922:	bf00      	nop
 8008924:	0800cd88 	.word	0x0800cd88
 8008928:	ffff0001 	.word	0xffff0001

0800892c <_fwalk_reent>:
 800892c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008930:	4606      	mov	r6, r0
 8008932:	4688      	mov	r8, r1
 8008934:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008938:	2700      	movs	r7, #0
 800893a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800893e:	f1b9 0901 	subs.w	r9, r9, #1
 8008942:	d505      	bpl.n	8008950 <_fwalk_reent+0x24>
 8008944:	6824      	ldr	r4, [r4, #0]
 8008946:	2c00      	cmp	r4, #0
 8008948:	d1f7      	bne.n	800893a <_fwalk_reent+0xe>
 800894a:	4638      	mov	r0, r7
 800894c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008950:	89ab      	ldrh	r3, [r5, #12]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d907      	bls.n	8008966 <_fwalk_reent+0x3a>
 8008956:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800895a:	3301      	adds	r3, #1
 800895c:	d003      	beq.n	8008966 <_fwalk_reent+0x3a>
 800895e:	4629      	mov	r1, r5
 8008960:	4630      	mov	r0, r6
 8008962:	47c0      	blx	r8
 8008964:	4307      	orrs	r7, r0
 8008966:	3568      	adds	r5, #104	; 0x68
 8008968:	e7e9      	b.n	800893e <_fwalk_reent+0x12>
	...

0800896c <__libc_init_array>:
 800896c:	b570      	push	{r4, r5, r6, lr}
 800896e:	4d0d      	ldr	r5, [pc, #52]	; (80089a4 <__libc_init_array+0x38>)
 8008970:	4c0d      	ldr	r4, [pc, #52]	; (80089a8 <__libc_init_array+0x3c>)
 8008972:	1b64      	subs	r4, r4, r5
 8008974:	10a4      	asrs	r4, r4, #2
 8008976:	2600      	movs	r6, #0
 8008978:	42a6      	cmp	r6, r4
 800897a:	d109      	bne.n	8008990 <__libc_init_array+0x24>
 800897c:	4d0b      	ldr	r5, [pc, #44]	; (80089ac <__libc_init_array+0x40>)
 800897e:	4c0c      	ldr	r4, [pc, #48]	; (80089b0 <__libc_init_array+0x44>)
 8008980:	f004 f970 	bl	800cc64 <_init>
 8008984:	1b64      	subs	r4, r4, r5
 8008986:	10a4      	asrs	r4, r4, #2
 8008988:	2600      	movs	r6, #0
 800898a:	42a6      	cmp	r6, r4
 800898c:	d105      	bne.n	800899a <__libc_init_array+0x2e>
 800898e:	bd70      	pop	{r4, r5, r6, pc}
 8008990:	f855 3b04 	ldr.w	r3, [r5], #4
 8008994:	4798      	blx	r3
 8008996:	3601      	adds	r6, #1
 8008998:	e7ee      	b.n	8008978 <__libc_init_array+0xc>
 800899a:	f855 3b04 	ldr.w	r3, [r5], #4
 800899e:	4798      	blx	r3
 80089a0:	3601      	adds	r6, #1
 80089a2:	e7f2      	b.n	800898a <__libc_init_array+0x1e>
 80089a4:	0800d1cc 	.word	0x0800d1cc
 80089a8:	0800d1cc 	.word	0x0800d1cc
 80089ac:	0800d1cc 	.word	0x0800d1cc
 80089b0:	0800d1d0 	.word	0x0800d1d0

080089b4 <__retarget_lock_init_recursive>:
 80089b4:	4770      	bx	lr

080089b6 <__retarget_lock_acquire_recursive>:
 80089b6:	4770      	bx	lr

080089b8 <__retarget_lock_release_recursive>:
 80089b8:	4770      	bx	lr

080089ba <memcpy>:
 80089ba:	440a      	add	r2, r1
 80089bc:	4291      	cmp	r1, r2
 80089be:	f100 33ff 	add.w	r3, r0, #4294967295
 80089c2:	d100      	bne.n	80089c6 <memcpy+0xc>
 80089c4:	4770      	bx	lr
 80089c6:	b510      	push	{r4, lr}
 80089c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089d0:	4291      	cmp	r1, r2
 80089d2:	d1f9      	bne.n	80089c8 <memcpy+0xe>
 80089d4:	bd10      	pop	{r4, pc}

080089d6 <memset>:
 80089d6:	4402      	add	r2, r0
 80089d8:	4603      	mov	r3, r0
 80089da:	4293      	cmp	r3, r2
 80089dc:	d100      	bne.n	80089e0 <memset+0xa>
 80089de:	4770      	bx	lr
 80089e0:	f803 1b01 	strb.w	r1, [r3], #1
 80089e4:	e7f9      	b.n	80089da <memset+0x4>
	...

080089e8 <sbrk_aligned>:
 80089e8:	b570      	push	{r4, r5, r6, lr}
 80089ea:	4e0e      	ldr	r6, [pc, #56]	; (8008a24 <sbrk_aligned+0x3c>)
 80089ec:	460c      	mov	r4, r1
 80089ee:	6831      	ldr	r1, [r6, #0]
 80089f0:	4605      	mov	r5, r0
 80089f2:	b911      	cbnz	r1, 80089fa <sbrk_aligned+0x12>
 80089f4:	f000 fd60 	bl	80094b8 <_sbrk_r>
 80089f8:	6030      	str	r0, [r6, #0]
 80089fa:	4621      	mov	r1, r4
 80089fc:	4628      	mov	r0, r5
 80089fe:	f000 fd5b 	bl	80094b8 <_sbrk_r>
 8008a02:	1c43      	adds	r3, r0, #1
 8008a04:	d00a      	beq.n	8008a1c <sbrk_aligned+0x34>
 8008a06:	1cc4      	adds	r4, r0, #3
 8008a08:	f024 0403 	bic.w	r4, r4, #3
 8008a0c:	42a0      	cmp	r0, r4
 8008a0e:	d007      	beq.n	8008a20 <sbrk_aligned+0x38>
 8008a10:	1a21      	subs	r1, r4, r0
 8008a12:	4628      	mov	r0, r5
 8008a14:	f000 fd50 	bl	80094b8 <_sbrk_r>
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d101      	bne.n	8008a20 <sbrk_aligned+0x38>
 8008a1c:	f04f 34ff 	mov.w	r4, #4294967295
 8008a20:	4620      	mov	r0, r4
 8008a22:	bd70      	pop	{r4, r5, r6, pc}
 8008a24:	2000457c 	.word	0x2000457c

08008a28 <_malloc_r>:
 8008a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a2c:	1ccd      	adds	r5, r1, #3
 8008a2e:	f025 0503 	bic.w	r5, r5, #3
 8008a32:	3508      	adds	r5, #8
 8008a34:	2d0c      	cmp	r5, #12
 8008a36:	bf38      	it	cc
 8008a38:	250c      	movcc	r5, #12
 8008a3a:	2d00      	cmp	r5, #0
 8008a3c:	4607      	mov	r7, r0
 8008a3e:	db01      	blt.n	8008a44 <_malloc_r+0x1c>
 8008a40:	42a9      	cmp	r1, r5
 8008a42:	d905      	bls.n	8008a50 <_malloc_r+0x28>
 8008a44:	230c      	movs	r3, #12
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	2600      	movs	r6, #0
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a50:	4e2e      	ldr	r6, [pc, #184]	; (8008b0c <_malloc_r+0xe4>)
 8008a52:	f002 fed1 	bl	800b7f8 <__malloc_lock>
 8008a56:	6833      	ldr	r3, [r6, #0]
 8008a58:	461c      	mov	r4, r3
 8008a5a:	bb34      	cbnz	r4, 8008aaa <_malloc_r+0x82>
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	4638      	mov	r0, r7
 8008a60:	f7ff ffc2 	bl	80089e8 <sbrk_aligned>
 8008a64:	1c43      	adds	r3, r0, #1
 8008a66:	4604      	mov	r4, r0
 8008a68:	d14d      	bne.n	8008b06 <_malloc_r+0xde>
 8008a6a:	6834      	ldr	r4, [r6, #0]
 8008a6c:	4626      	mov	r6, r4
 8008a6e:	2e00      	cmp	r6, #0
 8008a70:	d140      	bne.n	8008af4 <_malloc_r+0xcc>
 8008a72:	6823      	ldr	r3, [r4, #0]
 8008a74:	4631      	mov	r1, r6
 8008a76:	4638      	mov	r0, r7
 8008a78:	eb04 0803 	add.w	r8, r4, r3
 8008a7c:	f000 fd1c 	bl	80094b8 <_sbrk_r>
 8008a80:	4580      	cmp	r8, r0
 8008a82:	d13a      	bne.n	8008afa <_malloc_r+0xd2>
 8008a84:	6821      	ldr	r1, [r4, #0]
 8008a86:	3503      	adds	r5, #3
 8008a88:	1a6d      	subs	r5, r5, r1
 8008a8a:	f025 0503 	bic.w	r5, r5, #3
 8008a8e:	3508      	adds	r5, #8
 8008a90:	2d0c      	cmp	r5, #12
 8008a92:	bf38      	it	cc
 8008a94:	250c      	movcc	r5, #12
 8008a96:	4629      	mov	r1, r5
 8008a98:	4638      	mov	r0, r7
 8008a9a:	f7ff ffa5 	bl	80089e8 <sbrk_aligned>
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	d02b      	beq.n	8008afa <_malloc_r+0xd2>
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	442b      	add	r3, r5
 8008aa6:	6023      	str	r3, [r4, #0]
 8008aa8:	e00e      	b.n	8008ac8 <_malloc_r+0xa0>
 8008aaa:	6822      	ldr	r2, [r4, #0]
 8008aac:	1b52      	subs	r2, r2, r5
 8008aae:	d41e      	bmi.n	8008aee <_malloc_r+0xc6>
 8008ab0:	2a0b      	cmp	r2, #11
 8008ab2:	d916      	bls.n	8008ae2 <_malloc_r+0xba>
 8008ab4:	1961      	adds	r1, r4, r5
 8008ab6:	42a3      	cmp	r3, r4
 8008ab8:	6025      	str	r5, [r4, #0]
 8008aba:	bf18      	it	ne
 8008abc:	6059      	strne	r1, [r3, #4]
 8008abe:	6863      	ldr	r3, [r4, #4]
 8008ac0:	bf08      	it	eq
 8008ac2:	6031      	streq	r1, [r6, #0]
 8008ac4:	5162      	str	r2, [r4, r5]
 8008ac6:	604b      	str	r3, [r1, #4]
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f104 060b 	add.w	r6, r4, #11
 8008ace:	f002 fe99 	bl	800b804 <__malloc_unlock>
 8008ad2:	f026 0607 	bic.w	r6, r6, #7
 8008ad6:	1d23      	adds	r3, r4, #4
 8008ad8:	1af2      	subs	r2, r6, r3
 8008ada:	d0b6      	beq.n	8008a4a <_malloc_r+0x22>
 8008adc:	1b9b      	subs	r3, r3, r6
 8008ade:	50a3      	str	r3, [r4, r2]
 8008ae0:	e7b3      	b.n	8008a4a <_malloc_r+0x22>
 8008ae2:	6862      	ldr	r2, [r4, #4]
 8008ae4:	42a3      	cmp	r3, r4
 8008ae6:	bf0c      	ite	eq
 8008ae8:	6032      	streq	r2, [r6, #0]
 8008aea:	605a      	strne	r2, [r3, #4]
 8008aec:	e7ec      	b.n	8008ac8 <_malloc_r+0xa0>
 8008aee:	4623      	mov	r3, r4
 8008af0:	6864      	ldr	r4, [r4, #4]
 8008af2:	e7b2      	b.n	8008a5a <_malloc_r+0x32>
 8008af4:	4634      	mov	r4, r6
 8008af6:	6876      	ldr	r6, [r6, #4]
 8008af8:	e7b9      	b.n	8008a6e <_malloc_r+0x46>
 8008afa:	230c      	movs	r3, #12
 8008afc:	603b      	str	r3, [r7, #0]
 8008afe:	4638      	mov	r0, r7
 8008b00:	f002 fe80 	bl	800b804 <__malloc_unlock>
 8008b04:	e7a1      	b.n	8008a4a <_malloc_r+0x22>
 8008b06:	6025      	str	r5, [r4, #0]
 8008b08:	e7de      	b.n	8008ac8 <_malloc_r+0xa0>
 8008b0a:	bf00      	nop
 8008b0c:	20004578 	.word	0x20004578

08008b10 <__cvt>:
 8008b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b14:	ec55 4b10 	vmov	r4, r5, d0
 8008b18:	2d00      	cmp	r5, #0
 8008b1a:	460e      	mov	r6, r1
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	462b      	mov	r3, r5
 8008b20:	bfbb      	ittet	lt
 8008b22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b26:	461d      	movlt	r5, r3
 8008b28:	2300      	movge	r3, #0
 8008b2a:	232d      	movlt	r3, #45	; 0x2d
 8008b2c:	700b      	strb	r3, [r1, #0]
 8008b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b34:	4691      	mov	r9, r2
 8008b36:	f023 0820 	bic.w	r8, r3, #32
 8008b3a:	bfbc      	itt	lt
 8008b3c:	4622      	movlt	r2, r4
 8008b3e:	4614      	movlt	r4, r2
 8008b40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b44:	d005      	beq.n	8008b52 <__cvt+0x42>
 8008b46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b4a:	d100      	bne.n	8008b4e <__cvt+0x3e>
 8008b4c:	3601      	adds	r6, #1
 8008b4e:	2102      	movs	r1, #2
 8008b50:	e000      	b.n	8008b54 <__cvt+0x44>
 8008b52:	2103      	movs	r1, #3
 8008b54:	ab03      	add	r3, sp, #12
 8008b56:	9301      	str	r3, [sp, #4]
 8008b58:	ab02      	add	r3, sp, #8
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	ec45 4b10 	vmov	d0, r4, r5
 8008b60:	4653      	mov	r3, sl
 8008b62:	4632      	mov	r2, r6
 8008b64:	f001 fbf8 	bl	800a358 <_dtoa_r>
 8008b68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b6c:	4607      	mov	r7, r0
 8008b6e:	d102      	bne.n	8008b76 <__cvt+0x66>
 8008b70:	f019 0f01 	tst.w	r9, #1
 8008b74:	d022      	beq.n	8008bbc <__cvt+0xac>
 8008b76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b7a:	eb07 0906 	add.w	r9, r7, r6
 8008b7e:	d110      	bne.n	8008ba2 <__cvt+0x92>
 8008b80:	783b      	ldrb	r3, [r7, #0]
 8008b82:	2b30      	cmp	r3, #48	; 0x30
 8008b84:	d10a      	bne.n	8008b9c <__cvt+0x8c>
 8008b86:	2200      	movs	r2, #0
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	f7f7 ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b92:	b918      	cbnz	r0, 8008b9c <__cvt+0x8c>
 8008b94:	f1c6 0601 	rsb	r6, r6, #1
 8008b98:	f8ca 6000 	str.w	r6, [sl]
 8008b9c:	f8da 3000 	ldr.w	r3, [sl]
 8008ba0:	4499      	add	r9, r3
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	4629      	mov	r1, r5
 8008baa:	f7f7 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bae:	b108      	cbz	r0, 8008bb4 <__cvt+0xa4>
 8008bb0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008bb4:	2230      	movs	r2, #48	; 0x30
 8008bb6:	9b03      	ldr	r3, [sp, #12]
 8008bb8:	454b      	cmp	r3, r9
 8008bba:	d307      	bcc.n	8008bcc <__cvt+0xbc>
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bc0:	1bdb      	subs	r3, r3, r7
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	b004      	add	sp, #16
 8008bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bcc:	1c59      	adds	r1, r3, #1
 8008bce:	9103      	str	r1, [sp, #12]
 8008bd0:	701a      	strb	r2, [r3, #0]
 8008bd2:	e7f0      	b.n	8008bb6 <__cvt+0xa6>

08008bd4 <__exponent>:
 8008bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2900      	cmp	r1, #0
 8008bda:	bfb8      	it	lt
 8008bdc:	4249      	neglt	r1, r1
 8008bde:	f803 2b02 	strb.w	r2, [r3], #2
 8008be2:	bfb4      	ite	lt
 8008be4:	222d      	movlt	r2, #45	; 0x2d
 8008be6:	222b      	movge	r2, #43	; 0x2b
 8008be8:	2909      	cmp	r1, #9
 8008bea:	7042      	strb	r2, [r0, #1]
 8008bec:	dd2a      	ble.n	8008c44 <__exponent+0x70>
 8008bee:	f10d 0407 	add.w	r4, sp, #7
 8008bf2:	46a4      	mov	ip, r4
 8008bf4:	270a      	movs	r7, #10
 8008bf6:	46a6      	mov	lr, r4
 8008bf8:	460a      	mov	r2, r1
 8008bfa:	fb91 f6f7 	sdiv	r6, r1, r7
 8008bfe:	fb07 1516 	mls	r5, r7, r6, r1
 8008c02:	3530      	adds	r5, #48	; 0x30
 8008c04:	2a63      	cmp	r2, #99	; 0x63
 8008c06:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008c0e:	4631      	mov	r1, r6
 8008c10:	dcf1      	bgt.n	8008bf6 <__exponent+0x22>
 8008c12:	3130      	adds	r1, #48	; 0x30
 8008c14:	f1ae 0502 	sub.w	r5, lr, #2
 8008c18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c1c:	1c44      	adds	r4, r0, #1
 8008c1e:	4629      	mov	r1, r5
 8008c20:	4561      	cmp	r1, ip
 8008c22:	d30a      	bcc.n	8008c3a <__exponent+0x66>
 8008c24:	f10d 0209 	add.w	r2, sp, #9
 8008c28:	eba2 020e 	sub.w	r2, r2, lr
 8008c2c:	4565      	cmp	r5, ip
 8008c2e:	bf88      	it	hi
 8008c30:	2200      	movhi	r2, #0
 8008c32:	4413      	add	r3, r2
 8008c34:	1a18      	subs	r0, r3, r0
 8008c36:	b003      	add	sp, #12
 8008c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008c42:	e7ed      	b.n	8008c20 <__exponent+0x4c>
 8008c44:	2330      	movs	r3, #48	; 0x30
 8008c46:	3130      	adds	r1, #48	; 0x30
 8008c48:	7083      	strb	r3, [r0, #2]
 8008c4a:	70c1      	strb	r1, [r0, #3]
 8008c4c:	1d03      	adds	r3, r0, #4
 8008c4e:	e7f1      	b.n	8008c34 <__exponent+0x60>

08008c50 <_printf_float>:
 8008c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c54:	ed2d 8b02 	vpush	{d8}
 8008c58:	b08d      	sub	sp, #52	; 0x34
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c60:	4616      	mov	r6, r2
 8008c62:	461f      	mov	r7, r3
 8008c64:	4605      	mov	r5, r0
 8008c66:	f002 fd97 	bl	800b798 <_localeconv_r>
 8008c6a:	f8d0 a000 	ldr.w	sl, [r0]
 8008c6e:	4650      	mov	r0, sl
 8008c70:	f7f7 faae 	bl	80001d0 <strlen>
 8008c74:	2300      	movs	r3, #0
 8008c76:	930a      	str	r3, [sp, #40]	; 0x28
 8008c78:	6823      	ldr	r3, [r4, #0]
 8008c7a:	9305      	str	r3, [sp, #20]
 8008c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c84:	3307      	adds	r3, #7
 8008c86:	f023 0307 	bic.w	r3, r3, #7
 8008c8a:	f103 0208 	add.w	r2, r3, #8
 8008c8e:	f8c8 2000 	str.w	r2, [r8]
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ca2:	9307      	str	r3, [sp, #28]
 8008ca4:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ca8:	ee08 0a10 	vmov	s16, r0
 8008cac:	4b9f      	ldr	r3, [pc, #636]	; (8008f2c <_printf_float+0x2dc>)
 8008cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb6:	f7f7 ff39 	bl	8000b2c <__aeabi_dcmpun>
 8008cba:	bb88      	cbnz	r0, 8008d20 <_printf_float+0xd0>
 8008cbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cc0:	4b9a      	ldr	r3, [pc, #616]	; (8008f2c <_printf_float+0x2dc>)
 8008cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc6:	f7f7 ff13 	bl	8000af0 <__aeabi_dcmple>
 8008cca:	bb48      	cbnz	r0, 8008d20 <_printf_float+0xd0>
 8008ccc:	2200      	movs	r2, #0
 8008cce:	2300      	movs	r3, #0
 8008cd0:	4640      	mov	r0, r8
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	f7f7 ff02 	bl	8000adc <__aeabi_dcmplt>
 8008cd8:	b110      	cbz	r0, 8008ce0 <_printf_float+0x90>
 8008cda:	232d      	movs	r3, #45	; 0x2d
 8008cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ce0:	4b93      	ldr	r3, [pc, #588]	; (8008f30 <_printf_float+0x2e0>)
 8008ce2:	4894      	ldr	r0, [pc, #592]	; (8008f34 <_printf_float+0x2e4>)
 8008ce4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ce8:	bf94      	ite	ls
 8008cea:	4698      	movls	r8, r3
 8008cec:	4680      	movhi	r8, r0
 8008cee:	2303      	movs	r3, #3
 8008cf0:	6123      	str	r3, [r4, #16]
 8008cf2:	9b05      	ldr	r3, [sp, #20]
 8008cf4:	f023 0204 	bic.w	r2, r3, #4
 8008cf8:	6022      	str	r2, [r4, #0]
 8008cfa:	f04f 0900 	mov.w	r9, #0
 8008cfe:	9700      	str	r7, [sp, #0]
 8008d00:	4633      	mov	r3, r6
 8008d02:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d04:	4621      	mov	r1, r4
 8008d06:	4628      	mov	r0, r5
 8008d08:	f000 f9d8 	bl	80090bc <_printf_common>
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	f040 8090 	bne.w	8008e32 <_printf_float+0x1e2>
 8008d12:	f04f 30ff 	mov.w	r0, #4294967295
 8008d16:	b00d      	add	sp, #52	; 0x34
 8008d18:	ecbd 8b02 	vpop	{d8}
 8008d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d20:	4642      	mov	r2, r8
 8008d22:	464b      	mov	r3, r9
 8008d24:	4640      	mov	r0, r8
 8008d26:	4649      	mov	r1, r9
 8008d28:	f7f7 ff00 	bl	8000b2c <__aeabi_dcmpun>
 8008d2c:	b140      	cbz	r0, 8008d40 <_printf_float+0xf0>
 8008d2e:	464b      	mov	r3, r9
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	bfbc      	itt	lt
 8008d34:	232d      	movlt	r3, #45	; 0x2d
 8008d36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d3a:	487f      	ldr	r0, [pc, #508]	; (8008f38 <_printf_float+0x2e8>)
 8008d3c:	4b7f      	ldr	r3, [pc, #508]	; (8008f3c <_printf_float+0x2ec>)
 8008d3e:	e7d1      	b.n	8008ce4 <_printf_float+0x94>
 8008d40:	6863      	ldr	r3, [r4, #4]
 8008d42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d46:	9206      	str	r2, [sp, #24]
 8008d48:	1c5a      	adds	r2, r3, #1
 8008d4a:	d13f      	bne.n	8008dcc <_printf_float+0x17c>
 8008d4c:	2306      	movs	r3, #6
 8008d4e:	6063      	str	r3, [r4, #4]
 8008d50:	9b05      	ldr	r3, [sp, #20]
 8008d52:	6861      	ldr	r1, [r4, #4]
 8008d54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d58:	2300      	movs	r3, #0
 8008d5a:	9303      	str	r3, [sp, #12]
 8008d5c:	ab0a      	add	r3, sp, #40	; 0x28
 8008d5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d62:	ab09      	add	r3, sp, #36	; 0x24
 8008d64:	ec49 8b10 	vmov	d0, r8, r9
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	6022      	str	r2, [r4, #0]
 8008d6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d70:	4628      	mov	r0, r5
 8008d72:	f7ff fecd 	bl	8008b10 <__cvt>
 8008d76:	9b06      	ldr	r3, [sp, #24]
 8008d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d7a:	2b47      	cmp	r3, #71	; 0x47
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	d108      	bne.n	8008d92 <_printf_float+0x142>
 8008d80:	1cc8      	adds	r0, r1, #3
 8008d82:	db02      	blt.n	8008d8a <_printf_float+0x13a>
 8008d84:	6863      	ldr	r3, [r4, #4]
 8008d86:	4299      	cmp	r1, r3
 8008d88:	dd41      	ble.n	8008e0e <_printf_float+0x1be>
 8008d8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d8e:	fa5f fb8b 	uxtb.w	fp, fp
 8008d92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d96:	d820      	bhi.n	8008dda <_printf_float+0x18a>
 8008d98:	3901      	subs	r1, #1
 8008d9a:	465a      	mov	r2, fp
 8008d9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008da0:	9109      	str	r1, [sp, #36]	; 0x24
 8008da2:	f7ff ff17 	bl	8008bd4 <__exponent>
 8008da6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008da8:	1813      	adds	r3, r2, r0
 8008daa:	2a01      	cmp	r2, #1
 8008dac:	4681      	mov	r9, r0
 8008dae:	6123      	str	r3, [r4, #16]
 8008db0:	dc02      	bgt.n	8008db8 <_printf_float+0x168>
 8008db2:	6822      	ldr	r2, [r4, #0]
 8008db4:	07d2      	lsls	r2, r2, #31
 8008db6:	d501      	bpl.n	8008dbc <_printf_float+0x16c>
 8008db8:	3301      	adds	r3, #1
 8008dba:	6123      	str	r3, [r4, #16]
 8008dbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d09c      	beq.n	8008cfe <_printf_float+0xae>
 8008dc4:	232d      	movs	r3, #45	; 0x2d
 8008dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dca:	e798      	b.n	8008cfe <_printf_float+0xae>
 8008dcc:	9a06      	ldr	r2, [sp, #24]
 8008dce:	2a47      	cmp	r2, #71	; 0x47
 8008dd0:	d1be      	bne.n	8008d50 <_printf_float+0x100>
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1bc      	bne.n	8008d50 <_printf_float+0x100>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e7b9      	b.n	8008d4e <_printf_float+0xfe>
 8008dda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008dde:	d118      	bne.n	8008e12 <_printf_float+0x1c2>
 8008de0:	2900      	cmp	r1, #0
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	dd0b      	ble.n	8008dfe <_printf_float+0x1ae>
 8008de6:	6121      	str	r1, [r4, #16]
 8008de8:	b913      	cbnz	r3, 8008df0 <_printf_float+0x1a0>
 8008dea:	6822      	ldr	r2, [r4, #0]
 8008dec:	07d0      	lsls	r0, r2, #31
 8008dee:	d502      	bpl.n	8008df6 <_printf_float+0x1a6>
 8008df0:	3301      	adds	r3, #1
 8008df2:	440b      	add	r3, r1
 8008df4:	6123      	str	r3, [r4, #16]
 8008df6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008df8:	f04f 0900 	mov.w	r9, #0
 8008dfc:	e7de      	b.n	8008dbc <_printf_float+0x16c>
 8008dfe:	b913      	cbnz	r3, 8008e06 <_printf_float+0x1b6>
 8008e00:	6822      	ldr	r2, [r4, #0]
 8008e02:	07d2      	lsls	r2, r2, #31
 8008e04:	d501      	bpl.n	8008e0a <_printf_float+0x1ba>
 8008e06:	3302      	adds	r3, #2
 8008e08:	e7f4      	b.n	8008df4 <_printf_float+0x1a4>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e7f2      	b.n	8008df4 <_printf_float+0x1a4>
 8008e0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e14:	4299      	cmp	r1, r3
 8008e16:	db05      	blt.n	8008e24 <_printf_float+0x1d4>
 8008e18:	6823      	ldr	r3, [r4, #0]
 8008e1a:	6121      	str	r1, [r4, #16]
 8008e1c:	07d8      	lsls	r0, r3, #31
 8008e1e:	d5ea      	bpl.n	8008df6 <_printf_float+0x1a6>
 8008e20:	1c4b      	adds	r3, r1, #1
 8008e22:	e7e7      	b.n	8008df4 <_printf_float+0x1a4>
 8008e24:	2900      	cmp	r1, #0
 8008e26:	bfd4      	ite	le
 8008e28:	f1c1 0202 	rsble	r2, r1, #2
 8008e2c:	2201      	movgt	r2, #1
 8008e2e:	4413      	add	r3, r2
 8008e30:	e7e0      	b.n	8008df4 <_printf_float+0x1a4>
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	055a      	lsls	r2, r3, #21
 8008e36:	d407      	bmi.n	8008e48 <_printf_float+0x1f8>
 8008e38:	6923      	ldr	r3, [r4, #16]
 8008e3a:	4642      	mov	r2, r8
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	4628      	mov	r0, r5
 8008e40:	47b8      	blx	r7
 8008e42:	3001      	adds	r0, #1
 8008e44:	d12c      	bne.n	8008ea0 <_printf_float+0x250>
 8008e46:	e764      	b.n	8008d12 <_printf_float+0xc2>
 8008e48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e4c:	f240 80e0 	bls.w	8009010 <_printf_float+0x3c0>
 8008e50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e54:	2200      	movs	r2, #0
 8008e56:	2300      	movs	r3, #0
 8008e58:	f7f7 fe36 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d034      	beq.n	8008eca <_printf_float+0x27a>
 8008e60:	4a37      	ldr	r2, [pc, #220]	; (8008f40 <_printf_float+0x2f0>)
 8008e62:	2301      	movs	r3, #1
 8008e64:	4631      	mov	r1, r6
 8008e66:	4628      	mov	r0, r5
 8008e68:	47b8      	blx	r7
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	f43f af51 	beq.w	8008d12 <_printf_float+0xc2>
 8008e70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e74:	429a      	cmp	r2, r3
 8008e76:	db02      	blt.n	8008e7e <_printf_float+0x22e>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	07d8      	lsls	r0, r3, #31
 8008e7c:	d510      	bpl.n	8008ea0 <_printf_float+0x250>
 8008e7e:	ee18 3a10 	vmov	r3, s16
 8008e82:	4652      	mov	r2, sl
 8008e84:	4631      	mov	r1, r6
 8008e86:	4628      	mov	r0, r5
 8008e88:	47b8      	blx	r7
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	f43f af41 	beq.w	8008d12 <_printf_float+0xc2>
 8008e90:	f04f 0800 	mov.w	r8, #0
 8008e94:	f104 091a 	add.w	r9, r4, #26
 8008e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	4543      	cmp	r3, r8
 8008e9e:	dc09      	bgt.n	8008eb4 <_printf_float+0x264>
 8008ea0:	6823      	ldr	r3, [r4, #0]
 8008ea2:	079b      	lsls	r3, r3, #30
 8008ea4:	f100 8105 	bmi.w	80090b2 <_printf_float+0x462>
 8008ea8:	68e0      	ldr	r0, [r4, #12]
 8008eaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eac:	4298      	cmp	r0, r3
 8008eae:	bfb8      	it	lt
 8008eb0:	4618      	movlt	r0, r3
 8008eb2:	e730      	b.n	8008d16 <_printf_float+0xc6>
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	464a      	mov	r2, r9
 8008eb8:	4631      	mov	r1, r6
 8008eba:	4628      	mov	r0, r5
 8008ebc:	47b8      	blx	r7
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	f43f af27 	beq.w	8008d12 <_printf_float+0xc2>
 8008ec4:	f108 0801 	add.w	r8, r8, #1
 8008ec8:	e7e6      	b.n	8008e98 <_printf_float+0x248>
 8008eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dc39      	bgt.n	8008f44 <_printf_float+0x2f4>
 8008ed0:	4a1b      	ldr	r2, [pc, #108]	; (8008f40 <_printf_float+0x2f0>)
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	4631      	mov	r1, r6
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	47b8      	blx	r7
 8008eda:	3001      	adds	r0, #1
 8008edc:	f43f af19 	beq.w	8008d12 <_printf_float+0xc2>
 8008ee0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	d102      	bne.n	8008eee <_printf_float+0x29e>
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	07d9      	lsls	r1, r3, #31
 8008eec:	d5d8      	bpl.n	8008ea0 <_printf_float+0x250>
 8008eee:	ee18 3a10 	vmov	r3, s16
 8008ef2:	4652      	mov	r2, sl
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	47b8      	blx	r7
 8008efa:	3001      	adds	r0, #1
 8008efc:	f43f af09 	beq.w	8008d12 <_printf_float+0xc2>
 8008f00:	f04f 0900 	mov.w	r9, #0
 8008f04:	f104 0a1a 	add.w	sl, r4, #26
 8008f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f0a:	425b      	negs	r3, r3
 8008f0c:	454b      	cmp	r3, r9
 8008f0e:	dc01      	bgt.n	8008f14 <_printf_float+0x2c4>
 8008f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f12:	e792      	b.n	8008e3a <_printf_float+0x1ea>
 8008f14:	2301      	movs	r3, #1
 8008f16:	4652      	mov	r2, sl
 8008f18:	4631      	mov	r1, r6
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	47b8      	blx	r7
 8008f1e:	3001      	adds	r0, #1
 8008f20:	f43f aef7 	beq.w	8008d12 <_printf_float+0xc2>
 8008f24:	f109 0901 	add.w	r9, r9, #1
 8008f28:	e7ee      	b.n	8008f08 <_printf_float+0x2b8>
 8008f2a:	bf00      	nop
 8008f2c:	7fefffff 	.word	0x7fefffff
 8008f30:	0800cd8c 	.word	0x0800cd8c
 8008f34:	0800cd90 	.word	0x0800cd90
 8008f38:	0800cd98 	.word	0x0800cd98
 8008f3c:	0800cd94 	.word	0x0800cd94
 8008f40:	0800cd9c 	.word	0x0800cd9c
 8008f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	bfa8      	it	ge
 8008f4c:	461a      	movge	r2, r3
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	4691      	mov	r9, r2
 8008f52:	dc37      	bgt.n	8008fc4 <_printf_float+0x374>
 8008f54:	f04f 0b00 	mov.w	fp, #0
 8008f58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f5c:	f104 021a 	add.w	r2, r4, #26
 8008f60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f62:	9305      	str	r3, [sp, #20]
 8008f64:	eba3 0309 	sub.w	r3, r3, r9
 8008f68:	455b      	cmp	r3, fp
 8008f6a:	dc33      	bgt.n	8008fd4 <_printf_float+0x384>
 8008f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f70:	429a      	cmp	r2, r3
 8008f72:	db3b      	blt.n	8008fec <_printf_float+0x39c>
 8008f74:	6823      	ldr	r3, [r4, #0]
 8008f76:	07da      	lsls	r2, r3, #31
 8008f78:	d438      	bmi.n	8008fec <_printf_float+0x39c>
 8008f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f7c:	9a05      	ldr	r2, [sp, #20]
 8008f7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f80:	1a9a      	subs	r2, r3, r2
 8008f82:	eba3 0901 	sub.w	r9, r3, r1
 8008f86:	4591      	cmp	r9, r2
 8008f88:	bfa8      	it	ge
 8008f8a:	4691      	movge	r9, r2
 8008f8c:	f1b9 0f00 	cmp.w	r9, #0
 8008f90:	dc35      	bgt.n	8008ffe <_printf_float+0x3ae>
 8008f92:	f04f 0800 	mov.w	r8, #0
 8008f96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f9a:	f104 0a1a 	add.w	sl, r4, #26
 8008f9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fa2:	1a9b      	subs	r3, r3, r2
 8008fa4:	eba3 0309 	sub.w	r3, r3, r9
 8008fa8:	4543      	cmp	r3, r8
 8008faa:	f77f af79 	ble.w	8008ea0 <_printf_float+0x250>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4652      	mov	r2, sl
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4628      	mov	r0, r5
 8008fb6:	47b8      	blx	r7
 8008fb8:	3001      	adds	r0, #1
 8008fba:	f43f aeaa 	beq.w	8008d12 <_printf_float+0xc2>
 8008fbe:	f108 0801 	add.w	r8, r8, #1
 8008fc2:	e7ec      	b.n	8008f9e <_printf_float+0x34e>
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	4642      	mov	r2, r8
 8008fca:	4628      	mov	r0, r5
 8008fcc:	47b8      	blx	r7
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d1c0      	bne.n	8008f54 <_printf_float+0x304>
 8008fd2:	e69e      	b.n	8008d12 <_printf_float+0xc2>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	4628      	mov	r0, r5
 8008fda:	9205      	str	r2, [sp, #20]
 8008fdc:	47b8      	blx	r7
 8008fde:	3001      	adds	r0, #1
 8008fe0:	f43f ae97 	beq.w	8008d12 <_printf_float+0xc2>
 8008fe4:	9a05      	ldr	r2, [sp, #20]
 8008fe6:	f10b 0b01 	add.w	fp, fp, #1
 8008fea:	e7b9      	b.n	8008f60 <_printf_float+0x310>
 8008fec:	ee18 3a10 	vmov	r3, s16
 8008ff0:	4652      	mov	r2, sl
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	47b8      	blx	r7
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d1be      	bne.n	8008f7a <_printf_float+0x32a>
 8008ffc:	e689      	b.n	8008d12 <_printf_float+0xc2>
 8008ffe:	9a05      	ldr	r2, [sp, #20]
 8009000:	464b      	mov	r3, r9
 8009002:	4442      	add	r2, r8
 8009004:	4631      	mov	r1, r6
 8009006:	4628      	mov	r0, r5
 8009008:	47b8      	blx	r7
 800900a:	3001      	adds	r0, #1
 800900c:	d1c1      	bne.n	8008f92 <_printf_float+0x342>
 800900e:	e680      	b.n	8008d12 <_printf_float+0xc2>
 8009010:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009012:	2a01      	cmp	r2, #1
 8009014:	dc01      	bgt.n	800901a <_printf_float+0x3ca>
 8009016:	07db      	lsls	r3, r3, #31
 8009018:	d538      	bpl.n	800908c <_printf_float+0x43c>
 800901a:	2301      	movs	r3, #1
 800901c:	4642      	mov	r2, r8
 800901e:	4631      	mov	r1, r6
 8009020:	4628      	mov	r0, r5
 8009022:	47b8      	blx	r7
 8009024:	3001      	adds	r0, #1
 8009026:	f43f ae74 	beq.w	8008d12 <_printf_float+0xc2>
 800902a:	ee18 3a10 	vmov	r3, s16
 800902e:	4652      	mov	r2, sl
 8009030:	4631      	mov	r1, r6
 8009032:	4628      	mov	r0, r5
 8009034:	47b8      	blx	r7
 8009036:	3001      	adds	r0, #1
 8009038:	f43f ae6b 	beq.w	8008d12 <_printf_float+0xc2>
 800903c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009040:	2200      	movs	r2, #0
 8009042:	2300      	movs	r3, #0
 8009044:	f7f7 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 8009048:	b9d8      	cbnz	r0, 8009082 <_printf_float+0x432>
 800904a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800904c:	f108 0201 	add.w	r2, r8, #1
 8009050:	3b01      	subs	r3, #1
 8009052:	4631      	mov	r1, r6
 8009054:	4628      	mov	r0, r5
 8009056:	47b8      	blx	r7
 8009058:	3001      	adds	r0, #1
 800905a:	d10e      	bne.n	800907a <_printf_float+0x42a>
 800905c:	e659      	b.n	8008d12 <_printf_float+0xc2>
 800905e:	2301      	movs	r3, #1
 8009060:	4652      	mov	r2, sl
 8009062:	4631      	mov	r1, r6
 8009064:	4628      	mov	r0, r5
 8009066:	47b8      	blx	r7
 8009068:	3001      	adds	r0, #1
 800906a:	f43f ae52 	beq.w	8008d12 <_printf_float+0xc2>
 800906e:	f108 0801 	add.w	r8, r8, #1
 8009072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009074:	3b01      	subs	r3, #1
 8009076:	4543      	cmp	r3, r8
 8009078:	dcf1      	bgt.n	800905e <_printf_float+0x40e>
 800907a:	464b      	mov	r3, r9
 800907c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009080:	e6dc      	b.n	8008e3c <_printf_float+0x1ec>
 8009082:	f04f 0800 	mov.w	r8, #0
 8009086:	f104 0a1a 	add.w	sl, r4, #26
 800908a:	e7f2      	b.n	8009072 <_printf_float+0x422>
 800908c:	2301      	movs	r3, #1
 800908e:	4642      	mov	r2, r8
 8009090:	e7df      	b.n	8009052 <_printf_float+0x402>
 8009092:	2301      	movs	r3, #1
 8009094:	464a      	mov	r2, r9
 8009096:	4631      	mov	r1, r6
 8009098:	4628      	mov	r0, r5
 800909a:	47b8      	blx	r7
 800909c:	3001      	adds	r0, #1
 800909e:	f43f ae38 	beq.w	8008d12 <_printf_float+0xc2>
 80090a2:	f108 0801 	add.w	r8, r8, #1
 80090a6:	68e3      	ldr	r3, [r4, #12]
 80090a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090aa:	1a5b      	subs	r3, r3, r1
 80090ac:	4543      	cmp	r3, r8
 80090ae:	dcf0      	bgt.n	8009092 <_printf_float+0x442>
 80090b0:	e6fa      	b.n	8008ea8 <_printf_float+0x258>
 80090b2:	f04f 0800 	mov.w	r8, #0
 80090b6:	f104 0919 	add.w	r9, r4, #25
 80090ba:	e7f4      	b.n	80090a6 <_printf_float+0x456>

080090bc <_printf_common>:
 80090bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090c0:	4616      	mov	r6, r2
 80090c2:	4699      	mov	r9, r3
 80090c4:	688a      	ldr	r2, [r1, #8]
 80090c6:	690b      	ldr	r3, [r1, #16]
 80090c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090cc:	4293      	cmp	r3, r2
 80090ce:	bfb8      	it	lt
 80090d0:	4613      	movlt	r3, r2
 80090d2:	6033      	str	r3, [r6, #0]
 80090d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090d8:	4607      	mov	r7, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	b10a      	cbz	r2, 80090e2 <_printf_common+0x26>
 80090de:	3301      	adds	r3, #1
 80090e0:	6033      	str	r3, [r6, #0]
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	0699      	lsls	r1, r3, #26
 80090e6:	bf42      	ittt	mi
 80090e8:	6833      	ldrmi	r3, [r6, #0]
 80090ea:	3302      	addmi	r3, #2
 80090ec:	6033      	strmi	r3, [r6, #0]
 80090ee:	6825      	ldr	r5, [r4, #0]
 80090f0:	f015 0506 	ands.w	r5, r5, #6
 80090f4:	d106      	bne.n	8009104 <_printf_common+0x48>
 80090f6:	f104 0a19 	add.w	sl, r4, #25
 80090fa:	68e3      	ldr	r3, [r4, #12]
 80090fc:	6832      	ldr	r2, [r6, #0]
 80090fe:	1a9b      	subs	r3, r3, r2
 8009100:	42ab      	cmp	r3, r5
 8009102:	dc26      	bgt.n	8009152 <_printf_common+0x96>
 8009104:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009108:	1e13      	subs	r3, r2, #0
 800910a:	6822      	ldr	r2, [r4, #0]
 800910c:	bf18      	it	ne
 800910e:	2301      	movne	r3, #1
 8009110:	0692      	lsls	r2, r2, #26
 8009112:	d42b      	bmi.n	800916c <_printf_common+0xb0>
 8009114:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009118:	4649      	mov	r1, r9
 800911a:	4638      	mov	r0, r7
 800911c:	47c0      	blx	r8
 800911e:	3001      	adds	r0, #1
 8009120:	d01e      	beq.n	8009160 <_printf_common+0xa4>
 8009122:	6823      	ldr	r3, [r4, #0]
 8009124:	68e5      	ldr	r5, [r4, #12]
 8009126:	6832      	ldr	r2, [r6, #0]
 8009128:	f003 0306 	and.w	r3, r3, #6
 800912c:	2b04      	cmp	r3, #4
 800912e:	bf08      	it	eq
 8009130:	1aad      	subeq	r5, r5, r2
 8009132:	68a3      	ldr	r3, [r4, #8]
 8009134:	6922      	ldr	r2, [r4, #16]
 8009136:	bf0c      	ite	eq
 8009138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800913c:	2500      	movne	r5, #0
 800913e:	4293      	cmp	r3, r2
 8009140:	bfc4      	itt	gt
 8009142:	1a9b      	subgt	r3, r3, r2
 8009144:	18ed      	addgt	r5, r5, r3
 8009146:	2600      	movs	r6, #0
 8009148:	341a      	adds	r4, #26
 800914a:	42b5      	cmp	r5, r6
 800914c:	d11a      	bne.n	8009184 <_printf_common+0xc8>
 800914e:	2000      	movs	r0, #0
 8009150:	e008      	b.n	8009164 <_printf_common+0xa8>
 8009152:	2301      	movs	r3, #1
 8009154:	4652      	mov	r2, sl
 8009156:	4649      	mov	r1, r9
 8009158:	4638      	mov	r0, r7
 800915a:	47c0      	blx	r8
 800915c:	3001      	adds	r0, #1
 800915e:	d103      	bne.n	8009168 <_printf_common+0xac>
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009168:	3501      	adds	r5, #1
 800916a:	e7c6      	b.n	80090fa <_printf_common+0x3e>
 800916c:	18e1      	adds	r1, r4, r3
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	2030      	movs	r0, #48	; 0x30
 8009172:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009176:	4422      	add	r2, r4
 8009178:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800917c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009180:	3302      	adds	r3, #2
 8009182:	e7c7      	b.n	8009114 <_printf_common+0x58>
 8009184:	2301      	movs	r3, #1
 8009186:	4622      	mov	r2, r4
 8009188:	4649      	mov	r1, r9
 800918a:	4638      	mov	r0, r7
 800918c:	47c0      	blx	r8
 800918e:	3001      	adds	r0, #1
 8009190:	d0e6      	beq.n	8009160 <_printf_common+0xa4>
 8009192:	3601      	adds	r6, #1
 8009194:	e7d9      	b.n	800914a <_printf_common+0x8e>
	...

08009198 <_printf_i>:
 8009198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800919c:	7e0f      	ldrb	r7, [r1, #24]
 800919e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091a0:	2f78      	cmp	r7, #120	; 0x78
 80091a2:	4691      	mov	r9, r2
 80091a4:	4680      	mov	r8, r0
 80091a6:	460c      	mov	r4, r1
 80091a8:	469a      	mov	sl, r3
 80091aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091ae:	d807      	bhi.n	80091c0 <_printf_i+0x28>
 80091b0:	2f62      	cmp	r7, #98	; 0x62
 80091b2:	d80a      	bhi.n	80091ca <_printf_i+0x32>
 80091b4:	2f00      	cmp	r7, #0
 80091b6:	f000 80d8 	beq.w	800936a <_printf_i+0x1d2>
 80091ba:	2f58      	cmp	r7, #88	; 0x58
 80091bc:	f000 80a3 	beq.w	8009306 <_printf_i+0x16e>
 80091c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091c8:	e03a      	b.n	8009240 <_printf_i+0xa8>
 80091ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091ce:	2b15      	cmp	r3, #21
 80091d0:	d8f6      	bhi.n	80091c0 <_printf_i+0x28>
 80091d2:	a101      	add	r1, pc, #4	; (adr r1, 80091d8 <_printf_i+0x40>)
 80091d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091d8:	08009231 	.word	0x08009231
 80091dc:	08009245 	.word	0x08009245
 80091e0:	080091c1 	.word	0x080091c1
 80091e4:	080091c1 	.word	0x080091c1
 80091e8:	080091c1 	.word	0x080091c1
 80091ec:	080091c1 	.word	0x080091c1
 80091f0:	08009245 	.word	0x08009245
 80091f4:	080091c1 	.word	0x080091c1
 80091f8:	080091c1 	.word	0x080091c1
 80091fc:	080091c1 	.word	0x080091c1
 8009200:	080091c1 	.word	0x080091c1
 8009204:	08009351 	.word	0x08009351
 8009208:	08009275 	.word	0x08009275
 800920c:	08009333 	.word	0x08009333
 8009210:	080091c1 	.word	0x080091c1
 8009214:	080091c1 	.word	0x080091c1
 8009218:	08009373 	.word	0x08009373
 800921c:	080091c1 	.word	0x080091c1
 8009220:	08009275 	.word	0x08009275
 8009224:	080091c1 	.word	0x080091c1
 8009228:	080091c1 	.word	0x080091c1
 800922c:	0800933b 	.word	0x0800933b
 8009230:	682b      	ldr	r3, [r5, #0]
 8009232:	1d1a      	adds	r2, r3, #4
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	602a      	str	r2, [r5, #0]
 8009238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800923c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009240:	2301      	movs	r3, #1
 8009242:	e0a3      	b.n	800938c <_printf_i+0x1f4>
 8009244:	6820      	ldr	r0, [r4, #0]
 8009246:	6829      	ldr	r1, [r5, #0]
 8009248:	0606      	lsls	r6, r0, #24
 800924a:	f101 0304 	add.w	r3, r1, #4
 800924e:	d50a      	bpl.n	8009266 <_printf_i+0xce>
 8009250:	680e      	ldr	r6, [r1, #0]
 8009252:	602b      	str	r3, [r5, #0]
 8009254:	2e00      	cmp	r6, #0
 8009256:	da03      	bge.n	8009260 <_printf_i+0xc8>
 8009258:	232d      	movs	r3, #45	; 0x2d
 800925a:	4276      	negs	r6, r6
 800925c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009260:	485e      	ldr	r0, [pc, #376]	; (80093dc <_printf_i+0x244>)
 8009262:	230a      	movs	r3, #10
 8009264:	e019      	b.n	800929a <_printf_i+0x102>
 8009266:	680e      	ldr	r6, [r1, #0]
 8009268:	602b      	str	r3, [r5, #0]
 800926a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800926e:	bf18      	it	ne
 8009270:	b236      	sxthne	r6, r6
 8009272:	e7ef      	b.n	8009254 <_printf_i+0xbc>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	6820      	ldr	r0, [r4, #0]
 8009278:	1d19      	adds	r1, r3, #4
 800927a:	6029      	str	r1, [r5, #0]
 800927c:	0601      	lsls	r1, r0, #24
 800927e:	d501      	bpl.n	8009284 <_printf_i+0xec>
 8009280:	681e      	ldr	r6, [r3, #0]
 8009282:	e002      	b.n	800928a <_printf_i+0xf2>
 8009284:	0646      	lsls	r6, r0, #25
 8009286:	d5fb      	bpl.n	8009280 <_printf_i+0xe8>
 8009288:	881e      	ldrh	r6, [r3, #0]
 800928a:	4854      	ldr	r0, [pc, #336]	; (80093dc <_printf_i+0x244>)
 800928c:	2f6f      	cmp	r7, #111	; 0x6f
 800928e:	bf0c      	ite	eq
 8009290:	2308      	moveq	r3, #8
 8009292:	230a      	movne	r3, #10
 8009294:	2100      	movs	r1, #0
 8009296:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800929a:	6865      	ldr	r5, [r4, #4]
 800929c:	60a5      	str	r5, [r4, #8]
 800929e:	2d00      	cmp	r5, #0
 80092a0:	bfa2      	ittt	ge
 80092a2:	6821      	ldrge	r1, [r4, #0]
 80092a4:	f021 0104 	bicge.w	r1, r1, #4
 80092a8:	6021      	strge	r1, [r4, #0]
 80092aa:	b90e      	cbnz	r6, 80092b0 <_printf_i+0x118>
 80092ac:	2d00      	cmp	r5, #0
 80092ae:	d04d      	beq.n	800934c <_printf_i+0x1b4>
 80092b0:	4615      	mov	r5, r2
 80092b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80092b6:	fb03 6711 	mls	r7, r3, r1, r6
 80092ba:	5dc7      	ldrb	r7, [r0, r7]
 80092bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092c0:	4637      	mov	r7, r6
 80092c2:	42bb      	cmp	r3, r7
 80092c4:	460e      	mov	r6, r1
 80092c6:	d9f4      	bls.n	80092b2 <_printf_i+0x11a>
 80092c8:	2b08      	cmp	r3, #8
 80092ca:	d10b      	bne.n	80092e4 <_printf_i+0x14c>
 80092cc:	6823      	ldr	r3, [r4, #0]
 80092ce:	07de      	lsls	r6, r3, #31
 80092d0:	d508      	bpl.n	80092e4 <_printf_i+0x14c>
 80092d2:	6923      	ldr	r3, [r4, #16]
 80092d4:	6861      	ldr	r1, [r4, #4]
 80092d6:	4299      	cmp	r1, r3
 80092d8:	bfde      	ittt	le
 80092da:	2330      	movle	r3, #48	; 0x30
 80092dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092e4:	1b52      	subs	r2, r2, r5
 80092e6:	6122      	str	r2, [r4, #16]
 80092e8:	f8cd a000 	str.w	sl, [sp]
 80092ec:	464b      	mov	r3, r9
 80092ee:	aa03      	add	r2, sp, #12
 80092f0:	4621      	mov	r1, r4
 80092f2:	4640      	mov	r0, r8
 80092f4:	f7ff fee2 	bl	80090bc <_printf_common>
 80092f8:	3001      	adds	r0, #1
 80092fa:	d14c      	bne.n	8009396 <_printf_i+0x1fe>
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009300:	b004      	add	sp, #16
 8009302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009306:	4835      	ldr	r0, [pc, #212]	; (80093dc <_printf_i+0x244>)
 8009308:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800930c:	6829      	ldr	r1, [r5, #0]
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	f851 6b04 	ldr.w	r6, [r1], #4
 8009314:	6029      	str	r1, [r5, #0]
 8009316:	061d      	lsls	r5, r3, #24
 8009318:	d514      	bpl.n	8009344 <_printf_i+0x1ac>
 800931a:	07df      	lsls	r7, r3, #31
 800931c:	bf44      	itt	mi
 800931e:	f043 0320 	orrmi.w	r3, r3, #32
 8009322:	6023      	strmi	r3, [r4, #0]
 8009324:	b91e      	cbnz	r6, 800932e <_printf_i+0x196>
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	f023 0320 	bic.w	r3, r3, #32
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	2310      	movs	r3, #16
 8009330:	e7b0      	b.n	8009294 <_printf_i+0xfc>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	f043 0320 	orr.w	r3, r3, #32
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	2378      	movs	r3, #120	; 0x78
 800933c:	4828      	ldr	r0, [pc, #160]	; (80093e0 <_printf_i+0x248>)
 800933e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009342:	e7e3      	b.n	800930c <_printf_i+0x174>
 8009344:	0659      	lsls	r1, r3, #25
 8009346:	bf48      	it	mi
 8009348:	b2b6      	uxthmi	r6, r6
 800934a:	e7e6      	b.n	800931a <_printf_i+0x182>
 800934c:	4615      	mov	r5, r2
 800934e:	e7bb      	b.n	80092c8 <_printf_i+0x130>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	6826      	ldr	r6, [r4, #0]
 8009354:	6961      	ldr	r1, [r4, #20]
 8009356:	1d18      	adds	r0, r3, #4
 8009358:	6028      	str	r0, [r5, #0]
 800935a:	0635      	lsls	r5, r6, #24
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	d501      	bpl.n	8009364 <_printf_i+0x1cc>
 8009360:	6019      	str	r1, [r3, #0]
 8009362:	e002      	b.n	800936a <_printf_i+0x1d2>
 8009364:	0670      	lsls	r0, r6, #25
 8009366:	d5fb      	bpl.n	8009360 <_printf_i+0x1c8>
 8009368:	8019      	strh	r1, [r3, #0]
 800936a:	2300      	movs	r3, #0
 800936c:	6123      	str	r3, [r4, #16]
 800936e:	4615      	mov	r5, r2
 8009370:	e7ba      	b.n	80092e8 <_printf_i+0x150>
 8009372:	682b      	ldr	r3, [r5, #0]
 8009374:	1d1a      	adds	r2, r3, #4
 8009376:	602a      	str	r2, [r5, #0]
 8009378:	681d      	ldr	r5, [r3, #0]
 800937a:	6862      	ldr	r2, [r4, #4]
 800937c:	2100      	movs	r1, #0
 800937e:	4628      	mov	r0, r5
 8009380:	f7f6 ff2e 	bl	80001e0 <memchr>
 8009384:	b108      	cbz	r0, 800938a <_printf_i+0x1f2>
 8009386:	1b40      	subs	r0, r0, r5
 8009388:	6060      	str	r0, [r4, #4]
 800938a:	6863      	ldr	r3, [r4, #4]
 800938c:	6123      	str	r3, [r4, #16]
 800938e:	2300      	movs	r3, #0
 8009390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009394:	e7a8      	b.n	80092e8 <_printf_i+0x150>
 8009396:	6923      	ldr	r3, [r4, #16]
 8009398:	462a      	mov	r2, r5
 800939a:	4649      	mov	r1, r9
 800939c:	4640      	mov	r0, r8
 800939e:	47d0      	blx	sl
 80093a0:	3001      	adds	r0, #1
 80093a2:	d0ab      	beq.n	80092fc <_printf_i+0x164>
 80093a4:	6823      	ldr	r3, [r4, #0]
 80093a6:	079b      	lsls	r3, r3, #30
 80093a8:	d413      	bmi.n	80093d2 <_printf_i+0x23a>
 80093aa:	68e0      	ldr	r0, [r4, #12]
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	4298      	cmp	r0, r3
 80093b0:	bfb8      	it	lt
 80093b2:	4618      	movlt	r0, r3
 80093b4:	e7a4      	b.n	8009300 <_printf_i+0x168>
 80093b6:	2301      	movs	r3, #1
 80093b8:	4632      	mov	r2, r6
 80093ba:	4649      	mov	r1, r9
 80093bc:	4640      	mov	r0, r8
 80093be:	47d0      	blx	sl
 80093c0:	3001      	adds	r0, #1
 80093c2:	d09b      	beq.n	80092fc <_printf_i+0x164>
 80093c4:	3501      	adds	r5, #1
 80093c6:	68e3      	ldr	r3, [r4, #12]
 80093c8:	9903      	ldr	r1, [sp, #12]
 80093ca:	1a5b      	subs	r3, r3, r1
 80093cc:	42ab      	cmp	r3, r5
 80093ce:	dcf2      	bgt.n	80093b6 <_printf_i+0x21e>
 80093d0:	e7eb      	b.n	80093aa <_printf_i+0x212>
 80093d2:	2500      	movs	r5, #0
 80093d4:	f104 0619 	add.w	r6, r4, #25
 80093d8:	e7f5      	b.n	80093c6 <_printf_i+0x22e>
 80093da:	bf00      	nop
 80093dc:	0800cd9e 	.word	0x0800cd9e
 80093e0:	0800cdaf 	.word	0x0800cdaf

080093e4 <cleanup_glue>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	460c      	mov	r4, r1
 80093e8:	6809      	ldr	r1, [r1, #0]
 80093ea:	4605      	mov	r5, r0
 80093ec:	b109      	cbz	r1, 80093f2 <cleanup_glue+0xe>
 80093ee:	f7ff fff9 	bl	80093e4 <cleanup_glue>
 80093f2:	4621      	mov	r1, r4
 80093f4:	4628      	mov	r0, r5
 80093f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093fa:	f002 bee1 	b.w	800c1c0 <_free_r>
	...

08009400 <_reclaim_reent>:
 8009400:	4b2c      	ldr	r3, [pc, #176]	; (80094b4 <_reclaim_reent+0xb4>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4283      	cmp	r3, r0
 8009406:	b570      	push	{r4, r5, r6, lr}
 8009408:	4604      	mov	r4, r0
 800940a:	d051      	beq.n	80094b0 <_reclaim_reent+0xb0>
 800940c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800940e:	b143      	cbz	r3, 8009422 <_reclaim_reent+0x22>
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d14a      	bne.n	80094ac <_reclaim_reent+0xac>
 8009416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009418:	6819      	ldr	r1, [r3, #0]
 800941a:	b111      	cbz	r1, 8009422 <_reclaim_reent+0x22>
 800941c:	4620      	mov	r0, r4
 800941e:	f002 fecf 	bl	800c1c0 <_free_r>
 8009422:	6961      	ldr	r1, [r4, #20]
 8009424:	b111      	cbz	r1, 800942c <_reclaim_reent+0x2c>
 8009426:	4620      	mov	r0, r4
 8009428:	f002 feca 	bl	800c1c0 <_free_r>
 800942c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800942e:	b111      	cbz	r1, 8009436 <_reclaim_reent+0x36>
 8009430:	4620      	mov	r0, r4
 8009432:	f002 fec5 	bl	800c1c0 <_free_r>
 8009436:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009438:	b111      	cbz	r1, 8009440 <_reclaim_reent+0x40>
 800943a:	4620      	mov	r0, r4
 800943c:	f002 fec0 	bl	800c1c0 <_free_r>
 8009440:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009442:	b111      	cbz	r1, 800944a <_reclaim_reent+0x4a>
 8009444:	4620      	mov	r0, r4
 8009446:	f002 febb 	bl	800c1c0 <_free_r>
 800944a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800944c:	b111      	cbz	r1, 8009454 <_reclaim_reent+0x54>
 800944e:	4620      	mov	r0, r4
 8009450:	f002 feb6 	bl	800c1c0 <_free_r>
 8009454:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009456:	b111      	cbz	r1, 800945e <_reclaim_reent+0x5e>
 8009458:	4620      	mov	r0, r4
 800945a:	f002 feb1 	bl	800c1c0 <_free_r>
 800945e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009460:	b111      	cbz	r1, 8009468 <_reclaim_reent+0x68>
 8009462:	4620      	mov	r0, r4
 8009464:	f002 feac 	bl	800c1c0 <_free_r>
 8009468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800946a:	b111      	cbz	r1, 8009472 <_reclaim_reent+0x72>
 800946c:	4620      	mov	r0, r4
 800946e:	f002 fea7 	bl	800c1c0 <_free_r>
 8009472:	69a3      	ldr	r3, [r4, #24]
 8009474:	b1e3      	cbz	r3, 80094b0 <_reclaim_reent+0xb0>
 8009476:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009478:	4620      	mov	r0, r4
 800947a:	4798      	blx	r3
 800947c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800947e:	b1b9      	cbz	r1, 80094b0 <_reclaim_reent+0xb0>
 8009480:	4620      	mov	r0, r4
 8009482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009486:	f7ff bfad 	b.w	80093e4 <cleanup_glue>
 800948a:	5949      	ldr	r1, [r1, r5]
 800948c:	b941      	cbnz	r1, 80094a0 <_reclaim_reent+0xa0>
 800948e:	3504      	adds	r5, #4
 8009490:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009492:	2d80      	cmp	r5, #128	; 0x80
 8009494:	68d9      	ldr	r1, [r3, #12]
 8009496:	d1f8      	bne.n	800948a <_reclaim_reent+0x8a>
 8009498:	4620      	mov	r0, r4
 800949a:	f002 fe91 	bl	800c1c0 <_free_r>
 800949e:	e7ba      	b.n	8009416 <_reclaim_reent+0x16>
 80094a0:	680e      	ldr	r6, [r1, #0]
 80094a2:	4620      	mov	r0, r4
 80094a4:	f002 fe8c 	bl	800c1c0 <_free_r>
 80094a8:	4631      	mov	r1, r6
 80094aa:	e7ef      	b.n	800948c <_reclaim_reent+0x8c>
 80094ac:	2500      	movs	r5, #0
 80094ae:	e7ef      	b.n	8009490 <_reclaim_reent+0x90>
 80094b0:	bd70      	pop	{r4, r5, r6, pc}
 80094b2:	bf00      	nop
 80094b4:	20000010 	.word	0x20000010

080094b8 <_sbrk_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4d06      	ldr	r5, [pc, #24]	; (80094d4 <_sbrk_r+0x1c>)
 80094bc:	2300      	movs	r3, #0
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	f7f8 fb7a 	bl	8001bbc <_sbrk>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d102      	bne.n	80094d2 <_sbrk_r+0x1a>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b103      	cbz	r3, 80094d2 <_sbrk_r+0x1a>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	20004580 	.word	0x20004580

080094d8 <siprintf>:
 80094d8:	b40e      	push	{r1, r2, r3}
 80094da:	b500      	push	{lr}
 80094dc:	b09c      	sub	sp, #112	; 0x70
 80094de:	ab1d      	add	r3, sp, #116	; 0x74
 80094e0:	9002      	str	r0, [sp, #8]
 80094e2:	9006      	str	r0, [sp, #24]
 80094e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094e8:	4809      	ldr	r0, [pc, #36]	; (8009510 <siprintf+0x38>)
 80094ea:	9107      	str	r1, [sp, #28]
 80094ec:	9104      	str	r1, [sp, #16]
 80094ee:	4909      	ldr	r1, [pc, #36]	; (8009514 <siprintf+0x3c>)
 80094f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f4:	9105      	str	r1, [sp, #20]
 80094f6:	6800      	ldr	r0, [r0, #0]
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	a902      	add	r1, sp, #8
 80094fc:	f002 ff08 	bl	800c310 <_svfiprintf_r>
 8009500:	9b02      	ldr	r3, [sp, #8]
 8009502:	2200      	movs	r2, #0
 8009504:	701a      	strb	r2, [r3, #0]
 8009506:	b01c      	add	sp, #112	; 0x70
 8009508:	f85d eb04 	ldr.w	lr, [sp], #4
 800950c:	b003      	add	sp, #12
 800950e:	4770      	bx	lr
 8009510:	20000010 	.word	0x20000010
 8009514:	ffff0208 	.word	0xffff0208

08009518 <__sread>:
 8009518:	b510      	push	{r4, lr}
 800951a:	460c      	mov	r4, r1
 800951c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009520:	f002 fff6 	bl	800c510 <_read_r>
 8009524:	2800      	cmp	r0, #0
 8009526:	bfab      	itete	ge
 8009528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800952a:	89a3      	ldrhlt	r3, [r4, #12]
 800952c:	181b      	addge	r3, r3, r0
 800952e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009532:	bfac      	ite	ge
 8009534:	6563      	strge	r3, [r4, #84]	; 0x54
 8009536:	81a3      	strhlt	r3, [r4, #12]
 8009538:	bd10      	pop	{r4, pc}

0800953a <__swrite>:
 800953a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953e:	461f      	mov	r7, r3
 8009540:	898b      	ldrh	r3, [r1, #12]
 8009542:	05db      	lsls	r3, r3, #23
 8009544:	4605      	mov	r5, r0
 8009546:	460c      	mov	r4, r1
 8009548:	4616      	mov	r6, r2
 800954a:	d505      	bpl.n	8009558 <__swrite+0x1e>
 800954c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009550:	2302      	movs	r3, #2
 8009552:	2200      	movs	r2, #0
 8009554:	f002 f924 	bl	800b7a0 <_lseek_r>
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800955e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009562:	81a3      	strh	r3, [r4, #12]
 8009564:	4632      	mov	r2, r6
 8009566:	463b      	mov	r3, r7
 8009568:	4628      	mov	r0, r5
 800956a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800956e:	f000 be45 	b.w	800a1fc <_write_r>

08009572 <__sseek>:
 8009572:	b510      	push	{r4, lr}
 8009574:	460c      	mov	r4, r1
 8009576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800957a:	f002 f911 	bl	800b7a0 <_lseek_r>
 800957e:	1c43      	adds	r3, r0, #1
 8009580:	89a3      	ldrh	r3, [r4, #12]
 8009582:	bf15      	itete	ne
 8009584:	6560      	strne	r0, [r4, #84]	; 0x54
 8009586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800958a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800958e:	81a3      	strheq	r3, [r4, #12]
 8009590:	bf18      	it	ne
 8009592:	81a3      	strhne	r3, [r4, #12]
 8009594:	bd10      	pop	{r4, pc}

08009596 <__sclose>:
 8009596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800959a:	f000 be41 	b.w	800a220 <_close_r>

0800959e <sulp>:
 800959e:	b570      	push	{r4, r5, r6, lr}
 80095a0:	4604      	mov	r4, r0
 80095a2:	460d      	mov	r5, r1
 80095a4:	ec45 4b10 	vmov	d0, r4, r5
 80095a8:	4616      	mov	r6, r2
 80095aa:	f002 fca3 	bl	800bef4 <__ulp>
 80095ae:	ec51 0b10 	vmov	r0, r1, d0
 80095b2:	b17e      	cbz	r6, 80095d4 <sulp+0x36>
 80095b4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80095b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80095bc:	2b00      	cmp	r3, #0
 80095be:	dd09      	ble.n	80095d4 <sulp+0x36>
 80095c0:	051b      	lsls	r3, r3, #20
 80095c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80095c6:	2400      	movs	r4, #0
 80095c8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80095cc:	4622      	mov	r2, r4
 80095ce:	462b      	mov	r3, r5
 80095d0:	f7f7 f812 	bl	80005f8 <__aeabi_dmul>
 80095d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080095d8 <_strtod_l>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	ed2d 8b02 	vpush	{d8}
 80095e0:	b09d      	sub	sp, #116	; 0x74
 80095e2:	461f      	mov	r7, r3
 80095e4:	2300      	movs	r3, #0
 80095e6:	9318      	str	r3, [sp, #96]	; 0x60
 80095e8:	4ba2      	ldr	r3, [pc, #648]	; (8009874 <_strtod_l+0x29c>)
 80095ea:	9213      	str	r2, [sp, #76]	; 0x4c
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	9305      	str	r3, [sp, #20]
 80095f0:	4604      	mov	r4, r0
 80095f2:	4618      	mov	r0, r3
 80095f4:	4688      	mov	r8, r1
 80095f6:	f7f6 fdeb 	bl	80001d0 <strlen>
 80095fa:	f04f 0a00 	mov.w	sl, #0
 80095fe:	4605      	mov	r5, r0
 8009600:	f04f 0b00 	mov.w	fp, #0
 8009604:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009608:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800960a:	781a      	ldrb	r2, [r3, #0]
 800960c:	2a2b      	cmp	r2, #43	; 0x2b
 800960e:	d04e      	beq.n	80096ae <_strtod_l+0xd6>
 8009610:	d83b      	bhi.n	800968a <_strtod_l+0xb2>
 8009612:	2a0d      	cmp	r2, #13
 8009614:	d834      	bhi.n	8009680 <_strtod_l+0xa8>
 8009616:	2a08      	cmp	r2, #8
 8009618:	d834      	bhi.n	8009684 <_strtod_l+0xac>
 800961a:	2a00      	cmp	r2, #0
 800961c:	d03e      	beq.n	800969c <_strtod_l+0xc4>
 800961e:	2300      	movs	r3, #0
 8009620:	930a      	str	r3, [sp, #40]	; 0x28
 8009622:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009624:	7833      	ldrb	r3, [r6, #0]
 8009626:	2b30      	cmp	r3, #48	; 0x30
 8009628:	f040 80b0 	bne.w	800978c <_strtod_l+0x1b4>
 800962c:	7873      	ldrb	r3, [r6, #1]
 800962e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009632:	2b58      	cmp	r3, #88	; 0x58
 8009634:	d168      	bne.n	8009708 <_strtod_l+0x130>
 8009636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	ab18      	add	r3, sp, #96	; 0x60
 800963c:	9702      	str	r7, [sp, #8]
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	4a8d      	ldr	r2, [pc, #564]	; (8009878 <_strtod_l+0x2a0>)
 8009642:	ab19      	add	r3, sp, #100	; 0x64
 8009644:	a917      	add	r1, sp, #92	; 0x5c
 8009646:	4620      	mov	r0, r4
 8009648:	f001 fd9e 	bl	800b188 <__gethex>
 800964c:	f010 0707 	ands.w	r7, r0, #7
 8009650:	4605      	mov	r5, r0
 8009652:	d005      	beq.n	8009660 <_strtod_l+0x88>
 8009654:	2f06      	cmp	r7, #6
 8009656:	d12c      	bne.n	80096b2 <_strtod_l+0xda>
 8009658:	3601      	adds	r6, #1
 800965a:	2300      	movs	r3, #0
 800965c:	9617      	str	r6, [sp, #92]	; 0x5c
 800965e:	930a      	str	r3, [sp, #40]	; 0x28
 8009660:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009662:	2b00      	cmp	r3, #0
 8009664:	f040 8590 	bne.w	800a188 <_strtod_l+0xbb0>
 8009668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800966a:	b1eb      	cbz	r3, 80096a8 <_strtod_l+0xd0>
 800966c:	4652      	mov	r2, sl
 800966e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009672:	ec43 2b10 	vmov	d0, r2, r3
 8009676:	b01d      	add	sp, #116	; 0x74
 8009678:	ecbd 8b02 	vpop	{d8}
 800967c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009680:	2a20      	cmp	r2, #32
 8009682:	d1cc      	bne.n	800961e <_strtod_l+0x46>
 8009684:	3301      	adds	r3, #1
 8009686:	9317      	str	r3, [sp, #92]	; 0x5c
 8009688:	e7be      	b.n	8009608 <_strtod_l+0x30>
 800968a:	2a2d      	cmp	r2, #45	; 0x2d
 800968c:	d1c7      	bne.n	800961e <_strtod_l+0x46>
 800968e:	2201      	movs	r2, #1
 8009690:	920a      	str	r2, [sp, #40]	; 0x28
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	9217      	str	r2, [sp, #92]	; 0x5c
 8009696:	785b      	ldrb	r3, [r3, #1]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1c2      	bne.n	8009622 <_strtod_l+0x4a>
 800969c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800969e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f040 856e 	bne.w	800a184 <_strtod_l+0xbac>
 80096a8:	4652      	mov	r2, sl
 80096aa:	465b      	mov	r3, fp
 80096ac:	e7e1      	b.n	8009672 <_strtod_l+0x9a>
 80096ae:	2200      	movs	r2, #0
 80096b0:	e7ee      	b.n	8009690 <_strtod_l+0xb8>
 80096b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80096b4:	b13a      	cbz	r2, 80096c6 <_strtod_l+0xee>
 80096b6:	2135      	movs	r1, #53	; 0x35
 80096b8:	a81a      	add	r0, sp, #104	; 0x68
 80096ba:	f002 fd26 	bl	800c10a <__copybits>
 80096be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80096c0:	4620      	mov	r0, r4
 80096c2:	f002 f8e5 	bl	800b890 <_Bfree>
 80096c6:	3f01      	subs	r7, #1
 80096c8:	2f04      	cmp	r7, #4
 80096ca:	d806      	bhi.n	80096da <_strtod_l+0x102>
 80096cc:	e8df f007 	tbb	[pc, r7]
 80096d0:	1714030a 	.word	0x1714030a
 80096d4:	0a          	.byte	0x0a
 80096d5:	00          	.byte	0x00
 80096d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80096da:	0728      	lsls	r0, r5, #28
 80096dc:	d5c0      	bpl.n	8009660 <_strtod_l+0x88>
 80096de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80096e2:	e7bd      	b.n	8009660 <_strtod_l+0x88>
 80096e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80096e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80096ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80096ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80096f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80096f6:	e7f0      	b.n	80096da <_strtod_l+0x102>
 80096f8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800987c <_strtod_l+0x2a4>
 80096fc:	e7ed      	b.n	80096da <_strtod_l+0x102>
 80096fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009702:	f04f 3aff 	mov.w	sl, #4294967295
 8009706:	e7e8      	b.n	80096da <_strtod_l+0x102>
 8009708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800970a:	1c5a      	adds	r2, r3, #1
 800970c:	9217      	str	r2, [sp, #92]	; 0x5c
 800970e:	785b      	ldrb	r3, [r3, #1]
 8009710:	2b30      	cmp	r3, #48	; 0x30
 8009712:	d0f9      	beq.n	8009708 <_strtod_l+0x130>
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0a3      	beq.n	8009660 <_strtod_l+0x88>
 8009718:	2301      	movs	r3, #1
 800971a:	f04f 0900 	mov.w	r9, #0
 800971e:	9304      	str	r3, [sp, #16]
 8009720:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009722:	9308      	str	r3, [sp, #32]
 8009724:	f8cd 901c 	str.w	r9, [sp, #28]
 8009728:	464f      	mov	r7, r9
 800972a:	220a      	movs	r2, #10
 800972c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800972e:	7806      	ldrb	r6, [r0, #0]
 8009730:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009734:	b2d9      	uxtb	r1, r3
 8009736:	2909      	cmp	r1, #9
 8009738:	d92a      	bls.n	8009790 <_strtod_l+0x1b8>
 800973a:	9905      	ldr	r1, [sp, #20]
 800973c:	462a      	mov	r2, r5
 800973e:	f002 ff03 	bl	800c548 <strncmp>
 8009742:	b398      	cbz	r0, 80097ac <_strtod_l+0x1d4>
 8009744:	2000      	movs	r0, #0
 8009746:	4632      	mov	r2, r6
 8009748:	463d      	mov	r5, r7
 800974a:	9005      	str	r0, [sp, #20]
 800974c:	4603      	mov	r3, r0
 800974e:	2a65      	cmp	r2, #101	; 0x65
 8009750:	d001      	beq.n	8009756 <_strtod_l+0x17e>
 8009752:	2a45      	cmp	r2, #69	; 0x45
 8009754:	d118      	bne.n	8009788 <_strtod_l+0x1b0>
 8009756:	b91d      	cbnz	r5, 8009760 <_strtod_l+0x188>
 8009758:	9a04      	ldr	r2, [sp, #16]
 800975a:	4302      	orrs	r2, r0
 800975c:	d09e      	beq.n	800969c <_strtod_l+0xc4>
 800975e:	2500      	movs	r5, #0
 8009760:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009764:	f108 0201 	add.w	r2, r8, #1
 8009768:	9217      	str	r2, [sp, #92]	; 0x5c
 800976a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800976e:	2a2b      	cmp	r2, #43	; 0x2b
 8009770:	d075      	beq.n	800985e <_strtod_l+0x286>
 8009772:	2a2d      	cmp	r2, #45	; 0x2d
 8009774:	d07b      	beq.n	800986e <_strtod_l+0x296>
 8009776:	f04f 0c00 	mov.w	ip, #0
 800977a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800977e:	2909      	cmp	r1, #9
 8009780:	f240 8082 	bls.w	8009888 <_strtod_l+0x2b0>
 8009784:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009788:	2600      	movs	r6, #0
 800978a:	e09d      	b.n	80098c8 <_strtod_l+0x2f0>
 800978c:	2300      	movs	r3, #0
 800978e:	e7c4      	b.n	800971a <_strtod_l+0x142>
 8009790:	2f08      	cmp	r7, #8
 8009792:	bfd8      	it	le
 8009794:	9907      	ldrle	r1, [sp, #28]
 8009796:	f100 0001 	add.w	r0, r0, #1
 800979a:	bfda      	itte	le
 800979c:	fb02 3301 	mlale	r3, r2, r1, r3
 80097a0:	9307      	strle	r3, [sp, #28]
 80097a2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80097a6:	3701      	adds	r7, #1
 80097a8:	9017      	str	r0, [sp, #92]	; 0x5c
 80097aa:	e7bf      	b.n	800972c <_strtod_l+0x154>
 80097ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097ae:	195a      	adds	r2, r3, r5
 80097b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80097b2:	5d5a      	ldrb	r2, [r3, r5]
 80097b4:	2f00      	cmp	r7, #0
 80097b6:	d037      	beq.n	8009828 <_strtod_l+0x250>
 80097b8:	9005      	str	r0, [sp, #20]
 80097ba:	463d      	mov	r5, r7
 80097bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80097c0:	2b09      	cmp	r3, #9
 80097c2:	d912      	bls.n	80097ea <_strtod_l+0x212>
 80097c4:	2301      	movs	r3, #1
 80097c6:	e7c2      	b.n	800974e <_strtod_l+0x176>
 80097c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097ca:	1c5a      	adds	r2, r3, #1
 80097cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80097ce:	785a      	ldrb	r2, [r3, #1]
 80097d0:	3001      	adds	r0, #1
 80097d2:	2a30      	cmp	r2, #48	; 0x30
 80097d4:	d0f8      	beq.n	80097c8 <_strtod_l+0x1f0>
 80097d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80097da:	2b08      	cmp	r3, #8
 80097dc:	f200 84d9 	bhi.w	800a192 <_strtod_l+0xbba>
 80097e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097e2:	9005      	str	r0, [sp, #20]
 80097e4:	2000      	movs	r0, #0
 80097e6:	9308      	str	r3, [sp, #32]
 80097e8:	4605      	mov	r5, r0
 80097ea:	3a30      	subs	r2, #48	; 0x30
 80097ec:	f100 0301 	add.w	r3, r0, #1
 80097f0:	d014      	beq.n	800981c <_strtod_l+0x244>
 80097f2:	9905      	ldr	r1, [sp, #20]
 80097f4:	4419      	add	r1, r3
 80097f6:	9105      	str	r1, [sp, #20]
 80097f8:	462b      	mov	r3, r5
 80097fa:	eb00 0e05 	add.w	lr, r0, r5
 80097fe:	210a      	movs	r1, #10
 8009800:	4573      	cmp	r3, lr
 8009802:	d113      	bne.n	800982c <_strtod_l+0x254>
 8009804:	182b      	adds	r3, r5, r0
 8009806:	2b08      	cmp	r3, #8
 8009808:	f105 0501 	add.w	r5, r5, #1
 800980c:	4405      	add	r5, r0
 800980e:	dc1c      	bgt.n	800984a <_strtod_l+0x272>
 8009810:	9907      	ldr	r1, [sp, #28]
 8009812:	230a      	movs	r3, #10
 8009814:	fb03 2301 	mla	r3, r3, r1, r2
 8009818:	9307      	str	r3, [sp, #28]
 800981a:	2300      	movs	r3, #0
 800981c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800981e:	1c51      	adds	r1, r2, #1
 8009820:	9117      	str	r1, [sp, #92]	; 0x5c
 8009822:	7852      	ldrb	r2, [r2, #1]
 8009824:	4618      	mov	r0, r3
 8009826:	e7c9      	b.n	80097bc <_strtod_l+0x1e4>
 8009828:	4638      	mov	r0, r7
 800982a:	e7d2      	b.n	80097d2 <_strtod_l+0x1fa>
 800982c:	2b08      	cmp	r3, #8
 800982e:	dc04      	bgt.n	800983a <_strtod_l+0x262>
 8009830:	9e07      	ldr	r6, [sp, #28]
 8009832:	434e      	muls	r6, r1
 8009834:	9607      	str	r6, [sp, #28]
 8009836:	3301      	adds	r3, #1
 8009838:	e7e2      	b.n	8009800 <_strtod_l+0x228>
 800983a:	f103 0c01 	add.w	ip, r3, #1
 800983e:	f1bc 0f10 	cmp.w	ip, #16
 8009842:	bfd8      	it	le
 8009844:	fb01 f909 	mulle.w	r9, r1, r9
 8009848:	e7f5      	b.n	8009836 <_strtod_l+0x25e>
 800984a:	2d10      	cmp	r5, #16
 800984c:	bfdc      	itt	le
 800984e:	230a      	movle	r3, #10
 8009850:	fb03 2909 	mlale	r9, r3, r9, r2
 8009854:	e7e1      	b.n	800981a <_strtod_l+0x242>
 8009856:	2300      	movs	r3, #0
 8009858:	9305      	str	r3, [sp, #20]
 800985a:	2301      	movs	r3, #1
 800985c:	e77c      	b.n	8009758 <_strtod_l+0x180>
 800985e:	f04f 0c00 	mov.w	ip, #0
 8009862:	f108 0202 	add.w	r2, r8, #2
 8009866:	9217      	str	r2, [sp, #92]	; 0x5c
 8009868:	f898 2002 	ldrb.w	r2, [r8, #2]
 800986c:	e785      	b.n	800977a <_strtod_l+0x1a2>
 800986e:	f04f 0c01 	mov.w	ip, #1
 8009872:	e7f6      	b.n	8009862 <_strtod_l+0x28a>
 8009874:	0800cf08 	.word	0x0800cf08
 8009878:	0800cdc0 	.word	0x0800cdc0
 800987c:	7ff00000 	.word	0x7ff00000
 8009880:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009882:	1c51      	adds	r1, r2, #1
 8009884:	9117      	str	r1, [sp, #92]	; 0x5c
 8009886:	7852      	ldrb	r2, [r2, #1]
 8009888:	2a30      	cmp	r2, #48	; 0x30
 800988a:	d0f9      	beq.n	8009880 <_strtod_l+0x2a8>
 800988c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009890:	2908      	cmp	r1, #8
 8009892:	f63f af79 	bhi.w	8009788 <_strtod_l+0x1b0>
 8009896:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800989a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800989c:	9206      	str	r2, [sp, #24]
 800989e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80098a0:	1c51      	adds	r1, r2, #1
 80098a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80098a4:	7852      	ldrb	r2, [r2, #1]
 80098a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80098aa:	2e09      	cmp	r6, #9
 80098ac:	d937      	bls.n	800991e <_strtod_l+0x346>
 80098ae:	9e06      	ldr	r6, [sp, #24]
 80098b0:	1b89      	subs	r1, r1, r6
 80098b2:	2908      	cmp	r1, #8
 80098b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80098b8:	dc02      	bgt.n	80098c0 <_strtod_l+0x2e8>
 80098ba:	4576      	cmp	r6, lr
 80098bc:	bfa8      	it	ge
 80098be:	4676      	movge	r6, lr
 80098c0:	f1bc 0f00 	cmp.w	ip, #0
 80098c4:	d000      	beq.n	80098c8 <_strtod_l+0x2f0>
 80098c6:	4276      	negs	r6, r6
 80098c8:	2d00      	cmp	r5, #0
 80098ca:	d14d      	bne.n	8009968 <_strtod_l+0x390>
 80098cc:	9904      	ldr	r1, [sp, #16]
 80098ce:	4301      	orrs	r1, r0
 80098d0:	f47f aec6 	bne.w	8009660 <_strtod_l+0x88>
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f47f aee1 	bne.w	800969c <_strtod_l+0xc4>
 80098da:	2a69      	cmp	r2, #105	; 0x69
 80098dc:	d027      	beq.n	800992e <_strtod_l+0x356>
 80098de:	dc24      	bgt.n	800992a <_strtod_l+0x352>
 80098e0:	2a49      	cmp	r2, #73	; 0x49
 80098e2:	d024      	beq.n	800992e <_strtod_l+0x356>
 80098e4:	2a4e      	cmp	r2, #78	; 0x4e
 80098e6:	f47f aed9 	bne.w	800969c <_strtod_l+0xc4>
 80098ea:	499f      	ldr	r1, [pc, #636]	; (8009b68 <_strtod_l+0x590>)
 80098ec:	a817      	add	r0, sp, #92	; 0x5c
 80098ee:	f001 fea3 	bl	800b638 <__match>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	f43f aed2 	beq.w	800969c <_strtod_l+0xc4>
 80098f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	2b28      	cmp	r3, #40	; 0x28
 80098fe:	d12d      	bne.n	800995c <_strtod_l+0x384>
 8009900:	499a      	ldr	r1, [pc, #616]	; (8009b6c <_strtod_l+0x594>)
 8009902:	aa1a      	add	r2, sp, #104	; 0x68
 8009904:	a817      	add	r0, sp, #92	; 0x5c
 8009906:	f001 feab 	bl	800b660 <__hexnan>
 800990a:	2805      	cmp	r0, #5
 800990c:	d126      	bne.n	800995c <_strtod_l+0x384>
 800990e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009910:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009914:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009918:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800991c:	e6a0      	b.n	8009660 <_strtod_l+0x88>
 800991e:	210a      	movs	r1, #10
 8009920:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009924:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009928:	e7b9      	b.n	800989e <_strtod_l+0x2c6>
 800992a:	2a6e      	cmp	r2, #110	; 0x6e
 800992c:	e7db      	b.n	80098e6 <_strtod_l+0x30e>
 800992e:	4990      	ldr	r1, [pc, #576]	; (8009b70 <_strtod_l+0x598>)
 8009930:	a817      	add	r0, sp, #92	; 0x5c
 8009932:	f001 fe81 	bl	800b638 <__match>
 8009936:	2800      	cmp	r0, #0
 8009938:	f43f aeb0 	beq.w	800969c <_strtod_l+0xc4>
 800993c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800993e:	498d      	ldr	r1, [pc, #564]	; (8009b74 <_strtod_l+0x59c>)
 8009940:	3b01      	subs	r3, #1
 8009942:	a817      	add	r0, sp, #92	; 0x5c
 8009944:	9317      	str	r3, [sp, #92]	; 0x5c
 8009946:	f001 fe77 	bl	800b638 <__match>
 800994a:	b910      	cbnz	r0, 8009952 <_strtod_l+0x37a>
 800994c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800994e:	3301      	adds	r3, #1
 8009950:	9317      	str	r3, [sp, #92]	; 0x5c
 8009952:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009b84 <_strtod_l+0x5ac>
 8009956:	f04f 0a00 	mov.w	sl, #0
 800995a:	e681      	b.n	8009660 <_strtod_l+0x88>
 800995c:	4886      	ldr	r0, [pc, #536]	; (8009b78 <_strtod_l+0x5a0>)
 800995e:	f002 fdeb 	bl	800c538 <nan>
 8009962:	ec5b ab10 	vmov	sl, fp, d0
 8009966:	e67b      	b.n	8009660 <_strtod_l+0x88>
 8009968:	9b05      	ldr	r3, [sp, #20]
 800996a:	9807      	ldr	r0, [sp, #28]
 800996c:	1af3      	subs	r3, r6, r3
 800996e:	2f00      	cmp	r7, #0
 8009970:	bf08      	it	eq
 8009972:	462f      	moveq	r7, r5
 8009974:	2d10      	cmp	r5, #16
 8009976:	9306      	str	r3, [sp, #24]
 8009978:	46a8      	mov	r8, r5
 800997a:	bfa8      	it	ge
 800997c:	f04f 0810 	movge.w	r8, #16
 8009980:	f7f6 fdc0 	bl	8000504 <__aeabi_ui2d>
 8009984:	2d09      	cmp	r5, #9
 8009986:	4682      	mov	sl, r0
 8009988:	468b      	mov	fp, r1
 800998a:	dd13      	ble.n	80099b4 <_strtod_l+0x3dc>
 800998c:	4b7b      	ldr	r3, [pc, #492]	; (8009b7c <_strtod_l+0x5a4>)
 800998e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009992:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009996:	f7f6 fe2f 	bl	80005f8 <__aeabi_dmul>
 800999a:	4682      	mov	sl, r0
 800999c:	4648      	mov	r0, r9
 800999e:	468b      	mov	fp, r1
 80099a0:	f7f6 fdb0 	bl	8000504 <__aeabi_ui2d>
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	4650      	mov	r0, sl
 80099aa:	4659      	mov	r1, fp
 80099ac:	f7f6 fc6e 	bl	800028c <__adddf3>
 80099b0:	4682      	mov	sl, r0
 80099b2:	468b      	mov	fp, r1
 80099b4:	2d0f      	cmp	r5, #15
 80099b6:	dc38      	bgt.n	8009a2a <_strtod_l+0x452>
 80099b8:	9b06      	ldr	r3, [sp, #24]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f43f ae50 	beq.w	8009660 <_strtod_l+0x88>
 80099c0:	dd24      	ble.n	8009a0c <_strtod_l+0x434>
 80099c2:	2b16      	cmp	r3, #22
 80099c4:	dc0b      	bgt.n	80099de <_strtod_l+0x406>
 80099c6:	496d      	ldr	r1, [pc, #436]	; (8009b7c <_strtod_l+0x5a4>)
 80099c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099d0:	4652      	mov	r2, sl
 80099d2:	465b      	mov	r3, fp
 80099d4:	f7f6 fe10 	bl	80005f8 <__aeabi_dmul>
 80099d8:	4682      	mov	sl, r0
 80099da:	468b      	mov	fp, r1
 80099dc:	e640      	b.n	8009660 <_strtod_l+0x88>
 80099de:	9a06      	ldr	r2, [sp, #24]
 80099e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80099e4:	4293      	cmp	r3, r2
 80099e6:	db20      	blt.n	8009a2a <_strtod_l+0x452>
 80099e8:	4c64      	ldr	r4, [pc, #400]	; (8009b7c <_strtod_l+0x5a4>)
 80099ea:	f1c5 050f 	rsb	r5, r5, #15
 80099ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80099f2:	4652      	mov	r2, sl
 80099f4:	465b      	mov	r3, fp
 80099f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099fa:	f7f6 fdfd 	bl	80005f8 <__aeabi_dmul>
 80099fe:	9b06      	ldr	r3, [sp, #24]
 8009a00:	1b5d      	subs	r5, r3, r5
 8009a02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009a06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a0a:	e7e3      	b.n	80099d4 <_strtod_l+0x3fc>
 8009a0c:	9b06      	ldr	r3, [sp, #24]
 8009a0e:	3316      	adds	r3, #22
 8009a10:	db0b      	blt.n	8009a2a <_strtod_l+0x452>
 8009a12:	9b05      	ldr	r3, [sp, #20]
 8009a14:	1b9e      	subs	r6, r3, r6
 8009a16:	4b59      	ldr	r3, [pc, #356]	; (8009b7c <_strtod_l+0x5a4>)
 8009a18:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009a1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a20:	4650      	mov	r0, sl
 8009a22:	4659      	mov	r1, fp
 8009a24:	f7f6 ff12 	bl	800084c <__aeabi_ddiv>
 8009a28:	e7d6      	b.n	80099d8 <_strtod_l+0x400>
 8009a2a:	9b06      	ldr	r3, [sp, #24]
 8009a2c:	eba5 0808 	sub.w	r8, r5, r8
 8009a30:	4498      	add	r8, r3
 8009a32:	f1b8 0f00 	cmp.w	r8, #0
 8009a36:	dd74      	ble.n	8009b22 <_strtod_l+0x54a>
 8009a38:	f018 030f 	ands.w	r3, r8, #15
 8009a3c:	d00a      	beq.n	8009a54 <_strtod_l+0x47c>
 8009a3e:	494f      	ldr	r1, [pc, #316]	; (8009b7c <_strtod_l+0x5a4>)
 8009a40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a44:	4652      	mov	r2, sl
 8009a46:	465b      	mov	r3, fp
 8009a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a4c:	f7f6 fdd4 	bl	80005f8 <__aeabi_dmul>
 8009a50:	4682      	mov	sl, r0
 8009a52:	468b      	mov	fp, r1
 8009a54:	f038 080f 	bics.w	r8, r8, #15
 8009a58:	d04f      	beq.n	8009afa <_strtod_l+0x522>
 8009a5a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009a5e:	dd22      	ble.n	8009aa6 <_strtod_l+0x4ce>
 8009a60:	2500      	movs	r5, #0
 8009a62:	462e      	mov	r6, r5
 8009a64:	9507      	str	r5, [sp, #28]
 8009a66:	9505      	str	r5, [sp, #20]
 8009a68:	2322      	movs	r3, #34	; 0x22
 8009a6a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009b84 <_strtod_l+0x5ac>
 8009a6e:	6023      	str	r3, [r4, #0]
 8009a70:	f04f 0a00 	mov.w	sl, #0
 8009a74:	9b07      	ldr	r3, [sp, #28]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f43f adf2 	beq.w	8009660 <_strtod_l+0x88>
 8009a7c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f001 ff06 	bl	800b890 <_Bfree>
 8009a84:	9905      	ldr	r1, [sp, #20]
 8009a86:	4620      	mov	r0, r4
 8009a88:	f001 ff02 	bl	800b890 <_Bfree>
 8009a8c:	4631      	mov	r1, r6
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f001 fefe 	bl	800b890 <_Bfree>
 8009a94:	9907      	ldr	r1, [sp, #28]
 8009a96:	4620      	mov	r0, r4
 8009a98:	f001 fefa 	bl	800b890 <_Bfree>
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f001 fef6 	bl	800b890 <_Bfree>
 8009aa4:	e5dc      	b.n	8009660 <_strtod_l+0x88>
 8009aa6:	4b36      	ldr	r3, [pc, #216]	; (8009b80 <_strtod_l+0x5a8>)
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	2300      	movs	r3, #0
 8009aac:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009ab0:	4650      	mov	r0, sl
 8009ab2:	4659      	mov	r1, fp
 8009ab4:	4699      	mov	r9, r3
 8009ab6:	f1b8 0f01 	cmp.w	r8, #1
 8009aba:	dc21      	bgt.n	8009b00 <_strtod_l+0x528>
 8009abc:	b10b      	cbz	r3, 8009ac2 <_strtod_l+0x4ea>
 8009abe:	4682      	mov	sl, r0
 8009ac0:	468b      	mov	fp, r1
 8009ac2:	4b2f      	ldr	r3, [pc, #188]	; (8009b80 <_strtod_l+0x5a8>)
 8009ac4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009ac8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009acc:	4652      	mov	r2, sl
 8009ace:	465b      	mov	r3, fp
 8009ad0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009ad4:	f7f6 fd90 	bl	80005f8 <__aeabi_dmul>
 8009ad8:	4b2a      	ldr	r3, [pc, #168]	; (8009b84 <_strtod_l+0x5ac>)
 8009ada:	460a      	mov	r2, r1
 8009adc:	400b      	ands	r3, r1
 8009ade:	492a      	ldr	r1, [pc, #168]	; (8009b88 <_strtod_l+0x5b0>)
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	d8bc      	bhi.n	8009a60 <_strtod_l+0x488>
 8009ae6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009aea:	428b      	cmp	r3, r1
 8009aec:	bf86      	itte	hi
 8009aee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009b8c <_strtod_l+0x5b4>
 8009af2:	f04f 3aff 	movhi.w	sl, #4294967295
 8009af6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009afa:	2300      	movs	r3, #0
 8009afc:	9304      	str	r3, [sp, #16]
 8009afe:	e084      	b.n	8009c0a <_strtod_l+0x632>
 8009b00:	f018 0f01 	tst.w	r8, #1
 8009b04:	d005      	beq.n	8009b12 <_strtod_l+0x53a>
 8009b06:	9b04      	ldr	r3, [sp, #16]
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f7f6 fd74 	bl	80005f8 <__aeabi_dmul>
 8009b10:	2301      	movs	r3, #1
 8009b12:	9a04      	ldr	r2, [sp, #16]
 8009b14:	3208      	adds	r2, #8
 8009b16:	f109 0901 	add.w	r9, r9, #1
 8009b1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009b1e:	9204      	str	r2, [sp, #16]
 8009b20:	e7c9      	b.n	8009ab6 <_strtod_l+0x4de>
 8009b22:	d0ea      	beq.n	8009afa <_strtod_l+0x522>
 8009b24:	f1c8 0800 	rsb	r8, r8, #0
 8009b28:	f018 020f 	ands.w	r2, r8, #15
 8009b2c:	d00a      	beq.n	8009b44 <_strtod_l+0x56c>
 8009b2e:	4b13      	ldr	r3, [pc, #76]	; (8009b7c <_strtod_l+0x5a4>)
 8009b30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b34:	4650      	mov	r0, sl
 8009b36:	4659      	mov	r1, fp
 8009b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3c:	f7f6 fe86 	bl	800084c <__aeabi_ddiv>
 8009b40:	4682      	mov	sl, r0
 8009b42:	468b      	mov	fp, r1
 8009b44:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009b48:	d0d7      	beq.n	8009afa <_strtod_l+0x522>
 8009b4a:	f1b8 0f1f 	cmp.w	r8, #31
 8009b4e:	dd1f      	ble.n	8009b90 <_strtod_l+0x5b8>
 8009b50:	2500      	movs	r5, #0
 8009b52:	462e      	mov	r6, r5
 8009b54:	9507      	str	r5, [sp, #28]
 8009b56:	9505      	str	r5, [sp, #20]
 8009b58:	2322      	movs	r3, #34	; 0x22
 8009b5a:	f04f 0a00 	mov.w	sl, #0
 8009b5e:	f04f 0b00 	mov.w	fp, #0
 8009b62:	6023      	str	r3, [r4, #0]
 8009b64:	e786      	b.n	8009a74 <_strtod_l+0x49c>
 8009b66:	bf00      	nop
 8009b68:	0800cd99 	.word	0x0800cd99
 8009b6c:	0800cdd4 	.word	0x0800cdd4
 8009b70:	0800cd91 	.word	0x0800cd91
 8009b74:	0800ce13 	.word	0x0800ce13
 8009b78:	0800d0c0 	.word	0x0800d0c0
 8009b7c:	0800cfa0 	.word	0x0800cfa0
 8009b80:	0800cf78 	.word	0x0800cf78
 8009b84:	7ff00000 	.word	0x7ff00000
 8009b88:	7ca00000 	.word	0x7ca00000
 8009b8c:	7fefffff 	.word	0x7fefffff
 8009b90:	f018 0310 	ands.w	r3, r8, #16
 8009b94:	bf18      	it	ne
 8009b96:	236a      	movne	r3, #106	; 0x6a
 8009b98:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009f48 <_strtod_l+0x970>
 8009b9c:	9304      	str	r3, [sp, #16]
 8009b9e:	4650      	mov	r0, sl
 8009ba0:	4659      	mov	r1, fp
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f018 0f01 	tst.w	r8, #1
 8009ba8:	d004      	beq.n	8009bb4 <_strtod_l+0x5dc>
 8009baa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009bae:	f7f6 fd23 	bl	80005f8 <__aeabi_dmul>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009bb8:	f109 0908 	add.w	r9, r9, #8
 8009bbc:	d1f2      	bne.n	8009ba4 <_strtod_l+0x5cc>
 8009bbe:	b10b      	cbz	r3, 8009bc4 <_strtod_l+0x5ec>
 8009bc0:	4682      	mov	sl, r0
 8009bc2:	468b      	mov	fp, r1
 8009bc4:	9b04      	ldr	r3, [sp, #16]
 8009bc6:	b1c3      	cbz	r3, 8009bfa <_strtod_l+0x622>
 8009bc8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009bcc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	4659      	mov	r1, fp
 8009bd4:	dd11      	ble.n	8009bfa <_strtod_l+0x622>
 8009bd6:	2b1f      	cmp	r3, #31
 8009bd8:	f340 8124 	ble.w	8009e24 <_strtod_l+0x84c>
 8009bdc:	2b34      	cmp	r3, #52	; 0x34
 8009bde:	bfde      	ittt	le
 8009be0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009be4:	f04f 33ff 	movle.w	r3, #4294967295
 8009be8:	fa03 f202 	lslle.w	r2, r3, r2
 8009bec:	f04f 0a00 	mov.w	sl, #0
 8009bf0:	bfcc      	ite	gt
 8009bf2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009bf6:	ea02 0b01 	andle.w	fp, r2, r1
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4650      	mov	r0, sl
 8009c00:	4659      	mov	r1, fp
 8009c02:	f7f6 ff61 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d1a2      	bne.n	8009b50 <_strtod_l+0x578>
 8009c0a:	9b07      	ldr	r3, [sp, #28]
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	9908      	ldr	r1, [sp, #32]
 8009c10:	462b      	mov	r3, r5
 8009c12:	463a      	mov	r2, r7
 8009c14:	4620      	mov	r0, r4
 8009c16:	f001 fea3 	bl	800b960 <__s2b>
 8009c1a:	9007      	str	r0, [sp, #28]
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	f43f af1f 	beq.w	8009a60 <_strtod_l+0x488>
 8009c22:	9b05      	ldr	r3, [sp, #20]
 8009c24:	1b9e      	subs	r6, r3, r6
 8009c26:	9b06      	ldr	r3, [sp, #24]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	bfb4      	ite	lt
 8009c2c:	4633      	movlt	r3, r6
 8009c2e:	2300      	movge	r3, #0
 8009c30:	930c      	str	r3, [sp, #48]	; 0x30
 8009c32:	9b06      	ldr	r3, [sp, #24]
 8009c34:	2500      	movs	r5, #0
 8009c36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c3a:	9312      	str	r3, [sp, #72]	; 0x48
 8009c3c:	462e      	mov	r6, r5
 8009c3e:	9b07      	ldr	r3, [sp, #28]
 8009c40:	4620      	mov	r0, r4
 8009c42:	6859      	ldr	r1, [r3, #4]
 8009c44:	f001 fde4 	bl	800b810 <_Balloc>
 8009c48:	9005      	str	r0, [sp, #20]
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	f43f af0c 	beq.w	8009a68 <_strtod_l+0x490>
 8009c50:	9b07      	ldr	r3, [sp, #28]
 8009c52:	691a      	ldr	r2, [r3, #16]
 8009c54:	3202      	adds	r2, #2
 8009c56:	f103 010c 	add.w	r1, r3, #12
 8009c5a:	0092      	lsls	r2, r2, #2
 8009c5c:	300c      	adds	r0, #12
 8009c5e:	f7fe feac 	bl	80089ba <memcpy>
 8009c62:	ec4b ab10 	vmov	d0, sl, fp
 8009c66:	aa1a      	add	r2, sp, #104	; 0x68
 8009c68:	a919      	add	r1, sp, #100	; 0x64
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f002 f9be 	bl	800bfec <__d2b>
 8009c70:	ec4b ab18 	vmov	d8, sl, fp
 8009c74:	9018      	str	r0, [sp, #96]	; 0x60
 8009c76:	2800      	cmp	r0, #0
 8009c78:	f43f aef6 	beq.w	8009a68 <_strtod_l+0x490>
 8009c7c:	2101      	movs	r1, #1
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f001 ff08 	bl	800ba94 <__i2b>
 8009c84:	4606      	mov	r6, r0
 8009c86:	2800      	cmp	r0, #0
 8009c88:	f43f aeee 	beq.w	8009a68 <_strtod_l+0x490>
 8009c8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009c8e:	9904      	ldr	r1, [sp, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	bfab      	itete	ge
 8009c94:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009c96:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009c98:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009c9a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009c9e:	bfac      	ite	ge
 8009ca0:	eb03 0902 	addge.w	r9, r3, r2
 8009ca4:	1ad7      	sublt	r7, r2, r3
 8009ca6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009ca8:	eba3 0801 	sub.w	r8, r3, r1
 8009cac:	4490      	add	r8, r2
 8009cae:	4ba1      	ldr	r3, [pc, #644]	; (8009f34 <_strtod_l+0x95c>)
 8009cb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8009cb4:	4598      	cmp	r8, r3
 8009cb6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009cba:	f280 80c7 	bge.w	8009e4c <_strtod_l+0x874>
 8009cbe:	eba3 0308 	sub.w	r3, r3, r8
 8009cc2:	2b1f      	cmp	r3, #31
 8009cc4:	eba2 0203 	sub.w	r2, r2, r3
 8009cc8:	f04f 0101 	mov.w	r1, #1
 8009ccc:	f300 80b1 	bgt.w	8009e32 <_strtod_l+0x85a>
 8009cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8009cd4:	930d      	str	r3, [sp, #52]	; 0x34
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	9308      	str	r3, [sp, #32]
 8009cda:	eb09 0802 	add.w	r8, r9, r2
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	45c1      	cmp	r9, r8
 8009ce2:	4417      	add	r7, r2
 8009ce4:	441f      	add	r7, r3
 8009ce6:	464b      	mov	r3, r9
 8009ce8:	bfa8      	it	ge
 8009cea:	4643      	movge	r3, r8
 8009cec:	42bb      	cmp	r3, r7
 8009cee:	bfa8      	it	ge
 8009cf0:	463b      	movge	r3, r7
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	bfc2      	ittt	gt
 8009cf6:	eba8 0803 	subgt.w	r8, r8, r3
 8009cfa:	1aff      	subgt	r7, r7, r3
 8009cfc:	eba9 0903 	subgt.w	r9, r9, r3
 8009d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	dd17      	ble.n	8009d36 <_strtod_l+0x75e>
 8009d06:	4631      	mov	r1, r6
 8009d08:	461a      	mov	r2, r3
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f001 ff82 	bl	800bc14 <__pow5mult>
 8009d10:	4606      	mov	r6, r0
 8009d12:	2800      	cmp	r0, #0
 8009d14:	f43f aea8 	beq.w	8009a68 <_strtod_l+0x490>
 8009d18:	4601      	mov	r1, r0
 8009d1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d1c:	4620      	mov	r0, r4
 8009d1e:	f001 fecf 	bl	800bac0 <__multiply>
 8009d22:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d24:	2800      	cmp	r0, #0
 8009d26:	f43f ae9f 	beq.w	8009a68 <_strtod_l+0x490>
 8009d2a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f001 fdaf 	bl	800b890 <_Bfree>
 8009d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d34:	9318      	str	r3, [sp, #96]	; 0x60
 8009d36:	f1b8 0f00 	cmp.w	r8, #0
 8009d3a:	f300 808c 	bgt.w	8009e56 <_strtod_l+0x87e>
 8009d3e:	9b06      	ldr	r3, [sp, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	dd08      	ble.n	8009d56 <_strtod_l+0x77e>
 8009d44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009d46:	9905      	ldr	r1, [sp, #20]
 8009d48:	4620      	mov	r0, r4
 8009d4a:	f001 ff63 	bl	800bc14 <__pow5mult>
 8009d4e:	9005      	str	r0, [sp, #20]
 8009d50:	2800      	cmp	r0, #0
 8009d52:	f43f ae89 	beq.w	8009a68 <_strtod_l+0x490>
 8009d56:	2f00      	cmp	r7, #0
 8009d58:	dd08      	ble.n	8009d6c <_strtod_l+0x794>
 8009d5a:	9905      	ldr	r1, [sp, #20]
 8009d5c:	463a      	mov	r2, r7
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f001 ffb2 	bl	800bcc8 <__lshift>
 8009d64:	9005      	str	r0, [sp, #20]
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f43f ae7e 	beq.w	8009a68 <_strtod_l+0x490>
 8009d6c:	f1b9 0f00 	cmp.w	r9, #0
 8009d70:	dd08      	ble.n	8009d84 <_strtod_l+0x7ac>
 8009d72:	4631      	mov	r1, r6
 8009d74:	464a      	mov	r2, r9
 8009d76:	4620      	mov	r0, r4
 8009d78:	f001 ffa6 	bl	800bcc8 <__lshift>
 8009d7c:	4606      	mov	r6, r0
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	f43f ae72 	beq.w	8009a68 <_strtod_l+0x490>
 8009d84:	9a05      	ldr	r2, [sp, #20]
 8009d86:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f002 f829 	bl	800bde0 <__mdiff>
 8009d8e:	4605      	mov	r5, r0
 8009d90:	2800      	cmp	r0, #0
 8009d92:	f43f ae69 	beq.w	8009a68 <_strtod_l+0x490>
 8009d96:	68c3      	ldr	r3, [r0, #12]
 8009d98:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60c3      	str	r3, [r0, #12]
 8009d9e:	4631      	mov	r1, r6
 8009da0:	f002 f802 	bl	800bda8 <__mcmp>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	da60      	bge.n	8009e6a <_strtod_l+0x892>
 8009da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009daa:	ea53 030a 	orrs.w	r3, r3, sl
 8009dae:	f040 8082 	bne.w	8009eb6 <_strtod_l+0x8de>
 8009db2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d17d      	bne.n	8009eb6 <_strtod_l+0x8de>
 8009dba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009dbe:	0d1b      	lsrs	r3, r3, #20
 8009dc0:	051b      	lsls	r3, r3, #20
 8009dc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009dc6:	d976      	bls.n	8009eb6 <_strtod_l+0x8de>
 8009dc8:	696b      	ldr	r3, [r5, #20]
 8009dca:	b913      	cbnz	r3, 8009dd2 <_strtod_l+0x7fa>
 8009dcc:	692b      	ldr	r3, [r5, #16]
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	dd71      	ble.n	8009eb6 <_strtod_l+0x8de>
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	4620      	mov	r0, r4
 8009dd8:	f001 ff76 	bl	800bcc8 <__lshift>
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4605      	mov	r5, r0
 8009de0:	f001 ffe2 	bl	800bda8 <__mcmp>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	dd66      	ble.n	8009eb6 <_strtod_l+0x8de>
 8009de8:	9904      	ldr	r1, [sp, #16]
 8009dea:	4a53      	ldr	r2, [pc, #332]	; (8009f38 <_strtod_l+0x960>)
 8009dec:	465b      	mov	r3, fp
 8009dee:	2900      	cmp	r1, #0
 8009df0:	f000 8081 	beq.w	8009ef6 <_strtod_l+0x91e>
 8009df4:	ea02 010b 	and.w	r1, r2, fp
 8009df8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009dfc:	dc7b      	bgt.n	8009ef6 <_strtod_l+0x91e>
 8009dfe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009e02:	f77f aea9 	ble.w	8009b58 <_strtod_l+0x580>
 8009e06:	4b4d      	ldr	r3, [pc, #308]	; (8009f3c <_strtod_l+0x964>)
 8009e08:	4650      	mov	r0, sl
 8009e0a:	4659      	mov	r1, fp
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f7f6 fbf3 	bl	80005f8 <__aeabi_dmul>
 8009e12:	460b      	mov	r3, r1
 8009e14:	4303      	orrs	r3, r0
 8009e16:	bf08      	it	eq
 8009e18:	2322      	moveq	r3, #34	; 0x22
 8009e1a:	4682      	mov	sl, r0
 8009e1c:	468b      	mov	fp, r1
 8009e1e:	bf08      	it	eq
 8009e20:	6023      	streq	r3, [r4, #0]
 8009e22:	e62b      	b.n	8009a7c <_strtod_l+0x4a4>
 8009e24:	f04f 32ff 	mov.w	r2, #4294967295
 8009e28:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2c:	ea03 0a0a 	and.w	sl, r3, sl
 8009e30:	e6e3      	b.n	8009bfa <_strtod_l+0x622>
 8009e32:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009e36:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009e3a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009e3e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009e42:	fa01 f308 	lsl.w	r3, r1, r8
 8009e46:	9308      	str	r3, [sp, #32]
 8009e48:	910d      	str	r1, [sp, #52]	; 0x34
 8009e4a:	e746      	b.n	8009cda <_strtod_l+0x702>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	9308      	str	r3, [sp, #32]
 8009e50:	2301      	movs	r3, #1
 8009e52:	930d      	str	r3, [sp, #52]	; 0x34
 8009e54:	e741      	b.n	8009cda <_strtod_l+0x702>
 8009e56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e58:	4642      	mov	r2, r8
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f001 ff34 	bl	800bcc8 <__lshift>
 8009e60:	9018      	str	r0, [sp, #96]	; 0x60
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f47f af6b 	bne.w	8009d3e <_strtod_l+0x766>
 8009e68:	e5fe      	b.n	8009a68 <_strtod_l+0x490>
 8009e6a:	465f      	mov	r7, fp
 8009e6c:	d16e      	bne.n	8009f4c <_strtod_l+0x974>
 8009e6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009e70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e74:	b342      	cbz	r2, 8009ec8 <_strtod_l+0x8f0>
 8009e76:	4a32      	ldr	r2, [pc, #200]	; (8009f40 <_strtod_l+0x968>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d128      	bne.n	8009ece <_strtod_l+0x8f6>
 8009e7c:	9b04      	ldr	r3, [sp, #16]
 8009e7e:	4651      	mov	r1, sl
 8009e80:	b1eb      	cbz	r3, 8009ebe <_strtod_l+0x8e6>
 8009e82:	4b2d      	ldr	r3, [pc, #180]	; (8009f38 <_strtod_l+0x960>)
 8009e84:	403b      	ands	r3, r7
 8009e86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8e:	d819      	bhi.n	8009ec4 <_strtod_l+0x8ec>
 8009e90:	0d1b      	lsrs	r3, r3, #20
 8009e92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009e96:	fa02 f303 	lsl.w	r3, r2, r3
 8009e9a:	4299      	cmp	r1, r3
 8009e9c:	d117      	bne.n	8009ece <_strtod_l+0x8f6>
 8009e9e:	4b29      	ldr	r3, [pc, #164]	; (8009f44 <_strtod_l+0x96c>)
 8009ea0:	429f      	cmp	r7, r3
 8009ea2:	d102      	bne.n	8009eaa <_strtod_l+0x8d2>
 8009ea4:	3101      	adds	r1, #1
 8009ea6:	f43f addf 	beq.w	8009a68 <_strtod_l+0x490>
 8009eaa:	4b23      	ldr	r3, [pc, #140]	; (8009f38 <_strtod_l+0x960>)
 8009eac:	403b      	ands	r3, r7
 8009eae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009eb2:	f04f 0a00 	mov.w	sl, #0
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1a4      	bne.n	8009e06 <_strtod_l+0x82e>
 8009ebc:	e5de      	b.n	8009a7c <_strtod_l+0x4a4>
 8009ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8009ec2:	e7ea      	b.n	8009e9a <_strtod_l+0x8c2>
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	e7e8      	b.n	8009e9a <_strtod_l+0x8c2>
 8009ec8:	ea53 030a 	orrs.w	r3, r3, sl
 8009ecc:	d08c      	beq.n	8009de8 <_strtod_l+0x810>
 8009ece:	9b08      	ldr	r3, [sp, #32]
 8009ed0:	b1db      	cbz	r3, 8009f0a <_strtod_l+0x932>
 8009ed2:	423b      	tst	r3, r7
 8009ed4:	d0ef      	beq.n	8009eb6 <_strtod_l+0x8de>
 8009ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ed8:	9a04      	ldr	r2, [sp, #16]
 8009eda:	4650      	mov	r0, sl
 8009edc:	4659      	mov	r1, fp
 8009ede:	b1c3      	cbz	r3, 8009f12 <_strtod_l+0x93a>
 8009ee0:	f7ff fb5d 	bl	800959e <sulp>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	ec51 0b18 	vmov	r0, r1, d8
 8009eec:	f7f6 f9ce 	bl	800028c <__adddf3>
 8009ef0:	4682      	mov	sl, r0
 8009ef2:	468b      	mov	fp, r1
 8009ef4:	e7df      	b.n	8009eb6 <_strtod_l+0x8de>
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009efc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009f00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009f04:	f04f 3aff 	mov.w	sl, #4294967295
 8009f08:	e7d5      	b.n	8009eb6 <_strtod_l+0x8de>
 8009f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f0c:	ea13 0f0a 	tst.w	r3, sl
 8009f10:	e7e0      	b.n	8009ed4 <_strtod_l+0x8fc>
 8009f12:	f7ff fb44 	bl	800959e <sulp>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	ec51 0b18 	vmov	r0, r1, d8
 8009f1e:	f7f6 f9b3 	bl	8000288 <__aeabi_dsub>
 8009f22:	2200      	movs	r2, #0
 8009f24:	2300      	movs	r3, #0
 8009f26:	4682      	mov	sl, r0
 8009f28:	468b      	mov	fp, r1
 8009f2a:	f7f6 fdcd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f2e:	2800      	cmp	r0, #0
 8009f30:	d0c1      	beq.n	8009eb6 <_strtod_l+0x8de>
 8009f32:	e611      	b.n	8009b58 <_strtod_l+0x580>
 8009f34:	fffffc02 	.word	0xfffffc02
 8009f38:	7ff00000 	.word	0x7ff00000
 8009f3c:	39500000 	.word	0x39500000
 8009f40:	000fffff 	.word	0x000fffff
 8009f44:	7fefffff 	.word	0x7fefffff
 8009f48:	0800cde8 	.word	0x0800cde8
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	4628      	mov	r0, r5
 8009f50:	f002 f8a8 	bl	800c0a4 <__ratio>
 8009f54:	ec59 8b10 	vmov	r8, r9, d0
 8009f58:	ee10 0a10 	vmov	r0, s0
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f62:	4649      	mov	r1, r9
 8009f64:	f7f6 fdc4 	bl	8000af0 <__aeabi_dcmple>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	d07a      	beq.n	800a062 <_strtod_l+0xa8a>
 8009f6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d04a      	beq.n	800a008 <_strtod_l+0xa30>
 8009f72:	4b95      	ldr	r3, [pc, #596]	; (800a1c8 <_strtod_l+0xbf0>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a1c8 <_strtod_l+0xbf0>
 8009f7e:	f04f 0800 	mov.w	r8, #0
 8009f82:	4b92      	ldr	r3, [pc, #584]	; (800a1cc <_strtod_l+0xbf4>)
 8009f84:	403b      	ands	r3, r7
 8009f86:	930d      	str	r3, [sp, #52]	; 0x34
 8009f88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f8a:	4b91      	ldr	r3, [pc, #580]	; (800a1d0 <_strtod_l+0xbf8>)
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	f040 80b0 	bne.w	800a0f2 <_strtod_l+0xb1a>
 8009f92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f96:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009f9a:	ec4b ab10 	vmov	d0, sl, fp
 8009f9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009fa2:	f001 ffa7 	bl	800bef4 <__ulp>
 8009fa6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009faa:	ec53 2b10 	vmov	r2, r3, d0
 8009fae:	f7f6 fb23 	bl	80005f8 <__aeabi_dmul>
 8009fb2:	4652      	mov	r2, sl
 8009fb4:	465b      	mov	r3, fp
 8009fb6:	f7f6 f969 	bl	800028c <__adddf3>
 8009fba:	460b      	mov	r3, r1
 8009fbc:	4983      	ldr	r1, [pc, #524]	; (800a1cc <_strtod_l+0xbf4>)
 8009fbe:	4a85      	ldr	r2, [pc, #532]	; (800a1d4 <_strtod_l+0xbfc>)
 8009fc0:	4019      	ands	r1, r3
 8009fc2:	4291      	cmp	r1, r2
 8009fc4:	4682      	mov	sl, r0
 8009fc6:	d960      	bls.n	800a08a <_strtod_l+0xab2>
 8009fc8:	ee18 3a90 	vmov	r3, s17
 8009fcc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d104      	bne.n	8009fde <_strtod_l+0xa06>
 8009fd4:	ee18 3a10 	vmov	r3, s16
 8009fd8:	3301      	adds	r3, #1
 8009fda:	f43f ad45 	beq.w	8009a68 <_strtod_l+0x490>
 8009fde:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a1e0 <_strtod_l+0xc08>
 8009fe2:	f04f 3aff 	mov.w	sl, #4294967295
 8009fe6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f001 fc51 	bl	800b890 <_Bfree>
 8009fee:	9905      	ldr	r1, [sp, #20]
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	f001 fc4d 	bl	800b890 <_Bfree>
 8009ff6:	4631      	mov	r1, r6
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f001 fc49 	bl	800b890 <_Bfree>
 8009ffe:	4629      	mov	r1, r5
 800a000:	4620      	mov	r0, r4
 800a002:	f001 fc45 	bl	800b890 <_Bfree>
 800a006:	e61a      	b.n	8009c3e <_strtod_l+0x666>
 800a008:	f1ba 0f00 	cmp.w	sl, #0
 800a00c:	d11b      	bne.n	800a046 <_strtod_l+0xa6e>
 800a00e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a012:	b9f3      	cbnz	r3, 800a052 <_strtod_l+0xa7a>
 800a014:	4b6c      	ldr	r3, [pc, #432]	; (800a1c8 <_strtod_l+0xbf0>)
 800a016:	2200      	movs	r2, #0
 800a018:	4640      	mov	r0, r8
 800a01a:	4649      	mov	r1, r9
 800a01c:	f7f6 fd5e 	bl	8000adc <__aeabi_dcmplt>
 800a020:	b9d0      	cbnz	r0, 800a058 <_strtod_l+0xa80>
 800a022:	4640      	mov	r0, r8
 800a024:	4649      	mov	r1, r9
 800a026:	4b6c      	ldr	r3, [pc, #432]	; (800a1d8 <_strtod_l+0xc00>)
 800a028:	2200      	movs	r2, #0
 800a02a:	f7f6 fae5 	bl	80005f8 <__aeabi_dmul>
 800a02e:	4680      	mov	r8, r0
 800a030:	4689      	mov	r9, r1
 800a032:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a036:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a03a:	9315      	str	r3, [sp, #84]	; 0x54
 800a03c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a040:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a044:	e79d      	b.n	8009f82 <_strtod_l+0x9aa>
 800a046:	f1ba 0f01 	cmp.w	sl, #1
 800a04a:	d102      	bne.n	800a052 <_strtod_l+0xa7a>
 800a04c:	2f00      	cmp	r7, #0
 800a04e:	f43f ad83 	beq.w	8009b58 <_strtod_l+0x580>
 800a052:	4b62      	ldr	r3, [pc, #392]	; (800a1dc <_strtod_l+0xc04>)
 800a054:	2200      	movs	r2, #0
 800a056:	e78e      	b.n	8009f76 <_strtod_l+0x99e>
 800a058:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a1d8 <_strtod_l+0xc00>
 800a05c:	f04f 0800 	mov.w	r8, #0
 800a060:	e7e7      	b.n	800a032 <_strtod_l+0xa5a>
 800a062:	4b5d      	ldr	r3, [pc, #372]	; (800a1d8 <_strtod_l+0xc00>)
 800a064:	4640      	mov	r0, r8
 800a066:	4649      	mov	r1, r9
 800a068:	2200      	movs	r2, #0
 800a06a:	f7f6 fac5 	bl	80005f8 <__aeabi_dmul>
 800a06e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a070:	4680      	mov	r8, r0
 800a072:	4689      	mov	r9, r1
 800a074:	b933      	cbnz	r3, 800a084 <_strtod_l+0xaac>
 800a076:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a07a:	900e      	str	r0, [sp, #56]	; 0x38
 800a07c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a07e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a082:	e7dd      	b.n	800a040 <_strtod_l+0xa68>
 800a084:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a088:	e7f9      	b.n	800a07e <_strtod_l+0xaa6>
 800a08a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a08e:	9b04      	ldr	r3, [sp, #16]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d1a8      	bne.n	8009fe6 <_strtod_l+0xa0e>
 800a094:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a09a:	0d1b      	lsrs	r3, r3, #20
 800a09c:	051b      	lsls	r3, r3, #20
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d1a1      	bne.n	8009fe6 <_strtod_l+0xa0e>
 800a0a2:	4640      	mov	r0, r8
 800a0a4:	4649      	mov	r1, r9
 800a0a6:	f7f6 fe07 	bl	8000cb8 <__aeabi_d2lz>
 800a0aa:	f7f6 fa77 	bl	800059c <__aeabi_l2d>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4640      	mov	r0, r8
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	f7f6 f8e7 	bl	8000288 <__aeabi_dsub>
 800a0ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0c0:	ea43 030a 	orr.w	r3, r3, sl
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	4680      	mov	r8, r0
 800a0c8:	4689      	mov	r9, r1
 800a0ca:	d055      	beq.n	800a178 <_strtod_l+0xba0>
 800a0cc:	a336      	add	r3, pc, #216	; (adr r3, 800a1a8 <_strtod_l+0xbd0>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	f7f6 fd03 	bl	8000adc <__aeabi_dcmplt>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	f47f acd0 	bne.w	8009a7c <_strtod_l+0x4a4>
 800a0dc:	a334      	add	r3, pc, #208	; (adr r3, 800a1b0 <_strtod_l+0xbd8>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	f7f6 fd17 	bl	8000b18 <__aeabi_dcmpgt>
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	f43f af7b 	beq.w	8009fe6 <_strtod_l+0xa0e>
 800a0f0:	e4c4      	b.n	8009a7c <_strtod_l+0x4a4>
 800a0f2:	9b04      	ldr	r3, [sp, #16]
 800a0f4:	b333      	cbz	r3, 800a144 <_strtod_l+0xb6c>
 800a0f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a0fc:	d822      	bhi.n	800a144 <_strtod_l+0xb6c>
 800a0fe:	a32e      	add	r3, pc, #184	; (adr r3, 800a1b8 <_strtod_l+0xbe0>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	4640      	mov	r0, r8
 800a106:	4649      	mov	r1, r9
 800a108:	f7f6 fcf2 	bl	8000af0 <__aeabi_dcmple>
 800a10c:	b1a0      	cbz	r0, 800a138 <_strtod_l+0xb60>
 800a10e:	4649      	mov	r1, r9
 800a110:	4640      	mov	r0, r8
 800a112:	f7f6 fd49 	bl	8000ba8 <__aeabi_d2uiz>
 800a116:	2801      	cmp	r0, #1
 800a118:	bf38      	it	cc
 800a11a:	2001      	movcc	r0, #1
 800a11c:	f7f6 f9f2 	bl	8000504 <__aeabi_ui2d>
 800a120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a122:	4680      	mov	r8, r0
 800a124:	4689      	mov	r9, r1
 800a126:	bb23      	cbnz	r3, 800a172 <_strtod_l+0xb9a>
 800a128:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a12c:	9010      	str	r0, [sp, #64]	; 0x40
 800a12e:	9311      	str	r3, [sp, #68]	; 0x44
 800a130:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a134:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a13a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a13c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a140:	1a9b      	subs	r3, r3, r2
 800a142:	9309      	str	r3, [sp, #36]	; 0x24
 800a144:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a148:	eeb0 0a48 	vmov.f32	s0, s16
 800a14c:	eef0 0a68 	vmov.f32	s1, s17
 800a150:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a154:	f001 fece 	bl	800bef4 <__ulp>
 800a158:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a15c:	ec53 2b10 	vmov	r2, r3, d0
 800a160:	f7f6 fa4a 	bl	80005f8 <__aeabi_dmul>
 800a164:	ec53 2b18 	vmov	r2, r3, d8
 800a168:	f7f6 f890 	bl	800028c <__adddf3>
 800a16c:	4682      	mov	sl, r0
 800a16e:	468b      	mov	fp, r1
 800a170:	e78d      	b.n	800a08e <_strtod_l+0xab6>
 800a172:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a176:	e7db      	b.n	800a130 <_strtod_l+0xb58>
 800a178:	a311      	add	r3, pc, #68	; (adr r3, 800a1c0 <_strtod_l+0xbe8>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 fcad 	bl	8000adc <__aeabi_dcmplt>
 800a182:	e7b2      	b.n	800a0ea <_strtod_l+0xb12>
 800a184:	2300      	movs	r3, #0
 800a186:	930a      	str	r3, [sp, #40]	; 0x28
 800a188:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a18a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	f7ff ba6b 	b.w	8009668 <_strtod_l+0x90>
 800a192:	2a65      	cmp	r2, #101	; 0x65
 800a194:	f43f ab5f 	beq.w	8009856 <_strtod_l+0x27e>
 800a198:	2a45      	cmp	r2, #69	; 0x45
 800a19a:	f43f ab5c 	beq.w	8009856 <_strtod_l+0x27e>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	f7ff bb94 	b.w	80098cc <_strtod_l+0x2f4>
 800a1a4:	f3af 8000 	nop.w
 800a1a8:	94a03595 	.word	0x94a03595
 800a1ac:	3fdfffff 	.word	0x3fdfffff
 800a1b0:	35afe535 	.word	0x35afe535
 800a1b4:	3fe00000 	.word	0x3fe00000
 800a1b8:	ffc00000 	.word	0xffc00000
 800a1bc:	41dfffff 	.word	0x41dfffff
 800a1c0:	94a03595 	.word	0x94a03595
 800a1c4:	3fcfffff 	.word	0x3fcfffff
 800a1c8:	3ff00000 	.word	0x3ff00000
 800a1cc:	7ff00000 	.word	0x7ff00000
 800a1d0:	7fe00000 	.word	0x7fe00000
 800a1d4:	7c9fffff 	.word	0x7c9fffff
 800a1d8:	3fe00000 	.word	0x3fe00000
 800a1dc:	bff00000 	.word	0xbff00000
 800a1e0:	7fefffff 	.word	0x7fefffff

0800a1e4 <strtod>:
 800a1e4:	460a      	mov	r2, r1
 800a1e6:	4601      	mov	r1, r0
 800a1e8:	4802      	ldr	r0, [pc, #8]	; (800a1f4 <strtod+0x10>)
 800a1ea:	4b03      	ldr	r3, [pc, #12]	; (800a1f8 <strtod+0x14>)
 800a1ec:	6800      	ldr	r0, [r0, #0]
 800a1ee:	f7ff b9f3 	b.w	80095d8 <_strtod_l>
 800a1f2:	bf00      	nop
 800a1f4:	20000010 	.word	0x20000010
 800a1f8:	20000078 	.word	0x20000078

0800a1fc <_write_r>:
 800a1fc:	b538      	push	{r3, r4, r5, lr}
 800a1fe:	4d07      	ldr	r5, [pc, #28]	; (800a21c <_write_r+0x20>)
 800a200:	4604      	mov	r4, r0
 800a202:	4608      	mov	r0, r1
 800a204:	4611      	mov	r1, r2
 800a206:	2200      	movs	r2, #0
 800a208:	602a      	str	r2, [r5, #0]
 800a20a:	461a      	mov	r2, r3
 800a20c:	f7f7 fc85 	bl	8001b1a <_write>
 800a210:	1c43      	adds	r3, r0, #1
 800a212:	d102      	bne.n	800a21a <_write_r+0x1e>
 800a214:	682b      	ldr	r3, [r5, #0]
 800a216:	b103      	cbz	r3, 800a21a <_write_r+0x1e>
 800a218:	6023      	str	r3, [r4, #0]
 800a21a:	bd38      	pop	{r3, r4, r5, pc}
 800a21c:	20004580 	.word	0x20004580

0800a220 <_close_r>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4d06      	ldr	r5, [pc, #24]	; (800a23c <_close_r+0x1c>)
 800a224:	2300      	movs	r3, #0
 800a226:	4604      	mov	r4, r0
 800a228:	4608      	mov	r0, r1
 800a22a:	602b      	str	r3, [r5, #0]
 800a22c:	f7f7 fc91 	bl	8001b52 <_close>
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	d102      	bne.n	800a23a <_close_r+0x1a>
 800a234:	682b      	ldr	r3, [r5, #0]
 800a236:	b103      	cbz	r3, 800a23a <_close_r+0x1a>
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	bd38      	pop	{r3, r4, r5, pc}
 800a23c:	20004580 	.word	0x20004580

0800a240 <quorem>:
 800a240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a244:	6903      	ldr	r3, [r0, #16]
 800a246:	690c      	ldr	r4, [r1, #16]
 800a248:	42a3      	cmp	r3, r4
 800a24a:	4607      	mov	r7, r0
 800a24c:	f2c0 8081 	blt.w	800a352 <quorem+0x112>
 800a250:	3c01      	subs	r4, #1
 800a252:	f101 0814 	add.w	r8, r1, #20
 800a256:	f100 0514 	add.w	r5, r0, #20
 800a25a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a25e:	9301      	str	r3, [sp, #4]
 800a260:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a268:	3301      	adds	r3, #1
 800a26a:	429a      	cmp	r2, r3
 800a26c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a270:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a274:	fbb2 f6f3 	udiv	r6, r2, r3
 800a278:	d331      	bcc.n	800a2de <quorem+0x9e>
 800a27a:	f04f 0e00 	mov.w	lr, #0
 800a27e:	4640      	mov	r0, r8
 800a280:	46ac      	mov	ip, r5
 800a282:	46f2      	mov	sl, lr
 800a284:	f850 2b04 	ldr.w	r2, [r0], #4
 800a288:	b293      	uxth	r3, r2
 800a28a:	fb06 e303 	mla	r3, r6, r3, lr
 800a28e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a292:	b29b      	uxth	r3, r3
 800a294:	ebaa 0303 	sub.w	r3, sl, r3
 800a298:	f8dc a000 	ldr.w	sl, [ip]
 800a29c:	0c12      	lsrs	r2, r2, #16
 800a29e:	fa13 f38a 	uxtah	r3, r3, sl
 800a2a2:	fb06 e202 	mla	r2, r6, r2, lr
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	9b00      	ldr	r3, [sp, #0]
 800a2aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a2ae:	b292      	uxth	r2, r2
 800a2b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a2b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a2bc:	4581      	cmp	r9, r0
 800a2be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2c2:	f84c 3b04 	str.w	r3, [ip], #4
 800a2c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a2ca:	d2db      	bcs.n	800a284 <quorem+0x44>
 800a2cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a2d0:	b92b      	cbnz	r3, 800a2de <quorem+0x9e>
 800a2d2:	9b01      	ldr	r3, [sp, #4]
 800a2d4:	3b04      	subs	r3, #4
 800a2d6:	429d      	cmp	r5, r3
 800a2d8:	461a      	mov	r2, r3
 800a2da:	d32e      	bcc.n	800a33a <quorem+0xfa>
 800a2dc:	613c      	str	r4, [r7, #16]
 800a2de:	4638      	mov	r0, r7
 800a2e0:	f001 fd62 	bl	800bda8 <__mcmp>
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	db24      	blt.n	800a332 <quorem+0xf2>
 800a2e8:	3601      	adds	r6, #1
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f04f 0c00 	mov.w	ip, #0
 800a2f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2f4:	f8d0 e000 	ldr.w	lr, [r0]
 800a2f8:	b293      	uxth	r3, r2
 800a2fa:	ebac 0303 	sub.w	r3, ip, r3
 800a2fe:	0c12      	lsrs	r2, r2, #16
 800a300:	fa13 f38e 	uxtah	r3, r3, lr
 800a304:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a308:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a312:	45c1      	cmp	r9, r8
 800a314:	f840 3b04 	str.w	r3, [r0], #4
 800a318:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a31c:	d2e8      	bcs.n	800a2f0 <quorem+0xb0>
 800a31e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a322:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a326:	b922      	cbnz	r2, 800a332 <quorem+0xf2>
 800a328:	3b04      	subs	r3, #4
 800a32a:	429d      	cmp	r5, r3
 800a32c:	461a      	mov	r2, r3
 800a32e:	d30a      	bcc.n	800a346 <quorem+0x106>
 800a330:	613c      	str	r4, [r7, #16]
 800a332:	4630      	mov	r0, r6
 800a334:	b003      	add	sp, #12
 800a336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a33a:	6812      	ldr	r2, [r2, #0]
 800a33c:	3b04      	subs	r3, #4
 800a33e:	2a00      	cmp	r2, #0
 800a340:	d1cc      	bne.n	800a2dc <quorem+0x9c>
 800a342:	3c01      	subs	r4, #1
 800a344:	e7c7      	b.n	800a2d6 <quorem+0x96>
 800a346:	6812      	ldr	r2, [r2, #0]
 800a348:	3b04      	subs	r3, #4
 800a34a:	2a00      	cmp	r2, #0
 800a34c:	d1f0      	bne.n	800a330 <quorem+0xf0>
 800a34e:	3c01      	subs	r4, #1
 800a350:	e7eb      	b.n	800a32a <quorem+0xea>
 800a352:	2000      	movs	r0, #0
 800a354:	e7ee      	b.n	800a334 <quorem+0xf4>
	...

0800a358 <_dtoa_r>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	ed2d 8b04 	vpush	{d8-d9}
 800a360:	ec57 6b10 	vmov	r6, r7, d0
 800a364:	b093      	sub	sp, #76	; 0x4c
 800a366:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a368:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a36c:	9106      	str	r1, [sp, #24]
 800a36e:	ee10 aa10 	vmov	sl, s0
 800a372:	4604      	mov	r4, r0
 800a374:	9209      	str	r2, [sp, #36]	; 0x24
 800a376:	930c      	str	r3, [sp, #48]	; 0x30
 800a378:	46bb      	mov	fp, r7
 800a37a:	b975      	cbnz	r5, 800a39a <_dtoa_r+0x42>
 800a37c:	2010      	movs	r0, #16
 800a37e:	f001 fa21 	bl	800b7c4 <malloc>
 800a382:	4602      	mov	r2, r0
 800a384:	6260      	str	r0, [r4, #36]	; 0x24
 800a386:	b920      	cbnz	r0, 800a392 <_dtoa_r+0x3a>
 800a388:	4ba7      	ldr	r3, [pc, #668]	; (800a628 <_dtoa_r+0x2d0>)
 800a38a:	21ea      	movs	r1, #234	; 0xea
 800a38c:	48a7      	ldr	r0, [pc, #668]	; (800a62c <_dtoa_r+0x2d4>)
 800a38e:	f002 f8fd 	bl	800c58c <__assert_func>
 800a392:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a396:	6005      	str	r5, [r0, #0]
 800a398:	60c5      	str	r5, [r0, #12]
 800a39a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a39c:	6819      	ldr	r1, [r3, #0]
 800a39e:	b151      	cbz	r1, 800a3b6 <_dtoa_r+0x5e>
 800a3a0:	685a      	ldr	r2, [r3, #4]
 800a3a2:	604a      	str	r2, [r1, #4]
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	4093      	lsls	r3, r2
 800a3a8:	608b      	str	r3, [r1, #8]
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	f001 fa70 	bl	800b890 <_Bfree>
 800a3b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	601a      	str	r2, [r3, #0]
 800a3b6:	1e3b      	subs	r3, r7, #0
 800a3b8:	bfaa      	itet	ge
 800a3ba:	2300      	movge	r3, #0
 800a3bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a3c0:	f8c8 3000 	strge.w	r3, [r8]
 800a3c4:	4b9a      	ldr	r3, [pc, #616]	; (800a630 <_dtoa_r+0x2d8>)
 800a3c6:	bfbc      	itt	lt
 800a3c8:	2201      	movlt	r2, #1
 800a3ca:	f8c8 2000 	strlt.w	r2, [r8]
 800a3ce:	ea33 030b 	bics.w	r3, r3, fp
 800a3d2:	d11b      	bne.n	800a40c <_dtoa_r+0xb4>
 800a3d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3da:	6013      	str	r3, [r2, #0]
 800a3dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3e0:	4333      	orrs	r3, r6
 800a3e2:	f000 8592 	beq.w	800af0a <_dtoa_r+0xbb2>
 800a3e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3e8:	b963      	cbnz	r3, 800a404 <_dtoa_r+0xac>
 800a3ea:	4b92      	ldr	r3, [pc, #584]	; (800a634 <_dtoa_r+0x2dc>)
 800a3ec:	e022      	b.n	800a434 <_dtoa_r+0xdc>
 800a3ee:	4b92      	ldr	r3, [pc, #584]	; (800a638 <_dtoa_r+0x2e0>)
 800a3f0:	9301      	str	r3, [sp, #4]
 800a3f2:	3308      	adds	r3, #8
 800a3f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3f6:	6013      	str	r3, [r2, #0]
 800a3f8:	9801      	ldr	r0, [sp, #4]
 800a3fa:	b013      	add	sp, #76	; 0x4c
 800a3fc:	ecbd 8b04 	vpop	{d8-d9}
 800a400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a404:	4b8b      	ldr	r3, [pc, #556]	; (800a634 <_dtoa_r+0x2dc>)
 800a406:	9301      	str	r3, [sp, #4]
 800a408:	3303      	adds	r3, #3
 800a40a:	e7f3      	b.n	800a3f4 <_dtoa_r+0x9c>
 800a40c:	2200      	movs	r2, #0
 800a40e:	2300      	movs	r3, #0
 800a410:	4650      	mov	r0, sl
 800a412:	4659      	mov	r1, fp
 800a414:	f7f6 fb58 	bl	8000ac8 <__aeabi_dcmpeq>
 800a418:	ec4b ab19 	vmov	d9, sl, fp
 800a41c:	4680      	mov	r8, r0
 800a41e:	b158      	cbz	r0, 800a438 <_dtoa_r+0xe0>
 800a420:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a422:	2301      	movs	r3, #1
 800a424:	6013      	str	r3, [r2, #0]
 800a426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 856b 	beq.w	800af04 <_dtoa_r+0xbac>
 800a42e:	4883      	ldr	r0, [pc, #524]	; (800a63c <_dtoa_r+0x2e4>)
 800a430:	6018      	str	r0, [r3, #0]
 800a432:	1e43      	subs	r3, r0, #1
 800a434:	9301      	str	r3, [sp, #4]
 800a436:	e7df      	b.n	800a3f8 <_dtoa_r+0xa0>
 800a438:	ec4b ab10 	vmov	d0, sl, fp
 800a43c:	aa10      	add	r2, sp, #64	; 0x40
 800a43e:	a911      	add	r1, sp, #68	; 0x44
 800a440:	4620      	mov	r0, r4
 800a442:	f001 fdd3 	bl	800bfec <__d2b>
 800a446:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a44a:	ee08 0a10 	vmov	s16, r0
 800a44e:	2d00      	cmp	r5, #0
 800a450:	f000 8084 	beq.w	800a55c <_dtoa_r+0x204>
 800a454:	ee19 3a90 	vmov	r3, s19
 800a458:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a45c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a460:	4656      	mov	r6, sl
 800a462:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a466:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a46a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a46e:	4b74      	ldr	r3, [pc, #464]	; (800a640 <_dtoa_r+0x2e8>)
 800a470:	2200      	movs	r2, #0
 800a472:	4630      	mov	r0, r6
 800a474:	4639      	mov	r1, r7
 800a476:	f7f5 ff07 	bl	8000288 <__aeabi_dsub>
 800a47a:	a365      	add	r3, pc, #404	; (adr r3, 800a610 <_dtoa_r+0x2b8>)
 800a47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a480:	f7f6 f8ba 	bl	80005f8 <__aeabi_dmul>
 800a484:	a364      	add	r3, pc, #400	; (adr r3, 800a618 <_dtoa_r+0x2c0>)
 800a486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48a:	f7f5 feff 	bl	800028c <__adddf3>
 800a48e:	4606      	mov	r6, r0
 800a490:	4628      	mov	r0, r5
 800a492:	460f      	mov	r7, r1
 800a494:	f7f6 f846 	bl	8000524 <__aeabi_i2d>
 800a498:	a361      	add	r3, pc, #388	; (adr r3, 800a620 <_dtoa_r+0x2c8>)
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	f7f6 f8ab 	bl	80005f8 <__aeabi_dmul>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	460b      	mov	r3, r1
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	4639      	mov	r1, r7
 800a4aa:	f7f5 feef 	bl	800028c <__adddf3>
 800a4ae:	4606      	mov	r6, r0
 800a4b0:	460f      	mov	r7, r1
 800a4b2:	f7f6 fb51 	bl	8000b58 <__aeabi_d2iz>
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	9000      	str	r0, [sp, #0]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	4630      	mov	r0, r6
 800a4be:	4639      	mov	r1, r7
 800a4c0:	f7f6 fb0c 	bl	8000adc <__aeabi_dcmplt>
 800a4c4:	b150      	cbz	r0, 800a4dc <_dtoa_r+0x184>
 800a4c6:	9800      	ldr	r0, [sp, #0]
 800a4c8:	f7f6 f82c 	bl	8000524 <__aeabi_i2d>
 800a4cc:	4632      	mov	r2, r6
 800a4ce:	463b      	mov	r3, r7
 800a4d0:	f7f6 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4d4:	b910      	cbnz	r0, 800a4dc <_dtoa_r+0x184>
 800a4d6:	9b00      	ldr	r3, [sp, #0]
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	9300      	str	r3, [sp, #0]
 800a4dc:	9b00      	ldr	r3, [sp, #0]
 800a4de:	2b16      	cmp	r3, #22
 800a4e0:	d85a      	bhi.n	800a598 <_dtoa_r+0x240>
 800a4e2:	9a00      	ldr	r2, [sp, #0]
 800a4e4:	4b57      	ldr	r3, [pc, #348]	; (800a644 <_dtoa_r+0x2ec>)
 800a4e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ee:	ec51 0b19 	vmov	r0, r1, d9
 800a4f2:	f7f6 faf3 	bl	8000adc <__aeabi_dcmplt>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d050      	beq.n	800a59c <_dtoa_r+0x244>
 800a4fa:	9b00      	ldr	r3, [sp, #0]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	2300      	movs	r3, #0
 800a502:	930b      	str	r3, [sp, #44]	; 0x2c
 800a504:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a506:	1b5d      	subs	r5, r3, r5
 800a508:	1e6b      	subs	r3, r5, #1
 800a50a:	9305      	str	r3, [sp, #20]
 800a50c:	bf45      	ittet	mi
 800a50e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a512:	9304      	strmi	r3, [sp, #16]
 800a514:	2300      	movpl	r3, #0
 800a516:	2300      	movmi	r3, #0
 800a518:	bf4c      	ite	mi
 800a51a:	9305      	strmi	r3, [sp, #20]
 800a51c:	9304      	strpl	r3, [sp, #16]
 800a51e:	9b00      	ldr	r3, [sp, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	db3d      	blt.n	800a5a0 <_dtoa_r+0x248>
 800a524:	9b05      	ldr	r3, [sp, #20]
 800a526:	9a00      	ldr	r2, [sp, #0]
 800a528:	920a      	str	r2, [sp, #40]	; 0x28
 800a52a:	4413      	add	r3, r2
 800a52c:	9305      	str	r3, [sp, #20]
 800a52e:	2300      	movs	r3, #0
 800a530:	9307      	str	r3, [sp, #28]
 800a532:	9b06      	ldr	r3, [sp, #24]
 800a534:	2b09      	cmp	r3, #9
 800a536:	f200 8089 	bhi.w	800a64c <_dtoa_r+0x2f4>
 800a53a:	2b05      	cmp	r3, #5
 800a53c:	bfc4      	itt	gt
 800a53e:	3b04      	subgt	r3, #4
 800a540:	9306      	strgt	r3, [sp, #24]
 800a542:	9b06      	ldr	r3, [sp, #24]
 800a544:	f1a3 0302 	sub.w	r3, r3, #2
 800a548:	bfcc      	ite	gt
 800a54a:	2500      	movgt	r5, #0
 800a54c:	2501      	movle	r5, #1
 800a54e:	2b03      	cmp	r3, #3
 800a550:	f200 8087 	bhi.w	800a662 <_dtoa_r+0x30a>
 800a554:	e8df f003 	tbb	[pc, r3]
 800a558:	59383a2d 	.word	0x59383a2d
 800a55c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a560:	441d      	add	r5, r3
 800a562:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a566:	2b20      	cmp	r3, #32
 800a568:	bfc1      	itttt	gt
 800a56a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a56e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a572:	fa0b f303 	lslgt.w	r3, fp, r3
 800a576:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a57a:	bfda      	itte	le
 800a57c:	f1c3 0320 	rsble	r3, r3, #32
 800a580:	fa06 f003 	lslle.w	r0, r6, r3
 800a584:	4318      	orrgt	r0, r3
 800a586:	f7f5 ffbd 	bl	8000504 <__aeabi_ui2d>
 800a58a:	2301      	movs	r3, #1
 800a58c:	4606      	mov	r6, r0
 800a58e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a592:	3d01      	subs	r5, #1
 800a594:	930e      	str	r3, [sp, #56]	; 0x38
 800a596:	e76a      	b.n	800a46e <_dtoa_r+0x116>
 800a598:	2301      	movs	r3, #1
 800a59a:	e7b2      	b.n	800a502 <_dtoa_r+0x1aa>
 800a59c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a59e:	e7b1      	b.n	800a504 <_dtoa_r+0x1ac>
 800a5a0:	9b04      	ldr	r3, [sp, #16]
 800a5a2:	9a00      	ldr	r2, [sp, #0]
 800a5a4:	1a9b      	subs	r3, r3, r2
 800a5a6:	9304      	str	r3, [sp, #16]
 800a5a8:	4253      	negs	r3, r2
 800a5aa:	9307      	str	r3, [sp, #28]
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	930a      	str	r3, [sp, #40]	; 0x28
 800a5b0:	e7bf      	b.n	800a532 <_dtoa_r+0x1da>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	9308      	str	r3, [sp, #32]
 800a5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	dc55      	bgt.n	800a668 <_dtoa_r+0x310>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5c6:	e00c      	b.n	800a5e2 <_dtoa_r+0x28a>
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e7f3      	b.n	800a5b4 <_dtoa_r+0x25c>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5d0:	9308      	str	r3, [sp, #32]
 800a5d2:	9b00      	ldr	r3, [sp, #0]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	9302      	str	r3, [sp, #8]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	9303      	str	r3, [sp, #12]
 800a5de:	bfb8      	it	lt
 800a5e0:	2301      	movlt	r3, #1
 800a5e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	6042      	str	r2, [r0, #4]
 800a5e8:	2204      	movs	r2, #4
 800a5ea:	f102 0614 	add.w	r6, r2, #20
 800a5ee:	429e      	cmp	r6, r3
 800a5f0:	6841      	ldr	r1, [r0, #4]
 800a5f2:	d93d      	bls.n	800a670 <_dtoa_r+0x318>
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	f001 f90b 	bl	800b810 <_Balloc>
 800a5fa:	9001      	str	r0, [sp, #4]
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d13b      	bne.n	800a678 <_dtoa_r+0x320>
 800a600:	4b11      	ldr	r3, [pc, #68]	; (800a648 <_dtoa_r+0x2f0>)
 800a602:	4602      	mov	r2, r0
 800a604:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a608:	e6c0      	b.n	800a38c <_dtoa_r+0x34>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e7df      	b.n	800a5ce <_dtoa_r+0x276>
 800a60e:	bf00      	nop
 800a610:	636f4361 	.word	0x636f4361
 800a614:	3fd287a7 	.word	0x3fd287a7
 800a618:	8b60c8b3 	.word	0x8b60c8b3
 800a61c:	3fc68a28 	.word	0x3fc68a28
 800a620:	509f79fb 	.word	0x509f79fb
 800a624:	3fd34413 	.word	0x3fd34413
 800a628:	0800ce1d 	.word	0x0800ce1d
 800a62c:	0800ce34 	.word	0x0800ce34
 800a630:	7ff00000 	.word	0x7ff00000
 800a634:	0800ce19 	.word	0x0800ce19
 800a638:	0800ce10 	.word	0x0800ce10
 800a63c:	0800cd9d 	.word	0x0800cd9d
 800a640:	3ff80000 	.word	0x3ff80000
 800a644:	0800cfa0 	.word	0x0800cfa0
 800a648:	0800ce8f 	.word	0x0800ce8f
 800a64c:	2501      	movs	r5, #1
 800a64e:	2300      	movs	r3, #0
 800a650:	9306      	str	r3, [sp, #24]
 800a652:	9508      	str	r5, [sp, #32]
 800a654:	f04f 33ff 	mov.w	r3, #4294967295
 800a658:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a65c:	2200      	movs	r2, #0
 800a65e:	2312      	movs	r3, #18
 800a660:	e7b0      	b.n	800a5c4 <_dtoa_r+0x26c>
 800a662:	2301      	movs	r3, #1
 800a664:	9308      	str	r3, [sp, #32]
 800a666:	e7f5      	b.n	800a654 <_dtoa_r+0x2fc>
 800a668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a66a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a66e:	e7b8      	b.n	800a5e2 <_dtoa_r+0x28a>
 800a670:	3101      	adds	r1, #1
 800a672:	6041      	str	r1, [r0, #4]
 800a674:	0052      	lsls	r2, r2, #1
 800a676:	e7b8      	b.n	800a5ea <_dtoa_r+0x292>
 800a678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a67a:	9a01      	ldr	r2, [sp, #4]
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	9b03      	ldr	r3, [sp, #12]
 800a680:	2b0e      	cmp	r3, #14
 800a682:	f200 809d 	bhi.w	800a7c0 <_dtoa_r+0x468>
 800a686:	2d00      	cmp	r5, #0
 800a688:	f000 809a 	beq.w	800a7c0 <_dtoa_r+0x468>
 800a68c:	9b00      	ldr	r3, [sp, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	dd32      	ble.n	800a6f8 <_dtoa_r+0x3a0>
 800a692:	4ab7      	ldr	r2, [pc, #732]	; (800a970 <_dtoa_r+0x618>)
 800a694:	f003 030f 	and.w	r3, r3, #15
 800a698:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a69c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6a0:	9b00      	ldr	r3, [sp, #0]
 800a6a2:	05d8      	lsls	r0, r3, #23
 800a6a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a6a8:	d516      	bpl.n	800a6d8 <_dtoa_r+0x380>
 800a6aa:	4bb2      	ldr	r3, [pc, #712]	; (800a974 <_dtoa_r+0x61c>)
 800a6ac:	ec51 0b19 	vmov	r0, r1, d9
 800a6b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6b4:	f7f6 f8ca 	bl	800084c <__aeabi_ddiv>
 800a6b8:	f007 070f 	and.w	r7, r7, #15
 800a6bc:	4682      	mov	sl, r0
 800a6be:	468b      	mov	fp, r1
 800a6c0:	2503      	movs	r5, #3
 800a6c2:	4eac      	ldr	r6, [pc, #688]	; (800a974 <_dtoa_r+0x61c>)
 800a6c4:	b957      	cbnz	r7, 800a6dc <_dtoa_r+0x384>
 800a6c6:	4642      	mov	r2, r8
 800a6c8:	464b      	mov	r3, r9
 800a6ca:	4650      	mov	r0, sl
 800a6cc:	4659      	mov	r1, fp
 800a6ce:	f7f6 f8bd 	bl	800084c <__aeabi_ddiv>
 800a6d2:	4682      	mov	sl, r0
 800a6d4:	468b      	mov	fp, r1
 800a6d6:	e028      	b.n	800a72a <_dtoa_r+0x3d2>
 800a6d8:	2502      	movs	r5, #2
 800a6da:	e7f2      	b.n	800a6c2 <_dtoa_r+0x36a>
 800a6dc:	07f9      	lsls	r1, r7, #31
 800a6de:	d508      	bpl.n	800a6f2 <_dtoa_r+0x39a>
 800a6e0:	4640      	mov	r0, r8
 800a6e2:	4649      	mov	r1, r9
 800a6e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6e8:	f7f5 ff86 	bl	80005f8 <__aeabi_dmul>
 800a6ec:	3501      	adds	r5, #1
 800a6ee:	4680      	mov	r8, r0
 800a6f0:	4689      	mov	r9, r1
 800a6f2:	107f      	asrs	r7, r7, #1
 800a6f4:	3608      	adds	r6, #8
 800a6f6:	e7e5      	b.n	800a6c4 <_dtoa_r+0x36c>
 800a6f8:	f000 809b 	beq.w	800a832 <_dtoa_r+0x4da>
 800a6fc:	9b00      	ldr	r3, [sp, #0]
 800a6fe:	4f9d      	ldr	r7, [pc, #628]	; (800a974 <_dtoa_r+0x61c>)
 800a700:	425e      	negs	r6, r3
 800a702:	4b9b      	ldr	r3, [pc, #620]	; (800a970 <_dtoa_r+0x618>)
 800a704:	f006 020f 	and.w	r2, r6, #15
 800a708:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a710:	ec51 0b19 	vmov	r0, r1, d9
 800a714:	f7f5 ff70 	bl	80005f8 <__aeabi_dmul>
 800a718:	1136      	asrs	r6, r6, #4
 800a71a:	4682      	mov	sl, r0
 800a71c:	468b      	mov	fp, r1
 800a71e:	2300      	movs	r3, #0
 800a720:	2502      	movs	r5, #2
 800a722:	2e00      	cmp	r6, #0
 800a724:	d17a      	bne.n	800a81c <_dtoa_r+0x4c4>
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1d3      	bne.n	800a6d2 <_dtoa_r+0x37a>
 800a72a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 8082 	beq.w	800a836 <_dtoa_r+0x4de>
 800a732:	4b91      	ldr	r3, [pc, #580]	; (800a978 <_dtoa_r+0x620>)
 800a734:	2200      	movs	r2, #0
 800a736:	4650      	mov	r0, sl
 800a738:	4659      	mov	r1, fp
 800a73a:	f7f6 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d079      	beq.n	800a836 <_dtoa_r+0x4de>
 800a742:	9b03      	ldr	r3, [sp, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d076      	beq.n	800a836 <_dtoa_r+0x4de>
 800a748:	9b02      	ldr	r3, [sp, #8]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	dd36      	ble.n	800a7bc <_dtoa_r+0x464>
 800a74e:	9b00      	ldr	r3, [sp, #0]
 800a750:	4650      	mov	r0, sl
 800a752:	4659      	mov	r1, fp
 800a754:	1e5f      	subs	r7, r3, #1
 800a756:	2200      	movs	r2, #0
 800a758:	4b88      	ldr	r3, [pc, #544]	; (800a97c <_dtoa_r+0x624>)
 800a75a:	f7f5 ff4d 	bl	80005f8 <__aeabi_dmul>
 800a75e:	9e02      	ldr	r6, [sp, #8]
 800a760:	4682      	mov	sl, r0
 800a762:	468b      	mov	fp, r1
 800a764:	3501      	adds	r5, #1
 800a766:	4628      	mov	r0, r5
 800a768:	f7f5 fedc 	bl	8000524 <__aeabi_i2d>
 800a76c:	4652      	mov	r2, sl
 800a76e:	465b      	mov	r3, fp
 800a770:	f7f5 ff42 	bl	80005f8 <__aeabi_dmul>
 800a774:	4b82      	ldr	r3, [pc, #520]	; (800a980 <_dtoa_r+0x628>)
 800a776:	2200      	movs	r2, #0
 800a778:	f7f5 fd88 	bl	800028c <__adddf3>
 800a77c:	46d0      	mov	r8, sl
 800a77e:	46d9      	mov	r9, fp
 800a780:	4682      	mov	sl, r0
 800a782:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a786:	2e00      	cmp	r6, #0
 800a788:	d158      	bne.n	800a83c <_dtoa_r+0x4e4>
 800a78a:	4b7e      	ldr	r3, [pc, #504]	; (800a984 <_dtoa_r+0x62c>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	4640      	mov	r0, r8
 800a790:	4649      	mov	r1, r9
 800a792:	f7f5 fd79 	bl	8000288 <__aeabi_dsub>
 800a796:	4652      	mov	r2, sl
 800a798:	465b      	mov	r3, fp
 800a79a:	4680      	mov	r8, r0
 800a79c:	4689      	mov	r9, r1
 800a79e:	f7f6 f9bb 	bl	8000b18 <__aeabi_dcmpgt>
 800a7a2:	2800      	cmp	r0, #0
 800a7a4:	f040 8295 	bne.w	800acd2 <_dtoa_r+0x97a>
 800a7a8:	4652      	mov	r2, sl
 800a7aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	4649      	mov	r1, r9
 800a7b2:	f7f6 f993 	bl	8000adc <__aeabi_dcmplt>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	f040 8289 	bne.w	800acce <_dtoa_r+0x976>
 800a7bc:	ec5b ab19 	vmov	sl, fp, d9
 800a7c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f2c0 8148 	blt.w	800aa58 <_dtoa_r+0x700>
 800a7c8:	9a00      	ldr	r2, [sp, #0]
 800a7ca:	2a0e      	cmp	r2, #14
 800a7cc:	f300 8144 	bgt.w	800aa58 <_dtoa_r+0x700>
 800a7d0:	4b67      	ldr	r3, [pc, #412]	; (800a970 <_dtoa_r+0x618>)
 800a7d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f280 80d5 	bge.w	800a98c <_dtoa_r+0x634>
 800a7e2:	9b03      	ldr	r3, [sp, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	f300 80d1 	bgt.w	800a98c <_dtoa_r+0x634>
 800a7ea:	f040 826f 	bne.w	800accc <_dtoa_r+0x974>
 800a7ee:	4b65      	ldr	r3, [pc, #404]	; (800a984 <_dtoa_r+0x62c>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	4640      	mov	r0, r8
 800a7f4:	4649      	mov	r1, r9
 800a7f6:	f7f5 feff 	bl	80005f8 <__aeabi_dmul>
 800a7fa:	4652      	mov	r2, sl
 800a7fc:	465b      	mov	r3, fp
 800a7fe:	f7f6 f981 	bl	8000b04 <__aeabi_dcmpge>
 800a802:	9e03      	ldr	r6, [sp, #12]
 800a804:	4637      	mov	r7, r6
 800a806:	2800      	cmp	r0, #0
 800a808:	f040 8245 	bne.w	800ac96 <_dtoa_r+0x93e>
 800a80c:	9d01      	ldr	r5, [sp, #4]
 800a80e:	2331      	movs	r3, #49	; 0x31
 800a810:	f805 3b01 	strb.w	r3, [r5], #1
 800a814:	9b00      	ldr	r3, [sp, #0]
 800a816:	3301      	adds	r3, #1
 800a818:	9300      	str	r3, [sp, #0]
 800a81a:	e240      	b.n	800ac9e <_dtoa_r+0x946>
 800a81c:	07f2      	lsls	r2, r6, #31
 800a81e:	d505      	bpl.n	800a82c <_dtoa_r+0x4d4>
 800a820:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a824:	f7f5 fee8 	bl	80005f8 <__aeabi_dmul>
 800a828:	3501      	adds	r5, #1
 800a82a:	2301      	movs	r3, #1
 800a82c:	1076      	asrs	r6, r6, #1
 800a82e:	3708      	adds	r7, #8
 800a830:	e777      	b.n	800a722 <_dtoa_r+0x3ca>
 800a832:	2502      	movs	r5, #2
 800a834:	e779      	b.n	800a72a <_dtoa_r+0x3d2>
 800a836:	9f00      	ldr	r7, [sp, #0]
 800a838:	9e03      	ldr	r6, [sp, #12]
 800a83a:	e794      	b.n	800a766 <_dtoa_r+0x40e>
 800a83c:	9901      	ldr	r1, [sp, #4]
 800a83e:	4b4c      	ldr	r3, [pc, #304]	; (800a970 <_dtoa_r+0x618>)
 800a840:	4431      	add	r1, r6
 800a842:	910d      	str	r1, [sp, #52]	; 0x34
 800a844:	9908      	ldr	r1, [sp, #32]
 800a846:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a84a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a84e:	2900      	cmp	r1, #0
 800a850:	d043      	beq.n	800a8da <_dtoa_r+0x582>
 800a852:	494d      	ldr	r1, [pc, #308]	; (800a988 <_dtoa_r+0x630>)
 800a854:	2000      	movs	r0, #0
 800a856:	f7f5 fff9 	bl	800084c <__aeabi_ddiv>
 800a85a:	4652      	mov	r2, sl
 800a85c:	465b      	mov	r3, fp
 800a85e:	f7f5 fd13 	bl	8000288 <__aeabi_dsub>
 800a862:	9d01      	ldr	r5, [sp, #4]
 800a864:	4682      	mov	sl, r0
 800a866:	468b      	mov	fp, r1
 800a868:	4649      	mov	r1, r9
 800a86a:	4640      	mov	r0, r8
 800a86c:	f7f6 f974 	bl	8000b58 <__aeabi_d2iz>
 800a870:	4606      	mov	r6, r0
 800a872:	f7f5 fe57 	bl	8000524 <__aeabi_i2d>
 800a876:	4602      	mov	r2, r0
 800a878:	460b      	mov	r3, r1
 800a87a:	4640      	mov	r0, r8
 800a87c:	4649      	mov	r1, r9
 800a87e:	f7f5 fd03 	bl	8000288 <__aeabi_dsub>
 800a882:	3630      	adds	r6, #48	; 0x30
 800a884:	f805 6b01 	strb.w	r6, [r5], #1
 800a888:	4652      	mov	r2, sl
 800a88a:	465b      	mov	r3, fp
 800a88c:	4680      	mov	r8, r0
 800a88e:	4689      	mov	r9, r1
 800a890:	f7f6 f924 	bl	8000adc <__aeabi_dcmplt>
 800a894:	2800      	cmp	r0, #0
 800a896:	d163      	bne.n	800a960 <_dtoa_r+0x608>
 800a898:	4642      	mov	r2, r8
 800a89a:	464b      	mov	r3, r9
 800a89c:	4936      	ldr	r1, [pc, #216]	; (800a978 <_dtoa_r+0x620>)
 800a89e:	2000      	movs	r0, #0
 800a8a0:	f7f5 fcf2 	bl	8000288 <__aeabi_dsub>
 800a8a4:	4652      	mov	r2, sl
 800a8a6:	465b      	mov	r3, fp
 800a8a8:	f7f6 f918 	bl	8000adc <__aeabi_dcmplt>
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	f040 80b5 	bne.w	800aa1c <_dtoa_r+0x6c4>
 800a8b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8b4:	429d      	cmp	r5, r3
 800a8b6:	d081      	beq.n	800a7bc <_dtoa_r+0x464>
 800a8b8:	4b30      	ldr	r3, [pc, #192]	; (800a97c <_dtoa_r+0x624>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	4650      	mov	r0, sl
 800a8be:	4659      	mov	r1, fp
 800a8c0:	f7f5 fe9a 	bl	80005f8 <__aeabi_dmul>
 800a8c4:	4b2d      	ldr	r3, [pc, #180]	; (800a97c <_dtoa_r+0x624>)
 800a8c6:	4682      	mov	sl, r0
 800a8c8:	468b      	mov	fp, r1
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f7f5 fe92 	bl	80005f8 <__aeabi_dmul>
 800a8d4:	4680      	mov	r8, r0
 800a8d6:	4689      	mov	r9, r1
 800a8d8:	e7c6      	b.n	800a868 <_dtoa_r+0x510>
 800a8da:	4650      	mov	r0, sl
 800a8dc:	4659      	mov	r1, fp
 800a8de:	f7f5 fe8b 	bl	80005f8 <__aeabi_dmul>
 800a8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8e4:	9d01      	ldr	r5, [sp, #4]
 800a8e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8e8:	4682      	mov	sl, r0
 800a8ea:	468b      	mov	fp, r1
 800a8ec:	4649      	mov	r1, r9
 800a8ee:	4640      	mov	r0, r8
 800a8f0:	f7f6 f932 	bl	8000b58 <__aeabi_d2iz>
 800a8f4:	4606      	mov	r6, r0
 800a8f6:	f7f5 fe15 	bl	8000524 <__aeabi_i2d>
 800a8fa:	3630      	adds	r6, #48	; 0x30
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	4640      	mov	r0, r8
 800a902:	4649      	mov	r1, r9
 800a904:	f7f5 fcc0 	bl	8000288 <__aeabi_dsub>
 800a908:	f805 6b01 	strb.w	r6, [r5], #1
 800a90c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a90e:	429d      	cmp	r5, r3
 800a910:	4680      	mov	r8, r0
 800a912:	4689      	mov	r9, r1
 800a914:	f04f 0200 	mov.w	r2, #0
 800a918:	d124      	bne.n	800a964 <_dtoa_r+0x60c>
 800a91a:	4b1b      	ldr	r3, [pc, #108]	; (800a988 <_dtoa_r+0x630>)
 800a91c:	4650      	mov	r0, sl
 800a91e:	4659      	mov	r1, fp
 800a920:	f7f5 fcb4 	bl	800028c <__adddf3>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4640      	mov	r0, r8
 800a92a:	4649      	mov	r1, r9
 800a92c:	f7f6 f8f4 	bl	8000b18 <__aeabi_dcmpgt>
 800a930:	2800      	cmp	r0, #0
 800a932:	d173      	bne.n	800aa1c <_dtoa_r+0x6c4>
 800a934:	4652      	mov	r2, sl
 800a936:	465b      	mov	r3, fp
 800a938:	4913      	ldr	r1, [pc, #76]	; (800a988 <_dtoa_r+0x630>)
 800a93a:	2000      	movs	r0, #0
 800a93c:	f7f5 fca4 	bl	8000288 <__aeabi_dsub>
 800a940:	4602      	mov	r2, r0
 800a942:	460b      	mov	r3, r1
 800a944:	4640      	mov	r0, r8
 800a946:	4649      	mov	r1, r9
 800a948:	f7f6 f8c8 	bl	8000adc <__aeabi_dcmplt>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	f43f af35 	beq.w	800a7bc <_dtoa_r+0x464>
 800a952:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a954:	1e6b      	subs	r3, r5, #1
 800a956:	930f      	str	r3, [sp, #60]	; 0x3c
 800a958:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a95c:	2b30      	cmp	r3, #48	; 0x30
 800a95e:	d0f8      	beq.n	800a952 <_dtoa_r+0x5fa>
 800a960:	9700      	str	r7, [sp, #0]
 800a962:	e049      	b.n	800a9f8 <_dtoa_r+0x6a0>
 800a964:	4b05      	ldr	r3, [pc, #20]	; (800a97c <_dtoa_r+0x624>)
 800a966:	f7f5 fe47 	bl	80005f8 <__aeabi_dmul>
 800a96a:	4680      	mov	r8, r0
 800a96c:	4689      	mov	r9, r1
 800a96e:	e7bd      	b.n	800a8ec <_dtoa_r+0x594>
 800a970:	0800cfa0 	.word	0x0800cfa0
 800a974:	0800cf78 	.word	0x0800cf78
 800a978:	3ff00000 	.word	0x3ff00000
 800a97c:	40240000 	.word	0x40240000
 800a980:	401c0000 	.word	0x401c0000
 800a984:	40140000 	.word	0x40140000
 800a988:	3fe00000 	.word	0x3fe00000
 800a98c:	9d01      	ldr	r5, [sp, #4]
 800a98e:	4656      	mov	r6, sl
 800a990:	465f      	mov	r7, fp
 800a992:	4642      	mov	r2, r8
 800a994:	464b      	mov	r3, r9
 800a996:	4630      	mov	r0, r6
 800a998:	4639      	mov	r1, r7
 800a99a:	f7f5 ff57 	bl	800084c <__aeabi_ddiv>
 800a99e:	f7f6 f8db 	bl	8000b58 <__aeabi_d2iz>
 800a9a2:	4682      	mov	sl, r0
 800a9a4:	f7f5 fdbe 	bl	8000524 <__aeabi_i2d>
 800a9a8:	4642      	mov	r2, r8
 800a9aa:	464b      	mov	r3, r9
 800a9ac:	f7f5 fe24 	bl	80005f8 <__aeabi_dmul>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a9bc:	f7f5 fc64 	bl	8000288 <__aeabi_dsub>
 800a9c0:	f805 6b01 	strb.w	r6, [r5], #1
 800a9c4:	9e01      	ldr	r6, [sp, #4]
 800a9c6:	9f03      	ldr	r7, [sp, #12]
 800a9c8:	1bae      	subs	r6, r5, r6
 800a9ca:	42b7      	cmp	r7, r6
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	460b      	mov	r3, r1
 800a9d0:	d135      	bne.n	800aa3e <_dtoa_r+0x6e6>
 800a9d2:	f7f5 fc5b 	bl	800028c <__adddf3>
 800a9d6:	4642      	mov	r2, r8
 800a9d8:	464b      	mov	r3, r9
 800a9da:	4606      	mov	r6, r0
 800a9dc:	460f      	mov	r7, r1
 800a9de:	f7f6 f89b 	bl	8000b18 <__aeabi_dcmpgt>
 800a9e2:	b9d0      	cbnz	r0, 800aa1a <_dtoa_r+0x6c2>
 800a9e4:	4642      	mov	r2, r8
 800a9e6:	464b      	mov	r3, r9
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	f7f6 f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9f0:	b110      	cbz	r0, 800a9f8 <_dtoa_r+0x6a0>
 800a9f2:	f01a 0f01 	tst.w	sl, #1
 800a9f6:	d110      	bne.n	800aa1a <_dtoa_r+0x6c2>
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	ee18 1a10 	vmov	r1, s16
 800a9fe:	f000 ff47 	bl	800b890 <_Bfree>
 800aa02:	2300      	movs	r3, #0
 800aa04:	9800      	ldr	r0, [sp, #0]
 800aa06:	702b      	strb	r3, [r5, #0]
 800aa08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa0a:	3001      	adds	r0, #1
 800aa0c:	6018      	str	r0, [r3, #0]
 800aa0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f43f acf1 	beq.w	800a3f8 <_dtoa_r+0xa0>
 800aa16:	601d      	str	r5, [r3, #0]
 800aa18:	e4ee      	b.n	800a3f8 <_dtoa_r+0xa0>
 800aa1a:	9f00      	ldr	r7, [sp, #0]
 800aa1c:	462b      	mov	r3, r5
 800aa1e:	461d      	mov	r5, r3
 800aa20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa24:	2a39      	cmp	r2, #57	; 0x39
 800aa26:	d106      	bne.n	800aa36 <_dtoa_r+0x6de>
 800aa28:	9a01      	ldr	r2, [sp, #4]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d1f7      	bne.n	800aa1e <_dtoa_r+0x6c6>
 800aa2e:	9901      	ldr	r1, [sp, #4]
 800aa30:	2230      	movs	r2, #48	; 0x30
 800aa32:	3701      	adds	r7, #1
 800aa34:	700a      	strb	r2, [r1, #0]
 800aa36:	781a      	ldrb	r2, [r3, #0]
 800aa38:	3201      	adds	r2, #1
 800aa3a:	701a      	strb	r2, [r3, #0]
 800aa3c:	e790      	b.n	800a960 <_dtoa_r+0x608>
 800aa3e:	4ba6      	ldr	r3, [pc, #664]	; (800acd8 <_dtoa_r+0x980>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	f7f5 fdd9 	bl	80005f8 <__aeabi_dmul>
 800aa46:	2200      	movs	r2, #0
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4606      	mov	r6, r0
 800aa4c:	460f      	mov	r7, r1
 800aa4e:	f7f6 f83b 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d09d      	beq.n	800a992 <_dtoa_r+0x63a>
 800aa56:	e7cf      	b.n	800a9f8 <_dtoa_r+0x6a0>
 800aa58:	9a08      	ldr	r2, [sp, #32]
 800aa5a:	2a00      	cmp	r2, #0
 800aa5c:	f000 80d7 	beq.w	800ac0e <_dtoa_r+0x8b6>
 800aa60:	9a06      	ldr	r2, [sp, #24]
 800aa62:	2a01      	cmp	r2, #1
 800aa64:	f300 80ba 	bgt.w	800abdc <_dtoa_r+0x884>
 800aa68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa6a:	2a00      	cmp	r2, #0
 800aa6c:	f000 80b2 	beq.w	800abd4 <_dtoa_r+0x87c>
 800aa70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa74:	9e07      	ldr	r6, [sp, #28]
 800aa76:	9d04      	ldr	r5, [sp, #16]
 800aa78:	9a04      	ldr	r2, [sp, #16]
 800aa7a:	441a      	add	r2, r3
 800aa7c:	9204      	str	r2, [sp, #16]
 800aa7e:	9a05      	ldr	r2, [sp, #20]
 800aa80:	2101      	movs	r1, #1
 800aa82:	441a      	add	r2, r3
 800aa84:	4620      	mov	r0, r4
 800aa86:	9205      	str	r2, [sp, #20]
 800aa88:	f001 f804 	bl	800ba94 <__i2b>
 800aa8c:	4607      	mov	r7, r0
 800aa8e:	2d00      	cmp	r5, #0
 800aa90:	dd0c      	ble.n	800aaac <_dtoa_r+0x754>
 800aa92:	9b05      	ldr	r3, [sp, #20]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	dd09      	ble.n	800aaac <_dtoa_r+0x754>
 800aa98:	42ab      	cmp	r3, r5
 800aa9a:	9a04      	ldr	r2, [sp, #16]
 800aa9c:	bfa8      	it	ge
 800aa9e:	462b      	movge	r3, r5
 800aaa0:	1ad2      	subs	r2, r2, r3
 800aaa2:	9204      	str	r2, [sp, #16]
 800aaa4:	9a05      	ldr	r2, [sp, #20]
 800aaa6:	1aed      	subs	r5, r5, r3
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	9305      	str	r3, [sp, #20]
 800aaac:	9b07      	ldr	r3, [sp, #28]
 800aaae:	b31b      	cbz	r3, 800aaf8 <_dtoa_r+0x7a0>
 800aab0:	9b08      	ldr	r3, [sp, #32]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 80af 	beq.w	800ac16 <_dtoa_r+0x8be>
 800aab8:	2e00      	cmp	r6, #0
 800aaba:	dd13      	ble.n	800aae4 <_dtoa_r+0x78c>
 800aabc:	4639      	mov	r1, r7
 800aabe:	4632      	mov	r2, r6
 800aac0:	4620      	mov	r0, r4
 800aac2:	f001 f8a7 	bl	800bc14 <__pow5mult>
 800aac6:	ee18 2a10 	vmov	r2, s16
 800aaca:	4601      	mov	r1, r0
 800aacc:	4607      	mov	r7, r0
 800aace:	4620      	mov	r0, r4
 800aad0:	f000 fff6 	bl	800bac0 <__multiply>
 800aad4:	ee18 1a10 	vmov	r1, s16
 800aad8:	4680      	mov	r8, r0
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 fed8 	bl	800b890 <_Bfree>
 800aae0:	ee08 8a10 	vmov	s16, r8
 800aae4:	9b07      	ldr	r3, [sp, #28]
 800aae6:	1b9a      	subs	r2, r3, r6
 800aae8:	d006      	beq.n	800aaf8 <_dtoa_r+0x7a0>
 800aaea:	ee18 1a10 	vmov	r1, s16
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f001 f890 	bl	800bc14 <__pow5mult>
 800aaf4:	ee08 0a10 	vmov	s16, r0
 800aaf8:	2101      	movs	r1, #1
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 ffca 	bl	800ba94 <__i2b>
 800ab00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	4606      	mov	r6, r0
 800ab06:	f340 8088 	ble.w	800ac1a <_dtoa_r+0x8c2>
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	4601      	mov	r1, r0
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f001 f880 	bl	800bc14 <__pow5mult>
 800ab14:	9b06      	ldr	r3, [sp, #24]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	4606      	mov	r6, r0
 800ab1a:	f340 8081 	ble.w	800ac20 <_dtoa_r+0x8c8>
 800ab1e:	f04f 0800 	mov.w	r8, #0
 800ab22:	6933      	ldr	r3, [r6, #16]
 800ab24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab28:	6918      	ldr	r0, [r3, #16]
 800ab2a:	f000 ff63 	bl	800b9f4 <__hi0bits>
 800ab2e:	f1c0 0020 	rsb	r0, r0, #32
 800ab32:	9b05      	ldr	r3, [sp, #20]
 800ab34:	4418      	add	r0, r3
 800ab36:	f010 001f 	ands.w	r0, r0, #31
 800ab3a:	f000 8092 	beq.w	800ac62 <_dtoa_r+0x90a>
 800ab3e:	f1c0 0320 	rsb	r3, r0, #32
 800ab42:	2b04      	cmp	r3, #4
 800ab44:	f340 808a 	ble.w	800ac5c <_dtoa_r+0x904>
 800ab48:	f1c0 001c 	rsb	r0, r0, #28
 800ab4c:	9b04      	ldr	r3, [sp, #16]
 800ab4e:	4403      	add	r3, r0
 800ab50:	9304      	str	r3, [sp, #16]
 800ab52:	9b05      	ldr	r3, [sp, #20]
 800ab54:	4403      	add	r3, r0
 800ab56:	4405      	add	r5, r0
 800ab58:	9305      	str	r3, [sp, #20]
 800ab5a:	9b04      	ldr	r3, [sp, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	dd07      	ble.n	800ab70 <_dtoa_r+0x818>
 800ab60:	ee18 1a10 	vmov	r1, s16
 800ab64:	461a      	mov	r2, r3
 800ab66:	4620      	mov	r0, r4
 800ab68:	f001 f8ae 	bl	800bcc8 <__lshift>
 800ab6c:	ee08 0a10 	vmov	s16, r0
 800ab70:	9b05      	ldr	r3, [sp, #20]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	dd05      	ble.n	800ab82 <_dtoa_r+0x82a>
 800ab76:	4631      	mov	r1, r6
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f001 f8a4 	bl	800bcc8 <__lshift>
 800ab80:	4606      	mov	r6, r0
 800ab82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d06e      	beq.n	800ac66 <_dtoa_r+0x90e>
 800ab88:	ee18 0a10 	vmov	r0, s16
 800ab8c:	4631      	mov	r1, r6
 800ab8e:	f001 f90b 	bl	800bda8 <__mcmp>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	da67      	bge.n	800ac66 <_dtoa_r+0x90e>
 800ab96:	9b00      	ldr	r3, [sp, #0]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	ee18 1a10 	vmov	r1, s16
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	220a      	movs	r2, #10
 800aba2:	2300      	movs	r3, #0
 800aba4:	4620      	mov	r0, r4
 800aba6:	f000 fe95 	bl	800b8d4 <__multadd>
 800abaa:	9b08      	ldr	r3, [sp, #32]
 800abac:	ee08 0a10 	vmov	s16, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f000 81b1 	beq.w	800af18 <_dtoa_r+0xbc0>
 800abb6:	2300      	movs	r3, #0
 800abb8:	4639      	mov	r1, r7
 800abba:	220a      	movs	r2, #10
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fe89 	bl	800b8d4 <__multadd>
 800abc2:	9b02      	ldr	r3, [sp, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	4607      	mov	r7, r0
 800abc8:	f300 808e 	bgt.w	800ace8 <_dtoa_r+0x990>
 800abcc:	9b06      	ldr	r3, [sp, #24]
 800abce:	2b02      	cmp	r3, #2
 800abd0:	dc51      	bgt.n	800ac76 <_dtoa_r+0x91e>
 800abd2:	e089      	b.n	800ace8 <_dtoa_r+0x990>
 800abd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abda:	e74b      	b.n	800aa74 <_dtoa_r+0x71c>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	1e5e      	subs	r6, r3, #1
 800abe0:	9b07      	ldr	r3, [sp, #28]
 800abe2:	42b3      	cmp	r3, r6
 800abe4:	bfbf      	itttt	lt
 800abe6:	9b07      	ldrlt	r3, [sp, #28]
 800abe8:	9607      	strlt	r6, [sp, #28]
 800abea:	1af2      	sublt	r2, r6, r3
 800abec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800abee:	bfb6      	itet	lt
 800abf0:	189b      	addlt	r3, r3, r2
 800abf2:	1b9e      	subge	r6, r3, r6
 800abf4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800abf6:	9b03      	ldr	r3, [sp, #12]
 800abf8:	bfb8      	it	lt
 800abfa:	2600      	movlt	r6, #0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bfb7      	itett	lt
 800ac00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ac04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ac08:	1a9d      	sublt	r5, r3, r2
 800ac0a:	2300      	movlt	r3, #0
 800ac0c:	e734      	b.n	800aa78 <_dtoa_r+0x720>
 800ac0e:	9e07      	ldr	r6, [sp, #28]
 800ac10:	9d04      	ldr	r5, [sp, #16]
 800ac12:	9f08      	ldr	r7, [sp, #32]
 800ac14:	e73b      	b.n	800aa8e <_dtoa_r+0x736>
 800ac16:	9a07      	ldr	r2, [sp, #28]
 800ac18:	e767      	b.n	800aaea <_dtoa_r+0x792>
 800ac1a:	9b06      	ldr	r3, [sp, #24]
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	dc18      	bgt.n	800ac52 <_dtoa_r+0x8fa>
 800ac20:	f1ba 0f00 	cmp.w	sl, #0
 800ac24:	d115      	bne.n	800ac52 <_dtoa_r+0x8fa>
 800ac26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac2a:	b993      	cbnz	r3, 800ac52 <_dtoa_r+0x8fa>
 800ac2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac30:	0d1b      	lsrs	r3, r3, #20
 800ac32:	051b      	lsls	r3, r3, #20
 800ac34:	b183      	cbz	r3, 800ac58 <_dtoa_r+0x900>
 800ac36:	9b04      	ldr	r3, [sp, #16]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	9304      	str	r3, [sp, #16]
 800ac3c:	9b05      	ldr	r3, [sp, #20]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	9305      	str	r3, [sp, #20]
 800ac42:	f04f 0801 	mov.w	r8, #1
 800ac46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f47f af6a 	bne.w	800ab22 <_dtoa_r+0x7ca>
 800ac4e:	2001      	movs	r0, #1
 800ac50:	e76f      	b.n	800ab32 <_dtoa_r+0x7da>
 800ac52:	f04f 0800 	mov.w	r8, #0
 800ac56:	e7f6      	b.n	800ac46 <_dtoa_r+0x8ee>
 800ac58:	4698      	mov	r8, r3
 800ac5a:	e7f4      	b.n	800ac46 <_dtoa_r+0x8ee>
 800ac5c:	f43f af7d 	beq.w	800ab5a <_dtoa_r+0x802>
 800ac60:	4618      	mov	r0, r3
 800ac62:	301c      	adds	r0, #28
 800ac64:	e772      	b.n	800ab4c <_dtoa_r+0x7f4>
 800ac66:	9b03      	ldr	r3, [sp, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	dc37      	bgt.n	800acdc <_dtoa_r+0x984>
 800ac6c:	9b06      	ldr	r3, [sp, #24]
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	dd34      	ble.n	800acdc <_dtoa_r+0x984>
 800ac72:	9b03      	ldr	r3, [sp, #12]
 800ac74:	9302      	str	r3, [sp, #8]
 800ac76:	9b02      	ldr	r3, [sp, #8]
 800ac78:	b96b      	cbnz	r3, 800ac96 <_dtoa_r+0x93e>
 800ac7a:	4631      	mov	r1, r6
 800ac7c:	2205      	movs	r2, #5
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f000 fe28 	bl	800b8d4 <__multadd>
 800ac84:	4601      	mov	r1, r0
 800ac86:	4606      	mov	r6, r0
 800ac88:	ee18 0a10 	vmov	r0, s16
 800ac8c:	f001 f88c 	bl	800bda8 <__mcmp>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	f73f adbb 	bgt.w	800a80c <_dtoa_r+0x4b4>
 800ac96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac98:	9d01      	ldr	r5, [sp, #4]
 800ac9a:	43db      	mvns	r3, r3
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	f04f 0800 	mov.w	r8, #0
 800aca2:	4631      	mov	r1, r6
 800aca4:	4620      	mov	r0, r4
 800aca6:	f000 fdf3 	bl	800b890 <_Bfree>
 800acaa:	2f00      	cmp	r7, #0
 800acac:	f43f aea4 	beq.w	800a9f8 <_dtoa_r+0x6a0>
 800acb0:	f1b8 0f00 	cmp.w	r8, #0
 800acb4:	d005      	beq.n	800acc2 <_dtoa_r+0x96a>
 800acb6:	45b8      	cmp	r8, r7
 800acb8:	d003      	beq.n	800acc2 <_dtoa_r+0x96a>
 800acba:	4641      	mov	r1, r8
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 fde7 	bl	800b890 <_Bfree>
 800acc2:	4639      	mov	r1, r7
 800acc4:	4620      	mov	r0, r4
 800acc6:	f000 fde3 	bl	800b890 <_Bfree>
 800acca:	e695      	b.n	800a9f8 <_dtoa_r+0x6a0>
 800accc:	2600      	movs	r6, #0
 800acce:	4637      	mov	r7, r6
 800acd0:	e7e1      	b.n	800ac96 <_dtoa_r+0x93e>
 800acd2:	9700      	str	r7, [sp, #0]
 800acd4:	4637      	mov	r7, r6
 800acd6:	e599      	b.n	800a80c <_dtoa_r+0x4b4>
 800acd8:	40240000 	.word	0x40240000
 800acdc:	9b08      	ldr	r3, [sp, #32]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 80ca 	beq.w	800ae78 <_dtoa_r+0xb20>
 800ace4:	9b03      	ldr	r3, [sp, #12]
 800ace6:	9302      	str	r3, [sp, #8]
 800ace8:	2d00      	cmp	r5, #0
 800acea:	dd05      	ble.n	800acf8 <_dtoa_r+0x9a0>
 800acec:	4639      	mov	r1, r7
 800acee:	462a      	mov	r2, r5
 800acf0:	4620      	mov	r0, r4
 800acf2:	f000 ffe9 	bl	800bcc8 <__lshift>
 800acf6:	4607      	mov	r7, r0
 800acf8:	f1b8 0f00 	cmp.w	r8, #0
 800acfc:	d05b      	beq.n	800adb6 <_dtoa_r+0xa5e>
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	4620      	mov	r0, r4
 800ad02:	f000 fd85 	bl	800b810 <_Balloc>
 800ad06:	4605      	mov	r5, r0
 800ad08:	b928      	cbnz	r0, 800ad16 <_dtoa_r+0x9be>
 800ad0a:	4b87      	ldr	r3, [pc, #540]	; (800af28 <_dtoa_r+0xbd0>)
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad12:	f7ff bb3b 	b.w	800a38c <_dtoa_r+0x34>
 800ad16:	693a      	ldr	r2, [r7, #16]
 800ad18:	3202      	adds	r2, #2
 800ad1a:	0092      	lsls	r2, r2, #2
 800ad1c:	f107 010c 	add.w	r1, r7, #12
 800ad20:	300c      	adds	r0, #12
 800ad22:	f7fd fe4a 	bl	80089ba <memcpy>
 800ad26:	2201      	movs	r2, #1
 800ad28:	4629      	mov	r1, r5
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 ffcc 	bl	800bcc8 <__lshift>
 800ad30:	9b01      	ldr	r3, [sp, #4]
 800ad32:	f103 0901 	add.w	r9, r3, #1
 800ad36:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	9305      	str	r3, [sp, #20]
 800ad3e:	f00a 0301 	and.w	r3, sl, #1
 800ad42:	46b8      	mov	r8, r7
 800ad44:	9304      	str	r3, [sp, #16]
 800ad46:	4607      	mov	r7, r0
 800ad48:	4631      	mov	r1, r6
 800ad4a:	ee18 0a10 	vmov	r0, s16
 800ad4e:	f7ff fa77 	bl	800a240 <quorem>
 800ad52:	4641      	mov	r1, r8
 800ad54:	9002      	str	r0, [sp, #8]
 800ad56:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad5a:	ee18 0a10 	vmov	r0, s16
 800ad5e:	f001 f823 	bl	800bda8 <__mcmp>
 800ad62:	463a      	mov	r2, r7
 800ad64:	9003      	str	r0, [sp, #12]
 800ad66:	4631      	mov	r1, r6
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f001 f839 	bl	800bde0 <__mdiff>
 800ad6e:	68c2      	ldr	r2, [r0, #12]
 800ad70:	f109 3bff 	add.w	fp, r9, #4294967295
 800ad74:	4605      	mov	r5, r0
 800ad76:	bb02      	cbnz	r2, 800adba <_dtoa_r+0xa62>
 800ad78:	4601      	mov	r1, r0
 800ad7a:	ee18 0a10 	vmov	r0, s16
 800ad7e:	f001 f813 	bl	800bda8 <__mcmp>
 800ad82:	4602      	mov	r2, r0
 800ad84:	4629      	mov	r1, r5
 800ad86:	4620      	mov	r0, r4
 800ad88:	9207      	str	r2, [sp, #28]
 800ad8a:	f000 fd81 	bl	800b890 <_Bfree>
 800ad8e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ad92:	ea43 0102 	orr.w	r1, r3, r2
 800ad96:	9b04      	ldr	r3, [sp, #16]
 800ad98:	430b      	orrs	r3, r1
 800ad9a:	464d      	mov	r5, r9
 800ad9c:	d10f      	bne.n	800adbe <_dtoa_r+0xa66>
 800ad9e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ada2:	d02a      	beq.n	800adfa <_dtoa_r+0xaa2>
 800ada4:	9b03      	ldr	r3, [sp, #12]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	dd02      	ble.n	800adb0 <_dtoa_r+0xa58>
 800adaa:	9b02      	ldr	r3, [sp, #8]
 800adac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800adb0:	f88b a000 	strb.w	sl, [fp]
 800adb4:	e775      	b.n	800aca2 <_dtoa_r+0x94a>
 800adb6:	4638      	mov	r0, r7
 800adb8:	e7ba      	b.n	800ad30 <_dtoa_r+0x9d8>
 800adba:	2201      	movs	r2, #1
 800adbc:	e7e2      	b.n	800ad84 <_dtoa_r+0xa2c>
 800adbe:	9b03      	ldr	r3, [sp, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	db04      	blt.n	800adce <_dtoa_r+0xa76>
 800adc4:	9906      	ldr	r1, [sp, #24]
 800adc6:	430b      	orrs	r3, r1
 800adc8:	9904      	ldr	r1, [sp, #16]
 800adca:	430b      	orrs	r3, r1
 800adcc:	d122      	bne.n	800ae14 <_dtoa_r+0xabc>
 800adce:	2a00      	cmp	r2, #0
 800add0:	ddee      	ble.n	800adb0 <_dtoa_r+0xa58>
 800add2:	ee18 1a10 	vmov	r1, s16
 800add6:	2201      	movs	r2, #1
 800add8:	4620      	mov	r0, r4
 800adda:	f000 ff75 	bl	800bcc8 <__lshift>
 800adde:	4631      	mov	r1, r6
 800ade0:	ee08 0a10 	vmov	s16, r0
 800ade4:	f000 ffe0 	bl	800bda8 <__mcmp>
 800ade8:	2800      	cmp	r0, #0
 800adea:	dc03      	bgt.n	800adf4 <_dtoa_r+0xa9c>
 800adec:	d1e0      	bne.n	800adb0 <_dtoa_r+0xa58>
 800adee:	f01a 0f01 	tst.w	sl, #1
 800adf2:	d0dd      	beq.n	800adb0 <_dtoa_r+0xa58>
 800adf4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800adf8:	d1d7      	bne.n	800adaa <_dtoa_r+0xa52>
 800adfa:	2339      	movs	r3, #57	; 0x39
 800adfc:	f88b 3000 	strb.w	r3, [fp]
 800ae00:	462b      	mov	r3, r5
 800ae02:	461d      	mov	r5, r3
 800ae04:	3b01      	subs	r3, #1
 800ae06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae0a:	2a39      	cmp	r2, #57	; 0x39
 800ae0c:	d071      	beq.n	800aef2 <_dtoa_r+0xb9a>
 800ae0e:	3201      	adds	r2, #1
 800ae10:	701a      	strb	r2, [r3, #0]
 800ae12:	e746      	b.n	800aca2 <_dtoa_r+0x94a>
 800ae14:	2a00      	cmp	r2, #0
 800ae16:	dd07      	ble.n	800ae28 <_dtoa_r+0xad0>
 800ae18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae1c:	d0ed      	beq.n	800adfa <_dtoa_r+0xaa2>
 800ae1e:	f10a 0301 	add.w	r3, sl, #1
 800ae22:	f88b 3000 	strb.w	r3, [fp]
 800ae26:	e73c      	b.n	800aca2 <_dtoa_r+0x94a>
 800ae28:	9b05      	ldr	r3, [sp, #20]
 800ae2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ae2e:	4599      	cmp	r9, r3
 800ae30:	d047      	beq.n	800aec2 <_dtoa_r+0xb6a>
 800ae32:	ee18 1a10 	vmov	r1, s16
 800ae36:	2300      	movs	r3, #0
 800ae38:	220a      	movs	r2, #10
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f000 fd4a 	bl	800b8d4 <__multadd>
 800ae40:	45b8      	cmp	r8, r7
 800ae42:	ee08 0a10 	vmov	s16, r0
 800ae46:	f04f 0300 	mov.w	r3, #0
 800ae4a:	f04f 020a 	mov.w	r2, #10
 800ae4e:	4641      	mov	r1, r8
 800ae50:	4620      	mov	r0, r4
 800ae52:	d106      	bne.n	800ae62 <_dtoa_r+0xb0a>
 800ae54:	f000 fd3e 	bl	800b8d4 <__multadd>
 800ae58:	4680      	mov	r8, r0
 800ae5a:	4607      	mov	r7, r0
 800ae5c:	f109 0901 	add.w	r9, r9, #1
 800ae60:	e772      	b.n	800ad48 <_dtoa_r+0x9f0>
 800ae62:	f000 fd37 	bl	800b8d4 <__multadd>
 800ae66:	4639      	mov	r1, r7
 800ae68:	4680      	mov	r8, r0
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	220a      	movs	r2, #10
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f000 fd30 	bl	800b8d4 <__multadd>
 800ae74:	4607      	mov	r7, r0
 800ae76:	e7f1      	b.n	800ae5c <_dtoa_r+0xb04>
 800ae78:	9b03      	ldr	r3, [sp, #12]
 800ae7a:	9302      	str	r3, [sp, #8]
 800ae7c:	9d01      	ldr	r5, [sp, #4]
 800ae7e:	ee18 0a10 	vmov	r0, s16
 800ae82:	4631      	mov	r1, r6
 800ae84:	f7ff f9dc 	bl	800a240 <quorem>
 800ae88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae8c:	9b01      	ldr	r3, [sp, #4]
 800ae8e:	f805 ab01 	strb.w	sl, [r5], #1
 800ae92:	1aea      	subs	r2, r5, r3
 800ae94:	9b02      	ldr	r3, [sp, #8]
 800ae96:	4293      	cmp	r3, r2
 800ae98:	dd09      	ble.n	800aeae <_dtoa_r+0xb56>
 800ae9a:	ee18 1a10 	vmov	r1, s16
 800ae9e:	2300      	movs	r3, #0
 800aea0:	220a      	movs	r2, #10
 800aea2:	4620      	mov	r0, r4
 800aea4:	f000 fd16 	bl	800b8d4 <__multadd>
 800aea8:	ee08 0a10 	vmov	s16, r0
 800aeac:	e7e7      	b.n	800ae7e <_dtoa_r+0xb26>
 800aeae:	9b02      	ldr	r3, [sp, #8]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	bfc8      	it	gt
 800aeb4:	461d      	movgt	r5, r3
 800aeb6:	9b01      	ldr	r3, [sp, #4]
 800aeb8:	bfd8      	it	le
 800aeba:	2501      	movle	r5, #1
 800aebc:	441d      	add	r5, r3
 800aebe:	f04f 0800 	mov.w	r8, #0
 800aec2:	ee18 1a10 	vmov	r1, s16
 800aec6:	2201      	movs	r2, #1
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 fefd 	bl	800bcc8 <__lshift>
 800aece:	4631      	mov	r1, r6
 800aed0:	ee08 0a10 	vmov	s16, r0
 800aed4:	f000 ff68 	bl	800bda8 <__mcmp>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	dc91      	bgt.n	800ae00 <_dtoa_r+0xaa8>
 800aedc:	d102      	bne.n	800aee4 <_dtoa_r+0xb8c>
 800aede:	f01a 0f01 	tst.w	sl, #1
 800aee2:	d18d      	bne.n	800ae00 <_dtoa_r+0xaa8>
 800aee4:	462b      	mov	r3, r5
 800aee6:	461d      	mov	r5, r3
 800aee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aeec:	2a30      	cmp	r2, #48	; 0x30
 800aeee:	d0fa      	beq.n	800aee6 <_dtoa_r+0xb8e>
 800aef0:	e6d7      	b.n	800aca2 <_dtoa_r+0x94a>
 800aef2:	9a01      	ldr	r2, [sp, #4]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d184      	bne.n	800ae02 <_dtoa_r+0xaaa>
 800aef8:	9b00      	ldr	r3, [sp, #0]
 800aefa:	3301      	adds	r3, #1
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	2331      	movs	r3, #49	; 0x31
 800af00:	7013      	strb	r3, [r2, #0]
 800af02:	e6ce      	b.n	800aca2 <_dtoa_r+0x94a>
 800af04:	4b09      	ldr	r3, [pc, #36]	; (800af2c <_dtoa_r+0xbd4>)
 800af06:	f7ff ba95 	b.w	800a434 <_dtoa_r+0xdc>
 800af0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f47f aa6e 	bne.w	800a3ee <_dtoa_r+0x96>
 800af12:	4b07      	ldr	r3, [pc, #28]	; (800af30 <_dtoa_r+0xbd8>)
 800af14:	f7ff ba8e 	b.w	800a434 <_dtoa_r+0xdc>
 800af18:	9b02      	ldr	r3, [sp, #8]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	dcae      	bgt.n	800ae7c <_dtoa_r+0xb24>
 800af1e:	9b06      	ldr	r3, [sp, #24]
 800af20:	2b02      	cmp	r3, #2
 800af22:	f73f aea8 	bgt.w	800ac76 <_dtoa_r+0x91e>
 800af26:	e7a9      	b.n	800ae7c <_dtoa_r+0xb24>
 800af28:	0800ce8f 	.word	0x0800ce8f
 800af2c:	0800cd9c 	.word	0x0800cd9c
 800af30:	0800ce10 	.word	0x0800ce10

0800af34 <__sflush_r>:
 800af34:	898a      	ldrh	r2, [r1, #12]
 800af36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3a:	4605      	mov	r5, r0
 800af3c:	0710      	lsls	r0, r2, #28
 800af3e:	460c      	mov	r4, r1
 800af40:	d458      	bmi.n	800aff4 <__sflush_r+0xc0>
 800af42:	684b      	ldr	r3, [r1, #4]
 800af44:	2b00      	cmp	r3, #0
 800af46:	dc05      	bgt.n	800af54 <__sflush_r+0x20>
 800af48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dc02      	bgt.n	800af54 <__sflush_r+0x20>
 800af4e:	2000      	movs	r0, #0
 800af50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af56:	2e00      	cmp	r6, #0
 800af58:	d0f9      	beq.n	800af4e <__sflush_r+0x1a>
 800af5a:	2300      	movs	r3, #0
 800af5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800af60:	682f      	ldr	r7, [r5, #0]
 800af62:	602b      	str	r3, [r5, #0]
 800af64:	d032      	beq.n	800afcc <__sflush_r+0x98>
 800af66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	075a      	lsls	r2, r3, #29
 800af6c:	d505      	bpl.n	800af7a <__sflush_r+0x46>
 800af6e:	6863      	ldr	r3, [r4, #4]
 800af70:	1ac0      	subs	r0, r0, r3
 800af72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af74:	b10b      	cbz	r3, 800af7a <__sflush_r+0x46>
 800af76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800af78:	1ac0      	subs	r0, r0, r3
 800af7a:	2300      	movs	r3, #0
 800af7c:	4602      	mov	r2, r0
 800af7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800af80:	6a21      	ldr	r1, [r4, #32]
 800af82:	4628      	mov	r0, r5
 800af84:	47b0      	blx	r6
 800af86:	1c43      	adds	r3, r0, #1
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	d106      	bne.n	800af9a <__sflush_r+0x66>
 800af8c:	6829      	ldr	r1, [r5, #0]
 800af8e:	291d      	cmp	r1, #29
 800af90:	d82c      	bhi.n	800afec <__sflush_r+0xb8>
 800af92:	4a2a      	ldr	r2, [pc, #168]	; (800b03c <__sflush_r+0x108>)
 800af94:	40ca      	lsrs	r2, r1
 800af96:	07d6      	lsls	r6, r2, #31
 800af98:	d528      	bpl.n	800afec <__sflush_r+0xb8>
 800af9a:	2200      	movs	r2, #0
 800af9c:	6062      	str	r2, [r4, #4]
 800af9e:	04d9      	lsls	r1, r3, #19
 800afa0:	6922      	ldr	r2, [r4, #16]
 800afa2:	6022      	str	r2, [r4, #0]
 800afa4:	d504      	bpl.n	800afb0 <__sflush_r+0x7c>
 800afa6:	1c42      	adds	r2, r0, #1
 800afa8:	d101      	bne.n	800afae <__sflush_r+0x7a>
 800afaa:	682b      	ldr	r3, [r5, #0]
 800afac:	b903      	cbnz	r3, 800afb0 <__sflush_r+0x7c>
 800afae:	6560      	str	r0, [r4, #84]	; 0x54
 800afb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afb2:	602f      	str	r7, [r5, #0]
 800afb4:	2900      	cmp	r1, #0
 800afb6:	d0ca      	beq.n	800af4e <__sflush_r+0x1a>
 800afb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800afbc:	4299      	cmp	r1, r3
 800afbe:	d002      	beq.n	800afc6 <__sflush_r+0x92>
 800afc0:	4628      	mov	r0, r5
 800afc2:	f001 f8fd 	bl	800c1c0 <_free_r>
 800afc6:	2000      	movs	r0, #0
 800afc8:	6360      	str	r0, [r4, #52]	; 0x34
 800afca:	e7c1      	b.n	800af50 <__sflush_r+0x1c>
 800afcc:	6a21      	ldr	r1, [r4, #32]
 800afce:	2301      	movs	r3, #1
 800afd0:	4628      	mov	r0, r5
 800afd2:	47b0      	blx	r6
 800afd4:	1c41      	adds	r1, r0, #1
 800afd6:	d1c7      	bne.n	800af68 <__sflush_r+0x34>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d0c4      	beq.n	800af68 <__sflush_r+0x34>
 800afde:	2b1d      	cmp	r3, #29
 800afe0:	d001      	beq.n	800afe6 <__sflush_r+0xb2>
 800afe2:	2b16      	cmp	r3, #22
 800afe4:	d101      	bne.n	800afea <__sflush_r+0xb6>
 800afe6:	602f      	str	r7, [r5, #0]
 800afe8:	e7b1      	b.n	800af4e <__sflush_r+0x1a>
 800afea:	89a3      	ldrh	r3, [r4, #12]
 800afec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aff0:	81a3      	strh	r3, [r4, #12]
 800aff2:	e7ad      	b.n	800af50 <__sflush_r+0x1c>
 800aff4:	690f      	ldr	r7, [r1, #16]
 800aff6:	2f00      	cmp	r7, #0
 800aff8:	d0a9      	beq.n	800af4e <__sflush_r+0x1a>
 800affa:	0793      	lsls	r3, r2, #30
 800affc:	680e      	ldr	r6, [r1, #0]
 800affe:	bf08      	it	eq
 800b000:	694b      	ldreq	r3, [r1, #20]
 800b002:	600f      	str	r7, [r1, #0]
 800b004:	bf18      	it	ne
 800b006:	2300      	movne	r3, #0
 800b008:	eba6 0807 	sub.w	r8, r6, r7
 800b00c:	608b      	str	r3, [r1, #8]
 800b00e:	f1b8 0f00 	cmp.w	r8, #0
 800b012:	dd9c      	ble.n	800af4e <__sflush_r+0x1a>
 800b014:	6a21      	ldr	r1, [r4, #32]
 800b016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b018:	4643      	mov	r3, r8
 800b01a:	463a      	mov	r2, r7
 800b01c:	4628      	mov	r0, r5
 800b01e:	47b0      	blx	r6
 800b020:	2800      	cmp	r0, #0
 800b022:	dc06      	bgt.n	800b032 <__sflush_r+0xfe>
 800b024:	89a3      	ldrh	r3, [r4, #12]
 800b026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b02a:	81a3      	strh	r3, [r4, #12]
 800b02c:	f04f 30ff 	mov.w	r0, #4294967295
 800b030:	e78e      	b.n	800af50 <__sflush_r+0x1c>
 800b032:	4407      	add	r7, r0
 800b034:	eba8 0800 	sub.w	r8, r8, r0
 800b038:	e7e9      	b.n	800b00e <__sflush_r+0xda>
 800b03a:	bf00      	nop
 800b03c:	20400001 	.word	0x20400001

0800b040 <_fflush_r>:
 800b040:	b538      	push	{r3, r4, r5, lr}
 800b042:	690b      	ldr	r3, [r1, #16]
 800b044:	4605      	mov	r5, r0
 800b046:	460c      	mov	r4, r1
 800b048:	b913      	cbnz	r3, 800b050 <_fflush_r+0x10>
 800b04a:	2500      	movs	r5, #0
 800b04c:	4628      	mov	r0, r5
 800b04e:	bd38      	pop	{r3, r4, r5, pc}
 800b050:	b118      	cbz	r0, 800b05a <_fflush_r+0x1a>
 800b052:	6983      	ldr	r3, [r0, #24]
 800b054:	b90b      	cbnz	r3, 800b05a <_fflush_r+0x1a>
 800b056:	f7fd fbeb 	bl	8008830 <__sinit>
 800b05a:	4b14      	ldr	r3, [pc, #80]	; (800b0ac <_fflush_r+0x6c>)
 800b05c:	429c      	cmp	r4, r3
 800b05e:	d11b      	bne.n	800b098 <_fflush_r+0x58>
 800b060:	686c      	ldr	r4, [r5, #4]
 800b062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d0ef      	beq.n	800b04a <_fflush_r+0xa>
 800b06a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b06c:	07d0      	lsls	r0, r2, #31
 800b06e:	d404      	bmi.n	800b07a <_fflush_r+0x3a>
 800b070:	0599      	lsls	r1, r3, #22
 800b072:	d402      	bmi.n	800b07a <_fflush_r+0x3a>
 800b074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b076:	f7fd fc9e 	bl	80089b6 <__retarget_lock_acquire_recursive>
 800b07a:	4628      	mov	r0, r5
 800b07c:	4621      	mov	r1, r4
 800b07e:	f7ff ff59 	bl	800af34 <__sflush_r>
 800b082:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b084:	07da      	lsls	r2, r3, #31
 800b086:	4605      	mov	r5, r0
 800b088:	d4e0      	bmi.n	800b04c <_fflush_r+0xc>
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	059b      	lsls	r3, r3, #22
 800b08e:	d4dd      	bmi.n	800b04c <_fflush_r+0xc>
 800b090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b092:	f7fd fc91 	bl	80089b8 <__retarget_lock_release_recursive>
 800b096:	e7d9      	b.n	800b04c <_fflush_r+0xc>
 800b098:	4b05      	ldr	r3, [pc, #20]	; (800b0b0 <_fflush_r+0x70>)
 800b09a:	429c      	cmp	r4, r3
 800b09c:	d101      	bne.n	800b0a2 <_fflush_r+0x62>
 800b09e:	68ac      	ldr	r4, [r5, #8]
 800b0a0:	e7df      	b.n	800b062 <_fflush_r+0x22>
 800b0a2:	4b04      	ldr	r3, [pc, #16]	; (800b0b4 <_fflush_r+0x74>)
 800b0a4:	429c      	cmp	r4, r3
 800b0a6:	bf08      	it	eq
 800b0a8:	68ec      	ldreq	r4, [r5, #12]
 800b0aa:	e7da      	b.n	800b062 <_fflush_r+0x22>
 800b0ac:	0800cd48 	.word	0x0800cd48
 800b0b0:	0800cd68 	.word	0x0800cd68
 800b0b4:	0800cd28 	.word	0x0800cd28

0800b0b8 <rshift>:
 800b0b8:	6903      	ldr	r3, [r0, #16]
 800b0ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b0be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b0c6:	f100 0414 	add.w	r4, r0, #20
 800b0ca:	dd45      	ble.n	800b158 <rshift+0xa0>
 800b0cc:	f011 011f 	ands.w	r1, r1, #31
 800b0d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b0d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b0d8:	d10c      	bne.n	800b0f4 <rshift+0x3c>
 800b0da:	f100 0710 	add.w	r7, r0, #16
 800b0de:	4629      	mov	r1, r5
 800b0e0:	42b1      	cmp	r1, r6
 800b0e2:	d334      	bcc.n	800b14e <rshift+0x96>
 800b0e4:	1a9b      	subs	r3, r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	1eea      	subs	r2, r5, #3
 800b0ea:	4296      	cmp	r6, r2
 800b0ec:	bf38      	it	cc
 800b0ee:	2300      	movcc	r3, #0
 800b0f0:	4423      	add	r3, r4
 800b0f2:	e015      	b.n	800b120 <rshift+0x68>
 800b0f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b0f8:	f1c1 0820 	rsb	r8, r1, #32
 800b0fc:	40cf      	lsrs	r7, r1
 800b0fe:	f105 0e04 	add.w	lr, r5, #4
 800b102:	46a1      	mov	r9, r4
 800b104:	4576      	cmp	r6, lr
 800b106:	46f4      	mov	ip, lr
 800b108:	d815      	bhi.n	800b136 <rshift+0x7e>
 800b10a:	1a9a      	subs	r2, r3, r2
 800b10c:	0092      	lsls	r2, r2, #2
 800b10e:	3a04      	subs	r2, #4
 800b110:	3501      	adds	r5, #1
 800b112:	42ae      	cmp	r6, r5
 800b114:	bf38      	it	cc
 800b116:	2200      	movcc	r2, #0
 800b118:	18a3      	adds	r3, r4, r2
 800b11a:	50a7      	str	r7, [r4, r2]
 800b11c:	b107      	cbz	r7, 800b120 <rshift+0x68>
 800b11e:	3304      	adds	r3, #4
 800b120:	1b1a      	subs	r2, r3, r4
 800b122:	42a3      	cmp	r3, r4
 800b124:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b128:	bf08      	it	eq
 800b12a:	2300      	moveq	r3, #0
 800b12c:	6102      	str	r2, [r0, #16]
 800b12e:	bf08      	it	eq
 800b130:	6143      	streq	r3, [r0, #20]
 800b132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b136:	f8dc c000 	ldr.w	ip, [ip]
 800b13a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b13e:	ea4c 0707 	orr.w	r7, ip, r7
 800b142:	f849 7b04 	str.w	r7, [r9], #4
 800b146:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b14a:	40cf      	lsrs	r7, r1
 800b14c:	e7da      	b.n	800b104 <rshift+0x4c>
 800b14e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b152:	f847 cf04 	str.w	ip, [r7, #4]!
 800b156:	e7c3      	b.n	800b0e0 <rshift+0x28>
 800b158:	4623      	mov	r3, r4
 800b15a:	e7e1      	b.n	800b120 <rshift+0x68>

0800b15c <__hexdig_fun>:
 800b15c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b160:	2b09      	cmp	r3, #9
 800b162:	d802      	bhi.n	800b16a <__hexdig_fun+0xe>
 800b164:	3820      	subs	r0, #32
 800b166:	b2c0      	uxtb	r0, r0
 800b168:	4770      	bx	lr
 800b16a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b16e:	2b05      	cmp	r3, #5
 800b170:	d801      	bhi.n	800b176 <__hexdig_fun+0x1a>
 800b172:	3847      	subs	r0, #71	; 0x47
 800b174:	e7f7      	b.n	800b166 <__hexdig_fun+0xa>
 800b176:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b17a:	2b05      	cmp	r3, #5
 800b17c:	d801      	bhi.n	800b182 <__hexdig_fun+0x26>
 800b17e:	3827      	subs	r0, #39	; 0x27
 800b180:	e7f1      	b.n	800b166 <__hexdig_fun+0xa>
 800b182:	2000      	movs	r0, #0
 800b184:	4770      	bx	lr
	...

0800b188 <__gethex>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	ed2d 8b02 	vpush	{d8}
 800b190:	b089      	sub	sp, #36	; 0x24
 800b192:	ee08 0a10 	vmov	s16, r0
 800b196:	9304      	str	r3, [sp, #16]
 800b198:	4bb4      	ldr	r3, [pc, #720]	; (800b46c <__gethex+0x2e4>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	9301      	str	r3, [sp, #4]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	468b      	mov	fp, r1
 800b1a2:	4690      	mov	r8, r2
 800b1a4:	f7f5 f814 	bl	80001d0 <strlen>
 800b1a8:	9b01      	ldr	r3, [sp, #4]
 800b1aa:	f8db 2000 	ldr.w	r2, [fp]
 800b1ae:	4403      	add	r3, r0
 800b1b0:	4682      	mov	sl, r0
 800b1b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b1b6:	9305      	str	r3, [sp, #20]
 800b1b8:	1c93      	adds	r3, r2, #2
 800b1ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b1be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b1c2:	32fe      	adds	r2, #254	; 0xfe
 800b1c4:	18d1      	adds	r1, r2, r3
 800b1c6:	461f      	mov	r7, r3
 800b1c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b1cc:	9100      	str	r1, [sp, #0]
 800b1ce:	2830      	cmp	r0, #48	; 0x30
 800b1d0:	d0f8      	beq.n	800b1c4 <__gethex+0x3c>
 800b1d2:	f7ff ffc3 	bl	800b15c <__hexdig_fun>
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	d13a      	bne.n	800b252 <__gethex+0xca>
 800b1dc:	9901      	ldr	r1, [sp, #4]
 800b1de:	4652      	mov	r2, sl
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	f001 f9b1 	bl	800c548 <strncmp>
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	d168      	bne.n	800b2be <__gethex+0x136>
 800b1ec:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b1f0:	eb07 060a 	add.w	r6, r7, sl
 800b1f4:	f7ff ffb2 	bl	800b15c <__hexdig_fun>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d062      	beq.n	800b2c2 <__gethex+0x13a>
 800b1fc:	4633      	mov	r3, r6
 800b1fe:	7818      	ldrb	r0, [r3, #0]
 800b200:	2830      	cmp	r0, #48	; 0x30
 800b202:	461f      	mov	r7, r3
 800b204:	f103 0301 	add.w	r3, r3, #1
 800b208:	d0f9      	beq.n	800b1fe <__gethex+0x76>
 800b20a:	f7ff ffa7 	bl	800b15c <__hexdig_fun>
 800b20e:	2301      	movs	r3, #1
 800b210:	fab0 f480 	clz	r4, r0
 800b214:	0964      	lsrs	r4, r4, #5
 800b216:	4635      	mov	r5, r6
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	463a      	mov	r2, r7
 800b21c:	4616      	mov	r6, r2
 800b21e:	3201      	adds	r2, #1
 800b220:	7830      	ldrb	r0, [r6, #0]
 800b222:	f7ff ff9b 	bl	800b15c <__hexdig_fun>
 800b226:	2800      	cmp	r0, #0
 800b228:	d1f8      	bne.n	800b21c <__gethex+0x94>
 800b22a:	9901      	ldr	r1, [sp, #4]
 800b22c:	4652      	mov	r2, sl
 800b22e:	4630      	mov	r0, r6
 800b230:	f001 f98a 	bl	800c548 <strncmp>
 800b234:	b980      	cbnz	r0, 800b258 <__gethex+0xd0>
 800b236:	b94d      	cbnz	r5, 800b24c <__gethex+0xc4>
 800b238:	eb06 050a 	add.w	r5, r6, sl
 800b23c:	462a      	mov	r2, r5
 800b23e:	4616      	mov	r6, r2
 800b240:	3201      	adds	r2, #1
 800b242:	7830      	ldrb	r0, [r6, #0]
 800b244:	f7ff ff8a 	bl	800b15c <__hexdig_fun>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d1f8      	bne.n	800b23e <__gethex+0xb6>
 800b24c:	1bad      	subs	r5, r5, r6
 800b24e:	00ad      	lsls	r5, r5, #2
 800b250:	e004      	b.n	800b25c <__gethex+0xd4>
 800b252:	2400      	movs	r4, #0
 800b254:	4625      	mov	r5, r4
 800b256:	e7e0      	b.n	800b21a <__gethex+0x92>
 800b258:	2d00      	cmp	r5, #0
 800b25a:	d1f7      	bne.n	800b24c <__gethex+0xc4>
 800b25c:	7833      	ldrb	r3, [r6, #0]
 800b25e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b262:	2b50      	cmp	r3, #80	; 0x50
 800b264:	d13b      	bne.n	800b2de <__gethex+0x156>
 800b266:	7873      	ldrb	r3, [r6, #1]
 800b268:	2b2b      	cmp	r3, #43	; 0x2b
 800b26a:	d02c      	beq.n	800b2c6 <__gethex+0x13e>
 800b26c:	2b2d      	cmp	r3, #45	; 0x2d
 800b26e:	d02e      	beq.n	800b2ce <__gethex+0x146>
 800b270:	1c71      	adds	r1, r6, #1
 800b272:	f04f 0900 	mov.w	r9, #0
 800b276:	7808      	ldrb	r0, [r1, #0]
 800b278:	f7ff ff70 	bl	800b15c <__hexdig_fun>
 800b27c:	1e43      	subs	r3, r0, #1
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b18      	cmp	r3, #24
 800b282:	d82c      	bhi.n	800b2de <__gethex+0x156>
 800b284:	f1a0 0210 	sub.w	r2, r0, #16
 800b288:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b28c:	f7ff ff66 	bl	800b15c <__hexdig_fun>
 800b290:	1e43      	subs	r3, r0, #1
 800b292:	b2db      	uxtb	r3, r3
 800b294:	2b18      	cmp	r3, #24
 800b296:	d91d      	bls.n	800b2d4 <__gethex+0x14c>
 800b298:	f1b9 0f00 	cmp.w	r9, #0
 800b29c:	d000      	beq.n	800b2a0 <__gethex+0x118>
 800b29e:	4252      	negs	r2, r2
 800b2a0:	4415      	add	r5, r2
 800b2a2:	f8cb 1000 	str.w	r1, [fp]
 800b2a6:	b1e4      	cbz	r4, 800b2e2 <__gethex+0x15a>
 800b2a8:	9b00      	ldr	r3, [sp, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	bf14      	ite	ne
 800b2ae:	2700      	movne	r7, #0
 800b2b0:	2706      	moveq	r7, #6
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	b009      	add	sp, #36	; 0x24
 800b2b6:	ecbd 8b02 	vpop	{d8}
 800b2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2be:	463e      	mov	r6, r7
 800b2c0:	4625      	mov	r5, r4
 800b2c2:	2401      	movs	r4, #1
 800b2c4:	e7ca      	b.n	800b25c <__gethex+0xd4>
 800b2c6:	f04f 0900 	mov.w	r9, #0
 800b2ca:	1cb1      	adds	r1, r6, #2
 800b2cc:	e7d3      	b.n	800b276 <__gethex+0xee>
 800b2ce:	f04f 0901 	mov.w	r9, #1
 800b2d2:	e7fa      	b.n	800b2ca <__gethex+0x142>
 800b2d4:	230a      	movs	r3, #10
 800b2d6:	fb03 0202 	mla	r2, r3, r2, r0
 800b2da:	3a10      	subs	r2, #16
 800b2dc:	e7d4      	b.n	800b288 <__gethex+0x100>
 800b2de:	4631      	mov	r1, r6
 800b2e0:	e7df      	b.n	800b2a2 <__gethex+0x11a>
 800b2e2:	1bf3      	subs	r3, r6, r7
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	4621      	mov	r1, r4
 800b2e8:	2b07      	cmp	r3, #7
 800b2ea:	dc0b      	bgt.n	800b304 <__gethex+0x17c>
 800b2ec:	ee18 0a10 	vmov	r0, s16
 800b2f0:	f000 fa8e 	bl	800b810 <_Balloc>
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	b940      	cbnz	r0, 800b30a <__gethex+0x182>
 800b2f8:	4b5d      	ldr	r3, [pc, #372]	; (800b470 <__gethex+0x2e8>)
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	21de      	movs	r1, #222	; 0xde
 800b2fe:	485d      	ldr	r0, [pc, #372]	; (800b474 <__gethex+0x2ec>)
 800b300:	f001 f944 	bl	800c58c <__assert_func>
 800b304:	3101      	adds	r1, #1
 800b306:	105b      	asrs	r3, r3, #1
 800b308:	e7ee      	b.n	800b2e8 <__gethex+0x160>
 800b30a:	f100 0914 	add.w	r9, r0, #20
 800b30e:	f04f 0b00 	mov.w	fp, #0
 800b312:	f1ca 0301 	rsb	r3, sl, #1
 800b316:	f8cd 9008 	str.w	r9, [sp, #8]
 800b31a:	f8cd b000 	str.w	fp, [sp]
 800b31e:	9306      	str	r3, [sp, #24]
 800b320:	42b7      	cmp	r7, r6
 800b322:	d340      	bcc.n	800b3a6 <__gethex+0x21e>
 800b324:	9802      	ldr	r0, [sp, #8]
 800b326:	9b00      	ldr	r3, [sp, #0]
 800b328:	f840 3b04 	str.w	r3, [r0], #4
 800b32c:	eba0 0009 	sub.w	r0, r0, r9
 800b330:	1080      	asrs	r0, r0, #2
 800b332:	0146      	lsls	r6, r0, #5
 800b334:	6120      	str	r0, [r4, #16]
 800b336:	4618      	mov	r0, r3
 800b338:	f000 fb5c 	bl	800b9f4 <__hi0bits>
 800b33c:	1a30      	subs	r0, r6, r0
 800b33e:	f8d8 6000 	ldr.w	r6, [r8]
 800b342:	42b0      	cmp	r0, r6
 800b344:	dd63      	ble.n	800b40e <__gethex+0x286>
 800b346:	1b87      	subs	r7, r0, r6
 800b348:	4639      	mov	r1, r7
 800b34a:	4620      	mov	r0, r4
 800b34c:	f000 ff00 	bl	800c150 <__any_on>
 800b350:	4682      	mov	sl, r0
 800b352:	b1a8      	cbz	r0, 800b380 <__gethex+0x1f8>
 800b354:	1e7b      	subs	r3, r7, #1
 800b356:	1159      	asrs	r1, r3, #5
 800b358:	f003 021f 	and.w	r2, r3, #31
 800b35c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b360:	f04f 0a01 	mov.w	sl, #1
 800b364:	fa0a f202 	lsl.w	r2, sl, r2
 800b368:	420a      	tst	r2, r1
 800b36a:	d009      	beq.n	800b380 <__gethex+0x1f8>
 800b36c:	4553      	cmp	r3, sl
 800b36e:	dd05      	ble.n	800b37c <__gethex+0x1f4>
 800b370:	1eb9      	subs	r1, r7, #2
 800b372:	4620      	mov	r0, r4
 800b374:	f000 feec 	bl	800c150 <__any_on>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d145      	bne.n	800b408 <__gethex+0x280>
 800b37c:	f04f 0a02 	mov.w	sl, #2
 800b380:	4639      	mov	r1, r7
 800b382:	4620      	mov	r0, r4
 800b384:	f7ff fe98 	bl	800b0b8 <rshift>
 800b388:	443d      	add	r5, r7
 800b38a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b38e:	42ab      	cmp	r3, r5
 800b390:	da4c      	bge.n	800b42c <__gethex+0x2a4>
 800b392:	ee18 0a10 	vmov	r0, s16
 800b396:	4621      	mov	r1, r4
 800b398:	f000 fa7a 	bl	800b890 <_Bfree>
 800b39c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b39e:	2300      	movs	r3, #0
 800b3a0:	6013      	str	r3, [r2, #0]
 800b3a2:	27a3      	movs	r7, #163	; 0xa3
 800b3a4:	e785      	b.n	800b2b2 <__gethex+0x12a>
 800b3a6:	1e73      	subs	r3, r6, #1
 800b3a8:	9a05      	ldr	r2, [sp, #20]
 800b3aa:	9303      	str	r3, [sp, #12]
 800b3ac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d019      	beq.n	800b3e8 <__gethex+0x260>
 800b3b4:	f1bb 0f20 	cmp.w	fp, #32
 800b3b8:	d107      	bne.n	800b3ca <__gethex+0x242>
 800b3ba:	9b02      	ldr	r3, [sp, #8]
 800b3bc:	9a00      	ldr	r2, [sp, #0]
 800b3be:	f843 2b04 	str.w	r2, [r3], #4
 800b3c2:	9302      	str	r3, [sp, #8]
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	9300      	str	r3, [sp, #0]
 800b3c8:	469b      	mov	fp, r3
 800b3ca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b3ce:	f7ff fec5 	bl	800b15c <__hexdig_fun>
 800b3d2:	9b00      	ldr	r3, [sp, #0]
 800b3d4:	f000 000f 	and.w	r0, r0, #15
 800b3d8:	fa00 f00b 	lsl.w	r0, r0, fp
 800b3dc:	4303      	orrs	r3, r0
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	f10b 0b04 	add.w	fp, fp, #4
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	e00d      	b.n	800b404 <__gethex+0x27c>
 800b3e8:	9b03      	ldr	r3, [sp, #12]
 800b3ea:	9a06      	ldr	r2, [sp, #24]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	42bb      	cmp	r3, r7
 800b3f0:	d3e0      	bcc.n	800b3b4 <__gethex+0x22c>
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	9901      	ldr	r1, [sp, #4]
 800b3f6:	9307      	str	r3, [sp, #28]
 800b3f8:	4652      	mov	r2, sl
 800b3fa:	f001 f8a5 	bl	800c548 <strncmp>
 800b3fe:	9b07      	ldr	r3, [sp, #28]
 800b400:	2800      	cmp	r0, #0
 800b402:	d1d7      	bne.n	800b3b4 <__gethex+0x22c>
 800b404:	461e      	mov	r6, r3
 800b406:	e78b      	b.n	800b320 <__gethex+0x198>
 800b408:	f04f 0a03 	mov.w	sl, #3
 800b40c:	e7b8      	b.n	800b380 <__gethex+0x1f8>
 800b40e:	da0a      	bge.n	800b426 <__gethex+0x29e>
 800b410:	1a37      	subs	r7, r6, r0
 800b412:	4621      	mov	r1, r4
 800b414:	ee18 0a10 	vmov	r0, s16
 800b418:	463a      	mov	r2, r7
 800b41a:	f000 fc55 	bl	800bcc8 <__lshift>
 800b41e:	1bed      	subs	r5, r5, r7
 800b420:	4604      	mov	r4, r0
 800b422:	f100 0914 	add.w	r9, r0, #20
 800b426:	f04f 0a00 	mov.w	sl, #0
 800b42a:	e7ae      	b.n	800b38a <__gethex+0x202>
 800b42c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b430:	42a8      	cmp	r0, r5
 800b432:	dd72      	ble.n	800b51a <__gethex+0x392>
 800b434:	1b45      	subs	r5, r0, r5
 800b436:	42ae      	cmp	r6, r5
 800b438:	dc36      	bgt.n	800b4a8 <__gethex+0x320>
 800b43a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d02a      	beq.n	800b498 <__gethex+0x310>
 800b442:	2b03      	cmp	r3, #3
 800b444:	d02c      	beq.n	800b4a0 <__gethex+0x318>
 800b446:	2b01      	cmp	r3, #1
 800b448:	d11c      	bne.n	800b484 <__gethex+0x2fc>
 800b44a:	42ae      	cmp	r6, r5
 800b44c:	d11a      	bne.n	800b484 <__gethex+0x2fc>
 800b44e:	2e01      	cmp	r6, #1
 800b450:	d112      	bne.n	800b478 <__gethex+0x2f0>
 800b452:	9a04      	ldr	r2, [sp, #16]
 800b454:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b458:	6013      	str	r3, [r2, #0]
 800b45a:	2301      	movs	r3, #1
 800b45c:	6123      	str	r3, [r4, #16]
 800b45e:	f8c9 3000 	str.w	r3, [r9]
 800b462:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b464:	2762      	movs	r7, #98	; 0x62
 800b466:	601c      	str	r4, [r3, #0]
 800b468:	e723      	b.n	800b2b2 <__gethex+0x12a>
 800b46a:	bf00      	nop
 800b46c:	0800cf08 	.word	0x0800cf08
 800b470:	0800ce8f 	.word	0x0800ce8f
 800b474:	0800cea0 	.word	0x0800cea0
 800b478:	1e71      	subs	r1, r6, #1
 800b47a:	4620      	mov	r0, r4
 800b47c:	f000 fe68 	bl	800c150 <__any_on>
 800b480:	2800      	cmp	r0, #0
 800b482:	d1e6      	bne.n	800b452 <__gethex+0x2ca>
 800b484:	ee18 0a10 	vmov	r0, s16
 800b488:	4621      	mov	r1, r4
 800b48a:	f000 fa01 	bl	800b890 <_Bfree>
 800b48e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b490:	2300      	movs	r3, #0
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	2750      	movs	r7, #80	; 0x50
 800b496:	e70c      	b.n	800b2b2 <__gethex+0x12a>
 800b498:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1f2      	bne.n	800b484 <__gethex+0x2fc>
 800b49e:	e7d8      	b.n	800b452 <__gethex+0x2ca>
 800b4a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1d5      	bne.n	800b452 <__gethex+0x2ca>
 800b4a6:	e7ed      	b.n	800b484 <__gethex+0x2fc>
 800b4a8:	1e6f      	subs	r7, r5, #1
 800b4aa:	f1ba 0f00 	cmp.w	sl, #0
 800b4ae:	d131      	bne.n	800b514 <__gethex+0x38c>
 800b4b0:	b127      	cbz	r7, 800b4bc <__gethex+0x334>
 800b4b2:	4639      	mov	r1, r7
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f000 fe4b 	bl	800c150 <__any_on>
 800b4ba:	4682      	mov	sl, r0
 800b4bc:	117b      	asrs	r3, r7, #5
 800b4be:	2101      	movs	r1, #1
 800b4c0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b4c4:	f007 071f 	and.w	r7, r7, #31
 800b4c8:	fa01 f707 	lsl.w	r7, r1, r7
 800b4cc:	421f      	tst	r7, r3
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	bf18      	it	ne
 800b4d4:	f04a 0a02 	orrne.w	sl, sl, #2
 800b4d8:	1b76      	subs	r6, r6, r5
 800b4da:	f7ff fded 	bl	800b0b8 <rshift>
 800b4de:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b4e2:	2702      	movs	r7, #2
 800b4e4:	f1ba 0f00 	cmp.w	sl, #0
 800b4e8:	d048      	beq.n	800b57c <__gethex+0x3f4>
 800b4ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d015      	beq.n	800b51e <__gethex+0x396>
 800b4f2:	2b03      	cmp	r3, #3
 800b4f4:	d017      	beq.n	800b526 <__gethex+0x39e>
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d109      	bne.n	800b50e <__gethex+0x386>
 800b4fa:	f01a 0f02 	tst.w	sl, #2
 800b4fe:	d006      	beq.n	800b50e <__gethex+0x386>
 800b500:	f8d9 0000 	ldr.w	r0, [r9]
 800b504:	ea4a 0a00 	orr.w	sl, sl, r0
 800b508:	f01a 0f01 	tst.w	sl, #1
 800b50c:	d10e      	bne.n	800b52c <__gethex+0x3a4>
 800b50e:	f047 0710 	orr.w	r7, r7, #16
 800b512:	e033      	b.n	800b57c <__gethex+0x3f4>
 800b514:	f04f 0a01 	mov.w	sl, #1
 800b518:	e7d0      	b.n	800b4bc <__gethex+0x334>
 800b51a:	2701      	movs	r7, #1
 800b51c:	e7e2      	b.n	800b4e4 <__gethex+0x35c>
 800b51e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b520:	f1c3 0301 	rsb	r3, r3, #1
 800b524:	9315      	str	r3, [sp, #84]	; 0x54
 800b526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d0f0      	beq.n	800b50e <__gethex+0x386>
 800b52c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b530:	f104 0314 	add.w	r3, r4, #20
 800b534:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b538:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b53c:	f04f 0c00 	mov.w	ip, #0
 800b540:	4618      	mov	r0, r3
 800b542:	f853 2b04 	ldr.w	r2, [r3], #4
 800b546:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b54a:	d01c      	beq.n	800b586 <__gethex+0x3fe>
 800b54c:	3201      	adds	r2, #1
 800b54e:	6002      	str	r2, [r0, #0]
 800b550:	2f02      	cmp	r7, #2
 800b552:	f104 0314 	add.w	r3, r4, #20
 800b556:	d13f      	bne.n	800b5d8 <__gethex+0x450>
 800b558:	f8d8 2000 	ldr.w	r2, [r8]
 800b55c:	3a01      	subs	r2, #1
 800b55e:	42b2      	cmp	r2, r6
 800b560:	d10a      	bne.n	800b578 <__gethex+0x3f0>
 800b562:	1171      	asrs	r1, r6, #5
 800b564:	2201      	movs	r2, #1
 800b566:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b56a:	f006 061f 	and.w	r6, r6, #31
 800b56e:	fa02 f606 	lsl.w	r6, r2, r6
 800b572:	421e      	tst	r6, r3
 800b574:	bf18      	it	ne
 800b576:	4617      	movne	r7, r2
 800b578:	f047 0720 	orr.w	r7, r7, #32
 800b57c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b57e:	601c      	str	r4, [r3, #0]
 800b580:	9b04      	ldr	r3, [sp, #16]
 800b582:	601d      	str	r5, [r3, #0]
 800b584:	e695      	b.n	800b2b2 <__gethex+0x12a>
 800b586:	4299      	cmp	r1, r3
 800b588:	f843 cc04 	str.w	ip, [r3, #-4]
 800b58c:	d8d8      	bhi.n	800b540 <__gethex+0x3b8>
 800b58e:	68a3      	ldr	r3, [r4, #8]
 800b590:	459b      	cmp	fp, r3
 800b592:	db19      	blt.n	800b5c8 <__gethex+0x440>
 800b594:	6861      	ldr	r1, [r4, #4]
 800b596:	ee18 0a10 	vmov	r0, s16
 800b59a:	3101      	adds	r1, #1
 800b59c:	f000 f938 	bl	800b810 <_Balloc>
 800b5a0:	4681      	mov	r9, r0
 800b5a2:	b918      	cbnz	r0, 800b5ac <__gethex+0x424>
 800b5a4:	4b1a      	ldr	r3, [pc, #104]	; (800b610 <__gethex+0x488>)
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	2184      	movs	r1, #132	; 0x84
 800b5aa:	e6a8      	b.n	800b2fe <__gethex+0x176>
 800b5ac:	6922      	ldr	r2, [r4, #16]
 800b5ae:	3202      	adds	r2, #2
 800b5b0:	f104 010c 	add.w	r1, r4, #12
 800b5b4:	0092      	lsls	r2, r2, #2
 800b5b6:	300c      	adds	r0, #12
 800b5b8:	f7fd f9ff 	bl	80089ba <memcpy>
 800b5bc:	4621      	mov	r1, r4
 800b5be:	ee18 0a10 	vmov	r0, s16
 800b5c2:	f000 f965 	bl	800b890 <_Bfree>
 800b5c6:	464c      	mov	r4, r9
 800b5c8:	6923      	ldr	r3, [r4, #16]
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b5d0:	6122      	str	r2, [r4, #16]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	615a      	str	r2, [r3, #20]
 800b5d6:	e7bb      	b.n	800b550 <__gethex+0x3c8>
 800b5d8:	6922      	ldr	r2, [r4, #16]
 800b5da:	455a      	cmp	r2, fp
 800b5dc:	dd0b      	ble.n	800b5f6 <__gethex+0x46e>
 800b5de:	2101      	movs	r1, #1
 800b5e0:	4620      	mov	r0, r4
 800b5e2:	f7ff fd69 	bl	800b0b8 <rshift>
 800b5e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5ea:	3501      	adds	r5, #1
 800b5ec:	42ab      	cmp	r3, r5
 800b5ee:	f6ff aed0 	blt.w	800b392 <__gethex+0x20a>
 800b5f2:	2701      	movs	r7, #1
 800b5f4:	e7c0      	b.n	800b578 <__gethex+0x3f0>
 800b5f6:	f016 061f 	ands.w	r6, r6, #31
 800b5fa:	d0fa      	beq.n	800b5f2 <__gethex+0x46a>
 800b5fc:	4453      	add	r3, sl
 800b5fe:	f1c6 0620 	rsb	r6, r6, #32
 800b602:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b606:	f000 f9f5 	bl	800b9f4 <__hi0bits>
 800b60a:	42b0      	cmp	r0, r6
 800b60c:	dbe7      	blt.n	800b5de <__gethex+0x456>
 800b60e:	e7f0      	b.n	800b5f2 <__gethex+0x46a>
 800b610:	0800ce8f 	.word	0x0800ce8f

0800b614 <L_shift>:
 800b614:	f1c2 0208 	rsb	r2, r2, #8
 800b618:	0092      	lsls	r2, r2, #2
 800b61a:	b570      	push	{r4, r5, r6, lr}
 800b61c:	f1c2 0620 	rsb	r6, r2, #32
 800b620:	6843      	ldr	r3, [r0, #4]
 800b622:	6804      	ldr	r4, [r0, #0]
 800b624:	fa03 f506 	lsl.w	r5, r3, r6
 800b628:	432c      	orrs	r4, r5
 800b62a:	40d3      	lsrs	r3, r2
 800b62c:	6004      	str	r4, [r0, #0]
 800b62e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b632:	4288      	cmp	r0, r1
 800b634:	d3f4      	bcc.n	800b620 <L_shift+0xc>
 800b636:	bd70      	pop	{r4, r5, r6, pc}

0800b638 <__match>:
 800b638:	b530      	push	{r4, r5, lr}
 800b63a:	6803      	ldr	r3, [r0, #0]
 800b63c:	3301      	adds	r3, #1
 800b63e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b642:	b914      	cbnz	r4, 800b64a <__match+0x12>
 800b644:	6003      	str	r3, [r0, #0]
 800b646:	2001      	movs	r0, #1
 800b648:	bd30      	pop	{r4, r5, pc}
 800b64a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b64e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b652:	2d19      	cmp	r5, #25
 800b654:	bf98      	it	ls
 800b656:	3220      	addls	r2, #32
 800b658:	42a2      	cmp	r2, r4
 800b65a:	d0f0      	beq.n	800b63e <__match+0x6>
 800b65c:	2000      	movs	r0, #0
 800b65e:	e7f3      	b.n	800b648 <__match+0x10>

0800b660 <__hexnan>:
 800b660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b664:	680b      	ldr	r3, [r1, #0]
 800b666:	115e      	asrs	r6, r3, #5
 800b668:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b66c:	f013 031f 	ands.w	r3, r3, #31
 800b670:	b087      	sub	sp, #28
 800b672:	bf18      	it	ne
 800b674:	3604      	addne	r6, #4
 800b676:	2500      	movs	r5, #0
 800b678:	1f37      	subs	r7, r6, #4
 800b67a:	4690      	mov	r8, r2
 800b67c:	6802      	ldr	r2, [r0, #0]
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	4682      	mov	sl, r0
 800b682:	f846 5c04 	str.w	r5, [r6, #-4]
 800b686:	46b9      	mov	r9, r7
 800b688:	463c      	mov	r4, r7
 800b68a:	9502      	str	r5, [sp, #8]
 800b68c:	46ab      	mov	fp, r5
 800b68e:	7851      	ldrb	r1, [r2, #1]
 800b690:	1c53      	adds	r3, r2, #1
 800b692:	9303      	str	r3, [sp, #12]
 800b694:	b341      	cbz	r1, 800b6e8 <__hexnan+0x88>
 800b696:	4608      	mov	r0, r1
 800b698:	9205      	str	r2, [sp, #20]
 800b69a:	9104      	str	r1, [sp, #16]
 800b69c:	f7ff fd5e 	bl	800b15c <__hexdig_fun>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d14f      	bne.n	800b744 <__hexnan+0xe4>
 800b6a4:	9904      	ldr	r1, [sp, #16]
 800b6a6:	9a05      	ldr	r2, [sp, #20]
 800b6a8:	2920      	cmp	r1, #32
 800b6aa:	d818      	bhi.n	800b6de <__hexnan+0x7e>
 800b6ac:	9b02      	ldr	r3, [sp, #8]
 800b6ae:	459b      	cmp	fp, r3
 800b6b0:	dd13      	ble.n	800b6da <__hexnan+0x7a>
 800b6b2:	454c      	cmp	r4, r9
 800b6b4:	d206      	bcs.n	800b6c4 <__hexnan+0x64>
 800b6b6:	2d07      	cmp	r5, #7
 800b6b8:	dc04      	bgt.n	800b6c4 <__hexnan+0x64>
 800b6ba:	462a      	mov	r2, r5
 800b6bc:	4649      	mov	r1, r9
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f7ff ffa8 	bl	800b614 <L_shift>
 800b6c4:	4544      	cmp	r4, r8
 800b6c6:	d950      	bls.n	800b76a <__hexnan+0x10a>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f1a4 0904 	sub.w	r9, r4, #4
 800b6ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6d2:	f8cd b008 	str.w	fp, [sp, #8]
 800b6d6:	464c      	mov	r4, r9
 800b6d8:	461d      	mov	r5, r3
 800b6da:	9a03      	ldr	r2, [sp, #12]
 800b6dc:	e7d7      	b.n	800b68e <__hexnan+0x2e>
 800b6de:	2929      	cmp	r1, #41	; 0x29
 800b6e0:	d156      	bne.n	800b790 <__hexnan+0x130>
 800b6e2:	3202      	adds	r2, #2
 800b6e4:	f8ca 2000 	str.w	r2, [sl]
 800b6e8:	f1bb 0f00 	cmp.w	fp, #0
 800b6ec:	d050      	beq.n	800b790 <__hexnan+0x130>
 800b6ee:	454c      	cmp	r4, r9
 800b6f0:	d206      	bcs.n	800b700 <__hexnan+0xa0>
 800b6f2:	2d07      	cmp	r5, #7
 800b6f4:	dc04      	bgt.n	800b700 <__hexnan+0xa0>
 800b6f6:	462a      	mov	r2, r5
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f7ff ff8a 	bl	800b614 <L_shift>
 800b700:	4544      	cmp	r4, r8
 800b702:	d934      	bls.n	800b76e <__hexnan+0x10e>
 800b704:	f1a8 0204 	sub.w	r2, r8, #4
 800b708:	4623      	mov	r3, r4
 800b70a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b70e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b712:	429f      	cmp	r7, r3
 800b714:	d2f9      	bcs.n	800b70a <__hexnan+0xaa>
 800b716:	1b3b      	subs	r3, r7, r4
 800b718:	f023 0303 	bic.w	r3, r3, #3
 800b71c:	3304      	adds	r3, #4
 800b71e:	3401      	adds	r4, #1
 800b720:	3e03      	subs	r6, #3
 800b722:	42b4      	cmp	r4, r6
 800b724:	bf88      	it	hi
 800b726:	2304      	movhi	r3, #4
 800b728:	4443      	add	r3, r8
 800b72a:	2200      	movs	r2, #0
 800b72c:	f843 2b04 	str.w	r2, [r3], #4
 800b730:	429f      	cmp	r7, r3
 800b732:	d2fb      	bcs.n	800b72c <__hexnan+0xcc>
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	b91b      	cbnz	r3, 800b740 <__hexnan+0xe0>
 800b738:	4547      	cmp	r7, r8
 800b73a:	d127      	bne.n	800b78c <__hexnan+0x12c>
 800b73c:	2301      	movs	r3, #1
 800b73e:	603b      	str	r3, [r7, #0]
 800b740:	2005      	movs	r0, #5
 800b742:	e026      	b.n	800b792 <__hexnan+0x132>
 800b744:	3501      	adds	r5, #1
 800b746:	2d08      	cmp	r5, #8
 800b748:	f10b 0b01 	add.w	fp, fp, #1
 800b74c:	dd06      	ble.n	800b75c <__hexnan+0xfc>
 800b74e:	4544      	cmp	r4, r8
 800b750:	d9c3      	bls.n	800b6da <__hexnan+0x7a>
 800b752:	2300      	movs	r3, #0
 800b754:	f844 3c04 	str.w	r3, [r4, #-4]
 800b758:	2501      	movs	r5, #1
 800b75a:	3c04      	subs	r4, #4
 800b75c:	6822      	ldr	r2, [r4, #0]
 800b75e:	f000 000f 	and.w	r0, r0, #15
 800b762:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b766:	6022      	str	r2, [r4, #0]
 800b768:	e7b7      	b.n	800b6da <__hexnan+0x7a>
 800b76a:	2508      	movs	r5, #8
 800b76c:	e7b5      	b.n	800b6da <__hexnan+0x7a>
 800b76e:	9b01      	ldr	r3, [sp, #4]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d0df      	beq.n	800b734 <__hexnan+0xd4>
 800b774:	f04f 32ff 	mov.w	r2, #4294967295
 800b778:	f1c3 0320 	rsb	r3, r3, #32
 800b77c:	fa22 f303 	lsr.w	r3, r2, r3
 800b780:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b784:	401a      	ands	r2, r3
 800b786:	f846 2c04 	str.w	r2, [r6, #-4]
 800b78a:	e7d3      	b.n	800b734 <__hexnan+0xd4>
 800b78c:	3f04      	subs	r7, #4
 800b78e:	e7d1      	b.n	800b734 <__hexnan+0xd4>
 800b790:	2004      	movs	r0, #4
 800b792:	b007      	add	sp, #28
 800b794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b798 <_localeconv_r>:
 800b798:	4800      	ldr	r0, [pc, #0]	; (800b79c <_localeconv_r+0x4>)
 800b79a:	4770      	bx	lr
 800b79c:	20000168 	.word	0x20000168

0800b7a0 <_lseek_r>:
 800b7a0:	b538      	push	{r3, r4, r5, lr}
 800b7a2:	4d07      	ldr	r5, [pc, #28]	; (800b7c0 <_lseek_r+0x20>)
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	4608      	mov	r0, r1
 800b7a8:	4611      	mov	r1, r2
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	602a      	str	r2, [r5, #0]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	f7f6 f9f6 	bl	8001ba0 <_lseek>
 800b7b4:	1c43      	adds	r3, r0, #1
 800b7b6:	d102      	bne.n	800b7be <_lseek_r+0x1e>
 800b7b8:	682b      	ldr	r3, [r5, #0]
 800b7ba:	b103      	cbz	r3, 800b7be <_lseek_r+0x1e>
 800b7bc:	6023      	str	r3, [r4, #0]
 800b7be:	bd38      	pop	{r3, r4, r5, pc}
 800b7c0:	20004580 	.word	0x20004580

0800b7c4 <malloc>:
 800b7c4:	4b02      	ldr	r3, [pc, #8]	; (800b7d0 <malloc+0xc>)
 800b7c6:	4601      	mov	r1, r0
 800b7c8:	6818      	ldr	r0, [r3, #0]
 800b7ca:	f7fd b92d 	b.w	8008a28 <_malloc_r>
 800b7ce:	bf00      	nop
 800b7d0:	20000010 	.word	0x20000010

0800b7d4 <__ascii_mbtowc>:
 800b7d4:	b082      	sub	sp, #8
 800b7d6:	b901      	cbnz	r1, 800b7da <__ascii_mbtowc+0x6>
 800b7d8:	a901      	add	r1, sp, #4
 800b7da:	b142      	cbz	r2, 800b7ee <__ascii_mbtowc+0x1a>
 800b7dc:	b14b      	cbz	r3, 800b7f2 <__ascii_mbtowc+0x1e>
 800b7de:	7813      	ldrb	r3, [r2, #0]
 800b7e0:	600b      	str	r3, [r1, #0]
 800b7e2:	7812      	ldrb	r2, [r2, #0]
 800b7e4:	1e10      	subs	r0, r2, #0
 800b7e6:	bf18      	it	ne
 800b7e8:	2001      	movne	r0, #1
 800b7ea:	b002      	add	sp, #8
 800b7ec:	4770      	bx	lr
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	e7fb      	b.n	800b7ea <__ascii_mbtowc+0x16>
 800b7f2:	f06f 0001 	mvn.w	r0, #1
 800b7f6:	e7f8      	b.n	800b7ea <__ascii_mbtowc+0x16>

0800b7f8 <__malloc_lock>:
 800b7f8:	4801      	ldr	r0, [pc, #4]	; (800b800 <__malloc_lock+0x8>)
 800b7fa:	f7fd b8dc 	b.w	80089b6 <__retarget_lock_acquire_recursive>
 800b7fe:	bf00      	nop
 800b800:	20004574 	.word	0x20004574

0800b804 <__malloc_unlock>:
 800b804:	4801      	ldr	r0, [pc, #4]	; (800b80c <__malloc_unlock+0x8>)
 800b806:	f7fd b8d7 	b.w	80089b8 <__retarget_lock_release_recursive>
 800b80a:	bf00      	nop
 800b80c:	20004574 	.word	0x20004574

0800b810 <_Balloc>:
 800b810:	b570      	push	{r4, r5, r6, lr}
 800b812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b814:	4604      	mov	r4, r0
 800b816:	460d      	mov	r5, r1
 800b818:	b976      	cbnz	r6, 800b838 <_Balloc+0x28>
 800b81a:	2010      	movs	r0, #16
 800b81c:	f7ff ffd2 	bl	800b7c4 <malloc>
 800b820:	4602      	mov	r2, r0
 800b822:	6260      	str	r0, [r4, #36]	; 0x24
 800b824:	b920      	cbnz	r0, 800b830 <_Balloc+0x20>
 800b826:	4b18      	ldr	r3, [pc, #96]	; (800b888 <_Balloc+0x78>)
 800b828:	4818      	ldr	r0, [pc, #96]	; (800b88c <_Balloc+0x7c>)
 800b82a:	2166      	movs	r1, #102	; 0x66
 800b82c:	f000 feae 	bl	800c58c <__assert_func>
 800b830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b834:	6006      	str	r6, [r0, #0]
 800b836:	60c6      	str	r6, [r0, #12]
 800b838:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b83a:	68f3      	ldr	r3, [r6, #12]
 800b83c:	b183      	cbz	r3, 800b860 <_Balloc+0x50>
 800b83e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b846:	b9b8      	cbnz	r0, 800b878 <_Balloc+0x68>
 800b848:	2101      	movs	r1, #1
 800b84a:	fa01 f605 	lsl.w	r6, r1, r5
 800b84e:	1d72      	adds	r2, r6, #5
 800b850:	0092      	lsls	r2, r2, #2
 800b852:	4620      	mov	r0, r4
 800b854:	f000 fc9d 	bl	800c192 <_calloc_r>
 800b858:	b160      	cbz	r0, 800b874 <_Balloc+0x64>
 800b85a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b85e:	e00e      	b.n	800b87e <_Balloc+0x6e>
 800b860:	2221      	movs	r2, #33	; 0x21
 800b862:	2104      	movs	r1, #4
 800b864:	4620      	mov	r0, r4
 800b866:	f000 fc94 	bl	800c192 <_calloc_r>
 800b86a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b86c:	60f0      	str	r0, [r6, #12]
 800b86e:	68db      	ldr	r3, [r3, #12]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1e4      	bne.n	800b83e <_Balloc+0x2e>
 800b874:	2000      	movs	r0, #0
 800b876:	bd70      	pop	{r4, r5, r6, pc}
 800b878:	6802      	ldr	r2, [r0, #0]
 800b87a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b87e:	2300      	movs	r3, #0
 800b880:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b884:	e7f7      	b.n	800b876 <_Balloc+0x66>
 800b886:	bf00      	nop
 800b888:	0800ce1d 	.word	0x0800ce1d
 800b88c:	0800cf1c 	.word	0x0800cf1c

0800b890 <_Bfree>:
 800b890:	b570      	push	{r4, r5, r6, lr}
 800b892:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b894:	4605      	mov	r5, r0
 800b896:	460c      	mov	r4, r1
 800b898:	b976      	cbnz	r6, 800b8b8 <_Bfree+0x28>
 800b89a:	2010      	movs	r0, #16
 800b89c:	f7ff ff92 	bl	800b7c4 <malloc>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	6268      	str	r0, [r5, #36]	; 0x24
 800b8a4:	b920      	cbnz	r0, 800b8b0 <_Bfree+0x20>
 800b8a6:	4b09      	ldr	r3, [pc, #36]	; (800b8cc <_Bfree+0x3c>)
 800b8a8:	4809      	ldr	r0, [pc, #36]	; (800b8d0 <_Bfree+0x40>)
 800b8aa:	218a      	movs	r1, #138	; 0x8a
 800b8ac:	f000 fe6e 	bl	800c58c <__assert_func>
 800b8b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8b4:	6006      	str	r6, [r0, #0]
 800b8b6:	60c6      	str	r6, [r0, #12]
 800b8b8:	b13c      	cbz	r4, 800b8ca <_Bfree+0x3a>
 800b8ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b8bc:	6862      	ldr	r2, [r4, #4]
 800b8be:	68db      	ldr	r3, [r3, #12]
 800b8c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8c4:	6021      	str	r1, [r4, #0]
 800b8c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8ca:	bd70      	pop	{r4, r5, r6, pc}
 800b8cc:	0800ce1d 	.word	0x0800ce1d
 800b8d0:	0800cf1c 	.word	0x0800cf1c

0800b8d4 <__multadd>:
 800b8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d8:	690d      	ldr	r5, [r1, #16]
 800b8da:	4607      	mov	r7, r0
 800b8dc:	460c      	mov	r4, r1
 800b8de:	461e      	mov	r6, r3
 800b8e0:	f101 0c14 	add.w	ip, r1, #20
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	f8dc 3000 	ldr.w	r3, [ip]
 800b8ea:	b299      	uxth	r1, r3
 800b8ec:	fb02 6101 	mla	r1, r2, r1, r6
 800b8f0:	0c1e      	lsrs	r6, r3, #16
 800b8f2:	0c0b      	lsrs	r3, r1, #16
 800b8f4:	fb02 3306 	mla	r3, r2, r6, r3
 800b8f8:	b289      	uxth	r1, r1
 800b8fa:	3001      	adds	r0, #1
 800b8fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b900:	4285      	cmp	r5, r0
 800b902:	f84c 1b04 	str.w	r1, [ip], #4
 800b906:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b90a:	dcec      	bgt.n	800b8e6 <__multadd+0x12>
 800b90c:	b30e      	cbz	r6, 800b952 <__multadd+0x7e>
 800b90e:	68a3      	ldr	r3, [r4, #8]
 800b910:	42ab      	cmp	r3, r5
 800b912:	dc19      	bgt.n	800b948 <__multadd+0x74>
 800b914:	6861      	ldr	r1, [r4, #4]
 800b916:	4638      	mov	r0, r7
 800b918:	3101      	adds	r1, #1
 800b91a:	f7ff ff79 	bl	800b810 <_Balloc>
 800b91e:	4680      	mov	r8, r0
 800b920:	b928      	cbnz	r0, 800b92e <__multadd+0x5a>
 800b922:	4602      	mov	r2, r0
 800b924:	4b0c      	ldr	r3, [pc, #48]	; (800b958 <__multadd+0x84>)
 800b926:	480d      	ldr	r0, [pc, #52]	; (800b95c <__multadd+0x88>)
 800b928:	21b5      	movs	r1, #181	; 0xb5
 800b92a:	f000 fe2f 	bl	800c58c <__assert_func>
 800b92e:	6922      	ldr	r2, [r4, #16]
 800b930:	3202      	adds	r2, #2
 800b932:	f104 010c 	add.w	r1, r4, #12
 800b936:	0092      	lsls	r2, r2, #2
 800b938:	300c      	adds	r0, #12
 800b93a:	f7fd f83e 	bl	80089ba <memcpy>
 800b93e:	4621      	mov	r1, r4
 800b940:	4638      	mov	r0, r7
 800b942:	f7ff ffa5 	bl	800b890 <_Bfree>
 800b946:	4644      	mov	r4, r8
 800b948:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b94c:	3501      	adds	r5, #1
 800b94e:	615e      	str	r6, [r3, #20]
 800b950:	6125      	str	r5, [r4, #16]
 800b952:	4620      	mov	r0, r4
 800b954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b958:	0800ce8f 	.word	0x0800ce8f
 800b95c:	0800cf1c 	.word	0x0800cf1c

0800b960 <__s2b>:
 800b960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b964:	460c      	mov	r4, r1
 800b966:	4615      	mov	r5, r2
 800b968:	461f      	mov	r7, r3
 800b96a:	2209      	movs	r2, #9
 800b96c:	3308      	adds	r3, #8
 800b96e:	4606      	mov	r6, r0
 800b970:	fb93 f3f2 	sdiv	r3, r3, r2
 800b974:	2100      	movs	r1, #0
 800b976:	2201      	movs	r2, #1
 800b978:	429a      	cmp	r2, r3
 800b97a:	db09      	blt.n	800b990 <__s2b+0x30>
 800b97c:	4630      	mov	r0, r6
 800b97e:	f7ff ff47 	bl	800b810 <_Balloc>
 800b982:	b940      	cbnz	r0, 800b996 <__s2b+0x36>
 800b984:	4602      	mov	r2, r0
 800b986:	4b19      	ldr	r3, [pc, #100]	; (800b9ec <__s2b+0x8c>)
 800b988:	4819      	ldr	r0, [pc, #100]	; (800b9f0 <__s2b+0x90>)
 800b98a:	21ce      	movs	r1, #206	; 0xce
 800b98c:	f000 fdfe 	bl	800c58c <__assert_func>
 800b990:	0052      	lsls	r2, r2, #1
 800b992:	3101      	adds	r1, #1
 800b994:	e7f0      	b.n	800b978 <__s2b+0x18>
 800b996:	9b08      	ldr	r3, [sp, #32]
 800b998:	6143      	str	r3, [r0, #20]
 800b99a:	2d09      	cmp	r5, #9
 800b99c:	f04f 0301 	mov.w	r3, #1
 800b9a0:	6103      	str	r3, [r0, #16]
 800b9a2:	dd16      	ble.n	800b9d2 <__s2b+0x72>
 800b9a4:	f104 0909 	add.w	r9, r4, #9
 800b9a8:	46c8      	mov	r8, r9
 800b9aa:	442c      	add	r4, r5
 800b9ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b9b0:	4601      	mov	r1, r0
 800b9b2:	3b30      	subs	r3, #48	; 0x30
 800b9b4:	220a      	movs	r2, #10
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f7ff ff8c 	bl	800b8d4 <__multadd>
 800b9bc:	45a0      	cmp	r8, r4
 800b9be:	d1f5      	bne.n	800b9ac <__s2b+0x4c>
 800b9c0:	f1a5 0408 	sub.w	r4, r5, #8
 800b9c4:	444c      	add	r4, r9
 800b9c6:	1b2d      	subs	r5, r5, r4
 800b9c8:	1963      	adds	r3, r4, r5
 800b9ca:	42bb      	cmp	r3, r7
 800b9cc:	db04      	blt.n	800b9d8 <__s2b+0x78>
 800b9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d2:	340a      	adds	r4, #10
 800b9d4:	2509      	movs	r5, #9
 800b9d6:	e7f6      	b.n	800b9c6 <__s2b+0x66>
 800b9d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9dc:	4601      	mov	r1, r0
 800b9de:	3b30      	subs	r3, #48	; 0x30
 800b9e0:	220a      	movs	r2, #10
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	f7ff ff76 	bl	800b8d4 <__multadd>
 800b9e8:	e7ee      	b.n	800b9c8 <__s2b+0x68>
 800b9ea:	bf00      	nop
 800b9ec:	0800ce8f 	.word	0x0800ce8f
 800b9f0:	0800cf1c 	.word	0x0800cf1c

0800b9f4 <__hi0bits>:
 800b9f4:	0c03      	lsrs	r3, r0, #16
 800b9f6:	041b      	lsls	r3, r3, #16
 800b9f8:	b9d3      	cbnz	r3, 800ba30 <__hi0bits+0x3c>
 800b9fa:	0400      	lsls	r0, r0, #16
 800b9fc:	2310      	movs	r3, #16
 800b9fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ba02:	bf04      	itt	eq
 800ba04:	0200      	lsleq	r0, r0, #8
 800ba06:	3308      	addeq	r3, #8
 800ba08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ba0c:	bf04      	itt	eq
 800ba0e:	0100      	lsleq	r0, r0, #4
 800ba10:	3304      	addeq	r3, #4
 800ba12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ba16:	bf04      	itt	eq
 800ba18:	0080      	lsleq	r0, r0, #2
 800ba1a:	3302      	addeq	r3, #2
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	db05      	blt.n	800ba2c <__hi0bits+0x38>
 800ba20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ba24:	f103 0301 	add.w	r3, r3, #1
 800ba28:	bf08      	it	eq
 800ba2a:	2320      	moveq	r3, #32
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	4770      	bx	lr
 800ba30:	2300      	movs	r3, #0
 800ba32:	e7e4      	b.n	800b9fe <__hi0bits+0xa>

0800ba34 <__lo0bits>:
 800ba34:	6803      	ldr	r3, [r0, #0]
 800ba36:	f013 0207 	ands.w	r2, r3, #7
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	d00b      	beq.n	800ba56 <__lo0bits+0x22>
 800ba3e:	07da      	lsls	r2, r3, #31
 800ba40:	d423      	bmi.n	800ba8a <__lo0bits+0x56>
 800ba42:	0798      	lsls	r0, r3, #30
 800ba44:	bf49      	itett	mi
 800ba46:	085b      	lsrmi	r3, r3, #1
 800ba48:	089b      	lsrpl	r3, r3, #2
 800ba4a:	2001      	movmi	r0, #1
 800ba4c:	600b      	strmi	r3, [r1, #0]
 800ba4e:	bf5c      	itt	pl
 800ba50:	600b      	strpl	r3, [r1, #0]
 800ba52:	2002      	movpl	r0, #2
 800ba54:	4770      	bx	lr
 800ba56:	b298      	uxth	r0, r3
 800ba58:	b9a8      	cbnz	r0, 800ba86 <__lo0bits+0x52>
 800ba5a:	0c1b      	lsrs	r3, r3, #16
 800ba5c:	2010      	movs	r0, #16
 800ba5e:	b2da      	uxtb	r2, r3
 800ba60:	b90a      	cbnz	r2, 800ba66 <__lo0bits+0x32>
 800ba62:	3008      	adds	r0, #8
 800ba64:	0a1b      	lsrs	r3, r3, #8
 800ba66:	071a      	lsls	r2, r3, #28
 800ba68:	bf04      	itt	eq
 800ba6a:	091b      	lsreq	r3, r3, #4
 800ba6c:	3004      	addeq	r0, #4
 800ba6e:	079a      	lsls	r2, r3, #30
 800ba70:	bf04      	itt	eq
 800ba72:	089b      	lsreq	r3, r3, #2
 800ba74:	3002      	addeq	r0, #2
 800ba76:	07da      	lsls	r2, r3, #31
 800ba78:	d403      	bmi.n	800ba82 <__lo0bits+0x4e>
 800ba7a:	085b      	lsrs	r3, r3, #1
 800ba7c:	f100 0001 	add.w	r0, r0, #1
 800ba80:	d005      	beq.n	800ba8e <__lo0bits+0x5a>
 800ba82:	600b      	str	r3, [r1, #0]
 800ba84:	4770      	bx	lr
 800ba86:	4610      	mov	r0, r2
 800ba88:	e7e9      	b.n	800ba5e <__lo0bits+0x2a>
 800ba8a:	2000      	movs	r0, #0
 800ba8c:	4770      	bx	lr
 800ba8e:	2020      	movs	r0, #32
 800ba90:	4770      	bx	lr
	...

0800ba94 <__i2b>:
 800ba94:	b510      	push	{r4, lr}
 800ba96:	460c      	mov	r4, r1
 800ba98:	2101      	movs	r1, #1
 800ba9a:	f7ff feb9 	bl	800b810 <_Balloc>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	b928      	cbnz	r0, 800baae <__i2b+0x1a>
 800baa2:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <__i2b+0x24>)
 800baa4:	4805      	ldr	r0, [pc, #20]	; (800babc <__i2b+0x28>)
 800baa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800baaa:	f000 fd6f 	bl	800c58c <__assert_func>
 800baae:	2301      	movs	r3, #1
 800bab0:	6144      	str	r4, [r0, #20]
 800bab2:	6103      	str	r3, [r0, #16]
 800bab4:	bd10      	pop	{r4, pc}
 800bab6:	bf00      	nop
 800bab8:	0800ce8f 	.word	0x0800ce8f
 800babc:	0800cf1c 	.word	0x0800cf1c

0800bac0 <__multiply>:
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac4:	4691      	mov	r9, r2
 800bac6:	690a      	ldr	r2, [r1, #16]
 800bac8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bacc:	429a      	cmp	r2, r3
 800bace:	bfb8      	it	lt
 800bad0:	460b      	movlt	r3, r1
 800bad2:	460c      	mov	r4, r1
 800bad4:	bfbc      	itt	lt
 800bad6:	464c      	movlt	r4, r9
 800bad8:	4699      	movlt	r9, r3
 800bada:	6927      	ldr	r7, [r4, #16]
 800badc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bae0:	68a3      	ldr	r3, [r4, #8]
 800bae2:	6861      	ldr	r1, [r4, #4]
 800bae4:	eb07 060a 	add.w	r6, r7, sl
 800bae8:	42b3      	cmp	r3, r6
 800baea:	b085      	sub	sp, #20
 800baec:	bfb8      	it	lt
 800baee:	3101      	addlt	r1, #1
 800baf0:	f7ff fe8e 	bl	800b810 <_Balloc>
 800baf4:	b930      	cbnz	r0, 800bb04 <__multiply+0x44>
 800baf6:	4602      	mov	r2, r0
 800baf8:	4b44      	ldr	r3, [pc, #272]	; (800bc0c <__multiply+0x14c>)
 800bafa:	4845      	ldr	r0, [pc, #276]	; (800bc10 <__multiply+0x150>)
 800bafc:	f240 115d 	movw	r1, #349	; 0x15d
 800bb00:	f000 fd44 	bl	800c58c <__assert_func>
 800bb04:	f100 0514 	add.w	r5, r0, #20
 800bb08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bb0c:	462b      	mov	r3, r5
 800bb0e:	2200      	movs	r2, #0
 800bb10:	4543      	cmp	r3, r8
 800bb12:	d321      	bcc.n	800bb58 <__multiply+0x98>
 800bb14:	f104 0314 	add.w	r3, r4, #20
 800bb18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bb1c:	f109 0314 	add.w	r3, r9, #20
 800bb20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bb24:	9202      	str	r2, [sp, #8]
 800bb26:	1b3a      	subs	r2, r7, r4
 800bb28:	3a15      	subs	r2, #21
 800bb2a:	f022 0203 	bic.w	r2, r2, #3
 800bb2e:	3204      	adds	r2, #4
 800bb30:	f104 0115 	add.w	r1, r4, #21
 800bb34:	428f      	cmp	r7, r1
 800bb36:	bf38      	it	cc
 800bb38:	2204      	movcc	r2, #4
 800bb3a:	9201      	str	r2, [sp, #4]
 800bb3c:	9a02      	ldr	r2, [sp, #8]
 800bb3e:	9303      	str	r3, [sp, #12]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d80c      	bhi.n	800bb5e <__multiply+0x9e>
 800bb44:	2e00      	cmp	r6, #0
 800bb46:	dd03      	ble.n	800bb50 <__multiply+0x90>
 800bb48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d05a      	beq.n	800bc06 <__multiply+0x146>
 800bb50:	6106      	str	r6, [r0, #16]
 800bb52:	b005      	add	sp, #20
 800bb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb58:	f843 2b04 	str.w	r2, [r3], #4
 800bb5c:	e7d8      	b.n	800bb10 <__multiply+0x50>
 800bb5e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bb62:	f1ba 0f00 	cmp.w	sl, #0
 800bb66:	d024      	beq.n	800bbb2 <__multiply+0xf2>
 800bb68:	f104 0e14 	add.w	lr, r4, #20
 800bb6c:	46a9      	mov	r9, r5
 800bb6e:	f04f 0c00 	mov.w	ip, #0
 800bb72:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bb76:	f8d9 1000 	ldr.w	r1, [r9]
 800bb7a:	fa1f fb82 	uxth.w	fp, r2
 800bb7e:	b289      	uxth	r1, r1
 800bb80:	fb0a 110b 	mla	r1, sl, fp, r1
 800bb84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bb88:	f8d9 2000 	ldr.w	r2, [r9]
 800bb8c:	4461      	add	r1, ip
 800bb8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bb92:	fb0a c20b 	mla	r2, sl, fp, ip
 800bb96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bb9a:	b289      	uxth	r1, r1
 800bb9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bba0:	4577      	cmp	r7, lr
 800bba2:	f849 1b04 	str.w	r1, [r9], #4
 800bba6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bbaa:	d8e2      	bhi.n	800bb72 <__multiply+0xb2>
 800bbac:	9a01      	ldr	r2, [sp, #4]
 800bbae:	f845 c002 	str.w	ip, [r5, r2]
 800bbb2:	9a03      	ldr	r2, [sp, #12]
 800bbb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bbb8:	3304      	adds	r3, #4
 800bbba:	f1b9 0f00 	cmp.w	r9, #0
 800bbbe:	d020      	beq.n	800bc02 <__multiply+0x142>
 800bbc0:	6829      	ldr	r1, [r5, #0]
 800bbc2:	f104 0c14 	add.w	ip, r4, #20
 800bbc6:	46ae      	mov	lr, r5
 800bbc8:	f04f 0a00 	mov.w	sl, #0
 800bbcc:	f8bc b000 	ldrh.w	fp, [ip]
 800bbd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bbd4:	fb09 220b 	mla	r2, r9, fp, r2
 800bbd8:	4492      	add	sl, r2
 800bbda:	b289      	uxth	r1, r1
 800bbdc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bbe0:	f84e 1b04 	str.w	r1, [lr], #4
 800bbe4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bbe8:	f8be 1000 	ldrh.w	r1, [lr]
 800bbec:	0c12      	lsrs	r2, r2, #16
 800bbee:	fb09 1102 	mla	r1, r9, r2, r1
 800bbf2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bbf6:	4567      	cmp	r7, ip
 800bbf8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bbfc:	d8e6      	bhi.n	800bbcc <__multiply+0x10c>
 800bbfe:	9a01      	ldr	r2, [sp, #4]
 800bc00:	50a9      	str	r1, [r5, r2]
 800bc02:	3504      	adds	r5, #4
 800bc04:	e79a      	b.n	800bb3c <__multiply+0x7c>
 800bc06:	3e01      	subs	r6, #1
 800bc08:	e79c      	b.n	800bb44 <__multiply+0x84>
 800bc0a:	bf00      	nop
 800bc0c:	0800ce8f 	.word	0x0800ce8f
 800bc10:	0800cf1c 	.word	0x0800cf1c

0800bc14 <__pow5mult>:
 800bc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc18:	4615      	mov	r5, r2
 800bc1a:	f012 0203 	ands.w	r2, r2, #3
 800bc1e:	4606      	mov	r6, r0
 800bc20:	460f      	mov	r7, r1
 800bc22:	d007      	beq.n	800bc34 <__pow5mult+0x20>
 800bc24:	4c25      	ldr	r4, [pc, #148]	; (800bcbc <__pow5mult+0xa8>)
 800bc26:	3a01      	subs	r2, #1
 800bc28:	2300      	movs	r3, #0
 800bc2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc2e:	f7ff fe51 	bl	800b8d4 <__multadd>
 800bc32:	4607      	mov	r7, r0
 800bc34:	10ad      	asrs	r5, r5, #2
 800bc36:	d03d      	beq.n	800bcb4 <__pow5mult+0xa0>
 800bc38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc3a:	b97c      	cbnz	r4, 800bc5c <__pow5mult+0x48>
 800bc3c:	2010      	movs	r0, #16
 800bc3e:	f7ff fdc1 	bl	800b7c4 <malloc>
 800bc42:	4602      	mov	r2, r0
 800bc44:	6270      	str	r0, [r6, #36]	; 0x24
 800bc46:	b928      	cbnz	r0, 800bc54 <__pow5mult+0x40>
 800bc48:	4b1d      	ldr	r3, [pc, #116]	; (800bcc0 <__pow5mult+0xac>)
 800bc4a:	481e      	ldr	r0, [pc, #120]	; (800bcc4 <__pow5mult+0xb0>)
 800bc4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bc50:	f000 fc9c 	bl	800c58c <__assert_func>
 800bc54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc58:	6004      	str	r4, [r0, #0]
 800bc5a:	60c4      	str	r4, [r0, #12]
 800bc5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc64:	b94c      	cbnz	r4, 800bc7a <__pow5mult+0x66>
 800bc66:	f240 2171 	movw	r1, #625	; 0x271
 800bc6a:	4630      	mov	r0, r6
 800bc6c:	f7ff ff12 	bl	800ba94 <__i2b>
 800bc70:	2300      	movs	r3, #0
 800bc72:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc76:	4604      	mov	r4, r0
 800bc78:	6003      	str	r3, [r0, #0]
 800bc7a:	f04f 0900 	mov.w	r9, #0
 800bc7e:	07eb      	lsls	r3, r5, #31
 800bc80:	d50a      	bpl.n	800bc98 <__pow5mult+0x84>
 800bc82:	4639      	mov	r1, r7
 800bc84:	4622      	mov	r2, r4
 800bc86:	4630      	mov	r0, r6
 800bc88:	f7ff ff1a 	bl	800bac0 <__multiply>
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	4680      	mov	r8, r0
 800bc90:	4630      	mov	r0, r6
 800bc92:	f7ff fdfd 	bl	800b890 <_Bfree>
 800bc96:	4647      	mov	r7, r8
 800bc98:	106d      	asrs	r5, r5, #1
 800bc9a:	d00b      	beq.n	800bcb4 <__pow5mult+0xa0>
 800bc9c:	6820      	ldr	r0, [r4, #0]
 800bc9e:	b938      	cbnz	r0, 800bcb0 <__pow5mult+0x9c>
 800bca0:	4622      	mov	r2, r4
 800bca2:	4621      	mov	r1, r4
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7ff ff0b 	bl	800bac0 <__multiply>
 800bcaa:	6020      	str	r0, [r4, #0]
 800bcac:	f8c0 9000 	str.w	r9, [r0]
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	e7e4      	b.n	800bc7e <__pow5mult+0x6a>
 800bcb4:	4638      	mov	r0, r7
 800bcb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcba:	bf00      	nop
 800bcbc:	0800d068 	.word	0x0800d068
 800bcc0:	0800ce1d 	.word	0x0800ce1d
 800bcc4:	0800cf1c 	.word	0x0800cf1c

0800bcc8 <__lshift>:
 800bcc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bccc:	460c      	mov	r4, r1
 800bcce:	6849      	ldr	r1, [r1, #4]
 800bcd0:	6923      	ldr	r3, [r4, #16]
 800bcd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bcd6:	68a3      	ldr	r3, [r4, #8]
 800bcd8:	4607      	mov	r7, r0
 800bcda:	4691      	mov	r9, r2
 800bcdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bce0:	f108 0601 	add.w	r6, r8, #1
 800bce4:	42b3      	cmp	r3, r6
 800bce6:	db0b      	blt.n	800bd00 <__lshift+0x38>
 800bce8:	4638      	mov	r0, r7
 800bcea:	f7ff fd91 	bl	800b810 <_Balloc>
 800bcee:	4605      	mov	r5, r0
 800bcf0:	b948      	cbnz	r0, 800bd06 <__lshift+0x3e>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	4b2a      	ldr	r3, [pc, #168]	; (800bda0 <__lshift+0xd8>)
 800bcf6:	482b      	ldr	r0, [pc, #172]	; (800bda4 <__lshift+0xdc>)
 800bcf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bcfc:	f000 fc46 	bl	800c58c <__assert_func>
 800bd00:	3101      	adds	r1, #1
 800bd02:	005b      	lsls	r3, r3, #1
 800bd04:	e7ee      	b.n	800bce4 <__lshift+0x1c>
 800bd06:	2300      	movs	r3, #0
 800bd08:	f100 0114 	add.w	r1, r0, #20
 800bd0c:	f100 0210 	add.w	r2, r0, #16
 800bd10:	4618      	mov	r0, r3
 800bd12:	4553      	cmp	r3, sl
 800bd14:	db37      	blt.n	800bd86 <__lshift+0xbe>
 800bd16:	6920      	ldr	r0, [r4, #16]
 800bd18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bd1c:	f104 0314 	add.w	r3, r4, #20
 800bd20:	f019 091f 	ands.w	r9, r9, #31
 800bd24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bd2c:	d02f      	beq.n	800bd8e <__lshift+0xc6>
 800bd2e:	f1c9 0e20 	rsb	lr, r9, #32
 800bd32:	468a      	mov	sl, r1
 800bd34:	f04f 0c00 	mov.w	ip, #0
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	fa02 f209 	lsl.w	r2, r2, r9
 800bd3e:	ea42 020c 	orr.w	r2, r2, ip
 800bd42:	f84a 2b04 	str.w	r2, [sl], #4
 800bd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd4a:	4298      	cmp	r0, r3
 800bd4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bd50:	d8f2      	bhi.n	800bd38 <__lshift+0x70>
 800bd52:	1b03      	subs	r3, r0, r4
 800bd54:	3b15      	subs	r3, #21
 800bd56:	f023 0303 	bic.w	r3, r3, #3
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	f104 0215 	add.w	r2, r4, #21
 800bd60:	4290      	cmp	r0, r2
 800bd62:	bf38      	it	cc
 800bd64:	2304      	movcc	r3, #4
 800bd66:	f841 c003 	str.w	ip, [r1, r3]
 800bd6a:	f1bc 0f00 	cmp.w	ip, #0
 800bd6e:	d001      	beq.n	800bd74 <__lshift+0xac>
 800bd70:	f108 0602 	add.w	r6, r8, #2
 800bd74:	3e01      	subs	r6, #1
 800bd76:	4638      	mov	r0, r7
 800bd78:	612e      	str	r6, [r5, #16]
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	f7ff fd88 	bl	800b890 <_Bfree>
 800bd80:	4628      	mov	r0, r5
 800bd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd86:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	e7c1      	b.n	800bd12 <__lshift+0x4a>
 800bd8e:	3904      	subs	r1, #4
 800bd90:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd94:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd98:	4298      	cmp	r0, r3
 800bd9a:	d8f9      	bhi.n	800bd90 <__lshift+0xc8>
 800bd9c:	e7ea      	b.n	800bd74 <__lshift+0xac>
 800bd9e:	bf00      	nop
 800bda0:	0800ce8f 	.word	0x0800ce8f
 800bda4:	0800cf1c 	.word	0x0800cf1c

0800bda8 <__mcmp>:
 800bda8:	b530      	push	{r4, r5, lr}
 800bdaa:	6902      	ldr	r2, [r0, #16]
 800bdac:	690c      	ldr	r4, [r1, #16]
 800bdae:	1b12      	subs	r2, r2, r4
 800bdb0:	d10e      	bne.n	800bdd0 <__mcmp+0x28>
 800bdb2:	f100 0314 	add.w	r3, r0, #20
 800bdb6:	3114      	adds	r1, #20
 800bdb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bdbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bdc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bdc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bdc8:	42a5      	cmp	r5, r4
 800bdca:	d003      	beq.n	800bdd4 <__mcmp+0x2c>
 800bdcc:	d305      	bcc.n	800bdda <__mcmp+0x32>
 800bdce:	2201      	movs	r2, #1
 800bdd0:	4610      	mov	r0, r2
 800bdd2:	bd30      	pop	{r4, r5, pc}
 800bdd4:	4283      	cmp	r3, r0
 800bdd6:	d3f3      	bcc.n	800bdc0 <__mcmp+0x18>
 800bdd8:	e7fa      	b.n	800bdd0 <__mcmp+0x28>
 800bdda:	f04f 32ff 	mov.w	r2, #4294967295
 800bdde:	e7f7      	b.n	800bdd0 <__mcmp+0x28>

0800bde0 <__mdiff>:
 800bde0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	460c      	mov	r4, r1
 800bde6:	4606      	mov	r6, r0
 800bde8:	4611      	mov	r1, r2
 800bdea:	4620      	mov	r0, r4
 800bdec:	4690      	mov	r8, r2
 800bdee:	f7ff ffdb 	bl	800bda8 <__mcmp>
 800bdf2:	1e05      	subs	r5, r0, #0
 800bdf4:	d110      	bne.n	800be18 <__mdiff+0x38>
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f7ff fd09 	bl	800b810 <_Balloc>
 800bdfe:	b930      	cbnz	r0, 800be0e <__mdiff+0x2e>
 800be00:	4b3a      	ldr	r3, [pc, #232]	; (800beec <__mdiff+0x10c>)
 800be02:	4602      	mov	r2, r0
 800be04:	f240 2132 	movw	r1, #562	; 0x232
 800be08:	4839      	ldr	r0, [pc, #228]	; (800bef0 <__mdiff+0x110>)
 800be0a:	f000 fbbf 	bl	800c58c <__assert_func>
 800be0e:	2301      	movs	r3, #1
 800be10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800be14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be18:	bfa4      	itt	ge
 800be1a:	4643      	movge	r3, r8
 800be1c:	46a0      	movge	r8, r4
 800be1e:	4630      	mov	r0, r6
 800be20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800be24:	bfa6      	itte	ge
 800be26:	461c      	movge	r4, r3
 800be28:	2500      	movge	r5, #0
 800be2a:	2501      	movlt	r5, #1
 800be2c:	f7ff fcf0 	bl	800b810 <_Balloc>
 800be30:	b920      	cbnz	r0, 800be3c <__mdiff+0x5c>
 800be32:	4b2e      	ldr	r3, [pc, #184]	; (800beec <__mdiff+0x10c>)
 800be34:	4602      	mov	r2, r0
 800be36:	f44f 7110 	mov.w	r1, #576	; 0x240
 800be3a:	e7e5      	b.n	800be08 <__mdiff+0x28>
 800be3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800be40:	6926      	ldr	r6, [r4, #16]
 800be42:	60c5      	str	r5, [r0, #12]
 800be44:	f104 0914 	add.w	r9, r4, #20
 800be48:	f108 0514 	add.w	r5, r8, #20
 800be4c:	f100 0e14 	add.w	lr, r0, #20
 800be50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800be54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800be58:	f108 0210 	add.w	r2, r8, #16
 800be5c:	46f2      	mov	sl, lr
 800be5e:	2100      	movs	r1, #0
 800be60:	f859 3b04 	ldr.w	r3, [r9], #4
 800be64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800be68:	fa1f f883 	uxth.w	r8, r3
 800be6c:	fa11 f18b 	uxtah	r1, r1, fp
 800be70:	0c1b      	lsrs	r3, r3, #16
 800be72:	eba1 0808 	sub.w	r8, r1, r8
 800be76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800be7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800be7e:	fa1f f888 	uxth.w	r8, r8
 800be82:	1419      	asrs	r1, r3, #16
 800be84:	454e      	cmp	r6, r9
 800be86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800be8a:	f84a 3b04 	str.w	r3, [sl], #4
 800be8e:	d8e7      	bhi.n	800be60 <__mdiff+0x80>
 800be90:	1b33      	subs	r3, r6, r4
 800be92:	3b15      	subs	r3, #21
 800be94:	f023 0303 	bic.w	r3, r3, #3
 800be98:	3304      	adds	r3, #4
 800be9a:	3415      	adds	r4, #21
 800be9c:	42a6      	cmp	r6, r4
 800be9e:	bf38      	it	cc
 800bea0:	2304      	movcc	r3, #4
 800bea2:	441d      	add	r5, r3
 800bea4:	4473      	add	r3, lr
 800bea6:	469e      	mov	lr, r3
 800bea8:	462e      	mov	r6, r5
 800beaa:	4566      	cmp	r6, ip
 800beac:	d30e      	bcc.n	800becc <__mdiff+0xec>
 800beae:	f10c 0203 	add.w	r2, ip, #3
 800beb2:	1b52      	subs	r2, r2, r5
 800beb4:	f022 0203 	bic.w	r2, r2, #3
 800beb8:	3d03      	subs	r5, #3
 800beba:	45ac      	cmp	ip, r5
 800bebc:	bf38      	it	cc
 800bebe:	2200      	movcc	r2, #0
 800bec0:	441a      	add	r2, r3
 800bec2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bec6:	b17b      	cbz	r3, 800bee8 <__mdiff+0x108>
 800bec8:	6107      	str	r7, [r0, #16]
 800beca:	e7a3      	b.n	800be14 <__mdiff+0x34>
 800becc:	f856 8b04 	ldr.w	r8, [r6], #4
 800bed0:	fa11 f288 	uxtah	r2, r1, r8
 800bed4:	1414      	asrs	r4, r2, #16
 800bed6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800beda:	b292      	uxth	r2, r2
 800bedc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bee0:	f84e 2b04 	str.w	r2, [lr], #4
 800bee4:	1421      	asrs	r1, r4, #16
 800bee6:	e7e0      	b.n	800beaa <__mdiff+0xca>
 800bee8:	3f01      	subs	r7, #1
 800beea:	e7ea      	b.n	800bec2 <__mdiff+0xe2>
 800beec:	0800ce8f 	.word	0x0800ce8f
 800bef0:	0800cf1c 	.word	0x0800cf1c

0800bef4 <__ulp>:
 800bef4:	b082      	sub	sp, #8
 800bef6:	ed8d 0b00 	vstr	d0, [sp]
 800befa:	9b01      	ldr	r3, [sp, #4]
 800befc:	4912      	ldr	r1, [pc, #72]	; (800bf48 <__ulp+0x54>)
 800befe:	4019      	ands	r1, r3
 800bf00:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bf04:	2900      	cmp	r1, #0
 800bf06:	dd05      	ble.n	800bf14 <__ulp+0x20>
 800bf08:	2200      	movs	r2, #0
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	ec43 2b10 	vmov	d0, r2, r3
 800bf10:	b002      	add	sp, #8
 800bf12:	4770      	bx	lr
 800bf14:	4249      	negs	r1, r1
 800bf16:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bf1a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bf1e:	f04f 0200 	mov.w	r2, #0
 800bf22:	f04f 0300 	mov.w	r3, #0
 800bf26:	da04      	bge.n	800bf32 <__ulp+0x3e>
 800bf28:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bf2c:	fa41 f300 	asr.w	r3, r1, r0
 800bf30:	e7ec      	b.n	800bf0c <__ulp+0x18>
 800bf32:	f1a0 0114 	sub.w	r1, r0, #20
 800bf36:	291e      	cmp	r1, #30
 800bf38:	bfda      	itte	le
 800bf3a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bf3e:	fa20 f101 	lsrle.w	r1, r0, r1
 800bf42:	2101      	movgt	r1, #1
 800bf44:	460a      	mov	r2, r1
 800bf46:	e7e1      	b.n	800bf0c <__ulp+0x18>
 800bf48:	7ff00000 	.word	0x7ff00000

0800bf4c <__b2d>:
 800bf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4e:	6905      	ldr	r5, [r0, #16]
 800bf50:	f100 0714 	add.w	r7, r0, #20
 800bf54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bf58:	1f2e      	subs	r6, r5, #4
 800bf5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f7ff fd48 	bl	800b9f4 <__hi0bits>
 800bf64:	f1c0 0320 	rsb	r3, r0, #32
 800bf68:	280a      	cmp	r0, #10
 800bf6a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bfe8 <__b2d+0x9c>
 800bf6e:	600b      	str	r3, [r1, #0]
 800bf70:	dc14      	bgt.n	800bf9c <__b2d+0x50>
 800bf72:	f1c0 0e0b 	rsb	lr, r0, #11
 800bf76:	fa24 f10e 	lsr.w	r1, r4, lr
 800bf7a:	42b7      	cmp	r7, r6
 800bf7c:	ea41 030c 	orr.w	r3, r1, ip
 800bf80:	bf34      	ite	cc
 800bf82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bf86:	2100      	movcs	r1, #0
 800bf88:	3015      	adds	r0, #21
 800bf8a:	fa04 f000 	lsl.w	r0, r4, r0
 800bf8e:	fa21 f10e 	lsr.w	r1, r1, lr
 800bf92:	ea40 0201 	orr.w	r2, r0, r1
 800bf96:	ec43 2b10 	vmov	d0, r2, r3
 800bf9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf9c:	42b7      	cmp	r7, r6
 800bf9e:	bf3a      	itte	cc
 800bfa0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bfa4:	f1a5 0608 	subcc.w	r6, r5, #8
 800bfa8:	2100      	movcs	r1, #0
 800bfaa:	380b      	subs	r0, #11
 800bfac:	d017      	beq.n	800bfde <__b2d+0x92>
 800bfae:	f1c0 0c20 	rsb	ip, r0, #32
 800bfb2:	fa04 f500 	lsl.w	r5, r4, r0
 800bfb6:	42be      	cmp	r6, r7
 800bfb8:	fa21 f40c 	lsr.w	r4, r1, ip
 800bfbc:	ea45 0504 	orr.w	r5, r5, r4
 800bfc0:	bf8c      	ite	hi
 800bfc2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bfc6:	2400      	movls	r4, #0
 800bfc8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bfcc:	fa01 f000 	lsl.w	r0, r1, r0
 800bfd0:	fa24 f40c 	lsr.w	r4, r4, ip
 800bfd4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bfd8:	ea40 0204 	orr.w	r2, r0, r4
 800bfdc:	e7db      	b.n	800bf96 <__b2d+0x4a>
 800bfde:	ea44 030c 	orr.w	r3, r4, ip
 800bfe2:	460a      	mov	r2, r1
 800bfe4:	e7d7      	b.n	800bf96 <__b2d+0x4a>
 800bfe6:	bf00      	nop
 800bfe8:	3ff00000 	.word	0x3ff00000

0800bfec <__d2b>:
 800bfec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bff0:	4689      	mov	r9, r1
 800bff2:	2101      	movs	r1, #1
 800bff4:	ec57 6b10 	vmov	r6, r7, d0
 800bff8:	4690      	mov	r8, r2
 800bffa:	f7ff fc09 	bl	800b810 <_Balloc>
 800bffe:	4604      	mov	r4, r0
 800c000:	b930      	cbnz	r0, 800c010 <__d2b+0x24>
 800c002:	4602      	mov	r2, r0
 800c004:	4b25      	ldr	r3, [pc, #148]	; (800c09c <__d2b+0xb0>)
 800c006:	4826      	ldr	r0, [pc, #152]	; (800c0a0 <__d2b+0xb4>)
 800c008:	f240 310a 	movw	r1, #778	; 0x30a
 800c00c:	f000 fabe 	bl	800c58c <__assert_func>
 800c010:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c014:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c018:	bb35      	cbnz	r5, 800c068 <__d2b+0x7c>
 800c01a:	2e00      	cmp	r6, #0
 800c01c:	9301      	str	r3, [sp, #4]
 800c01e:	d028      	beq.n	800c072 <__d2b+0x86>
 800c020:	4668      	mov	r0, sp
 800c022:	9600      	str	r6, [sp, #0]
 800c024:	f7ff fd06 	bl	800ba34 <__lo0bits>
 800c028:	9900      	ldr	r1, [sp, #0]
 800c02a:	b300      	cbz	r0, 800c06e <__d2b+0x82>
 800c02c:	9a01      	ldr	r2, [sp, #4]
 800c02e:	f1c0 0320 	rsb	r3, r0, #32
 800c032:	fa02 f303 	lsl.w	r3, r2, r3
 800c036:	430b      	orrs	r3, r1
 800c038:	40c2      	lsrs	r2, r0
 800c03a:	6163      	str	r3, [r4, #20]
 800c03c:	9201      	str	r2, [sp, #4]
 800c03e:	9b01      	ldr	r3, [sp, #4]
 800c040:	61a3      	str	r3, [r4, #24]
 800c042:	2b00      	cmp	r3, #0
 800c044:	bf14      	ite	ne
 800c046:	2202      	movne	r2, #2
 800c048:	2201      	moveq	r2, #1
 800c04a:	6122      	str	r2, [r4, #16]
 800c04c:	b1d5      	cbz	r5, 800c084 <__d2b+0x98>
 800c04e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c052:	4405      	add	r5, r0
 800c054:	f8c9 5000 	str.w	r5, [r9]
 800c058:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c05c:	f8c8 0000 	str.w	r0, [r8]
 800c060:	4620      	mov	r0, r4
 800c062:	b003      	add	sp, #12
 800c064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c06c:	e7d5      	b.n	800c01a <__d2b+0x2e>
 800c06e:	6161      	str	r1, [r4, #20]
 800c070:	e7e5      	b.n	800c03e <__d2b+0x52>
 800c072:	a801      	add	r0, sp, #4
 800c074:	f7ff fcde 	bl	800ba34 <__lo0bits>
 800c078:	9b01      	ldr	r3, [sp, #4]
 800c07a:	6163      	str	r3, [r4, #20]
 800c07c:	2201      	movs	r2, #1
 800c07e:	6122      	str	r2, [r4, #16]
 800c080:	3020      	adds	r0, #32
 800c082:	e7e3      	b.n	800c04c <__d2b+0x60>
 800c084:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c088:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c08c:	f8c9 0000 	str.w	r0, [r9]
 800c090:	6918      	ldr	r0, [r3, #16]
 800c092:	f7ff fcaf 	bl	800b9f4 <__hi0bits>
 800c096:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c09a:	e7df      	b.n	800c05c <__d2b+0x70>
 800c09c:	0800ce8f 	.word	0x0800ce8f
 800c0a0:	0800cf1c 	.word	0x0800cf1c

0800c0a4 <__ratio>:
 800c0a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a8:	4688      	mov	r8, r1
 800c0aa:	4669      	mov	r1, sp
 800c0ac:	4681      	mov	r9, r0
 800c0ae:	f7ff ff4d 	bl	800bf4c <__b2d>
 800c0b2:	a901      	add	r1, sp, #4
 800c0b4:	4640      	mov	r0, r8
 800c0b6:	ec55 4b10 	vmov	r4, r5, d0
 800c0ba:	f7ff ff47 	bl	800bf4c <__b2d>
 800c0be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c0c6:	eba3 0c02 	sub.w	ip, r3, r2
 800c0ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c0ce:	1a9b      	subs	r3, r3, r2
 800c0d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c0d4:	ec51 0b10 	vmov	r0, r1, d0
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	bfd6      	itet	le
 800c0dc:	460a      	movle	r2, r1
 800c0de:	462a      	movgt	r2, r5
 800c0e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c0e4:	468b      	mov	fp, r1
 800c0e6:	462f      	mov	r7, r5
 800c0e8:	bfd4      	ite	le
 800c0ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c0ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	ee10 2a10 	vmov	r2, s0
 800c0f8:	465b      	mov	r3, fp
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	f7f4 fba6 	bl	800084c <__aeabi_ddiv>
 800c100:	ec41 0b10 	vmov	d0, r0, r1
 800c104:	b003      	add	sp, #12
 800c106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c10a <__copybits>:
 800c10a:	3901      	subs	r1, #1
 800c10c:	b570      	push	{r4, r5, r6, lr}
 800c10e:	1149      	asrs	r1, r1, #5
 800c110:	6914      	ldr	r4, [r2, #16]
 800c112:	3101      	adds	r1, #1
 800c114:	f102 0314 	add.w	r3, r2, #20
 800c118:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c11c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c120:	1f05      	subs	r5, r0, #4
 800c122:	42a3      	cmp	r3, r4
 800c124:	d30c      	bcc.n	800c140 <__copybits+0x36>
 800c126:	1aa3      	subs	r3, r4, r2
 800c128:	3b11      	subs	r3, #17
 800c12a:	f023 0303 	bic.w	r3, r3, #3
 800c12e:	3211      	adds	r2, #17
 800c130:	42a2      	cmp	r2, r4
 800c132:	bf88      	it	hi
 800c134:	2300      	movhi	r3, #0
 800c136:	4418      	add	r0, r3
 800c138:	2300      	movs	r3, #0
 800c13a:	4288      	cmp	r0, r1
 800c13c:	d305      	bcc.n	800c14a <__copybits+0x40>
 800c13e:	bd70      	pop	{r4, r5, r6, pc}
 800c140:	f853 6b04 	ldr.w	r6, [r3], #4
 800c144:	f845 6f04 	str.w	r6, [r5, #4]!
 800c148:	e7eb      	b.n	800c122 <__copybits+0x18>
 800c14a:	f840 3b04 	str.w	r3, [r0], #4
 800c14e:	e7f4      	b.n	800c13a <__copybits+0x30>

0800c150 <__any_on>:
 800c150:	f100 0214 	add.w	r2, r0, #20
 800c154:	6900      	ldr	r0, [r0, #16]
 800c156:	114b      	asrs	r3, r1, #5
 800c158:	4298      	cmp	r0, r3
 800c15a:	b510      	push	{r4, lr}
 800c15c:	db11      	blt.n	800c182 <__any_on+0x32>
 800c15e:	dd0a      	ble.n	800c176 <__any_on+0x26>
 800c160:	f011 011f 	ands.w	r1, r1, #31
 800c164:	d007      	beq.n	800c176 <__any_on+0x26>
 800c166:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c16a:	fa24 f001 	lsr.w	r0, r4, r1
 800c16e:	fa00 f101 	lsl.w	r1, r0, r1
 800c172:	428c      	cmp	r4, r1
 800c174:	d10b      	bne.n	800c18e <__any_on+0x3e>
 800c176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d803      	bhi.n	800c186 <__any_on+0x36>
 800c17e:	2000      	movs	r0, #0
 800c180:	bd10      	pop	{r4, pc}
 800c182:	4603      	mov	r3, r0
 800c184:	e7f7      	b.n	800c176 <__any_on+0x26>
 800c186:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c18a:	2900      	cmp	r1, #0
 800c18c:	d0f5      	beq.n	800c17a <__any_on+0x2a>
 800c18e:	2001      	movs	r0, #1
 800c190:	e7f6      	b.n	800c180 <__any_on+0x30>

0800c192 <_calloc_r>:
 800c192:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c194:	fba1 2402 	umull	r2, r4, r1, r2
 800c198:	b94c      	cbnz	r4, 800c1ae <_calloc_r+0x1c>
 800c19a:	4611      	mov	r1, r2
 800c19c:	9201      	str	r2, [sp, #4]
 800c19e:	f7fc fc43 	bl	8008a28 <_malloc_r>
 800c1a2:	9a01      	ldr	r2, [sp, #4]
 800c1a4:	4605      	mov	r5, r0
 800c1a6:	b930      	cbnz	r0, 800c1b6 <_calloc_r+0x24>
 800c1a8:	4628      	mov	r0, r5
 800c1aa:	b003      	add	sp, #12
 800c1ac:	bd30      	pop	{r4, r5, pc}
 800c1ae:	220c      	movs	r2, #12
 800c1b0:	6002      	str	r2, [r0, #0]
 800c1b2:	2500      	movs	r5, #0
 800c1b4:	e7f8      	b.n	800c1a8 <_calloc_r+0x16>
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	f7fc fc0d 	bl	80089d6 <memset>
 800c1bc:	e7f4      	b.n	800c1a8 <_calloc_r+0x16>
	...

0800c1c0 <_free_r>:
 800c1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1c2:	2900      	cmp	r1, #0
 800c1c4:	d044      	beq.n	800c250 <_free_r+0x90>
 800c1c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1ca:	9001      	str	r0, [sp, #4]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f1a1 0404 	sub.w	r4, r1, #4
 800c1d2:	bfb8      	it	lt
 800c1d4:	18e4      	addlt	r4, r4, r3
 800c1d6:	f7ff fb0f 	bl	800b7f8 <__malloc_lock>
 800c1da:	4a1e      	ldr	r2, [pc, #120]	; (800c254 <_free_r+0x94>)
 800c1dc:	9801      	ldr	r0, [sp, #4]
 800c1de:	6813      	ldr	r3, [r2, #0]
 800c1e0:	b933      	cbnz	r3, 800c1f0 <_free_r+0x30>
 800c1e2:	6063      	str	r3, [r4, #4]
 800c1e4:	6014      	str	r4, [r2, #0]
 800c1e6:	b003      	add	sp, #12
 800c1e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1ec:	f7ff bb0a 	b.w	800b804 <__malloc_unlock>
 800c1f0:	42a3      	cmp	r3, r4
 800c1f2:	d908      	bls.n	800c206 <_free_r+0x46>
 800c1f4:	6825      	ldr	r5, [r4, #0]
 800c1f6:	1961      	adds	r1, r4, r5
 800c1f8:	428b      	cmp	r3, r1
 800c1fa:	bf01      	itttt	eq
 800c1fc:	6819      	ldreq	r1, [r3, #0]
 800c1fe:	685b      	ldreq	r3, [r3, #4]
 800c200:	1949      	addeq	r1, r1, r5
 800c202:	6021      	streq	r1, [r4, #0]
 800c204:	e7ed      	b.n	800c1e2 <_free_r+0x22>
 800c206:	461a      	mov	r2, r3
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	b10b      	cbz	r3, 800c210 <_free_r+0x50>
 800c20c:	42a3      	cmp	r3, r4
 800c20e:	d9fa      	bls.n	800c206 <_free_r+0x46>
 800c210:	6811      	ldr	r1, [r2, #0]
 800c212:	1855      	adds	r5, r2, r1
 800c214:	42a5      	cmp	r5, r4
 800c216:	d10b      	bne.n	800c230 <_free_r+0x70>
 800c218:	6824      	ldr	r4, [r4, #0]
 800c21a:	4421      	add	r1, r4
 800c21c:	1854      	adds	r4, r2, r1
 800c21e:	42a3      	cmp	r3, r4
 800c220:	6011      	str	r1, [r2, #0]
 800c222:	d1e0      	bne.n	800c1e6 <_free_r+0x26>
 800c224:	681c      	ldr	r4, [r3, #0]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	6053      	str	r3, [r2, #4]
 800c22a:	4421      	add	r1, r4
 800c22c:	6011      	str	r1, [r2, #0]
 800c22e:	e7da      	b.n	800c1e6 <_free_r+0x26>
 800c230:	d902      	bls.n	800c238 <_free_r+0x78>
 800c232:	230c      	movs	r3, #12
 800c234:	6003      	str	r3, [r0, #0]
 800c236:	e7d6      	b.n	800c1e6 <_free_r+0x26>
 800c238:	6825      	ldr	r5, [r4, #0]
 800c23a:	1961      	adds	r1, r4, r5
 800c23c:	428b      	cmp	r3, r1
 800c23e:	bf04      	itt	eq
 800c240:	6819      	ldreq	r1, [r3, #0]
 800c242:	685b      	ldreq	r3, [r3, #4]
 800c244:	6063      	str	r3, [r4, #4]
 800c246:	bf04      	itt	eq
 800c248:	1949      	addeq	r1, r1, r5
 800c24a:	6021      	streq	r1, [r4, #0]
 800c24c:	6054      	str	r4, [r2, #4]
 800c24e:	e7ca      	b.n	800c1e6 <_free_r+0x26>
 800c250:	b003      	add	sp, #12
 800c252:	bd30      	pop	{r4, r5, pc}
 800c254:	20004578 	.word	0x20004578

0800c258 <__ssputs_r>:
 800c258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c25c:	688e      	ldr	r6, [r1, #8]
 800c25e:	429e      	cmp	r6, r3
 800c260:	4682      	mov	sl, r0
 800c262:	460c      	mov	r4, r1
 800c264:	4690      	mov	r8, r2
 800c266:	461f      	mov	r7, r3
 800c268:	d838      	bhi.n	800c2dc <__ssputs_r+0x84>
 800c26a:	898a      	ldrh	r2, [r1, #12]
 800c26c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c270:	d032      	beq.n	800c2d8 <__ssputs_r+0x80>
 800c272:	6825      	ldr	r5, [r4, #0]
 800c274:	6909      	ldr	r1, [r1, #16]
 800c276:	eba5 0901 	sub.w	r9, r5, r1
 800c27a:	6965      	ldr	r5, [r4, #20]
 800c27c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c280:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c284:	3301      	adds	r3, #1
 800c286:	444b      	add	r3, r9
 800c288:	106d      	asrs	r5, r5, #1
 800c28a:	429d      	cmp	r5, r3
 800c28c:	bf38      	it	cc
 800c28e:	461d      	movcc	r5, r3
 800c290:	0553      	lsls	r3, r2, #21
 800c292:	d531      	bpl.n	800c2f8 <__ssputs_r+0xa0>
 800c294:	4629      	mov	r1, r5
 800c296:	f7fc fbc7 	bl	8008a28 <_malloc_r>
 800c29a:	4606      	mov	r6, r0
 800c29c:	b950      	cbnz	r0, 800c2b4 <__ssputs_r+0x5c>
 800c29e:	230c      	movs	r3, #12
 800c2a0:	f8ca 3000 	str.w	r3, [sl]
 800c2a4:	89a3      	ldrh	r3, [r4, #12]
 800c2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2aa:	81a3      	strh	r3, [r4, #12]
 800c2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2b4:	6921      	ldr	r1, [r4, #16]
 800c2b6:	464a      	mov	r2, r9
 800c2b8:	f7fc fb7f 	bl	80089ba <memcpy>
 800c2bc:	89a3      	ldrh	r3, [r4, #12]
 800c2be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2c6:	81a3      	strh	r3, [r4, #12]
 800c2c8:	6126      	str	r6, [r4, #16]
 800c2ca:	6165      	str	r5, [r4, #20]
 800c2cc:	444e      	add	r6, r9
 800c2ce:	eba5 0509 	sub.w	r5, r5, r9
 800c2d2:	6026      	str	r6, [r4, #0]
 800c2d4:	60a5      	str	r5, [r4, #8]
 800c2d6:	463e      	mov	r6, r7
 800c2d8:	42be      	cmp	r6, r7
 800c2da:	d900      	bls.n	800c2de <__ssputs_r+0x86>
 800c2dc:	463e      	mov	r6, r7
 800c2de:	6820      	ldr	r0, [r4, #0]
 800c2e0:	4632      	mov	r2, r6
 800c2e2:	4641      	mov	r1, r8
 800c2e4:	f000 f982 	bl	800c5ec <memmove>
 800c2e8:	68a3      	ldr	r3, [r4, #8]
 800c2ea:	1b9b      	subs	r3, r3, r6
 800c2ec:	60a3      	str	r3, [r4, #8]
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	4433      	add	r3, r6
 800c2f2:	6023      	str	r3, [r4, #0]
 800c2f4:	2000      	movs	r0, #0
 800c2f6:	e7db      	b.n	800c2b0 <__ssputs_r+0x58>
 800c2f8:	462a      	mov	r2, r5
 800c2fa:	f000 f991 	bl	800c620 <_realloc_r>
 800c2fe:	4606      	mov	r6, r0
 800c300:	2800      	cmp	r0, #0
 800c302:	d1e1      	bne.n	800c2c8 <__ssputs_r+0x70>
 800c304:	6921      	ldr	r1, [r4, #16]
 800c306:	4650      	mov	r0, sl
 800c308:	f7ff ff5a 	bl	800c1c0 <_free_r>
 800c30c:	e7c7      	b.n	800c29e <__ssputs_r+0x46>
	...

0800c310 <_svfiprintf_r>:
 800c310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c314:	4698      	mov	r8, r3
 800c316:	898b      	ldrh	r3, [r1, #12]
 800c318:	061b      	lsls	r3, r3, #24
 800c31a:	b09d      	sub	sp, #116	; 0x74
 800c31c:	4607      	mov	r7, r0
 800c31e:	460d      	mov	r5, r1
 800c320:	4614      	mov	r4, r2
 800c322:	d50e      	bpl.n	800c342 <_svfiprintf_r+0x32>
 800c324:	690b      	ldr	r3, [r1, #16]
 800c326:	b963      	cbnz	r3, 800c342 <_svfiprintf_r+0x32>
 800c328:	2140      	movs	r1, #64	; 0x40
 800c32a:	f7fc fb7d 	bl	8008a28 <_malloc_r>
 800c32e:	6028      	str	r0, [r5, #0]
 800c330:	6128      	str	r0, [r5, #16]
 800c332:	b920      	cbnz	r0, 800c33e <_svfiprintf_r+0x2e>
 800c334:	230c      	movs	r3, #12
 800c336:	603b      	str	r3, [r7, #0]
 800c338:	f04f 30ff 	mov.w	r0, #4294967295
 800c33c:	e0d1      	b.n	800c4e2 <_svfiprintf_r+0x1d2>
 800c33e:	2340      	movs	r3, #64	; 0x40
 800c340:	616b      	str	r3, [r5, #20]
 800c342:	2300      	movs	r3, #0
 800c344:	9309      	str	r3, [sp, #36]	; 0x24
 800c346:	2320      	movs	r3, #32
 800c348:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c34c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c350:	2330      	movs	r3, #48	; 0x30
 800c352:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c4fc <_svfiprintf_r+0x1ec>
 800c356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c35a:	f04f 0901 	mov.w	r9, #1
 800c35e:	4623      	mov	r3, r4
 800c360:	469a      	mov	sl, r3
 800c362:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c366:	b10a      	cbz	r2, 800c36c <_svfiprintf_r+0x5c>
 800c368:	2a25      	cmp	r2, #37	; 0x25
 800c36a:	d1f9      	bne.n	800c360 <_svfiprintf_r+0x50>
 800c36c:	ebba 0b04 	subs.w	fp, sl, r4
 800c370:	d00b      	beq.n	800c38a <_svfiprintf_r+0x7a>
 800c372:	465b      	mov	r3, fp
 800c374:	4622      	mov	r2, r4
 800c376:	4629      	mov	r1, r5
 800c378:	4638      	mov	r0, r7
 800c37a:	f7ff ff6d 	bl	800c258 <__ssputs_r>
 800c37e:	3001      	adds	r0, #1
 800c380:	f000 80aa 	beq.w	800c4d8 <_svfiprintf_r+0x1c8>
 800c384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c386:	445a      	add	r2, fp
 800c388:	9209      	str	r2, [sp, #36]	; 0x24
 800c38a:	f89a 3000 	ldrb.w	r3, [sl]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f000 80a2 	beq.w	800c4d8 <_svfiprintf_r+0x1c8>
 800c394:	2300      	movs	r3, #0
 800c396:	f04f 32ff 	mov.w	r2, #4294967295
 800c39a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c39e:	f10a 0a01 	add.w	sl, sl, #1
 800c3a2:	9304      	str	r3, [sp, #16]
 800c3a4:	9307      	str	r3, [sp, #28]
 800c3a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c3ac:	4654      	mov	r4, sl
 800c3ae:	2205      	movs	r2, #5
 800c3b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3b4:	4851      	ldr	r0, [pc, #324]	; (800c4fc <_svfiprintf_r+0x1ec>)
 800c3b6:	f7f3 ff13 	bl	80001e0 <memchr>
 800c3ba:	9a04      	ldr	r2, [sp, #16]
 800c3bc:	b9d8      	cbnz	r0, 800c3f6 <_svfiprintf_r+0xe6>
 800c3be:	06d0      	lsls	r0, r2, #27
 800c3c0:	bf44      	itt	mi
 800c3c2:	2320      	movmi	r3, #32
 800c3c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3c8:	0711      	lsls	r1, r2, #28
 800c3ca:	bf44      	itt	mi
 800c3cc:	232b      	movmi	r3, #43	; 0x2b
 800c3ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c3d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3d8:	d015      	beq.n	800c406 <_svfiprintf_r+0xf6>
 800c3da:	9a07      	ldr	r2, [sp, #28]
 800c3dc:	4654      	mov	r4, sl
 800c3de:	2000      	movs	r0, #0
 800c3e0:	f04f 0c0a 	mov.w	ip, #10
 800c3e4:	4621      	mov	r1, r4
 800c3e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3ea:	3b30      	subs	r3, #48	; 0x30
 800c3ec:	2b09      	cmp	r3, #9
 800c3ee:	d94e      	bls.n	800c48e <_svfiprintf_r+0x17e>
 800c3f0:	b1b0      	cbz	r0, 800c420 <_svfiprintf_r+0x110>
 800c3f2:	9207      	str	r2, [sp, #28]
 800c3f4:	e014      	b.n	800c420 <_svfiprintf_r+0x110>
 800c3f6:	eba0 0308 	sub.w	r3, r0, r8
 800c3fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c3fe:	4313      	orrs	r3, r2
 800c400:	9304      	str	r3, [sp, #16]
 800c402:	46a2      	mov	sl, r4
 800c404:	e7d2      	b.n	800c3ac <_svfiprintf_r+0x9c>
 800c406:	9b03      	ldr	r3, [sp, #12]
 800c408:	1d19      	adds	r1, r3, #4
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	9103      	str	r1, [sp, #12]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	bfbb      	ittet	lt
 800c412:	425b      	neglt	r3, r3
 800c414:	f042 0202 	orrlt.w	r2, r2, #2
 800c418:	9307      	strge	r3, [sp, #28]
 800c41a:	9307      	strlt	r3, [sp, #28]
 800c41c:	bfb8      	it	lt
 800c41e:	9204      	strlt	r2, [sp, #16]
 800c420:	7823      	ldrb	r3, [r4, #0]
 800c422:	2b2e      	cmp	r3, #46	; 0x2e
 800c424:	d10c      	bne.n	800c440 <_svfiprintf_r+0x130>
 800c426:	7863      	ldrb	r3, [r4, #1]
 800c428:	2b2a      	cmp	r3, #42	; 0x2a
 800c42a:	d135      	bne.n	800c498 <_svfiprintf_r+0x188>
 800c42c:	9b03      	ldr	r3, [sp, #12]
 800c42e:	1d1a      	adds	r2, r3, #4
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	9203      	str	r2, [sp, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	bfb8      	it	lt
 800c438:	f04f 33ff 	movlt.w	r3, #4294967295
 800c43c:	3402      	adds	r4, #2
 800c43e:	9305      	str	r3, [sp, #20]
 800c440:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c50c <_svfiprintf_r+0x1fc>
 800c444:	7821      	ldrb	r1, [r4, #0]
 800c446:	2203      	movs	r2, #3
 800c448:	4650      	mov	r0, sl
 800c44a:	f7f3 fec9 	bl	80001e0 <memchr>
 800c44e:	b140      	cbz	r0, 800c462 <_svfiprintf_r+0x152>
 800c450:	2340      	movs	r3, #64	; 0x40
 800c452:	eba0 000a 	sub.w	r0, r0, sl
 800c456:	fa03 f000 	lsl.w	r0, r3, r0
 800c45a:	9b04      	ldr	r3, [sp, #16]
 800c45c:	4303      	orrs	r3, r0
 800c45e:	3401      	adds	r4, #1
 800c460:	9304      	str	r3, [sp, #16]
 800c462:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c466:	4826      	ldr	r0, [pc, #152]	; (800c500 <_svfiprintf_r+0x1f0>)
 800c468:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c46c:	2206      	movs	r2, #6
 800c46e:	f7f3 feb7 	bl	80001e0 <memchr>
 800c472:	2800      	cmp	r0, #0
 800c474:	d038      	beq.n	800c4e8 <_svfiprintf_r+0x1d8>
 800c476:	4b23      	ldr	r3, [pc, #140]	; (800c504 <_svfiprintf_r+0x1f4>)
 800c478:	bb1b      	cbnz	r3, 800c4c2 <_svfiprintf_r+0x1b2>
 800c47a:	9b03      	ldr	r3, [sp, #12]
 800c47c:	3307      	adds	r3, #7
 800c47e:	f023 0307 	bic.w	r3, r3, #7
 800c482:	3308      	adds	r3, #8
 800c484:	9303      	str	r3, [sp, #12]
 800c486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c488:	4433      	add	r3, r6
 800c48a:	9309      	str	r3, [sp, #36]	; 0x24
 800c48c:	e767      	b.n	800c35e <_svfiprintf_r+0x4e>
 800c48e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c492:	460c      	mov	r4, r1
 800c494:	2001      	movs	r0, #1
 800c496:	e7a5      	b.n	800c3e4 <_svfiprintf_r+0xd4>
 800c498:	2300      	movs	r3, #0
 800c49a:	3401      	adds	r4, #1
 800c49c:	9305      	str	r3, [sp, #20]
 800c49e:	4619      	mov	r1, r3
 800c4a0:	f04f 0c0a 	mov.w	ip, #10
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4aa:	3a30      	subs	r2, #48	; 0x30
 800c4ac:	2a09      	cmp	r2, #9
 800c4ae:	d903      	bls.n	800c4b8 <_svfiprintf_r+0x1a8>
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d0c5      	beq.n	800c440 <_svfiprintf_r+0x130>
 800c4b4:	9105      	str	r1, [sp, #20]
 800c4b6:	e7c3      	b.n	800c440 <_svfiprintf_r+0x130>
 800c4b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4bc:	4604      	mov	r4, r0
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e7f0      	b.n	800c4a4 <_svfiprintf_r+0x194>
 800c4c2:	ab03      	add	r3, sp, #12
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	462a      	mov	r2, r5
 800c4c8:	4b0f      	ldr	r3, [pc, #60]	; (800c508 <_svfiprintf_r+0x1f8>)
 800c4ca:	a904      	add	r1, sp, #16
 800c4cc:	4638      	mov	r0, r7
 800c4ce:	f7fc fbbf 	bl	8008c50 <_printf_float>
 800c4d2:	1c42      	adds	r2, r0, #1
 800c4d4:	4606      	mov	r6, r0
 800c4d6:	d1d6      	bne.n	800c486 <_svfiprintf_r+0x176>
 800c4d8:	89ab      	ldrh	r3, [r5, #12]
 800c4da:	065b      	lsls	r3, r3, #25
 800c4dc:	f53f af2c 	bmi.w	800c338 <_svfiprintf_r+0x28>
 800c4e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4e2:	b01d      	add	sp, #116	; 0x74
 800c4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e8:	ab03      	add	r3, sp, #12
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	462a      	mov	r2, r5
 800c4ee:	4b06      	ldr	r3, [pc, #24]	; (800c508 <_svfiprintf_r+0x1f8>)
 800c4f0:	a904      	add	r1, sp, #16
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	f7fc fe50 	bl	8009198 <_printf_i>
 800c4f8:	e7eb      	b.n	800c4d2 <_svfiprintf_r+0x1c2>
 800c4fa:	bf00      	nop
 800c4fc:	0800d074 	.word	0x0800d074
 800c500:	0800d07e 	.word	0x0800d07e
 800c504:	08008c51 	.word	0x08008c51
 800c508:	0800c259 	.word	0x0800c259
 800c50c:	0800d07a 	.word	0x0800d07a

0800c510 <_read_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d07      	ldr	r5, [pc, #28]	; (800c530 <_read_r+0x20>)
 800c514:	4604      	mov	r4, r0
 800c516:	4608      	mov	r0, r1
 800c518:	4611      	mov	r1, r2
 800c51a:	2200      	movs	r2, #0
 800c51c:	602a      	str	r2, [r5, #0]
 800c51e:	461a      	mov	r2, r3
 800c520:	f7f5 fade 	bl	8001ae0 <_read>
 800c524:	1c43      	adds	r3, r0, #1
 800c526:	d102      	bne.n	800c52e <_read_r+0x1e>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	b103      	cbz	r3, 800c52e <_read_r+0x1e>
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	bd38      	pop	{r3, r4, r5, pc}
 800c530:	20004580 	.word	0x20004580
 800c534:	00000000 	.word	0x00000000

0800c538 <nan>:
 800c538:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c540 <nan+0x8>
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	00000000 	.word	0x00000000
 800c544:	7ff80000 	.word	0x7ff80000

0800c548 <strncmp>:
 800c548:	b510      	push	{r4, lr}
 800c54a:	b17a      	cbz	r2, 800c56c <strncmp+0x24>
 800c54c:	4603      	mov	r3, r0
 800c54e:	3901      	subs	r1, #1
 800c550:	1884      	adds	r4, r0, r2
 800c552:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c556:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c55a:	4290      	cmp	r0, r2
 800c55c:	d101      	bne.n	800c562 <strncmp+0x1a>
 800c55e:	42a3      	cmp	r3, r4
 800c560:	d101      	bne.n	800c566 <strncmp+0x1e>
 800c562:	1a80      	subs	r0, r0, r2
 800c564:	bd10      	pop	{r4, pc}
 800c566:	2800      	cmp	r0, #0
 800c568:	d1f3      	bne.n	800c552 <strncmp+0xa>
 800c56a:	e7fa      	b.n	800c562 <strncmp+0x1a>
 800c56c:	4610      	mov	r0, r2
 800c56e:	e7f9      	b.n	800c564 <strncmp+0x1c>

0800c570 <__ascii_wctomb>:
 800c570:	b149      	cbz	r1, 800c586 <__ascii_wctomb+0x16>
 800c572:	2aff      	cmp	r2, #255	; 0xff
 800c574:	bf85      	ittet	hi
 800c576:	238a      	movhi	r3, #138	; 0x8a
 800c578:	6003      	strhi	r3, [r0, #0]
 800c57a:	700a      	strbls	r2, [r1, #0]
 800c57c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c580:	bf98      	it	ls
 800c582:	2001      	movls	r0, #1
 800c584:	4770      	bx	lr
 800c586:	4608      	mov	r0, r1
 800c588:	4770      	bx	lr
	...

0800c58c <__assert_func>:
 800c58c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c58e:	4614      	mov	r4, r2
 800c590:	461a      	mov	r2, r3
 800c592:	4b09      	ldr	r3, [pc, #36]	; (800c5b8 <__assert_func+0x2c>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4605      	mov	r5, r0
 800c598:	68d8      	ldr	r0, [r3, #12]
 800c59a:	b14c      	cbz	r4, 800c5b0 <__assert_func+0x24>
 800c59c:	4b07      	ldr	r3, [pc, #28]	; (800c5bc <__assert_func+0x30>)
 800c59e:	9100      	str	r1, [sp, #0]
 800c5a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5a4:	4906      	ldr	r1, [pc, #24]	; (800c5c0 <__assert_func+0x34>)
 800c5a6:	462b      	mov	r3, r5
 800c5a8:	f000 f80e 	bl	800c5c8 <fiprintf>
 800c5ac:	f000 fa80 	bl	800cab0 <abort>
 800c5b0:	4b04      	ldr	r3, [pc, #16]	; (800c5c4 <__assert_func+0x38>)
 800c5b2:	461c      	mov	r4, r3
 800c5b4:	e7f3      	b.n	800c59e <__assert_func+0x12>
 800c5b6:	bf00      	nop
 800c5b8:	20000010 	.word	0x20000010
 800c5bc:	0800d085 	.word	0x0800d085
 800c5c0:	0800d092 	.word	0x0800d092
 800c5c4:	0800d0c0 	.word	0x0800d0c0

0800c5c8 <fiprintf>:
 800c5c8:	b40e      	push	{r1, r2, r3}
 800c5ca:	b503      	push	{r0, r1, lr}
 800c5cc:	4601      	mov	r1, r0
 800c5ce:	ab03      	add	r3, sp, #12
 800c5d0:	4805      	ldr	r0, [pc, #20]	; (800c5e8 <fiprintf+0x20>)
 800c5d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5d6:	6800      	ldr	r0, [r0, #0]
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	f000 f879 	bl	800c6d0 <_vfiprintf_r>
 800c5de:	b002      	add	sp, #8
 800c5e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5e4:	b003      	add	sp, #12
 800c5e6:	4770      	bx	lr
 800c5e8:	20000010 	.word	0x20000010

0800c5ec <memmove>:
 800c5ec:	4288      	cmp	r0, r1
 800c5ee:	b510      	push	{r4, lr}
 800c5f0:	eb01 0402 	add.w	r4, r1, r2
 800c5f4:	d902      	bls.n	800c5fc <memmove+0x10>
 800c5f6:	4284      	cmp	r4, r0
 800c5f8:	4623      	mov	r3, r4
 800c5fa:	d807      	bhi.n	800c60c <memmove+0x20>
 800c5fc:	1e43      	subs	r3, r0, #1
 800c5fe:	42a1      	cmp	r1, r4
 800c600:	d008      	beq.n	800c614 <memmove+0x28>
 800c602:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c60a:	e7f8      	b.n	800c5fe <memmove+0x12>
 800c60c:	4402      	add	r2, r0
 800c60e:	4601      	mov	r1, r0
 800c610:	428a      	cmp	r2, r1
 800c612:	d100      	bne.n	800c616 <memmove+0x2a>
 800c614:	bd10      	pop	{r4, pc}
 800c616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c61a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c61e:	e7f7      	b.n	800c610 <memmove+0x24>

0800c620 <_realloc_r>:
 800c620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c624:	4680      	mov	r8, r0
 800c626:	4614      	mov	r4, r2
 800c628:	460e      	mov	r6, r1
 800c62a:	b921      	cbnz	r1, 800c636 <_realloc_r+0x16>
 800c62c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c630:	4611      	mov	r1, r2
 800c632:	f7fc b9f9 	b.w	8008a28 <_malloc_r>
 800c636:	b92a      	cbnz	r2, 800c644 <_realloc_r+0x24>
 800c638:	f7ff fdc2 	bl	800c1c0 <_free_r>
 800c63c:	4625      	mov	r5, r4
 800c63e:	4628      	mov	r0, r5
 800c640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c644:	f000 faa0 	bl	800cb88 <_malloc_usable_size_r>
 800c648:	4284      	cmp	r4, r0
 800c64a:	4607      	mov	r7, r0
 800c64c:	d802      	bhi.n	800c654 <_realloc_r+0x34>
 800c64e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c652:	d812      	bhi.n	800c67a <_realloc_r+0x5a>
 800c654:	4621      	mov	r1, r4
 800c656:	4640      	mov	r0, r8
 800c658:	f7fc f9e6 	bl	8008a28 <_malloc_r>
 800c65c:	4605      	mov	r5, r0
 800c65e:	2800      	cmp	r0, #0
 800c660:	d0ed      	beq.n	800c63e <_realloc_r+0x1e>
 800c662:	42bc      	cmp	r4, r7
 800c664:	4622      	mov	r2, r4
 800c666:	4631      	mov	r1, r6
 800c668:	bf28      	it	cs
 800c66a:	463a      	movcs	r2, r7
 800c66c:	f7fc f9a5 	bl	80089ba <memcpy>
 800c670:	4631      	mov	r1, r6
 800c672:	4640      	mov	r0, r8
 800c674:	f7ff fda4 	bl	800c1c0 <_free_r>
 800c678:	e7e1      	b.n	800c63e <_realloc_r+0x1e>
 800c67a:	4635      	mov	r5, r6
 800c67c:	e7df      	b.n	800c63e <_realloc_r+0x1e>

0800c67e <__sfputc_r>:
 800c67e:	6893      	ldr	r3, [r2, #8]
 800c680:	3b01      	subs	r3, #1
 800c682:	2b00      	cmp	r3, #0
 800c684:	b410      	push	{r4}
 800c686:	6093      	str	r3, [r2, #8]
 800c688:	da08      	bge.n	800c69c <__sfputc_r+0x1e>
 800c68a:	6994      	ldr	r4, [r2, #24]
 800c68c:	42a3      	cmp	r3, r4
 800c68e:	db01      	blt.n	800c694 <__sfputc_r+0x16>
 800c690:	290a      	cmp	r1, #10
 800c692:	d103      	bne.n	800c69c <__sfputc_r+0x1e>
 800c694:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c698:	f000 b94a 	b.w	800c930 <__swbuf_r>
 800c69c:	6813      	ldr	r3, [r2, #0]
 800c69e:	1c58      	adds	r0, r3, #1
 800c6a0:	6010      	str	r0, [r2, #0]
 800c6a2:	7019      	strb	r1, [r3, #0]
 800c6a4:	4608      	mov	r0, r1
 800c6a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <__sfputs_r>:
 800c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	460f      	mov	r7, r1
 800c6b2:	4614      	mov	r4, r2
 800c6b4:	18d5      	adds	r5, r2, r3
 800c6b6:	42ac      	cmp	r4, r5
 800c6b8:	d101      	bne.n	800c6be <__sfputs_r+0x12>
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	e007      	b.n	800c6ce <__sfputs_r+0x22>
 800c6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6c2:	463a      	mov	r2, r7
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	f7ff ffda 	bl	800c67e <__sfputc_r>
 800c6ca:	1c43      	adds	r3, r0, #1
 800c6cc:	d1f3      	bne.n	800c6b6 <__sfputs_r+0xa>
 800c6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6d0 <_vfiprintf_r>:
 800c6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	460d      	mov	r5, r1
 800c6d6:	b09d      	sub	sp, #116	; 0x74
 800c6d8:	4614      	mov	r4, r2
 800c6da:	4698      	mov	r8, r3
 800c6dc:	4606      	mov	r6, r0
 800c6de:	b118      	cbz	r0, 800c6e8 <_vfiprintf_r+0x18>
 800c6e0:	6983      	ldr	r3, [r0, #24]
 800c6e2:	b90b      	cbnz	r3, 800c6e8 <_vfiprintf_r+0x18>
 800c6e4:	f7fc f8a4 	bl	8008830 <__sinit>
 800c6e8:	4b89      	ldr	r3, [pc, #548]	; (800c910 <_vfiprintf_r+0x240>)
 800c6ea:	429d      	cmp	r5, r3
 800c6ec:	d11b      	bne.n	800c726 <_vfiprintf_r+0x56>
 800c6ee:	6875      	ldr	r5, [r6, #4]
 800c6f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6f2:	07d9      	lsls	r1, r3, #31
 800c6f4:	d405      	bmi.n	800c702 <_vfiprintf_r+0x32>
 800c6f6:	89ab      	ldrh	r3, [r5, #12]
 800c6f8:	059a      	lsls	r2, r3, #22
 800c6fa:	d402      	bmi.n	800c702 <_vfiprintf_r+0x32>
 800c6fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6fe:	f7fc f95a 	bl	80089b6 <__retarget_lock_acquire_recursive>
 800c702:	89ab      	ldrh	r3, [r5, #12]
 800c704:	071b      	lsls	r3, r3, #28
 800c706:	d501      	bpl.n	800c70c <_vfiprintf_r+0x3c>
 800c708:	692b      	ldr	r3, [r5, #16]
 800c70a:	b9eb      	cbnz	r3, 800c748 <_vfiprintf_r+0x78>
 800c70c:	4629      	mov	r1, r5
 800c70e:	4630      	mov	r0, r6
 800c710:	f000 f960 	bl	800c9d4 <__swsetup_r>
 800c714:	b1c0      	cbz	r0, 800c748 <_vfiprintf_r+0x78>
 800c716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c718:	07dc      	lsls	r4, r3, #31
 800c71a:	d50e      	bpl.n	800c73a <_vfiprintf_r+0x6a>
 800c71c:	f04f 30ff 	mov.w	r0, #4294967295
 800c720:	b01d      	add	sp, #116	; 0x74
 800c722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c726:	4b7b      	ldr	r3, [pc, #492]	; (800c914 <_vfiprintf_r+0x244>)
 800c728:	429d      	cmp	r5, r3
 800c72a:	d101      	bne.n	800c730 <_vfiprintf_r+0x60>
 800c72c:	68b5      	ldr	r5, [r6, #8]
 800c72e:	e7df      	b.n	800c6f0 <_vfiprintf_r+0x20>
 800c730:	4b79      	ldr	r3, [pc, #484]	; (800c918 <_vfiprintf_r+0x248>)
 800c732:	429d      	cmp	r5, r3
 800c734:	bf08      	it	eq
 800c736:	68f5      	ldreq	r5, [r6, #12]
 800c738:	e7da      	b.n	800c6f0 <_vfiprintf_r+0x20>
 800c73a:	89ab      	ldrh	r3, [r5, #12]
 800c73c:	0598      	lsls	r0, r3, #22
 800c73e:	d4ed      	bmi.n	800c71c <_vfiprintf_r+0x4c>
 800c740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c742:	f7fc f939 	bl	80089b8 <__retarget_lock_release_recursive>
 800c746:	e7e9      	b.n	800c71c <_vfiprintf_r+0x4c>
 800c748:	2300      	movs	r3, #0
 800c74a:	9309      	str	r3, [sp, #36]	; 0x24
 800c74c:	2320      	movs	r3, #32
 800c74e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c752:	f8cd 800c 	str.w	r8, [sp, #12]
 800c756:	2330      	movs	r3, #48	; 0x30
 800c758:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c91c <_vfiprintf_r+0x24c>
 800c75c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c760:	f04f 0901 	mov.w	r9, #1
 800c764:	4623      	mov	r3, r4
 800c766:	469a      	mov	sl, r3
 800c768:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c76c:	b10a      	cbz	r2, 800c772 <_vfiprintf_r+0xa2>
 800c76e:	2a25      	cmp	r2, #37	; 0x25
 800c770:	d1f9      	bne.n	800c766 <_vfiprintf_r+0x96>
 800c772:	ebba 0b04 	subs.w	fp, sl, r4
 800c776:	d00b      	beq.n	800c790 <_vfiprintf_r+0xc0>
 800c778:	465b      	mov	r3, fp
 800c77a:	4622      	mov	r2, r4
 800c77c:	4629      	mov	r1, r5
 800c77e:	4630      	mov	r0, r6
 800c780:	f7ff ff94 	bl	800c6ac <__sfputs_r>
 800c784:	3001      	adds	r0, #1
 800c786:	f000 80aa 	beq.w	800c8de <_vfiprintf_r+0x20e>
 800c78a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c78c:	445a      	add	r2, fp
 800c78e:	9209      	str	r2, [sp, #36]	; 0x24
 800c790:	f89a 3000 	ldrb.w	r3, [sl]
 800c794:	2b00      	cmp	r3, #0
 800c796:	f000 80a2 	beq.w	800c8de <_vfiprintf_r+0x20e>
 800c79a:	2300      	movs	r3, #0
 800c79c:	f04f 32ff 	mov.w	r2, #4294967295
 800c7a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7a4:	f10a 0a01 	add.w	sl, sl, #1
 800c7a8:	9304      	str	r3, [sp, #16]
 800c7aa:	9307      	str	r3, [sp, #28]
 800c7ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7b0:	931a      	str	r3, [sp, #104]	; 0x68
 800c7b2:	4654      	mov	r4, sl
 800c7b4:	2205      	movs	r2, #5
 800c7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7ba:	4858      	ldr	r0, [pc, #352]	; (800c91c <_vfiprintf_r+0x24c>)
 800c7bc:	f7f3 fd10 	bl	80001e0 <memchr>
 800c7c0:	9a04      	ldr	r2, [sp, #16]
 800c7c2:	b9d8      	cbnz	r0, 800c7fc <_vfiprintf_r+0x12c>
 800c7c4:	06d1      	lsls	r1, r2, #27
 800c7c6:	bf44      	itt	mi
 800c7c8:	2320      	movmi	r3, #32
 800c7ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ce:	0713      	lsls	r3, r2, #28
 800c7d0:	bf44      	itt	mi
 800c7d2:	232b      	movmi	r3, #43	; 0x2b
 800c7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c7dc:	2b2a      	cmp	r3, #42	; 0x2a
 800c7de:	d015      	beq.n	800c80c <_vfiprintf_r+0x13c>
 800c7e0:	9a07      	ldr	r2, [sp, #28]
 800c7e2:	4654      	mov	r4, sl
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	f04f 0c0a 	mov.w	ip, #10
 800c7ea:	4621      	mov	r1, r4
 800c7ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7f0:	3b30      	subs	r3, #48	; 0x30
 800c7f2:	2b09      	cmp	r3, #9
 800c7f4:	d94e      	bls.n	800c894 <_vfiprintf_r+0x1c4>
 800c7f6:	b1b0      	cbz	r0, 800c826 <_vfiprintf_r+0x156>
 800c7f8:	9207      	str	r2, [sp, #28]
 800c7fa:	e014      	b.n	800c826 <_vfiprintf_r+0x156>
 800c7fc:	eba0 0308 	sub.w	r3, r0, r8
 800c800:	fa09 f303 	lsl.w	r3, r9, r3
 800c804:	4313      	orrs	r3, r2
 800c806:	9304      	str	r3, [sp, #16]
 800c808:	46a2      	mov	sl, r4
 800c80a:	e7d2      	b.n	800c7b2 <_vfiprintf_r+0xe2>
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	1d19      	adds	r1, r3, #4
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	9103      	str	r1, [sp, #12]
 800c814:	2b00      	cmp	r3, #0
 800c816:	bfbb      	ittet	lt
 800c818:	425b      	neglt	r3, r3
 800c81a:	f042 0202 	orrlt.w	r2, r2, #2
 800c81e:	9307      	strge	r3, [sp, #28]
 800c820:	9307      	strlt	r3, [sp, #28]
 800c822:	bfb8      	it	lt
 800c824:	9204      	strlt	r2, [sp, #16]
 800c826:	7823      	ldrb	r3, [r4, #0]
 800c828:	2b2e      	cmp	r3, #46	; 0x2e
 800c82a:	d10c      	bne.n	800c846 <_vfiprintf_r+0x176>
 800c82c:	7863      	ldrb	r3, [r4, #1]
 800c82e:	2b2a      	cmp	r3, #42	; 0x2a
 800c830:	d135      	bne.n	800c89e <_vfiprintf_r+0x1ce>
 800c832:	9b03      	ldr	r3, [sp, #12]
 800c834:	1d1a      	adds	r2, r3, #4
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	9203      	str	r2, [sp, #12]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	bfb8      	it	lt
 800c83e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c842:	3402      	adds	r4, #2
 800c844:	9305      	str	r3, [sp, #20]
 800c846:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c92c <_vfiprintf_r+0x25c>
 800c84a:	7821      	ldrb	r1, [r4, #0]
 800c84c:	2203      	movs	r2, #3
 800c84e:	4650      	mov	r0, sl
 800c850:	f7f3 fcc6 	bl	80001e0 <memchr>
 800c854:	b140      	cbz	r0, 800c868 <_vfiprintf_r+0x198>
 800c856:	2340      	movs	r3, #64	; 0x40
 800c858:	eba0 000a 	sub.w	r0, r0, sl
 800c85c:	fa03 f000 	lsl.w	r0, r3, r0
 800c860:	9b04      	ldr	r3, [sp, #16]
 800c862:	4303      	orrs	r3, r0
 800c864:	3401      	adds	r4, #1
 800c866:	9304      	str	r3, [sp, #16]
 800c868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c86c:	482c      	ldr	r0, [pc, #176]	; (800c920 <_vfiprintf_r+0x250>)
 800c86e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c872:	2206      	movs	r2, #6
 800c874:	f7f3 fcb4 	bl	80001e0 <memchr>
 800c878:	2800      	cmp	r0, #0
 800c87a:	d03f      	beq.n	800c8fc <_vfiprintf_r+0x22c>
 800c87c:	4b29      	ldr	r3, [pc, #164]	; (800c924 <_vfiprintf_r+0x254>)
 800c87e:	bb1b      	cbnz	r3, 800c8c8 <_vfiprintf_r+0x1f8>
 800c880:	9b03      	ldr	r3, [sp, #12]
 800c882:	3307      	adds	r3, #7
 800c884:	f023 0307 	bic.w	r3, r3, #7
 800c888:	3308      	adds	r3, #8
 800c88a:	9303      	str	r3, [sp, #12]
 800c88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c88e:	443b      	add	r3, r7
 800c890:	9309      	str	r3, [sp, #36]	; 0x24
 800c892:	e767      	b.n	800c764 <_vfiprintf_r+0x94>
 800c894:	fb0c 3202 	mla	r2, ip, r2, r3
 800c898:	460c      	mov	r4, r1
 800c89a:	2001      	movs	r0, #1
 800c89c:	e7a5      	b.n	800c7ea <_vfiprintf_r+0x11a>
 800c89e:	2300      	movs	r3, #0
 800c8a0:	3401      	adds	r4, #1
 800c8a2:	9305      	str	r3, [sp, #20]
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	f04f 0c0a 	mov.w	ip, #10
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8b0:	3a30      	subs	r2, #48	; 0x30
 800c8b2:	2a09      	cmp	r2, #9
 800c8b4:	d903      	bls.n	800c8be <_vfiprintf_r+0x1ee>
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d0c5      	beq.n	800c846 <_vfiprintf_r+0x176>
 800c8ba:	9105      	str	r1, [sp, #20]
 800c8bc:	e7c3      	b.n	800c846 <_vfiprintf_r+0x176>
 800c8be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8c2:	4604      	mov	r4, r0
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e7f0      	b.n	800c8aa <_vfiprintf_r+0x1da>
 800c8c8:	ab03      	add	r3, sp, #12
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	462a      	mov	r2, r5
 800c8ce:	4b16      	ldr	r3, [pc, #88]	; (800c928 <_vfiprintf_r+0x258>)
 800c8d0:	a904      	add	r1, sp, #16
 800c8d2:	4630      	mov	r0, r6
 800c8d4:	f7fc f9bc 	bl	8008c50 <_printf_float>
 800c8d8:	4607      	mov	r7, r0
 800c8da:	1c78      	adds	r0, r7, #1
 800c8dc:	d1d6      	bne.n	800c88c <_vfiprintf_r+0x1bc>
 800c8de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8e0:	07d9      	lsls	r1, r3, #31
 800c8e2:	d405      	bmi.n	800c8f0 <_vfiprintf_r+0x220>
 800c8e4:	89ab      	ldrh	r3, [r5, #12]
 800c8e6:	059a      	lsls	r2, r3, #22
 800c8e8:	d402      	bmi.n	800c8f0 <_vfiprintf_r+0x220>
 800c8ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8ec:	f7fc f864 	bl	80089b8 <__retarget_lock_release_recursive>
 800c8f0:	89ab      	ldrh	r3, [r5, #12]
 800c8f2:	065b      	lsls	r3, r3, #25
 800c8f4:	f53f af12 	bmi.w	800c71c <_vfiprintf_r+0x4c>
 800c8f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8fa:	e711      	b.n	800c720 <_vfiprintf_r+0x50>
 800c8fc:	ab03      	add	r3, sp, #12
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	462a      	mov	r2, r5
 800c902:	4b09      	ldr	r3, [pc, #36]	; (800c928 <_vfiprintf_r+0x258>)
 800c904:	a904      	add	r1, sp, #16
 800c906:	4630      	mov	r0, r6
 800c908:	f7fc fc46 	bl	8009198 <_printf_i>
 800c90c:	e7e4      	b.n	800c8d8 <_vfiprintf_r+0x208>
 800c90e:	bf00      	nop
 800c910:	0800cd48 	.word	0x0800cd48
 800c914:	0800cd68 	.word	0x0800cd68
 800c918:	0800cd28 	.word	0x0800cd28
 800c91c:	0800d074 	.word	0x0800d074
 800c920:	0800d07e 	.word	0x0800d07e
 800c924:	08008c51 	.word	0x08008c51
 800c928:	0800c6ad 	.word	0x0800c6ad
 800c92c:	0800d07a 	.word	0x0800d07a

0800c930 <__swbuf_r>:
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	460e      	mov	r6, r1
 800c934:	4614      	mov	r4, r2
 800c936:	4605      	mov	r5, r0
 800c938:	b118      	cbz	r0, 800c942 <__swbuf_r+0x12>
 800c93a:	6983      	ldr	r3, [r0, #24]
 800c93c:	b90b      	cbnz	r3, 800c942 <__swbuf_r+0x12>
 800c93e:	f7fb ff77 	bl	8008830 <__sinit>
 800c942:	4b21      	ldr	r3, [pc, #132]	; (800c9c8 <__swbuf_r+0x98>)
 800c944:	429c      	cmp	r4, r3
 800c946:	d12b      	bne.n	800c9a0 <__swbuf_r+0x70>
 800c948:	686c      	ldr	r4, [r5, #4]
 800c94a:	69a3      	ldr	r3, [r4, #24]
 800c94c:	60a3      	str	r3, [r4, #8]
 800c94e:	89a3      	ldrh	r3, [r4, #12]
 800c950:	071a      	lsls	r2, r3, #28
 800c952:	d52f      	bpl.n	800c9b4 <__swbuf_r+0x84>
 800c954:	6923      	ldr	r3, [r4, #16]
 800c956:	b36b      	cbz	r3, 800c9b4 <__swbuf_r+0x84>
 800c958:	6923      	ldr	r3, [r4, #16]
 800c95a:	6820      	ldr	r0, [r4, #0]
 800c95c:	1ac0      	subs	r0, r0, r3
 800c95e:	6963      	ldr	r3, [r4, #20]
 800c960:	b2f6      	uxtb	r6, r6
 800c962:	4283      	cmp	r3, r0
 800c964:	4637      	mov	r7, r6
 800c966:	dc04      	bgt.n	800c972 <__swbuf_r+0x42>
 800c968:	4621      	mov	r1, r4
 800c96a:	4628      	mov	r0, r5
 800c96c:	f7fe fb68 	bl	800b040 <_fflush_r>
 800c970:	bb30      	cbnz	r0, 800c9c0 <__swbuf_r+0x90>
 800c972:	68a3      	ldr	r3, [r4, #8]
 800c974:	3b01      	subs	r3, #1
 800c976:	60a3      	str	r3, [r4, #8]
 800c978:	6823      	ldr	r3, [r4, #0]
 800c97a:	1c5a      	adds	r2, r3, #1
 800c97c:	6022      	str	r2, [r4, #0]
 800c97e:	701e      	strb	r6, [r3, #0]
 800c980:	6963      	ldr	r3, [r4, #20]
 800c982:	3001      	adds	r0, #1
 800c984:	4283      	cmp	r3, r0
 800c986:	d004      	beq.n	800c992 <__swbuf_r+0x62>
 800c988:	89a3      	ldrh	r3, [r4, #12]
 800c98a:	07db      	lsls	r3, r3, #31
 800c98c:	d506      	bpl.n	800c99c <__swbuf_r+0x6c>
 800c98e:	2e0a      	cmp	r6, #10
 800c990:	d104      	bne.n	800c99c <__swbuf_r+0x6c>
 800c992:	4621      	mov	r1, r4
 800c994:	4628      	mov	r0, r5
 800c996:	f7fe fb53 	bl	800b040 <_fflush_r>
 800c99a:	b988      	cbnz	r0, 800c9c0 <__swbuf_r+0x90>
 800c99c:	4638      	mov	r0, r7
 800c99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9a0:	4b0a      	ldr	r3, [pc, #40]	; (800c9cc <__swbuf_r+0x9c>)
 800c9a2:	429c      	cmp	r4, r3
 800c9a4:	d101      	bne.n	800c9aa <__swbuf_r+0x7a>
 800c9a6:	68ac      	ldr	r4, [r5, #8]
 800c9a8:	e7cf      	b.n	800c94a <__swbuf_r+0x1a>
 800c9aa:	4b09      	ldr	r3, [pc, #36]	; (800c9d0 <__swbuf_r+0xa0>)
 800c9ac:	429c      	cmp	r4, r3
 800c9ae:	bf08      	it	eq
 800c9b0:	68ec      	ldreq	r4, [r5, #12]
 800c9b2:	e7ca      	b.n	800c94a <__swbuf_r+0x1a>
 800c9b4:	4621      	mov	r1, r4
 800c9b6:	4628      	mov	r0, r5
 800c9b8:	f000 f80c 	bl	800c9d4 <__swsetup_r>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d0cb      	beq.n	800c958 <__swbuf_r+0x28>
 800c9c0:	f04f 37ff 	mov.w	r7, #4294967295
 800c9c4:	e7ea      	b.n	800c99c <__swbuf_r+0x6c>
 800c9c6:	bf00      	nop
 800c9c8:	0800cd48 	.word	0x0800cd48
 800c9cc:	0800cd68 	.word	0x0800cd68
 800c9d0:	0800cd28 	.word	0x0800cd28

0800c9d4 <__swsetup_r>:
 800c9d4:	4b32      	ldr	r3, [pc, #200]	; (800caa0 <__swsetup_r+0xcc>)
 800c9d6:	b570      	push	{r4, r5, r6, lr}
 800c9d8:	681d      	ldr	r5, [r3, #0]
 800c9da:	4606      	mov	r6, r0
 800c9dc:	460c      	mov	r4, r1
 800c9de:	b125      	cbz	r5, 800c9ea <__swsetup_r+0x16>
 800c9e0:	69ab      	ldr	r3, [r5, #24]
 800c9e2:	b913      	cbnz	r3, 800c9ea <__swsetup_r+0x16>
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	f7fb ff23 	bl	8008830 <__sinit>
 800c9ea:	4b2e      	ldr	r3, [pc, #184]	; (800caa4 <__swsetup_r+0xd0>)
 800c9ec:	429c      	cmp	r4, r3
 800c9ee:	d10f      	bne.n	800ca10 <__swsetup_r+0x3c>
 800c9f0:	686c      	ldr	r4, [r5, #4]
 800c9f2:	89a3      	ldrh	r3, [r4, #12]
 800c9f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9f8:	0719      	lsls	r1, r3, #28
 800c9fa:	d42c      	bmi.n	800ca56 <__swsetup_r+0x82>
 800c9fc:	06dd      	lsls	r5, r3, #27
 800c9fe:	d411      	bmi.n	800ca24 <__swsetup_r+0x50>
 800ca00:	2309      	movs	r3, #9
 800ca02:	6033      	str	r3, [r6, #0]
 800ca04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca08:	81a3      	strh	r3, [r4, #12]
 800ca0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca0e:	e03e      	b.n	800ca8e <__swsetup_r+0xba>
 800ca10:	4b25      	ldr	r3, [pc, #148]	; (800caa8 <__swsetup_r+0xd4>)
 800ca12:	429c      	cmp	r4, r3
 800ca14:	d101      	bne.n	800ca1a <__swsetup_r+0x46>
 800ca16:	68ac      	ldr	r4, [r5, #8]
 800ca18:	e7eb      	b.n	800c9f2 <__swsetup_r+0x1e>
 800ca1a:	4b24      	ldr	r3, [pc, #144]	; (800caac <__swsetup_r+0xd8>)
 800ca1c:	429c      	cmp	r4, r3
 800ca1e:	bf08      	it	eq
 800ca20:	68ec      	ldreq	r4, [r5, #12]
 800ca22:	e7e6      	b.n	800c9f2 <__swsetup_r+0x1e>
 800ca24:	0758      	lsls	r0, r3, #29
 800ca26:	d512      	bpl.n	800ca4e <__swsetup_r+0x7a>
 800ca28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca2a:	b141      	cbz	r1, 800ca3e <__swsetup_r+0x6a>
 800ca2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca30:	4299      	cmp	r1, r3
 800ca32:	d002      	beq.n	800ca3a <__swsetup_r+0x66>
 800ca34:	4630      	mov	r0, r6
 800ca36:	f7ff fbc3 	bl	800c1c0 <_free_r>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ca3e:	89a3      	ldrh	r3, [r4, #12]
 800ca40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca44:	81a3      	strh	r3, [r4, #12]
 800ca46:	2300      	movs	r3, #0
 800ca48:	6063      	str	r3, [r4, #4]
 800ca4a:	6923      	ldr	r3, [r4, #16]
 800ca4c:	6023      	str	r3, [r4, #0]
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	f043 0308 	orr.w	r3, r3, #8
 800ca54:	81a3      	strh	r3, [r4, #12]
 800ca56:	6923      	ldr	r3, [r4, #16]
 800ca58:	b94b      	cbnz	r3, 800ca6e <__swsetup_r+0x9a>
 800ca5a:	89a3      	ldrh	r3, [r4, #12]
 800ca5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca64:	d003      	beq.n	800ca6e <__swsetup_r+0x9a>
 800ca66:	4621      	mov	r1, r4
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f000 f84d 	bl	800cb08 <__smakebuf_r>
 800ca6e:	89a0      	ldrh	r0, [r4, #12]
 800ca70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca74:	f010 0301 	ands.w	r3, r0, #1
 800ca78:	d00a      	beq.n	800ca90 <__swsetup_r+0xbc>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	60a3      	str	r3, [r4, #8]
 800ca7e:	6963      	ldr	r3, [r4, #20]
 800ca80:	425b      	negs	r3, r3
 800ca82:	61a3      	str	r3, [r4, #24]
 800ca84:	6923      	ldr	r3, [r4, #16]
 800ca86:	b943      	cbnz	r3, 800ca9a <__swsetup_r+0xc6>
 800ca88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca8c:	d1ba      	bne.n	800ca04 <__swsetup_r+0x30>
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}
 800ca90:	0781      	lsls	r1, r0, #30
 800ca92:	bf58      	it	pl
 800ca94:	6963      	ldrpl	r3, [r4, #20]
 800ca96:	60a3      	str	r3, [r4, #8]
 800ca98:	e7f4      	b.n	800ca84 <__swsetup_r+0xb0>
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	e7f7      	b.n	800ca8e <__swsetup_r+0xba>
 800ca9e:	bf00      	nop
 800caa0:	20000010 	.word	0x20000010
 800caa4:	0800cd48 	.word	0x0800cd48
 800caa8:	0800cd68 	.word	0x0800cd68
 800caac:	0800cd28 	.word	0x0800cd28

0800cab0 <abort>:
 800cab0:	b508      	push	{r3, lr}
 800cab2:	2006      	movs	r0, #6
 800cab4:	f000 f898 	bl	800cbe8 <raise>
 800cab8:	2001      	movs	r0, #1
 800caba:	f7f5 f807 	bl	8001acc <_exit>

0800cabe <__swhatbuf_r>:
 800cabe:	b570      	push	{r4, r5, r6, lr}
 800cac0:	460e      	mov	r6, r1
 800cac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cac6:	2900      	cmp	r1, #0
 800cac8:	b096      	sub	sp, #88	; 0x58
 800caca:	4614      	mov	r4, r2
 800cacc:	461d      	mov	r5, r3
 800cace:	da08      	bge.n	800cae2 <__swhatbuf_r+0x24>
 800cad0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cad4:	2200      	movs	r2, #0
 800cad6:	602a      	str	r2, [r5, #0]
 800cad8:	061a      	lsls	r2, r3, #24
 800cada:	d410      	bmi.n	800cafe <__swhatbuf_r+0x40>
 800cadc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cae0:	e00e      	b.n	800cb00 <__swhatbuf_r+0x42>
 800cae2:	466a      	mov	r2, sp
 800cae4:	f000 f89c 	bl	800cc20 <_fstat_r>
 800cae8:	2800      	cmp	r0, #0
 800caea:	dbf1      	blt.n	800cad0 <__swhatbuf_r+0x12>
 800caec:	9a01      	ldr	r2, [sp, #4]
 800caee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800caf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800caf6:	425a      	negs	r2, r3
 800caf8:	415a      	adcs	r2, r3
 800cafa:	602a      	str	r2, [r5, #0]
 800cafc:	e7ee      	b.n	800cadc <__swhatbuf_r+0x1e>
 800cafe:	2340      	movs	r3, #64	; 0x40
 800cb00:	2000      	movs	r0, #0
 800cb02:	6023      	str	r3, [r4, #0]
 800cb04:	b016      	add	sp, #88	; 0x58
 800cb06:	bd70      	pop	{r4, r5, r6, pc}

0800cb08 <__smakebuf_r>:
 800cb08:	898b      	ldrh	r3, [r1, #12]
 800cb0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb0c:	079d      	lsls	r5, r3, #30
 800cb0e:	4606      	mov	r6, r0
 800cb10:	460c      	mov	r4, r1
 800cb12:	d507      	bpl.n	800cb24 <__smakebuf_r+0x1c>
 800cb14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	6123      	str	r3, [r4, #16]
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	6163      	str	r3, [r4, #20]
 800cb20:	b002      	add	sp, #8
 800cb22:	bd70      	pop	{r4, r5, r6, pc}
 800cb24:	ab01      	add	r3, sp, #4
 800cb26:	466a      	mov	r2, sp
 800cb28:	f7ff ffc9 	bl	800cabe <__swhatbuf_r>
 800cb2c:	9900      	ldr	r1, [sp, #0]
 800cb2e:	4605      	mov	r5, r0
 800cb30:	4630      	mov	r0, r6
 800cb32:	f7fb ff79 	bl	8008a28 <_malloc_r>
 800cb36:	b948      	cbnz	r0, 800cb4c <__smakebuf_r+0x44>
 800cb38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb3c:	059a      	lsls	r2, r3, #22
 800cb3e:	d4ef      	bmi.n	800cb20 <__smakebuf_r+0x18>
 800cb40:	f023 0303 	bic.w	r3, r3, #3
 800cb44:	f043 0302 	orr.w	r3, r3, #2
 800cb48:	81a3      	strh	r3, [r4, #12]
 800cb4a:	e7e3      	b.n	800cb14 <__smakebuf_r+0xc>
 800cb4c:	4b0d      	ldr	r3, [pc, #52]	; (800cb84 <__smakebuf_r+0x7c>)
 800cb4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb50:	89a3      	ldrh	r3, [r4, #12]
 800cb52:	6020      	str	r0, [r4, #0]
 800cb54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb58:	81a3      	strh	r3, [r4, #12]
 800cb5a:	9b00      	ldr	r3, [sp, #0]
 800cb5c:	6163      	str	r3, [r4, #20]
 800cb5e:	9b01      	ldr	r3, [sp, #4]
 800cb60:	6120      	str	r0, [r4, #16]
 800cb62:	b15b      	cbz	r3, 800cb7c <__smakebuf_r+0x74>
 800cb64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb68:	4630      	mov	r0, r6
 800cb6a:	f000 f86b 	bl	800cc44 <_isatty_r>
 800cb6e:	b128      	cbz	r0, 800cb7c <__smakebuf_r+0x74>
 800cb70:	89a3      	ldrh	r3, [r4, #12]
 800cb72:	f023 0303 	bic.w	r3, r3, #3
 800cb76:	f043 0301 	orr.w	r3, r3, #1
 800cb7a:	81a3      	strh	r3, [r4, #12]
 800cb7c:	89a0      	ldrh	r0, [r4, #12]
 800cb7e:	4305      	orrs	r5, r0
 800cb80:	81a5      	strh	r5, [r4, #12]
 800cb82:	e7cd      	b.n	800cb20 <__smakebuf_r+0x18>
 800cb84:	080087c9 	.word	0x080087c9

0800cb88 <_malloc_usable_size_r>:
 800cb88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb8c:	1f18      	subs	r0, r3, #4
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	bfbc      	itt	lt
 800cb92:	580b      	ldrlt	r3, [r1, r0]
 800cb94:	18c0      	addlt	r0, r0, r3
 800cb96:	4770      	bx	lr

0800cb98 <_raise_r>:
 800cb98:	291f      	cmp	r1, #31
 800cb9a:	b538      	push	{r3, r4, r5, lr}
 800cb9c:	4604      	mov	r4, r0
 800cb9e:	460d      	mov	r5, r1
 800cba0:	d904      	bls.n	800cbac <_raise_r+0x14>
 800cba2:	2316      	movs	r3, #22
 800cba4:	6003      	str	r3, [r0, #0]
 800cba6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbaa:	bd38      	pop	{r3, r4, r5, pc}
 800cbac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cbae:	b112      	cbz	r2, 800cbb6 <_raise_r+0x1e>
 800cbb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cbb4:	b94b      	cbnz	r3, 800cbca <_raise_r+0x32>
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f000 f830 	bl	800cc1c <_getpid_r>
 800cbbc:	462a      	mov	r2, r5
 800cbbe:	4601      	mov	r1, r0
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbc6:	f000 b817 	b.w	800cbf8 <_kill_r>
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d00a      	beq.n	800cbe4 <_raise_r+0x4c>
 800cbce:	1c59      	adds	r1, r3, #1
 800cbd0:	d103      	bne.n	800cbda <_raise_r+0x42>
 800cbd2:	2316      	movs	r3, #22
 800cbd4:	6003      	str	r3, [r0, #0]
 800cbd6:	2001      	movs	r0, #1
 800cbd8:	e7e7      	b.n	800cbaa <_raise_r+0x12>
 800cbda:	2400      	movs	r4, #0
 800cbdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	4798      	blx	r3
 800cbe4:	2000      	movs	r0, #0
 800cbe6:	e7e0      	b.n	800cbaa <_raise_r+0x12>

0800cbe8 <raise>:
 800cbe8:	4b02      	ldr	r3, [pc, #8]	; (800cbf4 <raise+0xc>)
 800cbea:	4601      	mov	r1, r0
 800cbec:	6818      	ldr	r0, [r3, #0]
 800cbee:	f7ff bfd3 	b.w	800cb98 <_raise_r>
 800cbf2:	bf00      	nop
 800cbf4:	20000010 	.word	0x20000010

0800cbf8 <_kill_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4d07      	ldr	r5, [pc, #28]	; (800cc18 <_kill_r+0x20>)
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	4604      	mov	r4, r0
 800cc00:	4608      	mov	r0, r1
 800cc02:	4611      	mov	r1, r2
 800cc04:	602b      	str	r3, [r5, #0]
 800cc06:	f7f4 ff51 	bl	8001aac <_kill>
 800cc0a:	1c43      	adds	r3, r0, #1
 800cc0c:	d102      	bne.n	800cc14 <_kill_r+0x1c>
 800cc0e:	682b      	ldr	r3, [r5, #0]
 800cc10:	b103      	cbz	r3, 800cc14 <_kill_r+0x1c>
 800cc12:	6023      	str	r3, [r4, #0]
 800cc14:	bd38      	pop	{r3, r4, r5, pc}
 800cc16:	bf00      	nop
 800cc18:	20004580 	.word	0x20004580

0800cc1c <_getpid_r>:
 800cc1c:	f7f4 bf3e 	b.w	8001a9c <_getpid>

0800cc20 <_fstat_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	4d07      	ldr	r5, [pc, #28]	; (800cc40 <_fstat_r+0x20>)
 800cc24:	2300      	movs	r3, #0
 800cc26:	4604      	mov	r4, r0
 800cc28:	4608      	mov	r0, r1
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	602b      	str	r3, [r5, #0]
 800cc2e:	f7f4 ff9c 	bl	8001b6a <_fstat>
 800cc32:	1c43      	adds	r3, r0, #1
 800cc34:	d102      	bne.n	800cc3c <_fstat_r+0x1c>
 800cc36:	682b      	ldr	r3, [r5, #0]
 800cc38:	b103      	cbz	r3, 800cc3c <_fstat_r+0x1c>
 800cc3a:	6023      	str	r3, [r4, #0]
 800cc3c:	bd38      	pop	{r3, r4, r5, pc}
 800cc3e:	bf00      	nop
 800cc40:	20004580 	.word	0x20004580

0800cc44 <_isatty_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4d06      	ldr	r5, [pc, #24]	; (800cc60 <_isatty_r+0x1c>)
 800cc48:	2300      	movs	r3, #0
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	4608      	mov	r0, r1
 800cc4e:	602b      	str	r3, [r5, #0]
 800cc50:	f7f4 ff9b 	bl	8001b8a <_isatty>
 800cc54:	1c43      	adds	r3, r0, #1
 800cc56:	d102      	bne.n	800cc5e <_isatty_r+0x1a>
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	b103      	cbz	r3, 800cc5e <_isatty_r+0x1a>
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}
 800cc60:	20004580 	.word	0x20004580

0800cc64 <_init>:
 800cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc66:	bf00      	nop
 800cc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc6a:	bc08      	pop	{r3}
 800cc6c:	469e      	mov	lr, r3
 800cc6e:	4770      	bx	lr

0800cc70 <_fini>:
 800cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc72:	bf00      	nop
 800cc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc76:	bc08      	pop	{r3}
 800cc78:	469e      	mov	lr, r3
 800cc7a:	4770      	bx	lr
