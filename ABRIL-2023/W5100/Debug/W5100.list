
W5100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000513c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080052c4  080052c4  000152c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052f8  080052f8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080052f8  080052f8  000152f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005300  08005300  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005300  08005300  00015300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          0000107c  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200010fc  200010fc  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007fb1  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021e4  00000000  00000000  00028061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  0002a248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007b8  00000000  00000000  0002ab00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ac4  00000000  00000000  0002b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b0e8  00000000  00000000  0004dd7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf399  00000000  00000000  00058e64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001281fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002154  00000000  00000000  00128250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080052ac 	.word	0x080052ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	080052ac 	.word	0x080052ac

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(SPI_TypeDef *SPIx)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	f003 0301 	and.w	r3, r3, #1
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d101      	bne.n	80004f4 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80004f0:	2301      	movs	r3, #1
 80004f2:	e000      	b.n	80004f6 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(SPI_TypeDef *SPIx)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	f003 0302 	and.w	r3, r3, #2
 8000512:	2b02      	cmp	r3, #2
 8000514:	d101      	bne.n	800051a <LL_SPI_IsActiveFlag_TXE+0x18>
 8000516:	2301      	movs	r3, #1
 8000518:	e000      	b.n	800051c <LL_SPI_IsActiveFlag_TXE+0x1a>
 800051a:	2300      	movs	r3, #0
}
 800051c:	4618      	mov	r0, r3
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr

08000528 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	330c      	adds	r3, #12
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b2db      	uxtb	r3, r3
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	460b      	mov	r3, r1
 800054e:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	330c      	adds	r3, #12
 8000554:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	78fa      	ldrb	r2, [r7, #3]
 800055a:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <w5100_read_byte>:
 * @brief recibe un byte por el SPI
 * @note - Esta función envía un byte dummy y lee el byte recibido
 * @note - Esta función es una función de bloqueo por polling
 * @return uint8_t
 */
uint8_t w5100_read_byte(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	while(!(LL_SPI_IsActiveFlag_TXE(ETH_SPI)));
 800056c:	bf00      	nop
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <w5100_read_byte+0x34>)
 8000570:	f7ff ffc7 	bl	8000502 <LL_SPI_IsActiveFlag_TXE>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0f9      	beq.n	800056e <w5100_read_byte+0x6>
	LL_SPI_TransmitData8(ETH_SPI, 0xFF);
 800057a:	21ff      	movs	r1, #255	; 0xff
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <w5100_read_byte+0x34>)
 800057e:	f7ff ffe1 	bl	8000544 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(ETH_SPI)));
 8000582:	bf00      	nop
 8000584:	4805      	ldr	r0, [pc, #20]	; (800059c <w5100_read_byte+0x34>)
 8000586:	f7ff ffa9 	bl	80004dc <LL_SPI_IsActiveFlag_RXNE>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f9      	beq.n	8000584 <w5100_read_byte+0x1c>
	return LL_SPI_ReceiveData8(ETH_SPI);
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <w5100_read_byte+0x34>)
 8000592:	f7ff ffc9 	bl	8000528 <LL_SPI_ReceiveData8>
 8000596:	4603      	mov	r3, r0
}
 8000598:	4618      	mov	r0, r3
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40013000 	.word	0x40013000

080005a0 <w5100_write_byte>:
 * @brief Esta función transmite un byte
 * @param byte[in] : byte a ser enviado
 * @note - Esta función tambien limpia la bandera RXNE una vez enviado el byte
 * @note - Esta función es de bloqueo por polling
 */
void w5100_write_byte(uint8_t byte){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	while(!(LL_SPI_IsActiveFlag_TXE(ETH_SPI)));
 80005aa:	bf00      	nop
 80005ac:	480c      	ldr	r0, [pc, #48]	; (80005e0 <w5100_write_byte+0x40>)
 80005ae:	f7ff ffa8 	bl	8000502 <LL_SPI_IsActiveFlag_TXE>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0f9      	beq.n	80005ac <w5100_write_byte+0xc>
	LL_SPI_TransmitData8(ETH_SPI, byte);
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4808      	ldr	r0, [pc, #32]	; (80005e0 <w5100_write_byte+0x40>)
 80005be:	f7ff ffc1 	bl	8000544 <LL_SPI_TransmitData8>
	while(!(LL_SPI_IsActiveFlag_RXNE(ETH_SPI)));
 80005c2:	bf00      	nop
 80005c4:	4806      	ldr	r0, [pc, #24]	; (80005e0 <w5100_write_byte+0x40>)
 80005c6:	f7ff ff89 	bl	80004dc <LL_SPI_IsActiveFlag_RXNE>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0f9      	beq.n	80005c4 <w5100_write_byte+0x24>
	LL_SPI_ReceiveData8(ETH_SPI);
 80005d0:	4803      	ldr	r0, [pc, #12]	; (80005e0 <w5100_write_byte+0x40>)
 80005d2:	f7ff ffa9 	bl	8000528 <LL_SPI_ReceiveData8>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40013000 	.word	0x40013000

080005e4 <w5100_cs_enable>:

/**
 * @brief Selecciona el W5100 para la comunicación SPI
 * @note - CS : Nivel logico 0 (GND)
 */
void w5100_cs_enable(void){
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
	GPIOX_ODR(W5100_CS) = 0;
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <w5100_cs_enable+0x14>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	42400290 	.word	0x42400290

080005fc <w5100_cs_disable>:

/**
 * @brief Deselecciona el W5100
 * @note - CS : Nivel lógico alto (VDD)
 */
void w5100_cs_disable(void){
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	GPIOX_ODR(W5100_CS) = 1;
 8000600:	4b03      	ldr	r3, [pc, #12]	; (8000610 <w5100_cs_disable+0x14>)
 8000602:	2201      	movs	r2, #1
 8000604:	601a      	str	r2, [r3, #0]
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	42400290 	.word	0x42400290

08000614 <w5100_reset>:
}

/**
 * @brief Genera un reset del chip W5100
 */
void w5100_reset(void){
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	GPIOX_ODR(W5100_RST) = 0;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <w5100_reset+0x20>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800061e:	2064      	movs	r0, #100	; 0x64
 8000620:	f000 fb54 	bl	8000ccc <HAL_Delay>
	GPIOX_ODR(W5100_RST) = 1;
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <w5100_reset+0x20>)
 8000626:	2201      	movs	r2, #1
 8000628:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800062a:	2064      	movs	r0, #100	; 0x64
 800062c:	f000 fb4e 	bl	8000ccc <HAL_Delay>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	42410290 	.word	0x42410290

08000638 <w5100_critical_enter>:

/**
 * @brief deshabilita las interrupciones
 */
void w5100_critical_enter(void){
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
	__disable_irq();
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <w5100_critical_exit>:

/**
 * \brief habilita las interrupciones
 */
void w5100_critical_exit(void){
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 800064e:	b662      	cpsie	i
}
 8000650:	bf00      	nop
	__enable_irq();
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	041a      	lsls	r2, r3, #16
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	619a      	str	r2, [r3, #24]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
	...

0800067c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000688:	4907      	ldr	r1, [pc, #28]	; (80006a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4313      	orrs	r3, r2
 800068e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4013      	ands	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800069a:	68fb      	ldr	r3, [r7, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40023800 	.word	0x40023800

080006ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80006c2:	2080      	movs	r0, #128	; 0x80
 80006c4:	f7ff ffda 	bl	800067c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80006c8:	2001      	movs	r0, #1
 80006ca:	f7ff ffd7 	bl	800067c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80006ce:	2004      	movs	r0, #4
 80006d0:	f7ff ffd4 	bl	800067c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80006d4:	2002      	movs	r0, #2
 80006d6:	f7ff ffd1 	bl	800067c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(ETH_CS_GPIO_Port, ETH_CS_Pin);
 80006da:	2110      	movs	r1, #16
 80006dc:	4814      	ldr	r0, [pc, #80]	; (8000730 <MX_GPIO_Init+0x84>)
 80006de:	f7ff ffbd 	bl	800065c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ETH_RST_GPIO_Port, ETH_RST_Pin);
 80006e2:	2110      	movs	r1, #16
 80006e4:	4813      	ldr	r0, [pc, #76]	; (8000734 <MX_GPIO_Init+0x88>)
 80006e6:	f7ff ffb9 	bl	800065c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 80006ea:	2310      	movs	r3, #16
 80006ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006ee:	2301      	movs	r3, #1
 80006f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 80006fe:	463b      	mov	r3, r7
 8000700:	4619      	mov	r1, r3
 8000702:	480b      	ldr	r0, [pc, #44]	; (8000730 <MX_GPIO_Init+0x84>)
 8000704:	f001 f955 	bl	80019b2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ETH_RST_Pin;
 8000708:	2310      	movs	r3, #16
 800070a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800070c:	2301      	movs	r3, #1
 800070e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000718:	2300      	movs	r3, #0
 800071a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(ETH_RST_GPIO_Port, &GPIO_InitStruct);
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_GPIO_Init+0x88>)
 8000722:	f001 f946 	bl	80019b2 <LL_GPIO_Init>

}
 8000726:	bf00      	nop
 8000728:	3718      	adds	r7, #24
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40020000 	.word	0x40020000
 8000734:	40020800 	.word	0x40020800

08000738 <LL_SPI_Enable>:
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	601a      	str	r2, [r3, #0]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t dnsclient_ip[16] = {0};
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fa3c 	bl	8000be8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f854 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f7ff ff9a 	bl	80006ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8000778:	f000 f956 	bl	8000a28 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // SPI method callback registration
  LL_SPI_Enable(SPI1);
 800077c:	481b      	ldr	r0, [pc, #108]	; (80007ec <main+0x94>)
 800077e:	f7ff ffdb 	bl	8000738 <LL_SPI_Enable>
  reg_wizchip_spi_cbfunc(w5100_read_byte, w5100_write_byte);
 8000782:	491b      	ldr	r1, [pc, #108]	; (80007f0 <main+0x98>)
 8000784:	481b      	ldr	r0, [pc, #108]	; (80007f4 <main+0x9c>)
 8000786:	f002 facd 	bl	8002d24 <reg_wizchip_spi_cbfunc>
  // CS function register
  reg_wizchip_cs_cbfunc(w5100_cs_enable, w5100_cs_disable);
 800078a:	491b      	ldr	r1, [pc, #108]	; (80007f8 <main+0xa0>)
 800078c:	481b      	ldr	r0, [pc, #108]	; (80007fc <main+0xa4>)
 800078e:	f002 faa3 	bl	8002cd8 <reg_wizchip_cs_cbfunc>
  // critical secction
  reg_wizchip_cris_cbfunc(w5100_critical_enter, w5100_critical_exit);
 8000792:	491b      	ldr	r1, [pc, #108]	; (8000800 <main+0xa8>)
 8000794:	481b      	ldr	r0, [pc, #108]	; (8000804 <main+0xac>)
 8000796:	f002 fa79 	bl	8002c8c <reg_wizchip_cris_cbfunc>

  //reset
  w5100_reset();
 800079a:	f7ff ff3b 	bl	8000614 <w5100_reset>
  HAL_Delay(3000);
 800079e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007a2:	f000 fa93 	bl	8000ccc <HAL_Delay>
  W5100_Initialize();
 80007a6:	f000 f8a3 	bl	80008f0 <W5100_Initialize>

  wizchip_setnetinfo(&gWIZNETINFO);
 80007aa:	4817      	ldr	r0, [pc, #92]	; (8000808 <main+0xb0>)
 80007ac:	f002 fd16 	bl	80031dc <wizchip_setnetinfo>

  //DHCP INIT
  DHCP_init(DHCP_SOCKET, ethBuf0);
 80007b0:	4916      	ldr	r1, [pc, #88]	; (800080c <main+0xb4>)
 80007b2:	2000      	movs	r0, #0
 80007b4:	f004 f842 	bl	800483c <DHCP_init>

  while(1){
	  if(proccess_dhcp() == DHCP_IP_LEASED){
 80007b8:	f000 f8c2 	bl	8000940 <proccess_dhcp>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b04      	cmp	r3, #4
 80007c0:	d004      	beq.n	80007cc <main+0x74>
		  break;
	  }
	  HAL_Delay(500);
 80007c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007c6:	f000 fa81 	bl	8000ccc <HAL_Delay>
	  if(proccess_dhcp() == DHCP_IP_LEASED){
 80007ca:	e7f5      	b.n	80007b8 <main+0x60>
		  break;
 80007cc:	bf00      	nop
  }

  //->DNS RUN
  DNS_init(DNS_SOCKET, ethBuf1);
 80007ce:	4910      	ldr	r1, [pc, #64]	; (8000810 <main+0xb8>)
 80007d0:	2001      	movs	r0, #1
 80007d2:	f004 fc75 	bl	80050c0 <DNS_init>

  while(1){
	  if(DNS_run(dns_server_ip, URL, dnsclient_ip) == 1){
 80007d6:	463b      	mov	r3, r7
 80007d8:	461a      	mov	r2, r3
 80007da:	490e      	ldr	r1, [pc, #56]	; (8000814 <main+0xbc>)
 80007dc:	480e      	ldr	r0, [pc, #56]	; (8000818 <main+0xc0>)
 80007de:	f004 fc8b 	bl	80050f8 <DNS_run>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d1f6      	bne.n	80007d6 <main+0x7e>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <main+0x90>
 80007ea:	bf00      	nop
 80007ec:	40013000 	.word	0x40013000
 80007f0:	080005a1 	.word	0x080005a1
 80007f4:	08000569 	.word	0x08000569
 80007f8:	080005fd 	.word	0x080005fd
 80007fc:	080005e5 	.word	0x080005e5
 8000800:	0800064b 	.word	0x0800064b
 8000804:	08000639 	.word	0x08000639
 8000808:	20000000 	.word	0x20000000
 800080c:	2000009c 	.word	0x2000009c
 8000810:	2000089c 	.word	0x2000089c
 8000814:	20000018 	.word	0x20000018
 8000818:	20000028 	.word	0x20000028

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	; 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2230      	movs	r2, #48	; 0x30
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f004 fd0e 	bl	800524c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000848:	4a27      	ldr	r2, [pc, #156]	; (80008e8 <SystemClock_Config+0xcc>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	; 0x40
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <SystemClock_Config+0xd0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a21      	ldr	r2, [pc, #132]	; (80008ec <SystemClock_Config+0xd0>)
 8000866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800088a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000890:	23a8      	movs	r3, #168	; 0xa8
 8000892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fb1d 	bl	8000ee0 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ac:	f000 f874 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2105      	movs	r1, #5
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 fd7e 	bl	80013d0 <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008da:	f000 f85d 	bl	8000998 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3750      	adds	r7, #80	; 0x50
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <W5100_Initialize>:

/* USER CODE BEGIN 4 */
void W5100_Initialize(void){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
	intr_kind temp;
	//stack
	uint8_t W5x00_AdrSet[2][4] = {{2,2,2,2},{2,2,2,2}};
 80008f6:	4a11      	ldr	r2, [pc, #68]	; (800093c <W5100_Initialize+0x4c>)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008fe:	e883 0003 	stmia.w	r3, {r0, r1}

	temp = IK_DEST_UNREACH;
 8000902:	2340      	movs	r3, #64	; 0x40
 8000904:	81fb      	strh	r3, [r7, #14]

	if(ctlwizchip(CW_INIT_WIZCHIP, (void*)W5x00_AdrSet) == -1){
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4619      	mov	r1, r3
 800090a:	2001      	movs	r0, #1
 800090c:	f002 fa36 	bl	8002d7c <ctlwizchip>
 8000910:	4603      	mov	r3, r0
 8000912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000916:	d101      	bne.n	800091c <W5100_Initialize+0x2c>
		Error_Handler();
 8000918:	f000 f83e 	bl	8000998 <Error_Handler>
	}

	if(ctlwizchip(CW_SET_INTRMASK, &temp) == -1){
 800091c:	f107 030e 	add.w	r3, r7, #14
 8000920:	4619      	mov	r1, r3
 8000922:	2004      	movs	r0, #4
 8000924:	f002 fa2a 	bl	8002d7c <ctlwizchip>
 8000928:	4603      	mov	r3, r0
 800092a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800092e:	d101      	bne.n	8000934 <W5100_Initialize+0x44>
		Error_Handler();
 8000930:	f000 f832 	bl	8000998 <Error_Handler>
	}

	//printf("interrupt mask: %02x\r\n",getIMR());


}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	080052c4 	.word	0x080052c4

08000940 <proccess_dhcp>:

int proccess_dhcp(void){
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
	int8_t ret = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	71fb      	strb	r3, [r7, #7]
	uint32_t timout = HAL_GetTick();
 800094a:	f000 f9b3 	bl	8000cb4 <HAL_GetTick>
 800094e:	6038      	str	r0, [r7, #0]
	while(1){
		ret = DHCP_run();
 8000950:	f003 fdb0 	bl	80044b4 <DHCP_run>
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]

		if(ret == DHCP_IP_LEASED){
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	2b04      	cmp	r3, #4
 800095e:	d108      	bne.n	8000972 <proccess_dhcp+0x32>
			//printf information
			memset(&gWIZNETINFO,0,sizeof(gWIZNETINFO));
 8000960:	2217      	movs	r2, #23
 8000962:	2100      	movs	r1, #0
 8000964:	480b      	ldr	r0, [pc, #44]	; (8000994 <proccess_dhcp+0x54>)
 8000966:	f004 fc71 	bl	800524c <memset>

			wizchip_getnetinfo(&gWIZNETINFO);
 800096a:	480a      	ldr	r0, [pc, #40]	; (8000994 <proccess_dhcp+0x54>)
 800096c:	f002 fc72 	bl	8003254 <wizchip_getnetinfo>
			break;
 8000970:	e00a      	b.n	8000988 <proccess_dhcp+0x48>
			//todo

		}

		//check timeout
		if((HAL_GetTick() - timout) >= DHCP_TIMEOUT ){
 8000972:	f000 f99f 	bl	8000cb4 <HAL_GetTick>
 8000976:	4602      	mov	r2, r0
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	1ad3      	subs	r3, r2, r3
 800097c:	f247 522f 	movw	r2, #29999	; 0x752f
 8000980:	4293      	cmp	r3, r2
 8000982:	d9e5      	bls.n	8000950 <proccess_dhcp+0x10>
			DHCP_stop();
 8000984:	f003 feae 	bl	80046e4 <DHCP_stop>
			break;
		}

	}
	return ret;
 8000988:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000000 	.word	0x20000000

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>

080009a2 <LL_SPI_SetStandard>:
{
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f023 0210 	bic.w	r2, r3, #16
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	431a      	orrs	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	605a      	str	r2, [r3, #4]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_AHB1_GRP1_EnableClock>:
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009d4:	4907      	ldr	r1, [pc, #28]	; (80009f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4313      	orrs	r3, r2
 80009da:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80009de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4013      	ands	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009e6:	68fb      	ldr	r3, [r7, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	40023800 	.word	0x40023800

080009f8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a04:	4907      	ldr	r1, [pc, #28]	; (8000a24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4013      	ands	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40023800 	.word	0x40023800

08000a28 <MX_SPI1_Init>:

/* USER CODE END 0 */

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b090      	sub	sp, #64	; 0x40
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000a2e:	f107 0318 	add.w	r3, r7, #24
 8000a32:	2228      	movs	r2, #40	; 0x28
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f004 fc08 	bl	800524c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
 8000a4a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000a4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a50:	f7ff ffd2 	bl	80009f8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f7ff ffb7 	bl	80009c8 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000a5a:	23e0      	movs	r3, #224	; 0xe0
 8000a5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	463b      	mov	r3, r7
 8000a74:	4619      	mov	r1, r3
 8000a76:	4813      	ldr	r0, [pc, #76]	; (8000ac4 <MX_SPI1_Init+0x9c>)
 8000a78:	f000 ff9b 	bl	80019b2 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000a80:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000a84:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 8000a98:	2318      	movs	r3, #24
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8000aa4:	230a      	movs	r3, #10
 8000aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000aa8:	f107 0318 	add.w	r3, r7, #24
 8000aac:	4619      	mov	r1, r3
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <MX_SPI1_Init+0xa0>)
 8000ab0:	f001 f815 	bl	8001ade <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_SPI1_Init+0xa0>)
 8000ab8:	f7ff ff73 	bl	80009a2 <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	3740      	adds	r7, #64	; 0x40
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40013000 	.word	0x40013000

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	4a0f      	ldr	r2, [pc, #60]	; (8000b18 <HAL_MspInit+0x4c>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_MspInit+0x4c>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x4c>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x4c>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f890 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b98:	480d      	ldr	r0, [pc, #52]	; (8000bd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b9a:	490e      	ldr	r1, [pc, #56]	; (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b9c:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb0:	4c0b      	ldr	r4, [pc, #44]	; (8000be0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bbe:	f7ff ffd7 	bl	8000b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f004 fb1f 	bl	8005204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc6:	f7ff fdc7 	bl	8000758 <main>
  bx  lr    
 8000bca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bd4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000bd8:	08005308 	.word	0x08005308
  ldr r2, =_sbss
 8000bdc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000be0:	200010fc 	.word	0x200010fc

08000be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be4:	e7fe      	b.n	8000be4 <ADC_IRQHandler>
	...

08000be8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_Init+0x40>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <HAL_Init+0x40>)
 8000bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_Init+0x40>)
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_Init+0x40>)
 8000c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c10:	2003      	movs	r0, #3
 8000c12:	f000 f931 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c16:	200f      	movs	r0, #15
 8000c18:	f000 f808 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1c:	f7ff ff56 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023c00 	.word	0x40023c00

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f93b 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f911 	bl	8000e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000002c 	.word	0x2000002c
 8000c84:	20000034 	.word	0x20000034
 8000c88:	20000030 	.word	0x20000030

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000034 	.word	0x20000034
 8000cb0:	2000109c 	.word	0x2000109c

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	2000109c 	.word	0x2000109c

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000034 	.word	0x20000034

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	210f      	movs	r1, #15
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f7ff ff8e 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff47 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea0:	f7ff ff5c 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6978      	ldr	r0, [r7, #20]
 8000eac:	f7ff ff8e 	bl	8000dcc <NVIC_EncodePriority>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff5d 	bl	8000d78 <__NVIC_SetPriority>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffb0 	bl	8000e34 <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e267      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d075      	beq.n	8000fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000efe:	4b88      	ldr	r3, [pc, #544]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d00c      	beq.n	8000f24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f0a:	4b85      	ldr	r3, [pc, #532]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f12:	2b08      	cmp	r3, #8
 8000f14:	d112      	bne.n	8000f3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f16:	4b82      	ldr	r3, [pc, #520]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f22:	d10b      	bne.n	8000f3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f24:	4b7e      	ldr	r3, [pc, #504]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d05b      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x108>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d157      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e242      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f44:	d106      	bne.n	8000f54 <HAL_RCC_OscConfig+0x74>
 8000f46:	4b76      	ldr	r3, [pc, #472]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a75      	ldr	r2, [pc, #468]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e01d      	b.n	8000f90 <HAL_RCC_OscConfig+0xb0>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0x98>
 8000f5e:	4b70      	ldr	r3, [pc, #448]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a6f      	ldr	r2, [pc, #444]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b6d      	ldr	r3, [pc, #436]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a6c      	ldr	r2, [pc, #432]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e00b      	b.n	8000f90 <HAL_RCC_OscConfig+0xb0>
 8000f78:	4b69      	ldr	r3, [pc, #420]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a68      	ldr	r2, [pc, #416]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b66      	ldr	r3, [pc, #408]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a65      	ldr	r2, [pc, #404]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d013      	beq.n	8000fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fe8c 	bl	8000cb4 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fe88 	bl	8000cb4 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b64      	cmp	r3, #100	; 0x64
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e207      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fb2:	4b5b      	ldr	r3, [pc, #364]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f0      	beq.n	8000fa0 <HAL_RCC_OscConfig+0xc0>
 8000fbe:	e014      	b.n	8000fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fe78 	bl	8000cb4 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fe74 	bl	8000cb4 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	; 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e1f3      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fda:	4b51      	ldr	r3, [pc, #324]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0xe8>
 8000fe6:	e000      	b.n	8000fea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d063      	beq.n	80010be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ff6:	4b4a      	ldr	r3, [pc, #296]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 030c 	and.w	r3, r3, #12
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001002:	4b47      	ldr	r3, [pc, #284]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800100a:	2b08      	cmp	r3, #8
 800100c:	d11c      	bne.n	8001048 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d116      	bne.n	8001048 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101a:	4b41      	ldr	r3, [pc, #260]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d005      	beq.n	8001032 <HAL_RCC_OscConfig+0x152>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d001      	beq.n	8001032 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e1c7      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001032:	4b3b      	ldr	r3, [pc, #236]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4937      	ldr	r1, [pc, #220]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001046:	e03a      	b.n	80010be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d020      	beq.n	8001092 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001050:	4b34      	ldr	r3, [pc, #208]	; (8001124 <HAL_RCC_OscConfig+0x244>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001056:	f7ff fe2d 	bl	8000cb4 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800105e:	f7ff fe29 	bl	8000cb4 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e1a8      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001070:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	4925      	ldr	r1, [pc, #148]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 800108c:	4313      	orrs	r3, r2
 800108e:	600b      	str	r3, [r1, #0]
 8001090:	e015      	b.n	80010be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001092:	4b24      	ldr	r3, [pc, #144]	; (8001124 <HAL_RCC_OscConfig+0x244>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001098:	f7ff fe0c 	bl	8000cb4 <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a0:	f7ff fe08 	bl	8000cb4 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e187      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d036      	beq.n	8001138 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d016      	beq.n	8001100 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <HAL_RCC_OscConfig+0x248>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d8:	f7ff fdec 	bl	8000cb4 <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fde8 	bl	8000cb4 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e167      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010f2:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <HAL_RCC_OscConfig+0x240>)
 80010f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x200>
 80010fe:	e01b      	b.n	8001138 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_RCC_OscConfig+0x248>)
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001106:	f7ff fdd5 	bl	8000cb4 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800110c:	e00e      	b.n	800112c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800110e:	f7ff fdd1 	bl	8000cb4 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d907      	bls.n	800112c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e150      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
 8001120:	40023800 	.word	0x40023800
 8001124:	42470000 	.word	0x42470000
 8001128:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112c:	4b88      	ldr	r3, [pc, #544]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800112e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1ea      	bne.n	800110e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 8097 	beq.w	8001274 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114a:	4b81      	ldr	r3, [pc, #516]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10f      	bne.n	8001176 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b7d      	ldr	r3, [pc, #500]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a7c      	ldr	r2, [pc, #496]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b7a      	ldr	r3, [pc, #488]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001172:	2301      	movs	r3, #1
 8001174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001176:	4b77      	ldr	r3, [pc, #476]	; (8001354 <HAL_RCC_OscConfig+0x474>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800117e:	2b00      	cmp	r3, #0
 8001180:	d118      	bne.n	80011b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001182:	4b74      	ldr	r3, [pc, #464]	; (8001354 <HAL_RCC_OscConfig+0x474>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a73      	ldr	r2, [pc, #460]	; (8001354 <HAL_RCC_OscConfig+0x474>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118e:	f7ff fd91 	bl	8000cb4 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001196:	f7ff fd8d 	bl	8000cb4 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e10c      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a8:	4b6a      	ldr	r3, [pc, #424]	; (8001354 <HAL_RCC_OscConfig+0x474>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d106      	bne.n	80011ca <HAL_RCC_OscConfig+0x2ea>
 80011bc:	4b64      	ldr	r3, [pc, #400]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c0:	4a63      	ldr	r2, [pc, #396]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6713      	str	r3, [r2, #112]	; 0x70
 80011c8:	e01c      	b.n	8001204 <HAL_RCC_OscConfig+0x324>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b05      	cmp	r3, #5
 80011d0:	d10c      	bne.n	80011ec <HAL_RCC_OscConfig+0x30c>
 80011d2:	4b5f      	ldr	r3, [pc, #380]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d6:	4a5e      	ldr	r2, [pc, #376]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6713      	str	r3, [r2, #112]	; 0x70
 80011de:	4b5c      	ldr	r3, [pc, #368]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e2:	4a5b      	ldr	r2, [pc, #364]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6713      	str	r3, [r2, #112]	; 0x70
 80011ea:	e00b      	b.n	8001204 <HAL_RCC_OscConfig+0x324>
 80011ec:	4b58      	ldr	r3, [pc, #352]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f0:	4a57      	ldr	r2, [pc, #348]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	6713      	str	r3, [r2, #112]	; 0x70
 80011f8:	4b55      	ldr	r3, [pc, #340]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fc:	4a54      	ldr	r2, [pc, #336]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80011fe:	f023 0304 	bic.w	r3, r3, #4
 8001202:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d015      	beq.n	8001238 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120c:	f7ff fd52 	bl	8000cb4 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001212:	e00a      	b.n	800122a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7ff fd4e 	bl	8000cb4 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001222:	4293      	cmp	r3, r2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e0cb      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122a:	4b49      	ldr	r3, [pc, #292]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800122c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0ee      	beq.n	8001214 <HAL_RCC_OscConfig+0x334>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001238:	f7ff fd3c 	bl	8000cb4 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123e:	e00a      	b.n	8001256 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001240:	f7ff fd38 	bl	8000cb4 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	f241 3288 	movw	r2, #5000	; 0x1388
 800124e:	4293      	cmp	r3, r2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e0b5      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001256:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 8001258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1ee      	bne.n	8001240 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d105      	bne.n	8001274 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001268:	4b39      	ldr	r3, [pc, #228]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a38      	ldr	r2, [pc, #224]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800126e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80a1 	beq.w	80013c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b08      	cmp	r3, #8
 8001288:	d05c      	beq.n	8001344 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d141      	bne.n	8001316 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <HAL_RCC_OscConfig+0x478>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fd0c 	bl	8000cb4 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a0:	f7ff fd08 	bl	8000cb4 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e087      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b2:	4b27      	ldr	r3, [pc, #156]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69da      	ldr	r2, [r3, #28]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	431a      	orrs	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	019b      	lsls	r3, r3, #6
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	085b      	lsrs	r3, r3, #1
 80012d6:	3b01      	subs	r3, #1
 80012d8:	041b      	lsls	r3, r3, #16
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e0:	061b      	lsls	r3, r3, #24
 80012e2:	491b      	ldr	r1, [pc, #108]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <HAL_RCC_OscConfig+0x478>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fce1 	bl	8000cb4 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fcdd 	bl	8000cb4 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e05c      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x416>
 8001314:	e054      	b.n	80013c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	4b10      	ldr	r3, [pc, #64]	; (8001358 <HAL_RCC_OscConfig+0x478>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fcca 	bl	8000cb4 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fcc6 	bl	8000cb4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e045      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_RCC_OscConfig+0x470>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x444>
 8001342:	e03d      	b.n	80013c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d107      	bne.n	800135c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e038      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000
 8001358:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_RCC_OscConfig+0x4ec>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d028      	beq.n	80013bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001374:	429a      	cmp	r2, r3
 8001376:	d121      	bne.n	80013bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001382:	429a      	cmp	r2, r3
 8001384:	d11a      	bne.n	80013bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800138c:	4013      	ands	r3, r2
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001392:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001394:	4293      	cmp	r3, r2
 8001396:	d111      	bne.n	80013bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	085b      	lsrs	r3, r3, #1
 80013a4:	3b01      	subs	r3, #1
 80013a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d107      	bne.n	80013bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0cc      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e4:	4b68      	ldr	r3, [pc, #416]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d90c      	bls.n	800140c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f2:	4b65      	ldr	r3, [pc, #404]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	d001      	beq.n	800140c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e0b8      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d020      	beq.n	800145a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001424:	4b59      	ldr	r3, [pc, #356]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800142a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800142e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	4a52      	ldr	r2, [pc, #328]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001442:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001446:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001448:	4b50      	ldr	r3, [pc, #320]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	494d      	ldr	r1, [pc, #308]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001456:	4313      	orrs	r3, r2
 8001458:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d044      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d107      	bne.n	800147e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146e:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d119      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e07f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b02      	cmp	r3, #2
 8001484:	d003      	beq.n	800148e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800148a:	2b03      	cmp	r3, #3
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e06f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	4b3b      	ldr	r3, [pc, #236]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e067      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f023 0203 	bic.w	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	4934      	ldr	r1, [pc, #208]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c0:	f7ff fbf8 	bl	8000cb4 <HAL_GetTick>
 80014c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c6:	e00a      	b.n	80014de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c8:	f7ff fbf4 	bl	8000cb4 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e04f      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 020c 	and.w	r2, r3, #12
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1eb      	bne.n	80014c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d20c      	bcs.n	8001518 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b22      	ldr	r3, [pc, #136]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b20      	ldr	r3, [pc, #128]	; (8001588 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e032      	b.n	800157e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d008      	beq.n	8001536 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4916      	ldr	r1, [pc, #88]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d009      	beq.n	8001556 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	490e      	ldr	r1, [pc, #56]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	4313      	orrs	r3, r2
 8001554:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001556:	f000 f821 	bl	800159c <HAL_RCC_GetSysClockFreq>
 800155a:	4602      	mov	r2, r0
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_ClockConfig+0x1bc>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	490a      	ldr	r1, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	5ccb      	ldrb	r3, [r1, r3]
 800156a:	fa22 f303 	lsr.w	r3, r2, r3
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <HAL_RCC_ClockConfig+0x1c8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fb58 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023c00 	.word	0x40023c00
 800158c:	40023800 	.word	0x40023800
 8001590:	080052e8 	.word	0x080052e8
 8001594:	2000002c 	.word	0x2000002c
 8001598:	20000030 	.word	0x20000030

0800159c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800159c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a0:	b094      	sub	sp, #80	; 0x50
 80015a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015a4:	2300      	movs	r3, #0
 80015a6:	647b      	str	r3, [r7, #68]	; 0x44
 80015a8:	2300      	movs	r3, #0
 80015aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015ac:	2300      	movs	r3, #0
 80015ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80015b0:	2300      	movs	r3, #0
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015b4:	4b79      	ldr	r3, [pc, #484]	; (800179c <HAL_RCC_GetSysClockFreq+0x200>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d00d      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0x40>
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	f200 80e1 	bhi.w	8001788 <HAL_RCC_GetSysClockFreq+0x1ec>
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d002      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x34>
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d003      	beq.n	80015d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80015ce:	e0db      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d0:	4b73      	ldr	r3, [pc, #460]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80015d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80015d4:	e0db      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015d6:	4b73      	ldr	r3, [pc, #460]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80015d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80015da:	e0d8      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015dc:	4b6f      	ldr	r3, [pc, #444]	; (800179c <HAL_RCC_GetSysClockFreq+0x200>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e6:	4b6d      	ldr	r3, [pc, #436]	; (800179c <HAL_RCC_GetSysClockFreq+0x200>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d063      	beq.n	80016ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015f2:	4b6a      	ldr	r3, [pc, #424]	; (800179c <HAL_RCC_GetSysClockFreq+0x200>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	099b      	lsrs	r3, r3, #6
 80015f8:	2200      	movs	r2, #0
 80015fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80015fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80015fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001604:	633b      	str	r3, [r7, #48]	; 0x30
 8001606:	2300      	movs	r3, #0
 8001608:	637b      	str	r3, [r7, #52]	; 0x34
 800160a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800160e:	4622      	mov	r2, r4
 8001610:	462b      	mov	r3, r5
 8001612:	f04f 0000 	mov.w	r0, #0
 8001616:	f04f 0100 	mov.w	r1, #0
 800161a:	0159      	lsls	r1, r3, #5
 800161c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001620:	0150      	lsls	r0, r2, #5
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4621      	mov	r1, r4
 8001628:	1a51      	subs	r1, r2, r1
 800162a:	6139      	str	r1, [r7, #16]
 800162c:	4629      	mov	r1, r5
 800162e:	eb63 0301 	sbc.w	r3, r3, r1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001640:	4659      	mov	r1, fp
 8001642:	018b      	lsls	r3, r1, #6
 8001644:	4651      	mov	r1, sl
 8001646:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800164a:	4651      	mov	r1, sl
 800164c:	018a      	lsls	r2, r1, #6
 800164e:	4651      	mov	r1, sl
 8001650:	ebb2 0801 	subs.w	r8, r2, r1
 8001654:	4659      	mov	r1, fp
 8001656:	eb63 0901 	sbc.w	r9, r3, r1
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001666:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800166a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800166e:	4690      	mov	r8, r2
 8001670:	4699      	mov	r9, r3
 8001672:	4623      	mov	r3, r4
 8001674:	eb18 0303 	adds.w	r3, r8, r3
 8001678:	60bb      	str	r3, [r7, #8]
 800167a:	462b      	mov	r3, r5
 800167c:	eb49 0303 	adc.w	r3, r9, r3
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800168e:	4629      	mov	r1, r5
 8001690:	024b      	lsls	r3, r1, #9
 8001692:	4621      	mov	r1, r4
 8001694:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001698:	4621      	mov	r1, r4
 800169a:	024a      	lsls	r2, r1, #9
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016a2:	2200      	movs	r2, #0
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016ac:	f7fe fd94 	bl	80001d8 <__aeabi_uldivmod>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4613      	mov	r3, r2
 80016b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80016b8:	e058      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ba:	4b38      	ldr	r3, [pc, #224]	; (800179c <HAL_RCC_GetSysClockFreq+0x200>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	099b      	lsrs	r3, r3, #6
 80016c0:	2200      	movs	r2, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	4611      	mov	r1, r2
 80016c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016ca:	623b      	str	r3, [r7, #32]
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
 80016d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016d4:	4642      	mov	r2, r8
 80016d6:	464b      	mov	r3, r9
 80016d8:	f04f 0000 	mov.w	r0, #0
 80016dc:	f04f 0100 	mov.w	r1, #0
 80016e0:	0159      	lsls	r1, r3, #5
 80016e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016e6:	0150      	lsls	r0, r2, #5
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4641      	mov	r1, r8
 80016ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80016f2:	4649      	mov	r1, r9
 80016f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001704:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001708:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800170c:	ebb2 040a 	subs.w	r4, r2, sl
 8001710:	eb63 050b 	sbc.w	r5, r3, fp
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	00eb      	lsls	r3, r5, #3
 800171e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001722:	00e2      	lsls	r2, r4, #3
 8001724:	4614      	mov	r4, r2
 8001726:	461d      	mov	r5, r3
 8001728:	4643      	mov	r3, r8
 800172a:	18e3      	adds	r3, r4, r3
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	464b      	mov	r3, r9
 8001730:	eb45 0303 	adc.w	r3, r5, r3
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001742:	4629      	mov	r1, r5
 8001744:	028b      	lsls	r3, r1, #10
 8001746:	4621      	mov	r1, r4
 8001748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800174c:	4621      	mov	r1, r4
 800174e:	028a      	lsls	r2, r1, #10
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001756:	2200      	movs	r2, #0
 8001758:	61bb      	str	r3, [r7, #24]
 800175a:	61fa      	str	r2, [r7, #28]
 800175c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001760:	f7fe fd3a 	bl	80001d8 <__aeabi_uldivmod>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4613      	mov	r3, r2
 800176a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_GetSysClockFreq+0x200>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	0c1b      	lsrs	r3, r3, #16
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	3301      	adds	r3, #1
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800177c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800177e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001780:	fbb2 f3f3 	udiv	r3, r2, r3
 8001784:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001786:	e002      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800178a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800178c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800178e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001790:	4618      	mov	r0, r3
 8001792:	3750      	adds	r7, #80	; 0x50
 8001794:	46bd      	mov	sp, r7
 8001796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	00f42400 	.word	0x00f42400
 80017a4:	007a1200 	.word	0x007a1200

080017a8 <LL_GPIO_SetPinMode>:
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2103      	movs	r1, #3
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	401a      	ands	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	61bb      	str	r3, [r7, #24]
  return result;
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	431a      	orrs	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	601a      	str	r2, [r3, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_GPIO_SetPinOutputType>:
{
 8001806:	b480      	push	{r7}
 8001808:	b085      	sub	sp, #20
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	43db      	mvns	r3, r3
 800181a:	401a      	ands	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	431a      	orrs	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	605a      	str	r2, [r3, #4]
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <LL_GPIO_SetPinSpeed>:
{
 8001836:	b480      	push	{r7}
 8001838:	b089      	sub	sp, #36	; 0x24
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	fa93 f3a3 	rbit	r3, r3
 8001850:	613b      	str	r3, [r7, #16]
  return result;
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	2103      	movs	r1, #3
 800185e:	fa01 f303 	lsl.w	r3, r1, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	401a      	ands	r2, r3
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa93 f3a3 	rbit	r3, r3
 8001870:	61bb      	str	r3, [r7, #24]
  return result;
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	fab3 f383 	clz	r3, r3
 8001878:	b2db      	uxtb	r3, r3
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	6879      	ldr	r1, [r7, #4]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	431a      	orrs	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	609a      	str	r2, [r3, #8]
}
 8001888:	bf00      	nop
 800188a:	3724      	adds	r7, #36	; 0x24
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_GPIO_SetPinPull>:
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa93 f3a3 	rbit	r3, r3
 80018ae:	613b      	str	r3, [r7, #16]
  return result;
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	fab3 f383 	clz	r3, r3
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2103      	movs	r1, #3
 80018bc:	fa01 f303 	lsl.w	r3, r1, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	401a      	ands	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	fa93 f3a3 	rbit	r3, r3
 80018ce:	61bb      	str	r3, [r7, #24]
  return result;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fab3 f383 	clz	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	431a      	orrs	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	60da      	str	r2, [r3, #12]
}
 80018e6:	bf00      	nop
 80018e8:	3724      	adds	r7, #36	; 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_GPIO_SetAFPin_0_7>:
{
 80018f2:	b480      	push	{r7}
 80018f4:	b089      	sub	sp, #36	; 0x24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a1a      	ldr	r2, [r3, #32]
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	613b      	str	r3, [r7, #16]
  return result;
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	210f      	movs	r1, #15
 800191a:	fa01 f303 	lsl.w	r3, r1, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	401a      	ands	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	fa93 f3a3 	rbit	r3, r3
 800192c:	61bb      	str	r3, [r7, #24]
  return result;
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	fab3 f383 	clz	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	fa01 f303 	lsl.w	r3, r1, r3
 800193e:	431a      	orrs	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	621a      	str	r2, [r3, #32]
}
 8001944:	bf00      	nop
 8001946:	3724      	adds	r7, #36	; 0x24
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_GPIO_SetAFPin_8_15>:
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	613b      	str	r3, [r7, #16]
  return result;
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	210f      	movs	r1, #15
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	401a      	ands	r2, r3
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	0a1b      	lsrs	r3, r3, #8
 8001986:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	61bb      	str	r3, [r7, #24]
  return result;
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	fab3 f383 	clz	r3, r3
 8001996:	b2db      	uxtb	r3, r3
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	431a      	orrs	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80019a6:	bf00      	nop
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b088      	sub	sp, #32
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	613b      	str	r3, [r7, #16]
  return result;
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80019dc:	e050      	b.n	8001a80 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	2101      	movs	r1, #1
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d042      	beq.n	8001a7a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d003      	beq.n	8001a04 <LL_GPIO_Init+0x52>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d10d      	bne.n	8001a20 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	69b9      	ldr	r1, [r7, #24]
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff12 	bl	8001836 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	461a      	mov	r2, r3
 8001a18:	69b9      	ldr	r1, [r7, #24]
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fef3 	bl	8001806 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	461a      	mov	r2, r3
 8001a26:	69b9      	ldr	r1, [r7, #24]
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff33 	bl	8001894 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d11a      	bne.n	8001a6c <LL_GPIO_Init+0xba>
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	60bb      	str	r3, [r7, #8]
  return result;
 8001a42:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001a44:	fab3 f383 	clz	r3, r3
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b07      	cmp	r3, #7
 8001a4c:	d807      	bhi.n	8001a5e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	461a      	mov	r2, r3
 8001a54:	69b9      	ldr	r1, [r7, #24]
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ff4b 	bl	80018f2 <LL_GPIO_SetAFPin_0_7>
 8001a5c:	e006      	b.n	8001a6c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	461a      	mov	r2, r3
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ff72 	bl	8001950 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	461a      	mov	r2, r3
 8001a72:	69b9      	ldr	r1, [r7, #24]
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff fe97 	bl	80017a8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1a7      	bne.n	80019de <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3720      	adds	r7, #32
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <LL_SPI_IsEnabled>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa8:	2b40      	cmp	r3, #64	; 0x40
 8001aaa:	d101      	bne.n	8001ab0 <LL_SPI_IsEnabled+0x18>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <LL_SPI_IsEnabled+0x1a>
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_SPI_SetCRCPolynomial>:
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	461a      	mov	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ffd3 	bl	8001a98 <LL_SPI_IsEnabled>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d139      	bne.n	8001b6c <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b00:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	6811      	ldr	r1, [r2, #0]
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	6852      	ldr	r2, [r2, #4]
 8001b0c:	4311      	orrs	r1, r2
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	6892      	ldr	r2, [r2, #8]
 8001b12:	4311      	orrs	r1, r2
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	68d2      	ldr	r2, [r2, #12]
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	6912      	ldr	r2, [r2, #16]
 8001b1e:	4311      	orrs	r1, r2
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	6952      	ldr	r2, [r2, #20]
 8001b24:	4311      	orrs	r1, r2
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	6992      	ldr	r2, [r2, #24]
 8001b2a:	4311      	orrs	r1, r2
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	69d2      	ldr	r2, [r2, #28]
 8001b30:	4311      	orrs	r1, r2
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	6a12      	ldr	r2, [r2, #32]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f023 0204 	bic.w	r2, r3, #4
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	0c1b      	lsrs	r3, r3, #16
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b5a:	d105      	bne.n	8001b68 <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffab 	bl	8001abe <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	61da      	str	r2, [r3, #28]
  return status;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5100)
/**
@brief  This function writes the data into W5100 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	70fb      	strb	r3, [r7, #3]
   WIZCHIP_CRITICAL_ENTER();
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <WIZCHIP_WRITE+0x58>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <WIZCHIP_WRITE+0x58>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0xF0);
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <WIZCHIP_WRITE+0x58>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	20f0      	movs	r0, #240	; 0xf0
 8001ba2:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <WIZCHIP_WRITE+0x58>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	0a12      	lsrs	r2, r2, #8
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <WIZCHIP_WRITE+0x58>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <WIZCHIP_WRITE+0x58>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <WIZCHIP_WRITE+0x58>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001bce:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <WIZCHIP_WRITE+0x58>)
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	4798      	blx	r3
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000038 	.word	0x20000038

08001be0 <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5100 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <WIZCHIP_READ+0x58>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <WIZCHIP_READ+0x58>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <WIZCHIP_READ+0x58>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	200f      	movs	r0, #15
 8001bfa:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <WIZCHIP_READ+0x58>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	0a12      	lsrs	r2, r2, #8
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	4610      	mov	r0, r2
 8001c08:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <WIZCHIP_READ+0x58>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	4610      	mov	r0, r2
 8001c14:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 8001c16:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <WIZCHIP_READ+0x58>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	4798      	blx	r3
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"   
#endif

   WIZCHIP.CS._deselect();
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <WIZCHIP_READ+0x58>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <WIZCHIP_READ+0x58>)
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	4798      	blx	r3
   return ret;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000038 	.word	0x20000038

08001c3c <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5100 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	82fb      	strh	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x98>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x98>)
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  for(i = 0; i < len; i++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	82fb      	strh	r3, [r7, #22]
 8001c5e:	e02a      	b.n	8001cb6 <WIZCHIP_WRITE_BUF+0x7a>
  {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8001c60:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x98>)
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(0xF0);
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x98>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	20f0      	movs	r0, #240	; 0xf0
 8001c6c:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x98>)
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	b291      	uxth	r1, r2
 8001c76:	8afa      	ldrh	r2, [r7, #22]
 8001c78:	440a      	add	r2, r1
 8001c7a:	b292      	uxth	r2, r2
 8001c7c:	0a12      	lsrs	r2, r2, #8
 8001c7e:	b292      	uxth	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	4610      	mov	r0, r2
 8001c84:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x98>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	68fa      	ldr	r2, [r7, #12]
 8001c8c:	b2d1      	uxtb	r1, r2
 8001c8e:	8afa      	ldrh	r2, [r7, #22]
 8001c90:	b2d2      	uxtb	r2, r2
 8001c92:	440a      	add	r2, r1
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	4610      	mov	r0, r2
 8001c98:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x98>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	8afa      	ldrh	r2, [r7, #22]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	440a      	add	r2, r1
 8001ca4:	7812      	ldrb	r2, [r2, #0]
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4798      	blx	r3
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x98>)
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	4798      	blx	r3
  for(i = 0; i < len; i++)
 8001cb0:	8afb      	ldrh	r3, [r7, #22]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	82fb      	strh	r3, [r7, #22]
 8001cb6:	8afa      	ldrh	r2, [r7, #22]
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d3d0      	bcc.n	8001c60 <WIZCHIP_WRITE_BUF+0x24>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x98>)
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001cc4:	4b03      	ldr	r3, [pc, #12]	; (8001cd4 <WIZCHIP_WRITE_BUF+0x98>)
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	4798      	blx	r3
}
 8001cca:	bf00      	nop
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000038 	.word	0x20000038

08001cd8 <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5100 memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <WIZCHIP_READ_BUF+0x98>)
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <WIZCHIP_READ_BUF+0x98>)
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	4798      	blx	r3
   
   #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   for(i = 0; i < len; i++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	82fb      	strh	r3, [r7, #22]
 8001cfa:	e02a      	b.n	8001d52 <WIZCHIP_READ_BUF+0x7a>
   {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <WIZCHIP_READ_BUF+0x98>)
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(0x0F);
 8001d02:	4b1b      	ldr	r3, [pc, #108]	; (8001d70 <WIZCHIP_READ_BUF+0x98>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	200f      	movs	r0, #15
 8001d08:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <WIZCHIP_READ_BUF+0x98>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	b291      	uxth	r1, r2
 8001d12:	8afa      	ldrh	r2, [r7, #22]
 8001d14:	440a      	add	r2, r1
 8001d16:	b292      	uxth	r2, r2
 8001d18:	0a12      	lsrs	r2, r2, #8
 8001d1a:	b292      	uxth	r2, r2
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <WIZCHIP_READ_BUF+0x98>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	b2d1      	uxtb	r1, r2
 8001d2a:	8afa      	ldrh	r2, [r7, #22]
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440a      	add	r2, r1
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	4610      	mov	r0, r2
 8001d34:	4798      	blx	r3
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <WIZCHIP_READ_BUF+0x98>)
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	8afa      	ldrh	r2, [r7, #22]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	188c      	adds	r4, r1, r2
 8001d40:	4798      	blx	r3
 8001d42:	4603      	mov	r3, r0
 8001d44:	7023      	strb	r3, [r4, #0]
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <WIZCHIP_READ_BUF+0x98>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	4798      	blx	r3
   for(i = 0; i < len; i++)
 8001d4c:	8afb      	ldrh	r3, [r7, #22]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	82fb      	strh	r3, [r7, #22]
 8001d52:	8afa      	ldrh	r2, [r7, #22]
 8001d54:	88fb      	ldrh	r3, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d3d0      	bcc.n	8001cfc <WIZCHIP_READ_BUF+0x24>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <WIZCHIP_READ_BUF+0x98>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001d60:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <WIZCHIP_READ_BUF+0x98>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	4798      	blx	r3
}
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd90      	pop	{r4, r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000038 	.word	0x20000038

08001d74 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 8001d74:	b590      	push	{r4, r7, lr}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	81fb      	strh	r3, [r7, #14]
 8001d82:	2300      	movs	r3, #0
 8001d84:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	3320      	adds	r3, #32
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff26 	bl	8001be0 <WIZCHIP_READ>
 8001d94:	4603      	mov	r3, r0
 8001d96:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001d98:	89bb      	ldrh	r3, [r7, #12]
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	b29c      	uxth	r4, r3
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	3304      	adds	r3, #4
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	3321      	adds	r3, #33	; 0x21
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff1a 	bl	8001be0 <WIZCHIP_READ>
 8001dac:	4603      	mov	r3, r0
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4423      	add	r3, r4
 8001db2:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001db4:	89bb      	ldrh	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d016      	beq.n	8001de8 <getSn_TX_FSR+0x74>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	3320      	adds	r3, #32
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff0c 	bl	8001be0 <WIZCHIP_READ>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001dcc:	89fb      	ldrh	r3, [r7, #14]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	b29c      	uxth	r4, r3
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	021b      	lsls	r3, r3, #8
 8001dd8:	3321      	adds	r3, #33	; 0x21
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff00 	bl	8001be0 <WIZCHIP_READ>
 8001de0:	4603      	mov	r3, r0
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	4423      	add	r3, r4
 8001de6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001de8:	89fa      	ldrh	r2, [r7, #14]
 8001dea:	89bb      	ldrh	r3, [r7, #12]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d1ca      	bne.n	8001d86 <getSn_TX_FSR+0x12>
   return val;
 8001df0:	89fb      	ldrh	r3, [r7, #14]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd90      	pop	{r4, r7, pc}

08001dfa <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001dfa:	b590      	push	{r4, r7, lr}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	81fb      	strh	r3, [r7, #14]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	3326      	adds	r3, #38	; 0x26
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fee3 	bl	8001be0 <WIZCHIP_READ>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001e1e:	89bb      	ldrh	r3, [r7, #12]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	b29c      	uxth	r4, r3
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	3304      	adds	r3, #4
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	3327      	adds	r3, #39	; 0x27
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fed7 	bl	8001be0 <WIZCHIP_READ>
 8001e32:	4603      	mov	r3, r0
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4423      	add	r3, r4
 8001e38:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001e3a:	89bb      	ldrh	r3, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d016      	beq.n	8001e6e <getSn_RX_RSR+0x74>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	3304      	adds	r3, #4
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	3326      	adds	r3, #38	; 0x26
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fec9 	bl	8001be0 <WIZCHIP_READ>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8001e52:	89fb      	ldrh	r3, [r7, #14]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	b29c      	uxth	r4, r3
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	021b      	lsls	r3, r3, #8
 8001e5e:	3327      	adds	r3, #39	; 0x27
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff febd 	bl	8001be0 <WIZCHIP_READ>
 8001e66:	4603      	mov	r3, r0
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4423      	add	r3, r4
 8001e6c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001e6e:	89fa      	ldrh	r2, [r7, #14]
 8001e70:	89bb      	ldrh	r3, [r7, #12]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d1ca      	bne.n	8001e0c <getSn_RX_RSR+0x12>
   return val;
 8001e76:	89fb      	ldrh	r3, [r7, #14]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd90      	pop	{r4, r7, pc}

08001e80 <getSn_RxBASE>:

/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////
uint32_t getSn_RxBASE(uint8_t sn)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t rxbase = _W5100_IO_BASE_ + _WIZCHIP_IO_RXBUF_;
#else   
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 8001e8a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e8e:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e020      	b.n	8001ed8 <getSn_RxBASE+0x58>
      rxbase += getSn_RxMAX(i);
 8001e96:	201a      	movs	r0, #26
 8001e98:	f7ff fea2 	bl	8001be0 <WIZCHIP_READ>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	ea01 0203 	and.w	r2, r1, r3
 8001eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa42 f303 	asr.w	r3, r2, r3
 8001eba:	2201      	movs	r2, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	029b      	lsls	r3, r3, #10
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	4413      	add	r3, r2
 8001eca:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 8001ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	dbd9      	blt.n	8001e96 <getSn_RxBASE+0x16>

   return rxbase;
 8001ee2:	68bb      	ldr	r3, [r7, #8]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <getSn_TxBASE>:

uint32_t getSn_TxBASE(uint8_t sn)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t txbase = _W5100_IO_BASE_ + _WIZCHIP_IO_TXBUF_;
#else   
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 8001ef6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001efa:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
 8001f00:	e020      	b.n	8001f44 <getSn_TxBASE+0x58>
      txbase += getSn_TxMAX(i);
 8001f02:	201b      	movs	r0, #27
 8001f04:	f7ff fe6c 	bl	8001be0 <WIZCHIP_READ>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	ea01 0203 	and.w	r2, r1, r3
 8001f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa42 f303 	asr.w	r3, r2, r3
 8001f26:	2201      	movs	r2, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	029b      	lsls	r3, r3, #10
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4413      	add	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 8001f38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	dbd9      	blt.n	8001f02 <getSn_TxBASE+0x16>
   return txbase;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <wiz_send_data>:
the data in transmite buffer. Here also take care of the condition while it exceed
the Tx memory uper-bound of socket.

*/
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
 8001f64:	4613      	mov	r3, r2
 8001f66:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint16_t dst_ptr;

  ptr = getSn_TX_WR(sn);
 8001f68:	79fb      	ldrb	r3, [r7, #7]
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	3324      	adds	r3, #36	; 0x24
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fe35 	bl	8001be0 <WIZCHIP_READ>
 8001f76:	4603      	mov	r3, r0
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	b29c      	uxth	r4, r3
 8001f7e:	79fb      	ldrb	r3, [r7, #7]
 8001f80:	3304      	adds	r3, #4
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	3325      	adds	r3, #37	; 0x25
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fe2a 	bl	8001be0 <WIZCHIP_READ>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	4423      	add	r3, r4
 8001f92:	81fb      	strh	r3, [r7, #14]

  dst_mask = ptr & getSn_TxMASK(sn);
 8001f94:	201b      	movs	r0, #27
 8001f96:	f7ff fe23 	bl	8001be0 <WIZCHIP_READ>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	ea01 0203 	and.w	r2, r1, r3
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	fa42 f303 	asr.w	r3, r2, r3
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	b21b      	sxth	r3, r3
 8001fce:	81bb      	strh	r3, [r7, #12]
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff8a 	bl	8001eec <getSn_TxBASE>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	89bb      	ldrh	r3, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	817b      	strh	r3, [r7, #10]
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 8001fe2:	89ba      	ldrh	r2, [r7, #12]
 8001fe4:	88bb      	ldrh	r3, [r7, #4]
 8001fe6:	18d4      	adds	r4, r2, r3
 8001fe8:	201b      	movs	r0, #27
 8001fea:	f7ff fdf9 	bl	8001be0 <WIZCHIP_READ>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	ea01 0203 	and.w	r2, r1, r3
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa42 f303 	asr.w	r3, r2, r3
 8002008:	2201      	movs	r2, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	b29b      	uxth	r3, r3
 8002010:	029b      	lsls	r3, r3, #10
 8002012:	429c      	cmp	r4, r3
 8002014:	dd33      	ble.n	800207e <wiz_send_data+0x126>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 8002016:	201b      	movs	r0, #27
 8002018:	f7ff fde2 	bl	8001be0 <WIZCHIP_READ>
 800201c:	4603      	mov	r3, r0
 800201e:	4619      	mov	r1, r3
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	2203      	movs	r2, #3
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	ea01 0203 	and.w	r2, r1, r3
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa42 f303 	asr.w	r3, r2, r3
 8002036:	2201      	movs	r2, #1
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	b29b      	uxth	r3, r3
 800203e:	029b      	lsls	r3, r3, #10
 8002040:	b29a      	uxth	r2, r3
 8002042:	89bb      	ldrh	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	813b      	strh	r3, [r7, #8]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 8002048:	897b      	ldrh	r3, [r7, #10]
 800204a:	893a      	ldrh	r2, [r7, #8]
 800204c:	6839      	ldr	r1, [r7, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fdf4 	bl	8001c3c <WIZCHIP_WRITE_BUF>
    wizdata += size;
 8002054:	893b      	ldrh	r3, [r7, #8]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	603b      	str	r3, [r7, #0]
    size = len - size;
 800205c:	88ba      	ldrh	r2, [r7, #4]
 800205e:	893b      	ldrh	r3, [r7, #8]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	813b      	strh	r3, [r7, #8]
    dst_ptr = getSn_TxBASE(sn);
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff40 	bl	8001eec <getSn_TxBASE>
 800206c:	4603      	mov	r3, r0
 800206e:	817b      	strh	r3, [r7, #10]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 8002070:	897b      	ldrh	r3, [r7, #10]
 8002072:	893a      	ldrh	r2, [r7, #8]
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fde0 	bl	8001c3c <WIZCHIP_WRITE_BUF>
 800207c:	e005      	b.n	800208a <wiz_send_data+0x132>
  } 
  else
  {
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 800207e:	897b      	ldrh	r3, [r7, #10]
 8002080:	88ba      	ldrh	r2, [r7, #4]
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fdd9 	bl	8001c3c <WIZCHIP_WRITE_BUF>
  }

  ptr += len;
 800208a:	89fa      	ldrh	r2, [r7, #14]
 800208c:	88bb      	ldrh	r3, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	81fb      	strh	r3, [r7, #14]

  setSn_TX_WR(sn, ptr);  
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	3304      	adds	r3, #4
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	3324      	adds	r3, #36	; 0x24
 800209a:	461a      	mov	r2, r3
 800209c:	89fb      	ldrh	r3, [r7, #14]
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f7ff fd6c 	bl	8001b84 <WIZCHIP_WRITE>
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	3304      	adds	r3, #4
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	3325      	adds	r3, #37	; 0x25
 80020b4:	461a      	mov	r2, r3
 80020b6:	89fb      	ldrh	r3, [r7, #14]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	4619      	mov	r1, r3
 80020bc:	4610      	mov	r0, r2
 80020be:	f7ff fd61 	bl	8001b84 <WIZCHIP_WRITE>
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd90      	pop	{r4, r7, pc}

080020ca <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80020ca:	b590      	push	{r4, r7, lr}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	6039      	str	r1, [r7, #0]
 80020d4:	71fb      	strb	r3, [r7, #7]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  ptr = getSn_RX_RD(sn);
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	3304      	adds	r3, #4
 80020de:	021b      	lsls	r3, r3, #8
 80020e0:	3328      	adds	r3, #40	; 0x28
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fd7c 	bl	8001be0 <WIZCHIP_READ>
 80020e8:	4603      	mov	r3, r0
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	b29c      	uxth	r4, r3
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	3304      	adds	r3, #4
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	3329      	adds	r3, #41	; 0x29
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fd71 	bl	8001be0 <WIZCHIP_READ>
 80020fe:	4603      	mov	r3, r0
 8002100:	b29b      	uxth	r3, r3
 8002102:	4423      	add	r3, r4
 8002104:	81fb      	strh	r3, [r7, #14]
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 8002106:	201a      	movs	r0, #26
 8002108:	f7ff fd6a 	bl	8001be0 <WIZCHIP_READ>
 800210c:	4603      	mov	r3, r0
 800210e:	4619      	mov	r1, r3
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	ea01 0203 	and.w	r2, r1, r3
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	fa42 f303 	asr.w	r3, r2, r3
 8002126:	2201      	movs	r2, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	b29b      	uxth	r3, r3
 800212e:	029b      	lsls	r3, r3, #10
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b29a      	uxth	r2, r3
 8002136:	89fb      	ldrh	r3, [r7, #14]
 8002138:	4013      	ands	r3, r2
 800213a:	81bb      	strh	r3, [r7, #12]
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fe9e 	bl	8001e80 <getSn_RxBASE>
 8002144:	4603      	mov	r3, r0
 8002146:	b29a      	uxth	r2, r3
 8002148:	89bb      	ldrh	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	817b      	strh	r3, [r7, #10]

  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 800214e:	89ba      	ldrh	r2, [r7, #12]
 8002150:	88bb      	ldrh	r3, [r7, #4]
 8002152:	18d4      	adds	r4, r2, r3
 8002154:	201a      	movs	r0, #26
 8002156:	f7ff fd43 	bl	8001be0 <WIZCHIP_READ>
 800215a:	4603      	mov	r3, r0
 800215c:	4619      	mov	r1, r3
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	2203      	movs	r2, #3
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	ea01 0203 	and.w	r2, r1, r3
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa42 f303 	asr.w	r3, r2, r3
 8002174:	2201      	movs	r2, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	b29b      	uxth	r3, r3
 800217c:	029b      	lsls	r3, r3, #10
 800217e:	429c      	cmp	r4, r3
 8002180:	dd33      	ble.n	80021ea <wiz_recv_data+0x120>
  {
    size = getSn_RxMAX(sn) - src_mask;
 8002182:	201a      	movs	r0, #26
 8002184:	f7ff fd2c 	bl	8001be0 <WIZCHIP_READ>
 8002188:	4603      	mov	r3, r0
 800218a:	4619      	mov	r1, r3
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2203      	movs	r2, #3
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	ea01 0203 	and.w	r2, r1, r3
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fa42 f303 	asr.w	r3, r2, r3
 80021a2:	2201      	movs	r2, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	029b      	lsls	r3, r3, #10
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	89bb      	ldrh	r3, [r7, #12]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	813b      	strh	r3, [r7, #8]
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 80021b4:	897b      	ldrh	r3, [r7, #10]
 80021b6:	893a      	ldrh	r2, [r7, #8]
 80021b8:	6839      	ldr	r1, [r7, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fd8c 	bl	8001cd8 <WIZCHIP_READ_BUF>
    wizdata += size;
 80021c0:	893b      	ldrh	r3, [r7, #8]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	4413      	add	r3, r2
 80021c6:	603b      	str	r3, [r7, #0]
    size = len - size;
 80021c8:	88ba      	ldrh	r2, [r7, #4]
 80021ca:	893b      	ldrh	r3, [r7, #8]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	813b      	strh	r3, [r7, #8]
	src_ptr = getSn_RxBASE(sn);
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fe54 	bl	8001e80 <getSn_RxBASE>
 80021d8:	4603      	mov	r3, r0
 80021da:	817b      	strh	r3, [r7, #10]
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, size);
 80021dc:	897b      	ldrh	r3, [r7, #10]
 80021de:	893a      	ldrh	r2, [r7, #8]
 80021e0:	6839      	ldr	r1, [r7, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fd78 	bl	8001cd8 <WIZCHIP_READ_BUF>
 80021e8:	e005      	b.n	80021f6 <wiz_recv_data+0x12c>
  } 
  else
  {
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 80021ea:	897b      	ldrh	r3, [r7, #10]
 80021ec:	88ba      	ldrh	r2, [r7, #4]
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fd71 	bl	8001cd8 <WIZCHIP_READ_BUF>
  }
    
  ptr += len;
 80021f6:	89fa      	ldrh	r2, [r7, #14]
 80021f8:	88bb      	ldrh	r3, [r7, #4]
 80021fa:	4413      	add	r3, r2
 80021fc:	81fb      	strh	r3, [r7, #14]
  
  setSn_RX_RD(sn, ptr);
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	3304      	adds	r3, #4
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	3328      	adds	r3, #40	; 0x28
 8002206:	461a      	mov	r2, r3
 8002208:	89fb      	ldrh	r3, [r7, #14]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4619      	mov	r1, r3
 8002212:	4610      	mov	r0, r2
 8002214:	f7ff fcb6 	bl	8001b84 <WIZCHIP_WRITE>
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	3304      	adds	r3, #4
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	3329      	adds	r3, #41	; 0x29
 8002220:	461a      	mov	r2, r3
 8002222:	89fb      	ldrh	r3, [r7, #14]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	4619      	mov	r1, r3
 8002228:	4610      	mov	r0, r2
 800222a:	f7ff fcab 	bl	8001b84 <WIZCHIP_WRITE>
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	bd90      	pop	{r4, r7, pc}

08002236 <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8002236:	b590      	push	{r4, r7, lr}
 8002238:	b085      	sub	sp, #20
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	460a      	mov	r2, r1
 8002240:	71fb      	strb	r3, [r7, #7]
 8002242:	4613      	mov	r3, r2
 8002244:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;

  ptr = getSn_RX_RD(sn);
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	3304      	adds	r3, #4
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	3328      	adds	r3, #40	; 0x28
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fcc6 	bl	8001be0 <WIZCHIP_READ>
 8002254:	4603      	mov	r3, r0
 8002256:	b29b      	uxth	r3, r3
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	b29c      	uxth	r4, r3
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	3304      	adds	r3, #4
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	3329      	adds	r3, #41	; 0x29
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fcbb 	bl	8001be0 <WIZCHIP_READ>
 800226a:	4603      	mov	r3, r0
 800226c:	b29b      	uxth	r3, r3
 800226e:	4423      	add	r3, r4
 8002270:	81fb      	strh	r3, [r7, #14]
  
  ptr += len;
 8002272:	89fa      	ldrh	r2, [r7, #14]
 8002274:	88bb      	ldrh	r3, [r7, #4]
 8002276:	4413      	add	r3, r2
 8002278:	81fb      	strh	r3, [r7, #14]
  setSn_RX_RD(sn,ptr);
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	3304      	adds	r3, #4
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	3328      	adds	r3, #40	; 0x28
 8002282:	461a      	mov	r2, r3
 8002284:	89fb      	ldrh	r3, [r7, #14]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	b29b      	uxth	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	4619      	mov	r1, r3
 800228e:	4610      	mov	r0, r2
 8002290:	f7ff fc78 	bl	8001b84 <WIZCHIP_WRITE>
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	3304      	adds	r3, #4
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	3329      	adds	r3, #41	; 0x29
 800229c:	461a      	mov	r2, r3
 800229e:	89fb      	ldrh	r3, [r7, #14]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f7ff fc6d 	bl	8001b84 <WIZCHIP_WRITE>
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd90      	pop	{r4, r7, pc}
	...

080022b4 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4604      	mov	r4, r0
 80022bc:	4608      	mov	r0, r1
 80022be:	4611      	mov	r1, r2
 80022c0:	461a      	mov	r2, r3
 80022c2:	4623      	mov	r3, r4
 80022c4:	71fb      	strb	r3, [r7, #7]
 80022c6:	4603      	mov	r3, r0
 80022c8:	71bb      	strb	r3, [r7, #6]
 80022ca:	460b      	mov	r3, r1
 80022cc:	80bb      	strh	r3, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d902      	bls.n	80022de <socket+0x2a>
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295
 80022dc:	e0e0      	b.n	80024a0 <socket+0x1ec>
	switch(protocol)
 80022de:	79bb      	ldrb	r3, [r7, #6]
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d019      	beq.n	8002318 <socket+0x64>
 80022e4:	2b05      	cmp	r3, #5
 80022e6:	dc14      	bgt.n	8002312 <socket+0x5e>
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d005      	beq.n	80022f8 <socket+0x44>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	dd10      	ble.n	8002312 <socket+0x5e>
 80022f0:	3b02      	subs	r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d80d      	bhi.n	8002312 <socket+0x5e>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 80022f6:	e012      	b.n	800231e <socket+0x6a>
            getSIPR((uint8_t*)&taddr);
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	2204      	movs	r2, #4
 80022fe:	4619      	mov	r1, r3
 8002300:	200f      	movs	r0, #15
 8002302:	f7ff fce9 	bl	8001cd8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d107      	bne.n	800231c <socket+0x68>
 800230c:	f06f 0302 	mvn.w	r3, #2
 8002310:	e0c6      	b.n	80024a0 <socket+0x1ec>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002312:	f06f 0304 	mvn.w	r3, #4
 8002316:	e0c3      	b.n	80024a0 <socket+0x1ec>
         break;
 8002318:	bf00      	nop
 800231a:	e000      	b.n	800231e <socket+0x6a>
	    break;
 800231c:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <socket+0x7a>
 8002328:	f06f 0305 	mvn.w	r3, #5
 800232c:	e0b8      	b.n	80024a0 <socket+0x1ec>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d019      	beq.n	8002368 <socket+0xb4>
	{
   	switch(protocol)
 8002334:	79bb      	ldrb	r3, [r7, #6]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d002      	beq.n	8002340 <socket+0x8c>
 800233a:	2b02      	cmp	r3, #2
 800233c:	d008      	beq.n	8002350 <socket+0x9c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800233e:	e018      	b.n	8002372 <socket+0xbe>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002346:	2b00      	cmp	r3, #0
 8002348:	d110      	bne.n	800236c <socket+0xb8>
 800234a:	f06f 0305 	mvn.w	r3, #5
 800234e:	e0a7      	b.n	80024a0 <socket+0x1ec>
   	      if(flag & SF_IGMP_VER2)
 8002350:	78fb      	ldrb	r3, [r7, #3]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <socket+0xbc>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800235a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800235e:	2b00      	cmp	r3, #0
 8002360:	db06      	blt.n	8002370 <socket+0xbc>
 8002362:	f06f 0305 	mvn.w	r3, #5
 8002366:	e09b      	b.n	80024a0 <socket+0x1ec>
   	}
   }
 8002368:	bf00      	nop
 800236a:	e002      	b.n	8002372 <socket+0xbe>
   	      break;
 800236c:	bf00      	nop
 800236e:	e000      	b.n	8002372 <socket+0xbe>
   	      break;
 8002370:	bf00      	nop
	close(sn);
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f8a1 	bl	80024bc <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	3304      	adds	r3, #4
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	4618      	mov	r0, r3
 8002382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002386:	f023 030f 	bic.w	r3, r3, #15
 800238a:	b25a      	sxtb	r2, r3
 800238c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002390:	4313      	orrs	r3, r2
 8002392:	b25b      	sxtb	r3, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	4619      	mov	r1, r3
 8002398:	f7ff fbf4 	bl	8001b84 <WIZCHIP_WRITE>
    #endif
	if(!port)
 800239c:	88bb      	ldrh	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d110      	bne.n	80023c4 <socket+0x110>
	{
	   port = sock_any_port++;
 80023a2:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <socket+0x1f4>)
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	b291      	uxth	r1, r2
 80023aa:	4a3f      	ldr	r2, [pc, #252]	; (80024a8 <socket+0x1f4>)
 80023ac:	8011      	strh	r1, [r2, #0]
 80023ae:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80023b0:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <socket+0x1f4>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d103      	bne.n	80023c4 <socket+0x110>
 80023bc:	4b3a      	ldr	r3, [pc, #232]	; (80024a8 <socket+0x1f4>)
 80023be:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80023c2:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	3304      	adds	r3, #4
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	3304      	adds	r3, #4
 80023cc:	461a      	mov	r2, r3
 80023ce:	88bb      	ldrh	r3, [r7, #4]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f7ff fbd3 	bl	8001b84 <WIZCHIP_WRITE>
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	3304      	adds	r3, #4
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	3305      	adds	r3, #5
 80023e6:	461a      	mov	r2, r3
 80023e8:	88bb      	ldrh	r3, [r7, #4]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	4610      	mov	r0, r2
 80023f0:	f7ff fbc8 	bl	8001b84 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	3304      	adds	r3, #4
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	3301      	adds	r3, #1
 80023fc:	2101      	movs	r1, #1
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fbc0 	bl	8001b84 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002404:	bf00      	nop
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	3304      	adds	r3, #4
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	3301      	adds	r3, #1
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fbe6 	bl	8001be0 <WIZCHIP_READ>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f5      	bne.n	8002406 <socket+0x152>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	2201      	movs	r2, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	b21b      	sxth	r3, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	b21a      	sxth	r2, r3
 8002428:	4b20      	ldr	r3, [pc, #128]	; (80024ac <socket+0x1f8>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b21b      	sxth	r3, r3
 800242e:	4013      	ands	r3, r2
 8002430:	b21b      	sxth	r3, r3
 8002432:	b29a      	uxth	r2, r3
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <socket+0x1f8>)
 8002436:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	f003 0201 	and.w	r2, r3, #1
 800243e:	79fb      	ldrb	r3, [r7, #7]
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	b21a      	sxth	r2, r3
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <socket+0x1f8>)
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	b21b      	sxth	r3, r3
 800244c:	4313      	orrs	r3, r2
 800244e:	b21b      	sxth	r3, r3
 8002450:	b29a      	uxth	r2, r3
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <socket+0x1f8>)
 8002454:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2201      	movs	r2, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	b21b      	sxth	r3, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	b21a      	sxth	r2, r3
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <socket+0x1fc>)
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	b21b      	sxth	r3, r3
 800246a:	4013      	ands	r3, r2
 800246c:	b21b      	sxth	r3, r3
 800246e:	b29a      	uxth	r2, r3
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <socket+0x1fc>)
 8002472:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	4a0f      	ldr	r2, [pc, #60]	; (80024b4 <socket+0x200>)
 8002478:	2100      	movs	r1, #0
 800247a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <socket+0x204>)
 8002482:	2100      	movs	r1, #0
 8002484:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002486:	bf00      	nop
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	3304      	adds	r3, #4
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	3303      	adds	r3, #3
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fba5 	bl	8001be0 <WIZCHIP_READ>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f5      	beq.n	8002488 <socket+0x1d4>
   return (int8_t)sn;
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd90      	pop	{r4, r7, pc}
 80024a8:	20000036 	.word	0x20000036
 80024ac:	200010a0 	.word	0x200010a0
 80024b0:	200010a2 	.word	0x200010a2
 80024b4:	200010a4 	.word	0x200010a4
 80024b8:	200010ac 	.word	0x200010ac

080024bc <close>:

int8_t close(uint8_t sn)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80024c6:	79fb      	ldrb	r3, [r7, #7]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d902      	bls.n	80024d2 <close+0x16>
 80024cc:	f04f 33ff 	mov.w	r3, #4294967295
 80024d0:	e04d      	b.n	800256e <close+0xb2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	3304      	adds	r3, #4
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	3301      	adds	r3, #1
 80024da:	2110      	movs	r1, #16
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fb51 	bl	8001b84 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80024e2:	bf00      	nop
 80024e4:	79fb      	ldrb	r3, [r7, #7]
 80024e6:	3304      	adds	r3, #4
 80024e8:	021b      	lsls	r3, r3, #8
 80024ea:	3301      	adds	r3, #1
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fb77 	bl	8001be0 <WIZCHIP_READ>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f5      	bne.n	80024e4 <close+0x28>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	3304      	adds	r3, #4
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	3302      	adds	r3, #2
 8002500:	21ff      	movs	r1, #255	; 0xff
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fb3e 	bl	8001b84 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	2201      	movs	r2, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	b21b      	sxth	r3, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	b21a      	sxth	r2, r3
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <close+0xbc>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b21b      	sxth	r3, r3
 800251c:	4013      	ands	r3, r2
 800251e:	b21b      	sxth	r3, r3
 8002520:	b29a      	uxth	r2, r3
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <close+0xbc>)
 8002524:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2201      	movs	r2, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	b21b      	sxth	r3, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	b21a      	sxth	r2, r3
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <close+0xc0>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	b21b      	sxth	r3, r3
 800253a:	4013      	ands	r3, r2
 800253c:	b21b      	sxth	r3, r3
 800253e:	b29a      	uxth	r2, r3
 8002540:	4b0e      	ldr	r3, [pc, #56]	; (800257c <close+0xc0>)
 8002542:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <close+0xc4>)
 8002548:	2100      	movs	r1, #0
 800254a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	4a0c      	ldr	r2, [pc, #48]	; (8002584 <close+0xc8>)
 8002552:	2100      	movs	r1, #0
 8002554:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002556:	bf00      	nop
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	3304      	adds	r3, #4
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	3303      	adds	r3, #3
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fb3d 	bl	8001be0 <WIZCHIP_READ>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f5      	bne.n	8002558 <close+0x9c>
	return SOCK_OK;
 800256c:	2301      	movs	r3, #1
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	200010a0 	.word	0x200010a0
 800257c:	200010a2 	.word	0x200010a2
 8002580:	200010a4 	.word	0x200010a4
 8002584:	200010ac 	.word	0x200010ac

08002588 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	4603      	mov	r3, r0
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	4613      	mov	r3, r2
 8002598:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d902      	bls.n	80025ae <sendto+0x26>
 80025a8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ac:	e139      	b.n	8002822 <sendto+0x29a>
   switch(getSn_MR(sn) & 0x0F)
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	3304      	adds	r3, #4
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fb13 	bl	8001be0 <WIZCHIP_READ>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	3b02      	subs	r3, #2
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d902      	bls.n	80025cc <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80025c6:	f06f 0304 	mvn.w	r3, #4
 80025ca:	e12a      	b.n	8002822 <sendto+0x29a>
         break;
 80025cc:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80025ce:	89bb      	ldrh	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d102      	bne.n	80025da <sendto+0x52>
 80025d4:	f06f 030d 	mvn.w	r3, #13
 80025d8:	e123      	b.n	8002822 <sendto+0x29a>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	3201      	adds	r2, #1
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	4413      	add	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	3202      	adds	r2, #2
 80025f6:	7812      	ldrb	r2, [r2, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	3203      	adds	r2, #3
 8002604:	7812      	ldrb	r2, [r2, #0]
 8002606:	4413      	add	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10d      	bne.n	800262c <sendto+0xa4>
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	3304      	adds	r3, #4
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff fae2 	bl	8001be0 <WIZCHIP_READ>
 800261c:	4603      	mov	r3, r0
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b04      	cmp	r3, #4
 8002624:	d002      	beq.n	800262c <sendto+0xa4>
 8002626:	f06f 030b 	mvn.w	r3, #11
 800262a:	e0fa      	b.n	8002822 <sendto+0x29a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800262c:	8c3b      	ldrh	r3, [r7, #32]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <sendto+0xc6>
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	3304      	adds	r3, #4
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fad1 	bl	8001be0 <WIZCHIP_READ>
 800263e:	4603      	mov	r3, r0
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d002      	beq.n	800264e <sendto+0xc6>
 8002648:	f06f 030a 	mvn.w	r3, #10
 800264c:	e0e9      	b.n	8002822 <sendto+0x29a>
   tmp = getSn_SR(sn);
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	3304      	adds	r3, #4
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	3303      	adds	r3, #3
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fac2 	bl	8001be0 <WIZCHIP_READ>
 800265c:	4603      	mov	r3, r0
 800265e:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	2b42      	cmp	r3, #66	; 0x42
 8002664:	d008      	beq.n	8002678 <sendto+0xf0>
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b22      	cmp	r3, #34	; 0x22
 800266a:	d005      	beq.n	8002678 <sendto+0xf0>
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b32      	cmp	r3, #50	; 0x32
 8002670:	d002      	beq.n	8002678 <sendto+0xf0>
 8002672:	f06f 0306 	mvn.w	r3, #6
 8002676:	e0d4      	b.n	8002822 <sendto+0x29a>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	3304      	adds	r3, #4
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	330c      	adds	r3, #12
 8002680:	2204      	movs	r2, #4
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fad9 	bl	8001c3c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	3304      	adds	r3, #4
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	3310      	adds	r3, #16
 8002692:	461a      	mov	r2, r3
 8002694:	8c3b      	ldrh	r3, [r7, #32]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	b29b      	uxth	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f7ff fa70 	bl	8001b84 <WIZCHIP_WRITE>
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	3304      	adds	r3, #4
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	3311      	adds	r3, #17
 80026ac:	461a      	mov	r2, r3
 80026ae:	8c3b      	ldrh	r3, [r7, #32]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f7ff fa65 	bl	8001b84 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80026ba:	201b      	movs	r0, #27
 80026bc:	f7ff fa90 	bl	8001be0 <WIZCHIP_READ>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4619      	mov	r1, r3
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	2203      	movs	r2, #3
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	ea01 0203 	and.w	r2, r1, r3
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fa42 f303 	asr.w	r3, r2, r3
 80026da:	2201      	movs	r2, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	029b      	lsls	r3, r3, #10
 80026e4:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80026e6:	89ba      	ldrh	r2, [r7, #12]
 80026e8:	8abb      	ldrh	r3, [r7, #20]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d901      	bls.n	80026f2 <sendto+0x16a>
 80026ee:	8abb      	ldrh	r3, [r7, #20]
 80026f0:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fb3d 	bl	8001d74 <getSn_TX_FSR>
 80026fa:	4603      	mov	r3, r0
 80026fc:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	3304      	adds	r3, #4
 8002702:	021b      	lsls	r3, r3, #8
 8002704:	3303      	adds	r3, #3
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fa6a 	bl	8001be0 <WIZCHIP_READ>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d102      	bne.n	8002718 <sendto+0x190>
 8002712:	f06f 0303 	mvn.w	r3, #3
 8002716:	e084      	b.n	8002822 <sendto+0x29a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002718:	4b44      	ldr	r3, [pc, #272]	; (800282c <sendto+0x2a4>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	fa42 f303 	asr.w	r3, r2, r3
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <sendto+0x1b0>
 800272c:	89ba      	ldrh	r2, [r7, #12]
 800272e:	8abb      	ldrh	r3, [r7, #20]
 8002730:	429a      	cmp	r2, r3
 8002732:	d901      	bls.n	8002738 <sendto+0x1b0>
 8002734:	2300      	movs	r3, #0
 8002736:	e074      	b.n	8002822 <sendto+0x29a>
      if(len <= freesize) break;
 8002738:	89ba      	ldrh	r2, [r7, #12]
 800273a:	8abb      	ldrh	r3, [r7, #20]
 800273c:	429a      	cmp	r2, r3
 800273e:	d900      	bls.n	8002742 <sendto+0x1ba>
      freesize = getSn_TX_FSR(sn);
 8002740:	e7d7      	b.n	80026f2 <sendto+0x16a>
      if(len <= freesize) break;
 8002742:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8002744:	89ba      	ldrh	r2, [r7, #12]
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fc04 	bl	8001f58 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	2204      	movs	r2, #4
 8002756:	4619      	mov	r1, r3
 8002758:	200f      	movs	r0, #15
 800275a:	f7ff fabd 	bl	8001cd8 <WIZCHIP_READ_BUF>
      if(taddr == 0)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10c      	bne.n	800277e <sendto+0x1f6>
      {
         getSUBR((uint8_t*)&taddr);
 8002764:	f107 0310 	add.w	r3, r7, #16
 8002768:	2204      	movs	r2, #4
 800276a:	4619      	mov	r1, r3
 800276c:	2005      	movs	r0, #5
 800276e:	f7ff fab3 	bl	8001cd8 <WIZCHIP_READ_BUF>
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 8002772:	2204      	movs	r2, #4
 8002774:	492e      	ldr	r1, [pc, #184]	; (8002830 <sendto+0x2a8>)
 8002776:	2005      	movs	r0, #5
 8002778:	f7ff fa60 	bl	8001c3c <WIZCHIP_WRITE_BUF>
 800277c:	e001      	b.n	8002782 <sendto+0x1fa>
      }
      else taddr = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	3304      	adds	r3, #4
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	3301      	adds	r3, #1
 800278a:	2120      	movs	r1, #32
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff f9f9 	bl	8001b84 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8002792:	bf00      	nop
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	3304      	adds	r3, #4
 8002798:	021b      	lsls	r3, r3, #8
 800279a:	3301      	adds	r3, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fa1f 	bl	8001be0 <WIZCHIP_READ>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f5      	bne.n	8002794 <sendto+0x20c>
   while(1)
   {
      tmp = getSn_IR(sn);
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	3304      	adds	r3, #4
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	3302      	adds	r3, #2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fa15 	bl	8001be0 <WIZCHIP_READ>
 80027b6:	4603      	mov	r3, r0
 80027b8:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00c      	beq.n	80027de <sendto+0x256>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	3304      	adds	r3, #4
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	3302      	adds	r3, #2
 80027cc:	2110      	movs	r1, #16
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff f9d8 	bl	8001b84 <WIZCHIP_WRITE>
         break;
 80027d4:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d021      	beq.n	8002820 <sendto+0x298>
 80027dc:	e019      	b.n	8002812 <sendto+0x28a>
      else if(tmp & Sn_IR_TIMEOUT)
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0df      	beq.n	80027a8 <sendto+0x220>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
 80027ea:	3304      	adds	r3, #4
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	3302      	adds	r3, #2
 80027f0:	2108      	movs	r1, #8
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff f9c6 	bl	8001b84 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <sendto+0x284>
 80027fe:	f107 0310 	add.w	r3, r7, #16
 8002802:	2204      	movs	r2, #4
 8002804:	4619      	mov	r1, r3
 8002806:	2005      	movs	r0, #5
 8002808:	f7ff fa18 	bl	8001c3c <WIZCHIP_WRITE_BUF>
         return SOCKERR_TIMEOUT;
 800280c:	f06f 030c 	mvn.w	r3, #12
 8002810:	e007      	b.n	8002822 <sendto+0x29a>
      if(taddr) setSUBR((uint8_t*)&taddr);
 8002812:	f107 0310 	add.w	r3, r7, #16
 8002816:	2204      	movs	r2, #4
 8002818:	4619      	mov	r1, r3
 800281a:	2005      	movs	r0, #5
 800281c:	f7ff fa0e 	bl	8001c3c <WIZCHIP_WRITE_BUF>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8002820:	89bb      	ldrh	r3, [r7, #12]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200010a0 	.word	0x200010a0
 8002830:	080052cc 	.word	0x080052cc

08002834 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	4603      	mov	r3, r0
 8002840:	73fb      	strb	r3, [r7, #15]
 8002842:	4613      	mov	r3, r2
 8002844:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8002846:	2300      	movs	r3, #0
 8002848:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d902      	bls.n	8002856 <recvfrom+0x22>
 8002850:	f04f 33ff 	mov.w	r3, #4294967295
 8002854:	e1c6      	b.n	8002be4 <recvfrom+0x3b0>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	3304      	adds	r3, #4
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff f9bf 	bl	8001be0 <WIZCHIP_READ>
 8002862:	4603      	mov	r3, r0
 8002864:	777b      	strb	r3, [r7, #29]
 8002866:	7f7b      	ldrb	r3, [r7, #29]
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	2b04      	cmp	r3, #4
 800286e:	dc02      	bgt.n	8002876 <recvfrom+0x42>
 8002870:	2b02      	cmp	r3, #2
 8002872:	da05      	bge.n	8002880 <recvfrom+0x4c>
 8002874:	e001      	b.n	800287a <recvfrom+0x46>
 8002876:	2b05      	cmp	r3, #5
 8002878:	d004      	beq.n	8002884 <recvfrom+0x50>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800287a:	f06f 0304 	mvn.w	r3, #4
 800287e:	e1b1      	b.n	8002be4 <recvfrom+0x3b0>
         break;
 8002880:	bf00      	nop
 8002882:	e000      	b.n	8002886 <recvfrom+0x52>
         break;
 8002884:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002886:	89bb      	ldrh	r3, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <recvfrom+0x5e>
 800288c:	f06f 030d 	mvn.w	r3, #13
 8002890:	e1a8      	b.n	8002be4 <recvfrom+0x3b0>
   if(sock_remained_size[sn] == 0)
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	4a82      	ldr	r2, [pc, #520]	; (8002aa0 <recvfrom+0x26c>)
 8002896:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d126      	bne.n	80028ec <recvfrom+0xb8>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff faaa 	bl	8001dfa <getSn_RX_RSR>
 80028a6:	4603      	mov	r3, r0
 80028a8:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80028aa:	7bfb      	ldrb	r3, [r7, #15]
 80028ac:	3304      	adds	r3, #4
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	3303      	adds	r3, #3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f994 	bl	8001be0 <WIZCHIP_READ>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <recvfrom+0x90>
 80028be:	f06f 0303 	mvn.w	r3, #3
 80028c2:	e18f      	b.n	8002be4 <recvfrom+0x3b0>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80028c4:	4b77      	ldr	r3, [pc, #476]	; (8002aa4 <recvfrom+0x270>)
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	fa42 f303 	asr.w	r3, r2, r3
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <recvfrom+0xae>
 80028d8:	8bfb      	ldrh	r3, [r7, #30]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <recvfrom+0xae>
 80028de:	2300      	movs	r3, #0
 80028e0:	e180      	b.n	8002be4 <recvfrom+0x3b0>
         if(pack_len != 0) break;
 80028e2:	8bfb      	ldrh	r3, [r7, #30]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d100      	bne.n	80028ea <recvfrom+0xb6>
         pack_len = getSn_RX_RSR(sn);
 80028e8:	e7d9      	b.n	800289e <recvfrom+0x6a>
         if(pack_len != 0) break;
 80028ea:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 80028ec:	7f7b      	ldrb	r3, [r7, #29]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d075      	beq.n	80029e2 <recvfrom+0x1ae>
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	f300 8135 	bgt.w	8002b66 <recvfrom+0x332>
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d003      	beq.n	8002908 <recvfrom+0xd4>
 8002900:	2b03      	cmp	r3, #3
 8002902:	f000 80d3 	beq.w	8002aac <recvfrom+0x278>
 8002906:	e12e      	b.n	8002b66 <recvfrom+0x332>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	4a65      	ldr	r2, [pc, #404]	; (8002aa0 <recvfrom+0x26c>)
 800290c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d14e      	bne.n	80029b2 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8002914:	f107 0114 	add.w	r1, r7, #20
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2208      	movs	r2, #8
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fbd4 	bl	80020ca <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	3304      	adds	r3, #4
 8002926:	021b      	lsls	r3, r3, #8
 8002928:	3301      	adds	r3, #1
 800292a:	2140      	movs	r1, #64	; 0x40
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff f929 	bl	8001b84 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002932:	bf00      	nop
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	3304      	adds	r3, #4
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	3301      	adds	r3, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff f94f 	bl	8001be0 <WIZCHIP_READ>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f5      	bne.n	8002934 <recvfrom+0x100>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8002948:	7d3a      	ldrb	r2, [r7, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3301      	adds	r3, #1
 8002952:	7d7a      	ldrb	r2, [r7, #21]
 8002954:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3302      	adds	r3, #2
 800295a:	7dba      	ldrb	r2, [r7, #22]
 800295c:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3303      	adds	r3, #3
 8002962:	7dfa      	ldrb	r2, [r7, #23]
 8002964:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8002966:	7e3b      	ldrb	r3, [r7, #24]
 8002968:	b29a      	uxth	r2, r3
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	021b      	lsls	r3, r3, #8
 8002974:	b29a      	uxth	r2, r3
 8002976:	7e7b      	ldrb	r3, [r7, #25]
 8002978:	b29b      	uxth	r3, r3
 800297a:	4413      	add	r3, r2
 800297c:	b29a      	uxth	r2, r3
 800297e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002980:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8002982:	7eba      	ldrb	r2, [r7, #26]
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	b291      	uxth	r1, r2
 8002988:	4a45      	ldr	r2, [pc, #276]	; (8002aa0 <recvfrom+0x26c>)
 800298a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	4a43      	ldr	r2, [pc, #268]	; (8002aa0 <recvfrom+0x26c>)
 8002992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002996:	021b      	lsls	r3, r3, #8
 8002998:	b299      	uxth	r1, r3
 800299a:	7efb      	ldrb	r3, [r7, #27]
 800299c:	b29a      	uxth	r2, r3
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	440a      	add	r2, r1
 80029a2:	b291      	uxth	r1, r2
 80029a4:	4a3e      	ldr	r2, [pc, #248]	; (8002aa0 <recvfrom+0x26c>)
 80029a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	4a3e      	ldr	r2, [pc, #248]	; (8002aa8 <recvfrom+0x274>)
 80029ae:	2180      	movs	r1, #128	; 0x80
 80029b0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	4a3a      	ldr	r2, [pc, #232]	; (8002aa0 <recvfrom+0x26c>)
 80029b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029ba:	89ba      	ldrh	r2, [r7, #12]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d202      	bcs.n	80029c6 <recvfrom+0x192>
 80029c0:	89bb      	ldrh	r3, [r7, #12]
 80029c2:	83fb      	strh	r3, [r7, #30]
 80029c4:	e004      	b.n	80029d0 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	4a35      	ldr	r2, [pc, #212]	; (8002aa0 <recvfrom+0x26c>)
 80029ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029ce:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80029d0:	8bfb      	ldrh	r3, [r7, #30]
 80029d2:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80029d4:	8bfa      	ldrh	r2, [r7, #30]
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fb75 	bl	80020ca <wiz_recv_data>
			break;
 80029e0:	e0cd      	b.n	8002b7e <recvfrom+0x34a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	4a2e      	ldr	r2, [pc, #184]	; (8002aa0 <recvfrom+0x26c>)
 80029e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d142      	bne.n	8002a74 <recvfrom+0x240>
	      {
   			wiz_recv_data(sn, head, 2);
 80029ee:	f107 0114 	add.w	r1, r7, #20
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	2202      	movs	r2, #2
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fb67 	bl	80020ca <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	3304      	adds	r3, #4
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	3301      	adds	r3, #1
 8002a04:	2140      	movs	r1, #64	; 0x40
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff f8bc 	bl	8001b84 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002a0c:	bf00      	nop
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	3304      	adds	r3, #4
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	3301      	adds	r3, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff f8e2 	bl	8001be0 <WIZCHIP_READ>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f5      	bne.n	8002a0e <recvfrom+0x1da>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8002a22:	7d3a      	ldrb	r2, [r7, #20]
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	b291      	uxth	r1, r2
 8002a28:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <recvfrom+0x26c>)
 8002a2a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <recvfrom+0x26c>)
 8002a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	7d7b      	ldrb	r3, [r7, #21]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	3a02      	subs	r2, #2
 8002a46:	b291      	uxth	r1, r2
 8002a48:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <recvfrom+0x26c>)
 8002a4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <recvfrom+0x26c>)
 8002a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a56:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d906      	bls.n	8002a6c <recvfrom+0x238>
   			{
   			   close(sn);
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fd2b 	bl	80024bc <close>
   			   return SOCKFATAL_PACKLEN;
 8002a66:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8002a6a:	e0bb      	b.n	8002be4 <recvfrom+0x3b0>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	4a0e      	ldr	r2, [pc, #56]	; (8002aa8 <recvfrom+0x274>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <recvfrom+0x26c>)
 8002a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a7c:	89ba      	ldrh	r2, [r7, #12]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d202      	bcs.n	8002a88 <recvfrom+0x254>
 8002a82:	89bb      	ldrh	r3, [r7, #12]
 8002a84:	83fb      	strh	r3, [r7, #30]
 8002a86:	e004      	b.n	8002a92 <recvfrom+0x25e>
			else pack_len = sock_remained_size[sn];
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <recvfrom+0x26c>)
 8002a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a90:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8002a92:	8bfa      	ldrh	r2, [r7, #30]
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fb16 	bl	80020ca <wiz_recv_data>
		   break;
 8002a9e:	e06e      	b.n	8002b7e <recvfrom+0x34a>
 8002aa0:	200010a4 	.word	0x200010a4
 8002aa4:	200010a0 	.word	0x200010a0
 8002aa8:	200010ac 	.word	0x200010ac
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	4a4f      	ldr	r2, [pc, #316]	; (8002bec <recvfrom+0x3b8>)
 8002ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d140      	bne.n	8002b3a <recvfrom+0x306>
		   {
   			wiz_recv_data(sn, head, 6);
 8002ab8:	f107 0114 	add.w	r1, r7, #20
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	2206      	movs	r2, #6
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fb02 	bl	80020ca <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	021b      	lsls	r3, r3, #8
 8002acc:	3301      	adds	r3, #1
 8002ace:	2140      	movs	r1, #64	; 0x40
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff f857 	bl	8001b84 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002ad6:	bf00      	nop
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	3304      	adds	r3, #4
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	3301      	adds	r3, #1
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff f87d 	bl	8001be0 <WIZCHIP_READ>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f5      	bne.n	8002ad8 <recvfrom+0x2a4>
   			addr[0] = head[0];
 8002aec:	7d3a      	ldrb	r2, [r7, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3301      	adds	r3, #1
 8002af6:	7d7a      	ldrb	r2, [r7, #21]
 8002af8:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3302      	adds	r3, #2
 8002afe:	7dba      	ldrb	r2, [r7, #22]
 8002b00:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3303      	adds	r3, #3
 8002b06:	7dfa      	ldrb	r2, [r7, #23]
 8002b08:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8002b0a:	7e3a      	ldrb	r2, [r7, #24]
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	b291      	uxth	r1, r2
 8002b10:	4a36      	ldr	r2, [pc, #216]	; (8002bec <recvfrom+0x3b8>)
 8002b12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	4a34      	ldr	r2, [pc, #208]	; (8002bec <recvfrom+0x3b8>)
 8002b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b1e:	021b      	lsls	r3, r3, #8
 8002b20:	b299      	uxth	r1, r3
 8002b22:	7e7b      	ldrb	r3, [r7, #25]
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	440a      	add	r2, r1
 8002b2a:	b291      	uxth	r1, r2
 8002b2c:	4a2f      	ldr	r2, [pc, #188]	; (8002bec <recvfrom+0x3b8>)
 8002b2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	4a2e      	ldr	r2, [pc, #184]	; (8002bf0 <recvfrom+0x3bc>)
 8002b36:	2180      	movs	r1, #128	; 0x80
 8002b38:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	4a2b      	ldr	r2, [pc, #172]	; (8002bec <recvfrom+0x3b8>)
 8002b3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b42:	89ba      	ldrh	r2, [r7, #12]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d202      	bcs.n	8002b4e <recvfrom+0x31a>
 8002b48:	89bb      	ldrh	r3, [r7, #12]
 8002b4a:	83fb      	strh	r3, [r7, #30]
 8002b4c:	e004      	b.n	8002b58 <recvfrom+0x324>
			else pack_len = sock_remained_size[sn];
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	4a26      	ldr	r2, [pc, #152]	; (8002bec <recvfrom+0x3b8>)
 8002b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b56:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8002b58:	8bfa      	ldrh	r2, [r7, #30]
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fab3 	bl	80020ca <wiz_recv_data>
			break;
 8002b64:	e00b      	b.n	8002b7e <recvfrom+0x34a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8002b66:	8bfa      	ldrh	r2, [r7, #30]
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff fb62 	bl	8002236 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	491d      	ldr	r1, [pc, #116]	; (8002bec <recvfrom+0x3b8>)
 8002b76:	8bfa      	ldrh	r2, [r7, #30]
 8002b78:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8002b7c:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	3304      	adds	r3, #4
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	3301      	adds	r3, #1
 8002b86:	2140      	movs	r1, #64	; 0x40
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe fffb 	bl	8001b84 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8002b8e:	bf00      	nop
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	3304      	adds	r3, #4
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	3301      	adds	r3, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff f821 	bl	8001be0 <WIZCHIP_READ>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1f5      	bne.n	8002b90 <recvfrom+0x35c>
	sock_remained_size[sn] -= pack_len;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	4a11      	ldr	r2, [pc, #68]	; (8002bec <recvfrom+0x3b8>)
 8002ba8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	8bfa      	ldrh	r2, [r7, #30]
 8002bb0:	1a8a      	subs	r2, r1, r2
 8002bb2:	b291      	uxth	r1, r2
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <recvfrom+0x3b8>)
 8002bb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <recvfrom+0x3b8>)
 8002bbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <recvfrom+0x3a6>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <recvfrom+0x3bc>)
 8002bca:	5cd2      	ldrb	r2, [r2, r3]
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	b2d1      	uxtb	r1, r2
 8002bd4:	4a06      	ldr	r2, [pc, #24]	; (8002bf0 <recvfrom+0x3bc>)
 8002bd6:	54d1      	strb	r1, [r2, r3]
 8002bd8:	e003      	b.n	8002be2 <recvfrom+0x3ae>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <recvfrom+0x3bc>)
 8002bde:	2100      	movs	r1, #0
 8002be0:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8002be2:	8bfb      	ldrh	r3, [r7, #30]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3720      	adds	r7, #32
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	200010a4 	.word	0x200010a4
 8002bf0:	200010ac 	.word	0x200010ac

08002bf4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	70fb      	strb	r3, [r7, #3]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	701a      	strb	r2, [r3, #0]
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	2300      	movs	r3, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <reg_wizchip_cris_cbfunc+0x16>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8002ca2:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <reg_wizchip_cris_cbfunc+0x40>)
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <reg_wizchip_cris_cbfunc+0x44>)
 8002ca6:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8002ca8:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <reg_wizchip_cris_cbfunc+0x40>)
 8002caa:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <reg_wizchip_cris_cbfunc+0x48>)
 8002cac:	611a      	str	r2, [r3, #16]
 8002cae:	e006      	b.n	8002cbe <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8002cb0:	4a06      	ldr	r2, [pc, #24]	; (8002ccc <reg_wizchip_cris_cbfunc+0x40>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <reg_wizchip_cris_cbfunc+0x40>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	6113      	str	r3, [r2, #16]
   }
}
 8002cbc:	bf00      	nop
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	20000038 	.word	0x20000038
 8002cd0:	08002bf5 	.word	0x08002bf5
 8002cd4:	08002c03 	.word	0x08002c03

08002cd8 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <reg_wizchip_cs_cbfunc+0x16>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d106      	bne.n	8002cfc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <reg_wizchip_cs_cbfunc+0x40>)
 8002cf0:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <reg_wizchip_cs_cbfunc+0x44>)
 8002cf2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <reg_wizchip_cs_cbfunc+0x40>)
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <reg_wizchip_cs_cbfunc+0x48>)
 8002cf8:	619a      	str	r2, [r3, #24]
 8002cfa:	e006      	b.n	8002d0a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <reg_wizchip_cs_cbfunc+0x40>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8002d02:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <reg_wizchip_cs_cbfunc+0x40>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6193      	str	r3, [r2, #24]
   }
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000038 	.word	0x20000038
 8002d1c:	08002c11 	.word	0x08002c11
 8002d20:	08002c1f 	.word	0x08002c1f

08002d24 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002d2e:	bf00      	nop
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <reg_wizchip_spi_cbfunc+0x4c>)
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f9      	beq.n	8002d30 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <reg_wizchip_spi_cbfunc+0x24>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d106      	bne.n	8002d56 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <reg_wizchip_spi_cbfunc+0x4c>)
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <reg_wizchip_spi_cbfunc+0x50>)
 8002d4c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <reg_wizchip_spi_cbfunc+0x4c>)
 8002d50:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <reg_wizchip_spi_cbfunc+0x54>)
 8002d52:	621a      	str	r2, [r3, #32]
 8002d54:	e006      	b.n	8002d64 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8002d56:	4a06      	ldr	r2, [pc, #24]	; (8002d70 <reg_wizchip_spi_cbfunc+0x4c>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002d5c:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <reg_wizchip_spi_cbfunc+0x4c>)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6213      	str	r3, [r2, #32]
   }
}
 8002d62:	bf00      	nop
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	20000038 	.word	0x20000038
 8002d74:	08002c65 	.word	0x08002c65
 8002d78:	08002c75 	.word	0x08002c75

08002d7c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
#endif
   uint8_t* ptmp[2] = {0,0};
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
   switch(cwtype)
 8002d90:	79fb      	ldrb	r3, [r7, #7]
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d863      	bhi.n	8002e5e <ctlwizchip+0xe2>
 8002d96:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <ctlwizchip+0x20>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002dc1 	.word	0x08002dc1
 8002da0:	08002dc7 	.word	0x08002dc7
 8002da4:	08002df3 	.word	0x08002df3
 8002da8:	08002de7 	.word	0x08002de7
 8002dac:	08002e01 	.word	0x08002e01
 8002db0:	08002e0d 	.word	0x08002e0d
 8002db4:	08002e5f 	.word	0x08002e5f
 8002db8:	08002e5f 	.word	0x08002e5f
 8002dbc:	08002e1b 	.word	0x08002e1b
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8002dc0:	f000 f858 	bl	8002e74 <wizchip_sw_reset>
         break;
 8002dc4:	e04e      	b.n	8002e64 <ctlwizchip+0xe8>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <ctlwizchip+0x5a>
         {
            ptmp[0] = (uint8_t*)arg;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	60bb      	str	r3, [r7, #8]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	60fb      	str	r3, [r7, #12]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 f88d 	bl	8002efc <wizchip_init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	e03f      	b.n	8002e66 <ctlwizchip+0xea>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f968 	bl	80030c0 <wizchip_clrinterrupt>
         break;
 8002df0:	e038      	b.n	8002e64 <ctlwizchip+0xe8>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002df2:	f000 f988 	bl	8003106 <wizchip_getinterrupt>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	801a      	strh	r2, [r3, #0]
         break;
 8002dfe:	e031      	b.n	8002e64 <ctlwizchip+0xe8>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 f9a4 	bl	8003152 <wizchip_setinterruptmask>
         break;         
 8002e0a:	e02b      	b.n	8002e64 <ctlwizchip+0xe8>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002e0c:	f000 f9c1 	bl	8003192 <wizchip_getinterruptmask>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	801a      	strh	r2, [r3, #0]
         break;
 8002e18:	e024      	b.n	8002e64 <ctlwizchip+0xe8>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
         break;
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <ctlwizchip+0xf4>)
 8002e1c:	789a      	ldrb	r2, [r3, #2]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <ctlwizchip+0xf4>)
 8002e28:	78d2      	ldrb	r2, [r2, #3]
 8002e2a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	3302      	adds	r3, #2
 8002e30:	4a0f      	ldr	r2, [pc, #60]	; (8002e70 <ctlwizchip+0xf4>)
 8002e32:	7912      	ldrb	r2, [r2, #4]
 8002e34:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	3303      	adds	r3, #3
 8002e3a:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <ctlwizchip+0xf4>)
 8002e3c:	7952      	ldrb	r2, [r2, #5]
 8002e3e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	3304      	adds	r3, #4
 8002e44:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <ctlwizchip+0xf4>)
 8002e46:	7992      	ldrb	r2, [r2, #6]
 8002e48:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	3305      	adds	r3, #5
 8002e4e:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <ctlwizchip+0xf4>)
 8002e50:	79d2      	ldrb	r2, [r2, #7]
 8002e52:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	3306      	adds	r3, #6
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
         break;
 8002e5c:	e002      	b.n	8002e64 <ctlwizchip+0xe8>
         if((int8_t)tmp == -1) return -1;
         *(uint8_t*)arg = tmp;
         break;
   #endif      
      default:
         return -1;
 8002e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e62:	e000      	b.n	8002e66 <ctlwizchip+0xea>
   }
   return 0;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000038 	.word	0x20000038

08002e74 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	2206      	movs	r2, #6
 8002e7e:	4619      	mov	r1, r3
 8002e80:	2009      	movs	r0, #9
 8002e82:	f7fe ff29 	bl	8001cd8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	2001      	movs	r0, #1
 8002e90:	f7fe ff22 	bl	8001cd8 <WIZCHIP_READ_BUF>
 8002e94:	f107 0310 	add.w	r3, r7, #16
 8002e98:	2204      	movs	r2, #4
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	2005      	movs	r0, #5
 8002e9e:	f7fe ff1b 	bl	8001cd8 <WIZCHIP_READ_BUF>
 8002ea2:	f107 030c 	add.w	r3, r7, #12
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	200f      	movs	r0, #15
 8002eac:	f7fe ff14 	bl	8001cd8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002eb0:	2180      	movs	r1, #128	; 0x80
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f7fe fe66 	bl	8001b84 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fe fe91 	bl	8001be0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	2206      	movs	r2, #6
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	2009      	movs	r0, #9
 8002ec6:	f7fe feb9 	bl	8001c3c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002eca:	f107 0314 	add.w	r3, r7, #20
 8002ece:	2204      	movs	r2, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	f7fe feb2 	bl	8001c3c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002ed8:	f107 0310 	add.w	r3, r7, #16
 8002edc:	2204      	movs	r2, #4
 8002ede:	4619      	mov	r1, r3
 8002ee0:	2005      	movs	r0, #5
 8002ee2:	f7fe feab 	bl	8001c3c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002ee6:	f107 030c 	add.w	r3, r7, #12
 8002eea:	2204      	movs	r2, #4
 8002eec:	4619      	mov	r1, r3
 8002eee:	200f      	movs	r0, #15
 8002ef0:	f7fe fea4 	bl	8001c3c <WIZCHIP_WRITE_BUF>
}
 8002ef4:	bf00      	nop
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	737b      	strb	r3, [r7, #13]
   wizchip_sw_reset();
 8002f0a:	f7ff ffb3 	bl	8002e74 <wizchip_sw_reset>
   if(txsize)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d066      	beq.n	8002fe2 <wizchip_init+0xe6>
   {
      tmp = 0;
 8002f14:	2300      	movs	r3, #0
 8002f16:	737b      	strb	r3, [r7, #13]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e015      	b.n	8002f4a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8002f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	781a      	ldrb	r2, [r3, #0]
 8002f28:	7b7b      	ldrb	r3, [r7, #13]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	737b      	strb	r3, [r7, #13]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 8002f30:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	dd02      	ble.n	8002f3e <wizchip_init+0x42>
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3c:	e0bc      	b.n	80030b8 <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f4e:	2b03      	cmp	r3, #3
 8002f50:	dde5      	ble.n	8002f1e <wizchip_init+0x22>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	73fb      	strb	r3, [r7, #15]
 8002f56:	e040      	b.n	8002fda <wizchip_init+0xde>
		{
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	73bb      	strb	r3, [r7, #14]
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 8002f5c:	e005      	b.n	8002f6a <wizchip_init+0x6e>
 8002f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	73bb      	strb	r3, [r7, #14]
 8002f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f7a:	fa42 f303 	asr.w	r3, r2, r3
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d006      	beq.n	8002f90 <wizchip_init+0x94>
 8002f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e6      	bne.n	8002f5e <wizchip_init+0x62>
			setSn_TXBUF_SIZE(i, j);
 8002f90:	201b      	movs	r0, #27
 8002f92:	f7fe fe25 	bl	8001be0 <WIZCHIP_READ>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b25a      	sxtb	r2, r3
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2103      	movs	r1, #3
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	b25b      	sxtb	r3, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	b25b      	sxtb	r3, r3
 8002fac:	4013      	ands	r3, r2
 8002fae:	b25a      	sxtb	r2, r3
 8002fb0:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8002fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	b25b      	sxtb	r3, r3
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	b25b      	sxtb	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	201b      	movs	r0, #27
 8002fca:	f7fe fddb 	bl	8001b84 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	ddba      	ble.n	8002f58 <wizchip_init+0x5c>
			setSn_TXBUF_SIZE(i, txsize[i]);
#endif
		}	
   }

   if(rxsize)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d066      	beq.n	80030b6 <wizchip_init+0x1ba>
   {
      tmp = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	737b      	strb	r3, [r7, #13]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	e015      	b.n	800301e <wizchip_init+0x122>
		{
			tmp += rxsize[i];
 8002ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	7b7b      	ldrb	r3, [r7, #13]
 8002ffe:	4413      	add	r3, r2
 8003000:	b2db      	uxtb	r3, r3
 8003002:	737b      	strb	r3, [r7, #13]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 8003004:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003008:	2b08      	cmp	r3, #8
 800300a:	dd02      	ble.n	8003012 <wizchip_init+0x116>
 800300c:	f04f 33ff 	mov.w	r3, #4294967295
 8003010:	e052      	b.n	80030b8 <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	3301      	adds	r3, #1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003022:	2b03      	cmp	r3, #3
 8003024:	dde5      	ble.n	8002ff2 <wizchip_init+0xf6>
#else
			if(tmp > 16) return -1;
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
 800302a:	e040      	b.n	80030ae <wizchip_init+0x1b2>
		{
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	73bb      	strb	r3, [r7, #14]
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 8003030:	e005      	b.n	800303e <wizchip_init+0x142>
 8003032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3301      	adds	r3, #1
 800303a:	b2db      	uxtb	r3, r3
 800303c:	73bb      	strb	r3, [r7, #14]
 800303e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	4413      	add	r3, r2
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800304e:	fa42 f303 	asr.w	r3, r2, r3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d006      	beq.n	8003064 <wizchip_init+0x168>
 8003056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e6      	bne.n	8003032 <wizchip_init+0x136>
			setSn_RXBUF_SIZE(i, j);
 8003064:	201a      	movs	r0, #26
 8003066:	f7fe fdbb 	bl	8001be0 <WIZCHIP_READ>
 800306a:	4603      	mov	r3, r0
 800306c:	b25a      	sxtb	r2, r3
 800306e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	2103      	movs	r1, #3
 8003076:	fa01 f303 	lsl.w	r3, r1, r3
 800307a:	b25b      	sxtb	r3, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	b25b      	sxtb	r3, r3
 8003080:	4013      	ands	r3, r2
 8003082:	b25a      	sxtb	r2, r3
 8003084:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8003088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	b25b      	sxtb	r3, r3
 8003094:	4313      	orrs	r3, r2
 8003096:	b25b      	sxtb	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	4619      	mov	r1, r3
 800309c:	201a      	movs	r0, #26
 800309e:	f7fe fd71 	bl	8001b84 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80030a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	73fb      	strb	r3, [r7, #15]
 80030ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	ddba      	ble.n	800302c <wizchip_init+0x130>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 80030ce:	88fb      	ldrh	r3, [r7, #6]
 80030d0:	0a1b      	lsrs	r3, r3, #8
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   ir |= (1<<4); // IK_WOL
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	f043 0310 	orr.w	r3, r3, #16
 80030dc:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   ir |= (1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   sir &= 0x0F;
 80030de:	7bbb      	ldrb	r3, [r7, #14]
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	73bb      	strb	r3, [r7, #14]
#endif

#if _WIZCHIP_ <= W5100S
   ir |= sir;
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	7bbb      	ldrb	r3, [r7, #14]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	73fb      	strb	r3, [r7, #15]
   setIR(ir);
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	4619      	mov	r1, r3
 80030f8:	2015      	movs	r0, #21
 80030fa:	f7fe fd43 	bl	8001b84 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
   }

#endif   
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ <= W5100S
   ir = getIR();
 8003118:	2015      	movs	r0, #21
 800311a:	f7fe fd61 	bl	8001be0 <WIZCHIP_READ>
 800311e:	4603      	mov	r3, r0
 8003120:	f023 035f 	bic.w	r3, r3, #95	; 0x5f
 8003124:	71fb      	strb	r3, [r7, #7]
   sir = ir & 0x0F;
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	71bb      	strb	r3, [r7, #6]
#endif         

//M20150601 : For Integrating with W5300
//#if _WIZCHIP_ < W5500
#if _WIZCHIP_ < W5200
   ir &= ~(1<<4); // IK_WOL
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	f023 0310 	bic.w	r3, r3, #16
 8003134:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003136:	79bb      	ldrb	r3, [r7, #6]
 8003138:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800313a:	88bb      	ldrh	r3, [r7, #4]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	b29a      	uxth	r2, r3
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	b29b      	uxth	r3, r3
 8003144:	4413      	add	r3, r2
 8003146:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003148:	88bb      	ldrh	r3, [r7, #4]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	0a1b      	lsrs	r3, r3, #8
 8003164:	b29b      	uxth	r3, r3
 8003166:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	f023 0310 	bic.w	r3, r3, #16
 800316e:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);
#endif
   
#if _WIZCHIP_ < W5200
   simr &= 0x0F;
 8003170:	7bbb      	ldrb	r3, [r7, #14]
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	73bb      	strb	r3, [r7, #14]
   imr |= simr;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	7bbb      	ldrb	r3, [r7, #14]
 800317c:	4313      	orrs	r3, r2
 800317e:	73fb      	strb	r3, [r7, #15]
   setIMR(imr);
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	4619      	mov	r1, r3
 8003184:	2016      	movs	r0, #22
 8003186:	f7fe fcfd 	bl	8001b84 <WIZCHIP_WRITE>
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
   setSIMR(simr);
#endif   
}
 800318a:	bf00      	nop
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b082      	sub	sp, #8
 8003196:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	80bb      	strh	r3, [r7, #4]
#if _WIZCHIP_ < W5200
   imr  = getIMR();
 80031a4:	2016      	movs	r0, #22
 80031a6:	f7fe fd1b 	bl	8001be0 <WIZCHIP_READ>
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
   simr = imr & 0x0F;
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	71bb      	strb	r3, [r7, #6]
   imr  = getIMR();
   simr = getSIMR();
#endif         

#if _WIZCHIP_ < W5500
   imr &= ~(1<<4); // IK_WOL
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	f023 0310 	bic.w	r3, r3, #16
 80031bc:	71fb      	strb	r3, [r7, #7]
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 80031be:	79bb      	ldrb	r3, [r7, #6]
 80031c0:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 80031c2:	88bb      	ldrh	r3, [r7, #4]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	4413      	add	r3, r2
 80031ce:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80031d0:	88bb      	ldrh	r3, [r7, #4]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2206      	movs	r2, #6
 80031e8:	4619      	mov	r1, r3
 80031ea:	2009      	movs	r0, #9
 80031ec:	f7fe fd26 	bl	8001c3c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	330e      	adds	r3, #14
 80031f4:	2204      	movs	r2, #4
 80031f6:	4619      	mov	r1, r3
 80031f8:	2001      	movs	r0, #1
 80031fa:	f7fe fd1f 	bl	8001c3c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	330a      	adds	r3, #10
 8003202:	2204      	movs	r2, #4
 8003204:	4619      	mov	r1, r3
 8003206:	2005      	movs	r0, #5
 8003208:	f7fe fd18 	bl	8001c3c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3306      	adds	r3, #6
 8003210:	2204      	movs	r2, #4
 8003212:	4619      	mov	r1, r3
 8003214:	200f      	movs	r0, #15
 8003216:	f7fe fd11 	bl	8001c3c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	7c9a      	ldrb	r2, [r3, #18]
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <wizchip_setnetinfo+0x70>)
 8003220:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	7cda      	ldrb	r2, [r3, #19]
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <wizchip_setnetinfo+0x70>)
 8003228:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7d1a      	ldrb	r2, [r3, #20]
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <wizchip_setnetinfo+0x70>)
 8003230:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7d5a      	ldrb	r2, [r3, #21]
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <wizchip_setnetinfo+0x70>)
 8003238:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	7d9a      	ldrb	r2, [r3, #22]
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <wizchip_setnetinfo+0x74>)
 8003240:	701a      	strb	r2, [r3, #0]
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	200010b0 	.word	0x200010b0
 8003250:	200010b4 	.word	0x200010b4

08003254 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2206      	movs	r2, #6
 8003260:	4619      	mov	r1, r3
 8003262:	2009      	movs	r0, #9
 8003264:	f7fe fd38 	bl	8001cd8 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	330e      	adds	r3, #14
 800326c:	2204      	movs	r2, #4
 800326e:	4619      	mov	r1, r3
 8003270:	2001      	movs	r0, #1
 8003272:	f7fe fd31 	bl	8001cd8 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	330a      	adds	r3, #10
 800327a:	2204      	movs	r2, #4
 800327c:	4619      	mov	r1, r3
 800327e:	2005      	movs	r0, #5
 8003280:	f7fe fd2a 	bl	8001cd8 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3306      	adds	r3, #6
 8003288:	2204      	movs	r2, #4
 800328a:	4619      	mov	r1, r3
 800328c:	200f      	movs	r0, #15
 800328e:	f7fe fd23 	bl	8001cd8 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003292:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <wizchip_getnetinfo+0x70>)
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <wizchip_getnetinfo+0x70>)
 800329c:	785a      	ldrb	r2, [r3, #1]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <wizchip_getnetinfo+0x70>)
 80032a4:	789a      	ldrb	r2, [r3, #2]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <wizchip_getnetinfo+0x70>)
 80032ac:	78da      	ldrb	r2, [r3, #3]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80032b2:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <wizchip_getnetinfo+0x74>)
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	759a      	strb	r2, [r3, #22]
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200010b0 	.word	0x200010b0
 80032c8:	200010b4 	.word	0x200010b4

080032cc <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 80032d0:	2204      	movs	r2, #4
 80032d2:	4908      	ldr	r1, [pc, #32]	; (80032f4 <default_ip_assign+0x28>)
 80032d4:	200f      	movs	r0, #15
 80032d6:	f7fe fcb1 	bl	8001c3c <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 80032da:	2204      	movs	r2, #4
 80032dc:	4906      	ldr	r1, [pc, #24]	; (80032f8 <default_ip_assign+0x2c>)
 80032de:	2005      	movs	r0, #5
 80032e0:	f7fe fcac 	bl	8001c3c <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 80032e4:	2204      	movs	r2, #4
 80032e6:	4905      	ldr	r1, [pc, #20]	; (80032fc <default_ip_assign+0x30>)
 80032e8:	2001      	movs	r0, #1
 80032ea:	f7fe fca7 	bl	8001c3c <WIZCHIP_WRITE_BUF>
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	200010c4 	.word	0x200010c4
 80032f8:	200010cc 	.word	0x200010cc
 80032fc:	200010c8 	.word	0x200010c8

08003300 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8003304:	2180      	movs	r1, #128	; 0x80
 8003306:	2000      	movs	r0, #0
 8003308:	f7fe fc3c 	bl	8001b84 <WIZCHIP_WRITE>
   getMR(); // for delay
 800330c:	2000      	movs	r0, #0
 800330e:	f7fe fc67 	bl	8001be0 <WIZCHIP_READ>
   default_ip_assign();
 8003312:	f7ff ffdb 	bl	80032cc <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8003316:	2206      	movs	r2, #6
 8003318:	4902      	ldr	r1, [pc, #8]	; (8003324 <default_ip_update+0x24>)
 800331a:	2009      	movs	r0, #9
 800331c:	f7fe fc8e 	bl	8001c3c <WIZCHIP_WRITE_BUF>
}
 8003320:	bf00      	nop
 8003322:	bd80      	pop	{r7, pc}
 8003324:	200010e4 	.word	0x200010e4

08003328 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	2000      	movs	r0, #0
 8003330:	f7fe fc28 	bl	8001b84 <WIZCHIP_WRITE>
	getMR(); // for delay
 8003334:	2000      	movs	r0, #0
 8003336:	f7fe fc53 	bl	8001be0 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 800333a:	2206      	movs	r2, #6
 800333c:	4902      	ldr	r1, [pc, #8]	; (8003348 <default_ip_conflict+0x20>)
 800333e:	2009      	movs	r0, #9
 8003340:	f7fe fc7c 	bl	8001c3c <WIZCHIP_WRITE_BUF>
}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	200010e4 	.word	0x200010e4

0800334c <makeDHCPMSG>:
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8003352:	463b      	mov	r3, r7
 8003354:	2206      	movs	r2, #6
 8003356:	4619      	mov	r1, r3
 8003358:	2009      	movs	r0, #9
 800335a:	f7fe fcbd 	bl	8001cd8 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 800335e:	4b72      	ldr	r3, [pc, #456]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8003366:	4b70      	ldr	r3, [pc, #448]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2201      	movs	r2, #1
 800336c:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 800336e:	4b6e      	ldr	r3, [pc, #440]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2206      	movs	r2, #6
 8003374:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8003376:	4b6c      	ldr	r3, [pc, #432]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2200      	movs	r2, #0
 800337c:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 800337e:	4b6a      	ldr	r3, [pc, #424]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3304      	adds	r3, #4
 8003384:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8003386:	4b69      	ldr	r3, [pc, #420]	; (800352c <makeDHCPMSG+0x1e0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0e1b      	lsrs	r3, r3, #24
 800338c:	b2da      	uxtb	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8003392:	4b66      	ldr	r3, [pc, #408]	; (800352c <makeDHCPMSG+0x1e0>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	0c1a      	lsrs	r2, r3, #16
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3301      	adds	r3, #1
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80033a0:	4b62      	ldr	r3, [pc, #392]	; (800352c <makeDHCPMSG+0x1e0>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	0a1a      	lsrs	r2, r3, #8
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	3302      	adds	r3, #2
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80033ae:	4b5f      	ldr	r3, [pc, #380]	; (800352c <makeDHCPMSG+0x1e0>)
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3303      	adds	r3, #3
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80033ba:	4b5b      	ldr	r3, [pc, #364]	; (8003528 <makeDHCPMSG+0x1dc>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2200      	movs	r2, #0
 80033c0:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80033c2:	4b59      	ldr	r3, [pc, #356]	; (8003528 <makeDHCPMSG+0x1dc>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	330a      	adds	r3, #10
 80033c8:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	3301      	adds	r3, #1
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80033d8:	4b53      	ldr	r3, [pc, #332]	; (8003528 <makeDHCPMSG+0x1dc>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2200      	movs	r2, #0
 80033de:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80033e0:	4b51      	ldr	r3, [pc, #324]	; (8003528 <makeDHCPMSG+0x1dc>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2200      	movs	r2, #0
 80033e6:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 80033e8:	4b4f      	ldr	r3, [pc, #316]	; (8003528 <makeDHCPMSG+0x1dc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2200      	movs	r2, #0
 80033ee:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 80033f0:	4b4d      	ldr	r3, [pc, #308]	; (8003528 <makeDHCPMSG+0x1dc>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2200      	movs	r2, #0
 80033f6:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 80033f8:	4b4b      	ldr	r3, [pc, #300]	; (8003528 <makeDHCPMSG+0x1dc>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2200      	movs	r2, #0
 80033fe:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 8003400:	4b49      	ldr	r3, [pc, #292]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2200      	movs	r2, #0
 8003406:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8003408:	4b47      	ldr	r3, [pc, #284]	; (8003528 <makeDHCPMSG+0x1dc>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2200      	movs	r2, #0
 800340e:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 8003410:	4b45      	ldr	r3, [pc, #276]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2200      	movs	r2, #0
 8003416:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8003418:	4b43      	ldr	r3, [pc, #268]	; (8003528 <makeDHCPMSG+0x1dc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 8003420:	4b41      	ldr	r3, [pc, #260]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2200      	movs	r2, #0
 8003426:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8003428:	4b3f      	ldr	r3, [pc, #252]	; (8003528 <makeDHCPMSG+0x1dc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2200      	movs	r2, #0
 800342e:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8003430:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2200      	movs	r2, #0
 8003436:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8003438:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <makeDHCPMSG+0x1dc>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2200      	movs	r2, #0
 800343e:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8003440:	4b39      	ldr	r3, [pc, #228]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2200      	movs	r2, #0
 8003446:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8003448:	4b37      	ldr	r3, [pc, #220]	; (8003528 <makeDHCPMSG+0x1dc>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2200      	movs	r2, #0
 800344e:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8003450:	4b35      	ldr	r3, [pc, #212]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2200      	movs	r2, #0
 8003456:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8003458:	4b33      	ldr	r3, [pc, #204]	; (8003528 <makeDHCPMSG+0x1dc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a34      	ldr	r2, [pc, #208]	; (8003530 <makeDHCPMSG+0x1e4>)
 800345e:	7812      	ldrb	r2, [r2, #0]
 8003460:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8003462:	4b31      	ldr	r3, [pc, #196]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a32      	ldr	r2, [pc, #200]	; (8003530 <makeDHCPMSG+0x1e4>)
 8003468:	7852      	ldrb	r2, [r2, #1]
 800346a:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 800346c:	4b2e      	ldr	r3, [pc, #184]	; (8003528 <makeDHCPMSG+0x1dc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2f      	ldr	r2, [pc, #188]	; (8003530 <makeDHCPMSG+0x1e4>)
 8003472:	7892      	ldrb	r2, [r2, #2]
 8003474:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8003476:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2d      	ldr	r2, [pc, #180]	; (8003530 <makeDHCPMSG+0x1e4>)
 800347c:	78d2      	ldrb	r2, [r2, #3]
 800347e:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8003480:	4b29      	ldr	r3, [pc, #164]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2a      	ldr	r2, [pc, #168]	; (8003530 <makeDHCPMSG+0x1e4>)
 8003486:	7912      	ldrb	r2, [r2, #4]
 8003488:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800348c:	4b26      	ldr	r3, [pc, #152]	; (8003528 <makeDHCPMSG+0x1dc>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a27      	ldr	r2, [pc, #156]	; (8003530 <makeDHCPMSG+0x1e4>)
 8003492:	7952      	ldrb	r2, [r2, #5]
 8003494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8003498:	2306      	movs	r3, #6
 800349a:	73fb      	strb	r3, [r7, #15]
 800349c:	e008      	b.n	80034b0 <makeDHCPMSG+0x164>
 800349e:	4b22      	ldr	r3, [pc, #136]	; (8003528 <makeDHCPMSG+0x1dc>)
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	7bfb      	ldrb	r3, [r7, #15]
 80034a4:	4413      	add	r3, r2
 80034a6:	2200      	movs	r2, #0
 80034a8:	771a      	strb	r2, [r3, #28]
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	3301      	adds	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	d9f3      	bls.n	800349e <makeDHCPMSG+0x152>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]
 80034ba:	e009      	b.n	80034d0 <makeDHCPMSG+0x184>
 80034bc:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <makeDHCPMSG+0x1dc>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
 80034c2:	4413      	add	r3, r2
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	3301      	adds	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b3f      	cmp	r3, #63	; 0x3f
 80034d4:	d9f2      	bls.n	80034bc <makeDHCPMSG+0x170>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
 80034da:	e009      	b.n	80034f0 <makeDHCPMSG+0x1a4>
 80034dc:	4b12      	ldr	r3, [pc, #72]	; (8003528 <makeDHCPMSG+0x1dc>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	4413      	add	r3, r2
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	3301      	adds	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	daf1      	bge.n	80034dc <makeDHCPMSG+0x190>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <makeDHCPMSG+0x1dc>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2263      	movs	r2, #99	; 0x63
 80034fe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2282      	movs	r2, #130	; 0x82
 8003508:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <makeDHCPMSG+0x1dc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2253      	movs	r2, #83	; 0x53
 8003512:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8003516:	4b04      	ldr	r3, [pc, #16]	; (8003528 <makeDHCPMSG+0x1dc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2263      	movs	r2, #99	; 0x63
 800351c:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 8003520:	bf00      	nop
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	200010e0 	.word	0x200010e0
 800352c:	200010dc 	.word	0x200010dc
 8003530:	200010e4 	.word	0x200010e4

08003534 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8003534:	b5b0      	push	{r4, r5, r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800353e:	f7ff ff05 	bl	800334c <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8003542:	4b56      	ldr	r3, [pc, #344]	; (800369c <send_DHCP_DISCOVER+0x168>)
 8003544:	2200      	movs	r2, #0
 8003546:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8003548:	4b54      	ldr	r3, [pc, #336]	; (800369c <send_DHCP_DISCOVER+0x168>)
 800354a:	2200      	movs	r2, #0
 800354c:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800354e:	4b53      	ldr	r3, [pc, #332]	; (800369c <send_DHCP_DISCOVER+0x168>)
 8003550:	2200      	movs	r2, #0
 8003552:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8003554:	4b51      	ldr	r3, [pc, #324]	; (800369c <send_DHCP_DISCOVER+0x168>)
 8003556:	2200      	movs	r2, #0
 8003558:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800355a:	4b51      	ldr	r3, [pc, #324]	; (80036a0 <send_DHCP_DISCOVER+0x16c>)
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8003560:	4b4f      	ldr	r3, [pc, #316]	; (80036a0 <send_DHCP_DISCOVER+0x16c>)
 8003562:	2200      	movs	r2, #0
 8003564:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8003566:	4b4e      	ldr	r3, [pc, #312]	; (80036a0 <send_DHCP_DISCOVER+0x16c>)
 8003568:	2200      	movs	r2, #0
 800356a:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 800356c:	4b4c      	ldr	r3, [pc, #304]	; (80036a0 <send_DHCP_DISCOVER+0x16c>)
 800356e:	2200      	movs	r2, #0
 8003570:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003572:	2304      	movs	r3, #4
 8003574:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003576:	4b4b      	ldr	r3, [pc, #300]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	88bb      	ldrh	r3, [r7, #4]
 800357c:	1c59      	adds	r1, r3, #1
 800357e:	80b9      	strh	r1, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	2235      	movs	r2, #53	; 0x35
 8003584:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003588:	4b46      	ldr	r3, [pc, #280]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	88bb      	ldrh	r3, [r7, #4]
 800358e:	1c59      	adds	r1, r3, #1
 8003590:	80b9      	strh	r1, [r7, #4]
 8003592:	4413      	add	r3, r2
 8003594:	2201      	movs	r2, #1
 8003596:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 800359a:	4b42      	ldr	r3, [pc, #264]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	88bb      	ldrh	r3, [r7, #4]
 80035a0:	1c59      	adds	r1, r3, #1
 80035a2:	80b9      	strh	r1, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80035ac:	4b3d      	ldr	r3, [pc, #244]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	88bb      	ldrh	r3, [r7, #4]
 80035b2:	1c59      	adds	r1, r3, #1
 80035b4:	80b9      	strh	r1, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	223d      	movs	r2, #61	; 0x3d
 80035ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80035be:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	88bb      	ldrh	r3, [r7, #4]
 80035c4:	1c59      	adds	r1, r3, #1
 80035c6:	80b9      	strh	r1, [r7, #4]
 80035c8:	4413      	add	r3, r2
 80035ca:	2207      	movs	r2, #7
 80035cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80035d0:	4b34      	ldr	r3, [pc, #208]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	88bb      	ldrh	r3, [r7, #4]
 80035d6:	1c59      	adds	r1, r3, #1
 80035d8:	80b9      	strh	r1, [r7, #4]
 80035da:	4413      	add	r3, r2
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80035e2:	4b30      	ldr	r3, [pc, #192]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	88bb      	ldrh	r3, [r7, #4]
 80035e8:	1c59      	adds	r1, r3, #1
 80035ea:	80b9      	strh	r1, [r7, #4]
 80035ec:	4618      	mov	r0, r3
 80035ee:	4b2e      	ldr	r3, [pc, #184]	; (80036a8 <send_DHCP_DISCOVER+0x174>)
 80035f0:	7819      	ldrb	r1, [r3, #0]
 80035f2:	1813      	adds	r3, r2, r0
 80035f4:	460a      	mov	r2, r1
 80035f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80035fa:	4b2a      	ldr	r3, [pc, #168]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	88bb      	ldrh	r3, [r7, #4]
 8003600:	1c59      	adds	r1, r3, #1
 8003602:	80b9      	strh	r1, [r7, #4]
 8003604:	4618      	mov	r0, r3
 8003606:	4b28      	ldr	r3, [pc, #160]	; (80036a8 <send_DHCP_DISCOVER+0x174>)
 8003608:	7859      	ldrb	r1, [r3, #1]
 800360a:	1813      	adds	r3, r2, r0
 800360c:	460a      	mov	r2, r1
 800360e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	88bb      	ldrh	r3, [r7, #4]
 8003618:	1c59      	adds	r1, r3, #1
 800361a:	80b9      	strh	r1, [r7, #4]
 800361c:	4618      	mov	r0, r3
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <send_DHCP_DISCOVER+0x174>)
 8003620:	7899      	ldrb	r1, [r3, #2]
 8003622:	1813      	adds	r3, r2, r0
 8003624:	460a      	mov	r2, r1
 8003626:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800362a:	4b1e      	ldr	r3, [pc, #120]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	88bb      	ldrh	r3, [r7, #4]
 8003630:	1c59      	adds	r1, r3, #1
 8003632:	80b9      	strh	r1, [r7, #4]
 8003634:	4618      	mov	r0, r3
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <send_DHCP_DISCOVER+0x174>)
 8003638:	78d9      	ldrb	r1, [r3, #3]
 800363a:	1813      	adds	r3, r2, r0
 800363c:	460a      	mov	r2, r1
 800363e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	88bb      	ldrh	r3, [r7, #4]
 8003648:	1c59      	adds	r1, r3, #1
 800364a:	80b9      	strh	r1, [r7, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <send_DHCP_DISCOVER+0x174>)
 8003650:	7919      	ldrb	r1, [r3, #4]
 8003652:	1813      	adds	r3, r2, r0
 8003654:	460a      	mov	r2, r1
 8003656:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800365a:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	88bb      	ldrh	r3, [r7, #4]
 8003660:	1c59      	adds	r1, r3, #1
 8003662:	80b9      	strh	r1, [r7, #4]
 8003664:	4618      	mov	r0, r3
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <send_DHCP_DISCOVER+0x174>)
 8003668:	7959      	ldrb	r1, [r3, #5]
 800366a:	1813      	adds	r3, r2, r0
 800366c:	460a      	mov	r2, r1
 800366e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	88bb      	ldrh	r3, [r7, #4]
 8003678:	1c59      	adds	r1, r3, #1
 800367a:	80b9      	strh	r1, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	220c      	movs	r2, #12
 8003680:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8003684:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <send_DHCP_DISCOVER+0x170>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	88bb      	ldrh	r3, [r7, #4]
 800368a:	1c59      	adds	r1, r3, #1
 800368c:	80b9      	strh	r1, [r7, #4]
 800368e:	4413      	add	r3, r2
 8003690:	2200      	movs	r2, #0
 8003692:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003696:	2300      	movs	r3, #0
 8003698:	80fb      	strh	r3, [r7, #6]
 800369a:	e017      	b.n	80036cc <send_DHCP_DISCOVER+0x198>
 800369c:	200010b8 	.word	0x200010b8
 80036a0:	200010bc 	.word	0x200010bc
 80036a4:	200010e0 	.word	0x200010e0
 80036a8:	200010e4 	.word	0x200010e4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80036ac:	88f9      	ldrh	r1, [r7, #6]
 80036ae:	4b80      	ldr	r3, [pc, #512]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	88bb      	ldrh	r3, [r7, #4]
 80036b4:	1c58      	adds	r0, r3, #1
 80036b6:	80b8      	strh	r0, [r7, #4]
 80036b8:	4618      	mov	r0, r3
 80036ba:	4b7e      	ldr	r3, [pc, #504]	; (80038b4 <send_DHCP_DISCOVER+0x380>)
 80036bc:	5c59      	ldrb	r1, [r3, r1]
 80036be:	1813      	adds	r3, r2, r0
 80036c0:	460a      	mov	r2, r1
 80036c2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	3301      	adds	r3, #1
 80036ca:	80fb      	strh	r3, [r7, #6]
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	4a79      	ldr	r2, [pc, #484]	; (80038b4 <send_DHCP_DISCOVER+0x380>)
 80036d0:	5cd3      	ldrb	r3, [r2, r3]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ea      	bne.n	80036ac <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80036d6:	4b78      	ldr	r3, [pc, #480]	; (80038b8 <send_DHCP_DISCOVER+0x384>)
 80036d8:	78db      	ldrb	r3, [r3, #3]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4b74      	ldr	r3, [pc, #464]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 80036e0:	681c      	ldr	r4, [r3, #0]
 80036e2:	88bb      	ldrh	r3, [r7, #4]
 80036e4:	1c59      	adds	r1, r3, #1
 80036e6:	80b9      	strh	r1, [r7, #4]
 80036e8:	461d      	mov	r5, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f001 f94c 	bl	8004988 <NibbleToHex>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	1963      	adds	r3, r4, r5
 80036f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80036fa:	4b6f      	ldr	r3, [pc, #444]	; (80038b8 <send_DHCP_DISCOVER+0x384>)
 80036fc:	78da      	ldrb	r2, [r3, #3]
 80036fe:	4b6c      	ldr	r3, [pc, #432]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 8003700:	681c      	ldr	r4, [r3, #0]
 8003702:	88bb      	ldrh	r3, [r7, #4]
 8003704:	1c59      	adds	r1, r3, #1
 8003706:	80b9      	strh	r1, [r7, #4]
 8003708:	461d      	mov	r5, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f001 f93c 	bl	8004988 <NibbleToHex>
 8003710:	4603      	mov	r3, r0
 8003712:	461a      	mov	r2, r3
 8003714:	1963      	adds	r3, r4, r5
 8003716:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800371a:	4b67      	ldr	r3, [pc, #412]	; (80038b8 <send_DHCP_DISCOVER+0x384>)
 800371c:	791b      	ldrb	r3, [r3, #4]
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4b63      	ldr	r3, [pc, #396]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 8003724:	681c      	ldr	r4, [r3, #0]
 8003726:	88bb      	ldrh	r3, [r7, #4]
 8003728:	1c59      	adds	r1, r3, #1
 800372a:	80b9      	strh	r1, [r7, #4]
 800372c:	461d      	mov	r5, r3
 800372e:	4610      	mov	r0, r2
 8003730:	f001 f92a 	bl	8004988 <NibbleToHex>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	1963      	adds	r3, r4, r5
 800373a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800373e:	4b5e      	ldr	r3, [pc, #376]	; (80038b8 <send_DHCP_DISCOVER+0x384>)
 8003740:	791a      	ldrb	r2, [r3, #4]
 8003742:	4b5b      	ldr	r3, [pc, #364]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 8003744:	681c      	ldr	r4, [r3, #0]
 8003746:	88bb      	ldrh	r3, [r7, #4]
 8003748:	1c59      	adds	r1, r3, #1
 800374a:	80b9      	strh	r1, [r7, #4]
 800374c:	461d      	mov	r5, r3
 800374e:	4610      	mov	r0, r2
 8003750:	f001 f91a 	bl	8004988 <NibbleToHex>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	1963      	adds	r3, r4, r5
 800375a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800375e:	4b56      	ldr	r3, [pc, #344]	; (80038b8 <send_DHCP_DISCOVER+0x384>)
 8003760:	795b      	ldrb	r3, [r3, #5]
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	b2da      	uxtb	r2, r3
 8003766:	4b52      	ldr	r3, [pc, #328]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 8003768:	681c      	ldr	r4, [r3, #0]
 800376a:	88bb      	ldrh	r3, [r7, #4]
 800376c:	1c59      	adds	r1, r3, #1
 800376e:	80b9      	strh	r1, [r7, #4]
 8003770:	461d      	mov	r5, r3
 8003772:	4610      	mov	r0, r2
 8003774:	f001 f908 	bl	8004988 <NibbleToHex>
 8003778:	4603      	mov	r3, r0
 800377a:	461a      	mov	r2, r3
 800377c:	1963      	adds	r3, r4, r5
 800377e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8003782:	4b4d      	ldr	r3, [pc, #308]	; (80038b8 <send_DHCP_DISCOVER+0x384>)
 8003784:	795a      	ldrb	r2, [r3, #5]
 8003786:	4b4a      	ldr	r3, [pc, #296]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 8003788:	681c      	ldr	r4, [r3, #0]
 800378a:	88bb      	ldrh	r3, [r7, #4]
 800378c:	1c59      	adds	r1, r3, #1
 800378e:	80b9      	strh	r1, [r7, #4]
 8003790:	461d      	mov	r5, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f001 f8f8 	bl	8004988 <NibbleToHex>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	1963      	adds	r3, r4, r5
 800379e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	b2d9      	uxtb	r1, r3
 80037a6:	4b42      	ldr	r3, [pc, #264]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	88b8      	ldrh	r0, [r7, #4]
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	3307      	adds	r3, #7
 80037b0:	1ac3      	subs	r3, r0, r3
 80037b2:	3106      	adds	r1, #6
 80037b4:	b2c9      	uxtb	r1, r1
 80037b6:	4413      	add	r3, r2
 80037b8:	460a      	mov	r2, r1
 80037ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80037be:	4b3c      	ldr	r3, [pc, #240]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	88bb      	ldrh	r3, [r7, #4]
 80037c4:	1c59      	adds	r1, r3, #1
 80037c6:	80b9      	strh	r1, [r7, #4]
 80037c8:	4413      	add	r3, r2
 80037ca:	2237      	movs	r2, #55	; 0x37
 80037cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80037d0:	4b37      	ldr	r3, [pc, #220]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	88bb      	ldrh	r3, [r7, #4]
 80037d6:	1c59      	adds	r1, r3, #1
 80037d8:	80b9      	strh	r1, [r7, #4]
 80037da:	4413      	add	r3, r2
 80037dc:	2206      	movs	r2, #6
 80037de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80037e2:	4b33      	ldr	r3, [pc, #204]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	88bb      	ldrh	r3, [r7, #4]
 80037e8:	1c59      	adds	r1, r3, #1
 80037ea:	80b9      	strh	r1, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80037f4:	4b2e      	ldr	r3, [pc, #184]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	88bb      	ldrh	r3, [r7, #4]
 80037fa:	1c59      	adds	r1, r3, #1
 80037fc:	80b9      	strh	r1, [r7, #4]
 80037fe:	4413      	add	r3, r2
 8003800:	2203      	movs	r2, #3
 8003802:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8003806:	4b2a      	ldr	r3, [pc, #168]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	88bb      	ldrh	r3, [r7, #4]
 800380c:	1c59      	adds	r1, r3, #1
 800380e:	80b9      	strh	r1, [r7, #4]
 8003810:	4413      	add	r3, r2
 8003812:	2206      	movs	r2, #6
 8003814:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8003818:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	88bb      	ldrh	r3, [r7, #4]
 800381e:	1c59      	adds	r1, r3, #1
 8003820:	80b9      	strh	r1, [r7, #4]
 8003822:	4413      	add	r3, r2
 8003824:	220f      	movs	r2, #15
 8003826:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 800382a:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	88bb      	ldrh	r3, [r7, #4]
 8003830:	1c59      	adds	r1, r3, #1
 8003832:	80b9      	strh	r1, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	223a      	movs	r2, #58	; 0x3a
 8003838:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800383c:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	88bb      	ldrh	r3, [r7, #4]
 8003842:	1c59      	adds	r1, r3, #1
 8003844:	80b9      	strh	r1, [r7, #4]
 8003846:	4413      	add	r3, r2
 8003848:	223b      	movs	r2, #59	; 0x3b
 800384a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800384e:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	88bb      	ldrh	r3, [r7, #4]
 8003854:	1c59      	adds	r1, r3, #1
 8003856:	80b9      	strh	r1, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	22ff      	movs	r2, #255	; 0xff
 800385c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003860:	88bb      	ldrh	r3, [r7, #4]
 8003862:	80fb      	strh	r3, [r7, #6]
 8003864:	e009      	b.n	800387a <send_DHCP_DISCOVER+0x346>
 8003866:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	88fb      	ldrh	r3, [r7, #6]
 800386c:	4413      	add	r3, r2
 800386e:	2200      	movs	r2, #0
 8003870:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	3301      	adds	r3, #1
 8003878:	80fb      	strh	r3, [r7, #6]
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003880:	d3f1      	bcc.n	8003866 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8003882:	23ff      	movs	r3, #255	; 0xff
 8003884:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8003886:	23ff      	movs	r3, #255	; 0xff
 8003888:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800388a:	23ff      	movs	r3, #255	; 0xff
 800388c:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800388e:	23ff      	movs	r3, #255	; 0xff
 8003890:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <send_DHCP_DISCOVER+0x388>)
 8003894:	7818      	ldrb	r0, [r3, #0]
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <send_DHCP_DISCOVER+0x37c>)
 8003898:	6819      	ldr	r1, [r3, #0]
 800389a:	463b      	mov	r3, r7
 800389c:	2243      	movs	r2, #67	; 0x43
 800389e:	9200      	str	r2, [sp, #0]
 80038a0:	f44f 7209 	mov.w	r2, #548	; 0x224
 80038a4:	f7fe fe70 	bl	8002588 <sendto>
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bdb0      	pop	{r4, r5, r7, pc}
 80038b0:	200010e0 	.word	0x200010e0
 80038b4:	2000006c 	.word	0x2000006c
 80038b8:	200010e4 	.word	0x200010e4
 80038bc:	200010b5 	.word	0x200010b5

080038c0 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80038c0:	b5b0      	push	{r4, r5, r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80038ca:	f7ff fd3f 	bl	800334c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80038ce:	4b1b      	ldr	r3, [pc, #108]	; (800393c <send_DHCP_REQUEST+0x7c>)
 80038d0:	f993 3000 	ldrsb.w	r3, [r3]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d004      	beq.n	80038e2 <send_DHCP_REQUEST+0x22>
 80038d8:	4b18      	ldr	r3, [pc, #96]	; (800393c <send_DHCP_REQUEST+0x7c>)
 80038da:	f993 3000 	ldrsb.w	r3, [r3]
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d134      	bne.n	800394c <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80038e2:	4b17      	ldr	r3, [pc, #92]	; (8003940 <send_DHCP_REQUEST+0x80>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330a      	adds	r3, #10
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80038ec:	4b14      	ldr	r3, [pc, #80]	; (8003940 <send_DHCP_REQUEST+0x80>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330a      	adds	r3, #10
 80038f2:	3301      	adds	r3, #1
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <send_DHCP_REQUEST+0x80>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a11      	ldr	r2, [pc, #68]	; (8003944 <send_DHCP_REQUEST+0x84>)
 80038fe:	7812      	ldrb	r2, [r2, #0]
 8003900:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <send_DHCP_REQUEST+0x80>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a0f      	ldr	r2, [pc, #60]	; (8003944 <send_DHCP_REQUEST+0x84>)
 8003908:	7852      	ldrb	r2, [r2, #1]
 800390a:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <send_DHCP_REQUEST+0x80>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <send_DHCP_REQUEST+0x84>)
 8003912:	7892      	ldrb	r2, [r2, #2]
 8003914:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <send_DHCP_REQUEST+0x80>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a0a      	ldr	r2, [pc, #40]	; (8003944 <send_DHCP_REQUEST+0x84>)
 800391c:	78d2      	ldrb	r2, [r2, #3]
 800391e:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8003920:	4b09      	ldr	r3, [pc, #36]	; (8003948 <send_DHCP_REQUEST+0x88>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8003926:	4b08      	ldr	r3, [pc, #32]	; (8003948 <send_DHCP_REQUEST+0x88>)
 8003928:	785b      	ldrb	r3, [r3, #1]
 800392a:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <send_DHCP_REQUEST+0x88>)
 800392e:	789b      	ldrb	r3, [r3, #2]
 8003930:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <send_DHCP_REQUEST+0x88>)
 8003934:	78db      	ldrb	r3, [r3, #3]
 8003936:	71fb      	strb	r3, [r7, #7]
 8003938:	e010      	b.n	800395c <send_DHCP_REQUEST+0x9c>
 800393a:	bf00      	nop
 800393c:	200010d4 	.word	0x200010d4
 8003940:	200010e0 	.word	0x200010e0
 8003944:	200010c4 	.word	0x200010c4
 8003948:	200010b8 	.word	0x200010b8
   }
   else
   {
   	ip[0] = 255;
 800394c:	23ff      	movs	r3, #255	; 0xff
 800394e:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8003950:	23ff      	movs	r3, #255	; 0xff
 8003952:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8003954:	23ff      	movs	r3, #255	; 0xff
 8003956:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8003958:	23ff      	movs	r3, #255	; 0xff
 800395a:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 800395c:	2304      	movs	r3, #4
 800395e:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003960:	4b8d      	ldr	r3, [pc, #564]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	897b      	ldrh	r3, [r7, #10]
 8003966:	1c59      	adds	r1, r3, #1
 8003968:	8179      	strh	r1, [r7, #10]
 800396a:	4413      	add	r3, r2
 800396c:	2235      	movs	r2, #53	; 0x35
 800396e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003972:	4b89      	ldr	r3, [pc, #548]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	897b      	ldrh	r3, [r7, #10]
 8003978:	1c59      	adds	r1, r3, #1
 800397a:	8179      	strh	r1, [r7, #10]
 800397c:	4413      	add	r3, r2
 800397e:	2201      	movs	r2, #1
 8003980:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8003984:	4b84      	ldr	r3, [pc, #528]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	897b      	ldrh	r3, [r7, #10]
 800398a:	1c59      	adds	r1, r3, #1
 800398c:	8179      	strh	r1, [r7, #10]
 800398e:	4413      	add	r3, r2
 8003990:	2203      	movs	r2, #3
 8003992:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003996:	4b80      	ldr	r3, [pc, #512]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	897b      	ldrh	r3, [r7, #10]
 800399c:	1c59      	adds	r1, r3, #1
 800399e:	8179      	strh	r1, [r7, #10]
 80039a0:	4413      	add	r3, r2
 80039a2:	223d      	movs	r2, #61	; 0x3d
 80039a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80039a8:	4b7b      	ldr	r3, [pc, #492]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	897b      	ldrh	r3, [r7, #10]
 80039ae:	1c59      	adds	r1, r3, #1
 80039b0:	8179      	strh	r1, [r7, #10]
 80039b2:	4413      	add	r3, r2
 80039b4:	2207      	movs	r2, #7
 80039b6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80039ba:	4b77      	ldr	r3, [pc, #476]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	897b      	ldrh	r3, [r7, #10]
 80039c0:	1c59      	adds	r1, r3, #1
 80039c2:	8179      	strh	r1, [r7, #10]
 80039c4:	4413      	add	r3, r2
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80039cc:	4b72      	ldr	r3, [pc, #456]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	897b      	ldrh	r3, [r7, #10]
 80039d2:	1c59      	adds	r1, r3, #1
 80039d4:	8179      	strh	r1, [r7, #10]
 80039d6:	4618      	mov	r0, r3
 80039d8:	4b70      	ldr	r3, [pc, #448]	; (8003b9c <send_DHCP_REQUEST+0x2dc>)
 80039da:	7819      	ldrb	r1, [r3, #0]
 80039dc:	1813      	adds	r3, r2, r0
 80039de:	460a      	mov	r2, r1
 80039e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80039e4:	4b6c      	ldr	r3, [pc, #432]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	897b      	ldrh	r3, [r7, #10]
 80039ea:	1c59      	adds	r1, r3, #1
 80039ec:	8179      	strh	r1, [r7, #10]
 80039ee:	4618      	mov	r0, r3
 80039f0:	4b6a      	ldr	r3, [pc, #424]	; (8003b9c <send_DHCP_REQUEST+0x2dc>)
 80039f2:	7859      	ldrb	r1, [r3, #1]
 80039f4:	1813      	adds	r3, r2, r0
 80039f6:	460a      	mov	r2, r1
 80039f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80039fc:	4b66      	ldr	r3, [pc, #408]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	897b      	ldrh	r3, [r7, #10]
 8003a02:	1c59      	adds	r1, r3, #1
 8003a04:	8179      	strh	r1, [r7, #10]
 8003a06:	4618      	mov	r0, r3
 8003a08:	4b64      	ldr	r3, [pc, #400]	; (8003b9c <send_DHCP_REQUEST+0x2dc>)
 8003a0a:	7899      	ldrb	r1, [r3, #2]
 8003a0c:	1813      	adds	r3, r2, r0
 8003a0e:	460a      	mov	r2, r1
 8003a10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003a14:	4b60      	ldr	r3, [pc, #384]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	897b      	ldrh	r3, [r7, #10]
 8003a1a:	1c59      	adds	r1, r3, #1
 8003a1c:	8179      	strh	r1, [r7, #10]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	4b5e      	ldr	r3, [pc, #376]	; (8003b9c <send_DHCP_REQUEST+0x2dc>)
 8003a22:	78d9      	ldrb	r1, [r3, #3]
 8003a24:	1813      	adds	r3, r2, r0
 8003a26:	460a      	mov	r2, r1
 8003a28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003a2c:	4b5a      	ldr	r3, [pc, #360]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	897b      	ldrh	r3, [r7, #10]
 8003a32:	1c59      	adds	r1, r3, #1
 8003a34:	8179      	strh	r1, [r7, #10]
 8003a36:	4618      	mov	r0, r3
 8003a38:	4b58      	ldr	r3, [pc, #352]	; (8003b9c <send_DHCP_REQUEST+0x2dc>)
 8003a3a:	7919      	ldrb	r1, [r3, #4]
 8003a3c:	1813      	adds	r3, r2, r0
 8003a3e:	460a      	mov	r2, r1
 8003a40:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003a44:	4b54      	ldr	r3, [pc, #336]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	897b      	ldrh	r3, [r7, #10]
 8003a4a:	1c59      	adds	r1, r3, #1
 8003a4c:	8179      	strh	r1, [r7, #10]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	4b52      	ldr	r3, [pc, #328]	; (8003b9c <send_DHCP_REQUEST+0x2dc>)
 8003a52:	7959      	ldrb	r1, [r3, #5]
 8003a54:	1813      	adds	r3, r2, r0
 8003a56:	460a      	mov	r2, r1
 8003a58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	2bff      	cmp	r3, #255	; 0xff
 8003a60:	f040 8084 	bne.w	8003b6c <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003a64:	4b4c      	ldr	r3, [pc, #304]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	897b      	ldrh	r3, [r7, #10]
 8003a6a:	1c59      	adds	r1, r3, #1
 8003a6c:	8179      	strh	r1, [r7, #10]
 8003a6e:	4413      	add	r3, r2
 8003a70:	2232      	movs	r2, #50	; 0x32
 8003a72:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8003a76:	4b48      	ldr	r3, [pc, #288]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	897b      	ldrh	r3, [r7, #10]
 8003a7c:	1c59      	adds	r1, r3, #1
 8003a7e:	8179      	strh	r1, [r7, #10]
 8003a80:	4413      	add	r3, r2
 8003a82:	2204      	movs	r2, #4
 8003a84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003a88:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	897b      	ldrh	r3, [r7, #10]
 8003a8e:	1c59      	adds	r1, r3, #1
 8003a90:	8179      	strh	r1, [r7, #10]
 8003a92:	4618      	mov	r0, r3
 8003a94:	4b42      	ldr	r3, [pc, #264]	; (8003ba0 <send_DHCP_REQUEST+0x2e0>)
 8003a96:	7819      	ldrb	r1, [r3, #0]
 8003a98:	1813      	adds	r3, r2, r0
 8003a9a:	460a      	mov	r2, r1
 8003a9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003aa0:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	897b      	ldrh	r3, [r7, #10]
 8003aa6:	1c59      	adds	r1, r3, #1
 8003aa8:	8179      	strh	r1, [r7, #10]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	4b3c      	ldr	r3, [pc, #240]	; (8003ba0 <send_DHCP_REQUEST+0x2e0>)
 8003aae:	7859      	ldrb	r1, [r3, #1]
 8003ab0:	1813      	adds	r3, r2, r0
 8003ab2:	460a      	mov	r2, r1
 8003ab4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003ab8:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	897b      	ldrh	r3, [r7, #10]
 8003abe:	1c59      	adds	r1, r3, #1
 8003ac0:	8179      	strh	r1, [r7, #10]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <send_DHCP_REQUEST+0x2e0>)
 8003ac6:	7899      	ldrb	r1, [r3, #2]
 8003ac8:	1813      	adds	r3, r2, r0
 8003aca:	460a      	mov	r2, r1
 8003acc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003ad0:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	897b      	ldrh	r3, [r7, #10]
 8003ad6:	1c59      	adds	r1, r3, #1
 8003ad8:	8179      	strh	r1, [r7, #10]
 8003ada:	4618      	mov	r0, r3
 8003adc:	4b30      	ldr	r3, [pc, #192]	; (8003ba0 <send_DHCP_REQUEST+0x2e0>)
 8003ade:	78d9      	ldrb	r1, [r3, #3]
 8003ae0:	1813      	adds	r3, r2, r0
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003ae8:	4b2b      	ldr	r3, [pc, #172]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	897b      	ldrh	r3, [r7, #10]
 8003aee:	1c59      	adds	r1, r3, #1
 8003af0:	8179      	strh	r1, [r7, #10]
 8003af2:	4413      	add	r3, r2
 8003af4:	2236      	movs	r2, #54	; 0x36
 8003af6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8003afa:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	897b      	ldrh	r3, [r7, #10]
 8003b00:	1c59      	adds	r1, r3, #1
 8003b02:	8179      	strh	r1, [r7, #10]
 8003b04:	4413      	add	r3, r2
 8003b06:	2204      	movs	r2, #4
 8003b08:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003b0c:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	897b      	ldrh	r3, [r7, #10]
 8003b12:	1c59      	adds	r1, r3, #1
 8003b14:	8179      	strh	r1, [r7, #10]
 8003b16:	4618      	mov	r0, r3
 8003b18:	4b22      	ldr	r3, [pc, #136]	; (8003ba4 <send_DHCP_REQUEST+0x2e4>)
 8003b1a:	7819      	ldrb	r1, [r3, #0]
 8003b1c:	1813      	adds	r3, r2, r0
 8003b1e:	460a      	mov	r2, r1
 8003b20:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003b24:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	897b      	ldrh	r3, [r7, #10]
 8003b2a:	1c59      	adds	r1, r3, #1
 8003b2c:	8179      	strh	r1, [r7, #10]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <send_DHCP_REQUEST+0x2e4>)
 8003b32:	7859      	ldrb	r1, [r3, #1]
 8003b34:	1813      	adds	r3, r2, r0
 8003b36:	460a      	mov	r2, r1
 8003b38:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003b3c:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	897b      	ldrh	r3, [r7, #10]
 8003b42:	1c59      	adds	r1, r3, #1
 8003b44:	8179      	strh	r1, [r7, #10]
 8003b46:	4618      	mov	r0, r3
 8003b48:	4b16      	ldr	r3, [pc, #88]	; (8003ba4 <send_DHCP_REQUEST+0x2e4>)
 8003b4a:	7899      	ldrb	r1, [r3, #2]
 8003b4c:	1813      	adds	r3, r2, r0
 8003b4e:	460a      	mov	r2, r1
 8003b50:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003b54:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	897b      	ldrh	r3, [r7, #10]
 8003b5a:	1c59      	adds	r1, r3, #1
 8003b5c:	8179      	strh	r1, [r7, #10]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <send_DHCP_REQUEST+0x2e4>)
 8003b62:	78d9      	ldrb	r1, [r3, #3]
 8003b64:	1813      	adds	r3, r2, r0
 8003b66:	460a      	mov	r2, r1
 8003b68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	897b      	ldrh	r3, [r7, #10]
 8003b72:	1c59      	adds	r1, r3, #1
 8003b74:	8179      	strh	r1, [r7, #10]
 8003b76:	4413      	add	r3, r2
 8003b78:	220c      	movs	r2, #12
 8003b7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <send_DHCP_REQUEST+0x2d8>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	897b      	ldrh	r3, [r7, #10]
 8003b84:	1c59      	adds	r1, r3, #1
 8003b86:	8179      	strh	r1, [r7, #10]
 8003b88:	4413      	add	r3, r2
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003b90:	2300      	movs	r3, #0
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	e019      	b.n	8003bca <send_DHCP_REQUEST+0x30a>
 8003b96:	bf00      	nop
 8003b98:	200010e0 	.word	0x200010e0
 8003b9c:	200010e4 	.word	0x200010e4
 8003ba0:	200010c4 	.word	0x200010c4
 8003ba4:	200010b8 	.word	0x200010b8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8003ba8:	4b86      	ldr	r3, [pc, #536]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	897b      	ldrh	r3, [r7, #10]
 8003bae:	1c59      	adds	r1, r3, #1
 8003bb0:	8179      	strh	r1, [r7, #10]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	4984      	ldr	r1, [pc, #528]	; (8003dc8 <send_DHCP_REQUEST+0x508>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	440b      	add	r3, r1
 8003bba:	7819      	ldrb	r1, [r3, #0]
 8003bbc:	1813      	adds	r3, r2, r0
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	4a7f      	ldr	r2, [pc, #508]	; (8003dc8 <send_DHCP_REQUEST+0x508>)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	4413      	add	r3, r2
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e8      	bne.n	8003ba8 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 8003bd6:	4b7d      	ldr	r3, [pc, #500]	; (8003dcc <send_DHCP_REQUEST+0x50c>)
 8003bd8:	78db      	ldrb	r3, [r3, #3]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4b79      	ldr	r3, [pc, #484]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003be0:	681c      	ldr	r4, [r3, #0]
 8003be2:	897b      	ldrh	r3, [r7, #10]
 8003be4:	1c59      	adds	r1, r3, #1
 8003be6:	8179      	strh	r1, [r7, #10]
 8003be8:	461d      	mov	r5, r3
 8003bea:	4610      	mov	r0, r2
 8003bec:	f000 fecc 	bl	8004988 <NibbleToHex>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	1963      	adds	r3, r4, r5
 8003bf6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8003bfa:	4b74      	ldr	r3, [pc, #464]	; (8003dcc <send_DHCP_REQUEST+0x50c>)
 8003bfc:	78da      	ldrb	r2, [r3, #3]
 8003bfe:	4b71      	ldr	r3, [pc, #452]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003c00:	681c      	ldr	r4, [r3, #0]
 8003c02:	897b      	ldrh	r3, [r7, #10]
 8003c04:	1c59      	adds	r1, r3, #1
 8003c06:	8179      	strh	r1, [r7, #10]
 8003c08:	461d      	mov	r5, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f000 febc 	bl	8004988 <NibbleToHex>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	1963      	adds	r3, r4, r5
 8003c16:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8003c1a:	4b6c      	ldr	r3, [pc, #432]	; (8003dcc <send_DHCP_REQUEST+0x50c>)
 8003c1c:	791b      	ldrb	r3, [r3, #4]
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	4b68      	ldr	r3, [pc, #416]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003c24:	681c      	ldr	r4, [r3, #0]
 8003c26:	897b      	ldrh	r3, [r7, #10]
 8003c28:	1c59      	adds	r1, r3, #1
 8003c2a:	8179      	strh	r1, [r7, #10]
 8003c2c:	461d      	mov	r5, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f000 feaa 	bl	8004988 <NibbleToHex>
 8003c34:	4603      	mov	r3, r0
 8003c36:	461a      	mov	r2, r3
 8003c38:	1963      	adds	r3, r4, r5
 8003c3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8003c3e:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <send_DHCP_REQUEST+0x50c>)
 8003c40:	791a      	ldrb	r2, [r3, #4]
 8003c42:	4b60      	ldr	r3, [pc, #384]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003c44:	681c      	ldr	r4, [r3, #0]
 8003c46:	897b      	ldrh	r3, [r7, #10]
 8003c48:	1c59      	adds	r1, r3, #1
 8003c4a:	8179      	strh	r1, [r7, #10]
 8003c4c:	461d      	mov	r5, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f000 fe9a 	bl	8004988 <NibbleToHex>
 8003c54:	4603      	mov	r3, r0
 8003c56:	461a      	mov	r2, r3
 8003c58:	1963      	adds	r3, r4, r5
 8003c5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8003c5e:	4b5b      	ldr	r3, [pc, #364]	; (8003dcc <send_DHCP_REQUEST+0x50c>)
 8003c60:	795b      	ldrb	r3, [r3, #5]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4b57      	ldr	r3, [pc, #348]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003c68:	681c      	ldr	r4, [r3, #0]
 8003c6a:	897b      	ldrh	r3, [r7, #10]
 8003c6c:	1c59      	adds	r1, r3, #1
 8003c6e:	8179      	strh	r1, [r7, #10]
 8003c70:	461d      	mov	r5, r3
 8003c72:	4610      	mov	r0, r2
 8003c74:	f000 fe88 	bl	8004988 <NibbleToHex>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	1963      	adds	r3, r4, r5
 8003c7e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8003c82:	4b52      	ldr	r3, [pc, #328]	; (8003dcc <send_DHCP_REQUEST+0x50c>)
 8003c84:	795a      	ldrb	r2, [r3, #5]
 8003c86:	4b4f      	ldr	r3, [pc, #316]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003c88:	681c      	ldr	r4, [r3, #0]
 8003c8a:	897b      	ldrh	r3, [r7, #10]
 8003c8c:	1c59      	adds	r1, r3, #1
 8003c8e:	8179      	strh	r1, [r7, #10]
 8003c90:	461d      	mov	r5, r3
 8003c92:	4610      	mov	r0, r2
 8003c94:	f000 fe78 	bl	8004988 <NibbleToHex>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	1963      	adds	r3, r4, r5
 8003c9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	b2d9      	uxtb	r1, r3
 8003ca6:	4b47      	ldr	r3, [pc, #284]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	8978      	ldrh	r0, [r7, #10]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3307      	adds	r3, #7
 8003cb0:	1ac3      	subs	r3, r0, r3
 8003cb2:	3106      	adds	r1, #6
 8003cb4:	b2c9      	uxtb	r1, r1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	460a      	mov	r2, r1
 8003cba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8003cbe:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	897b      	ldrh	r3, [r7, #10]
 8003cc4:	1c59      	adds	r1, r3, #1
 8003cc6:	8179      	strh	r1, [r7, #10]
 8003cc8:	4413      	add	r3, r2
 8003cca:	2237      	movs	r2, #55	; 0x37
 8003ccc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8003cd0:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	897b      	ldrh	r3, [r7, #10]
 8003cd6:	1c59      	adds	r1, r3, #1
 8003cd8:	8179      	strh	r1, [r7, #10]
 8003cda:	4413      	add	r3, r2
 8003cdc:	2208      	movs	r2, #8
 8003cde:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8003ce2:	4b38      	ldr	r3, [pc, #224]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	897b      	ldrh	r3, [r7, #10]
 8003ce8:	1c59      	adds	r1, r3, #1
 8003cea:	8179      	strh	r1, [r7, #10]
 8003cec:	4413      	add	r3, r2
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8003cf4:	4b33      	ldr	r3, [pc, #204]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	897b      	ldrh	r3, [r7, #10]
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	8179      	strh	r1, [r7, #10]
 8003cfe:	4413      	add	r3, r2
 8003d00:	2203      	movs	r2, #3
 8003d02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8003d06:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	897b      	ldrh	r3, [r7, #10]
 8003d0c:	1c59      	adds	r1, r3, #1
 8003d0e:	8179      	strh	r1, [r7, #10]
 8003d10:	4413      	add	r3, r2
 8003d12:	2206      	movs	r2, #6
 8003d14:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8003d18:	4b2a      	ldr	r3, [pc, #168]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	897b      	ldrh	r3, [r7, #10]
 8003d1e:	1c59      	adds	r1, r3, #1
 8003d20:	8179      	strh	r1, [r7, #10]
 8003d22:	4413      	add	r3, r2
 8003d24:	220f      	movs	r2, #15
 8003d26:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8003d2a:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	897b      	ldrh	r3, [r7, #10]
 8003d30:	1c59      	adds	r1, r3, #1
 8003d32:	8179      	strh	r1, [r7, #10]
 8003d34:	4413      	add	r3, r2
 8003d36:	223a      	movs	r2, #58	; 0x3a
 8003d38:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8003d3c:	4b21      	ldr	r3, [pc, #132]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	897b      	ldrh	r3, [r7, #10]
 8003d42:	1c59      	adds	r1, r3, #1
 8003d44:	8179      	strh	r1, [r7, #10]
 8003d46:	4413      	add	r3, r2
 8003d48:	223b      	movs	r2, #59	; 0x3b
 8003d4a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8003d4e:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	897b      	ldrh	r3, [r7, #10]
 8003d54:	1c59      	adds	r1, r3, #1
 8003d56:	8179      	strh	r1, [r7, #10]
 8003d58:	4413      	add	r3, r2
 8003d5a:	221f      	movs	r2, #31
 8003d5c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8003d60:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	897b      	ldrh	r3, [r7, #10]
 8003d66:	1c59      	adds	r1, r3, #1
 8003d68:	8179      	strh	r1, [r7, #10]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	2221      	movs	r2, #33	; 0x21
 8003d6e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8003d72:	4b14      	ldr	r3, [pc, #80]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	897b      	ldrh	r3, [r7, #10]
 8003d78:	1c59      	adds	r1, r3, #1
 8003d7a:	8179      	strh	r1, [r7, #10]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	22ff      	movs	r2, #255	; 0xff
 8003d80:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8003d84:	897b      	ldrh	r3, [r7, #10]
 8003d86:	60fb      	str	r3, [r7, #12]
 8003d88:	e009      	b.n	8003d9e <send_DHCP_REQUEST+0x4de>
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4413      	add	r3, r2
 8003d92:	33ec      	adds	r3, #236	; 0xec
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8003da4:	dbf1      	blt.n	8003d8a <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8003da6:	4b0a      	ldr	r3, [pc, #40]	; (8003dd0 <send_DHCP_REQUEST+0x510>)
 8003da8:	7818      	ldrb	r0, [r3, #0]
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <send_DHCP_REQUEST+0x504>)
 8003dac:	6819      	ldr	r1, [r3, #0]
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	2243      	movs	r2, #67	; 0x43
 8003db2:	9200      	str	r2, [sp, #0]
 8003db4:	f44f 7209 	mov.w	r2, #548	; 0x224
 8003db8:	f7fe fbe6 	bl	8002588 <sendto>

}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8003dc4:	200010e0 	.word	0x200010e0
 8003dc8:	2000006c 	.word	0x2000006c
 8003dcc:	200010e4 	.word	0x200010e4
 8003dd0:	200010b5 	.word	0x200010b5

08003dd4 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8003dde:	f7ff fab5 	bl	800334c <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8003de2:	2304      	movs	r3, #4
 8003de4:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8003de6:	4b9f      	ldr	r3, [pc, #636]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330a      	adds	r3, #10
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8003df0:	4b9c      	ldr	r3, [pc, #624]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	330a      	adds	r3, #10
 8003df6:	3301      	adds	r3, #1
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8003dfc:	4b99      	ldr	r3, [pc, #612]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	897b      	ldrh	r3, [r7, #10]
 8003e02:	1c59      	adds	r1, r3, #1
 8003e04:	8179      	strh	r1, [r7, #10]
 8003e06:	4413      	add	r3, r2
 8003e08:	2235      	movs	r2, #53	; 0x35
 8003e0a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003e0e:	4b95      	ldr	r3, [pc, #596]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	897b      	ldrh	r3, [r7, #10]
 8003e14:	1c59      	adds	r1, r3, #1
 8003e16:	8179      	strh	r1, [r7, #10]
 8003e18:	4413      	add	r3, r2
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8003e20:	4b90      	ldr	r3, [pc, #576]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	897b      	ldrh	r3, [r7, #10]
 8003e26:	1c59      	adds	r1, r3, #1
 8003e28:	8179      	strh	r1, [r7, #10]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8003e32:	4b8c      	ldr	r3, [pc, #560]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	897b      	ldrh	r3, [r7, #10]
 8003e38:	1c59      	adds	r1, r3, #1
 8003e3a:	8179      	strh	r1, [r7, #10]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	223d      	movs	r2, #61	; 0x3d
 8003e40:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8003e44:	4b87      	ldr	r3, [pc, #540]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	897b      	ldrh	r3, [r7, #10]
 8003e4a:	1c59      	adds	r1, r3, #1
 8003e4c:	8179      	strh	r1, [r7, #10]
 8003e4e:	4413      	add	r3, r2
 8003e50:	2207      	movs	r2, #7
 8003e52:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8003e56:	4b83      	ldr	r3, [pc, #524]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	897b      	ldrh	r3, [r7, #10]
 8003e5c:	1c59      	adds	r1, r3, #1
 8003e5e:	8179      	strh	r1, [r7, #10]
 8003e60:	4413      	add	r3, r2
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8003e68:	4b7e      	ldr	r3, [pc, #504]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	897b      	ldrh	r3, [r7, #10]
 8003e6e:	1c59      	adds	r1, r3, #1
 8003e70:	8179      	strh	r1, [r7, #10]
 8003e72:	4618      	mov	r0, r3
 8003e74:	4b7c      	ldr	r3, [pc, #496]	; (8004068 <send_DHCP_DECLINE+0x294>)
 8003e76:	7819      	ldrb	r1, [r3, #0]
 8003e78:	1813      	adds	r3, r2, r0
 8003e7a:	460a      	mov	r2, r1
 8003e7c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8003e80:	4b78      	ldr	r3, [pc, #480]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	897b      	ldrh	r3, [r7, #10]
 8003e86:	1c59      	adds	r1, r3, #1
 8003e88:	8179      	strh	r1, [r7, #10]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	4b76      	ldr	r3, [pc, #472]	; (8004068 <send_DHCP_DECLINE+0x294>)
 8003e8e:	7859      	ldrb	r1, [r3, #1]
 8003e90:	1813      	adds	r3, r2, r0
 8003e92:	460a      	mov	r2, r1
 8003e94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8003e98:	4b72      	ldr	r3, [pc, #456]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	897b      	ldrh	r3, [r7, #10]
 8003e9e:	1c59      	adds	r1, r3, #1
 8003ea0:	8179      	strh	r1, [r7, #10]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	4b70      	ldr	r3, [pc, #448]	; (8004068 <send_DHCP_DECLINE+0x294>)
 8003ea6:	7899      	ldrb	r1, [r3, #2]
 8003ea8:	1813      	adds	r3, r2, r0
 8003eaa:	460a      	mov	r2, r1
 8003eac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8003eb0:	4b6c      	ldr	r3, [pc, #432]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	897b      	ldrh	r3, [r7, #10]
 8003eb6:	1c59      	adds	r1, r3, #1
 8003eb8:	8179      	strh	r1, [r7, #10]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	4b6a      	ldr	r3, [pc, #424]	; (8004068 <send_DHCP_DECLINE+0x294>)
 8003ebe:	78d9      	ldrb	r1, [r3, #3]
 8003ec0:	1813      	adds	r3, r2, r0
 8003ec2:	460a      	mov	r2, r1
 8003ec4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8003ec8:	4b66      	ldr	r3, [pc, #408]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	897b      	ldrh	r3, [r7, #10]
 8003ece:	1c59      	adds	r1, r3, #1
 8003ed0:	8179      	strh	r1, [r7, #10]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	4b64      	ldr	r3, [pc, #400]	; (8004068 <send_DHCP_DECLINE+0x294>)
 8003ed6:	7919      	ldrb	r1, [r3, #4]
 8003ed8:	1813      	adds	r3, r2, r0
 8003eda:	460a      	mov	r2, r1
 8003edc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8003ee0:	4b60      	ldr	r3, [pc, #384]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	897b      	ldrh	r3, [r7, #10]
 8003ee6:	1c59      	adds	r1, r3, #1
 8003ee8:	8179      	strh	r1, [r7, #10]
 8003eea:	4618      	mov	r0, r3
 8003eec:	4b5e      	ldr	r3, [pc, #376]	; (8004068 <send_DHCP_DECLINE+0x294>)
 8003eee:	7959      	ldrb	r1, [r3, #5]
 8003ef0:	1813      	adds	r3, r2, r0
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8003ef8:	4b5a      	ldr	r3, [pc, #360]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	897b      	ldrh	r3, [r7, #10]
 8003efe:	1c59      	adds	r1, r3, #1
 8003f00:	8179      	strh	r1, [r7, #10]
 8003f02:	4413      	add	r3, r2
 8003f04:	2232      	movs	r2, #50	; 0x32
 8003f06:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003f0a:	4b56      	ldr	r3, [pc, #344]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	897b      	ldrh	r3, [r7, #10]
 8003f10:	1c59      	adds	r1, r3, #1
 8003f12:	8179      	strh	r1, [r7, #10]
 8003f14:	4413      	add	r3, r2
 8003f16:	2204      	movs	r2, #4
 8003f18:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8003f1c:	4b51      	ldr	r3, [pc, #324]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	897b      	ldrh	r3, [r7, #10]
 8003f22:	1c59      	adds	r1, r3, #1
 8003f24:	8179      	strh	r1, [r7, #10]
 8003f26:	4618      	mov	r0, r3
 8003f28:	4b50      	ldr	r3, [pc, #320]	; (800406c <send_DHCP_DECLINE+0x298>)
 8003f2a:	7819      	ldrb	r1, [r3, #0]
 8003f2c:	1813      	adds	r3, r2, r0
 8003f2e:	460a      	mov	r2, r1
 8003f30:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8003f34:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	897b      	ldrh	r3, [r7, #10]
 8003f3a:	1c59      	adds	r1, r3, #1
 8003f3c:	8179      	strh	r1, [r7, #10]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	4b4a      	ldr	r3, [pc, #296]	; (800406c <send_DHCP_DECLINE+0x298>)
 8003f42:	7859      	ldrb	r1, [r3, #1]
 8003f44:	1813      	adds	r3, r2, r0
 8003f46:	460a      	mov	r2, r1
 8003f48:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8003f4c:	4b45      	ldr	r3, [pc, #276]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	897b      	ldrh	r3, [r7, #10]
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	8179      	strh	r1, [r7, #10]
 8003f56:	4618      	mov	r0, r3
 8003f58:	4b44      	ldr	r3, [pc, #272]	; (800406c <send_DHCP_DECLINE+0x298>)
 8003f5a:	7899      	ldrb	r1, [r3, #2]
 8003f5c:	1813      	adds	r3, r2, r0
 8003f5e:	460a      	mov	r2, r1
 8003f60:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8003f64:	4b3f      	ldr	r3, [pc, #252]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	897b      	ldrh	r3, [r7, #10]
 8003f6a:	1c59      	adds	r1, r3, #1
 8003f6c:	8179      	strh	r1, [r7, #10]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	4b3e      	ldr	r3, [pc, #248]	; (800406c <send_DHCP_DECLINE+0x298>)
 8003f72:	78d9      	ldrb	r1, [r3, #3]
 8003f74:	1813      	adds	r3, r2, r0
 8003f76:	460a      	mov	r2, r1
 8003f78:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8003f7c:	4b39      	ldr	r3, [pc, #228]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	897b      	ldrh	r3, [r7, #10]
 8003f82:	1c59      	adds	r1, r3, #1
 8003f84:	8179      	strh	r1, [r7, #10]
 8003f86:	4413      	add	r3, r2
 8003f88:	2236      	movs	r2, #54	; 0x36
 8003f8a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8003f8e:	4b35      	ldr	r3, [pc, #212]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	897b      	ldrh	r3, [r7, #10]
 8003f94:	1c59      	adds	r1, r3, #1
 8003f96:	8179      	strh	r1, [r7, #10]
 8003f98:	4413      	add	r3, r2
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8003fa0:	4b30      	ldr	r3, [pc, #192]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	897b      	ldrh	r3, [r7, #10]
 8003fa6:	1c59      	adds	r1, r3, #1
 8003fa8:	8179      	strh	r1, [r7, #10]
 8003faa:	4618      	mov	r0, r3
 8003fac:	4b30      	ldr	r3, [pc, #192]	; (8004070 <send_DHCP_DECLINE+0x29c>)
 8003fae:	7819      	ldrb	r1, [r3, #0]
 8003fb0:	1813      	adds	r3, r2, r0
 8003fb2:	460a      	mov	r2, r1
 8003fb4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8003fb8:	4b2a      	ldr	r3, [pc, #168]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	897b      	ldrh	r3, [r7, #10]
 8003fbe:	1c59      	adds	r1, r3, #1
 8003fc0:	8179      	strh	r1, [r7, #10]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	4b2a      	ldr	r3, [pc, #168]	; (8004070 <send_DHCP_DECLINE+0x29c>)
 8003fc6:	7859      	ldrb	r1, [r3, #1]
 8003fc8:	1813      	adds	r3, r2, r0
 8003fca:	460a      	mov	r2, r1
 8003fcc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8003fd0:	4b24      	ldr	r3, [pc, #144]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	897b      	ldrh	r3, [r7, #10]
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	8179      	strh	r1, [r7, #10]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	4b24      	ldr	r3, [pc, #144]	; (8004070 <send_DHCP_DECLINE+0x29c>)
 8003fde:	7899      	ldrb	r1, [r3, #2]
 8003fe0:	1813      	adds	r3, r2, r0
 8003fe2:	460a      	mov	r2, r1
 8003fe4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8003fe8:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	897b      	ldrh	r3, [r7, #10]
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	8179      	strh	r1, [r7, #10]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	4b1e      	ldr	r3, [pc, #120]	; (8004070 <send_DHCP_DECLINE+0x29c>)
 8003ff6:	78d9      	ldrb	r1, [r3, #3]
 8003ff8:	1813      	adds	r3, r2, r0
 8003ffa:	460a      	mov	r2, r1
 8003ffc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8004000:	4b18      	ldr	r3, [pc, #96]	; (8004064 <send_DHCP_DECLINE+0x290>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	897b      	ldrh	r3, [r7, #10]
 8004006:	1c59      	adds	r1, r3, #1
 8004008:	8179      	strh	r1, [r7, #10]
 800400a:	4413      	add	r3, r2
 800400c:	22ff      	movs	r2, #255	; 0xff
 800400e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8004012:	897b      	ldrh	r3, [r7, #10]
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e009      	b.n	800402c <send_DHCP_DECLINE+0x258>
 8004018:	4b12      	ldr	r3, [pc, #72]	; (8004064 <send_DHCP_DECLINE+0x290>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	33ec      	adds	r3, #236	; 0xec
 8004022:	2200      	movs	r2, #0
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3301      	adds	r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8004032:	dbf1      	blt.n	8004018 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8004034:	23ff      	movs	r3, #255	; 0xff
 8004036:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8004038:	23ff      	movs	r3, #255	; 0xff
 800403a:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 800403c:	23ff      	movs	r3, #255	; 0xff
 800403e:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8004040:	23ff      	movs	r3, #255	; 0xff
 8004042:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8004044:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <send_DHCP_DECLINE+0x2a0>)
 8004046:	7818      	ldrb	r0, [r3, #0]
 8004048:	4b06      	ldr	r3, [pc, #24]	; (8004064 <send_DHCP_DECLINE+0x290>)
 800404a:	6819      	ldr	r1, [r3, #0]
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	2243      	movs	r2, #67	; 0x43
 8004050:	9200      	str	r2, [sp, #0]
 8004052:	f44f 7209 	mov.w	r2, #548	; 0x224
 8004056:	f7fe fa97 	bl	8002588 <sendto>
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	200010e0 	.word	0x200010e0
 8004068:	200010e4 	.word	0x200010e4
 800406c:	200010c4 	.word	0x200010c4
 8004070:	200010b8 	.word	0x200010b8
 8004074:	200010b5 	.word	0x200010b5

08004078 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8004082:	4ba1      	ldr	r3, [pc, #644]	; (8004308 <parseDHCPMSG+0x290>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f7fd feb7 	bl	8001dfa <getSn_RX_RSR>
 800408c:	4603      	mov	r3, r0
 800408e:	823b      	strh	r3, [r7, #16]
 8004090:	8a3b      	ldrh	r3, [r7, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d011      	beq.n	80040ba <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8004096:	4b9c      	ldr	r3, [pc, #624]	; (8004308 <parseDHCPMSG+0x290>)
 8004098:	7818      	ldrb	r0, [r3, #0]
 800409a:	4b9c      	ldr	r3, [pc, #624]	; (800430c <parseDHCPMSG+0x294>)
 800409c:	6819      	ldr	r1, [r3, #0]
 800409e:	1d3c      	adds	r4, r7, #4
 80040a0:	8a3a      	ldrh	r2, [r7, #16]
 80040a2:	1cbb      	adds	r3, r7, #2
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	4623      	mov	r3, r4
 80040a8:	f7fe fbc4 	bl	8002834 <recvfrom>
 80040ac:	4603      	mov	r3, r0
 80040ae:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else {return 0;}
   if (svr_port == DHCP_SERVER_PORT) {
 80040b0:	887b      	ldrh	r3, [r7, #2]
 80040b2:	2b43      	cmp	r3, #67	; 0x43
 80040b4:	f040 81ed 	bne.w	8004492 <parseDHCPMSG+0x41a>
 80040b8:	e001      	b.n	80040be <parseDHCPMSG+0x46>
   else {return 0;}
 80040ba:	2300      	movs	r3, #0
 80040bc:	e1eb      	b.n	8004496 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80040be:	4b93      	ldr	r3, [pc, #588]	; (800430c <parseDHCPMSG+0x294>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	7f1a      	ldrb	r2, [r3, #28]
 80040c4:	4b92      	ldr	r3, [pc, #584]	; (8004310 <parseDHCPMSG+0x298>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d124      	bne.n	8004116 <parseDHCPMSG+0x9e>
 80040cc:	4b8f      	ldr	r3, [pc, #572]	; (800430c <parseDHCPMSG+0x294>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	7f5a      	ldrb	r2, [r3, #29]
 80040d2:	4b8f      	ldr	r3, [pc, #572]	; (8004310 <parseDHCPMSG+0x298>)
 80040d4:	785b      	ldrb	r3, [r3, #1]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d11d      	bne.n	8004116 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80040da:	4b8c      	ldr	r3, [pc, #560]	; (800430c <parseDHCPMSG+0x294>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	7f9a      	ldrb	r2, [r3, #30]
 80040e0:	4b8b      	ldr	r3, [pc, #556]	; (8004310 <parseDHCPMSG+0x298>)
 80040e2:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d116      	bne.n	8004116 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 80040e8:	4b88      	ldr	r3, [pc, #544]	; (800430c <parseDHCPMSG+0x294>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	7fda      	ldrb	r2, [r3, #31]
 80040ee:	4b88      	ldr	r3, [pc, #544]	; (8004310 <parseDHCPMSG+0x298>)
 80040f0:	78db      	ldrb	r3, [r3, #3]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d10f      	bne.n	8004116 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 80040f6:	4b85      	ldr	r3, [pc, #532]	; (800430c <parseDHCPMSG+0x294>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f893 2020 	ldrb.w	r2, [r3, #32]
 80040fe:	4b84      	ldr	r3, [pc, #528]	; (8004310 <parseDHCPMSG+0x298>)
 8004100:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d107      	bne.n	8004116 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8004106:	4b81      	ldr	r3, [pc, #516]	; (800430c <parseDHCPMSG+0x294>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800410e:	4b80      	ldr	r3, [pc, #512]	; (8004310 <parseDHCPMSG+0x298>)
 8004110:	795b      	ldrb	r3, [r3, #5]
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8004116:	2300      	movs	r3, #0
 8004118:	e1bd      	b.n	8004496 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 800411a:	4b7e      	ldr	r3, [pc, #504]	; (8004314 <parseDHCPMSG+0x29c>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <parseDHCPMSG+0xc2>
 8004122:	4b7c      	ldr	r3, [pc, #496]	; (8004314 <parseDHCPMSG+0x29c>)
 8004124:	785b      	ldrb	r3, [r3, #1]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d107      	bne.n	800413a <parseDHCPMSG+0xc2>
 800412a:	4b7a      	ldr	r3, [pc, #488]	; (8004314 <parseDHCPMSG+0x29c>)
 800412c:	789b      	ldrb	r3, [r3, #2]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <parseDHCPMSG+0xc2>
 8004132:	4b78      	ldr	r3, [pc, #480]	; (8004314 <parseDHCPMSG+0x29c>)
 8004134:	78db      	ldrb	r3, [r3, #3]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d029      	beq.n	800418e <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 800413a:	793a      	ldrb	r2, [r7, #4]
 800413c:	4b75      	ldr	r3, [pc, #468]	; (8004314 <parseDHCPMSG+0x29c>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d10e      	bne.n	8004162 <parseDHCPMSG+0xea>
 8004144:	797a      	ldrb	r2, [r7, #5]
 8004146:	4b73      	ldr	r3, [pc, #460]	; (8004314 <parseDHCPMSG+0x29c>)
 8004148:	785b      	ldrb	r3, [r3, #1]
 800414a:	429a      	cmp	r2, r3
 800414c:	d109      	bne.n	8004162 <parseDHCPMSG+0xea>
 800414e:	79ba      	ldrb	r2, [r7, #6]
 8004150:	4b70      	ldr	r3, [pc, #448]	; (8004314 <parseDHCPMSG+0x29c>)
 8004152:	789b      	ldrb	r3, [r3, #2]
 8004154:	429a      	cmp	r2, r3
 8004156:	d104      	bne.n	8004162 <parseDHCPMSG+0xea>
 8004158:	79fa      	ldrb	r2, [r7, #7]
 800415a:	4b6e      	ldr	r3, [pc, #440]	; (8004314 <parseDHCPMSG+0x29c>)
 800415c:	78db      	ldrb	r3, [r3, #3]
 800415e:	429a      	cmp	r2, r3
 8004160:	d015      	beq.n	800418e <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8004162:	793a      	ldrb	r2, [r7, #4]
 8004164:	4b6c      	ldr	r3, [pc, #432]	; (8004318 <parseDHCPMSG+0x2a0>)
 8004166:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8004168:	429a      	cmp	r2, r3
 800416a:	d10e      	bne.n	800418a <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800416c:	797a      	ldrb	r2, [r7, #5]
 800416e:	4b6a      	ldr	r3, [pc, #424]	; (8004318 <parseDHCPMSG+0x2a0>)
 8004170:	785b      	ldrb	r3, [r3, #1]
 8004172:	429a      	cmp	r2, r3
 8004174:	d109      	bne.n	800418a <parseDHCPMSG+0x112>
 8004176:	79ba      	ldrb	r2, [r7, #6]
 8004178:	4b67      	ldr	r3, [pc, #412]	; (8004318 <parseDHCPMSG+0x2a0>)
 800417a:	789b      	ldrb	r3, [r3, #2]
 800417c:	429a      	cmp	r2, r3
 800417e:	d104      	bne.n	800418a <parseDHCPMSG+0x112>
 8004180:	79fa      	ldrb	r2, [r7, #7]
 8004182:	4b65      	ldr	r3, [pc, #404]	; (8004318 <parseDHCPMSG+0x2a0>)
 8004184:	78db      	ldrb	r3, [r3, #3]
 8004186:	429a      	cmp	r2, r3
 8004188:	d001      	beq.n	800418e <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 800418a:	2300      	movs	r3, #0
 800418c:	e183      	b.n	8004496 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 800418e:	4b5f      	ldr	r3, [pc, #380]	; (800430c <parseDHCPMSG+0x294>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	33f0      	adds	r3, #240	; 0xf0
 8004198:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 800419a:	8a3b      	ldrh	r3, [r7, #16]
 800419c:	3bf0      	subs	r3, #240	; 0xf0
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4413      	add	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 80041a4:	e170      	b.n	8004488 <parseDHCPMSG+0x410>

			switch ( *p ) {
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b36      	cmp	r3, #54	; 0x36
 80041ac:	dc76      	bgt.n	800429c <parseDHCPMSG+0x224>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f2c0 815d 	blt.w	800446e <parseDHCPMSG+0x3f6>
 80041b4:	2b36      	cmp	r3, #54	; 0x36
 80041b6:	f200 815a 	bhi.w	800446e <parseDHCPMSG+0x3f6>
 80041ba:	a201      	add	r2, pc, #4	; (adr r2, 80041c0 <parseDHCPMSG+0x148>)
 80041bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c0:	080042a9 	.word	0x080042a9
 80041c4:	080042c9 	.word	0x080042c9
 80041c8:	0800446f 	.word	0x0800446f
 80041cc:	08004321 	.word	0x08004321
 80041d0:	0800446f 	.word	0x0800446f
 80041d4:	0800446f 	.word	0x0800446f
 80041d8:	0800436d 	.word	0x0800436d
 80041dc:	0800446f 	.word	0x0800446f
 80041e0:	0800446f 	.word	0x0800446f
 80041e4:	0800446f 	.word	0x0800446f
 80041e8:	0800446f 	.word	0x0800446f
 80041ec:	0800446f 	.word	0x0800446f
 80041f0:	0800446f 	.word	0x0800446f
 80041f4:	0800446f 	.word	0x0800446f
 80041f8:	0800446f 	.word	0x0800446f
 80041fc:	0800446f 	.word	0x0800446f
 8004200:	0800446f 	.word	0x0800446f
 8004204:	0800446f 	.word	0x0800446f
 8004208:	0800446f 	.word	0x0800446f
 800420c:	0800446f 	.word	0x0800446f
 8004210:	0800446f 	.word	0x0800446f
 8004214:	0800446f 	.word	0x0800446f
 8004218:	0800446f 	.word	0x0800446f
 800421c:	0800446f 	.word	0x0800446f
 8004220:	0800446f 	.word	0x0800446f
 8004224:	0800446f 	.word	0x0800446f
 8004228:	0800446f 	.word	0x0800446f
 800422c:	0800446f 	.word	0x0800446f
 8004230:	0800446f 	.word	0x0800446f
 8004234:	0800446f 	.word	0x0800446f
 8004238:	0800446f 	.word	0x0800446f
 800423c:	0800446f 	.word	0x0800446f
 8004240:	0800446f 	.word	0x0800446f
 8004244:	0800446f 	.word	0x0800446f
 8004248:	0800446f 	.word	0x0800446f
 800424c:	0800446f 	.word	0x0800446f
 8004250:	0800446f 	.word	0x0800446f
 8004254:	0800446f 	.word	0x0800446f
 8004258:	0800446f 	.word	0x0800446f
 800425c:	0800446f 	.word	0x0800446f
 8004260:	0800446f 	.word	0x0800446f
 8004264:	0800446f 	.word	0x0800446f
 8004268:	0800446f 	.word	0x0800446f
 800426c:	0800446f 	.word	0x0800446f
 8004270:	0800446f 	.word	0x0800446f
 8004274:	0800446f 	.word	0x0800446f
 8004278:	0800446f 	.word	0x0800446f
 800427c:	0800446f 	.word	0x0800446f
 8004280:	0800446f 	.word	0x0800446f
 8004284:	0800446f 	.word	0x0800446f
 8004288:	0800446f 	.word	0x0800446f
 800428c:	080043b9 	.word	0x080043b9
 8004290:	0800446f 	.word	0x0800446f
 8004294:	080042b1 	.word	0x080042b1
 8004298:	08004415 	.word	0x08004415
 800429c:	2bff      	cmp	r3, #255	; 0xff
 800429e:	f040 80e6 	bne.w	800446e <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	617b      	str	r3, [r7, #20]
   				break;
 80042a6:	e0ef      	b.n	8004488 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	3301      	adds	r3, #1
 80042ac:	617b      	str	r3, [r7, #20]
   				break;
 80042ae:	e0eb      	b.n	8004488 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3301      	adds	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
   				p++;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	3301      	adds	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
   				type = *p++;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	617a      	str	r2, [r7, #20]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	74fb      	strb	r3, [r7, #19]
   				break;
 80042c6:	e0df      	b.n	8004488 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	3301      	adds	r3, #1
 80042cc:	617b      	str	r3, [r7, #20]
   				p++;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	3301      	adds	r3, #1
 80042d2:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	617a      	str	r2, [r7, #20]
 80042da:	781a      	ldrb	r2, [r3, #0]
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <parseDHCPMSG+0x2a4>)
 80042de:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	617a      	str	r2, [r7, #20]
 80042e6:	781a      	ldrb	r2, [r3, #0]
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <parseDHCPMSG+0x2a4>)
 80042ea:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	617a      	str	r2, [r7, #20]
 80042f2:	781a      	ldrb	r2, [r3, #0]
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <parseDHCPMSG+0x2a4>)
 80042f6:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	617a      	str	r2, [r7, #20]
 80042fe:	781a      	ldrb	r2, [r3, #0]
 8004300:	4b06      	ldr	r3, [pc, #24]	; (800431c <parseDHCPMSG+0x2a4>)
 8004302:	70da      	strb	r2, [r3, #3]
   				break;
 8004304:	e0c0      	b.n	8004488 <parseDHCPMSG+0x410>
 8004306:	bf00      	nop
 8004308:	200010b5 	.word	0x200010b5
 800430c:	200010e0 	.word	0x200010e0
 8004310:	200010e4 	.word	0x200010e4
 8004314:	200010b8 	.word	0x200010b8
 8004318:	200010bc 	.word	0x200010bc
 800431c:	200010cc 	.word	0x200010cc
   			case routersOnSubnet :
   				p++;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	3301      	adds	r3, #1
 8004324:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	1c5a      	adds	r2, r3, #1
 800432a:	617a      	str	r2, [r7, #20]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	617a      	str	r2, [r7, #20]
 8004336:	781a      	ldrb	r2, [r3, #0]
 8004338:	4b59      	ldr	r3, [pc, #356]	; (80044a0 <parseDHCPMSG+0x428>)
 800433a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	617a      	str	r2, [r7, #20]
 8004342:	781a      	ldrb	r2, [r3, #0]
 8004344:	4b56      	ldr	r3, [pc, #344]	; (80044a0 <parseDHCPMSG+0x428>)
 8004346:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	617a      	str	r2, [r7, #20]
 800434e:	781a      	ldrb	r2, [r3, #0]
 8004350:	4b53      	ldr	r3, [pc, #332]	; (80044a0 <parseDHCPMSG+0x428>)
 8004352:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	617a      	str	r2, [r7, #20]
 800435a:	781a      	ldrb	r2, [r3, #0]
 800435c:	4b50      	ldr	r3, [pc, #320]	; (80044a0 <parseDHCPMSG+0x428>)
 800435e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8004360:	7afb      	ldrb	r3, [r7, #11]
 8004362:	3b04      	subs	r3, #4
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4413      	add	r3, r2
 8004368:	617b      	str	r3, [r7, #20]
   				break;
 800436a:	e08d      	b.n	8004488 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	3301      	adds	r3, #1
 8004370:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	617a      	str	r2, [r7, #20]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	617a      	str	r2, [r7, #20]
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	4b47      	ldr	r3, [pc, #284]	; (80044a4 <parseDHCPMSG+0x42c>)
 8004386:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	617a      	str	r2, [r7, #20]
 800438e:	781a      	ldrb	r2, [r3, #0]
 8004390:	4b44      	ldr	r3, [pc, #272]	; (80044a4 <parseDHCPMSG+0x42c>)
 8004392:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	617a      	str	r2, [r7, #20]
 800439a:	781a      	ldrb	r2, [r3, #0]
 800439c:	4b41      	ldr	r3, [pc, #260]	; (80044a4 <parseDHCPMSG+0x42c>)
 800439e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	617a      	str	r2, [r7, #20]
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	4b3e      	ldr	r3, [pc, #248]	; (80044a4 <parseDHCPMSG+0x42c>)
 80043aa:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80043ac:	7afb      	ldrb	r3, [r7, #11]
 80043ae:	3b04      	subs	r3, #4
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4413      	add	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]
   				break;
 80043b6:	e067      	b.n	8004488 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	3301      	adds	r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	617a      	str	r2, [r7, #20]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	617a      	str	r2, [r7, #20]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b35      	ldr	r3, [pc, #212]	; (80044a8 <parseDHCPMSG+0x430>)
 80043d4:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80043d6:	4b34      	ldr	r3, [pc, #208]	; (80044a8 <parseDHCPMSG+0x430>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	021a      	lsls	r2, r3, #8
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	1c59      	adds	r1, r3, #1
 80043e0:	6179      	str	r1, [r7, #20]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	4413      	add	r3, r2
 80043e6:	4a30      	ldr	r2, [pc, #192]	; (80044a8 <parseDHCPMSG+0x430>)
 80043e8:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80043ea:	4b2f      	ldr	r3, [pc, #188]	; (80044a8 <parseDHCPMSG+0x430>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	021a      	lsls	r2, r3, #8
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	1c59      	adds	r1, r3, #1
 80043f4:	6179      	str	r1, [r7, #20]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	4413      	add	r3, r2
 80043fa:	4a2b      	ldr	r2, [pc, #172]	; (80044a8 <parseDHCPMSG+0x430>)
 80043fc:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80043fe:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <parseDHCPMSG+0x430>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	021a      	lsls	r2, r3, #8
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	1c59      	adds	r1, r3, #1
 8004408:	6179      	str	r1, [r7, #20]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	4413      	add	r3, r2
 800440e:	4a26      	ldr	r2, [pc, #152]	; (80044a8 <parseDHCPMSG+0x430>)
 8004410:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8004412:	e039      	b.n	8004488 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3301      	adds	r3, #1
 8004418:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	617a      	str	r2, [r7, #20]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	617a      	str	r2, [r7, #20]
 800442a:	781a      	ldrb	r2, [r3, #0]
 800442c:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <parseDHCPMSG+0x434>)
 800442e:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	617a      	str	r2, [r7, #20]
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <parseDHCPMSG+0x434>)
 800443a:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	617a      	str	r2, [r7, #20]
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	4b19      	ldr	r3, [pc, #100]	; (80044ac <parseDHCPMSG+0x434>)
 8004446:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	617a      	str	r2, [r7, #20]
 800444e:	781a      	ldrb	r2, [r3, #0]
 8004450:	4b16      	ldr	r3, [pc, #88]	; (80044ac <parseDHCPMSG+0x434>)
 8004452:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8004454:	793a      	ldrb	r2, [r7, #4]
 8004456:	4b16      	ldr	r3, [pc, #88]	; (80044b0 <parseDHCPMSG+0x438>)
 8004458:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 800445a:	797a      	ldrb	r2, [r7, #5]
 800445c:	4b14      	ldr	r3, [pc, #80]	; (80044b0 <parseDHCPMSG+0x438>)
 800445e:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8004460:	79ba      	ldrb	r2, [r7, #6]
 8004462:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <parseDHCPMSG+0x438>)
 8004464:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8004466:	79fa      	ldrb	r2, [r7, #7]
 8004468:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <parseDHCPMSG+0x438>)
 800446a:	70da      	strb	r2, [r3, #3]
   				break;
 800446c:	e00c      	b.n	8004488 <parseDHCPMSG+0x410>
   			default :
   				p++;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	3301      	adds	r3, #1
 8004472:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	617a      	str	r2, [r7, #20]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800447e:	7afb      	ldrb	r3, [r7, #11]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	4413      	add	r3, r2
 8004484:	617b      	str	r3, [r7, #20]
   				break;
 8004486:	bf00      	nop
		while ( p < e ) {
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	429a      	cmp	r2, r3
 800448e:	f4ff ae8a 	bcc.w	80041a6 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 8004492:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8004496:	4618      	mov	r0, r3
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	bd90      	pop	{r4, r7, pc}
 800449e:	bf00      	nop
 80044a0:	200010c8 	.word	0x200010c8
 80044a4:	200010d0 	.word	0x200010d0
 80044a8:	20000064 	.word	0x20000064
 80044ac:	200010b8 	.word	0x200010b8
 80044b0:	200010bc 	.word	0x200010bc

080044b4 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80044ba:	4b7e      	ldr	r3, [pc, #504]	; (80046b4 <DHCP_run+0x200>)
 80044bc:	f993 3000 	ldrsb.w	r3, [r3]
 80044c0:	2b06      	cmp	r3, #6
 80044c2:	d101      	bne.n	80044c8 <DHCP_run+0x14>
 80044c4:	2305      	movs	r3, #5
 80044c6:	e0f1      	b.n	80046ac <DHCP_run+0x1f8>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80044c8:	4b7b      	ldr	r3, [pc, #492]	; (80046b8 <DHCP_run+0x204>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	3304      	adds	r3, #4
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	3303      	adds	r3, #3
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7fd fb84 	bl	8001be0 <WIZCHIP_READ>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b22      	cmp	r3, #34	; 0x22
 80044dc:	d006      	beq.n	80044ec <DHCP_run+0x38>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 80044de:	4b76      	ldr	r3, [pc, #472]	; (80046b8 <DHCP_run+0x204>)
 80044e0:	7818      	ldrb	r0, [r3, #0]
 80044e2:	2300      	movs	r3, #0
 80044e4:	2244      	movs	r2, #68	; 0x44
 80044e6:	2102      	movs	r1, #2
 80044e8:	f7fd fee4 	bl	80022b4 <socket>

	ret = DHCP_RUNNING;
 80044ec:	2301      	movs	r3, #1
 80044ee:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 80044f0:	f7ff fdc2 	bl	8004078 <parseDHCPMSG>
 80044f4:	4603      	mov	r3, r0
 80044f6:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80044f8:	4b6e      	ldr	r3, [pc, #440]	; (80046b4 <DHCP_run+0x200>)
 80044fa:	f993 3000 	ldrsb.w	r3, [r3]
 80044fe:	2b04      	cmp	r3, #4
 8004500:	f200 80d0 	bhi.w	80046a4 <DHCP_run+0x1f0>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <DHCP_run+0x58>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	08004521 	.word	0x08004521
 8004510:	08004545 	.word	0x08004545
 8004514:	08004589 	.word	0x08004589
 8004518:	080045d9 	.word	0x080045d9
 800451c:	08004633 	.word	0x08004633
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8004520:	4b66      	ldr	r3, [pc, #408]	; (80046bc <DHCP_run+0x208>)
 8004522:	2200      	movs	r2, #0
 8004524:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8004526:	4b65      	ldr	r3, [pc, #404]	; (80046bc <DHCP_run+0x208>)
 8004528:	2200      	movs	r2, #0
 800452a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 800452c:	4b63      	ldr	r3, [pc, #396]	; (80046bc <DHCP_run+0x208>)
 800452e:	2200      	movs	r2, #0
 8004530:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8004532:	4b62      	ldr	r3, [pc, #392]	; (80046bc <DHCP_run+0x208>)
 8004534:	2200      	movs	r2, #0
 8004536:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8004538:	f7fe fffc 	bl	8003534 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800453c:	4b5d      	ldr	r3, [pc, #372]	; (80046b4 <DHCP_run+0x200>)
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
   		break;
 8004542:	e0b2      	b.n	80046aa <DHCP_run+0x1f6>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8004544:	79bb      	ldrb	r3, [r7, #6]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d119      	bne.n	800457e <DHCP_run+0xca>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800454a:	4b5d      	ldr	r3, [pc, #372]	; (80046c0 <DHCP_run+0x20c>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	7c1a      	ldrb	r2, [r3, #16]
 8004550:	4b5a      	ldr	r3, [pc, #360]	; (80046bc <DHCP_run+0x208>)
 8004552:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8004554:	4b5a      	ldr	r3, [pc, #360]	; (80046c0 <DHCP_run+0x20c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	7c5a      	ldrb	r2, [r3, #17]
 800455a:	4b58      	ldr	r3, [pc, #352]	; (80046bc <DHCP_run+0x208>)
 800455c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800455e:	4b58      	ldr	r3, [pc, #352]	; (80046c0 <DHCP_run+0x20c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	7c9a      	ldrb	r2, [r3, #18]
 8004564:	4b55      	ldr	r3, [pc, #340]	; (80046bc <DHCP_run+0x208>)
 8004566:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8004568:	4b55      	ldr	r3, [pc, #340]	; (80046c0 <DHCP_run+0x20c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	7cda      	ldrb	r2, [r3, #19]
 800456e:	4b53      	ldr	r3, [pc, #332]	; (80046bc <DHCP_run+0x208>)
 8004570:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8004572:	f7ff f9a5 	bl	80038c0 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8004576:	4b4f      	ldr	r3, [pc, #316]	; (80046b4 <DHCP_run+0x200>)
 8004578:	2202      	movs	r2, #2
 800457a:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 800457c:	e095      	b.n	80046aa <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 800457e:	f000 f8c1 	bl	8004704 <check_DHCP_timeout>
 8004582:	4603      	mov	r3, r0
 8004584:	71fb      	strb	r3, [r7, #7]
         break;
 8004586:	e090      	b.n	80046aa <DHCP_run+0x1f6>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8004588:	79bb      	ldrb	r3, [r7, #6]
 800458a:	2b05      	cmp	r3, #5
 800458c:	d116      	bne.n	80045bc <DHCP_run+0x108>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 800458e:	f000 f919 	bl	80047c4 <check_DHCP_leasedIP>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <DHCP_run+0xf6>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 8004598:	4b4a      	ldr	r3, [pc, #296]	; (80046c4 <DHCP_run+0x210>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4798      	blx	r3
					reset_DHCP_timeout();
 800459e:	f000 f9dd 	bl	800495c <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80045a2:	4b44      	ldr	r3, [pc, #272]	; (80046b4 <DHCP_run+0x200>)
 80045a4:	2203      	movs	r2, #3
 80045a6:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80045a8:	e07f      	b.n	80046aa <DHCP_run+0x1f6>
					reset_DHCP_timeout();
 80045aa:	f000 f9d7 	bl	800495c <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80045ae:	4b46      	ldr	r3, [pc, #280]	; (80046c8 <DHCP_run+0x214>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80045b4:	4b3f      	ldr	r3, [pc, #252]	; (80046b4 <DHCP_run+0x200>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
		break;
 80045ba:	e076      	b.n	80046aa <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 80045bc:	79bb      	ldrb	r3, [r7, #6]
 80045be:	2b06      	cmp	r3, #6
 80045c0:	d105      	bne.n	80045ce <DHCP_run+0x11a>
				reset_DHCP_timeout();
 80045c2:	f000 f9cb 	bl	800495c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80045c6:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <DHCP_run+0x200>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	701a      	strb	r2, [r3, #0]
		break;
 80045cc:	e06d      	b.n	80046aa <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 80045ce:	f000 f899 	bl	8004704 <check_DHCP_timeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	71fb      	strb	r3, [r7, #7]
		break;
 80045d6:	e068      	b.n	80046aa <DHCP_run+0x1f6>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 80045d8:	2304      	movs	r3, #4
 80045da:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80045dc:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <DHCP_run+0x218>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d060      	beq.n	80046a8 <DHCP_run+0x1f4>
 80045e6:	4b39      	ldr	r3, [pc, #228]	; (80046cc <DHCP_run+0x218>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	085a      	lsrs	r2, r3, #1
 80045ec:	4b38      	ldr	r3, [pc, #224]	; (80046d0 <DHCP_run+0x21c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d259      	bcs.n	80046a8 <DHCP_run+0x1f4>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80045f8:	4b30      	ldr	r3, [pc, #192]	; (80046bc <DHCP_run+0x208>)
 80045fa:	781a      	ldrb	r2, [r3, #0]
 80045fc:	4b35      	ldr	r3, [pc, #212]	; (80046d4 <DHCP_run+0x220>)
 80045fe:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8004600:	4b2e      	ldr	r3, [pc, #184]	; (80046bc <DHCP_run+0x208>)
 8004602:	785a      	ldrb	r2, [r3, #1]
 8004604:	4b33      	ldr	r3, [pc, #204]	; (80046d4 <DHCP_run+0x220>)
 8004606:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8004608:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <DHCP_run+0x208>)
 800460a:	789a      	ldrb	r2, [r3, #2]
 800460c:	4b31      	ldr	r3, [pc, #196]	; (80046d4 <DHCP_run+0x220>)
 800460e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8004610:	4b2a      	ldr	r3, [pc, #168]	; (80046bc <DHCP_run+0x208>)
 8004612:	78da      	ldrb	r2, [r3, #3]
 8004614:	4b2f      	ldr	r3, [pc, #188]	; (80046d4 <DHCP_run+0x220>)
 8004616:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8004618:	4b2f      	ldr	r3, [pc, #188]	; (80046d8 <DHCP_run+0x224>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3301      	adds	r3, #1
 800461e:	4a2e      	ldr	r2, [pc, #184]	; (80046d8 <DHCP_run+0x224>)
 8004620:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8004622:	f7ff f94d 	bl	80038c0 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8004626:	f000 f999 	bl	800495c <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800462a:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <DHCP_run+0x200>)
 800462c:	2204      	movs	r2, #4
 800462e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8004630:	e03a      	b.n	80046a8 <DHCP_run+0x1f4>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8004632:	2304      	movs	r3, #4
 8004634:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8004636:	79bb      	ldrb	r3, [r7, #6]
 8004638:	2b05      	cmp	r3, #5
 800463a:	d125      	bne.n	8004688 <DHCP_run+0x1d4>
				dhcp_retry_count = 0;
 800463c:	4b27      	ldr	r3, [pc, #156]	; (80046dc <DHCP_run+0x228>)
 800463e:	2200      	movs	r2, #0
 8004640:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8004642:	4b24      	ldr	r3, [pc, #144]	; (80046d4 <DHCP_run+0x220>)
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <DHCP_run+0x208>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d111      	bne.n	8004672 <DHCP_run+0x1be>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800464e:	4b21      	ldr	r3, [pc, #132]	; (80046d4 <DHCP_run+0x220>)
 8004650:	785a      	ldrb	r2, [r3, #1]
 8004652:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <DHCP_run+0x208>)
 8004654:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8004656:	429a      	cmp	r2, r3
 8004658:	d10b      	bne.n	8004672 <DHCP_run+0x1be>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800465a:	4b1e      	ldr	r3, [pc, #120]	; (80046d4 <DHCP_run+0x220>)
 800465c:	789a      	ldrb	r2, [r3, #2]
 800465e:	4b17      	ldr	r3, [pc, #92]	; (80046bc <DHCP_run+0x208>)
 8004660:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d105      	bne.n	8004672 <DHCP_run+0x1be>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8004666:	4b1b      	ldr	r3, [pc, #108]	; (80046d4 <DHCP_run+0x220>)
 8004668:	78da      	ldrb	r2, [r3, #3]
 800466a:	4b14      	ldr	r3, [pc, #80]	; (80046bc <DHCP_run+0x208>)
 800466c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d004      	beq.n	800467c <DHCP_run+0x1c8>
				{
					ret = DHCP_IP_CHANGED;
 8004672:	2303      	movs	r3, #3
 8004674:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8004676:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <DHCP_run+0x22c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 800467c:	f000 f96e 	bl	800495c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8004680:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <DHCP_run+0x200>)
 8004682:	2203      	movs	r2, #3
 8004684:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8004686:	e010      	b.n	80046aa <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 8004688:	79bb      	ldrb	r3, [r7, #6]
 800468a:	2b06      	cmp	r3, #6
 800468c:	d105      	bne.n	800469a <DHCP_run+0x1e6>
				reset_DHCP_timeout();
 800468e:	f000 f965 	bl	800495c <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8004692:	4b08      	ldr	r3, [pc, #32]	; (80046b4 <DHCP_run+0x200>)
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]
	   	break;
 8004698:	e007      	b.n	80046aa <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 800469a:	f000 f833 	bl	8004704 <check_DHCP_timeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	71fb      	strb	r3, [r7, #7]
	   	break;
 80046a2:	e002      	b.n	80046aa <DHCP_run+0x1f6>
		default :
   		break;
 80046a4:	bf00      	nop
 80046a6:	e000      	b.n	80046aa <DHCP_run+0x1f6>
		break;
 80046a8:	bf00      	nop
	}

	return ret;
 80046aa:	79fb      	ldrb	r3, [r7, #7]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	200010d4 	.word	0x200010d4
 80046b8:	200010b5 	.word	0x200010b5
 80046bc:	200010c4 	.word	0x200010c4
 80046c0:	200010e0 	.word	0x200010e0
 80046c4:	20000074 	.word	0x20000074
 80046c8:	2000007c 	.word	0x2000007c
 80046cc:	20000064 	.word	0x20000064
 80046d0:	200010d8 	.word	0x200010d8
 80046d4:	200010c0 	.word	0x200010c0
 80046d8:	200010dc 	.word	0x200010dc
 80046dc:	200010d5 	.word	0x200010d5
 80046e0:	20000078 	.word	0x20000078

080046e4 <DHCP_stop>:

void    DHCP_stop(void)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	af00      	add	r7, sp, #0
   close(DHCP_SOCKET);
 80046e8:	4b04      	ldr	r3, [pc, #16]	; (80046fc <DHCP_stop+0x18>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fd fee5 	bl	80024bc <close>
   dhcp_state = STATE_DHCP_STOP;
 80046f2:	4b03      	ldr	r3, [pc, #12]	; (8004700 <DHCP_stop+0x1c>)
 80046f4:	2206      	movs	r2, #6
 80046f6:	701a      	strb	r2, [r3, #0]
}
 80046f8:	bf00      	nop
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	200010b5 	.word	0x200010b5
 8004700:	200010d4 	.word	0x200010d4

08004704 <check_DHCP_timeout>:

uint8_t check_DHCP_timeout(void)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 800470a:	2301      	movs	r3, #1
 800470c:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 800470e:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <check_DHCP_timeout+0xb0>)
 8004710:	f993 3000 	ldrsb.w	r3, [r3]
 8004714:	2b01      	cmp	r3, #1
 8004716:	dc2d      	bgt.n	8004774 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <check_DHCP_timeout+0xb4>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b27      	ldr	r3, [pc, #156]	; (80047bc <check_DHCP_timeout+0xb8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d242      	bcs.n	80047aa <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8004724:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <check_DHCP_timeout+0xbc>)
 8004726:	f993 3000 	ldrsb.w	r3, [r3]
 800472a:	2b04      	cmp	r3, #4
 800472c:	d00c      	beq.n	8004748 <check_DHCP_timeout+0x44>
 800472e:	2b04      	cmp	r3, #4
 8004730:	dc0d      	bgt.n	800474e <check_DHCP_timeout+0x4a>
 8004732:	2b01      	cmp	r3, #1
 8004734:	d002      	beq.n	800473c <check_DHCP_timeout+0x38>
 8004736:	2b02      	cmp	r3, #2
 8004738:	d003      	beq.n	8004742 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800473a:	e008      	b.n	800474e <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 800473c:	f7fe fefa 	bl	8003534 <send_DHCP_DISCOVER>
				break;
 8004740:	e006      	b.n	8004750 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8004742:	f7ff f8bd 	bl	80038c0 <send_DHCP_REQUEST>
				break;
 8004746:	e003      	b.n	8004750 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8004748:	f7ff f8ba 	bl	80038c0 <send_DHCP_REQUEST>
				break;
 800474c:	e000      	b.n	8004750 <check_DHCP_timeout+0x4c>
				break;
 800474e:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8004750:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <check_DHCP_timeout+0xb8>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8004756:	4b19      	ldr	r3, [pc, #100]	; (80047bc <check_DHCP_timeout+0xb8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330a      	adds	r3, #10
 800475c:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <check_DHCP_timeout+0xb4>)
 800475e:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8004760:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <check_DHCP_timeout+0xb0>)
 8004762:	f993 3000 	ldrsb.w	r3, [r3]
 8004766:	b2db      	uxtb	r3, r3
 8004768:	3301      	adds	r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	b25a      	sxtb	r2, r3
 800476e:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <check_DHCP_timeout+0xb0>)
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e01a      	b.n	80047aa <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8004774:	4b12      	ldr	r3, [pc, #72]	; (80047c0 <check_DHCP_timeout+0xbc>)
 8004776:	f993 3000 	ldrsb.w	r3, [r3]
 800477a:	2b04      	cmp	r3, #4
 800477c:	d00c      	beq.n	8004798 <check_DHCP_timeout+0x94>
 800477e:	2b04      	cmp	r3, #4
 8004780:	dc10      	bgt.n	80047a4 <check_DHCP_timeout+0xa0>
 8004782:	2b01      	cmp	r3, #1
 8004784:	d002      	beq.n	800478c <check_DHCP_timeout+0x88>
 8004786:	2b02      	cmp	r3, #2
 8004788:	d006      	beq.n	8004798 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800478a:	e00b      	b.n	80047a4 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 800478c:	4b0c      	ldr	r3, [pc, #48]	; (80047c0 <check_DHCP_timeout+0xbc>)
 800478e:	2200      	movs	r2, #0
 8004790:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8004792:	2300      	movs	r3, #0
 8004794:	71fb      	strb	r3, [r7, #7]
				break;
 8004796:	e006      	b.n	80047a6 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8004798:	f7fe fecc 	bl	8003534 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800479c:	4b08      	ldr	r3, [pc, #32]	; (80047c0 <check_DHCP_timeout+0xbc>)
 800479e:	2201      	movs	r2, #1
 80047a0:	701a      	strb	r2, [r3, #0]
				break;
 80047a2:	e000      	b.n	80047a6 <check_DHCP_timeout+0xa2>
				break;
 80047a4:	bf00      	nop
		}
		reset_DHCP_timeout();
 80047a6:	f000 f8d9 	bl	800495c <reset_DHCP_timeout>
	}
	return ret;
 80047aa:	79fb      	ldrb	r3, [r7, #7]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	200010d5 	.word	0x200010d5
 80047b8:	20000068 	.word	0x20000068
 80047bc:	200010d8 	.word	0x200010d8
 80047c0:	200010d4 	.word	0x200010d4

080047c4 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80047ca:	2019      	movs	r0, #25
 80047cc:	f7fd fa08 	bl	8001be0 <WIZCHIP_READ>
 80047d0:	4603      	mov	r3, r0
 80047d2:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80047d4:	2103      	movs	r1, #3
 80047d6:	2019      	movs	r0, #25
 80047d8:	f7fd f9d4 	bl	8001b84 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80047dc:	4b13      	ldr	r3, [pc, #76]	; (800482c <check_DHCP_leasedIP+0x68>)
 80047de:	7818      	ldrb	r0, [r3, #0]
 80047e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	4b12      	ldr	r3, [pc, #72]	; (8004830 <check_DHCP_leasedIP+0x6c>)
 80047e8:	2211      	movs	r2, #17
 80047ea:	4912      	ldr	r1, [pc, #72]	; (8004834 <check_DHCP_leasedIP+0x70>)
 80047ec:	f7fd fecc 	bl	8002588 <sendto>
 80047f0:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 80047f2:	79fb      	ldrb	r3, [r7, #7]
 80047f4:	4619      	mov	r1, r3
 80047f6:	2019      	movs	r0, #25
 80047f8:	f7fd f9c4 	bl	8001b84 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	f113 0f0d 	cmn.w	r3, #13
 8004802:	d101      	bne.n	8004808 <check_DHCP_leasedIP+0x44>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 8004804:	2301      	movs	r3, #1
 8004806:	e00c      	b.n	8004822 <check_DHCP_leasedIP+0x5e>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 8004808:	f7ff fae4 	bl	8003dd4 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 800480c:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <check_DHCP_leasedIP+0x74>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8004812:	bf00      	nop
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <check_DHCP_leasedIP+0x74>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b01      	cmp	r3, #1
 800481e:	d9f9      	bls.n	8004814 <check_DHCP_leasedIP+0x50>

		return 0;
 8004820:	2300      	movs	r3, #0
	}
}	
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	200010b5 	.word	0x200010b5
 8004830:	200010c4 	.word	0x200010c4
 8004834:	080052d4 	.word	0x080052d4
 8004838:	200010d8 	.word	0x200010d8

0800483c <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	4603      	mov	r3, r0
 8004844:	6039      	str	r1, [r7, #0]
 8004846:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 800484c:	2206      	movs	r2, #6
 800484e:	493d      	ldr	r1, [pc, #244]	; (8004944 <DHCP_init+0x108>)
 8004850:	2009      	movs	r0, #9
 8004852:	f7fd fa41 	bl	8001cd8 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8004856:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <DHCP_init+0x108>)
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	4b3a      	ldr	r3, [pc, #232]	; (8004944 <DHCP_init+0x108>)
 800485c:	785b      	ldrb	r3, [r3, #1]
 800485e:	4313      	orrs	r3, r2
 8004860:	b2da      	uxtb	r2, r3
 8004862:	4b38      	ldr	r3, [pc, #224]	; (8004944 <DHCP_init+0x108>)
 8004864:	789b      	ldrb	r3, [r3, #2]
 8004866:	4313      	orrs	r3, r2
 8004868:	b2da      	uxtb	r2, r3
 800486a:	4b36      	ldr	r3, [pc, #216]	; (8004944 <DHCP_init+0x108>)
 800486c:	78db      	ldrb	r3, [r3, #3]
 800486e:	4313      	orrs	r3, r2
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4b34      	ldr	r3, [pc, #208]	; (8004944 <DHCP_init+0x108>)
 8004874:	791b      	ldrb	r3, [r3, #4]
 8004876:	4313      	orrs	r3, r2
 8004878:	b2da      	uxtb	r2, r3
 800487a:	4b32      	ldr	r3, [pc, #200]	; (8004944 <DHCP_init+0x108>)
 800487c:	795b      	ldrb	r3, [r3, #5]
 800487e:	4313      	orrs	r3, r2
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d116      	bne.n	80048b4 <DHCP_init+0x78>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8004886:	4b2f      	ldr	r3, [pc, #188]	; (8004944 <DHCP_init+0x108>)
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 800488c:	4b2d      	ldr	r3, [pc, #180]	; (8004944 <DHCP_init+0x108>)
 800488e:	2208      	movs	r2, #8
 8004890:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8004892:	4b2c      	ldr	r3, [pc, #176]	; (8004944 <DHCP_init+0x108>)
 8004894:	22dc      	movs	r2, #220	; 0xdc
 8004896:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8004898:	4b2a      	ldr	r3, [pc, #168]	; (8004944 <DHCP_init+0x108>)
 800489a:	2200      	movs	r2, #0
 800489c:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 800489e:	4b29      	ldr	r3, [pc, #164]	; (8004944 <DHCP_init+0x108>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 80048a4:	4b27      	ldr	r3, [pc, #156]	; (8004944 <DHCP_init+0x108>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 80048aa:	2206      	movs	r2, #6
 80048ac:	4925      	ldr	r1, [pc, #148]	; (8004944 <DHCP_init+0x108>)
 80048ae:	2009      	movs	r0, #9
 80048b0:	f7fd f9c4 	bl	8001c3c <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 80048b4:	4a24      	ldr	r2, [pc, #144]	; (8004948 <DHCP_init+0x10c>)
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80048ba:	4a24      	ldr	r2, [pc, #144]	; (800494c <DHCP_init+0x110>)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 80048c0:	4b23      	ldr	r3, [pc, #140]	; (8004950 <DHCP_init+0x114>)
 80048c2:	4a24      	ldr	r2, [pc, #144]	; (8004954 <DHCP_init+0x118>)
 80048c4:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80048c6:	4b1f      	ldr	r3, [pc, #124]	; (8004944 <DHCP_init+0x108>)
 80048c8:	78db      	ldrb	r3, [r3, #3]
 80048ca:	461a      	mov	r2, r3
 80048cc:	4b20      	ldr	r3, [pc, #128]	; (8004950 <DHCP_init+0x114>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4413      	add	r3, r2
 80048d2:	4a1f      	ldr	r2, [pc, #124]	; (8004950 <DHCP_init+0x114>)
 80048d4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80048d6:	4b1b      	ldr	r3, [pc, #108]	; (8004944 <DHCP_init+0x108>)
 80048d8:	791b      	ldrb	r3, [r3, #4]
 80048da:	461a      	mov	r2, r3
 80048dc:	4b1c      	ldr	r3, [pc, #112]	; (8004950 <DHCP_init+0x114>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4413      	add	r3, r2
 80048e2:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <DHCP_init+0x114>)
 80048e4:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 80048e6:	4b17      	ldr	r3, [pc, #92]	; (8004944 <DHCP_init+0x108>)
 80048e8:	795b      	ldrb	r3, [r3, #5]
 80048ea:	461a      	mov	r2, r3
 80048ec:	4b18      	ldr	r3, [pc, #96]	; (8004950 <DHCP_init+0x114>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4413      	add	r3, r2
 80048f2:	4a17      	ldr	r2, [pc, #92]	; (8004950 <DHCP_init+0x114>)
 80048f4:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80048f6:	4b13      	ldr	r3, [pc, #76]	; (8004944 <DHCP_init+0x108>)
 80048f8:	78da      	ldrb	r2, [r3, #3]
 80048fa:	4b12      	ldr	r3, [pc, #72]	; (8004944 <DHCP_init+0x108>)
 80048fc:	791b      	ldrb	r3, [r3, #4]
 80048fe:	4053      	eors	r3, r2
 8004900:	b2da      	uxtb	r2, r3
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <DHCP_init+0x108>)
 8004904:	795b      	ldrb	r3, [r3, #5]
 8004906:	4053      	eors	r3, r2
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	4b10      	ldr	r3, [pc, #64]	; (8004950 <DHCP_init+0x114>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4413      	add	r3, r2
 8004912:	4a0f      	ldr	r2, [pc, #60]	; (8004950 <DHCP_init+0x114>)
 8004914:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8004916:	f107 030c 	add.w	r3, r7, #12
 800491a:	2204      	movs	r2, #4
 800491c:	4619      	mov	r1, r3
 800491e:	200f      	movs	r0, #15
 8004920:	f7fd f98c 	bl	8001c3c <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8004924:	f107 030c 	add.w	r3, r7, #12
 8004928:	2204      	movs	r2, #4
 800492a:	4619      	mov	r1, r3
 800492c:	2001      	movs	r0, #1
 800492e:	f7fd f985 	bl	8001c3c <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8004932:	f000 f813 	bl	800495c <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8004936:	4b08      	ldr	r3, [pc, #32]	; (8004958 <DHCP_init+0x11c>)
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	200010e4 	.word	0x200010e4
 8004948:	200010b5 	.word	0x200010b5
 800494c:	200010e0 	.word	0x200010e0
 8004950:	200010dc 	.word	0x200010dc
 8004954:	12345678 	.word	0x12345678
 8004958:	200010d4 	.word	0x200010d4

0800495c <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8004960:	4b06      	ldr	r3, [pc, #24]	; (800497c <reset_DHCP_timeout+0x20>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <reset_DHCP_timeout+0x24>)
 8004968:	220a      	movs	r2, #10
 800496a:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <reset_DHCP_timeout+0x28>)
 800496e:	2200      	movs	r2, #0
 8004970:	701a      	strb	r2, [r3, #0]
}
 8004972:	bf00      	nop
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	200010d8 	.word	0x200010d8
 8004980:	20000068 	.word	0x20000068
 8004984:	200010d5 	.word	0x200010d5

08004988 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	2b09      	cmp	r3, #9
 800499e:	d803      	bhi.n	80049a8 <NibbleToHex+0x20>
    return nibble + '0';
 80049a0:	79fb      	ldrb	r3, [r7, #7]
 80049a2:	3330      	adds	r3, #48	; 0x30
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e002      	b.n	80049ae <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80049a8:	79fb      	ldrb	r3, [r7, #7]
 80049aa:	3337      	adds	r3, #55	; 0x37
 80049ac:	b2db      	uxtb	r3, r3
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	89fb      	ldrh	r3, [r7, #14]
 80049d8:	4413      	add	r3, r2
 80049da:	81fb      	strh	r3, [r7, #14]
	return i;
 80049dc:	89fb      	ldrh	r3, [r7, #14]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	460b      	mov	r3, r1
 80049f4:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 80049f6:	887b      	ldrh	r3, [r7, #2]
 80049f8:	0a1b      	lsrs	r3, r3, #8
 80049fa:	b299      	uxth	r1, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	607a      	str	r2, [r7, #4]
 8004a02:	b2ca      	uxtb	r2, r1
 8004a04:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	887a      	ldrh	r2, [r7, #2]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	701a      	strb	r2, [r3, #0]
	return s;
 8004a12:	687b      	ldr	r3, [r7, #4]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b08b      	sub	sp, #44	; 0x2c
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 8004a32:	2300      	movs	r3, #0
 8004a34:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]

	cp = compressed;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	623a      	str	r2, [r7, #32]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d102      	bne.n	8004a54 <parse_name+0x34>
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	3301      	adds	r3, #1
 8004a52:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 8004a54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004a5c:	d117      	bne.n	8004a8e <parse_name+0x6e>
		{
			if (!indirect)
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d102      	bne.n	8004a6a <parse_name+0x4a>
				clen++;
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	3301      	adds	r3, #1
 8004a68:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8004a6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004a76:	6a3a      	ldr	r2, [r7, #32]
 8004a78:	7812      	ldrb	r2, [r2, #0]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8004a84:	6a3b      	ldr	r3, [r7, #32]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	623a      	str	r2, [r7, #32]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8004a8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d02b      	beq.n	8004aec <parse_name+0xcc>
			break;

		len -= slen + 1;
 8004a94:	887a      	ldrh	r2, [r7, #2]
 8004a96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8004aa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da02      	bge.n	8004ab0 <parse_name+0x90>
 8004aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8004aae:	e038      	b.n	8004b22 <parse_name+0x102>

		if (!indirect) clen += slen;
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10c      	bne.n	8004ad0 <parse_name+0xb0>
 8004ab6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ab8:	69fa      	ldr	r2, [r7, #28]
 8004aba:	4413      	add	r3, r2
 8004abc:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8004abe:	e007      	b.n	8004ad0 <parse_name+0xb0>
 8004ac0:	6a3a      	ldr	r2, [r7, #32]
 8004ac2:	1c53      	adds	r3, r2, #1
 8004ac4:	623b      	str	r3, [r7, #32]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	1c59      	adds	r1, r3, #1
 8004aca:	6079      	str	r1, [r7, #4]
 8004acc:	7812      	ldrb	r2, [r2, #0]
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ad2:	1e5a      	subs	r2, r3, #1
 8004ad4:	84fa      	strh	r2, [r7, #38]	; 0x26
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f2      	bne.n	8004ac0 <parse_name+0xa0>
		*buf++ = '.';
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	222e      	movs	r2, #46	; 0x2e
 8004ae2:	701a      	strb	r2, [r3, #0]
		nseg++;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 8004aea:	e7a8      	b.n	8004a3e <parse_name+0x1e>
			break;
 8004aec:	bf00      	nop
	}

	if (nseg == 0)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	607a      	str	r2, [r7, #4]
 8004afa:	222e      	movs	r2, #46	; 0x2e
 8004afc:	701a      	strb	r2, [r3, #0]
		len--;
 8004afe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
	len--;
 8004b14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 8004b20:	69fb      	ldr	r3, [r7, #28]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	372c      	adds	r7, #44	; 0x2c
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b0b4      	sub	sp, #208	; 0xd0
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8004b38:	f107 020c 	add.w	r2, r7, #12
 8004b3c:	23c0      	movs	r3, #192	; 0xc0
 8004b3e:	6839      	ldr	r1, [r7, #0]
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff6d 	bl	8004a20 <parse_name>
 8004b46:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 8004b4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b52:	d101      	bne.n	8004b58 <dns_question+0x2a>
 8004b54:	2300      	movs	r3, #0
 8004b56:	e00b      	b.n	8004b70 <dns_question+0x42>

	cp += len;
 8004b58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	4413      	add	r3, r2
 8004b60:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	3302      	adds	r3, #2
 8004b66:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	3302      	adds	r3, #2
 8004b6c:	603b      	str	r3, [r7, #0]

	return cp;
 8004b6e:	683b      	ldr	r3, [r7, #0]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	37d0      	adds	r7, #208	; 0xd0
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b0b6      	sub	sp, #216	; 0xd8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8004b84:	f107 0210 	add.w	r2, r7, #16
 8004b88:	23c0      	movs	r3, #192	; 0xc0
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f7ff ff47 	bl	8004a20 <parse_name>
 8004b92:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 8004b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9e:	d101      	bne.n	8004ba4 <dns_answer+0x2c>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	e0dd      	b.n	8004d60 <dns_answer+0x1e8>

	cp += len;
 8004ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	4413      	add	r3, r2
 8004bac:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 8004bae:	68b8      	ldr	r0, [r7, #8]
 8004bb0:	f7ff ff03 	bl	80049ba <get16>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	3302      	adds	r3, #2
 8004bc4:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	3302      	adds	r3, #2
 8004bd0:	60bb      	str	r3, [r7, #8]


	switch (type)
 8004bd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	2b0f      	cmp	r3, #15
 8004bda:	f200 80bf 	bhi.w	8004d5c <dns_answer+0x1e4>
 8004bde:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <dns_answer+0x6c>)
 8004be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be4:	08004c25 	.word	0x08004c25
 8004be8:	08004c5d 	.word	0x08004c5d
 8004bec:	08004d5d 	.word	0x08004d5d
 8004bf0:	08004d5d 	.word	0x08004d5d
 8004bf4:	08004c5d 	.word	0x08004c5d
 8004bf8:	08004ce9 	.word	0x08004ce9
 8004bfc:	08004c5d 	.word	0x08004c5d
 8004c00:	08004c5d 	.word	0x08004c5d
 8004c04:	08004c5d 	.word	0x08004c5d
 8004c08:	08004d5d 	.word	0x08004d5d
 8004c0c:	08004d5d 	.word	0x08004d5d
 8004c10:	08004c5d 	.word	0x08004c5d
 8004c14:	08004c89 	.word	0x08004c89
 8004c18:	08004d5d 	.word	0x08004d5d
 8004c1c:	08004cb7 	.word	0x08004cb7
 8004c20:	08004d5d 	.word	0x08004d5d
	{
	case TYPE_A:
		/* Just read the address directly into the structure */
		ip_from_dns[0] = *cp++;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	60ba      	str	r2, [r7, #8]
 8004c2a:	781a      	ldrb	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	60ba      	str	r2, [r7, #8]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	3201      	adds	r2, #1
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	60ba      	str	r2, [r7, #8]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	3202      	adds	r2, #2
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	60ba      	str	r2, [r7, #8]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	3203      	adds	r2, #3
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	7013      	strb	r3, [r2, #0]
		break;
 8004c5a:	e080      	b.n	8004d5e <dns_answer+0x1e6>
	case TYPE_MR:
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAXCNAME);
 8004c5c:	f107 0210 	add.w	r2, r7, #16
 8004c60:	23c0      	movs	r3, #192	; 0xc0
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f7ff fedb 	bl	8004a20 <parse_name>
 8004c6a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8004c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c76:	d101      	bne.n	8004c7c <dns_answer+0x104>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	e071      	b.n	8004d60 <dns_answer+0x1e8>

		cp += len;
 8004c7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	4413      	add	r3, r2
 8004c84:	60bb      	str	r3, [r7, #8]
		break;
 8004c86:	e06a      	b.n	8004d5e <dns_answer+0x1e6>
	case TYPE_HINFO:
		len = *cp++;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	60ba      	str	r2, [r7, #8]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8004c94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	60bb      	str	r3, [r7, #8]

		len = *cp++;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	60ba      	str	r2, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8004caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	60bb      	str	r3, [r7, #8]
		break;
 8004cb4:	e053      	b.n	8004d5e <dns_answer+0x1e6>
	case TYPE_MX:
		cp += 2;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	3302      	adds	r3, #2
 8004cba:	60bb      	str	r3, [r7, #8]
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAXCNAME);
 8004cbc:	f107 0210 	add.w	r2, r7, #16
 8004cc0:	23c0      	movs	r3, #192	; 0xc0
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f7ff feab 	bl	8004a20 <parse_name>
 8004cca:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8004cce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd6:	d101      	bne.n	8004cdc <dns_answer+0x164>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	e041      	b.n	8004d60 <dns_answer+0x1e8>

		cp += len;
 8004cdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	60bb      	str	r3, [r7, #8]
		break;
 8004ce6:	e03a      	b.n	8004d5e <dns_answer+0x1e6>
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAXCNAME);
 8004ce8:	f107 0210 	add.w	r2, r7, #16
 8004cec:	23c0      	movs	r3, #192	; 0xc0
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff fe95 	bl	8004a20 <parse_name>
 8004cf6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8004cfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d02:	d101      	bne.n	8004d08 <dns_answer+0x190>
 8004d04:	2300      	movs	r3, #0
 8004d06:	e02b      	b.n	8004d60 <dns_answer+0x1e8>

		cp += len;
 8004d08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	4413      	add	r3, r2
 8004d10:	60bb      	str	r3, [r7, #8]

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAXCNAME);
 8004d12:	f107 0210 	add.w	r2, r7, #16
 8004d16:	23c0      	movs	r3, #192	; 0xc0
 8004d18:	68b9      	ldr	r1, [r7, #8]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7ff fe80 	bl	8004a20 <parse_name>
 8004d20:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8004d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d101      	bne.n	8004d32 <dns_answer+0x1ba>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e016      	b.n	8004d60 <dns_answer+0x1e8>

		cp += len;
 8004d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	4413      	add	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]

		cp += 4;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	3304      	adds	r3, #4
 8004d46:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	3304      	adds	r3, #4
 8004d52:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	3304      	adds	r3, #4
 8004d58:	60bb      	str	r3, [r7, #8]
		break;
 8004d5a:	e000      	b.n	8004d5e <dns_answer+0x1e6>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8004d5c:	bf00      	nop
	}

	return cp;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	37d8      	adds	r7, #216	; 0xd8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b088      	sub	sp, #32
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8004d78:	2212      	movs	r2, #18
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f000 fa65 	bl	800524c <memset>

	pdhdr->id = get16(&msg[0]);
 8004d82:	6978      	ldr	r0, [r7, #20]
 8004d84:	f7ff fe19 	bl	80049ba <get16>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	3302      	adds	r3, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fe10 	bl	80049ba <get16>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 8004d9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	da02      	bge.n	8004dac <parseDNSMSG+0x44>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2201      	movs	r2, #1
 8004daa:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8004dac:	8a7b      	ldrh	r3, [r7, #18]
 8004dae:	0adb      	lsrs	r3, r3, #11
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8004dbe:	8a7b      	ldrh	r3, [r7, #18]
 8004dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <parseDNSMSG+0x66>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8004dce:	8a7b      	ldrh	r3, [r7, #18]
 8004dd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <parseDNSMSG+0x76>
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8004dde:	8a7b      	ldrh	r3, [r7, #18]
 8004de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <parseDNSMSG+0x86>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2201      	movs	r2, #1
 8004dec:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8004dee:	8a7b      	ldrh	r3, [r7, #18]
 8004df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <parseDNSMSG+0x96>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8004dfe:	8a7b      	ldrh	r3, [r7, #18]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f003 030f 	and.w	r3, r3, #15
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	4618      	mov	r0, r3
 8004e12:	f7ff fdd2 	bl	80049ba <get16>
 8004e16:	4603      	mov	r3, r0
 8004e18:	461a      	mov	r2, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	3306      	adds	r3, #6
 8004e22:	4618      	mov	r0, r3
 8004e24:	f7ff fdc9 	bl	80049ba <get16>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	3308      	adds	r3, #8
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fdc0 	bl	80049ba <get16>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	330a      	adds	r3, #10
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7ff fdb7 	bl	80049ba <get16>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	330c      	adds	r3, #12
 8004e58:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	83fb      	strh	r3, [r7, #30]
 8004e5e:	e00d      	b.n	8004e7c <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 8004e60:	69b9      	ldr	r1, [r7, #24]
 8004e62:	6978      	ldr	r0, [r7, #20]
 8004e64:	f7ff fe63 	bl	8004b2e <dns_question>
 8004e68:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <parseDNSMSG+0x10e>
 8004e70:	f04f 33ff 	mov.w	r3, #4294967295
 8004e74:	e03b      	b.n	8004eee <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8004e76:	8bfb      	ldrh	r3, [r7, #30]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	83fb      	strh	r3, [r7, #30]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	895b      	ldrh	r3, [r3, #10]
 8004e80:	8bfa      	ldrh	r2, [r7, #30]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d3ec      	bcc.n	8004e60 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8004e86:	2300      	movs	r3, #0
 8004e88:	83fb      	strh	r3, [r7, #30]
 8004e8a:	e00e      	b.n	8004eaa <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	69b9      	ldr	r1, [r7, #24]
 8004e90:	6978      	ldr	r0, [r7, #20]
 8004e92:	f7ff fe71 	bl	8004b78 <dns_answer>
 8004e96:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d102      	bne.n	8004ea4 <parseDNSMSG+0x13c>
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea2:	e024      	b.n	8004eee <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8004ea4:	8bfb      	ldrh	r3, [r7, #30]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	83fb      	strh	r3, [r7, #30]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	899b      	ldrh	r3, [r3, #12]
 8004eae:	8bfa      	ldrh	r2, [r7, #30]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d3eb      	bcc.n	8004e8c <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	83fb      	strh	r3, [r7, #30]
 8004eb8:	e002      	b.n	8004ec0 <parseDNSMSG+0x158>
 8004eba:	8bfb      	ldrh	r3, [r7, #30]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	83fb      	strh	r3, [r7, #30]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	89db      	ldrh	r3, [r3, #14]
 8004ec4:	8bfa      	ldrh	r2, [r7, #30]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d3f7      	bcc.n	8004eba <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8004eca:	2300      	movs	r3, #0
 8004ecc:	83fb      	strh	r3, [r7, #30]
 8004ece:	e002      	b.n	8004ed6 <parseDNSMSG+0x16e>
 8004ed0:	8bfb      	ldrh	r3, [r7, #30]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	83fb      	strh	r3, [r7, #30]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8a1b      	ldrh	r3, [r3, #16]
 8004eda:	8bfa      	ldrh	r2, [r7, #30]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d3f7      	bcc.n	8004ed0 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	7a1b      	ldrb	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <parseDNSMSG+0x184>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e000      	b.n	8004eee <parseDNSMSG+0x186>
	else return 0;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b0b8      	sub	sp, #224	; 0xe0
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	461a      	mov	r2, r3
 8004f04:	4603      	mov	r3, r0
 8004f06:	81fb      	strh	r3, [r7, #14]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 8004f12:	4b57      	ldr	r3, [pc, #348]	; (8005070 <dns_makequery+0x178>)
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	3301      	adds	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	4b55      	ldr	r3, [pc, #340]	; (8005070 <dns_makequery+0x178>)
 8004f1c:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8004f1e:	4b54      	ldr	r3, [pc, #336]	; (8005070 <dns_makequery+0x178>)
 8004f20:	881b      	ldrh	r3, [r3, #0]
 8004f22:	4619      	mov	r1, r3
 8004f24:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004f28:	f7ff fd5f 	bl	80049ea <put16>
 8004f2c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8004f30:	89fb      	ldrh	r3, [r7, #14]
 8004f32:	02db      	lsls	r3, r3, #11
 8004f34:	b21b      	sxth	r3, r3
 8004f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3a:	b21b      	sxth	r3, r3
 8004f3c:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 8004f40:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8004f44:	4619      	mov	r1, r3
 8004f46:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004f4a:	f7ff fd4e 	bl	80049ea <put16>
 8004f4e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 8004f52:	2101      	movs	r1, #1
 8004f54:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004f58:	f7ff fd47 	bl	80049ea <put16>
 8004f5c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8004f60:	2100      	movs	r1, #0
 8004f62:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004f66:	f7ff fd40 	bl	80049ea <put16>
 8004f6a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8004f6e:	2100      	movs	r1, #0
 8004f70:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004f74:	f7ff fd39 	bl	80049ea <put16>
 8004f78:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004f82:	f7ff fd32 	bl	80049ea <put16>
 8004f86:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 8004f8a:	f107 0310 	add.w	r3, r7, #16
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 f970 	bl	8005276 <strcpy>
	dname = sname;
 8004f96:	f107 0310 	add.w	r3, r7, #16
 8004f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 8004f9e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8004fa2:	f7fb f911 	bl	80001c8 <strlen>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8004fac:	212e      	movs	r1, #46	; 0x2e
 8004fae:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8004fb2:	f000 f953 	bl	800525c <strchr>
 8004fb6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8004fba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d006      	beq.n	8004fd0 <dns_makequery+0xd8>
 8004fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	81bb      	strh	r3, [r7, #12]
 8004fce:	e002      	b.n	8004fd6 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8004fd0:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8004fd4:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8004fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004fe0:	89ba      	ldrh	r2, [r7, #12]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8004fe6:	89bb      	ldrh	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d029      	beq.n	8005040 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8004fec:	89bb      	ldrh	r3, [r7, #12]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8004ff4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8004ff8:	f000 f945 	bl	8005286 <strncpy>
		cp += len;
 8004ffc:	89bb      	ldrh	r3, [r7, #12]
 8004ffe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005002:	4413      	add	r3, r2
 8005004:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 8005008:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d107      	bne.n	8005020 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8005010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005014:	1c5a      	adds	r2, r3, #1
 8005016:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
			break;
 800501e:	e010      	b.n	8005042 <dns_makequery+0x14a>
		}
		dname += len+1;
 8005020:	89bb      	ldrh	r3, [r7, #12]
 8005022:	3301      	adds	r3, #1
 8005024:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005028:	4413      	add	r3, r2
 800502a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 800502e:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8005032:	89bb      	ldrh	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 800503e:	e7b5      	b.n	8004fac <dns_makequery+0xb4>
		if (len == 0) break;
 8005040:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8005042:	2101      	movs	r1, #1
 8005044:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8005048:	f7ff fccf 	bl	80049ea <put16>
 800504c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8005050:	2101      	movs	r1, #1
 8005052:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8005056:	f7ff fcc8 	bl	80049ea <put16>
 800505a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800505e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	b21b      	sxth	r3, r3
}
 8005068:	4618      	mov	r0, r3
 800506a:	37e0      	adds	r7, #224	; 0xe0
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	200010f2 	.word	0x200010f2

08005074 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8005078:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <check_DNS_timeout+0x44>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d914      	bls.n	80050aa <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8005080:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <check_DNS_timeout+0x44>)
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <check_DNS_timeout+0x48>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d905      	bls.n	800509a <check_DNS_timeout+0x26>
			retry_count = 0;
 800508e:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <check_DNS_timeout+0x48>)
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8005094:	f04f 33ff 	mov.w	r3, #4294967295
 8005098:	e008      	b.n	80050ac <check_DNS_timeout+0x38>
		}
		retry_count++;
 800509a:	4b08      	ldr	r3, [pc, #32]	; (80050bc <check_DNS_timeout+0x48>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	3301      	adds	r3, #1
 80050a0:	b2da      	uxtb	r2, r3
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <check_DNS_timeout+0x48>)
 80050a4:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 80050a6:	2300      	movs	r3, #0
 80050a8:	e000      	b.n	80050ac <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 80050aa:	2301      	movs	r3, #1
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	200010f4 	.word	0x200010f4
 80050bc:	200010f8 	.word	0x200010f8

080050c0 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	6039      	str	r1, [r7, #0]
 80050ca:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 80050cc:	4a07      	ldr	r2, [pc, #28]	; (80050ec <DNS_init+0x2c>)
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 80050d2:	4a07      	ldr	r2, [pc, #28]	; (80050f0 <DNS_init+0x30>)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 80050d8:	4b06      	ldr	r3, [pc, #24]	; (80050f4 <DNS_init+0x34>)
 80050da:	f241 1222 	movw	r2, #4386	; 0x1122
 80050de:	801a      	strh	r2, [r3, #0]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	200010f0 	.word	0x200010f0
 80050f0:	200010ec 	.word	0x200010ec
 80050f4:	200010f2 	.word	0x200010f2

080050f8 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 80050f8:	b590      	push	{r4, r7, lr}
 80050fa:	b08f      	sub	sp, #60	; 0x3c
 80050fc:	af02      	add	r7, sp, #8
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8005104:	4b3b      	ldr	r3, [pc, #236]	; (80051f4 <DNS_run+0xfc>)
 8005106:	2200      	movs	r2, #0
 8005108:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 800510a:	4b3b      	ldr	r3, [pc, #236]	; (80051f8 <DNS_run+0x100>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8005110:	4b3a      	ldr	r3, [pc, #232]	; (80051fc <DNS_run+0x104>)
 8005112:	7818      	ldrb	r0, [r3, #0]
 8005114:	2300      	movs	r3, #0
 8005116:	2200      	movs	r2, #0
 8005118:	2102      	movs	r1, #2
 800511a:	f7fd f8cb 	bl	80022b4 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 800511e:	4b38      	ldr	r3, [pc, #224]	; (8005200 <DNS_run+0x108>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005126:	68b9      	ldr	r1, [r7, #8]
 8005128:	2000      	movs	r0, #0
 800512a:	f7ff fee5 	bl	8004ef8 <dns_makequery>
 800512e:	4603      	mov	r3, r0
 8005130:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8005132:	4b32      	ldr	r3, [pc, #200]	; (80051fc <DNS_run+0x104>)
 8005134:	7818      	ldrb	r0, [r3, #0]
 8005136:	4b32      	ldr	r3, [pc, #200]	; (8005200 <DNS_run+0x108>)
 8005138:	6819      	ldr	r1, [r3, #0]
 800513a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800513c:	2335      	movs	r3, #53	; 0x35
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f7fd fa21 	bl	8002588 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8005146:	4b2d      	ldr	r3, [pc, #180]	; (80051fc <DNS_run+0x104>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fc fe55 	bl	8001dfa <getSn_RX_RSR>
 8005150:	4603      	mov	r3, r0
 8005152:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005154:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005156:	2b00      	cmp	r3, #0
 8005158:	d029      	beq.n	80051ae <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 800515a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800515c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005160:	d902      	bls.n	8005168 <DNS_run+0x70>
 8005162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005166:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8005168:	4b24      	ldr	r3, [pc, #144]	; (80051fc <DNS_run+0x104>)
 800516a:	7818      	ldrb	r0, [r3, #0]
 800516c:	4b24      	ldr	r3, [pc, #144]	; (8005200 <DNS_run+0x108>)
 800516e:	6819      	ldr	r1, [r3, #0]
 8005170:	f107 0414 	add.w	r4, r7, #20
 8005174:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005176:	f107 0312 	add.w	r3, r7, #18
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	4623      	mov	r3, r4
 800517e:	f7fd fb59 	bl	8002834 <recvfrom>
 8005182:	4603      	mov	r3, r0
 8005184:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8005186:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <DNS_run+0x108>)
 8005188:	6819      	ldr	r1, [r3, #0]
 800518a:	f107 0318 	add.w	r3, r7, #24
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fde9 	bl	8004d68 <parseDNSMSG>
 8005196:	4603      	mov	r3, r0
 8005198:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 800519c:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 800519e:	4b17      	ldr	r3, [pc, #92]	; (80051fc <DNS_run+0x104>)
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fd f98a 	bl	80024bc <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 80051a8:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80051ac:	e01e      	b.n	80051ec <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 80051ae:	f7ff ff61 	bl	8005074 <check_DNS_timeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 80051b8:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80051bc:	2b00      	cmp	r3, #0
 80051be:	da06      	bge.n	80051ce <DNS_run+0xd6>
			close(DNS_SOCKET);
 80051c0:	4b0e      	ldr	r3, [pc, #56]	; (80051fc <DNS_run+0x104>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fd f979 	bl	80024bc <close>
			return 0; // timeout occurred
 80051ca:	2300      	movs	r3, #0
 80051cc:	e00e      	b.n	80051ec <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 80051ce:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1b7      	bne.n	8005146 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 80051d6:	4b09      	ldr	r3, [pc, #36]	; (80051fc <DNS_run+0x104>)
 80051d8:	7818      	ldrb	r0, [r3, #0]
 80051da:	4b09      	ldr	r3, [pc, #36]	; (8005200 <DNS_run+0x108>)
 80051dc:	6819      	ldr	r1, [r3, #0]
 80051de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80051e0:	2335      	movs	r3, #53	; 0x35
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f7fd f9cf 	bl	8002588 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 80051ea:	e7ac      	b.n	8005146 <DNS_run+0x4e>
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3734      	adds	r7, #52	; 0x34
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd90      	pop	{r4, r7, pc}
 80051f4:	200010f8 	.word	0x200010f8
 80051f8:	200010f4 	.word	0x200010f4
 80051fc:	200010f0 	.word	0x200010f0
 8005200:	200010ec 	.word	0x200010ec

08005204 <__libc_init_array>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4d0d      	ldr	r5, [pc, #52]	; (800523c <__libc_init_array+0x38>)
 8005208:	4c0d      	ldr	r4, [pc, #52]	; (8005240 <__libc_init_array+0x3c>)
 800520a:	1b64      	subs	r4, r4, r5
 800520c:	10a4      	asrs	r4, r4, #2
 800520e:	2600      	movs	r6, #0
 8005210:	42a6      	cmp	r6, r4
 8005212:	d109      	bne.n	8005228 <__libc_init_array+0x24>
 8005214:	4d0b      	ldr	r5, [pc, #44]	; (8005244 <__libc_init_array+0x40>)
 8005216:	4c0c      	ldr	r4, [pc, #48]	; (8005248 <__libc_init_array+0x44>)
 8005218:	f000 f848 	bl	80052ac <_init>
 800521c:	1b64      	subs	r4, r4, r5
 800521e:	10a4      	asrs	r4, r4, #2
 8005220:	2600      	movs	r6, #0
 8005222:	42a6      	cmp	r6, r4
 8005224:	d105      	bne.n	8005232 <__libc_init_array+0x2e>
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	f855 3b04 	ldr.w	r3, [r5], #4
 800522c:	4798      	blx	r3
 800522e:	3601      	adds	r6, #1
 8005230:	e7ee      	b.n	8005210 <__libc_init_array+0xc>
 8005232:	f855 3b04 	ldr.w	r3, [r5], #4
 8005236:	4798      	blx	r3
 8005238:	3601      	adds	r6, #1
 800523a:	e7f2      	b.n	8005222 <__libc_init_array+0x1e>
 800523c:	08005300 	.word	0x08005300
 8005240:	08005300 	.word	0x08005300
 8005244:	08005300 	.word	0x08005300
 8005248:	08005304 	.word	0x08005304

0800524c <memset>:
 800524c:	4402      	add	r2, r0
 800524e:	4603      	mov	r3, r0
 8005250:	4293      	cmp	r3, r2
 8005252:	d100      	bne.n	8005256 <memset+0xa>
 8005254:	4770      	bx	lr
 8005256:	f803 1b01 	strb.w	r1, [r3], #1
 800525a:	e7f9      	b.n	8005250 <memset+0x4>

0800525c <strchr>:
 800525c:	b2c9      	uxtb	r1, r1
 800525e:	4603      	mov	r3, r0
 8005260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005264:	b11a      	cbz	r2, 800526e <strchr+0x12>
 8005266:	428a      	cmp	r2, r1
 8005268:	d1f9      	bne.n	800525e <strchr+0x2>
 800526a:	4618      	mov	r0, r3
 800526c:	4770      	bx	lr
 800526e:	2900      	cmp	r1, #0
 8005270:	bf18      	it	ne
 8005272:	2300      	movne	r3, #0
 8005274:	e7f9      	b.n	800526a <strchr+0xe>

08005276 <strcpy>:
 8005276:	4603      	mov	r3, r0
 8005278:	f811 2b01 	ldrb.w	r2, [r1], #1
 800527c:	f803 2b01 	strb.w	r2, [r3], #1
 8005280:	2a00      	cmp	r2, #0
 8005282:	d1f9      	bne.n	8005278 <strcpy+0x2>
 8005284:	4770      	bx	lr

08005286 <strncpy>:
 8005286:	b510      	push	{r4, lr}
 8005288:	3901      	subs	r1, #1
 800528a:	4603      	mov	r3, r0
 800528c:	b132      	cbz	r2, 800529c <strncpy+0x16>
 800528e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005292:	f803 4b01 	strb.w	r4, [r3], #1
 8005296:	3a01      	subs	r2, #1
 8005298:	2c00      	cmp	r4, #0
 800529a:	d1f7      	bne.n	800528c <strncpy+0x6>
 800529c:	441a      	add	r2, r3
 800529e:	2100      	movs	r1, #0
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d100      	bne.n	80052a6 <strncpy+0x20>
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	f803 1b01 	strb.w	r1, [r3], #1
 80052aa:	e7f9      	b.n	80052a0 <strncpy+0x1a>

080052ac <_init>:
 80052ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ae:	bf00      	nop
 80052b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b2:	bc08      	pop	{r3}
 80052b4:	469e      	mov	lr, r3
 80052b6:	4770      	bx	lr

080052b8 <_fini>:
 80052b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ba:	bf00      	nop
 80052bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052be:	bc08      	pop	{r3}
 80052c0:	469e      	mov	lr, r3
 80052c2:	4770      	bx	lr
