
HAL_Drivers_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004324  08004324  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800432c  0800432c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800432c  0800432c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004330  08004330  00014330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000130  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001a0  200001a0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c25c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000217a  00000000  00000000  0002c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c20  00000000  00000000  0002e478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000af8  00000000  00000000  0002f098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023337  00000000  00000000  0002fb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebfd  00000000  00000000  00052ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d68ff  00000000  00000000  00061ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001383c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038f4  00000000  00000000  00138414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800422c 	.word	0x0800422c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800422c 	.word	0x0800422c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800057a:	463b      	mov	r3, r7
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000586:	4b38      	ldr	r3, [pc, #224]	; (8000668 <MX_ADC1_Init+0xf4>)
 8000588:	4a38      	ldr	r2, [pc, #224]	; (800066c <MX_ADC1_Init+0xf8>)
 800058a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800058c:	4b36      	ldr	r3, [pc, #216]	; (8000668 <MX_ADC1_Init+0xf4>)
 800058e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000592:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000594:	4b34      	ldr	r3, [pc, #208]	; (8000668 <MX_ADC1_Init+0xf4>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800059a:	4b33      	ldr	r3, [pc, #204]	; (8000668 <MX_ADC1_Init+0xf4>)
 800059c:	2201      	movs	r2, #1
 800059e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005a0:	4b31      	ldr	r3, [pc, #196]	; (8000668 <MX_ADC1_Init+0xf4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a6:	4b30      	ldr	r3, [pc, #192]	; (8000668 <MX_ADC1_Init+0xf4>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005ae:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <MX_ADC1_Init+0xf4>)
 80005b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80005b6:	4b2c      	ldr	r3, [pc, #176]	; (8000668 <MX_ADC1_Init+0xf4>)
 80005b8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80005bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005be:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <MX_ADC1_Init+0xf4>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_ADC1_Init+0xf4>)
 80005c6:	2204      	movs	r2, #4
 80005c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005ca:	4b27      	ldr	r3, [pc, #156]	; (8000668 <MX_ADC1_Init+0xf4>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005d2:	4b25      	ldr	r3, [pc, #148]	; (8000668 <MX_ADC1_Init+0xf4>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005d8:	4823      	ldr	r0, [pc, #140]	; (8000668 <MX_ADC1_Init+0xf4>)
 80005da:	f000 fc1d 	bl	8000e18 <HAL_ADC_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80005e4:	f000 f9f6 	bl	80009d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005f0:	2307      	movs	r3, #7
 80005f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	4619      	mov	r1, r3
 80005f8:	481b      	ldr	r0, [pc, #108]	; (8000668 <MX_ADC1_Init+0xf4>)
 80005fa:	f000 fdff 	bl	80011fc <HAL_ADC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000604:	f000 f9e6 	bl	80009d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000608:	2302      	movs	r3, #2
 800060a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800060c:	2302      	movs	r3, #2
 800060e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000614:	463b      	mov	r3, r7
 8000616:	4619      	mov	r1, r3
 8000618:	4813      	ldr	r0, [pc, #76]	; (8000668 <MX_ADC1_Init+0xf4>)
 800061a:	f000 fdef 	bl	80011fc <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000624:	f000 f9d6 	bl	80009d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000628:	2303      	movs	r3, #3
 800062a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800062c:	2303      	movs	r3, #3
 800062e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <MX_ADC1_Init+0xf4>)
 8000636:	f000 fde1 	bl	80011fc <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000640:	f000 f9c8 	bl	80009d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000644:	2304      	movs	r3, #4
 8000646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_ADC1_Init+0xf4>)
 8000652:	f000 fdd3 	bl	80011fc <HAL_ADC_ConfigChannel>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 800065c:	f000 f9ba 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000008c 	.word	0x2000008c
 800066c:	40012000 	.word	0x40012000

08000670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	; 0x28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0314 	add.w	r3, r7, #20
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a2f      	ldr	r2, [pc, #188]	; (800074c <HAL_ADC_MspInit+0xdc>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d158      	bne.n	8000744 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	613b      	str	r3, [r7, #16]
 8000696:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <HAL_ADC_MspInit+0xe0>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	4a2d      	ldr	r2, [pc, #180]	; (8000750 <HAL_ADC_MspInit+0xe0>)
 800069c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a0:	6453      	str	r3, [r2, #68]	; 0x44
 80006a2:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <HAL_ADC_MspInit+0xe0>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006aa:	613b      	str	r3, [r7, #16]
 80006ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	4b27      	ldr	r3, [pc, #156]	; (8000750 <HAL_ADC_MspInit+0xe0>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a26      	ldr	r2, [pc, #152]	; (8000750 <HAL_ADC_MspInit+0xe0>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <HAL_ADC_MspInit+0xe0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80006ca:	231e      	movs	r3, #30
 80006cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ce:	2303      	movs	r3, #3
 80006d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4619      	mov	r1, r3
 80006dc:	481d      	ldr	r0, [pc, #116]	; (8000754 <HAL_ADC_MspInit+0xe4>)
 80006de:	f001 fcaf 	bl	8002040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 80006e4:	4a1d      	ldr	r2, [pc, #116]	; (800075c <HAL_ADC_MspInit+0xec>)
 80006e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 80006fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000700:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000702:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 8000704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000708:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 800070c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000710:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 8000714:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000718:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 800071c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000720:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000728:	480b      	ldr	r0, [pc, #44]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 800072a:	f001 f919 	bl	8001960 <HAL_DMA_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000734:	f000 f94e 	bl	80009d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a07      	ldr	r2, [pc, #28]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 800073c:	639a      	str	r2, [r3, #56]	; 0x38
 800073e:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_ADC_MspInit+0xe8>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40012000 	.word	0x40012000
 8000750:	40023800 	.word	0x40023800
 8000754:	40020000 	.word	0x40020000
 8000758:	200000d4 	.word	0x200000d4
 800075c:	40026410 	.word	0x40026410

08000760 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_DMA_Init+0x3c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <MX_DMA_Init+0x3c>)
 8000770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_DMA_Init+0x3c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2038      	movs	r0, #56	; 0x38
 8000788:	f001 f8b3 	bl	80018f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800078c:	2038      	movs	r0, #56	; 0x38
 800078e:	f001 f8cc 	bl	800192a <HAL_NVIC_EnableIRQ>

}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <MX_GPIO_Init+0x4c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a0f      	ldr	r2, [pc, #60]	; (80007ec <MX_GPIO_Init+0x4c>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <MX_GPIO_Init+0x4c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_GPIO_Init+0x4c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <MX_GPIO_Init+0x4c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_GPIO_Init+0x4c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007fc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d013      	beq.n	8000830 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000808:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800080c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000810:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000814:	2b00      	cmp	r3, #0
 8000816:	d00b      	beq.n	8000830 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000818:	e000      	b.n	800081c <ITM_SendChar+0x2c>
    {
      __NOP();
 800081a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800081c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000826:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800082a:	687a      	ldr	r2, [r7, #4]
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch){
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ffd1 	bl	80007f0 <ITM_SendChar>
	return ch;
 800084e:	687b      	ldr	r3, [r7, #4]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f000 fa6a 	bl	8000d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f83e 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f7ff ff9c 	bl	80007a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000868:	f7ff ff7a 	bl	8000760 <MX_DMA_Init>
  MX_ADC1_Init();
 800086c:	f7ff fe82 	bl	8000574 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000870:	f000 f9c8 	bl	8000c04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
//  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data.d, 4);
 8000874:	2204      	movs	r2, #4
 8000876:	4913      	ldr	r1, [pc, #76]	; (80008c4 <main+0x6c>)
 8000878:	4813      	ldr	r0, [pc, #76]	; (80008c8 <main+0x70>)
 800087a:	f000 fb9b 	bl	8000fb4 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim2);
 800087e:	4813      	ldr	r0, [pc, #76]	; (80008cc <main+0x74>)
 8000880:	f002 fa2e 	bl	8002ce0 <HAL_TIM_Base_Start>
//		printf("in2->%u\r\n", data.adc.ch2);
//		printf("in3->%u\r\n", data.adc.ch3);
//		printf("in4->%u\r\n", data.adc.ch4);
//		HAL_Delay(1000);
//	  }
		if(HAL_ADC_PollForConversion(&hadc1, 0)){
 8000884:	2100      	movs	r1, #0
 8000886:	4810      	ldr	r0, [pc, #64]	; (80008c8 <main+0x70>)
 8000888:	f000 fb09 	bl	8000e9e <HAL_ADC_PollForConversion>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0f8      	beq.n	8000884 <main+0x2c>
			//todo
	  		printf("in1->%u\r\n", data.adc.ch1);
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <main+0x6c>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	4619      	mov	r1, r3
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <main+0x78>)
 800089a:	f002 fd39 	bl	8003310 <iprintf>
	  		printf("in2->%u\r\n", data.adc.ch2);
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <main+0x6c>)
 80008a0:	885b      	ldrh	r3, [r3, #2]
 80008a2:	4619      	mov	r1, r3
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <main+0x7c>)
 80008a6:	f002 fd33 	bl	8003310 <iprintf>
	  		printf("in3->%u\r\n", data.adc.ch3);
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <main+0x6c>)
 80008ac:	889b      	ldrh	r3, [r3, #4]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <main+0x80>)
 80008b2:	f002 fd2d 	bl	8003310 <iprintf>
	  		printf("in4->%u\r\n", data.adc.ch4);
 80008b6:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <main+0x6c>)
 80008b8:	88db      	ldrh	r3, [r3, #6]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4807      	ldr	r0, [pc, #28]	; (80008dc <main+0x84>)
 80008be:	f002 fd27 	bl	8003310 <iprintf>
		if(HAL_ADC_PollForConversion(&hadc1, 0)){
 80008c2:	e7df      	b.n	8000884 <main+0x2c>
 80008c4:	20000134 	.word	0x20000134
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	20000144 	.word	0x20000144
 80008d0:	08004244 	.word	0x08004244
 80008d4:	08004250 	.word	0x08004250
 80008d8:	0800425c 	.word	0x0800425c
 80008dc:	08004268 	.word	0x08004268

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b094      	sub	sp, #80	; 0x50
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0320 	add.w	r3, r7, #32
 80008ea:	2230      	movs	r2, #48	; 0x30
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fd06 	bl	8003300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	4b28      	ldr	r3, [pc, #160]	; (80009ac <SystemClock_Config+0xcc>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	4a27      	ldr	r2, [pc, #156]	; (80009ac <SystemClock_Config+0xcc>)
 800090e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000912:	6413      	str	r3, [r2, #64]	; 0x40
 8000914:	4b25      	ldr	r3, [pc, #148]	; (80009ac <SystemClock_Config+0xcc>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <SystemClock_Config+0xd0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <SystemClock_Config+0xd0>)
 800092a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <SystemClock_Config+0xd0>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093c:	2301      	movs	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800094e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000950:	2304      	movs	r3, #4
 8000952:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000954:	23a8      	movs	r3, #168	; 0xa8
 8000956:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000958:	2302      	movs	r3, #2
 800095a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800095c:	2304      	movs	r3, #4
 800095e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000960:	f107 0320 	add.w	r3, r7, #32
 8000964:	4618      	mov	r0, r3
 8000966:	f001 fd07 	bl	8002378 <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000970:	f000 f830 	bl	80009d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000974:	230f      	movs	r3, #15
 8000976:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000978:	2302      	movs	r3, #2
 800097a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000980:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800098a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2105      	movs	r1, #5
 8000992:	4618      	mov	r0, r3
 8000994:	f001 ff68 	bl	8002868 <HAL_RCC_ClockConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800099e:	f000 f819 	bl	80009d4 <Error_Handler>
  }
}
 80009a2:	bf00      	nop
 80009a4:	3750      	adds	r7, #80	; 0x50
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40007000 	.word	0x40007000

080009b4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	complet =1 ;
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80009be:	2201      	movs	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2000013c 	.word	0x2000013c

080009d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d8:	b672      	cpsid	i
}
 80009da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009dc:	e7fe      	b.n	80009dc <Error_Handler+0x8>
	...

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <HAL_MspInit+0x4c>)
 80009ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f4:	6453      	str	r3, [r2, #68]	; 0x44
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	603b      	str	r3, [r7, #0]
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	6413      	str	r3, [r2, #64]	; 0x40
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <NMI_Handler+0x4>

08000a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <HardFault_Handler+0x4>

08000a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <MemManage_Handler+0x4>

08000a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr

08000a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 f9ac 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <DMA2_Stream0_IRQHandler+0x10>)
 8000a8a:	f001 f86f 	bl	8001b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200000d4 	.word	0x200000d4

08000a98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	e00a      	b.n	8000ac0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000aaa:	f3af 8000 	nop.w
 8000aae:	4601      	mov	r1, r0
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	1c5a      	adds	r2, r3, #1
 8000ab4:	60ba      	str	r2, [r7, #8]
 8000ab6:	b2ca      	uxtb	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	dbf0      	blt.n	8000aaa <_read+0x12>
  }

  return len;
 8000ac8:	687b      	ldr	r3, [r7, #4]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3718      	adds	r7, #24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b086      	sub	sp, #24
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	e009      	b.n	8000af8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	60ba      	str	r2, [r7, #8]
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fea6 	bl	800083e <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf1      	blt.n	8000ae4 <_write+0x12>
  }
  return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_close>:

int _close(int file)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b22:	b480      	push	{r7}
 8000b24:	b083      	sub	sp, #12
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b32:	605a      	str	r2, [r3, #4]
  return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_isatty>:

int _isatty(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b4a:	2301      	movs	r3, #1
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	60f8      	str	r0, [r7, #12]
 8000b60:	60b9      	str	r1, [r7, #8]
 8000b62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b7c:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <_sbrk+0x5c>)
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <_sbrk+0x60>)
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b88:	4b13      	ldr	r3, [pc, #76]	; (8000bd8 <_sbrk+0x64>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d102      	bne.n	8000b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <_sbrk+0x64>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <_sbrk+0x68>)
 8000b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <_sbrk+0x64>)
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d207      	bcs.n	8000bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ba4:	f002 fb82 	bl	80032ac <__errno>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	220c      	movs	r2, #12
 8000bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	e009      	b.n	8000bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <_sbrk+0x64>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <_sbrk+0x64>)
 8000bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20020000 	.word	0x20020000
 8000bd4:	00000400 	.word	0x00000400
 8000bd8:	20000140 	.word	0x20000140
 8000bdc:	200001a0 	.word	0x200001a0

08000be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c2a:	f240 3247 	movw	r2, #839	; 0x347
 8000c2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000 - 1;
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c38:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000c3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c4a:	4814      	ldr	r0, [pc, #80]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c4c:	f001 fff8 	bl	8002c40 <HAL_TIM_Base_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c56:	f7ff febd 	bl	80009d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	4619      	mov	r1, r3
 8000c66:	480d      	ldr	r0, [pc, #52]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c68:	f002 f8a2 	bl	8002db0 <HAL_TIM_ConfigClockSource>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c72:	f7ff feaf 	bl	80009d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c76:	2320      	movs	r3, #32
 8000c78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c7e:	463b      	mov	r3, r7
 8000c80:	4619      	mov	r1, r3
 8000c82:	4806      	ldr	r0, [pc, #24]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c84:	f002 fa96 	bl	80031b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c8e:	f7ff fea1 	bl	80009d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000144 	.word	0x20000144

08000ca0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb0:	d10d      	bne.n	8000cce <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_TIM_Base_MspInit+0x3c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ce6:	490e      	ldr	r1, [pc, #56]	; (8000d20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce8:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cfc:	4c0b      	ldr	r4, [pc, #44]	; (8000d2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d0a:	f7ff ff69 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0e:	f002 fad3 	bl	80032b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d12:	f7ff fda1 	bl	8000858 <main>
  bx  lr    
 8000d16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d20:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d24:	08004334 	.word	0x08004334
  ldr r2, =_sbss
 8000d28:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d2c:	200001a0 	.word	0x200001a0

08000d30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC_IRQHandler>
	...

08000d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d38:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <HAL_Init+0x40>)
 8000d3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d44:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <HAL_Init+0x40>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_Init+0x40>)
 8000d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_Init+0x40>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_Init+0x40>)
 8000d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 fdbd 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d62:	200f      	movs	r0, #15
 8000d64:	f000 f808 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d68:	f7ff fe3a 	bl	80009e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023c00 	.word	0x40023c00

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x54>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x58>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fdd5 	bl	8001946 <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00e      	b.n	8000dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d80a      	bhi.n	8000dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f000 fd9d 	bl	80018f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_InitTick+0x5c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x20>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x24>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_IncTick+0x24>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	2000018c 	.word	0x2000018c

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	2000018c 	.word	0x2000018c

08000e18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e033      	b.n	8000e96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d109      	bne.n	8000e4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff fc1a 	bl	8000670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d118      	bne.n	8000e88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e5e:	f023 0302 	bic.w	r3, r3, #2
 8000e62:	f043 0202 	orr.w	r2, r3, #2
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 fae8 	bl	8001440 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f023 0303 	bic.w	r3, r3, #3
 8000e7e:	f043 0201 	orr.w	r2, r3, #1
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	641a      	str	r2, [r3, #64]	; 0x40
 8000e86:	e001      	b.n	8000e8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eba:	d113      	bne.n	8000ee4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000eca:	d10b      	bne.n	8000ee4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f043 0220 	orr.w	r2, r3, #32
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e063      	b.n	8000fac <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000ee4:	f7ff ff8c 	bl	8000e00 <HAL_GetTick>
 8000ee8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000eea:	e021      	b.n	8000f30 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef2:	d01d      	beq.n	8000f30 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d007      	beq.n	8000f0a <HAL_ADC_PollForConversion+0x6c>
 8000efa:	f7ff ff81 	bl	8000e00 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d212      	bcs.n	8000f30 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0302 	and.w	r3, r3, #2
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d00b      	beq.n	8000f30 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f043 0204 	orr.w	r2, r3, #4
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e03d      	b.n	8000fac <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d1d6      	bne.n	8000eec <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f06f 0212 	mvn.w	r2, #18
 8000f46:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d123      	bne.n	8000faa <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d11f      	bne.n	8000faa <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f70:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d111      	bne.n	8000faa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f043 0201 	orr.w	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Start_DMA+0x1e>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e0e9      	b.n	80011a6 <HAL_ADC_Start_DMA+0x1f2>
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d018      	beq.n	800101a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0201 	orr.w	r2, r2, #1
 8000ff6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff8:	4b6d      	ldr	r3, [pc, #436]	; (80011b0 <HAL_ADC_Start_DMA+0x1fc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a6d      	ldr	r2, [pc, #436]	; (80011b4 <HAL_ADC_Start_DMA+0x200>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0c9a      	lsrs	r2, r3, #18
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800100c:	e002      	b.n	8001014 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	3b01      	subs	r3, #1
 8001012:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f9      	bne.n	800100e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001028:	d107      	bne.n	800103a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001038:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	f040 80a1 	bne.w	800118c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001068:	2b00      	cmp	r3, #0
 800106a:	d007      	beq.n	800107c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001070:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001074:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001088:	d106      	bne.n	8001098 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	f023 0206 	bic.w	r2, r3, #6
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	645a      	str	r2, [r3, #68]	; 0x44
 8001096:	e002      	b.n	800109e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2200      	movs	r2, #0
 800109c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010a6:	4b44      	ldr	r3, [pc, #272]	; (80011b8 <HAL_ADC_Start_DMA+0x204>)
 80010a8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ae:	4a43      	ldr	r2, [pc, #268]	; (80011bc <HAL_ADC_Start_DMA+0x208>)
 80010b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b6:	4a42      	ldr	r2, [pc, #264]	; (80011c0 <HAL_ADC_Start_DMA+0x20c>)
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010be:	4a41      	ldr	r2, [pc, #260]	; (80011c4 <HAL_ADC_Start_DMA+0x210>)
 80010c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80010da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	334c      	adds	r3, #76	; 0x4c
 80010f6:	4619      	mov	r1, r3
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f000 fcde 	bl	8001abc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	2b00      	cmp	r3, #0
 800110a:	d12a      	bne.n	8001162 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a2d      	ldr	r2, [pc, #180]	; (80011c8 <HAL_ADC_Start_DMA+0x214>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d015      	beq.n	8001142 <HAL_ADC_Start_DMA+0x18e>
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a2c      	ldr	r2, [pc, #176]	; (80011cc <HAL_ADC_Start_DMA+0x218>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d105      	bne.n	800112c <HAL_ADC_Start_DMA+0x178>
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_ADC_Start_DMA+0x204>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 031f 	and.w	r3, r3, #31
 8001128:	2b00      	cmp	r3, #0
 800112a:	d00a      	beq.n	8001142 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <HAL_ADC_Start_DMA+0x21c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d136      	bne.n	80011a4 <HAL_ADC_Start_DMA+0x1f0>
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <HAL_ADC_Start_DMA+0x204>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	2b00      	cmp	r3, #0
 8001140:	d130      	bne.n	80011a4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d129      	bne.n	80011a4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	e020      	b.n	80011a4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a18      	ldr	r2, [pc, #96]	; (80011c8 <HAL_ADC_Start_DMA+0x214>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d11b      	bne.n	80011a4 <HAL_ADC_Start_DMA+0x1f0>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d114      	bne.n	80011a4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	e00b      	b.n	80011a4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f043 0210 	orr.w	r2, r3, #16
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	f043 0201 	orr.w	r2, r3, #1
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000000 	.word	0x20000000
 80011b4:	431bde83 	.word	0x431bde83
 80011b8:	40012300 	.word	0x40012300
 80011bc:	08001639 	.word	0x08001639
 80011c0:	080016f3 	.word	0x080016f3
 80011c4:	0800170f 	.word	0x0800170f
 80011c8:	40012000 	.word	0x40012000
 80011cc:	40012100 	.word	0x40012100
 80011d0:	40012200 	.word	0x40012200

080011d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001210:	2b01      	cmp	r3, #1
 8001212:	d101      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1c>
 8001214:	2302      	movs	r3, #2
 8001216:	e105      	b.n	8001424 <HAL_ADC_ConfigChannel+0x228>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b09      	cmp	r3, #9
 8001226:	d925      	bls.n	8001274 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68d9      	ldr	r1, [r3, #12]
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	3b1e      	subs	r3, #30
 800123e:	2207      	movs	r2, #7
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43da      	mvns	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	400a      	ands	r2, r1
 800124c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68d9      	ldr	r1, [r3, #12]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	4603      	mov	r3, r0
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4403      	add	r3, r0
 8001266:	3b1e      	subs	r3, #30
 8001268:	409a      	lsls	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	e022      	b.n	80012ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6919      	ldr	r1, [r3, #16]
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b29b      	uxth	r3, r3
 8001280:	461a      	mov	r2, r3
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	2207      	movs	r2, #7
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	400a      	ands	r2, r1
 8001296:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	6919      	ldr	r1, [r3, #16]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4403      	add	r3, r0
 80012b0:	409a      	lsls	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d824      	bhi.n	800130c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	3b05      	subs	r3, #5
 80012d4:	221f      	movs	r2, #31
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	400a      	ands	r2, r1
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	3b05      	subs	r3, #5
 80012fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
 800130a:	e04c      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b0c      	cmp	r3, #12
 8001312:	d824      	bhi.n	800135e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	3b23      	subs	r3, #35	; 0x23
 8001326:	221f      	movs	r2, #31
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43da      	mvns	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	400a      	ands	r2, r1
 8001334:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	b29b      	uxth	r3, r3
 8001342:	4618      	mov	r0, r3
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685a      	ldr	r2, [r3, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	3b23      	subs	r3, #35	; 0x23
 8001350:	fa00 f203 	lsl.w	r2, r0, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	631a      	str	r2, [r3, #48]	; 0x30
 800135c:	e023      	b.n	80013a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	3b41      	subs	r3, #65	; 0x41
 8001370:	221f      	movs	r2, #31
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	400a      	ands	r2, r1
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685a      	ldr	r2, [r3, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	3b41      	subs	r3, #65	; 0x41
 800139a:	fa00 f203 	lsl.w	r2, r0, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_ADC_ConfigChannel+0x234>)
 80013a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a21      	ldr	r2, [pc, #132]	; (8001434 <HAL_ADC_ConfigChannel+0x238>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d109      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1cc>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b12      	cmp	r3, #18
 80013ba:	d105      	bne.n	80013c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a19      	ldr	r2, [pc, #100]	; (8001434 <HAL_ADC_ConfigChannel+0x238>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d123      	bne.n	800141a <HAL_ADC_ConfigChannel+0x21e>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b10      	cmp	r3, #16
 80013d8:	d003      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x1e6>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b11      	cmp	r3, #17
 80013e0:	d11b      	bne.n	800141a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b10      	cmp	r3, #16
 80013f4:	d111      	bne.n	800141a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <HAL_ADC_ConfigChannel+0x23c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a10      	ldr	r2, [pc, #64]	; (800143c <HAL_ADC_ConfigChannel+0x240>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	0c9a      	lsrs	r2, r3, #18
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800140c:	e002      	b.n	8001414 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3b01      	subs	r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f9      	bne.n	800140e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40012300 	.word	0x40012300
 8001434:	40012000 	.word	0x40012000
 8001438:	20000000 	.word	0x20000000
 800143c:	431bde83 	.word	0x431bde83

08001440 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001448:	4b79      	ldr	r3, [pc, #484]	; (8001630 <ADC_Init+0x1f0>)
 800144a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	431a      	orrs	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6859      	ldr	r1, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	021a      	lsls	r2, r3, #8
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001498:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6899      	ldr	r1, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d2:	4a58      	ldr	r2, [pc, #352]	; (8001634 <ADC_Init+0x1f4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d022      	beq.n	800151e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6899      	ldr	r1, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6899      	ldr	r1, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	e00f      	b.n	800153e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800152c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800153c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0202 	bic.w	r2, r2, #2
 800154c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6899      	ldr	r1, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	7e1b      	ldrb	r3, [r3, #24]
 8001558:	005a      	lsls	r2, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01b      	beq.n	80015a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800157a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685a      	ldr	r2, [r3, #4]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800158a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6859      	ldr	r1, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	3b01      	subs	r3, #1
 8001598:	035a      	lsls	r2, r3, #13
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	e007      	b.n	80015b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	051a      	lsls	r2, r3, #20
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6899      	ldr	r1, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015f6:	025a      	lsls	r2, r3, #9
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800160e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6899      	ldr	r1, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	029a      	lsls	r2, r3, #10
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	609a      	str	r2, [r3, #8]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40012300 	.word	0x40012300
 8001634:	0f000001 	.word	0x0f000001

08001638 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001644:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800164e:	2b00      	cmp	r3, #0
 8001650:	d13c      	bne.n	80016cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d12b      	bne.n	80016c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001670:	2b00      	cmp	r3, #0
 8001672:	d127      	bne.n	80016c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800168c:	2b00      	cmp	r3, #0
 800168e:	d119      	bne.n	80016c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0220 	bic.w	r2, r2, #32
 800169e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f043 0201 	orr.w	r2, r3, #1
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff f975 	bl	80009b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016ca:	e00e      	b.n	80016ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f7ff fd85 	bl	80011e8 <HAL_ADC_ErrorCallback>
}
 80016de:	e004      	b.n	80016ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4798      	blx	r3
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7ff fd67 	bl	80011d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b084      	sub	sp, #16
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2240      	movs	r2, #64	; 0x40
 8001720:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f043 0204 	orr.w	r2, r3, #4
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff fd5a 	bl	80011e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <__NVIC_SetPriorityGrouping>:
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001758:	4013      	ands	r3, r2
 800175a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001764:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176e:	4a04      	ldr	r2, [pc, #16]	; (8001780 <__NVIC_SetPriorityGrouping+0x44>)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60d3      	str	r3, [r2, #12]
}
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <__NVIC_GetPriorityGrouping>:
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <__NVIC_GetPriorityGrouping+0x18>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	f003 0307 	and.w	r3, r3, #7
}
 8001792:	4618      	mov	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <__NVIC_EnableIRQ>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	db0b      	blt.n	80017ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 021f 	and.w	r2, r3, #31
 80017b8:	4907      	ldr	r1, [pc, #28]	; (80017d8 <__NVIC_EnableIRQ+0x38>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	095b      	lsrs	r3, r3, #5
 80017c0:	2001      	movs	r0, #1
 80017c2:	fa00 f202 	lsl.w	r2, r0, r2
 80017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100

080017dc <__NVIC_SetPriority>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	db0a      	blt.n	8001806 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	490c      	ldr	r1, [pc, #48]	; (8001828 <__NVIC_SetPriority+0x4c>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	0112      	lsls	r2, r2, #4
 80017fc:	b2d2      	uxtb	r2, r2
 80017fe:	440b      	add	r3, r1
 8001800:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001804:	e00a      	b.n	800181c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4908      	ldr	r1, [pc, #32]	; (800182c <__NVIC_SetPriority+0x50>)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	3b04      	subs	r3, #4
 8001814:	0112      	lsls	r2, r2, #4
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	440b      	add	r3, r1
 800181a:	761a      	strb	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000e100 	.word	0xe000e100
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <NVIC_EncodePriority>:
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	; 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f1c3 0307 	rsb	r3, r3, #7
 800184a:	2b04      	cmp	r3, #4
 800184c:	bf28      	it	cs
 800184e:	2304      	movcs	r3, #4
 8001850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3304      	adds	r3, #4
 8001856:	2b06      	cmp	r3, #6
 8001858:	d902      	bls.n	8001860 <NVIC_EncodePriority+0x30>
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3b03      	subs	r3, #3
 800185e:	e000      	b.n	8001862 <NVIC_EncodePriority+0x32>
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43da      	mvns	r2, r3
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	401a      	ands	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001878:	f04f 31ff 	mov.w	r1, #4294967295
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa01 f303 	lsl.w	r3, r1, r3
 8001882:	43d9      	mvns	r1, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	4313      	orrs	r3, r2
}
 800188a:	4618      	mov	r0, r3
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <SysTick_Config>:
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff8e 	bl	80017dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff29 	bl	800173c <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001904:	f7ff ff3e 	bl	8001784 <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff8e 	bl	8001830 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5d 	bl	80017dc <__NVIC_SetPriority>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff31 	bl	80017a0 <__NVIC_EnableIRQ>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffa2 	bl	8001898 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff fa48 	bl	8000e00 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d101      	bne.n	800197c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e099      	b.n	8001ab0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199c:	e00f      	b.n	80019be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800199e:	f7ff fa2f 	bl	8000e00 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d908      	bls.n	80019be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2220      	movs	r2, #32
 80019b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2203      	movs	r2, #3
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e078      	b.n	8001ab0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1e8      	bne.n	800199e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <HAL_DMA_Init+0x158>)
 80019d8:	4013      	ands	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d107      	bne.n	8001a28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a20:	4313      	orrs	r3, r2
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f023 0307 	bic.w	r3, r3, #7
 8001a3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d117      	bne.n	8001a82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00e      	beq.n	8001a82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 fa6f 	bl	8001f48 <DMA_CheckFifoParam>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2240      	movs	r2, #64	; 0x40
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e016      	b.n	8001ab0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fa26 	bl	8001edc <DMA_CalcBaseAndBitshift>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	223f      	movs	r2, #63	; 0x3f
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	f010803f 	.word	0xf010803f

08001abc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_DMA_Start_IT+0x26>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e040      	b.n	8001b64 <HAL_DMA_Start_IT+0xa8>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d12f      	bne.n	8001b56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2202      	movs	r2, #2
 8001afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 f9b8 	bl	8001e80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	223f      	movs	r2, #63	; 0x3f
 8001b16:	409a      	lsls	r2, r3
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f042 0216 	orr.w	r2, r2, #22
 8001b2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0208 	orr.w	r2, r2, #8
 8001b42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e005      	b.n	8001b62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b78:	4b8e      	ldr	r3, [pc, #568]	; (8001db4 <HAL_DMA_IRQHandler+0x248>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a8e      	ldr	r2, [pc, #568]	; (8001db8 <HAL_DMA_IRQHandler+0x24c>)
 8001b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b82:	0a9b      	lsrs	r3, r3, #10
 8001b84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	2208      	movs	r2, #8
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d01a      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d013      	beq.n	8001bd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0204 	bic.w	r2, r2, #4
 8001bbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bdc:	2201      	movs	r2, #1
 8001bde:	409a      	lsls	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4013      	ands	r3, r2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d012      	beq.n	8001c0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00b      	beq.n	8001c0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c06:	f043 0202 	orr.w	r2, r3, #2
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c12:	2204      	movs	r2, #4
 8001c14:	409a      	lsls	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d012      	beq.n	8001c44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00b      	beq.n	8001c44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c30:	2204      	movs	r2, #4
 8001c32:	409a      	lsls	r2, r3
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	f043 0204 	orr.w	r2, r3, #4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c48:	2210      	movs	r2, #16
 8001c4a:	409a      	lsls	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d043      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d03c      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c66:	2210      	movs	r2, #16
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d018      	beq.n	8001cae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d108      	bne.n	8001c9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d024      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	4798      	blx	r3
 8001c9a:	e01f      	b.n	8001cdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01b      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	4798      	blx	r3
 8001cac:	e016      	b.n	8001cdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d107      	bne.n	8001ccc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0208 	bic.w	r2, r2, #8
 8001cca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 808f 	beq.w	8001e0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 8087 	beq.w	8001e0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	2220      	movs	r2, #32
 8001d04:	409a      	lsls	r2, r3
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b05      	cmp	r3, #5
 8001d14:	d136      	bne.n	8001d84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0216 	bic.w	r2, r2, #22
 8001d24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d103      	bne.n	8001d46 <HAL_DMA_IRQHandler+0x1da>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d007      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0208 	bic.w	r2, r2, #8
 8001d54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5a:	223f      	movs	r2, #63	; 0x3f
 8001d5c:	409a      	lsls	r2, r3
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d07e      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	4798      	blx	r3
        }
        return;
 8001d82:	e079      	b.n	8001e78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d01d      	beq.n	8001dce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10d      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d031      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
 8001db0:	e02c      	b.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
 8001db2:	bf00      	nop
 8001db4:	20000000 	.word	0x20000000
 8001db8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d023      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
 8001dcc:	e01e      	b.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10f      	bne.n	8001dfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0210 	bic.w	r2, r2, #16
 8001dea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d032      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d022      	beq.n	8001e66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2205      	movs	r2, #5
 8001e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	697a      	ldr	r2, [r7, #20]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d307      	bcc.n	8001e54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f2      	bne.n	8001e38 <HAL_DMA_IRQHandler+0x2cc>
 8001e52:	e000      	b.n	8001e56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	4798      	blx	r3
 8001e76:	e000      	b.n	8001e7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e78:	bf00      	nop
    }
  }
}
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b40      	cmp	r3, #64	; 0x40
 8001eac:	d108      	bne.n	8001ec0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ebe:	e007      	b.n	8001ed0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	60da      	str	r2, [r3, #12]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	3b10      	subs	r3, #16
 8001eec:	4a14      	ldr	r2, [pc, #80]	; (8001f40 <DMA_CalcBaseAndBitshift+0x64>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ef6:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <DMA_CalcBaseAndBitshift+0x68>)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d909      	bls.n	8001f1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	1d1a      	adds	r2, r3, #4
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	659a      	str	r2, [r3, #88]	; 0x58
 8001f1c:	e007      	b.n	8001f2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f26:	f023 0303 	bic.w	r3, r3, #3
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	aaaaaaab 	.word	0xaaaaaaab
 8001f44:	08004284 	.word	0x08004284

08001f48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d11f      	bne.n	8001fa2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d856      	bhi.n	8002016 <DMA_CheckFifoParam+0xce>
 8001f68:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <DMA_CheckFifoParam+0x28>)
 8001f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6e:	bf00      	nop
 8001f70:	08001f81 	.word	0x08001f81
 8001f74:	08001f93 	.word	0x08001f93
 8001f78:	08001f81 	.word	0x08001f81
 8001f7c:	08002017 	.word	0x08002017
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d046      	beq.n	800201a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f90:	e043      	b.n	800201a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f9a:	d140      	bne.n	800201e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fa0:	e03d      	b.n	800201e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001faa:	d121      	bne.n	8001ff0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d837      	bhi.n	8002022 <DMA_CheckFifoParam+0xda>
 8001fb2:	a201      	add	r2, pc, #4	; (adr r2, 8001fb8 <DMA_CheckFifoParam+0x70>)
 8001fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb8:	08001fc9 	.word	0x08001fc9
 8001fbc:	08001fcf 	.word	0x08001fcf
 8001fc0:	08001fc9 	.word	0x08001fc9
 8001fc4:	08001fe1 	.word	0x08001fe1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
      break;
 8001fcc:	e030      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d025      	beq.n	8002026 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fde:	e022      	b.n	8002026 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fe8:	d11f      	bne.n	800202a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fee:	e01c      	b.n	800202a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d903      	bls.n	8001ffe <DMA_CheckFifoParam+0xb6>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d003      	beq.n	8002004 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ffc:	e018      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
      break;
 8002002:	e015      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00e      	beq.n	800202e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
      break;
 8002014:	e00b      	b.n	800202e <DMA_CheckFifoParam+0xe6>
      break;
 8002016:	bf00      	nop
 8002018:	e00a      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
 800201c:	e008      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      break;
 800201e:	bf00      	nop
 8002020:	e006      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      break;
 8002022:	bf00      	nop
 8002024:	e004      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      break;
 8002026:	bf00      	nop
 8002028:	e002      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      break;   
 800202a:	bf00      	nop
 800202c:	e000      	b.n	8002030 <DMA_CheckFifoParam+0xe8>
      break;
 800202e:	bf00      	nop
    }
  } 
  
  return status; 
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop

08002040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	e16b      	b.n	8002334 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800205c:	2201      	movs	r2, #1
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	429a      	cmp	r2, r3
 8002076:	f040 815a 	bne.w	800232e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d005      	beq.n	8002092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800208e:	2b02      	cmp	r3, #2
 8002090:	d130      	bne.n	80020f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	2203      	movs	r2, #3
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c8:	2201      	movs	r2, #1
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 0201 	and.w	r2, r3, #1
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d017      	beq.n	8002130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2203      	movs	r2, #3
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d123      	bne.n	8002184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	08da      	lsrs	r2, r3, #3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3208      	adds	r2, #8
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	08da      	lsrs	r2, r3, #3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3208      	adds	r2, #8
 800217e:	69b9      	ldr	r1, [r7, #24]
 8002180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	2203      	movs	r2, #3
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0203 	and.w	r2, r3, #3
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80b4 	beq.w	800232e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b60      	ldr	r3, [pc, #384]	; (800234c <HAL_GPIO_Init+0x30c>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4a5f      	ldr	r2, [pc, #380]	; (800234c <HAL_GPIO_Init+0x30c>)
 80021d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021d4:	6453      	str	r3, [r2, #68]	; 0x44
 80021d6:	4b5d      	ldr	r3, [pc, #372]	; (800234c <HAL_GPIO_Init+0x30c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021e2:	4a5b      	ldr	r2, [pc, #364]	; (8002350 <HAL_GPIO_Init+0x310>)
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a52      	ldr	r2, [pc, #328]	; (8002354 <HAL_GPIO_Init+0x314>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02b      	beq.n	8002266 <HAL_GPIO_Init+0x226>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a51      	ldr	r2, [pc, #324]	; (8002358 <HAL_GPIO_Init+0x318>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d025      	beq.n	8002262 <HAL_GPIO_Init+0x222>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a50      	ldr	r2, [pc, #320]	; (800235c <HAL_GPIO_Init+0x31c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01f      	beq.n	800225e <HAL_GPIO_Init+0x21e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4f      	ldr	r2, [pc, #316]	; (8002360 <HAL_GPIO_Init+0x320>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d019      	beq.n	800225a <HAL_GPIO_Init+0x21a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4e      	ldr	r2, [pc, #312]	; (8002364 <HAL_GPIO_Init+0x324>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x216>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4d      	ldr	r2, [pc, #308]	; (8002368 <HAL_GPIO_Init+0x328>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x212>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4c      	ldr	r2, [pc, #304]	; (800236c <HAL_GPIO_Init+0x32c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x20e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4b      	ldr	r2, [pc, #300]	; (8002370 <HAL_GPIO_Init+0x330>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x20a>
 8002246:	2307      	movs	r3, #7
 8002248:	e00e      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800224a:	2308      	movs	r3, #8
 800224c:	e00c      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800224e:	2306      	movs	r3, #6
 8002250:	e00a      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002252:	2305      	movs	r3, #5
 8002254:	e008      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002256:	2304      	movs	r3, #4
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800225a:	2303      	movs	r3, #3
 800225c:	e004      	b.n	8002268 <HAL_GPIO_Init+0x228>
 800225e:	2302      	movs	r3, #2
 8002260:	e002      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <HAL_GPIO_Init+0x228>
 8002266:	2300      	movs	r3, #0
 8002268:	69fa      	ldr	r2, [r7, #28]
 800226a:	f002 0203 	and.w	r2, r2, #3
 800226e:	0092      	lsls	r2, r2, #2
 8002270:	4093      	lsls	r3, r2
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002278:	4935      	ldr	r1, [pc, #212]	; (8002350 <HAL_GPIO_Init+0x310>)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	3302      	adds	r3, #2
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002286:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_GPIO_Init+0x334>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022aa:	4a32      	ldr	r2, [pc, #200]	; (8002374 <HAL_GPIO_Init+0x334>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022b0:	4b30      	ldr	r3, [pc, #192]	; (8002374 <HAL_GPIO_Init+0x334>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022d4:	4a27      	ldr	r2, [pc, #156]	; (8002374 <HAL_GPIO_Init+0x334>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_GPIO_Init+0x334>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022fe:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_GPIO_Init+0x334>)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_GPIO_Init+0x334>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002328:	4a12      	ldr	r2, [pc, #72]	; (8002374 <HAL_GPIO_Init+0x334>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3301      	adds	r3, #1
 8002332:	61fb      	str	r3, [r7, #28]
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	2b0f      	cmp	r3, #15
 8002338:	f67f ae90 	bls.w	800205c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800
 8002350:	40013800 	.word	0x40013800
 8002354:	40020000 	.word	0x40020000
 8002358:	40020400 	.word	0x40020400
 800235c:	40020800 	.word	0x40020800
 8002360:	40020c00 	.word	0x40020c00
 8002364:	40021000 	.word	0x40021000
 8002368:	40021400 	.word	0x40021400
 800236c:	40021800 	.word	0x40021800
 8002370:	40021c00 	.word	0x40021c00
 8002374:	40013c00 	.word	0x40013c00

08002378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e267      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d075      	beq.n	8002482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002396:	4b88      	ldr	r3, [pc, #544]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d00c      	beq.n	80023bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a2:	4b85      	ldr	r3, [pc, #532]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023aa:	2b08      	cmp	r3, #8
 80023ac:	d112      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ae:	4b82      	ldr	r3, [pc, #520]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	4b7e      	ldr	r3, [pc, #504]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d05b      	beq.n	8002480 <HAL_RCC_OscConfig+0x108>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d157      	bne.n	8002480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e242      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023dc:	d106      	bne.n	80023ec <HAL_RCC_OscConfig+0x74>
 80023de:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a75      	ldr	r2, [pc, #468]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0xb0>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0x98>
 80023f6:	4b70      	ldr	r3, [pc, #448]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6f      	ldr	r2, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a6c      	ldr	r2, [pc, #432]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xb0>
 8002410:	4b69      	ldr	r3, [pc, #420]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a68      	ldr	r2, [pc, #416]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b66      	ldr	r3, [pc, #408]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe fce6 	bl	8000e00 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002438:	f7fe fce2 	bl	8000e00 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e207      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b5b      	ldr	r3, [pc, #364]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0xc0>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe fcd2 	bl	8000e00 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002460:	f7fe fcce 	bl	8000e00 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e1f3      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	4b51      	ldr	r3, [pc, #324]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0xe8>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d063      	beq.n	8002556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248e:	4b4a      	ldr	r3, [pc, #296]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249a:	4b47      	ldr	r3, [pc, #284]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11c      	bne.n	80024e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a6:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d116      	bne.n	80024e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b2:	4b41      	ldr	r3, [pc, #260]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d005      	beq.n	80024ca <HAL_RCC_OscConfig+0x152>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d001      	beq.n	80024ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e1c7      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ca:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4937      	ldr	r1, [pc, #220]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	e03a      	b.n	8002556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e8:	4b34      	ldr	r3, [pc, #208]	; (80025bc <HAL_RCC_OscConfig+0x244>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe fc87 	bl	8000e00 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe fc83 	bl	8000e00 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e1a8      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0f0      	beq.n	80024f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002514:	4b28      	ldr	r3, [pc, #160]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4925      	ldr	r1, [pc, #148]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
 8002528:	e015      	b.n	8002556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800252a:	4b24      	ldr	r3, [pc, #144]	; (80025bc <HAL_RCC_OscConfig+0x244>)
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe fc66 	bl	8000e00 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002538:	f7fe fc62 	bl	8000e00 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e187      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254a:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d036      	beq.n	80025d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_RCC_OscConfig+0x248>)
 800256c:	2201      	movs	r2, #1
 800256e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fc46 	bl	8000e00 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe fc42 	bl	8000e00 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e167      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x240>)
 800258c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x200>
 8002596:	e01b      	b.n	80025d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <HAL_RCC_OscConfig+0x248>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259e:	f7fe fc2f 	bl	8000e00 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a4:	e00e      	b.n	80025c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a6:	f7fe fc2b 	bl	8000e00 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d907      	bls.n	80025c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e150      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
 80025b8:	40023800 	.word	0x40023800
 80025bc:	42470000 	.word	0x42470000
 80025c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c4:	4b88      	ldr	r3, [pc, #544]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ea      	bne.n	80025a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 8097 	beq.w	800270c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e2:	4b81      	ldr	r3, [pc, #516]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	4b7d      	ldr	r3, [pc, #500]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	4a7c      	ldr	r2, [pc, #496]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6413      	str	r3, [r2, #64]	; 0x40
 80025fe:	4b7a      	ldr	r3, [pc, #488]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260e:	4b77      	ldr	r3, [pc, #476]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d118      	bne.n	800264c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800261a:	4b74      	ldr	r3, [pc, #464]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a73      	ldr	r2, [pc, #460]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 8002620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002626:	f7fe fbeb 	bl	8000e00 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262e:	f7fe fbe7 	bl	8000e00 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e10c      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	4b6a      	ldr	r3, [pc, #424]	; (80027ec <HAL_RCC_OscConfig+0x474>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0f0      	beq.n	800262e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d106      	bne.n	8002662 <HAL_RCC_OscConfig+0x2ea>
 8002654:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a63      	ldr	r2, [pc, #396]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
 8002660:	e01c      	b.n	800269c <HAL_RCC_OscConfig+0x324>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b05      	cmp	r3, #5
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x30c>
 800266a:	4b5f      	ldr	r3, [pc, #380]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a5e      	ldr	r2, [pc, #376]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6713      	str	r3, [r2, #112]	; 0x70
 8002676:	4b5c      	ldr	r3, [pc, #368]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	4a5b      	ldr	r2, [pc, #364]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	6713      	str	r3, [r2, #112]	; 0x70
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0x324>
 8002684:	4b58      	ldr	r3, [pc, #352]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	4a57      	ldr	r2, [pc, #348]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	6713      	str	r3, [r2, #112]	; 0x70
 8002690:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002694:	4a54      	ldr	r2, [pc, #336]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002696:	f023 0304 	bic.w	r3, r3, #4
 800269a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d015      	beq.n	80026d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fbac 	bl	8000e00 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ac:	f7fe fba8 	bl	8000e00 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e0cb      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c2:	4b49      	ldr	r3, [pc, #292]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0ee      	beq.n	80026ac <HAL_RCC_OscConfig+0x334>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d0:	f7fe fb96 	bl	8000e00 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fe fb92 	bl	8000e00 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0b5      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ee:	4b3e      	ldr	r3, [pc, #248]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1ee      	bne.n	80026d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026fa:	7dfb      	ldrb	r3, [r7, #23]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002700:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	4a38      	ldr	r2, [pc, #224]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800270a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a1 	beq.w	8002858 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002716:	4b34      	ldr	r3, [pc, #208]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b08      	cmp	r3, #8
 8002720:	d05c      	beq.n	80027dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d141      	bne.n	80027ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_RCC_OscConfig+0x478>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002730:	f7fe fb66 	bl	8000e00 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fb62 	bl	8000e00 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e087      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274a:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	019b      	lsls	r3, r3, #6
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	3b01      	subs	r3, #1
 8002770:	041b      	lsls	r3, r3, #16
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	491b      	ldr	r1, [pc, #108]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_RCC_OscConfig+0x478>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe fb3b 	bl	8000e00 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278e:	f7fe fb37 	bl	8000e00 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e05c      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x416>
 80027ac:	e054      	b.n	8002858 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <HAL_RCC_OscConfig+0x478>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fb24 	bl	8000e00 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fb20 	bl	8000e00 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e045      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCC_OscConfig+0x470>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x444>
 80027da:	e03d      	b.n	8002858 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e038      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40007000 	.word	0x40007000
 80027f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HAL_RCC_OscConfig+0x4ec>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d028      	beq.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d121      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d11a      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002824:	4013      	ands	r3, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800282a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800282c:	4293      	cmp	r3, r2
 800282e:	d111      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	3b01      	subs	r3, #1
 800283e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d107      	bne.n	8002854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0cc      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800287c:	4b68      	ldr	r3, [pc, #416]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d90c      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288a:	4b65      	ldr	r3, [pc, #404]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b63      	ldr	r3, [pc, #396]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0b8      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d4:	4b53      	ldr	r3, [pc, #332]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a52      	ldr	r2, [pc, #328]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b50      	ldr	r3, [pc, #320]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	494d      	ldr	r1, [pc, #308]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d044      	beq.n	8002988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d119      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e07f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d003      	beq.n	8002926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002922:	2b03      	cmp	r3, #3
 8002924:	d107      	bne.n	8002936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002926:	4b3f      	ldr	r3, [pc, #252]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002936:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e067      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002946:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f023 0203 	bic.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4934      	ldr	r1, [pc, #208]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	4313      	orrs	r3, r2
 8002956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002958:	f7fe fa52 	bl	8000e00 <HAL_GetTick>
 800295c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295e:	e00a      	b.n	8002976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002960:	f7fe fa4e 	bl	8000e00 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f241 3288 	movw	r2, #5000	; 0x1388
 800296e:	4293      	cmp	r3, r2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e04f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002976:	4b2b      	ldr	r3, [pc, #172]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 020c 	and.w	r2, r3, #12
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	429a      	cmp	r2, r3
 8002986:	d1eb      	bne.n	8002960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d20c      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e032      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029bc:	4b19      	ldr	r3, [pc, #100]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4916      	ldr	r1, [pc, #88]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029da:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	490e      	ldr	r1, [pc, #56]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ee:	f000 f821 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	490a      	ldr	r1, [pc, #40]	; (8002a28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a00:	5ccb      	ldrb	r3, [r1, r3]
 8002a02:	fa22 f303 	lsr.w	r3, r2, r3
 8002a06:	4a09      	ldr	r2, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe f9b2 	bl	8000d78 <HAL_InitTick>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023c00 	.word	0x40023c00
 8002a24:	40023800 	.word	0x40023800
 8002a28:	08004274 	.word	0x08004274
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	20000004 	.word	0x20000004

08002a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a38:	b094      	sub	sp, #80	; 0x50
 8002a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a40:	2300      	movs	r3, #0
 8002a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a44:	2300      	movs	r3, #0
 8002a46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a4c:	4b79      	ldr	r3, [pc, #484]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d00d      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x40>
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	f200 80e1 	bhi.w	8002c20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x34>
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d003      	beq.n	8002a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a66:	e0db      	b.n	8002c20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a68:	4b73      	ldr	r3, [pc, #460]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a6c:	e0db      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a6e:	4b73      	ldr	r3, [pc, #460]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a72:	e0d8      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a74:	4b6f      	ldr	r3, [pc, #444]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7e:	4b6d      	ldr	r3, [pc, #436]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d063      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a8a:	4b6a      	ldr	r3, [pc, #424]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	099b      	lsrs	r3, r3, #6
 8002a90:	2200      	movs	r2, #0
 8002a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aa6:	4622      	mov	r2, r4
 8002aa8:	462b      	mov	r3, r5
 8002aaa:	f04f 0000 	mov.w	r0, #0
 8002aae:	f04f 0100 	mov.w	r1, #0
 8002ab2:	0159      	lsls	r1, r3, #5
 8002ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ab8:	0150      	lsls	r0, r2, #5
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4621      	mov	r1, r4
 8002ac0:	1a51      	subs	r1, r2, r1
 8002ac2:	6139      	str	r1, [r7, #16]
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ad8:	4659      	mov	r1, fp
 8002ada:	018b      	lsls	r3, r1, #6
 8002adc:	4651      	mov	r1, sl
 8002ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ae2:	4651      	mov	r1, sl
 8002ae4:	018a      	lsls	r2, r1, #6
 8002ae6:	4651      	mov	r1, sl
 8002ae8:	ebb2 0801 	subs.w	r8, r2, r1
 8002aec:	4659      	mov	r1, fp
 8002aee:	eb63 0901 	sbc.w	r9, r3, r1
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b06:	4690      	mov	r8, r2
 8002b08:	4699      	mov	r9, r3
 8002b0a:	4623      	mov	r3, r4
 8002b0c:	eb18 0303 	adds.w	r3, r8, r3
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	462b      	mov	r3, r5
 8002b14:	eb49 0303 	adc.w	r3, r9, r3
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b26:	4629      	mov	r1, r5
 8002b28:	024b      	lsls	r3, r1, #9
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b30:	4621      	mov	r1, r4
 8002b32:	024a      	lsls	r2, r1, #9
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b44:	f7fd fb94 	bl	8000270 <__aeabi_uldivmod>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b50:	e058      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b52:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	4611      	mov	r1, r2
 8002b5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b62:	623b      	str	r3, [r7, #32]
 8002b64:	2300      	movs	r3, #0
 8002b66:	627b      	str	r3, [r7, #36]	; 0x24
 8002b68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b6c:	4642      	mov	r2, r8
 8002b6e:	464b      	mov	r3, r9
 8002b70:	f04f 0000 	mov.w	r0, #0
 8002b74:	f04f 0100 	mov.w	r1, #0
 8002b78:	0159      	lsls	r1, r3, #5
 8002b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b7e:	0150      	lsls	r0, r2, #5
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4641      	mov	r1, r8
 8002b86:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ba0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ba4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ba8:	eb63 050b 	sbc.w	r5, r3, fp
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	00eb      	lsls	r3, r5, #3
 8002bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bba:	00e2      	lsls	r2, r4, #3
 8002bbc:	4614      	mov	r4, r2
 8002bbe:	461d      	mov	r5, r3
 8002bc0:	4643      	mov	r3, r8
 8002bc2:	18e3      	adds	r3, r4, r3
 8002bc4:	603b      	str	r3, [r7, #0]
 8002bc6:	464b      	mov	r3, r9
 8002bc8:	eb45 0303 	adc.w	r3, r5, r3
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bda:	4629      	mov	r1, r5
 8002bdc:	028b      	lsls	r3, r1, #10
 8002bde:	4621      	mov	r1, r4
 8002be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be4:	4621      	mov	r1, r4
 8002be6:	028a      	lsls	r2, r1, #10
 8002be8:	4610      	mov	r0, r2
 8002bea:	4619      	mov	r1, r3
 8002bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bee:	2200      	movs	r2, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	61fa      	str	r2, [r7, #28]
 8002bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf8:	f7fd fb3a 	bl	8000270 <__aeabi_uldivmod>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4613      	mov	r3, r2
 8002c02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c04:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c1e:	e002      	b.n	8002c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3750      	adds	r7, #80	; 0x50
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	00f42400 	.word	0x00f42400
 8002c3c:	007a1200 	.word	0x007a1200

08002c40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e041      	b.n	8002cd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe f81a 	bl	8000ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4610      	mov	r0, r2
 8002c80:	f000 f95e 	bl	8002f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d001      	beq.n	8002cf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e046      	b.n	8002d86 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a23      	ldr	r2, [pc, #140]	; (8002d94 <HAL_TIM_Base_Start+0xb4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d022      	beq.n	8002d50 <HAL_TIM_Base_Start+0x70>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d12:	d01d      	beq.n	8002d50 <HAL_TIM_Base_Start+0x70>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <HAL_TIM_Base_Start+0xb8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d018      	beq.n	8002d50 <HAL_TIM_Base_Start+0x70>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a1e      	ldr	r2, [pc, #120]	; (8002d9c <HAL_TIM_Base_Start+0xbc>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d013      	beq.n	8002d50 <HAL_TIM_Base_Start+0x70>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_TIM_Base_Start+0xc0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00e      	beq.n	8002d50 <HAL_TIM_Base_Start+0x70>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <HAL_TIM_Base_Start+0xc4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_TIM_Base_Start+0x70>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_TIM_Base_Start+0xc8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d004      	beq.n	8002d50 <HAL_TIM_Base_Start+0x70>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_TIM_Base_Start+0xcc>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d111      	bne.n	8002d74 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d010      	beq.n	8002d84 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d72:	e007      	b.n	8002d84 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40010000 	.word	0x40010000
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40000800 	.word	0x40000800
 8002da0:	40000c00 	.word	0x40000c00
 8002da4:	40010400 	.word	0x40010400
 8002da8:	40014000 	.word	0x40014000
 8002dac:	40001800 	.word	0x40001800

08002db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_TIM_ConfigClockSource+0x1c>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e0b4      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x186>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002df2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e04:	d03e      	beq.n	8002e84 <HAL_TIM_ConfigClockSource+0xd4>
 8002e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0a:	f200 8087 	bhi.w	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e12:	f000 8086 	beq.w	8002f22 <HAL_TIM_ConfigClockSource+0x172>
 8002e16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1a:	d87f      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e1c:	2b70      	cmp	r3, #112	; 0x70
 8002e1e:	d01a      	beq.n	8002e56 <HAL_TIM_ConfigClockSource+0xa6>
 8002e20:	2b70      	cmp	r3, #112	; 0x70
 8002e22:	d87b      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e24:	2b60      	cmp	r3, #96	; 0x60
 8002e26:	d050      	beq.n	8002eca <HAL_TIM_ConfigClockSource+0x11a>
 8002e28:	2b60      	cmp	r3, #96	; 0x60
 8002e2a:	d877      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e2c:	2b50      	cmp	r3, #80	; 0x50
 8002e2e:	d03c      	beq.n	8002eaa <HAL_TIM_ConfigClockSource+0xfa>
 8002e30:	2b50      	cmp	r3, #80	; 0x50
 8002e32:	d873      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	d058      	beq.n	8002eea <HAL_TIM_ConfigClockSource+0x13a>
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d86f      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e3c:	2b30      	cmp	r3, #48	; 0x30
 8002e3e:	d064      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x15a>
 8002e40:	2b30      	cmp	r3, #48	; 0x30
 8002e42:	d86b      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d060      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x15a>
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d867      	bhi.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d05c      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x15a>
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d05a      	beq.n	8002f0a <HAL_TIM_ConfigClockSource+0x15a>
 8002e54:	e062      	b.n	8002f1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6899      	ldr	r1, [r3, #8]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f000 f985 	bl	8003174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	609a      	str	r2, [r3, #8]
      break;
 8002e82:	e04f      	b.n	8002f24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	6899      	ldr	r1, [r3, #8]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	f000 f96e 	bl	8003174 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ea6:	609a      	str	r2, [r3, #8]
      break;
 8002ea8:	e03c      	b.n	8002f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f000 f8e2 	bl	8003080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2150      	movs	r1, #80	; 0x50
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f93b 	bl	800313e <TIM_ITRx_SetConfig>
      break;
 8002ec8:	e02c      	b.n	8002f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6859      	ldr	r1, [r3, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f000 f901 	bl	80030de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2160      	movs	r1, #96	; 0x60
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f92b 	bl	800313e <TIM_ITRx_SetConfig>
      break;
 8002ee8:	e01c      	b.n	8002f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f000 f8c2 	bl	8003080 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2140      	movs	r1, #64	; 0x40
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f91b 	bl	800313e <TIM_ITRx_SetConfig>
      break;
 8002f08:	e00c      	b.n	8002f24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4619      	mov	r1, r3
 8002f14:	4610      	mov	r0, r2
 8002f16:	f000 f912 	bl	800313e <TIM_ITRx_SetConfig>
      break;
 8002f1a:	e003      	b.n	8002f24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f20:	e000      	b.n	8002f24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a40      	ldr	r2, [pc, #256]	; (8003054 <TIM_Base_SetConfig+0x114>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <TIM_Base_SetConfig+0x40>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5e:	d00f      	beq.n	8002f80 <TIM_Base_SetConfig+0x40>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3d      	ldr	r2, [pc, #244]	; (8003058 <TIM_Base_SetConfig+0x118>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00b      	beq.n	8002f80 <TIM_Base_SetConfig+0x40>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a3c      	ldr	r2, [pc, #240]	; (800305c <TIM_Base_SetConfig+0x11c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d007      	beq.n	8002f80 <TIM_Base_SetConfig+0x40>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <TIM_Base_SetConfig+0x120>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d003      	beq.n	8002f80 <TIM_Base_SetConfig+0x40>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a3a      	ldr	r2, [pc, #232]	; (8003064 <TIM_Base_SetConfig+0x124>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d108      	bne.n	8002f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a2f      	ldr	r2, [pc, #188]	; (8003054 <TIM_Base_SetConfig+0x114>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d02b      	beq.n	8002ff2 <TIM_Base_SetConfig+0xb2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa0:	d027      	beq.n	8002ff2 <TIM_Base_SetConfig+0xb2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a2c      	ldr	r2, [pc, #176]	; (8003058 <TIM_Base_SetConfig+0x118>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d023      	beq.n	8002ff2 <TIM_Base_SetConfig+0xb2>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a2b      	ldr	r2, [pc, #172]	; (800305c <TIM_Base_SetConfig+0x11c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01f      	beq.n	8002ff2 <TIM_Base_SetConfig+0xb2>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a2a      	ldr	r2, [pc, #168]	; (8003060 <TIM_Base_SetConfig+0x120>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01b      	beq.n	8002ff2 <TIM_Base_SetConfig+0xb2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a29      	ldr	r2, [pc, #164]	; (8003064 <TIM_Base_SetConfig+0x124>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d017      	beq.n	8002ff2 <TIM_Base_SetConfig+0xb2>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a28      	ldr	r2, [pc, #160]	; (8003068 <TIM_Base_SetConfig+0x128>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <TIM_Base_SetConfig+0xb2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a27      	ldr	r2, [pc, #156]	; (800306c <TIM_Base_SetConfig+0x12c>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00f      	beq.n	8002ff2 <TIM_Base_SetConfig+0xb2>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a26      	ldr	r2, [pc, #152]	; (8003070 <TIM_Base_SetConfig+0x130>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00b      	beq.n	8002ff2 <TIM_Base_SetConfig+0xb2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a25      	ldr	r2, [pc, #148]	; (8003074 <TIM_Base_SetConfig+0x134>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d007      	beq.n	8002ff2 <TIM_Base_SetConfig+0xb2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a24      	ldr	r2, [pc, #144]	; (8003078 <TIM_Base_SetConfig+0x138>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d003      	beq.n	8002ff2 <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a23      	ldr	r2, [pc, #140]	; (800307c <TIM_Base_SetConfig+0x13c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d108      	bne.n	8003004 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a0a      	ldr	r2, [pc, #40]	; (8003054 <TIM_Base_SetConfig+0x114>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <TIM_Base_SetConfig+0xf8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a0c      	ldr	r2, [pc, #48]	; (8003064 <TIM_Base_SetConfig+0x124>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d103      	bne.n	8003040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	691a      	ldr	r2, [r3, #16]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	615a      	str	r2, [r3, #20]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40010000 	.word	0x40010000
 8003058:	40000400 	.word	0x40000400
 800305c:	40000800 	.word	0x40000800
 8003060:	40000c00 	.word	0x40000c00
 8003064:	40010400 	.word	0x40010400
 8003068:	40014000 	.word	0x40014000
 800306c:	40014400 	.word	0x40014400
 8003070:	40014800 	.word	0x40014800
 8003074:	40001800 	.word	0x40001800
 8003078:	40001c00 	.word	0x40001c00
 800307c:	40002000 	.word	0x40002000

08003080 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	f023 0201 	bic.w	r2, r3, #1
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f023 030a 	bic.w	r3, r3, #10
 80030bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030de:	b480      	push	{r7}
 80030e0:	b087      	sub	sp, #28
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	f023 0210 	bic.w	r2, r3, #16
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	031b      	lsls	r3, r3, #12
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4313      	orrs	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800311a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	621a      	str	r2, [r3, #32]
}
 8003132:	bf00      	nop
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800313e:	b480      	push	{r7}
 8003140:	b085      	sub	sp, #20
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003154:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	f043 0307 	orr.w	r3, r3, #7
 8003160:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	609a      	str	r2, [r3, #8]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800318e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	021a      	lsls	r2, r3, #8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	431a      	orrs	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4313      	orrs	r3, r2
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	609a      	str	r2, [r3, #8]
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e05a      	b.n	8003282 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a21      	ldr	r2, [pc, #132]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d022      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003218:	d01d      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d018      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1a      	ldr	r2, [pc, #104]	; (800329c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00e      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a18      	ldr	r2, [pc, #96]	; (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d009      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a17      	ldr	r2, [pc, #92]	; (80032a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d10c      	bne.n	8003270 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800325c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	4313      	orrs	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40010000 	.word	0x40010000
 8003294:	40000400 	.word	0x40000400
 8003298:	40000800 	.word	0x40000800
 800329c:	40000c00 	.word	0x40000c00
 80032a0:	40010400 	.word	0x40010400
 80032a4:	40014000 	.word	0x40014000
 80032a8:	40001800 	.word	0x40001800

080032ac <__errno>:
 80032ac:	4b01      	ldr	r3, [pc, #4]	; (80032b4 <__errno+0x8>)
 80032ae:	6818      	ldr	r0, [r3, #0]
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	2000000c 	.word	0x2000000c

080032b8 <__libc_init_array>:
 80032b8:	b570      	push	{r4, r5, r6, lr}
 80032ba:	4d0d      	ldr	r5, [pc, #52]	; (80032f0 <__libc_init_array+0x38>)
 80032bc:	4c0d      	ldr	r4, [pc, #52]	; (80032f4 <__libc_init_array+0x3c>)
 80032be:	1b64      	subs	r4, r4, r5
 80032c0:	10a4      	asrs	r4, r4, #2
 80032c2:	2600      	movs	r6, #0
 80032c4:	42a6      	cmp	r6, r4
 80032c6:	d109      	bne.n	80032dc <__libc_init_array+0x24>
 80032c8:	4d0b      	ldr	r5, [pc, #44]	; (80032f8 <__libc_init_array+0x40>)
 80032ca:	4c0c      	ldr	r4, [pc, #48]	; (80032fc <__libc_init_array+0x44>)
 80032cc:	f000 ffae 	bl	800422c <_init>
 80032d0:	1b64      	subs	r4, r4, r5
 80032d2:	10a4      	asrs	r4, r4, #2
 80032d4:	2600      	movs	r6, #0
 80032d6:	42a6      	cmp	r6, r4
 80032d8:	d105      	bne.n	80032e6 <__libc_init_array+0x2e>
 80032da:	bd70      	pop	{r4, r5, r6, pc}
 80032dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e0:	4798      	blx	r3
 80032e2:	3601      	adds	r6, #1
 80032e4:	e7ee      	b.n	80032c4 <__libc_init_array+0xc>
 80032e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ea:	4798      	blx	r3
 80032ec:	3601      	adds	r6, #1
 80032ee:	e7f2      	b.n	80032d6 <__libc_init_array+0x1e>
 80032f0:	0800432c 	.word	0x0800432c
 80032f4:	0800432c 	.word	0x0800432c
 80032f8:	0800432c 	.word	0x0800432c
 80032fc:	08004330 	.word	0x08004330

08003300 <memset>:
 8003300:	4402      	add	r2, r0
 8003302:	4603      	mov	r3, r0
 8003304:	4293      	cmp	r3, r2
 8003306:	d100      	bne.n	800330a <memset+0xa>
 8003308:	4770      	bx	lr
 800330a:	f803 1b01 	strb.w	r1, [r3], #1
 800330e:	e7f9      	b.n	8003304 <memset+0x4>

08003310 <iprintf>:
 8003310:	b40f      	push	{r0, r1, r2, r3}
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <iprintf+0x2c>)
 8003314:	b513      	push	{r0, r1, r4, lr}
 8003316:	681c      	ldr	r4, [r3, #0]
 8003318:	b124      	cbz	r4, 8003324 <iprintf+0x14>
 800331a:	69a3      	ldr	r3, [r4, #24]
 800331c:	b913      	cbnz	r3, 8003324 <iprintf+0x14>
 800331e:	4620      	mov	r0, r4
 8003320:	f000 f866 	bl	80033f0 <__sinit>
 8003324:	ab05      	add	r3, sp, #20
 8003326:	9a04      	ldr	r2, [sp, #16]
 8003328:	68a1      	ldr	r1, [r4, #8]
 800332a:	9301      	str	r3, [sp, #4]
 800332c:	4620      	mov	r0, r4
 800332e:	f000 f9bd 	bl	80036ac <_vfiprintf_r>
 8003332:	b002      	add	sp, #8
 8003334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003338:	b004      	add	sp, #16
 800333a:	4770      	bx	lr
 800333c:	2000000c 	.word	0x2000000c

08003340 <std>:
 8003340:	2300      	movs	r3, #0
 8003342:	b510      	push	{r4, lr}
 8003344:	4604      	mov	r4, r0
 8003346:	e9c0 3300 	strd	r3, r3, [r0]
 800334a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800334e:	6083      	str	r3, [r0, #8]
 8003350:	8181      	strh	r1, [r0, #12]
 8003352:	6643      	str	r3, [r0, #100]	; 0x64
 8003354:	81c2      	strh	r2, [r0, #14]
 8003356:	6183      	str	r3, [r0, #24]
 8003358:	4619      	mov	r1, r3
 800335a:	2208      	movs	r2, #8
 800335c:	305c      	adds	r0, #92	; 0x5c
 800335e:	f7ff ffcf 	bl	8003300 <memset>
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <std+0x38>)
 8003364:	6263      	str	r3, [r4, #36]	; 0x24
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <std+0x3c>)
 8003368:	62a3      	str	r3, [r4, #40]	; 0x28
 800336a:	4b05      	ldr	r3, [pc, #20]	; (8003380 <std+0x40>)
 800336c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <std+0x44>)
 8003370:	6224      	str	r4, [r4, #32]
 8003372:	6323      	str	r3, [r4, #48]	; 0x30
 8003374:	bd10      	pop	{r4, pc}
 8003376:	bf00      	nop
 8003378:	08003c55 	.word	0x08003c55
 800337c:	08003c77 	.word	0x08003c77
 8003380:	08003caf 	.word	0x08003caf
 8003384:	08003cd3 	.word	0x08003cd3

08003388 <_cleanup_r>:
 8003388:	4901      	ldr	r1, [pc, #4]	; (8003390 <_cleanup_r+0x8>)
 800338a:	f000 b8af 	b.w	80034ec <_fwalk_reent>
 800338e:	bf00      	nop
 8003390:	08003fad 	.word	0x08003fad

08003394 <__sfmoreglue>:
 8003394:	b570      	push	{r4, r5, r6, lr}
 8003396:	2268      	movs	r2, #104	; 0x68
 8003398:	1e4d      	subs	r5, r1, #1
 800339a:	4355      	muls	r5, r2
 800339c:	460e      	mov	r6, r1
 800339e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80033a2:	f000 f8e5 	bl	8003570 <_malloc_r>
 80033a6:	4604      	mov	r4, r0
 80033a8:	b140      	cbz	r0, 80033bc <__sfmoreglue+0x28>
 80033aa:	2100      	movs	r1, #0
 80033ac:	e9c0 1600 	strd	r1, r6, [r0]
 80033b0:	300c      	adds	r0, #12
 80033b2:	60a0      	str	r0, [r4, #8]
 80033b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80033b8:	f7ff ffa2 	bl	8003300 <memset>
 80033bc:	4620      	mov	r0, r4
 80033be:	bd70      	pop	{r4, r5, r6, pc}

080033c0 <__sfp_lock_acquire>:
 80033c0:	4801      	ldr	r0, [pc, #4]	; (80033c8 <__sfp_lock_acquire+0x8>)
 80033c2:	f000 b8b3 	b.w	800352c <__retarget_lock_acquire_recursive>
 80033c6:	bf00      	nop
 80033c8:	20000191 	.word	0x20000191

080033cc <__sfp_lock_release>:
 80033cc:	4801      	ldr	r0, [pc, #4]	; (80033d4 <__sfp_lock_release+0x8>)
 80033ce:	f000 b8ae 	b.w	800352e <__retarget_lock_release_recursive>
 80033d2:	bf00      	nop
 80033d4:	20000191 	.word	0x20000191

080033d8 <__sinit_lock_acquire>:
 80033d8:	4801      	ldr	r0, [pc, #4]	; (80033e0 <__sinit_lock_acquire+0x8>)
 80033da:	f000 b8a7 	b.w	800352c <__retarget_lock_acquire_recursive>
 80033de:	bf00      	nop
 80033e0:	20000192 	.word	0x20000192

080033e4 <__sinit_lock_release>:
 80033e4:	4801      	ldr	r0, [pc, #4]	; (80033ec <__sinit_lock_release+0x8>)
 80033e6:	f000 b8a2 	b.w	800352e <__retarget_lock_release_recursive>
 80033ea:	bf00      	nop
 80033ec:	20000192 	.word	0x20000192

080033f0 <__sinit>:
 80033f0:	b510      	push	{r4, lr}
 80033f2:	4604      	mov	r4, r0
 80033f4:	f7ff fff0 	bl	80033d8 <__sinit_lock_acquire>
 80033f8:	69a3      	ldr	r3, [r4, #24]
 80033fa:	b11b      	cbz	r3, 8003404 <__sinit+0x14>
 80033fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003400:	f7ff bff0 	b.w	80033e4 <__sinit_lock_release>
 8003404:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003408:	6523      	str	r3, [r4, #80]	; 0x50
 800340a:	4b13      	ldr	r3, [pc, #76]	; (8003458 <__sinit+0x68>)
 800340c:	4a13      	ldr	r2, [pc, #76]	; (800345c <__sinit+0x6c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	62a2      	str	r2, [r4, #40]	; 0x28
 8003412:	42a3      	cmp	r3, r4
 8003414:	bf04      	itt	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	61a3      	streq	r3, [r4, #24]
 800341a:	4620      	mov	r0, r4
 800341c:	f000 f820 	bl	8003460 <__sfp>
 8003420:	6060      	str	r0, [r4, #4]
 8003422:	4620      	mov	r0, r4
 8003424:	f000 f81c 	bl	8003460 <__sfp>
 8003428:	60a0      	str	r0, [r4, #8]
 800342a:	4620      	mov	r0, r4
 800342c:	f000 f818 	bl	8003460 <__sfp>
 8003430:	2200      	movs	r2, #0
 8003432:	60e0      	str	r0, [r4, #12]
 8003434:	2104      	movs	r1, #4
 8003436:	6860      	ldr	r0, [r4, #4]
 8003438:	f7ff ff82 	bl	8003340 <std>
 800343c:	68a0      	ldr	r0, [r4, #8]
 800343e:	2201      	movs	r2, #1
 8003440:	2109      	movs	r1, #9
 8003442:	f7ff ff7d 	bl	8003340 <std>
 8003446:	68e0      	ldr	r0, [r4, #12]
 8003448:	2202      	movs	r2, #2
 800344a:	2112      	movs	r1, #18
 800344c:	f7ff ff78 	bl	8003340 <std>
 8003450:	2301      	movs	r3, #1
 8003452:	61a3      	str	r3, [r4, #24]
 8003454:	e7d2      	b.n	80033fc <__sinit+0xc>
 8003456:	bf00      	nop
 8003458:	0800428c 	.word	0x0800428c
 800345c:	08003389 	.word	0x08003389

08003460 <__sfp>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	4607      	mov	r7, r0
 8003464:	f7ff ffac 	bl	80033c0 <__sfp_lock_acquire>
 8003468:	4b1e      	ldr	r3, [pc, #120]	; (80034e4 <__sfp+0x84>)
 800346a:	681e      	ldr	r6, [r3, #0]
 800346c:	69b3      	ldr	r3, [r6, #24]
 800346e:	b913      	cbnz	r3, 8003476 <__sfp+0x16>
 8003470:	4630      	mov	r0, r6
 8003472:	f7ff ffbd 	bl	80033f0 <__sinit>
 8003476:	3648      	adds	r6, #72	; 0x48
 8003478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800347c:	3b01      	subs	r3, #1
 800347e:	d503      	bpl.n	8003488 <__sfp+0x28>
 8003480:	6833      	ldr	r3, [r6, #0]
 8003482:	b30b      	cbz	r3, 80034c8 <__sfp+0x68>
 8003484:	6836      	ldr	r6, [r6, #0]
 8003486:	e7f7      	b.n	8003478 <__sfp+0x18>
 8003488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800348c:	b9d5      	cbnz	r5, 80034c4 <__sfp+0x64>
 800348e:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <__sfp+0x88>)
 8003490:	60e3      	str	r3, [r4, #12]
 8003492:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003496:	6665      	str	r5, [r4, #100]	; 0x64
 8003498:	f000 f847 	bl	800352a <__retarget_lock_init_recursive>
 800349c:	f7ff ff96 	bl	80033cc <__sfp_lock_release>
 80034a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80034a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80034a8:	6025      	str	r5, [r4, #0]
 80034aa:	61a5      	str	r5, [r4, #24]
 80034ac:	2208      	movs	r2, #8
 80034ae:	4629      	mov	r1, r5
 80034b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80034b4:	f7ff ff24 	bl	8003300 <memset>
 80034b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80034bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80034c0:	4620      	mov	r0, r4
 80034c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034c4:	3468      	adds	r4, #104	; 0x68
 80034c6:	e7d9      	b.n	800347c <__sfp+0x1c>
 80034c8:	2104      	movs	r1, #4
 80034ca:	4638      	mov	r0, r7
 80034cc:	f7ff ff62 	bl	8003394 <__sfmoreglue>
 80034d0:	4604      	mov	r4, r0
 80034d2:	6030      	str	r0, [r6, #0]
 80034d4:	2800      	cmp	r0, #0
 80034d6:	d1d5      	bne.n	8003484 <__sfp+0x24>
 80034d8:	f7ff ff78 	bl	80033cc <__sfp_lock_release>
 80034dc:	230c      	movs	r3, #12
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	e7ee      	b.n	80034c0 <__sfp+0x60>
 80034e2:	bf00      	nop
 80034e4:	0800428c 	.word	0x0800428c
 80034e8:	ffff0001 	.word	0xffff0001

080034ec <_fwalk_reent>:
 80034ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034f0:	4606      	mov	r6, r0
 80034f2:	4688      	mov	r8, r1
 80034f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034f8:	2700      	movs	r7, #0
 80034fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034fe:	f1b9 0901 	subs.w	r9, r9, #1
 8003502:	d505      	bpl.n	8003510 <_fwalk_reent+0x24>
 8003504:	6824      	ldr	r4, [r4, #0]
 8003506:	2c00      	cmp	r4, #0
 8003508:	d1f7      	bne.n	80034fa <_fwalk_reent+0xe>
 800350a:	4638      	mov	r0, r7
 800350c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003510:	89ab      	ldrh	r3, [r5, #12]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d907      	bls.n	8003526 <_fwalk_reent+0x3a>
 8003516:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800351a:	3301      	adds	r3, #1
 800351c:	d003      	beq.n	8003526 <_fwalk_reent+0x3a>
 800351e:	4629      	mov	r1, r5
 8003520:	4630      	mov	r0, r6
 8003522:	47c0      	blx	r8
 8003524:	4307      	orrs	r7, r0
 8003526:	3568      	adds	r5, #104	; 0x68
 8003528:	e7e9      	b.n	80034fe <_fwalk_reent+0x12>

0800352a <__retarget_lock_init_recursive>:
 800352a:	4770      	bx	lr

0800352c <__retarget_lock_acquire_recursive>:
 800352c:	4770      	bx	lr

0800352e <__retarget_lock_release_recursive>:
 800352e:	4770      	bx	lr

08003530 <sbrk_aligned>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	4e0e      	ldr	r6, [pc, #56]	; (800356c <sbrk_aligned+0x3c>)
 8003534:	460c      	mov	r4, r1
 8003536:	6831      	ldr	r1, [r6, #0]
 8003538:	4605      	mov	r5, r0
 800353a:	b911      	cbnz	r1, 8003542 <sbrk_aligned+0x12>
 800353c:	f000 fb7a 	bl	8003c34 <_sbrk_r>
 8003540:	6030      	str	r0, [r6, #0]
 8003542:	4621      	mov	r1, r4
 8003544:	4628      	mov	r0, r5
 8003546:	f000 fb75 	bl	8003c34 <_sbrk_r>
 800354a:	1c43      	adds	r3, r0, #1
 800354c:	d00a      	beq.n	8003564 <sbrk_aligned+0x34>
 800354e:	1cc4      	adds	r4, r0, #3
 8003550:	f024 0403 	bic.w	r4, r4, #3
 8003554:	42a0      	cmp	r0, r4
 8003556:	d007      	beq.n	8003568 <sbrk_aligned+0x38>
 8003558:	1a21      	subs	r1, r4, r0
 800355a:	4628      	mov	r0, r5
 800355c:	f000 fb6a 	bl	8003c34 <_sbrk_r>
 8003560:	3001      	adds	r0, #1
 8003562:	d101      	bne.n	8003568 <sbrk_aligned+0x38>
 8003564:	f04f 34ff 	mov.w	r4, #4294967295
 8003568:	4620      	mov	r0, r4
 800356a:	bd70      	pop	{r4, r5, r6, pc}
 800356c:	20000198 	.word	0x20000198

08003570 <_malloc_r>:
 8003570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003574:	1ccd      	adds	r5, r1, #3
 8003576:	f025 0503 	bic.w	r5, r5, #3
 800357a:	3508      	adds	r5, #8
 800357c:	2d0c      	cmp	r5, #12
 800357e:	bf38      	it	cc
 8003580:	250c      	movcc	r5, #12
 8003582:	2d00      	cmp	r5, #0
 8003584:	4607      	mov	r7, r0
 8003586:	db01      	blt.n	800358c <_malloc_r+0x1c>
 8003588:	42a9      	cmp	r1, r5
 800358a:	d905      	bls.n	8003598 <_malloc_r+0x28>
 800358c:	230c      	movs	r3, #12
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	2600      	movs	r6, #0
 8003592:	4630      	mov	r0, r6
 8003594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003598:	4e2e      	ldr	r6, [pc, #184]	; (8003654 <_malloc_r+0xe4>)
 800359a:	f000 fdbb 	bl	8004114 <__malloc_lock>
 800359e:	6833      	ldr	r3, [r6, #0]
 80035a0:	461c      	mov	r4, r3
 80035a2:	bb34      	cbnz	r4, 80035f2 <_malloc_r+0x82>
 80035a4:	4629      	mov	r1, r5
 80035a6:	4638      	mov	r0, r7
 80035a8:	f7ff ffc2 	bl	8003530 <sbrk_aligned>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	4604      	mov	r4, r0
 80035b0:	d14d      	bne.n	800364e <_malloc_r+0xde>
 80035b2:	6834      	ldr	r4, [r6, #0]
 80035b4:	4626      	mov	r6, r4
 80035b6:	2e00      	cmp	r6, #0
 80035b8:	d140      	bne.n	800363c <_malloc_r+0xcc>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	4631      	mov	r1, r6
 80035be:	4638      	mov	r0, r7
 80035c0:	eb04 0803 	add.w	r8, r4, r3
 80035c4:	f000 fb36 	bl	8003c34 <_sbrk_r>
 80035c8:	4580      	cmp	r8, r0
 80035ca:	d13a      	bne.n	8003642 <_malloc_r+0xd2>
 80035cc:	6821      	ldr	r1, [r4, #0]
 80035ce:	3503      	adds	r5, #3
 80035d0:	1a6d      	subs	r5, r5, r1
 80035d2:	f025 0503 	bic.w	r5, r5, #3
 80035d6:	3508      	adds	r5, #8
 80035d8:	2d0c      	cmp	r5, #12
 80035da:	bf38      	it	cc
 80035dc:	250c      	movcc	r5, #12
 80035de:	4629      	mov	r1, r5
 80035e0:	4638      	mov	r0, r7
 80035e2:	f7ff ffa5 	bl	8003530 <sbrk_aligned>
 80035e6:	3001      	adds	r0, #1
 80035e8:	d02b      	beq.n	8003642 <_malloc_r+0xd2>
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	442b      	add	r3, r5
 80035ee:	6023      	str	r3, [r4, #0]
 80035f0:	e00e      	b.n	8003610 <_malloc_r+0xa0>
 80035f2:	6822      	ldr	r2, [r4, #0]
 80035f4:	1b52      	subs	r2, r2, r5
 80035f6:	d41e      	bmi.n	8003636 <_malloc_r+0xc6>
 80035f8:	2a0b      	cmp	r2, #11
 80035fa:	d916      	bls.n	800362a <_malloc_r+0xba>
 80035fc:	1961      	adds	r1, r4, r5
 80035fe:	42a3      	cmp	r3, r4
 8003600:	6025      	str	r5, [r4, #0]
 8003602:	bf18      	it	ne
 8003604:	6059      	strne	r1, [r3, #4]
 8003606:	6863      	ldr	r3, [r4, #4]
 8003608:	bf08      	it	eq
 800360a:	6031      	streq	r1, [r6, #0]
 800360c:	5162      	str	r2, [r4, r5]
 800360e:	604b      	str	r3, [r1, #4]
 8003610:	4638      	mov	r0, r7
 8003612:	f104 060b 	add.w	r6, r4, #11
 8003616:	f000 fd83 	bl	8004120 <__malloc_unlock>
 800361a:	f026 0607 	bic.w	r6, r6, #7
 800361e:	1d23      	adds	r3, r4, #4
 8003620:	1af2      	subs	r2, r6, r3
 8003622:	d0b6      	beq.n	8003592 <_malloc_r+0x22>
 8003624:	1b9b      	subs	r3, r3, r6
 8003626:	50a3      	str	r3, [r4, r2]
 8003628:	e7b3      	b.n	8003592 <_malloc_r+0x22>
 800362a:	6862      	ldr	r2, [r4, #4]
 800362c:	42a3      	cmp	r3, r4
 800362e:	bf0c      	ite	eq
 8003630:	6032      	streq	r2, [r6, #0]
 8003632:	605a      	strne	r2, [r3, #4]
 8003634:	e7ec      	b.n	8003610 <_malloc_r+0xa0>
 8003636:	4623      	mov	r3, r4
 8003638:	6864      	ldr	r4, [r4, #4]
 800363a:	e7b2      	b.n	80035a2 <_malloc_r+0x32>
 800363c:	4634      	mov	r4, r6
 800363e:	6876      	ldr	r6, [r6, #4]
 8003640:	e7b9      	b.n	80035b6 <_malloc_r+0x46>
 8003642:	230c      	movs	r3, #12
 8003644:	603b      	str	r3, [r7, #0]
 8003646:	4638      	mov	r0, r7
 8003648:	f000 fd6a 	bl	8004120 <__malloc_unlock>
 800364c:	e7a1      	b.n	8003592 <_malloc_r+0x22>
 800364e:	6025      	str	r5, [r4, #0]
 8003650:	e7de      	b.n	8003610 <_malloc_r+0xa0>
 8003652:	bf00      	nop
 8003654:	20000194 	.word	0x20000194

08003658 <__sfputc_r>:
 8003658:	6893      	ldr	r3, [r2, #8]
 800365a:	3b01      	subs	r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	b410      	push	{r4}
 8003660:	6093      	str	r3, [r2, #8]
 8003662:	da08      	bge.n	8003676 <__sfputc_r+0x1e>
 8003664:	6994      	ldr	r4, [r2, #24]
 8003666:	42a3      	cmp	r3, r4
 8003668:	db01      	blt.n	800366e <__sfputc_r+0x16>
 800366a:	290a      	cmp	r1, #10
 800366c:	d103      	bne.n	8003676 <__sfputc_r+0x1e>
 800366e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003672:	f000 bb33 	b.w	8003cdc <__swbuf_r>
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	1c58      	adds	r0, r3, #1
 800367a:	6010      	str	r0, [r2, #0]
 800367c:	7019      	strb	r1, [r3, #0]
 800367e:	4608      	mov	r0, r1
 8003680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003684:	4770      	bx	lr

08003686 <__sfputs_r>:
 8003686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003688:	4606      	mov	r6, r0
 800368a:	460f      	mov	r7, r1
 800368c:	4614      	mov	r4, r2
 800368e:	18d5      	adds	r5, r2, r3
 8003690:	42ac      	cmp	r4, r5
 8003692:	d101      	bne.n	8003698 <__sfputs_r+0x12>
 8003694:	2000      	movs	r0, #0
 8003696:	e007      	b.n	80036a8 <__sfputs_r+0x22>
 8003698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800369c:	463a      	mov	r2, r7
 800369e:	4630      	mov	r0, r6
 80036a0:	f7ff ffda 	bl	8003658 <__sfputc_r>
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	d1f3      	bne.n	8003690 <__sfputs_r+0xa>
 80036a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036ac <_vfiprintf_r>:
 80036ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036b0:	460d      	mov	r5, r1
 80036b2:	b09d      	sub	sp, #116	; 0x74
 80036b4:	4614      	mov	r4, r2
 80036b6:	4698      	mov	r8, r3
 80036b8:	4606      	mov	r6, r0
 80036ba:	b118      	cbz	r0, 80036c4 <_vfiprintf_r+0x18>
 80036bc:	6983      	ldr	r3, [r0, #24]
 80036be:	b90b      	cbnz	r3, 80036c4 <_vfiprintf_r+0x18>
 80036c0:	f7ff fe96 	bl	80033f0 <__sinit>
 80036c4:	4b89      	ldr	r3, [pc, #548]	; (80038ec <_vfiprintf_r+0x240>)
 80036c6:	429d      	cmp	r5, r3
 80036c8:	d11b      	bne.n	8003702 <_vfiprintf_r+0x56>
 80036ca:	6875      	ldr	r5, [r6, #4]
 80036cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036ce:	07d9      	lsls	r1, r3, #31
 80036d0:	d405      	bmi.n	80036de <_vfiprintf_r+0x32>
 80036d2:	89ab      	ldrh	r3, [r5, #12]
 80036d4:	059a      	lsls	r2, r3, #22
 80036d6:	d402      	bmi.n	80036de <_vfiprintf_r+0x32>
 80036d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036da:	f7ff ff27 	bl	800352c <__retarget_lock_acquire_recursive>
 80036de:	89ab      	ldrh	r3, [r5, #12]
 80036e0:	071b      	lsls	r3, r3, #28
 80036e2:	d501      	bpl.n	80036e8 <_vfiprintf_r+0x3c>
 80036e4:	692b      	ldr	r3, [r5, #16]
 80036e6:	b9eb      	cbnz	r3, 8003724 <_vfiprintf_r+0x78>
 80036e8:	4629      	mov	r1, r5
 80036ea:	4630      	mov	r0, r6
 80036ec:	f000 fb5a 	bl	8003da4 <__swsetup_r>
 80036f0:	b1c0      	cbz	r0, 8003724 <_vfiprintf_r+0x78>
 80036f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036f4:	07dc      	lsls	r4, r3, #31
 80036f6:	d50e      	bpl.n	8003716 <_vfiprintf_r+0x6a>
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	b01d      	add	sp, #116	; 0x74
 80036fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003702:	4b7b      	ldr	r3, [pc, #492]	; (80038f0 <_vfiprintf_r+0x244>)
 8003704:	429d      	cmp	r5, r3
 8003706:	d101      	bne.n	800370c <_vfiprintf_r+0x60>
 8003708:	68b5      	ldr	r5, [r6, #8]
 800370a:	e7df      	b.n	80036cc <_vfiprintf_r+0x20>
 800370c:	4b79      	ldr	r3, [pc, #484]	; (80038f4 <_vfiprintf_r+0x248>)
 800370e:	429d      	cmp	r5, r3
 8003710:	bf08      	it	eq
 8003712:	68f5      	ldreq	r5, [r6, #12]
 8003714:	e7da      	b.n	80036cc <_vfiprintf_r+0x20>
 8003716:	89ab      	ldrh	r3, [r5, #12]
 8003718:	0598      	lsls	r0, r3, #22
 800371a:	d4ed      	bmi.n	80036f8 <_vfiprintf_r+0x4c>
 800371c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800371e:	f7ff ff06 	bl	800352e <__retarget_lock_release_recursive>
 8003722:	e7e9      	b.n	80036f8 <_vfiprintf_r+0x4c>
 8003724:	2300      	movs	r3, #0
 8003726:	9309      	str	r3, [sp, #36]	; 0x24
 8003728:	2320      	movs	r3, #32
 800372a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800372e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003732:	2330      	movs	r3, #48	; 0x30
 8003734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80038f8 <_vfiprintf_r+0x24c>
 8003738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800373c:	f04f 0901 	mov.w	r9, #1
 8003740:	4623      	mov	r3, r4
 8003742:	469a      	mov	sl, r3
 8003744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003748:	b10a      	cbz	r2, 800374e <_vfiprintf_r+0xa2>
 800374a:	2a25      	cmp	r2, #37	; 0x25
 800374c:	d1f9      	bne.n	8003742 <_vfiprintf_r+0x96>
 800374e:	ebba 0b04 	subs.w	fp, sl, r4
 8003752:	d00b      	beq.n	800376c <_vfiprintf_r+0xc0>
 8003754:	465b      	mov	r3, fp
 8003756:	4622      	mov	r2, r4
 8003758:	4629      	mov	r1, r5
 800375a:	4630      	mov	r0, r6
 800375c:	f7ff ff93 	bl	8003686 <__sfputs_r>
 8003760:	3001      	adds	r0, #1
 8003762:	f000 80aa 	beq.w	80038ba <_vfiprintf_r+0x20e>
 8003766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003768:	445a      	add	r2, fp
 800376a:	9209      	str	r2, [sp, #36]	; 0x24
 800376c:	f89a 3000 	ldrb.w	r3, [sl]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 80a2 	beq.w	80038ba <_vfiprintf_r+0x20e>
 8003776:	2300      	movs	r3, #0
 8003778:	f04f 32ff 	mov.w	r2, #4294967295
 800377c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003780:	f10a 0a01 	add.w	sl, sl, #1
 8003784:	9304      	str	r3, [sp, #16]
 8003786:	9307      	str	r3, [sp, #28]
 8003788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800378c:	931a      	str	r3, [sp, #104]	; 0x68
 800378e:	4654      	mov	r4, sl
 8003790:	2205      	movs	r2, #5
 8003792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003796:	4858      	ldr	r0, [pc, #352]	; (80038f8 <_vfiprintf_r+0x24c>)
 8003798:	f7fc fd1a 	bl	80001d0 <memchr>
 800379c:	9a04      	ldr	r2, [sp, #16]
 800379e:	b9d8      	cbnz	r0, 80037d8 <_vfiprintf_r+0x12c>
 80037a0:	06d1      	lsls	r1, r2, #27
 80037a2:	bf44      	itt	mi
 80037a4:	2320      	movmi	r3, #32
 80037a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037aa:	0713      	lsls	r3, r2, #28
 80037ac:	bf44      	itt	mi
 80037ae:	232b      	movmi	r3, #43	; 0x2b
 80037b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037b4:	f89a 3000 	ldrb.w	r3, [sl]
 80037b8:	2b2a      	cmp	r3, #42	; 0x2a
 80037ba:	d015      	beq.n	80037e8 <_vfiprintf_r+0x13c>
 80037bc:	9a07      	ldr	r2, [sp, #28]
 80037be:	4654      	mov	r4, sl
 80037c0:	2000      	movs	r0, #0
 80037c2:	f04f 0c0a 	mov.w	ip, #10
 80037c6:	4621      	mov	r1, r4
 80037c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037cc:	3b30      	subs	r3, #48	; 0x30
 80037ce:	2b09      	cmp	r3, #9
 80037d0:	d94e      	bls.n	8003870 <_vfiprintf_r+0x1c4>
 80037d2:	b1b0      	cbz	r0, 8003802 <_vfiprintf_r+0x156>
 80037d4:	9207      	str	r2, [sp, #28]
 80037d6:	e014      	b.n	8003802 <_vfiprintf_r+0x156>
 80037d8:	eba0 0308 	sub.w	r3, r0, r8
 80037dc:	fa09 f303 	lsl.w	r3, r9, r3
 80037e0:	4313      	orrs	r3, r2
 80037e2:	9304      	str	r3, [sp, #16]
 80037e4:	46a2      	mov	sl, r4
 80037e6:	e7d2      	b.n	800378e <_vfiprintf_r+0xe2>
 80037e8:	9b03      	ldr	r3, [sp, #12]
 80037ea:	1d19      	adds	r1, r3, #4
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	9103      	str	r1, [sp, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bfbb      	ittet	lt
 80037f4:	425b      	neglt	r3, r3
 80037f6:	f042 0202 	orrlt.w	r2, r2, #2
 80037fa:	9307      	strge	r3, [sp, #28]
 80037fc:	9307      	strlt	r3, [sp, #28]
 80037fe:	bfb8      	it	lt
 8003800:	9204      	strlt	r2, [sp, #16]
 8003802:	7823      	ldrb	r3, [r4, #0]
 8003804:	2b2e      	cmp	r3, #46	; 0x2e
 8003806:	d10c      	bne.n	8003822 <_vfiprintf_r+0x176>
 8003808:	7863      	ldrb	r3, [r4, #1]
 800380a:	2b2a      	cmp	r3, #42	; 0x2a
 800380c:	d135      	bne.n	800387a <_vfiprintf_r+0x1ce>
 800380e:	9b03      	ldr	r3, [sp, #12]
 8003810:	1d1a      	adds	r2, r3, #4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	9203      	str	r2, [sp, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	bfb8      	it	lt
 800381a:	f04f 33ff 	movlt.w	r3, #4294967295
 800381e:	3402      	adds	r4, #2
 8003820:	9305      	str	r3, [sp, #20]
 8003822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003908 <_vfiprintf_r+0x25c>
 8003826:	7821      	ldrb	r1, [r4, #0]
 8003828:	2203      	movs	r2, #3
 800382a:	4650      	mov	r0, sl
 800382c:	f7fc fcd0 	bl	80001d0 <memchr>
 8003830:	b140      	cbz	r0, 8003844 <_vfiprintf_r+0x198>
 8003832:	2340      	movs	r3, #64	; 0x40
 8003834:	eba0 000a 	sub.w	r0, r0, sl
 8003838:	fa03 f000 	lsl.w	r0, r3, r0
 800383c:	9b04      	ldr	r3, [sp, #16]
 800383e:	4303      	orrs	r3, r0
 8003840:	3401      	adds	r4, #1
 8003842:	9304      	str	r3, [sp, #16]
 8003844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003848:	482c      	ldr	r0, [pc, #176]	; (80038fc <_vfiprintf_r+0x250>)
 800384a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800384e:	2206      	movs	r2, #6
 8003850:	f7fc fcbe 	bl	80001d0 <memchr>
 8003854:	2800      	cmp	r0, #0
 8003856:	d03f      	beq.n	80038d8 <_vfiprintf_r+0x22c>
 8003858:	4b29      	ldr	r3, [pc, #164]	; (8003900 <_vfiprintf_r+0x254>)
 800385a:	bb1b      	cbnz	r3, 80038a4 <_vfiprintf_r+0x1f8>
 800385c:	9b03      	ldr	r3, [sp, #12]
 800385e:	3307      	adds	r3, #7
 8003860:	f023 0307 	bic.w	r3, r3, #7
 8003864:	3308      	adds	r3, #8
 8003866:	9303      	str	r3, [sp, #12]
 8003868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800386a:	443b      	add	r3, r7
 800386c:	9309      	str	r3, [sp, #36]	; 0x24
 800386e:	e767      	b.n	8003740 <_vfiprintf_r+0x94>
 8003870:	fb0c 3202 	mla	r2, ip, r2, r3
 8003874:	460c      	mov	r4, r1
 8003876:	2001      	movs	r0, #1
 8003878:	e7a5      	b.n	80037c6 <_vfiprintf_r+0x11a>
 800387a:	2300      	movs	r3, #0
 800387c:	3401      	adds	r4, #1
 800387e:	9305      	str	r3, [sp, #20]
 8003880:	4619      	mov	r1, r3
 8003882:	f04f 0c0a 	mov.w	ip, #10
 8003886:	4620      	mov	r0, r4
 8003888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800388c:	3a30      	subs	r2, #48	; 0x30
 800388e:	2a09      	cmp	r2, #9
 8003890:	d903      	bls.n	800389a <_vfiprintf_r+0x1ee>
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0c5      	beq.n	8003822 <_vfiprintf_r+0x176>
 8003896:	9105      	str	r1, [sp, #20]
 8003898:	e7c3      	b.n	8003822 <_vfiprintf_r+0x176>
 800389a:	fb0c 2101 	mla	r1, ip, r1, r2
 800389e:	4604      	mov	r4, r0
 80038a0:	2301      	movs	r3, #1
 80038a2:	e7f0      	b.n	8003886 <_vfiprintf_r+0x1da>
 80038a4:	ab03      	add	r3, sp, #12
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	462a      	mov	r2, r5
 80038aa:	4b16      	ldr	r3, [pc, #88]	; (8003904 <_vfiprintf_r+0x258>)
 80038ac:	a904      	add	r1, sp, #16
 80038ae:	4630      	mov	r0, r6
 80038b0:	f3af 8000 	nop.w
 80038b4:	4607      	mov	r7, r0
 80038b6:	1c78      	adds	r0, r7, #1
 80038b8:	d1d6      	bne.n	8003868 <_vfiprintf_r+0x1bc>
 80038ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038bc:	07d9      	lsls	r1, r3, #31
 80038be:	d405      	bmi.n	80038cc <_vfiprintf_r+0x220>
 80038c0:	89ab      	ldrh	r3, [r5, #12]
 80038c2:	059a      	lsls	r2, r3, #22
 80038c4:	d402      	bmi.n	80038cc <_vfiprintf_r+0x220>
 80038c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038c8:	f7ff fe31 	bl	800352e <__retarget_lock_release_recursive>
 80038cc:	89ab      	ldrh	r3, [r5, #12]
 80038ce:	065b      	lsls	r3, r3, #25
 80038d0:	f53f af12 	bmi.w	80036f8 <_vfiprintf_r+0x4c>
 80038d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038d6:	e711      	b.n	80036fc <_vfiprintf_r+0x50>
 80038d8:	ab03      	add	r3, sp, #12
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	462a      	mov	r2, r5
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <_vfiprintf_r+0x258>)
 80038e0:	a904      	add	r1, sp, #16
 80038e2:	4630      	mov	r0, r6
 80038e4:	f000 f880 	bl	80039e8 <_printf_i>
 80038e8:	e7e4      	b.n	80038b4 <_vfiprintf_r+0x208>
 80038ea:	bf00      	nop
 80038ec:	080042b0 	.word	0x080042b0
 80038f0:	080042d0 	.word	0x080042d0
 80038f4:	08004290 	.word	0x08004290
 80038f8:	080042f0 	.word	0x080042f0
 80038fc:	080042fa 	.word	0x080042fa
 8003900:	00000000 	.word	0x00000000
 8003904:	08003687 	.word	0x08003687
 8003908:	080042f6 	.word	0x080042f6

0800390c <_printf_common>:
 800390c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003910:	4616      	mov	r6, r2
 8003912:	4699      	mov	r9, r3
 8003914:	688a      	ldr	r2, [r1, #8]
 8003916:	690b      	ldr	r3, [r1, #16]
 8003918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800391c:	4293      	cmp	r3, r2
 800391e:	bfb8      	it	lt
 8003920:	4613      	movlt	r3, r2
 8003922:	6033      	str	r3, [r6, #0]
 8003924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003928:	4607      	mov	r7, r0
 800392a:	460c      	mov	r4, r1
 800392c:	b10a      	cbz	r2, 8003932 <_printf_common+0x26>
 800392e:	3301      	adds	r3, #1
 8003930:	6033      	str	r3, [r6, #0]
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	0699      	lsls	r1, r3, #26
 8003936:	bf42      	ittt	mi
 8003938:	6833      	ldrmi	r3, [r6, #0]
 800393a:	3302      	addmi	r3, #2
 800393c:	6033      	strmi	r3, [r6, #0]
 800393e:	6825      	ldr	r5, [r4, #0]
 8003940:	f015 0506 	ands.w	r5, r5, #6
 8003944:	d106      	bne.n	8003954 <_printf_common+0x48>
 8003946:	f104 0a19 	add.w	sl, r4, #25
 800394a:	68e3      	ldr	r3, [r4, #12]
 800394c:	6832      	ldr	r2, [r6, #0]
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	42ab      	cmp	r3, r5
 8003952:	dc26      	bgt.n	80039a2 <_printf_common+0x96>
 8003954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003958:	1e13      	subs	r3, r2, #0
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	bf18      	it	ne
 800395e:	2301      	movne	r3, #1
 8003960:	0692      	lsls	r2, r2, #26
 8003962:	d42b      	bmi.n	80039bc <_printf_common+0xb0>
 8003964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003968:	4649      	mov	r1, r9
 800396a:	4638      	mov	r0, r7
 800396c:	47c0      	blx	r8
 800396e:	3001      	adds	r0, #1
 8003970:	d01e      	beq.n	80039b0 <_printf_common+0xa4>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	68e5      	ldr	r5, [r4, #12]
 8003976:	6832      	ldr	r2, [r6, #0]
 8003978:	f003 0306 	and.w	r3, r3, #6
 800397c:	2b04      	cmp	r3, #4
 800397e:	bf08      	it	eq
 8003980:	1aad      	subeq	r5, r5, r2
 8003982:	68a3      	ldr	r3, [r4, #8]
 8003984:	6922      	ldr	r2, [r4, #16]
 8003986:	bf0c      	ite	eq
 8003988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800398c:	2500      	movne	r5, #0
 800398e:	4293      	cmp	r3, r2
 8003990:	bfc4      	itt	gt
 8003992:	1a9b      	subgt	r3, r3, r2
 8003994:	18ed      	addgt	r5, r5, r3
 8003996:	2600      	movs	r6, #0
 8003998:	341a      	adds	r4, #26
 800399a:	42b5      	cmp	r5, r6
 800399c:	d11a      	bne.n	80039d4 <_printf_common+0xc8>
 800399e:	2000      	movs	r0, #0
 80039a0:	e008      	b.n	80039b4 <_printf_common+0xa8>
 80039a2:	2301      	movs	r3, #1
 80039a4:	4652      	mov	r2, sl
 80039a6:	4649      	mov	r1, r9
 80039a8:	4638      	mov	r0, r7
 80039aa:	47c0      	blx	r8
 80039ac:	3001      	adds	r0, #1
 80039ae:	d103      	bne.n	80039b8 <_printf_common+0xac>
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295
 80039b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039b8:	3501      	adds	r5, #1
 80039ba:	e7c6      	b.n	800394a <_printf_common+0x3e>
 80039bc:	18e1      	adds	r1, r4, r3
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	2030      	movs	r0, #48	; 0x30
 80039c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039c6:	4422      	add	r2, r4
 80039c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039d0:	3302      	adds	r3, #2
 80039d2:	e7c7      	b.n	8003964 <_printf_common+0x58>
 80039d4:	2301      	movs	r3, #1
 80039d6:	4622      	mov	r2, r4
 80039d8:	4649      	mov	r1, r9
 80039da:	4638      	mov	r0, r7
 80039dc:	47c0      	blx	r8
 80039de:	3001      	adds	r0, #1
 80039e0:	d0e6      	beq.n	80039b0 <_printf_common+0xa4>
 80039e2:	3601      	adds	r6, #1
 80039e4:	e7d9      	b.n	800399a <_printf_common+0x8e>
	...

080039e8 <_printf_i>:
 80039e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039ec:	7e0f      	ldrb	r7, [r1, #24]
 80039ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039f0:	2f78      	cmp	r7, #120	; 0x78
 80039f2:	4691      	mov	r9, r2
 80039f4:	4680      	mov	r8, r0
 80039f6:	460c      	mov	r4, r1
 80039f8:	469a      	mov	sl, r3
 80039fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039fe:	d807      	bhi.n	8003a10 <_printf_i+0x28>
 8003a00:	2f62      	cmp	r7, #98	; 0x62
 8003a02:	d80a      	bhi.n	8003a1a <_printf_i+0x32>
 8003a04:	2f00      	cmp	r7, #0
 8003a06:	f000 80d8 	beq.w	8003bba <_printf_i+0x1d2>
 8003a0a:	2f58      	cmp	r7, #88	; 0x58
 8003a0c:	f000 80a3 	beq.w	8003b56 <_printf_i+0x16e>
 8003a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a18:	e03a      	b.n	8003a90 <_printf_i+0xa8>
 8003a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a1e:	2b15      	cmp	r3, #21
 8003a20:	d8f6      	bhi.n	8003a10 <_printf_i+0x28>
 8003a22:	a101      	add	r1, pc, #4	; (adr r1, 8003a28 <_printf_i+0x40>)
 8003a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a28:	08003a81 	.word	0x08003a81
 8003a2c:	08003a95 	.word	0x08003a95
 8003a30:	08003a11 	.word	0x08003a11
 8003a34:	08003a11 	.word	0x08003a11
 8003a38:	08003a11 	.word	0x08003a11
 8003a3c:	08003a11 	.word	0x08003a11
 8003a40:	08003a95 	.word	0x08003a95
 8003a44:	08003a11 	.word	0x08003a11
 8003a48:	08003a11 	.word	0x08003a11
 8003a4c:	08003a11 	.word	0x08003a11
 8003a50:	08003a11 	.word	0x08003a11
 8003a54:	08003ba1 	.word	0x08003ba1
 8003a58:	08003ac5 	.word	0x08003ac5
 8003a5c:	08003b83 	.word	0x08003b83
 8003a60:	08003a11 	.word	0x08003a11
 8003a64:	08003a11 	.word	0x08003a11
 8003a68:	08003bc3 	.word	0x08003bc3
 8003a6c:	08003a11 	.word	0x08003a11
 8003a70:	08003ac5 	.word	0x08003ac5
 8003a74:	08003a11 	.word	0x08003a11
 8003a78:	08003a11 	.word	0x08003a11
 8003a7c:	08003b8b 	.word	0x08003b8b
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	1d1a      	adds	r2, r3, #4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	602a      	str	r2, [r5, #0]
 8003a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0a3      	b.n	8003bdc <_printf_i+0x1f4>
 8003a94:	6820      	ldr	r0, [r4, #0]
 8003a96:	6829      	ldr	r1, [r5, #0]
 8003a98:	0606      	lsls	r6, r0, #24
 8003a9a:	f101 0304 	add.w	r3, r1, #4
 8003a9e:	d50a      	bpl.n	8003ab6 <_printf_i+0xce>
 8003aa0:	680e      	ldr	r6, [r1, #0]
 8003aa2:	602b      	str	r3, [r5, #0]
 8003aa4:	2e00      	cmp	r6, #0
 8003aa6:	da03      	bge.n	8003ab0 <_printf_i+0xc8>
 8003aa8:	232d      	movs	r3, #45	; 0x2d
 8003aaa:	4276      	negs	r6, r6
 8003aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ab0:	485e      	ldr	r0, [pc, #376]	; (8003c2c <_printf_i+0x244>)
 8003ab2:	230a      	movs	r3, #10
 8003ab4:	e019      	b.n	8003aea <_printf_i+0x102>
 8003ab6:	680e      	ldr	r6, [r1, #0]
 8003ab8:	602b      	str	r3, [r5, #0]
 8003aba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003abe:	bf18      	it	ne
 8003ac0:	b236      	sxthne	r6, r6
 8003ac2:	e7ef      	b.n	8003aa4 <_printf_i+0xbc>
 8003ac4:	682b      	ldr	r3, [r5, #0]
 8003ac6:	6820      	ldr	r0, [r4, #0]
 8003ac8:	1d19      	adds	r1, r3, #4
 8003aca:	6029      	str	r1, [r5, #0]
 8003acc:	0601      	lsls	r1, r0, #24
 8003ace:	d501      	bpl.n	8003ad4 <_printf_i+0xec>
 8003ad0:	681e      	ldr	r6, [r3, #0]
 8003ad2:	e002      	b.n	8003ada <_printf_i+0xf2>
 8003ad4:	0646      	lsls	r6, r0, #25
 8003ad6:	d5fb      	bpl.n	8003ad0 <_printf_i+0xe8>
 8003ad8:	881e      	ldrh	r6, [r3, #0]
 8003ada:	4854      	ldr	r0, [pc, #336]	; (8003c2c <_printf_i+0x244>)
 8003adc:	2f6f      	cmp	r7, #111	; 0x6f
 8003ade:	bf0c      	ite	eq
 8003ae0:	2308      	moveq	r3, #8
 8003ae2:	230a      	movne	r3, #10
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aea:	6865      	ldr	r5, [r4, #4]
 8003aec:	60a5      	str	r5, [r4, #8]
 8003aee:	2d00      	cmp	r5, #0
 8003af0:	bfa2      	ittt	ge
 8003af2:	6821      	ldrge	r1, [r4, #0]
 8003af4:	f021 0104 	bicge.w	r1, r1, #4
 8003af8:	6021      	strge	r1, [r4, #0]
 8003afa:	b90e      	cbnz	r6, 8003b00 <_printf_i+0x118>
 8003afc:	2d00      	cmp	r5, #0
 8003afe:	d04d      	beq.n	8003b9c <_printf_i+0x1b4>
 8003b00:	4615      	mov	r5, r2
 8003b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b06:	fb03 6711 	mls	r7, r3, r1, r6
 8003b0a:	5dc7      	ldrb	r7, [r0, r7]
 8003b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b10:	4637      	mov	r7, r6
 8003b12:	42bb      	cmp	r3, r7
 8003b14:	460e      	mov	r6, r1
 8003b16:	d9f4      	bls.n	8003b02 <_printf_i+0x11a>
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d10b      	bne.n	8003b34 <_printf_i+0x14c>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	07de      	lsls	r6, r3, #31
 8003b20:	d508      	bpl.n	8003b34 <_printf_i+0x14c>
 8003b22:	6923      	ldr	r3, [r4, #16]
 8003b24:	6861      	ldr	r1, [r4, #4]
 8003b26:	4299      	cmp	r1, r3
 8003b28:	bfde      	ittt	le
 8003b2a:	2330      	movle	r3, #48	; 0x30
 8003b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b34:	1b52      	subs	r2, r2, r5
 8003b36:	6122      	str	r2, [r4, #16]
 8003b38:	f8cd a000 	str.w	sl, [sp]
 8003b3c:	464b      	mov	r3, r9
 8003b3e:	aa03      	add	r2, sp, #12
 8003b40:	4621      	mov	r1, r4
 8003b42:	4640      	mov	r0, r8
 8003b44:	f7ff fee2 	bl	800390c <_printf_common>
 8003b48:	3001      	adds	r0, #1
 8003b4a:	d14c      	bne.n	8003be6 <_printf_i+0x1fe>
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	b004      	add	sp, #16
 8003b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b56:	4835      	ldr	r0, [pc, #212]	; (8003c2c <_printf_i+0x244>)
 8003b58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b5c:	6829      	ldr	r1, [r5, #0]
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b64:	6029      	str	r1, [r5, #0]
 8003b66:	061d      	lsls	r5, r3, #24
 8003b68:	d514      	bpl.n	8003b94 <_printf_i+0x1ac>
 8003b6a:	07df      	lsls	r7, r3, #31
 8003b6c:	bf44      	itt	mi
 8003b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8003b72:	6023      	strmi	r3, [r4, #0]
 8003b74:	b91e      	cbnz	r6, 8003b7e <_printf_i+0x196>
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	f023 0320 	bic.w	r3, r3, #32
 8003b7c:	6023      	str	r3, [r4, #0]
 8003b7e:	2310      	movs	r3, #16
 8003b80:	e7b0      	b.n	8003ae4 <_printf_i+0xfc>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	f043 0320 	orr.w	r3, r3, #32
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	2378      	movs	r3, #120	; 0x78
 8003b8c:	4828      	ldr	r0, [pc, #160]	; (8003c30 <_printf_i+0x248>)
 8003b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b92:	e7e3      	b.n	8003b5c <_printf_i+0x174>
 8003b94:	0659      	lsls	r1, r3, #25
 8003b96:	bf48      	it	mi
 8003b98:	b2b6      	uxthmi	r6, r6
 8003b9a:	e7e6      	b.n	8003b6a <_printf_i+0x182>
 8003b9c:	4615      	mov	r5, r2
 8003b9e:	e7bb      	b.n	8003b18 <_printf_i+0x130>
 8003ba0:	682b      	ldr	r3, [r5, #0]
 8003ba2:	6826      	ldr	r6, [r4, #0]
 8003ba4:	6961      	ldr	r1, [r4, #20]
 8003ba6:	1d18      	adds	r0, r3, #4
 8003ba8:	6028      	str	r0, [r5, #0]
 8003baa:	0635      	lsls	r5, r6, #24
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	d501      	bpl.n	8003bb4 <_printf_i+0x1cc>
 8003bb0:	6019      	str	r1, [r3, #0]
 8003bb2:	e002      	b.n	8003bba <_printf_i+0x1d2>
 8003bb4:	0670      	lsls	r0, r6, #25
 8003bb6:	d5fb      	bpl.n	8003bb0 <_printf_i+0x1c8>
 8003bb8:	8019      	strh	r1, [r3, #0]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	6123      	str	r3, [r4, #16]
 8003bbe:	4615      	mov	r5, r2
 8003bc0:	e7ba      	b.n	8003b38 <_printf_i+0x150>
 8003bc2:	682b      	ldr	r3, [r5, #0]
 8003bc4:	1d1a      	adds	r2, r3, #4
 8003bc6:	602a      	str	r2, [r5, #0]
 8003bc8:	681d      	ldr	r5, [r3, #0]
 8003bca:	6862      	ldr	r2, [r4, #4]
 8003bcc:	2100      	movs	r1, #0
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f7fc fafe 	bl	80001d0 <memchr>
 8003bd4:	b108      	cbz	r0, 8003bda <_printf_i+0x1f2>
 8003bd6:	1b40      	subs	r0, r0, r5
 8003bd8:	6060      	str	r0, [r4, #4]
 8003bda:	6863      	ldr	r3, [r4, #4]
 8003bdc:	6123      	str	r3, [r4, #16]
 8003bde:	2300      	movs	r3, #0
 8003be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003be4:	e7a8      	b.n	8003b38 <_printf_i+0x150>
 8003be6:	6923      	ldr	r3, [r4, #16]
 8003be8:	462a      	mov	r2, r5
 8003bea:	4649      	mov	r1, r9
 8003bec:	4640      	mov	r0, r8
 8003bee:	47d0      	blx	sl
 8003bf0:	3001      	adds	r0, #1
 8003bf2:	d0ab      	beq.n	8003b4c <_printf_i+0x164>
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	079b      	lsls	r3, r3, #30
 8003bf8:	d413      	bmi.n	8003c22 <_printf_i+0x23a>
 8003bfa:	68e0      	ldr	r0, [r4, #12]
 8003bfc:	9b03      	ldr	r3, [sp, #12]
 8003bfe:	4298      	cmp	r0, r3
 8003c00:	bfb8      	it	lt
 8003c02:	4618      	movlt	r0, r3
 8003c04:	e7a4      	b.n	8003b50 <_printf_i+0x168>
 8003c06:	2301      	movs	r3, #1
 8003c08:	4632      	mov	r2, r6
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	4640      	mov	r0, r8
 8003c0e:	47d0      	blx	sl
 8003c10:	3001      	adds	r0, #1
 8003c12:	d09b      	beq.n	8003b4c <_printf_i+0x164>
 8003c14:	3501      	adds	r5, #1
 8003c16:	68e3      	ldr	r3, [r4, #12]
 8003c18:	9903      	ldr	r1, [sp, #12]
 8003c1a:	1a5b      	subs	r3, r3, r1
 8003c1c:	42ab      	cmp	r3, r5
 8003c1e:	dcf2      	bgt.n	8003c06 <_printf_i+0x21e>
 8003c20:	e7eb      	b.n	8003bfa <_printf_i+0x212>
 8003c22:	2500      	movs	r5, #0
 8003c24:	f104 0619 	add.w	r6, r4, #25
 8003c28:	e7f5      	b.n	8003c16 <_printf_i+0x22e>
 8003c2a:	bf00      	nop
 8003c2c:	08004301 	.word	0x08004301
 8003c30:	08004312 	.word	0x08004312

08003c34 <_sbrk_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	4d06      	ldr	r5, [pc, #24]	; (8003c50 <_sbrk_r+0x1c>)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	602b      	str	r3, [r5, #0]
 8003c40:	f7fc ff98 	bl	8000b74 <_sbrk>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d102      	bne.n	8003c4e <_sbrk_r+0x1a>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b103      	cbz	r3, 8003c4e <_sbrk_r+0x1a>
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	2000019c 	.word	0x2000019c

08003c54 <__sread>:
 8003c54:	b510      	push	{r4, lr}
 8003c56:	460c      	mov	r4, r1
 8003c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c5c:	f000 fab2 	bl	80041c4 <_read_r>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	bfab      	itete	ge
 8003c64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c66:	89a3      	ldrhlt	r3, [r4, #12]
 8003c68:	181b      	addge	r3, r3, r0
 8003c6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c6e:	bfac      	ite	ge
 8003c70:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c72:	81a3      	strhlt	r3, [r4, #12]
 8003c74:	bd10      	pop	{r4, pc}

08003c76 <__swrite>:
 8003c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c7a:	461f      	mov	r7, r3
 8003c7c:	898b      	ldrh	r3, [r1, #12]
 8003c7e:	05db      	lsls	r3, r3, #23
 8003c80:	4605      	mov	r5, r0
 8003c82:	460c      	mov	r4, r1
 8003c84:	4616      	mov	r6, r2
 8003c86:	d505      	bpl.n	8003c94 <__swrite+0x1e>
 8003c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f000 f9c8 	bl	8004024 <_lseek_r>
 8003c94:	89a3      	ldrh	r3, [r4, #12]
 8003c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c9e:	81a3      	strh	r3, [r4, #12]
 8003ca0:	4632      	mov	r2, r6
 8003ca2:	463b      	mov	r3, r7
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003caa:	f000 b869 	b.w	8003d80 <_write_r>

08003cae <__sseek>:
 8003cae:	b510      	push	{r4, lr}
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb6:	f000 f9b5 	bl	8004024 <_lseek_r>
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	89a3      	ldrh	r3, [r4, #12]
 8003cbe:	bf15      	itete	ne
 8003cc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003cc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cca:	81a3      	strheq	r3, [r4, #12]
 8003ccc:	bf18      	it	ne
 8003cce:	81a3      	strhne	r3, [r4, #12]
 8003cd0:	bd10      	pop	{r4, pc}

08003cd2 <__sclose>:
 8003cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd6:	f000 b8d3 	b.w	8003e80 <_close_r>
	...

08003cdc <__swbuf_r>:
 8003cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cde:	460e      	mov	r6, r1
 8003ce0:	4614      	mov	r4, r2
 8003ce2:	4605      	mov	r5, r0
 8003ce4:	b118      	cbz	r0, 8003cee <__swbuf_r+0x12>
 8003ce6:	6983      	ldr	r3, [r0, #24]
 8003ce8:	b90b      	cbnz	r3, 8003cee <__swbuf_r+0x12>
 8003cea:	f7ff fb81 	bl	80033f0 <__sinit>
 8003cee:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <__swbuf_r+0x98>)
 8003cf0:	429c      	cmp	r4, r3
 8003cf2:	d12b      	bne.n	8003d4c <__swbuf_r+0x70>
 8003cf4:	686c      	ldr	r4, [r5, #4]
 8003cf6:	69a3      	ldr	r3, [r4, #24]
 8003cf8:	60a3      	str	r3, [r4, #8]
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	071a      	lsls	r2, r3, #28
 8003cfe:	d52f      	bpl.n	8003d60 <__swbuf_r+0x84>
 8003d00:	6923      	ldr	r3, [r4, #16]
 8003d02:	b36b      	cbz	r3, 8003d60 <__swbuf_r+0x84>
 8003d04:	6923      	ldr	r3, [r4, #16]
 8003d06:	6820      	ldr	r0, [r4, #0]
 8003d08:	1ac0      	subs	r0, r0, r3
 8003d0a:	6963      	ldr	r3, [r4, #20]
 8003d0c:	b2f6      	uxtb	r6, r6
 8003d0e:	4283      	cmp	r3, r0
 8003d10:	4637      	mov	r7, r6
 8003d12:	dc04      	bgt.n	8003d1e <__swbuf_r+0x42>
 8003d14:	4621      	mov	r1, r4
 8003d16:	4628      	mov	r0, r5
 8003d18:	f000 f948 	bl	8003fac <_fflush_r>
 8003d1c:	bb30      	cbnz	r0, 8003d6c <__swbuf_r+0x90>
 8003d1e:	68a3      	ldr	r3, [r4, #8]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	60a3      	str	r3, [r4, #8]
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	6022      	str	r2, [r4, #0]
 8003d2a:	701e      	strb	r6, [r3, #0]
 8003d2c:	6963      	ldr	r3, [r4, #20]
 8003d2e:	3001      	adds	r0, #1
 8003d30:	4283      	cmp	r3, r0
 8003d32:	d004      	beq.n	8003d3e <__swbuf_r+0x62>
 8003d34:	89a3      	ldrh	r3, [r4, #12]
 8003d36:	07db      	lsls	r3, r3, #31
 8003d38:	d506      	bpl.n	8003d48 <__swbuf_r+0x6c>
 8003d3a:	2e0a      	cmp	r6, #10
 8003d3c:	d104      	bne.n	8003d48 <__swbuf_r+0x6c>
 8003d3e:	4621      	mov	r1, r4
 8003d40:	4628      	mov	r0, r5
 8003d42:	f000 f933 	bl	8003fac <_fflush_r>
 8003d46:	b988      	cbnz	r0, 8003d6c <__swbuf_r+0x90>
 8003d48:	4638      	mov	r0, r7
 8003d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <__swbuf_r+0x9c>)
 8003d4e:	429c      	cmp	r4, r3
 8003d50:	d101      	bne.n	8003d56 <__swbuf_r+0x7a>
 8003d52:	68ac      	ldr	r4, [r5, #8]
 8003d54:	e7cf      	b.n	8003cf6 <__swbuf_r+0x1a>
 8003d56:	4b09      	ldr	r3, [pc, #36]	; (8003d7c <__swbuf_r+0xa0>)
 8003d58:	429c      	cmp	r4, r3
 8003d5a:	bf08      	it	eq
 8003d5c:	68ec      	ldreq	r4, [r5, #12]
 8003d5e:	e7ca      	b.n	8003cf6 <__swbuf_r+0x1a>
 8003d60:	4621      	mov	r1, r4
 8003d62:	4628      	mov	r0, r5
 8003d64:	f000 f81e 	bl	8003da4 <__swsetup_r>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	d0cb      	beq.n	8003d04 <__swbuf_r+0x28>
 8003d6c:	f04f 37ff 	mov.w	r7, #4294967295
 8003d70:	e7ea      	b.n	8003d48 <__swbuf_r+0x6c>
 8003d72:	bf00      	nop
 8003d74:	080042b0 	.word	0x080042b0
 8003d78:	080042d0 	.word	0x080042d0
 8003d7c:	08004290 	.word	0x08004290

08003d80 <_write_r>:
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	4d07      	ldr	r5, [pc, #28]	; (8003da0 <_write_r+0x20>)
 8003d84:	4604      	mov	r4, r0
 8003d86:	4608      	mov	r0, r1
 8003d88:	4611      	mov	r1, r2
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	602a      	str	r2, [r5, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f7fc fe9f 	bl	8000ad2 <_write>
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	d102      	bne.n	8003d9e <_write_r+0x1e>
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	b103      	cbz	r3, 8003d9e <_write_r+0x1e>
 8003d9c:	6023      	str	r3, [r4, #0]
 8003d9e:	bd38      	pop	{r3, r4, r5, pc}
 8003da0:	2000019c 	.word	0x2000019c

08003da4 <__swsetup_r>:
 8003da4:	4b32      	ldr	r3, [pc, #200]	; (8003e70 <__swsetup_r+0xcc>)
 8003da6:	b570      	push	{r4, r5, r6, lr}
 8003da8:	681d      	ldr	r5, [r3, #0]
 8003daa:	4606      	mov	r6, r0
 8003dac:	460c      	mov	r4, r1
 8003dae:	b125      	cbz	r5, 8003dba <__swsetup_r+0x16>
 8003db0:	69ab      	ldr	r3, [r5, #24]
 8003db2:	b913      	cbnz	r3, 8003dba <__swsetup_r+0x16>
 8003db4:	4628      	mov	r0, r5
 8003db6:	f7ff fb1b 	bl	80033f0 <__sinit>
 8003dba:	4b2e      	ldr	r3, [pc, #184]	; (8003e74 <__swsetup_r+0xd0>)
 8003dbc:	429c      	cmp	r4, r3
 8003dbe:	d10f      	bne.n	8003de0 <__swsetup_r+0x3c>
 8003dc0:	686c      	ldr	r4, [r5, #4]
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dc8:	0719      	lsls	r1, r3, #28
 8003dca:	d42c      	bmi.n	8003e26 <__swsetup_r+0x82>
 8003dcc:	06dd      	lsls	r5, r3, #27
 8003dce:	d411      	bmi.n	8003df4 <__swsetup_r+0x50>
 8003dd0:	2309      	movs	r3, #9
 8003dd2:	6033      	str	r3, [r6, #0]
 8003dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dd8:	81a3      	strh	r3, [r4, #12]
 8003dda:	f04f 30ff 	mov.w	r0, #4294967295
 8003dde:	e03e      	b.n	8003e5e <__swsetup_r+0xba>
 8003de0:	4b25      	ldr	r3, [pc, #148]	; (8003e78 <__swsetup_r+0xd4>)
 8003de2:	429c      	cmp	r4, r3
 8003de4:	d101      	bne.n	8003dea <__swsetup_r+0x46>
 8003de6:	68ac      	ldr	r4, [r5, #8]
 8003de8:	e7eb      	b.n	8003dc2 <__swsetup_r+0x1e>
 8003dea:	4b24      	ldr	r3, [pc, #144]	; (8003e7c <__swsetup_r+0xd8>)
 8003dec:	429c      	cmp	r4, r3
 8003dee:	bf08      	it	eq
 8003df0:	68ec      	ldreq	r4, [r5, #12]
 8003df2:	e7e6      	b.n	8003dc2 <__swsetup_r+0x1e>
 8003df4:	0758      	lsls	r0, r3, #29
 8003df6:	d512      	bpl.n	8003e1e <__swsetup_r+0x7a>
 8003df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dfa:	b141      	cbz	r1, 8003e0e <__swsetup_r+0x6a>
 8003dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e00:	4299      	cmp	r1, r3
 8003e02:	d002      	beq.n	8003e0a <__swsetup_r+0x66>
 8003e04:	4630      	mov	r0, r6
 8003e06:	f000 f991 	bl	800412c <_free_r>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8003e0e:	89a3      	ldrh	r3, [r4, #12]
 8003e10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e14:	81a3      	strh	r3, [r4, #12]
 8003e16:	2300      	movs	r3, #0
 8003e18:	6063      	str	r3, [r4, #4]
 8003e1a:	6923      	ldr	r3, [r4, #16]
 8003e1c:	6023      	str	r3, [r4, #0]
 8003e1e:	89a3      	ldrh	r3, [r4, #12]
 8003e20:	f043 0308 	orr.w	r3, r3, #8
 8003e24:	81a3      	strh	r3, [r4, #12]
 8003e26:	6923      	ldr	r3, [r4, #16]
 8003e28:	b94b      	cbnz	r3, 8003e3e <__swsetup_r+0x9a>
 8003e2a:	89a3      	ldrh	r3, [r4, #12]
 8003e2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e34:	d003      	beq.n	8003e3e <__swsetup_r+0x9a>
 8003e36:	4621      	mov	r1, r4
 8003e38:	4630      	mov	r0, r6
 8003e3a:	f000 f92b 	bl	8004094 <__smakebuf_r>
 8003e3e:	89a0      	ldrh	r0, [r4, #12]
 8003e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e44:	f010 0301 	ands.w	r3, r0, #1
 8003e48:	d00a      	beq.n	8003e60 <__swsetup_r+0xbc>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60a3      	str	r3, [r4, #8]
 8003e4e:	6963      	ldr	r3, [r4, #20]
 8003e50:	425b      	negs	r3, r3
 8003e52:	61a3      	str	r3, [r4, #24]
 8003e54:	6923      	ldr	r3, [r4, #16]
 8003e56:	b943      	cbnz	r3, 8003e6a <__swsetup_r+0xc6>
 8003e58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e5c:	d1ba      	bne.n	8003dd4 <__swsetup_r+0x30>
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
 8003e60:	0781      	lsls	r1, r0, #30
 8003e62:	bf58      	it	pl
 8003e64:	6963      	ldrpl	r3, [r4, #20]
 8003e66:	60a3      	str	r3, [r4, #8]
 8003e68:	e7f4      	b.n	8003e54 <__swsetup_r+0xb0>
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	e7f7      	b.n	8003e5e <__swsetup_r+0xba>
 8003e6e:	bf00      	nop
 8003e70:	2000000c 	.word	0x2000000c
 8003e74:	080042b0 	.word	0x080042b0
 8003e78:	080042d0 	.word	0x080042d0
 8003e7c:	08004290 	.word	0x08004290

08003e80 <_close_r>:
 8003e80:	b538      	push	{r3, r4, r5, lr}
 8003e82:	4d06      	ldr	r5, [pc, #24]	; (8003e9c <_close_r+0x1c>)
 8003e84:	2300      	movs	r3, #0
 8003e86:	4604      	mov	r4, r0
 8003e88:	4608      	mov	r0, r1
 8003e8a:	602b      	str	r3, [r5, #0]
 8003e8c:	f7fc fe3d 	bl	8000b0a <_close>
 8003e90:	1c43      	adds	r3, r0, #1
 8003e92:	d102      	bne.n	8003e9a <_close_r+0x1a>
 8003e94:	682b      	ldr	r3, [r5, #0]
 8003e96:	b103      	cbz	r3, 8003e9a <_close_r+0x1a>
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	bd38      	pop	{r3, r4, r5, pc}
 8003e9c:	2000019c 	.word	0x2000019c

08003ea0 <__sflush_r>:
 8003ea0:	898a      	ldrh	r2, [r1, #12]
 8003ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ea6:	4605      	mov	r5, r0
 8003ea8:	0710      	lsls	r0, r2, #28
 8003eaa:	460c      	mov	r4, r1
 8003eac:	d458      	bmi.n	8003f60 <__sflush_r+0xc0>
 8003eae:	684b      	ldr	r3, [r1, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	dc05      	bgt.n	8003ec0 <__sflush_r+0x20>
 8003eb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	dc02      	bgt.n	8003ec0 <__sflush_r+0x20>
 8003eba:	2000      	movs	r0, #0
 8003ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ec2:	2e00      	cmp	r6, #0
 8003ec4:	d0f9      	beq.n	8003eba <__sflush_r+0x1a>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ecc:	682f      	ldr	r7, [r5, #0]
 8003ece:	602b      	str	r3, [r5, #0]
 8003ed0:	d032      	beq.n	8003f38 <__sflush_r+0x98>
 8003ed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ed4:	89a3      	ldrh	r3, [r4, #12]
 8003ed6:	075a      	lsls	r2, r3, #29
 8003ed8:	d505      	bpl.n	8003ee6 <__sflush_r+0x46>
 8003eda:	6863      	ldr	r3, [r4, #4]
 8003edc:	1ac0      	subs	r0, r0, r3
 8003ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ee0:	b10b      	cbz	r3, 8003ee6 <__sflush_r+0x46>
 8003ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ee4:	1ac0      	subs	r0, r0, r3
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	4602      	mov	r2, r0
 8003eea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003eec:	6a21      	ldr	r1, [r4, #32]
 8003eee:	4628      	mov	r0, r5
 8003ef0:	47b0      	blx	r6
 8003ef2:	1c43      	adds	r3, r0, #1
 8003ef4:	89a3      	ldrh	r3, [r4, #12]
 8003ef6:	d106      	bne.n	8003f06 <__sflush_r+0x66>
 8003ef8:	6829      	ldr	r1, [r5, #0]
 8003efa:	291d      	cmp	r1, #29
 8003efc:	d82c      	bhi.n	8003f58 <__sflush_r+0xb8>
 8003efe:	4a2a      	ldr	r2, [pc, #168]	; (8003fa8 <__sflush_r+0x108>)
 8003f00:	40ca      	lsrs	r2, r1
 8003f02:	07d6      	lsls	r6, r2, #31
 8003f04:	d528      	bpl.n	8003f58 <__sflush_r+0xb8>
 8003f06:	2200      	movs	r2, #0
 8003f08:	6062      	str	r2, [r4, #4]
 8003f0a:	04d9      	lsls	r1, r3, #19
 8003f0c:	6922      	ldr	r2, [r4, #16]
 8003f0e:	6022      	str	r2, [r4, #0]
 8003f10:	d504      	bpl.n	8003f1c <__sflush_r+0x7c>
 8003f12:	1c42      	adds	r2, r0, #1
 8003f14:	d101      	bne.n	8003f1a <__sflush_r+0x7a>
 8003f16:	682b      	ldr	r3, [r5, #0]
 8003f18:	b903      	cbnz	r3, 8003f1c <__sflush_r+0x7c>
 8003f1a:	6560      	str	r0, [r4, #84]	; 0x54
 8003f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f1e:	602f      	str	r7, [r5, #0]
 8003f20:	2900      	cmp	r1, #0
 8003f22:	d0ca      	beq.n	8003eba <__sflush_r+0x1a>
 8003f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f28:	4299      	cmp	r1, r3
 8003f2a:	d002      	beq.n	8003f32 <__sflush_r+0x92>
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	f000 f8fd 	bl	800412c <_free_r>
 8003f32:	2000      	movs	r0, #0
 8003f34:	6360      	str	r0, [r4, #52]	; 0x34
 8003f36:	e7c1      	b.n	8003ebc <__sflush_r+0x1c>
 8003f38:	6a21      	ldr	r1, [r4, #32]
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	47b0      	blx	r6
 8003f40:	1c41      	adds	r1, r0, #1
 8003f42:	d1c7      	bne.n	8003ed4 <__sflush_r+0x34>
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0c4      	beq.n	8003ed4 <__sflush_r+0x34>
 8003f4a:	2b1d      	cmp	r3, #29
 8003f4c:	d001      	beq.n	8003f52 <__sflush_r+0xb2>
 8003f4e:	2b16      	cmp	r3, #22
 8003f50:	d101      	bne.n	8003f56 <__sflush_r+0xb6>
 8003f52:	602f      	str	r7, [r5, #0]
 8003f54:	e7b1      	b.n	8003eba <__sflush_r+0x1a>
 8003f56:	89a3      	ldrh	r3, [r4, #12]
 8003f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f5c:	81a3      	strh	r3, [r4, #12]
 8003f5e:	e7ad      	b.n	8003ebc <__sflush_r+0x1c>
 8003f60:	690f      	ldr	r7, [r1, #16]
 8003f62:	2f00      	cmp	r7, #0
 8003f64:	d0a9      	beq.n	8003eba <__sflush_r+0x1a>
 8003f66:	0793      	lsls	r3, r2, #30
 8003f68:	680e      	ldr	r6, [r1, #0]
 8003f6a:	bf08      	it	eq
 8003f6c:	694b      	ldreq	r3, [r1, #20]
 8003f6e:	600f      	str	r7, [r1, #0]
 8003f70:	bf18      	it	ne
 8003f72:	2300      	movne	r3, #0
 8003f74:	eba6 0807 	sub.w	r8, r6, r7
 8003f78:	608b      	str	r3, [r1, #8]
 8003f7a:	f1b8 0f00 	cmp.w	r8, #0
 8003f7e:	dd9c      	ble.n	8003eba <__sflush_r+0x1a>
 8003f80:	6a21      	ldr	r1, [r4, #32]
 8003f82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f84:	4643      	mov	r3, r8
 8003f86:	463a      	mov	r2, r7
 8003f88:	4628      	mov	r0, r5
 8003f8a:	47b0      	blx	r6
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	dc06      	bgt.n	8003f9e <__sflush_r+0xfe>
 8003f90:	89a3      	ldrh	r3, [r4, #12]
 8003f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f96:	81a3      	strh	r3, [r4, #12]
 8003f98:	f04f 30ff 	mov.w	r0, #4294967295
 8003f9c:	e78e      	b.n	8003ebc <__sflush_r+0x1c>
 8003f9e:	4407      	add	r7, r0
 8003fa0:	eba8 0800 	sub.w	r8, r8, r0
 8003fa4:	e7e9      	b.n	8003f7a <__sflush_r+0xda>
 8003fa6:	bf00      	nop
 8003fa8:	20400001 	.word	0x20400001

08003fac <_fflush_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	690b      	ldr	r3, [r1, #16]
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	b913      	cbnz	r3, 8003fbc <_fflush_r+0x10>
 8003fb6:	2500      	movs	r5, #0
 8003fb8:	4628      	mov	r0, r5
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	b118      	cbz	r0, 8003fc6 <_fflush_r+0x1a>
 8003fbe:	6983      	ldr	r3, [r0, #24]
 8003fc0:	b90b      	cbnz	r3, 8003fc6 <_fflush_r+0x1a>
 8003fc2:	f7ff fa15 	bl	80033f0 <__sinit>
 8003fc6:	4b14      	ldr	r3, [pc, #80]	; (8004018 <_fflush_r+0x6c>)
 8003fc8:	429c      	cmp	r4, r3
 8003fca:	d11b      	bne.n	8004004 <_fflush_r+0x58>
 8003fcc:	686c      	ldr	r4, [r5, #4]
 8003fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0ef      	beq.n	8003fb6 <_fflush_r+0xa>
 8003fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fd8:	07d0      	lsls	r0, r2, #31
 8003fda:	d404      	bmi.n	8003fe6 <_fflush_r+0x3a>
 8003fdc:	0599      	lsls	r1, r3, #22
 8003fde:	d402      	bmi.n	8003fe6 <_fflush_r+0x3a>
 8003fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fe2:	f7ff faa3 	bl	800352c <__retarget_lock_acquire_recursive>
 8003fe6:	4628      	mov	r0, r5
 8003fe8:	4621      	mov	r1, r4
 8003fea:	f7ff ff59 	bl	8003ea0 <__sflush_r>
 8003fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ff0:	07da      	lsls	r2, r3, #31
 8003ff2:	4605      	mov	r5, r0
 8003ff4:	d4e0      	bmi.n	8003fb8 <_fflush_r+0xc>
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	059b      	lsls	r3, r3, #22
 8003ffa:	d4dd      	bmi.n	8003fb8 <_fflush_r+0xc>
 8003ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ffe:	f7ff fa96 	bl	800352e <__retarget_lock_release_recursive>
 8004002:	e7d9      	b.n	8003fb8 <_fflush_r+0xc>
 8004004:	4b05      	ldr	r3, [pc, #20]	; (800401c <_fflush_r+0x70>)
 8004006:	429c      	cmp	r4, r3
 8004008:	d101      	bne.n	800400e <_fflush_r+0x62>
 800400a:	68ac      	ldr	r4, [r5, #8]
 800400c:	e7df      	b.n	8003fce <_fflush_r+0x22>
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <_fflush_r+0x74>)
 8004010:	429c      	cmp	r4, r3
 8004012:	bf08      	it	eq
 8004014:	68ec      	ldreq	r4, [r5, #12]
 8004016:	e7da      	b.n	8003fce <_fflush_r+0x22>
 8004018:	080042b0 	.word	0x080042b0
 800401c:	080042d0 	.word	0x080042d0
 8004020:	08004290 	.word	0x08004290

08004024 <_lseek_r>:
 8004024:	b538      	push	{r3, r4, r5, lr}
 8004026:	4d07      	ldr	r5, [pc, #28]	; (8004044 <_lseek_r+0x20>)
 8004028:	4604      	mov	r4, r0
 800402a:	4608      	mov	r0, r1
 800402c:	4611      	mov	r1, r2
 800402e:	2200      	movs	r2, #0
 8004030:	602a      	str	r2, [r5, #0]
 8004032:	461a      	mov	r2, r3
 8004034:	f7fc fd90 	bl	8000b58 <_lseek>
 8004038:	1c43      	adds	r3, r0, #1
 800403a:	d102      	bne.n	8004042 <_lseek_r+0x1e>
 800403c:	682b      	ldr	r3, [r5, #0]
 800403e:	b103      	cbz	r3, 8004042 <_lseek_r+0x1e>
 8004040:	6023      	str	r3, [r4, #0]
 8004042:	bd38      	pop	{r3, r4, r5, pc}
 8004044:	2000019c 	.word	0x2000019c

08004048 <__swhatbuf_r>:
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	460e      	mov	r6, r1
 800404c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004050:	2900      	cmp	r1, #0
 8004052:	b096      	sub	sp, #88	; 0x58
 8004054:	4614      	mov	r4, r2
 8004056:	461d      	mov	r5, r3
 8004058:	da08      	bge.n	800406c <__swhatbuf_r+0x24>
 800405a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	602a      	str	r2, [r5, #0]
 8004062:	061a      	lsls	r2, r3, #24
 8004064:	d410      	bmi.n	8004088 <__swhatbuf_r+0x40>
 8004066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800406a:	e00e      	b.n	800408a <__swhatbuf_r+0x42>
 800406c:	466a      	mov	r2, sp
 800406e:	f000 f8bb 	bl	80041e8 <_fstat_r>
 8004072:	2800      	cmp	r0, #0
 8004074:	dbf1      	blt.n	800405a <__swhatbuf_r+0x12>
 8004076:	9a01      	ldr	r2, [sp, #4]
 8004078:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800407c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004080:	425a      	negs	r2, r3
 8004082:	415a      	adcs	r2, r3
 8004084:	602a      	str	r2, [r5, #0]
 8004086:	e7ee      	b.n	8004066 <__swhatbuf_r+0x1e>
 8004088:	2340      	movs	r3, #64	; 0x40
 800408a:	2000      	movs	r0, #0
 800408c:	6023      	str	r3, [r4, #0]
 800408e:	b016      	add	sp, #88	; 0x58
 8004090:	bd70      	pop	{r4, r5, r6, pc}
	...

08004094 <__smakebuf_r>:
 8004094:	898b      	ldrh	r3, [r1, #12]
 8004096:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004098:	079d      	lsls	r5, r3, #30
 800409a:	4606      	mov	r6, r0
 800409c:	460c      	mov	r4, r1
 800409e:	d507      	bpl.n	80040b0 <__smakebuf_r+0x1c>
 80040a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	6123      	str	r3, [r4, #16]
 80040a8:	2301      	movs	r3, #1
 80040aa:	6163      	str	r3, [r4, #20]
 80040ac:	b002      	add	sp, #8
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	ab01      	add	r3, sp, #4
 80040b2:	466a      	mov	r2, sp
 80040b4:	f7ff ffc8 	bl	8004048 <__swhatbuf_r>
 80040b8:	9900      	ldr	r1, [sp, #0]
 80040ba:	4605      	mov	r5, r0
 80040bc:	4630      	mov	r0, r6
 80040be:	f7ff fa57 	bl	8003570 <_malloc_r>
 80040c2:	b948      	cbnz	r0, 80040d8 <__smakebuf_r+0x44>
 80040c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040c8:	059a      	lsls	r2, r3, #22
 80040ca:	d4ef      	bmi.n	80040ac <__smakebuf_r+0x18>
 80040cc:	f023 0303 	bic.w	r3, r3, #3
 80040d0:	f043 0302 	orr.w	r3, r3, #2
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	e7e3      	b.n	80040a0 <__smakebuf_r+0xc>
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <__smakebuf_r+0x7c>)
 80040da:	62b3      	str	r3, [r6, #40]	; 0x28
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	6020      	str	r0, [r4, #0]
 80040e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e4:	81a3      	strh	r3, [r4, #12]
 80040e6:	9b00      	ldr	r3, [sp, #0]
 80040e8:	6163      	str	r3, [r4, #20]
 80040ea:	9b01      	ldr	r3, [sp, #4]
 80040ec:	6120      	str	r0, [r4, #16]
 80040ee:	b15b      	cbz	r3, 8004108 <__smakebuf_r+0x74>
 80040f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040f4:	4630      	mov	r0, r6
 80040f6:	f000 f889 	bl	800420c <_isatty_r>
 80040fa:	b128      	cbz	r0, 8004108 <__smakebuf_r+0x74>
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	81a3      	strh	r3, [r4, #12]
 8004108:	89a0      	ldrh	r0, [r4, #12]
 800410a:	4305      	orrs	r5, r0
 800410c:	81a5      	strh	r5, [r4, #12]
 800410e:	e7cd      	b.n	80040ac <__smakebuf_r+0x18>
 8004110:	08003389 	.word	0x08003389

08004114 <__malloc_lock>:
 8004114:	4801      	ldr	r0, [pc, #4]	; (800411c <__malloc_lock+0x8>)
 8004116:	f7ff ba09 	b.w	800352c <__retarget_lock_acquire_recursive>
 800411a:	bf00      	nop
 800411c:	20000190 	.word	0x20000190

08004120 <__malloc_unlock>:
 8004120:	4801      	ldr	r0, [pc, #4]	; (8004128 <__malloc_unlock+0x8>)
 8004122:	f7ff ba04 	b.w	800352e <__retarget_lock_release_recursive>
 8004126:	bf00      	nop
 8004128:	20000190 	.word	0x20000190

0800412c <_free_r>:
 800412c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800412e:	2900      	cmp	r1, #0
 8004130:	d044      	beq.n	80041bc <_free_r+0x90>
 8004132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004136:	9001      	str	r0, [sp, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f1a1 0404 	sub.w	r4, r1, #4
 800413e:	bfb8      	it	lt
 8004140:	18e4      	addlt	r4, r4, r3
 8004142:	f7ff ffe7 	bl	8004114 <__malloc_lock>
 8004146:	4a1e      	ldr	r2, [pc, #120]	; (80041c0 <_free_r+0x94>)
 8004148:	9801      	ldr	r0, [sp, #4]
 800414a:	6813      	ldr	r3, [r2, #0]
 800414c:	b933      	cbnz	r3, 800415c <_free_r+0x30>
 800414e:	6063      	str	r3, [r4, #4]
 8004150:	6014      	str	r4, [r2, #0]
 8004152:	b003      	add	sp, #12
 8004154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004158:	f7ff bfe2 	b.w	8004120 <__malloc_unlock>
 800415c:	42a3      	cmp	r3, r4
 800415e:	d908      	bls.n	8004172 <_free_r+0x46>
 8004160:	6825      	ldr	r5, [r4, #0]
 8004162:	1961      	adds	r1, r4, r5
 8004164:	428b      	cmp	r3, r1
 8004166:	bf01      	itttt	eq
 8004168:	6819      	ldreq	r1, [r3, #0]
 800416a:	685b      	ldreq	r3, [r3, #4]
 800416c:	1949      	addeq	r1, r1, r5
 800416e:	6021      	streq	r1, [r4, #0]
 8004170:	e7ed      	b.n	800414e <_free_r+0x22>
 8004172:	461a      	mov	r2, r3
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	b10b      	cbz	r3, 800417c <_free_r+0x50>
 8004178:	42a3      	cmp	r3, r4
 800417a:	d9fa      	bls.n	8004172 <_free_r+0x46>
 800417c:	6811      	ldr	r1, [r2, #0]
 800417e:	1855      	adds	r5, r2, r1
 8004180:	42a5      	cmp	r5, r4
 8004182:	d10b      	bne.n	800419c <_free_r+0x70>
 8004184:	6824      	ldr	r4, [r4, #0]
 8004186:	4421      	add	r1, r4
 8004188:	1854      	adds	r4, r2, r1
 800418a:	42a3      	cmp	r3, r4
 800418c:	6011      	str	r1, [r2, #0]
 800418e:	d1e0      	bne.n	8004152 <_free_r+0x26>
 8004190:	681c      	ldr	r4, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	6053      	str	r3, [r2, #4]
 8004196:	4421      	add	r1, r4
 8004198:	6011      	str	r1, [r2, #0]
 800419a:	e7da      	b.n	8004152 <_free_r+0x26>
 800419c:	d902      	bls.n	80041a4 <_free_r+0x78>
 800419e:	230c      	movs	r3, #12
 80041a0:	6003      	str	r3, [r0, #0]
 80041a2:	e7d6      	b.n	8004152 <_free_r+0x26>
 80041a4:	6825      	ldr	r5, [r4, #0]
 80041a6:	1961      	adds	r1, r4, r5
 80041a8:	428b      	cmp	r3, r1
 80041aa:	bf04      	itt	eq
 80041ac:	6819      	ldreq	r1, [r3, #0]
 80041ae:	685b      	ldreq	r3, [r3, #4]
 80041b0:	6063      	str	r3, [r4, #4]
 80041b2:	bf04      	itt	eq
 80041b4:	1949      	addeq	r1, r1, r5
 80041b6:	6021      	streq	r1, [r4, #0]
 80041b8:	6054      	str	r4, [r2, #4]
 80041ba:	e7ca      	b.n	8004152 <_free_r+0x26>
 80041bc:	b003      	add	sp, #12
 80041be:	bd30      	pop	{r4, r5, pc}
 80041c0:	20000194 	.word	0x20000194

080041c4 <_read_r>:
 80041c4:	b538      	push	{r3, r4, r5, lr}
 80041c6:	4d07      	ldr	r5, [pc, #28]	; (80041e4 <_read_r+0x20>)
 80041c8:	4604      	mov	r4, r0
 80041ca:	4608      	mov	r0, r1
 80041cc:	4611      	mov	r1, r2
 80041ce:	2200      	movs	r2, #0
 80041d0:	602a      	str	r2, [r5, #0]
 80041d2:	461a      	mov	r2, r3
 80041d4:	f7fc fc60 	bl	8000a98 <_read>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d102      	bne.n	80041e2 <_read_r+0x1e>
 80041dc:	682b      	ldr	r3, [r5, #0]
 80041de:	b103      	cbz	r3, 80041e2 <_read_r+0x1e>
 80041e0:	6023      	str	r3, [r4, #0]
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
 80041e4:	2000019c 	.word	0x2000019c

080041e8 <_fstat_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4d07      	ldr	r5, [pc, #28]	; (8004208 <_fstat_r+0x20>)
 80041ec:	2300      	movs	r3, #0
 80041ee:	4604      	mov	r4, r0
 80041f0:	4608      	mov	r0, r1
 80041f2:	4611      	mov	r1, r2
 80041f4:	602b      	str	r3, [r5, #0]
 80041f6:	f7fc fc94 	bl	8000b22 <_fstat>
 80041fa:	1c43      	adds	r3, r0, #1
 80041fc:	d102      	bne.n	8004204 <_fstat_r+0x1c>
 80041fe:	682b      	ldr	r3, [r5, #0]
 8004200:	b103      	cbz	r3, 8004204 <_fstat_r+0x1c>
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	bd38      	pop	{r3, r4, r5, pc}
 8004206:	bf00      	nop
 8004208:	2000019c 	.word	0x2000019c

0800420c <_isatty_r>:
 800420c:	b538      	push	{r3, r4, r5, lr}
 800420e:	4d06      	ldr	r5, [pc, #24]	; (8004228 <_isatty_r+0x1c>)
 8004210:	2300      	movs	r3, #0
 8004212:	4604      	mov	r4, r0
 8004214:	4608      	mov	r0, r1
 8004216:	602b      	str	r3, [r5, #0]
 8004218:	f7fc fc93 	bl	8000b42 <_isatty>
 800421c:	1c43      	adds	r3, r0, #1
 800421e:	d102      	bne.n	8004226 <_isatty_r+0x1a>
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	b103      	cbz	r3, 8004226 <_isatty_r+0x1a>
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	bd38      	pop	{r3, r4, r5, pc}
 8004228:	2000019c 	.word	0x2000019c

0800422c <_init>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	bf00      	nop
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr

08004238 <_fini>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr
