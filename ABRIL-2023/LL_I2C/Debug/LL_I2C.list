
LL_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a20  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800646c  0800646c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006474  08006474  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006474  08006474  00016474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006478  08006478  00016478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800647c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000450  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000045c  2000045c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b894  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c07  00000000  00000000  0002b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  0002d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bd8  00000000  00000000  0002e1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002341d  00000000  00000000  0002ed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e8fe  00000000  00000000  0005219d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ced57  00000000  00000000  00060a9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f7f2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003438  00000000  00000000  0012f844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a34 	.word	0x08004a34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a34 	.word	0x08004a34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <a_mpu6050_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu6050_iic_read(mpu6050_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	607a      	str	r2, [r7, #4]
 80004d6:	461a      	mov	r2, r3
 80004d8:	460b      	mov	r3, r1
 80004da:	72fb      	strb	r3, [r7, #11]
 80004dc:	4613      	mov	r3, r2
 80004de:	813b      	strh	r3, [r7, #8]
    if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	68dc      	ldr	r4, [r3, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	7818      	ldrb	r0, [r3, #0]
 80004e8:	893b      	ldrh	r3, [r7, #8]
 80004ea:	7af9      	ldrb	r1, [r7, #11]
 80004ec:	687a      	ldr	r2, [r7, #4]
 80004ee:	47a0      	blx	r4
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <a_mpu6050_iic_read+0x2e>
    {
        return 1;                                                                 /* return error */
 80004f6:	2301      	movs	r3, #1
 80004f8:	e000      	b.n	80004fc <a_mpu6050_iic_read+0x30>
    }
    else
    {
        return 0;                                                                 /* success return 0 */
 80004fa:	2300      	movs	r3, #0
    }
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <a_mpu6050_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu6050_iic_write(mpu6050_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	607a      	str	r2, [r7, #4]
 800050e:	461a      	mov	r2, r3
 8000510:	460b      	mov	r3, r1
 8000512:	72fb      	strb	r3, [r7, #11]
 8000514:	4613      	mov	r3, r2
 8000516:	813b      	strh	r3, [r7, #8]
    if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	691c      	ldr	r4, [r3, #16]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	7818      	ldrb	r0, [r3, #0]
 8000520:	893b      	ldrh	r3, [r7, #8]
 8000522:	7af9      	ldrb	r1, [r7, #11]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	47a0      	blx	r4
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <a_mpu6050_iic_write+0x2e>
    {
        return 1;                                                                  /* return error */
 800052e:	2301      	movs	r3, #1
 8000530:	e000      	b.n	8000534 <a_mpu6050_iic_write+0x30>
    }
    else
    {
        return 0;                                                                  /* success return 0 */
 8000532:	2300      	movs	r3, #0
    }
}
 8000534:	4618      	mov	r0, r3
 8000536:	3714      	adds	r7, #20
 8000538:	46bd      	mov	sp, r7
 800053a:	bd90      	pop	{r4, r7, pc}

0800053c <mpu6050_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6050_set_addr_pin(mpu6050_handle_t *handle, mpu6050_address_t addr_pin)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d101      	bne.n	8000552 <mpu6050_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 800054e:	2302      	movs	r3, #2
 8000550:	e003      	b.n	800055a <mpu6050_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	78fa      	ldrb	r2, [r7, #3]
 8000556:	701a      	strb	r2, [r3, #0]

    return 0;                                    /* success return 0 */
 8000558:	2300      	movs	r3, #0
}
 800055a:	4618      	mov	r0, r3
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
	...

08000568 <mpu6050_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu6050_init(mpu6050_handle_t *handle)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;

    if (handle == NULL)                                                             /* check handle */
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d101      	bne.n	800057a <mpu6050_init+0x12>
    {
        return 2;                                                                   /* return error */
 8000576:	2302      	movs	r3, #2
 8000578:	e0bc      	b.n	80006f4 <mpu6050_init+0x18c>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d101      	bne.n	8000586 <mpu6050_init+0x1e>
    {
        return 3;                                                                   /* return error */
 8000582:	2303      	movs	r3, #3
 8000584:	e0b6      	b.n	80006f4 <mpu6050_init+0x18c>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d105      	bne.n	800059a <mpu6050_init+0x32>
    {
        handle->debug_print("mpu6050: iic_init is null.\n");                        /* iic_init is null */
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	485a      	ldr	r0, [pc, #360]	; (80006fc <mpu6050_init+0x194>)
 8000594:	4798      	blx	r3

        return 3;                                                                   /* return error */
 8000596:	2303      	movs	r3, #3
 8000598:	e0ac      	b.n	80006f4 <mpu6050_init+0x18c>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d105      	bne.n	80005ae <mpu6050_init+0x46>
    {
        handle->debug_print("mpu6050: iic_deinit is null.\n");                      /* iic_deinit is null */
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	4856      	ldr	r0, [pc, #344]	; (8000700 <mpu6050_init+0x198>)
 80005a8:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80005aa:	2303      	movs	r3, #3
 80005ac:	e0a2      	b.n	80006f4 <mpu6050_init+0x18c>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d105      	bne.n	80005c2 <mpu6050_init+0x5a>
    {
        handle->debug_print("mpu6050: iic_read is null.\n");                        /* iic_read is null */
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4852      	ldr	r0, [pc, #328]	; (8000704 <mpu6050_init+0x19c>)
 80005bc:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80005be:	2303      	movs	r3, #3
 80005c0:	e098      	b.n	80006f4 <mpu6050_init+0x18c>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	691b      	ldr	r3, [r3, #16]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d105      	bne.n	80005d6 <mpu6050_init+0x6e>
    {
        handle->debug_print("mpu6050: iic_write is null.\n");                       /* iic_write is null */
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	699b      	ldr	r3, [r3, #24]
 80005ce:	484e      	ldr	r0, [pc, #312]	; (8000708 <mpu6050_init+0x1a0>)
 80005d0:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80005d2:	2303      	movs	r3, #3
 80005d4:	e08e      	b.n	80006f4 <mpu6050_init+0x18c>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d105      	bne.n	80005ea <mpu6050_init+0x82>
    {
        handle->debug_print("mpu6050: delay_ms is null.\n");                        /* delay_ms is null */
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	484a      	ldr	r0, [pc, #296]	; (800070c <mpu6050_init+0x1a4>)
 80005e4:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80005e6:	2303      	movs	r3, #3
 80005e8:	e084      	b.n	80006f4 <mpu6050_init+0x18c>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	69db      	ldr	r3, [r3, #28]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d105      	bne.n	80005fe <mpu6050_init+0x96>
    {
        handle->debug_print("mpu6050: receive_callback is null.\n");                /* receive_callback is null */
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	4846      	ldr	r0, [pc, #280]	; (8000710 <mpu6050_init+0x1a8>)
 80005f8:	4798      	blx	r3

        return 3;                                                                   /* return error */
 80005fa:	2303      	movs	r3, #3
 80005fc:	e07a      	b.n	80006f4 <mpu6050_init+0x18c>
    }

    res = handle->iic_init();                                                       /* iic init */
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	685b      	ldr	r3, [r3, #4]
 8000602:	4798      	blx	r3
 8000604:	4603      	mov	r3, r0
 8000606:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8000608:	7afb      	ldrb	r3, [r7, #11]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d005      	beq.n	800061a <mpu6050_init+0xb2>
    {
        handle->debug_print("mpu6050: iic init failed.\n");                         /* iic init failed */
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4840      	ldr	r0, [pc, #256]	; (8000714 <mpu6050_init+0x1ac>)
 8000614:	4798      	blx	r3

        return 1;                                                                   /* return error */
 8000616:	2301      	movs	r3, #1
 8000618:	e06c      	b.n	80006f4 <mpu6050_init+0x18c>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_WHO_AM_I, &prev, 1);               /* read who am I */
 800061a:	f107 020a 	add.w	r2, r7, #10
 800061e:	2301      	movs	r3, #1
 8000620:	2175      	movs	r1, #117	; 0x75
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f7ff ff52 	bl	80004cc <a_mpu6050_iic_read>
 8000628:	4603      	mov	r3, r0
 800062a:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 800062c:	7afb      	ldrb	r3, [r7, #11]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d008      	beq.n	8000644 <mpu6050_init+0xdc>
    {
        handle->debug_print("mpu6050: read who am i failed.\n");                    /* read who am I failed */
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4838      	ldr	r0, [pc, #224]	; (8000718 <mpu6050_init+0x1b0>)
 8000638:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	4798      	blx	r3

        return 5;                                                                   /* return error */
 8000640:	2305      	movs	r3, #5
 8000642:	e057      	b.n	80006f4 <mpu6050_init+0x18c>
    }
    if (prev != 0x68)                                                               /* check the id */
 8000644:	7abb      	ldrb	r3, [r7, #10]
 8000646:	2b68      	cmp	r3, #104	; 0x68
 8000648:	d008      	beq.n	800065c <mpu6050_init+0xf4>
    {
        handle->debug_print("mpu6050: id is invalid.\n");                           /* id is invalid */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4833      	ldr	r0, [pc, #204]	; (800071c <mpu6050_init+0x1b4>)
 8000650:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	689b      	ldr	r3, [r3, #8]
 8000656:	4798      	blx	r3

        return 5;                                                                   /* return error */
 8000658:	2305      	movs	r3, #5
 800065a:	e04b      	b.n	80006f4 <mpu6050_init+0x18c>
    }

    prev = 1 << 7;                                                                  /* reset the device */
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	72bb      	strb	r3, [r7, #10]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8000660:	f107 020a 	add.w	r2, r7, #10
 8000664:	2301      	movs	r3, #1
 8000666:	216b      	movs	r1, #107	; 0x6b
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ff4b 	bl	8000504 <a_mpu6050_iic_write>
 800066e:	4603      	mov	r3, r0
 8000670:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d008      	beq.n	800068a <mpu6050_init+0x122>
    {
        handle->debug_print("mpu6050: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4828      	ldr	r0, [pc, #160]	; (8000720 <mpu6050_init+0x1b8>)
 800067e:	4798      	blx	r3
        (void)handle->iic_deinit();                                                 /* iic deinit */
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	4798      	blx	r3

        return 4;                                                                   /* return error */
 8000686:	2304      	movs	r3, #4
 8000688:	e034      	b.n	80006f4 <mpu6050_init+0x18c>
    }
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 800068e:	e029      	b.n	80006e4 <mpu6050_init+0x17c>
    {
        res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);         /* read pwr mgmt 1 */
 8000690:	f107 020a 	add.w	r2, r7, #10
 8000694:	2301      	movs	r3, #1
 8000696:	216b      	movs	r1, #107	; 0x6b
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f7ff ff17 	bl	80004cc <a_mpu6050_iic_read>
 800069e:	4603      	mov	r3, r0
 80006a0:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 80006a2:	7afb      	ldrb	r3, [r7, #11]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d008      	beq.n	80006ba <mpu6050_init+0x152>
        {
            handle->debug_print("mpu6050: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	481d      	ldr	r0, [pc, #116]	; (8000724 <mpu6050_init+0x1bc>)
 80006ae:	4798      	blx	r3
            (void)handle->iic_deinit();                                             /* iic deinit */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	4798      	blx	r3

            return 4;                                                               /* return error */
 80006b6:	2304      	movs	r3, #4
 80006b8:	e01c      	b.n	80006f4 <mpu6050_init+0x18c>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 80006ba:	7abb      	ldrb	r3, [r7, #10]
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	db09      	blt.n	80006d6 <mpu6050_init+0x16e>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2201      	movs	r2, #1
 80006c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            handle->dmp_inited = 0;                                                 /* flag closed */
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

            return 0;                                                               /* success return 0 */
 80006d2:	2300      	movs	r3, #0
 80006d4:	e00e      	b.n	80006f4 <mpu6050_init+0x18c>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	200a      	movs	r0, #10
 80006dc:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	3b01      	subs	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1d2      	bne.n	8000690 <mpu6050_init+0x128>
    }

    handle->debug_print("mpu6050: reset failed.\n");                                /* reset failed */
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	480e      	ldr	r0, [pc, #56]	; (8000728 <mpu6050_init+0x1c0>)
 80006f0:	4798      	blx	r3

    return 4;                                                                       /* return error */
 80006f2:	2304      	movs	r3, #4
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	08004e68 	.word	0x08004e68
 8000700:	08004e84 	.word	0x08004e84
 8000704:	08004ea4 	.word	0x08004ea4
 8000708:	08004ec0 	.word	0x08004ec0
 800070c:	08004ee0 	.word	0x08004ee0
 8000710:	08004efc 	.word	0x08004efc
 8000714:	08004f20 	.word	0x08004f20
 8000718:	08004f3c 	.word	0x08004f3c
 800071c:	08004f5c 	.word	0x08004f5c
 8000720:	08004f78 	.word	0x08004f78
 8000724:	08004f9c 	.word	0x08004f9c
 8000728:	08004fc0 	.word	0x08004fc0

0800072c <mpu6050_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu6050_deinit(mpu6050_handle_t *handle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                             /* check handle */
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d101      	bne.n	800073e <mpu6050_deinit+0x12>
    {
        return 2;                                                                   /* return error */
 800073a:	2302      	movs	r3, #2
 800073c:	e031      	b.n	80007a2 <mpu6050_deinit+0x76>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000744:	2b01      	cmp	r3, #1
 8000746:	d001      	beq.n	800074c <mpu6050_deinit+0x20>
    {
        return 3;                                                                   /* return error */
 8000748:	2303      	movs	r3, #3
 800074a:	e02a      	b.n	80007a2 <mpu6050_deinit+0x76>
    }

    prev = (1 << 6) | (1 << 3) | (7 << 0);                                          /* enter sleep mode */
 800074c:	234f      	movs	r3, #79	; 0x4f
 800074e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8000750:	f107 020e 	add.w	r2, r7, #14
 8000754:	2301      	movs	r3, #1
 8000756:	216b      	movs	r1, #107	; 0x6b
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff fed3 	bl	8000504 <a_mpu6050_iic_write>
 800075e:	4603      	mov	r3, r0
 8000760:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d005      	beq.n	8000774 <mpu6050_deinit+0x48>
    {
        handle->debug_print("mpu6050: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	480f      	ldr	r0, [pc, #60]	; (80007ac <mpu6050_deinit+0x80>)
 800076e:	4798      	blx	r3

        return 4;                                                                   /* return error */
 8000770:	2304      	movs	r3, #4
 8000772:	e016      	b.n	80007a2 <mpu6050_deinit+0x76>
    }
    res = handle->iic_deinit();                                                     /* iic deinit */
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	689b      	ldr	r3, [r3, #8]
 8000778:	4798      	blx	r3
 800077a:	4603      	mov	r3, r0
 800077c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check the result */
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <mpu6050_deinit+0x64>
    {
        handle->debug_print("mpu6050: iic deinit failed.\n");                       /* iic deinit failed */
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <mpu6050_deinit+0x84>)
 800078a:	4798      	blx	r3

        return 1;                                                                   /* return error */
 800078c:	2301      	movs	r3, #1
 800078e:	e008      	b.n	80007a2 <mpu6050_deinit+0x76>
    }
    handle->inited = 0;                                                             /* flag closed */
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    handle->dmp_inited = 0;                                                         /* flag closed */
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    return 0;                                                                       /* success return 0 */
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	08004f78 	.word	0x08004f78
 80007b0:	08004fd8 	.word	0x08004fd8

080007b4 <mpu6050_read>:
 *                - 6 fifo conf is error
 * @note          none
 */
uint8_t mpu6050_read(mpu6050_handle_t *handle, int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3], uint16_t *len)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
 80007c0:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;

    if (handle == NULL)                                                                            /* check handle */
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d102      	bne.n	80007ce <mpu6050_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 80007c8:	2302      	movs	r3, #2
 80007ca:	f000 be7c 	b.w	80014c6 <mpu6050_read+0xd12>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d002      	beq.n	80007de <mpu6050_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 80007d8:	2303      	movs	r3, #3
 80007da:	f000 be74 	b.w	80014c6 <mpu6050_read+0xd12>
    }
    if ((*len) == 0)                                                                               /* check length */
 80007de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d106      	bne.n	80007f4 <mpu6050_read+0x40>
    {
        handle->debug_print("mpu6050: length is zero.\n");                                         /* length is zero */
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	486a      	ldr	r0, [pc, #424]	; (8000994 <mpu6050_read+0x1e0>)
 80007ec:	4798      	blx	r3

        return 4;                                                                                  /* return error */
 80007ee:	2304      	movs	r3, #4
 80007f0:	f000 be69 	b.w	80014c6 <mpu6050_read+0xd12>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d006      	beq.n	800080c <mpu6050_read+0x58>
    {
        handle->debug_print("mpu6050: dmp is running.\n");                                         /* dmp is running */
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4865      	ldr	r0, [pc, #404]	; (8000998 <mpu6050_read+0x1e4>)
 8000804:	4798      	blx	r3

        return 5;                                                                                  /* return error */
 8000806:	2305      	movs	r3, #5
 8000808:	f000 be5d 	b.w	80014c6 <mpu6050_read+0xd12>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);                  /* read config */
 800080c:	f107 0219 	add.w	r2, r7, #25
 8000810:	2301      	movs	r3, #1
 8000812:	216a      	movs	r1, #106	; 0x6a
 8000814:	68f8      	ldr	r0, [r7, #12]
 8000816:	f7ff fe59 	bl	80004cc <a_mpu6050_iic_read>
 800081a:	4603      	mov	r3, r0
 800081c:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 800081e:	7f7b      	ldrb	r3, [r7, #29]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d006      	beq.n	8000832 <mpu6050_read+0x7e>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                                  /* read user ctrl failed */
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	485c      	ldr	r0, [pc, #368]	; (800099c <mpu6050_read+0x1e8>)
 800082a:	4798      	blx	r3

        return 1;                                                                                  /* return error */
 800082c:	2301      	movs	r3, #1
 800082e:	f000 be4a 	b.w	80014c6 <mpu6050_read+0xd12>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);         /* read accel config */
 8000832:	f107 0218 	add.w	r2, r7, #24
 8000836:	2301      	movs	r3, #1
 8000838:	211c      	movs	r1, #28
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f7ff fe46 	bl	80004cc <a_mpu6050_iic_read>
 8000840:	4603      	mov	r3, r0
 8000842:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8000844:	7f7b      	ldrb	r3, [r7, #29]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d006      	beq.n	8000858 <mpu6050_read+0xa4>
    {
        handle->debug_print("mpu6050: read accel config failed.\n");                               /* read accel config failed */
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	699b      	ldr	r3, [r3, #24]
 800084e:	4854      	ldr	r0, [pc, #336]	; (80009a0 <mpu6050_read+0x1ec>)
 8000850:	4798      	blx	r3

        return 1;                                                                                  /* return error */
 8000852:	2301      	movs	r3, #1
 8000854:	f000 be37 	b.w	80014c6 <mpu6050_read+0xd12>
    }
    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);           /* read gyro config */
 8000858:	f107 0217 	add.w	r2, r7, #23
 800085c:	2301      	movs	r3, #1
 800085e:	211b      	movs	r1, #27
 8000860:	68f8      	ldr	r0, [r7, #12]
 8000862:	f7ff fe33 	bl	80004cc <a_mpu6050_iic_read>
 8000866:	4603      	mov	r3, r0
 8000868:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 800086a:	7f7b      	ldrb	r3, [r7, #29]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d006      	beq.n	800087e <mpu6050_read+0xca>
    {
        handle->debug_print("mpu6050: read gyro config failed.\n");                                /* read gyro config failed */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	484b      	ldr	r0, [pc, #300]	; (80009a4 <mpu6050_read+0x1f0>)
 8000876:	4798      	blx	r3

        return 1;                                                                                  /* return error */
 8000878:	2301      	movs	r3, #1
 800087a:	f000 be24 	b.w	80014c6 <mpu6050_read+0xd12>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 800087e:	7e3b      	ldrb	r3, [r7, #24]
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f003 0303 	and.w	r3, r3, #3
 8000888:	b2db      	uxtb	r3, r3
 800088a:	763b      	strb	r3, [r7, #24]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 800088c:	7dfb      	ldrb	r3, [r7, #23]
 800088e:	08db      	lsrs	r3, r3, #3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	f003 0303 	and.w	r3, r3, #3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	75fb      	strb	r3, [r7, #23]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 800089a:	7e7b      	ldrb	r3, [r7, #25]
 800089c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f000 8430 	beq.w	8001106 <mpu6050_read+0x952>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;

        res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&conf, 1);                /* read fifo enable */
 80008a6:	f107 0216 	add.w	r2, r7, #22
 80008aa:	2301      	movs	r3, #1
 80008ac:	2123      	movs	r1, #35	; 0x23
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f7ff fe0c 	bl	80004cc <a_mpu6050_iic_read>
 80008b4:	4603      	mov	r3, r0
 80008b6:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80008b8:	7f7b      	ldrb	r3, [r7, #29]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d006      	beq.n	80008cc <mpu6050_read+0x118>
        {
            handle->debug_print("mpu6050: read fifo enable failed.\n");                            /* read fifo enable failed */
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	4839      	ldr	r0, [pc, #228]	; (80009a8 <mpu6050_read+0x1f4>)
 80008c4:	4798      	blx	r3

            return 1;                                                                              /* return error */
 80008c6:	2301      	movs	r3, #1
 80008c8:	f000 bdfd 	b.w	80014c6 <mpu6050_read+0xd12>
        }
        if (conf != 0x78)                                                                          /* check the conf */
 80008cc:	7dbb      	ldrb	r3, [r7, #22]
 80008ce:	2b78      	cmp	r3, #120	; 0x78
 80008d0:	d006      	beq.n	80008e0 <mpu6050_read+0x12c>
        {
            handle->debug_print("mpu6050: fifo conf is error.\n");                                 /* fifo conf is error */
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	4835      	ldr	r0, [pc, #212]	; (80009ac <mpu6050_read+0x1f8>)
 80008d8:	4798      	blx	r3

            return 6;                                                                              /* return error */
 80008da:	2306      	movs	r3, #6
 80008dc:	f000 bdf3 	b.w	80014c6 <mpu6050_read+0xd12>
        }

        res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_COUNTH, (uint8_t *)buf, 2);              /* read fifo count */
 80008e0:	f107 0214 	add.w	r2, r7, #20
 80008e4:	2302      	movs	r3, #2
 80008e6:	2172      	movs	r1, #114	; 0x72
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f7ff fdef 	bl	80004cc <a_mpu6050_iic_read>
 80008ee:	4603      	mov	r3, r0
 80008f0:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80008f2:	7f7b      	ldrb	r3, [r7, #29]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d006      	beq.n	8000906 <mpu6050_read+0x152>
        {
            handle->debug_print("mpu6050: read fifo count failed.\n");                             /* read fifo count failed */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	482c      	ldr	r0, [pc, #176]	; (80009b0 <mpu6050_read+0x1fc>)
 80008fe:	4798      	blx	r3

            return 1;                                                                              /* return error */
 8000900:	2301      	movs	r3, #1
 8000902:	f000 bde0 	b.w	80014c6 <mpu6050_read+0xd12>
        }
        count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                      /* set count */
 8000906:	7d3b      	ldrb	r3, [r7, #20]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7d7b      	ldrb	r3, [r7, #21]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21b      	sxth	r3, r3
 8000914:	837b      	strh	r3, [r7, #26]
        count = (count < 1024) ? count : 1024;                                                     /* just the counter */
 8000916:	8b7b      	ldrh	r3, [r7, #26]
 8000918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800091c:	bf28      	it	cs
 800091e:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8000922:	837b      	strh	r3, [r7, #26]
        count = (count < ((*len) * 12)) ? count : ((*len) * 12);                                   /* just outer buffer size */
 8000924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4613      	mov	r3, r2
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	4413      	add	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	461a      	mov	r2, r3
 8000934:	8b7b      	ldrh	r3, [r7, #26]
 8000936:	4293      	cmp	r3, r2
 8000938:	bfa8      	it	ge
 800093a:	4613      	movge	r3, r2
 800093c:	837b      	strh	r3, [r7, #26]
        count = (count / 12) * 12;                                                                 /* 12 times */
 800093e:	8b7b      	ldrh	r3, [r7, #26]
 8000940:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <mpu6050_read+0x200>)
 8000942:	fba2 2303 	umull	r2, r3, r2, r3
 8000946:	08db      	lsrs	r3, r3, #3
 8000948:	b29b      	uxth	r3, r3
 800094a:	461a      	mov	r2, r3
 800094c:	0052      	lsls	r2, r2, #1
 800094e:	4413      	add	r3, r2
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	837b      	strh	r3, [r7, #26]
        *len = count / 12;                                                                         /* set the output length */
 8000954:	8b7b      	ldrh	r3, [r7, #26]
 8000956:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <mpu6050_read+0x200>)
 8000958:	fba2 2303 	umull	r2, r3, r2, r3
 800095c:	08db      	lsrs	r3, r3, #3
 800095e:	b29a      	uxth	r2, r3
 8000960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000962:	801a      	strh	r2, [r3, #0]
        res = a_mpu6050_iic_read(handle, MPU6050_REG_R_W, handle->buf, count);                     /* read data */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 800096a:	8b7b      	ldrh	r3, [r7, #26]
 800096c:	2174      	movs	r1, #116	; 0x74
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff fdac 	bl	80004cc <a_mpu6050_iic_read>
 8000974:	4603      	mov	r3, r0
 8000976:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8000978:	7f7b      	ldrb	r3, [r7, #29]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d006      	beq.n	800098c <mpu6050_read+0x1d8>
        {
            handle->debug_print("mpu6050: read failed.\n");                                        /* read failed */
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	480d      	ldr	r0, [pc, #52]	; (80009b8 <mpu6050_read+0x204>)
 8000984:	4798      	blx	r3

            return 1;                                                                              /* return error */
 8000986:	2301      	movs	r3, #1
 8000988:	f000 bd9d 	b.w	80014c6 <mpu6050_read+0xd12>
        }
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 800098c:	2300      	movs	r3, #0
 800098e:	83fb      	strh	r3, [r7, #30]
 8000990:	e3b1      	b.n	80010f6 <mpu6050_read+0x942>
 8000992:	bf00      	nop
 8000994:	08004ff8 	.word	0x08004ff8
 8000998:	08004b58 	.word	0x08004b58
 800099c:	08004e20 	.word	0x08004e20
 80009a0:	08004dd8 	.word	0x08004dd8
 80009a4:	08004dfc 	.word	0x08004dfc
 80009a8:	08005014 	.word	0x08005014
 80009ac:	08005038 	.word	0x08005038
 80009b0:	08004d5c 	.word	0x08004d5c
 80009b4:	aaaaaaab 	.word	0xaaaaaaab
 80009b8:	08004d80 	.word	0x08004d80
 80009bc:	46800000 	.word	0x46800000
 80009c0:	46000000 	.word	0x46000000
        {
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) |
 80009c4:	8bfa      	ldrh	r2, [r7, #30]
 80009c6:	4613      	mov	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	461a      	mov	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4413      	add	r3, r2
 80009d4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 1];                                  /* set raw accel x */
 80009dc:	8bfa      	ldrh	r2, [r7, #30]
 80009de:	4613      	mov	r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	4413      	add	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	3301      	adds	r3, #1
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	4413      	add	r3, r2
 80009ec:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80009f0:	b219      	sxth	r1, r3
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) |
 80009f2:	8bfa      	ldrh	r2, [r7, #30]
 80009f4:	4613      	mov	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	461a      	mov	r2, r3
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	4413      	add	r3, r2
 8000a02:	ea40 0201 	orr.w	r2, r0, r1
 8000a06:	b212      	sxth	r2, r2
 8000a08:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) |
 8000a0a:	8bfa      	ldrh	r2, [r7, #30]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	3302      	adds	r3, #2
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000a1e:	021b      	lsls	r3, r3, #8
 8000a20:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 3];                                  /* set raw accel y */
 8000a22:	8bfa      	ldrh	r2, [r7, #30]
 8000a24:	4613      	mov	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	3303      	adds	r3, #3
 8000a2e:	68fa      	ldr	r2, [r7, #12]
 8000a30:	4413      	add	r3, r2
 8000a32:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000a36:	b219      	sxth	r1, r3
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) |
 8000a38:	8bfa      	ldrh	r2, [r7, #30]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	461a      	mov	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	4413      	add	r3, r2
 8000a48:	ea40 0201 	orr.w	r2, r0, r1
 8000a4c:	b212      	sxth	r2, r2
 8000a4e:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) |
 8000a50:	8bfa      	ldrh	r2, [r7, #30]
 8000a52:	4613      	mov	r3, r2
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	4413      	add	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4413      	add	r3, r2
 8000a60:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 5];                                  /* set raw accel z */
 8000a68:	8bfa      	ldrh	r2, [r7, #30]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	3305      	adds	r3, #5
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	4413      	add	r3, r2
 8000a78:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000a7c:	b219      	sxth	r1, r3
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) |
 8000a7e:	8bfa      	ldrh	r2, [r7, #30]
 8000a80:	4613      	mov	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	4413      	add	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	461a      	mov	r2, r3
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	ea40 0201 	orr.w	r2, r0, r1
 8000a92:	b212      	sxth	r2, r2
 8000a94:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) |
 8000a96:	8bfa      	ldrh	r2, [r7, #30]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	3306      	adds	r3, #6
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000aaa:	021b      	lsls	r3, r3, #8
 8000aac:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 7];                                   /* set raw gyro x */
 8000aae:	8bfa      	ldrh	r2, [r7, #30]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	4413      	add	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	3307      	adds	r3, #7
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	4413      	add	r3, r2
 8000abe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000ac2:	b219      	sxth	r1, r3
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) |
 8000ac4:	8bfa      	ldrh	r2, [r7, #30]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	4413      	add	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	461a      	mov	r2, r3
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	ea40 0201 	orr.w	r2, r0, r1
 8000ad8:	b212      	sxth	r2, r2
 8000ada:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) |
 8000adc:	8bfa      	ldrh	r2, [r7, #30]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	3308      	adds	r3, #8
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 9];                                   /* set raw gyro y */
 8000af4:	8bfa      	ldrh	r2, [r7, #30]
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	3309      	adds	r3, #9
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	4413      	add	r3, r2
 8000b04:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000b08:	b219      	sxth	r1, r3
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) |
 8000b0a:	8bfa      	ldrh	r2, [r7, #30]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	461a      	mov	r2, r3
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	4413      	add	r3, r2
 8000b1a:	ea40 0201 	orr.w	r2, r0, r1
 8000b1e:	b212      	sxth	r2, r2
 8000b20:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) |
 8000b22:	8bfa      	ldrh	r2, [r7, #30]
 8000b24:	4613      	mov	r3, r2
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4413      	add	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	330a      	adds	r3, #10
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	4413      	add	r3, r2
 8000b32:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 11];                                  /* set raw gyro z */
 8000b3a:	8bfa      	ldrh	r2, [r7, #30]
 8000b3c:	4613      	mov	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	4413      	add	r3, r2
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	330b      	adds	r3, #11
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000b4e:	b219      	sxth	r1, r3
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) |
 8000b50:	8bfa      	ldrh	r2, [r7, #30]
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	ea40 0201 	orr.w	r2, r0, r1
 8000b64:	b212      	sxth	r2, r2
 8000b66:	809a      	strh	r2, [r3, #4]

            if (accel_conf == 0)                                                                   /* ±2g */
 8000b68:	7e3b      	ldrb	r3, [r7, #24]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d154      	bne.n	8000c18 <mpu6050_read+0x464>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                               /* set accel x */
 8000b6e:	8bfa      	ldrh	r2, [r7, #30]
 8000b70:	4613      	mov	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4413      	add	r3, r2
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	461a      	mov	r2, r3
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b82:	ee07 3a90 	vmov	s15, r3
 8000b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b8a:	8bfa      	ldrh	r2, [r7, #30]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	ed5f 6a78 	vldr	s13, [pc, #-480]	; 80009bc <mpu6050_read+0x208>
 8000b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ba2:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                               /* set accel y */
 8000ba6:	8bfa      	ldrh	r2, [r7, #30]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000bba:	ee07 3a90 	vmov	s15, r3
 8000bbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bc2:	8bfa      	ldrh	r2, [r7, #30]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	461a      	mov	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	ed5f 6a86 	vldr	s13, [pc, #-536]	; 80009bc <mpu6050_read+0x208>
 8000bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bda:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                               /* set accel z */
 8000bde:	8bfa      	ldrh	r2, [r7, #30]
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	461a      	mov	r2, r3
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	4413      	add	r3, r2
 8000bee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000bf2:	ee07 3a90 	vmov	s15, r3
 8000bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bfa:	8bfa      	ldrh	r2, [r7, #30]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	461a      	mov	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	ed5f 6a94 	vldr	s13, [pc, #-592]	; 80009bc <mpu6050_read+0x208>
 8000c0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c12:	edc3 7a02 	vstr	s15, [r3, #8]
 8000c16:	e103      	b.n	8000e20 <mpu6050_read+0x66c>
            }
            else if (accel_conf == 1)                                                              /* ±4g */
 8000c18:	7e3b      	ldrb	r3, [r7, #24]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d154      	bne.n	8000cc8 <mpu6050_read+0x514>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                                /* set accel x */
 8000c1e:	8bfa      	ldrh	r2, [r7, #30]
 8000c20:	4613      	mov	r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4413      	add	r3, r2
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	461a      	mov	r2, r3
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c32:	ee07 3a90 	vmov	s15, r3
 8000c36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c3a:	8bfa      	ldrh	r2, [r7, #30]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	461a      	mov	r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	ed5f 6aa3 	vldr	s13, [pc, #-652]	; 80009c0 <mpu6050_read+0x20c>
 8000c4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c52:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                                /* set accel y */
 8000c56:	8bfa      	ldrh	r2, [r7, #30]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	461a      	mov	r2, r3
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	4413      	add	r3, r2
 8000c66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c72:	8bfa      	ldrh	r2, [r7, #30]
 8000c74:	4613      	mov	r3, r2
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	4413      	add	r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	ed5f 6ab1 	vldr	s13, [pc, #-708]	; 80009c0 <mpu6050_read+0x20c>
 8000c86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c8a:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                                /* set accel z */
 8000c8e:	8bfa      	ldrh	r2, [r7, #30]
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	461a      	mov	r2, r3
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000caa:	8bfa      	ldrh	r2, [r7, #30]
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	ed5f 6abf 	vldr	s13, [pc, #-764]	; 80009c0 <mpu6050_read+0x20c>
 8000cbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cc2:	edc3 7a02 	vstr	s15, [r3, #8]
 8000cc6:	e0ab      	b.n	8000e20 <mpu6050_read+0x66c>
            }
            else if (accel_conf == 2)                                                              /* ±8g */
 8000cc8:	7e3b      	ldrb	r3, [r7, #24]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d154      	bne.n	8000d78 <mpu6050_read+0x5c4>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                                /* set accel x */
 8000cce:	8bfa      	ldrh	r2, [r7, #30]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	461a      	mov	r2, r3
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce2:	ee07 3a90 	vmov	s15, r3
 8000ce6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cea:	8bfa      	ldrh	r2, [r7, #30]
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	eddf 6acd 	vldr	s13, [pc, #820]	; 8001030 <mpu6050_read+0x87c>
 8000cfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d02:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                                /* set accel y */
 8000d06:	8bfa      	ldrh	r2, [r7, #30]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	461a      	mov	r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	4413      	add	r3, r2
 8000d16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d1a:	ee07 3a90 	vmov	s15, r3
 8000d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d22:	8bfa      	ldrh	r2, [r7, #30]
 8000d24:	4613      	mov	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4413      	add	r3, r2
 8000d32:	eddf 6abf 	vldr	s13, [pc, #764]	; 8001030 <mpu6050_read+0x87c>
 8000d36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d3a:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                                /* set accel z */
 8000d3e:	8bfa      	ldrh	r2, [r7, #30]
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d52:	ee07 3a90 	vmov	s15, r3
 8000d56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d5a:	8bfa      	ldrh	r2, [r7, #30]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	461a      	mov	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	eddf 6ab1 	vldr	s13, [pc, #708]	; 8001030 <mpu6050_read+0x87c>
 8000d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d72:	edc3 7a02 	vstr	s15, [r3, #8]
 8000d76:	e053      	b.n	8000e20 <mpu6050_read+0x66c>
            }
            else                                                                                   /* ±16g */
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                                /* set accel x */
 8000d78:	8bfa      	ldrh	r2, [r7, #30]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	461a      	mov	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	4413      	add	r3, r2
 8000d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d8c:	ee07 3a90 	vmov	s15, r3
 8000d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d94:	8bfa      	ldrh	r2, [r7, #30]
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8001034 <mpu6050_read+0x880>
 8000da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dac:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                                /* set accel y */
 8000db0:	8bfa      	ldrh	r2, [r7, #30]
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dc4:	ee07 3a90 	vmov	s15, r3
 8000dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dcc:	8bfa      	ldrh	r2, [r7, #30]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	eddf 6a95 	vldr	s13, [pc, #596]	; 8001034 <mpu6050_read+0x880>
 8000de0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000de4:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                                /* set accel z */
 8000de8:	8bfa      	ldrh	r2, [r7, #30]
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	461a      	mov	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4413      	add	r3, r2
 8000df8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dfc:	ee07 3a90 	vmov	s15, r3
 8000e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e04:	8bfa      	ldrh	r2, [r7, #30]
 8000e06:	4613      	mov	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	461a      	mov	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	eddf 6a87 	vldr	s13, [pc, #540]	; 8001034 <mpu6050_read+0x880>
 8000e18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e1c:	edc3 7a02 	vstr	s15, [r3, #8]
            }

            if (gyro_conf == 0)                                                                    /* ±250dps */
 8000e20:	7dfb      	ldrb	r3, [r7, #23]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d154      	bne.n	8000ed0 <mpu6050_read+0x71c>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                                 /* set gyro x */
 8000e26:	8bfa      	ldrh	r2, [r7, #30]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	4413      	add	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	461a      	mov	r2, r3
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	4413      	add	r3, r2
 8000e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e3a:	ee07 3a90 	vmov	s15, r3
 8000e3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e42:	8bfa      	ldrh	r2, [r7, #30]
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e50:	4413      	add	r3, r2
 8000e52:	eddf 6a79 	vldr	s13, [pc, #484]	; 8001038 <mpu6050_read+0x884>
 8000e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e5a:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                                 /* set gyro y */
 8000e5e:	8bfa      	ldrh	r2, [r7, #30]
 8000e60:	4613      	mov	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	4413      	add	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	461a      	mov	r2, r3
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e7a:	8bfa      	ldrh	r2, [r7, #30]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	461a      	mov	r2, r3
 8000e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e88:	4413      	add	r3, r2
 8000e8a:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8001038 <mpu6050_read+0x884>
 8000e8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e92:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                                 /* set gyro z */
 8000e96:	8bfa      	ldrh	r2, [r7, #30]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eb2:	8bfa      	ldrh	r2, [r7, #30]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec0:	4413      	add	r3, r2
 8000ec2:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001038 <mpu6050_read+0x884>
 8000ec6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000eca:	edc3 7a02 	vstr	s15, [r3, #8]
 8000ece:	e10f      	b.n	80010f0 <mpu6050_read+0x93c>
            }
            else if (gyro_conf == 1)                                                               /* ±500dps */
 8000ed0:	7dfb      	ldrb	r3, [r7, #23]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d154      	bne.n	8000f80 <mpu6050_read+0x7cc>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                                  /* set gyro x */
 8000ed6:	8bfa      	ldrh	r2, [r7, #30]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eea:	ee07 3a90 	vmov	s15, r3
 8000eee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ef2:	8bfa      	ldrh	r2, [r7, #30]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	461a      	mov	r2, r3
 8000efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f00:	4413      	add	r3, r2
 8000f02:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800103c <mpu6050_read+0x888>
 8000f06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f0a:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                                  /* set gyro y */
 8000f0e:	8bfa      	ldrh	r2, [r7, #30]
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	461a      	mov	r2, r3
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2a:	8bfa      	ldrh	r2, [r7, #30]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	4413      	add	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	461a      	mov	r2, r3
 8000f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f38:	4413      	add	r3, r2
 8000f3a:	eddf 6a40 	vldr	s13, [pc, #256]	; 800103c <mpu6050_read+0x888>
 8000f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f42:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                                  /* set gyro z */
 8000f46:	8bfa      	ldrh	r2, [r7, #30]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	461a      	mov	r2, r3
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f62:	8bfa      	ldrh	r2, [r7, #30]
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f70:	4413      	add	r3, r2
 8000f72:	eddf 6a32 	vldr	s13, [pc, #200]	; 800103c <mpu6050_read+0x888>
 8000f76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f7a:	edc3 7a02 	vstr	s15, [r3, #8]
 8000f7e:	e0b7      	b.n	80010f0 <mpu6050_read+0x93c>
            }
            else if (gyro_conf == 2)                                                               /* ±1000dps */
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d160      	bne.n	8001048 <mpu6050_read+0x894>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                                  /* set gyro x */
 8000f86:	8bfa      	ldrh	r2, [r7, #30]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	461a      	mov	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	4413      	add	r3, r2
 8000f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa2:	8bfa      	ldrh	r2, [r7, #30]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	461a      	mov	r2, r3
 8000fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb0:	4413      	add	r3, r2
 8000fb2:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001040 <mpu6050_read+0x88c>
 8000fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fba:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                                  /* set gyro y */
 8000fbe:	8bfa      	ldrh	r2, [r7, #30]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	461a      	mov	r2, r3
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	4413      	add	r3, r2
 8000fce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fda:	8bfa      	ldrh	r2, [r7, #30]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe8:	4413      	add	r3, r2
 8000fea:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001040 <mpu6050_read+0x88c>
 8000fee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff2:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                                  /* set gyro z */
 8000ff6:	8bfa      	ldrh	r2, [r7, #30]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	461a      	mov	r2, r3
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	4413      	add	r3, r2
 8001006:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001012:	8bfa      	ldrh	r2, [r7, #30]
 8001014:	4613      	mov	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	461a      	mov	r2, r3
 800101e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001020:	4413      	add	r3, r2
 8001022:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001040 <mpu6050_read+0x88c>
 8001026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102a:	edc3 7a02 	vstr	s15, [r3, #8]
 800102e:	e05f      	b.n	80010f0 <mpu6050_read+0x93c>
 8001030:	45800000 	.word	0x45800000
 8001034:	45000000 	.word	0x45000000
 8001038:	43030000 	.word	0x43030000
 800103c:	42830000 	.word	0x42830000
 8001040:	42033333 	.word	0x42033333
 8001044:	41833333 	.word	0x41833333
            }
            else                                                                                   /* ±2000dps */
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                                  /* set gyro x */
 8001048:	8bfa      	ldrh	r2, [r7, #30]
 800104a:	4613      	mov	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	461a      	mov	r2, r3
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	4413      	add	r3, r2
 8001058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	8bfa      	ldrh	r2, [r7, #30]
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	461a      	mov	r2, r3
 8001070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001072:	4413      	add	r3, r2
 8001074:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8001044 <mpu6050_read+0x890>
 8001078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107c:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                                  /* set gyro y */
 8001080:	8bfa      	ldrh	r2, [r7, #30]
 8001082:	4613      	mov	r3, r2
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	4413      	add	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	461a      	mov	r2, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	4413      	add	r3, r2
 8001090:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109c:	8bfa      	ldrh	r2, [r7, #30]
 800109e:	4613      	mov	r3, r2
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	4413      	add	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	461a      	mov	r2, r3
 80010a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010aa:	4413      	add	r3, r2
 80010ac:	ed5f 6a1b 	vldr	s13, [pc, #-108]	; 8001044 <mpu6050_read+0x890>
 80010b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b4:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                                  /* set gyro z */
 80010b8:	8bfa      	ldrh	r2, [r7, #30]
 80010ba:	4613      	mov	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	4413      	add	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	461a      	mov	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d4:	8bfa      	ldrh	r2, [r7, #30]
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	461a      	mov	r2, r3
 80010e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e2:	4413      	add	r3, r2
 80010e4:	ed5f 6a29 	vldr	s13, [pc, #-164]	; 8001044 <mpu6050_read+0x890>
 80010e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ec:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 80010f0:	8bfb      	ldrh	r3, [r7, #30]
 80010f2:	3301      	adds	r3, #1
 80010f4:	83fb      	strh	r3, [r7, #30]
 80010f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	8bfa      	ldrh	r2, [r7, #30]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f4ff ac61 	bcc.w	80009c4 <mpu6050_read+0x210>
            }
        }

        return 0;                                                                                  /* success return 0 */
 8001102:	2300      	movs	r3, #0
 8001104:	e1df      	b.n	80014c6 <mpu6050_read+0xd12>
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 8001106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001108:	2201      	movs	r2, #1
 800110a:	801a      	strh	r2, [r3, #0]
        res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_XOUT_H, handle->buf, 14);               /* read data */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8001112:	230e      	movs	r3, #14
 8001114:	213b      	movs	r1, #59	; 0x3b
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f7ff f9d8 	bl	80004cc <a_mpu6050_iic_read>
 800111c:	4603      	mov	r3, r0
 800111e:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8001120:	7f7b      	ldrb	r3, [r7, #29]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d005      	beq.n	8001132 <mpu6050_read+0x97e>
        {
            handle->debug_print("mpu6050: read failed.\n");                                        /* read failed */
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	48b1      	ldr	r0, [pc, #708]	; (80013f0 <mpu6050_read+0xc3c>)
 800112c:	4798      	blx	r3

            return 1;                                                                              /* return error */
 800112e:	2301      	movs	r3, #1
 8001130:	e1c9      	b.n	80014c6 <mpu6050_read+0xd12>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001142:	b21b      	sxth	r3, r3
 8001144:	4313      	orrs	r3, r2
 8001146:	b21a      	sxth	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b21a      	sxth	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800115c:	b21b      	sxth	r3, r3
 800115e:	4313      	orrs	r3, r2
 8001160:	b21a      	sxth	r2, r3
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001176:	b21b      	sxth	r3, r3
 8001178:	4313      	orrs	r3, r2
 800117a:	b21a      	sxth	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8001190:	b21b      	sxth	r3, r3
 8001192:	4313      	orrs	r3, r2
 8001194:	b21a      	sxth	r2, r3
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b21a      	sxth	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	809a      	strh	r2, [r3, #4]

        if (accel_conf == 0)                                                                       /* ±2g */
 80011ce:	7e3b      	ldrb	r3, [r7, #24]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d12a      	bne.n	800122a <mpu6050_read+0xa76>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011da:	ee07 3a90 	vmov	s15, r3
 80011de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e2:	eddf 6a84 	vldr	s13, [pc, #528]	; 80013f4 <mpu6050_read+0xc40>
 80011e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011f6:	ee07 3a90 	vmov	s15, r3
 80011fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fe:	eddf 6a7d 	vldr	s13, [pc, #500]	; 80013f4 <mpu6050_read+0xc40>
 8001202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	eddf 6a76 	vldr	s13, [pc, #472]	; 80013f4 <mpu6050_read+0xc40>
 800121e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	edc3 7a02 	vstr	s15, [r3, #8]
 8001228:	e085      	b.n	8001336 <mpu6050_read+0xb82>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 800122a:	7e3b      	ldrb	r3, [r7, #24]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d12a      	bne.n	8001286 <mpu6050_read+0xad2>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123e:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80013f8 <mpu6050_read+0xc44>
 8001242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125a:	eddf 6a67 	vldr	s13, [pc, #412]	; 80013f8 <mpu6050_read+0xc44>
 800125e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001276:	eddf 6a60 	vldr	s13, [pc, #384]	; 80013f8 <mpu6050_read+0xc44>
 800127a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	edc3 7a02 	vstr	s15, [r3, #8]
 8001284:	e057      	b.n	8001336 <mpu6050_read+0xb82>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 8001286:	7e3b      	ldrb	r3, [r7, #24]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d12a      	bne.n	80012e2 <mpu6050_read+0xb2e>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80013fc <mpu6050_read+0xc48>
 800129e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b6:	eddf 6a51 	vldr	s13, [pc, #324]	; 80013fc <mpu6050_read+0xc48>
 80012ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d2:	eddf 6a4a 	vldr	s13, [pc, #296]	; 80013fc <mpu6050_read+0xc48>
 80012d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	edc3 7a02 	vstr	s15, [r3, #8]
 80012e0:	e029      	b.n	8001336 <mpu6050_read+0xb82>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f0:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001400 <mpu6050_read+0xc4c>
 80012f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001400 <mpu6050_read+0xc4c>
 8001310:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001328:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001400 <mpu6050_read+0xc4c>
 800132c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        if (gyro_conf == 0)                                                                        /* ±250dps */
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d12a      	bne.n	8001392 <mpu6050_read+0xbde>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001342:	ee07 3a90 	vmov	s15, r3
 8001346:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134a:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001404 <mpu6050_read+0xc50>
 800134e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001366:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001404 <mpu6050_read+0xc50>
 800136a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001382:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001404 <mpu6050_read+0xc50>
 8001386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138c:	edc3 7a02 	vstr	s15, [r3, #8]
 8001390:	e098      	b.n	80014c4 <mpu6050_read+0xd10>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 8001392:	7dfb      	ldrb	r3, [r7, #23]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d13d      	bne.n	8001414 <mpu6050_read+0xc60>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a6:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001408 <mpu6050_read+0xc54>
 80013aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b0:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c2:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001408 <mpu6050_read+0xc54>
 80013c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013cc:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80013d6:	ee07 3a90 	vmov	s15, r3
 80013da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013de:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001408 <mpu6050_read+0xc54>
 80013e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	edc3 7a02 	vstr	s15, [r3, #8]
 80013ec:	e06a      	b.n	80014c4 <mpu6050_read+0xd10>
 80013ee:	bf00      	nop
 80013f0:	08004d80 	.word	0x08004d80
 80013f4:	46800000 	.word	0x46800000
 80013f8:	46000000 	.word	0x46000000
 80013fc:	45800000 	.word	0x45800000
 8001400:	45000000 	.word	0x45000000
 8001404:	43030000 	.word	0x43030000
 8001408:	42830000 	.word	0x42830000
 800140c:	42033333 	.word	0x42033333
 8001410:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	2b02      	cmp	r3, #2
 8001418:	d12a      	bne.n	8001470 <mpu6050_read+0xcbc>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001420:	ee07 3a90 	vmov	s15, r3
 8001424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001428:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 800140c <mpu6050_read+0xc58>
 800142c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001432:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001444:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 800140c <mpu6050_read+0xc58>
 8001448:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144e:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001460:	ed5f 6a16 	vldr	s13, [pc, #-88]	; 800140c <mpu6050_read+0xc58>
 8001464:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	edc3 7a02 	vstr	s15, [r3, #8]
 800146e:	e029      	b.n	80014c4 <mpu6050_read+0xd10>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800147e:	ed5f 6a1c 	vldr	s13, [pc, #-112]	; 8001410 <mpu6050_read+0xc5c>
 8001482:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149a:	ed5f 6a23 	vldr	s13, [pc, #-140]	; 8001410 <mpu6050_read+0xc5c>
 800149e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a4:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014b6:	ed5f 6a2a 	vldr	s13, [pc, #-168]	; 8001410 <mpu6050_read+0xc5c>
 80014ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c0:	edc3 7a02 	vstr	s15, [r3, #8]
        }

        return 0;                                                                                  /* success return 0 */
 80014c4:	2300      	movs	r3, #0
    }
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3720      	adds	r7, #32
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop

080014d0 <mpu6050_read_temperature>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6050_read_temperature(mpu6050_handle_t *handle, int16_t (*raw), float *degrees)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
    uint8_t res;
    uint8_t buf[2];

    if (handle == NULL)                                                      /* check handle */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <mpu6050_read_temperature+0x16>
    {
        return 2;                                                            /* return error */
 80014e2:	2302      	movs	r3, #2
 80014e4:	e034      	b.n	8001550 <mpu6050_read_temperature+0x80>
    }
    if (handle->inited != 1)                                                 /* check handle initialization */
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d001      	beq.n	80014f4 <mpu6050_read_temperature+0x24>
    {
        return 3;                                                            /* return error */
 80014f0:	2303      	movs	r3, #3
 80014f2:	e02d      	b.n	8001550 <mpu6050_read_temperature+0x80>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_TEMP_OUT_H, buf, 2);        /* read data */
 80014f4:	f107 0214 	add.w	r2, r7, #20
 80014f8:	2302      	movs	r3, #2
 80014fa:	2141      	movs	r1, #65	; 0x41
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f7fe ffe5 	bl	80004cc <a_mpu6050_iic_read>
 8001502:	4603      	mov	r3, r0
 8001504:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                            /* check result */
 8001506:	7dfb      	ldrb	r3, [r7, #23]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <mpu6050_read_temperature+0x48>
    {
        handle->debug_print("mpu6050: read failed.\n");                      /* read failed */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4811      	ldr	r0, [pc, #68]	; (8001558 <mpu6050_read_temperature+0x88>)
 8001512:	4798      	blx	r3

        return 1;                                                            /* return error */
 8001514:	2301      	movs	r3, #1
 8001516:	e01b      	b.n	8001550 <mpu6050_read_temperature+0x80>
    }
    *raw = (int16_t)((uint16_t)buf[0] << 8) | buf[1];                        /* get the raw */
 8001518:	7d3b      	ldrb	r3, [r7, #20]
 800151a:	021b      	lsls	r3, r3, #8
 800151c:	b21a      	sxth	r2, r3
 800151e:	7d7b      	ldrb	r3, [r7, #21]
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b21a      	sxth	r2, r3
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	801a      	strh	r2, [r3, #0]
    *degrees = (float)(*raw) / 340.0f + 36.53f;                              /* convert the degrees */
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001538:	eddf 6a08 	vldr	s13, [pc, #32]	; 800155c <mpu6050_read_temperature+0x8c>
 800153c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001540:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001560 <mpu6050_read_temperature+0x90>
 8001544:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edc3 7a00 	vstr	s15, [r3]

    return 0;                                                                /* success return 0 */
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	08004d80 	.word	0x08004d80
 800155c:	43aa0000 	.word	0x43aa0000
 8001560:	42121eb8 	.word	0x42121eb8

08001564 <mpu6050_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fifo(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                   /* check handle */
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <mpu6050_set_fifo+0x16>
    {
        return 2;                                                                         /* return error */
 8001576:	2302      	movs	r3, #2
 8001578:	e039      	b.n	80015ee <mpu6050_set_fifo+0x8a>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001580:	2b01      	cmp	r3, #1
 8001582:	d001      	beq.n	8001588 <mpu6050_set_fifo+0x24>
    {
        return 3;                                                                         /* return error */
 8001584:	2303      	movs	r3, #3
 8001586:	e032      	b.n	80015ee <mpu6050_set_fifo+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8001588:	f107 020e 	add.w	r2, r7, #14
 800158c:	2301      	movs	r3, #1
 800158e:	216a      	movs	r1, #106	; 0x6a
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7fe ff9b 	bl	80004cc <a_mpu6050_iic_read>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <mpu6050_set_fifo+0x48>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                         /* read user ctrl failed */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4814      	ldr	r0, [pc, #80]	; (80015f8 <mpu6050_set_fifo+0x94>)
 80015a6:	4798      	blx	r3

        return 1;                                                                         /* return error */
 80015a8:	2301      	movs	r3, #1
 80015aa:	e020      	b.n	80015ee <mpu6050_set_fifo+0x8a>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 80015ac:	7bbb      	ldrb	r3, [r7, #14]
 80015ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                  /* set config */
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	019b      	lsls	r3, r3, #6
 80015ba:	b25a      	sxtb	r2, r3
 80015bc:	7bbb      	ldrb	r3, [r7, #14]
 80015be:	b25b      	sxtb	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b25b      	sxtb	r3, r3
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80015c8:	f107 020e 	add.w	r2, r7, #14
 80015cc:	2301      	movs	r3, #1
 80015ce:	216a      	movs	r1, #106	; 0x6a
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7fe ff97 	bl	8000504 <a_mpu6050_iic_write>
 80015d6:	4603      	mov	r3, r0
 80015d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <mpu6050_set_fifo+0x88>
    {
        handle->debug_print("mpu6050: write user ctrl failed.\n");                        /* write user ctrl failed */
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <mpu6050_set_fifo+0x98>)
 80015e6:	4798      	blx	r3

        return 1;                                                                         /* return error */
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <mpu6050_set_fifo+0x8a>
    }

    return 0;                                                                             /* success return 0 */
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	08004e20 	.word	0x08004e20
 80015fc:	08004e44 	.word	0x08004e44

08001600 <mpu6050_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_iic_master(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <mpu6050_set_iic_master+0x16>
    {
        return 2;                                                                        /* return error */
 8001612:	2302      	movs	r3, #2
 8001614:	e039      	b.n	800168a <mpu6050_set_iic_master+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800161c:	2b01      	cmp	r3, #1
 800161e:	d001      	beq.n	8001624 <mpu6050_set_iic_master+0x24>
    {
        return 3;                                                                        /* return error */
 8001620:	2303      	movs	r3, #3
 8001622:	e032      	b.n	800168a <mpu6050_set_iic_master+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8001624:	f107 020e 	add.w	r2, r7, #14
 8001628:	2301      	movs	r3, #1
 800162a:	216a      	movs	r1, #106	; 0x6a
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7fe ff4d 	bl	80004cc <a_mpu6050_iic_read>
 8001632:	4603      	mov	r3, r0
 8001634:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8001636:	7bfb      	ldrb	r3, [r7, #15]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <mpu6050_set_iic_master+0x48>
    {
        handle->debug_print("mpu6050: read user ctrl failed.\n");                        /* read user ctrl failed */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4814      	ldr	r0, [pc, #80]	; (8001694 <mpu6050_set_iic_master+0x94>)
 8001642:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001644:	2301      	movs	r3, #1
 8001646:	e020      	b.n	800168a <mpu6050_set_iic_master+0x8a>
    }
    prev &= ~(1 << 5);                                                                   /* clear config */
 8001648:	7bbb      	ldrb	r3, [r7, #14]
 800164a:	f023 0320 	bic.w	r3, r3, #32
 800164e:	b2db      	uxtb	r3, r3
 8001650:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                                 /* set config */
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	015b      	lsls	r3, r3, #5
 8001656:	b25a      	sxtb	r2, r3
 8001658:	7bbb      	ldrb	r3, [r7, #14]
 800165a:	b25b      	sxtb	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b25b      	sxtb	r3, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8001664:	f107 020e 	add.w	r2, r7, #14
 8001668:	2301      	movs	r3, #1
 800166a:	216a      	movs	r1, #106	; 0x6a
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7fe ff49 	bl	8000504 <a_mpu6050_iic_write>
 8001672:	4603      	mov	r3, r0
 8001674:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <mpu6050_set_iic_master+0x88>
    {
        handle->debug_print("mpu6050: write user ctrl failed.\n");                       /* write user ctrl failed */
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4805      	ldr	r0, [pc, #20]	; (8001698 <mpu6050_set_iic_master+0x98>)
 8001682:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001684:	2301      	movs	r3, #1
 8001686:	e000      	b.n	800168a <mpu6050_set_iic_master+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	08004e20 	.word	0x08004e20
 8001698:	08004e44 	.word	0x08004e44

0800169c <mpu6050_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_clock_source(mpu6050_handle_t *handle, mpu6050_clock_source_t clock_source)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <mpu6050_set_clock_source+0x16>
    {
        return 2;                                                                        /* return error */
 80016ae:	2302      	movs	r3, #2
 80016b0:	e035      	b.n	800171e <mpu6050_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d001      	beq.n	80016c0 <mpu6050_set_clock_source+0x24>
    {
        return 3;                                                                        /* return error */
 80016bc:	2303      	movs	r3, #3
 80016be:	e02e      	b.n	800171e <mpu6050_set_clock_source+0x82>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80016c0:	f107 020e 	add.w	r2, r7, #14
 80016c4:	2301      	movs	r3, #1
 80016c6:	216b      	movs	r1, #107	; 0x6b
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7fe feff 	bl	80004cc <a_mpu6050_iic_read>
 80016ce:	4603      	mov	r3, r0
 80016d0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <mpu6050_set_clock_source+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4812      	ldr	r0, [pc, #72]	; (8001728 <mpu6050_set_clock_source+0x8c>)
 80016de:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80016e0:	2301      	movs	r3, #1
 80016e2:	e01c      	b.n	800171e <mpu6050_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                                 /* clear config */
 80016e4:	7bbb      	ldrb	r3, [r7, #14]
 80016e6:	f023 0307 	bic.w	r3, r3, #7
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                           /* set config */
 80016ee:	7bba      	ldrb	r2, [r7, #14]
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80016f8:	f107 020e 	add.w	r2, r7, #14
 80016fc:	2301      	movs	r3, #1
 80016fe:	216b      	movs	r1, #107	; 0x6b
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7fe feff 	bl	8000504 <a_mpu6050_iic_write>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <mpu6050_set_clock_source+0x80>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	4805      	ldr	r0, [pc, #20]	; (800172c <mpu6050_set_clock_source+0x90>)
 8001716:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <mpu6050_set_clock_source+0x82>
    }

    return 0;                                                                            /* success return 0 */
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	0800507c 	.word	0x0800507c
 800172c:	080050a8 	.word	0x080050a8

08001730 <mpu6050_set_temperature_sensor>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_temperature_sensor(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <mpu6050_set_temperature_sensor+0x16>
    {
        return 2;                                                                        /* return error */
 8001742:	2302      	movs	r3, #2
 8001744:	e03c      	b.n	80017c0 <mpu6050_set_temperature_sensor+0x90>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800174c:	2b01      	cmp	r3, #1
 800174e:	d001      	beq.n	8001754 <mpu6050_set_temperature_sensor+0x24>
    {
        return 3;                                                                        /* return error */
 8001750:	2303      	movs	r3, #3
 8001752:	e035      	b.n	80017c0 <mpu6050_set_temperature_sensor+0x90>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8001754:	f107 020e 	add.w	r2, r7, #14
 8001758:	2301      	movs	r3, #1
 800175a:	216b      	movs	r1, #107	; 0x6b
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7fe feb5 	bl	80004cc <a_mpu6050_iic_read>
 8001762:	4603      	mov	r3, r0
 8001764:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <mpu6050_set_temperature_sensor+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4815      	ldr	r0, [pc, #84]	; (80017c8 <mpu6050_set_temperature_sensor+0x98>)
 8001772:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001774:	2301      	movs	r3, #1
 8001776:	e023      	b.n	80017c0 <mpu6050_set_temperature_sensor+0x90>
    }
    prev &= ~(1 << 3);                                                                   /* clear config */
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	f023 0308 	bic.w	r3, r3, #8
 800177e:	b2db      	uxtb	r3, r3
 8001780:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                              /* set config */
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <mpu6050_set_temperature_sensor+0x5c>
 8001788:	2208      	movs	r2, #8
 800178a:	e000      	b.n	800178e <mpu6050_set_temperature_sensor+0x5e>
 800178c:	2200      	movs	r2, #0
 800178e:	7bbb      	ldrb	r3, [r7, #14]
 8001790:	b25b      	sxtb	r3, r3
 8001792:	4313      	orrs	r3, r2
 8001794:	b25b      	sxtb	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 800179a:	f107 020e 	add.w	r2, r7, #14
 800179e:	2301      	movs	r3, #1
 80017a0:	216b      	movs	r1, #107	; 0x6b
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7fe feae 	bl	8000504 <a_mpu6050_iic_write>
 80017a8:	4603      	mov	r3, r0
 80017aa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <mpu6050_set_temperature_sensor+0x8e>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <mpu6050_set_temperature_sensor+0x9c>)
 80017b8:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <mpu6050_set_temperature_sensor+0x90>
    }

    return 0;                                                                            /* success return 0 */
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	0800507c 	.word	0x0800507c
 80017cc:	080050a8 	.word	0x080050a8

080017d0 <mpu6050_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_cycle_wake_up(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <mpu6050_set_cycle_wake_up+0x16>
    {
        return 2;                                                                        /* return error */
 80017e2:	2302      	movs	r3, #2
 80017e4:	e039      	b.n	800185a <mpu6050_set_cycle_wake_up+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d001      	beq.n	80017f4 <mpu6050_set_cycle_wake_up+0x24>
    {
        return 3;                                                                        /* return error */
 80017f0:	2303      	movs	r3, #3
 80017f2:	e032      	b.n	800185a <mpu6050_set_cycle_wake_up+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80017f4:	f107 020e 	add.w	r2, r7, #14
 80017f8:	2301      	movs	r3, #1
 80017fa:	216b      	movs	r1, #107	; 0x6b
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7fe fe65 	bl	80004cc <a_mpu6050_iic_read>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <mpu6050_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4814      	ldr	r0, [pc, #80]	; (8001864 <mpu6050_set_cycle_wake_up+0x94>)
 8001812:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001814:	2301      	movs	r3, #1
 8001816:	e020      	b.n	800185a <mpu6050_set_cycle_wake_up+0x8a>
    }
    prev &= ~(1 << 5);                                                                   /* clear config */
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	f023 0320 	bic.w	r3, r3, #32
 800181e:	b2db      	uxtb	r3, r3
 8001820:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                                 /* set config */
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	015b      	lsls	r3, r3, #5
 8001826:	b25a      	sxtb	r2, r3
 8001828:	7bbb      	ldrb	r3, [r7, #14]
 800182a:	b25b      	sxtb	r3, r3
 800182c:	4313      	orrs	r3, r2
 800182e:	b25b      	sxtb	r3, r3
 8001830:	b2db      	uxtb	r3, r3
 8001832:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8001834:	f107 020e 	add.w	r2, r7, #14
 8001838:	2301      	movs	r3, #1
 800183a:	216b      	movs	r1, #107	; 0x6b
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7fe fe61 	bl	8000504 <a_mpu6050_iic_write>
 8001842:	4603      	mov	r3, r0
 8001844:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8001846:	7bfb      	ldrb	r3, [r7, #15]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <mpu6050_set_cycle_wake_up+0x88>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <mpu6050_set_cycle_wake_up+0x98>)
 8001852:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <mpu6050_set_cycle_wake_up+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	0800507c 	.word	0x0800507c
 8001868:	080050a8 	.word	0x080050a8

0800186c <mpu6050_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_sleep(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <mpu6050_set_sleep+0x16>
    {
        return 2;                                                                        /* return error */
 800187e:	2302      	movs	r3, #2
 8001880:	e039      	b.n	80018f6 <mpu6050_set_sleep+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001888:	2b01      	cmp	r3, #1
 800188a:	d001      	beq.n	8001890 <mpu6050_set_sleep+0x24>
    {
        return 3;                                                                        /* return error */
 800188c:	2303      	movs	r3, #3
 800188e:	e032      	b.n	80018f6 <mpu6050_set_sleep+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8001890:	f107 020e 	add.w	r2, r7, #14
 8001894:	2301      	movs	r3, #1
 8001896:	216b      	movs	r1, #107	; 0x6b
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7fe fe17 	bl	80004cc <a_mpu6050_iic_read>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80018a2:	7bfb      	ldrb	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <mpu6050_set_sleep+0x48>
    {
        handle->debug_print("mpu6050: read power management 1 failed.\n");               /* read power management 1 failed */
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4814      	ldr	r0, [pc, #80]	; (8001900 <mpu6050_set_sleep+0x94>)
 80018ae:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80018b0:	2301      	movs	r3, #1
 80018b2:	e020      	b.n	80018f6 <mpu6050_set_sleep+0x8a>
    }
    prev &= ~(1 << 6);                                                                   /* clear config */
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                 /* set config */
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	019b      	lsls	r3, r3, #6
 80018c2:	b25a      	sxtb	r2, r3
 80018c4:	7bbb      	ldrb	r3, [r7, #14]
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80018d0:	f107 020e 	add.w	r2, r7, #14
 80018d4:	2301      	movs	r3, #1
 80018d6:	216b      	movs	r1, #107	; 0x6b
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7fe fe13 	bl	8000504 <a_mpu6050_iic_write>
 80018de:	4603      	mov	r3, r0
 80018e0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <mpu6050_set_sleep+0x88>
    {
        handle->debug_print("mpu6050: write power management 1 failed.\n");              /* write power management 1 failed */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <mpu6050_set_sleep+0x98>)
 80018ee:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <mpu6050_set_sleep+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	0800507c 	.word	0x0800507c
 8001904:	080050a8 	.word	0x080050a8

08001908 <mpu6050_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_standby_mode(mpu6050_handle_t *handle, mpu6050_source_t source, mpu6050_bool_t enable)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
 8001914:	4613      	mov	r3, r2
 8001916:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <mpu6050_set_standby_mode+0x1a>
    {
        return 2;                                                                        /* return error */
 800191e:	2302      	movs	r3, #2
 8001920:	e043      	b.n	80019aa <mpu6050_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001928:	2b01      	cmp	r3, #1
 800192a:	d001      	beq.n	8001930 <mpu6050_set_standby_mode+0x28>
    {
        return 3;                                                                        /* return error */
 800192c:	2303      	movs	r3, #3
 800192e:	e03c      	b.n	80019aa <mpu6050_set_standby_mode+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 8001930:	f107 020e 	add.w	r2, r7, #14
 8001934:	2301      	movs	r3, #1
 8001936:	216c      	movs	r1, #108	; 0x6c
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7fe fdc7 	bl	80004cc <a_mpu6050_iic_read>
 800193e:	4603      	mov	r3, r0
 8001940:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d005      	beq.n	8001954 <mpu6050_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu6050: read power management 2 failed.\n");               /* read power management 2 failed */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4819      	ldr	r0, [pc, #100]	; (80019b4 <mpu6050_set_standby_mode+0xac>)
 800194e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001950:	2301      	movs	r3, #1
 8001952:	e02a      	b.n	80019aa <mpu6050_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                              /* clear config */
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	2201      	movs	r2, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	b25b      	sxtb	r3, r3
 800195e:	43db      	mvns	r3, r3
 8001960:	b25a      	sxtb	r2, r3
 8001962:	7bbb      	ldrb	r3, [r7, #14]
 8001964:	b25b      	sxtb	r3, r3
 8001966:	4013      	ands	r3, r2
 8001968:	b25b      	sxtb	r3, r3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                            /* set config */
 800196e:	78ba      	ldrb	r2, [r7, #2]
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	b25a      	sxtb	r2, r3
 8001978:	7bbb      	ldrb	r3, [r7, #14]
 800197a:	b25b      	sxtb	r3, r3
 800197c:	4313      	orrs	r3, r2
 800197e:	b25b      	sxtb	r3, r3
 8001980:	b2db      	uxtb	r3, r3
 8001982:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8001984:	f107 020e 	add.w	r2, r7, #14
 8001988:	2301      	movs	r3, #1
 800198a:	216c      	movs	r1, #108	; 0x6c
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7fe fdb9 	bl	8000504 <a_mpu6050_iic_write>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <mpu6050_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu6050: write power management 2 failed.\n");              /* write power management 2 failed */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4805      	ldr	r0, [pc, #20]	; (80019b8 <mpu6050_set_standby_mode+0xb0>)
 80019a2:	4798      	blx	r3

        return 1;                                                                        /* return error */
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <mpu6050_set_standby_mode+0xa2>
    }

    return 0;                                                                            /* success return 0 */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	080050d4 	.word	0x080050d4
 80019b8:	08005100 	.word	0x08005100

080019bc <mpu6050_set_wake_up_frequency>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_wake_up_frequency(mpu6050_handle_t *handle, mpu6050_wake_up_frequency_t frequency)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                  /* check handle */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <mpu6050_set_wake_up_frequency+0x16>
    {
        return 2;                                                                        /* return error */
 80019ce:	2302      	movs	r3, #2
 80019d0:	e039      	b.n	8001a46 <mpu6050_set_wake_up_frequency+0x8a>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d001      	beq.n	80019e0 <mpu6050_set_wake_up_frequency+0x24>
    {
        return 3;                                                                        /* return error */
 80019dc:	2303      	movs	r3, #3
 80019de:	e032      	b.n	8001a46 <mpu6050_set_wake_up_frequency+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 80019e0:	f107 020e 	add.w	r2, r7, #14
 80019e4:	2301      	movs	r3, #1
 80019e6:	216c      	movs	r1, #108	; 0x6c
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7fe fd6f 	bl	80004cc <a_mpu6050_iic_read>
 80019ee:	4603      	mov	r3, r0
 80019f0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <mpu6050_set_wake_up_frequency+0x48>
    {
        handle->debug_print("mpu6050: read power management 2 failed.\n");               /* read power management 2 failed */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	4814      	ldr	r0, [pc, #80]	; (8001a50 <mpu6050_set_wake_up_frequency+0x94>)
 80019fe:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001a00:	2301      	movs	r3, #1
 8001a02:	e020      	b.n	8001a46 <mpu6050_set_wake_up_frequency+0x8a>
    }
    prev &= ~(0x3 << 6);                                                                 /* clear config */
 8001a04:	7bbb      	ldrb	r3, [r7, #14]
 8001a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	73bb      	strb	r3, [r7, #14]
    prev |= frequency << 6;                                                              /* set config */
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	019b      	lsls	r3, r3, #6
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	7bbb      	ldrb	r3, [r7, #14]
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8001a20:	f107 020e 	add.w	r2, r7, #14
 8001a24:	2301      	movs	r3, #1
 8001a26:	216c      	movs	r1, #108	; 0x6c
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7fe fd6b 	bl	8000504 <a_mpu6050_iic_write>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <mpu6050_set_wake_up_frequency+0x88>
    {
        handle->debug_print("mpu6050: write power management 2 failed.\n");              /* write power management 2 failed */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4805      	ldr	r0, [pc, #20]	; (8001a54 <mpu6050_set_wake_up_frequency+0x98>)
 8001a3e:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <mpu6050_set_wake_up_frequency+0x8a>
    }

    return 0;                                                                            /* success return 0 */
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	080050d4 	.word	0x080050d4
 8001a54:	08005100 	.word	0x08005100

08001a58 <mpu6050_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_sample_rate_divider(mpu6050_handle_t *handle, uint8_t d)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
    uint8_t res;

    if (handle == NULL)                                                                  /* check handle */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <mpu6050_set_sample_rate_divider+0x16>
    {
        return 2;                                                                        /* return error */
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e018      	b.n	8001aa0 <mpu6050_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d001      	beq.n	8001a7c <mpu6050_set_sample_rate_divider+0x24>
    {
        return 3;                                                                        /* return error */
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e011      	b.n	8001aa0 <mpu6050_set_sample_rate_divider+0x48>
    }

    res = a_mpu6050_iic_write(handle, MPU6050_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 8001a7c:	1cfa      	adds	r2, r7, #3
 8001a7e:	2301      	movs	r3, #1
 8001a80:	2119      	movs	r1, #25
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7fe fd3e 	bl	8000504 <a_mpu6050_iic_write>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <mpu6050_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu6050: write smprt div failed.\n");                       /* write smprt div failed */
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <mpu6050_set_sample_rate_divider+0x50>)
 8001a98:	4798      	blx	r3

        return 1;                                                                        /* return error */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <mpu6050_set_sample_rate_divider+0x48>
    }

    return 0;                                                                            /* success return 0 */
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	080051c0 	.word	0x080051c0

08001aac <mpu6050_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_extern_sync(mpu6050_handle_t *handle, mpu6050_extern_sync_t sync)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                /* check handle */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <mpu6050_set_extern_sync+0x16>
    {
        return 2;                                                                      /* return error */
 8001abe:	2302      	movs	r3, #2
 8001ac0:	e039      	b.n	8001b36 <mpu6050_set_extern_sync+0x8a>
    }
    if (handle->inited != 1)                                                           /* check handle initialization */
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d001      	beq.n	8001ad0 <mpu6050_set_extern_sync+0x24>
    {
        return 3;                                                                      /* return error */
 8001acc:	2303      	movs	r3, #3
 8001ace:	e032      	b.n	8001b36 <mpu6050_set_extern_sync+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8001ad0:	f107 020e 	add.w	r2, r7, #14
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	211a      	movs	r1, #26
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7fe fcf7 	bl	80004cc <a_mpu6050_iic_read>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <mpu6050_set_extern_sync+0x48>
    {
        handle->debug_print("mpu6050: read config failed.\n");                         /* read config failed */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	4814      	ldr	r0, [pc, #80]	; (8001b40 <mpu6050_set_extern_sync+0x94>)
 8001aee:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8001af0:	2301      	movs	r3, #1
 8001af2:	e020      	b.n	8001b36 <mpu6050_set_extern_sync+0x8a>
    }
    prev &= ~(0x7 << 3);                                                               /* clear config */
 8001af4:	7bbb      	ldrb	r3, [r7, #14]
 8001af6:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                                 /* set config */
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	b25a      	sxtb	r2, r3
 8001b04:	7bbb      	ldrb	r3, [r7, #14]
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8001b10:	f107 020e 	add.w	r2, r7, #14
 8001b14:	2301      	movs	r3, #1
 8001b16:	211a      	movs	r1, #26
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7fe fcf3 	bl	8000504 <a_mpu6050_iic_write>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <mpu6050_set_extern_sync+0x88>
    {
        handle->debug_print("mpu6050: write config failed.\n");                        /* write config failed */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4805      	ldr	r0, [pc, #20]	; (8001b44 <mpu6050_set_extern_sync+0x98>)
 8001b2e:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8001b30:	2301      	movs	r3, #1
 8001b32:	e000      	b.n	8001b36 <mpu6050_set_extern_sync+0x8a>
    }

    return 0;                                                                          /* success return 0 */
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	08005208 	.word	0x08005208
 8001b44:	08005228 	.word	0x08005228

08001b48 <mpu6050_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_low_pass_filter(mpu6050_handle_t *handle, mpu6050_low_pass_filter_t filter)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                /* check handle */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <mpu6050_set_low_pass_filter+0x16>
    {
        return 2;                                                                      /* return error */
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e035      	b.n	8001bca <mpu6050_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                           /* check handle initialization */
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d001      	beq.n	8001b6c <mpu6050_set_low_pass_filter+0x24>
    {
        return 3;                                                                      /* return error */
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e02e      	b.n	8001bca <mpu6050_set_low_pass_filter+0x82>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8001b6c:	f107 020e 	add.w	r2, r7, #14
 8001b70:	2301      	movs	r3, #1
 8001b72:	211a      	movs	r1, #26
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7fe fca9 	bl	80004cc <a_mpu6050_iic_read>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <mpu6050_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6050: read config failed.\n");                         /* read config failed */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <mpu6050_set_low_pass_filter+0x8c>)
 8001b8a:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e01c      	b.n	8001bca <mpu6050_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                               /* clear config */
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	f023 0307 	bic.w	r3, r3, #7
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                               /* set config */
 8001b9a:	7bba      	ldrb	r2, [r7, #14]
 8001b9c:	78fb      	ldrb	r3, [r7, #3]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8001ba4:	f107 020e 	add.w	r2, r7, #14
 8001ba8:	2301      	movs	r3, #1
 8001baa:	211a      	movs	r1, #26
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7fe fca9 	bl	8000504 <a_mpu6050_iic_write>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                      /* check result */
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <mpu6050_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6050: write config failed.\n");                        /* write config failed */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <mpu6050_set_low_pass_filter+0x90>)
 8001bc2:	4798      	blx	r3

        return 1;                                                                      /* return error */
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <mpu6050_set_low_pass_filter+0x82>
    }

    return 0;                                                                          /* success return 0 */
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	08005208 	.word	0x08005208
 8001bd8:	08005228 	.word	0x08005228

08001bdc <mpu6050_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_gyroscope_test(mpu6050_handle_t *handle, mpu6050_axis_t axis, mpu6050_bool_t enable)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
 8001be8:	4613      	mov	r3, r2
 8001bea:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <mpu6050_set_gyroscope_test+0x1a>
    {
        return 2;                                                                           /* return error */
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e043      	b.n	8001c7e <mpu6050_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d001      	beq.n	8001c04 <mpu6050_set_gyroscope_test+0x28>
    {
        return 3;                                                                           /* return error */
 8001c00:	2303      	movs	r3, #3
 8001c02:	e03c      	b.n	8001c7e <mpu6050_set_gyroscope_test+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8001c04:	f107 020e 	add.w	r2, r7, #14
 8001c08:	2301      	movs	r3, #1
 8001c0a:	211b      	movs	r1, #27
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7fe fc5d 	bl	80004cc <a_mpu6050_iic_read>
 8001c12:	4603      	mov	r3, r0
 8001c14:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <mpu6050_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu6050: read gyroscope config failed.\n");                    /* read gyroscope config failed */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4819      	ldr	r0, [pc, #100]	; (8001c88 <mpu6050_set_gyroscope_test+0xac>)
 8001c22:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8001c24:	2301      	movs	r3, #1
 8001c26:	e02a      	b.n	8001c7e <mpu6050_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                                   /* clear config */
 8001c28:	78fb      	ldrb	r3, [r7, #3]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	b25a      	sxtb	r2, r3
 8001c36:	7bbb      	ldrb	r3, [r7, #14]
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	b25b      	sxtb	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                                 /* set config */
 8001c42:	78ba      	ldrb	r2, [r7, #2]
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	b25a      	sxtb	r2, r3
 8001c4c:	7bbb      	ldrb	r3, [r7, #14]
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	b25b      	sxtb	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8001c58:	f107 020e 	add.w	r2, r7, #14
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	211b      	movs	r1, #27
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7fe fc4f 	bl	8000504 <a_mpu6050_iic_write>
 8001c66:	4603      	mov	r3, r0
 8001c68:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <mpu6050_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu6050: write gyroscope config failed.\n");                   /* write gyroscope config failed */
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <mpu6050_set_gyroscope_test+0xb0>)
 8001c76:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <mpu6050_set_gyroscope_test+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	08005248 	.word	0x08005248
 8001c8c:	08005270 	.word	0x08005270

08001c90 <mpu6050_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_gyroscope_range(mpu6050_handle_t *handle, mpu6050_gyroscope_range_t range)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <mpu6050_set_gyroscope_range+0x16>
    {
        return 2;                                                                           /* return error */
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e039      	b.n	8001d1a <mpu6050_set_gyroscope_range+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d001      	beq.n	8001cb4 <mpu6050_set_gyroscope_range+0x24>
    {
        return 3;                                                                           /* return error */
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e032      	b.n	8001d1a <mpu6050_set_gyroscope_range+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8001cb4:	f107 020e 	add.w	r2, r7, #14
 8001cb8:	2301      	movs	r3, #1
 8001cba:	211b      	movs	r1, #27
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7fe fc05 	bl	80004cc <a_mpu6050_iic_read>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <mpu6050_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu6050: read gyroscope config failed.\n");                    /* read gyroscope config failed */
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4814      	ldr	r0, [pc, #80]	; (8001d24 <mpu6050_set_gyroscope_range+0x94>)
 8001cd2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e020      	b.n	8001d1a <mpu6050_set_gyroscope_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                      /* clear config */
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	f023 0318 	bic.w	r3, r3, #24
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                     /* set config */
 8001ce2:	78fb      	ldrb	r3, [r7, #3]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	b25a      	sxtb	r2, r3
 8001ce8:	7bbb      	ldrb	r3, [r7, #14]
 8001cea:	b25b      	sxtb	r3, r3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b25b      	sxtb	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8001cf4:	f107 020e 	add.w	r2, r7, #14
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	211b      	movs	r1, #27
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7fe fc01 	bl	8000504 <a_mpu6050_iic_write>
 8001d02:	4603      	mov	r3, r0
 8001d04:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8001d06:	7bfb      	ldrb	r3, [r7, #15]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <mpu6050_set_gyroscope_range+0x88>
    {
        handle->debug_print("mpu6050: write gyroscope config failed.\n");                   /* write gyroscope config failed */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <mpu6050_set_gyroscope_range+0x98>)
 8001d12:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <mpu6050_set_gyroscope_range+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	08005248 	.word	0x08005248
 8001d28:	08005270 	.word	0x08005270

08001d2c <mpu6050_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_accelerometer_test(mpu6050_handle_t *handle, mpu6050_axis_t axis, mpu6050_bool_t enable)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <mpu6050_set_accelerometer_test+0x1a>
    {
        return 2;                                                                           /* return error */
 8001d42:	2302      	movs	r3, #2
 8001d44:	e043      	b.n	8001dce <mpu6050_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d001      	beq.n	8001d54 <mpu6050_set_accelerometer_test+0x28>
    {
        return 3;                                                                           /* return error */
 8001d50:	2303      	movs	r3, #3
 8001d52:	e03c      	b.n	8001dce <mpu6050_set_accelerometer_test+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8001d54:	f107 020e 	add.w	r2, r7, #14
 8001d58:	2301      	movs	r3, #1
 8001d5a:	211c      	movs	r1, #28
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7fe fbb5 	bl	80004cc <a_mpu6050_iic_read>
 8001d62:	4603      	mov	r3, r0
 8001d64:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <mpu6050_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu6050: read accelerometer config failed.\n");                /* read accelerometer config failed */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	4819      	ldr	r0, [pc, #100]	; (8001dd8 <mpu6050_set_accelerometer_test+0xac>)
 8001d72:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8001d74:	2301      	movs	r3, #1
 8001d76:	e02a      	b.n	8001dce <mpu6050_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                                   /* clear config */
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	b25a      	sxtb	r2, r3
 8001d86:	7bbb      	ldrb	r3, [r7, #14]
 8001d88:	b25b      	sxtb	r3, r3
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	b25b      	sxtb	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                                 /* set config */
 8001d92:	78ba      	ldrb	r2, [r7, #2]
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	b25a      	sxtb	r2, r3
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	4313      	orrs	r3, r2
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8001da8:	f107 020e 	add.w	r2, r7, #14
 8001dac:	2301      	movs	r3, #1
 8001dae:	211c      	movs	r1, #28
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7fe fba7 	bl	8000504 <a_mpu6050_iic_write>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <mpu6050_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu6050: write accelerometer config failed.\n");               /* write accelerometer config failed */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <mpu6050_set_accelerometer_test+0xb0>)
 8001dc6:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <mpu6050_set_accelerometer_test+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	08004c88 	.word	0x08004c88
 8001ddc:	0800529c 	.word	0x0800529c

08001de0 <mpu6050_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_accelerometer_range(mpu6050_handle_t *handle, mpu6050_accelerometer_range_t range)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <mpu6050_set_accelerometer_range+0x16>
    {
        return 2;                                                                           /* return error */
 8001df2:	2302      	movs	r3, #2
 8001df4:	e039      	b.n	8001e6a <mpu6050_set_accelerometer_range+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d001      	beq.n	8001e04 <mpu6050_set_accelerometer_range+0x24>
    {
        return 3;                                                                           /* return error */
 8001e00:	2303      	movs	r3, #3
 8001e02:	e032      	b.n	8001e6a <mpu6050_set_accelerometer_range+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8001e04:	f107 020e 	add.w	r2, r7, #14
 8001e08:	2301      	movs	r3, #1
 8001e0a:	211c      	movs	r1, #28
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7fe fb5d 	bl	80004cc <a_mpu6050_iic_read>
 8001e12:	4603      	mov	r3, r0
 8001e14:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <mpu6050_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu6050: read accelerometer config failed.\n");                /* read accelerometer config failed */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4814      	ldr	r0, [pc, #80]	; (8001e74 <mpu6050_set_accelerometer_range+0x94>)
 8001e22:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8001e24:	2301      	movs	r3, #1
 8001e26:	e020      	b.n	8001e6a <mpu6050_set_accelerometer_range+0x8a>
    }
    prev &= ~(3 << 3);                                                                      /* clear config */
 8001e28:	7bbb      	ldrb	r3, [r7, #14]
 8001e2a:	f023 0318 	bic.w	r3, r3, #24
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                     /* set config */
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	b25a      	sxtb	r2, r3
 8001e38:	7bbb      	ldrb	r3, [r7, #14]
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	b25b      	sxtb	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8001e44:	f107 020e 	add.w	r2, r7, #14
 8001e48:	2301      	movs	r3, #1
 8001e4a:	211c      	movs	r1, #28
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7fe fb59 	bl	8000504 <a_mpu6050_iic_write>
 8001e52:	4603      	mov	r3, r0
 8001e54:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <mpu6050_set_accelerometer_range+0x88>
    {
        handle->debug_print("mpu6050: write accelerometer config failed.\n");               /* write accelerometer config failed */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4805      	ldr	r0, [pc, #20]	; (8001e78 <mpu6050_set_accelerometer_range+0x98>)
 8001e62:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <mpu6050_set_accelerometer_range+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	08004c88 	.word	0x08004c88
 8001e78:	0800529c 	.word	0x0800529c

08001e7c <mpu6050_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fifo_enable(mpu6050_handle_t *handle, mpu6050_fifo_t fifo, mpu6050_bool_t enable)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                 /* check handle */
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <mpu6050_set_fifo_enable+0x1a>
    {
        return 2;                                                                       /* return error */
 8001e92:	2302      	movs	r3, #2
 8001e94:	e043      	b.n	8001f1e <mpu6050_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d001      	beq.n	8001ea4 <mpu6050_set_fifo_enable+0x28>
    {
        return 3;                                                                       /* return error */
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e03c      	b.n	8001f1e <mpu6050_set_fifo_enable+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 8001ea4:	f107 020e 	add.w	r2, r7, #14
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	2123      	movs	r1, #35	; 0x23
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7fe fb0d 	bl	80004cc <a_mpu6050_iic_read>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <mpu6050_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu6050: read fifo enable config failed.\n");              /* read fifo enable config failed */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4819      	ldr	r0, [pc, #100]	; (8001f28 <mpu6050_set_fifo_enable+0xac>)
 8001ec2:	4798      	blx	r3

        return 1;                                                                       /* return error */
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e02a      	b.n	8001f1e <mpu6050_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                               /* clear config */
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	b25b      	sxtb	r3, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	b25a      	sxtb	r2, r3
 8001ed6:	7bbb      	ldrb	r3, [r7, #14]
 8001ed8:	b25b      	sxtb	r3, r3
 8001eda:	4013      	ands	r3, r2
 8001edc:	b25b      	sxtb	r3, r3
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                             /* set config */
 8001ee2:	78ba      	ldrb	r2, [r7, #2]
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	b25a      	sxtb	r2, r3
 8001eec:	7bbb      	ldrb	r3, [r7, #14]
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 8001ef8:	f107 020e 	add.w	r2, r7, #14
 8001efc:	2301      	movs	r3, #1
 8001efe:	2123      	movs	r1, #35	; 0x23
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7fe faff 	bl	8000504 <a_mpu6050_iic_write>
 8001f06:	4603      	mov	r3, r0
 8001f08:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <mpu6050_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu6050: write fifo enable config failed.\n");             /* write fifo enable config failed */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <mpu6050_set_fifo_enable+0xb0>)
 8001f16:	4798      	blx	r3

        return 1;                                                                       /* return error */
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <mpu6050_set_fifo_enable+0xa2>
    }

    return 0;                                                                           /* success return 0 */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	080052cc 	.word	0x080052cc
 8001f2c:	080052f8 	.word	0x080052f8

08001f30 <mpu6050_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_level(mpu6050_handle_t *handle, mpu6050_pin_level_t level)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <mpu6050_set_interrupt_level+0x16>
    {
        return 2;                                                                           /* return error */
 8001f42:	2302      	movs	r3, #2
 8001f44:	e039      	b.n	8001fba <mpu6050_set_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d001      	beq.n	8001f54 <mpu6050_set_interrupt_level+0x24>
    {
        return 3;                                                                           /* return error */
 8001f50:	2303      	movs	r3, #3
 8001f52:	e032      	b.n	8001fba <mpu6050_set_interrupt_level+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8001f54:	f107 020e 	add.w	r2, r7, #14
 8001f58:	2301      	movs	r3, #1
 8001f5a:	2137      	movs	r1, #55	; 0x37
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7fe fab5 	bl	80004cc <a_mpu6050_iic_read>
 8001f62:	4603      	mov	r3, r0
 8001f64:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <mpu6050_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <mpu6050_set_interrupt_level+0x94>)
 8001f72:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8001f74:	2301      	movs	r3, #1
 8001f76:	e020      	b.n	8001fba <mpu6050_set_interrupt_level+0x8a>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 8001f78:	7bbb      	ldrb	r3, [r7, #14]
 8001f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                     /* set config */
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	01db      	lsls	r3, r3, #7
 8001f86:	b25a      	sxtb	r2, r3
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	b25b      	sxtb	r3, r3
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	b25b      	sxtb	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8001f94:	f107 020e 	add.w	r2, r7, #14
 8001f98:	2301      	movs	r3, #1
 8001f9a:	2137      	movs	r1, #55	; 0x37
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f7fe fab1 	bl	8000504 <a_mpu6050_iic_write>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <mpu6050_set_interrupt_level+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <mpu6050_set_interrupt_level+0x98>)
 8001fb2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <mpu6050_set_interrupt_level+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	08005324 	.word	0x08005324
 8001fc8:	0800534c 	.word	0x0800534c

08001fcc <mpu6050_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_pin_type(mpu6050_handle_t *handle, mpu6050_pin_type_t type)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <mpu6050_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                           /* return error */
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e039      	b.n	8002056 <mpu6050_set_interrupt_pin_type+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d001      	beq.n	8001ff0 <mpu6050_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                           /* return error */
 8001fec:	2303      	movs	r3, #3
 8001fee:	e032      	b.n	8002056 <mpu6050_set_interrupt_pin_type+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8001ff0:	f107 020e 	add.w	r2, r7, #14
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	2137      	movs	r1, #55	; 0x37
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7fe fa67 	bl	80004cc <a_mpu6050_iic_read>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <mpu6050_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	4814      	ldr	r0, [pc, #80]	; (8002060 <mpu6050_set_interrupt_pin_type+0x94>)
 800200e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8002010:	2301      	movs	r3, #1
 8002012:	e020      	b.n	8002056 <mpu6050_set_interrupt_pin_type+0x8a>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 8002014:	7bbb      	ldrb	r3, [r7, #14]
 8002016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800201a:	b2db      	uxtb	r3, r3
 800201c:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                      /* set config */
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	019b      	lsls	r3, r3, #6
 8002022:	b25a      	sxtb	r2, r3
 8002024:	7bbb      	ldrb	r3, [r7, #14]
 8002026:	b25b      	sxtb	r3, r3
 8002028:	4313      	orrs	r3, r2
 800202a:	b25b      	sxtb	r3, r3
 800202c:	b2db      	uxtb	r3, r3
 800202e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8002030:	f107 020e 	add.w	r2, r7, #14
 8002034:	2301      	movs	r3, #1
 8002036:	2137      	movs	r1, #55	; 0x37
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7fe fa63 	bl	8000504 <a_mpu6050_iic_write>
 800203e:	4603      	mov	r3, r0
 8002040:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8002042:	7bfb      	ldrb	r3, [r7, #15]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <mpu6050_set_interrupt_pin_type+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	4805      	ldr	r0, [pc, #20]	; (8002064 <mpu6050_set_interrupt_pin_type+0x98>)
 800204e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <mpu6050_set_interrupt_pin_type+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	08005324 	.word	0x08005324
 8002064:	0800534c 	.word	0x0800534c

08002068 <mpu6050_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_latch(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <mpu6050_set_interrupt_latch+0x16>
    {
        return 2;                                                                           /* return error */
 800207a:	2302      	movs	r3, #2
 800207c:	e03c      	b.n	80020f8 <mpu6050_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002084:	2b01      	cmp	r3, #1
 8002086:	d001      	beq.n	800208c <mpu6050_set_interrupt_latch+0x24>
    {
        return 3;                                                                           /* return error */
 8002088:	2303      	movs	r3, #3
 800208a:	e035      	b.n	80020f8 <mpu6050_set_interrupt_latch+0x90>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 800208c:	f107 020e 	add.w	r2, r7, #14
 8002090:	2301      	movs	r3, #1
 8002092:	2137      	movs	r1, #55	; 0x37
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7fe fa19 	bl	80004cc <a_mpu6050_iic_read>
 800209a:	4603      	mov	r3, r0
 800209c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <mpu6050_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4815      	ldr	r0, [pc, #84]	; (8002100 <mpu6050_set_interrupt_latch+0x98>)
 80020aa:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80020ac:	2301      	movs	r3, #1
 80020ae:	e023      	b.n	80020f8 <mpu6050_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                      /* clear config */
 80020b0:	7bbb      	ldrb	r3, [r7, #14]
 80020b2:	f023 0320 	bic.w	r3, r3, #32
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                                 /* set config */
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <mpu6050_set_interrupt_latch+0x5c>
 80020c0:	2220      	movs	r2, #32
 80020c2:	e000      	b.n	80020c6 <mpu6050_set_interrupt_latch+0x5e>
 80020c4:	2200      	movs	r2, #0
 80020c6:	7bbb      	ldrb	r3, [r7, #14]
 80020c8:	b25b      	sxtb	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b25b      	sxtb	r3, r3
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80020d2:	f107 020e 	add.w	r2, r7, #14
 80020d6:	2301      	movs	r3, #1
 80020d8:	2137      	movs	r1, #55	; 0x37
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe fa12 	bl	8000504 <a_mpu6050_iic_write>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <mpu6050_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	4805      	ldr	r0, [pc, #20]	; (8002104 <mpu6050_set_interrupt_latch+0x9c>)
 80020f0:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <mpu6050_set_interrupt_latch+0x90>
    }

    return 0;                                                                               /* success return 0 */
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	08005324 	.word	0x08005324
 8002104:	0800534c 	.word	0x0800534c

08002108 <mpu6050_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt_read_clear(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <mpu6050_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                           /* return error */
 800211a:	2302      	movs	r3, #2
 800211c:	e039      	b.n	8002192 <mpu6050_set_interrupt_read_clear+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002124:	2b01      	cmp	r3, #1
 8002126:	d001      	beq.n	800212c <mpu6050_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                           /* return error */
 8002128:	2303      	movs	r3, #3
 800212a:	e032      	b.n	8002192 <mpu6050_set_interrupt_read_clear+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 800212c:	f107 020e 	add.w	r2, r7, #14
 8002130:	2301      	movs	r3, #1
 8002132:	2137      	movs	r1, #55	; 0x37
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7fe f9c9 	bl	80004cc <a_mpu6050_iic_read>
 800213a:	4603      	mov	r3, r0
 800213c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <mpu6050_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4814      	ldr	r0, [pc, #80]	; (800219c <mpu6050_set_interrupt_read_clear+0x94>)
 800214a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 800214c:	2301      	movs	r3, #1
 800214e:	e020      	b.n	8002192 <mpu6050_set_interrupt_read_clear+0x8a>
    }
    prev &= ~(1 << 4);                                                                      /* clear config */
 8002150:	7bbb      	ldrb	r3, [r7, #14]
 8002152:	f023 0310 	bic.w	r3, r3, #16
 8002156:	b2db      	uxtb	r3, r3
 8002158:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                    /* set config */
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	b25a      	sxtb	r2, r3
 8002160:	7bbb      	ldrb	r3, [r7, #14]
 8002162:	b25b      	sxtb	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	b25b      	sxtb	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800216c:	f107 020e 	add.w	r2, r7, #14
 8002170:	2301      	movs	r3, #1
 8002172:	2137      	movs	r1, #55	; 0x37
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7fe f9c5 	bl	8000504 <a_mpu6050_iic_write>
 800217a:	4603      	mov	r3, r0
 800217c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <mpu6050_set_interrupt_read_clear+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4805      	ldr	r0, [pc, #20]	; (80021a0 <mpu6050_set_interrupt_read_clear+0x98>)
 800218a:	4798      	blx	r3

        return 1;                                                                           /* return error */
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <mpu6050_set_interrupt_read_clear+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	08005324 	.word	0x08005324
 80021a0:	0800534c 	.word	0x0800534c

080021a4 <mpu6050_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fsync_interrupt_level(mpu6050_handle_t *handle, mpu6050_pin_level_t level)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <mpu6050_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                           /* return error */
 80021b6:	2302      	movs	r3, #2
 80021b8:	e039      	b.n	800222e <mpu6050_set_fsync_interrupt_level+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d001      	beq.n	80021c8 <mpu6050_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                           /* return error */
 80021c4:	2303      	movs	r3, #3
 80021c6:	e032      	b.n	800222e <mpu6050_set_fsync_interrupt_level+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80021c8:	f107 020e 	add.w	r2, r7, #14
 80021cc:	2301      	movs	r3, #1
 80021ce:	2137      	movs	r1, #55	; 0x37
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7fe f97b 	bl	80004cc <a_mpu6050_iic_read>
 80021d6:	4603      	mov	r3, r0
 80021d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <mpu6050_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4814      	ldr	r0, [pc, #80]	; (8002238 <mpu6050_set_fsync_interrupt_level+0x94>)
 80021e6:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80021e8:	2301      	movs	r3, #1
 80021ea:	e020      	b.n	800222e <mpu6050_set_fsync_interrupt_level+0x8a>
    }
    prev &= ~(1 << 3);                                                                      /* clear config */
 80021ec:	7bbb      	ldrb	r3, [r7, #14]
 80021ee:	f023 0308 	bic.w	r3, r3, #8
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                     /* set config */
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	b25a      	sxtb	r2, r3
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	b25b      	sxtb	r3, r3
 8002200:	4313      	orrs	r3, r2
 8002202:	b25b      	sxtb	r3, r3
 8002204:	b2db      	uxtb	r3, r3
 8002206:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8002208:	f107 020e 	add.w	r2, r7, #14
 800220c:	2301      	movs	r3, #1
 800220e:	2137      	movs	r1, #55	; 0x37
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7fe f977 	bl	8000504 <a_mpu6050_iic_write>
 8002216:	4603      	mov	r3, r0
 8002218:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <mpu6050_set_fsync_interrupt_level+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	4805      	ldr	r0, [pc, #20]	; (800223c <mpu6050_set_fsync_interrupt_level+0x98>)
 8002226:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <mpu6050_set_fsync_interrupt_level+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	08005324 	.word	0x08005324
 800223c:	0800534c 	.word	0x0800534c

08002240 <mpu6050_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_fsync_interrupt(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <mpu6050_set_fsync_interrupt+0x16>
    {
        return 2;                                                                           /* return error */
 8002252:	2302      	movs	r3, #2
 8002254:	e039      	b.n	80022ca <mpu6050_set_fsync_interrupt+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800225c:	2b01      	cmp	r3, #1
 800225e:	d001      	beq.n	8002264 <mpu6050_set_fsync_interrupt+0x24>
    {
        return 3;                                                                           /* return error */
 8002260:	2303      	movs	r3, #3
 8002262:	e032      	b.n	80022ca <mpu6050_set_fsync_interrupt+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8002264:	f107 020e 	add.w	r2, r7, #14
 8002268:	2301      	movs	r3, #1
 800226a:	2137      	movs	r1, #55	; 0x37
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7fe f92d 	bl	80004cc <a_mpu6050_iic_read>
 8002272:	4603      	mov	r3, r0
 8002274:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d005      	beq.n	8002288 <mpu6050_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4814      	ldr	r0, [pc, #80]	; (80022d4 <mpu6050_set_fsync_interrupt+0x94>)
 8002282:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8002284:	2301      	movs	r3, #1
 8002286:	e020      	b.n	80022ca <mpu6050_set_fsync_interrupt+0x8a>
    }
    prev &= ~(1 << 2);                                                                      /* clear config */
 8002288:	7bbb      	ldrb	r3, [r7, #14]
 800228a:	f023 0304 	bic.w	r3, r3, #4
 800228e:	b2db      	uxtb	r3, r3
 8002290:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                    /* set config */
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	b25a      	sxtb	r2, r3
 8002298:	7bbb      	ldrb	r3, [r7, #14]
 800229a:	b25b      	sxtb	r3, r3
 800229c:	4313      	orrs	r3, r2
 800229e:	b25b      	sxtb	r3, r3
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80022a4:	f107 020e 	add.w	r2, r7, #14
 80022a8:	2301      	movs	r3, #1
 80022aa:	2137      	movs	r1, #55	; 0x37
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7fe f929 	bl	8000504 <a_mpu6050_iic_write>
 80022b2:	4603      	mov	r3, r0
 80022b4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d005      	beq.n	80022c8 <mpu6050_set_fsync_interrupt+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4805      	ldr	r0, [pc, #20]	; (80022d8 <mpu6050_set_fsync_interrupt+0x98>)
 80022c2:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <mpu6050_set_fsync_interrupt+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	08005324 	.word	0x08005324
 80022d8:	0800534c 	.word	0x0800534c

080022dc <mpu6050_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_iic_bypass(mpu6050_handle_t *handle, mpu6050_bool_t enable)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <mpu6050_set_iic_bypass+0x16>
    {
        return 2;                                                                           /* return error */
 80022ee:	2302      	movs	r3, #2
 80022f0:	e039      	b.n	8002366 <mpu6050_set_iic_bypass+0x8a>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d001      	beq.n	8002300 <mpu6050_set_iic_bypass+0x24>
    {
        return 3;                                                                           /* return error */
 80022fc:	2303      	movs	r3, #3
 80022fe:	e032      	b.n	8002366 <mpu6050_set_iic_bypass+0x8a>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 8002300:	f107 020e 	add.w	r2, r7, #14
 8002304:	2301      	movs	r3, #1
 8002306:	2137      	movs	r1, #55	; 0x37
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7fe f8df 	bl	80004cc <a_mpu6050_iic_read>
 800230e:	4603      	mov	r3, r0
 8002310:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <mpu6050_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu6050: read interrupt pin failed.\n");                       /* read interrupt pin failed */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4814      	ldr	r0, [pc, #80]	; (8002370 <mpu6050_set_iic_bypass+0x94>)
 800231e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8002320:	2301      	movs	r3, #1
 8002322:	e020      	b.n	8002366 <mpu6050_set_iic_bypass+0x8a>
    }
    prev &= ~(1 << 1);                                                                      /* clear config */
 8002324:	7bbb      	ldrb	r3, [r7, #14]
 8002326:	f023 0302 	bic.w	r3, r3, #2
 800232a:	b2db      	uxtb	r3, r3
 800232c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                    /* set config */
 800232e:	78fb      	ldrb	r3, [r7, #3]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	b25a      	sxtb	r2, r3
 8002334:	7bbb      	ldrb	r3, [r7, #14]
 8002336:	b25b      	sxtb	r3, r3
 8002338:	4313      	orrs	r3, r2
 800233a:	b25b      	sxtb	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8002340:	f107 020e 	add.w	r2, r7, #14
 8002344:	2301      	movs	r3, #1
 8002346:	2137      	movs	r1, #55	; 0x37
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7fe f8db 	bl	8000504 <a_mpu6050_iic_write>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <mpu6050_set_iic_bypass+0x88>
    {
        handle->debug_print("mpu6050: write interrupt pin failed.\n");                      /* write interrupt pin failed */
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4805      	ldr	r0, [pc, #20]	; (8002374 <mpu6050_set_iic_bypass+0x98>)
 800235e:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <mpu6050_set_iic_bypass+0x8a>
    }

    return 0;                                                                               /* success return 0 */
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	08005324 	.word	0x08005324
 8002374:	0800534c 	.word	0x0800534c

08002378 <mpu6050_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6050_set_interrupt(mpu6050_handle_t *handle, mpu6050_interrupt_t type, mpu6050_bool_t enable)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]
 8002384:	4613      	mov	r3, r2
 8002386:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;

    if (handle == NULL)                                                                     /* check handle */
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <mpu6050_set_interrupt+0x1a>
    {
        return 2;                                                                           /* return error */
 800238e:	2302      	movs	r3, #2
 8002390:	e043      	b.n	800241a <mpu6050_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002398:	2b01      	cmp	r3, #1
 800239a:	d001      	beq.n	80023a0 <mpu6050_set_interrupt+0x28>
    {
        return 3;                                                                           /* return error */
 800239c:	2303      	movs	r3, #3
 800239e:	e03c      	b.n	800241a <mpu6050_set_interrupt+0xa2>
    }

    res = a_mpu6050_iic_read(handle, MPU6050_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 80023a0:	f107 020e 	add.w	r2, r7, #14
 80023a4:	2301      	movs	r3, #1
 80023a6:	2138      	movs	r1, #56	; 0x38
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7fe f88f 	bl	80004cc <a_mpu6050_iic_read>
 80023ae:	4603      	mov	r3, r0
 80023b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80023b2:	7bfb      	ldrb	r3, [r7, #15]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <mpu6050_set_interrupt+0x4c>
    {
        handle->debug_print("mpu6050: read interrupt enable failed.\n");                    /* read interrupt enable failed */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4819      	ldr	r0, [pc, #100]	; (8002424 <mpu6050_set_interrupt+0xac>)
 80023be:	4798      	blx	r3

        return 1;                                                                           /* return error */
 80023c0:	2301      	movs	r3, #1
 80023c2:	e02a      	b.n	800241a <mpu6050_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                                   /* clear config */
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	2201      	movs	r2, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	b25b      	sxtb	r3, r3
 80023ce:	43db      	mvns	r3, r3
 80023d0:	b25a      	sxtb	r2, r3
 80023d2:	7bbb      	ldrb	r3, [r7, #14]
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	4013      	ands	r3, r2
 80023d8:	b25b      	sxtb	r3, r3
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                                 /* set config */
 80023de:	78ba      	ldrb	r2, [r7, #2]
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	b25a      	sxtb	r2, r3
 80023e8:	7bbb      	ldrb	r3, [r7, #14]
 80023ea:	b25b      	sxtb	r3, r3
 80023ec:	4313      	orrs	r3, r2
 80023ee:	b25b      	sxtb	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6050_iic_write(handle, MPU6050_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 80023f4:	f107 020e 	add.w	r2, r7, #14
 80023f8:	2301      	movs	r3, #1
 80023fa:	2138      	movs	r1, #56	; 0x38
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fe f881 	bl	8000504 <a_mpu6050_iic_write>
 8002402:	4603      	mov	r3, r0
 8002404:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <mpu6050_set_interrupt+0xa0>
    {
        handle->debug_print("mpu6050: write interrupt enable failed.\n");                   /* write interrupt enable failed */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4805      	ldr	r0, [pc, #20]	; (8002428 <mpu6050_set_interrupt+0xb0>)
 8002412:	4798      	blx	r3

        return 1;                                                                           /* return error */
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <mpu6050_set_interrupt+0xa2>
    }

    return 0;                                                                               /* success return 0 */
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	08005374 	.word	0x08005374
 8002428:	0800539c 	.word	0x0800539c

0800242c <mpu6050_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      none
 */
uint8_t mpu6050_basic_init(mpu6050_address_t addr_pin)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
    uint8_t res;
    
    /* link interface function */
    DRIVER_MPU6050_LINK_INIT(&gs_handle, mpu6050_handle_t);
 8002436:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800243a:	2100      	movs	r1, #0
 800243c:	48b0      	ldr	r0, [pc, #704]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800243e:	f002 faf1 	bl	8004a24 <memset>
    DRIVER_MPU6050_LINK_IIC_INIT(&gs_handle, mpu6050_interface_iic_init);
 8002442:	4baf      	ldr	r3, [pc, #700]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002444:	4aaf      	ldr	r2, [pc, #700]	; (8002704 <mpu6050_basic_init+0x2d8>)
 8002446:	605a      	str	r2, [r3, #4]
    DRIVER_MPU6050_LINK_IIC_DEINIT(&gs_handle, mpu6050_interface_iic_deinit);
 8002448:	4bad      	ldr	r3, [pc, #692]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800244a:	4aaf      	ldr	r2, [pc, #700]	; (8002708 <mpu6050_basic_init+0x2dc>)
 800244c:	609a      	str	r2, [r3, #8]
    DRIVER_MPU6050_LINK_IIC_READ(&gs_handle, mpu6050_interface_iic_read);
 800244e:	4bac      	ldr	r3, [pc, #688]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002450:	4aae      	ldr	r2, [pc, #696]	; (800270c <mpu6050_basic_init+0x2e0>)
 8002452:	60da      	str	r2, [r3, #12]
    DRIVER_MPU6050_LINK_IIC_WRITE(&gs_handle, mpu6050_interface_iic_write);
 8002454:	4baa      	ldr	r3, [pc, #680]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002456:	4aae      	ldr	r2, [pc, #696]	; (8002710 <mpu6050_basic_init+0x2e4>)
 8002458:	611a      	str	r2, [r3, #16]
    DRIVER_MPU6050_LINK_DELAY_MS(&gs_handle, mpu6050_interface_delay_ms);
 800245a:	4ba9      	ldr	r3, [pc, #676]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800245c:	4aad      	ldr	r2, [pc, #692]	; (8002714 <mpu6050_basic_init+0x2e8>)
 800245e:	615a      	str	r2, [r3, #20]
    DRIVER_MPU6050_LINK_DEBUG_PRINT(&gs_handle, mpu6050_interface_debug_print);
 8002460:	4ba7      	ldr	r3, [pc, #668]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002462:	4aad      	ldr	r2, [pc, #692]	; (8002718 <mpu6050_basic_init+0x2ec>)
 8002464:	619a      	str	r2, [r3, #24]
    DRIVER_MPU6050_LINK_RECEIVE_CALLBACK(&gs_handle, mpu6050_interface_receive_callback);
 8002466:	4ba6      	ldr	r3, [pc, #664]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002468:	4aac      	ldr	r2, [pc, #688]	; (800271c <mpu6050_basic_init+0x2f0>)
 800246a:	61da      	str	r2, [r3, #28]
    
    /* set the addr pin */
    res = mpu6050_set_addr_pin(&gs_handle, addr_pin);
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4619      	mov	r1, r3
 8002470:	48a3      	ldr	r0, [pc, #652]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002472:	f7fe f863 	bl	800053c <mpu6050_set_addr_pin>
 8002476:	4603      	mov	r3, r0
 8002478:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <mpu6050_basic_init+0x5e>
    {
        mpu6050_interface_debug_print("mpu6050: set addr pin failed.\n");
 8002480:	48a7      	ldr	r0, [pc, #668]	; (8002720 <mpu6050_basic_init+0x2f4>)
 8002482:	f000 fbdc 	bl	8002c3e <mpu6050_interface_debug_print>
       
        return 1;
 8002486:	2301      	movs	r3, #1
 8002488:	e31f      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* init */
    res = mpu6050_init(&gs_handle);
 800248a:	489d      	ldr	r0, [pc, #628]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800248c:	f7fe f86c 	bl	8000568 <mpu6050_init>
 8002490:	4603      	mov	r3, r0
 8002492:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d004      	beq.n	80024a4 <mpu6050_basic_init+0x78>
    {
        mpu6050_interface_debug_print("mpu6050: init failed.\n");
 800249a:	48a2      	ldr	r0, [pc, #648]	; (8002724 <mpu6050_basic_init+0x2f8>)
 800249c:	f000 fbcf 	bl	8002c3e <mpu6050_interface_debug_print>
       
        return 1;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e312      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* delay 100 ms */
    mpu6050_interface_delay_ms(100);
 80024a4:	2064      	movs	r0, #100	; 0x64
 80024a6:	f000 fbbf 	bl	8002c28 <mpu6050_interface_delay_ms>
    
    /* disable sleep */
    res = mpu6050_set_sleep(&gs_handle, MPU6050_BOOL_FALSE);
 80024aa:	2100      	movs	r1, #0
 80024ac:	4894      	ldr	r0, [pc, #592]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80024ae:	f7ff f9dd 	bl	800186c <mpu6050_set_sleep>
 80024b2:	4603      	mov	r3, r0
 80024b4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <mpu6050_basic_init+0xa0>
    {
        mpu6050_interface_debug_print("mpu6050: set sleep failed.\n");
 80024bc:	489a      	ldr	r0, [pc, #616]	; (8002728 <mpu6050_basic_init+0x2fc>)
 80024be:	f000 fbbe 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80024c2:	488f      	ldr	r0, [pc, #572]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80024c4:	f7fe f932 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e2fe      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default clock source */
    res = mpu6050_set_clock_source(&gs_handle, MPU6050_BASIC_DEFAULT_CLOCK_SOURCE);
 80024cc:	2101      	movs	r1, #1
 80024ce:	488c      	ldr	r0, [pc, #560]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80024d0:	f7ff f8e4 	bl	800169c <mpu6050_set_clock_source>
 80024d4:	4603      	mov	r3, r0
 80024d6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <mpu6050_basic_init+0xc2>
    {
        mpu6050_interface_debug_print("mpu6050: set clock source failed.\n");
 80024de:	4893      	ldr	r0, [pc, #588]	; (800272c <mpu6050_basic_init+0x300>)
 80024e0:	f000 fbad 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80024e4:	4886      	ldr	r0, [pc, #536]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80024e6:	f7fe f921 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e2ed      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default rate */
    res = mpu6050_set_sample_rate_divider(&gs_handle, 1000 / (MPU6050_BASIC_DEFAULT_RATE - 1));
 80024ee:	2114      	movs	r1, #20
 80024f0:	4883      	ldr	r0, [pc, #524]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80024f2:	f7ff fab1 	bl	8001a58 <mpu6050_set_sample_rate_divider>
 80024f6:	4603      	mov	r3, r0
 80024f8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <mpu6050_basic_init+0xe4>
    {
        mpu6050_interface_debug_print("mpu6050: set sample rate divider failed.\n");
 8002500:	488b      	ldr	r0, [pc, #556]	; (8002730 <mpu6050_basic_init+0x304>)
 8002502:	f000 fb9c 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002506:	487e      	ldr	r0, [pc, #504]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002508:	f7fe f910 	bl	800072c <mpu6050_deinit>
       
        return 1;
 800250c:	2301      	movs	r3, #1
 800250e:	e2dc      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default low pass filter */
    res = mpu6050_set_low_pass_filter(&gs_handle, MPU6050_BASIC_DEFAULT_LOW_PASS_FILTER);
 8002510:	2103      	movs	r1, #3
 8002512:	487b      	ldr	r0, [pc, #492]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002514:	f7ff fb18 	bl	8001b48 <mpu6050_set_low_pass_filter>
 8002518:	4603      	mov	r3, r0
 800251a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <mpu6050_basic_init+0x106>
    {
        mpu6050_interface_debug_print("mpu6050: set low pass filter failed.\n");
 8002522:	4884      	ldr	r0, [pc, #528]	; (8002734 <mpu6050_basic_init+0x308>)
 8002524:	f000 fb8b 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002528:	4875      	ldr	r0, [pc, #468]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800252a:	f7fe f8ff 	bl	800072c <mpu6050_deinit>
       
        return 1;
 800252e:	2301      	movs	r3, #1
 8002530:	e2cb      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* enable temperature sensor */
    res = mpu6050_set_temperature_sensor(&gs_handle, MPU6050_BOOL_TRUE);
 8002532:	2101      	movs	r1, #1
 8002534:	4872      	ldr	r0, [pc, #456]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002536:	f7ff f8fb 	bl	8001730 <mpu6050_set_temperature_sensor>
 800253a:	4603      	mov	r3, r0
 800253c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <mpu6050_basic_init+0x128>
    {
        mpu6050_interface_debug_print("mpu6050: set temperature sensor failed.\n");
 8002544:	487c      	ldr	r0, [pc, #496]	; (8002738 <mpu6050_basic_init+0x30c>)
 8002546:	f000 fb7a 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800254a:	486d      	ldr	r0, [pc, #436]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800254c:	f7fe f8ee 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002550:	2301      	movs	r3, #1
 8002552:	e2ba      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default cycle wake up */
    res = mpu6050_set_cycle_wake_up(&gs_handle, MPU6050_BASIC_DEFAULT_CYCLE_WAKE_UP);
 8002554:	2100      	movs	r1, #0
 8002556:	486a      	ldr	r0, [pc, #424]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002558:	f7ff f93a 	bl	80017d0 <mpu6050_set_cycle_wake_up>
 800255c:	4603      	mov	r3, r0
 800255e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <mpu6050_basic_init+0x14a>
    {
        mpu6050_interface_debug_print("mpu6050: set cycle wake up failed.\n");
 8002566:	4875      	ldr	r0, [pc, #468]	; (800273c <mpu6050_basic_init+0x310>)
 8002568:	f000 fb69 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800256c:	4864      	ldr	r0, [pc, #400]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800256e:	f7fe f8dd 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002572:	2301      	movs	r3, #1
 8002574:	e2a9      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default wake up frequency */
    res = mpu6050_set_wake_up_frequency(&gs_handle, MPU6050_BASIC_DEFAULT_WAKE_UP_FREQUENCY);
 8002576:	2100      	movs	r1, #0
 8002578:	4861      	ldr	r0, [pc, #388]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800257a:	f7ff fa1f 	bl	80019bc <mpu6050_set_wake_up_frequency>
 800257e:	4603      	mov	r3, r0
 8002580:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <mpu6050_basic_init+0x16c>
    {
        mpu6050_interface_debug_print("mpu6050: set wake up frequency failed.\n");
 8002588:	486d      	ldr	r0, [pc, #436]	; (8002740 <mpu6050_basic_init+0x314>)
 800258a:	f000 fb58 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800258e:	485c      	ldr	r0, [pc, #368]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002590:	f7fe f8cc 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002594:	2301      	movs	r3, #1
 8002596:	e298      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* enable acc x */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_X, MPU6050_BOOL_FALSE);
 8002598:	2200      	movs	r2, #0
 800259a:	2105      	movs	r1, #5
 800259c:	4858      	ldr	r0, [pc, #352]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800259e:	f7ff f9b3 	bl	8001908 <mpu6050_set_standby_mode>
 80025a2:	4603      	mov	r3, r0
 80025a4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <mpu6050_basic_init+0x190>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 80025ac:	4865      	ldr	r0, [pc, #404]	; (8002744 <mpu6050_basic_init+0x318>)
 80025ae:	f000 fb46 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80025b2:	4853      	ldr	r0, [pc, #332]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80025b4:	f7fe f8ba 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e286      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* enable acc y */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_Y, MPU6050_BOOL_FALSE);
 80025bc:	2200      	movs	r2, #0
 80025be:	2104      	movs	r1, #4
 80025c0:	484f      	ldr	r0, [pc, #316]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80025c2:	f7ff f9a1 	bl	8001908 <mpu6050_set_standby_mode>
 80025c6:	4603      	mov	r3, r0
 80025c8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <mpu6050_basic_init+0x1b4>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 80025d0:	485c      	ldr	r0, [pc, #368]	; (8002744 <mpu6050_basic_init+0x318>)
 80025d2:	f000 fb34 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80025d6:	484a      	ldr	r0, [pc, #296]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80025d8:	f7fe f8a8 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80025dc:	2301      	movs	r3, #1
 80025de:	e274      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* enable acc z */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_ACC_Z, MPU6050_BOOL_FALSE);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2103      	movs	r1, #3
 80025e4:	4846      	ldr	r0, [pc, #280]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80025e6:	f7ff f98f 	bl	8001908 <mpu6050_set_standby_mode>
 80025ea:	4603      	mov	r3, r0
 80025ec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <mpu6050_basic_init+0x1d8>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 80025f4:	4853      	ldr	r0, [pc, #332]	; (8002744 <mpu6050_basic_init+0x318>)
 80025f6:	f000 fb22 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80025fa:	4841      	ldr	r0, [pc, #260]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80025fc:	f7fe f896 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002600:	2301      	movs	r3, #1
 8002602:	e262      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* enable gyro x */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_X, MPU6050_BOOL_FALSE);
 8002604:	2200      	movs	r2, #0
 8002606:	2102      	movs	r1, #2
 8002608:	483d      	ldr	r0, [pc, #244]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800260a:	f7ff f97d 	bl	8001908 <mpu6050_set_standby_mode>
 800260e:	4603      	mov	r3, r0
 8002610:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <mpu6050_basic_init+0x1fc>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 8002618:	484a      	ldr	r0, [pc, #296]	; (8002744 <mpu6050_basic_init+0x318>)
 800261a:	f000 fb10 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800261e:	4838      	ldr	r0, [pc, #224]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002620:	f7fe f884 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002624:	2301      	movs	r3, #1
 8002626:	e250      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* enable gyro y */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_Y, MPU6050_BOOL_FALSE);
 8002628:	2200      	movs	r2, #0
 800262a:	2101      	movs	r1, #1
 800262c:	4834      	ldr	r0, [pc, #208]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800262e:	f7ff f96b 	bl	8001908 <mpu6050_set_standby_mode>
 8002632:	4603      	mov	r3, r0
 8002634:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <mpu6050_basic_init+0x220>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 800263c:	4841      	ldr	r0, [pc, #260]	; (8002744 <mpu6050_basic_init+0x318>)
 800263e:	f000 fafe 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002642:	482f      	ldr	r0, [pc, #188]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002644:	f7fe f872 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002648:	2301      	movs	r3, #1
 800264a:	e23e      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* enable gyro z */
    res = mpu6050_set_standby_mode(&gs_handle, MPU6050_SOURCE_GYRO_Z, MPU6050_BOOL_FALSE);
 800264c:	2200      	movs	r2, #0
 800264e:	2100      	movs	r1, #0
 8002650:	482b      	ldr	r0, [pc, #172]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002652:	f7ff f959 	bl	8001908 <mpu6050_set_standby_mode>
 8002656:	4603      	mov	r3, r0
 8002658:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800265a:	7bfb      	ldrb	r3, [r7, #15]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d007      	beq.n	8002670 <mpu6050_basic_init+0x244>
    {
        mpu6050_interface_debug_print("mpu6050: set standby mode failed.\n");
 8002660:	4838      	ldr	r0, [pc, #224]	; (8002744 <mpu6050_basic_init+0x318>)
 8002662:	f000 faec 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002666:	4826      	ldr	r0, [pc, #152]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002668:	f7fe f860 	bl	800072c <mpu6050_deinit>
       
        return 1;
 800266c:	2301      	movs	r3, #1
 800266e:	e22c      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* disable gyroscope x test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_X, MPU6050_BOOL_FALSE);
 8002670:	2200      	movs	r2, #0
 8002672:	2107      	movs	r1, #7
 8002674:	4822      	ldr	r0, [pc, #136]	; (8002700 <mpu6050_basic_init+0x2d4>)
 8002676:	f7ff fab1 	bl	8001bdc <mpu6050_set_gyroscope_test>
 800267a:	4603      	mov	r3, r0
 800267c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <mpu6050_basic_init+0x268>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 8002684:	4830      	ldr	r0, [pc, #192]	; (8002748 <mpu6050_basic_init+0x31c>)
 8002686:	f000 fada 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800268a:	481d      	ldr	r0, [pc, #116]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800268c:	f7fe f84e 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002690:	2301      	movs	r3, #1
 8002692:	e21a      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* disable gyroscope y test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_Y, MPU6050_BOOL_FALSE);
 8002694:	2200      	movs	r2, #0
 8002696:	2106      	movs	r1, #6
 8002698:	4819      	ldr	r0, [pc, #100]	; (8002700 <mpu6050_basic_init+0x2d4>)
 800269a:	f7ff fa9f 	bl	8001bdc <mpu6050_set_gyroscope_test>
 800269e:	4603      	mov	r3, r0
 80026a0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <mpu6050_basic_init+0x28c>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 80026a8:	4827      	ldr	r0, [pc, #156]	; (8002748 <mpu6050_basic_init+0x31c>)
 80026aa:	f000 fac8 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80026ae:	4814      	ldr	r0, [pc, #80]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80026b0:	f7fe f83c 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e208      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* disable gyroscope z test */
    res = mpu6050_set_gyroscope_test(&gs_handle, MPU6050_AXIS_Z, MPU6050_BOOL_FALSE);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2105      	movs	r1, #5
 80026bc:	4810      	ldr	r0, [pc, #64]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80026be:	f7ff fa8d 	bl	8001bdc <mpu6050_set_gyroscope_test>
 80026c2:	4603      	mov	r3, r0
 80026c4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <mpu6050_basic_init+0x2b0>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope test failed.\n");
 80026cc:	481e      	ldr	r0, [pc, #120]	; (8002748 <mpu6050_basic_init+0x31c>)
 80026ce:	f000 fab6 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80026d2:	480b      	ldr	r0, [pc, #44]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80026d4:	f7fe f82a 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80026d8:	2301      	movs	r3, #1
 80026da:	e1f6      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* disable accelerometer x test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_X, MPU6050_BOOL_FALSE);
 80026dc:	2200      	movs	r2, #0
 80026de:	2107      	movs	r1, #7
 80026e0:	4807      	ldr	r0, [pc, #28]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80026e2:	f7ff fb23 	bl	8001d2c <mpu6050_set_accelerometer_test>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d02f      	beq.n	8002750 <mpu6050_basic_init+0x324>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 80026f0:	4816      	ldr	r0, [pc, #88]	; (800274c <mpu6050_basic_init+0x320>)
 80026f2:	f000 faa4 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80026f6:	4802      	ldr	r0, [pc, #8]	; (8002700 <mpu6050_basic_init+0x2d4>)
 80026f8:	f7fe f818 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e1e4      	b.n	8002aca <mpu6050_basic_init+0x69e>
 8002700:	20000028 	.word	0x20000028
 8002704:	08002b8d 	.word	0x08002b8d
 8002708:	08002b9d 	.word	0x08002b9d
 800270c:	08002bb1 	.word	0x08002bb1
 8002710:	08002bed 	.word	0x08002bed
 8002714:	08002c29 	.word	0x08002c29
 8002718:	08002c3f 	.word	0x08002c3f
 800271c:	08002c51 	.word	0x08002c51
 8002720:	08005e3c 	.word	0x08005e3c
 8002724:	08005e5c 	.word	0x08005e5c
 8002728:	08005e74 	.word	0x08005e74
 800272c:	08005e90 	.word	0x08005e90
 8002730:	08005eb4 	.word	0x08005eb4
 8002734:	08005ee0 	.word	0x08005ee0
 8002738:	08005f08 	.word	0x08005f08
 800273c:	08005f34 	.word	0x08005f34
 8002740:	08005f58 	.word	0x08005f58
 8002744:	08005f80 	.word	0x08005f80
 8002748:	08005fa4 	.word	0x08005fa4
 800274c:	08005fcc 	.word	0x08005fcc
    }
    
    /* disable accelerometer y test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_Y, MPU6050_BOOL_FALSE);
 8002750:	2200      	movs	r2, #0
 8002752:	2106      	movs	r1, #6
 8002754:	48ae      	ldr	r0, [pc, #696]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002756:	f7ff fae9 	bl	8001d2c <mpu6050_set_accelerometer_test>
 800275a:	4603      	mov	r3, r0
 800275c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d007      	beq.n	8002774 <mpu6050_basic_init+0x348>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 8002764:	48ab      	ldr	r0, [pc, #684]	; (8002a14 <mpu6050_basic_init+0x5e8>)
 8002766:	f000 fa6a 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800276a:	48a9      	ldr	r0, [pc, #676]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 800276c:	f7fd ffde 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002770:	2301      	movs	r3, #1
 8002772:	e1aa      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* disable accelerometer z test */
    res = mpu6050_set_accelerometer_test(&gs_handle, MPU6050_AXIS_Z, MPU6050_BOOL_FALSE);
 8002774:	2200      	movs	r2, #0
 8002776:	2105      	movs	r1, #5
 8002778:	48a5      	ldr	r0, [pc, #660]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 800277a:	f7ff fad7 	bl	8001d2c <mpu6050_set_accelerometer_test>
 800277e:	4603      	mov	r3, r0
 8002780:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <mpu6050_basic_init+0x36c>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer test failed.\n");
 8002788:	48a2      	ldr	r0, [pc, #648]	; (8002a14 <mpu6050_basic_init+0x5e8>)
 800278a:	f000 fa58 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800278e:	48a0      	ldr	r0, [pc, #640]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002790:	f7fd ffcc 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002794:	2301      	movs	r3, #1
 8002796:	e198      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* disable fifo */
    res = mpu6050_set_fifo(&gs_handle, MPU6050_BOOL_FALSE);
 8002798:	2100      	movs	r1, #0
 800279a:	489d      	ldr	r0, [pc, #628]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 800279c:	f7fe fee2 	bl	8001564 <mpu6050_set_fifo>
 80027a0:	4603      	mov	r3, r0
 80027a2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d007      	beq.n	80027ba <mpu6050_basic_init+0x38e>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo failed.\n");
 80027aa:	489b      	ldr	r0, [pc, #620]	; (8002a18 <mpu6050_basic_init+0x5ec>)
 80027ac:	f000 fa47 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80027b0:	4897      	ldr	r0, [pc, #604]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80027b2:	f7fd ffbb 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e187      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* disable temp fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_TEMP, MPU6050_BOOL_FALSE);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2107      	movs	r1, #7
 80027be:	4894      	ldr	r0, [pc, #592]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80027c0:	f7ff fb5c 	bl	8001e7c <mpu6050_set_fifo_enable>
 80027c4:	4603      	mov	r3, r0
 80027c6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d007      	beq.n	80027de <mpu6050_basic_init+0x3b2>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 80027ce:	4893      	ldr	r0, [pc, #588]	; (8002a1c <mpu6050_basic_init+0x5f0>)
 80027d0:	f000 fa35 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80027d4:	488e      	ldr	r0, [pc, #568]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80027d6:	f7fd ffa9 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	e175      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* disable xg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_XG, MPU6050_BOOL_FALSE);
 80027de:	2200      	movs	r2, #0
 80027e0:	2106      	movs	r1, #6
 80027e2:	488b      	ldr	r0, [pc, #556]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80027e4:	f7ff fb4a 	bl	8001e7c <mpu6050_set_fifo_enable>
 80027e8:	4603      	mov	r3, r0
 80027ea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <mpu6050_basic_init+0x3d6>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 80027f2:	488a      	ldr	r0, [pc, #552]	; (8002a1c <mpu6050_basic_init+0x5f0>)
 80027f4:	f000 fa23 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80027f8:	4885      	ldr	r0, [pc, #532]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80027fa:	f7fd ff97 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80027fe:	2301      	movs	r3, #1
 8002800:	e163      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* disable yg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_YG, MPU6050_BOOL_FALSE);
 8002802:	2200      	movs	r2, #0
 8002804:	2105      	movs	r1, #5
 8002806:	4882      	ldr	r0, [pc, #520]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002808:	f7ff fb38 	bl	8001e7c <mpu6050_set_fifo_enable>
 800280c:	4603      	mov	r3, r0
 800280e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <mpu6050_basic_init+0x3fa>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 8002816:	4881      	ldr	r0, [pc, #516]	; (8002a1c <mpu6050_basic_init+0x5f0>)
 8002818:	f000 fa11 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800281c:	487c      	ldr	r0, [pc, #496]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 800281e:	f7fd ff85 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002822:	2301      	movs	r3, #1
 8002824:	e151      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* disable zg fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_ZG, MPU6050_BOOL_FALSE);
 8002826:	2200      	movs	r2, #0
 8002828:	2104      	movs	r1, #4
 800282a:	4879      	ldr	r0, [pc, #484]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 800282c:	f7ff fb26 	bl	8001e7c <mpu6050_set_fifo_enable>
 8002830:	4603      	mov	r3, r0
 8002832:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002834:	7bfb      	ldrb	r3, [r7, #15]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d007      	beq.n	800284a <mpu6050_basic_init+0x41e>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 800283a:	4878      	ldr	r0, [pc, #480]	; (8002a1c <mpu6050_basic_init+0x5f0>)
 800283c:	f000 f9ff 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002840:	4873      	ldr	r0, [pc, #460]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002842:	f7fd ff73 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002846:	2301      	movs	r3, #1
 8002848:	e13f      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* disable accel fifo */
    res = mpu6050_set_fifo_enable(&gs_handle, MPU6050_FIFO_ACCEL, MPU6050_BOOL_FALSE);
 800284a:	2200      	movs	r2, #0
 800284c:	2103      	movs	r1, #3
 800284e:	4870      	ldr	r0, [pc, #448]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002850:	f7ff fb14 	bl	8001e7c <mpu6050_set_fifo_enable>
 8002854:	4603      	mov	r3, r0
 8002856:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <mpu6050_basic_init+0x442>
    {
        mpu6050_interface_debug_print("mpu6050: set fifo enable failed.\n");
 800285e:	486f      	ldr	r0, [pc, #444]	; (8002a1c <mpu6050_basic_init+0x5f0>)
 8002860:	f000 f9ed 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002864:	486a      	ldr	r0, [pc, #424]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002866:	f7fd ff61 	bl	800072c <mpu6050_deinit>
       
        return 1;
 800286a:	2301      	movs	r3, #1
 800286c:	e12d      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default interrupt level */
    res = mpu6050_set_interrupt_level(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 800286e:	2101      	movs	r1, #1
 8002870:	4867      	ldr	r0, [pc, #412]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002872:	f7ff fb5d 	bl	8001f30 <mpu6050_set_interrupt_level>
 8002876:	4603      	mov	r3, r0
 8002878:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <mpu6050_basic_init+0x464>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt level failed.\n");
 8002880:	4867      	ldr	r0, [pc, #412]	; (8002a20 <mpu6050_basic_init+0x5f4>)
 8002882:	f000 f9dc 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002886:	4862      	ldr	r0, [pc, #392]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002888:	f7fd ff50 	bl	800072c <mpu6050_deinit>
       
        return 1;
 800288c:	2301      	movs	r3, #1
 800288e:	e11c      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default pin type */
    res = mpu6050_set_interrupt_pin_type(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 8002890:	2100      	movs	r1, #0
 8002892:	485f      	ldr	r0, [pc, #380]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002894:	f7ff fb9a 	bl	8001fcc <mpu6050_set_interrupt_pin_type>
 8002898:	4603      	mov	r3, r0
 800289a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d007      	beq.n	80028b2 <mpu6050_basic_init+0x486>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt pin type failed.\n");
 80028a2:	4860      	ldr	r0, [pc, #384]	; (8002a24 <mpu6050_basic_init+0x5f8>)
 80028a4:	f000 f9cb 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80028a8:	4859      	ldr	r0, [pc, #356]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80028aa:	f7fd ff3f 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e10b      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default motion interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_MOTION, MPU6050_BASIC_DEFAULT_INTERRUPT_MOTION);
 80028b2:	2200      	movs	r2, #0
 80028b4:	2106      	movs	r1, #6
 80028b6:	4856      	ldr	r0, [pc, #344]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80028b8:	f7ff fd5e 	bl	8002378 <mpu6050_set_interrupt>
 80028bc:	4603      	mov	r3, r0
 80028be:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <mpu6050_basic_init+0x4aa>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 80028c6:	4858      	ldr	r0, [pc, #352]	; (8002a28 <mpu6050_basic_init+0x5fc>)
 80028c8:	f000 f9b9 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80028cc:	4850      	ldr	r0, [pc, #320]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80028ce:	f7fd ff2d 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0f9      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_FIFO_OVERFLOW, MPU6050_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2104      	movs	r1, #4
 80028da:	484d      	ldr	r0, [pc, #308]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80028dc:	f7ff fd4c 	bl	8002378 <mpu6050_set_interrupt>
 80028e0:	4603      	mov	r3, r0
 80028e2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d007      	beq.n	80028fa <mpu6050_basic_init+0x4ce>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 80028ea:	484f      	ldr	r0, [pc, #316]	; (8002a28 <mpu6050_basic_init+0x5fc>)
 80028ec:	f000 f9a7 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80028f0:	4847      	ldr	r0, [pc, #284]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80028f2:	f7fd ff1b 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0e7      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default dmp interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_DMP, MPU6050_BASIC_DEFAULT_INTERRUPT_DMP);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2101      	movs	r1, #1
 80028fe:	4844      	ldr	r0, [pc, #272]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002900:	f7ff fd3a 	bl	8002378 <mpu6050_set_interrupt>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002908:	7bfb      	ldrb	r3, [r7, #15]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <mpu6050_basic_init+0x4f2>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 800290e:	4846      	ldr	r0, [pc, #280]	; (8002a28 <mpu6050_basic_init+0x5fc>)
 8002910:	f000 f995 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002914:	483e      	ldr	r0, [pc, #248]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002916:	f7fd ff09 	bl	800072c <mpu6050_deinit>
       
        return 1;
 800291a:	2301      	movs	r3, #1
 800291c:	e0d5      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default i2c master interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_I2C_MAST, MPU6050_BASIC_DEFAULT_INTERRUPT_I2C_MAST);
 800291e:	2200      	movs	r2, #0
 8002920:	2103      	movs	r1, #3
 8002922:	483b      	ldr	r0, [pc, #236]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002924:	f7ff fd28 	bl	8002378 <mpu6050_set_interrupt>
 8002928:	4603      	mov	r3, r0
 800292a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <mpu6050_basic_init+0x516>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 8002932:	483d      	ldr	r0, [pc, #244]	; (8002a28 <mpu6050_basic_init+0x5fc>)
 8002934:	f000 f983 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002938:	4835      	ldr	r0, [pc, #212]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 800293a:	f7fd fef7 	bl	800072c <mpu6050_deinit>
       
        return 1;
 800293e:	2301      	movs	r3, #1
 8002940:	e0c3      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default data ready interrupt */
    res = mpu6050_set_interrupt(&gs_handle, MPU6050_INTERRUPT_DATA_READY, MPU6050_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	4832      	ldr	r0, [pc, #200]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002948:	f7ff fd16 	bl	8002378 <mpu6050_set_interrupt>
 800294c:	4603      	mov	r3, r0
 800294e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d007      	beq.n	8002966 <mpu6050_basic_init+0x53a>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt failed.\n");
 8002956:	4834      	ldr	r0, [pc, #208]	; (8002a28 <mpu6050_basic_init+0x5fc>)
 8002958:	f000 f971 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800295c:	482c      	ldr	r0, [pc, #176]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 800295e:	f7fd fee5 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002962:	2301      	movs	r3, #1
 8002964:	e0b1      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default interrupt latch */
    res = mpu6050_set_interrupt_latch(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_LATCH);
 8002966:	2101      	movs	r1, #1
 8002968:	4829      	ldr	r0, [pc, #164]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 800296a:	f7ff fb7d 	bl	8002068 <mpu6050_set_interrupt_latch>
 800296e:	4603      	mov	r3, r0
 8002970:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002972:	7bfb      	ldrb	r3, [r7, #15]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d007      	beq.n	8002988 <mpu6050_basic_init+0x55c>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt latch failed.\n");
 8002978:	482c      	ldr	r0, [pc, #176]	; (8002a2c <mpu6050_basic_init+0x600>)
 800297a:	f000 f960 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 800297e:	4824      	ldr	r0, [pc, #144]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002980:	f7fd fed4 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002984:	2301      	movs	r3, #1
 8002986:	e0a0      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default interrupt read clear */
    res = mpu6050_set_interrupt_read_clear(&gs_handle, MPU6050_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 8002988:	2101      	movs	r1, #1
 800298a:	4821      	ldr	r0, [pc, #132]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 800298c:	f7ff fbbc 	bl	8002108 <mpu6050_set_interrupt_read_clear>
 8002990:	4603      	mov	r3, r0
 8002992:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002994:	7bfb      	ldrb	r3, [r7, #15]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <mpu6050_basic_init+0x57e>
    {
        mpu6050_interface_debug_print("mpu6050: set interrupt read clear failed.\n");
 800299a:	4825      	ldr	r0, [pc, #148]	; (8002a30 <mpu6050_basic_init+0x604>)
 800299c:	f000 f94f 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80029a0:	481b      	ldr	r0, [pc, #108]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80029a2:	f7fd fec3 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e08f      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the extern sync */
    res = mpu6050_set_extern_sync(&gs_handle, MPU6050_BASIC_DEFAULT_EXTERN_SYNC);
 80029aa:	2100      	movs	r1, #0
 80029ac:	4818      	ldr	r0, [pc, #96]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80029ae:	f7ff f87d 	bl	8001aac <mpu6050_set_extern_sync>
 80029b2:	4603      	mov	r3, r0
 80029b4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <mpu6050_basic_init+0x5a0>
    {
        mpu6050_interface_debug_print("mpu6050: set extern sync failed.\n");
 80029bc:	481d      	ldr	r0, [pc, #116]	; (8002a34 <mpu6050_basic_init+0x608>)
 80029be:	f000 f93e 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80029c2:	4813      	ldr	r0, [pc, #76]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80029c4:	f7fd feb2 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e07e      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default fsync interrupt */
    res = mpu6050_set_fsync_interrupt(&gs_handle, MPU6050_BASIC_DEFAULT_FSYNC_INTERRUPT);
 80029cc:	2100      	movs	r1, #0
 80029ce:	4810      	ldr	r0, [pc, #64]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80029d0:	f7ff fc36 	bl	8002240 <mpu6050_set_fsync_interrupt>
 80029d4:	4603      	mov	r3, r0
 80029d6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d007      	beq.n	80029ee <mpu6050_basic_init+0x5c2>
    {
        mpu6050_interface_debug_print("mpu6050: set fsync interrupt failed.\n");
 80029de:	4816      	ldr	r0, [pc, #88]	; (8002a38 <mpu6050_basic_init+0x60c>)
 80029e0:	f000 f92d 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 80029e4:	480a      	ldr	r0, [pc, #40]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80029e6:	f7fd fea1 	bl	800072c <mpu6050_deinit>
       
        return 1;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06d      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default fsync interrupt level */
    res = mpu6050_set_fsync_interrupt_level(&gs_handle, MPU6050_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 80029ee:	2101      	movs	r1, #1
 80029f0:	4807      	ldr	r0, [pc, #28]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 80029f2:	f7ff fbd7 	bl	80021a4 <mpu6050_set_fsync_interrupt_level>
 80029f6:	4603      	mov	r3, r0
 80029f8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01f      	beq.n	8002a40 <mpu6050_basic_init+0x614>
    {
        mpu6050_interface_debug_print("mpu6050: set fsync interrupt level failed.\n");
 8002a00:	480e      	ldr	r0, [pc, #56]	; (8002a3c <mpu6050_basic_init+0x610>)
 8002a02:	f000 f91c 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002a06:	4802      	ldr	r0, [pc, #8]	; (8002a10 <mpu6050_basic_init+0x5e4>)
 8002a08:	f7fd fe90 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e05c      	b.n	8002aca <mpu6050_basic_init+0x69e>
 8002a10:	20000028 	.word	0x20000028
 8002a14:	08005fcc 	.word	0x08005fcc
 8002a18:	08005ff8 	.word	0x08005ff8
 8002a1c:	08006014 	.word	0x08006014
 8002a20:	08006038 	.word	0x08006038
 8002a24:	08006060 	.word	0x08006060
 8002a28:	0800608c 	.word	0x0800608c
 8002a2c:	080060ac 	.word	0x080060ac
 8002a30:	080060d4 	.word	0x080060d4
 8002a34:	08006100 	.word	0x08006100
 8002a38:	08006124 	.word	0x08006124
 8002a3c:	0800614c 	.word	0x0800614c
    }
    
    /* set the default iic master */
    res = mpu6050_set_iic_master(&gs_handle, MPU6050_BASIC_DEFAULT_IIC_MASTER);
 8002a40:	2100      	movs	r1, #0
 8002a42:	4824      	ldr	r0, [pc, #144]	; (8002ad4 <mpu6050_basic_init+0x6a8>)
 8002a44:	f7fe fddc 	bl	8001600 <mpu6050_set_iic_master>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <mpu6050_basic_init+0x636>
    {
        mpu6050_interface_debug_print("mpu6050: set iic master failed.\n");
 8002a52:	4821      	ldr	r0, [pc, #132]	; (8002ad8 <mpu6050_basic_init+0x6ac>)
 8002a54:	f000 f8f3 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002a58:	481e      	ldr	r0, [pc, #120]	; (8002ad4 <mpu6050_basic_init+0x6a8>)
 8002a5a:	f7fd fe67 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e033      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default iic bypass */
    res = mpu6050_set_iic_bypass(&gs_handle, MPU6050_BASIC_DEFAULT_IIC_BYPASS);
 8002a62:	2100      	movs	r1, #0
 8002a64:	481b      	ldr	r0, [pc, #108]	; (8002ad4 <mpu6050_basic_init+0x6a8>)
 8002a66:	f7ff fc39 	bl	80022dc <mpu6050_set_iic_bypass>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <mpu6050_basic_init+0x658>
    {
        mpu6050_interface_debug_print("mpu6050: set iic bypass failed.\n");
 8002a74:	4819      	ldr	r0, [pc, #100]	; (8002adc <mpu6050_basic_init+0x6b0>)
 8002a76:	f000 f8e2 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002a7a:	4816      	ldr	r0, [pc, #88]	; (8002ad4 <mpu6050_basic_init+0x6a8>)
 8002a7c:	f7fd fe56 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e022      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default accelerometer range */
    res = mpu6050_set_accelerometer_range(&gs_handle, MPU6050_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 8002a84:	2100      	movs	r1, #0
 8002a86:	4813      	ldr	r0, [pc, #76]	; (8002ad4 <mpu6050_basic_init+0x6a8>)
 8002a88:	f7ff f9aa 	bl	8001de0 <mpu6050_set_accelerometer_range>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <mpu6050_basic_init+0x67a>
    {
        mpu6050_interface_debug_print("mpu6050: set accelerometer range failed.\n");
 8002a96:	4812      	ldr	r0, [pc, #72]	; (8002ae0 <mpu6050_basic_init+0x6b4>)
 8002a98:	f000 f8d1 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002a9c:	480d      	ldr	r0, [pc, #52]	; (8002ad4 <mpu6050_basic_init+0x6a8>)
 8002a9e:	f7fd fe45 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e011      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    /* set the default gyroscope range */
    res = mpu6050_set_gyroscope_range(&gs_handle, MPU6050_BASIC_DEFAULT_GYROSCOPE_RANGE);
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	480a      	ldr	r0, [pc, #40]	; (8002ad4 <mpu6050_basic_init+0x6a8>)
 8002aaa:	f7ff f8f1 	bl	8001c90 <mpu6050_set_gyroscope_range>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8002ab2:	7bfb      	ldrb	r3, [r7, #15]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <mpu6050_basic_init+0x69c>
    {
        mpu6050_interface_debug_print("mpu6050: set gyroscope range failed.\n");
 8002ab8:	480a      	ldr	r0, [pc, #40]	; (8002ae4 <mpu6050_basic_init+0x6b8>)
 8002aba:	f000 f8c0 	bl	8002c3e <mpu6050_interface_debug_print>
        (void)mpu6050_deinit(&gs_handle);
 8002abe:	4805      	ldr	r0, [pc, #20]	; (8002ad4 <mpu6050_basic_init+0x6a8>)
 8002ac0:	f7fd fe34 	bl	800072c <mpu6050_deinit>
       
        return 1;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <mpu6050_basic_init+0x69e>
    }
    
    return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000028 	.word	0x20000028
 8002ad8:	08006178 	.word	0x08006178
 8002adc:	0800619c 	.word	0x0800619c
 8002ae0:	080061c0 	.word	0x080061c0
 8002ae4:	080061ec 	.word	0x080061ec

08002ae8 <mpu6050_basic_read_temperature>:
 *             - 0 success
 *             - 1 read temperature failed
 * @note       none
 */
uint8_t mpu6050_basic_read_temperature(float *degrees)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
    int16_t raw;
    
    /* read temperature */
    if (mpu6050_read_temperature(&gs_handle, &raw, degrees) != 0)
 8002af0:	f107 030e 	add.w	r3, r7, #14
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4806      	ldr	r0, [pc, #24]	; (8002b14 <mpu6050_basic_read_temperature+0x2c>)
 8002afa:	f7fe fce9 	bl	80014d0 <mpu6050_read_temperature>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <mpu6050_basic_read_temperature+0x20>
    {
        return 1;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <mpu6050_basic_read_temperature+0x22>
    }
    
    return 0;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000028 	.word	0x20000028

08002b18 <mpu6050_basic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6050_basic_read(float g[3], float dps[3])
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08e      	sub	sp, #56	; 0x38
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
    int16_t gyro_raw[3];
    float accel[3];
    float gyro[3];
    
    /* set 1 */
    len = 1;
 8002b22:	2301      	movs	r3, #1
 8002b24:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    /* read data */
    if (mpu6050_read(&gs_handle,
 8002b26:	f107 0020 	add.w	r0, r7, #32
 8002b2a:	f107 0214 	add.w	r2, r7, #20
 8002b2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002b32:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8002b36:	9301      	str	r3, [sp, #4]
 8002b38:	f107 0308 	add.w	r3, r7, #8
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4811      	ldr	r0, [pc, #68]	; (8002b88 <mpu6050_basic_read+0x70>)
 8002b42:	f7fd fe37 	bl	80007b4 <mpu6050_read>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <mpu6050_basic_read+0x38>
                    (int16_t (*)[3])&accel_raw, (float (*)[3])&accel,
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                     &len) != 0
                    )
    {
        return 1;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e016      	b.n	8002b7e <mpu6050_basic_read+0x66>
    }
    
    /* copy the data */
    g[0] = accel[0];
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	601a      	str	r2, [r3, #0]
    g[1] = accel[1];
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	601a      	str	r2, [r3, #0]
    g[2] = accel[2];
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3308      	adds	r3, #8
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	601a      	str	r2, [r3, #0]
    dps[0] = gyro[0];
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	601a      	str	r2, [r3, #0]
    dps[1] = gyro[1];
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]
    dps[2] = gyro[2];
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	3308      	adds	r3, #8
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	601a      	str	r2, [r3, #0]
    
    return 0;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3730      	adds	r7, #48	; 0x30
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000028 	.word	0x20000028

08002b8c <mpu6050_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu6050_interface_iic_init(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0

    return 0;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <mpu6050_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu6050_interface_iic_deinit(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	LL_I2C_DeInit(I2C1);
 8002ba0:	4802      	ldr	r0, [pc, #8]	; (8002bac <mpu6050_interface_iic_deinit+0x10>)
 8002ba2:	f001 fd75 	bl	8004690 <LL_I2C_DeInit>
    return 0;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40005400 	.word	0x40005400

08002bb0 <mpu6050_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6050_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	603a      	str	r2, [r7, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	71bb      	strb	r3, [r7, #6]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80bb      	strh	r3, [r7, #4]
	return i2c_reg_read(I2C1, addr, reg, buf, len, 500);
 8002bc6:	79ba      	ldrb	r2, [r7, #6]
 8002bc8:	79f9      	ldrb	r1, [r7, #7]
 8002bca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	88bb      	ldrh	r3, [r7, #4]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4804      	ldr	r0, [pc, #16]	; (8002be8 <mpu6050_interface_iic_read+0x38>)
 8002bd8:	f000 fad0 	bl	800317c <i2c_reg_read>
 8002bdc:	4603      	mov	r3, r0

}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40005400 	.word	0x40005400

08002bec <mpu6050_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6050_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	603a      	str	r2, [r7, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	71bb      	strb	r3, [r7, #6]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	80bb      	strh	r3, [r7, #4]
    return i2c_reg_write(I2C1, addr, reg, buf, len, 500);
 8002c02:	79ba      	ldrb	r2, [r7, #6]
 8002c04:	79f9      	ldrb	r1, [r7, #7]
 8002c06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	88bb      	ldrh	r3, [r7, #4]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4804      	ldr	r0, [pc, #16]	; (8002c24 <mpu6050_interface_iic_write+0x38>)
 8002c14:	f000 f9db 	bl	8002fce <i2c_reg_write>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40005400 	.word	0x40005400

08002c28 <mpu6050_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void mpu6050_interface_delay_ms(uint32_t ms)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

	HAL_Delay(ms);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 fd6b 	bl	800370c <HAL_Delay>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <mpu6050_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mpu6050_interface_debug_print(const char *const fmt, ...)
{
 8002c3e:	b40f      	push	{r0, r1, r2, r3}
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0

}
 8002c44:	bf00      	nop
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	b004      	add	sp, #16
 8002c4e:	4770      	bx	lr

08002c50 <mpu6050_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type is the irq type
 * @note      none
 */
void mpu6050_interface_receive_callback(uint8_t type)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
    switch (type)
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d825      	bhi.n	8002cac <mpu6050_interface_receive_callback+0x5c>
 8002c60:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <mpu6050_interface_receive_callback+0x18>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002ca5 	.word	0x08002ca5
 8002c6c:	08002c9d 	.word	0x08002c9d
 8002c70:	08002cad 	.word	0x08002cad
 8002c74:	08002c95 	.word	0x08002c95
 8002c78:	08002c8d 	.word	0x08002c8d
 8002c7c:	08002cad 	.word	0x08002cad
 8002c80:	08002c85 	.word	0x08002c85
    {
        case MPU6050_INTERRUPT_MOTION :
        {
            mpu6050_interface_debug_print("mpu6050: irq motion.\n");
 8002c84:	480d      	ldr	r0, [pc, #52]	; (8002cbc <mpu6050_interface_receive_callback+0x6c>)
 8002c86:	f7ff ffda 	bl	8002c3e <mpu6050_interface_debug_print>
            
            break;
 8002c8a:	e013      	b.n	8002cb4 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu6050_interface_debug_print("mpu6050: irq fifo overflow.\n");
 8002c8c:	480c      	ldr	r0, [pc, #48]	; (8002cc0 <mpu6050_interface_receive_callback+0x70>)
 8002c8e:	f7ff ffd6 	bl	8002c3e <mpu6050_interface_debug_print>
            
            break;
 8002c92:	e00f      	b.n	8002cb4 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_I2C_MAST :
        {
            mpu6050_interface_debug_print("mpu6050: irq i2c master.\n");
 8002c94:	480b      	ldr	r0, [pc, #44]	; (8002cc4 <mpu6050_interface_receive_callback+0x74>)
 8002c96:	f7ff ffd2 	bl	8002c3e <mpu6050_interface_debug_print>
            
            break;
 8002c9a:	e00b      	b.n	8002cb4 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_DMP :
        {
            mpu6050_interface_debug_print("mpu6050: irq dmp\n");
 8002c9c:	480a      	ldr	r0, [pc, #40]	; (8002cc8 <mpu6050_interface_receive_callback+0x78>)
 8002c9e:	f7ff ffce 	bl	8002c3e <mpu6050_interface_debug_print>
            
            break;
 8002ca2:	e007      	b.n	8002cb4 <mpu6050_interface_receive_callback+0x64>
        }
        case MPU6050_INTERRUPT_DATA_READY :
        {
            mpu6050_interface_debug_print("mpu6050: irq data ready\n");
 8002ca4:	4809      	ldr	r0, [pc, #36]	; (8002ccc <mpu6050_interface_receive_callback+0x7c>)
 8002ca6:	f7ff ffca 	bl	8002c3e <mpu6050_interface_debug_print>
            
            break;
 8002caa:	e003      	b.n	8002cb4 <mpu6050_interface_receive_callback+0x64>
        }
        default :
        {
            mpu6050_interface_debug_print("mpu6050: irq unknown code.\n");
 8002cac:	4808      	ldr	r0, [pc, #32]	; (8002cd0 <mpu6050_interface_receive_callback+0x80>)
 8002cae:	f7ff ffc6 	bl	8002c3e <mpu6050_interface_debug_print>
            
            break;
 8002cb2:	bf00      	nop
        }
    }
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	08006214 	.word	0x08006214
 8002cc0:	0800622c 	.word	0x0800622c
 8002cc4:	0800624c 	.word	0x0800624c
 8002cc8:	08006268 	.word	0x08006268
 8002ccc:	0800627c 	.word	0x0800627c
 8002cd0:	08006298 	.word	0x08006298

08002cd4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce0:	4907      	ldr	r1, [pc, #28]	; (8002d00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	40023800 	.word	0x40023800

08002d04 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002d08:	2002      	movs	r0, #2
 8002d0a:	f7ff ffe3 	bl	8002cd4 <LL_AHB1_GRP1_EnableClock>

}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <LL_I2C_DisableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_DisableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableClockStretching(I2C_TypeDef *I2Cx)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	601a      	str	r2, [r3, #0]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	60da      	str	r2, [r3, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f023 0201 	bic.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	60da      	str	r2, [r3, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_AHB1_GRP1_EnableClock>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da4:	4907      	ldr	r1, [pc, #28]	; (8002dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4013      	ands	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002db6:	68fb      	ldr	r3, [r7, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dd4:	4907      	ldr	r1, [pc, #28]	; (8002df4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4013      	ands	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr
 8002df4:	40023800 	.word	0x40023800

08002df8 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08c      	sub	sp, #48	; 0x30
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8002dfe:	f107 0318 	add.w	r3, r7, #24
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	60da      	str	r2, [r3, #12]
 8002e0c:	611a      	str	r2, [r3, #16]
 8002e0e:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	463b      	mov	r3, r7
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	611a      	str	r2, [r3, #16]
 8002e1e:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002e20:	2002      	movs	r0, #2
 8002e22:	f7ff ffb9 	bl	8002d98 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002e26:	23c0      	movs	r3, #192	; 0xc0
 8002e28:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8002e32:	2301      	movs	r3, #1
 8002e34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e36:	2300      	movs	r3, #0
 8002e38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8002e3a:	2304      	movs	r3, #4
 8002e3c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3e:	463b      	mov	r3, r7
 8002e40:	4619      	mov	r1, r3
 8002e42:	4816      	ldr	r0, [pc, #88]	; (8002e9c <MX_I2C1_Init+0xa4>)
 8002e44:	f001 fa95 	bl	8004372 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8002e48:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002e4c:	f7ff ffbc 	bl	8002dc8 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableClockStretching(I2C1);
 8002e50:	4813      	ldr	r0, [pc, #76]	; (8002ea0 <MX_I2C1_Init+0xa8>)
 8002e52:	f7ff ff5e 	bl	8002d12 <LL_I2C_DisableClockStretching>
  LL_I2C_DisableOwnAddress2(I2C1);
 8002e56:	4812      	ldr	r0, [pc, #72]	; (8002ea0 <MX_I2C1_Init+0xa8>)
 8002e58:	f7ff ff8e 	bl	8002d78 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8002e5c:	4810      	ldr	r0, [pc, #64]	; (8002ea0 <MX_I2C1_Init+0xa8>)
 8002e5e:	f7ff ff68 	bl	8002d32 <LL_I2C_DisableGeneralCall>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 400000;
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <MX_I2C1_Init+0xac>)
 8002e68:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_16_9;
 8002e6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e6e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 116;
 8002e70:	2374      	movs	r3, #116	; 0x74
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8002e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8002e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8002e80:	f107 0318 	add.w	r3, r7, #24
 8002e84:	4619      	mov	r1, r3
 8002e86:	4806      	ldr	r0, [pc, #24]	; (8002ea0 <MX_I2C1_Init+0xa8>)
 8002e88:	f001 fc3c 	bl	8004704 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4804      	ldr	r0, [pc, #16]	; (8002ea0 <MX_I2C1_Init+0xa8>)
 8002e90:	f7ff ff5f 	bl	8002d52 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e94:	bf00      	nop
 8002e96:	3730      	adds	r7, #48	; 0x30
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40020400 	.word	0x40020400
 8002ea0:	40005400 	.word	0x40005400
 8002ea4:	00061a80 	.word	0x00061a80

08002ea8 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f04:	2b40      	cmp	r3, #64	; 0x40
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	bf0c      	ite	eq
 8002f2e:	2301      	moveq	r3, #1
 8002f30:	2300      	movne	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	b2db      	uxtb	r3, r3
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	460b      	mov	r3, r1
 8002fb0:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002fba:	78fb      	ldrb	r3, [r7, #3]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	611a      	str	r2, [r3, #16]
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <i2c_reg_write>:
/**
 * @brief
 * @retval 0: operacion correcta
 * @retval 1: error
 */
uint8_t i2c_reg_write(I2C_TypeDef *I2C, uint8_t SlaveADDR, uint8_t regAddr, uint8_t *pData, uint16_t len, uint32_t timeout){
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b086      	sub	sp, #24
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	72fb      	strb	r3, [r7, #11]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	72bb      	strb	r3, [r7, #10]
	uint32_t temp= 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]
	uint32_t ticks = HAL_GetTick();
 8002fe4:	f000 fb86 	bl	80036f4 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

	if(len <= 0 || pData == NULL){
 8002fea:	8c3b      	ldrh	r3, [r7, #32]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <i2c_reg_write+0x28>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <i2c_reg_write+0x2c>
		return 1;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0bc      	b.n	8003174 <i2c_reg_write+0x1a6>
	}
	//esperar que el bus este desocupado
	do{
		if((HAL_GetTick() - ticks)> timeout){
 8002ffa:	f000 fb7b 	bl	80036f4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003006:	429a      	cmp	r2, r3
 8003008:	d201      	bcs.n	800300e <i2c_reg_write+0x40>
			return 1;
 800300a:	2301      	movs	r3, #1
 800300c:	e0b2      	b.n	8003174 <i2c_reg_write+0x1a6>
		}
	}while(LL_I2C_IsActiveFlag_BUSY(I2C)  == 1);
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff ffa9 	bl	8002f66 <LL_I2C_IsActiveFlag_BUSY>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	d0ef      	beq.n	8002ffa <i2c_reg_write+0x2c>

	//generar la condicion de inicio (star)
	I2C->CR1 |= I2C_CR1_START;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	601a      	str	r2, [r3, #0]
	do{
		if((HAL_GetTick() - ticks)> timeout){
 8003026:	f000 fb65 	bl	80036f4 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003032:	429a      	cmp	r2, r3
 8003034:	d207      	bcs.n	8003046 <i2c_reg_write+0x78>
			I2C->CR1 |= I2C_CR1_STOP;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	601a      	str	r2, [r3, #0]
			return 1;
 8003042:	2301      	movs	r3, #1
 8003044:	e096      	b.n	8003174 <i2c_reg_write+0x1a6>
		}
	}while(LL_I2C_IsActiveFlag_SB(I2C)  == 0);
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f7ff ff67 	bl	8002f1a <LL_I2C_IsActiveFlag_SB>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0e9      	beq.n	8003026 <i2c_reg_write+0x58>

	//enviar la direccion del esclavo
	SlaveADDR = SlaveADDR <<1;					//[A6:A0] [R/W] (W = 0, R = 1)
 8003052:	7afb      	ldrb	r3, [r7, #11]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	72fb      	strb	r3, [r7, #11]
	SlaveADDR &= ~1;
 8003058:	7afb      	ldrb	r3, [r7, #11]
 800305a:	f023 0301 	bic.w	r3, r3, #1
 800305e:	72fb      	strb	r3, [r7, #11]
	LL_I2C_TransmitData8(I2C, SlaveADDR);
 8003060:	7afb      	ldrb	r3, [r7, #11]
 8003062:	4619      	mov	r1, r3
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f7ff ff9e 	bl	8002fa6 <LL_I2C_TransmitData8>
	//I2C->DR = SlaveADDR;

	do{
		if((HAL_GetTick() - ticks)> timeout){
 800306a:	f000 fb43 	bl	80036f4 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003076:	429a      	cmp	r2, r3
 8003078:	d207      	bcs.n	800308a <i2c_reg_write+0xbc>
			I2C->CR1 |= I2C_CR1_STOP;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	601a      	str	r2, [r3, #0]
			return 1;
 8003086:	2301      	movs	r3, #1
 8003088:	e074      	b.n	8003174 <i2c_reg_write+0x1a6>
		}
	}while(LL_I2C_IsActiveFlag_ADDR(I2C)  == 0);
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff ff58 	bl	8002f40 <LL_I2C_IsActiveFlag_ADDR>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0e9      	beq.n	800306a <i2c_reg_write+0x9c>
	//while((I2C->SR1 & I2C_SR1_ADDR) == 0);

	//Limpiar los registros de estado
	temp = I2C->SR1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	617b      	str	r3, [r7, #20]
	temp = I2C->SR2;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	617b      	str	r3, [r7, #20]
	(void)temp;

	//enviar la direccion de la region
	do{
		if((HAL_GetTick() - ticks)>timeout){
 80030a2:	f000 fb27 	bl	80036f4 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d207      	bcs.n	80030c2 <i2c_reg_write+0xf4>
			I2C->CR1 |= I2C_CR1_STOP;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	601a      	str	r2, [r3, #0]
			return 1;
 80030be:	2301      	movs	r3, #1
 80030c0:	e058      	b.n	8003174 <i2c_reg_write+0x1a6>
		}
	}while(!(I2C->SR1 & I2C_SR1_TXE));
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0e9      	beq.n	80030a2 <i2c_reg_write+0xd4>
	LL_I2C_TransmitData8(I2C, regAddr);
 80030ce:	7abb      	ldrb	r3, [r7, #10]
 80030d0:	4619      	mov	r1, r3
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f7ff ff67 	bl	8002fa6 <LL_I2C_TransmitData8>

	//enviar los n datos

	while(len>0){
 80030d8:	e024      	b.n	8003124 <i2c_reg_write+0x156>
		if(LL_I2C_IsActiveFlag_TXE(I2C)){
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff fee4 	bl	8002ea8 <LL_I2C_IsActiveFlag_TXE>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00e      	beq.n	8003104 <i2c_reg_write+0x136>
			LL_I2C_TransmitData8(I2C, *pData);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	4619      	mov	r1, r3
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7ff ff5a 	bl	8002fa6 <LL_I2C_TransmitData8>
			pData++;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3301      	adds	r3, #1
 80030f6:	607b      	str	r3, [r7, #4]
			len--;
 80030f8:	8c3b      	ldrh	r3, [r7, #32]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	843b      	strh	r3, [r7, #32]
			if(len == 0){
 80030fe:	8c3b      	ldrh	r3, [r7, #32]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d013      	beq.n	800312c <i2c_reg_write+0x15e>
				break;
			}
		}
		if((HAL_GetTick() - ticks)>timeout){
 8003104:	f000 faf6 	bl	80036f4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	429a      	cmp	r2, r3
 8003112:	d207      	bcs.n	8003124 <i2c_reg_write+0x156>
			I2C->CR1 |= I2C_CR1_STOP;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	601a      	str	r2, [r3, #0]
			return 1;
 8003120:	2301      	movs	r3, #1
 8003122:	e027      	b.n	8003174 <i2c_reg_write+0x1a6>
	while(len>0){
 8003124:	8c3b      	ldrh	r3, [r7, #32]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1d7      	bne.n	80030da <i2c_reg_write+0x10c>
 800312a:	e000      	b.n	800312e <i2c_reg_write+0x160>
				break;
 800312c:	bf00      	nop
		}
	}
	//wait
	do{
		if((HAL_GetTick() - ticks)>timeout){
 800312e:	f000 fae1 	bl	80036f4 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313a:	429a      	cmp	r2, r3
 800313c:	d207      	bcs.n	800314e <i2c_reg_write+0x180>
			I2C->CR1 |= I2C_CR1_STOP;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	601a      	str	r2, [r3, #0]
			return 1;
 800314a:	2301      	movs	r3, #1
 800314c:	e012      	b.n	8003174 <i2c_reg_write+0x1a6>
		}
	}while((LL_I2C_IsActiveFlag_TXE(I2C) == 0) && (LL_I2C_IsActiveFlag_BTF(I2C) == 0));
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff feaa 	bl	8002ea8 <LL_I2C_IsActiveFlag_TXE>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d105      	bne.n	8003166 <i2c_reg_write+0x198>
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f7ff feb7 	bl	8002ece <LL_I2C_IsActiveFlag_BTF>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0e3      	beq.n	800312e <i2c_reg_write+0x160>

	//stop condition
	I2C->CR1 |= I2C_CR1_STOP;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	601a      	str	r2, [r3, #0]
	return 0;
 8003172:	2300      	movs	r3, #0

}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <i2c_reg_read>:

uint8_t i2c_reg_read(I2C_TypeDef *I2C, uint8_t SlaveADDR, uint8_t regAddr, uint8_t *pData, uint16_t len, uint32_t timeout){
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	72fb      	strb	r3, [r7, #11]
 800318a:	4613      	mov	r3, r2
 800318c:	72bb      	strb	r3, [r7, #10]
	uint32_t temp= 0;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
	uint32_t ticks = HAL_GetTick();
 8003192:	f000 faaf 	bl	80036f4 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

	if(len <= 0 || pData == NULL){
 8003198:	8c3b      	ldrh	r3, [r7, #32]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <i2c_reg_read+0x28>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <i2c_reg_read+0x2c>
		return 1;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e127      	b.n	80033f8 <i2c_reg_read+0x27c>
	}
	//esperar que el bus este desocupado
	do{
		if((HAL_GetTick() - ticks)> timeout){
 80031a8:	f000 faa4 	bl	80036f4 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d201      	bcs.n	80031bc <i2c_reg_read+0x40>
			return 1;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e11d      	b.n	80033f8 <i2c_reg_read+0x27c>
		}
	}while(LL_I2C_IsActiveFlag_BUSY(I2C)  == 1);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f7ff fed2 	bl	8002f66 <LL_I2C_IsActiveFlag_BUSY>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d0ef      	beq.n	80031a8 <i2c_reg_read+0x2c>

	//generar la condicion de inicio (star)
	I2C->CR1 |= I2C_CR1_START;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	601a      	str	r2, [r3, #0]
	do{
		if((HAL_GetTick() - ticks)> timeout){
 80031d4:	f000 fa8e 	bl	80036f4 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d207      	bcs.n	80031f4 <i2c_reg_read+0x78>
			I2C->CR1 |= I2C_CR1_STOP;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	601a      	str	r2, [r3, #0]
			return 1;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e101      	b.n	80033f8 <i2c_reg_read+0x27c>
		}
	}while(LL_I2C_IsActiveFlag_SB(I2C)  == 0);
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f7ff fe90 	bl	8002f1a <LL_I2C_IsActiveFlag_SB>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0e9      	beq.n	80031d4 <i2c_reg_read+0x58>

	//enviar la direccion del esclavo
	SlaveADDR = SlaveADDR <<1;					//[A6:A0] [R/W] (W = 0, R = 1)
 8003200:	7afb      	ldrb	r3, [r7, #11]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	72fb      	strb	r3, [r7, #11]
	SlaveADDR &= ~1;
 8003206:	7afb      	ldrb	r3, [r7, #11]
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	72fb      	strb	r3, [r7, #11]
	LL_I2C_TransmitData8(I2C, SlaveADDR);
 800320e:	7afb      	ldrb	r3, [r7, #11]
 8003210:	4619      	mov	r1, r3
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f7ff fec7 	bl	8002fa6 <LL_I2C_TransmitData8>
	//I2C->DR = SlaveADDR;

	do{
		if((HAL_GetTick() - ticks)> timeout){
 8003218:	f000 fa6c 	bl	80036f4 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003224:	429a      	cmp	r2, r3
 8003226:	d207      	bcs.n	8003238 <i2c_reg_read+0xbc>
			I2C->CR1 |= I2C_CR1_STOP;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	601a      	str	r2, [r3, #0]
			return 1;
 8003234:	2301      	movs	r3, #1
 8003236:	e0df      	b.n	80033f8 <i2c_reg_read+0x27c>
		}
	}while(LL_I2C_IsActiveFlag_ADDR(I2C)  == 0);
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff fe81 	bl	8002f40 <LL_I2C_IsActiveFlag_ADDR>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0e9      	beq.n	8003218 <i2c_reg_read+0x9c>
	//while((I2C->SR1 & I2C_SR1_ADDR) == 0);

	//Limpiar los registros de estado
	temp = I2C->SR1;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	617b      	str	r3, [r7, #20]
	temp = I2C->SR2;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	617b      	str	r3, [r7, #20]
	(void)temp;

	//enviar la direccion base a leerse
	//enviar la direccion de la region
	do{
		if((HAL_GetTick() - ticks)>timeout){
 8003250:	f000 fa50 	bl	80036f4 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325c:	429a      	cmp	r2, r3
 800325e:	d207      	bcs.n	8003270 <i2c_reg_read+0xf4>
			I2C->CR1 |= I2C_CR1_STOP;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	601a      	str	r2, [r3, #0]
			return 1;
 800326c:	2301      	movs	r3, #1
 800326e:	e0c3      	b.n	80033f8 <i2c_reg_read+0x27c>
		}
	}while(!(I2C->SR1 & I2C_SR1_TXE));
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0e9      	beq.n	8003250 <i2c_reg_read+0xd4>
	LL_I2C_TransmitData8(I2C, regAddr);
 800327c:	7abb      	ldrb	r3, [r7, #10]
 800327e:	4619      	mov	r1, r3
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f7ff fe90 	bl	8002fa6 <LL_I2C_TransmitData8>

	//una nueva condicion de inicio
	//wait
	do{
		if((HAL_GetTick() - ticks)>timeout){
 8003286:	f000 fa35 	bl	80036f4 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003292:	429a      	cmp	r2, r3
 8003294:	d207      	bcs.n	80032a6 <i2c_reg_read+0x12a>
			I2C->CR1 |= I2C_CR1_STOP;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	601a      	str	r2, [r3, #0]
			return 1;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0a8      	b.n	80033f8 <i2c_reg_read+0x27c>
		}
	}while((LL_I2C_IsActiveFlag_TXE(I2C) == 0) && (LL_I2C_IsActiveFlag_BTF(I2C) == 0));
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff fdfe 	bl	8002ea8 <LL_I2C_IsActiveFlag_TXE>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <i2c_reg_read+0x142>
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff fe0b 	bl	8002ece <LL_I2C_IsActiveFlag_BTF>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0e3      	beq.n	8003286 <i2c_reg_read+0x10a>

	//generar la condicion de inicio (star)
	I2C->CR1 |= I2C_CR1_START;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	601a      	str	r2, [r3, #0]
	do{
		if((HAL_GetTick() - ticks)> timeout){
 80032ca:	f000 fa13 	bl	80036f4 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d207      	bcs.n	80032ea <i2c_reg_read+0x16e>
			I2C->CR1 |= I2C_CR1_STOP;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	601a      	str	r2, [r3, #0]
			return 1;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e086      	b.n	80033f8 <i2c_reg_read+0x27c>
		}
	}while(LL_I2C_IsActiveFlag_SB(I2C)  == 0);
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7ff fe15 	bl	8002f1a <LL_I2C_IsActiveFlag_SB>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0e9      	beq.n	80032ca <i2c_reg_read+0x14e>
	//enviar la direccion del esclavo

	SlaveADDR |= 1;
 80032f6:	7afb      	ldrb	r3, [r7, #11]
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	72fb      	strb	r3, [r7, #11]
	LL_I2C_TransmitData8(I2C, SlaveADDR);
 80032fe:	7afb      	ldrb	r3, [r7, #11]
 8003300:	4619      	mov	r1, r3
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f7ff fe4f 	bl	8002fa6 <LL_I2C_TransmitData8>
	do{
		if((HAL_GetTick() - ticks)> timeout){
 8003308:	f000 f9f4 	bl	80036f4 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	429a      	cmp	r2, r3
 8003316:	d207      	bcs.n	8003328 <i2c_reg_read+0x1ac>
			I2C->CR1 |= I2C_CR1_STOP;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	601a      	str	r2, [r3, #0]
			return 1;
 8003324:	2301      	movs	r3, #1
 8003326:	e067      	b.n	80033f8 <i2c_reg_read+0x27c>
		}
	}while(LL_I2C_IsActiveFlag_ADDR(I2C)  == 0);
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f7ff fe09 	bl	8002f40 <LL_I2C_IsActiveFlag_ADDR>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0e9      	beq.n	8003308 <i2c_reg_read+0x18c>

	//Limpiar los registros de estado
	temp = I2C->SR1;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	617b      	str	r3, [r7, #20]
	temp = I2C->SR2;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	617b      	str	r3, [r7, #20]
	(void)temp;

	//leer bytes
	I2C->CR1  |= I2C_CR1_ACK;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	601a      	str	r2, [r3, #0]

	while(len> 0){
 800334c:	e050      	b.n	80033f0 <i2c_reg_read+0x274>
		if(len == 1){
 800334e:	8c3b      	ldrh	r3, [r7, #32]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d12c      	bne.n	80033ae <i2c_reg_read+0x232>
			I2C->CR1 &=~ I2C_CR1_ACK;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	601a      	str	r2, [r3, #0]

			do{
				if((HAL_GetTick() - ticks)>timeout){
 8003360:	f000 f9c8 	bl	80036f4 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336c:	429a      	cmp	r2, r3
 800336e:	d207      	bcs.n	8003380 <i2c_reg_read+0x204>
					I2C1->CR1 |= I2C_CR1_STOP;
 8003370:	4b23      	ldr	r3, [pc, #140]	; (8003400 <i2c_reg_read+0x284>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a22      	ldr	r2, [pc, #136]	; (8003400 <i2c_reg_read+0x284>)
 8003376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800337a:	6013      	str	r3, [r2, #0]
					return 1;
 800337c:	2301      	movs	r3, #1
 800337e:	e03b      	b.n	80033f8 <i2c_reg_read+0x27c>
				}
			}while(LL_I2C_IsActiveFlag_RXNE(I2C) == 0);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f7ff fdb7 	bl	8002ef4 <LL_I2C_IsActiveFlag_RXNE>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d0e9      	beq.n	8003360 <i2c_reg_read+0x1e4>

			I2C1->CR1 |= I2C_CR1_STOP;
 800338c:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <i2c_reg_read+0x284>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a1b      	ldr	r2, [pc, #108]	; (8003400 <i2c_reg_read+0x284>)
 8003392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003396:	6013      	str	r3, [r2, #0]

			//LEER
			*pData = LL_I2C_ReceiveData8(I2C);
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f7ff fdf7 	bl	8002f8c <LL_I2C_ReceiveData8>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	701a      	strb	r2, [r3, #0]
			len--;
 80033a6:	8c3b      	ldrh	r3, [r7, #32]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	843b      	strh	r3, [r7, #32]
			break;
 80033ac:	e023      	b.n	80033f6 <i2c_reg_read+0x27a>
		}else{
			//wait
			do{
				if((HAL_GetTick() - ticks)>timeout){
 80033ae:	f000 f9a1 	bl	80036f4 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d207      	bcs.n	80033ce <i2c_reg_read+0x252>
					I2C1->CR1 |= I2C_CR1_STOP;
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <i2c_reg_read+0x284>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a0f      	ldr	r2, [pc, #60]	; (8003400 <i2c_reg_read+0x284>)
 80033c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033c8:	6013      	str	r3, [r2, #0]
					return 1;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e014      	b.n	80033f8 <i2c_reg_read+0x27c>
				}
			}while(LL_I2C_IsActiveFlag_RXNE(I2C) == 0);
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f7ff fd90 	bl	8002ef4 <LL_I2C_IsActiveFlag_RXNE>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0e9      	beq.n	80033ae <i2c_reg_read+0x232>
			*pData = I2C->DR;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	701a      	strb	r2, [r3, #0]
			pData++;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3301      	adds	r3, #1
 80033e8:	607b      	str	r3, [r7, #4]
			len--;
 80033ea:	8c3b      	ldrh	r3, [r7, #32]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	843b      	strh	r3, [r7, #32]
	while(len> 0){
 80033f0:	8c3b      	ldrh	r3, [r7, #32]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1ab      	bne.n	800334e <i2c_reg_read+0x1d2>
		}
	}

	return 0;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40005400 	.word	0x40005400

08003404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800340a:	f000 f90d 	bl	8003628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800340e:	f000 f819 	bl	8003444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003412:	f7ff fc77 	bl	8002d04 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003416:	f7ff fcef 	bl	8002df8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  mpu6050_basic_init(0x68);
 800341a:	2068      	movs	r0, #104	; 0x68
 800341c:	f7ff f806 	bl	800242c <mpu6050_basic_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mpu6050_basic_read(a, g);
 8003420:	f107 0208 	add.w	r2, r7, #8
 8003424:	f107 0314 	add.w	r3, r7, #20
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fb74 	bl	8002b18 <mpu6050_basic_read>
	  mpu6050_basic_read_temperature(&temp);
 8003430:	1d3b      	adds	r3, r7, #4
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff fb58 	bl	8002ae8 <mpu6050_basic_read_temperature>
	  HAL_Delay(500);
 8003438:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800343c:	f000 f966 	bl	800370c <HAL_Delay>
	  mpu6050_basic_read(a, g);
 8003440:	e7ee      	b.n	8003420 <main+0x1c>
	...

08003444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b094      	sub	sp, #80	; 0x50
 8003448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800344a:	f107 0320 	add.w	r3, r7, #32
 800344e:	2230      	movs	r2, #48	; 0x30
 8003450:	2100      	movs	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f001 fae6 	bl	8004a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003468:	2300      	movs	r3, #0
 800346a:	60bb      	str	r3, [r7, #8]
 800346c:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <SystemClock_Config+0xb4>)
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <SystemClock_Config+0xb4>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003476:	6413      	str	r3, [r2, #64]	; 0x40
 8003478:	4b1f      	ldr	r3, [pc, #124]	; (80034f8 <SystemClock_Config+0xb4>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003484:	2300      	movs	r3, #0
 8003486:	607b      	str	r3, [r7, #4]
 8003488:	4b1c      	ldr	r3, [pc, #112]	; (80034fc <SystemClock_Config+0xb8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1b      	ldr	r2, [pc, #108]	; (80034fc <SystemClock_Config+0xb8>)
 800348e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <SystemClock_Config+0xb8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349c:	607b      	str	r3, [r7, #4]
 800349e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034a0:	2302      	movs	r3, #2
 80034a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034a4:	2301      	movs	r3, #1
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034a8:	2310      	movs	r3, #16
 80034aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034b0:	f107 0320 	add.w	r3, r7, #32
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fa33 	bl	8003920 <HAL_RCC_OscConfig>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80034c0:	f000 f81e 	bl	8003500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034c4:	230f      	movs	r3, #15
 80034c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	2100      	movs	r1, #0
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fc96 	bl	8003e10 <HAL_RCC_ClockConfig>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80034ea:	f000 f809 	bl	8003500 <Error_Handler>
  }
}
 80034ee:	bf00      	nop
 80034f0:	3750      	adds	r7, #80	; 0x50
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40007000 	.word	0x40007000

08003500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003504:	b672      	cpsid	i
}
 8003506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003508:	e7fe      	b.n	8003508 <Error_Handler+0x8>
	...

0800350c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_MspInit+0x4c>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <HAL_MspInit+0x4c>)
 800351c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003520:	6453      	str	r3, [r2, #68]	; 0x44
 8003522:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <HAL_MspInit+0x4c>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4b09      	ldr	r3, [pc, #36]	; (8003558 <HAL_MspInit+0x4c>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	4a08      	ldr	r2, [pc, #32]	; (8003558 <HAL_MspInit+0x4c>)
 8003538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353c:	6413      	str	r3, [r2, #64]	; 0x40
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <HAL_MspInit+0x4c>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800

0800355c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003560:	e7fe      	b.n	8003560 <NMI_Handler+0x4>

08003562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003566:	e7fe      	b.n	8003566 <HardFault_Handler+0x4>

08003568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800356c:	e7fe      	b.n	800356c <MemManage_Handler+0x4>

0800356e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003572:	e7fe      	b.n	8003572 <BusFault_Handler+0x4>

08003574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <UsageFault_Handler+0x4>

0800357a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035a8:	f000 f890 	bl	80036cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <SystemInit+0x20>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <SystemInit+0x20>)
 80035bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035c4:	bf00      	nop
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800360c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035d8:	480d      	ldr	r0, [pc, #52]	; (8003610 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035da:	490e      	ldr	r1, [pc, #56]	; (8003614 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035dc:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035e0:	e002      	b.n	80035e8 <LoopCopyDataInit>

080035e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035e6:	3304      	adds	r3, #4

080035e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035ec:	d3f9      	bcc.n	80035e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ee:	4a0b      	ldr	r2, [pc, #44]	; (800361c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035f0:	4c0b      	ldr	r4, [pc, #44]	; (8003620 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035f4:	e001      	b.n	80035fa <LoopFillZerobss>

080035f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035f8:	3204      	adds	r2, #4

080035fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035fc:	d3fb      	bcc.n	80035f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035fe:	f7ff ffd7 	bl	80035b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003602:	f001 f9eb 	bl	80049dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003606:	f7ff fefd 	bl	8003404 <main>
  bx  lr    
 800360a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800360c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003614:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003618:	0800647c 	.word	0x0800647c
  ldr r2, =_sbss
 800361c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8003620:	2000045c 	.word	0x2000045c

08003624 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003624:	e7fe      	b.n	8003624 <ADC_IRQHandler>
	...

08003628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800362c:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <HAL_Init+0x40>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0d      	ldr	r2, [pc, #52]	; (8003668 <HAL_Init+0x40>)
 8003632:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003636:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003638:	4b0b      	ldr	r3, [pc, #44]	; (8003668 <HAL_Init+0x40>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <HAL_Init+0x40>)
 800363e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003642:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003644:	4b08      	ldr	r3, [pc, #32]	; (8003668 <HAL_Init+0x40>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a07      	ldr	r2, [pc, #28]	; (8003668 <HAL_Init+0x40>)
 800364a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003650:	2003      	movs	r0, #3
 8003652:	f000 f931 	bl	80038b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003656:	200f      	movs	r0, #15
 8003658:	f000 f808 	bl	800366c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800365c:	f7ff ff56 	bl	800350c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	40023c00 	.word	0x40023c00

0800366c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003674:	4b12      	ldr	r3, [pc, #72]	; (80036c0 <HAL_InitTick+0x54>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_InitTick+0x58>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	4619      	mov	r1, r3
 800367e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003682:	fbb3 f3f1 	udiv	r3, r3, r1
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f93b 	bl	8003906 <HAL_SYSTICK_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e00e      	b.n	80036b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b0f      	cmp	r3, #15
 800369e:	d80a      	bhi.n	80036b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a0:	2200      	movs	r2, #0
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f000 f911 	bl	80038ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036ac:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <HAL_InitTick+0x5c>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	e000      	b.n	80036b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3708      	adds	r7, #8
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	20000000 	.word	0x20000000
 80036c4:	20000008 	.word	0x20000008
 80036c8:	20000004 	.word	0x20000004

080036cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_IncTick+0x20>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_IncTick+0x24>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <HAL_IncTick+0x24>)
 80036de:	6013      	str	r3, [r2, #0]
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000008 	.word	0x20000008
 80036f0:	20000458 	.word	0x20000458

080036f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return uwTick;
 80036f8:	4b03      	ldr	r3, [pc, #12]	; (8003708 <HAL_GetTick+0x14>)
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000458 	.word	0x20000458

0800370c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7ff ffee 	bl	80036f4 <HAL_GetTick>
 8003718:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d005      	beq.n	8003732 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <HAL_Delay+0x44>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003732:	bf00      	nop
 8003734:	f7ff ffde 	bl	80036f4 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	429a      	cmp	r2, r3
 8003742:	d8f7      	bhi.n	8003734 <HAL_Delay+0x28>
  {
  }
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000008 	.word	0x20000008

08003754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003770:	4013      	ands	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800377c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003786:	4a04      	ldr	r2, [pc, #16]	; (8003798 <__NVIC_SetPriorityGrouping+0x44>)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	60d3      	str	r3, [r2, #12]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <__NVIC_GetPriorityGrouping+0x18>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	f003 0307 	and.w	r3, r3, #7
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	e000ed00 	.word	0xe000ed00

080037b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	db0a      	blt.n	80037e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	490c      	ldr	r1, [pc, #48]	; (8003804 <__NVIC_SetPriority+0x4c>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	440b      	add	r3, r1
 80037dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e0:	e00a      	b.n	80037f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4908      	ldr	r1, [pc, #32]	; (8003808 <__NVIC_SetPriority+0x50>)
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3b04      	subs	r3, #4
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	440b      	add	r3, r1
 80037f6:	761a      	strb	r2, [r3, #24]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f1c3 0307 	rsb	r3, r3, #7
 8003826:	2b04      	cmp	r3, #4
 8003828:	bf28      	it	cs
 800382a:	2304      	movcs	r3, #4
 800382c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3304      	adds	r3, #4
 8003832:	2b06      	cmp	r3, #6
 8003834:	d902      	bls.n	800383c <NVIC_EncodePriority+0x30>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3b03      	subs	r3, #3
 800383a:	e000      	b.n	800383e <NVIC_EncodePriority+0x32>
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	f04f 32ff 	mov.w	r2, #4294967295
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	401a      	ands	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003854:	f04f 31ff 	mov.w	r1, #4294967295
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	43d9      	mvns	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	4313      	orrs	r3, r2
         );
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003884:	d301      	bcc.n	800388a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003886:	2301      	movs	r3, #1
 8003888:	e00f      	b.n	80038aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <SysTick_Config+0x40>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003892:	210f      	movs	r1, #15
 8003894:	f04f 30ff 	mov.w	r0, #4294967295
 8003898:	f7ff ff8e 	bl	80037b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <SysTick_Config+0x40>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <SysTick_Config+0x40>)
 80038a4:	2207      	movs	r2, #7
 80038a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	e000e010 	.word	0xe000e010

080038b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ff47 	bl	8003754 <__NVIC_SetPriorityGrouping>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4603      	mov	r3, r0
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038e0:	f7ff ff5c 	bl	800379c <__NVIC_GetPriorityGrouping>
 80038e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	6978      	ldr	r0, [r7, #20]
 80038ec:	f7ff ff8e 	bl	800380c <NVIC_EncodePriority>
 80038f0:	4602      	mov	r2, r0
 80038f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff5d 	bl	80037b8 <__NVIC_SetPriority>
}
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff ffb0 	bl	8003874 <SysTick_Config>
 8003914:	4603      	mov	r3, r0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
	...

08003920 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e267      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d075      	beq.n	8003a2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393e:	4b88      	ldr	r3, [pc, #544]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b04      	cmp	r3, #4
 8003948:	d00c      	beq.n	8003964 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800394a:	4b85      	ldr	r3, [pc, #532]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003952:	2b08      	cmp	r3, #8
 8003954:	d112      	bne.n	800397c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003956:	4b82      	ldr	r3, [pc, #520]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003962:	d10b      	bne.n	800397c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	4b7e      	ldr	r3, [pc, #504]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d05b      	beq.n	8003a28 <HAL_RCC_OscConfig+0x108>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d157      	bne.n	8003a28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e242      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003984:	d106      	bne.n	8003994 <HAL_RCC_OscConfig+0x74>
 8003986:	4b76      	ldr	r3, [pc, #472]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a75      	ldr	r2, [pc, #468]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 800398c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	e01d      	b.n	80039d0 <HAL_RCC_OscConfig+0xb0>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800399c:	d10c      	bne.n	80039b8 <HAL_RCC_OscConfig+0x98>
 800399e:	4b70      	ldr	r3, [pc, #448]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a6f      	ldr	r2, [pc, #444]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 80039a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039a8:	6013      	str	r3, [r2, #0]
 80039aa:	4b6d      	ldr	r3, [pc, #436]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a6c      	ldr	r2, [pc, #432]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 80039b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	e00b      	b.n	80039d0 <HAL_RCC_OscConfig+0xb0>
 80039b8:	4b69      	ldr	r3, [pc, #420]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a68      	ldr	r2, [pc, #416]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 80039be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b66      	ldr	r3, [pc, #408]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a65      	ldr	r2, [pc, #404]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 80039ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d8:	f7ff fe8c 	bl	80036f4 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e0:	f7ff fe88 	bl	80036f4 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b64      	cmp	r3, #100	; 0x64
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e207      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039f2:	4b5b      	ldr	r3, [pc, #364]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0xc0>
 80039fe:	e014      	b.n	8003a2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7ff fe78 	bl	80036f4 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a08:	f7ff fe74 	bl	80036f4 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e1f3      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a1a:	4b51      	ldr	r3, [pc, #324]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0xe8>
 8003a26:	e000      	b.n	8003a2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d063      	beq.n	8003afe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a36:	4b4a      	ldr	r3, [pc, #296]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a42:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d11c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4e:	4b44      	ldr	r3, [pc, #272]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d116      	bne.n	8003a88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	4b41      	ldr	r3, [pc, #260]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d005      	beq.n	8003a72 <HAL_RCC_OscConfig+0x152>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d001      	beq.n	8003a72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e1c7      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a72:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4937      	ldr	r1, [pc, #220]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a86:	e03a      	b.n	8003afe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d020      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a90:	4b34      	ldr	r3, [pc, #208]	; (8003b64 <HAL_RCC_OscConfig+0x244>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a96:	f7ff fe2d 	bl	80036f4 <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a9e:	f7ff fe29 	bl	80036f4 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e1a8      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab0:	4b2b      	ldr	r3, [pc, #172]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d0f0      	beq.n	8003a9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abc:	4b28      	ldr	r3, [pc, #160]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4925      	ldr	r1, [pc, #148]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	600b      	str	r3, [r1, #0]
 8003ad0:	e015      	b.n	8003afe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ad2:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCC_OscConfig+0x244>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad8:	f7ff fe0c 	bl	80036f4 <HAL_GetTick>
 8003adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae0:	f7ff fe08 	bl	80036f4 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e187      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003af2:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1f0      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d036      	beq.n	8003b78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d016      	beq.n	8003b40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <HAL_RCC_OscConfig+0x248>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7ff fdec 	bl	80036f4 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b20:	f7ff fde8 	bl	80036f4 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e167      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <HAL_RCC_OscConfig+0x240>)
 8003b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0f0      	beq.n	8003b20 <HAL_RCC_OscConfig+0x200>
 8003b3e:	e01b      	b.n	8003b78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_RCC_OscConfig+0x248>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b46:	f7ff fdd5 	bl	80036f4 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b4c:	e00e      	b.n	8003b6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b4e:	f7ff fdd1 	bl	80036f4 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d907      	bls.n	8003b6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e150      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
 8003b60:	40023800 	.word	0x40023800
 8003b64:	42470000 	.word	0x42470000
 8003b68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b6c:	4b88      	ldr	r3, [pc, #544]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1ea      	bne.n	8003b4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8097 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b86:	2300      	movs	r3, #0
 8003b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b8a:	4b81      	ldr	r3, [pc, #516]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	4b7d      	ldr	r3, [pc, #500]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	4a7c      	ldr	r2, [pc, #496]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ba6:	4b7a      	ldr	r3, [pc, #488]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb6:	4b77      	ldr	r3, [pc, #476]	; (8003d94 <HAL_RCC_OscConfig+0x474>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d118      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc2:	4b74      	ldr	r3, [pc, #464]	; (8003d94 <HAL_RCC_OscConfig+0x474>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a73      	ldr	r2, [pc, #460]	; (8003d94 <HAL_RCC_OscConfig+0x474>)
 8003bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bce:	f7ff fd91 	bl	80036f4 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd6:	f7ff fd8d 	bl	80036f4 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e10c      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be8:	4b6a      	ldr	r3, [pc, #424]	; (8003d94 <HAL_RCC_OscConfig+0x474>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0f0      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d106      	bne.n	8003c0a <HAL_RCC_OscConfig+0x2ea>
 8003bfc:	4b64      	ldr	r3, [pc, #400]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c00:	4a63      	ldr	r2, [pc, #396]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003c02:	f043 0301 	orr.w	r3, r3, #1
 8003c06:	6713      	str	r3, [r2, #112]	; 0x70
 8003c08:	e01c      	b.n	8003c44 <HAL_RCC_OscConfig+0x324>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b05      	cmp	r3, #5
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x30c>
 8003c12:	4b5f      	ldr	r3, [pc, #380]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c16:	4a5e      	ldr	r2, [pc, #376]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003c18:	f043 0304 	orr.w	r3, r3, #4
 8003c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c1e:	4b5c      	ldr	r3, [pc, #368]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c22:	4a5b      	ldr	r2, [pc, #364]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003c24:	f043 0301 	orr.w	r3, r3, #1
 8003c28:	6713      	str	r3, [r2, #112]	; 0x70
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0x324>
 8003c2c:	4b58      	ldr	r3, [pc, #352]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	4a57      	ldr	r2, [pc, #348]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003c32:	f023 0301 	bic.w	r3, r3, #1
 8003c36:	6713      	str	r3, [r2, #112]	; 0x70
 8003c38:	4b55      	ldr	r3, [pc, #340]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3c:	4a54      	ldr	r2, [pc, #336]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	f023 0304 	bic.w	r3, r3, #4
 8003c42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d015      	beq.n	8003c78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7ff fd52 	bl	80036f4 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c54:	f7ff fd4e 	bl	80036f4 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e0cb      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6a:	4b49      	ldr	r3, [pc, #292]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0ee      	beq.n	8003c54 <HAL_RCC_OscConfig+0x334>
 8003c76:	e014      	b.n	8003ca2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c78:	f7ff fd3c 	bl	80036f4 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c80:	f7ff fd38 	bl	80036f4 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e0b5      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c96:	4b3e      	ldr	r3, [pc, #248]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1ee      	bne.n	8003c80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca2:	7dfb      	ldrb	r3, [r7, #23]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d105      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ca8:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	4a38      	ldr	r2, [pc, #224]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a1 	beq.w	8003e00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cbe:	4b34      	ldr	r3, [pc, #208]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d05c      	beq.n	8003d84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d141      	bne.n	8003d56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd2:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <HAL_RCC_OscConfig+0x478>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7ff fd0c 	bl	80036f4 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce0:	f7ff fd08 	bl	80036f4 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e087      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cf2:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	019b      	lsls	r3, r3, #6
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	085b      	lsrs	r3, r3, #1
 8003d16:	3b01      	subs	r3, #1
 8003d18:	041b      	lsls	r3, r3, #16
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	061b      	lsls	r3, r3, #24
 8003d22:	491b      	ldr	r1, [pc, #108]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_RCC_OscConfig+0x478>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2e:	f7ff fce1 	bl	80036f4 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d36:	f7ff fcdd 	bl	80036f4 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e05c      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d48:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x416>
 8003d54:	e054      	b.n	8003e00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <HAL_RCC_OscConfig+0x478>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7ff fcca 	bl	80036f4 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d64:	f7ff fcc6 	bl	80036f4 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e045      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_RCC_OscConfig+0x470>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x444>
 8003d82:	e03d      	b.n	8003e00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d107      	bne.n	8003d9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e038      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40007000 	.word	0x40007000
 8003d98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <HAL_RCC_OscConfig+0x4ec>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d028      	beq.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d121      	bne.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d11a      	bne.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d111      	bne.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	085b      	lsrs	r3, r3, #1
 8003de4:	3b01      	subs	r3, #1
 8003de6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d107      	bne.n	8003dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e000      	b.n	8003e02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800

08003e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0cc      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e24:	4b68      	ldr	r3, [pc, #416]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d90c      	bls.n	8003e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e32:	4b65      	ldr	r3, [pc, #404]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b63      	ldr	r3, [pc, #396]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e0b8      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d020      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e64:	4b59      	ldr	r3, [pc, #356]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4a58      	ldr	r2, [pc, #352]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e7c:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a52      	ldr	r2, [pc, #328]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e88:	4b50      	ldr	r3, [pc, #320]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	494d      	ldr	r1, [pc, #308]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d044      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d107      	bne.n	8003ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eae:	4b47      	ldr	r3, [pc, #284]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d119      	bne.n	8003eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e07f      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d003      	beq.n	8003ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d107      	bne.n	8003ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ece:	4b3f      	ldr	r3, [pc, #252]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e06f      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ede:	4b3b      	ldr	r3, [pc, #236]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d101      	bne.n	8003eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e067      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eee:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f023 0203 	bic.w	r2, r3, #3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4934      	ldr	r1, [pc, #208]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f00:	f7ff fbf8 	bl	80036f4 <HAL_GetTick>
 8003f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f08:	f7ff fbf4 	bl	80036f4 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e04f      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1e:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 020c 	and.w	r2, r3, #12
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d1eb      	bne.n	8003f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f30:	4b25      	ldr	r3, [pc, #148]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0307 	and.w	r3, r3, #7
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d20c      	bcs.n	8003f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3e:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e032      	b.n	8003fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f64:	4b19      	ldr	r3, [pc, #100]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	4916      	ldr	r1, [pc, #88]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0308 	and.w	r3, r3, #8
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d009      	beq.n	8003f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f82:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	490e      	ldr	r1, [pc, #56]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f96:	f000 f821 	bl	8003fdc <HAL_RCC_GetSysClockFreq>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	091b      	lsrs	r3, r3, #4
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	490a      	ldr	r1, [pc, #40]	; (8003fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8003fa8:	5ccb      	ldrb	r3, [r1, r3]
 8003faa:	fa22 f303 	lsr.w	r3, r2, r3
 8003fae:	4a09      	ldr	r2, [pc, #36]	; (8003fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7ff fb58 	bl	800366c <HAL_InitTick>

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023c00 	.word	0x40023c00
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	08006454 	.word	0x08006454
 8003fd4:	20000000 	.word	0x20000000
 8003fd8:	20000004 	.word	0x20000004

08003fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe0:	b090      	sub	sp, #64	; 0x40
 8003fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe8:	2300      	movs	r3, #0
 8003fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fec:	2300      	movs	r3, #0
 8003fee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ff4:	4b59      	ldr	r3, [pc, #356]	; (800415c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 030c 	and.w	r3, r3, #12
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d00d      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x40>
 8004000:	2b08      	cmp	r3, #8
 8004002:	f200 80a1 	bhi.w	8004148 <HAL_RCC_GetSysClockFreq+0x16c>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x34>
 800400a:	2b04      	cmp	r3, #4
 800400c:	d003      	beq.n	8004016 <HAL_RCC_GetSysClockFreq+0x3a>
 800400e:	e09b      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004010:	4b53      	ldr	r3, [pc, #332]	; (8004160 <HAL_RCC_GetSysClockFreq+0x184>)
 8004012:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004014:	e09b      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004016:	4b53      	ldr	r3, [pc, #332]	; (8004164 <HAL_RCC_GetSysClockFreq+0x188>)
 8004018:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800401a:	e098      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800401c:	4b4f      	ldr	r3, [pc, #316]	; (800415c <HAL_RCC_GetSysClockFreq+0x180>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004024:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004026:	4b4d      	ldr	r3, [pc, #308]	; (800415c <HAL_RCC_GetSysClockFreq+0x180>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d028      	beq.n	8004084 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004032:	4b4a      	ldr	r3, [pc, #296]	; (800415c <HAL_RCC_GetSysClockFreq+0x180>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	099b      	lsrs	r3, r3, #6
 8004038:	2200      	movs	r2, #0
 800403a:	623b      	str	r3, [r7, #32]
 800403c:	627a      	str	r2, [r7, #36]	; 0x24
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004044:	2100      	movs	r1, #0
 8004046:	4b47      	ldr	r3, [pc, #284]	; (8004164 <HAL_RCC_GetSysClockFreq+0x188>)
 8004048:	fb03 f201 	mul.w	r2, r3, r1
 800404c:	2300      	movs	r3, #0
 800404e:	fb00 f303 	mul.w	r3, r0, r3
 8004052:	4413      	add	r3, r2
 8004054:	4a43      	ldr	r2, [pc, #268]	; (8004164 <HAL_RCC_GetSysClockFreq+0x188>)
 8004056:	fba0 1202 	umull	r1, r2, r0, r2
 800405a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800405c:	460a      	mov	r2, r1
 800405e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004062:	4413      	add	r3, r2
 8004064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004068:	2200      	movs	r2, #0
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	61fa      	str	r2, [r7, #28]
 800406e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004072:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004076:	f7fc f8a7 	bl	80001c8 <__aeabi_uldivmod>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4613      	mov	r3, r2
 8004080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004082:	e053      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004084:	4b35      	ldr	r3, [pc, #212]	; (800415c <HAL_RCC_GetSysClockFreq+0x180>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	099b      	lsrs	r3, r3, #6
 800408a:	2200      	movs	r2, #0
 800408c:	613b      	str	r3, [r7, #16]
 800408e:	617a      	str	r2, [r7, #20]
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004096:	f04f 0b00 	mov.w	fp, #0
 800409a:	4652      	mov	r2, sl
 800409c:	465b      	mov	r3, fp
 800409e:	f04f 0000 	mov.w	r0, #0
 80040a2:	f04f 0100 	mov.w	r1, #0
 80040a6:	0159      	lsls	r1, r3, #5
 80040a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040ac:	0150      	lsls	r0, r2, #5
 80040ae:	4602      	mov	r2, r0
 80040b0:	460b      	mov	r3, r1
 80040b2:	ebb2 080a 	subs.w	r8, r2, sl
 80040b6:	eb63 090b 	sbc.w	r9, r3, fp
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040ce:	ebb2 0408 	subs.w	r4, r2, r8
 80040d2:	eb63 0509 	sbc.w	r5, r3, r9
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	00eb      	lsls	r3, r5, #3
 80040e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e4:	00e2      	lsls	r2, r4, #3
 80040e6:	4614      	mov	r4, r2
 80040e8:	461d      	mov	r5, r3
 80040ea:	eb14 030a 	adds.w	r3, r4, sl
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	eb45 030b 	adc.w	r3, r5, fp
 80040f4:	607b      	str	r3, [r7, #4]
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004102:	4629      	mov	r1, r5
 8004104:	028b      	lsls	r3, r1, #10
 8004106:	4621      	mov	r1, r4
 8004108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800410c:	4621      	mov	r1, r4
 800410e:	028a      	lsls	r2, r1, #10
 8004110:	4610      	mov	r0, r2
 8004112:	4619      	mov	r1, r3
 8004114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004116:	2200      	movs	r2, #0
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	60fa      	str	r2, [r7, #12]
 800411c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004120:	f7fc f852 	bl	80001c8 <__aeabi_uldivmod>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4613      	mov	r3, r2
 800412a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <HAL_RCC_GetSysClockFreq+0x180>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	0c1b      	lsrs	r3, r3, #16
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	3301      	adds	r3, #1
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800413c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	fbb2 f3f3 	udiv	r3, r2, r3
 8004144:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004146:	e002      	b.n	800414e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <HAL_RCC_GetSysClockFreq+0x184>)
 800414a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800414c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004150:	4618      	mov	r0, r3
 8004152:	3740      	adds	r7, #64	; 0x40
 8004154:	46bd      	mov	sp, r7
 8004156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800
 8004160:	00f42400 	.word	0x00f42400
 8004164:	017d7840 	.word	0x017d7840

08004168 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004168:	b480      	push	{r7}
 800416a:	b089      	sub	sp, #36	; 0x24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	fa93 f3a3 	rbit	r3, r3
 8004182:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	fab3 f383 	clz	r3, r3
 800418a:	b2db      	uxtb	r3, r3
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	2103      	movs	r1, #3
 8004190:	fa01 f303 	lsl.w	r3, r1, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	401a      	ands	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	fa93 f3a3 	rbit	r3, r3
 80041a2:	61bb      	str	r3, [r7, #24]
  return result;
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	fab3 f383 	clz	r3, r3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	6879      	ldr	r1, [r7, #4]
 80041b0:	fa01 f303 	lsl.w	r3, r1, r3
 80041b4:	431a      	orrs	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	601a      	str	r2, [r3, #0]
}
 80041ba:	bf00      	nop
 80041bc:	3724      	adds	r7, #36	; 0x24
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	43db      	mvns	r3, r3
 80041da:	401a      	ands	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	6879      	ldr	r1, [r7, #4]
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	605a      	str	r2, [r3, #4]
}
 80041ea:	bf00      	nop
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b089      	sub	sp, #36	; 0x24
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	60f8      	str	r0, [r7, #12]
 80041fe:	60b9      	str	r1, [r7, #8]
 8004200:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	fa93 f3a3 	rbit	r3, r3
 8004210:	613b      	str	r3, [r7, #16]
  return result;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	005b      	lsls	r3, r3, #1
 800421c:	2103      	movs	r1, #3
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	43db      	mvns	r3, r3
 8004224:	401a      	ands	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	61bb      	str	r3, [r7, #24]
  return result;
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	fab3 f383 	clz	r3, r3
 8004238:	b2db      	uxtb	r3, r3
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	fa01 f303 	lsl.w	r3, r1, r3
 8004242:	431a      	orrs	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004248:	bf00      	nop
 800424a:	3724      	adds	r7, #36	; 0x24
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004254:	b480      	push	{r7}
 8004256:	b089      	sub	sp, #36	; 0x24
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	613b      	str	r3, [r7, #16]
  return result;
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	2103      	movs	r1, #3
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	401a      	ands	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	fa93 f3a3 	rbit	r3, r3
 800428e:	61bb      	str	r3, [r7, #24]
  return result;
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	fab3 f383 	clz	r3, r3
 8004296:	b2db      	uxtb	r3, r3
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	fa01 f303 	lsl.w	r3, r1, r3
 80042a0:	431a      	orrs	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	60da      	str	r2, [r3, #12]
}
 80042a6:	bf00      	nop
 80042a8:	3724      	adds	r7, #36	; 0x24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b089      	sub	sp, #36	; 0x24
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1a      	ldr	r2, [r3, #32]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	fa93 f3a3 	rbit	r3, r3
 80042cc:	613b      	str	r3, [r7, #16]
  return result;
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	fab3 f383 	clz	r3, r3
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	210f      	movs	r1, #15
 80042da:	fa01 f303 	lsl.w	r3, r1, r3
 80042de:	43db      	mvns	r3, r3
 80042e0:	401a      	ands	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	fa93 f3a3 	rbit	r3, r3
 80042ec:	61bb      	str	r3, [r7, #24]
  return result;
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	fab3 f383 	clz	r3, r3
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	fa01 f303 	lsl.w	r3, r1, r3
 80042fe:	431a      	orrs	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004304:	bf00      	nop
 8004306:	3724      	adds	r7, #36	; 0x24
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004310:	b480      	push	{r7}
 8004312:	b089      	sub	sp, #36	; 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	613b      	str	r3, [r7, #16]
  return result;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	fab3 f383 	clz	r3, r3
 8004334:	b2db      	uxtb	r3, r3
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	210f      	movs	r1, #15
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	401a      	ands	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	61bb      	str	r3, [r7, #24]
  return result;
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	fa01 f303 	lsl.w	r3, r1, r3
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004366:	bf00      	nop
 8004368:	3724      	adds	r7, #36	; 0x24
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b088      	sub	sp, #32
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	fa93 f3a3 	rbit	r3, r3
 8004390:	613b      	str	r3, [r7, #16]
  return result;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	fab3 f383 	clz	r3, r3
 8004398:	b2db      	uxtb	r3, r3
 800439a:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800439c:	e050      	b.n	8004440 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	2101      	movs	r1, #1
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	fa01 f303 	lsl.w	r3, r1, r3
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d042      	beq.n	800443a <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d003      	beq.n	80043c4 <LL_GPIO_Init+0x52>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d10d      	bne.n	80043e0 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	461a      	mov	r2, r3
 80043ca:	69b9      	ldr	r1, [r7, #24]
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff ff12 	bl	80041f6 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	461a      	mov	r2, r3
 80043d8:	69b9      	ldr	r1, [r7, #24]
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff fef3 	bl	80041c6 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	461a      	mov	r2, r3
 80043e6:	69b9      	ldr	r1, [r7, #24]
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ff33 	bl	8004254 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d11a      	bne.n	800442c <LL_GPIO_Init+0xba>
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	60bb      	str	r3, [r7, #8]
  return result;
 8004402:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004404:	fab3 f383 	clz	r3, r3
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b07      	cmp	r3, #7
 800440c:	d807      	bhi.n	800441e <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	461a      	mov	r2, r3
 8004414:	69b9      	ldr	r1, [r7, #24]
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff ff4b 	bl	80042b2 <LL_GPIO_SetAFPin_0_7>
 800441c:	e006      	b.n	800442c <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	461a      	mov	r2, r3
 8004424:	69b9      	ldr	r1, [r7, #24]
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ff72 	bl	8004310 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	461a      	mov	r2, r3
 8004432:	69b9      	ldr	r1, [r7, #24]
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fe97 	bl	8004168 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3301      	adds	r3, #1
 800443e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	fa22 f303 	lsr.w	r3, r2, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1a7      	bne.n	800439e <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3720      	adds	r7, #32
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <LL_I2C_Enable>:
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f043 0201 	orr.w	r2, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	601a      	str	r2, [r3, #0]
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_I2C_Disable>:
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 0201 	bic.w	r2, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	601a      	str	r2, [r3, #0]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <LL_I2C_SetOwnAddress1>:
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	431a      	orrs	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	609a      	str	r2, [r3, #8]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <LL_I2C_ConfigSpeed>:
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
 80044d4:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4a42      	ldr	r2, [pc, #264]	; (80045ec <LL_I2C_ConfigSpeed+0x124>)
 80044e2:	fba2 2303 	umull	r2, r3, r2, r3
 80044e6:	0c9b      	lsrs	r3, r3, #18
 80044e8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	493a      	ldr	r1, [pc, #232]	; (80045f0 <LL_I2C_ConfigSpeed+0x128>)
 8004506:	428b      	cmp	r3, r1
 8004508:	d802      	bhi.n	8004510 <LL_I2C_ConfigSpeed+0x48>
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	3301      	adds	r3, #1
 800450e:	e009      	b.n	8004524 <LL_I2C_ConfigSpeed+0x5c>
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004516:	fb01 f303 	mul.w	r3, r1, r3
 800451a:	4936      	ldr	r1, [pc, #216]	; (80045f4 <LL_I2C_ConfigSpeed+0x12c>)
 800451c:	fba1 1303 	umull	r1, r3, r1, r3
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	3301      	adds	r3, #1
 8004524:	431a      	orrs	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a30      	ldr	r2, [pc, #192]	; (80045f0 <LL_I2C_ConfigSpeed+0x128>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d939      	bls.n	80045a6 <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d117      	bne.n	8004568 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	4413      	add	r3, r2
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	4613      	mov	r3, r2
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	4413      	add	r3, r2
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800455c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004560:	e01d      	b.n	800459e <LL_I2C_ConfigSpeed+0xd6>
 8004562:	f248 0301 	movw	r3, #32769	; 0x8001
 8004566:	e01a      	b.n	800459e <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	009a      	lsls	r2, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	fbb2 f3f3 	udiv	r3, r2, r3
 800457a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00b      	beq.n	800459a <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009a      	lsls	r2, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004598:	e001      	b.n	800459e <LL_I2C_ConfigSpeed+0xd6>
 800459a:	f248 0301 	movw	r3, #32769	; 0x8001
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	e011      	b.n	80045ca <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80045b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045b4:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	e000      	b.n	80045c8 <LL_I2C_ConfigSpeed+0x100>
 80045c6:	2304      	movs	r3, #4
 80045c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80045d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	431a      	orrs	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	61da      	str	r2, [r3, #28]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	431bde83 	.word	0x431bde83
 80045f0:	000186a0 	.word	0x000186a0
 80045f4:	10624dd3 	.word	0x10624dd3

080045f8 <LL_I2C_SetMode>:
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 021a 	bic.w	r2, r3, #26
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <LL_I2C_AcknowledgeNextData>:
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	601a      	str	r2, [r3, #0]
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <LL_APB1_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <LL_APB1_GRP1_ForceReset+0x20>)
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	4904      	ldr	r1, [pc, #16]	; (8004664 <LL_APB1_GRP1_ForceReset+0x20>)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4313      	orrs	r3, r2
 8004656:	620b      	str	r3, [r1, #32]
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	40023800 	.word	0x40023800

08004668 <LL_APB1_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <LL_APB1_GRP1_ReleaseReset+0x24>)
 8004672:	6a1a      	ldr	r2, [r3, #32]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	43db      	mvns	r3, r3
 8004678:	4904      	ldr	r1, [pc, #16]	; (800468c <LL_APB1_GRP1_ReleaseReset+0x24>)
 800467a:	4013      	ands	r3, r2
 800467c:	620b      	str	r3, [r1, #32]
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40023800 	.word	0x40023800

08004690 <LL_I2C_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are de-initialized
  *          - ERROR  I2C registers are not de-initialized
  */
uint32_t LL_I2C_DeInit(I2C_TypeDef *I2Cx)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004698:	2300      	movs	r3, #0
 800469a:	73fb      	strb	r3, [r7, #15]

  /* Check the I2C Instance I2Cx */
  assert_param(IS_I2C_ALL_INSTANCE(I2Cx));

  if (I2Cx == I2C1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <LL_I2C_DeInit+0x68>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d108      	bne.n	80046b6 <LL_I2C_DeInit+0x26>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C1);
 80046a4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80046a8:	f7ff ffcc 	bl	8004644 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C1);
 80046ac:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80046b0:	f7ff ffda 	bl	8004668 <LL_APB1_GRP1_ReleaseReset>
 80046b4:	e01b      	b.n	80046ee <LL_I2C_DeInit+0x5e>
  }
  else if (I2Cx == I2C2)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a10      	ldr	r2, [pc, #64]	; (80046fc <LL_I2C_DeInit+0x6c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d108      	bne.n	80046d0 <LL_I2C_DeInit+0x40>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C2);
 80046be:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80046c2:	f7ff ffbf 	bl	8004644 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C2);
 80046c6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80046ca:	f7ff ffcd 	bl	8004668 <LL_APB1_GRP1_ReleaseReset>
 80046ce:	e00e      	b.n	80046ee <LL_I2C_DeInit+0x5e>

  }
#if defined(I2C3)
  else if (I2Cx == I2C3)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a0b      	ldr	r2, [pc, #44]	; (8004700 <LL_I2C_DeInit+0x70>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d108      	bne.n	80046ea <LL_I2C_DeInit+0x5a>
  {
    /* Force reset of I2C clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_I2C3);
 80046d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80046dc:	f7ff ffb2 	bl	8004644 <LL_APB1_GRP1_ForceReset>

    /* Release reset of I2C clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_I2C3);
 80046e0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80046e4:	f7ff ffc0 	bl	8004668 <LL_APB1_GRP1_ReleaseReset>
 80046e8:	e001      	b.n	80046ee <LL_I2C_DeInit+0x5e>
  }
#endif
  else
  {
    status = ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80046ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40005400 	.word	0x40005400
 80046fc:	40005800 	.word	0x40005800
 8004700:	40005c00 	.word	0x40005c00

08004704 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7ff feb2 	bl	8004478 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004714:	f107 0308 	add.w	r3, r7, #8
 8004718:	4618      	mov	r0, r3
 800471a:	f000 f895 	bl	8004848 <LL_RCC_GetSystemClocksFreq>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 800471e:	6939      	ldr	r1, [r7, #16]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff fecd 	bl	80044c8 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68d9      	ldr	r1, [r3, #12]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	461a      	mov	r2, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff fead 	bl	8004498 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4619      	mov	r1, r3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff ff57 	bl	80045f8 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fe84 	bl	8004458 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	691b      	ldr	r3, [r3, #16]
 8004754:	4619      	mov	r1, r3
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7ff ff61 	bl	800461e <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800476c:	4b04      	ldr	r3, [pc, #16]	; (8004780 <LL_RCC_GetSysClkSource+0x18>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40023800 	.word	0x40023800

08004784 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <LL_RCC_GetAHBPrescaler+0x18>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004790:	4618      	mov	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	40023800 	.word	0x40023800

080047a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80047a4:	4b04      	ldr	r3, [pc, #16]	; (80047b8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800

080047bc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	40023800 	.word	0x40023800

080047d8 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80047dc:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <LL_RCC_PLL_GetMainSource+0x18>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800

080047f4 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80047f8:	4b04      	ldr	r3, [pc, #16]	; (800480c <LL_RCC_PLL_GetN+0x18>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	099b      	lsrs	r3, r3, #6
 80047fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004802:	4618      	mov	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr
 800480c:	40023800 	.word	0x40023800

08004810 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004814:	4b04      	ldr	r3, [pc, #16]	; (8004828 <LL_RCC_PLL_GetP+0x18>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 800481c:	4618      	mov	r0, r3
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40023800 	.word	0x40023800

0800482c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004830:	4b04      	ldr	r3, [pc, #16]	; (8004844 <LL_RCC_PLL_GetDivider+0x18>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004838:	4618      	mov	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800

08004848 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004850:	f000 f820 	bl	8004894 <RCC_GetSystemClockFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f840 	bl	80048e4 <RCC_GetHCLKClockFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f84e 	bl	8004910 <RCC_GetPCLK1ClockFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 f85a 	bl	8004938 <RCC_GetPCLK2ClockFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60da      	str	r2, [r3, #12]
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800489e:	f7ff ff63 	bl	8004768 <LL_RCC_GetSysClkSource>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	d00c      	beq.n	80048c2 <RCC_GetSystemClockFreq+0x2e>
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d80f      	bhi.n	80048cc <RCC_GetSystemClockFreq+0x38>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <RCC_GetSystemClockFreq+0x22>
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d003      	beq.n	80048bc <RCC_GetSystemClockFreq+0x28>
 80048b4:	e00a      	b.n	80048cc <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80048b6:	4b09      	ldr	r3, [pc, #36]	; (80048dc <RCC_GetSystemClockFreq+0x48>)
 80048b8:	607b      	str	r3, [r7, #4]
      break;
 80048ba:	e00a      	b.n	80048d2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <RCC_GetSystemClockFreq+0x4c>)
 80048be:	607b      	str	r3, [r7, #4]
      break;
 80048c0:	e007      	b.n	80048d2 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80048c2:	2008      	movs	r0, #8
 80048c4:	f000 f84c 	bl	8004960 <RCC_PLL_GetFreqDomain_SYS>
 80048c8:	6078      	str	r0, [r7, #4]
      break;
 80048ca:	e002      	b.n	80048d2 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80048cc:	4b03      	ldr	r3, [pc, #12]	; (80048dc <RCC_GetSystemClockFreq+0x48>)
 80048ce:	607b      	str	r3, [r7, #4]
      break;
 80048d0:	bf00      	nop
  }

  return frequency;
 80048d2:	687b      	ldr	r3, [r7, #4]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	00f42400 	.word	0x00f42400
 80048e0:	017d7840 	.word	0x017d7840

080048e4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80048ec:	f7ff ff4a 	bl	8004784 <LL_RCC_GetAHBPrescaler>
 80048f0:	4603      	mov	r3, r0
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	4a04      	ldr	r2, [pc, #16]	; (800490c <RCC_GetHCLKClockFreq+0x28>)
 80048fa:	5cd3      	ldrb	r3, [r2, r3]
 80048fc:	461a      	mov	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	40d3      	lsrs	r3, r2
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	08006454 	.word	0x08006454

08004910 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004918:	f7ff ff42 	bl	80047a0 <LL_RCC_GetAPB1Prescaler>
 800491c:	4603      	mov	r3, r0
 800491e:	0a9b      	lsrs	r3, r3, #10
 8004920:	4a04      	ldr	r2, [pc, #16]	; (8004934 <RCC_GetPCLK1ClockFreq+0x24>)
 8004922:	5cd3      	ldrb	r3, [r2, r3]
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	40d3      	lsrs	r3, r2
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	08006464 	.word	0x08006464

08004938 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004940:	f7ff ff3c 	bl	80047bc <LL_RCC_GetAPB2Prescaler>
 8004944:	4603      	mov	r3, r0
 8004946:	0b5b      	lsrs	r3, r3, #13
 8004948:	4a04      	ldr	r2, [pc, #16]	; (800495c <RCC_GetPCLK2ClockFreq+0x24>)
 800494a:	5cd3      	ldrb	r3, [r2, r3]
 800494c:	461a      	mov	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	40d3      	lsrs	r3, r2
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	08006464 	.word	0x08006464

08004960 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004960:	b590      	push	{r4, r7, lr}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	2300      	movs	r3, #0
 8004972:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004974:	f7ff ff30 	bl	80047d8 <LL_RCC_PLL_GetMainSource>
 8004978:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d004      	beq.n	800498a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004986:	d003      	beq.n	8004990 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004988:	e005      	b.n	8004996 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800498a:	4b12      	ldr	r3, [pc, #72]	; (80049d4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800498c:	617b      	str	r3, [r7, #20]
      break;
 800498e:	e005      	b.n	800499c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004990:	4b11      	ldr	r3, [pc, #68]	; (80049d8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004992:	617b      	str	r3, [r7, #20]
      break;
 8004994:	e002      	b.n	800499c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004996:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004998:	617b      	str	r3, [r7, #20]
      break;
 800499a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d113      	bne.n	80049ca <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80049a2:	f7ff ff43 	bl	800482c <LL_RCC_PLL_GetDivider>
 80049a6:	4602      	mov	r2, r0
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	fbb3 f4f2 	udiv	r4, r3, r2
 80049ae:	f7ff ff21 	bl	80047f4 <LL_RCC_PLL_GetN>
 80049b2:	4603      	mov	r3, r0
 80049b4:	fb03 f404 	mul.w	r4, r3, r4
 80049b8:	f7ff ff2a 	bl	8004810 <LL_RCC_PLL_GetP>
 80049bc:	4603      	mov	r3, r0
 80049be:	0c1b      	lsrs	r3, r3, #16
 80049c0:	3301      	adds	r3, #1
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	fbb4 f3f3 	udiv	r3, r4, r3
 80049c8:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80049ca:	693b      	ldr	r3, [r7, #16]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd90      	pop	{r4, r7, pc}
 80049d4:	00f42400 	.word	0x00f42400
 80049d8:	017d7840 	.word	0x017d7840

080049dc <__libc_init_array>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	4d0d      	ldr	r5, [pc, #52]	; (8004a14 <__libc_init_array+0x38>)
 80049e0:	4c0d      	ldr	r4, [pc, #52]	; (8004a18 <__libc_init_array+0x3c>)
 80049e2:	1b64      	subs	r4, r4, r5
 80049e4:	10a4      	asrs	r4, r4, #2
 80049e6:	2600      	movs	r6, #0
 80049e8:	42a6      	cmp	r6, r4
 80049ea:	d109      	bne.n	8004a00 <__libc_init_array+0x24>
 80049ec:	4d0b      	ldr	r5, [pc, #44]	; (8004a1c <__libc_init_array+0x40>)
 80049ee:	4c0c      	ldr	r4, [pc, #48]	; (8004a20 <__libc_init_array+0x44>)
 80049f0:	f000 f820 	bl	8004a34 <_init>
 80049f4:	1b64      	subs	r4, r4, r5
 80049f6:	10a4      	asrs	r4, r4, #2
 80049f8:	2600      	movs	r6, #0
 80049fa:	42a6      	cmp	r6, r4
 80049fc:	d105      	bne.n	8004a0a <__libc_init_array+0x2e>
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a04:	4798      	blx	r3
 8004a06:	3601      	adds	r6, #1
 8004a08:	e7ee      	b.n	80049e8 <__libc_init_array+0xc>
 8004a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0e:	4798      	blx	r3
 8004a10:	3601      	adds	r6, #1
 8004a12:	e7f2      	b.n	80049fa <__libc_init_array+0x1e>
 8004a14:	08006474 	.word	0x08006474
 8004a18:	08006474 	.word	0x08006474
 8004a1c:	08006474 	.word	0x08006474
 8004a20:	08006478 	.word	0x08006478

08004a24 <memset>:
 8004a24:	4402      	add	r2, r0
 8004a26:	4603      	mov	r3, r0
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d100      	bne.n	8004a2e <memset+0xa>
 8004a2c:	4770      	bx	lr
 8004a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a32:	e7f9      	b.n	8004a28 <memset+0x4>

08004a34 <_init>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr

08004a40 <_fini>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr
