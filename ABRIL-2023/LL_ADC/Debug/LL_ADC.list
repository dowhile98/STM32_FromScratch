
LL_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ea8  08002ea8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002ea8  08002ea8  00012ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002eb0  08002eb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000038  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a8  200000a8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006096  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016f1  00000000  00000000  00026136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000638  00000000  00000000  00027828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000560  00000000  00000000  00027e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238e8  00000000  00000000  000283c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000746b  00000000  00000000  0004bca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4cc6  00000000  00000000  00053113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127dd9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ee4  00000000  00000000  00127e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002ddc 	.word	0x08002ddc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002ddc 	.word	0x08002ddc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <__NVIC_GetPriorityGrouping+0x18>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	0a1b      	lsrs	r3, r3, #8
 800057e:	f003 0307 	and.w	r3, r3, #7
}
 8000582:	4618      	mov	r0, r3
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	db0b      	blt.n	80005ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	f003 021f 	and.w	r2, r3, #31
 80005a8:	4907      	ldr	r1, [pc, #28]	; (80005c8 <__NVIC_EnableIRQ+0x38>)
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	095b      	lsrs	r3, r3, #5
 80005b0:	2001      	movs	r0, #1
 80005b2:	fa00 f202 	lsl.w	r2, r0, r2
 80005b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	e000e100 	.word	0xe000e100

080005cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	db0a      	blt.n	80005f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	490c      	ldr	r1, [pc, #48]	; (8000618 <__NVIC_SetPriority+0x4c>)
 80005e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ea:	0112      	lsls	r2, r2, #4
 80005ec:	b2d2      	uxtb	r2, r2
 80005ee:	440b      	add	r3, r1
 80005f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f4:	e00a      	b.n	800060c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4908      	ldr	r1, [pc, #32]	; (800061c <__NVIC_SetPriority+0x50>)
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f003 030f 	and.w	r3, r3, #15
 8000602:	3b04      	subs	r3, #4
 8000604:	0112      	lsls	r2, r2, #4
 8000606:	b2d2      	uxtb	r2, r2
 8000608:	440b      	add	r3, r1
 800060a:	761a      	strb	r2, [r3, #24]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000e100 	.word	0xe000e100
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000620:	b480      	push	{r7}
 8000622:	b089      	sub	sp, #36	; 0x24
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	f1c3 0307 	rsb	r3, r3, #7
 800063a:	2b04      	cmp	r3, #4
 800063c:	bf28      	it	cs
 800063e:	2304      	movcs	r3, #4
 8000640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	3304      	adds	r3, #4
 8000646:	2b06      	cmp	r3, #6
 8000648:	d902      	bls.n	8000650 <NVIC_EncodePriority+0x30>
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	3b03      	subs	r3, #3
 800064e:	e000      	b.n	8000652 <NVIC_EncodePriority+0x32>
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	69bb      	ldr	r3, [r7, #24]
 800065a:	fa02 f303 	lsl.w	r3, r2, r3
 800065e:	43da      	mvns	r2, r3
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	401a      	ands	r2, r3
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000668:	f04f 31ff 	mov.w	r1, #4294967295
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	fa01 f303 	lsl.w	r3, r1, r3
 8000672:	43d9      	mvns	r1, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000678:	4313      	orrs	r3, r2
         );
}
 800067a:	4618      	mov	r0, r3
 800067c:	3724      	adds	r7, #36	; 0x24
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <LL_ADC_REG_SetSequencerRanks>:
  *         (1) On STM32F4, parameter available only on ADC instance: ADC1.\n
  *         (2) On devices STM32F42x and STM32F43x, limitation: this internal channel is shared between temperature sensor and Vbat, only 1 measurement path must be enabled.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000686:	b480      	push	{r7}
 8000688:	b089      	sub	sp, #36	; 0x24
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	332c      	adds	r3, #44	; 0x2c
 8000696:	4619      	mov	r1, r3
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800069e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006a2:	61ba      	str	r2, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006a4:	69ba      	ldr	r2, [r7, #24]
 80006a6:	fa92 f2a2 	rbit	r2, r2
 80006aa:	617a      	str	r2, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006ac:	697a      	ldr	r2, [r7, #20]
 80006ae:	fab2 f282 	clz	r2, r2
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	40d3      	lsrs	r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	440b      	add	r3, r1
 80006ba:	61fb      	str	r3, [r7, #28]
  
  MODIFY_REG(*preg,
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	f003 031f 	and.w	r3, r3, #31
 80006c6:	211f      	movs	r1, #31
 80006c8:	fa01 f303 	lsl.w	r3, r1, r3
 80006cc:	43db      	mvns	r3, r3
 80006ce:	401a      	ands	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f003 011f 	and.w	r1, r3, #31
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	f003 031f 	and.w	r3, r3, #31
 80006dc:	fa01 f303 	lsl.w	r3, r1, r3
 80006e0:	431a      	orrs	r2, r3
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80006e6:	bf00      	nop
 80006e8:	3724      	adds	r7, #36	; 0x24
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <LL_ADC_REG_SetFlagEndOfConversion>:
  *         @arg @ref LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV
  *         @arg @ref LL_ADC_REG_FLAG_EOC_UNITARY_CONV
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetFlagEndOfConversion(ADC_TypeDef *ADCx, uint32_t EocSelection)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689b      	ldr	r3, [r3, #8]
 8000700:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	431a      	orrs	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	609a      	str	r2, [r3, #8]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_144CYCLES
  *         @arg @ref LL_ADC_SAMPLINGTIME_480CYCLES
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000718:	b480      	push	{r7}
 800071a:	b08d      	sub	sp, #52	; 0x34
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	330c      	adds	r3, #12
 8000728:	4619      	mov	r1, r3
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000730:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000734:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000736:	69ba      	ldr	r2, [r7, #24]
 8000738:	fa92 f2a2 	rbit	r2, r2
 800073c:	617a      	str	r2, [r7, #20]
  return result;
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	fab2 f282 	clz	r2, r2
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	40d3      	lsrs	r3, r2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	440b      	add	r3, r1
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  MODIFY_REG(*preg,
 800074e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000758:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 800075c:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800075e:	6a39      	ldr	r1, [r7, #32]
 8000760:	fa91 f1a1 	rbit	r1, r1
 8000764:	61f9      	str	r1, [r7, #28]
  return result;
 8000766:	69f9      	ldr	r1, [r7, #28]
 8000768:	fab1 f181 	clz	r1, r1
 800076c:	b2c9      	uxtb	r1, r1
 800076e:	40cb      	lsrs	r3, r1
 8000770:	2107      	movs	r1, #7
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43db      	mvns	r3, r3
 8000778:	401a      	ands	r2, r3
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8000780:	f04f 71f8 	mov.w	r1, #32505856	; 0x1f00000
 8000784:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000788:	fa91 f1a1 	rbit	r1, r1
 800078c:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800078e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000790:	fab1 f181 	clz	r1, r1
 8000794:	b2c9      	uxtb	r1, r1
 8000796:	40cb      	lsrs	r3, r1
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	431a      	orrs	r2, r3
 80007a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a2:	601a      	str	r2, [r3, #0]
             ADC_SMPR2_SMP0 << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK),
             SamplingTime   << __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPx_BITOFFSET_MASK));
}
 80007a4:	bf00      	nop
 80007a6:	3734      	adds	r7, #52	; 0x34
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007bc:	4907      	ldr	r1, [pc, #28]	; (80007dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4013      	ands	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007ce:	68fb      	ldr	r3, [r7, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40023800 	.word	0x40023800

080007e0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007ec:	4907      	ldr	r1, [pc, #28]	; (800080c <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007f4:	4b05      	ldr	r3, [pc, #20]	; (800080c <LL_APB2_GRP1_EnableClock+0x2c>)
 80007f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007fe:	68fb      	ldr	r3, [r7, #12]
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40023800 	.word	0x40023800

08000810 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b092      	sub	sp, #72	; 0x48
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000816:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8000832:	f107 0318 	add.w	r3, r7, #24
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
 800084c:	611a      	str	r2, [r3, #16]
 800084e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_ADC1);
 8000850:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000854:	f7ff ffc4 	bl	80007e0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ffa9 	bl	80007b0 <LL_AHB1_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA1   ------> ADC1_IN1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800085e:	2302      	movs	r3, #2
 8000860:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000862:	2303      	movs	r3, #3
 8000864:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	4827      	ldr	r0, [pc, #156]	; (800090c <MX_ADC1_Init+0xfc>)
 8000870:	f001 fa81 	bl	8001d76 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000874:	f7ff fe7e 	bl	8000574 <__NVIC_GetPriorityGrouping>
 8000878:	4603      	mov	r3, r0
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fece 	bl	8000620 <NVIC_EncodePriority>
 8000884:	4603      	mov	r3, r0
 8000886:	4619      	mov	r1, r3
 8000888:	2012      	movs	r0, #18
 800088a:	f7ff fe9f 	bl	80005cc <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 800088e:	2012      	movs	r0, #18
 8000890:	f7ff fe7e 	bl	8000590 <__NVIC_EnableIRQ>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000894:	2300      	movs	r3, #0
 8000896:	63fb      	str	r3, [r7, #60]	; 0x3c
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000898:	2300      	movs	r3, #0
 800089a:	643b      	str	r3, [r7, #64]	; 0x40
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	647b      	str	r3, [r7, #68]	; 0x44
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80008a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80008a4:	4619      	mov	r1, r3
 80008a6:	481a      	ldr	r0, [pc, #104]	; (8000910 <MX_ADC1_Init+0x100>)
 80008a8:	f001 f8f2 	bl	8001a90 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_NONE;
 80008bc:	2300      	movs	r3, #0
 80008be:	63bb      	str	r3, [r7, #56]	; 0x38
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80008c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4812      	ldr	r0, [pc, #72]	; (8000910 <MX_ADC1_Init+0x100>)
 80008c8:	f001 f90e 	bl	8001ae8 <LL_ADC_REG_Init>
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_UNITARY_CONV);
 80008cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008d0:	480f      	ldr	r0, [pc, #60]	; (8000910 <MX_ADC1_Init+0x100>)
 80008d2:	f7ff ff0e 	bl	80006f2 <LL_ADC_REG_SetFlagEndOfConversion>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 80008d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008da:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	4619      	mov	r1, r3
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <MX_ADC1_Init+0x104>)
 80008e8:	f001 f88a 	bl	8001a00 <LL_ADC_CommonInit>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_1);
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <MX_ADC1_Init+0x108>)
 80008ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f2:	4807      	ldr	r0, [pc, #28]	; (8000910 <MX_ADC1_Init+0x100>)
 80008f4:	f7ff fec7 	bl	8000686 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_1, LL_ADC_SAMPLINGTIME_28CYCLES);
 80008f8:	2202      	movs	r2, #2
 80008fa:	4907      	ldr	r1, [pc, #28]	; (8000918 <MX_ADC1_Init+0x108>)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_ADC1_Init+0x100>)
 80008fe:	f7ff ff0b 	bl	8000718 <LL_ADC_SetChannelSamplingTime>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	3748      	adds	r7, #72	; 0x48
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40020000 	.word	0x40020000
 8000910:	40012000 	.word	0x40012000
 8000914:	40012300 	.word	0x40012300
 8000918:	02300001 	.word	0x02300001

0800091c <LL_AHB1_GRP1_EnableClock>:
{
 800091c:	b480      	push	{r7}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000928:	4907      	ldr	r1, [pc, #28]	; (8000948 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4313      	orrs	r3, r2
 800092e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4013      	ands	r3, r2
 8000938:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	40023800 	.word	0x40023800

0800094c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000950:	2080      	movs	r0, #128	; 0x80
 8000952:	f7ff ffe3 	bl	800091c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ffe0 	bl	800091c <LL_AHB1_GRP1_EnableClock>

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000968:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800096c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	2b00      	cmp	r3, #0
 8000976:	d013      	beq.n	80009a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000978:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800097c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000980:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000984:	2b00      	cmp	r3, #0
 8000986:	d00b      	beq.n	80009a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000988:	e000      	b.n	800098c <ITM_SendChar+0x2c>
    {
      __NOP();
 800098a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800098c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f9      	beq.n	800098a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000996:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	b2d2      	uxtb	r2, r2
 800099e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80009a0:	687b      	ldr	r3, [r7, #4]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <LL_ADC_Enable>:
  * @rmtoll CR2      ADON           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	f043 0201 	orr.w	r2, r3, #1
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	609a      	str	r2, [r3, #8]
}
 80009c2:	bf00      	nop
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <LL_ADC_REG_StartConversionSWStart>:
  * @rmtoll CR2      SWSTART        LL_ADC_REG_StartConversionSWStart
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b083      	sub	sp, #12
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CR2, ADC_CR2_SWSTART);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	609a      	str	r2, [r3, #8]
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b083      	sub	sp, #12
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fa:	b29b      	uxth	r3, r3
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <LL_ADC_IsActiveFlag_EOCS>:
  * @rmtoll SR       EOC            LL_ADC_IsActiveFlag_EOCS
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOCS(ADC_TypeDef *ADCx)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	bf0c      	ite	eq
 8000a1c:	2301      	moveq	r3, #1
 8000a1e:	2300      	movne	r3, #0
 8000a20:	b2db      	uxtb	r3, r3
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <__io_putchar>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int ch){
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff91 	bl	8000960 <ITM_SendChar>
	return ch;
 8000a3e:	687b      	ldr	r3, [r7, #4]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f000 f9d2 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f828 	bl	8000aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a54:	f7ff ff7a 	bl	800094c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a58:	f7ff feda 	bl	8000810 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //ADC1->CR2 |= ADC_CR2_ADON;
  LL_ADC_Enable(ADC1);
 8000a5c:	480e      	ldr	r0, [pc, #56]	; (8000a98 <main+0x50>)
 8000a5e:	f7ff ffa6 	bl	80009ae <LL_ADC_Enable>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //ADC1->CR2 |= ADC_CR2_SWSTART;
	  LL_ADC_REG_StartConversionSWStart(ADC1);
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <main+0x50>)
 8000a64:	f7ff ffb3 	bl	80009ce <LL_ADC_REG_StartConversionSWStart>
	  //while(!(ADC1->SR & ADC_SR_EOC));
	  while(!LL_ADC_IsActiveFlag_EOCS(ADC1));
 8000a68:	bf00      	nop
 8000a6a:	480b      	ldr	r0, [pc, #44]	; (8000a98 <main+0x50>)
 8000a6c:	f7ff ffcc 	bl	8000a08 <LL_ADC_IsActiveFlag_EOCS>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f9      	beq.n	8000a6a <main+0x22>
	  //in1 = ADC1->DR;
	  in1 = LL_ADC_REG_ReadConversionData12(ADC1);
 8000a76:	4808      	ldr	r0, [pc, #32]	; (8000a98 <main+0x50>)
 8000a78:	f7ff ffb9 	bl	80009ee <LL_ADC_REG_ReadConversionData12>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <main+0x54>)
 8000a82:	801a      	strh	r2, [r3, #0]
	  printf("IN1: %u\r\n", in1);
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <main+0x54>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <main+0x58>)
 8000a8c:	f001 fa18 	bl	8001ec0 <iprintf>
	  HAL_Delay(100);
 8000a90:	2064      	movs	r0, #100	; 0x64
 8000a92:	f000 fa21 	bl	8000ed8 <HAL_Delay>
	  LL_ADC_REG_StartConversionSWStart(ADC1);
 8000a96:	e7e4      	b.n	8000a62 <main+0x1a>
 8000a98:	40012000 	.word	0x40012000
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	08002df4 	.word	0x08002df4

08000aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b094      	sub	sp, #80	; 0x50
 8000aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aaa:	f107 0320 	add.w	r3, r7, #32
 8000aae:	2230      	movs	r2, #48	; 0x30
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 f9fc 	bl	8001eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <SystemClock_Config+0xcc>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	4a27      	ldr	r2, [pc, #156]	; (8000b70 <SystemClock_Config+0xcc>)
 8000ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad8:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <SystemClock_Config+0xcc>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <SystemClock_Config+0xd0>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a21      	ldr	r2, [pc, #132]	; (8000b74 <SystemClock_Config+0xd0>)
 8000aee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af2:	6013      	str	r3, [r2, #0]
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <SystemClock_Config+0xd0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b00:	2301      	movs	r3, #1
 8000b02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b18:	23a8      	movs	r3, #168	; 0xa8
 8000b1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b20:	2304      	movs	r3, #4
 8000b22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 0320 	add.w	r3, r7, #32
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 fadf 	bl	80010ec <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b34:	f000 f820 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b38:	230f      	movs	r3, #15
 8000b3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b50:	f107 030c 	add.w	r3, r7, #12
 8000b54:	2105      	movs	r1, #5
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 fd40 	bl	80015dc <HAL_RCC_ClockConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b62:	f000 f809 	bl	8000b78 <Error_Handler>
  }
}
 8000b66:	bf00      	nop
 8000b68:	3750      	adds	r7, #80	; 0x50
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40007000 	.word	0x40007000

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f93a 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END ADC_IRQn 0 */

  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	e00a      	b.n	8000c5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c48:	f3af 8000 	nop.w
 8000c4c:	4601      	mov	r1, r0
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	b2ca      	uxtb	r2, r1
 8000c56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	617b      	str	r3, [r7, #20]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	dbf0      	blt.n	8000c48 <_read+0x12>
  }

  return len;
 8000c66:	687b      	ldr	r3, [r7, #4]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e009      	b.n	8000c96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	60ba      	str	r2, [r7, #8]
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fecf 	bl	8000a2e <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	3301      	adds	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbf1      	blt.n	8000c82 <_write+0x12>
  }
  return len;
 8000c9e:	687b      	ldr	r3, [r7, #4]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <_close>:

int _close(int file)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd0:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <_isatty>:

int _isatty(int file)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ce8:	2301      	movs	r3, #1
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f001 f88c 	bl	8001e5c <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20020000 	.word	0x20020000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	20000090 	.word	0x20000090
 8000d78:	200000a8 	.word	0x200000a8

08000d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000da6:	490e      	ldr	r1, [pc, #56]	; (8000de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da8:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dbc:	4c0b      	ldr	r4, [pc, #44]	; (8000dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dca:	f7ff ffd7 	bl	8000d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f001 f84b 	bl	8001e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fe39 	bl	8000a48 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000de4:	08002eb8 	.word	0x08002eb8
  ldr r2, =_sbss
 8000de8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dec:	200000a8 	.word	0x200000a8

08000df0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <CAN1_RX0_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <HAL_Init+0x40>)
 8000dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_Init+0x40>)
 8000e0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a07      	ldr	r2, [pc, #28]	; (8000e34 <HAL_Init+0x40>)
 8000e16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 f931 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e22:	200f      	movs	r0, #15
 8000e24:	f000 f808 	bl	8000e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e28:	f7ff feac 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40023c00 	.word	0x40023c00

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x54>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <HAL_InitTick+0x58>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f93b 	bl	80010d2 <HAL_SYSTICK_Config>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00e      	b.n	8000e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b0f      	cmp	r3, #15
 8000e6a:	d80a      	bhi.n	8000e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	6879      	ldr	r1, [r7, #4]
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f000 f911 	bl	800109a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e78:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_InitTick+0x5c>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000094 	.word	0x20000094

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000094 	.word	0x20000094

08000ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee0:	f7ff ffee 	bl	8000ec0 <HAL_GetTick>
 8000ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef0:	d005      	beq.n	8000efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <HAL_Delay+0x44>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efe:	bf00      	nop
 8000f00:	f7ff ffde 	bl	8000ec0 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d8f7      	bhi.n	8000f00 <HAL_Delay+0x28>
  {
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008

08000f20 <__NVIC_SetPriorityGrouping>:
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_SetPriority>:
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff47 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff5c 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff ffb0 	bl	8001040 <SysTick_Config>
 80010e0:	4603      	mov	r3, r0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e267      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d075      	beq.n	80011f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110a:	4b88      	ldr	r3, [pc, #544]	; (800132c <HAL_RCC_OscConfig+0x240>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	f003 030c 	and.w	r3, r3, #12
 8001112:	2b04      	cmp	r3, #4
 8001114:	d00c      	beq.n	8001130 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001116:	4b85      	ldr	r3, [pc, #532]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800111e:	2b08      	cmp	r3, #8
 8001120:	d112      	bne.n	8001148 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001122:	4b82      	ldr	r3, [pc, #520]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800112e:	d10b      	bne.n	8001148 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001130:	4b7e      	ldr	r3, [pc, #504]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d05b      	beq.n	80011f4 <HAL_RCC_OscConfig+0x108>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d157      	bne.n	80011f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e242      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001150:	d106      	bne.n	8001160 <HAL_RCC_OscConfig+0x74>
 8001152:	4b76      	ldr	r3, [pc, #472]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a75      	ldr	r2, [pc, #468]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001158:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e01d      	b.n	800119c <HAL_RCC_OscConfig+0xb0>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x98>
 800116a:	4b70      	ldr	r3, [pc, #448]	; (800132c <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a6f      	ldr	r2, [pc, #444]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b6d      	ldr	r3, [pc, #436]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a6c      	ldr	r2, [pc, #432]	; (800132c <HAL_RCC_OscConfig+0x240>)
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e00b      	b.n	800119c <HAL_RCC_OscConfig+0xb0>
 8001184:	4b69      	ldr	r3, [pc, #420]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a68      	ldr	r2, [pc, #416]	; (800132c <HAL_RCC_OscConfig+0x240>)
 800118a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b66      	ldr	r3, [pc, #408]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a65      	ldr	r2, [pc, #404]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d013      	beq.n	80011cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fe8c 	bl	8000ec0 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fe88 	bl	8000ec0 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	; 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e207      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	4b5b      	ldr	r3, [pc, #364]	; (800132c <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d0f0      	beq.n	80011ac <HAL_RCC_OscConfig+0xc0>
 80011ca:	e014      	b.n	80011f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fe78 	bl	8000ec0 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fe74 	bl	8000ec0 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b64      	cmp	r3, #100	; 0x64
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e1f3      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	4b51      	ldr	r3, [pc, #324]	; (800132c <HAL_RCC_OscConfig+0x240>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0xe8>
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d063      	beq.n	80012ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001202:	4b4a      	ldr	r3, [pc, #296]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00b      	beq.n	8001226 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800120e:	4b47      	ldr	r3, [pc, #284]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001216:	2b08      	cmp	r3, #8
 8001218:	d11c      	bne.n	8001254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121a:	4b44      	ldr	r3, [pc, #272]	; (800132c <HAL_RCC_OscConfig+0x240>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d116      	bne.n	8001254 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	4b41      	ldr	r3, [pc, #260]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <HAL_RCC_OscConfig+0x152>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d001      	beq.n	800123e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e1c7      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123e:	4b3b      	ldr	r3, [pc, #236]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	4937      	ldr	r1, [pc, #220]	; (800132c <HAL_RCC_OscConfig+0x240>)
 800124e:	4313      	orrs	r3, r2
 8001250:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001252:	e03a      	b.n	80012ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d020      	beq.n	800129e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800125c:	4b34      	ldr	r3, [pc, #208]	; (8001330 <HAL_RCC_OscConfig+0x244>)
 800125e:	2201      	movs	r2, #1
 8001260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001262:	f7ff fe2d 	bl	8000ec0 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001268:	e008      	b.n	800127c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126a:	f7ff fe29 	bl	8000ec0 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b02      	cmp	r3, #2
 8001276:	d901      	bls.n	800127c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	e1a8      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127c:	4b2b      	ldr	r3, [pc, #172]	; (800132c <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0302 	and.w	r3, r3, #2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f0      	beq.n	800126a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	4925      	ldr	r1, [pc, #148]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001298:	4313      	orrs	r3, r2
 800129a:	600b      	str	r3, [r1, #0]
 800129c:	e015      	b.n	80012ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800129e:	4b24      	ldr	r3, [pc, #144]	; (8001330 <HAL_RCC_OscConfig+0x244>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fe0c 	bl	8000ec0 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ac:	f7ff fe08 	bl	8000ec0 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e187      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d036      	beq.n	8001344 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d016      	beq.n	800130c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_RCC_OscConfig+0x248>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e4:	f7ff fdec 	bl	8000ec0 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff fde8 	bl	8000ec0 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e167      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <HAL_RCC_OscConfig+0x240>)
 8001300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x200>
 800130a:	e01b      	b.n	8001344 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_RCC_OscConfig+0x248>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001312:	f7ff fdd5 	bl	8000ec0 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001318:	e00e      	b.n	8001338 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131a:	f7ff fdd1 	bl	8000ec0 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d907      	bls.n	8001338 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e150      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
 800132c:	40023800 	.word	0x40023800
 8001330:	42470000 	.word	0x42470000
 8001334:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001338:	4b88      	ldr	r3, [pc, #544]	; (800155c <HAL_RCC_OscConfig+0x470>)
 800133a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1ea      	bne.n	800131a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8097 	beq.w	8001480 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001356:	4b81      	ldr	r3, [pc, #516]	; (800155c <HAL_RCC_OscConfig+0x470>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b7d      	ldr	r3, [pc, #500]	; (800155c <HAL_RCC_OscConfig+0x470>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a7c      	ldr	r2, [pc, #496]	; (800155c <HAL_RCC_OscConfig+0x470>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b7a      	ldr	r3, [pc, #488]	; (800155c <HAL_RCC_OscConfig+0x470>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800137e:	2301      	movs	r3, #1
 8001380:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001382:	4b77      	ldr	r3, [pc, #476]	; (8001560 <HAL_RCC_OscConfig+0x474>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138a:	2b00      	cmp	r3, #0
 800138c:	d118      	bne.n	80013c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138e:	4b74      	ldr	r3, [pc, #464]	; (8001560 <HAL_RCC_OscConfig+0x474>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a73      	ldr	r2, [pc, #460]	; (8001560 <HAL_RCC_OscConfig+0x474>)
 8001394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139a:	f7ff fd91 	bl	8000ec0 <HAL_GetTick>
 800139e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a2:	f7ff fd8d 	bl	8000ec0 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e10c      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	4b6a      	ldr	r3, [pc, #424]	; (8001560 <HAL_RCC_OscConfig+0x474>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d106      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2ea>
 80013c8:	4b64      	ldr	r3, [pc, #400]	; (800155c <HAL_RCC_OscConfig+0x470>)
 80013ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013cc:	4a63      	ldr	r2, [pc, #396]	; (800155c <HAL_RCC_OscConfig+0x470>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6713      	str	r3, [r2, #112]	; 0x70
 80013d4:	e01c      	b.n	8001410 <HAL_RCC_OscConfig+0x324>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b05      	cmp	r3, #5
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x30c>
 80013de:	4b5f      	ldr	r3, [pc, #380]	; (800155c <HAL_RCC_OscConfig+0x470>)
 80013e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e2:	4a5e      	ldr	r2, [pc, #376]	; (800155c <HAL_RCC_OscConfig+0x470>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6713      	str	r3, [r2, #112]	; 0x70
 80013ea:	4b5c      	ldr	r3, [pc, #368]	; (800155c <HAL_RCC_OscConfig+0x470>)
 80013ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ee:	4a5b      	ldr	r2, [pc, #364]	; (800155c <HAL_RCC_OscConfig+0x470>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6713      	str	r3, [r2, #112]	; 0x70
 80013f6:	e00b      	b.n	8001410 <HAL_RCC_OscConfig+0x324>
 80013f8:	4b58      	ldr	r3, [pc, #352]	; (800155c <HAL_RCC_OscConfig+0x470>)
 80013fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fc:	4a57      	ldr	r2, [pc, #348]	; (800155c <HAL_RCC_OscConfig+0x470>)
 80013fe:	f023 0301 	bic.w	r3, r3, #1
 8001402:	6713      	str	r3, [r2, #112]	; 0x70
 8001404:	4b55      	ldr	r3, [pc, #340]	; (800155c <HAL_RCC_OscConfig+0x470>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001408:	4a54      	ldr	r2, [pc, #336]	; (800155c <HAL_RCC_OscConfig+0x470>)
 800140a:	f023 0304 	bic.w	r3, r3, #4
 800140e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d015      	beq.n	8001444 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001418:	f7ff fd52 	bl	8000ec0 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800141e:	e00a      	b.n	8001436 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001420:	f7ff fd4e 	bl	8000ec0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	f241 3288 	movw	r2, #5000	; 0x1388
 800142e:	4293      	cmp	r3, r2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e0cb      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001436:	4b49      	ldr	r3, [pc, #292]	; (800155c <HAL_RCC_OscConfig+0x470>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0ee      	beq.n	8001420 <HAL_RCC_OscConfig+0x334>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff fd3c 	bl	8000ec0 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144a:	e00a      	b.n	8001462 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144c:	f7ff fd38 	bl	8000ec0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f241 3288 	movw	r2, #5000	; 0x1388
 800145a:	4293      	cmp	r3, r2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0b5      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001462:	4b3e      	ldr	r3, [pc, #248]	; (800155c <HAL_RCC_OscConfig+0x470>)
 8001464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1ee      	bne.n	800144c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d105      	bne.n	8001480 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001474:	4b39      	ldr	r3, [pc, #228]	; (800155c <HAL_RCC_OscConfig+0x470>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a38      	ldr	r2, [pc, #224]	; (800155c <HAL_RCC_OscConfig+0x470>)
 800147a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80a1 	beq.w	80015cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <HAL_RCC_OscConfig+0x470>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d05c      	beq.n	8001550 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d141      	bne.n	8001522 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b31      	ldr	r3, [pc, #196]	; (8001564 <HAL_RCC_OscConfig+0x478>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fd0c 	bl	8000ec0 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fd08 	bl	8000ec0 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e087      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014be:	4b27      	ldr	r3, [pc, #156]	; (800155c <HAL_RCC_OscConfig+0x470>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69da      	ldr	r2, [r3, #28]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	085b      	lsrs	r3, r3, #1
 80014e2:	3b01      	subs	r3, #1
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ec:	061b      	lsls	r3, r3, #24
 80014ee:	491b      	ldr	r1, [pc, #108]	; (800155c <HAL_RCC_OscConfig+0x470>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <HAL_RCC_OscConfig+0x478>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fce1 	bl	8000ec0 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001502:	f7ff fcdd 	bl	8000ec0 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e05c      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_RCC_OscConfig+0x470>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x416>
 8001520:	e054      	b.n	80015cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_RCC_OscConfig+0x478>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fcca 	bl	8000ec0 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fcc6 	bl	8000ec0 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e045      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_RCC_OscConfig+0x470>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x444>
 800154e:	e03d      	b.n	80015cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d107      	bne.n	8001568 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e038      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000
 8001564:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_RCC_OscConfig+0x4ec>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d028      	beq.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001580:	429a      	cmp	r2, r3
 8001582:	d121      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	429a      	cmp	r2, r3
 8001590:	d11a      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001598:	4013      	ands	r3, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800159e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d111      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	085b      	lsrs	r3, r3, #1
 80015b0:	3b01      	subs	r3, #1
 80015b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d107      	bne.n	80015c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d101      	bne.n	80015f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0cc      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f0:	4b68      	ldr	r3, [pc, #416]	; (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0307 	and.w	r3, r3, #7
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d90c      	bls.n	8001618 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b65      	ldr	r3, [pc, #404]	; (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b63      	ldr	r3, [pc, #396]	; (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e0b8      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001630:	4b59      	ldr	r3, [pc, #356]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	4a58      	ldr	r2, [pc, #352]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800163a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0308 	and.w	r3, r3, #8
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	4a52      	ldr	r2, [pc, #328]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001652:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001654:	4b50      	ldr	r3, [pc, #320]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	494d      	ldr	r1, [pc, #308]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	d044      	beq.n	80016fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d119      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e07f      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d003      	beq.n	800169a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001696:	2b03      	cmp	r3, #3
 8001698:	d107      	bne.n	80016aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169a:	4b3f      	ldr	r3, [pc, #252]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e06f      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016aa:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e067      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016ba:	4b37      	ldr	r3, [pc, #220]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f023 0203 	bic.w	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4934      	ldr	r1, [pc, #208]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016cc:	f7ff fbf8 	bl	8000ec0 <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d4:	f7ff fbf4 	bl	8000ec0 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e04f      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ea:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 020c 	and.w	r2, r3, #12
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d1eb      	bne.n	80016d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0307 	and.w	r3, r3, #7
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d20c      	bcs.n	8001724 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e032      	b.n	800178a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4916      	ldr	r1, [pc, #88]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	4313      	orrs	r3, r2
 8001740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	490e      	ldr	r1, [pc, #56]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	4313      	orrs	r3, r2
 8001760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001762:	f000 f821 	bl	80017a8 <HAL_RCC_GetSysClockFreq>
 8001766:	4602      	mov	r2, r0
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	490a      	ldr	r1, [pc, #40]	; (800179c <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	5ccb      	ldrb	r3, [r1, r3]
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	4a09      	ldr	r2, [pc, #36]	; (80017a0 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fb58 	bl	8000e38 <HAL_InitTick>

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023c00 	.word	0x40023c00
 8001798:	40023800 	.word	0x40023800
 800179c:	08002e00 	.word	0x08002e00
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017ac:	b094      	sub	sp, #80	; 0x50
 80017ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
 80017b4:	2300      	movs	r3, #0
 80017b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017b8:	2300      	movs	r3, #0
 80017ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c0:	4b79      	ldr	r3, [pc, #484]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 030c 	and.w	r3, r3, #12
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d00d      	beq.n	80017e8 <HAL_RCC_GetSysClockFreq+0x40>
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	f200 80e1 	bhi.w	8001994 <HAL_RCC_GetSysClockFreq+0x1ec>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <HAL_RCC_GetSysClockFreq+0x34>
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80017da:	e0db      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4b73      	ldr	r3, [pc, #460]	; (80019ac <HAL_RCC_GetSysClockFreq+0x204>)
 80017de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80017e0:	e0db      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e2:	4b73      	ldr	r3, [pc, #460]	; (80019b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80017e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80017e6:	e0d8      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e8:	4b6f      	ldr	r3, [pc, #444]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f2:	4b6d      	ldr	r3, [pc, #436]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d063      	beq.n	80018c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fe:	4b6a      	ldr	r3, [pc, #424]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	099b      	lsrs	r3, r3, #6
 8001804:	2200      	movs	r2, #0
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
 8001808:	63fa      	str	r2, [r7, #60]	; 0x3c
 800180a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800180c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001810:	633b      	str	r3, [r7, #48]	; 0x30
 8001812:	2300      	movs	r3, #0
 8001814:	637b      	str	r3, [r7, #52]	; 0x34
 8001816:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800181a:	4622      	mov	r2, r4
 800181c:	462b      	mov	r3, r5
 800181e:	f04f 0000 	mov.w	r0, #0
 8001822:	f04f 0100 	mov.w	r1, #0
 8001826:	0159      	lsls	r1, r3, #5
 8001828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800182c:	0150      	lsls	r0, r2, #5
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4621      	mov	r1, r4
 8001834:	1a51      	subs	r1, r2, r1
 8001836:	6139      	str	r1, [r7, #16]
 8001838:	4629      	mov	r1, r5
 800183a:	eb63 0301 	sbc.w	r3, r3, r1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800184c:	4659      	mov	r1, fp
 800184e:	018b      	lsls	r3, r1, #6
 8001850:	4651      	mov	r1, sl
 8001852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001856:	4651      	mov	r1, sl
 8001858:	018a      	lsls	r2, r1, #6
 800185a:	4651      	mov	r1, sl
 800185c:	ebb2 0801 	subs.w	r8, r2, r1
 8001860:	4659      	mov	r1, fp
 8001862:	eb63 0901 	sbc.w	r9, r3, r1
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001872:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001876:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800187a:	4690      	mov	r8, r2
 800187c:	4699      	mov	r9, r3
 800187e:	4623      	mov	r3, r4
 8001880:	eb18 0303 	adds.w	r3, r8, r3
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	462b      	mov	r3, r5
 8001888:	eb49 0303 	adc.w	r3, r9, r3
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800189a:	4629      	mov	r1, r5
 800189c:	024b      	lsls	r3, r1, #9
 800189e:	4621      	mov	r1, r4
 80018a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018a4:	4621      	mov	r1, r4
 80018a6:	024a      	lsls	r2, r1, #9
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ae:	2200      	movs	r2, #0
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018b8:	f7fe fcda 	bl	8000270 <__aeabi_uldivmod>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4613      	mov	r3, r2
 80018c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018c4:	e058      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c6:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	099b      	lsrs	r3, r3, #6
 80018cc:	2200      	movs	r2, #0
 80018ce:	4618      	mov	r0, r3
 80018d0:	4611      	mov	r1, r2
 80018d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018d6:	623b      	str	r3, [r7, #32]
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
 80018dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018e0:	4642      	mov	r2, r8
 80018e2:	464b      	mov	r3, r9
 80018e4:	f04f 0000 	mov.w	r0, #0
 80018e8:	f04f 0100 	mov.w	r1, #0
 80018ec:	0159      	lsls	r1, r3, #5
 80018ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f2:	0150      	lsls	r0, r2, #5
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4641      	mov	r1, r8
 80018fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80018fe:	4649      	mov	r1, r9
 8001900:	eb63 0b01 	sbc.w	fp, r3, r1
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	f04f 0300 	mov.w	r3, #0
 800190c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001910:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001914:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001918:	ebb2 040a 	subs.w	r4, r2, sl
 800191c:	eb63 050b 	sbc.w	r5, r3, fp
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	00eb      	lsls	r3, r5, #3
 800192a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800192e:	00e2      	lsls	r2, r4, #3
 8001930:	4614      	mov	r4, r2
 8001932:	461d      	mov	r5, r3
 8001934:	4643      	mov	r3, r8
 8001936:	18e3      	adds	r3, r4, r3
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	464b      	mov	r3, r9
 800193c:	eb45 0303 	adc.w	r3, r5, r3
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800194e:	4629      	mov	r1, r5
 8001950:	028b      	lsls	r3, r1, #10
 8001952:	4621      	mov	r1, r4
 8001954:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001958:	4621      	mov	r1, r4
 800195a:	028a      	lsls	r2, r1, #10
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001962:	2200      	movs	r2, #0
 8001964:	61bb      	str	r3, [r7, #24]
 8001966:	61fa      	str	r2, [r7, #28]
 8001968:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800196c:	f7fe fc80 	bl	8000270 <__aeabi_uldivmod>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4613      	mov	r3, r2
 8001976:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	0c1b      	lsrs	r3, r3, #16
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	3301      	adds	r3, #1
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001988:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800198a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800198c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001990:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001992:	e002      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetSysClockFreq+0x204>)
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800199c:	4618      	mov	r0, r3
 800199e:	3750      	adds	r7, #80	; 0x50
 80019a0:	46bd      	mov	sp, r7
 80019a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	00f42400 	.word	0x00f42400
 80019b0:	007a1200 	.word	0x007a1200

080019b4 <LL_ADC_REG_SetSequencerLength>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_ADC_IsEnabled>:
{
 80019da:	b480      	push	{r7}
 80019dc:	b083      	sub	sp, #12
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	bf0c      	ite	eq
 80019ee:	2301      	moveq	r3, #1
 80019f0:	2300      	movne	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8001a0e:	481c      	ldr	r0, [pc, #112]	; (8001a80 <LL_ADC_CommonInit+0x80>)
 8001a10:	f7ff ffe3 	bl	80019da <LL_ADC_IsEnabled>
 8001a14:	4604      	mov	r4, r0
 8001a16:	481b      	ldr	r0, [pc, #108]	; (8001a84 <LL_ADC_CommonInit+0x84>)
 8001a18:	f7ff ffdf 	bl	80019da <LL_ADC_IsEnabled>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	431c      	orrs	r4, r3
 8001a20:	4819      	ldr	r0, [pc, #100]	; (8001a88 <LL_ADC_CommonInit+0x88>)
 8001a22:	f7ff ffda 	bl	80019da <LL_ADC_IsEnabled>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4323      	orrs	r3, r4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d120      	bne.n	8001a70 <LL_ADC_CommonInit+0x70>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d012      	beq.n	8001a5c <LL_ADC_CommonInit+0x5c>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <LL_ADC_CommonInit+0x8c>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	6811      	ldr	r1, [r2, #0]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	6852      	ldr	r2, [r2, #4]
 8001a46:	4311      	orrs	r1, r2
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	6892      	ldr	r2, [r2, #8]
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	68d2      	ldr	r2, [r2, #12]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	e00b      	b.n	8001a74 <LL_ADC_CommonInit+0x74>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <LL_ADC_CommonInit+0x8c>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	e001      	b.n	8001a74 <LL_ADC_CommonInit+0x74>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40012000 	.word	0x40012000
 8001a84:	40012100 	.word	0x40012100
 8001a88:	40012200 	.word	0x40012200
 8001a8c:	fffc10e0 	.word	0xfffc10e0

08001a90 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ff9b 	bl	80019da <LL_ADC_IsEnabled>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d117      	bne.n	8001ada <LL_ADC_Init+0x4a>
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001ab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	6811      	ldr	r1, [r2, #0]
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	6892      	ldr	r2, [r2, #8]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	605a      	str	r2, [r3, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	e001      	b.n	8001ade <LL_ADC_Init+0x4e>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0UL)
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ff6f 	bl	80019da <LL_ADC_IsEnabled>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d12b      	bne.n	8001b5a <LL_ADC_REG_Init+0x72>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 series, ADC trigger edge is set when starting      */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d009      	beq.n	8001b1e <LL_ADC_REG_Init+0x36>
    {
      MODIFY_REG(ADCx->CR1,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	e005      	b.n	8001b2a <LL_ADC_REG_Init+0x42>
                   ADC_REG_InitStruct->SequencerDiscont
                );
    }
    else
    {
      MODIFY_REG(ADCx->CR1,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f423 4268 	bic.w	r2, r3, #59392	; 0xe800
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	605a      	str	r2, [r3, #4]
                ,
                   LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <LL_ADC_REG_Init+0x80>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	6812      	ldr	r2, [r2, #0]
 8001b36:	f002 6170 	and.w	r1, r2, #251658240	; 0xf000000
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	68d2      	ldr	r2, [r2, #12]
 8001b3e:	4311      	orrs	r1, r2
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	6912      	ldr	r2, [r2, #16]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
    /* Note: If ADC instance feature scan mode is disabled                    */
    /*       (refer to  ADC instance initialization structure                 */
    /*       parameter @ref SequencersScanMode                                */
    /*       or function @ref LL_ADC_SetSequencersScanMode() ),               */
    /*       this parameter is discarded.                                     */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff2e 	bl	80019b4 <LL_ADC_REG_SetSequencerLength>
 8001b58:	e001      	b.n	8001b5e <LL_ADC_REG_Init+0x76>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	c0fffcfd 	.word	0xc0fffcfd

08001b6c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	613b      	str	r3, [r7, #16]
  return result;
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2103      	movs	r1, #3
 8001b94:	fa01 f303 	lsl.w	r3, r1, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	61bb      	str	r3, [r7, #24]
  return result;
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	601a      	str	r2, [r3, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	401a      	ands	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	fb01 f303 	mul.w	r3, r1, r3
 8001be8:	431a      	orrs	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	605a      	str	r2, [r3, #4]
}
 8001bee:	bf00      	nop
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b089      	sub	sp, #36	; 0x24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fa93 f3a3 	rbit	r3, r3
 8001c14:	613b      	str	r3, [r7, #16]
  return result;
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2103      	movs	r1, #3
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	401a      	ands	r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	61bb      	str	r3, [r7, #24]
  return result;
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	fab3 f383 	clz	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	fa01 f303 	lsl.w	r3, r1, r3
 8001c46:	431a      	orrs	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001c4c:	bf00      	nop
 8001c4e:	3724      	adds	r7, #36	; 0x24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b089      	sub	sp, #36	; 0x24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	613b      	str	r3, [r7, #16]
  return result;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	2103      	movs	r1, #3
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	fa93 f3a3 	rbit	r3, r3
 8001c92:	61bb      	str	r3, [r7, #24]
  return result;
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	60da      	str	r2, [r3, #12]
}
 8001caa:	bf00      	nop
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b089      	sub	sp, #36	; 0x24
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a1a      	ldr	r2, [r3, #32]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	613b      	str	r3, [r7, #16]
  return result;
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	210f      	movs	r1, #15
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	61bb      	str	r3, [r7, #24]
  return result;
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	fab3 f383 	clz	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	431a      	orrs	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001d08:	bf00      	nop
 8001d0a:	3724      	adds	r7, #36	; 0x24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	0a1b      	lsrs	r3, r3, #8
 8001d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	613b      	str	r3, [r7, #16]
  return result;
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	210f      	movs	r1, #15
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	401a      	ands	r2, r3
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	fa93 f3a3 	rbit	r3, r3
 8001d52:	61bb      	str	r3, [r7, #24]
  return result;
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	431a      	orrs	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001d6a:	bf00      	nop
 8001d6c:	3724      	adds	r7, #36	; 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b088      	sub	sp, #32
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	613b      	str	r3, [r7, #16]
  return result;
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	fab3 f383 	clz	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001da0:	e050      	b.n	8001e44 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	2101      	movs	r1, #1
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d042      	beq.n	8001e3e <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d003      	beq.n	8001dc8 <LL_GPIO_Init+0x52>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d10d      	bne.n	8001de4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	69b9      	ldr	r1, [r7, #24]
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff ff12 	bl	8001bfa <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	69b9      	ldr	r1, [r7, #24]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fef3 	bl	8001bca <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	461a      	mov	r2, r3
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff33 	bl	8001c58 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d11a      	bne.n	8001e30 <LL_GPIO_Init+0xba>
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	60bb      	str	r3, [r7, #8]
  return result;
 8001e06:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b07      	cmp	r3, #7
 8001e10:	d807      	bhi.n	8001e22 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	461a      	mov	r2, r3
 8001e18:	69b9      	ldr	r1, [r7, #24]
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ff4b 	bl	8001cb6 <LL_GPIO_SetAFPin_0_7>
 8001e20:	e006      	b.n	8001e30 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	461a      	mov	r2, r3
 8001e28:	69b9      	ldr	r1, [r7, #24]
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ff72 	bl	8001d14 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	461a      	mov	r2, r3
 8001e36:	69b9      	ldr	r1, [r7, #24]
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f7ff fe97 	bl	8001b6c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3301      	adds	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1a7      	bne.n	8001da2 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3720      	adds	r7, #32
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <__errno>:
 8001e5c:	4b01      	ldr	r3, [pc, #4]	; (8001e64 <__errno+0x8>)
 8001e5e:	6818      	ldr	r0, [r3, #0]
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	2000000c 	.word	0x2000000c

08001e68 <__libc_init_array>:
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	4d0d      	ldr	r5, [pc, #52]	; (8001ea0 <__libc_init_array+0x38>)
 8001e6c:	4c0d      	ldr	r4, [pc, #52]	; (8001ea4 <__libc_init_array+0x3c>)
 8001e6e:	1b64      	subs	r4, r4, r5
 8001e70:	10a4      	asrs	r4, r4, #2
 8001e72:	2600      	movs	r6, #0
 8001e74:	42a6      	cmp	r6, r4
 8001e76:	d109      	bne.n	8001e8c <__libc_init_array+0x24>
 8001e78:	4d0b      	ldr	r5, [pc, #44]	; (8001ea8 <__libc_init_array+0x40>)
 8001e7a:	4c0c      	ldr	r4, [pc, #48]	; (8001eac <__libc_init_array+0x44>)
 8001e7c:	f000 ffae 	bl	8002ddc <_init>
 8001e80:	1b64      	subs	r4, r4, r5
 8001e82:	10a4      	asrs	r4, r4, #2
 8001e84:	2600      	movs	r6, #0
 8001e86:	42a6      	cmp	r6, r4
 8001e88:	d105      	bne.n	8001e96 <__libc_init_array+0x2e>
 8001e8a:	bd70      	pop	{r4, r5, r6, pc}
 8001e8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e90:	4798      	blx	r3
 8001e92:	3601      	adds	r6, #1
 8001e94:	e7ee      	b.n	8001e74 <__libc_init_array+0xc>
 8001e96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e9a:	4798      	blx	r3
 8001e9c:	3601      	adds	r6, #1
 8001e9e:	e7f2      	b.n	8001e86 <__libc_init_array+0x1e>
 8001ea0:	08002eb0 	.word	0x08002eb0
 8001ea4:	08002eb0 	.word	0x08002eb0
 8001ea8:	08002eb0 	.word	0x08002eb0
 8001eac:	08002eb4 	.word	0x08002eb4

08001eb0 <memset>:
 8001eb0:	4402      	add	r2, r0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d100      	bne.n	8001eba <memset+0xa>
 8001eb8:	4770      	bx	lr
 8001eba:	f803 1b01 	strb.w	r1, [r3], #1
 8001ebe:	e7f9      	b.n	8001eb4 <memset+0x4>

08001ec0 <iprintf>:
 8001ec0:	b40f      	push	{r0, r1, r2, r3}
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <iprintf+0x2c>)
 8001ec4:	b513      	push	{r0, r1, r4, lr}
 8001ec6:	681c      	ldr	r4, [r3, #0]
 8001ec8:	b124      	cbz	r4, 8001ed4 <iprintf+0x14>
 8001eca:	69a3      	ldr	r3, [r4, #24]
 8001ecc:	b913      	cbnz	r3, 8001ed4 <iprintf+0x14>
 8001ece:	4620      	mov	r0, r4
 8001ed0:	f000 f866 	bl	8001fa0 <__sinit>
 8001ed4:	ab05      	add	r3, sp, #20
 8001ed6:	9a04      	ldr	r2, [sp, #16]
 8001ed8:	68a1      	ldr	r1, [r4, #8]
 8001eda:	9301      	str	r3, [sp, #4]
 8001edc:	4620      	mov	r0, r4
 8001ede:	f000 f9bd 	bl	800225c <_vfiprintf_r>
 8001ee2:	b002      	add	sp, #8
 8001ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ee8:	b004      	add	sp, #16
 8001eea:	4770      	bx	lr
 8001eec:	2000000c 	.word	0x2000000c

08001ef0 <std>:
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	b510      	push	{r4, lr}
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8001efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001efe:	6083      	str	r3, [r0, #8]
 8001f00:	8181      	strh	r1, [r0, #12]
 8001f02:	6643      	str	r3, [r0, #100]	; 0x64
 8001f04:	81c2      	strh	r2, [r0, #14]
 8001f06:	6183      	str	r3, [r0, #24]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	2208      	movs	r2, #8
 8001f0c:	305c      	adds	r0, #92	; 0x5c
 8001f0e:	f7ff ffcf 	bl	8001eb0 <memset>
 8001f12:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <std+0x38>)
 8001f14:	6263      	str	r3, [r4, #36]	; 0x24
 8001f16:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <std+0x3c>)
 8001f18:	62a3      	str	r3, [r4, #40]	; 0x28
 8001f1a:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <std+0x40>)
 8001f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <std+0x44>)
 8001f20:	6224      	str	r4, [r4, #32]
 8001f22:	6323      	str	r3, [r4, #48]	; 0x30
 8001f24:	bd10      	pop	{r4, pc}
 8001f26:	bf00      	nop
 8001f28:	08002805 	.word	0x08002805
 8001f2c:	08002827 	.word	0x08002827
 8001f30:	0800285f 	.word	0x0800285f
 8001f34:	08002883 	.word	0x08002883

08001f38 <_cleanup_r>:
 8001f38:	4901      	ldr	r1, [pc, #4]	; (8001f40 <_cleanup_r+0x8>)
 8001f3a:	f000 b8af 	b.w	800209c <_fwalk_reent>
 8001f3e:	bf00      	nop
 8001f40:	08002b5d 	.word	0x08002b5d

08001f44 <__sfmoreglue>:
 8001f44:	b570      	push	{r4, r5, r6, lr}
 8001f46:	2268      	movs	r2, #104	; 0x68
 8001f48:	1e4d      	subs	r5, r1, #1
 8001f4a:	4355      	muls	r5, r2
 8001f4c:	460e      	mov	r6, r1
 8001f4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001f52:	f000 f8e5 	bl	8002120 <_malloc_r>
 8001f56:	4604      	mov	r4, r0
 8001f58:	b140      	cbz	r0, 8001f6c <__sfmoreglue+0x28>
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	e9c0 1600 	strd	r1, r6, [r0]
 8001f60:	300c      	adds	r0, #12
 8001f62:	60a0      	str	r0, [r4, #8]
 8001f64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f68:	f7ff ffa2 	bl	8001eb0 <memset>
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}

08001f70 <__sfp_lock_acquire>:
 8001f70:	4801      	ldr	r0, [pc, #4]	; (8001f78 <__sfp_lock_acquire+0x8>)
 8001f72:	f000 b8b3 	b.w	80020dc <__retarget_lock_acquire_recursive>
 8001f76:	bf00      	nop
 8001f78:	20000099 	.word	0x20000099

08001f7c <__sfp_lock_release>:
 8001f7c:	4801      	ldr	r0, [pc, #4]	; (8001f84 <__sfp_lock_release+0x8>)
 8001f7e:	f000 b8ae 	b.w	80020de <__retarget_lock_release_recursive>
 8001f82:	bf00      	nop
 8001f84:	20000099 	.word	0x20000099

08001f88 <__sinit_lock_acquire>:
 8001f88:	4801      	ldr	r0, [pc, #4]	; (8001f90 <__sinit_lock_acquire+0x8>)
 8001f8a:	f000 b8a7 	b.w	80020dc <__retarget_lock_acquire_recursive>
 8001f8e:	bf00      	nop
 8001f90:	2000009a 	.word	0x2000009a

08001f94 <__sinit_lock_release>:
 8001f94:	4801      	ldr	r0, [pc, #4]	; (8001f9c <__sinit_lock_release+0x8>)
 8001f96:	f000 b8a2 	b.w	80020de <__retarget_lock_release_recursive>
 8001f9a:	bf00      	nop
 8001f9c:	2000009a 	.word	0x2000009a

08001fa0 <__sinit>:
 8001fa0:	b510      	push	{r4, lr}
 8001fa2:	4604      	mov	r4, r0
 8001fa4:	f7ff fff0 	bl	8001f88 <__sinit_lock_acquire>
 8001fa8:	69a3      	ldr	r3, [r4, #24]
 8001faa:	b11b      	cbz	r3, 8001fb4 <__sinit+0x14>
 8001fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fb0:	f7ff bff0 	b.w	8001f94 <__sinit_lock_release>
 8001fb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001fb8:	6523      	str	r3, [r4, #80]	; 0x50
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <__sinit+0x68>)
 8001fbc:	4a13      	ldr	r2, [pc, #76]	; (800200c <__sinit+0x6c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8001fc2:	42a3      	cmp	r3, r4
 8001fc4:	bf04      	itt	eq
 8001fc6:	2301      	moveq	r3, #1
 8001fc8:	61a3      	streq	r3, [r4, #24]
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f000 f820 	bl	8002010 <__sfp>
 8001fd0:	6060      	str	r0, [r4, #4]
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f000 f81c 	bl	8002010 <__sfp>
 8001fd8:	60a0      	str	r0, [r4, #8]
 8001fda:	4620      	mov	r0, r4
 8001fdc:	f000 f818 	bl	8002010 <__sfp>
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60e0      	str	r0, [r4, #12]
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	6860      	ldr	r0, [r4, #4]
 8001fe8:	f7ff ff82 	bl	8001ef0 <std>
 8001fec:	68a0      	ldr	r0, [r4, #8]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2109      	movs	r1, #9
 8001ff2:	f7ff ff7d 	bl	8001ef0 <std>
 8001ff6:	68e0      	ldr	r0, [r4, #12]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	2112      	movs	r1, #18
 8001ffc:	f7ff ff78 	bl	8001ef0 <std>
 8002000:	2301      	movs	r3, #1
 8002002:	61a3      	str	r3, [r4, #24]
 8002004:	e7d2      	b.n	8001fac <__sinit+0xc>
 8002006:	bf00      	nop
 8002008:	08002e10 	.word	0x08002e10
 800200c:	08001f39 	.word	0x08001f39

08002010 <__sfp>:
 8002010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002012:	4607      	mov	r7, r0
 8002014:	f7ff ffac 	bl	8001f70 <__sfp_lock_acquire>
 8002018:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <__sfp+0x84>)
 800201a:	681e      	ldr	r6, [r3, #0]
 800201c:	69b3      	ldr	r3, [r6, #24]
 800201e:	b913      	cbnz	r3, 8002026 <__sfp+0x16>
 8002020:	4630      	mov	r0, r6
 8002022:	f7ff ffbd 	bl	8001fa0 <__sinit>
 8002026:	3648      	adds	r6, #72	; 0x48
 8002028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800202c:	3b01      	subs	r3, #1
 800202e:	d503      	bpl.n	8002038 <__sfp+0x28>
 8002030:	6833      	ldr	r3, [r6, #0]
 8002032:	b30b      	cbz	r3, 8002078 <__sfp+0x68>
 8002034:	6836      	ldr	r6, [r6, #0]
 8002036:	e7f7      	b.n	8002028 <__sfp+0x18>
 8002038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800203c:	b9d5      	cbnz	r5, 8002074 <__sfp+0x64>
 800203e:	4b16      	ldr	r3, [pc, #88]	; (8002098 <__sfp+0x88>)
 8002040:	60e3      	str	r3, [r4, #12]
 8002042:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002046:	6665      	str	r5, [r4, #100]	; 0x64
 8002048:	f000 f847 	bl	80020da <__retarget_lock_init_recursive>
 800204c:	f7ff ff96 	bl	8001f7c <__sfp_lock_release>
 8002050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002058:	6025      	str	r5, [r4, #0]
 800205a:	61a5      	str	r5, [r4, #24]
 800205c:	2208      	movs	r2, #8
 800205e:	4629      	mov	r1, r5
 8002060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002064:	f7ff ff24 	bl	8001eb0 <memset>
 8002068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800206c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002070:	4620      	mov	r0, r4
 8002072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002074:	3468      	adds	r4, #104	; 0x68
 8002076:	e7d9      	b.n	800202c <__sfp+0x1c>
 8002078:	2104      	movs	r1, #4
 800207a:	4638      	mov	r0, r7
 800207c:	f7ff ff62 	bl	8001f44 <__sfmoreglue>
 8002080:	4604      	mov	r4, r0
 8002082:	6030      	str	r0, [r6, #0]
 8002084:	2800      	cmp	r0, #0
 8002086:	d1d5      	bne.n	8002034 <__sfp+0x24>
 8002088:	f7ff ff78 	bl	8001f7c <__sfp_lock_release>
 800208c:	230c      	movs	r3, #12
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	e7ee      	b.n	8002070 <__sfp+0x60>
 8002092:	bf00      	nop
 8002094:	08002e10 	.word	0x08002e10
 8002098:	ffff0001 	.word	0xffff0001

0800209c <_fwalk_reent>:
 800209c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020a0:	4606      	mov	r6, r0
 80020a2:	4688      	mov	r8, r1
 80020a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80020a8:	2700      	movs	r7, #0
 80020aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80020ae:	f1b9 0901 	subs.w	r9, r9, #1
 80020b2:	d505      	bpl.n	80020c0 <_fwalk_reent+0x24>
 80020b4:	6824      	ldr	r4, [r4, #0]
 80020b6:	2c00      	cmp	r4, #0
 80020b8:	d1f7      	bne.n	80020aa <_fwalk_reent+0xe>
 80020ba:	4638      	mov	r0, r7
 80020bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020c0:	89ab      	ldrh	r3, [r5, #12]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d907      	bls.n	80020d6 <_fwalk_reent+0x3a>
 80020c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020ca:	3301      	adds	r3, #1
 80020cc:	d003      	beq.n	80020d6 <_fwalk_reent+0x3a>
 80020ce:	4629      	mov	r1, r5
 80020d0:	4630      	mov	r0, r6
 80020d2:	47c0      	blx	r8
 80020d4:	4307      	orrs	r7, r0
 80020d6:	3568      	adds	r5, #104	; 0x68
 80020d8:	e7e9      	b.n	80020ae <_fwalk_reent+0x12>

080020da <__retarget_lock_init_recursive>:
 80020da:	4770      	bx	lr

080020dc <__retarget_lock_acquire_recursive>:
 80020dc:	4770      	bx	lr

080020de <__retarget_lock_release_recursive>:
 80020de:	4770      	bx	lr

080020e0 <sbrk_aligned>:
 80020e0:	b570      	push	{r4, r5, r6, lr}
 80020e2:	4e0e      	ldr	r6, [pc, #56]	; (800211c <sbrk_aligned+0x3c>)
 80020e4:	460c      	mov	r4, r1
 80020e6:	6831      	ldr	r1, [r6, #0]
 80020e8:	4605      	mov	r5, r0
 80020ea:	b911      	cbnz	r1, 80020f2 <sbrk_aligned+0x12>
 80020ec:	f000 fb7a 	bl	80027e4 <_sbrk_r>
 80020f0:	6030      	str	r0, [r6, #0]
 80020f2:	4621      	mov	r1, r4
 80020f4:	4628      	mov	r0, r5
 80020f6:	f000 fb75 	bl	80027e4 <_sbrk_r>
 80020fa:	1c43      	adds	r3, r0, #1
 80020fc:	d00a      	beq.n	8002114 <sbrk_aligned+0x34>
 80020fe:	1cc4      	adds	r4, r0, #3
 8002100:	f024 0403 	bic.w	r4, r4, #3
 8002104:	42a0      	cmp	r0, r4
 8002106:	d007      	beq.n	8002118 <sbrk_aligned+0x38>
 8002108:	1a21      	subs	r1, r4, r0
 800210a:	4628      	mov	r0, r5
 800210c:	f000 fb6a 	bl	80027e4 <_sbrk_r>
 8002110:	3001      	adds	r0, #1
 8002112:	d101      	bne.n	8002118 <sbrk_aligned+0x38>
 8002114:	f04f 34ff 	mov.w	r4, #4294967295
 8002118:	4620      	mov	r0, r4
 800211a:	bd70      	pop	{r4, r5, r6, pc}
 800211c:	200000a0 	.word	0x200000a0

08002120 <_malloc_r>:
 8002120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002124:	1ccd      	adds	r5, r1, #3
 8002126:	f025 0503 	bic.w	r5, r5, #3
 800212a:	3508      	adds	r5, #8
 800212c:	2d0c      	cmp	r5, #12
 800212e:	bf38      	it	cc
 8002130:	250c      	movcc	r5, #12
 8002132:	2d00      	cmp	r5, #0
 8002134:	4607      	mov	r7, r0
 8002136:	db01      	blt.n	800213c <_malloc_r+0x1c>
 8002138:	42a9      	cmp	r1, r5
 800213a:	d905      	bls.n	8002148 <_malloc_r+0x28>
 800213c:	230c      	movs	r3, #12
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	2600      	movs	r6, #0
 8002142:	4630      	mov	r0, r6
 8002144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002148:	4e2e      	ldr	r6, [pc, #184]	; (8002204 <_malloc_r+0xe4>)
 800214a:	f000 fdbb 	bl	8002cc4 <__malloc_lock>
 800214e:	6833      	ldr	r3, [r6, #0]
 8002150:	461c      	mov	r4, r3
 8002152:	bb34      	cbnz	r4, 80021a2 <_malloc_r+0x82>
 8002154:	4629      	mov	r1, r5
 8002156:	4638      	mov	r0, r7
 8002158:	f7ff ffc2 	bl	80020e0 <sbrk_aligned>
 800215c:	1c43      	adds	r3, r0, #1
 800215e:	4604      	mov	r4, r0
 8002160:	d14d      	bne.n	80021fe <_malloc_r+0xde>
 8002162:	6834      	ldr	r4, [r6, #0]
 8002164:	4626      	mov	r6, r4
 8002166:	2e00      	cmp	r6, #0
 8002168:	d140      	bne.n	80021ec <_malloc_r+0xcc>
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	4631      	mov	r1, r6
 800216e:	4638      	mov	r0, r7
 8002170:	eb04 0803 	add.w	r8, r4, r3
 8002174:	f000 fb36 	bl	80027e4 <_sbrk_r>
 8002178:	4580      	cmp	r8, r0
 800217a:	d13a      	bne.n	80021f2 <_malloc_r+0xd2>
 800217c:	6821      	ldr	r1, [r4, #0]
 800217e:	3503      	adds	r5, #3
 8002180:	1a6d      	subs	r5, r5, r1
 8002182:	f025 0503 	bic.w	r5, r5, #3
 8002186:	3508      	adds	r5, #8
 8002188:	2d0c      	cmp	r5, #12
 800218a:	bf38      	it	cc
 800218c:	250c      	movcc	r5, #12
 800218e:	4629      	mov	r1, r5
 8002190:	4638      	mov	r0, r7
 8002192:	f7ff ffa5 	bl	80020e0 <sbrk_aligned>
 8002196:	3001      	adds	r0, #1
 8002198:	d02b      	beq.n	80021f2 <_malloc_r+0xd2>
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	442b      	add	r3, r5
 800219e:	6023      	str	r3, [r4, #0]
 80021a0:	e00e      	b.n	80021c0 <_malloc_r+0xa0>
 80021a2:	6822      	ldr	r2, [r4, #0]
 80021a4:	1b52      	subs	r2, r2, r5
 80021a6:	d41e      	bmi.n	80021e6 <_malloc_r+0xc6>
 80021a8:	2a0b      	cmp	r2, #11
 80021aa:	d916      	bls.n	80021da <_malloc_r+0xba>
 80021ac:	1961      	adds	r1, r4, r5
 80021ae:	42a3      	cmp	r3, r4
 80021b0:	6025      	str	r5, [r4, #0]
 80021b2:	bf18      	it	ne
 80021b4:	6059      	strne	r1, [r3, #4]
 80021b6:	6863      	ldr	r3, [r4, #4]
 80021b8:	bf08      	it	eq
 80021ba:	6031      	streq	r1, [r6, #0]
 80021bc:	5162      	str	r2, [r4, r5]
 80021be:	604b      	str	r3, [r1, #4]
 80021c0:	4638      	mov	r0, r7
 80021c2:	f104 060b 	add.w	r6, r4, #11
 80021c6:	f000 fd83 	bl	8002cd0 <__malloc_unlock>
 80021ca:	f026 0607 	bic.w	r6, r6, #7
 80021ce:	1d23      	adds	r3, r4, #4
 80021d0:	1af2      	subs	r2, r6, r3
 80021d2:	d0b6      	beq.n	8002142 <_malloc_r+0x22>
 80021d4:	1b9b      	subs	r3, r3, r6
 80021d6:	50a3      	str	r3, [r4, r2]
 80021d8:	e7b3      	b.n	8002142 <_malloc_r+0x22>
 80021da:	6862      	ldr	r2, [r4, #4]
 80021dc:	42a3      	cmp	r3, r4
 80021de:	bf0c      	ite	eq
 80021e0:	6032      	streq	r2, [r6, #0]
 80021e2:	605a      	strne	r2, [r3, #4]
 80021e4:	e7ec      	b.n	80021c0 <_malloc_r+0xa0>
 80021e6:	4623      	mov	r3, r4
 80021e8:	6864      	ldr	r4, [r4, #4]
 80021ea:	e7b2      	b.n	8002152 <_malloc_r+0x32>
 80021ec:	4634      	mov	r4, r6
 80021ee:	6876      	ldr	r6, [r6, #4]
 80021f0:	e7b9      	b.n	8002166 <_malloc_r+0x46>
 80021f2:	230c      	movs	r3, #12
 80021f4:	603b      	str	r3, [r7, #0]
 80021f6:	4638      	mov	r0, r7
 80021f8:	f000 fd6a 	bl	8002cd0 <__malloc_unlock>
 80021fc:	e7a1      	b.n	8002142 <_malloc_r+0x22>
 80021fe:	6025      	str	r5, [r4, #0]
 8002200:	e7de      	b.n	80021c0 <_malloc_r+0xa0>
 8002202:	bf00      	nop
 8002204:	2000009c 	.word	0x2000009c

08002208 <__sfputc_r>:
 8002208:	6893      	ldr	r3, [r2, #8]
 800220a:	3b01      	subs	r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	b410      	push	{r4}
 8002210:	6093      	str	r3, [r2, #8]
 8002212:	da08      	bge.n	8002226 <__sfputc_r+0x1e>
 8002214:	6994      	ldr	r4, [r2, #24]
 8002216:	42a3      	cmp	r3, r4
 8002218:	db01      	blt.n	800221e <__sfputc_r+0x16>
 800221a:	290a      	cmp	r1, #10
 800221c:	d103      	bne.n	8002226 <__sfputc_r+0x1e>
 800221e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002222:	f000 bb33 	b.w	800288c <__swbuf_r>
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	1c58      	adds	r0, r3, #1
 800222a:	6010      	str	r0, [r2, #0]
 800222c:	7019      	strb	r1, [r3, #0]
 800222e:	4608      	mov	r0, r1
 8002230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002234:	4770      	bx	lr

08002236 <__sfputs_r>:
 8002236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002238:	4606      	mov	r6, r0
 800223a:	460f      	mov	r7, r1
 800223c:	4614      	mov	r4, r2
 800223e:	18d5      	adds	r5, r2, r3
 8002240:	42ac      	cmp	r4, r5
 8002242:	d101      	bne.n	8002248 <__sfputs_r+0x12>
 8002244:	2000      	movs	r0, #0
 8002246:	e007      	b.n	8002258 <__sfputs_r+0x22>
 8002248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800224c:	463a      	mov	r2, r7
 800224e:	4630      	mov	r0, r6
 8002250:	f7ff ffda 	bl	8002208 <__sfputc_r>
 8002254:	1c43      	adds	r3, r0, #1
 8002256:	d1f3      	bne.n	8002240 <__sfputs_r+0xa>
 8002258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800225c <_vfiprintf_r>:
 800225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002260:	460d      	mov	r5, r1
 8002262:	b09d      	sub	sp, #116	; 0x74
 8002264:	4614      	mov	r4, r2
 8002266:	4698      	mov	r8, r3
 8002268:	4606      	mov	r6, r0
 800226a:	b118      	cbz	r0, 8002274 <_vfiprintf_r+0x18>
 800226c:	6983      	ldr	r3, [r0, #24]
 800226e:	b90b      	cbnz	r3, 8002274 <_vfiprintf_r+0x18>
 8002270:	f7ff fe96 	bl	8001fa0 <__sinit>
 8002274:	4b89      	ldr	r3, [pc, #548]	; (800249c <_vfiprintf_r+0x240>)
 8002276:	429d      	cmp	r5, r3
 8002278:	d11b      	bne.n	80022b2 <_vfiprintf_r+0x56>
 800227a:	6875      	ldr	r5, [r6, #4]
 800227c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800227e:	07d9      	lsls	r1, r3, #31
 8002280:	d405      	bmi.n	800228e <_vfiprintf_r+0x32>
 8002282:	89ab      	ldrh	r3, [r5, #12]
 8002284:	059a      	lsls	r2, r3, #22
 8002286:	d402      	bmi.n	800228e <_vfiprintf_r+0x32>
 8002288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800228a:	f7ff ff27 	bl	80020dc <__retarget_lock_acquire_recursive>
 800228e:	89ab      	ldrh	r3, [r5, #12]
 8002290:	071b      	lsls	r3, r3, #28
 8002292:	d501      	bpl.n	8002298 <_vfiprintf_r+0x3c>
 8002294:	692b      	ldr	r3, [r5, #16]
 8002296:	b9eb      	cbnz	r3, 80022d4 <_vfiprintf_r+0x78>
 8002298:	4629      	mov	r1, r5
 800229a:	4630      	mov	r0, r6
 800229c:	f000 fb5a 	bl	8002954 <__swsetup_r>
 80022a0:	b1c0      	cbz	r0, 80022d4 <_vfiprintf_r+0x78>
 80022a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80022a4:	07dc      	lsls	r4, r3, #31
 80022a6:	d50e      	bpl.n	80022c6 <_vfiprintf_r+0x6a>
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	b01d      	add	sp, #116	; 0x74
 80022ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022b2:	4b7b      	ldr	r3, [pc, #492]	; (80024a0 <_vfiprintf_r+0x244>)
 80022b4:	429d      	cmp	r5, r3
 80022b6:	d101      	bne.n	80022bc <_vfiprintf_r+0x60>
 80022b8:	68b5      	ldr	r5, [r6, #8]
 80022ba:	e7df      	b.n	800227c <_vfiprintf_r+0x20>
 80022bc:	4b79      	ldr	r3, [pc, #484]	; (80024a4 <_vfiprintf_r+0x248>)
 80022be:	429d      	cmp	r5, r3
 80022c0:	bf08      	it	eq
 80022c2:	68f5      	ldreq	r5, [r6, #12]
 80022c4:	e7da      	b.n	800227c <_vfiprintf_r+0x20>
 80022c6:	89ab      	ldrh	r3, [r5, #12]
 80022c8:	0598      	lsls	r0, r3, #22
 80022ca:	d4ed      	bmi.n	80022a8 <_vfiprintf_r+0x4c>
 80022cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022ce:	f7ff ff06 	bl	80020de <__retarget_lock_release_recursive>
 80022d2:	e7e9      	b.n	80022a8 <_vfiprintf_r+0x4c>
 80022d4:	2300      	movs	r3, #0
 80022d6:	9309      	str	r3, [sp, #36]	; 0x24
 80022d8:	2320      	movs	r3, #32
 80022da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022de:	f8cd 800c 	str.w	r8, [sp, #12]
 80022e2:	2330      	movs	r3, #48	; 0x30
 80022e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80024a8 <_vfiprintf_r+0x24c>
 80022e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80022ec:	f04f 0901 	mov.w	r9, #1
 80022f0:	4623      	mov	r3, r4
 80022f2:	469a      	mov	sl, r3
 80022f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022f8:	b10a      	cbz	r2, 80022fe <_vfiprintf_r+0xa2>
 80022fa:	2a25      	cmp	r2, #37	; 0x25
 80022fc:	d1f9      	bne.n	80022f2 <_vfiprintf_r+0x96>
 80022fe:	ebba 0b04 	subs.w	fp, sl, r4
 8002302:	d00b      	beq.n	800231c <_vfiprintf_r+0xc0>
 8002304:	465b      	mov	r3, fp
 8002306:	4622      	mov	r2, r4
 8002308:	4629      	mov	r1, r5
 800230a:	4630      	mov	r0, r6
 800230c:	f7ff ff93 	bl	8002236 <__sfputs_r>
 8002310:	3001      	adds	r0, #1
 8002312:	f000 80aa 	beq.w	800246a <_vfiprintf_r+0x20e>
 8002316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002318:	445a      	add	r2, fp
 800231a:	9209      	str	r2, [sp, #36]	; 0x24
 800231c:	f89a 3000 	ldrb.w	r3, [sl]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80a2 	beq.w	800246a <_vfiprintf_r+0x20e>
 8002326:	2300      	movs	r3, #0
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002330:	f10a 0a01 	add.w	sl, sl, #1
 8002334:	9304      	str	r3, [sp, #16]
 8002336:	9307      	str	r3, [sp, #28]
 8002338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800233c:	931a      	str	r3, [sp, #104]	; 0x68
 800233e:	4654      	mov	r4, sl
 8002340:	2205      	movs	r2, #5
 8002342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002346:	4858      	ldr	r0, [pc, #352]	; (80024a8 <_vfiprintf_r+0x24c>)
 8002348:	f7fd ff42 	bl	80001d0 <memchr>
 800234c:	9a04      	ldr	r2, [sp, #16]
 800234e:	b9d8      	cbnz	r0, 8002388 <_vfiprintf_r+0x12c>
 8002350:	06d1      	lsls	r1, r2, #27
 8002352:	bf44      	itt	mi
 8002354:	2320      	movmi	r3, #32
 8002356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800235a:	0713      	lsls	r3, r2, #28
 800235c:	bf44      	itt	mi
 800235e:	232b      	movmi	r3, #43	; 0x2b
 8002360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002364:	f89a 3000 	ldrb.w	r3, [sl]
 8002368:	2b2a      	cmp	r3, #42	; 0x2a
 800236a:	d015      	beq.n	8002398 <_vfiprintf_r+0x13c>
 800236c:	9a07      	ldr	r2, [sp, #28]
 800236e:	4654      	mov	r4, sl
 8002370:	2000      	movs	r0, #0
 8002372:	f04f 0c0a 	mov.w	ip, #10
 8002376:	4621      	mov	r1, r4
 8002378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800237c:	3b30      	subs	r3, #48	; 0x30
 800237e:	2b09      	cmp	r3, #9
 8002380:	d94e      	bls.n	8002420 <_vfiprintf_r+0x1c4>
 8002382:	b1b0      	cbz	r0, 80023b2 <_vfiprintf_r+0x156>
 8002384:	9207      	str	r2, [sp, #28]
 8002386:	e014      	b.n	80023b2 <_vfiprintf_r+0x156>
 8002388:	eba0 0308 	sub.w	r3, r0, r8
 800238c:	fa09 f303 	lsl.w	r3, r9, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	9304      	str	r3, [sp, #16]
 8002394:	46a2      	mov	sl, r4
 8002396:	e7d2      	b.n	800233e <_vfiprintf_r+0xe2>
 8002398:	9b03      	ldr	r3, [sp, #12]
 800239a:	1d19      	adds	r1, r3, #4
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	9103      	str	r1, [sp, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bfbb      	ittet	lt
 80023a4:	425b      	neglt	r3, r3
 80023a6:	f042 0202 	orrlt.w	r2, r2, #2
 80023aa:	9307      	strge	r3, [sp, #28]
 80023ac:	9307      	strlt	r3, [sp, #28]
 80023ae:	bfb8      	it	lt
 80023b0:	9204      	strlt	r2, [sp, #16]
 80023b2:	7823      	ldrb	r3, [r4, #0]
 80023b4:	2b2e      	cmp	r3, #46	; 0x2e
 80023b6:	d10c      	bne.n	80023d2 <_vfiprintf_r+0x176>
 80023b8:	7863      	ldrb	r3, [r4, #1]
 80023ba:	2b2a      	cmp	r3, #42	; 0x2a
 80023bc:	d135      	bne.n	800242a <_vfiprintf_r+0x1ce>
 80023be:	9b03      	ldr	r3, [sp, #12]
 80023c0:	1d1a      	adds	r2, r3, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	9203      	str	r2, [sp, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bfb8      	it	lt
 80023ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80023ce:	3402      	adds	r4, #2
 80023d0:	9305      	str	r3, [sp, #20]
 80023d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80024b8 <_vfiprintf_r+0x25c>
 80023d6:	7821      	ldrb	r1, [r4, #0]
 80023d8:	2203      	movs	r2, #3
 80023da:	4650      	mov	r0, sl
 80023dc:	f7fd fef8 	bl	80001d0 <memchr>
 80023e0:	b140      	cbz	r0, 80023f4 <_vfiprintf_r+0x198>
 80023e2:	2340      	movs	r3, #64	; 0x40
 80023e4:	eba0 000a 	sub.w	r0, r0, sl
 80023e8:	fa03 f000 	lsl.w	r0, r3, r0
 80023ec:	9b04      	ldr	r3, [sp, #16]
 80023ee:	4303      	orrs	r3, r0
 80023f0:	3401      	adds	r4, #1
 80023f2:	9304      	str	r3, [sp, #16]
 80023f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023f8:	482c      	ldr	r0, [pc, #176]	; (80024ac <_vfiprintf_r+0x250>)
 80023fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80023fe:	2206      	movs	r2, #6
 8002400:	f7fd fee6 	bl	80001d0 <memchr>
 8002404:	2800      	cmp	r0, #0
 8002406:	d03f      	beq.n	8002488 <_vfiprintf_r+0x22c>
 8002408:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <_vfiprintf_r+0x254>)
 800240a:	bb1b      	cbnz	r3, 8002454 <_vfiprintf_r+0x1f8>
 800240c:	9b03      	ldr	r3, [sp, #12]
 800240e:	3307      	adds	r3, #7
 8002410:	f023 0307 	bic.w	r3, r3, #7
 8002414:	3308      	adds	r3, #8
 8002416:	9303      	str	r3, [sp, #12]
 8002418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800241a:	443b      	add	r3, r7
 800241c:	9309      	str	r3, [sp, #36]	; 0x24
 800241e:	e767      	b.n	80022f0 <_vfiprintf_r+0x94>
 8002420:	fb0c 3202 	mla	r2, ip, r2, r3
 8002424:	460c      	mov	r4, r1
 8002426:	2001      	movs	r0, #1
 8002428:	e7a5      	b.n	8002376 <_vfiprintf_r+0x11a>
 800242a:	2300      	movs	r3, #0
 800242c:	3401      	adds	r4, #1
 800242e:	9305      	str	r3, [sp, #20]
 8002430:	4619      	mov	r1, r3
 8002432:	f04f 0c0a 	mov.w	ip, #10
 8002436:	4620      	mov	r0, r4
 8002438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800243c:	3a30      	subs	r2, #48	; 0x30
 800243e:	2a09      	cmp	r2, #9
 8002440:	d903      	bls.n	800244a <_vfiprintf_r+0x1ee>
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0c5      	beq.n	80023d2 <_vfiprintf_r+0x176>
 8002446:	9105      	str	r1, [sp, #20]
 8002448:	e7c3      	b.n	80023d2 <_vfiprintf_r+0x176>
 800244a:	fb0c 2101 	mla	r1, ip, r1, r2
 800244e:	4604      	mov	r4, r0
 8002450:	2301      	movs	r3, #1
 8002452:	e7f0      	b.n	8002436 <_vfiprintf_r+0x1da>
 8002454:	ab03      	add	r3, sp, #12
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	462a      	mov	r2, r5
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <_vfiprintf_r+0x258>)
 800245c:	a904      	add	r1, sp, #16
 800245e:	4630      	mov	r0, r6
 8002460:	f3af 8000 	nop.w
 8002464:	4607      	mov	r7, r0
 8002466:	1c78      	adds	r0, r7, #1
 8002468:	d1d6      	bne.n	8002418 <_vfiprintf_r+0x1bc>
 800246a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800246c:	07d9      	lsls	r1, r3, #31
 800246e:	d405      	bmi.n	800247c <_vfiprintf_r+0x220>
 8002470:	89ab      	ldrh	r3, [r5, #12]
 8002472:	059a      	lsls	r2, r3, #22
 8002474:	d402      	bmi.n	800247c <_vfiprintf_r+0x220>
 8002476:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002478:	f7ff fe31 	bl	80020de <__retarget_lock_release_recursive>
 800247c:	89ab      	ldrh	r3, [r5, #12]
 800247e:	065b      	lsls	r3, r3, #25
 8002480:	f53f af12 	bmi.w	80022a8 <_vfiprintf_r+0x4c>
 8002484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002486:	e711      	b.n	80022ac <_vfiprintf_r+0x50>
 8002488:	ab03      	add	r3, sp, #12
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	462a      	mov	r2, r5
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <_vfiprintf_r+0x258>)
 8002490:	a904      	add	r1, sp, #16
 8002492:	4630      	mov	r0, r6
 8002494:	f000 f880 	bl	8002598 <_printf_i>
 8002498:	e7e4      	b.n	8002464 <_vfiprintf_r+0x208>
 800249a:	bf00      	nop
 800249c:	08002e34 	.word	0x08002e34
 80024a0:	08002e54 	.word	0x08002e54
 80024a4:	08002e14 	.word	0x08002e14
 80024a8:	08002e74 	.word	0x08002e74
 80024ac:	08002e7e 	.word	0x08002e7e
 80024b0:	00000000 	.word	0x00000000
 80024b4:	08002237 	.word	0x08002237
 80024b8:	08002e7a 	.word	0x08002e7a

080024bc <_printf_common>:
 80024bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024c0:	4616      	mov	r6, r2
 80024c2:	4699      	mov	r9, r3
 80024c4:	688a      	ldr	r2, [r1, #8]
 80024c6:	690b      	ldr	r3, [r1, #16]
 80024c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80024cc:	4293      	cmp	r3, r2
 80024ce:	bfb8      	it	lt
 80024d0:	4613      	movlt	r3, r2
 80024d2:	6033      	str	r3, [r6, #0]
 80024d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80024d8:	4607      	mov	r7, r0
 80024da:	460c      	mov	r4, r1
 80024dc:	b10a      	cbz	r2, 80024e2 <_printf_common+0x26>
 80024de:	3301      	adds	r3, #1
 80024e0:	6033      	str	r3, [r6, #0]
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	0699      	lsls	r1, r3, #26
 80024e6:	bf42      	ittt	mi
 80024e8:	6833      	ldrmi	r3, [r6, #0]
 80024ea:	3302      	addmi	r3, #2
 80024ec:	6033      	strmi	r3, [r6, #0]
 80024ee:	6825      	ldr	r5, [r4, #0]
 80024f0:	f015 0506 	ands.w	r5, r5, #6
 80024f4:	d106      	bne.n	8002504 <_printf_common+0x48>
 80024f6:	f104 0a19 	add.w	sl, r4, #25
 80024fa:	68e3      	ldr	r3, [r4, #12]
 80024fc:	6832      	ldr	r2, [r6, #0]
 80024fe:	1a9b      	subs	r3, r3, r2
 8002500:	42ab      	cmp	r3, r5
 8002502:	dc26      	bgt.n	8002552 <_printf_common+0x96>
 8002504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002508:	1e13      	subs	r3, r2, #0
 800250a:	6822      	ldr	r2, [r4, #0]
 800250c:	bf18      	it	ne
 800250e:	2301      	movne	r3, #1
 8002510:	0692      	lsls	r2, r2, #26
 8002512:	d42b      	bmi.n	800256c <_printf_common+0xb0>
 8002514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002518:	4649      	mov	r1, r9
 800251a:	4638      	mov	r0, r7
 800251c:	47c0      	blx	r8
 800251e:	3001      	adds	r0, #1
 8002520:	d01e      	beq.n	8002560 <_printf_common+0xa4>
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	68e5      	ldr	r5, [r4, #12]
 8002526:	6832      	ldr	r2, [r6, #0]
 8002528:	f003 0306 	and.w	r3, r3, #6
 800252c:	2b04      	cmp	r3, #4
 800252e:	bf08      	it	eq
 8002530:	1aad      	subeq	r5, r5, r2
 8002532:	68a3      	ldr	r3, [r4, #8]
 8002534:	6922      	ldr	r2, [r4, #16]
 8002536:	bf0c      	ite	eq
 8002538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800253c:	2500      	movne	r5, #0
 800253e:	4293      	cmp	r3, r2
 8002540:	bfc4      	itt	gt
 8002542:	1a9b      	subgt	r3, r3, r2
 8002544:	18ed      	addgt	r5, r5, r3
 8002546:	2600      	movs	r6, #0
 8002548:	341a      	adds	r4, #26
 800254a:	42b5      	cmp	r5, r6
 800254c:	d11a      	bne.n	8002584 <_printf_common+0xc8>
 800254e:	2000      	movs	r0, #0
 8002550:	e008      	b.n	8002564 <_printf_common+0xa8>
 8002552:	2301      	movs	r3, #1
 8002554:	4652      	mov	r2, sl
 8002556:	4649      	mov	r1, r9
 8002558:	4638      	mov	r0, r7
 800255a:	47c0      	blx	r8
 800255c:	3001      	adds	r0, #1
 800255e:	d103      	bne.n	8002568 <_printf_common+0xac>
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002568:	3501      	adds	r5, #1
 800256a:	e7c6      	b.n	80024fa <_printf_common+0x3e>
 800256c:	18e1      	adds	r1, r4, r3
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	2030      	movs	r0, #48	; 0x30
 8002572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002576:	4422      	add	r2, r4
 8002578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800257c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002580:	3302      	adds	r3, #2
 8002582:	e7c7      	b.n	8002514 <_printf_common+0x58>
 8002584:	2301      	movs	r3, #1
 8002586:	4622      	mov	r2, r4
 8002588:	4649      	mov	r1, r9
 800258a:	4638      	mov	r0, r7
 800258c:	47c0      	blx	r8
 800258e:	3001      	adds	r0, #1
 8002590:	d0e6      	beq.n	8002560 <_printf_common+0xa4>
 8002592:	3601      	adds	r6, #1
 8002594:	e7d9      	b.n	800254a <_printf_common+0x8e>
	...

08002598 <_printf_i>:
 8002598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800259c:	7e0f      	ldrb	r7, [r1, #24]
 800259e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80025a0:	2f78      	cmp	r7, #120	; 0x78
 80025a2:	4691      	mov	r9, r2
 80025a4:	4680      	mov	r8, r0
 80025a6:	460c      	mov	r4, r1
 80025a8:	469a      	mov	sl, r3
 80025aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80025ae:	d807      	bhi.n	80025c0 <_printf_i+0x28>
 80025b0:	2f62      	cmp	r7, #98	; 0x62
 80025b2:	d80a      	bhi.n	80025ca <_printf_i+0x32>
 80025b4:	2f00      	cmp	r7, #0
 80025b6:	f000 80d8 	beq.w	800276a <_printf_i+0x1d2>
 80025ba:	2f58      	cmp	r7, #88	; 0x58
 80025bc:	f000 80a3 	beq.w	8002706 <_printf_i+0x16e>
 80025c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80025c8:	e03a      	b.n	8002640 <_printf_i+0xa8>
 80025ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80025ce:	2b15      	cmp	r3, #21
 80025d0:	d8f6      	bhi.n	80025c0 <_printf_i+0x28>
 80025d2:	a101      	add	r1, pc, #4	; (adr r1, 80025d8 <_printf_i+0x40>)
 80025d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025d8:	08002631 	.word	0x08002631
 80025dc:	08002645 	.word	0x08002645
 80025e0:	080025c1 	.word	0x080025c1
 80025e4:	080025c1 	.word	0x080025c1
 80025e8:	080025c1 	.word	0x080025c1
 80025ec:	080025c1 	.word	0x080025c1
 80025f0:	08002645 	.word	0x08002645
 80025f4:	080025c1 	.word	0x080025c1
 80025f8:	080025c1 	.word	0x080025c1
 80025fc:	080025c1 	.word	0x080025c1
 8002600:	080025c1 	.word	0x080025c1
 8002604:	08002751 	.word	0x08002751
 8002608:	08002675 	.word	0x08002675
 800260c:	08002733 	.word	0x08002733
 8002610:	080025c1 	.word	0x080025c1
 8002614:	080025c1 	.word	0x080025c1
 8002618:	08002773 	.word	0x08002773
 800261c:	080025c1 	.word	0x080025c1
 8002620:	08002675 	.word	0x08002675
 8002624:	080025c1 	.word	0x080025c1
 8002628:	080025c1 	.word	0x080025c1
 800262c:	0800273b 	.word	0x0800273b
 8002630:	682b      	ldr	r3, [r5, #0]
 8002632:	1d1a      	adds	r2, r3, #4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	602a      	str	r2, [r5, #0]
 8002638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800263c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002640:	2301      	movs	r3, #1
 8002642:	e0a3      	b.n	800278c <_printf_i+0x1f4>
 8002644:	6820      	ldr	r0, [r4, #0]
 8002646:	6829      	ldr	r1, [r5, #0]
 8002648:	0606      	lsls	r6, r0, #24
 800264a:	f101 0304 	add.w	r3, r1, #4
 800264e:	d50a      	bpl.n	8002666 <_printf_i+0xce>
 8002650:	680e      	ldr	r6, [r1, #0]
 8002652:	602b      	str	r3, [r5, #0]
 8002654:	2e00      	cmp	r6, #0
 8002656:	da03      	bge.n	8002660 <_printf_i+0xc8>
 8002658:	232d      	movs	r3, #45	; 0x2d
 800265a:	4276      	negs	r6, r6
 800265c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002660:	485e      	ldr	r0, [pc, #376]	; (80027dc <_printf_i+0x244>)
 8002662:	230a      	movs	r3, #10
 8002664:	e019      	b.n	800269a <_printf_i+0x102>
 8002666:	680e      	ldr	r6, [r1, #0]
 8002668:	602b      	str	r3, [r5, #0]
 800266a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800266e:	bf18      	it	ne
 8002670:	b236      	sxthne	r6, r6
 8002672:	e7ef      	b.n	8002654 <_printf_i+0xbc>
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	6820      	ldr	r0, [r4, #0]
 8002678:	1d19      	adds	r1, r3, #4
 800267a:	6029      	str	r1, [r5, #0]
 800267c:	0601      	lsls	r1, r0, #24
 800267e:	d501      	bpl.n	8002684 <_printf_i+0xec>
 8002680:	681e      	ldr	r6, [r3, #0]
 8002682:	e002      	b.n	800268a <_printf_i+0xf2>
 8002684:	0646      	lsls	r6, r0, #25
 8002686:	d5fb      	bpl.n	8002680 <_printf_i+0xe8>
 8002688:	881e      	ldrh	r6, [r3, #0]
 800268a:	4854      	ldr	r0, [pc, #336]	; (80027dc <_printf_i+0x244>)
 800268c:	2f6f      	cmp	r7, #111	; 0x6f
 800268e:	bf0c      	ite	eq
 8002690:	2308      	moveq	r3, #8
 8002692:	230a      	movne	r3, #10
 8002694:	2100      	movs	r1, #0
 8002696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800269a:	6865      	ldr	r5, [r4, #4]
 800269c:	60a5      	str	r5, [r4, #8]
 800269e:	2d00      	cmp	r5, #0
 80026a0:	bfa2      	ittt	ge
 80026a2:	6821      	ldrge	r1, [r4, #0]
 80026a4:	f021 0104 	bicge.w	r1, r1, #4
 80026a8:	6021      	strge	r1, [r4, #0]
 80026aa:	b90e      	cbnz	r6, 80026b0 <_printf_i+0x118>
 80026ac:	2d00      	cmp	r5, #0
 80026ae:	d04d      	beq.n	800274c <_printf_i+0x1b4>
 80026b0:	4615      	mov	r5, r2
 80026b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80026b6:	fb03 6711 	mls	r7, r3, r1, r6
 80026ba:	5dc7      	ldrb	r7, [r0, r7]
 80026bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80026c0:	4637      	mov	r7, r6
 80026c2:	42bb      	cmp	r3, r7
 80026c4:	460e      	mov	r6, r1
 80026c6:	d9f4      	bls.n	80026b2 <_printf_i+0x11a>
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d10b      	bne.n	80026e4 <_printf_i+0x14c>
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	07de      	lsls	r6, r3, #31
 80026d0:	d508      	bpl.n	80026e4 <_printf_i+0x14c>
 80026d2:	6923      	ldr	r3, [r4, #16]
 80026d4:	6861      	ldr	r1, [r4, #4]
 80026d6:	4299      	cmp	r1, r3
 80026d8:	bfde      	ittt	le
 80026da:	2330      	movle	r3, #48	; 0x30
 80026dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80026e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80026e4:	1b52      	subs	r2, r2, r5
 80026e6:	6122      	str	r2, [r4, #16]
 80026e8:	f8cd a000 	str.w	sl, [sp]
 80026ec:	464b      	mov	r3, r9
 80026ee:	aa03      	add	r2, sp, #12
 80026f0:	4621      	mov	r1, r4
 80026f2:	4640      	mov	r0, r8
 80026f4:	f7ff fee2 	bl	80024bc <_printf_common>
 80026f8:	3001      	adds	r0, #1
 80026fa:	d14c      	bne.n	8002796 <_printf_i+0x1fe>
 80026fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002700:	b004      	add	sp, #16
 8002702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002706:	4835      	ldr	r0, [pc, #212]	; (80027dc <_printf_i+0x244>)
 8002708:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800270c:	6829      	ldr	r1, [r5, #0]
 800270e:	6823      	ldr	r3, [r4, #0]
 8002710:	f851 6b04 	ldr.w	r6, [r1], #4
 8002714:	6029      	str	r1, [r5, #0]
 8002716:	061d      	lsls	r5, r3, #24
 8002718:	d514      	bpl.n	8002744 <_printf_i+0x1ac>
 800271a:	07df      	lsls	r7, r3, #31
 800271c:	bf44      	itt	mi
 800271e:	f043 0320 	orrmi.w	r3, r3, #32
 8002722:	6023      	strmi	r3, [r4, #0]
 8002724:	b91e      	cbnz	r6, 800272e <_printf_i+0x196>
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	f023 0320 	bic.w	r3, r3, #32
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	2310      	movs	r3, #16
 8002730:	e7b0      	b.n	8002694 <_printf_i+0xfc>
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	f043 0320 	orr.w	r3, r3, #32
 8002738:	6023      	str	r3, [r4, #0]
 800273a:	2378      	movs	r3, #120	; 0x78
 800273c:	4828      	ldr	r0, [pc, #160]	; (80027e0 <_printf_i+0x248>)
 800273e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002742:	e7e3      	b.n	800270c <_printf_i+0x174>
 8002744:	0659      	lsls	r1, r3, #25
 8002746:	bf48      	it	mi
 8002748:	b2b6      	uxthmi	r6, r6
 800274a:	e7e6      	b.n	800271a <_printf_i+0x182>
 800274c:	4615      	mov	r5, r2
 800274e:	e7bb      	b.n	80026c8 <_printf_i+0x130>
 8002750:	682b      	ldr	r3, [r5, #0]
 8002752:	6826      	ldr	r6, [r4, #0]
 8002754:	6961      	ldr	r1, [r4, #20]
 8002756:	1d18      	adds	r0, r3, #4
 8002758:	6028      	str	r0, [r5, #0]
 800275a:	0635      	lsls	r5, r6, #24
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	d501      	bpl.n	8002764 <_printf_i+0x1cc>
 8002760:	6019      	str	r1, [r3, #0]
 8002762:	e002      	b.n	800276a <_printf_i+0x1d2>
 8002764:	0670      	lsls	r0, r6, #25
 8002766:	d5fb      	bpl.n	8002760 <_printf_i+0x1c8>
 8002768:	8019      	strh	r1, [r3, #0]
 800276a:	2300      	movs	r3, #0
 800276c:	6123      	str	r3, [r4, #16]
 800276e:	4615      	mov	r5, r2
 8002770:	e7ba      	b.n	80026e8 <_printf_i+0x150>
 8002772:	682b      	ldr	r3, [r5, #0]
 8002774:	1d1a      	adds	r2, r3, #4
 8002776:	602a      	str	r2, [r5, #0]
 8002778:	681d      	ldr	r5, [r3, #0]
 800277a:	6862      	ldr	r2, [r4, #4]
 800277c:	2100      	movs	r1, #0
 800277e:	4628      	mov	r0, r5
 8002780:	f7fd fd26 	bl	80001d0 <memchr>
 8002784:	b108      	cbz	r0, 800278a <_printf_i+0x1f2>
 8002786:	1b40      	subs	r0, r0, r5
 8002788:	6060      	str	r0, [r4, #4]
 800278a:	6863      	ldr	r3, [r4, #4]
 800278c:	6123      	str	r3, [r4, #16]
 800278e:	2300      	movs	r3, #0
 8002790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002794:	e7a8      	b.n	80026e8 <_printf_i+0x150>
 8002796:	6923      	ldr	r3, [r4, #16]
 8002798:	462a      	mov	r2, r5
 800279a:	4649      	mov	r1, r9
 800279c:	4640      	mov	r0, r8
 800279e:	47d0      	blx	sl
 80027a0:	3001      	adds	r0, #1
 80027a2:	d0ab      	beq.n	80026fc <_printf_i+0x164>
 80027a4:	6823      	ldr	r3, [r4, #0]
 80027a6:	079b      	lsls	r3, r3, #30
 80027a8:	d413      	bmi.n	80027d2 <_printf_i+0x23a>
 80027aa:	68e0      	ldr	r0, [r4, #12]
 80027ac:	9b03      	ldr	r3, [sp, #12]
 80027ae:	4298      	cmp	r0, r3
 80027b0:	bfb8      	it	lt
 80027b2:	4618      	movlt	r0, r3
 80027b4:	e7a4      	b.n	8002700 <_printf_i+0x168>
 80027b6:	2301      	movs	r3, #1
 80027b8:	4632      	mov	r2, r6
 80027ba:	4649      	mov	r1, r9
 80027bc:	4640      	mov	r0, r8
 80027be:	47d0      	blx	sl
 80027c0:	3001      	adds	r0, #1
 80027c2:	d09b      	beq.n	80026fc <_printf_i+0x164>
 80027c4:	3501      	adds	r5, #1
 80027c6:	68e3      	ldr	r3, [r4, #12]
 80027c8:	9903      	ldr	r1, [sp, #12]
 80027ca:	1a5b      	subs	r3, r3, r1
 80027cc:	42ab      	cmp	r3, r5
 80027ce:	dcf2      	bgt.n	80027b6 <_printf_i+0x21e>
 80027d0:	e7eb      	b.n	80027aa <_printf_i+0x212>
 80027d2:	2500      	movs	r5, #0
 80027d4:	f104 0619 	add.w	r6, r4, #25
 80027d8:	e7f5      	b.n	80027c6 <_printf_i+0x22e>
 80027da:	bf00      	nop
 80027dc:	08002e85 	.word	0x08002e85
 80027e0:	08002e96 	.word	0x08002e96

080027e4 <_sbrk_r>:
 80027e4:	b538      	push	{r3, r4, r5, lr}
 80027e6:	4d06      	ldr	r5, [pc, #24]	; (8002800 <_sbrk_r+0x1c>)
 80027e8:	2300      	movs	r3, #0
 80027ea:	4604      	mov	r4, r0
 80027ec:	4608      	mov	r0, r1
 80027ee:	602b      	str	r3, [r5, #0]
 80027f0:	f7fe fa8e 	bl	8000d10 <_sbrk>
 80027f4:	1c43      	adds	r3, r0, #1
 80027f6:	d102      	bne.n	80027fe <_sbrk_r+0x1a>
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	b103      	cbz	r3, 80027fe <_sbrk_r+0x1a>
 80027fc:	6023      	str	r3, [r4, #0]
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
 8002800:	200000a4 	.word	0x200000a4

08002804 <__sread>:
 8002804:	b510      	push	{r4, lr}
 8002806:	460c      	mov	r4, r1
 8002808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800280c:	f000 fab2 	bl	8002d74 <_read_r>
 8002810:	2800      	cmp	r0, #0
 8002812:	bfab      	itete	ge
 8002814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002816:	89a3      	ldrhlt	r3, [r4, #12]
 8002818:	181b      	addge	r3, r3, r0
 800281a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800281e:	bfac      	ite	ge
 8002820:	6563      	strge	r3, [r4, #84]	; 0x54
 8002822:	81a3      	strhlt	r3, [r4, #12]
 8002824:	bd10      	pop	{r4, pc}

08002826 <__swrite>:
 8002826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800282a:	461f      	mov	r7, r3
 800282c:	898b      	ldrh	r3, [r1, #12]
 800282e:	05db      	lsls	r3, r3, #23
 8002830:	4605      	mov	r5, r0
 8002832:	460c      	mov	r4, r1
 8002834:	4616      	mov	r6, r2
 8002836:	d505      	bpl.n	8002844 <__swrite+0x1e>
 8002838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800283c:	2302      	movs	r3, #2
 800283e:	2200      	movs	r2, #0
 8002840:	f000 f9c8 	bl	8002bd4 <_lseek_r>
 8002844:	89a3      	ldrh	r3, [r4, #12]
 8002846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800284a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800284e:	81a3      	strh	r3, [r4, #12]
 8002850:	4632      	mov	r2, r6
 8002852:	463b      	mov	r3, r7
 8002854:	4628      	mov	r0, r5
 8002856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800285a:	f000 b869 	b.w	8002930 <_write_r>

0800285e <__sseek>:
 800285e:	b510      	push	{r4, lr}
 8002860:	460c      	mov	r4, r1
 8002862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002866:	f000 f9b5 	bl	8002bd4 <_lseek_r>
 800286a:	1c43      	adds	r3, r0, #1
 800286c:	89a3      	ldrh	r3, [r4, #12]
 800286e:	bf15      	itete	ne
 8002870:	6560      	strne	r0, [r4, #84]	; 0x54
 8002872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800287a:	81a3      	strheq	r3, [r4, #12]
 800287c:	bf18      	it	ne
 800287e:	81a3      	strhne	r3, [r4, #12]
 8002880:	bd10      	pop	{r4, pc}

08002882 <__sclose>:
 8002882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002886:	f000 b8d3 	b.w	8002a30 <_close_r>
	...

0800288c <__swbuf_r>:
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	460e      	mov	r6, r1
 8002890:	4614      	mov	r4, r2
 8002892:	4605      	mov	r5, r0
 8002894:	b118      	cbz	r0, 800289e <__swbuf_r+0x12>
 8002896:	6983      	ldr	r3, [r0, #24]
 8002898:	b90b      	cbnz	r3, 800289e <__swbuf_r+0x12>
 800289a:	f7ff fb81 	bl	8001fa0 <__sinit>
 800289e:	4b21      	ldr	r3, [pc, #132]	; (8002924 <__swbuf_r+0x98>)
 80028a0:	429c      	cmp	r4, r3
 80028a2:	d12b      	bne.n	80028fc <__swbuf_r+0x70>
 80028a4:	686c      	ldr	r4, [r5, #4]
 80028a6:	69a3      	ldr	r3, [r4, #24]
 80028a8:	60a3      	str	r3, [r4, #8]
 80028aa:	89a3      	ldrh	r3, [r4, #12]
 80028ac:	071a      	lsls	r2, r3, #28
 80028ae:	d52f      	bpl.n	8002910 <__swbuf_r+0x84>
 80028b0:	6923      	ldr	r3, [r4, #16]
 80028b2:	b36b      	cbz	r3, 8002910 <__swbuf_r+0x84>
 80028b4:	6923      	ldr	r3, [r4, #16]
 80028b6:	6820      	ldr	r0, [r4, #0]
 80028b8:	1ac0      	subs	r0, r0, r3
 80028ba:	6963      	ldr	r3, [r4, #20]
 80028bc:	b2f6      	uxtb	r6, r6
 80028be:	4283      	cmp	r3, r0
 80028c0:	4637      	mov	r7, r6
 80028c2:	dc04      	bgt.n	80028ce <__swbuf_r+0x42>
 80028c4:	4621      	mov	r1, r4
 80028c6:	4628      	mov	r0, r5
 80028c8:	f000 f948 	bl	8002b5c <_fflush_r>
 80028cc:	bb30      	cbnz	r0, 800291c <__swbuf_r+0x90>
 80028ce:	68a3      	ldr	r3, [r4, #8]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	60a3      	str	r3, [r4, #8]
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	6022      	str	r2, [r4, #0]
 80028da:	701e      	strb	r6, [r3, #0]
 80028dc:	6963      	ldr	r3, [r4, #20]
 80028de:	3001      	adds	r0, #1
 80028e0:	4283      	cmp	r3, r0
 80028e2:	d004      	beq.n	80028ee <__swbuf_r+0x62>
 80028e4:	89a3      	ldrh	r3, [r4, #12]
 80028e6:	07db      	lsls	r3, r3, #31
 80028e8:	d506      	bpl.n	80028f8 <__swbuf_r+0x6c>
 80028ea:	2e0a      	cmp	r6, #10
 80028ec:	d104      	bne.n	80028f8 <__swbuf_r+0x6c>
 80028ee:	4621      	mov	r1, r4
 80028f0:	4628      	mov	r0, r5
 80028f2:	f000 f933 	bl	8002b5c <_fflush_r>
 80028f6:	b988      	cbnz	r0, 800291c <__swbuf_r+0x90>
 80028f8:	4638      	mov	r0, r7
 80028fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <__swbuf_r+0x9c>)
 80028fe:	429c      	cmp	r4, r3
 8002900:	d101      	bne.n	8002906 <__swbuf_r+0x7a>
 8002902:	68ac      	ldr	r4, [r5, #8]
 8002904:	e7cf      	b.n	80028a6 <__swbuf_r+0x1a>
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <__swbuf_r+0xa0>)
 8002908:	429c      	cmp	r4, r3
 800290a:	bf08      	it	eq
 800290c:	68ec      	ldreq	r4, [r5, #12]
 800290e:	e7ca      	b.n	80028a6 <__swbuf_r+0x1a>
 8002910:	4621      	mov	r1, r4
 8002912:	4628      	mov	r0, r5
 8002914:	f000 f81e 	bl	8002954 <__swsetup_r>
 8002918:	2800      	cmp	r0, #0
 800291a:	d0cb      	beq.n	80028b4 <__swbuf_r+0x28>
 800291c:	f04f 37ff 	mov.w	r7, #4294967295
 8002920:	e7ea      	b.n	80028f8 <__swbuf_r+0x6c>
 8002922:	bf00      	nop
 8002924:	08002e34 	.word	0x08002e34
 8002928:	08002e54 	.word	0x08002e54
 800292c:	08002e14 	.word	0x08002e14

08002930 <_write_r>:
 8002930:	b538      	push	{r3, r4, r5, lr}
 8002932:	4d07      	ldr	r5, [pc, #28]	; (8002950 <_write_r+0x20>)
 8002934:	4604      	mov	r4, r0
 8002936:	4608      	mov	r0, r1
 8002938:	4611      	mov	r1, r2
 800293a:	2200      	movs	r2, #0
 800293c:	602a      	str	r2, [r5, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	f7fe f996 	bl	8000c70 <_write>
 8002944:	1c43      	adds	r3, r0, #1
 8002946:	d102      	bne.n	800294e <_write_r+0x1e>
 8002948:	682b      	ldr	r3, [r5, #0]
 800294a:	b103      	cbz	r3, 800294e <_write_r+0x1e>
 800294c:	6023      	str	r3, [r4, #0]
 800294e:	bd38      	pop	{r3, r4, r5, pc}
 8002950:	200000a4 	.word	0x200000a4

08002954 <__swsetup_r>:
 8002954:	4b32      	ldr	r3, [pc, #200]	; (8002a20 <__swsetup_r+0xcc>)
 8002956:	b570      	push	{r4, r5, r6, lr}
 8002958:	681d      	ldr	r5, [r3, #0]
 800295a:	4606      	mov	r6, r0
 800295c:	460c      	mov	r4, r1
 800295e:	b125      	cbz	r5, 800296a <__swsetup_r+0x16>
 8002960:	69ab      	ldr	r3, [r5, #24]
 8002962:	b913      	cbnz	r3, 800296a <__swsetup_r+0x16>
 8002964:	4628      	mov	r0, r5
 8002966:	f7ff fb1b 	bl	8001fa0 <__sinit>
 800296a:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <__swsetup_r+0xd0>)
 800296c:	429c      	cmp	r4, r3
 800296e:	d10f      	bne.n	8002990 <__swsetup_r+0x3c>
 8002970:	686c      	ldr	r4, [r5, #4]
 8002972:	89a3      	ldrh	r3, [r4, #12]
 8002974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002978:	0719      	lsls	r1, r3, #28
 800297a:	d42c      	bmi.n	80029d6 <__swsetup_r+0x82>
 800297c:	06dd      	lsls	r5, r3, #27
 800297e:	d411      	bmi.n	80029a4 <__swsetup_r+0x50>
 8002980:	2309      	movs	r3, #9
 8002982:	6033      	str	r3, [r6, #0]
 8002984:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002988:	81a3      	strh	r3, [r4, #12]
 800298a:	f04f 30ff 	mov.w	r0, #4294967295
 800298e:	e03e      	b.n	8002a0e <__swsetup_r+0xba>
 8002990:	4b25      	ldr	r3, [pc, #148]	; (8002a28 <__swsetup_r+0xd4>)
 8002992:	429c      	cmp	r4, r3
 8002994:	d101      	bne.n	800299a <__swsetup_r+0x46>
 8002996:	68ac      	ldr	r4, [r5, #8]
 8002998:	e7eb      	b.n	8002972 <__swsetup_r+0x1e>
 800299a:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <__swsetup_r+0xd8>)
 800299c:	429c      	cmp	r4, r3
 800299e:	bf08      	it	eq
 80029a0:	68ec      	ldreq	r4, [r5, #12]
 80029a2:	e7e6      	b.n	8002972 <__swsetup_r+0x1e>
 80029a4:	0758      	lsls	r0, r3, #29
 80029a6:	d512      	bpl.n	80029ce <__swsetup_r+0x7a>
 80029a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029aa:	b141      	cbz	r1, 80029be <__swsetup_r+0x6a>
 80029ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029b0:	4299      	cmp	r1, r3
 80029b2:	d002      	beq.n	80029ba <__swsetup_r+0x66>
 80029b4:	4630      	mov	r0, r6
 80029b6:	f000 f991 	bl	8002cdc <_free_r>
 80029ba:	2300      	movs	r3, #0
 80029bc:	6363      	str	r3, [r4, #52]	; 0x34
 80029be:	89a3      	ldrh	r3, [r4, #12]
 80029c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80029c4:	81a3      	strh	r3, [r4, #12]
 80029c6:	2300      	movs	r3, #0
 80029c8:	6063      	str	r3, [r4, #4]
 80029ca:	6923      	ldr	r3, [r4, #16]
 80029cc:	6023      	str	r3, [r4, #0]
 80029ce:	89a3      	ldrh	r3, [r4, #12]
 80029d0:	f043 0308 	orr.w	r3, r3, #8
 80029d4:	81a3      	strh	r3, [r4, #12]
 80029d6:	6923      	ldr	r3, [r4, #16]
 80029d8:	b94b      	cbnz	r3, 80029ee <__swsetup_r+0x9a>
 80029da:	89a3      	ldrh	r3, [r4, #12]
 80029dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e4:	d003      	beq.n	80029ee <__swsetup_r+0x9a>
 80029e6:	4621      	mov	r1, r4
 80029e8:	4630      	mov	r0, r6
 80029ea:	f000 f92b 	bl	8002c44 <__smakebuf_r>
 80029ee:	89a0      	ldrh	r0, [r4, #12]
 80029f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80029f4:	f010 0301 	ands.w	r3, r0, #1
 80029f8:	d00a      	beq.n	8002a10 <__swsetup_r+0xbc>
 80029fa:	2300      	movs	r3, #0
 80029fc:	60a3      	str	r3, [r4, #8]
 80029fe:	6963      	ldr	r3, [r4, #20]
 8002a00:	425b      	negs	r3, r3
 8002a02:	61a3      	str	r3, [r4, #24]
 8002a04:	6923      	ldr	r3, [r4, #16]
 8002a06:	b943      	cbnz	r3, 8002a1a <__swsetup_r+0xc6>
 8002a08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002a0c:	d1ba      	bne.n	8002984 <__swsetup_r+0x30>
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}
 8002a10:	0781      	lsls	r1, r0, #30
 8002a12:	bf58      	it	pl
 8002a14:	6963      	ldrpl	r3, [r4, #20]
 8002a16:	60a3      	str	r3, [r4, #8]
 8002a18:	e7f4      	b.n	8002a04 <__swsetup_r+0xb0>
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	e7f7      	b.n	8002a0e <__swsetup_r+0xba>
 8002a1e:	bf00      	nop
 8002a20:	2000000c 	.word	0x2000000c
 8002a24:	08002e34 	.word	0x08002e34
 8002a28:	08002e54 	.word	0x08002e54
 8002a2c:	08002e14 	.word	0x08002e14

08002a30 <_close_r>:
 8002a30:	b538      	push	{r3, r4, r5, lr}
 8002a32:	4d06      	ldr	r5, [pc, #24]	; (8002a4c <_close_r+0x1c>)
 8002a34:	2300      	movs	r3, #0
 8002a36:	4604      	mov	r4, r0
 8002a38:	4608      	mov	r0, r1
 8002a3a:	602b      	str	r3, [r5, #0]
 8002a3c:	f7fe f934 	bl	8000ca8 <_close>
 8002a40:	1c43      	adds	r3, r0, #1
 8002a42:	d102      	bne.n	8002a4a <_close_r+0x1a>
 8002a44:	682b      	ldr	r3, [r5, #0]
 8002a46:	b103      	cbz	r3, 8002a4a <_close_r+0x1a>
 8002a48:	6023      	str	r3, [r4, #0]
 8002a4a:	bd38      	pop	{r3, r4, r5, pc}
 8002a4c:	200000a4 	.word	0x200000a4

08002a50 <__sflush_r>:
 8002a50:	898a      	ldrh	r2, [r1, #12]
 8002a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a56:	4605      	mov	r5, r0
 8002a58:	0710      	lsls	r0, r2, #28
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	d458      	bmi.n	8002b10 <__sflush_r+0xc0>
 8002a5e:	684b      	ldr	r3, [r1, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	dc05      	bgt.n	8002a70 <__sflush_r+0x20>
 8002a64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	dc02      	bgt.n	8002a70 <__sflush_r+0x20>
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a72:	2e00      	cmp	r6, #0
 8002a74:	d0f9      	beq.n	8002a6a <__sflush_r+0x1a>
 8002a76:	2300      	movs	r3, #0
 8002a78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a7c:	682f      	ldr	r7, [r5, #0]
 8002a7e:	602b      	str	r3, [r5, #0]
 8002a80:	d032      	beq.n	8002ae8 <__sflush_r+0x98>
 8002a82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a84:	89a3      	ldrh	r3, [r4, #12]
 8002a86:	075a      	lsls	r2, r3, #29
 8002a88:	d505      	bpl.n	8002a96 <__sflush_r+0x46>
 8002a8a:	6863      	ldr	r3, [r4, #4]
 8002a8c:	1ac0      	subs	r0, r0, r3
 8002a8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a90:	b10b      	cbz	r3, 8002a96 <__sflush_r+0x46>
 8002a92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a94:	1ac0      	subs	r0, r0, r3
 8002a96:	2300      	movs	r3, #0
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a9c:	6a21      	ldr	r1, [r4, #32]
 8002a9e:	4628      	mov	r0, r5
 8002aa0:	47b0      	blx	r6
 8002aa2:	1c43      	adds	r3, r0, #1
 8002aa4:	89a3      	ldrh	r3, [r4, #12]
 8002aa6:	d106      	bne.n	8002ab6 <__sflush_r+0x66>
 8002aa8:	6829      	ldr	r1, [r5, #0]
 8002aaa:	291d      	cmp	r1, #29
 8002aac:	d82c      	bhi.n	8002b08 <__sflush_r+0xb8>
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <__sflush_r+0x108>)
 8002ab0:	40ca      	lsrs	r2, r1
 8002ab2:	07d6      	lsls	r6, r2, #31
 8002ab4:	d528      	bpl.n	8002b08 <__sflush_r+0xb8>
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	6062      	str	r2, [r4, #4]
 8002aba:	04d9      	lsls	r1, r3, #19
 8002abc:	6922      	ldr	r2, [r4, #16]
 8002abe:	6022      	str	r2, [r4, #0]
 8002ac0:	d504      	bpl.n	8002acc <__sflush_r+0x7c>
 8002ac2:	1c42      	adds	r2, r0, #1
 8002ac4:	d101      	bne.n	8002aca <__sflush_r+0x7a>
 8002ac6:	682b      	ldr	r3, [r5, #0]
 8002ac8:	b903      	cbnz	r3, 8002acc <__sflush_r+0x7c>
 8002aca:	6560      	str	r0, [r4, #84]	; 0x54
 8002acc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ace:	602f      	str	r7, [r5, #0]
 8002ad0:	2900      	cmp	r1, #0
 8002ad2:	d0ca      	beq.n	8002a6a <__sflush_r+0x1a>
 8002ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ad8:	4299      	cmp	r1, r3
 8002ada:	d002      	beq.n	8002ae2 <__sflush_r+0x92>
 8002adc:	4628      	mov	r0, r5
 8002ade:	f000 f8fd 	bl	8002cdc <_free_r>
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	6360      	str	r0, [r4, #52]	; 0x34
 8002ae6:	e7c1      	b.n	8002a6c <__sflush_r+0x1c>
 8002ae8:	6a21      	ldr	r1, [r4, #32]
 8002aea:	2301      	movs	r3, #1
 8002aec:	4628      	mov	r0, r5
 8002aee:	47b0      	blx	r6
 8002af0:	1c41      	adds	r1, r0, #1
 8002af2:	d1c7      	bne.n	8002a84 <__sflush_r+0x34>
 8002af4:	682b      	ldr	r3, [r5, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0c4      	beq.n	8002a84 <__sflush_r+0x34>
 8002afa:	2b1d      	cmp	r3, #29
 8002afc:	d001      	beq.n	8002b02 <__sflush_r+0xb2>
 8002afe:	2b16      	cmp	r3, #22
 8002b00:	d101      	bne.n	8002b06 <__sflush_r+0xb6>
 8002b02:	602f      	str	r7, [r5, #0]
 8002b04:	e7b1      	b.n	8002a6a <__sflush_r+0x1a>
 8002b06:	89a3      	ldrh	r3, [r4, #12]
 8002b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b0c:	81a3      	strh	r3, [r4, #12]
 8002b0e:	e7ad      	b.n	8002a6c <__sflush_r+0x1c>
 8002b10:	690f      	ldr	r7, [r1, #16]
 8002b12:	2f00      	cmp	r7, #0
 8002b14:	d0a9      	beq.n	8002a6a <__sflush_r+0x1a>
 8002b16:	0793      	lsls	r3, r2, #30
 8002b18:	680e      	ldr	r6, [r1, #0]
 8002b1a:	bf08      	it	eq
 8002b1c:	694b      	ldreq	r3, [r1, #20]
 8002b1e:	600f      	str	r7, [r1, #0]
 8002b20:	bf18      	it	ne
 8002b22:	2300      	movne	r3, #0
 8002b24:	eba6 0807 	sub.w	r8, r6, r7
 8002b28:	608b      	str	r3, [r1, #8]
 8002b2a:	f1b8 0f00 	cmp.w	r8, #0
 8002b2e:	dd9c      	ble.n	8002a6a <__sflush_r+0x1a>
 8002b30:	6a21      	ldr	r1, [r4, #32]
 8002b32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b34:	4643      	mov	r3, r8
 8002b36:	463a      	mov	r2, r7
 8002b38:	4628      	mov	r0, r5
 8002b3a:	47b0      	blx	r6
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	dc06      	bgt.n	8002b4e <__sflush_r+0xfe>
 8002b40:	89a3      	ldrh	r3, [r4, #12]
 8002b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b46:	81a3      	strh	r3, [r4, #12]
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	e78e      	b.n	8002a6c <__sflush_r+0x1c>
 8002b4e:	4407      	add	r7, r0
 8002b50:	eba8 0800 	sub.w	r8, r8, r0
 8002b54:	e7e9      	b.n	8002b2a <__sflush_r+0xda>
 8002b56:	bf00      	nop
 8002b58:	20400001 	.word	0x20400001

08002b5c <_fflush_r>:
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	690b      	ldr	r3, [r1, #16]
 8002b60:	4605      	mov	r5, r0
 8002b62:	460c      	mov	r4, r1
 8002b64:	b913      	cbnz	r3, 8002b6c <_fflush_r+0x10>
 8002b66:	2500      	movs	r5, #0
 8002b68:	4628      	mov	r0, r5
 8002b6a:	bd38      	pop	{r3, r4, r5, pc}
 8002b6c:	b118      	cbz	r0, 8002b76 <_fflush_r+0x1a>
 8002b6e:	6983      	ldr	r3, [r0, #24]
 8002b70:	b90b      	cbnz	r3, 8002b76 <_fflush_r+0x1a>
 8002b72:	f7ff fa15 	bl	8001fa0 <__sinit>
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <_fflush_r+0x6c>)
 8002b78:	429c      	cmp	r4, r3
 8002b7a:	d11b      	bne.n	8002bb4 <_fflush_r+0x58>
 8002b7c:	686c      	ldr	r4, [r5, #4]
 8002b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d0ef      	beq.n	8002b66 <_fflush_r+0xa>
 8002b86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002b88:	07d0      	lsls	r0, r2, #31
 8002b8a:	d404      	bmi.n	8002b96 <_fflush_r+0x3a>
 8002b8c:	0599      	lsls	r1, r3, #22
 8002b8e:	d402      	bmi.n	8002b96 <_fflush_r+0x3a>
 8002b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b92:	f7ff faa3 	bl	80020dc <__retarget_lock_acquire_recursive>
 8002b96:	4628      	mov	r0, r5
 8002b98:	4621      	mov	r1, r4
 8002b9a:	f7ff ff59 	bl	8002a50 <__sflush_r>
 8002b9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ba0:	07da      	lsls	r2, r3, #31
 8002ba2:	4605      	mov	r5, r0
 8002ba4:	d4e0      	bmi.n	8002b68 <_fflush_r+0xc>
 8002ba6:	89a3      	ldrh	r3, [r4, #12]
 8002ba8:	059b      	lsls	r3, r3, #22
 8002baa:	d4dd      	bmi.n	8002b68 <_fflush_r+0xc>
 8002bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bae:	f7ff fa96 	bl	80020de <__retarget_lock_release_recursive>
 8002bb2:	e7d9      	b.n	8002b68 <_fflush_r+0xc>
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <_fflush_r+0x70>)
 8002bb6:	429c      	cmp	r4, r3
 8002bb8:	d101      	bne.n	8002bbe <_fflush_r+0x62>
 8002bba:	68ac      	ldr	r4, [r5, #8]
 8002bbc:	e7df      	b.n	8002b7e <_fflush_r+0x22>
 8002bbe:	4b04      	ldr	r3, [pc, #16]	; (8002bd0 <_fflush_r+0x74>)
 8002bc0:	429c      	cmp	r4, r3
 8002bc2:	bf08      	it	eq
 8002bc4:	68ec      	ldreq	r4, [r5, #12]
 8002bc6:	e7da      	b.n	8002b7e <_fflush_r+0x22>
 8002bc8:	08002e34 	.word	0x08002e34
 8002bcc:	08002e54 	.word	0x08002e54
 8002bd0:	08002e14 	.word	0x08002e14

08002bd4 <_lseek_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	4d07      	ldr	r5, [pc, #28]	; (8002bf4 <_lseek_r+0x20>)
 8002bd8:	4604      	mov	r4, r0
 8002bda:	4608      	mov	r0, r1
 8002bdc:	4611      	mov	r1, r2
 8002bde:	2200      	movs	r2, #0
 8002be0:	602a      	str	r2, [r5, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7fe f887 	bl	8000cf6 <_lseek>
 8002be8:	1c43      	adds	r3, r0, #1
 8002bea:	d102      	bne.n	8002bf2 <_lseek_r+0x1e>
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	b103      	cbz	r3, 8002bf2 <_lseek_r+0x1e>
 8002bf0:	6023      	str	r3, [r4, #0]
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
 8002bf4:	200000a4 	.word	0x200000a4

08002bf8 <__swhatbuf_r>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	460e      	mov	r6, r1
 8002bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c00:	2900      	cmp	r1, #0
 8002c02:	b096      	sub	sp, #88	; 0x58
 8002c04:	4614      	mov	r4, r2
 8002c06:	461d      	mov	r5, r3
 8002c08:	da08      	bge.n	8002c1c <__swhatbuf_r+0x24>
 8002c0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	602a      	str	r2, [r5, #0]
 8002c12:	061a      	lsls	r2, r3, #24
 8002c14:	d410      	bmi.n	8002c38 <__swhatbuf_r+0x40>
 8002c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c1a:	e00e      	b.n	8002c3a <__swhatbuf_r+0x42>
 8002c1c:	466a      	mov	r2, sp
 8002c1e:	f000 f8bb 	bl	8002d98 <_fstat_r>
 8002c22:	2800      	cmp	r0, #0
 8002c24:	dbf1      	blt.n	8002c0a <__swhatbuf_r+0x12>
 8002c26:	9a01      	ldr	r2, [sp, #4]
 8002c28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002c2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002c30:	425a      	negs	r2, r3
 8002c32:	415a      	adcs	r2, r3
 8002c34:	602a      	str	r2, [r5, #0]
 8002c36:	e7ee      	b.n	8002c16 <__swhatbuf_r+0x1e>
 8002c38:	2340      	movs	r3, #64	; 0x40
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	6023      	str	r3, [r4, #0]
 8002c3e:	b016      	add	sp, #88	; 0x58
 8002c40:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c44 <__smakebuf_r>:
 8002c44:	898b      	ldrh	r3, [r1, #12]
 8002c46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c48:	079d      	lsls	r5, r3, #30
 8002c4a:	4606      	mov	r6, r0
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	d507      	bpl.n	8002c60 <__smakebuf_r+0x1c>
 8002c50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c54:	6023      	str	r3, [r4, #0]
 8002c56:	6123      	str	r3, [r4, #16]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	6163      	str	r3, [r4, #20]
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd70      	pop	{r4, r5, r6, pc}
 8002c60:	ab01      	add	r3, sp, #4
 8002c62:	466a      	mov	r2, sp
 8002c64:	f7ff ffc8 	bl	8002bf8 <__swhatbuf_r>
 8002c68:	9900      	ldr	r1, [sp, #0]
 8002c6a:	4605      	mov	r5, r0
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	f7ff fa57 	bl	8002120 <_malloc_r>
 8002c72:	b948      	cbnz	r0, 8002c88 <__smakebuf_r+0x44>
 8002c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c78:	059a      	lsls	r2, r3, #22
 8002c7a:	d4ef      	bmi.n	8002c5c <__smakebuf_r+0x18>
 8002c7c:	f023 0303 	bic.w	r3, r3, #3
 8002c80:	f043 0302 	orr.w	r3, r3, #2
 8002c84:	81a3      	strh	r3, [r4, #12]
 8002c86:	e7e3      	b.n	8002c50 <__smakebuf_r+0xc>
 8002c88:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <__smakebuf_r+0x7c>)
 8002c8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c8c:	89a3      	ldrh	r3, [r4, #12]
 8002c8e:	6020      	str	r0, [r4, #0]
 8002c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c94:	81a3      	strh	r3, [r4, #12]
 8002c96:	9b00      	ldr	r3, [sp, #0]
 8002c98:	6163      	str	r3, [r4, #20]
 8002c9a:	9b01      	ldr	r3, [sp, #4]
 8002c9c:	6120      	str	r0, [r4, #16]
 8002c9e:	b15b      	cbz	r3, 8002cb8 <__smakebuf_r+0x74>
 8002ca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	f000 f889 	bl	8002dbc <_isatty_r>
 8002caa:	b128      	cbz	r0, 8002cb8 <__smakebuf_r+0x74>
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	f023 0303 	bic.w	r3, r3, #3
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	81a3      	strh	r3, [r4, #12]
 8002cb8:	89a0      	ldrh	r0, [r4, #12]
 8002cba:	4305      	orrs	r5, r0
 8002cbc:	81a5      	strh	r5, [r4, #12]
 8002cbe:	e7cd      	b.n	8002c5c <__smakebuf_r+0x18>
 8002cc0:	08001f39 	.word	0x08001f39

08002cc4 <__malloc_lock>:
 8002cc4:	4801      	ldr	r0, [pc, #4]	; (8002ccc <__malloc_lock+0x8>)
 8002cc6:	f7ff ba09 	b.w	80020dc <__retarget_lock_acquire_recursive>
 8002cca:	bf00      	nop
 8002ccc:	20000098 	.word	0x20000098

08002cd0 <__malloc_unlock>:
 8002cd0:	4801      	ldr	r0, [pc, #4]	; (8002cd8 <__malloc_unlock+0x8>)
 8002cd2:	f7ff ba04 	b.w	80020de <__retarget_lock_release_recursive>
 8002cd6:	bf00      	nop
 8002cd8:	20000098 	.word	0x20000098

08002cdc <_free_r>:
 8002cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cde:	2900      	cmp	r1, #0
 8002ce0:	d044      	beq.n	8002d6c <_free_r+0x90>
 8002ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ce6:	9001      	str	r0, [sp, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f1a1 0404 	sub.w	r4, r1, #4
 8002cee:	bfb8      	it	lt
 8002cf0:	18e4      	addlt	r4, r4, r3
 8002cf2:	f7ff ffe7 	bl	8002cc4 <__malloc_lock>
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	; (8002d70 <_free_r+0x94>)
 8002cf8:	9801      	ldr	r0, [sp, #4]
 8002cfa:	6813      	ldr	r3, [r2, #0]
 8002cfc:	b933      	cbnz	r3, 8002d0c <_free_r+0x30>
 8002cfe:	6063      	str	r3, [r4, #4]
 8002d00:	6014      	str	r4, [r2, #0]
 8002d02:	b003      	add	sp, #12
 8002d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d08:	f7ff bfe2 	b.w	8002cd0 <__malloc_unlock>
 8002d0c:	42a3      	cmp	r3, r4
 8002d0e:	d908      	bls.n	8002d22 <_free_r+0x46>
 8002d10:	6825      	ldr	r5, [r4, #0]
 8002d12:	1961      	adds	r1, r4, r5
 8002d14:	428b      	cmp	r3, r1
 8002d16:	bf01      	itttt	eq
 8002d18:	6819      	ldreq	r1, [r3, #0]
 8002d1a:	685b      	ldreq	r3, [r3, #4]
 8002d1c:	1949      	addeq	r1, r1, r5
 8002d1e:	6021      	streq	r1, [r4, #0]
 8002d20:	e7ed      	b.n	8002cfe <_free_r+0x22>
 8002d22:	461a      	mov	r2, r3
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	b10b      	cbz	r3, 8002d2c <_free_r+0x50>
 8002d28:	42a3      	cmp	r3, r4
 8002d2a:	d9fa      	bls.n	8002d22 <_free_r+0x46>
 8002d2c:	6811      	ldr	r1, [r2, #0]
 8002d2e:	1855      	adds	r5, r2, r1
 8002d30:	42a5      	cmp	r5, r4
 8002d32:	d10b      	bne.n	8002d4c <_free_r+0x70>
 8002d34:	6824      	ldr	r4, [r4, #0]
 8002d36:	4421      	add	r1, r4
 8002d38:	1854      	adds	r4, r2, r1
 8002d3a:	42a3      	cmp	r3, r4
 8002d3c:	6011      	str	r1, [r2, #0]
 8002d3e:	d1e0      	bne.n	8002d02 <_free_r+0x26>
 8002d40:	681c      	ldr	r4, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	6053      	str	r3, [r2, #4]
 8002d46:	4421      	add	r1, r4
 8002d48:	6011      	str	r1, [r2, #0]
 8002d4a:	e7da      	b.n	8002d02 <_free_r+0x26>
 8002d4c:	d902      	bls.n	8002d54 <_free_r+0x78>
 8002d4e:	230c      	movs	r3, #12
 8002d50:	6003      	str	r3, [r0, #0]
 8002d52:	e7d6      	b.n	8002d02 <_free_r+0x26>
 8002d54:	6825      	ldr	r5, [r4, #0]
 8002d56:	1961      	adds	r1, r4, r5
 8002d58:	428b      	cmp	r3, r1
 8002d5a:	bf04      	itt	eq
 8002d5c:	6819      	ldreq	r1, [r3, #0]
 8002d5e:	685b      	ldreq	r3, [r3, #4]
 8002d60:	6063      	str	r3, [r4, #4]
 8002d62:	bf04      	itt	eq
 8002d64:	1949      	addeq	r1, r1, r5
 8002d66:	6021      	streq	r1, [r4, #0]
 8002d68:	6054      	str	r4, [r2, #4]
 8002d6a:	e7ca      	b.n	8002d02 <_free_r+0x26>
 8002d6c:	b003      	add	sp, #12
 8002d6e:	bd30      	pop	{r4, r5, pc}
 8002d70:	2000009c 	.word	0x2000009c

08002d74 <_read_r>:
 8002d74:	b538      	push	{r3, r4, r5, lr}
 8002d76:	4d07      	ldr	r5, [pc, #28]	; (8002d94 <_read_r+0x20>)
 8002d78:	4604      	mov	r4, r0
 8002d7a:	4608      	mov	r0, r1
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	2200      	movs	r2, #0
 8002d80:	602a      	str	r2, [r5, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f7fd ff57 	bl	8000c36 <_read>
 8002d88:	1c43      	adds	r3, r0, #1
 8002d8a:	d102      	bne.n	8002d92 <_read_r+0x1e>
 8002d8c:	682b      	ldr	r3, [r5, #0]
 8002d8e:	b103      	cbz	r3, 8002d92 <_read_r+0x1e>
 8002d90:	6023      	str	r3, [r4, #0]
 8002d92:	bd38      	pop	{r3, r4, r5, pc}
 8002d94:	200000a4 	.word	0x200000a4

08002d98 <_fstat_r>:
 8002d98:	b538      	push	{r3, r4, r5, lr}
 8002d9a:	4d07      	ldr	r5, [pc, #28]	; (8002db8 <_fstat_r+0x20>)
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	4604      	mov	r4, r0
 8002da0:	4608      	mov	r0, r1
 8002da2:	4611      	mov	r1, r2
 8002da4:	602b      	str	r3, [r5, #0]
 8002da6:	f7fd ff8b 	bl	8000cc0 <_fstat>
 8002daa:	1c43      	adds	r3, r0, #1
 8002dac:	d102      	bne.n	8002db4 <_fstat_r+0x1c>
 8002dae:	682b      	ldr	r3, [r5, #0]
 8002db0:	b103      	cbz	r3, 8002db4 <_fstat_r+0x1c>
 8002db2:	6023      	str	r3, [r4, #0]
 8002db4:	bd38      	pop	{r3, r4, r5, pc}
 8002db6:	bf00      	nop
 8002db8:	200000a4 	.word	0x200000a4

08002dbc <_isatty_r>:
 8002dbc:	b538      	push	{r3, r4, r5, lr}
 8002dbe:	4d06      	ldr	r5, [pc, #24]	; (8002dd8 <_isatty_r+0x1c>)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	602b      	str	r3, [r5, #0]
 8002dc8:	f7fd ff8a 	bl	8000ce0 <_isatty>
 8002dcc:	1c43      	adds	r3, r0, #1
 8002dce:	d102      	bne.n	8002dd6 <_isatty_r+0x1a>
 8002dd0:	682b      	ldr	r3, [r5, #0]
 8002dd2:	b103      	cbz	r3, 8002dd6 <_isatty_r+0x1a>
 8002dd4:	6023      	str	r3, [r4, #0]
 8002dd6:	bd38      	pop	{r3, r4, r5, pc}
 8002dd8:	200000a4 	.word	0x200000a4

08002ddc <_init>:
 8002ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dde:	bf00      	nop
 8002de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de2:	bc08      	pop	{r3}
 8002de4:	469e      	mov	lr, r3
 8002de6:	4770      	bx	lr

08002de8 <_fini>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	bf00      	nop
 8002dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dee:	bc08      	pop	{r3}
 8002df0:	469e      	mov	lr, r3
 8002df2:	4770      	bx	lr
