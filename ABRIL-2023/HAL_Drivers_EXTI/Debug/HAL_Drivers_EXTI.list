
HAL_Drivers_EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002b58  08002b58  00012b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c28  08002c28  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c30  08002c30  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c30  08002c30  00012c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c34  08002c34  00012c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000034  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000a4  200000a4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000049f2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012e6  00000000  00000000  00024a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000508  00000000  00000000  00025d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000450  00000000  00000000  00026280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000209d2  00000000  00000000  000266d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000605a  00000000  00000000  000470a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c15f9  00000000  00000000  0004d0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010e6f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a84  00000000  00000000  0010e748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002b40 	.word	0x08002b40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002b40 	.word	0x08002b40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b28      	ldr	r3, [pc, #160]	; (8000640 <MX_GPIO_Init+0xbc>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a27      	ldr	r2, [pc, #156]	; (8000640 <MX_GPIO_Init+0xbc>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b25      	ldr	r3, [pc, #148]	; (8000640 <MX_GPIO_Init+0xbc>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b21      	ldr	r3, [pc, #132]	; (8000640 <MX_GPIO_Init+0xbc>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a20      	ldr	r2, [pc, #128]	; (8000640 <MX_GPIO_Init+0xbc>)
 80005c0:	f043 0308 	orr.w	r3, r3, #8
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <MX_GPIO_Init+0xbc>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0308 	and.w	r3, r3, #8
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80005d8:	481a      	ldr	r0, [pc, #104]	; (8000644 <MX_GPIO_Init+0xc0>)
 80005da:	f000 fdbb 	bl	8001154 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SW_Pin|BOTON2_Pin;
 80005de:	2303      	movs	r3, #3
 80005e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	4815      	ldr	r0, [pc, #84]	; (8000648 <MX_GPIO_Init+0xc4>)
 80005f4:	f000 fc12 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80005f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	2301      	movs	r3, #1
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	4619      	mov	r1, r3
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <MX_GPIO_Init+0xc0>)
 8000612:	f000 fc03 	bl	8000e1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000616:	2200      	movs	r2, #0
 8000618:	2101      	movs	r1, #1
 800061a:	2006      	movs	r0, #6
 800061c:	f000 fbc7 	bl	8000dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000620:	2006      	movs	r0, #6
 8000622:	f000 fbe0 	bl	8000de6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 4, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2104      	movs	r1, #4
 800062a:	2007      	movs	r0, #7
 800062c:	f000 fbbf 	bl	8000dae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000630:	2007      	movs	r0, #7
 8000632:	f000 fbd8 	bl	8000de6 <HAL_NVIC_EnableIRQ>

}
 8000636:	bf00      	nop
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40020c00 	.word	0x40020c00
 8000648:	40020000 	.word	0x40020000

0800064c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000654:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000658:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	d013      	beq.n	800068c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000664:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000668:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800066c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000670:	2b00      	cmp	r3, #0
 8000672:	d00b      	beq.n	800068c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000674:	e000      	b.n	8000678 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000676:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000678:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f9      	beq.n	8000676 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000682:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800068c:	687b      	ldr	r3, [r7, #4]
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <ITM_SendValue>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ITM_SendValue (int port, uint32_t value)
{
 800069a:	b480      	push	{r7}
 800069c:	b083      	sub	sp, #12
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
 80006a2:	6039      	str	r1, [r7, #0]
    if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d019      	beq.n	80006e8 <ITM_SendValue+0x4e>
      ((ITM->TER & (1UL<<port)               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b8:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	fa22 f303 	lsr.w	r3, r2, r3
 80006c2:	f003 0301 	and.w	r3, r3, #1
    if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00e      	beq.n	80006e8 <ITM_SendValue+0x4e>
    {
      while (ITM->PORT[port].u32 == 0UL)
 80006ca:	e000      	b.n	80006ce <ITM_SendValue+0x34>
      {
        __NOP();
 80006cc:	bf00      	nop
      while (ITM->PORT[port].u32 == 0UL)
 80006ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d0f7      	beq.n	80006cc <ITM_SendValue+0x32>
      }
      ITM->PORT[port].u32 = value;
 80006dc:	f04f 4160 	mov.w	r1, #3758096384	; 0xe0000000
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <ITM_Printf>:
void ITM_Printf(int port, char *format, ...){
 80006f4:	b40e      	push	{r1, r2, r3}
 80006f6:	b590      	push	{r4, r7, lr}
 80006f8:	b09a      	sub	sp, #104	; 0x68
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
  char str[80];
  char *ptr = str;
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	667b      	str	r3, [r7, #100]	; 0x64

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000704:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000708:	60fb      	str	r3, [r7, #12]
	vsprintf(str, format,args);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fa32 	bl	8001b7c <vsiprintf>
  for(uint8_t i = 0; i < strlen(str); i++){
 8000718:	2300      	movs	r3, #0
 800071a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800071e:	e00d      	b.n	800073c <ITM_Printf+0x48>
    // ITM_SendValue(1, (uint32_t)str[i]);
    ITM_SendValue(port, *ptr);
 8000720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ffb7 	bl	800069a <ITM_SendValue>
    ptr++;
 800072c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800072e:	3301      	adds	r3, #1
 8000730:	667b      	str	r3, [r7, #100]	; 0x64
  for(uint8_t i = 0; i < strlen(str); i++){
 8000732:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000736:	3301      	adds	r3, #1
 8000738:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800073c:	f897 4063 	ldrb.w	r4, [r7, #99]	; 0x63
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd43 	bl	80001d0 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	429c      	cmp	r4, r3
 800074e:	d3e7      	bcc.n	8000720 <ITM_Printf+0x2c>
  }
	va_end(args);
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	3768      	adds	r7, #104	; 0x68
 8000756:	46bd      	mov	sp, r7
 8000758:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800075c:	b003      	add	sp, #12
 800075e:	4770      	bx	lr

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000764:	f000 f9d6 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f804 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f7ff ff0a 	bl	8000584 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000770:	e7fe      	b.n	8000770 <main+0x10>
	...

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b094      	sub	sp, #80	; 0x50
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0320 	add.w	r3, r7, #32
 800077e:	2230      	movs	r2, #48	; 0x30
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f966 	bl	8001a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <SystemClock_Config+0xb4>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	4a21      	ldr	r2, [pc, #132]	; (8000828 <SystemClock_Config+0xb4>)
 80007a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <SystemClock_Config+0xb4>)
 80007aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	4b1c      	ldr	r3, [pc, #112]	; (800082c <SystemClock_Config+0xb8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a1b      	ldr	r2, [pc, #108]	; (800082c <SystemClock_Config+0xb8>)
 80007be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <SystemClock_Config+0xb8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d8:	2310      	movs	r3, #16
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007dc:	2300      	movs	r3, #0
 80007de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 fce7 	bl	80011b8 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007f0:	f000 f84b 	bl	800088a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f000 ff4a 	bl	80016a8 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800081a:	f000 f836 	bl	800088a <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3750      	adds	r7, #80	; 0x50
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SW_Pin){
 800083a:	88fb      	ldrh	r3, [r7, #6]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d107      	bne.n	8000850 <HAL_GPIO_EXTI_Callback+0x20>
		//todo
		ITM_Printf(1, "MENSAJE DEL PUERTO 1\r\n");
 8000840:	4908      	ldr	r1, [pc, #32]	; (8000864 <HAL_GPIO_EXTI_Callback+0x34>)
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff56 	bl	80006f4 <ITM_Printf>
		printf("PIN 0\r\n");
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <HAL_GPIO_EXTI_Callback+0x38>)
 800084a:	f001 f979 	bl	8001b40 <puts>
	}else if(BOTON2_Pin == GPIO_Pin){
		//todo
		printf("PIN 2\r\n");
	}
}
 800084e:	e005      	b.n	800085c <HAL_GPIO_EXTI_Callback+0x2c>
	}else if(BOTON2_Pin == GPIO_Pin){
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	2b02      	cmp	r3, #2
 8000854:	d102      	bne.n	800085c <HAL_GPIO_EXTI_Callback+0x2c>
		printf("PIN 2\r\n");
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000858:	f001 f972 	bl	8001b40 <puts>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	08002b58 	.word	0x08002b58
 8000868:	08002b70 	.word	0x08002b70
 800086c:	08002b78 	.word	0x08002b78

08000870 <__io_putchar>:

int __io_putchar(int ch){
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fee6 	bl	800064c <ITM_SendChar>
	return ch;
 8000880:	687b      	ldr	r3, [r7, #4]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088e:	b672      	cpsid	i
}
 8000890:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000892:	e7fe      	b.n	8000892 <Error_Handler+0x8>

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <HAL_MspInit+0x4c>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f942 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_Pin);
 800093c:	2001      	movs	r0, #1
 800093e:	f000 fc23 	bl	8001188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}

08000946 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BOTON2_Pin);
 800094a:	2002      	movs	r0, #2
 800094c:	f000 fc1c 	bl	8001188 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b086      	sub	sp, #24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	e00a      	b.n	800097c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000966:	f3af 8000 	nop.w
 800096a:	4601      	mov	r1, r0
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	1c5a      	adds	r2, r3, #1
 8000970:	60ba      	str	r2, [r7, #8]
 8000972:	b2ca      	uxtb	r2, r1
 8000974:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf0      	blt.n	8000966 <_read+0x12>
  }

  return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	b086      	sub	sp, #24
 8000992:	af00      	add	r7, sp, #0
 8000994:	60f8      	str	r0, [r7, #12]
 8000996:	60b9      	str	r1, [r7, #8]
 8000998:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	e009      	b.n	80009b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	60ba      	str	r2, [r7, #8]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff61 	bl	8000870 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	dbf1      	blt.n	80009a0 <_write+0x12>
  }
  return len;
 80009bc:	687b      	ldr	r3, [r7, #4]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <_close>:

int _close(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ee:	605a      	str	r2, [r3, #4]
  return 0;
 80009f0:	2300      	movs	r3, #0
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <_isatty>:

int _isatty(int file)
{
 80009fe:	b480      	push	{r7}
 8000a00:	b083      	sub	sp, #12
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a06:	2301      	movs	r3, #1
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a38:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <_sbrk+0x5c>)
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <_sbrk+0x60>)
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d102      	bne.n	8000a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <_sbrk+0x64>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <_sbrk+0x68>)
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d207      	bcs.n	8000a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a60:	f000 ffce 	bl	8001a00 <__errno>
 8000a64:	4603      	mov	r3, r0
 8000a66:	220c      	movs	r2, #12
 8000a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	e009      	b.n	8000a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <_sbrk+0x64>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <_sbrk+0x64>)
 8000a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3718      	adds	r7, #24
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20020000 	.word	0x20020000
 8000a90:	00000400 	.word	0x00000400
 8000a94:	2000008c 	.word	0x2000008c
 8000a98:	200000a8 	.word	0x200000a8

08000a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <SystemInit+0x20>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <SystemInit+0x20>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ac6:	490e      	ldr	r1, [pc, #56]	; (8000b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000adc:	4c0b      	ldr	r4, [pc, #44]	; (8000b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aea:	f7ff ffd7 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aee:	f000 ff8d 	bl	8001a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af2:	f7ff fe35 	bl	8000760 <main>
  bx  lr    
 8000af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b04:	08002c38 	.word	0x08002c38
  ldr r2, =_sbss
 8000b08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b0c:	200000a4 	.word	0x200000a4

08000b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <HAL_Init+0x40>)
 8000b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <HAL_Init+0x40>)
 8000b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	; (8000b54 <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_Init+0x40>)
 8000b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f92b 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	200f      	movs	r0, #15
 8000b44:	f000 f808 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fea4 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023c00 	.word	0x40023c00

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x54>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <HAL_InitTick+0x58>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f943 	bl	8000e02 <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f000 f90b 	bl	8000dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_InitTick+0x5c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000090 	.word	0x20000090

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000090 	.word	0x20000090

08000bf8 <__NVIC_SetPriorityGrouping>:
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_EnableIRQ>:
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	db0b      	blt.n	8000c86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f003 021f 	and.w	r2, r3, #31
 8000c74:	4907      	ldr	r1, [pc, #28]	; (8000c94 <__NVIC_EnableIRQ+0x38>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	095b      	lsrs	r3, r3, #5
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000e100 	.word	0xe000e100

08000c98 <__NVIC_SetPriority>:
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	6039      	str	r1, [r7, #0]
 8000ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	db0a      	blt.n	8000cc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <__NVIC_SetPriority+0x4c>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	440b      	add	r3, r1
 8000cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cc0:	e00a      	b.n	8000cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	4908      	ldr	r1, [pc, #32]	; (8000ce8 <__NVIC_SetPriority+0x50>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	3b04      	subs	r3, #4
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	b2d2      	uxtb	r2, r2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	761a      	strb	r2, [r3, #24]
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <NVIC_EncodePriority>:
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f1c3 0307 	rsb	r3, r3, #7
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	bf28      	it	cs
 8000d0a:	2304      	movcs	r3, #4
 8000d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3304      	adds	r3, #4
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d902      	bls.n	8000d1c <NVIC_EncodePriority+0x30>
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3b03      	subs	r3, #3
 8000d1a:	e000      	b.n	8000d1e <NVIC_EncodePriority+0x32>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d20:	f04f 32ff 	mov.w	r2, #4294967295
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43da      	mvns	r2, r3
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	401a      	ands	r2, r3
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d34:	f04f 31ff 	mov.w	r1, #4294967295
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3e:	43d9      	mvns	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	4313      	orrs	r3, r2
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3724      	adds	r7, #36	; 0x24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <SysTick_Config>:
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f7ff ff8e 	bl	8000c98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff29 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff3e 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ff8e 	bl	8000cec <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff5d 	bl	8000c98 <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff31 	bl	8000c5c <__NVIC_EnableIRQ>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffa2 	bl	8000d54 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	e16b      	b.n	8001110 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 815a 	bne.w	800110a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d005      	beq.n	8000e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d130      	bne.n	8000ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	f003 0201 	and.w	r2, r3, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d017      	beq.n	8000f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d123      	bne.n	8000f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	69b9      	ldr	r1, [r7, #24]
 8000f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0203 	and.w	r2, r3, #3
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80b4 	beq.w	800110a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b60      	ldr	r3, [pc, #384]	; (8001128 <HAL_GPIO_Init+0x30c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a5f      	ldr	r2, [pc, #380]	; (8001128 <HAL_GPIO_Init+0x30c>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b5d      	ldr	r3, [pc, #372]	; (8001128 <HAL_GPIO_Init+0x30c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fbe:	4a5b      	ldr	r2, [pc, #364]	; (800112c <HAL_GPIO_Init+0x310>)
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a52      	ldr	r2, [pc, #328]	; (8001130 <HAL_GPIO_Init+0x314>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d02b      	beq.n	8001042 <HAL_GPIO_Init+0x226>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a51      	ldr	r2, [pc, #324]	; (8001134 <HAL_GPIO_Init+0x318>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d025      	beq.n	800103e <HAL_GPIO_Init+0x222>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <HAL_GPIO_Init+0x31c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01f      	beq.n	800103a <HAL_GPIO_Init+0x21e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <HAL_GPIO_Init+0x320>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0x21a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4e      	ldr	r2, [pc, #312]	; (8001140 <HAL_GPIO_Init+0x324>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x216>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4d      	ldr	r2, [pc, #308]	; (8001144 <HAL_GPIO_Init+0x328>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x212>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4c      	ldr	r2, [pc, #304]	; (8001148 <HAL_GPIO_Init+0x32c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x20e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4b      	ldr	r2, [pc, #300]	; (800114c <HAL_GPIO_Init+0x330>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x20a>
 8001022:	2307      	movs	r3, #7
 8001024:	e00e      	b.n	8001044 <HAL_GPIO_Init+0x228>
 8001026:	2308      	movs	r3, #8
 8001028:	e00c      	b.n	8001044 <HAL_GPIO_Init+0x228>
 800102a:	2306      	movs	r3, #6
 800102c:	e00a      	b.n	8001044 <HAL_GPIO_Init+0x228>
 800102e:	2305      	movs	r3, #5
 8001030:	e008      	b.n	8001044 <HAL_GPIO_Init+0x228>
 8001032:	2304      	movs	r3, #4
 8001034:	e006      	b.n	8001044 <HAL_GPIO_Init+0x228>
 8001036:	2303      	movs	r3, #3
 8001038:	e004      	b.n	8001044 <HAL_GPIO_Init+0x228>
 800103a:	2302      	movs	r3, #2
 800103c:	e002      	b.n	8001044 <HAL_GPIO_Init+0x228>
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <HAL_GPIO_Init+0x228>
 8001042:	2300      	movs	r3, #0
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	f002 0203 	and.w	r2, r2, #3
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	4093      	lsls	r3, r2
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001054:	4935      	ldr	r1, [pc, #212]	; (800112c <HAL_GPIO_Init+0x310>)
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	089b      	lsrs	r3, r3, #2
 800105a:	3302      	adds	r3, #2
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <HAL_GPIO_Init+0x334>)
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001086:	4a32      	ldr	r2, [pc, #200]	; (8001150 <HAL_GPIO_Init+0x334>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800108c:	4b30      	ldr	r3, [pc, #192]	; (8001150 <HAL_GPIO_Init+0x334>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b0:	4a27      	ldr	r2, [pc, #156]	; (8001150 <HAL_GPIO_Init+0x334>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010b6:	4b26      	ldr	r3, [pc, #152]	; (8001150 <HAL_GPIO_Init+0x334>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <HAL_GPIO_Init+0x334>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <HAL_GPIO_Init+0x334>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001104:	4a12      	ldr	r2, [pc, #72]	; (8001150 <HAL_GPIO_Init+0x334>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3301      	adds	r3, #1
 800110e:	61fb      	str	r3, [r7, #28]
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	f67f ae90 	bls.w	8000e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40013800 	.word	0x40013800
 8001130:	40020000 	.word	0x40020000
 8001134:	40020400 	.word	0x40020400
 8001138:	40020800 	.word	0x40020800
 800113c:	40020c00 	.word	0x40020c00
 8001140:	40021000 	.word	0x40021000
 8001144:	40021400 	.word	0x40021400
 8001148:	40021800 	.word	0x40021800
 800114c:	40021c00 	.word	0x40021c00
 8001150:	40013c00 	.word	0x40013c00

08001154 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	807b      	strh	r3, [r7, #2]
 8001160:	4613      	mov	r3, r2
 8001162:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001164:	787b      	ldrb	r3, [r7, #1]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116a:	887a      	ldrh	r2, [r7, #2]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001170:	e003      	b.n	800117a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001172:	887b      	ldrh	r3, [r7, #2]
 8001174:	041a      	lsls	r2, r3, #16
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	619a      	str	r2, [r3, #24]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fb42 	bl	8000830 <HAL_GPIO_EXTI_Callback>
  }
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40013c00 	.word	0x40013c00

080011b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d101      	bne.n	80011ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e267      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d075      	beq.n	80012c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011d6:	4b88      	ldr	r3, [pc, #544]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d00c      	beq.n	80011fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011e2:	4b85      	ldr	r3, [pc, #532]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d112      	bne.n	8001214 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ee:	4b82      	ldr	r3, [pc, #520]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011fa:	d10b      	bne.n	8001214 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	4b7e      	ldr	r3, [pc, #504]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d05b      	beq.n	80012c0 <HAL_RCC_OscConfig+0x108>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d157      	bne.n	80012c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e242      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800121c:	d106      	bne.n	800122c <HAL_RCC_OscConfig+0x74>
 800121e:	4b76      	ldr	r3, [pc, #472]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a75      	ldr	r2, [pc, #468]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	e01d      	b.n	8001268 <HAL_RCC_OscConfig+0xb0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001234:	d10c      	bne.n	8001250 <HAL_RCC_OscConfig+0x98>
 8001236:	4b70      	ldr	r3, [pc, #448]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a6f      	ldr	r2, [pc, #444]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	4b6d      	ldr	r3, [pc, #436]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a6c      	ldr	r2, [pc, #432]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0xb0>
 8001250:	4b69      	ldr	r3, [pc, #420]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a68      	ldr	r2, [pc, #416]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b66      	ldr	r3, [pc, #408]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a65      	ldr	r2, [pc, #404]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d013      	beq.n	8001298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001270:	f7ff fcb6 	bl	8000be0 <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	e008      	b.n	800128a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001278:	f7ff fcb2 	bl	8000be0 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	; 0x64
 8001284:	d901      	bls.n	800128a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	e207      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128a:	4b5b      	ldr	r3, [pc, #364]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d0f0      	beq.n	8001278 <HAL_RCC_OscConfig+0xc0>
 8001296:	e014      	b.n	80012c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fca2 	bl	8000be0 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fc9e 	bl	8000be0 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1f3      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b2:	4b51      	ldr	r3, [pc, #324]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0xe8>
 80012be:	e000      	b.n	80012c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d063      	beq.n	8001396 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ce:	4b4a      	ldr	r3, [pc, #296]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f003 030c 	and.w	r3, r3, #12
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00b      	beq.n	80012f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012da:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d11c      	bne.n	8001320 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e6:	4b44      	ldr	r3, [pc, #272]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d116      	bne.n	8001320 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d005      	beq.n	800130a <HAL_RCC_OscConfig+0x152>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d001      	beq.n	800130a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e1c7      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130a:	4b3b      	ldr	r3, [pc, #236]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4937      	ldr	r1, [pc, #220]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800131e:	e03a      	b.n	8001396 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d020      	beq.n	800136a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001328:	4b34      	ldr	r3, [pc, #208]	; (80013fc <HAL_RCC_OscConfig+0x244>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132e:	f7ff fc57 	bl	8000be0 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001336:	f7ff fc53 	bl	8000be0 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e1a8      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001348:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001354:	4b28      	ldr	r3, [pc, #160]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4925      	ldr	r1, [pc, #148]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]
 8001368:	e015      	b.n	8001396 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136a:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_RCC_OscConfig+0x244>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fc36 	bl	8000be0 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001378:	f7ff fc32 	bl	8000be0 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e187      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800138a:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d036      	beq.n	8001410 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d016      	beq.n	80013d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_RCC_OscConfig+0x248>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b0:	f7ff fc16 	bl	8000be0 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fc12 	bl	8000be0 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e167      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_OscConfig+0x240>)
 80013cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0x200>
 80013d6:	e01b      	b.n	8001410 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_RCC_OscConfig+0x248>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fbff 	bl	8000be0 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e4:	e00e      	b.n	8001404 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff fbfb 	bl	8000be0 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d907      	bls.n	8001404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e150      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
 80013f8:	40023800 	.word	0x40023800
 80013fc:	42470000 	.word	0x42470000
 8001400:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	4b88      	ldr	r3, [pc, #544]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1ea      	bne.n	80013e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 8097 	beq.w	800154c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001422:	4b81      	ldr	r3, [pc, #516]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10f      	bne.n	800144e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b7d      	ldr	r3, [pc, #500]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a7c      	ldr	r2, [pc, #496]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b7a      	ldr	r3, [pc, #488]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b77      	ldr	r3, [pc, #476]	; (800162c <HAL_RCC_OscConfig+0x474>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d118      	bne.n	800148c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145a:	4b74      	ldr	r3, [pc, #464]	; (800162c <HAL_RCC_OscConfig+0x474>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a73      	ldr	r2, [pc, #460]	; (800162c <HAL_RCC_OscConfig+0x474>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001466:	f7ff fbbb 	bl	8000be0 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800146e:	f7ff fbb7 	bl	8000be0 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e10c      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <HAL_RCC_OscConfig+0x474>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d106      	bne.n	80014a2 <HAL_RCC_OscConfig+0x2ea>
 8001494:	4b64      	ldr	r3, [pc, #400]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001498:	4a63      	ldr	r2, [pc, #396]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6713      	str	r3, [r2, #112]	; 0x70
 80014a0:	e01c      	b.n	80014dc <HAL_RCC_OscConfig+0x324>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b05      	cmp	r3, #5
 80014a8:	d10c      	bne.n	80014c4 <HAL_RCC_OscConfig+0x30c>
 80014aa:	4b5f      	ldr	r3, [pc, #380]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ae:	4a5e      	ldr	r2, [pc, #376]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6713      	str	r3, [r2, #112]	; 0x70
 80014b6:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a5b      	ldr	r2, [pc, #364]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
 80014c2:	e00b      	b.n	80014dc <HAL_RCC_OscConfig+0x324>
 80014c4:	4b58      	ldr	r3, [pc, #352]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c8:	4a57      	ldr	r2, [pc, #348]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014ca:	f023 0301 	bic.w	r3, r3, #1
 80014ce:	6713      	str	r3, [r2, #112]	; 0x70
 80014d0:	4b55      	ldr	r3, [pc, #340]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	4a54      	ldr	r2, [pc, #336]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80014d6:	f023 0304 	bic.w	r3, r3, #4
 80014da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d015      	beq.n	8001510 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e4:	f7ff fb7c 	bl	8000be0 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff fb78 	bl	8000be0 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0cb      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001502:	4b49      	ldr	r3, [pc, #292]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d0ee      	beq.n	80014ec <HAL_RCC_OscConfig+0x334>
 800150e:	e014      	b.n	800153a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff fb66 	bl	8000be0 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001516:	e00a      	b.n	800152e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001518:	f7ff fb62 	bl	8000be0 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	; 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0b5      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152e:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1ee      	bne.n	8001518 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d105      	bne.n	800154c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001540:	4b39      	ldr	r3, [pc, #228]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a38      	ldr	r2, [pc, #224]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 80a1 	beq.w	8001698 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b08      	cmp	r3, #8
 8001560:	d05c      	beq.n	800161c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	699b      	ldr	r3, [r3, #24]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d141      	bne.n	80015ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800156a:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_RCC_OscConfig+0x478>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fb36 	bl	8000be0 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001578:	f7ff fb32 	bl	8000be0 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e087      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	019b      	lsls	r3, r3, #6
 80015a6:	431a      	orrs	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	085b      	lsrs	r3, r3, #1
 80015ae:	3b01      	subs	r3, #1
 80015b0:	041b      	lsls	r3, r3, #16
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	061b      	lsls	r3, r3, #24
 80015ba:	491b      	ldr	r1, [pc, #108]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c0:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <HAL_RCC_OscConfig+0x478>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fb0b 	bl	8000be0 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fb07 	bl	8000be0 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e05c      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x416>
 80015ec:	e054      	b.n	8001698 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_RCC_OscConfig+0x478>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff faf4 	bl	8000be0 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff faf0 	bl	8000be0 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e045      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_RCC_OscConfig+0x470>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x444>
 800161a:	e03d      	b.n	8001698 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d107      	bne.n	8001634 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e038      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000
 8001630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001634:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x4ec>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d028      	beq.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d121      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d11a      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001664:	4013      	ands	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800166a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800166c:	4293      	cmp	r3, r2
 800166e:	d111      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	085b      	lsrs	r3, r3, #1
 800167c:	3b01      	subs	r3, #1
 800167e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d107      	bne.n	8001694 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0cc      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016bc:	4b68      	ldr	r3, [pc, #416]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d90c      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b65      	ldr	r3, [pc, #404]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b63      	ldr	r3, [pc, #396]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0307 	and.w	r3, r3, #7
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0b8      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016fc:	4b59      	ldr	r3, [pc, #356]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a58      	ldr	r2, [pc, #352]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001706:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001714:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a52      	ldr	r2, [pc, #328]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800171e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001720:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	494d      	ldr	r1, [pc, #308]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	4313      	orrs	r3, r2
 8001730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d044      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d119      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e07f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d003      	beq.n	8001766 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001762:	2b03      	cmp	r3, #3
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b3f      	ldr	r3, [pc, #252]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001776:	4b3b      	ldr	r3, [pc, #236]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e067      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001786:	4b37      	ldr	r3, [pc, #220]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f023 0203 	bic.w	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4934      	ldr	r1, [pc, #208]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	4313      	orrs	r3, r2
 8001796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001798:	f7ff fa22 	bl	8000be0 <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a0:	f7ff fa1e 	bl	8000be0 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e04f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 020c 	and.w	r2, r3, #12
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d1eb      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d20c      	bcs.n	80017f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e032      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4916      	ldr	r1, [pc, #88]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	490e      	ldr	r1, [pc, #56]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800182e:	f000 f821 	bl	8001874 <HAL_RCC_GetSysClockFreq>
 8001832:	4602      	mov	r2, r0
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	490a      	ldr	r1, [pc, #40]	; (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	5ccb      	ldrb	r3, [r1, r3]
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff f982 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00
 8001864:	40023800 	.word	0x40023800
 8001868:	08002b80 	.word	0x08002b80
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001878:	b090      	sub	sp, #64	; 0x40
 800187a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	637b      	str	r3, [r7, #52]	; 0x34
 8001880:	2300      	movs	r3, #0
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001884:	2300      	movs	r3, #0
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800188c:	4b59      	ldr	r3, [pc, #356]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 030c 	and.w	r3, r3, #12
 8001894:	2b08      	cmp	r3, #8
 8001896:	d00d      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x40>
 8001898:	2b08      	cmp	r3, #8
 800189a:	f200 80a1 	bhi.w	80019e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x34>
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d003      	beq.n	80018ae <HAL_RCC_GetSysClockFreq+0x3a>
 80018a6:	e09b      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b53      	ldr	r3, [pc, #332]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80018ac:	e09b      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ae:	4b53      	ldr	r3, [pc, #332]	; (80019fc <HAL_RCC_GetSysClockFreq+0x188>)
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80018b2:	e098      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018b4:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018be:	4b4d      	ldr	r3, [pc, #308]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d028      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ca:	4b4a      	ldr	r3, [pc, #296]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	099b      	lsrs	r3, r3, #6
 80018d0:	2200      	movs	r2, #0
 80018d2:	623b      	str	r3, [r7, #32]
 80018d4:	627a      	str	r2, [r7, #36]	; 0x24
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80018dc:	2100      	movs	r1, #0
 80018de:	4b47      	ldr	r3, [pc, #284]	; (80019fc <HAL_RCC_GetSysClockFreq+0x188>)
 80018e0:	fb03 f201 	mul.w	r2, r3, r1
 80018e4:	2300      	movs	r3, #0
 80018e6:	fb00 f303 	mul.w	r3, r0, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	4a43      	ldr	r2, [pc, #268]	; (80019fc <HAL_RCC_GetSysClockFreq+0x188>)
 80018ee:	fba0 1202 	umull	r1, r2, r0, r2
 80018f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018f4:	460a      	mov	r2, r1
 80018f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80018f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fa:	4413      	add	r3, r2
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001900:	2200      	movs	r2, #0
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	61fa      	str	r2, [r7, #28]
 8001906:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800190a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800190e:	f7fe fcb7 	bl	8000280 <__aeabi_uldivmod>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4613      	mov	r3, r2
 8001918:	63fb      	str	r3, [r7, #60]	; 0x3c
 800191a:	e053      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	099b      	lsrs	r3, r3, #6
 8001922:	2200      	movs	r2, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	617a      	str	r2, [r7, #20]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800192e:	f04f 0b00 	mov.w	fp, #0
 8001932:	4652      	mov	r2, sl
 8001934:	465b      	mov	r3, fp
 8001936:	f04f 0000 	mov.w	r0, #0
 800193a:	f04f 0100 	mov.w	r1, #0
 800193e:	0159      	lsls	r1, r3, #5
 8001940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001944:	0150      	lsls	r0, r2, #5
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	ebb2 080a 	subs.w	r8, r2, sl
 800194e:	eb63 090b 	sbc.w	r9, r3, fp
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800195e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001962:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001966:	ebb2 0408 	subs.w	r4, r2, r8
 800196a:	eb63 0509 	sbc.w	r5, r3, r9
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	f04f 0300 	mov.w	r3, #0
 8001976:	00eb      	lsls	r3, r5, #3
 8001978:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800197c:	00e2      	lsls	r2, r4, #3
 800197e:	4614      	mov	r4, r2
 8001980:	461d      	mov	r5, r3
 8001982:	eb14 030a 	adds.w	r3, r4, sl
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	eb45 030b 	adc.w	r3, r5, fp
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9d7 4500 	ldrd	r4, r5, [r7]
 800199a:	4629      	mov	r1, r5
 800199c:	028b      	lsls	r3, r1, #10
 800199e:	4621      	mov	r1, r4
 80019a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019a4:	4621      	mov	r1, r4
 80019a6:	028a      	lsls	r2, r1, #10
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ae:	2200      	movs	r2, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	60fa      	str	r2, [r7, #12]
 80019b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019b8:	f7fe fc62 	bl	8000280 <__aeabi_uldivmod>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4613      	mov	r3, r2
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	0c1b      	lsrs	r3, r3, #16
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	3301      	adds	r3, #1
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80019d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019de:	e002      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80019e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3740      	adds	r7, #64	; 0x40
 80019ec:	46bd      	mov	sp, r7
 80019ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	00f42400 	.word	0x00f42400
 80019fc:	017d7840 	.word	0x017d7840

08001a00 <__errno>:
 8001a00:	4b01      	ldr	r3, [pc, #4]	; (8001a08 <__errno+0x8>)
 8001a02:	6818      	ldr	r0, [r3, #0]
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	2000000c 	.word	0x2000000c

08001a0c <__libc_init_array>:
 8001a0c:	b570      	push	{r4, r5, r6, lr}
 8001a0e:	4d0d      	ldr	r5, [pc, #52]	; (8001a44 <__libc_init_array+0x38>)
 8001a10:	4c0d      	ldr	r4, [pc, #52]	; (8001a48 <__libc_init_array+0x3c>)
 8001a12:	1b64      	subs	r4, r4, r5
 8001a14:	10a4      	asrs	r4, r4, #2
 8001a16:	2600      	movs	r6, #0
 8001a18:	42a6      	cmp	r6, r4
 8001a1a:	d109      	bne.n	8001a30 <__libc_init_array+0x24>
 8001a1c:	4d0b      	ldr	r5, [pc, #44]	; (8001a4c <__libc_init_array+0x40>)
 8001a1e:	4c0c      	ldr	r4, [pc, #48]	; (8001a50 <__libc_init_array+0x44>)
 8001a20:	f001 f88e 	bl	8002b40 <_init>
 8001a24:	1b64      	subs	r4, r4, r5
 8001a26:	10a4      	asrs	r4, r4, #2
 8001a28:	2600      	movs	r6, #0
 8001a2a:	42a6      	cmp	r6, r4
 8001a2c:	d105      	bne.n	8001a3a <__libc_init_array+0x2e>
 8001a2e:	bd70      	pop	{r4, r5, r6, pc}
 8001a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a34:	4798      	blx	r3
 8001a36:	3601      	adds	r6, #1
 8001a38:	e7ee      	b.n	8001a18 <__libc_init_array+0xc>
 8001a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a3e:	4798      	blx	r3
 8001a40:	3601      	adds	r6, #1
 8001a42:	e7f2      	b.n	8001a2a <__libc_init_array+0x1e>
 8001a44:	08002c30 	.word	0x08002c30
 8001a48:	08002c30 	.word	0x08002c30
 8001a4c:	08002c30 	.word	0x08002c30
 8001a50:	08002c34 	.word	0x08002c34

08001a54 <memset>:
 8001a54:	4402      	add	r2, r0
 8001a56:	4603      	mov	r3, r0
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d100      	bne.n	8001a5e <memset+0xa>
 8001a5c:	4770      	bx	lr
 8001a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a62:	e7f9      	b.n	8001a58 <memset+0x4>

08001a64 <_puts_r>:
 8001a64:	b570      	push	{r4, r5, r6, lr}
 8001a66:	460e      	mov	r6, r1
 8001a68:	4605      	mov	r5, r0
 8001a6a:	b118      	cbz	r0, 8001a74 <_puts_r+0x10>
 8001a6c:	6983      	ldr	r3, [r0, #24]
 8001a6e:	b90b      	cbnz	r3, 8001a74 <_puts_r+0x10>
 8001a70:	f000 fa68 	bl	8001f44 <__sinit>
 8001a74:	69ab      	ldr	r3, [r5, #24]
 8001a76:	68ac      	ldr	r4, [r5, #8]
 8001a78:	b913      	cbnz	r3, 8001a80 <_puts_r+0x1c>
 8001a7a:	4628      	mov	r0, r5
 8001a7c:	f000 fa62 	bl	8001f44 <__sinit>
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <_puts_r+0xd0>)
 8001a82:	429c      	cmp	r4, r3
 8001a84:	d120      	bne.n	8001ac8 <_puts_r+0x64>
 8001a86:	686c      	ldr	r4, [r5, #4]
 8001a88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a8a:	07db      	lsls	r3, r3, #31
 8001a8c:	d405      	bmi.n	8001a9a <_puts_r+0x36>
 8001a8e:	89a3      	ldrh	r3, [r4, #12]
 8001a90:	0598      	lsls	r0, r3, #22
 8001a92:	d402      	bmi.n	8001a9a <_puts_r+0x36>
 8001a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a96:	f000 faf3 	bl	8002080 <__retarget_lock_acquire_recursive>
 8001a9a:	89a3      	ldrh	r3, [r4, #12]
 8001a9c:	0719      	lsls	r1, r3, #28
 8001a9e:	d51d      	bpl.n	8001adc <_puts_r+0x78>
 8001aa0:	6923      	ldr	r3, [r4, #16]
 8001aa2:	b1db      	cbz	r3, 8001adc <_puts_r+0x78>
 8001aa4:	3e01      	subs	r6, #1
 8001aa6:	68a3      	ldr	r3, [r4, #8]
 8001aa8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001aac:	3b01      	subs	r3, #1
 8001aae:	60a3      	str	r3, [r4, #8]
 8001ab0:	bb39      	cbnz	r1, 8001b02 <_puts_r+0x9e>
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	da38      	bge.n	8001b28 <_puts_r+0xc4>
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	210a      	movs	r1, #10
 8001aba:	4628      	mov	r0, r5
 8001abc:	f000 f868 	bl	8001b90 <__swbuf_r>
 8001ac0:	3001      	adds	r0, #1
 8001ac2:	d011      	beq.n	8001ae8 <_puts_r+0x84>
 8001ac4:	250a      	movs	r5, #10
 8001ac6:	e011      	b.n	8001aec <_puts_r+0x88>
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	; (8001b38 <_puts_r+0xd4>)
 8001aca:	429c      	cmp	r4, r3
 8001acc:	d101      	bne.n	8001ad2 <_puts_r+0x6e>
 8001ace:	68ac      	ldr	r4, [r5, #8]
 8001ad0:	e7da      	b.n	8001a88 <_puts_r+0x24>
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <_puts_r+0xd8>)
 8001ad4:	429c      	cmp	r4, r3
 8001ad6:	bf08      	it	eq
 8001ad8:	68ec      	ldreq	r4, [r5, #12]
 8001ada:	e7d5      	b.n	8001a88 <_puts_r+0x24>
 8001adc:	4621      	mov	r1, r4
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f000 f8a8 	bl	8001c34 <__swsetup_r>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	d0dd      	beq.n	8001aa4 <_puts_r+0x40>
 8001ae8:	f04f 35ff 	mov.w	r5, #4294967295
 8001aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001aee:	07da      	lsls	r2, r3, #31
 8001af0:	d405      	bmi.n	8001afe <_puts_r+0x9a>
 8001af2:	89a3      	ldrh	r3, [r4, #12]
 8001af4:	059b      	lsls	r3, r3, #22
 8001af6:	d402      	bmi.n	8001afe <_puts_r+0x9a>
 8001af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001afa:	f000 fac2 	bl	8002082 <__retarget_lock_release_recursive>
 8001afe:	4628      	mov	r0, r5
 8001b00:	bd70      	pop	{r4, r5, r6, pc}
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da04      	bge.n	8001b10 <_puts_r+0xac>
 8001b06:	69a2      	ldr	r2, [r4, #24]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dc06      	bgt.n	8001b1a <_puts_r+0xb6>
 8001b0c:	290a      	cmp	r1, #10
 8001b0e:	d004      	beq.n	8001b1a <_puts_r+0xb6>
 8001b10:	6823      	ldr	r3, [r4, #0]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	6022      	str	r2, [r4, #0]
 8001b16:	7019      	strb	r1, [r3, #0]
 8001b18:	e7c5      	b.n	8001aa6 <_puts_r+0x42>
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	4628      	mov	r0, r5
 8001b1e:	f000 f837 	bl	8001b90 <__swbuf_r>
 8001b22:	3001      	adds	r0, #1
 8001b24:	d1bf      	bne.n	8001aa6 <_puts_r+0x42>
 8001b26:	e7df      	b.n	8001ae8 <_puts_r+0x84>
 8001b28:	6823      	ldr	r3, [r4, #0]
 8001b2a:	250a      	movs	r5, #10
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	6022      	str	r2, [r4, #0]
 8001b30:	701d      	strb	r5, [r3, #0]
 8001b32:	e7db      	b.n	8001aec <_puts_r+0x88>
 8001b34:	08002bb4 	.word	0x08002bb4
 8001b38:	08002bd4 	.word	0x08002bd4
 8001b3c:	08002b94 	.word	0x08002b94

08001b40 <puts>:
 8001b40:	4b02      	ldr	r3, [pc, #8]	; (8001b4c <puts+0xc>)
 8001b42:	4601      	mov	r1, r0
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	f7ff bf8d 	b.w	8001a64 <_puts_r>
 8001b4a:	bf00      	nop
 8001b4c:	2000000c 	.word	0x2000000c

08001b50 <_vsiprintf_r>:
 8001b50:	b500      	push	{lr}
 8001b52:	b09b      	sub	sp, #108	; 0x6c
 8001b54:	9100      	str	r1, [sp, #0]
 8001b56:	9104      	str	r1, [sp, #16]
 8001b58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001b5c:	9105      	str	r1, [sp, #20]
 8001b5e:	9102      	str	r1, [sp, #8]
 8001b60:	4905      	ldr	r1, [pc, #20]	; (8001b78 <_vsiprintf_r+0x28>)
 8001b62:	9103      	str	r1, [sp, #12]
 8001b64:	4669      	mov	r1, sp
 8001b66:	f000 fc2f 	bl	80023c8 <_svfiprintf_r>
 8001b6a:	9b00      	ldr	r3, [sp, #0]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	b01b      	add	sp, #108	; 0x6c
 8001b72:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b76:	bf00      	nop
 8001b78:	ffff0208 	.word	0xffff0208

08001b7c <vsiprintf>:
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	460a      	mov	r2, r1
 8001b80:	4601      	mov	r1, r0
 8001b82:	4802      	ldr	r0, [pc, #8]	; (8001b8c <vsiprintf+0x10>)
 8001b84:	6800      	ldr	r0, [r0, #0]
 8001b86:	f7ff bfe3 	b.w	8001b50 <_vsiprintf_r>
 8001b8a:	bf00      	nop
 8001b8c:	2000000c 	.word	0x2000000c

08001b90 <__swbuf_r>:
 8001b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b92:	460e      	mov	r6, r1
 8001b94:	4614      	mov	r4, r2
 8001b96:	4605      	mov	r5, r0
 8001b98:	b118      	cbz	r0, 8001ba2 <__swbuf_r+0x12>
 8001b9a:	6983      	ldr	r3, [r0, #24]
 8001b9c:	b90b      	cbnz	r3, 8001ba2 <__swbuf_r+0x12>
 8001b9e:	f000 f9d1 	bl	8001f44 <__sinit>
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <__swbuf_r+0x98>)
 8001ba4:	429c      	cmp	r4, r3
 8001ba6:	d12b      	bne.n	8001c00 <__swbuf_r+0x70>
 8001ba8:	686c      	ldr	r4, [r5, #4]
 8001baa:	69a3      	ldr	r3, [r4, #24]
 8001bac:	60a3      	str	r3, [r4, #8]
 8001bae:	89a3      	ldrh	r3, [r4, #12]
 8001bb0:	071a      	lsls	r2, r3, #28
 8001bb2:	d52f      	bpl.n	8001c14 <__swbuf_r+0x84>
 8001bb4:	6923      	ldr	r3, [r4, #16]
 8001bb6:	b36b      	cbz	r3, 8001c14 <__swbuf_r+0x84>
 8001bb8:	6923      	ldr	r3, [r4, #16]
 8001bba:	6820      	ldr	r0, [r4, #0]
 8001bbc:	1ac0      	subs	r0, r0, r3
 8001bbe:	6963      	ldr	r3, [r4, #20]
 8001bc0:	b2f6      	uxtb	r6, r6
 8001bc2:	4283      	cmp	r3, r0
 8001bc4:	4637      	mov	r7, r6
 8001bc6:	dc04      	bgt.n	8001bd2 <__swbuf_r+0x42>
 8001bc8:	4621      	mov	r1, r4
 8001bca:	4628      	mov	r0, r5
 8001bcc:	f000 f926 	bl	8001e1c <_fflush_r>
 8001bd0:	bb30      	cbnz	r0, 8001c20 <__swbuf_r+0x90>
 8001bd2:	68a3      	ldr	r3, [r4, #8]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	60a3      	str	r3, [r4, #8]
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	6022      	str	r2, [r4, #0]
 8001bde:	701e      	strb	r6, [r3, #0]
 8001be0:	6963      	ldr	r3, [r4, #20]
 8001be2:	3001      	adds	r0, #1
 8001be4:	4283      	cmp	r3, r0
 8001be6:	d004      	beq.n	8001bf2 <__swbuf_r+0x62>
 8001be8:	89a3      	ldrh	r3, [r4, #12]
 8001bea:	07db      	lsls	r3, r3, #31
 8001bec:	d506      	bpl.n	8001bfc <__swbuf_r+0x6c>
 8001bee:	2e0a      	cmp	r6, #10
 8001bf0:	d104      	bne.n	8001bfc <__swbuf_r+0x6c>
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	f000 f911 	bl	8001e1c <_fflush_r>
 8001bfa:	b988      	cbnz	r0, 8001c20 <__swbuf_r+0x90>
 8001bfc:	4638      	mov	r0, r7
 8001bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <__swbuf_r+0x9c>)
 8001c02:	429c      	cmp	r4, r3
 8001c04:	d101      	bne.n	8001c0a <__swbuf_r+0x7a>
 8001c06:	68ac      	ldr	r4, [r5, #8]
 8001c08:	e7cf      	b.n	8001baa <__swbuf_r+0x1a>
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <__swbuf_r+0xa0>)
 8001c0c:	429c      	cmp	r4, r3
 8001c0e:	bf08      	it	eq
 8001c10:	68ec      	ldreq	r4, [r5, #12]
 8001c12:	e7ca      	b.n	8001baa <__swbuf_r+0x1a>
 8001c14:	4621      	mov	r1, r4
 8001c16:	4628      	mov	r0, r5
 8001c18:	f000 f80c 	bl	8001c34 <__swsetup_r>
 8001c1c:	2800      	cmp	r0, #0
 8001c1e:	d0cb      	beq.n	8001bb8 <__swbuf_r+0x28>
 8001c20:	f04f 37ff 	mov.w	r7, #4294967295
 8001c24:	e7ea      	b.n	8001bfc <__swbuf_r+0x6c>
 8001c26:	bf00      	nop
 8001c28:	08002bb4 	.word	0x08002bb4
 8001c2c:	08002bd4 	.word	0x08002bd4
 8001c30:	08002b94 	.word	0x08002b94

08001c34 <__swsetup_r>:
 8001c34:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <__swsetup_r+0xcc>)
 8001c36:	b570      	push	{r4, r5, r6, lr}
 8001c38:	681d      	ldr	r5, [r3, #0]
 8001c3a:	4606      	mov	r6, r0
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	b125      	cbz	r5, 8001c4a <__swsetup_r+0x16>
 8001c40:	69ab      	ldr	r3, [r5, #24]
 8001c42:	b913      	cbnz	r3, 8001c4a <__swsetup_r+0x16>
 8001c44:	4628      	mov	r0, r5
 8001c46:	f000 f97d 	bl	8001f44 <__sinit>
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <__swsetup_r+0xd0>)
 8001c4c:	429c      	cmp	r4, r3
 8001c4e:	d10f      	bne.n	8001c70 <__swsetup_r+0x3c>
 8001c50:	686c      	ldr	r4, [r5, #4]
 8001c52:	89a3      	ldrh	r3, [r4, #12]
 8001c54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c58:	0719      	lsls	r1, r3, #28
 8001c5a:	d42c      	bmi.n	8001cb6 <__swsetup_r+0x82>
 8001c5c:	06dd      	lsls	r5, r3, #27
 8001c5e:	d411      	bmi.n	8001c84 <__swsetup_r+0x50>
 8001c60:	2309      	movs	r3, #9
 8001c62:	6033      	str	r3, [r6, #0]
 8001c64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c68:	81a3      	strh	r3, [r4, #12]
 8001c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6e:	e03e      	b.n	8001cee <__swsetup_r+0xba>
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <__swsetup_r+0xd4>)
 8001c72:	429c      	cmp	r4, r3
 8001c74:	d101      	bne.n	8001c7a <__swsetup_r+0x46>
 8001c76:	68ac      	ldr	r4, [r5, #8]
 8001c78:	e7eb      	b.n	8001c52 <__swsetup_r+0x1e>
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <__swsetup_r+0xd8>)
 8001c7c:	429c      	cmp	r4, r3
 8001c7e:	bf08      	it	eq
 8001c80:	68ec      	ldreq	r4, [r5, #12]
 8001c82:	e7e6      	b.n	8001c52 <__swsetup_r+0x1e>
 8001c84:	0758      	lsls	r0, r3, #29
 8001c86:	d512      	bpl.n	8001cae <__swsetup_r+0x7a>
 8001c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c8a:	b141      	cbz	r1, 8001c9e <__swsetup_r+0x6a>
 8001c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c90:	4299      	cmp	r1, r3
 8001c92:	d002      	beq.n	8001c9a <__swsetup_r+0x66>
 8001c94:	4630      	mov	r0, r6
 8001c96:	f000 fa5b 	bl	8002150 <_free_r>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	6363      	str	r3, [r4, #52]	; 0x34
 8001c9e:	89a3      	ldrh	r3, [r4, #12]
 8001ca0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ca4:	81a3      	strh	r3, [r4, #12]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	6063      	str	r3, [r4, #4]
 8001caa:	6923      	ldr	r3, [r4, #16]
 8001cac:	6023      	str	r3, [r4, #0]
 8001cae:	89a3      	ldrh	r3, [r4, #12]
 8001cb0:	f043 0308 	orr.w	r3, r3, #8
 8001cb4:	81a3      	strh	r3, [r4, #12]
 8001cb6:	6923      	ldr	r3, [r4, #16]
 8001cb8:	b94b      	cbnz	r3, 8001cce <__swsetup_r+0x9a>
 8001cba:	89a3      	ldrh	r3, [r4, #12]
 8001cbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc4:	d003      	beq.n	8001cce <__swsetup_r+0x9a>
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	4630      	mov	r0, r6
 8001cca:	f000 fa01 	bl	80020d0 <__smakebuf_r>
 8001cce:	89a0      	ldrh	r0, [r4, #12]
 8001cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001cd4:	f010 0301 	ands.w	r3, r0, #1
 8001cd8:	d00a      	beq.n	8001cf0 <__swsetup_r+0xbc>
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60a3      	str	r3, [r4, #8]
 8001cde:	6963      	ldr	r3, [r4, #20]
 8001ce0:	425b      	negs	r3, r3
 8001ce2:	61a3      	str	r3, [r4, #24]
 8001ce4:	6923      	ldr	r3, [r4, #16]
 8001ce6:	b943      	cbnz	r3, 8001cfa <__swsetup_r+0xc6>
 8001ce8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001cec:	d1ba      	bne.n	8001c64 <__swsetup_r+0x30>
 8001cee:	bd70      	pop	{r4, r5, r6, pc}
 8001cf0:	0781      	lsls	r1, r0, #30
 8001cf2:	bf58      	it	pl
 8001cf4:	6963      	ldrpl	r3, [r4, #20]
 8001cf6:	60a3      	str	r3, [r4, #8]
 8001cf8:	e7f4      	b.n	8001ce4 <__swsetup_r+0xb0>
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	e7f7      	b.n	8001cee <__swsetup_r+0xba>
 8001cfe:	bf00      	nop
 8001d00:	2000000c 	.word	0x2000000c
 8001d04:	08002bb4 	.word	0x08002bb4
 8001d08:	08002bd4 	.word	0x08002bd4
 8001d0c:	08002b94 	.word	0x08002b94

08001d10 <__sflush_r>:
 8001d10:	898a      	ldrh	r2, [r1, #12]
 8001d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d16:	4605      	mov	r5, r0
 8001d18:	0710      	lsls	r0, r2, #28
 8001d1a:	460c      	mov	r4, r1
 8001d1c:	d458      	bmi.n	8001dd0 <__sflush_r+0xc0>
 8001d1e:	684b      	ldr	r3, [r1, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	dc05      	bgt.n	8001d30 <__sflush_r+0x20>
 8001d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	dc02      	bgt.n	8001d30 <__sflush_r+0x20>
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d32:	2e00      	cmp	r6, #0
 8001d34:	d0f9      	beq.n	8001d2a <__sflush_r+0x1a>
 8001d36:	2300      	movs	r3, #0
 8001d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d3c:	682f      	ldr	r7, [r5, #0]
 8001d3e:	602b      	str	r3, [r5, #0]
 8001d40:	d032      	beq.n	8001da8 <__sflush_r+0x98>
 8001d42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d44:	89a3      	ldrh	r3, [r4, #12]
 8001d46:	075a      	lsls	r2, r3, #29
 8001d48:	d505      	bpl.n	8001d56 <__sflush_r+0x46>
 8001d4a:	6863      	ldr	r3, [r4, #4]
 8001d4c:	1ac0      	subs	r0, r0, r3
 8001d4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d50:	b10b      	cbz	r3, 8001d56 <__sflush_r+0x46>
 8001d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d54:	1ac0      	subs	r0, r0, r3
 8001d56:	2300      	movs	r3, #0
 8001d58:	4602      	mov	r2, r0
 8001d5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d5c:	6a21      	ldr	r1, [r4, #32]
 8001d5e:	4628      	mov	r0, r5
 8001d60:	47b0      	blx	r6
 8001d62:	1c43      	adds	r3, r0, #1
 8001d64:	89a3      	ldrh	r3, [r4, #12]
 8001d66:	d106      	bne.n	8001d76 <__sflush_r+0x66>
 8001d68:	6829      	ldr	r1, [r5, #0]
 8001d6a:	291d      	cmp	r1, #29
 8001d6c:	d82c      	bhi.n	8001dc8 <__sflush_r+0xb8>
 8001d6e:	4a2a      	ldr	r2, [pc, #168]	; (8001e18 <__sflush_r+0x108>)
 8001d70:	40ca      	lsrs	r2, r1
 8001d72:	07d6      	lsls	r6, r2, #31
 8001d74:	d528      	bpl.n	8001dc8 <__sflush_r+0xb8>
 8001d76:	2200      	movs	r2, #0
 8001d78:	6062      	str	r2, [r4, #4]
 8001d7a:	04d9      	lsls	r1, r3, #19
 8001d7c:	6922      	ldr	r2, [r4, #16]
 8001d7e:	6022      	str	r2, [r4, #0]
 8001d80:	d504      	bpl.n	8001d8c <__sflush_r+0x7c>
 8001d82:	1c42      	adds	r2, r0, #1
 8001d84:	d101      	bne.n	8001d8a <__sflush_r+0x7a>
 8001d86:	682b      	ldr	r3, [r5, #0]
 8001d88:	b903      	cbnz	r3, 8001d8c <__sflush_r+0x7c>
 8001d8a:	6560      	str	r0, [r4, #84]	; 0x54
 8001d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d8e:	602f      	str	r7, [r5, #0]
 8001d90:	2900      	cmp	r1, #0
 8001d92:	d0ca      	beq.n	8001d2a <__sflush_r+0x1a>
 8001d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d98:	4299      	cmp	r1, r3
 8001d9a:	d002      	beq.n	8001da2 <__sflush_r+0x92>
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	f000 f9d7 	bl	8002150 <_free_r>
 8001da2:	2000      	movs	r0, #0
 8001da4:	6360      	str	r0, [r4, #52]	; 0x34
 8001da6:	e7c1      	b.n	8001d2c <__sflush_r+0x1c>
 8001da8:	6a21      	ldr	r1, [r4, #32]
 8001daa:	2301      	movs	r3, #1
 8001dac:	4628      	mov	r0, r5
 8001dae:	47b0      	blx	r6
 8001db0:	1c41      	adds	r1, r0, #1
 8001db2:	d1c7      	bne.n	8001d44 <__sflush_r+0x34>
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0c4      	beq.n	8001d44 <__sflush_r+0x34>
 8001dba:	2b1d      	cmp	r3, #29
 8001dbc:	d001      	beq.n	8001dc2 <__sflush_r+0xb2>
 8001dbe:	2b16      	cmp	r3, #22
 8001dc0:	d101      	bne.n	8001dc6 <__sflush_r+0xb6>
 8001dc2:	602f      	str	r7, [r5, #0]
 8001dc4:	e7b1      	b.n	8001d2a <__sflush_r+0x1a>
 8001dc6:	89a3      	ldrh	r3, [r4, #12]
 8001dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dcc:	81a3      	strh	r3, [r4, #12]
 8001dce:	e7ad      	b.n	8001d2c <__sflush_r+0x1c>
 8001dd0:	690f      	ldr	r7, [r1, #16]
 8001dd2:	2f00      	cmp	r7, #0
 8001dd4:	d0a9      	beq.n	8001d2a <__sflush_r+0x1a>
 8001dd6:	0793      	lsls	r3, r2, #30
 8001dd8:	680e      	ldr	r6, [r1, #0]
 8001dda:	bf08      	it	eq
 8001ddc:	694b      	ldreq	r3, [r1, #20]
 8001dde:	600f      	str	r7, [r1, #0]
 8001de0:	bf18      	it	ne
 8001de2:	2300      	movne	r3, #0
 8001de4:	eba6 0807 	sub.w	r8, r6, r7
 8001de8:	608b      	str	r3, [r1, #8]
 8001dea:	f1b8 0f00 	cmp.w	r8, #0
 8001dee:	dd9c      	ble.n	8001d2a <__sflush_r+0x1a>
 8001df0:	6a21      	ldr	r1, [r4, #32]
 8001df2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001df4:	4643      	mov	r3, r8
 8001df6:	463a      	mov	r2, r7
 8001df8:	4628      	mov	r0, r5
 8001dfa:	47b0      	blx	r6
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	dc06      	bgt.n	8001e0e <__sflush_r+0xfe>
 8001e00:	89a3      	ldrh	r3, [r4, #12]
 8001e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e06:	81a3      	strh	r3, [r4, #12]
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295
 8001e0c:	e78e      	b.n	8001d2c <__sflush_r+0x1c>
 8001e0e:	4407      	add	r7, r0
 8001e10:	eba8 0800 	sub.w	r8, r8, r0
 8001e14:	e7e9      	b.n	8001dea <__sflush_r+0xda>
 8001e16:	bf00      	nop
 8001e18:	20400001 	.word	0x20400001

08001e1c <_fflush_r>:
 8001e1c:	b538      	push	{r3, r4, r5, lr}
 8001e1e:	690b      	ldr	r3, [r1, #16]
 8001e20:	4605      	mov	r5, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	b913      	cbnz	r3, 8001e2c <_fflush_r+0x10>
 8001e26:	2500      	movs	r5, #0
 8001e28:	4628      	mov	r0, r5
 8001e2a:	bd38      	pop	{r3, r4, r5, pc}
 8001e2c:	b118      	cbz	r0, 8001e36 <_fflush_r+0x1a>
 8001e2e:	6983      	ldr	r3, [r0, #24]
 8001e30:	b90b      	cbnz	r3, 8001e36 <_fflush_r+0x1a>
 8001e32:	f000 f887 	bl	8001f44 <__sinit>
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <_fflush_r+0x6c>)
 8001e38:	429c      	cmp	r4, r3
 8001e3a:	d11b      	bne.n	8001e74 <_fflush_r+0x58>
 8001e3c:	686c      	ldr	r4, [r5, #4]
 8001e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0ef      	beq.n	8001e26 <_fflush_r+0xa>
 8001e46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e48:	07d0      	lsls	r0, r2, #31
 8001e4a:	d404      	bmi.n	8001e56 <_fflush_r+0x3a>
 8001e4c:	0599      	lsls	r1, r3, #22
 8001e4e:	d402      	bmi.n	8001e56 <_fflush_r+0x3a>
 8001e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e52:	f000 f915 	bl	8002080 <__retarget_lock_acquire_recursive>
 8001e56:	4628      	mov	r0, r5
 8001e58:	4621      	mov	r1, r4
 8001e5a:	f7ff ff59 	bl	8001d10 <__sflush_r>
 8001e5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e60:	07da      	lsls	r2, r3, #31
 8001e62:	4605      	mov	r5, r0
 8001e64:	d4e0      	bmi.n	8001e28 <_fflush_r+0xc>
 8001e66:	89a3      	ldrh	r3, [r4, #12]
 8001e68:	059b      	lsls	r3, r3, #22
 8001e6a:	d4dd      	bmi.n	8001e28 <_fflush_r+0xc>
 8001e6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e6e:	f000 f908 	bl	8002082 <__retarget_lock_release_recursive>
 8001e72:	e7d9      	b.n	8001e28 <_fflush_r+0xc>
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <_fflush_r+0x70>)
 8001e76:	429c      	cmp	r4, r3
 8001e78:	d101      	bne.n	8001e7e <_fflush_r+0x62>
 8001e7a:	68ac      	ldr	r4, [r5, #8]
 8001e7c:	e7df      	b.n	8001e3e <_fflush_r+0x22>
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <_fflush_r+0x74>)
 8001e80:	429c      	cmp	r4, r3
 8001e82:	bf08      	it	eq
 8001e84:	68ec      	ldreq	r4, [r5, #12]
 8001e86:	e7da      	b.n	8001e3e <_fflush_r+0x22>
 8001e88:	08002bb4 	.word	0x08002bb4
 8001e8c:	08002bd4 	.word	0x08002bd4
 8001e90:	08002b94 	.word	0x08002b94

08001e94 <std>:
 8001e94:	2300      	movs	r3, #0
 8001e96:	b510      	push	{r4, lr}
 8001e98:	4604      	mov	r4, r0
 8001e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8001e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ea2:	6083      	str	r3, [r0, #8]
 8001ea4:	8181      	strh	r1, [r0, #12]
 8001ea6:	6643      	str	r3, [r0, #100]	; 0x64
 8001ea8:	81c2      	strh	r2, [r0, #14]
 8001eaa:	6183      	str	r3, [r0, #24]
 8001eac:	4619      	mov	r1, r3
 8001eae:	2208      	movs	r2, #8
 8001eb0:	305c      	adds	r0, #92	; 0x5c
 8001eb2:	f7ff fdcf 	bl	8001a54 <memset>
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <std+0x38>)
 8001eb8:	6263      	str	r3, [r4, #36]	; 0x24
 8001eba:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <std+0x3c>)
 8001ebc:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <std+0x40>)
 8001ec0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ec2:	4b05      	ldr	r3, [pc, #20]	; (8001ed8 <std+0x44>)
 8001ec4:	6224      	str	r4, [r4, #32]
 8001ec6:	6323      	str	r3, [r4, #48]	; 0x30
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	bf00      	nop
 8001ecc:	08002911 	.word	0x08002911
 8001ed0:	08002933 	.word	0x08002933
 8001ed4:	0800296b 	.word	0x0800296b
 8001ed8:	0800298f 	.word	0x0800298f

08001edc <_cleanup_r>:
 8001edc:	4901      	ldr	r1, [pc, #4]	; (8001ee4 <_cleanup_r+0x8>)
 8001ede:	f000 b8af 	b.w	8002040 <_fwalk_reent>
 8001ee2:	bf00      	nop
 8001ee4:	08001e1d 	.word	0x08001e1d

08001ee8 <__sfmoreglue>:
 8001ee8:	b570      	push	{r4, r5, r6, lr}
 8001eea:	2268      	movs	r2, #104	; 0x68
 8001eec:	1e4d      	subs	r5, r1, #1
 8001eee:	4355      	muls	r5, r2
 8001ef0:	460e      	mov	r6, r1
 8001ef2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ef6:	f000 f997 	bl	8002228 <_malloc_r>
 8001efa:	4604      	mov	r4, r0
 8001efc:	b140      	cbz	r0, 8001f10 <__sfmoreglue+0x28>
 8001efe:	2100      	movs	r1, #0
 8001f00:	e9c0 1600 	strd	r1, r6, [r0]
 8001f04:	300c      	adds	r0, #12
 8001f06:	60a0      	str	r0, [r4, #8]
 8001f08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001f0c:	f7ff fda2 	bl	8001a54 <memset>
 8001f10:	4620      	mov	r0, r4
 8001f12:	bd70      	pop	{r4, r5, r6, pc}

08001f14 <__sfp_lock_acquire>:
 8001f14:	4801      	ldr	r0, [pc, #4]	; (8001f1c <__sfp_lock_acquire+0x8>)
 8001f16:	f000 b8b3 	b.w	8002080 <__retarget_lock_acquire_recursive>
 8001f1a:	bf00      	nop
 8001f1c:	20000095 	.word	0x20000095

08001f20 <__sfp_lock_release>:
 8001f20:	4801      	ldr	r0, [pc, #4]	; (8001f28 <__sfp_lock_release+0x8>)
 8001f22:	f000 b8ae 	b.w	8002082 <__retarget_lock_release_recursive>
 8001f26:	bf00      	nop
 8001f28:	20000095 	.word	0x20000095

08001f2c <__sinit_lock_acquire>:
 8001f2c:	4801      	ldr	r0, [pc, #4]	; (8001f34 <__sinit_lock_acquire+0x8>)
 8001f2e:	f000 b8a7 	b.w	8002080 <__retarget_lock_acquire_recursive>
 8001f32:	bf00      	nop
 8001f34:	20000096 	.word	0x20000096

08001f38 <__sinit_lock_release>:
 8001f38:	4801      	ldr	r0, [pc, #4]	; (8001f40 <__sinit_lock_release+0x8>)
 8001f3a:	f000 b8a2 	b.w	8002082 <__retarget_lock_release_recursive>
 8001f3e:	bf00      	nop
 8001f40:	20000096 	.word	0x20000096

08001f44 <__sinit>:
 8001f44:	b510      	push	{r4, lr}
 8001f46:	4604      	mov	r4, r0
 8001f48:	f7ff fff0 	bl	8001f2c <__sinit_lock_acquire>
 8001f4c:	69a3      	ldr	r3, [r4, #24]
 8001f4e:	b11b      	cbz	r3, 8001f58 <__sinit+0x14>
 8001f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f54:	f7ff bff0 	b.w	8001f38 <__sinit_lock_release>
 8001f58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f5c:	6523      	str	r3, [r4, #80]	; 0x50
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <__sinit+0x68>)
 8001f60:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <__sinit+0x6c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f66:	42a3      	cmp	r3, r4
 8001f68:	bf04      	itt	eq
 8001f6a:	2301      	moveq	r3, #1
 8001f6c:	61a3      	streq	r3, [r4, #24]
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f000 f820 	bl	8001fb4 <__sfp>
 8001f74:	6060      	str	r0, [r4, #4]
 8001f76:	4620      	mov	r0, r4
 8001f78:	f000 f81c 	bl	8001fb4 <__sfp>
 8001f7c:	60a0      	str	r0, [r4, #8]
 8001f7e:	4620      	mov	r0, r4
 8001f80:	f000 f818 	bl	8001fb4 <__sfp>
 8001f84:	2200      	movs	r2, #0
 8001f86:	60e0      	str	r0, [r4, #12]
 8001f88:	2104      	movs	r1, #4
 8001f8a:	6860      	ldr	r0, [r4, #4]
 8001f8c:	f7ff ff82 	bl	8001e94 <std>
 8001f90:	68a0      	ldr	r0, [r4, #8]
 8001f92:	2201      	movs	r2, #1
 8001f94:	2109      	movs	r1, #9
 8001f96:	f7ff ff7d 	bl	8001e94 <std>
 8001f9a:	68e0      	ldr	r0, [r4, #12]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	2112      	movs	r1, #18
 8001fa0:	f7ff ff78 	bl	8001e94 <std>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	61a3      	str	r3, [r4, #24]
 8001fa8:	e7d2      	b.n	8001f50 <__sinit+0xc>
 8001faa:	bf00      	nop
 8001fac:	08002b90 	.word	0x08002b90
 8001fb0:	08001edd 	.word	0x08001edd

08001fb4 <__sfp>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	4607      	mov	r7, r0
 8001fb8:	f7ff ffac 	bl	8001f14 <__sfp_lock_acquire>
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <__sfp+0x84>)
 8001fbe:	681e      	ldr	r6, [r3, #0]
 8001fc0:	69b3      	ldr	r3, [r6, #24]
 8001fc2:	b913      	cbnz	r3, 8001fca <__sfp+0x16>
 8001fc4:	4630      	mov	r0, r6
 8001fc6:	f7ff ffbd 	bl	8001f44 <__sinit>
 8001fca:	3648      	adds	r6, #72	; 0x48
 8001fcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	d503      	bpl.n	8001fdc <__sfp+0x28>
 8001fd4:	6833      	ldr	r3, [r6, #0]
 8001fd6:	b30b      	cbz	r3, 800201c <__sfp+0x68>
 8001fd8:	6836      	ldr	r6, [r6, #0]
 8001fda:	e7f7      	b.n	8001fcc <__sfp+0x18>
 8001fdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001fe0:	b9d5      	cbnz	r5, 8002018 <__sfp+0x64>
 8001fe2:	4b16      	ldr	r3, [pc, #88]	; (800203c <__sfp+0x88>)
 8001fe4:	60e3      	str	r3, [r4, #12]
 8001fe6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001fea:	6665      	str	r5, [r4, #100]	; 0x64
 8001fec:	f000 f847 	bl	800207e <__retarget_lock_init_recursive>
 8001ff0:	f7ff ff96 	bl	8001f20 <__sfp_lock_release>
 8001ff4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001ff8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001ffc:	6025      	str	r5, [r4, #0]
 8001ffe:	61a5      	str	r5, [r4, #24]
 8002000:	2208      	movs	r2, #8
 8002002:	4629      	mov	r1, r5
 8002004:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002008:	f7ff fd24 	bl	8001a54 <memset>
 800200c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002010:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002014:	4620      	mov	r0, r4
 8002016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002018:	3468      	adds	r4, #104	; 0x68
 800201a:	e7d9      	b.n	8001fd0 <__sfp+0x1c>
 800201c:	2104      	movs	r1, #4
 800201e:	4638      	mov	r0, r7
 8002020:	f7ff ff62 	bl	8001ee8 <__sfmoreglue>
 8002024:	4604      	mov	r4, r0
 8002026:	6030      	str	r0, [r6, #0]
 8002028:	2800      	cmp	r0, #0
 800202a:	d1d5      	bne.n	8001fd8 <__sfp+0x24>
 800202c:	f7ff ff78 	bl	8001f20 <__sfp_lock_release>
 8002030:	230c      	movs	r3, #12
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	e7ee      	b.n	8002014 <__sfp+0x60>
 8002036:	bf00      	nop
 8002038:	08002b90 	.word	0x08002b90
 800203c:	ffff0001 	.word	0xffff0001

08002040 <_fwalk_reent>:
 8002040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002044:	4606      	mov	r6, r0
 8002046:	4688      	mov	r8, r1
 8002048:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800204c:	2700      	movs	r7, #0
 800204e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002052:	f1b9 0901 	subs.w	r9, r9, #1
 8002056:	d505      	bpl.n	8002064 <_fwalk_reent+0x24>
 8002058:	6824      	ldr	r4, [r4, #0]
 800205a:	2c00      	cmp	r4, #0
 800205c:	d1f7      	bne.n	800204e <_fwalk_reent+0xe>
 800205e:	4638      	mov	r0, r7
 8002060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002064:	89ab      	ldrh	r3, [r5, #12]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d907      	bls.n	800207a <_fwalk_reent+0x3a>
 800206a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800206e:	3301      	adds	r3, #1
 8002070:	d003      	beq.n	800207a <_fwalk_reent+0x3a>
 8002072:	4629      	mov	r1, r5
 8002074:	4630      	mov	r0, r6
 8002076:	47c0      	blx	r8
 8002078:	4307      	orrs	r7, r0
 800207a:	3568      	adds	r5, #104	; 0x68
 800207c:	e7e9      	b.n	8002052 <_fwalk_reent+0x12>

0800207e <__retarget_lock_init_recursive>:
 800207e:	4770      	bx	lr

08002080 <__retarget_lock_acquire_recursive>:
 8002080:	4770      	bx	lr

08002082 <__retarget_lock_release_recursive>:
 8002082:	4770      	bx	lr

08002084 <__swhatbuf_r>:
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	460e      	mov	r6, r1
 8002088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800208c:	2900      	cmp	r1, #0
 800208e:	b096      	sub	sp, #88	; 0x58
 8002090:	4614      	mov	r4, r2
 8002092:	461d      	mov	r5, r3
 8002094:	da08      	bge.n	80020a8 <__swhatbuf_r+0x24>
 8002096:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	602a      	str	r2, [r5, #0]
 800209e:	061a      	lsls	r2, r3, #24
 80020a0:	d410      	bmi.n	80020c4 <__swhatbuf_r+0x40>
 80020a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a6:	e00e      	b.n	80020c6 <__swhatbuf_r+0x42>
 80020a8:	466a      	mov	r2, sp
 80020aa:	f000 fc97 	bl	80029dc <_fstat_r>
 80020ae:	2800      	cmp	r0, #0
 80020b0:	dbf1      	blt.n	8002096 <__swhatbuf_r+0x12>
 80020b2:	9a01      	ldr	r2, [sp, #4]
 80020b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020bc:	425a      	negs	r2, r3
 80020be:	415a      	adcs	r2, r3
 80020c0:	602a      	str	r2, [r5, #0]
 80020c2:	e7ee      	b.n	80020a2 <__swhatbuf_r+0x1e>
 80020c4:	2340      	movs	r3, #64	; 0x40
 80020c6:	2000      	movs	r0, #0
 80020c8:	6023      	str	r3, [r4, #0]
 80020ca:	b016      	add	sp, #88	; 0x58
 80020cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080020d0 <__smakebuf_r>:
 80020d0:	898b      	ldrh	r3, [r1, #12]
 80020d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020d4:	079d      	lsls	r5, r3, #30
 80020d6:	4606      	mov	r6, r0
 80020d8:	460c      	mov	r4, r1
 80020da:	d507      	bpl.n	80020ec <__smakebuf_r+0x1c>
 80020dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020e0:	6023      	str	r3, [r4, #0]
 80020e2:	6123      	str	r3, [r4, #16]
 80020e4:	2301      	movs	r3, #1
 80020e6:	6163      	str	r3, [r4, #20]
 80020e8:	b002      	add	sp, #8
 80020ea:	bd70      	pop	{r4, r5, r6, pc}
 80020ec:	ab01      	add	r3, sp, #4
 80020ee:	466a      	mov	r2, sp
 80020f0:	f7ff ffc8 	bl	8002084 <__swhatbuf_r>
 80020f4:	9900      	ldr	r1, [sp, #0]
 80020f6:	4605      	mov	r5, r0
 80020f8:	4630      	mov	r0, r6
 80020fa:	f000 f895 	bl	8002228 <_malloc_r>
 80020fe:	b948      	cbnz	r0, 8002114 <__smakebuf_r+0x44>
 8002100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002104:	059a      	lsls	r2, r3, #22
 8002106:	d4ef      	bmi.n	80020e8 <__smakebuf_r+0x18>
 8002108:	f023 0303 	bic.w	r3, r3, #3
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	81a3      	strh	r3, [r4, #12]
 8002112:	e7e3      	b.n	80020dc <__smakebuf_r+0xc>
 8002114:	4b0d      	ldr	r3, [pc, #52]	; (800214c <__smakebuf_r+0x7c>)
 8002116:	62b3      	str	r3, [r6, #40]	; 0x28
 8002118:	89a3      	ldrh	r3, [r4, #12]
 800211a:	6020      	str	r0, [r4, #0]
 800211c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002120:	81a3      	strh	r3, [r4, #12]
 8002122:	9b00      	ldr	r3, [sp, #0]
 8002124:	6163      	str	r3, [r4, #20]
 8002126:	9b01      	ldr	r3, [sp, #4]
 8002128:	6120      	str	r0, [r4, #16]
 800212a:	b15b      	cbz	r3, 8002144 <__smakebuf_r+0x74>
 800212c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002130:	4630      	mov	r0, r6
 8002132:	f000 fc65 	bl	8002a00 <_isatty_r>
 8002136:	b128      	cbz	r0, 8002144 <__smakebuf_r+0x74>
 8002138:	89a3      	ldrh	r3, [r4, #12]
 800213a:	f023 0303 	bic.w	r3, r3, #3
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	81a3      	strh	r3, [r4, #12]
 8002144:	89a0      	ldrh	r0, [r4, #12]
 8002146:	4305      	orrs	r5, r0
 8002148:	81a5      	strh	r5, [r4, #12]
 800214a:	e7cd      	b.n	80020e8 <__smakebuf_r+0x18>
 800214c:	08001edd 	.word	0x08001edd

08002150 <_free_r>:
 8002150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002152:	2900      	cmp	r1, #0
 8002154:	d044      	beq.n	80021e0 <_free_r+0x90>
 8002156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800215a:	9001      	str	r0, [sp, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f1a1 0404 	sub.w	r4, r1, #4
 8002162:	bfb8      	it	lt
 8002164:	18e4      	addlt	r4, r4, r3
 8002166:	f000 fc95 	bl	8002a94 <__malloc_lock>
 800216a:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <_free_r+0x94>)
 800216c:	9801      	ldr	r0, [sp, #4]
 800216e:	6813      	ldr	r3, [r2, #0]
 8002170:	b933      	cbnz	r3, 8002180 <_free_r+0x30>
 8002172:	6063      	str	r3, [r4, #4]
 8002174:	6014      	str	r4, [r2, #0]
 8002176:	b003      	add	sp, #12
 8002178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800217c:	f000 bc90 	b.w	8002aa0 <__malloc_unlock>
 8002180:	42a3      	cmp	r3, r4
 8002182:	d908      	bls.n	8002196 <_free_r+0x46>
 8002184:	6825      	ldr	r5, [r4, #0]
 8002186:	1961      	adds	r1, r4, r5
 8002188:	428b      	cmp	r3, r1
 800218a:	bf01      	itttt	eq
 800218c:	6819      	ldreq	r1, [r3, #0]
 800218e:	685b      	ldreq	r3, [r3, #4]
 8002190:	1949      	addeq	r1, r1, r5
 8002192:	6021      	streq	r1, [r4, #0]
 8002194:	e7ed      	b.n	8002172 <_free_r+0x22>
 8002196:	461a      	mov	r2, r3
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	b10b      	cbz	r3, 80021a0 <_free_r+0x50>
 800219c:	42a3      	cmp	r3, r4
 800219e:	d9fa      	bls.n	8002196 <_free_r+0x46>
 80021a0:	6811      	ldr	r1, [r2, #0]
 80021a2:	1855      	adds	r5, r2, r1
 80021a4:	42a5      	cmp	r5, r4
 80021a6:	d10b      	bne.n	80021c0 <_free_r+0x70>
 80021a8:	6824      	ldr	r4, [r4, #0]
 80021aa:	4421      	add	r1, r4
 80021ac:	1854      	adds	r4, r2, r1
 80021ae:	42a3      	cmp	r3, r4
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	d1e0      	bne.n	8002176 <_free_r+0x26>
 80021b4:	681c      	ldr	r4, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	6053      	str	r3, [r2, #4]
 80021ba:	4421      	add	r1, r4
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	e7da      	b.n	8002176 <_free_r+0x26>
 80021c0:	d902      	bls.n	80021c8 <_free_r+0x78>
 80021c2:	230c      	movs	r3, #12
 80021c4:	6003      	str	r3, [r0, #0]
 80021c6:	e7d6      	b.n	8002176 <_free_r+0x26>
 80021c8:	6825      	ldr	r5, [r4, #0]
 80021ca:	1961      	adds	r1, r4, r5
 80021cc:	428b      	cmp	r3, r1
 80021ce:	bf04      	itt	eq
 80021d0:	6819      	ldreq	r1, [r3, #0]
 80021d2:	685b      	ldreq	r3, [r3, #4]
 80021d4:	6063      	str	r3, [r4, #4]
 80021d6:	bf04      	itt	eq
 80021d8:	1949      	addeq	r1, r1, r5
 80021da:	6021      	streq	r1, [r4, #0]
 80021dc:	6054      	str	r4, [r2, #4]
 80021de:	e7ca      	b.n	8002176 <_free_r+0x26>
 80021e0:	b003      	add	sp, #12
 80021e2:	bd30      	pop	{r4, r5, pc}
 80021e4:	20000098 	.word	0x20000098

080021e8 <sbrk_aligned>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	4e0e      	ldr	r6, [pc, #56]	; (8002224 <sbrk_aligned+0x3c>)
 80021ec:	460c      	mov	r4, r1
 80021ee:	6831      	ldr	r1, [r6, #0]
 80021f0:	4605      	mov	r5, r0
 80021f2:	b911      	cbnz	r1, 80021fa <sbrk_aligned+0x12>
 80021f4:	f000 fb7c 	bl	80028f0 <_sbrk_r>
 80021f8:	6030      	str	r0, [r6, #0]
 80021fa:	4621      	mov	r1, r4
 80021fc:	4628      	mov	r0, r5
 80021fe:	f000 fb77 	bl	80028f0 <_sbrk_r>
 8002202:	1c43      	adds	r3, r0, #1
 8002204:	d00a      	beq.n	800221c <sbrk_aligned+0x34>
 8002206:	1cc4      	adds	r4, r0, #3
 8002208:	f024 0403 	bic.w	r4, r4, #3
 800220c:	42a0      	cmp	r0, r4
 800220e:	d007      	beq.n	8002220 <sbrk_aligned+0x38>
 8002210:	1a21      	subs	r1, r4, r0
 8002212:	4628      	mov	r0, r5
 8002214:	f000 fb6c 	bl	80028f0 <_sbrk_r>
 8002218:	3001      	adds	r0, #1
 800221a:	d101      	bne.n	8002220 <sbrk_aligned+0x38>
 800221c:	f04f 34ff 	mov.w	r4, #4294967295
 8002220:	4620      	mov	r0, r4
 8002222:	bd70      	pop	{r4, r5, r6, pc}
 8002224:	2000009c 	.word	0x2000009c

08002228 <_malloc_r>:
 8002228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800222c:	1ccd      	adds	r5, r1, #3
 800222e:	f025 0503 	bic.w	r5, r5, #3
 8002232:	3508      	adds	r5, #8
 8002234:	2d0c      	cmp	r5, #12
 8002236:	bf38      	it	cc
 8002238:	250c      	movcc	r5, #12
 800223a:	2d00      	cmp	r5, #0
 800223c:	4607      	mov	r7, r0
 800223e:	db01      	blt.n	8002244 <_malloc_r+0x1c>
 8002240:	42a9      	cmp	r1, r5
 8002242:	d905      	bls.n	8002250 <_malloc_r+0x28>
 8002244:	230c      	movs	r3, #12
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	2600      	movs	r6, #0
 800224a:	4630      	mov	r0, r6
 800224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002250:	4e2e      	ldr	r6, [pc, #184]	; (800230c <_malloc_r+0xe4>)
 8002252:	f000 fc1f 	bl	8002a94 <__malloc_lock>
 8002256:	6833      	ldr	r3, [r6, #0]
 8002258:	461c      	mov	r4, r3
 800225a:	bb34      	cbnz	r4, 80022aa <_malloc_r+0x82>
 800225c:	4629      	mov	r1, r5
 800225e:	4638      	mov	r0, r7
 8002260:	f7ff ffc2 	bl	80021e8 <sbrk_aligned>
 8002264:	1c43      	adds	r3, r0, #1
 8002266:	4604      	mov	r4, r0
 8002268:	d14d      	bne.n	8002306 <_malloc_r+0xde>
 800226a:	6834      	ldr	r4, [r6, #0]
 800226c:	4626      	mov	r6, r4
 800226e:	2e00      	cmp	r6, #0
 8002270:	d140      	bne.n	80022f4 <_malloc_r+0xcc>
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	4631      	mov	r1, r6
 8002276:	4638      	mov	r0, r7
 8002278:	eb04 0803 	add.w	r8, r4, r3
 800227c:	f000 fb38 	bl	80028f0 <_sbrk_r>
 8002280:	4580      	cmp	r8, r0
 8002282:	d13a      	bne.n	80022fa <_malloc_r+0xd2>
 8002284:	6821      	ldr	r1, [r4, #0]
 8002286:	3503      	adds	r5, #3
 8002288:	1a6d      	subs	r5, r5, r1
 800228a:	f025 0503 	bic.w	r5, r5, #3
 800228e:	3508      	adds	r5, #8
 8002290:	2d0c      	cmp	r5, #12
 8002292:	bf38      	it	cc
 8002294:	250c      	movcc	r5, #12
 8002296:	4629      	mov	r1, r5
 8002298:	4638      	mov	r0, r7
 800229a:	f7ff ffa5 	bl	80021e8 <sbrk_aligned>
 800229e:	3001      	adds	r0, #1
 80022a0:	d02b      	beq.n	80022fa <_malloc_r+0xd2>
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	442b      	add	r3, r5
 80022a6:	6023      	str	r3, [r4, #0]
 80022a8:	e00e      	b.n	80022c8 <_malloc_r+0xa0>
 80022aa:	6822      	ldr	r2, [r4, #0]
 80022ac:	1b52      	subs	r2, r2, r5
 80022ae:	d41e      	bmi.n	80022ee <_malloc_r+0xc6>
 80022b0:	2a0b      	cmp	r2, #11
 80022b2:	d916      	bls.n	80022e2 <_malloc_r+0xba>
 80022b4:	1961      	adds	r1, r4, r5
 80022b6:	42a3      	cmp	r3, r4
 80022b8:	6025      	str	r5, [r4, #0]
 80022ba:	bf18      	it	ne
 80022bc:	6059      	strne	r1, [r3, #4]
 80022be:	6863      	ldr	r3, [r4, #4]
 80022c0:	bf08      	it	eq
 80022c2:	6031      	streq	r1, [r6, #0]
 80022c4:	5162      	str	r2, [r4, r5]
 80022c6:	604b      	str	r3, [r1, #4]
 80022c8:	4638      	mov	r0, r7
 80022ca:	f104 060b 	add.w	r6, r4, #11
 80022ce:	f000 fbe7 	bl	8002aa0 <__malloc_unlock>
 80022d2:	f026 0607 	bic.w	r6, r6, #7
 80022d6:	1d23      	adds	r3, r4, #4
 80022d8:	1af2      	subs	r2, r6, r3
 80022da:	d0b6      	beq.n	800224a <_malloc_r+0x22>
 80022dc:	1b9b      	subs	r3, r3, r6
 80022de:	50a3      	str	r3, [r4, r2]
 80022e0:	e7b3      	b.n	800224a <_malloc_r+0x22>
 80022e2:	6862      	ldr	r2, [r4, #4]
 80022e4:	42a3      	cmp	r3, r4
 80022e6:	bf0c      	ite	eq
 80022e8:	6032      	streq	r2, [r6, #0]
 80022ea:	605a      	strne	r2, [r3, #4]
 80022ec:	e7ec      	b.n	80022c8 <_malloc_r+0xa0>
 80022ee:	4623      	mov	r3, r4
 80022f0:	6864      	ldr	r4, [r4, #4]
 80022f2:	e7b2      	b.n	800225a <_malloc_r+0x32>
 80022f4:	4634      	mov	r4, r6
 80022f6:	6876      	ldr	r6, [r6, #4]
 80022f8:	e7b9      	b.n	800226e <_malloc_r+0x46>
 80022fa:	230c      	movs	r3, #12
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4638      	mov	r0, r7
 8002300:	f000 fbce 	bl	8002aa0 <__malloc_unlock>
 8002304:	e7a1      	b.n	800224a <_malloc_r+0x22>
 8002306:	6025      	str	r5, [r4, #0]
 8002308:	e7de      	b.n	80022c8 <_malloc_r+0xa0>
 800230a:	bf00      	nop
 800230c:	20000098 	.word	0x20000098

08002310 <__ssputs_r>:
 8002310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002314:	688e      	ldr	r6, [r1, #8]
 8002316:	429e      	cmp	r6, r3
 8002318:	4682      	mov	sl, r0
 800231a:	460c      	mov	r4, r1
 800231c:	4690      	mov	r8, r2
 800231e:	461f      	mov	r7, r3
 8002320:	d838      	bhi.n	8002394 <__ssputs_r+0x84>
 8002322:	898a      	ldrh	r2, [r1, #12]
 8002324:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002328:	d032      	beq.n	8002390 <__ssputs_r+0x80>
 800232a:	6825      	ldr	r5, [r4, #0]
 800232c:	6909      	ldr	r1, [r1, #16]
 800232e:	eba5 0901 	sub.w	r9, r5, r1
 8002332:	6965      	ldr	r5, [r4, #20]
 8002334:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002338:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800233c:	3301      	adds	r3, #1
 800233e:	444b      	add	r3, r9
 8002340:	106d      	asrs	r5, r5, #1
 8002342:	429d      	cmp	r5, r3
 8002344:	bf38      	it	cc
 8002346:	461d      	movcc	r5, r3
 8002348:	0553      	lsls	r3, r2, #21
 800234a:	d531      	bpl.n	80023b0 <__ssputs_r+0xa0>
 800234c:	4629      	mov	r1, r5
 800234e:	f7ff ff6b 	bl	8002228 <_malloc_r>
 8002352:	4606      	mov	r6, r0
 8002354:	b950      	cbnz	r0, 800236c <__ssputs_r+0x5c>
 8002356:	230c      	movs	r3, #12
 8002358:	f8ca 3000 	str.w	r3, [sl]
 800235c:	89a3      	ldrh	r3, [r4, #12]
 800235e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002362:	81a3      	strh	r3, [r4, #12]
 8002364:	f04f 30ff 	mov.w	r0, #4294967295
 8002368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800236c:	6921      	ldr	r1, [r4, #16]
 800236e:	464a      	mov	r2, r9
 8002370:	f000 fb68 	bl	8002a44 <memcpy>
 8002374:	89a3      	ldrh	r3, [r4, #12]
 8002376:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800237a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237e:	81a3      	strh	r3, [r4, #12]
 8002380:	6126      	str	r6, [r4, #16]
 8002382:	6165      	str	r5, [r4, #20]
 8002384:	444e      	add	r6, r9
 8002386:	eba5 0509 	sub.w	r5, r5, r9
 800238a:	6026      	str	r6, [r4, #0]
 800238c:	60a5      	str	r5, [r4, #8]
 800238e:	463e      	mov	r6, r7
 8002390:	42be      	cmp	r6, r7
 8002392:	d900      	bls.n	8002396 <__ssputs_r+0x86>
 8002394:	463e      	mov	r6, r7
 8002396:	6820      	ldr	r0, [r4, #0]
 8002398:	4632      	mov	r2, r6
 800239a:	4641      	mov	r1, r8
 800239c:	f000 fb60 	bl	8002a60 <memmove>
 80023a0:	68a3      	ldr	r3, [r4, #8]
 80023a2:	1b9b      	subs	r3, r3, r6
 80023a4:	60a3      	str	r3, [r4, #8]
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	4433      	add	r3, r6
 80023aa:	6023      	str	r3, [r4, #0]
 80023ac:	2000      	movs	r0, #0
 80023ae:	e7db      	b.n	8002368 <__ssputs_r+0x58>
 80023b0:	462a      	mov	r2, r5
 80023b2:	f000 fb7b 	bl	8002aac <_realloc_r>
 80023b6:	4606      	mov	r6, r0
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d1e1      	bne.n	8002380 <__ssputs_r+0x70>
 80023bc:	6921      	ldr	r1, [r4, #16]
 80023be:	4650      	mov	r0, sl
 80023c0:	f7ff fec6 	bl	8002150 <_free_r>
 80023c4:	e7c7      	b.n	8002356 <__ssputs_r+0x46>
	...

080023c8 <_svfiprintf_r>:
 80023c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023cc:	4698      	mov	r8, r3
 80023ce:	898b      	ldrh	r3, [r1, #12]
 80023d0:	061b      	lsls	r3, r3, #24
 80023d2:	b09d      	sub	sp, #116	; 0x74
 80023d4:	4607      	mov	r7, r0
 80023d6:	460d      	mov	r5, r1
 80023d8:	4614      	mov	r4, r2
 80023da:	d50e      	bpl.n	80023fa <_svfiprintf_r+0x32>
 80023dc:	690b      	ldr	r3, [r1, #16]
 80023de:	b963      	cbnz	r3, 80023fa <_svfiprintf_r+0x32>
 80023e0:	2140      	movs	r1, #64	; 0x40
 80023e2:	f7ff ff21 	bl	8002228 <_malloc_r>
 80023e6:	6028      	str	r0, [r5, #0]
 80023e8:	6128      	str	r0, [r5, #16]
 80023ea:	b920      	cbnz	r0, 80023f6 <_svfiprintf_r+0x2e>
 80023ec:	230c      	movs	r3, #12
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	e0d1      	b.n	800259a <_svfiprintf_r+0x1d2>
 80023f6:	2340      	movs	r3, #64	; 0x40
 80023f8:	616b      	str	r3, [r5, #20]
 80023fa:	2300      	movs	r3, #0
 80023fc:	9309      	str	r3, [sp, #36]	; 0x24
 80023fe:	2320      	movs	r3, #32
 8002400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002404:	f8cd 800c 	str.w	r8, [sp, #12]
 8002408:	2330      	movs	r3, #48	; 0x30
 800240a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80025b4 <_svfiprintf_r+0x1ec>
 800240e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002412:	f04f 0901 	mov.w	r9, #1
 8002416:	4623      	mov	r3, r4
 8002418:	469a      	mov	sl, r3
 800241a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800241e:	b10a      	cbz	r2, 8002424 <_svfiprintf_r+0x5c>
 8002420:	2a25      	cmp	r2, #37	; 0x25
 8002422:	d1f9      	bne.n	8002418 <_svfiprintf_r+0x50>
 8002424:	ebba 0b04 	subs.w	fp, sl, r4
 8002428:	d00b      	beq.n	8002442 <_svfiprintf_r+0x7a>
 800242a:	465b      	mov	r3, fp
 800242c:	4622      	mov	r2, r4
 800242e:	4629      	mov	r1, r5
 8002430:	4638      	mov	r0, r7
 8002432:	f7ff ff6d 	bl	8002310 <__ssputs_r>
 8002436:	3001      	adds	r0, #1
 8002438:	f000 80aa 	beq.w	8002590 <_svfiprintf_r+0x1c8>
 800243c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800243e:	445a      	add	r2, fp
 8002440:	9209      	str	r2, [sp, #36]	; 0x24
 8002442:	f89a 3000 	ldrb.w	r3, [sl]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80a2 	beq.w	8002590 <_svfiprintf_r+0x1c8>
 800244c:	2300      	movs	r3, #0
 800244e:	f04f 32ff 	mov.w	r2, #4294967295
 8002452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002456:	f10a 0a01 	add.w	sl, sl, #1
 800245a:	9304      	str	r3, [sp, #16]
 800245c:	9307      	str	r3, [sp, #28]
 800245e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002462:	931a      	str	r3, [sp, #104]	; 0x68
 8002464:	4654      	mov	r4, sl
 8002466:	2205      	movs	r2, #5
 8002468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800246c:	4851      	ldr	r0, [pc, #324]	; (80025b4 <_svfiprintf_r+0x1ec>)
 800246e:	f7fd feb7 	bl	80001e0 <memchr>
 8002472:	9a04      	ldr	r2, [sp, #16]
 8002474:	b9d8      	cbnz	r0, 80024ae <_svfiprintf_r+0xe6>
 8002476:	06d0      	lsls	r0, r2, #27
 8002478:	bf44      	itt	mi
 800247a:	2320      	movmi	r3, #32
 800247c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002480:	0711      	lsls	r1, r2, #28
 8002482:	bf44      	itt	mi
 8002484:	232b      	movmi	r3, #43	; 0x2b
 8002486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800248a:	f89a 3000 	ldrb.w	r3, [sl]
 800248e:	2b2a      	cmp	r3, #42	; 0x2a
 8002490:	d015      	beq.n	80024be <_svfiprintf_r+0xf6>
 8002492:	9a07      	ldr	r2, [sp, #28]
 8002494:	4654      	mov	r4, sl
 8002496:	2000      	movs	r0, #0
 8002498:	f04f 0c0a 	mov.w	ip, #10
 800249c:	4621      	mov	r1, r4
 800249e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024a2:	3b30      	subs	r3, #48	; 0x30
 80024a4:	2b09      	cmp	r3, #9
 80024a6:	d94e      	bls.n	8002546 <_svfiprintf_r+0x17e>
 80024a8:	b1b0      	cbz	r0, 80024d8 <_svfiprintf_r+0x110>
 80024aa:	9207      	str	r2, [sp, #28]
 80024ac:	e014      	b.n	80024d8 <_svfiprintf_r+0x110>
 80024ae:	eba0 0308 	sub.w	r3, r0, r8
 80024b2:	fa09 f303 	lsl.w	r3, r9, r3
 80024b6:	4313      	orrs	r3, r2
 80024b8:	9304      	str	r3, [sp, #16]
 80024ba:	46a2      	mov	sl, r4
 80024bc:	e7d2      	b.n	8002464 <_svfiprintf_r+0x9c>
 80024be:	9b03      	ldr	r3, [sp, #12]
 80024c0:	1d19      	adds	r1, r3, #4
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	9103      	str	r1, [sp, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	bfbb      	ittet	lt
 80024ca:	425b      	neglt	r3, r3
 80024cc:	f042 0202 	orrlt.w	r2, r2, #2
 80024d0:	9307      	strge	r3, [sp, #28]
 80024d2:	9307      	strlt	r3, [sp, #28]
 80024d4:	bfb8      	it	lt
 80024d6:	9204      	strlt	r2, [sp, #16]
 80024d8:	7823      	ldrb	r3, [r4, #0]
 80024da:	2b2e      	cmp	r3, #46	; 0x2e
 80024dc:	d10c      	bne.n	80024f8 <_svfiprintf_r+0x130>
 80024de:	7863      	ldrb	r3, [r4, #1]
 80024e0:	2b2a      	cmp	r3, #42	; 0x2a
 80024e2:	d135      	bne.n	8002550 <_svfiprintf_r+0x188>
 80024e4:	9b03      	ldr	r3, [sp, #12]
 80024e6:	1d1a      	adds	r2, r3, #4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	9203      	str	r2, [sp, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bfb8      	it	lt
 80024f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80024f4:	3402      	adds	r4, #2
 80024f6:	9305      	str	r3, [sp, #20]
 80024f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80025c4 <_svfiprintf_r+0x1fc>
 80024fc:	7821      	ldrb	r1, [r4, #0]
 80024fe:	2203      	movs	r2, #3
 8002500:	4650      	mov	r0, sl
 8002502:	f7fd fe6d 	bl	80001e0 <memchr>
 8002506:	b140      	cbz	r0, 800251a <_svfiprintf_r+0x152>
 8002508:	2340      	movs	r3, #64	; 0x40
 800250a:	eba0 000a 	sub.w	r0, r0, sl
 800250e:	fa03 f000 	lsl.w	r0, r3, r0
 8002512:	9b04      	ldr	r3, [sp, #16]
 8002514:	4303      	orrs	r3, r0
 8002516:	3401      	adds	r4, #1
 8002518:	9304      	str	r3, [sp, #16]
 800251a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800251e:	4826      	ldr	r0, [pc, #152]	; (80025b8 <_svfiprintf_r+0x1f0>)
 8002520:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002524:	2206      	movs	r2, #6
 8002526:	f7fd fe5b 	bl	80001e0 <memchr>
 800252a:	2800      	cmp	r0, #0
 800252c:	d038      	beq.n	80025a0 <_svfiprintf_r+0x1d8>
 800252e:	4b23      	ldr	r3, [pc, #140]	; (80025bc <_svfiprintf_r+0x1f4>)
 8002530:	bb1b      	cbnz	r3, 800257a <_svfiprintf_r+0x1b2>
 8002532:	9b03      	ldr	r3, [sp, #12]
 8002534:	3307      	adds	r3, #7
 8002536:	f023 0307 	bic.w	r3, r3, #7
 800253a:	3308      	adds	r3, #8
 800253c:	9303      	str	r3, [sp, #12]
 800253e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002540:	4433      	add	r3, r6
 8002542:	9309      	str	r3, [sp, #36]	; 0x24
 8002544:	e767      	b.n	8002416 <_svfiprintf_r+0x4e>
 8002546:	fb0c 3202 	mla	r2, ip, r2, r3
 800254a:	460c      	mov	r4, r1
 800254c:	2001      	movs	r0, #1
 800254e:	e7a5      	b.n	800249c <_svfiprintf_r+0xd4>
 8002550:	2300      	movs	r3, #0
 8002552:	3401      	adds	r4, #1
 8002554:	9305      	str	r3, [sp, #20]
 8002556:	4619      	mov	r1, r3
 8002558:	f04f 0c0a 	mov.w	ip, #10
 800255c:	4620      	mov	r0, r4
 800255e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002562:	3a30      	subs	r2, #48	; 0x30
 8002564:	2a09      	cmp	r2, #9
 8002566:	d903      	bls.n	8002570 <_svfiprintf_r+0x1a8>
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0c5      	beq.n	80024f8 <_svfiprintf_r+0x130>
 800256c:	9105      	str	r1, [sp, #20]
 800256e:	e7c3      	b.n	80024f8 <_svfiprintf_r+0x130>
 8002570:	fb0c 2101 	mla	r1, ip, r1, r2
 8002574:	4604      	mov	r4, r0
 8002576:	2301      	movs	r3, #1
 8002578:	e7f0      	b.n	800255c <_svfiprintf_r+0x194>
 800257a:	ab03      	add	r3, sp, #12
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	462a      	mov	r2, r5
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <_svfiprintf_r+0x1f8>)
 8002582:	a904      	add	r1, sp, #16
 8002584:	4638      	mov	r0, r7
 8002586:	f3af 8000 	nop.w
 800258a:	1c42      	adds	r2, r0, #1
 800258c:	4606      	mov	r6, r0
 800258e:	d1d6      	bne.n	800253e <_svfiprintf_r+0x176>
 8002590:	89ab      	ldrh	r3, [r5, #12]
 8002592:	065b      	lsls	r3, r3, #25
 8002594:	f53f af2c 	bmi.w	80023f0 <_svfiprintf_r+0x28>
 8002598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800259a:	b01d      	add	sp, #116	; 0x74
 800259c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025a0:	ab03      	add	r3, sp, #12
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	462a      	mov	r2, r5
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <_svfiprintf_r+0x1f8>)
 80025a8:	a904      	add	r1, sp, #16
 80025aa:	4638      	mov	r0, r7
 80025ac:	f000 f87a 	bl	80026a4 <_printf_i>
 80025b0:	e7eb      	b.n	800258a <_svfiprintf_r+0x1c2>
 80025b2:	bf00      	nop
 80025b4:	08002bf4 	.word	0x08002bf4
 80025b8:	08002bfe 	.word	0x08002bfe
 80025bc:	00000000 	.word	0x00000000
 80025c0:	08002311 	.word	0x08002311
 80025c4:	08002bfa 	.word	0x08002bfa

080025c8 <_printf_common>:
 80025c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025cc:	4616      	mov	r6, r2
 80025ce:	4699      	mov	r9, r3
 80025d0:	688a      	ldr	r2, [r1, #8]
 80025d2:	690b      	ldr	r3, [r1, #16]
 80025d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025d8:	4293      	cmp	r3, r2
 80025da:	bfb8      	it	lt
 80025dc:	4613      	movlt	r3, r2
 80025de:	6033      	str	r3, [r6, #0]
 80025e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025e4:	4607      	mov	r7, r0
 80025e6:	460c      	mov	r4, r1
 80025e8:	b10a      	cbz	r2, 80025ee <_printf_common+0x26>
 80025ea:	3301      	adds	r3, #1
 80025ec:	6033      	str	r3, [r6, #0]
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	0699      	lsls	r1, r3, #26
 80025f2:	bf42      	ittt	mi
 80025f4:	6833      	ldrmi	r3, [r6, #0]
 80025f6:	3302      	addmi	r3, #2
 80025f8:	6033      	strmi	r3, [r6, #0]
 80025fa:	6825      	ldr	r5, [r4, #0]
 80025fc:	f015 0506 	ands.w	r5, r5, #6
 8002600:	d106      	bne.n	8002610 <_printf_common+0x48>
 8002602:	f104 0a19 	add.w	sl, r4, #25
 8002606:	68e3      	ldr	r3, [r4, #12]
 8002608:	6832      	ldr	r2, [r6, #0]
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	42ab      	cmp	r3, r5
 800260e:	dc26      	bgt.n	800265e <_printf_common+0x96>
 8002610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002614:	1e13      	subs	r3, r2, #0
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	bf18      	it	ne
 800261a:	2301      	movne	r3, #1
 800261c:	0692      	lsls	r2, r2, #26
 800261e:	d42b      	bmi.n	8002678 <_printf_common+0xb0>
 8002620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002624:	4649      	mov	r1, r9
 8002626:	4638      	mov	r0, r7
 8002628:	47c0      	blx	r8
 800262a:	3001      	adds	r0, #1
 800262c:	d01e      	beq.n	800266c <_printf_common+0xa4>
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	68e5      	ldr	r5, [r4, #12]
 8002632:	6832      	ldr	r2, [r6, #0]
 8002634:	f003 0306 	and.w	r3, r3, #6
 8002638:	2b04      	cmp	r3, #4
 800263a:	bf08      	it	eq
 800263c:	1aad      	subeq	r5, r5, r2
 800263e:	68a3      	ldr	r3, [r4, #8]
 8002640:	6922      	ldr	r2, [r4, #16]
 8002642:	bf0c      	ite	eq
 8002644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002648:	2500      	movne	r5, #0
 800264a:	4293      	cmp	r3, r2
 800264c:	bfc4      	itt	gt
 800264e:	1a9b      	subgt	r3, r3, r2
 8002650:	18ed      	addgt	r5, r5, r3
 8002652:	2600      	movs	r6, #0
 8002654:	341a      	adds	r4, #26
 8002656:	42b5      	cmp	r5, r6
 8002658:	d11a      	bne.n	8002690 <_printf_common+0xc8>
 800265a:	2000      	movs	r0, #0
 800265c:	e008      	b.n	8002670 <_printf_common+0xa8>
 800265e:	2301      	movs	r3, #1
 8002660:	4652      	mov	r2, sl
 8002662:	4649      	mov	r1, r9
 8002664:	4638      	mov	r0, r7
 8002666:	47c0      	blx	r8
 8002668:	3001      	adds	r0, #1
 800266a:	d103      	bne.n	8002674 <_printf_common+0xac>
 800266c:	f04f 30ff 	mov.w	r0, #4294967295
 8002670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002674:	3501      	adds	r5, #1
 8002676:	e7c6      	b.n	8002606 <_printf_common+0x3e>
 8002678:	18e1      	adds	r1, r4, r3
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	2030      	movs	r0, #48	; 0x30
 800267e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002682:	4422      	add	r2, r4
 8002684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800268c:	3302      	adds	r3, #2
 800268e:	e7c7      	b.n	8002620 <_printf_common+0x58>
 8002690:	2301      	movs	r3, #1
 8002692:	4622      	mov	r2, r4
 8002694:	4649      	mov	r1, r9
 8002696:	4638      	mov	r0, r7
 8002698:	47c0      	blx	r8
 800269a:	3001      	adds	r0, #1
 800269c:	d0e6      	beq.n	800266c <_printf_common+0xa4>
 800269e:	3601      	adds	r6, #1
 80026a0:	e7d9      	b.n	8002656 <_printf_common+0x8e>
	...

080026a4 <_printf_i>:
 80026a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026a8:	7e0f      	ldrb	r7, [r1, #24]
 80026aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026ac:	2f78      	cmp	r7, #120	; 0x78
 80026ae:	4691      	mov	r9, r2
 80026b0:	4680      	mov	r8, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	469a      	mov	sl, r3
 80026b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026ba:	d807      	bhi.n	80026cc <_printf_i+0x28>
 80026bc:	2f62      	cmp	r7, #98	; 0x62
 80026be:	d80a      	bhi.n	80026d6 <_printf_i+0x32>
 80026c0:	2f00      	cmp	r7, #0
 80026c2:	f000 80d8 	beq.w	8002876 <_printf_i+0x1d2>
 80026c6:	2f58      	cmp	r7, #88	; 0x58
 80026c8:	f000 80a3 	beq.w	8002812 <_printf_i+0x16e>
 80026cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80026d4:	e03a      	b.n	800274c <_printf_i+0xa8>
 80026d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80026da:	2b15      	cmp	r3, #21
 80026dc:	d8f6      	bhi.n	80026cc <_printf_i+0x28>
 80026de:	a101      	add	r1, pc, #4	; (adr r1, 80026e4 <_printf_i+0x40>)
 80026e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026e4:	0800273d 	.word	0x0800273d
 80026e8:	08002751 	.word	0x08002751
 80026ec:	080026cd 	.word	0x080026cd
 80026f0:	080026cd 	.word	0x080026cd
 80026f4:	080026cd 	.word	0x080026cd
 80026f8:	080026cd 	.word	0x080026cd
 80026fc:	08002751 	.word	0x08002751
 8002700:	080026cd 	.word	0x080026cd
 8002704:	080026cd 	.word	0x080026cd
 8002708:	080026cd 	.word	0x080026cd
 800270c:	080026cd 	.word	0x080026cd
 8002710:	0800285d 	.word	0x0800285d
 8002714:	08002781 	.word	0x08002781
 8002718:	0800283f 	.word	0x0800283f
 800271c:	080026cd 	.word	0x080026cd
 8002720:	080026cd 	.word	0x080026cd
 8002724:	0800287f 	.word	0x0800287f
 8002728:	080026cd 	.word	0x080026cd
 800272c:	08002781 	.word	0x08002781
 8002730:	080026cd 	.word	0x080026cd
 8002734:	080026cd 	.word	0x080026cd
 8002738:	08002847 	.word	0x08002847
 800273c:	682b      	ldr	r3, [r5, #0]
 800273e:	1d1a      	adds	r2, r3, #4
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	602a      	str	r2, [r5, #0]
 8002744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800274c:	2301      	movs	r3, #1
 800274e:	e0a3      	b.n	8002898 <_printf_i+0x1f4>
 8002750:	6820      	ldr	r0, [r4, #0]
 8002752:	6829      	ldr	r1, [r5, #0]
 8002754:	0606      	lsls	r6, r0, #24
 8002756:	f101 0304 	add.w	r3, r1, #4
 800275a:	d50a      	bpl.n	8002772 <_printf_i+0xce>
 800275c:	680e      	ldr	r6, [r1, #0]
 800275e:	602b      	str	r3, [r5, #0]
 8002760:	2e00      	cmp	r6, #0
 8002762:	da03      	bge.n	800276c <_printf_i+0xc8>
 8002764:	232d      	movs	r3, #45	; 0x2d
 8002766:	4276      	negs	r6, r6
 8002768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800276c:	485e      	ldr	r0, [pc, #376]	; (80028e8 <_printf_i+0x244>)
 800276e:	230a      	movs	r3, #10
 8002770:	e019      	b.n	80027a6 <_printf_i+0x102>
 8002772:	680e      	ldr	r6, [r1, #0]
 8002774:	602b      	str	r3, [r5, #0]
 8002776:	f010 0f40 	tst.w	r0, #64	; 0x40
 800277a:	bf18      	it	ne
 800277c:	b236      	sxthne	r6, r6
 800277e:	e7ef      	b.n	8002760 <_printf_i+0xbc>
 8002780:	682b      	ldr	r3, [r5, #0]
 8002782:	6820      	ldr	r0, [r4, #0]
 8002784:	1d19      	adds	r1, r3, #4
 8002786:	6029      	str	r1, [r5, #0]
 8002788:	0601      	lsls	r1, r0, #24
 800278a:	d501      	bpl.n	8002790 <_printf_i+0xec>
 800278c:	681e      	ldr	r6, [r3, #0]
 800278e:	e002      	b.n	8002796 <_printf_i+0xf2>
 8002790:	0646      	lsls	r6, r0, #25
 8002792:	d5fb      	bpl.n	800278c <_printf_i+0xe8>
 8002794:	881e      	ldrh	r6, [r3, #0]
 8002796:	4854      	ldr	r0, [pc, #336]	; (80028e8 <_printf_i+0x244>)
 8002798:	2f6f      	cmp	r7, #111	; 0x6f
 800279a:	bf0c      	ite	eq
 800279c:	2308      	moveq	r3, #8
 800279e:	230a      	movne	r3, #10
 80027a0:	2100      	movs	r1, #0
 80027a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027a6:	6865      	ldr	r5, [r4, #4]
 80027a8:	60a5      	str	r5, [r4, #8]
 80027aa:	2d00      	cmp	r5, #0
 80027ac:	bfa2      	ittt	ge
 80027ae:	6821      	ldrge	r1, [r4, #0]
 80027b0:	f021 0104 	bicge.w	r1, r1, #4
 80027b4:	6021      	strge	r1, [r4, #0]
 80027b6:	b90e      	cbnz	r6, 80027bc <_printf_i+0x118>
 80027b8:	2d00      	cmp	r5, #0
 80027ba:	d04d      	beq.n	8002858 <_printf_i+0x1b4>
 80027bc:	4615      	mov	r5, r2
 80027be:	fbb6 f1f3 	udiv	r1, r6, r3
 80027c2:	fb03 6711 	mls	r7, r3, r1, r6
 80027c6:	5dc7      	ldrb	r7, [r0, r7]
 80027c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80027cc:	4637      	mov	r7, r6
 80027ce:	42bb      	cmp	r3, r7
 80027d0:	460e      	mov	r6, r1
 80027d2:	d9f4      	bls.n	80027be <_printf_i+0x11a>
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d10b      	bne.n	80027f0 <_printf_i+0x14c>
 80027d8:	6823      	ldr	r3, [r4, #0]
 80027da:	07de      	lsls	r6, r3, #31
 80027dc:	d508      	bpl.n	80027f0 <_printf_i+0x14c>
 80027de:	6923      	ldr	r3, [r4, #16]
 80027e0:	6861      	ldr	r1, [r4, #4]
 80027e2:	4299      	cmp	r1, r3
 80027e4:	bfde      	ittt	le
 80027e6:	2330      	movle	r3, #48	; 0x30
 80027e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027f0:	1b52      	subs	r2, r2, r5
 80027f2:	6122      	str	r2, [r4, #16]
 80027f4:	f8cd a000 	str.w	sl, [sp]
 80027f8:	464b      	mov	r3, r9
 80027fa:	aa03      	add	r2, sp, #12
 80027fc:	4621      	mov	r1, r4
 80027fe:	4640      	mov	r0, r8
 8002800:	f7ff fee2 	bl	80025c8 <_printf_common>
 8002804:	3001      	adds	r0, #1
 8002806:	d14c      	bne.n	80028a2 <_printf_i+0x1fe>
 8002808:	f04f 30ff 	mov.w	r0, #4294967295
 800280c:	b004      	add	sp, #16
 800280e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002812:	4835      	ldr	r0, [pc, #212]	; (80028e8 <_printf_i+0x244>)
 8002814:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002818:	6829      	ldr	r1, [r5, #0]
 800281a:	6823      	ldr	r3, [r4, #0]
 800281c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002820:	6029      	str	r1, [r5, #0]
 8002822:	061d      	lsls	r5, r3, #24
 8002824:	d514      	bpl.n	8002850 <_printf_i+0x1ac>
 8002826:	07df      	lsls	r7, r3, #31
 8002828:	bf44      	itt	mi
 800282a:	f043 0320 	orrmi.w	r3, r3, #32
 800282e:	6023      	strmi	r3, [r4, #0]
 8002830:	b91e      	cbnz	r6, 800283a <_printf_i+0x196>
 8002832:	6823      	ldr	r3, [r4, #0]
 8002834:	f023 0320 	bic.w	r3, r3, #32
 8002838:	6023      	str	r3, [r4, #0]
 800283a:	2310      	movs	r3, #16
 800283c:	e7b0      	b.n	80027a0 <_printf_i+0xfc>
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	f043 0320 	orr.w	r3, r3, #32
 8002844:	6023      	str	r3, [r4, #0]
 8002846:	2378      	movs	r3, #120	; 0x78
 8002848:	4828      	ldr	r0, [pc, #160]	; (80028ec <_printf_i+0x248>)
 800284a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800284e:	e7e3      	b.n	8002818 <_printf_i+0x174>
 8002850:	0659      	lsls	r1, r3, #25
 8002852:	bf48      	it	mi
 8002854:	b2b6      	uxthmi	r6, r6
 8002856:	e7e6      	b.n	8002826 <_printf_i+0x182>
 8002858:	4615      	mov	r5, r2
 800285a:	e7bb      	b.n	80027d4 <_printf_i+0x130>
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	6826      	ldr	r6, [r4, #0]
 8002860:	6961      	ldr	r1, [r4, #20]
 8002862:	1d18      	adds	r0, r3, #4
 8002864:	6028      	str	r0, [r5, #0]
 8002866:	0635      	lsls	r5, r6, #24
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	d501      	bpl.n	8002870 <_printf_i+0x1cc>
 800286c:	6019      	str	r1, [r3, #0]
 800286e:	e002      	b.n	8002876 <_printf_i+0x1d2>
 8002870:	0670      	lsls	r0, r6, #25
 8002872:	d5fb      	bpl.n	800286c <_printf_i+0x1c8>
 8002874:	8019      	strh	r1, [r3, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	6123      	str	r3, [r4, #16]
 800287a:	4615      	mov	r5, r2
 800287c:	e7ba      	b.n	80027f4 <_printf_i+0x150>
 800287e:	682b      	ldr	r3, [r5, #0]
 8002880:	1d1a      	adds	r2, r3, #4
 8002882:	602a      	str	r2, [r5, #0]
 8002884:	681d      	ldr	r5, [r3, #0]
 8002886:	6862      	ldr	r2, [r4, #4]
 8002888:	2100      	movs	r1, #0
 800288a:	4628      	mov	r0, r5
 800288c:	f7fd fca8 	bl	80001e0 <memchr>
 8002890:	b108      	cbz	r0, 8002896 <_printf_i+0x1f2>
 8002892:	1b40      	subs	r0, r0, r5
 8002894:	6060      	str	r0, [r4, #4]
 8002896:	6863      	ldr	r3, [r4, #4]
 8002898:	6123      	str	r3, [r4, #16]
 800289a:	2300      	movs	r3, #0
 800289c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028a0:	e7a8      	b.n	80027f4 <_printf_i+0x150>
 80028a2:	6923      	ldr	r3, [r4, #16]
 80028a4:	462a      	mov	r2, r5
 80028a6:	4649      	mov	r1, r9
 80028a8:	4640      	mov	r0, r8
 80028aa:	47d0      	blx	sl
 80028ac:	3001      	adds	r0, #1
 80028ae:	d0ab      	beq.n	8002808 <_printf_i+0x164>
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	079b      	lsls	r3, r3, #30
 80028b4:	d413      	bmi.n	80028de <_printf_i+0x23a>
 80028b6:	68e0      	ldr	r0, [r4, #12]
 80028b8:	9b03      	ldr	r3, [sp, #12]
 80028ba:	4298      	cmp	r0, r3
 80028bc:	bfb8      	it	lt
 80028be:	4618      	movlt	r0, r3
 80028c0:	e7a4      	b.n	800280c <_printf_i+0x168>
 80028c2:	2301      	movs	r3, #1
 80028c4:	4632      	mov	r2, r6
 80028c6:	4649      	mov	r1, r9
 80028c8:	4640      	mov	r0, r8
 80028ca:	47d0      	blx	sl
 80028cc:	3001      	adds	r0, #1
 80028ce:	d09b      	beq.n	8002808 <_printf_i+0x164>
 80028d0:	3501      	adds	r5, #1
 80028d2:	68e3      	ldr	r3, [r4, #12]
 80028d4:	9903      	ldr	r1, [sp, #12]
 80028d6:	1a5b      	subs	r3, r3, r1
 80028d8:	42ab      	cmp	r3, r5
 80028da:	dcf2      	bgt.n	80028c2 <_printf_i+0x21e>
 80028dc:	e7eb      	b.n	80028b6 <_printf_i+0x212>
 80028de:	2500      	movs	r5, #0
 80028e0:	f104 0619 	add.w	r6, r4, #25
 80028e4:	e7f5      	b.n	80028d2 <_printf_i+0x22e>
 80028e6:	bf00      	nop
 80028e8:	08002c05 	.word	0x08002c05
 80028ec:	08002c16 	.word	0x08002c16

080028f0 <_sbrk_r>:
 80028f0:	b538      	push	{r3, r4, r5, lr}
 80028f2:	4d06      	ldr	r5, [pc, #24]	; (800290c <_sbrk_r+0x1c>)
 80028f4:	2300      	movs	r3, #0
 80028f6:	4604      	mov	r4, r0
 80028f8:	4608      	mov	r0, r1
 80028fa:	602b      	str	r3, [r5, #0]
 80028fc:	f7fe f898 	bl	8000a30 <_sbrk>
 8002900:	1c43      	adds	r3, r0, #1
 8002902:	d102      	bne.n	800290a <_sbrk_r+0x1a>
 8002904:	682b      	ldr	r3, [r5, #0]
 8002906:	b103      	cbz	r3, 800290a <_sbrk_r+0x1a>
 8002908:	6023      	str	r3, [r4, #0]
 800290a:	bd38      	pop	{r3, r4, r5, pc}
 800290c:	200000a0 	.word	0x200000a0

08002910 <__sread>:
 8002910:	b510      	push	{r4, lr}
 8002912:	460c      	mov	r4, r1
 8002914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002918:	f000 f8f8 	bl	8002b0c <_read_r>
 800291c:	2800      	cmp	r0, #0
 800291e:	bfab      	itete	ge
 8002920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002922:	89a3      	ldrhlt	r3, [r4, #12]
 8002924:	181b      	addge	r3, r3, r0
 8002926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800292a:	bfac      	ite	ge
 800292c:	6563      	strge	r3, [r4, #84]	; 0x54
 800292e:	81a3      	strhlt	r3, [r4, #12]
 8002930:	bd10      	pop	{r4, pc}

08002932 <__swrite>:
 8002932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002936:	461f      	mov	r7, r3
 8002938:	898b      	ldrh	r3, [r1, #12]
 800293a:	05db      	lsls	r3, r3, #23
 800293c:	4605      	mov	r5, r0
 800293e:	460c      	mov	r4, r1
 8002940:	4616      	mov	r6, r2
 8002942:	d505      	bpl.n	8002950 <__swrite+0x1e>
 8002944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002948:	2302      	movs	r3, #2
 800294a:	2200      	movs	r2, #0
 800294c:	f000 f868 	bl	8002a20 <_lseek_r>
 8002950:	89a3      	ldrh	r3, [r4, #12]
 8002952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002956:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800295a:	81a3      	strh	r3, [r4, #12]
 800295c:	4632      	mov	r2, r6
 800295e:	463b      	mov	r3, r7
 8002960:	4628      	mov	r0, r5
 8002962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002966:	f000 b817 	b.w	8002998 <_write_r>

0800296a <__sseek>:
 800296a:	b510      	push	{r4, lr}
 800296c:	460c      	mov	r4, r1
 800296e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002972:	f000 f855 	bl	8002a20 <_lseek_r>
 8002976:	1c43      	adds	r3, r0, #1
 8002978:	89a3      	ldrh	r3, [r4, #12]
 800297a:	bf15      	itete	ne
 800297c:	6560      	strne	r0, [r4, #84]	; 0x54
 800297e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002986:	81a3      	strheq	r3, [r4, #12]
 8002988:	bf18      	it	ne
 800298a:	81a3      	strhne	r3, [r4, #12]
 800298c:	bd10      	pop	{r4, pc}

0800298e <__sclose>:
 800298e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002992:	f000 b813 	b.w	80029bc <_close_r>
	...

08002998 <_write_r>:
 8002998:	b538      	push	{r3, r4, r5, lr}
 800299a:	4d07      	ldr	r5, [pc, #28]	; (80029b8 <_write_r+0x20>)
 800299c:	4604      	mov	r4, r0
 800299e:	4608      	mov	r0, r1
 80029a0:	4611      	mov	r1, r2
 80029a2:	2200      	movs	r2, #0
 80029a4:	602a      	str	r2, [r5, #0]
 80029a6:	461a      	mov	r2, r3
 80029a8:	f7fd fff1 	bl	800098e <_write>
 80029ac:	1c43      	adds	r3, r0, #1
 80029ae:	d102      	bne.n	80029b6 <_write_r+0x1e>
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	b103      	cbz	r3, 80029b6 <_write_r+0x1e>
 80029b4:	6023      	str	r3, [r4, #0]
 80029b6:	bd38      	pop	{r3, r4, r5, pc}
 80029b8:	200000a0 	.word	0x200000a0

080029bc <_close_r>:
 80029bc:	b538      	push	{r3, r4, r5, lr}
 80029be:	4d06      	ldr	r5, [pc, #24]	; (80029d8 <_close_r+0x1c>)
 80029c0:	2300      	movs	r3, #0
 80029c2:	4604      	mov	r4, r0
 80029c4:	4608      	mov	r0, r1
 80029c6:	602b      	str	r3, [r5, #0]
 80029c8:	f7fd fffd 	bl	80009c6 <_close>
 80029cc:	1c43      	adds	r3, r0, #1
 80029ce:	d102      	bne.n	80029d6 <_close_r+0x1a>
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	b103      	cbz	r3, 80029d6 <_close_r+0x1a>
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	bd38      	pop	{r3, r4, r5, pc}
 80029d8:	200000a0 	.word	0x200000a0

080029dc <_fstat_r>:
 80029dc:	b538      	push	{r3, r4, r5, lr}
 80029de:	4d07      	ldr	r5, [pc, #28]	; (80029fc <_fstat_r+0x20>)
 80029e0:	2300      	movs	r3, #0
 80029e2:	4604      	mov	r4, r0
 80029e4:	4608      	mov	r0, r1
 80029e6:	4611      	mov	r1, r2
 80029e8:	602b      	str	r3, [r5, #0]
 80029ea:	f7fd fff8 	bl	80009de <_fstat>
 80029ee:	1c43      	adds	r3, r0, #1
 80029f0:	d102      	bne.n	80029f8 <_fstat_r+0x1c>
 80029f2:	682b      	ldr	r3, [r5, #0]
 80029f4:	b103      	cbz	r3, 80029f8 <_fstat_r+0x1c>
 80029f6:	6023      	str	r3, [r4, #0]
 80029f8:	bd38      	pop	{r3, r4, r5, pc}
 80029fa:	bf00      	nop
 80029fc:	200000a0 	.word	0x200000a0

08002a00 <_isatty_r>:
 8002a00:	b538      	push	{r3, r4, r5, lr}
 8002a02:	4d06      	ldr	r5, [pc, #24]	; (8002a1c <_isatty_r+0x1c>)
 8002a04:	2300      	movs	r3, #0
 8002a06:	4604      	mov	r4, r0
 8002a08:	4608      	mov	r0, r1
 8002a0a:	602b      	str	r3, [r5, #0]
 8002a0c:	f7fd fff7 	bl	80009fe <_isatty>
 8002a10:	1c43      	adds	r3, r0, #1
 8002a12:	d102      	bne.n	8002a1a <_isatty_r+0x1a>
 8002a14:	682b      	ldr	r3, [r5, #0]
 8002a16:	b103      	cbz	r3, 8002a1a <_isatty_r+0x1a>
 8002a18:	6023      	str	r3, [r4, #0]
 8002a1a:	bd38      	pop	{r3, r4, r5, pc}
 8002a1c:	200000a0 	.word	0x200000a0

08002a20 <_lseek_r>:
 8002a20:	b538      	push	{r3, r4, r5, lr}
 8002a22:	4d07      	ldr	r5, [pc, #28]	; (8002a40 <_lseek_r+0x20>)
 8002a24:	4604      	mov	r4, r0
 8002a26:	4608      	mov	r0, r1
 8002a28:	4611      	mov	r1, r2
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	602a      	str	r2, [r5, #0]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f7fd fff0 	bl	8000a14 <_lseek>
 8002a34:	1c43      	adds	r3, r0, #1
 8002a36:	d102      	bne.n	8002a3e <_lseek_r+0x1e>
 8002a38:	682b      	ldr	r3, [r5, #0]
 8002a3a:	b103      	cbz	r3, 8002a3e <_lseek_r+0x1e>
 8002a3c:	6023      	str	r3, [r4, #0]
 8002a3e:	bd38      	pop	{r3, r4, r5, pc}
 8002a40:	200000a0 	.word	0x200000a0

08002a44 <memcpy>:
 8002a44:	440a      	add	r2, r1
 8002a46:	4291      	cmp	r1, r2
 8002a48:	f100 33ff 	add.w	r3, r0, #4294967295
 8002a4c:	d100      	bne.n	8002a50 <memcpy+0xc>
 8002a4e:	4770      	bx	lr
 8002a50:	b510      	push	{r4, lr}
 8002a52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002a56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002a5a:	4291      	cmp	r1, r2
 8002a5c:	d1f9      	bne.n	8002a52 <memcpy+0xe>
 8002a5e:	bd10      	pop	{r4, pc}

08002a60 <memmove>:
 8002a60:	4288      	cmp	r0, r1
 8002a62:	b510      	push	{r4, lr}
 8002a64:	eb01 0402 	add.w	r4, r1, r2
 8002a68:	d902      	bls.n	8002a70 <memmove+0x10>
 8002a6a:	4284      	cmp	r4, r0
 8002a6c:	4623      	mov	r3, r4
 8002a6e:	d807      	bhi.n	8002a80 <memmove+0x20>
 8002a70:	1e43      	subs	r3, r0, #1
 8002a72:	42a1      	cmp	r1, r4
 8002a74:	d008      	beq.n	8002a88 <memmove+0x28>
 8002a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002a7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002a7e:	e7f8      	b.n	8002a72 <memmove+0x12>
 8002a80:	4402      	add	r2, r0
 8002a82:	4601      	mov	r1, r0
 8002a84:	428a      	cmp	r2, r1
 8002a86:	d100      	bne.n	8002a8a <memmove+0x2a>
 8002a88:	bd10      	pop	{r4, pc}
 8002a8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002a8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002a92:	e7f7      	b.n	8002a84 <memmove+0x24>

08002a94 <__malloc_lock>:
 8002a94:	4801      	ldr	r0, [pc, #4]	; (8002a9c <__malloc_lock+0x8>)
 8002a96:	f7ff baf3 	b.w	8002080 <__retarget_lock_acquire_recursive>
 8002a9a:	bf00      	nop
 8002a9c:	20000094 	.word	0x20000094

08002aa0 <__malloc_unlock>:
 8002aa0:	4801      	ldr	r0, [pc, #4]	; (8002aa8 <__malloc_unlock+0x8>)
 8002aa2:	f7ff baee 	b.w	8002082 <__retarget_lock_release_recursive>
 8002aa6:	bf00      	nop
 8002aa8:	20000094 	.word	0x20000094

08002aac <_realloc_r>:
 8002aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ab0:	4680      	mov	r8, r0
 8002ab2:	4614      	mov	r4, r2
 8002ab4:	460e      	mov	r6, r1
 8002ab6:	b921      	cbnz	r1, 8002ac2 <_realloc_r+0x16>
 8002ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002abc:	4611      	mov	r1, r2
 8002abe:	f7ff bbb3 	b.w	8002228 <_malloc_r>
 8002ac2:	b92a      	cbnz	r2, 8002ad0 <_realloc_r+0x24>
 8002ac4:	f7ff fb44 	bl	8002150 <_free_r>
 8002ac8:	4625      	mov	r5, r4
 8002aca:	4628      	mov	r0, r5
 8002acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ad0:	f000 f82e 	bl	8002b30 <_malloc_usable_size_r>
 8002ad4:	4284      	cmp	r4, r0
 8002ad6:	4607      	mov	r7, r0
 8002ad8:	d802      	bhi.n	8002ae0 <_realloc_r+0x34>
 8002ada:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002ade:	d812      	bhi.n	8002b06 <_realloc_r+0x5a>
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	4640      	mov	r0, r8
 8002ae4:	f7ff fba0 	bl	8002228 <_malloc_r>
 8002ae8:	4605      	mov	r5, r0
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d0ed      	beq.n	8002aca <_realloc_r+0x1e>
 8002aee:	42bc      	cmp	r4, r7
 8002af0:	4622      	mov	r2, r4
 8002af2:	4631      	mov	r1, r6
 8002af4:	bf28      	it	cs
 8002af6:	463a      	movcs	r2, r7
 8002af8:	f7ff ffa4 	bl	8002a44 <memcpy>
 8002afc:	4631      	mov	r1, r6
 8002afe:	4640      	mov	r0, r8
 8002b00:	f7ff fb26 	bl	8002150 <_free_r>
 8002b04:	e7e1      	b.n	8002aca <_realloc_r+0x1e>
 8002b06:	4635      	mov	r5, r6
 8002b08:	e7df      	b.n	8002aca <_realloc_r+0x1e>
	...

08002b0c <_read_r>:
 8002b0c:	b538      	push	{r3, r4, r5, lr}
 8002b0e:	4d07      	ldr	r5, [pc, #28]	; (8002b2c <_read_r+0x20>)
 8002b10:	4604      	mov	r4, r0
 8002b12:	4608      	mov	r0, r1
 8002b14:	4611      	mov	r1, r2
 8002b16:	2200      	movs	r2, #0
 8002b18:	602a      	str	r2, [r5, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f7fd ff1a 	bl	8000954 <_read>
 8002b20:	1c43      	adds	r3, r0, #1
 8002b22:	d102      	bne.n	8002b2a <_read_r+0x1e>
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	b103      	cbz	r3, 8002b2a <_read_r+0x1e>
 8002b28:	6023      	str	r3, [r4, #0]
 8002b2a:	bd38      	pop	{r3, r4, r5, pc}
 8002b2c:	200000a0 	.word	0x200000a0

08002b30 <_malloc_usable_size_r>:
 8002b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b34:	1f18      	subs	r0, r3, #4
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	bfbc      	itt	lt
 8002b3a:	580b      	ldrlt	r3, [r1, r0]
 8002b3c:	18c0      	addlt	r0, r0, r3
 8002b3e:	4770      	bx	lr

08002b40 <_init>:
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b42:	bf00      	nop
 8002b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b46:	bc08      	pop	{r3}
 8002b48:	469e      	mov	lr, r3
 8002b4a:	4770      	bx	lr

08002b4c <_fini>:
 8002b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4e:	bf00      	nop
 8002b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b52:	bc08      	pop	{r3}
 8002b54:	469e      	mov	lr, r3
 8002b56:	4770      	bx	lr
