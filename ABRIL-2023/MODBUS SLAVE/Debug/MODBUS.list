
MODBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071cc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08007358  08007358  00017358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074e0  080074e0  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  080074e0  080074e0  000174e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074e8  080074e8  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074e8  080074e8  000174e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074ec  080074ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080074f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          0000027c  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000308  20000308  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e6be  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002651  00000000  00000000  0002e77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b28  00000000  00000000  00030dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a30  00000000  00000000  000318f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002138b  00000000  00000000  00032328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e85e  00000000  00000000  000536b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5846  00000000  00000000  00061f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127757  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002fac  00000000  00000000  001277a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800733c 	.word	0x0800733c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	0800733c 	.word	0x0800733c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_ldivmod>:
 8000a74:	b97b      	cbnz	r3, 8000a96 <__aeabi_ldivmod+0x22>
 8000a76:	b972      	cbnz	r2, 8000a96 <__aeabi_ldivmod+0x22>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	bfbe      	ittt	lt
 8000a7c:	2000      	movlt	r0, #0
 8000a7e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000a82:	e006      	blt.n	8000a92 <__aeabi_ldivmod+0x1e>
 8000a84:	bf08      	it	eq
 8000a86:	2800      	cmpeq	r0, #0
 8000a88:	bf1c      	itt	ne
 8000a8a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000a8e:	f04f 30ff 	movne.w	r0, #4294967295
 8000a92:	f000 b9f5 	b.w	8000e80 <__aeabi_idiv0>
 8000a96:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a9a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9e:	2900      	cmp	r1, #0
 8000aa0:	db09      	blt.n	8000ab6 <__aeabi_ldivmod+0x42>
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db1a      	blt.n	8000adc <__aeabi_ldivmod+0x68>
 8000aa6:	f000 f883 	bl	8000bb0 <__udivmoddi4>
 8000aaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab2:	b004      	add	sp, #16
 8000ab4:	4770      	bx	lr
 8000ab6:	4240      	negs	r0, r0
 8000ab8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db1b      	blt.n	8000af8 <__aeabi_ldivmod+0x84>
 8000ac0:	f000 f876 	bl	8000bb0 <__udivmoddi4>
 8000ac4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000acc:	b004      	add	sp, #16
 8000ace:	4240      	negs	r0, r0
 8000ad0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad4:	4252      	negs	r2, r2
 8000ad6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ada:	4770      	bx	lr
 8000adc:	4252      	negs	r2, r2
 8000ade:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ae2:	f000 f865 	bl	8000bb0 <__udivmoddi4>
 8000ae6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aee:	b004      	add	sp, #16
 8000af0:	4240      	negs	r0, r0
 8000af2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af6:	4770      	bx	lr
 8000af8:	4252      	negs	r2, r2
 8000afa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afe:	f000 f857 	bl	8000bb0 <__udivmoddi4>
 8000b02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0a:	b004      	add	sp, #16
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b9aa 	b.w	8000e80 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f83c 	bl	8000bb0 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2lz>:
 8000b44:	b538      	push	{r3, r4, r5, lr}
 8000b46:	2200      	movs	r2, #0
 8000b48:	2300      	movs	r3, #0
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	460d      	mov	r5, r1
 8000b4e:	f7ff ff69 	bl	8000a24 <__aeabi_dcmplt>
 8000b52:	b928      	cbnz	r0, 8000b60 <__aeabi_d2lz+0x1c>
 8000b54:	4620      	mov	r0, r4
 8000b56:	4629      	mov	r1, r5
 8000b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b5c:	f000 b80a 	b.w	8000b74 <__aeabi_d2ulz>
 8000b60:	4620      	mov	r0, r4
 8000b62:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000b66:	f000 f805 	bl	8000b74 <__aeabi_d2ulz>
 8000b6a:	4240      	negs	r0, r0
 8000b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b70:	bd38      	pop	{r3, r4, r5, pc}
 8000b72:	bf00      	nop

08000b74 <__aeabi_d2ulz>:
 8000b74:	b5d0      	push	{r4, r6, r7, lr}
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <__aeabi_d2ulz+0x34>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	4606      	mov	r6, r0
 8000b7c:	460f      	mov	r7, r1
 8000b7e:	f7ff fcdf 	bl	8000540 <__aeabi_dmul>
 8000b82:	f000 f97f 	bl	8000e84 <__aeabi_d2uiz>
 8000b86:	4604      	mov	r4, r0
 8000b88:	f7ff fc60 	bl	800044c <__aeabi_ui2d>
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <__aeabi_d2ulz+0x38>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f7ff fcd6 	bl	8000540 <__aeabi_dmul>
 8000b94:	4602      	mov	r2, r0
 8000b96:	460b      	mov	r3, r1
 8000b98:	4630      	mov	r0, r6
 8000b9a:	4639      	mov	r1, r7
 8000b9c:	f7ff fb18 	bl	80001d0 <__aeabi_dsub>
 8000ba0:	f000 f970 	bl	8000e84 <__aeabi_d2uiz>
 8000ba4:	4621      	mov	r1, r4
 8000ba6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ba8:	3df00000 	.word	0x3df00000
 8000bac:	41f00000 	.word	0x41f00000

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468e      	mov	lr, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d14d      	bne.n	8000c5a <__udivmoddi4+0xaa>
 8000bbe:	428a      	cmp	r2, r1
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0xe8>
 8000bc4:	fab2 f282 	clz	r2, r2
 8000bc8:	b152      	cbz	r2, 8000be0 <__udivmoddi4+0x30>
 8000bca:	fa01 f302 	lsl.w	r3, r1, r2
 8000bce:	f1c2 0120 	rsb	r1, r2, #32
 8000bd2:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bda:	ea41 0e03 	orr.w	lr, r1, r3
 8000bde:	4094      	lsls	r4, r2
 8000be0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be4:	0c21      	lsrs	r1, r4, #16
 8000be6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bea:	fa1f f78c 	uxth.w	r7, ip
 8000bee:	fb08 e316 	mls	r3, r8, r6, lr
 8000bf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf6:	fb06 f107 	mul.w	r1, r6, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x64>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c06:	f080 811f 	bcs.w	8000e48 <__udivmoddi4+0x298>
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	f240 811c 	bls.w	8000e48 <__udivmoddi4+0x298>
 8000c10:	3e02      	subs	r6, #2
 8000c12:	4463      	add	r3, ip
 8000c14:	1a5b      	subs	r3, r3, r1
 8000c16:	b2a4      	uxth	r4, r4
 8000c18:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c1c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c24:	fb00 f707 	mul.w	r7, r0, r7
 8000c28:	42a7      	cmp	r7, r4
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x92>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c34:	f080 810a 	bcs.w	8000e4c <__udivmoddi4+0x29c>
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	f240 8107 	bls.w	8000e4c <__udivmoddi4+0x29c>
 8000c3e:	4464      	add	r4, ip
 8000c40:	3802      	subs	r0, #2
 8000c42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c46:	1be4      	subs	r4, r4, r7
 8000c48:	2600      	movs	r6, #0
 8000c4a:	b11d      	cbz	r5, 8000c54 <__udivmoddi4+0xa4>
 8000c4c:	40d4      	lsrs	r4, r2
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e9c5 4300 	strd	r4, r3, [r5]
 8000c54:	4631      	mov	r1, r6
 8000c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d909      	bls.n	8000c72 <__udivmoddi4+0xc2>
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	f000 80ef 	beq.w	8000e42 <__udivmoddi4+0x292>
 8000c64:	2600      	movs	r6, #0
 8000c66:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	fab3 f683 	clz	r6, r3
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d14a      	bne.n	8000d10 <__udivmoddi4+0x160>
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xd4>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 80f9 	bhi.w	8000e76 <__udivmoddi4+0x2c6>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb61 0303 	sbc.w	r3, r1, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e0      	beq.n	8000c54 <__udivmoddi4+0xa4>
 8000c92:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c96:	e7dd      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000c98:	b902      	cbnz	r2, 8000c9c <__udivmoddi4+0xec>
 8000c9a:	deff      	udf	#255	; 0xff
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f040 8092 	bne.w	8000dca <__udivmoddi4+0x21a>
 8000ca6:	eba1 010c 	sub.w	r1, r1, ip
 8000caa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	2601      	movs	r6, #1
 8000cb4:	0c20      	lsrs	r0, r4, #16
 8000cb6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cba:	fb07 1113 	mls	r1, r7, r3, r1
 8000cbe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc2:	fb0e f003 	mul.w	r0, lr, r3
 8000cc6:	4288      	cmp	r0, r1
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x12c>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x12a>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f200 80cb 	bhi.w	8000e70 <__udivmoddi4+0x2c0>
 8000cda:	4643      	mov	r3, r8
 8000cdc:	1a09      	subs	r1, r1, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce4:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cec:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x156>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x154>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 80bb 	bhi.w	8000e7a <__udivmoddi4+0x2ca>
 8000d04:	4608      	mov	r0, r1
 8000d06:	eba4 040e 	sub.w	r4, r4, lr
 8000d0a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0e:	e79c      	b.n	8000c4a <__udivmoddi4+0x9a>
 8000d10:	f1c6 0720 	rsb	r7, r6, #32
 8000d14:	40b3      	lsls	r3, r6
 8000d16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d22:	fa01 f306 	lsl.w	r3, r1, r6
 8000d26:	431c      	orrs	r4, r3
 8000d28:	40f9      	lsrs	r1, r7
 8000d2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d32:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d40:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d44:	fb08 f00e 	mul.w	r0, r8, lr
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4e:	d90b      	bls.n	8000d68 <__udivmoddi4+0x1b8>
 8000d50:	eb1c 0101 	adds.w	r1, ip, r1
 8000d54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d58:	f080 8088 	bcs.w	8000e6c <__udivmoddi4+0x2bc>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f240 8085 	bls.w	8000e6c <__udivmoddi4+0x2bc>
 8000d62:	f1a8 0802 	sub.w	r8, r8, #2
 8000d66:	4461      	add	r1, ip
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d70:	fb09 1110 	mls	r1, r9, r0, r1
 8000d74:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d78:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d7c:	458e      	cmp	lr, r1
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1e2>
 8000d80:	eb1c 0101 	adds.w	r1, ip, r1
 8000d84:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d88:	d26c      	bcs.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8a:	458e      	cmp	lr, r1
 8000d8c:	d96a      	bls.n	8000e64 <__udivmoddi4+0x2b4>
 8000d8e:	3802      	subs	r0, #2
 8000d90:	4461      	add	r1, ip
 8000d92:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d96:	fba0 9402 	umull	r9, r4, r0, r2
 8000d9a:	eba1 010e 	sub.w	r1, r1, lr
 8000d9e:	42a1      	cmp	r1, r4
 8000da0:	46c8      	mov	r8, r9
 8000da2:	46a6      	mov	lr, r4
 8000da4:	d356      	bcc.n	8000e54 <__udivmoddi4+0x2a4>
 8000da6:	d053      	beq.n	8000e50 <__udivmoddi4+0x2a0>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x212>
 8000daa:	ebb3 0208 	subs.w	r2, r3, r8
 8000dae:	eb61 010e 	sbc.w	r1, r1, lr
 8000db2:	fa01 f707 	lsl.w	r7, r1, r7
 8000db6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dba:	40f1      	lsrs	r1, r6
 8000dbc:	431f      	orrs	r7, r3
 8000dbe:	e9c5 7100 	strd	r7, r1, [r5]
 8000dc2:	2600      	movs	r6, #0
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	f1c2 0320 	rsb	r3, r2, #32
 8000dce:	40d8      	lsrs	r0, r3
 8000dd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd4:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd8:	4091      	lsls	r1, r2
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dec:	0c0b      	lsrs	r3, r1, #16
 8000dee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000df2:	fb00 f60e 	mul.w	r6, r0, lr
 8000df6:	429e      	cmp	r6, r3
 8000df8:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x260>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e06:	d22f      	bcs.n	8000e68 <__udivmoddi4+0x2b8>
 8000e08:	429e      	cmp	r6, r3
 8000e0a:	d92d      	bls.n	8000e68 <__udivmoddi4+0x2b8>
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	4463      	add	r3, ip
 8000e10:	1b9b      	subs	r3, r3, r6
 8000e12:	b289      	uxth	r1, r1
 8000e14:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e18:	fb07 3316 	mls	r3, r7, r6, r3
 8000e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e20:	fb06 f30e 	mul.w	r3, r6, lr
 8000e24:	428b      	cmp	r3, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x28a>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e30:	d216      	bcs.n	8000e60 <__udivmoddi4+0x2b0>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d914      	bls.n	8000e60 <__udivmoddi4+0x2b0>
 8000e36:	3e02      	subs	r6, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	1ac9      	subs	r1, r1, r3
 8000e3c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e40:	e738      	b.n	8000cb4 <__udivmoddi4+0x104>
 8000e42:	462e      	mov	r6, r5
 8000e44:	4628      	mov	r0, r5
 8000e46:	e705      	b.n	8000c54 <__udivmoddi4+0xa4>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	e6e3      	b.n	8000c14 <__udivmoddi4+0x64>
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	e6f8      	b.n	8000c42 <__udivmoddi4+0x92>
 8000e50:	454b      	cmp	r3, r9
 8000e52:	d2a9      	bcs.n	8000da8 <__udivmoddi4+0x1f8>
 8000e54:	ebb9 0802 	subs.w	r8, r9, r2
 8000e58:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e5c:	3801      	subs	r0, #1
 8000e5e:	e7a3      	b.n	8000da8 <__udivmoddi4+0x1f8>
 8000e60:	4646      	mov	r6, r8
 8000e62:	e7ea      	b.n	8000e3a <__udivmoddi4+0x28a>
 8000e64:	4620      	mov	r0, r4
 8000e66:	e794      	b.n	8000d92 <__udivmoddi4+0x1e2>
 8000e68:	4640      	mov	r0, r8
 8000e6a:	e7d1      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e6c:	46d0      	mov	r8, sl
 8000e6e:	e77b      	b.n	8000d68 <__udivmoddi4+0x1b8>
 8000e70:	3b02      	subs	r3, #2
 8000e72:	4461      	add	r1, ip
 8000e74:	e732      	b.n	8000cdc <__udivmoddi4+0x12c>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e709      	b.n	8000c8e <__udivmoddi4+0xde>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	e742      	b.n	8000d06 <__udivmoddi4+0x156>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <__aeabi_d2uiz>:
 8000e84:	004a      	lsls	r2, r1, #1
 8000e86:	d211      	bcs.n	8000eac <__aeabi_d2uiz+0x28>
 8000e88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e8c:	d211      	bcs.n	8000eb2 <__aeabi_d2uiz+0x2e>
 8000e8e:	d50d      	bpl.n	8000eac <__aeabi_d2uiz+0x28>
 8000e90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e98:	d40e      	bmi.n	8000eb8 <__aeabi_d2uiz+0x34>
 8000e9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ea2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ea6:	fa23 f002 	lsr.w	r0, r3, r2
 8000eaa:	4770      	bx	lr
 8000eac:	f04f 0000 	mov.w	r0, #0
 8000eb0:	4770      	bx	lr
 8000eb2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000eb6:	d102      	bne.n	8000ebe <__aeabi_d2uiz+0x3a>
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	4770      	bx	lr
 8000ebe:	f04f 0000 	mov.w	r0, #0
 8000ec2:	4770      	bx	lr

08000ec4 <app_init>:
rbuart_t rb_rx;
rbuart_t rb_tx;
uint8_t rx_data[MAX_RX_SIZE];
uint8_t tx_data[MAX_TX_SIZE];
/*Function definition -------------------------------------------*/
void app_init(void){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	/*Init*/
	rbuart_init(&rb_tx, &huart2, tx_data, MAX_TX_SIZE);
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <app_init+0x28>)
 8000ecc:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <app_init+0x2c>)
 8000ece:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <app_init+0x30>)
 8000ed0:	f006 f908 	bl	80070e4 <rbuart_init>
	rbuart_init(&rb_rx, &huart2, rx_data, MAX_RX_SIZE);
 8000ed4:	2364      	movs	r3, #100	; 0x64
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <app_init+0x34>)
 8000ed8:	4905      	ldr	r1, [pc, #20]	; (8000ef0 <app_init+0x2c>)
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <app_init+0x38>)
 8000edc:	f006 f902 	bl	80070e4 <rbuart_init>
	rbuart_start_receive(&rb_rx);
 8000ee0:	4806      	ldr	r0, [pc, #24]	; (8000efc <app_init+0x38>)
 8000ee2:	f006 f9ab 	bl	800723c <rbuart_start_receive>

	return;
 8000ee6:	bf00      	nop
}
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	2000014c 	.word	0x2000014c
 8000ef0:	200002ac 	.word	0x200002ac
 8000ef4:	200000c8 	.word	0x200000c8
 8000ef8:	200000e8 	.word	0x200000e8
 8000efc:	200000a8 	.word	0x200000a8

08000f00 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	rbuart_tx_callback(&rb_tx);
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <HAL_UART_TxCpltCallback+0x18>)
 8000f0a:	f006 f909 	bl	8007120 <rbuart_tx_callback>
	return;
 8000f0e:	bf00      	nop
}
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000c8 	.word	0x200000c8

08000f1c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

	rbuart_rx_callback(&rb_rx, &rb_rx.rawByte, 1);
 8000f24:	2201      	movs	r2, #1
 8000f26:	4904      	ldr	r1, [pc, #16]	; (8000f38 <HAL_UART_RxCpltCallback+0x1c>)
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <HAL_UART_RxCpltCallback+0x20>)
 8000f2a:	f006 f923 	bl	8007174 <rbuart_rx_callback>
	return;
 8000f2e:	bf00      	nop
}
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000c4 	.word	0x200000c4
 8000f3c:	200000a8 	.word	0x200000a8

08000f40 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
 8000f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a24      	ldr	r2, [pc, #144]	; (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <MX_GPIO_Init+0xb0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f94:	4817      	ldr	r0, [pc, #92]	; (8000ff4 <MX_GPIO_Init+0xb4>)
 8000f96:	f001 f835 	bl	8002004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4619      	mov	r1, r3
 8000fac:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <MX_GPIO_Init+0xb8>)
 8000fae:	f000 fe8d 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW2_Pin;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <MX_GPIO_Init+0xb8>)
 8000fc6:	f000 fe81 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <MX_GPIO_Init+0xb4>)
 8000fe4:	f000 fe72 	bl	8001ccc <HAL_GPIO_Init>

}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020c00 	.word	0x40020c00
 8000ff8:	40020000 	.word	0x40020000

08000ffc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001004:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001008:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	2b00      	cmp	r3, #0
 8001012:	d013      	beq.n	800103c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001014:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001018:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800101c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00b      	beq.n	800103c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001024:	e000      	b.n	8001028 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001026:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001028:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f9      	beq.n	8001026 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001032:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800103c:	687b      	ldr	r3, [r7, #4]
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <lwprintf_my_out_func>:
 * \param[in]       ch: Character to output
 * \param[in]       p: \ref lwprintf_t handle
 * \return          ch on success, 0 on failure
 */
static int
lwprintf_my_out_func(int ch, lwprintf_t* p) {
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
    uint8_t c = (uint8_t)ch;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]

    /* Don't print zero */
    if (c == '\0') {
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <lwprintf_my_out_func+0x18>
        return ch;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	e004      	b.n	800106c <lwprintf_my_out_func+0x22>
    }
    ITM_SendChar(ch);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ffc9 	bl	8000ffc <ITM_SendChar>
    return ch;
 800106a:	687b      	ldr	r3, [r7, #4]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <read_serial>:
            break;
        default: break;
    }
}

int32_t read_serial(uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	460b      	mov	r3, r1
 8001082:	817b      	strh	r3, [r7, #10]
	uint32_t tickStar = HAL_GetTick();
 8001084:	f000 fc72 	bl	800196c <HAL_GetTick>
 8001088:	6178      	str	r0, [r7, #20]
	do{
		if((HAL_GetTick() - tickStar)>= byte_timeout_ms){
 800108a:	f000 fc6f 	bl	800196c <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	1ad2      	subs	r2, r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	d301      	bcc.n	800109e <read_serial+0x2a>
			return 0;
 800109a:	2300      	movs	r3, #0
 800109c:	e00d      	b.n	80010ba <read_serial+0x46>
		}
	}
	while(rbuart_get_receiveSize(&rb_rx) < count);
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <read_serial+0x50>)
 80010a0:	f006 f8ef 	bl	8007282 <rbuart_get_receiveSize>
 80010a4:	4602      	mov	r2, r0
 80010a6:	897b      	ldrh	r3, [r7, #10]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d3ee      	bcc.n	800108a <read_serial+0x16>
	return rbuart_get_data(&rb_rx, buf, count);
 80010ac:	897b      	ldrh	r3, [r7, #10]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68f9      	ldr	r1, [r7, #12]
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <read_serial+0x50>)
 80010b4:	f006 f8d3 	bl	800725e <rbuart_get_data>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000a8 	.word	0x200000a8

080010c8 <write_serial>:


int32_t write_serial(const uint8_t* buf, uint16_t count, int32_t byte_timeout_ms, void* arg) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	460b      	mov	r3, r1
 80010d6:	817b      	strh	r3, [r7, #10]
	(void)byte_timeout_ms;
	return rbuart_send(&rb_tx, buf, count);
 80010d8:	897b      	ldrh	r3, [r7, #10]
 80010da:	461a      	mov	r2, r3
 80010dc:	68f9      	ldr	r1, [r7, #12]
 80010de:	4804      	ldr	r0, [pc, #16]	; (80010f0 <write_serial+0x28>)
 80010e0:	f006 f86d 	bl	80071be <rbuart_send>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000c8 	.word	0x200000c8

080010f4 <handle_read_coils>:
#define RTU_SERVER_ADDRESS 1
// A single nmbs_bitfield variable can keep 2000 coils
nmbs_bitfield server_coils = {0};
uint16_t server_registers[REGS_ADDR_MAX] = {1,2,3,4,5,6,7,78,8};

nmbs_error handle_read_coils(uint16_t address, uint16_t quantity, nmbs_bitfield coils_out, void *arg) {
 80010f4:	b480      	push	{r7}
 80010f6:	b087      	sub	sp, #28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60ba      	str	r2, [r7, #8]
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	4603      	mov	r3, r0
 8001100:	81fb      	strh	r3, [r7, #14]
 8001102:	460b      	mov	r3, r1
 8001104:	81bb      	strh	r3, [r7, #12]
  if (address + quantity > COILS_ADDR_MAX + 1)
 8001106:	89fa      	ldrh	r2, [r7, #14]
 8001108:	89bb      	ldrh	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	2b65      	cmp	r3, #101	; 0x65
 800110e:	dd01      	ble.n	8001114 <handle_read_coils+0x20>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8001110:	2302      	movs	r3, #2
 8001112:	e069      	b.n	80011e8 <handle_read_coils+0xf4>

  // Read our coils values into coils_out
  for (int i = 0; i < quantity; i++) {
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	e061      	b.n	80011de <handle_read_coils+0xea>
    bool value = nmbs_bitfield_read(server_coils, address + i);
 800111a:	89fa      	ldrh	r2, [r7, #14]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	4413      	add	r3, r2
 8001120:	2b00      	cmp	r3, #0
 8001122:	da00      	bge.n	8001126 <handle_read_coils+0x32>
 8001124:	3307      	adds	r3, #7
 8001126:	10db      	asrs	r3, r3, #3
 8001128:	461a      	mov	r2, r3
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <handle_read_coils+0x100>)
 800112c:	5c9b      	ldrb	r3, [r3, r2]
 800112e:	4619      	mov	r1, r3
 8001130:	89fa      	ldrh	r2, [r7, #14]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	4413      	add	r3, r2
 8001136:	425a      	negs	r2, r3
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	f002 0207 	and.w	r2, r2, #7
 8001140:	bf58      	it	pl
 8001142:	4253      	negpl	r3, r2
 8001144:	fa41 f303 	asr.w	r3, r1, r3
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	bf14      	ite	ne
 8001150:	2301      	movne	r3, #1
 8001152:	2300      	moveq	r3, #0
 8001154:	74fb      	strb	r3, [r7, #19]
    nmbs_bitfield_write(coils_out, i, value);
 8001156:	7cfb      	ldrb	r3, [r7, #19]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d019      	beq.n	8001190 <handle_read_coils+0x9c>
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	2b00      	cmp	r3, #0
 8001160:	da00      	bge.n	8001164 <handle_read_coils+0x70>
 8001162:	3307      	adds	r3, #7
 8001164:	10db      	asrs	r3, r3, #3
 8001166:	461a      	mov	r2, r3
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b25a      	sxtb	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	4259      	negs	r1, r3
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	f001 0107 	and.w	r1, r1, #7
 800117c:	bf58      	it	pl
 800117e:	424b      	negpl	r3, r1
 8001180:	2101      	movs	r1, #1
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	b25b      	sxtb	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b25b      	sxtb	r3, r3
 800118c:	b2da      	uxtb	r2, r3
 800118e:	e01a      	b.n	80011c6 <handle_read_coils+0xd2>
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b00      	cmp	r3, #0
 8001194:	da00      	bge.n	8001198 <handle_read_coils+0xa4>
 8001196:	3307      	adds	r3, #7
 8001198:	10db      	asrs	r3, r3, #3
 800119a:	461a      	mov	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b25a      	sxtb	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	4259      	negs	r1, r3
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	f001 0107 	and.w	r1, r1, #7
 80011b0:	bf58      	it	pl
 80011b2:	424b      	negpl	r3, r1
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	b25b      	sxtb	r3, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	b25b      	sxtb	r3, r3
 80011c0:	4013      	ands	r3, r2
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da00      	bge.n	80011ce <handle_read_coils+0xda>
 80011cc:	3307      	adds	r3, #7
 80011ce:	10db      	asrs	r3, r3, #3
 80011d0:	4619      	mov	r1, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	440b      	add	r3, r1
 80011d6:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < quantity; i++) {
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3301      	adds	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
 80011de:	89bb      	ldrh	r3, [r7, #12]
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	db99      	blt.n	800111a <handle_read_coils+0x26>
  }

  return NMBS_ERROR_NONE;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	371c      	adds	r7, #28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	200001b0 	.word	0x200001b0

080011f8 <handle_write_multiple_coils>:

nmbs_error handle_write_multiple_coils(uint16_t address, uint16_t quantity, const nmbs_bitfield coils, void *arg) {
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60ba      	str	r2, [r7, #8]
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4603      	mov	r3, r0
 8001204:	81fb      	strh	r3, [r7, #14]
 8001206:	460b      	mov	r3, r1
 8001208:	81bb      	strh	r3, [r7, #12]
  if (address + quantity > COILS_ADDR_MAX + 1)
 800120a:	89fa      	ldrh	r2, [r7, #14]
 800120c:	89bb      	ldrh	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	2b65      	cmp	r3, #101	; 0x65
 8001212:	dd01      	ble.n	8001218 <handle_write_multiple_coils+0x20>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8001214:	2302      	movs	r3, #2
 8001216:	e067      	b.n	80012e8 <handle_write_multiple_coils+0xf0>

  // Write coils values to our server_coils
  for (int i = 0; i < quantity; i++) {
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	e05f      	b.n	80012de <handle_write_multiple_coils+0xe6>
    nmbs_bitfield_write(server_coils, address + i, nmbs_bitfield_read(coils, i));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b00      	cmp	r3, #0
 8001222:	da00      	bge.n	8001226 <handle_write_multiple_coils+0x2e>
 8001224:	3307      	adds	r3, #7
 8001226:	10db      	asrs	r3, r3, #3
 8001228:	461a      	mov	r2, r3
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	425a      	negs	r2, r3
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	f002 0207 	and.w	r2, r2, #7
 800123e:	bf58      	it	pl
 8001240:	4253      	negpl	r3, r2
 8001242:	fa41 f303 	asr.w	r3, r1, r3
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d01c      	beq.n	8001288 <handle_write_multiple_coils+0x90>
 800124e:	89fa      	ldrh	r2, [r7, #14]
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	4413      	add	r3, r2
 8001254:	2b00      	cmp	r3, #0
 8001256:	da00      	bge.n	800125a <handle_write_multiple_coils+0x62>
 8001258:	3307      	adds	r3, #7
 800125a:	10db      	asrs	r3, r3, #3
 800125c:	461a      	mov	r2, r3
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <handle_write_multiple_coils+0xfc>)
 8001260:	5c9b      	ldrb	r3, [r3, r2]
 8001262:	b25a      	sxtb	r2, r3
 8001264:	89f9      	ldrh	r1, [r7, #14]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	440b      	add	r3, r1
 800126a:	4259      	negs	r1, r3
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	f001 0107 	and.w	r1, r1, #7
 8001274:	bf58      	it	pl
 8001276:	424b      	negpl	r3, r1
 8001278:	2101      	movs	r1, #1
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	b25b      	sxtb	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b25b      	sxtb	r3, r3
 8001284:	b2da      	uxtb	r2, r3
 8001286:	e01d      	b.n	80012c4 <handle_write_multiple_coils+0xcc>
 8001288:	89fa      	ldrh	r2, [r7, #14]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	4413      	add	r3, r2
 800128e:	2b00      	cmp	r3, #0
 8001290:	da00      	bge.n	8001294 <handle_write_multiple_coils+0x9c>
 8001292:	3307      	adds	r3, #7
 8001294:	10db      	asrs	r3, r3, #3
 8001296:	461a      	mov	r2, r3
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <handle_write_multiple_coils+0xfc>)
 800129a:	5c9b      	ldrb	r3, [r3, r2]
 800129c:	b25a      	sxtb	r2, r3
 800129e:	89f9      	ldrh	r1, [r7, #14]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	440b      	add	r3, r1
 80012a4:	4259      	negs	r1, r3
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	f001 0107 	and.w	r1, r1, #7
 80012ae:	bf58      	it	pl
 80012b0:	424b      	negpl	r3, r1
 80012b2:	2101      	movs	r1, #1
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	43db      	mvns	r3, r3
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	4013      	ands	r3, r2
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	89f9      	ldrh	r1, [r7, #14]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	440b      	add	r3, r1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	da00      	bge.n	80012d0 <handle_write_multiple_coils+0xd8>
 80012ce:	3307      	adds	r3, #7
 80012d0:	10db      	asrs	r3, r3, #3
 80012d2:	4619      	mov	r1, r3
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <handle_write_multiple_coils+0xfc>)
 80012d6:	545a      	strb	r2, [r3, r1]
  for (int i = 0; i < quantity; i++) {
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	89bb      	ldrh	r3, [r7, #12]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	db9b      	blt.n	800121e <handle_write_multiple_coils+0x26>
  }

  return NMBS_ERROR_NONE;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	200001b0 	.word	0x200001b0

080012f8 <handler_read_holding_registers>:

nmbs_error handler_read_holding_registers(uint16_t address, uint16_t quantity, uint16_t* registers_out, void *arg) {
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60ba      	str	r2, [r7, #8]
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4603      	mov	r3, r0
 8001304:	81fb      	strh	r3, [r7, #14]
 8001306:	460b      	mov	r3, r1
 8001308:	81bb      	strh	r3, [r7, #12]
  if (address + quantity > REGS_ADDR_MAX + 1)
 800130a:	89fa      	ldrh	r2, [r7, #14]
 800130c:	89bb      	ldrh	r3, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	2b21      	cmp	r3, #33	; 0x21
 8001312:	dd01      	ble.n	8001318 <handler_read_holding_registers+0x20>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8001314:	2302      	movs	r3, #2
 8001316:	e015      	b.n	8001344 <handler_read_holding_registers+0x4c>

  // Read our registers values into registers_out
  for (int i = 0; i < quantity; i++)
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e00d      	b.n	800133a <handler_read_holding_registers+0x42>
    registers_out[i] = server_registers[address + i];
 800131e:	89fa      	ldrh	r2, [r7, #14]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	441a      	add	r2, r3
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	440b      	add	r3, r1
 800132c:	4908      	ldr	r1, [pc, #32]	; (8001350 <handler_read_holding_registers+0x58>)
 800132e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001332:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i < quantity; i++)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3301      	adds	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	89bb      	ldrh	r3, [r7, #12]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	429a      	cmp	r2, r3
 8001340:	dbed      	blt.n	800131e <handler_read_holding_registers+0x26>

  return NMBS_ERROR_NONE;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	371c      	adds	r7, #28
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	20000040 	.word	0x20000040

08001354 <handle_write_multiple_registers>:


nmbs_error handle_write_multiple_registers(uint16_t address, uint16_t quantity, const uint16_t* registers, void *arg) {
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	60ba      	str	r2, [r7, #8]
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4603      	mov	r3, r0
 8001360:	81fb      	strh	r3, [r7, #14]
 8001362:	460b      	mov	r3, r1
 8001364:	81bb      	strh	r3, [r7, #12]
  if (address + quantity > REGS_ADDR_MAX + 1)
 8001366:	89fa      	ldrh	r2, [r7, #14]
 8001368:	89bb      	ldrh	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	2b21      	cmp	r3, #33	; 0x21
 800136e:	dd01      	ble.n	8001374 <handle_write_multiple_registers+0x20>
    return NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS;
 8001370:	2302      	movs	r3, #2
 8001372:	e015      	b.n	80013a0 <handle_write_multiple_registers+0x4c>

  // Write registers values to our server_registers
  for (int i = 0; i < quantity; i++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e00d      	b.n	8001396 <handle_write_multiple_registers+0x42>
    server_registers[address + i] = registers[i];
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	441a      	add	r2, r3
 8001382:	89f9      	ldrh	r1, [r7, #14]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	440b      	add	r3, r1
 8001388:	8811      	ldrh	r1, [r2, #0]
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <handle_write_multiple_registers+0x58>)
 800138c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < quantity; i++)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	89bb      	ldrh	r3, [r7, #12]
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	429a      	cmp	r2, r3
 800139c:	dbed      	blt.n	800137a <handle_write_multiple_registers+0x26>

  return NMBS_ERROR_NONE;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	20000040 	.word	0x20000040

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b0e8      	sub	sp, #416	; 0x1a0
 80013b4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint8_t rxdata[20] = {0};
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013bc:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ca:	f000 fa69 	bl	80018a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ce:	f000 f877 	bl	80014c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d2:	f7ff fdb5 	bl	8000f40 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013d6:	f000 f9bf 	bl	8001758 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lwprintf_init(lwprintf_my_out_func);
 80013da:	492f      	ldr	r1, [pc, #188]	; (8001498 <main+0xe8>)
 80013dc:	2000      	movs	r0, #0
 80013de:	f004 f9bf 	bl	8005760 <lwprintf_init_ex>
  lwbtn_init_ex(NULL, btns, sizeof(btns) / sizeof(btns[0]), prv_btn_get_state, prv_btn_event);
 80013e2:	4b2e      	ldr	r3, [pc, #184]	; (800149c <main+0xec>)
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	4b2e      	ldr	r3, [pc, #184]	; (80014a0 <main+0xf0>)
 80013e8:	2202      	movs	r2, #2
 80013ea:	492e      	ldr	r1, [pc, #184]	; (80014a4 <main+0xf4>)
 80013ec:	2000      	movs	r0, #0
 80013ee:	f002 fa2d 	bl	800384c <lwbtn_init_ex>

  app_init();
 80013f2:	f7ff fd67 	bl	8000ec4 <app_init>

  nmbs_platform_conf platform_conf = {0};
 80013f6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
    platform_conf.transport = NMBS_TRANSPORT_RTU;
 8001404:	2301      	movs	r3, #1
 8001406:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
    platform_conf.read = read_serial;
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <main+0xf8>)
 800140c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    platform_conf.write = write_serial;
 8001410:	4b26      	ldr	r3, [pc, #152]	; (80014ac <main+0xfc>)
 8001412:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    platform_conf.arg = NULL;
 8001416:	2300      	movs	r3, #0
 8001418:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

    nmbs_callbacks callbacks = {0};
 800141c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001420:	2224      	movs	r2, #36	; 0x24
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f005 ff6d 	bl	8007304 <memset>
    callbacks.read_coils = handle_read_coils;
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <main+0x100>)
 800142c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    callbacks.write_multiple_coils = handle_write_multiple_coils;
 8001430:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <main+0x104>)
 8001432:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    callbacks.read_holding_registers = handler_read_holding_registers;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <main+0x108>)
 8001438:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    callbacks.write_multiple_registers = handle_write_multiple_registers;
 800143c:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <main+0x10c>)
 800143e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    nmbs_t nmbs;
      nmbs_error err = nmbs_server_create(&nmbs, RTU_SERVER_ADDRESS, &platform_conf, &callbacks);
 8001442:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001446:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 800144a:	4638      	mov	r0, r7
 800144c:	2101      	movs	r1, #1
 800144e:	f005 fdd7 	bl	8007000 <nmbs_server_create>
 8001452:	4603      	mov	r3, r0
 8001454:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
      if (err != NMBS_ERROR_NONE) {
 8001458:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <main+0xb4>
        Error_Handler();
 8001460:	f000 f906 	bl	8001670 <Error_Handler>
      }

      nmbs_set_read_timeout(&nmbs, 1000);
 8001464:	463b      	mov	r3, r7
 8001466:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800146a:	4618      	mov	r0, r3
 800146c:	f004 fc86 	bl	8005d7c <nmbs_set_read_timeout>
        nmbs_set_byte_timeout(&nmbs, 100);
 8001470:	463b      	mov	r3, r7
 8001472:	2164      	movs	r1, #100	; 0x64
 8001474:	4618      	mov	r0, r3
 8001476:	f004 fc90 	bl	8005d9a <nmbs_set_byte_timeout>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  err = nmbs_server_poll(&nmbs);
 800147a:	463b      	mov	r3, r7
 800147c:	4618      	mov	r0, r3
 800147e:	f005 fdf2 	bl	8007066 <nmbs_server_poll>
 8001482:	4603      	mov	r3, r0
 8001484:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
	  if (err == NMBS_ERROR_TRANSPORT){
 8001488:	f997 3197 	ldrsb.w	r3, [r7, #407]	; 0x197
 800148c:	f113 0f04 	cmn.w	r3, #4
 8001490:	d1f3      	bne.n	800147a <main+0xca>
		  Error_Handler();
 8001492:	f000 f8ed 	bl	8001670 <Error_Handler>
	  err = nmbs_server_poll(&nmbs);
 8001496:	e7f0      	b.n	800147a <main+0xca>
 8001498:	0800104b 	.word	0x0800104b
 800149c:	080015e5 	.word	0x080015e5
 80014a0:	0800157d 	.word	0x0800157d
 80014a4:	20000010 	.word	0x20000010
 80014a8:	08001075 	.word	0x08001075
 80014ac:	080010c9 	.word	0x080010c9
 80014b0:	080010f5 	.word	0x080010f5
 80014b4:	080011f9 	.word	0x080011f9
 80014b8:	080012f9 	.word	0x080012f9
 80014bc:	08001355 	.word	0x08001355

080014c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b094      	sub	sp, #80	; 0x50
 80014c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c6:	f107 0320 	add.w	r3, r7, #32
 80014ca:	2230      	movs	r2, #48	; 0x30
 80014cc:	2100      	movs	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 ff18 	bl	8007304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e4:	2300      	movs	r3, #0
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	4b22      	ldr	r3, [pc, #136]	; (8001574 <SystemClock_Config+0xb4>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <SystemClock_Config+0xb4>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <SystemClock_Config+0xb4>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <SystemClock_Config+0xb8>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1b      	ldr	r2, [pc, #108]	; (8001578 <SystemClock_Config+0xb8>)
 800150a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150e:	6013      	str	r3, [r2, #0]
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <SystemClock_Config+0xb8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151c:	2302      	movs	r3, #2
 800151e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001520:	2301      	movs	r3, #1
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001524:	2310      	movs	r3, #16
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001528:	2300      	movs	r3, #0
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fd81 	bl	8002038 <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800153c:	f000 f898 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001540:	230f      	movs	r3, #15
 8001542:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f000 ffe4 	bl	8002528 <HAL_RCC_ClockConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001566:	f000 f883 	bl	8001670 <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	3750      	adds	r7, #80	; 0x50
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000

0800157c <prv_btn_get_state>:

/* USER CODE BEGIN 4 */
static uint8_t prv_btn_get_state(struct lwbtn* lw, struct lwbtn_btn* btn){
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
	Button_Phy_t *BTN_PHY = (Button_Phy_t*)btn->arg;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	613b      	str	r3, [r7, #16]
	Button_Enum_t button = BTN_PHY->buttonNum;
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	799b      	ldrb	r3, [r3, #6]
 8001590:	73fb      	strb	r3, [r7, #15]
	uint8_t state = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	75fb      	strb	r3, [r7, #23]
	/*read button --------------------------------------------------------------------------*/
	if(button == BUTTON_1){
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10c      	bne.n	80015b6 <prv_btn_get_state+0x3a>
		state = (BTN_PHY->BTGPIO->IDR & BTN_PHY->BTPin) ? 1 : 0;
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	8892      	ldrh	r2, [r2, #4]
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf14      	ite	ne
 80015ac:	2301      	movne	r3, #1
 80015ae:	2300      	moveq	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	75fb      	strb	r3, [r7, #23]
 80015b4:	e00e      	b.n	80015d4 <prv_btn_get_state+0x58>
	}else if(button == BUTTON_2){
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d10b      	bne.n	80015d4 <prv_btn_get_state+0x58>
		state = (BTN_PHY->BTGPIO->IDR & BTN_PHY->BTPin) ?  0: 1;
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	8892      	ldrh	r2, [r2, #4]
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	bf0c      	ite	eq
 80015cc:	2301      	moveq	r3, #1
 80015ce:	2300      	movne	r3, #0
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	75fb      	strb	r3, [r7, #23]
	}
	return state;
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <prv_btn_event>:

static void prv_btn_event(struct lwbtn* lw, struct lwbtn_btn* btn, lwbtn_evt_t evt) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	4613      	mov	r3, r2
 80015f0:	71fb      	strb	r3, [r7, #7]
	Button_Enum_t button = ((Button_Phy_t*)btn->arg)->buttonNum;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	799b      	ldrb	r3, [r3, #6]
 80015f8:	75fb      	strb	r3, [r7, #23]
	(void)lw;
	uint8_t event = evt;
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	75bb      	strb	r3, [r7, #22]
	if(button == BUTTON_1){
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d128      	bne.n	8001656 <prv_btn_event+0x72>
		switch(event){
 8001604:	7dbb      	ldrb	r3, [r7, #22]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d01c      	beq.n	8001644 <prv_btn_event+0x60>
 800160a:	2b02      	cmp	r3, #2
 800160c:	dc23      	bgt.n	8001656 <prv_btn_event+0x72>
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <prv_btn_event+0x34>
 8001612:	2b01      	cmp	r3, #1
 8001614:	d00b      	beq.n	800162e <prv_btn_event+0x4a>
#endif
		}
	}else if(BUTTON_2){
		//todo
	}
	return;
 8001616:	e01e      	b.n	8001656 <prv_btn_event+0x72>
			lwprintf_printf("button is onpressed\r\n");
 8001618:	4911      	ldr	r1, [pc, #68]	; (8001660 <prv_btn_event+0x7c>)
 800161a:	2000      	movs	r0, #0
 800161c:	f004 f8e4 	bl	80057e8 <lwprintf_printf_ex>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001626:	480f      	ldr	r0, [pc, #60]	; (8001664 <prv_btn_event+0x80>)
 8001628:	f000 fcec 	bl	8002004 <HAL_GPIO_WritePin>
			break;
 800162c:	e012      	b.n	8001654 <prv_btn_event+0x70>
			lwprintf_printf("button is onrelease\r\n");
 800162e:	490e      	ldr	r1, [pc, #56]	; (8001668 <prv_btn_event+0x84>)
 8001630:	2000      	movs	r0, #0
 8001632:	f004 f8d9 	bl	80057e8 <lwprintf_printf_ex>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <prv_btn_event+0x80>)
 800163e:	f000 fce1 	bl	8002004 <HAL_GPIO_WritePin>
			break;
 8001642:	e007      	b.n	8001654 <prv_btn_event+0x70>
			lwprintf_printf("button clicked: %u\r\n", btn->click.cnt);
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	7c1b      	ldrb	r3, [r3, #16]
 8001648:	461a      	mov	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <prv_btn_event+0x88>)
 800164c:	2000      	movs	r0, #0
 800164e:	f004 f8cb 	bl	80057e8 <lwprintf_printf_ex>
			break;
 8001652:	bf00      	nop
	return;
 8001654:	bf00      	nop
 8001656:	bf00      	nop
}
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	080073c4 	.word	0x080073c4
 8001664:	40020c00 	.word	0x40020c00
 8001668:	080073dc 	.word	0x080073dc
 800166c:	080073f4 	.word	0x080073f4

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	e7fe      	b.n	8001678 <Error_Handler+0x8>
	...

0800167c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <HAL_MspInit+0x4c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <HAL_MspInit+0x4c>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <HAL_MspInit+0x4c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	4b09      	ldr	r3, [pc, #36]	; (80016c8 <HAL_MspInit+0x4c>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a08      	ldr	r2, [pc, #32]	; (80016c8 <HAL_MspInit+0x4c>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_MspInit+0x4c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <NMI_Handler+0x4>

080016d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <MemManage_Handler+0x4>

080016de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001718:	f000 f914 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171c:	bf00      	nop
 800171e:	bd80      	pop	{r7, pc}

08001720 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <USART2_IRQHandler+0x10>)
 8001726:	f001 f9a1 	bl	8002a6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200002ac 	.word	0x200002ac

08001734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <SystemInit+0x20>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173e:	4a05      	ldr	r2, [pc, #20]	; (8001754 <SystemInit+0x20>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <MX_USART2_UART_Init+0x50>)
 8001760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001764:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 800177e:	220c      	movs	r2, #12
 8001780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 800178a:	2200      	movs	r2, #0
 800178c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <MX_USART2_UART_Init+0x4c>)
 8001790:	f001 f8aa 	bl	80028e8 <HAL_UART_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800179a:	f7ff ff69 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200002ac 	.word	0x200002ac
 80017a8:	40004400 	.word	0x40004400

080017ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1d      	ldr	r2, [pc, #116]	; (8001840 <HAL_UART_MspInit+0x94>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d133      	bne.n	8001836 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	; 0x30
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <HAL_UART_MspInit+0x98>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001806:	230c      	movs	r3, #12
 8001808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001816:	2307      	movs	r3, #7
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0314 	add.w	r3, r7, #20
 800181e:	4619      	mov	r1, r3
 8001820:	4809      	ldr	r0, [pc, #36]	; (8001848 <HAL_UART_MspInit+0x9c>)
 8001822:	f000 fa53 	bl	8001ccc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2026      	movs	r0, #38	; 0x26
 800182c:	f000 f985 	bl	8001b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001830:	2026      	movs	r0, #38	; 0x26
 8001832:	f000 f99e 	bl	8001b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40004400 	.word	0x40004400
 8001844:	40023800 	.word	0x40023800
 8001848:	40020000 	.word	0x40020000

0800184c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800184c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001884 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001850:	480d      	ldr	r0, [pc, #52]	; (8001888 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001852:	490e      	ldr	r1, [pc, #56]	; (800188c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001854:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001868:	4c0b      	ldr	r4, [pc, #44]	; (8001898 <LoopFillZerobss+0x26>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001876:	f7ff ff5d 	bl	8001734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187a:	f005 fd11 	bl	80072a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187e:	f7ff fd97 	bl	80013b0 <main>
  bx  lr    
 8001882:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001884:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800188c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001890:	080074f0 	.word	0x080074f0
  ldr r2, =_sbss
 8001894:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001898:	20000308 	.word	0x20000308

0800189c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800189c:	e7fe      	b.n	800189c <ADC_IRQHandler>
	...

080018a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <HAL_Init+0x40>)
 80018aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <HAL_Init+0x40>)
 80018b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018bc:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <HAL_Init+0x40>)
 80018c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 f92b 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ce:	200f      	movs	r0, #15
 80018d0:	f000 f808 	bl	80018e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d4:	f7ff fed2 	bl	800167c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00

080018e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_InitTick+0x54>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_InitTick+0x58>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f943 	bl	8001b8e <HAL_SYSTICK_Config>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e00e      	b.n	8001930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	d80a      	bhi.n	800192e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001918:	2200      	movs	r2, #0
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f000 f90b 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <HAL_InitTick+0x5c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e000      	b.n	8001930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000080 	.word	0x20000080
 800193c:	20000088 	.word	0x20000088
 8001940:	20000084 	.word	0x20000084

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000088 	.word	0x20000088
 8001968:	200002f0 	.word	0x200002f0

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	200002f0 	.word	0x200002f0

08001984 <__NVIC_SetPriorityGrouping>:
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_GetPriorityGrouping>:
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <__NVIC_EnableIRQ+0x38>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100

08001a24 <__NVIC_SetPriority>:
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	; (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	; (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	; 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <SysTick_Config>:
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f7ff ff8e 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff29 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff3e 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff8e 	bl	8001a78 <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5d 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff31 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffa2 	bl	8001ae0 <SysTick_Config>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff feda 	bl	800196c <HAL_GetTick>
 8001bb8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d008      	beq.n	8001bd8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2280      	movs	r2, #128	; 0x80
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e052      	b.n	8001c7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0216 	bic.w	r2, r2, #22
 8001be6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bf6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d103      	bne.n	8001c08 <HAL_DMA_Abort+0x62>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0208 	bic.w	r2, r2, #8
 8001c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c28:	e013      	b.n	8001c52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c2a:	f7ff fe9f 	bl	800196c <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d90c      	bls.n	8001c52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2203      	movs	r2, #3
 8001c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e015      	b.n	8001c7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e4      	bne.n	8001c2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c64:	223f      	movs	r2, #63	; 0x3f
 8001c66:	409a      	lsls	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d004      	beq.n	8001ca4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2280      	movs	r2, #128	; 0x80
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e00c      	b.n	8001cbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2205      	movs	r2, #5
 8001ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e16b      	b.n	8001fc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 815a 	bne.w	8001fba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80b4 	beq.w	8001fba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a5f      	ldr	r2, [pc, #380]	; (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b5d      	ldr	r3, [pc, #372]	; (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a5b      	ldr	r2, [pc, #364]	; (8001fdc <HAL_GPIO_Init+0x310>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a52      	ldr	r2, [pc, #328]	; (8001fe0 <HAL_GPIO_Init+0x314>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d02b      	beq.n	8001ef2 <HAL_GPIO_Init+0x226>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a51      	ldr	r2, [pc, #324]	; (8001fe4 <HAL_GPIO_Init+0x318>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d025      	beq.n	8001eee <HAL_GPIO_Init+0x222>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a50      	ldr	r2, [pc, #320]	; (8001fe8 <HAL_GPIO_Init+0x31c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d01f      	beq.n	8001eea <HAL_GPIO_Init+0x21e>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4f      	ldr	r2, [pc, #316]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d019      	beq.n	8001ee6 <HAL_GPIO_Init+0x21a>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4e      	ldr	r2, [pc, #312]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0x216>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4d      	ldr	r2, [pc, #308]	; (8001ff4 <HAL_GPIO_Init+0x328>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00d      	beq.n	8001ede <HAL_GPIO_Init+0x212>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4c      	ldr	r2, [pc, #304]	; (8001ff8 <HAL_GPIO_Init+0x32c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d007      	beq.n	8001eda <HAL_GPIO_Init+0x20e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a4b      	ldr	r2, [pc, #300]	; (8001ffc <HAL_GPIO_Init+0x330>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_GPIO_Init+0x20a>
 8001ed2:	2307      	movs	r3, #7
 8001ed4:	e00e      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	e00c      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001eda:	2306      	movs	r3, #6
 8001edc:	e00a      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ede:	2305      	movs	r3, #5
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x228>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f04:	4935      	ldr	r1, [pc, #212]	; (8001fdc <HAL_GPIO_Init+0x310>)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f36:	4a32      	ldr	r2, [pc, #200]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f3c:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f60:	4a27      	ldr	r2, [pc, #156]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8a:	4a1d      	ldr	r2, [pc, #116]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb4:	4a12      	ldr	r2, [pc, #72]	; (8002000 <HAL_GPIO_Init+0x334>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	f67f ae90 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40021400 	.word	0x40021400
 8001ff8:	40021800 	.word	0x40021800
 8001ffc:	40021c00 	.word	0x40021c00
 8002000:	40013c00 	.word	0x40013c00

08002004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
 8002010:	4613      	mov	r3, r2
 8002012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002014:	787b      	ldrb	r3, [r7, #1]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800201a:	887a      	ldrh	r2, [r7, #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002020:	e003      	b.n	800202a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002022:	887b      	ldrh	r3, [r7, #2]
 8002024:	041a      	lsls	r2, r3, #16
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e267      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d075      	beq.n	8002142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002056:	4b88      	ldr	r3, [pc, #544]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	2b04      	cmp	r3, #4
 8002060:	d00c      	beq.n	800207c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002062:	4b85      	ldr	r3, [pc, #532]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206a:	2b08      	cmp	r3, #8
 800206c:	d112      	bne.n	8002094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206e:	4b82      	ldr	r3, [pc, #520]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800207a:	d10b      	bne.n	8002094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	4b7e      	ldr	r3, [pc, #504]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d05b      	beq.n	8002140 <HAL_RCC_OscConfig+0x108>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d157      	bne.n	8002140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e242      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209c:	d106      	bne.n	80020ac <HAL_RCC_OscConfig+0x74>
 800209e:	4b76      	ldr	r3, [pc, #472]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a75      	ldr	r2, [pc, #468]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a8:	6013      	str	r3, [r2, #0]
 80020aa:	e01d      	b.n	80020e8 <HAL_RCC_OscConfig+0xb0>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x98>
 80020b6:	4b70      	ldr	r3, [pc, #448]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6f      	ldr	r2, [pc, #444]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b6d      	ldr	r3, [pc, #436]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6c      	ldr	r2, [pc, #432]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0xb0>
 80020d0:	4b69      	ldr	r3, [pc, #420]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a68      	ldr	r2, [pc, #416]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b66      	ldr	r3, [pc, #408]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a65      	ldr	r2, [pc, #404]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80020e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d013      	beq.n	8002118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7ff fc3c 	bl	800196c <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f8:	f7ff fc38 	bl	800196c <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b64      	cmp	r3, #100	; 0x64
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e207      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	4b5b      	ldr	r3, [pc, #364]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d0f0      	beq.n	80020f8 <HAL_RCC_OscConfig+0xc0>
 8002116:	e014      	b.n	8002142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fc28 	bl	800196c <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002120:	f7ff fc24 	bl	800196c <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b64      	cmp	r3, #100	; 0x64
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e1f3      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	4b51      	ldr	r3, [pc, #324]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0xe8>
 800213e:	e000      	b.n	8002142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d063      	beq.n	8002216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800214e:	4b4a      	ldr	r3, [pc, #296]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215a:	4b47      	ldr	r3, [pc, #284]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002162:	2b08      	cmp	r3, #8
 8002164:	d11c      	bne.n	80021a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002166:	4b44      	ldr	r3, [pc, #272]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d116      	bne.n	80021a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002172:	4b41      	ldr	r3, [pc, #260]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x152>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e1c7      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b3b      	ldr	r3, [pc, #236]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4937      	ldr	r1, [pc, #220]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	e03a      	b.n	8002216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d020      	beq.n	80021ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021a8:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCC_OscConfig+0x244>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ae:	f7ff fbdd 	bl	800196c <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b6:	f7ff fbd9 	bl	800196c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1a8      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d4:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4925      	ldr	r1, [pc, #148]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	600b      	str	r3, [r1, #0]
 80021e8:	e015      	b.n	8002216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <HAL_RCC_OscConfig+0x244>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff fbbc 	bl	800196c <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f8:	f7ff fbb8 	bl	800196c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e187      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d036      	beq.n	8002290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <HAL_RCC_OscConfig+0x248>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002230:	f7ff fb9c 	bl	800196c <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002238:	f7ff fb98 	bl	800196c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e167      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HAL_RCC_OscConfig+0x240>)
 800224c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x200>
 8002256:	e01b      	b.n	8002290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_RCC_OscConfig+0x248>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225e:	f7ff fb85 	bl	800196c <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002264:	e00e      	b.n	8002284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002266:	f7ff fb81 	bl	800196c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d907      	bls.n	8002284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e150      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
 8002278:	40023800 	.word	0x40023800
 800227c:	42470000 	.word	0x42470000
 8002280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002284:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1ea      	bne.n	8002266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8097 	beq.w	80023cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a2:	4b81      	ldr	r3, [pc, #516]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	4b7d      	ldr	r3, [pc, #500]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	4a7c      	ldr	r2, [pc, #496]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6413      	str	r3, [r2, #64]	; 0x40
 80022be:	4b7a      	ldr	r3, [pc, #488]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	4b77      	ldr	r3, [pc, #476]	; (80024ac <HAL_RCC_OscConfig+0x474>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022da:	4b74      	ldr	r3, [pc, #464]	; (80024ac <HAL_RCC_OscConfig+0x474>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a73      	ldr	r2, [pc, #460]	; (80024ac <HAL_RCC_OscConfig+0x474>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7ff fb41 	bl	800196c <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7ff fb3d 	bl	800196c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e10c      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <HAL_RCC_OscConfig+0x474>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d106      	bne.n	8002322 <HAL_RCC_OscConfig+0x2ea>
 8002314:	4b64      	ldr	r3, [pc, #400]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a63      	ldr	r2, [pc, #396]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	e01c      	b.n	800235c <HAL_RCC_OscConfig+0x324>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b05      	cmp	r3, #5
 8002328:	d10c      	bne.n	8002344 <HAL_RCC_OscConfig+0x30c>
 800232a:	4b5f      	ldr	r3, [pc, #380]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232e:	4a5e      	ldr	r2, [pc, #376]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6713      	str	r3, [r2, #112]	; 0x70
 8002336:	4b5c      	ldr	r3, [pc, #368]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233a:	4a5b      	ldr	r2, [pc, #364]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6713      	str	r3, [r2, #112]	; 0x70
 8002342:	e00b      	b.n	800235c <HAL_RCC_OscConfig+0x324>
 8002344:	4b58      	ldr	r3, [pc, #352]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	4a57      	ldr	r2, [pc, #348]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	6713      	str	r3, [r2, #112]	; 0x70
 8002350:	4b55      	ldr	r3, [pc, #340]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	4a54      	ldr	r2, [pc, #336]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002356:	f023 0304 	bic.w	r3, r3, #4
 800235a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002364:	f7ff fb02 	bl	800196c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236a:	e00a      	b.n	8002382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7ff fafe 	bl	800196c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e0cb      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	4b49      	ldr	r3, [pc, #292]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ee      	beq.n	800236c <HAL_RCC_OscConfig+0x334>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002390:	f7ff faec 	bl	800196c <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002396:	e00a      	b.n	80023ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002398:	f7ff fae8 	bl	800196c <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e0b5      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ae:	4b3e      	ldr	r3, [pc, #248]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ee      	bne.n	8002398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d105      	bne.n	80023cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c0:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c4:	4a38      	ldr	r2, [pc, #224]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80a1 	beq.w	8002518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023d6:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d05c      	beq.n	800249c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d141      	bne.n	800246e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ea:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_RCC_OscConfig+0x478>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7ff fabc 	bl	800196c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f8:	f7ff fab8 	bl	800196c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e087      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240a:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f0      	bne.n	80023f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69da      	ldr	r2, [r3, #28]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	019b      	lsls	r3, r3, #6
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	085b      	lsrs	r3, r3, #1
 800242e:	3b01      	subs	r3, #1
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	491b      	ldr	r1, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002440:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCC_OscConfig+0x478>)
 8002442:	2201      	movs	r2, #1
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7ff fa91 	bl	800196c <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244e:	f7ff fa8d 	bl	800196c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e05c      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0f0      	beq.n	800244e <HAL_RCC_OscConfig+0x416>
 800246c:	e054      	b.n	8002518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_RCC_OscConfig+0x478>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7ff fa7a 	bl	800196c <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800247c:	f7ff fa76 	bl	800196c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e045      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_OscConfig+0x470>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x444>
 800249a:	e03d      	b.n	8002518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e038      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40007000 	.word	0x40007000
 80024b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x4ec>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d028      	beq.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d121      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d11a      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024e4:	4013      	ands	r3, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d111      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	3b01      	subs	r3, #1
 80024fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d107      	bne.n	8002514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	40023800 	.word	0x40023800

08002528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0cc      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800253c:	4b68      	ldr	r3, [pc, #416]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d90c      	bls.n	8002564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0b8      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800257c:	4b59      	ldr	r3, [pc, #356]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	4a58      	ldr	r2, [pc, #352]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002594:	4b53      	ldr	r3, [pc, #332]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a52      	ldr	r2, [pc, #328]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800259e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a0:	4b50      	ldr	r3, [pc, #320]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	494d      	ldr	r1, [pc, #308]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d044      	beq.n	8002648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b47      	ldr	r3, [pc, #284]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d119      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e07f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d003      	beq.n	80025e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d107      	bne.n	80025f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e6:	4b3f      	ldr	r3, [pc, #252]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e067      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002606:	4b37      	ldr	r3, [pc, #220]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 0203 	bic.w	r2, r3, #3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4934      	ldr	r1, [pc, #208]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002618:	f7ff f9a8 	bl	800196c <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261e:	e00a      	b.n	8002636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002620:	f7ff f9a4 	bl	800196c <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e04f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002636:	4b2b      	ldr	r3, [pc, #172]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 020c 	and.w	r2, r3, #12
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	429a      	cmp	r2, r3
 8002646:	d1eb      	bne.n	8002620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002648:	4b25      	ldr	r3, [pc, #148]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0307 	and.w	r3, r3, #7
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d20c      	bcs.n	8002670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e032      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4916      	ldr	r1, [pc, #88]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800269a:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	490e      	ldr	r1, [pc, #56]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026ae:	f000 f821 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80026b2:	4602      	mov	r2, r0
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	490a      	ldr	r1, [pc, #40]	; (80026e8 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	5ccb      	ldrb	r3, [r1, r3]
 80026c2:	fa22 f303 	lsr.w	r3, r2, r3
 80026c6:	4a09      	ldr	r2, [pc, #36]	; (80026ec <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_RCC_ClockConfig+0x1c8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f908 	bl	80018e4 <HAL_InitTick>

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023c00 	.word	0x40023c00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	08007430 	.word	0x08007430
 80026ec:	20000080 	.word	0x20000080
 80026f0:	20000084 	.word	0x20000084

080026f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f8:	b090      	sub	sp, #64	; 0x40
 80026fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002700:	2300      	movs	r3, #0
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002704:	2300      	movs	r3, #0
 8002706:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800270c:	4b59      	ldr	r3, [pc, #356]	; (8002874 <HAL_RCC_GetSysClockFreq+0x180>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b08      	cmp	r3, #8
 8002716:	d00d      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0x40>
 8002718:	2b08      	cmp	r3, #8
 800271a:	f200 80a1 	bhi.w	8002860 <HAL_RCC_GetSysClockFreq+0x16c>
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x34>
 8002722:	2b04      	cmp	r3, #4
 8002724:	d003      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0x3a>
 8002726:	e09b      	b.n	8002860 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002728:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_GetSysClockFreq+0x184>)
 800272a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800272c:	e09b      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272e:	4b53      	ldr	r3, [pc, #332]	; (800287c <HAL_RCC_GetSysClockFreq+0x188>)
 8002730:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002732:	e098      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002734:	4b4f      	ldr	r3, [pc, #316]	; (8002874 <HAL_RCC_GetSysClockFreq+0x180>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800273e:	4b4d      	ldr	r3, [pc, #308]	; (8002874 <HAL_RCC_GetSysClockFreq+0x180>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d028      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274a:	4b4a      	ldr	r3, [pc, #296]	; (8002874 <HAL_RCC_GetSysClockFreq+0x180>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	099b      	lsrs	r3, r3, #6
 8002750:	2200      	movs	r2, #0
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	627a      	str	r2, [r7, #36]	; 0x24
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800275c:	2100      	movs	r1, #0
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_RCC_GetSysClockFreq+0x188>)
 8002760:	fb03 f201 	mul.w	r2, r3, r1
 8002764:	2300      	movs	r3, #0
 8002766:	fb00 f303 	mul.w	r3, r0, r3
 800276a:	4413      	add	r3, r2
 800276c:	4a43      	ldr	r2, [pc, #268]	; (800287c <HAL_RCC_GetSysClockFreq+0x188>)
 800276e:	fba0 1202 	umull	r1, r2, r0, r2
 8002772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002774:	460a      	mov	r2, r1
 8002776:	62ba      	str	r2, [r7, #40]	; 0x28
 8002778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800277a:	4413      	add	r3, r2
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	2200      	movs	r2, #0
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	61fa      	str	r2, [r7, #28]
 8002786:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800278a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800278e:	f7fe f9c1 	bl	8000b14 <__aeabi_uldivmod>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4613      	mov	r3, r2
 8002798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800279a:	e053      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800279c:	4b35      	ldr	r3, [pc, #212]	; (8002874 <HAL_RCC_GetSysClockFreq+0x180>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	099b      	lsrs	r3, r3, #6
 80027a2:	2200      	movs	r2, #0
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	617a      	str	r2, [r7, #20]
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027ae:	f04f 0b00 	mov.w	fp, #0
 80027b2:	4652      	mov	r2, sl
 80027b4:	465b      	mov	r3, fp
 80027b6:	f04f 0000 	mov.w	r0, #0
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	0159      	lsls	r1, r3, #5
 80027c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c4:	0150      	lsls	r0, r2, #5
 80027c6:	4602      	mov	r2, r0
 80027c8:	460b      	mov	r3, r1
 80027ca:	ebb2 080a 	subs.w	r8, r2, sl
 80027ce:	eb63 090b 	sbc.w	r9, r3, fp
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027e6:	ebb2 0408 	subs.w	r4, r2, r8
 80027ea:	eb63 0509 	sbc.w	r5, r3, r9
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	00eb      	lsls	r3, r5, #3
 80027f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027fc:	00e2      	lsls	r2, r4, #3
 80027fe:	4614      	mov	r4, r2
 8002800:	461d      	mov	r5, r3
 8002802:	eb14 030a 	adds.w	r3, r4, sl
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	eb45 030b 	adc.w	r3, r5, fp
 800280c:	607b      	str	r3, [r7, #4]
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800281a:	4629      	mov	r1, r5
 800281c:	028b      	lsls	r3, r1, #10
 800281e:	4621      	mov	r1, r4
 8002820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002824:	4621      	mov	r1, r4
 8002826:	028a      	lsls	r2, r1, #10
 8002828:	4610      	mov	r0, r2
 800282a:	4619      	mov	r1, r3
 800282c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282e:	2200      	movs	r2, #0
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	60fa      	str	r2, [r7, #12]
 8002834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002838:	f7fe f96c 	bl	8000b14 <__aeabi_uldivmod>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4613      	mov	r3, r2
 8002842:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_GetSysClockFreq+0x180>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	3301      	adds	r3, #1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800285e:	e002      	b.n	8002866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_GetSysClockFreq+0x184>)
 8002862:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002868:	4618      	mov	r0, r3
 800286a:	3740      	adds	r7, #64	; 0x40
 800286c:	46bd      	mov	sp, r7
 800286e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	00f42400 	.word	0x00f42400
 800287c:	017d7840 	.word	0x017d7840

08002880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_RCC_GetHCLKFreq+0x14>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000080 	.word	0x20000080

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800289c:	f7ff fff0 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	0a9b      	lsrs	r3, r3, #10
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	; (80028bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800
 80028bc:	08007440 	.word	0x08007440

080028c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028c4:	f7ff ffdc 	bl	8002880 <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	0b5b      	lsrs	r3, r3, #13
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4903      	ldr	r1, [pc, #12]	; (80028e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800
 80028e4:	08007440 	.word	0x08007440

080028e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e03f      	b.n	800297a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe ff4c 	bl	80017ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2224      	movs	r2, #36	; 0x24
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800292a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fd19 	bl	8003364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002940:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002950:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002960:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	60f8      	str	r0, [r7, #12]
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	4613      	mov	r3, r2
 800298e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b20      	cmp	r3, #32
 800299a:	d130      	bne.n	80029fe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_UART_Transmit_IT+0x26>
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e029      	b.n	8002a00 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Transmit_IT+0x38>
 80029b6:	2302      	movs	r3, #2
 80029b8:	e022      	b.n	8002a00 <HAL_UART_Transmit_IT+0x7e>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	88fa      	ldrh	r2, [r7, #6]
 80029cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	88fa      	ldrh	r2, [r7, #6]
 80029d2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2221      	movs	r2, #33	; 0x21
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029f8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80029fe:	2302      	movs	r3, #2
  }
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	4613      	mov	r3, r2
 8002a18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b20      	cmp	r3, #32
 8002a24:	d11d      	bne.n	8002a62 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_UART_Receive_IT+0x26>
 8002a2c:	88fb      	ldrh	r3, [r7, #6]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e016      	b.n	8002a64 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_UART_Receive_IT+0x38>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e00f      	b.n	8002a64 <HAL_UART_Receive_IT+0x58>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	461a      	mov	r2, r3
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 faab 	bl	8002fb4 <UART_Start_Receive_IT>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	e000      	b.n	8002a64 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
  }
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0ba      	sub	sp, #232	; 0xe8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002aaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10f      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x66>
 8002abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fb8f 	bl	80031ee <UART_Receive_IT>
      return;
 8002ad0:	e256      	b.n	8002f80 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ad2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80de 	beq.w	8002c98 <HAL_UART_IRQHandler+0x22c>
 8002adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d106      	bne.n	8002af6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80d1 	beq.w	8002c98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_UART_IRQHandler+0xae>
 8002b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_UART_IRQHandler+0xd2>
 8002b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f043 0202 	orr.w	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_UART_IRQHandler+0xf6>
 8002b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f043 0204 	orr.w	r2, r3, #4
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d011      	beq.n	8002b92 <HAL_UART_IRQHandler+0x126>
 8002b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f043 0208 	orr.w	r2, r3, #8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 81ed 	beq.w	8002f76 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_UART_IRQHandler+0x14e>
 8002ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d002      	beq.n	8002bba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fb1a 	bl	80031ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc4:	2b40      	cmp	r3, #64	; 0x40
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d103      	bne.n	8002be6 <HAL_UART_IRQHandler+0x17a>
 8002bde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d04f      	beq.n	8002c86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fa22 	bl	8003030 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b40      	cmp	r3, #64	; 0x40
 8002bf8:	d141      	bne.n	8002c7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3314      	adds	r3, #20
 8002c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c08:	e853 3f00 	ldrex	r3, [r3]
 8002c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	3314      	adds	r3, #20
 8002c22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c36:	e841 2300 	strex	r3, r2, [r1]
 8002c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1d9      	bne.n	8002bfa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d013      	beq.n	8002c76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	4a7d      	ldr	r2, [pc, #500]	; (8002e48 <HAL_UART_IRQHandler+0x3dc>)
 8002c54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff f813 	bl	8001c86 <HAL_DMA_Abort_IT>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d016      	beq.n	8002c94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c70:	4610      	mov	r0, r2
 8002c72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	e00e      	b.n	8002c94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f986 	bl	8002f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	e00a      	b.n	8002c94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f982 	bl	8002f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c84:	e006      	b.n	8002c94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f97e 	bl	8002f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c92:	e170      	b.n	8002f76 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c94:	bf00      	nop
    return;
 8002c96:	e16e      	b.n	8002f76 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	f040 814a 	bne.w	8002f36 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 8143 	beq.w	8002f36 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 813c 	beq.w	8002f36 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60bb      	str	r3, [r7, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	f040 80b4 	bne.w	8002e4c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8140 	beq.w	8002f7a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d02:	429a      	cmp	r2, r3
 8002d04:	f080 8139 	bcs.w	8002f7a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1a:	f000 8088 	beq.w	8002e2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	330c      	adds	r3, #12
 8002d24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	330c      	adds	r3, #12
 8002d46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1d9      	bne.n	8002d1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3314      	adds	r3, #20
 8002d70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d74:	e853 3f00 	ldrex	r3, [r3]
 8002d78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3314      	adds	r3, #20
 8002d8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e1      	bne.n	8002d6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3314      	adds	r3, #20
 8002dac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	3314      	adds	r3, #20
 8002dc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002dd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dd2:	e841 2300 	strex	r3, r2, [r1]
 8002dd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002dd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1e3      	bne.n	8002da6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	330c      	adds	r3, #12
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df6:	e853 3f00 	ldrex	r3, [r3]
 8002dfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dfe:	f023 0310 	bic.w	r3, r3, #16
 8002e02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	330c      	adds	r3, #12
 8002e0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e10:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e18:	e841 2300 	strex	r3, r2, [r1]
 8002e1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1e3      	bne.n	8002dec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe febc 	bl	8001ba6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f8ac 	bl	8002f9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e44:	e099      	b.n	8002f7a <HAL_UART_IRQHandler+0x50e>
 8002e46:	bf00      	nop
 8002e48:	080030f7 	.word	0x080030f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 808b 	beq.w	8002f7e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 8086 	beq.w	8002f7e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	330c      	adds	r3, #12
 8002e78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	e853 3f00 	ldrex	r3, [r3]
 8002e80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e96:	647a      	str	r2, [r7, #68]	; 0x44
 8002e98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e9e:	e841 2300 	strex	r3, r2, [r1]
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1e3      	bne.n	8002e72 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3314      	adds	r3, #20
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	623b      	str	r3, [r7, #32]
   return(result);
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	3314      	adds	r3, #20
 8002eca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ece:	633a      	str	r2, [r7, #48]	; 0x30
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ed6:	e841 2300 	strex	r3, r2, [r1]
 8002eda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1e3      	bne.n	8002eaa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	e853 3f00 	ldrex	r3, [r3]
 8002efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0310 	bic.w	r3, r3, #16
 8002f06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	330c      	adds	r3, #12
 8002f10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f14:	61fa      	str	r2, [r7, #28]
 8002f16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f18:	69b9      	ldr	r1, [r7, #24]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	e841 2300 	strex	r3, r2, [r1]
 8002f20:	617b      	str	r3, [r7, #20]
   return(result);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e3      	bne.n	8002ef0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f834 	bl	8002f9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f34:	e023      	b.n	8002f7e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_UART_IRQHandler+0x4ea>
 8002f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f8e5 	bl	800311e <UART_Transmit_IT>
    return;
 8002f54:	e014      	b.n	8002f80 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00e      	beq.n	8002f80 <HAL_UART_IRQHandler+0x514>
 8002f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f925 	bl	80031be <UART_EndTransmit_IT>
    return;
 8002f74:	e004      	b.n	8002f80 <HAL_UART_IRQHandler+0x514>
    return;
 8002f76:	bf00      	nop
 8002f78:	e002      	b.n	8002f80 <HAL_UART_IRQHandler+0x514>
      return;
 8002f7a:	bf00      	nop
 8002f7c:	e000      	b.n	8002f80 <HAL_UART_IRQHandler+0x514>
      return;
 8002f7e:	bf00      	nop
  }
}
 8002f80:	37e8      	adds	r7, #232	; 0xe8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop

08002f88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	88fa      	ldrh	r2, [r7, #6]
 8002fd2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2222      	movs	r2, #34	; 0x22
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003000:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f042 0220 	orr.w	r2, r2, #32
 8003020:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003030:	b480      	push	{r7}
 8003032:	b095      	sub	sp, #84	; 0x54
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	330c      	adds	r3, #12
 800303e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003042:	e853 3f00 	ldrex	r3, [r3]
 8003046:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800304e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	330c      	adds	r3, #12
 8003056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003058:	643a      	str	r2, [r7, #64]	; 0x40
 800305a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800305e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003060:	e841 2300 	strex	r3, r2, [r1]
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e5      	bne.n	8003038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3314      	adds	r3, #20
 8003072:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	6a3b      	ldr	r3, [r7, #32]
 8003076:	e853 3f00 	ldrex	r3, [r3]
 800307a:	61fb      	str	r3, [r7, #28]
   return(result);
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3314      	adds	r3, #20
 800308a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800308c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800308e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003094:	e841 2300 	strex	r3, r2, [r1]
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e5      	bne.n	800306c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d119      	bne.n	80030dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f023 0310 	bic.w	r3, r3, #16
 80030be:	647b      	str	r3, [r7, #68]	; 0x44
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	330c      	adds	r3, #12
 80030c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030c8:	61ba      	str	r2, [r7, #24]
 80030ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	6979      	ldr	r1, [r7, #20]
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	e841 2300 	strex	r3, r2, [r1]
 80030d4:	613b      	str	r3, [r7, #16]
   return(result);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e5      	bne.n	80030a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80030ea:	bf00      	nop
 80030ec:	3754      	adds	r7, #84	; 0x54
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7ff ff39 	bl	8002f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003116:	bf00      	nop
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b21      	cmp	r3, #33	; 0x21
 8003130:	d13e      	bne.n	80031b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313a:	d114      	bne.n	8003166 <UART_Transmit_IT+0x48>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d110      	bne.n	8003166 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003158:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	1c9a      	adds	r2, r3, #2
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	621a      	str	r2, [r3, #32]
 8003164:	e008      	b.n	8003178 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	1c59      	adds	r1, r3, #1
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6211      	str	r1, [r2, #32]
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29b      	uxth	r3, r3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4619      	mov	r1, r3
 8003186:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10f      	bne.n	80031ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800319a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b082      	sub	sp, #8
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fe8e 	bl	8000f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b08c      	sub	sp, #48	; 0x30
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b22      	cmp	r3, #34	; 0x22
 8003200:	f040 80ab 	bne.w	800335a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320c:	d117      	bne.n	800323e <UART_Receive_IT+0x50>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d113      	bne.n	800323e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	b29b      	uxth	r3, r3
 8003228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800322c:	b29a      	uxth	r2, r3
 800322e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003230:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	1c9a      	adds	r2, r3, #2
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	; 0x28
 800323c:	e026      	b.n	800328c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003244:	2300      	movs	r3, #0
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003250:	d007      	beq.n	8003262 <UART_Receive_IT+0x74>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <UART_Receive_IT+0x82>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	b2da      	uxtb	r2, r3
 800326a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e008      	b.n	8003282 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800327c:	b2da      	uxtb	r2, r3
 800327e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003280:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29b      	uxth	r3, r3
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4619      	mov	r1, r3
 800329a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800329c:	2b00      	cmp	r3, #0
 800329e:	d15a      	bne.n	8003356 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0220 	bic.w	r2, r2, #32
 80032ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68da      	ldr	r2, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d135      	bne.n	800334c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	330c      	adds	r3, #12
 80032ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	e853 3f00 	ldrex	r3, [r3]
 80032f4:	613b      	str	r3, [r7, #16]
   return(result);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f023 0310 	bic.w	r3, r3, #16
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	330c      	adds	r3, #12
 8003304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003306:	623a      	str	r2, [r7, #32]
 8003308:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330a:	69f9      	ldr	r1, [r7, #28]
 800330c:	6a3a      	ldr	r2, [r7, #32]
 800330e:	e841 2300 	strex	r3, r2, [r1]
 8003312:	61bb      	str	r3, [r7, #24]
   return(result);
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e5      	bne.n	80032e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b10      	cmp	r3, #16
 8003326:	d10a      	bne.n	800333e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003342:	4619      	mov	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7ff fe29 	bl	8002f9c <HAL_UARTEx_RxEventCallback>
 800334a:	e002      	b.n	8003352 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7fd fde5 	bl	8000f1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e002      	b.n	800335c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800335a:	2302      	movs	r3, #2
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	3730      	adds	r7, #48	; 0x30
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003368:	b0c0      	sub	sp, #256	; 0x100
 800336a:	af00      	add	r7, sp, #0
 800336c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800337c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003380:	68d9      	ldr	r1, [r3, #12]
 8003382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	ea40 0301 	orr.w	r3, r0, r1
 800338c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800338e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	431a      	orrs	r2, r3
 800339c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033bc:	f021 010c 	bic.w	r1, r1, #12
 80033c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033ca:	430b      	orrs	r3, r1
 80033cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033de:	6999      	ldr	r1, [r3, #24]
 80033e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	ea40 0301 	orr.w	r3, r0, r1
 80033ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	4b8f      	ldr	r3, [pc, #572]	; (8003630 <UART_SetConfig+0x2cc>)
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d005      	beq.n	8003404 <UART_SetConfig+0xa0>
 80033f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	4b8d      	ldr	r3, [pc, #564]	; (8003634 <UART_SetConfig+0x2d0>)
 8003400:	429a      	cmp	r2, r3
 8003402:	d104      	bne.n	800340e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003404:	f7ff fa5c 	bl	80028c0 <HAL_RCC_GetPCLK2Freq>
 8003408:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800340c:	e003      	b.n	8003416 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800340e:	f7ff fa43 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8003412:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003420:	f040 810c 	bne.w	800363c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003428:	2200      	movs	r2, #0
 800342a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800342e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003432:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003436:	4622      	mov	r2, r4
 8003438:	462b      	mov	r3, r5
 800343a:	1891      	adds	r1, r2, r2
 800343c:	65b9      	str	r1, [r7, #88]	; 0x58
 800343e:	415b      	adcs	r3, r3
 8003440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003442:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003446:	4621      	mov	r1, r4
 8003448:	eb12 0801 	adds.w	r8, r2, r1
 800344c:	4629      	mov	r1, r5
 800344e:	eb43 0901 	adc.w	r9, r3, r1
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800345e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003466:	4690      	mov	r8, r2
 8003468:	4699      	mov	r9, r3
 800346a:	4623      	mov	r3, r4
 800346c:	eb18 0303 	adds.w	r3, r8, r3
 8003470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003474:	462b      	mov	r3, r5
 8003476:	eb49 0303 	adc.w	r3, r9, r3
 800347a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800347e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800348a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800348e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003492:	460b      	mov	r3, r1
 8003494:	18db      	adds	r3, r3, r3
 8003496:	653b      	str	r3, [r7, #80]	; 0x50
 8003498:	4613      	mov	r3, r2
 800349a:	eb42 0303 	adc.w	r3, r2, r3
 800349e:	657b      	str	r3, [r7, #84]	; 0x54
 80034a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034a8:	f7fd fb34 	bl	8000b14 <__aeabi_uldivmod>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4b61      	ldr	r3, [pc, #388]	; (8003638 <UART_SetConfig+0x2d4>)
 80034b2:	fba3 2302 	umull	r2, r3, r3, r2
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	011c      	lsls	r4, r3, #4
 80034ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034cc:	4642      	mov	r2, r8
 80034ce:	464b      	mov	r3, r9
 80034d0:	1891      	adds	r1, r2, r2
 80034d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80034d4:	415b      	adcs	r3, r3
 80034d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034dc:	4641      	mov	r1, r8
 80034de:	eb12 0a01 	adds.w	sl, r2, r1
 80034e2:	4649      	mov	r1, r9
 80034e4:	eb43 0b01 	adc.w	fp, r3, r1
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034fc:	4692      	mov	sl, r2
 80034fe:	469b      	mov	fp, r3
 8003500:	4643      	mov	r3, r8
 8003502:	eb1a 0303 	adds.w	r3, sl, r3
 8003506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800350a:	464b      	mov	r3, r9
 800350c:	eb4b 0303 	adc.w	r3, fp, r3
 8003510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003520:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003524:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003528:	460b      	mov	r3, r1
 800352a:	18db      	adds	r3, r3, r3
 800352c:	643b      	str	r3, [r7, #64]	; 0x40
 800352e:	4613      	mov	r3, r2
 8003530:	eb42 0303 	adc.w	r3, r2, r3
 8003534:	647b      	str	r3, [r7, #68]	; 0x44
 8003536:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800353a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800353e:	f7fd fae9 	bl	8000b14 <__aeabi_uldivmod>
 8003542:	4602      	mov	r2, r0
 8003544:	460b      	mov	r3, r1
 8003546:	4611      	mov	r1, r2
 8003548:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <UART_SetConfig+0x2d4>)
 800354a:	fba3 2301 	umull	r2, r3, r3, r1
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	2264      	movs	r2, #100	; 0x64
 8003552:	fb02 f303 	mul.w	r3, r2, r3
 8003556:	1acb      	subs	r3, r1, r3
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800355e:	4b36      	ldr	r3, [pc, #216]	; (8003638 <UART_SetConfig+0x2d4>)
 8003560:	fba3 2302 	umull	r2, r3, r3, r2
 8003564:	095b      	lsrs	r3, r3, #5
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800356c:	441c      	add	r4, r3
 800356e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003572:	2200      	movs	r2, #0
 8003574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003578:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800357c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003580:	4642      	mov	r2, r8
 8003582:	464b      	mov	r3, r9
 8003584:	1891      	adds	r1, r2, r2
 8003586:	63b9      	str	r1, [r7, #56]	; 0x38
 8003588:	415b      	adcs	r3, r3
 800358a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800358c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003590:	4641      	mov	r1, r8
 8003592:	1851      	adds	r1, r2, r1
 8003594:	6339      	str	r1, [r7, #48]	; 0x30
 8003596:	4649      	mov	r1, r9
 8003598:	414b      	adcs	r3, r1
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035a8:	4659      	mov	r1, fp
 80035aa:	00cb      	lsls	r3, r1, #3
 80035ac:	4651      	mov	r1, sl
 80035ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b2:	4651      	mov	r1, sl
 80035b4:	00ca      	lsls	r2, r1, #3
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	4603      	mov	r3, r0
 80035bc:	4642      	mov	r2, r8
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035c4:	464b      	mov	r3, r9
 80035c6:	460a      	mov	r2, r1
 80035c8:	eb42 0303 	adc.w	r3, r2, r3
 80035cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035e4:	460b      	mov	r3, r1
 80035e6:	18db      	adds	r3, r3, r3
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ea:	4613      	mov	r3, r2
 80035ec:	eb42 0303 	adc.w	r3, r2, r3
 80035f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035fa:	f7fd fa8b 	bl	8000b14 <__aeabi_uldivmod>
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <UART_SetConfig+0x2d4>)
 8003604:	fba3 1302 	umull	r1, r3, r3, r2
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	2164      	movs	r1, #100	; 0x64
 800360c:	fb01 f303 	mul.w	r3, r1, r3
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	3332      	adds	r3, #50	; 0x32
 8003616:	4a08      	ldr	r2, [pc, #32]	; (8003638 <UART_SetConfig+0x2d4>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	f003 0207 	and.w	r2, r3, #7
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4422      	add	r2, r4
 800362a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800362c:	e105      	b.n	800383a <UART_SetConfig+0x4d6>
 800362e:	bf00      	nop
 8003630:	40011000 	.word	0x40011000
 8003634:	40011400 	.word	0x40011400
 8003638:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800363c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003640:	2200      	movs	r2, #0
 8003642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003646:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800364a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800364e:	4642      	mov	r2, r8
 8003650:	464b      	mov	r3, r9
 8003652:	1891      	adds	r1, r2, r2
 8003654:	6239      	str	r1, [r7, #32]
 8003656:	415b      	adcs	r3, r3
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
 800365a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800365e:	4641      	mov	r1, r8
 8003660:	1854      	adds	r4, r2, r1
 8003662:	4649      	mov	r1, r9
 8003664:	eb43 0501 	adc.w	r5, r3, r1
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	00eb      	lsls	r3, r5, #3
 8003672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003676:	00e2      	lsls	r2, r4, #3
 8003678:	4614      	mov	r4, r2
 800367a:	461d      	mov	r5, r3
 800367c:	4643      	mov	r3, r8
 800367e:	18e3      	adds	r3, r4, r3
 8003680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003684:	464b      	mov	r3, r9
 8003686:	eb45 0303 	adc.w	r3, r5, r3
 800368a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800369a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036aa:	4629      	mov	r1, r5
 80036ac:	008b      	lsls	r3, r1, #2
 80036ae:	4621      	mov	r1, r4
 80036b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b4:	4621      	mov	r1, r4
 80036b6:	008a      	lsls	r2, r1, #2
 80036b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036bc:	f7fd fa2a 	bl	8000b14 <__aeabi_uldivmod>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4b60      	ldr	r3, [pc, #384]	; (8003848 <UART_SetConfig+0x4e4>)
 80036c6:	fba3 2302 	umull	r2, r3, r3, r2
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	011c      	lsls	r4, r3, #4
 80036ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036e0:	4642      	mov	r2, r8
 80036e2:	464b      	mov	r3, r9
 80036e4:	1891      	adds	r1, r2, r2
 80036e6:	61b9      	str	r1, [r7, #24]
 80036e8:	415b      	adcs	r3, r3
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036f0:	4641      	mov	r1, r8
 80036f2:	1851      	adds	r1, r2, r1
 80036f4:	6139      	str	r1, [r7, #16]
 80036f6:	4649      	mov	r1, r9
 80036f8:	414b      	adcs	r3, r1
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003708:	4659      	mov	r1, fp
 800370a:	00cb      	lsls	r3, r1, #3
 800370c:	4651      	mov	r1, sl
 800370e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003712:	4651      	mov	r1, sl
 8003714:	00ca      	lsls	r2, r1, #3
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	4603      	mov	r3, r0
 800371c:	4642      	mov	r2, r8
 800371e:	189b      	adds	r3, r3, r2
 8003720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003724:	464b      	mov	r3, r9
 8003726:	460a      	mov	r2, r1
 8003728:	eb42 0303 	adc.w	r3, r2, r3
 800372c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	67bb      	str	r3, [r7, #120]	; 0x78
 800373a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003748:	4649      	mov	r1, r9
 800374a:	008b      	lsls	r3, r1, #2
 800374c:	4641      	mov	r1, r8
 800374e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003752:	4641      	mov	r1, r8
 8003754:	008a      	lsls	r2, r1, #2
 8003756:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800375a:	f7fd f9db 	bl	8000b14 <__aeabi_uldivmod>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4b39      	ldr	r3, [pc, #228]	; (8003848 <UART_SetConfig+0x4e4>)
 8003764:	fba3 1302 	umull	r1, r3, r3, r2
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	2164      	movs	r1, #100	; 0x64
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	3332      	adds	r3, #50	; 0x32
 8003776:	4a34      	ldr	r2, [pc, #208]	; (8003848 <UART_SetConfig+0x4e4>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003782:	441c      	add	r4, r3
 8003784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003788:	2200      	movs	r2, #0
 800378a:	673b      	str	r3, [r7, #112]	; 0x70
 800378c:	677a      	str	r2, [r7, #116]	; 0x74
 800378e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003792:	4642      	mov	r2, r8
 8003794:	464b      	mov	r3, r9
 8003796:	1891      	adds	r1, r2, r2
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	415b      	adcs	r3, r3
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037a2:	4641      	mov	r1, r8
 80037a4:	1851      	adds	r1, r2, r1
 80037a6:	6039      	str	r1, [r7, #0]
 80037a8:	4649      	mov	r1, r9
 80037aa:	414b      	adcs	r3, r1
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037ba:	4659      	mov	r1, fp
 80037bc:	00cb      	lsls	r3, r1, #3
 80037be:	4651      	mov	r1, sl
 80037c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037c4:	4651      	mov	r1, sl
 80037c6:	00ca      	lsls	r2, r1, #3
 80037c8:	4610      	mov	r0, r2
 80037ca:	4619      	mov	r1, r3
 80037cc:	4603      	mov	r3, r0
 80037ce:	4642      	mov	r2, r8
 80037d0:	189b      	adds	r3, r3, r2
 80037d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037d4:	464b      	mov	r3, r9
 80037d6:	460a      	mov	r2, r1
 80037d8:	eb42 0303 	adc.w	r3, r2, r3
 80037dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	663b      	str	r3, [r7, #96]	; 0x60
 80037e8:	667a      	str	r2, [r7, #100]	; 0x64
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037f6:	4649      	mov	r1, r9
 80037f8:	008b      	lsls	r3, r1, #2
 80037fa:	4641      	mov	r1, r8
 80037fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003800:	4641      	mov	r1, r8
 8003802:	008a      	lsls	r2, r1, #2
 8003804:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003808:	f7fd f984 	bl	8000b14 <__aeabi_uldivmod>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <UART_SetConfig+0x4e4>)
 8003812:	fba3 1302 	umull	r1, r3, r3, r2
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	2164      	movs	r1, #100	; 0x64
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	011b      	lsls	r3, r3, #4
 8003822:	3332      	adds	r3, #50	; 0x32
 8003824:	4a08      	ldr	r2, [pc, #32]	; (8003848 <UART_SetConfig+0x4e4>)
 8003826:	fba2 2303 	umull	r2, r3, r2, r3
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	f003 020f 	and.w	r2, r3, #15
 8003830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4422      	add	r2, r4
 8003838:	609a      	str	r2, [r3, #8]
}
 800383a:	bf00      	nop
 800383c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003840:	46bd      	mov	sp, r7
 8003842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003846:	bf00      	nop
 8003848:	51eb851f 	.word	0x51eb851f

0800384c <lwbtn_init_ex>:
 * \param[in]       evt_fn: Button event function callback
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwbtn_init_ex(lwbtn_t* lwobj, lwbtn_btn_t* btns, uint16_t btns_cnt, lwbtn_get_state_fn get_state_fn,
              lwbtn_evt_fn evt_fn) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	603b      	str	r3, [r7, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	80fb      	strh	r3, [r7, #6]
    lwobj = LWBTN_GET_LWOBJ(lwobj);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <lwbtn_init_ex+0x1a>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	e000      	b.n	8003868 <lwbtn_init_ex+0x1c>
 8003866:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <lwbtn_init_ex+0x7c>)
 8003868:	60fb      	str	r3, [r7, #12]

    if (btns == NULL || btns_cnt == 0 || evt_fn == NULL
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <lwbtn_init_ex+0x36>
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <lwbtn_init_ex+0x36>
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <lwbtn_init_ex+0x36>
#if LWBTN_CFG_GET_STATE_MODE == LWBTN_GET_STATE_MODE_CALLBACK
        || get_state_fn == NULL /* Parameter is a must only in callback-only mode */
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <lwbtn_init_ex+0x3a>
#endif                          /* LWBTN_CFG_GET_STATE_MODE == LWBTN_GET_STATE_MODE_CALLBACK */
    ) {
        return 0;
 8003882:	2300      	movs	r3, #0
 8003884:	e01b      	b.n	80038be <lwbtn_init_ex+0x72>
    }

    memset(lwobj, 0x00, sizeof(*lwobj));
 8003886:	2210      	movs	r2, #16
 8003888:	2100      	movs	r1, #0
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f003 fd3a 	bl	8007304 <memset>
    lwobj->btns = btns;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	601a      	str	r2, [r3, #0]
    lwobj->btns_cnt = btns_cnt;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	88fa      	ldrh	r2, [r7, #6]
 800389a:	809a      	strh	r2, [r3, #4]
    lwobj->evt_fn = evt_fn;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a3a      	ldr	r2, [r7, #32]
 80038a0:	609a      	str	r2, [r3, #8]
#if LWBTN_CFG_GET_STATE_MODE != LWBTN_GET_STATE_MODE_MANUAL
    lwobj->get_state_fn = get_state_fn;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	60da      	str	r2, [r3, #12]
#else
    (void)get_state_fn; /* May be unused */
#endif /* LWBTN_CFG_GET_STATE_MODE != LWBTN_GET_STATE_MODE_MANUAL */

    for (size_t i = 0; i < btns_cnt; ++i) {
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e002      	b.n	80038b4 <lwbtn_init_ex+0x68>
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	3301      	adds	r3, #1
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d3f8      	bcc.n	80038ae <lwbtn_init_ex+0x62>
#if LWBTN_CFG_CLICK_MAX_CONSECUTIVE_DYNAMIC
        btns[i].max_consecutive = LWBTN_CFG_CLICK_MAX_CONSECUTIVE;
#endif /* LWBTN_CFG_CLICK_MAX_CONSECUTIVE_DYNAMIC */
    }

    return 1;
 80038bc:	2301      	movs	r3, #1
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	200002f4 	.word	0x200002f4

080038cc <prv_out_fn_print>:
 * \param[in]       p: LwPRINTF internal instance
 * \param[in]       c: Character to print
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_fn_print(lwprintf_int_t* p, const char c) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	70fb      	strb	r3, [r7, #3]
    if (p->is_print_cancelled) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7e1b      	ldrb	r3, [r3, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <prv_out_fn_print+0x18>
        return 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e01a      	b.n	800391a <prv_out_fn_print+0x4e>
    }
    if (!p->lwobj->out_fn(c, p->lwobj)) { /*!< Send character to output */
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	78f8      	ldrb	r0, [r7, #3]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4798      	blx	r3
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d102      	bne.n	8003900 <prv_out_fn_print+0x34>
        p->is_print_cancelled = 1;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	761a      	strb	r2, [r3, #24]
    }
    if (c != '\0' && !p->is_print_cancelled) {
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <prv_out_fn_print+0x4c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	7e1b      	ldrb	r3, [r3, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d104      	bne.n	8003918 <prv_out_fn_print+0x4c>
        ++p->n;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	611a      	str	r2, [r3, #16]
    }
    return 1;
 8003918:	2301      	movs	r3, #1
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <prv_parse_num>:
 * \brief           Parse number from input string
 * \param[in,out]   format: Input text to process
 * \return          Parsed number
 */
static int
prv_parse_num(const char** format) {
 8003922:	b480      	push	{r7}
 8003924:	b085      	sub	sp, #20
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
    const char* fmt = *format;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]
    int n = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]

    for (; CHARISNUM(*fmt); ++fmt) {
 8003934:	e00d      	b.n	8003952 <prv_parse_num+0x30>
        n = 10 * n + CHARTONUM(*fmt);
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	461a      	mov	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	3b30      	subs	r3, #48	; 0x30
 8003948:	4413      	add	r3, r2
 800394a:	60bb      	str	r3, [r7, #8]
    for (; CHARISNUM(*fmt); ++fmt) {
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3301      	adds	r3, #1
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b2f      	cmp	r3, #47	; 0x2f
 8003958:	d903      	bls.n	8003962 <prv_parse_num+0x40>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b39      	cmp	r3, #57	; 0x39
 8003960:	d9e9      	bls.n	8003936 <prv_parse_num+0x14>
    }
    *format = fmt;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	601a      	str	r2, [r3, #0]
    return n;
 8003968:	68bb      	ldr	r3, [r7, #8]
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <prv_out_str_before>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_before(lwprintf_int_t* p, size_t buff_size) {
 8003976:	b580      	push	{r7, lr}
 8003978:	b084      	sub	sp, #16
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
    /* Check for width */
    if (p->m.width > 0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	dd12      	ble.n	80039ae <prv_out_str_before+0x38>
        /* If number is negative, add negative sign or if positive and has plus sign forced */
        && (p->m.flags.is_negative || p->m.flags.plus)) {
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	7f5b      	ldrb	r3, [r3, #29]
 800398c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d106      	bne.n	80039a4 <prv_out_str_before+0x2e>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	7f1b      	ldrb	r3, [r3, #28]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d004      	beq.n	80039ae <prv_out_str_before+0x38>
        --p->m.width;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	1e5a      	subs	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Check for alternate mode */
    if (p->m.flags.alt && !p->m.flags.is_num_zero) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7f1b      	ldrb	r3, [r3, #28]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d02c      	beq.n	8003a16 <prv_out_str_before+0xa0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	7f9b      	ldrb	r3, [r3, #30]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d125      	bne.n	8003a16 <prv_out_str_before+0xa0>
        if (p->m.base == 8) {
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d109      	bne.n	80039e8 <prv_out_str_before+0x72>
            if (p->m.width > 0) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	2b00      	cmp	r3, #0
 80039da:	dd1c      	ble.n	8003a16 <prv_out_str_before+0xa0>
                --p->m.width;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	1e5a      	subs	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24
 80039e6:	e016      	b.n	8003a16 <prv_out_str_before+0xa0>
            }
        } else if (p->m.base == 16 || p->m.base == 2) {
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039ee:	2b10      	cmp	r3, #16
 80039f0:	d004      	beq.n	80039fc <prv_out_str_before+0x86>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d10c      	bne.n	8003a16 <prv_out_str_before+0xa0>
            if (p->m.width >= 2) {
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	dd05      	ble.n	8003a10 <prv_out_str_before+0x9a>
                p->m.width -= 2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	1e9a      	subs	r2, r3, #2
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a0e:	e002      	b.n	8003a16 <prv_out_str_before+0xa0>
            } else {
                p->m.width = 0;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	625a      	str	r2, [r3, #36]	; 0x24
            }
        }
    }

    /* Add negative sign (or positive in case of + flag or space in case of space flag) before when zeros are used to fill width */
    if (p->m.flags.zero) {
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	7f1b      	ldrb	r3, [r3, #28]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d025      	beq.n	8003a70 <prv_out_str_before+0xfa>
        if (p->m.flags.is_negative) {
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	7f5b      	ldrb	r3, [r3, #29]
 8003a28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <prv_out_str_before+0xc8>
            p->out_fn(p, '-');
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	212d      	movs	r1, #45	; 0x2d
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
 8003a3c:	e018      	b.n	8003a70 <prv_out_str_before+0xfa>
        } else if (p->m.flags.plus) {
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	7f1b      	ldrb	r3, [r3, #28]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <prv_out_str_before+0xe2>
            p->out_fn(p, '+');
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	212b      	movs	r1, #43	; 0x2b
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
 8003a56:	e00b      	b.n	8003a70 <prv_out_str_before+0xfa>
        } else if (p->m.flags.space) {
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	7f1b      	ldrb	r3, [r3, #28]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <prv_out_str_before+0xfa>
            p->out_fn(p, ' ');
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2120      	movs	r1, #32
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
        }
    }

    /* Check for flags output */
    if (p->m.flags.alt && !p->m.flags.is_num_zero) {
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	7f1b      	ldrb	r3, [r3, #28]
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d044      	beq.n	8003b08 <prv_out_str_before+0x192>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	7f9b      	ldrb	r3, [r3, #30]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d13d      	bne.n	8003b08 <prv_out_str_before+0x192>
        if (p->m.base == 8) {
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d105      	bne.n	8003aa2 <prv_out_str_before+0x12c>
            p->out_fn(p, '0');
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	2130      	movs	r1, #48	; 0x30
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
 8003aa0:	e032      	b.n	8003b08 <prv_out_str_before+0x192>
        } else if (p->m.base == 16) {
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d114      	bne.n	8003ad6 <prv_out_str_before+0x160>
            p->out_fn(p, '0');
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	2130      	movs	r1, #48	; 0x30
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
            p->out_fn(p, p->m.flags.uc ? 'X' : 'x');
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	7f52      	ldrb	r2, [r2, #29]
 8003abe:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	2a00      	cmp	r2, #0
 8003ac6:	d001      	beq.n	8003acc <prv_out_str_before+0x156>
 8003ac8:	2258      	movs	r2, #88	; 0x58
 8003aca:	e000      	b.n	8003ace <prv_out_str_before+0x158>
 8003acc:	2278      	movs	r2, #120	; 0x78
 8003ace:	4611      	mov	r1, r2
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
 8003ad4:	e018      	b.n	8003b08 <prv_out_str_before+0x192>
        } else if (p->m.base == 2) {
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d113      	bne.n	8003b08 <prv_out_str_before+0x192>
            p->out_fn(p, '0');
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	2130      	movs	r1, #48	; 0x30
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	4798      	blx	r3
            p->out_fn(p, p->m.flags.uc ? 'B' : 'b');
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	7f52      	ldrb	r2, [r2, #29]
 8003af2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	2a00      	cmp	r2, #0
 8003afa:	d001      	beq.n	8003b00 <prv_out_str_before+0x18a>
 8003afc:	2242      	movs	r2, #66	; 0x42
 8003afe:	e000      	b.n	8003b02 <prv_out_str_before+0x18c>
 8003b00:	2262      	movs	r2, #98	; 0x62
 8003b02:	4611      	mov	r1, r2
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
        }
    }

    /* Right alignment, spaces or zeros */
    if (!p->m.flags.left_align && p->m.width > 0) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	7f1b      	ldrb	r3, [r3, #28]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d125      	bne.n	8003b62 <prv_out_str_before+0x1ec>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	dd21      	ble.n	8003b62 <prv_out_str_before+0x1ec>
        for (size_t i = buff_size; !p->m.flags.left_align && i < (size_t)p->m.width; ++i) {
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	e011      	b.n	8003b48 <prv_out_str_before+0x1d2>
            p->out_fn(p, p->m.flags.zero ? '0' : ' ');
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	7f12      	ldrb	r2, [r2, #28]
 8003b2c:	f002 0208 	and.w	r2, r2, #8
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	2a00      	cmp	r2, #0
 8003b34:	d001      	beq.n	8003b3a <prv_out_str_before+0x1c4>
 8003b36:	2230      	movs	r2, #48	; 0x30
 8003b38:	e000      	b.n	8003b3c <prv_out_str_before+0x1c6>
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	4611      	mov	r1, r2
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
        for (size_t i = buff_size; !p->m.flags.left_align && i < (size_t)p->m.width; ++i) {
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3301      	adds	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	7f1b      	ldrb	r3, [r3, #28]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d105      	bne.n	8003b62 <prv_out_str_before+0x1ec>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d3e0      	bcc.n	8003b24 <prv_out_str_before+0x1ae>
        }
    }

    /* Add negative sign here when spaces are used for width */
    if (!p->m.flags.zero) {
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7f1b      	ldrb	r3, [r3, #28]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d12b      	bne.n	8003bc8 <prv_out_str_before+0x252>
        if (p->m.flags.is_negative) {
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	7f5b      	ldrb	r3, [r3, #29]
 8003b74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <prv_out_str_before+0x214>
            p->out_fn(p, '-');
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	212d      	movs	r1, #45	; 0x2d
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
 8003b88:	e01e      	b.n	8003bc8 <prv_out_str_before+0x252>
        } else if (p->m.flags.plus) {
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7f1b      	ldrb	r3, [r3, #28]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <prv_out_str_before+0x22e>
            p->out_fn(p, '+');
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	212b      	movs	r1, #43	; 0x2b
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
 8003ba2:	e011      	b.n	8003bc8 <prv_out_str_before+0x252>
        } else if (p->m.flags.space && buff_size >= (size_t)p->m.width) {
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	7f1b      	ldrb	r3, [r3, #28]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <prv_out_str_before+0x252>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d304      	bcc.n	8003bc8 <prv_out_str_before+0x252>
            p->out_fn(p, ' ');
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	2120      	movs	r1, #32
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
        }
    }

    return 1;
 8003bc8:	2301      	movs	r3, #1
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <prv_out_str_after>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       buff_size: Expected buffer size of output string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_after(lwprintf_int_t* p, size_t buff_size) {
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	6039      	str	r1, [r7, #0]
    /* Left alignment, but only with spaces */
    if (p->m.flags.left_align) {
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	7f1b      	ldrb	r3, [r3, #28]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d010      	beq.n	8003c0c <prv_out_str_after+0x3a>
        for (size_t i = buff_size; i < (size_t)p->m.width; ++i) {
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	e007      	b.n	8003c00 <prv_out_str_after+0x2e>
            p->out_fn(p, ' ');
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	2120      	movs	r1, #32
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	4798      	blx	r3
        for (size_t i = buff_size; i < (size_t)p->m.width; ++i) {
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	461a      	mov	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d3f1      	bcc.n	8003bf0 <prv_out_str_after+0x1e>
        }
    }
    return 1;
 8003c0c:	2301      	movs	r3, #1
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <prv_out_str_raw>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str_raw(lwprintf_int_t* p, const char* buff, size_t buff_size) {
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b086      	sub	sp, #24
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < buff_size; ++i) {
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	e00b      	b.n	8003c40 <prv_out_str_raw+0x2a>
        p->out_fn(p, buff[i]);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	440a      	add	r2, r1
 8003c32:	7812      	ldrb	r2, [r2, #0]
 8003c34:	4611      	mov	r1, r2
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	4798      	blx	r3
    for (size_t i = 0; i < buff_size; ++i) {
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d3ef      	bcc.n	8003c28 <prv_out_str_raw+0x12>
    }
    return 1;
 8003c48:	2301      	movs	r3, #1
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <prv_out_str>:
 * \param[in]       buff: Buffer string
 * \param[in]       buff_size: Length of buffer to output
 * \return          `1` on success, `0` otherwise
 */
static int
prv_out_str(lwprintf_int_t* p, const char* buff, size_t buff_size) {
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	607a      	str	r2, [r7, #4]
    prv_out_str_before(p, buff_size);    /* Implement pre-format */
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f7ff fe88 	bl	8003976 <prv_out_str_before>
    prv_out_str_raw(p, buff, buff_size); /* Print actual string */
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff ffd3 	bl	8003c16 <prv_out_str_raw>
    prv_out_str_after(p, buff_size);     /* Implement post-format */
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff ffad 	bl	8003bd2 <prv_out_str_after>

    return 1;
 8003c78:	2301      	movs	r3, #1
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <prv_unsigned_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_int_to_str(lwprintf_int_t* p, unsigned int num) {
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b086      	sub	sp, #24
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(unsigned int, num);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2d9      	uxtb	r1, r3
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	7f93      	ldrb	r3, [r2, #30]
 8003c9c:	f361 0300 	bfi	r3, r1, #0, #1
 8003ca0:	7793      	strb	r3, [r2, #30]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10d      	bne.n	8003cc4 <prv_unsigned_int_to_str+0x42>
 8003ca8:	2101      	movs	r1, #1
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fe63 	bl	8003976 <prv_out_str_before>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	2130      	movs	r1, #48	; 0x30
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4798      	blx	r3
 8003cba:	2101      	movs	r1, #1
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ff88 	bl	8003bd2 <prv_out_str_after>
 8003cc2:	e063      	b.n	8003d8c <prv_unsigned_int_to_str+0x10a>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	74fb      	strb	r3, [r7, #19]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	e00a      	b.n	8003ce4 <prv_unsigned_int_to_str+0x62>
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	74fb      	strb	r3, [r7, #19]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cda:	461a      	mov	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f1      	bne.n	8003cce <prv_unsigned_int_to_str+0x4c>
 8003cea:	2301      	movs	r3, #1
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e007      	b.n	8003d00 <prv_unsigned_int_to_str+0x7e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d2ee      	bcs.n	8003cf0 <prv_unsigned_int_to_str+0x6e>
 8003d12:	7cfb      	ldrb	r3, [r7, #19]
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff fe2d 	bl	8003976 <prv_out_str_before>
 8003d1c:	e02e      	b.n	8003d7c <prv_unsigned_int_to_str+0xfa>
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d30:	6979      	ldr	r1, [r7, #20]
 8003d32:	fb01 f202 	mul.w	r2, r1, r2
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d40:	461a      	mov	r2, r3
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b09      	cmp	r3, #9
 8003d52:	d90a      	bls.n	8003d6a <prv_unsigned_int_to_str+0xe8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7f5b      	ldrb	r3, [r3, #29]
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <prv_unsigned_int_to_str+0xe4>
 8003d62:	2337      	movs	r3, #55	; 0x37
 8003d64:	e002      	b.n	8003d6c <prv_unsigned_int_to_str+0xea>
 8003d66:	2357      	movs	r3, #87	; 0x57
 8003d68:	e000      	b.n	8003d6c <prv_unsigned_int_to_str+0xea>
 8003d6a:	2330      	movs	r3, #48	; 0x30
 8003d6c:	4413      	add	r3, r2
 8003d6e:	72fb      	strb	r3, [r7, #11]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	7afa      	ldrb	r2, [r7, #11]
 8003d76:	4611      	mov	r1, r2
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	4798      	blx	r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1cd      	bne.n	8003d1e <prv_unsigned_int_to_str+0x9c>
 8003d82:	7cfb      	ldrb	r3, [r7, #19]
 8003d84:	4619      	mov	r1, r3
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ff23 	bl	8003bd2 <prv_out_str_after>
    return 1;
 8003d8c:	2301      	movs	r3, #1
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <prv_unsigned_long_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_long_int_to_str(lwprintf_int_t* p, unsigned long int num) {
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(unsigned long int, num);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bf0c      	ite	eq
 8003da6:	2301      	moveq	r3, #1
 8003da8:	2300      	movne	r3, #0
 8003daa:	b2d9      	uxtb	r1, r3
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	7f93      	ldrb	r3, [r2, #30]
 8003db0:	f361 0300 	bfi	r3, r1, #0, #1
 8003db4:	7793      	strb	r3, [r2, #30]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10d      	bne.n	8003dd8 <prv_unsigned_long_int_to_str+0x42>
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff fdd9 	bl	8003976 <prv_out_str_before>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	2130      	movs	r1, #48	; 0x30
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	4798      	blx	r3
 8003dce:	2101      	movs	r1, #1
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fefe 	bl	8003bd2 <prv_out_str_after>
 8003dd6:	e063      	b.n	8003ea0 <prv_unsigned_long_int_to_str+0x10a>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	74fb      	strb	r3, [r7, #19]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	e00a      	b.n	8003df8 <prv_unsigned_long_int_to_str+0x62>
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	3301      	adds	r3, #1
 8003de6:	74fb      	strb	r3, [r7, #19]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dee:	461a      	mov	r2, r3
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f1      	bne.n	8003de2 <prv_unsigned_long_int_to_str+0x4c>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	e007      	b.n	8003e14 <prv_unsigned_long_int_to_str+0x7e>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d2ee      	bcs.n	8003e04 <prv_unsigned_long_int_to_str+0x6e>
 8003e26:	7cfb      	ldrb	r3, [r7, #19]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fda3 	bl	8003976 <prv_out_str_before>
 8003e30:	e02e      	b.n	8003e90 <prv_unsigned_long_int_to_str+0xfa>
 8003e32:	683a      	ldr	r2, [r7, #0]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e44:	6979      	ldr	r1, [r7, #20]
 8003e46:	fb01 f202 	mul.w	r2, r1, r2
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	603b      	str	r3, [r7, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e54:	461a      	mov	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b09      	cmp	r3, #9
 8003e66:	d90a      	bls.n	8003e7e <prv_unsigned_long_int_to_str+0xe8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7f5b      	ldrb	r3, [r3, #29]
 8003e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <prv_unsigned_long_int_to_str+0xe4>
 8003e76:	2337      	movs	r3, #55	; 0x37
 8003e78:	e002      	b.n	8003e80 <prv_unsigned_long_int_to_str+0xea>
 8003e7a:	2357      	movs	r3, #87	; 0x57
 8003e7c:	e000      	b.n	8003e80 <prv_unsigned_long_int_to_str+0xea>
 8003e7e:	2330      	movs	r3, #48	; 0x30
 8003e80:	4413      	add	r3, r2
 8003e82:	72fb      	strb	r3, [r7, #11]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	7afa      	ldrb	r2, [r7, #11]
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	4798      	blx	r3
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1cd      	bne.n	8003e32 <prv_unsigned_long_int_to_str+0x9c>
 8003e96:	7cfb      	ldrb	r3, [r7, #19]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fe99 	bl	8003bd2 <prv_out_str_after>
    return 1;
 8003ea0:	2301      	movs	r3, #1
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <prv_unsigned_longlong_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_unsigned_longlong_int_to_str(lwprintf_int_t* p, unsigned long long int num) {
 8003eaa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eae:	b090      	sub	sp, #64	; 0x40
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	61f8      	str	r0, [r7, #28]
 8003eb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    OUTPUT_ANY_INT_TYPE(unsigned long long int, num);
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	bf0c      	ite	eq
 8003ec2:	2301      	moveq	r3, #1
 8003ec4:	2300      	movne	r3, #0
 8003ec6:	b2d9      	uxtb	r1, r3
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	7f93      	ldrb	r3, [r2, #30]
 8003ecc:	f361 0300 	bfi	r3, r1, #0, #1
 8003ed0:	7793      	strb	r3, [r2, #30]
 8003ed2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	d10d      	bne.n	8003ef6 <prv_unsigned_longlong_int_to_str+0x4c>
 8003eda:	2101      	movs	r1, #1
 8003edc:	69f8      	ldr	r0, [r7, #28]
 8003ede:	f7ff fd4a 	bl	8003976 <prv_out_str_before>
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	2130      	movs	r1, #48	; 0x30
 8003ee8:	69f8      	ldr	r0, [r7, #28]
 8003eea:	4798      	blx	r3
 8003eec:	2101      	movs	r1, #1
 8003eee:	69f8      	ldr	r0, [r7, #28]
 8003ef0:	f7ff fe6f 	bl	8003bd2 <prv_out_str_after>
 8003ef4:	e0a4      	b.n	8004040 <prv_unsigned_longlong_int_to_str+0x196>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003efc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f00:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003f04:	e015      	b.n	8003f32 <prv_unsigned_longlong_int_to_str+0x88>
 8003f06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2200      	movs	r2, #0
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	60fa      	str	r2, [r7, #12]
 8003f1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f22:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003f26:	f7fc fdf5 	bl	8000b14 <__aeabi_uldivmod>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003f32:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f36:	4313      	orrs	r3, r2
 8003f38:	d1e5      	bne.n	8003f06 <prv_unsigned_longlong_int_to_str+0x5c>
 8003f3a:	f04f 0201 	mov.w	r2, #1
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003f46:	e016      	b.n	8003f76 <prv_unsigned_longlong_int_to_str+0xcc>
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2200      	movs	r2, #0
 8003f52:	4698      	mov	r8, r3
 8003f54:	4691      	mov	r9, r2
 8003f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f58:	fb08 f203 	mul.w	r2, r8, r3
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	fb09 f303 	mul.w	r3, r9, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f66:	fba2 4508 	umull	r4, r5, r2, r8
 8003f6a:	442b      	add	r3, r5
 8003f6c:	461d      	mov	r5, r3
 8003f6e:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8003f72:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8003f76:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f7a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f7e:	f7fc fdc9 	bl	8000b14 <__aeabi_uldivmod>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	69f9      	ldr	r1, [r7, #28]
 8003f88:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8003f8c:	b2c9      	uxtb	r1, r1
 8003f8e:	2000      	movs	r0, #0
 8003f90:	468a      	mov	sl, r1
 8003f92:	4683      	mov	fp, r0
 8003f94:	4552      	cmp	r2, sl
 8003f96:	eb73 030b 	sbcs.w	r3, r3, fp
 8003f9a:	d2d5      	bcs.n	8003f48 <prv_unsigned_longlong_int_to_str+0x9e>
 8003f9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	69f8      	ldr	r0, [r7, #28]
 8003fa4:	f7ff fce7 	bl	8003976 <prv_out_str_before>
 8003fa8:	e040      	b.n	800402c <prv_unsigned_longlong_int_to_str+0x182>
 8003faa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fb2:	f7fc fdaf 	bl	8000b14 <__aeabi_uldivmod>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8003fbe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003fc2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fc6:	f7fc fda5 	bl	8000b14 <__aeabi_uldivmod>
 8003fca:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fe0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003fe4:	f7fc fd96 	bl	8000b14 <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8003ff0:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003ff4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ff8:	2a0a      	cmp	r2, #10
 8003ffa:	f173 0300 	sbcs.w	r3, r3, #0
 8003ffe:	d30a      	bcc.n	8004016 <prv_unsigned_longlong_int_to_str+0x16c>
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	7f5b      	ldrb	r3, [r3, #29]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <prv_unsigned_longlong_int_to_str+0x168>
 800400e:	2337      	movs	r3, #55	; 0x37
 8004010:	e002      	b.n	8004018 <prv_unsigned_longlong_int_to_str+0x16e>
 8004012:	2357      	movs	r3, #87	; 0x57
 8004014:	e000      	b.n	8004018 <prv_unsigned_longlong_int_to_str+0x16e>
 8004016:	2330      	movs	r3, #48	; 0x30
 8004018:	440b      	add	r3, r1
 800401a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004026:	4611      	mov	r1, r2
 8004028:	69f8      	ldr	r0, [r7, #28]
 800402a:	4798      	blx	r3
 800402c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004030:	4313      	orrs	r3, r2
 8004032:	d1ba      	bne.n	8003faa <prv_unsigned_longlong_int_to_str+0x100>
 8004034:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004038:	4619      	mov	r1, r3
 800403a:	69f8      	ldr	r0, [r7, #28]
 800403c:	f7ff fdc9 	bl	8003bd2 <prv_out_str_after>
    return 1;
 8004040:	2301      	movs	r3, #1
}
 8004042:	4618      	mov	r0, r3
 8004044:	3740      	adds	r7, #64	; 0x40
 8004046:	46bd      	mov	sp, r7
 8004048:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800404c <prv_uintptr_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_uintptr_to_str(lwprintf_int_t* p, uintptr_t num) {
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(uintptr_t, num);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2d9      	uxtb	r1, r3
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	7f93      	ldrb	r3, [r2, #30]
 8004066:	f361 0300 	bfi	r3, r1, #0, #1
 800406a:	7793      	strb	r3, [r2, #30]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10d      	bne.n	800408e <prv_uintptr_to_str+0x42>
 8004072:	2101      	movs	r1, #1
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fc7e 	bl	8003976 <prv_out_str_before>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	2130      	movs	r1, #48	; 0x30
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4798      	blx	r3
 8004084:	2101      	movs	r1, #1
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fda3 	bl	8003bd2 <prv_out_str_after>
 800408c:	e063      	b.n	8004156 <prv_uintptr_to_str+0x10a>
 800408e:	2300      	movs	r3, #0
 8004090:	74fb      	strb	r3, [r7, #19]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	e00a      	b.n	80040ae <prv_uintptr_to_str+0x62>
 8004098:	7cfb      	ldrb	r3, [r7, #19]
 800409a:	3301      	adds	r3, #1
 800409c:	74fb      	strb	r3, [r7, #19]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040a4:	461a      	mov	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1f1      	bne.n	8004098 <prv_uintptr_to_str+0x4c>
 80040b4:	2301      	movs	r3, #1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e007      	b.n	80040ca <prv_uintptr_to_str+0x7e>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c0:	461a      	mov	r2, r3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80040d8:	4293      	cmp	r3, r2
 80040da:	d2ee      	bcs.n	80040ba <prv_uintptr_to_str+0x6e>
 80040dc:	7cfb      	ldrb	r3, [r7, #19]
 80040de:	4619      	mov	r1, r3
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff fc48 	bl	8003976 <prv_out_str_before>
 80040e6:	e02e      	b.n	8004146 <prv_uintptr_to_str+0xfa>
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80040fa:	6979      	ldr	r1, [r7, #20]
 80040fc:	fb01 f202 	mul.w	r2, r1, r2
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800410a:	461a      	mov	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b09      	cmp	r3, #9
 800411c:	d90a      	bls.n	8004134 <prv_uintptr_to_str+0xe8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7f5b      	ldrb	r3, [r3, #29]
 8004122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <prv_uintptr_to_str+0xe4>
 800412c:	2337      	movs	r3, #55	; 0x37
 800412e:	e002      	b.n	8004136 <prv_uintptr_to_str+0xea>
 8004130:	2357      	movs	r3, #87	; 0x57
 8004132:	e000      	b.n	8004136 <prv_uintptr_to_str+0xea>
 8004134:	2330      	movs	r3, #48	; 0x30
 8004136:	4413      	add	r3, r2
 8004138:	72fb      	strb	r3, [r7, #11]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	7afa      	ldrb	r2, [r7, #11]
 8004140:	4611      	mov	r1, r2
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	4798      	blx	r3
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1cd      	bne.n	80040e8 <prv_uintptr_to_str+0x9c>
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	4619      	mov	r1, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff fd3e 	bl	8003bd2 <prv_out_str_after>
    return 1;
 8004156:	2301      	movs	r3, #1
}
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <prv_sizet_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_sizet_to_str(lwprintf_int_t* p, size_t num) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
    OUTPUT_ANY_INT_TYPE(size_t, num);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2d9      	uxtb	r1, r3
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	7f93      	ldrb	r3, [r2, #30]
 800417a:	f361 0300 	bfi	r3, r1, #0, #1
 800417e:	7793      	strb	r3, [r2, #30]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10d      	bne.n	80041a2 <prv_sizet_to_str+0x42>
 8004186:	2101      	movs	r1, #1
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fbf4 	bl	8003976 <prv_out_str_before>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	2130      	movs	r1, #48	; 0x30
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	4798      	blx	r3
 8004198:	2101      	movs	r1, #1
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff fd19 	bl	8003bd2 <prv_out_str_after>
 80041a0:	e063      	b.n	800426a <prv_sizet_to_str+0x10a>
 80041a2:	2300      	movs	r3, #0
 80041a4:	74fb      	strb	r3, [r7, #19]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e00a      	b.n	80041c2 <prv_sizet_to_str+0x62>
 80041ac:	7cfb      	ldrb	r3, [r7, #19]
 80041ae:	3301      	adds	r3, #1
 80041b0:	74fb      	strb	r3, [r7, #19]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041b8:	461a      	mov	r2, r3
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1f1      	bne.n	80041ac <prv_sizet_to_str+0x4c>
 80041c8:	2301      	movs	r3, #1
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	e007      	b.n	80041de <prv_sizet_to_str+0x7e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041d4:	461a      	mov	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	fb02 f303 	mul.w	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d2ee      	bcs.n	80041ce <prv_sizet_to_str+0x6e>
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	4619      	mov	r1, r3
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fbbe 	bl	8003976 <prv_out_str_before>
 80041fa:	e02e      	b.n	800425a <prv_sizet_to_str+0xfa>
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	fbb3 f2f2 	udiv	r2, r3, r2
 800420e:	6979      	ldr	r1, [r7, #20]
 8004210:	fb01 f202 	mul.w	r2, r1, r2
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800421e:	461a      	mov	r2, r3
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	fbb3 f3f2 	udiv	r3, r3, r2
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2b09      	cmp	r3, #9
 8004230:	d90a      	bls.n	8004248 <prv_sizet_to_str+0xe8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	7f5b      	ldrb	r3, [r3, #29]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <prv_sizet_to_str+0xe4>
 8004240:	2337      	movs	r3, #55	; 0x37
 8004242:	e002      	b.n	800424a <prv_sizet_to_str+0xea>
 8004244:	2357      	movs	r3, #87	; 0x57
 8004246:	e000      	b.n	800424a <prv_sizet_to_str+0xea>
 8004248:	2330      	movs	r3, #48	; 0x30
 800424a:	4413      	add	r3, r2
 800424c:	72fb      	strb	r3, [r7, #11]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	7afa      	ldrb	r2, [r7, #11]
 8004254:	4611      	mov	r1, r2
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	4798      	blx	r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1cd      	bne.n	80041fc <prv_sizet_to_str+0x9c>
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff fcb4 	bl	8003bd2 <prv_out_str_after>
    return 1;
 800426a:	2301      	movs	r3, #1
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <prv_umaxt_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_umaxt_to_str(lwprintf_int_t* p, uintmax_t num) {
 8004274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004278:	b090      	sub	sp, #64	; 0x40
 800427a:	af00      	add	r7, sp, #0
 800427c:	61f8      	str	r0, [r7, #28]
 800427e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    OUTPUT_ANY_INT_TYPE(uintmax_t, num);
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	2b00      	cmp	r3, #0
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2d9      	uxtb	r1, r3
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	7f93      	ldrb	r3, [r2, #30]
 8004296:	f361 0300 	bfi	r3, r1, #0, #1
 800429a:	7793      	strb	r3, [r2, #30]
 800429c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	d10d      	bne.n	80042c0 <prv_umaxt_to_str+0x4c>
 80042a4:	2101      	movs	r1, #1
 80042a6:	69f8      	ldr	r0, [r7, #28]
 80042a8:	f7ff fb65 	bl	8003976 <prv_out_str_before>
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	2130      	movs	r1, #48	; 0x30
 80042b2:	69f8      	ldr	r0, [r7, #28]
 80042b4:	4798      	blx	r3
 80042b6:	2101      	movs	r1, #1
 80042b8:	69f8      	ldr	r0, [r7, #28]
 80042ba:	f7ff fc8a 	bl	8003bd2 <prv_out_str_after>
 80042be:	e0a4      	b.n	800440a <prv_umaxt_to_str+0x196>
 80042c0:	2300      	movs	r3, #0
 80042c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80042c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042ca:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80042ce:	e015      	b.n	80042fc <prv_umaxt_to_str+0x88>
 80042d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80042d4:	3301      	adds	r3, #1
 80042d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2200      	movs	r2, #0
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	60fa      	str	r2, [r7, #12]
 80042e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80042f0:	f7fc fc10 	bl	8000b14 <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80042fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004300:	4313      	orrs	r3, r2
 8004302:	d1e5      	bne.n	80042d0 <prv_umaxt_to_str+0x5c>
 8004304:	f04f 0201 	mov.w	r2, #1
 8004308:	f04f 0300 	mov.w	r3, #0
 800430c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8004310:	e016      	b.n	8004340 <prv_umaxt_to_str+0xcc>
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2200      	movs	r2, #0
 800431c:	4698      	mov	r8, r3
 800431e:	4691      	mov	r9, r2
 8004320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004322:	fb08 f203 	mul.w	r2, r8, r3
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	fb09 f303 	mul.w	r3, r9, r3
 800432c:	4413      	add	r3, r2
 800432e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004330:	fba2 4508 	umull	r4, r5, r2, r8
 8004334:	442b      	add	r3, r5
 8004336:	461d      	mov	r5, r3
 8004338:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 800433c:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
 8004340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004344:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004348:	f7fc fbe4 	bl	8000b14 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	69f9      	ldr	r1, [r7, #28]
 8004352:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8004356:	b2c9      	uxtb	r1, r1
 8004358:	2000      	movs	r0, #0
 800435a:	468a      	mov	sl, r1
 800435c:	4683      	mov	fp, r0
 800435e:	4552      	cmp	r2, sl
 8004360:	eb73 030b 	sbcs.w	r3, r3, fp
 8004364:	d2d5      	bcs.n	8004312 <prv_umaxt_to_str+0x9e>
 8004366:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800436a:	4619      	mov	r1, r3
 800436c:	69f8      	ldr	r0, [r7, #28]
 800436e:	f7ff fb02 	bl	8003976 <prv_out_str_before>
 8004372:	e040      	b.n	80043f6 <prv_umaxt_to_str+0x182>
 8004374:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004378:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800437c:	f7fc fbca 	bl	8000b14 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004388:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800438c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004390:	f7fc fbc0 	bl	8000b14 <__aeabi_uldivmod>
 8004394:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2200      	movs	r2, #0
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043aa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80043ae:	f7fc fbb1 	bl	8000b14 <__aeabi_uldivmod>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80043ba:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80043be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043c2:	2a0a      	cmp	r2, #10
 80043c4:	f173 0300 	sbcs.w	r3, r3, #0
 80043c8:	d30a      	bcc.n	80043e0 <prv_umaxt_to_str+0x16c>
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	7f5b      	ldrb	r3, [r3, #29]
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <prv_umaxt_to_str+0x168>
 80043d8:	2337      	movs	r3, #55	; 0x37
 80043da:	e002      	b.n	80043e2 <prv_umaxt_to_str+0x16e>
 80043dc:	2357      	movs	r3, #87	; 0x57
 80043de:	e000      	b.n	80043e2 <prv_umaxt_to_str+0x16e>
 80043e0:	2330      	movs	r3, #48	; 0x30
 80043e2:	440b      	add	r3, r1
 80043e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80043f0:	4611      	mov	r1, r2
 80043f2:	69f8      	ldr	r0, [r7, #28]
 80043f4:	4798      	blx	r3
 80043f6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043fa:	4313      	orrs	r3, r2
 80043fc:	d1ba      	bne.n	8004374 <prv_umaxt_to_str+0x100>
 80043fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004402:	4619      	mov	r1, r3
 8004404:	69f8      	ldr	r0, [r7, #28]
 8004406:	f7ff fbe4 	bl	8003bd2 <prv_out_str_after>
    return 1;
 800440a:	2301      	movs	r3, #1
}
 800440c:	4618      	mov	r0, r3
 800440e:	3740      	adds	r7, #64	; 0x40
 8004410:	46bd      	mov	sp, r7
 8004412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004416 <prv_signed_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_int_to_str(lwprintf_int_t* p, signed int num) {
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
    SIGNED_CHECK_NEGATIVE(p, num);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	da07      	bge.n	8004436 <prv_signed_int_to_str+0x20>
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	7f53      	ldrb	r3, [r2, #29]
 800442a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800442e:	7753      	strb	r3, [r2, #29]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	425b      	negs	r3, r3
 8004434:	603b      	str	r3, [r7, #0]
    return prv_unsigned_int_to_str(p, num);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff fc21 	bl	8003c82 <prv_unsigned_int_to_str>
 8004440:	4603      	mov	r3, r0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <prv_signed_long_int_to_str>:
 * \param[in,out]   p: LwPRINTF instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_long_int_to_str(lwprintf_int_t* p, signed long int num) {
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
    SIGNED_CHECK_NEGATIVE(p, num);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	da07      	bge.n	800446a <prv_signed_long_int_to_str+0x20>
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	7f53      	ldrb	r3, [r2, #29]
 800445e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004462:	7753      	strb	r3, [r2, #29]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	425b      	negs	r3, r3
 8004468:	603b      	str	r3, [r7, #0]
    return prv_unsigned_long_int_to_str(p, num);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fc91 	bl	8003d96 <prv_unsigned_long_int_to_str>
 8004474:	4603      	mov	r3, r0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <prv_signed_longlong_int_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_signed_longlong_int_to_str(lwprintf_int_t* p, signed long long int num) {
 800447e:	b5b0      	push	{r4, r5, r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	e9c7 2300 	strd	r2, r3, [r7]
    SIGNED_CHECK_NEGATIVE(p, num);
 800448a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800448e:	2b00      	cmp	r3, #0
 8004490:	da0c      	bge.n	80044ac <prv_signed_longlong_int_to_str+0x2e>
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	7f53      	ldrb	r3, [r2, #29]
 8004496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800449a:	7753      	strb	r3, [r2, #29]
 800449c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044a0:	2100      	movs	r1, #0
 80044a2:	4254      	negs	r4, r2
 80044a4:	eb61 0503 	sbc.w	r5, r1, r3
 80044a8:	e9c7 4500 	strd	r4, r5, [r7]
    return prv_unsigned_longlong_int_to_str(p, num);
 80044ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7ff fcfa 	bl	8003eaa <prv_unsigned_longlong_int_to_str>
 80044b6:	4603      	mov	r3, r0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bdb0      	pop	{r4, r5, r7, pc}

080044c0 <prv_calculate_dbl_num_data>:
 * \param[in]       num: Input number
 * \param[in]       e: Exponent number (to normalize)
 * \param[in]       type: Format type
 */
static void
prv_calculate_dbl_num_data(lwprintf_int_t* p, float_num_t* n, double num, uint8_t e, const char type) {
 80044c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c4:	b090      	sub	sp, #64	; 0x40
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6278      	str	r0, [r7, #36]	; 0x24
 80044ca:	6239      	str	r1, [r7, #32]
 80044cc:	ed87 0b06 	vstr	d0, [r7, #24]
 80044d0:	4611      	mov	r1, r2
 80044d2:	461a      	mov	r2, r3
 80044d4:	460b      	mov	r3, r1
 80044d6:	75fb      	strb	r3, [r7, #23]
 80044d8:	4613      	mov	r3, r2
 80044da:	75bb      	strb	r3, [r7, #22]
    memset(n, 0x00, sizeof(*n));
 80044dc:	2228      	movs	r2, #40	; 0x28
 80044de:	2100      	movs	r1, #0
 80044e0:	6a38      	ldr	r0, [r7, #32]
 80044e2:	f002 ff0f 	bl	8007304 <memset>

    if (p->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	2b12      	cmp	r3, #18
 80044ec:	dd02      	ble.n	80044f4 <prv_calculate_dbl_num_data+0x34>
        p->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1;
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	2212      	movs	r2, #18
 80044f2:	621a      	str	r2, [r3, #32]
     * decimal_part_dbl = 3456.78   -> Decimal part multiplied by 10^precision, keeping it in double format
     * decimal_part = 3456          -> Integer part of decimal number
     * diff = 0.78                  -> Difference between actual decimal and integer part of decimal
     *                                  This is used for rounding of last digit (if necessary)
     */
    num += 0.000000000000005;
 80044f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8004778 <prv_calculate_dbl_num_data+0x2b8>)
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80044fe:	f7fb fe69 	bl	80001d4 <__adddf3>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	e9c7 2306 	strd	r2, r3, [r7, #24]
    n->integer_part = (float_long_t)num;
 800450a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800450e:	f7fc fb19 	bl	8000b44 <__aeabi_d2lz>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	6a39      	ldr	r1, [r7, #32]
 8004518:	e9c1 2300 	strd	r2, r3, [r1]
    n->decimal_part_dbl = (num - (double)n->integer_part) * (double)powers_of_10[p->m.precision];
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	f7fb ffdd 	bl	80004e4 <__aeabi_l2d>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004532:	f7fb fe4d 	bl	80001d0 <__aeabi_dsub>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4614      	mov	r4, r2
 800453c:	461d      	mov	r5, r3
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	4a8b      	ldr	r2, [pc, #556]	; (8004770 <prv_calculate_dbl_num_data+0x2b0>)
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4413      	add	r3, r2
 8004548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	f7fb ffc8 	bl	80004e4 <__aeabi_l2d>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	4620      	mov	r0, r4
 800455a:	4629      	mov	r1, r5
 800455c:	f7fb fff0 	bl	8000540 <__aeabi_dmul>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	6a39      	ldr	r1, [r7, #32]
 8004566:	e9c1 2302 	strd	r2, r3, [r1, #8]
    n->decimal_part = (float_long_t)n->decimal_part_dbl;
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004570:	4610      	mov	r0, r2
 8004572:	4619      	mov	r1, r3
 8004574:	f7fc fae6 	bl	8000b44 <__aeabi_d2lz>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	6a39      	ldr	r1, [r7, #32]
 800457e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    n->diff = n->decimal_part_dbl - (float_long_t)n->decimal_part;
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	f7fb ffa7 	bl	80004e4 <__aeabi_l2d>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4620      	mov	r0, r4
 800459c:	4629      	mov	r1, r5
 800459e:	f7fb fe17 	bl	80001d0 <__aeabi_dsub>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	6a39      	ldr	r1, [r7, #32]
 80045a8:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* Rounding check of last digit */
    if (n->diff > 0.5f) {
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	4b6f      	ldr	r3, [pc, #444]	; (8004774 <prv_calculate_dbl_num_data+0x2b4>)
 80045b8:	f7fc fa52 	bl	8000a60 <__aeabi_dcmpgt>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d02f      	beq.n	8004622 <prv_calculate_dbl_num_data+0x162>
        ++n->decimal_part;
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80045c8:	1c51      	adds	r1, r2, #1
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	f143 0300 	adc.w	r3, r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045d8:	e9c3 1204 	strd	r1, r2, [r3, #16]
        if (n->decimal_part >= powers_of_10[p->m.precision]) {
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	4a62      	ldr	r2, [pc, #392]	; (8004770 <prv_calculate_dbl_num_data+0x2b0>)
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	4290      	cmp	r0, r2
 80045f2:	eb71 0303 	sbcs.w	r3, r1, r3
 80045f6:	db39      	blt.n	800466c <prv_calculate_dbl_num_data+0x1ac>
            n->decimal_part = 0;
 80045f8:	6a39      	ldr	r1, [r7, #32]
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	e9c1 2304 	strd	r2, r3, [r1, #16]
            ++n->integer_part;
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	1c51      	adds	r1, r2, #1
 800460e:	6039      	str	r1, [r7, #0]
 8004610:	f143 0300 	adc.w	r3, r3, #0
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	e9d7 1200 	ldrd	r1, r2, [r7]
 800461c:	e9c3 1200 	strd	r1, r2, [r3]
 8004620:	e024      	b.n	800466c <prv_calculate_dbl_num_data+0x1ac>
        }
    } else if (n->diff < 0.5f) {
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	4b51      	ldr	r3, [pc, #324]	; (8004774 <prv_calculate_dbl_num_data+0x2b4>)
 800462e:	f7fc f9f9 	bl	8000a24 <__aeabi_dcmplt>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d119      	bne.n	800466c <prv_calculate_dbl_num_data+0x1ac>
        /* Used in separate if, since comparing float to == will certainly result to false */
    } else {
        /* Difference is exactly 0.5 */
        if (n->decimal_part == 0) {
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800463e:	4313      	orrs	r3, r2
 8004640:	d10a      	bne.n	8004658 <prv_calculate_dbl_num_data+0x198>
            ++n->integer_part;
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004648:	f112 0a01 	adds.w	sl, r2, #1
 800464c:	f143 0b00 	adc.w	fp, r3, #0
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	e9c3 ab00 	strd	sl, fp, [r3]
 8004656:	e009      	b.n	800466c <prv_calculate_dbl_num_data+0x1ac>
        } else {
            ++n->decimal_part;
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800465e:	f112 0801 	adds.w	r8, r2, #1
 8004662:	f143 0900 	adc.w	r9, r3, #0
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	e9c3 8904 	strd	r8, r9, [r3, #16]
        }
    }

    /* Calculate number of digits for integer and decimal parts */
    if (n->integer_part == 0) {
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	4313      	orrs	r3, r2
 8004674:	d103      	bne.n	800467e <prv_calculate_dbl_num_data+0x1be>
        n->digits_cnt_integer_part = 1;
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	2201      	movs	r2, #1
 800467a:	841a      	strh	r2, [r3, #32]
 800467c:	e023      	b.n	80046c6 <prv_calculate_dbl_num_data+0x206>
    } else {
        float_long_t tmp;
        for (n->digits_cnt_integer_part = 0, tmp = n->integer_part; tmp > 0; ++n->digits_cnt_integer_part, tmp /= 10) {}
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	2200      	movs	r2, #0
 8004682:	841a      	strh	r2, [r3, #32]
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 800468e:	e014      	b.n	80046ba <prv_calculate_dbl_num_data+0x1fa>
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004696:	b29b      	uxth	r3, r3
 8004698:	3301      	adds	r3, #1
 800469a:	b29b      	uxth	r3, r3
 800469c:	b21a      	sxth	r2, r3
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	841a      	strh	r2, [r3, #32]
 80046a2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80046a6:	f04f 020a 	mov.w	r2, #10
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	f7fc f9e1 	bl	8000a74 <__aeabi_ldivmod>
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80046ba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046be:	2a01      	cmp	r2, #1
 80046c0:	f173 0300 	sbcs.w	r3, r3, #0
 80046c4:	dae4      	bge.n	8004690 <prv_calculate_dbl_num_data+0x1d0>
    }
    n->digits_cnt_decimal_part = p->m.precision;
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	b21a      	sxth	r2, r3
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	845a      	strh	r2, [r3, #34]	; 0x22

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Calculate minimum useful digits for decimal (excl last useless zeros) */
    if (type == 'g') {
 80046d0:	7dbb      	ldrb	r3, [r7, #22]
 80046d2:	2b67      	cmp	r3, #103	; 0x67
 80046d4:	d141      	bne.n	800475a <prv_calculate_dbl_num_data+0x29a>
        float_long_t tmp = n->decimal_part;
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80046dc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
        size_t adder, i;
        for (adder = 0, i = 0; tmp > 0 || i < (size_t)p->m.precision;
 80046e0:	2300      	movs	r3, #0
 80046e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e4:	2300      	movs	r3, #0
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046e8:	e02a      	b.n	8004740 <prv_calculate_dbl_num_data+0x280>
             tmp /= 10, n->digits_cnt_decimal_part_useful += adder, ++i) {
            if (adder == 0 && (tmp % 10) > 0) {
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10d      	bne.n	800470c <prv_calculate_dbl_num_data+0x24c>
 80046f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80046f4:	f04f 020a 	mov.w	r2, #10
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	f7fc f9ba 	bl	8000a74 <__aeabi_ldivmod>
 8004700:	2a01      	cmp	r2, #1
 8004702:	f173 0300 	sbcs.w	r3, r3, #0
 8004706:	db01      	blt.n	800470c <prv_calculate_dbl_num_data+0x24c>
                adder = 1;
 8004708:	2301      	movs	r3, #1
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
             tmp /= 10, n->digits_cnt_decimal_part_useful += adder, ++i) {
 800470c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004710:	f04f 020a 	mov.w	r2, #10
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	f7fc f9ac 	bl	8000a74 <__aeabi_ldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800472a:	b29a      	uxth	r2, r3
 800472c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472e:	b29b      	uxth	r3, r3
 8004730:	4413      	add	r3, r2
 8004732:	b29b      	uxth	r3, r3
 8004734:	b21a      	sxth	r2, r3
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	849a      	strh	r2, [r3, #36]	; 0x24
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	3301      	adds	r3, #1
 800473e:	62bb      	str	r3, [r7, #40]	; 0x28
        for (adder = 0, i = 0; tmp > 0 || i < (size_t)p->m.precision;
 8004740:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004744:	2a01      	cmp	r2, #1
 8004746:	f173 0300 	sbcs.w	r3, r3, #0
 800474a:	dace      	bge.n	80046ea <prv_calculate_dbl_num_data+0x22a>
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	6a1b      	ldr	r3, [r3, #32]
 8004750:	461a      	mov	r2, r3
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	4293      	cmp	r3, r2
 8004756:	d3c8      	bcc.n	80046ea <prv_calculate_dbl_num_data+0x22a>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    {
        n->digits_cnt_decimal_part_useful = p->m.precision;
    }
    (void)e;
}
 8004758:	e004      	b.n	8004764 <prv_calculate_dbl_num_data+0x2a4>
        n->digits_cnt_decimal_part_useful = p->m.precision;
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	b21a      	sxth	r2, r3
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8004764:	bf00      	nop
 8004766:	3740      	adds	r7, #64	; 0x40
 8004768:	46bd      	mov	sp, r7
 800476a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800476e:	bf00      	nop
 8004770:	08007448 	.word	0x08007448
 8004774:	3fe00000 	.word	0x3fe00000
 8004778:	86a12b9b 	.word	0x86a12b9b
 800477c:	3cf6849b 	.word	0x3cf6849b

08004780 <prv_double_to_str>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       num: Number to convert to string
 * \return          `1` on success, `0` otherwise
 */
static int
prv_double_to_str(lwprintf_int_t* p, double in_num) {
 8004780:	b5b0      	push	{r4, r5, r7, lr}
 8004782:	b0a0      	sub	sp, #128	; 0x80
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	ed87 0b00 	vstr	d0, [r7]
    float_num_t dblnum;
    size_t i;
    double orig_num = in_num;
 800478c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004790:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    int digits_cnt, exp_cnt = 0, chosen_precision;
 8004794:	2300      	movs	r3, #0
 8004796:	677b      	str	r3, [r7, #116]	; 0x74
    char def_type = p->m.type;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800479e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
     * - Print negative infinity if number is less than -FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Print positive infinity if number is greater than absolute minimum
     * - Print positive infinity if number is greater than FLOAT_MAX_B_ENG and engineering mode is disabled
     * - Go to engineering mode if it is enabled and `in_num < -FLOAT_MAX_B_ENG` or `in_num > FLOAT_MAX_B_ENG`
     */
    if (in_num != in_num) {
 80047a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047aa:	f7fc f931 	bl	8000a10 <__aeabi_dcmpeq>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d110      	bne.n	80047d6 <prv_double_to_str+0x56>
        return prv_out_str(p, p->m.flags.uc ? "NAN" : "nan", 3);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	7f5b      	ldrb	r3, [r3, #29]
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <prv_double_to_str+0x46>
 80047c2:	4ba7      	ldr	r3, [pc, #668]	; (8004a60 <prv_double_to_str+0x2e0>)
 80047c4:	e000      	b.n	80047c8 <prv_double_to_str+0x48>
 80047c6:	4ba7      	ldr	r3, [pc, #668]	; (8004a64 <prv_double_to_str+0x2e4>)
 80047c8:	2203      	movs	r2, #3
 80047ca:	4619      	mov	r1, r3
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f7ff fa40 	bl	8003c52 <prv_out_str>
 80047d2:	4603      	mov	r3, r0
 80047d4:	e336      	b.n	8004e44 <prv_double_to_str+0x6c4>
    } else if (in_num < -DBL_MAX
 80047d6:	f04f 32ff 	mov.w	r2, #4294967295
 80047da:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80047de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047e2:	f7fc f91f 	bl	8000a24 <__aeabi_dcmplt>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <prv_double_to_str+0x8e>
#if !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
               || in_num < -FLOAT_MAX_B_ENG
#endif /* !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    ) {
        return prv_out_str(p, p->m.flags.uc ? "-INF" : "-inf", 4);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	7f5b      	ldrb	r3, [r3, #29]
 80047f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <prv_double_to_str+0x7e>
 80047fa:	4b9b      	ldr	r3, [pc, #620]	; (8004a68 <prv_double_to_str+0x2e8>)
 80047fc:	e000      	b.n	8004800 <prv_double_to_str+0x80>
 80047fe:	4b9b      	ldr	r3, [pc, #620]	; (8004a6c <prv_double_to_str+0x2ec>)
 8004800:	2204      	movs	r2, #4
 8004802:	4619      	mov	r1, r3
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f7ff fa24 	bl	8003c52 <prv_out_str>
 800480a:	4603      	mov	r3, r0
 800480c:	e31a      	b.n	8004e44 <prv_double_to_str+0x6c4>
    } else if (in_num > DBL_MAX
 800480e:	f04f 32ff 	mov.w	r2, #4294967295
 8004812:	4b97      	ldr	r3, [pc, #604]	; (8004a70 <prv_double_to_str+0x2f0>)
 8004814:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004818:	f7fc f922 	bl	8000a60 <__aeabi_dcmpgt>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d02e      	beq.n	8004880 <prv_double_to_str+0x100>
#if !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
               || in_num > FLOAT_MAX_B_ENG
#endif /* !LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    ) {
        char str[5], *s_ptr = str;
 8004822:	f107 0310 	add.w	r3, r7, #16
 8004826:	66bb      	str	r3, [r7, #104]	; 0x68
        if (p->m.flags.plus) {
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	7f1b      	ldrb	r3, [r3, #28]
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d004      	beq.n	8004840 <prv_double_to_str+0xc0>
            *s_ptr++ = '+';
 8004836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	66ba      	str	r2, [r7, #104]	; 0x68
 800483c:	222b      	movs	r2, #43	; 0x2b
 800483e:	701a      	strb	r2, [r3, #0]
        }
        strcpy(s_ptr, p->m.flags.uc ? "INF" : "inf");
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	7f5b      	ldrb	r3, [r3, #29]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <prv_double_to_str+0xd2>
 800484e:	4b89      	ldr	r3, [pc, #548]	; (8004a74 <prv_double_to_str+0x2f4>)
 8004850:	e000      	b.n	8004854 <prv_double_to_str+0xd4>
 8004852:	4b89      	ldr	r3, [pc, #548]	; (8004a78 <prv_double_to_str+0x2f8>)
 8004854:	4619      	mov	r1, r3
 8004856:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004858:	f002 fd5c 	bl	8007314 <strcpy>
        return prv_out_str(p, str, p->m.flags.plus ? 4 : 3);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	7f1b      	ldrb	r3, [r3, #28]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <prv_double_to_str+0xee>
 800486a:	2204      	movs	r2, #4
 800486c:	e000      	b.n	8004870 <prv_double_to_str+0xf0>
 800486e:	2203      	movs	r2, #3
 8004870:	f107 0310 	add.w	r3, r7, #16
 8004874:	4619      	mov	r1, r3
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff f9eb 	bl	8003c52 <prv_out_str>
 800487c:	4603      	mov	r3, r0
 800487e:	e2e1      	b.n	8004e44 <prv_double_to_str+0x6c4>
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    } else if ((in_num < -FLOAT_MAX_B_ENG || in_num > FLOAT_MAX_B_ENG) && def_type != 'g') {
 8004880:	a371      	add	r3, pc, #452	; (adr r3, 8004a48 <prv_double_to_str+0x2c8>)
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	e9d7 0100 	ldrd	r0, r1, [r7]
 800488a:	f7fc f8cb 	bl	8000a24 <__aeabi_dcmplt>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <prv_double_to_str+0x128>
 8004894:	a36e      	add	r3, pc, #440	; (adr r3, 8004a50 <prv_double_to_str+0x2d0>)
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800489e:	f7fc f8df 	bl	8000a60 <__aeabi_dcmpgt>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00b      	beq.n	80048c0 <prv_double_to_str+0x140>
 80048a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80048ac:	2b67      	cmp	r3, #103	; 0x67
 80048ae:	d007      	beq.n	80048c0 <prv_double_to_str+0x140>
        p->m.type = def_type = 'e'; /* Go to engineering mode */
 80048b0:	2365      	movs	r3, #101	; 0x65
 80048b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80048bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
#endif                              /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    }

    /* Check sign of the number */
    SIGNED_CHECK_NEGATIVE(p, in_num);
 80048c0:	f04f 0200 	mov.w	r2, #0
 80048c4:	f04f 0300 	mov.w	r3, #0
 80048c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048cc:	f7fc f8aa 	bl	8000a24 <__aeabi_dcmplt>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <prv_double_to_str+0x16c>
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	7f53      	ldrb	r3, [r2, #29]
 80048da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048de:	7753      	strb	r3, [r2, #29]
 80048e0:	683c      	ldr	r4, [r7, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80048e8:	e9c7 4500 	strd	r4, r5, [r7]
    orig_num = in_num;
 80048ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048f0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Engineering mode check for number of exponents */
    if (def_type == 'e' || def_type == 'g'
 80048f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80048f8:	2b65      	cmp	r3, #101	; 0x65
 80048fa:	d013      	beq.n	8004924 <prv_double_to_str+0x1a4>
 80048fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004900:	2b67      	cmp	r3, #103	; 0x67
 8004902:	d00f      	beq.n	8004924 <prv_double_to_str+0x1a4>
        || in_num > (powers_of_10[LWPRINTF_ARRAYSIZE(powers_of_10) - 1])) { /* More vs what float can hold */
 8004904:	a354      	add	r3, pc, #336	; (adr r3, 8004a58 <prv_double_to_str+0x2d8>)
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	f7fb fde9 	bl	80004e4 <__aeabi_l2d>
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	e9d7 0100 	ldrd	r0, r1, [r7]
 800491a:	f7fc f8a1 	bl	8000a60 <__aeabi_dcmpgt>
 800491e:	4603      	mov	r3, r0
 8004920:	2b00      	cmp	r3, #0
 8004922:	d054      	beq.n	80049ce <prv_double_to_str+0x24e>
        if (p->m.type != 'g') {
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800492a:	2b67      	cmp	r3, #103	; 0x67
 800492c:	d003      	beq.n	8004936 <prv_double_to_str+0x1b6>
            p->m.type = 'e';
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2265      	movs	r2, #101	; 0x65
 8004932:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        }

        /* Normalize number to be between 0 and 1 and count decimals for exponent */
        if (in_num < 1) {
 8004936:	f04f 0200 	mov.w	r2, #0
 800493a:	4b50      	ldr	r3, [pc, #320]	; (8004a7c <prv_double_to_str+0x2fc>)
 800493c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004940:	f7fc f870 	bl	8000a24 <__aeabi_dcmplt>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d026      	beq.n	8004998 <prv_double_to_str+0x218>
            for (exp_cnt = 0; in_num < 1 && in_num > 0; in_num *= 10, --exp_cnt) {}
 800494a:	2300      	movs	r3, #0
 800494c:	677b      	str	r3, [r7, #116]	; 0x74
 800494e:	e00d      	b.n	800496c <prv_double_to_str+0x1ec>
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	4b4a      	ldr	r3, [pc, #296]	; (8004a80 <prv_double_to_str+0x300>)
 8004956:	e9d7 0100 	ldrd	r0, r1, [r7]
 800495a:	f7fb fdf1 	bl	8000540 <__aeabi_dmul>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	e9c7 2300 	strd	r2, r3, [r7]
 8004966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004968:	3b01      	subs	r3, #1
 800496a:	677b      	str	r3, [r7, #116]	; 0x74
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	4b42      	ldr	r3, [pc, #264]	; (8004a7c <prv_double_to_str+0x2fc>)
 8004972:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004976:	f7fc f855 	bl	8000a24 <__aeabi_dcmplt>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d026      	beq.n	80049ce <prv_double_to_str+0x24e>
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800498c:	f7fc f868 	bl	8000a60 <__aeabi_dcmpgt>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1dc      	bne.n	8004950 <prv_double_to_str+0x1d0>
 8004996:	e01a      	b.n	80049ce <prv_double_to_str+0x24e>
        } else {
            for (exp_cnt = 0; in_num >= 10; in_num /= 10, ++exp_cnt) {}
 8004998:	2300      	movs	r3, #0
 800499a:	677b      	str	r3, [r7, #116]	; 0x74
 800499c:	e00d      	b.n	80049ba <prv_double_to_str+0x23a>
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	4b37      	ldr	r3, [pc, #220]	; (8004a80 <prv_double_to_str+0x300>)
 80049a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049a8:	f7fb fef4 	bl	8000794 <__aeabi_ddiv>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	e9c7 2300 	strd	r2, r3, [r7]
 80049b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b6:	3301      	adds	r3, #1
 80049b8:	677b      	str	r3, [r7, #116]	; 0x74
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	4b30      	ldr	r3, [pc, #192]	; (8004a80 <prv_double_to_str+0x300>)
 80049c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049c4:	f7fc f842 	bl	8000a4c <__aeabi_dcmpge>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1e7      	bne.n	800499e <prv_double_to_str+0x21e>
        }
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Check precision data */
    chosen_precision = p->m.precision; /* This is default value coming from app */
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	673b      	str	r3, [r7, #112]	; 0x70
    if (p->m.precision >= (int)LWPRINTF_ARRAYSIZE(powers_of_10)) {
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	2b12      	cmp	r3, #18
 80049da:	dd03      	ble.n	80049e4 <prv_double_to_str+0x264>
        p->m.precision = (int)LWPRINTF_ARRAYSIZE(powers_of_10) - 1; /* Limit to maximum precision */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2212      	movs	r2, #18
 80049e0:	621a      	str	r2, [r3, #32]
 80049e2:	e01f      	b.n	8004a24 <prv_double_to_str+0x2a4>
        /*
         * Precision is lower than the one selected by app (or user).
         * It means that we have to append ending zeros for precision when printing data
         */
    } else if (!p->m.flags.precision) {
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	7f1b      	ldrb	r3, [r3, #28]
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d106      	bne.n	8004a00 <prv_double_to_str+0x280>
        p->m.precision = LWPRINTF_CFG_FLOAT_DEFAULT_PRECISION; /* Default precision when not used */
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2206      	movs	r2, #6
 80049f6:	621a      	str	r2, [r3, #32]
        chosen_precision = p->m.precision;                     /* There was no precision, update chosen precision */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	673b      	str	r3, [r7, #112]	; 0x70
 80049fe:	e011      	b.n	8004a24 <prv_double_to_str+0x2a4>
    } else if (p->m.flags.precision && p->m.precision == 0) {
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	7f1b      	ldrb	r3, [r3, #28]
 8004a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <prv_double_to_str+0x2a4>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <prv_double_to_str+0x2a4>
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
        /* Precision must be set to 1 if set to 0 by default */
        if (def_type == 'g') {
 8004a16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a1a:	2b67      	cmp	r3, #103	; 0x67
 8004a1c:	d102      	bne.n	8004a24 <prv_double_to_str+0x2a4>
            p->m.precision = 1;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	621a      	str	r2, [r3, #32]
     *
     * A double argument representing an infinity or 'NaN' is converted in the style of an 'f' or 'F' conversion specifier.
     */

    /* Calculate data for number */
    prv_calculate_dbl_num_data(p, &dblnum, def_type == 'e' ? in_num : orig_num, def_type == 'e' ? 0 : exp_cnt,
 8004a24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a28:	2b65      	cmp	r3, #101	; 0x65
 8004a2a:	d102      	bne.n	8004a32 <prv_double_to_str+0x2b2>
 8004a2c:	ed97 7b00 	vldr	d7, [r7]
 8004a30:	e001      	b.n	8004a36 <prv_double_to_str+0x2b6>
 8004a32:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004a36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a3a:	2b65      	cmp	r3, #101	; 0x65
 8004a3c:	d022      	beq.n	8004a84 <prv_double_to_str+0x304>
 8004a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	e020      	b.n	8004a86 <prv_double_to_str+0x306>
 8004a44:	f3af 8000 	nop.w
 8004a48:	674ec800 	.word	0x674ec800
 8004a4c:	c3abc16d 	.word	0xc3abc16d
 8004a50:	674ec800 	.word	0x674ec800
 8004a54:	43abc16d 	.word	0x43abc16d
 8004a58:	a7640000 	.word	0xa7640000
 8004a5c:	0de0b6b3 	.word	0x0de0b6b3
 8004a60:	0800740c 	.word	0x0800740c
 8004a64:	08007410 	.word	0x08007410
 8004a68:	08007414 	.word	0x08007414
 8004a6c:	0800741c 	.word	0x0800741c
 8004a70:	7fefffff 	.word	0x7fefffff
 8004a74:	08007424 	.word	0x08007424
 8004a78:	08007428 	.word	0x08007428
 8004a7c:	3ff00000 	.word	0x3ff00000
 8004a80:	40240000 	.word	0x40240000
 8004a84:	2200      	movs	r2, #0
 8004a86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a8a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8004a92:	eef0 0a67 	vmov.f32	s1, s15
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7ff fd12 	bl	80044c0 <prv_calculate_dbl_num_data>
                               def_type);
    //prv_calculate_dbl_num_data(p, &dblnum, orig_num, exp_cnt, def_type);

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Set type G */
    if (def_type == 'g') {
 8004a9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004aa0:	2b67      	cmp	r3, #103	; 0x67
 8004aa2:	d142      	bne.n	8004b2a <prv_double_to_str+0x3aa>
        /* As per standard to decide level of precision */
        if (exp_cnt >= -4 && exp_cnt < p->m.precision) {
 8004aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa6:	f113 0f04 	cmn.w	r3, #4
 8004aaa:	db24      	blt.n	8004af6 <prv_double_to_str+0x376>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	da1f      	bge.n	8004af6 <prv_double_to_str+0x376>
            if (p->m.precision > exp_cnt) {
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004abc:	429a      	cmp	r2, r3
 8004abe:	da0c      	bge.n	8004ada <prv_double_to_str+0x35a>
                p->m.precision -= exp_cnt + 1;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a1a      	ldr	r2, [r3, #32]
 8004ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	1ad2      	subs	r2, r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	621a      	str	r2, [r3, #32]
                chosen_precision -= exp_cnt + 1;
 8004ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	673b      	str	r3, [r7, #112]	; 0x70
 8004ad8:	e004      	b.n	8004ae4 <prv_double_to_str+0x364>
            } else {
                p->m.precision = 0;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	621a      	str	r2, [r3, #32]
                chosen_precision = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	673b      	str	r3, [r7, #112]	; 0x70
            }
            p->m.type = 'f';
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2266      	movs	r2, #102	; 0x66
 8004ae8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            in_num = orig_num;
 8004aec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004af0:	e9c7 2300 	strd	r2, r3, [r7]
 8004af4:	e00f      	b.n	8004b16 <prv_double_to_str+0x396>
        } else {
            p->m.type = 'e';
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2265      	movs	r2, #101	; 0x65
 8004afa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
            if (p->m.precision > 0) {
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	dd07      	ble.n	8004b16 <prv_double_to_str+0x396>
                --p->m.precision;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	1e5a      	subs	r2, r3, #1
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	621a      	str	r2, [r3, #32]
                --chosen_precision;
 8004b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b12:	3b01      	subs	r3, #1
 8004b14:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }
        prv_calculate_dbl_num_data(p, &dblnum, in_num, 0, def_type);
 8004b16:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b1a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8004b1e:	2200      	movs	r2, #0
 8004b20:	ed97 0b00 	vldr	d0, [r7]
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f7ff fccb 	bl	80044c0 <prv_calculate_dbl_num_data>
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Set number of digits to display */
    digits_cnt = dblnum.digits_cnt_integer_part;
 8004b2a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8004b2e:	67bb      	str	r3, [r7, #120]	; 0x78
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    if (def_type == 'g' && p->m.precision > 0) {
 8004b30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b34:	2b67      	cmp	r3, #103	; 0x67
 8004b36:	d111      	bne.n	8004b5c <prv_double_to_str+0x3dc>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	dd0d      	ble.n	8004b5c <prv_double_to_str+0x3dc>
        digits_cnt += dblnum.digits_cnt_decimal_part_useful;
 8004b40:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004b44:	461a      	mov	r2, r3
 8004b46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b48:	4413      	add	r3, r2
 8004b4a:	67bb      	str	r3, [r7, #120]	; 0x78
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 8004b4c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	dd12      	ble.n	8004b7a <prv_double_to_str+0x3fa>
            ++digits_cnt;
 8004b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b56:	3301      	adds	r3, #1
 8004b58:	67bb      	str	r3, [r7, #120]	; 0x78
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 8004b5a:	e00e      	b.n	8004b7a <prv_double_to_str+0x3fa>
        }
    } else
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        if (chosen_precision > 0 && p->m.flags.precision) {
 8004b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	dd0b      	ble.n	8004b7a <prv_double_to_str+0x3fa>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	7f1b      	ldrb	r3, [r3, #28]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <prv_double_to_str+0x3fa>
            /* Add precision digits + dot separator */
            digits_cnt += chosen_precision + 1;
 8004b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b72:	3301      	adds	r3, #1
 8004b74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b76:	4413      	add	r3, r2
 8004b78:	67bb      	str	r3, [r7, #120]	; 0x78
        }

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Increase number of digits to display */
    if (p->m.type == 'e') {
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004b80:	2b65      	cmp	r3, #101	; 0x65
 8004b82:	d10d      	bne.n	8004ba0 <prv_double_to_str+0x420>
        /* Format is +Exxx, so add 4 or 5 characters (max is 307, min is 00 for exponent) */
        digits_cnt += 4 + (exp_cnt >= 100 || exp_cnt <= -100);
 8004b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b86:	2b63      	cmp	r3, #99	; 0x63
 8004b88:	dc03      	bgt.n	8004b92 <prv_double_to_str+0x412>
 8004b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b8c:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004b90:	da01      	bge.n	8004b96 <prv_double_to_str+0x416>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <prv_double_to_str+0x418>
 8004b96:	2300      	movs	r3, #0
 8004b98:	3304      	adds	r3, #4
 8004b9a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b9c:	4413      	add	r3, r2
 8004b9e:	67bb      	str	r3, [r7, #120]	; 0x78
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */

    /* Output strings */
    prv_out_str_before(p, digits_cnt);
 8004ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7fe fee6 	bl	8003976 <prv_out_str_before>

    /* Output integer part of number */
    if (dblnum.integer_part == 0) {
 8004baa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	d105      	bne.n	8004bbe <prv_double_to_str+0x43e>
        p->out_fn(p, '0');
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	2130      	movs	r1, #48	; 0x30
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	4798      	blx	r3
 8004bbc:	e03a      	b.n	8004c34 <prv_double_to_str+0x4b4>
    } else {
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004bc2:	e01f      	b.n	8004c04 <prv_double_to_str+0x484>
            str[i] = '0' + (char)(dblnum.integer_part % 10);
 8004bc4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004bc8:	f04f 020a 	mov.w	r2, #10
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	f7fb ff50 	bl	8000a74 <__aeabi_ldivmod>
 8004bd4:	b2d3      	uxtb	r3, r2
 8004bd6:	3330      	adds	r3, #48	; 0x30
 8004bd8:	b2d9      	uxtb	r1, r3
 8004bda:	f107 0218 	add.w	r2, r7, #24
 8004bde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004be0:	4413      	add	r3, r2
 8004be2:	460a      	mov	r2, r1
 8004be4:	701a      	strb	r2, [r3, #0]
        for (i = 0; dblnum.integer_part > 0; dblnum.integer_part /= 10, ++i) {
 8004be6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004bea:	f04f 020a 	mov.w	r2, #10
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	f7fb ff3f 	bl	8000a74 <__aeabi_ldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8004bfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c00:	3301      	adds	r3, #1
 8004c02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004c08:	2a01      	cmp	r2, #1
 8004c0a:	f173 0300 	sbcs.w	r3, r3, #0
 8004c0e:	dad9      	bge.n	8004bc4 <prv_double_to_str+0x444>
        }
        for (; i > 0; --i) {
 8004c10:	e00d      	b.n	8004c2e <prv_double_to_str+0x4ae>
            p->out_fn(p, str[i - 1]);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c18:	3a01      	subs	r2, #1
 8004c1a:	3280      	adds	r2, #128	; 0x80
 8004c1c:	443a      	add	r2, r7
 8004c1e:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8004c22:	4611      	mov	r1, r2
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	4798      	blx	r3
        for (; i > 0; --i) {
 8004c28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1ee      	bne.n	8004c12 <prv_double_to_str+0x492>
        }
    }

    /* Output decimal part */
    if (p->m.precision > 0) {
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f340 809b 	ble.w	8004d74 <prv_double_to_str+0x5f4>
        int x;
        if (dblnum.digits_cnt_decimal_part_useful > 0) {
 8004c3e:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	dd04      	ble.n	8004c50 <prv_double_to_str+0x4d0>
            p->out_fn(p, '.');
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	212e      	movs	r1, #46	; 0x2e
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	4798      	blx	r3
        }
        for (i = 0; dblnum.decimal_part > 0; dblnum.decimal_part /= 10, ++i) {
 8004c50:	2300      	movs	r3, #0
 8004c52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c54:	e01f      	b.n	8004c96 <prv_double_to_str+0x516>
            str[i] = '0' + (dblnum.decimal_part % 10);
 8004c56:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004c5a:	f04f 020a 	mov.w	r2, #10
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	f7fb ff07 	bl	8000a74 <__aeabi_ldivmod>
 8004c66:	b2d3      	uxtb	r3, r2
 8004c68:	3330      	adds	r3, #48	; 0x30
 8004c6a:	b2d9      	uxtb	r1, r3
 8004c6c:	f107 0218 	add.w	r2, r7, #24
 8004c70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c72:	4413      	add	r3, r2
 8004c74:	460a      	mov	r2, r1
 8004c76:	701a      	strb	r2, [r3, #0]
        for (i = 0; dblnum.decimal_part > 0; dblnum.decimal_part /= 10, ++i) {
 8004c78:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004c7c:	f04f 020a 	mov.w	r2, #10
 8004c80:	f04f 0300 	mov.w	r3, #0
 8004c84:	f7fb fef6 	bl	8000a74 <__aeabi_ldivmod>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004c90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c92:	3301      	adds	r3, #1
 8004c94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c9a:	2a01      	cmp	r2, #1
 8004c9c:	f173 0300 	sbcs.w	r3, r3, #0
 8004ca0:	dad9      	bge.n	8004c56 <prv_double_to_str+0x4d6>
        }

        /* Output relevant zeros first, string to print is opposite way */
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
        if (def_type == 'g') {
 8004ca2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ca6:	2b67      	cmp	r3, #103	; 0x67
 8004ca8:	d11f      	bne.n	8004cea <prv_double_to_str+0x56a>
            /* TODO: This is to be checked */
            for (x = 0; (size_t)x < p->m.precision - i && dblnum.digits_cnt_decimal_part_useful > 0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	667b      	str	r3, [r7, #100]	; 0x64
 8004cae:	e00f      	b.n	8004cd0 <prv_double_to_str+0x550>
                 ++x, --dblnum.digits_cnt_decimal_part_useful) {
                p->out_fn(p, '0');
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	2130      	movs	r1, #48	; 0x30
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	4798      	blx	r3
                 ++x, --dblnum.digits_cnt_decimal_part_useful) {
 8004cba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	667b      	str	r3, [r7, #100]	; 0x64
 8004cc0:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	b21b      	sxth	r3, r3
 8004ccc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            for (x = 0; (size_t)x < p->m.precision - i && dblnum.digits_cnt_decimal_part_useful > 0;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cd8:	1ad2      	subs	r2, r2, r3
 8004cda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d933      	bls.n	8004d48 <prv_double_to_str+0x5c8>
 8004ce0:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	dce3      	bgt.n	8004cb0 <prv_double_to_str+0x530>
 8004ce8:	e02e      	b.n	8004d48 <prv_double_to_str+0x5c8>
            }
        } else
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        {
            for (x = i; x < p->m.precision; ++x) {
 8004cea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004cec:	667b      	str	r3, [r7, #100]	; 0x64
 8004cee:	e007      	b.n	8004d00 <prv_double_to_str+0x580>
                p->out_fn(p, '0');
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	2130      	movs	r1, #48	; 0x30
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	4798      	blx	r3
            for (x = i; x < p->m.precision; ++x) {
 8004cfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	667b      	str	r3, [r7, #100]	; 0x64
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d06:	429a      	cmp	r2, r3
 8004d08:	dbf2      	blt.n	8004cf0 <prv_double_to_str+0x570>
            }
        }

        /* Now print string itself */
        for (; i > 0; --i) {
 8004d0a:	e01d      	b.n	8004d48 <prv_double_to_str+0x5c8>
            p->out_fn(p, str[i - 1]);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004d12:	3a01      	subs	r2, #1
 8004d14:	3280      	adds	r2, #128	; 0x80
 8004d16:	443a      	add	r2, r7
 8004d18:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	4798      	blx	r3
#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
            if (def_type == 'g' && --dblnum.digits_cnt_decimal_part_useful == 0) {
 8004d22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d26:	2b67      	cmp	r3, #103	; 0x67
 8004d28:	d10b      	bne.n	8004d42 <prv_double_to_str+0x5c2>
 8004d2a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	b21b      	sxth	r3, r3
 8004d36:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8004d3a:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d006      	beq.n	8004d50 <prv_double_to_str+0x5d0>
        for (; i > 0; --i) {
 8004d42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d44:	3b01      	subs	r3, #1
 8004d46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1de      	bne.n	8004d0c <prv_double_to_str+0x58c>
 8004d4e:	e000      	b.n	8004d52 <prv_double_to_str+0x5d2>
                break;
 8004d50:	bf00      	nop
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
        }

        /* Print ending zeros if selected precision is bigger than maximum supported */
        if (def_type != 'g') {
 8004d52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d56:	2b67      	cmp	r3, #103	; 0x67
 8004d58:	d00c      	beq.n	8004d74 <prv_double_to_str+0x5f4>
            for (; x < chosen_precision; ++x) {
 8004d5a:	e007      	b.n	8004d6c <prv_double_to_str+0x5ec>
                p->out_fn(p, '0');
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	2130      	movs	r1, #48	; 0x30
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	4798      	blx	r3
            for (; x < chosen_precision; ++x) {
 8004d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d68:	3301      	adds	r3, #1
 8004d6a:	667b      	str	r3, [r7, #100]	; 0x64
 8004d6c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d70:	429a      	cmp	r2, r3
 8004d72:	dbf3      	blt.n	8004d5c <prv_double_to_str+0x5dc>
        }
    }

#if LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING
    /* Engineering mode output, add exponent part */
    if (p->m.type == 'e') {
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8004d7a:	2b65      	cmp	r3, #101	; 0x65
 8004d7c:	d15c      	bne.n	8004e38 <prv_double_to_str+0x6b8>
        p->out_fn(p, p->m.flags.uc ? 'E' : 'e');
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	7f52      	ldrb	r2, [r2, #29]
 8004d86:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	2a00      	cmp	r2, #0
 8004d8e:	d001      	beq.n	8004d94 <prv_double_to_str+0x614>
 8004d90:	2245      	movs	r2, #69	; 0x45
 8004d92:	e000      	b.n	8004d96 <prv_double_to_str+0x616>
 8004d94:	2265      	movs	r2, #101	; 0x65
 8004d96:	4611      	mov	r1, r2
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	4798      	blx	r3
        p->out_fn(p, exp_cnt >= 0 ? '+' : '-');
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	695b      	ldr	r3, [r3, #20]
 8004da0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004da2:	2a00      	cmp	r2, #0
 8004da4:	db01      	blt.n	8004daa <prv_double_to_str+0x62a>
 8004da6:	222b      	movs	r2, #43	; 0x2b
 8004da8:	e000      	b.n	8004dac <prv_double_to_str+0x62c>
 8004daa:	222d      	movs	r2, #45	; 0x2d
 8004dac:	4611      	mov	r1, r2
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	4798      	blx	r3
        if (exp_cnt < 0) {
 8004db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	da02      	bge.n	8004dbe <prv_double_to_str+0x63e>
            exp_cnt = -exp_cnt;
 8004db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dba:	425b      	negs	r3, r3
 8004dbc:	677b      	str	r3, [r7, #116]	; 0x74
        }
        if (exp_cnt >= 100) {
 8004dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc0:	2b63      	cmp	r3, #99	; 0x63
 8004dc2:	dd16      	ble.n	8004df2 <prv_double_to_str+0x672>
            p->out_fn(p, '0' + (char)(exp_cnt / 100));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	695a      	ldr	r2, [r3, #20]
 8004dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dca:	4920      	ldr	r1, [pc, #128]	; (8004e4c <prv_double_to_str+0x6cc>)
 8004dcc:	fb81 0103 	smull	r0, r1, r1, r3
 8004dd0:	1149      	asrs	r1, r1, #5
 8004dd2:	17db      	asrs	r3, r3, #31
 8004dd4:	1acb      	subs	r3, r1, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	3330      	adds	r3, #48	; 0x30
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	4619      	mov	r1, r3
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	4790      	blx	r2
            exp_cnt /= 100;
 8004de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004de4:	4a19      	ldr	r2, [pc, #100]	; (8004e4c <prv_double_to_str+0x6cc>)
 8004de6:	fb82 1203 	smull	r1, r2, r2, r3
 8004dea:	1152      	asrs	r2, r2, #5
 8004dec:	17db      	asrs	r3, r3, #31
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	677b      	str	r3, [r7, #116]	; 0x74
        }
        p->out_fn(p, '0' + (char)(exp_cnt / 10));
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df8:	4915      	ldr	r1, [pc, #84]	; (8004e50 <prv_double_to_str+0x6d0>)
 8004dfa:	fb81 0103 	smull	r0, r1, r1, r3
 8004dfe:	1089      	asrs	r1, r1, #2
 8004e00:	17db      	asrs	r3, r3, #31
 8004e02:	1acb      	subs	r3, r1, r3
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	3330      	adds	r3, #48	; 0x30
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	4790      	blx	r2
        p->out_fn(p, '0' + (char)(exp_cnt % 10));
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	695c      	ldr	r4, [r3, #20]
 8004e14:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004e16:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <prv_double_to_str+0x6d0>)
 8004e18:	fb83 1302 	smull	r1, r3, r3, r2
 8004e1c:	1099      	asrs	r1, r3, #2
 8004e1e:	17d3      	asrs	r3, r2, #31
 8004e20:	1ac9      	subs	r1, r1, r3
 8004e22:	460b      	mov	r3, r1
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	1ad1      	subs	r1, r2, r3
 8004e2c:	b2cb      	uxtb	r3, r1
 8004e2e:	3330      	adds	r3, #48	; 0x30
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	4619      	mov	r1, r3
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	47a0      	blx	r4
    }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
    prv_out_str_after(p, digits_cnt);
 8004e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7fe fec8 	bl	8003bd2 <prv_out_str_after>

    return 1;
 8004e42:	2301      	movs	r3, #1
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3780      	adds	r7, #128	; 0x80
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e4c:	51eb851f 	.word	0x51eb851f
 8004e50:	66666667 	.word	0x66666667

08004e54 <prv_format>:
 * \param[in,out]   p: LwPRINTF internal instance
 * \param[in]       arg: Variable parameters list
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_format(lwprintf_int_t* p, va_list arg) {
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b08e      	sub	sp, #56	; 0x38
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
    uint8_t detected = 0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    const char* fmt = p->fmt;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	60bb      	str	r3, [r7, #8]
         || !lwprintf_sys_mutex_wait(&p->lwobj->mutex))) { /* Cannot acquire mutex */
        return 0;
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */

    while (fmt != NULL && *fmt != '\0') {
 8004e6a:	f000 bc65 	b.w	8005738 <prv_format+0x8e4>
        /* Check if we should stop processing */
        if (p->is_print_cancelled) {
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	7e1b      	ldrb	r3, [r3, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f040 8469 	bne.w	800574a <prv_format+0x8f6>
            break;
        }

        /* Detect beginning */
        if (*fmt != '%') {
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b25      	cmp	r3, #37	; 0x25
 8004e7e:	d00b      	beq.n	8004e98 <prv_format+0x44>
            p->out_fn(p, *fmt); /* Output character */
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	7812      	ldrb	r2, [r2, #0]
 8004e88:	4611      	mov	r1, r2
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
            ++fmt;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	3301      	adds	r3, #1
 8004e92:	60bb      	str	r3, [r7, #8]
            continue;
 8004e94:	f000 bc50 	b.w	8005738 <prv_format+0x8e4>
        }
        ++fmt;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	60bb      	str	r3, [r7, #8]
        memset(&p->m, 0x00, sizeof(p->m)); /* Reset structure */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	331c      	adds	r3, #28
 8004ea2:	2210      	movs	r2, #16
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f002 fa2c 	bl	8007304 <memset>
        /* %[flags][width][.precision][length]type */
        /* Go to https://docs.majerle.eu for more info about supported features */

        /* Check [flags] */
        /* It can have multiple flags in any order */
        detected = 1;
 8004eac:	2301      	movs	r3, #1
 8004eae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        do {
            switch (*fmt) {
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	3b20      	subs	r3, #32
 8004eb8:	2b10      	cmp	r3, #16
 8004eba:	d849      	bhi.n	8004f50 <prv_format+0xfc>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <prv_format+0x70>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004f21 	.word	0x08004f21
 8004ec8:	08004f51 	.word	0x08004f51
 8004ecc:	08004f51 	.word	0x08004f51
 8004ed0:	08004f45 	.word	0x08004f45
 8004ed4:	08004f51 	.word	0x08004f51
 8004ed8:	08004f51 	.word	0x08004f51
 8004edc:	08004f51 	.word	0x08004f51
 8004ee0:	08004f39 	.word	0x08004f39
 8004ee4:	08004f51 	.word	0x08004f51
 8004ee8:	08004f51 	.word	0x08004f51
 8004eec:	08004f51 	.word	0x08004f51
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f51 	.word	0x08004f51
 8004ef8:	08004f09 	.word	0x08004f09
 8004efc:	08004f51 	.word	0x08004f51
 8004f00:	08004f51 	.word	0x08004f51
 8004f04:	08004f2d 	.word	0x08004f2d
                case '-':
                    p->m.flags.left_align = 1;
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	7f13      	ldrb	r3, [r2, #28]
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	7713      	strb	r3, [r2, #28]
                    break;
 8004f12:	e021      	b.n	8004f58 <prv_format+0x104>
                case '+':
                    p->m.flags.plus = 1;
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	7f13      	ldrb	r3, [r2, #28]
 8004f18:	f043 0302 	orr.w	r3, r3, #2
 8004f1c:	7713      	strb	r3, [r2, #28]
                    break;
 8004f1e:	e01b      	b.n	8004f58 <prv_format+0x104>
                case ' ':
                    p->m.flags.space = 1;
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	7f13      	ldrb	r3, [r2, #28]
 8004f24:	f043 0304 	orr.w	r3, r3, #4
 8004f28:	7713      	strb	r3, [r2, #28]
                    break;
 8004f2a:	e015      	b.n	8004f58 <prv_format+0x104>
                case '0':
                    p->m.flags.zero = 1;
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	7f13      	ldrb	r3, [r2, #28]
 8004f30:	f043 0308 	orr.w	r3, r3, #8
 8004f34:	7713      	strb	r3, [r2, #28]
                    break;
 8004f36:	e00f      	b.n	8004f58 <prv_format+0x104>
                case '\'':
                    p->m.flags.thousands = 1;
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	7f13      	ldrb	r3, [r2, #28]
 8004f3c:	f043 0310 	orr.w	r3, r3, #16
 8004f40:	7713      	strb	r3, [r2, #28]
                    break;
 8004f42:	e009      	b.n	8004f58 <prv_format+0x104>
                case '#':
                    p->m.flags.alt = 1;
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	7f13      	ldrb	r3, [r2, #28]
 8004f48:	f043 0320 	orr.w	r3, r3, #32
 8004f4c:	7713      	strb	r3, [r2, #28]
                    break;
 8004f4e:	e003      	b.n	8004f58 <prv_format+0x104>
                default:
                    detected = 0;
 8004f50:	2300      	movs	r3, #0
 8004f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                    break;
 8004f56:	bf00      	nop
            }
            if (detected) {
 8004f58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <prv_format+0x112>
                ++fmt;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	3301      	adds	r3, #1
 8004f64:	60bb      	str	r3, [r7, #8]
            }
        } while (detected);
 8004f66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1a1      	bne.n	8004eb2 <prv_format+0x5e>

        /* Check [width] */
        p->m.width = 0;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	625a      	str	r2, [r3, #36]	; 0x24
        if (CHARISNUM(*fmt)) { /* Fixed width check */
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	2b2f      	cmp	r3, #47	; 0x2f
 8004f7a:	d90c      	bls.n	8004f96 <prv_format+0x142>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b39      	cmp	r3, #57	; 0x39
 8004f82:	d808      	bhi.n	8004f96 <prv_format+0x142>
            /* If number is negative, it has been captured from previous step (left align) */
            p->m.width = prv_parse_num(&fmt); /* Number from string directly */
 8004f84:	f107 0308 	add.w	r3, r7, #8
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fe fcca 	bl	8003922 <prv_parse_num>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24
 8004f94:	e01b      	b.n	8004fce <prv_format+0x17a>
        } else if (*fmt == '*') {             /* Or variable check */
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f9c:	d117      	bne.n	8004fce <prv_format+0x17a>
            const int w = (int)va_arg(arg, int);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	1d1a      	adds	r2, r3, #4
 8004fa2:	603a      	str	r2, [r7, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	623b      	str	r3, [r7, #32]
            if (w < 0) {
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	da09      	bge.n	8004fc2 <prv_format+0x16e>
                p->m.flags.left_align = 1; /* Negative width means left aligned */
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	7f13      	ldrb	r3, [r2, #28]
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	7713      	strb	r3, [r2, #28]
                p->m.width = -w;
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	425a      	negs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	625a      	str	r2, [r3, #36]	; 0x24
 8004fc0:	e002      	b.n	8004fc8 <prv_format+0x174>
            } else {
                p->m.width = w;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a3a      	ldr	r2, [r7, #32]
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            ++fmt;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	60bb      	str	r3, [r7, #8]
        }

        /* Check [.precision] */
        p->m.precision = 0;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	621a      	str	r2, [r3, #32]
        if (*fmt == '.') { /* Precision flag is detected */
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8004fda:	d129      	bne.n	8005030 <prv_format+0x1dc>
            p->m.flags.precision = 1;
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	7f13      	ldrb	r3, [r2, #28]
 8004fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fe4:	7713      	strb	r3, [r2, #28]
            if (*++fmt == '*') { /* Variable check */
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	3301      	adds	r3, #1
 8004fea:	60bb      	str	r3, [r7, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ff2:	d10d      	bne.n	8005010 <prv_format+0x1bc>
                const int pr = (int)va_arg(arg, int);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	1d1a      	adds	r2, r3, #4
 8004ff8:	603a      	str	r2, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	61fb      	str	r3, [r7, #28]
                p->m.precision = pr > 0 ? pr : 0;
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	621a      	str	r2, [r3, #32]
                ++fmt;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	3301      	adds	r3, #1
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	e00f      	b.n	8005030 <prv_format+0x1dc>
            } else if (CHARISNUM(*fmt)) { /* Directly in the string */
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b2f      	cmp	r3, #47	; 0x2f
 8005016:	d90b      	bls.n	8005030 <prv_format+0x1dc>
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b39      	cmp	r3, #57	; 0x39
 800501e:	d807      	bhi.n	8005030 <prv_format+0x1dc>
                p->m.precision = prv_parse_num(&fmt);
 8005020:	f107 0308 	add.w	r3, r7, #8
 8005024:	4618      	mov	r0, r3
 8005026:	f7fe fc7c 	bl	8003922 <prv_parse_num>
 800502a:	4602      	mov	r2, r0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	621a      	str	r2, [r3, #32]
            }
        }

        /* Check [length] */
        detected = 1;
 8005030:	2301      	movs	r3, #1
 8005032:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        switch (*fmt) {
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	3b4c      	subs	r3, #76	; 0x4c
 800503c:	2b2e      	cmp	r3, #46	; 0x2e
 800503e:	f200 80a1 	bhi.w	8005184 <prv_format+0x330>
 8005042:	a201      	add	r2, pc, #4	; (adr r2, 8005048 <prv_format+0x1f4>)
 8005044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005048:	0800518d 	.word	0x0800518d
 800504c:	08005185 	.word	0x08005185
 8005050:	08005185 	.word	0x08005185
 8005054:	08005185 	.word	0x08005185
 8005058:	08005185 	.word	0x08005185
 800505c:	08005185 	.word	0x08005185
 8005060:	08005185 	.word	0x08005185
 8005064:	08005185 	.word	0x08005185
 8005068:	08005185 	.word	0x08005185
 800506c:	08005185 	.word	0x08005185
 8005070:	08005185 	.word	0x08005185
 8005074:	08005185 	.word	0x08005185
 8005078:	08005185 	.word	0x08005185
 800507c:	08005185 	.word	0x08005185
 8005080:	08005185 	.word	0x08005185
 8005084:	08005185 	.word	0x08005185
 8005088:	08005185 	.word	0x08005185
 800508c:	08005185 	.word	0x08005185
 8005090:	08005185 	.word	0x08005185
 8005094:	08005185 	.word	0x08005185
 8005098:	08005185 	.word	0x08005185
 800509c:	08005185 	.word	0x08005185
 80050a0:	08005185 	.word	0x08005185
 80050a4:	08005185 	.word	0x08005185
 80050a8:	08005185 	.word	0x08005185
 80050ac:	08005185 	.word	0x08005185
 80050b0:	08005185 	.word	0x08005185
 80050b4:	08005185 	.word	0x08005185
 80050b8:	08005105 	.word	0x08005105
 80050bc:	08005185 	.word	0x08005185
 80050c0:	08005173 	.word	0x08005173
 80050c4:	08005185 	.word	0x08005185
 80050c8:	08005133 	.word	0x08005133
 80050cc:	08005185 	.word	0x08005185
 80050d0:	08005185 	.word	0x08005185
 80050d4:	08005185 	.word	0x08005185
 80050d8:	08005185 	.word	0x08005185
 80050dc:	08005185 	.word	0x08005185
 80050e0:	08005185 	.word	0x08005185
 80050e4:	08005185 	.word	0x08005185
 80050e8:	0800518d 	.word	0x0800518d
 80050ec:	08005185 	.word	0x08005185
 80050f0:	08005185 	.word	0x08005185
 80050f4:	08005185 	.word	0x08005185
 80050f8:	08005185 	.word	0x08005185
 80050fc:	08005185 	.word	0x08005185
 8005100:	08005161 	.word	0x08005161
            case 'h':
                p->m.flags.char_short = 1;     /* Single h detected */
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	7f53      	ldrb	r3, [r2, #29]
 8005108:	2101      	movs	r1, #1
 800510a:	f361 0383 	bfi	r3, r1, #2, #2
 800510e:	7753      	strb	r3, [r2, #29]
                if (*++fmt == 'h') {           /* Does it follow by another h? */
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	3301      	adds	r3, #1
 8005114:	60bb      	str	r3, [r7, #8]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b68      	cmp	r3, #104	; 0x68
 800511c:	d138      	bne.n	8005190 <prv_format+0x33c>
                    p->m.flags.char_short = 2; /* Second h detected */
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	7f53      	ldrb	r3, [r2, #29]
 8005122:	2102      	movs	r1, #2
 8005124:	f361 0383 	bfi	r3, r1, #2, #2
 8005128:	7753      	strb	r3, [r2, #29]
                    ++fmt;
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	3301      	adds	r3, #1
 800512e:	60bb      	str	r3, [r7, #8]
                }
                break;
 8005130:	e02e      	b.n	8005190 <prv_format+0x33c>
            case 'l':
                p->m.flags.longlong = 1;     /* Single l detected */
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	7f53      	ldrb	r3, [r2, #29]
 8005136:	2101      	movs	r1, #1
 8005138:	f361 0301 	bfi	r3, r1, #0, #2
 800513c:	7753      	strb	r3, [r2, #29]
                if (*++fmt == 'l') {         /* Does it follow by another l? */
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	3301      	adds	r3, #1
 8005142:	60bb      	str	r3, [r7, #8]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b6c      	cmp	r3, #108	; 0x6c
 800514a:	d123      	bne.n	8005194 <prv_format+0x340>
                    p->m.flags.longlong = 2; /* Second l detected */
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	7f53      	ldrb	r3, [r2, #29]
 8005150:	2102      	movs	r1, #2
 8005152:	f361 0301 	bfi	r3, r1, #0, #2
 8005156:	7753      	strb	r3, [r2, #29]
                    ++fmt;
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	3301      	adds	r3, #1
 800515c:	60bb      	str	r3, [r7, #8]
                }
                break;
 800515e:	e019      	b.n	8005194 <prv_format+0x340>
            case 'L':
                break;
            case 'z':
                p->m.flags.sz_t = 1; /* Size T flag */
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	7f53      	ldrb	r3, [r2, #29]
 8005164:	f043 0310 	orr.w	r3, r3, #16
 8005168:	7753      	strb	r3, [r2, #29]
                ++fmt;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	3301      	adds	r3, #1
 800516e:	60bb      	str	r3, [r7, #8]
                break;
 8005170:	e011      	b.n	8005196 <prv_format+0x342>
            case 'j':
                p->m.flags.umax_t = 1; /* uintmax_t flag */
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	7f53      	ldrb	r3, [r2, #29]
 8005176:	f043 0320 	orr.w	r3, r3, #32
 800517a:	7753      	strb	r3, [r2, #29]
                ++fmt;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	3301      	adds	r3, #1
 8005180:	60bb      	str	r3, [r7, #8]
                break;
 8005182:	e008      	b.n	8005196 <prv_format+0x342>
            case 't':
                break;
            default:
                detected = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800518a:	e004      	b.n	8005196 <prv_format+0x342>
                break;
 800518c:	bf00      	nop
 800518e:	e002      	b.n	8005196 <prv_format+0x342>
                break;
 8005190:	bf00      	nop
 8005192:	e000      	b.n	8005196 <prv_format+0x342>
                break;
 8005194:	bf00      	nop
        }

        /* Check type */
        p->m.type = *fmt + ((*fmt >= 'A' && *fmt <= 'Z') ? 0x20 : 0x00);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	7812      	ldrb	r2, [r2, #0]
 800519e:	2a40      	cmp	r2, #64	; 0x40
 80051a0:	d905      	bls.n	80051ae <prv_format+0x35a>
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	7812      	ldrb	r2, [r2, #0]
 80051a6:	2a5a      	cmp	r2, #90	; 0x5a
 80051a8:	d801      	bhi.n	80051ae <prv_format+0x35a>
 80051aa:	2220      	movs	r2, #32
 80051ac:	e000      	b.n	80051b0 <prv_format+0x35c>
 80051ae:	2200      	movs	r2, #0
 80051b0:	4413      	add	r3, r2
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
        if (*fmt >= 'A' && *fmt <= 'Z') {
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d908      	bls.n	80051d4 <prv_format+0x380>
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b5a      	cmp	r3, #90	; 0x5a
 80051c8:	d804      	bhi.n	80051d4 <prv_format+0x380>
            p->m.flags.uc = 1;
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	7f53      	ldrb	r3, [r2, #29]
 80051ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d2:	7753      	strb	r3, [r2, #29]
        }
        switch (*fmt) {
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	3b25      	subs	r3, #37	; 0x25
 80051da:	2b53      	cmp	r3, #83	; 0x53
 80051dc:	f200 829c 	bhi.w	8005718 <prv_format+0x8c4>
 80051e0:	a201      	add	r2, pc, #4	; (adr r2, 80051e8 <prv_format+0x394>)
 80051e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e6:	bf00      	nop
 80051e8:	080055df 	.word	0x080055df
 80051ec:	08005719 	.word	0x08005719
 80051f0:	08005719 	.word	0x08005719
 80051f4:	08005719 	.word	0x08005719
 80051f8:	08005719 	.word	0x08005719
 80051fc:	08005719 	.word	0x08005719
 8005200:	08005719 	.word	0x08005719
 8005204:	08005719 	.word	0x08005719
 8005208:	08005719 	.word	0x08005719
 800520c:	08005719 	.word	0x08005719
 8005210:	08005719 	.word	0x08005719
 8005214:	08005719 	.word	0x08005719
 8005218:	08005719 	.word	0x08005719
 800521c:	08005719 	.word	0x08005719
 8005220:	08005719 	.word	0x08005719
 8005224:	08005719 	.word	0x08005719
 8005228:	08005719 	.word	0x08005719
 800522c:	08005719 	.word	0x08005719
 8005230:	08005719 	.word	0x08005719
 8005234:	08005719 	.word	0x08005719
 8005238:	08005719 	.word	0x08005719
 800523c:	08005719 	.word	0x08005719
 8005240:	08005719 	.word	0x08005719
 8005244:	08005719 	.word	0x08005719
 8005248:	08005719 	.word	0x08005719
 800524c:	08005719 	.word	0x08005719
 8005250:	08005719 	.word	0x08005719
 8005254:	08005719 	.word	0x08005719
 8005258:	08005339 	.word	0x08005339
 800525c:	080053d9 	.word	0x080053d9
 8005260:	08005719 	.word	0x08005719
 8005264:	08005719 	.word	0x08005719
 8005268:	080055a3 	.word	0x080055a3
 800526c:	080055a3 	.word	0x080055a3
 8005270:	080055a3 	.word	0x080055a3
 8005274:	08005719 	.word	0x08005719
 8005278:	08005719 	.word	0x08005719
 800527c:	08005719 	.word	0x08005719
 8005280:	080055eb 	.word	0x080055eb
 8005284:	08005719 	.word	0x08005719
 8005288:	08005719 	.word	0x08005719
 800528c:	08005719 	.word	0x08005719
 8005290:	08005719 	.word	0x08005719
 8005294:	08005719 	.word	0x08005719
 8005298:	08005719 	.word	0x08005719
 800529c:	08005719 	.word	0x08005719
 80052a0:	08005719 	.word	0x08005719
 80052a4:	08005719 	.word	0x08005719
 80052a8:	08005719 	.word	0x08005719
 80052ac:	08005719 	.word	0x08005719
 80052b0:	08005719 	.word	0x08005719
 80052b4:	080053d9 	.word	0x080053d9
 80052b8:	08005719 	.word	0x08005719
 80052bc:	08005719 	.word	0x08005719
 80052c0:	08005719 	.word	0x08005719
 80052c4:	08005719 	.word	0x08005719
 80052c8:	08005719 	.word	0x08005719
 80052cc:	08005719 	.word	0x08005719
 80052d0:	08005719 	.word	0x08005719
 80052d4:	08005719 	.word	0x08005719
 80052d8:	08005339 	.word	0x08005339
 80052dc:	080053d9 	.word	0x080053d9
 80052e0:	08005351 	.word	0x08005351
 80052e4:	08005367 	.word	0x08005367
 80052e8:	080055a3 	.word	0x080055a3
 80052ec:	080055a3 	.word	0x080055a3
 80052f0:	080055a3 	.word	0x080055a3
 80052f4:	08005719 	.word	0x08005719
 80052f8:	08005367 	.word	0x08005367
 80052fc:	08005719 	.word	0x08005719
 8005300:	080055eb 	.word	0x080055eb
 8005304:	08005719 	.word	0x08005719
 8005308:	08005719 	.word	0x08005719
 800530c:	080055c9 	.word	0x080055c9
 8005310:	080053d9 	.word	0x080053d9
 8005314:	0800556f 	.word	0x0800556f
 8005318:	08005719 	.word	0x08005719
 800531c:	08005719 	.word	0x08005719
 8005320:	08005529 	.word	0x08005529
 8005324:	08005719 	.word	0x08005719
 8005328:	080053d9 	.word	0x080053d9
 800532c:	08005719 	.word	0x08005719
 8005330:	08005719 	.word	0x08005719
 8005334:	080053d9 	.word	0x080053d9
            case 'a':
            case 'A':
                /* Double in hexadecimal notation */
                (void)va_arg(arg, double);    /* Read argument to ignore it and move to next one */
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	3307      	adds	r3, #7
 800533c:	f023 0307 	bic.w	r3, r3, #7
 8005340:	3308      	adds	r3, #8
 8005342:	603b      	str	r3, [r7, #0]
                prv_out_str_raw(p, "NaN", 3); /* Print string */
 8005344:	2203      	movs	r2, #3
 8005346:	499f      	ldr	r1, [pc, #636]	; (80055c4 <prv_format+0x770>)
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7fe fc64 	bl	8003c16 <prv_out_str_raw>
                break;
 800534e:	e1f0      	b.n	8005732 <prv_format+0x8de>
            case 'c':
                p->out_fn(p, (char)va_arg(arg, int));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695a      	ldr	r2, [r3, #20]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	1d19      	adds	r1, r3, #4
 8005358:	6039      	str	r1, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	4790      	blx	r2
                break;
 8005364:	e1e5      	b.n	8005732 <prv_format+0x8de>
#if LWPRINTF_CFG_SUPPORT_TYPE_INT
            case 'd':
            case 'i': {
                /* Check for different length parameters */
                p->m.base = 10;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	220a      	movs	r2, #10
 800536a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                if (p->m.flags.longlong == 0) {
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	7f5b      	ldrb	r3, [r3, #29]
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d108      	bne.n	800538e <prv_format+0x53a>
                    prv_signed_int_to_str(p, (signed int)va_arg(arg, signed int));
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	1d1a      	adds	r2, r3, #4
 8005380:	603a      	str	r2, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff f845 	bl	8004416 <prv_signed_int_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (p->m.flags.longlong == 2) {
                    prv_signed_longlong_int_to_str(p, (signed long long int)va_arg(arg, signed long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 800538c:	e1cc      	b.n	8005728 <prv_format+0x8d4>
                } else if (p->m.flags.longlong == 1) {
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	7f5b      	ldrb	r3, [r3, #29]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d108      	bne.n	80053ae <prv_format+0x55a>
                    prv_signed_long_int_to_str(p, (signed long int)va_arg(arg, signed long int));
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	1d1a      	adds	r2, r3, #4
 80053a0:	603a      	str	r2, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4619      	mov	r1, r3
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff f84f 	bl	800444a <prv_signed_long_int_to_str>
                break;
 80053ac:	e1bc      	b.n	8005728 <prv_format+0x8d4>
                } else if (p->m.flags.longlong == 2) {
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	7f5b      	ldrb	r3, [r3, #29]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	f040 81b5 	bne.w	8005728 <prv_format+0x8d4>
                    prv_signed_longlong_int_to_str(p, (signed long long int)va_arg(arg, signed long long int));
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	3307      	adds	r3, #7
 80053c2:	f023 0307 	bic.w	r3, r3, #7
 80053c6:	f103 0208 	add.w	r2, r3, #8
 80053ca:	603a      	str	r2, [r7, #0]
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff f854 	bl	800447e <prv_signed_longlong_int_to_str>
                break;
 80053d6:	e1a7      	b.n	8005728 <prv_format+0x8d4>
            case 'B':
            case 'o':
            case 'u':
            case 'x':
            case 'X':
                if (*fmt == 'b' || *fmt == 'B') {
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b62      	cmp	r3, #98	; 0x62
 80053de:	d003      	beq.n	80053e8 <prv_format+0x594>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b42      	cmp	r3, #66	; 0x42
 80053e6:	d104      	bne.n	80053f2 <prv_format+0x59e>
                    p->m.base = 2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80053f0:	e01d      	b.n	800542e <prv_format+0x5da>
                } else if (*fmt == 'o') {
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b6f      	cmp	r3, #111	; 0x6f
 80053f8:	d104      	bne.n	8005404 <prv_format+0x5b0>
                    p->m.base = 8;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2208      	movs	r2, #8
 80053fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005402:	e014      	b.n	800542e <prv_format+0x5da>
                } else if (*fmt == 'u') {
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	2b75      	cmp	r3, #117	; 0x75
 800540a:	d104      	bne.n	8005416 <prv_format+0x5c2>
                    p->m.base = 10;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	220a      	movs	r2, #10
 8005410:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005414:	e00b      	b.n	800542e <prv_format+0x5da>
                } else if (*fmt == 'x' || *fmt == 'X') {
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b78      	cmp	r3, #120	; 0x78
 800541c:	d003      	beq.n	8005426 <prv_format+0x5d2>
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b58      	cmp	r3, #88	; 0x58
 8005424:	d103      	bne.n	800542e <prv_format+0x5da>
                    p->m.base = 16;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2210      	movs	r2, #16
 800542a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                }
                p->m.flags.space = 0; /* Space flag has no meaning here */
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	7f13      	ldrb	r3, [r2, #28]
 8005432:	f36f 0382 	bfc	r3, #2, #1
 8005436:	7713      	strb	r3, [r2, #28]

                /* Check for different length parameters */
                if (0) {

                } else if (p->m.flags.sz_t) {
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	7f5b      	ldrb	r3, [r3, #29]
 800543c:	f003 0310 	and.w	r3, r3, #16
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d008      	beq.n	8005458 <prv_format+0x604>
                    prv_sizet_to_str(p, (size_t)va_arg(arg, size_t));
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	1d1a      	adds	r2, r3, #4
 800544a:	603a      	str	r2, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4619      	mov	r1, r3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7fe fe85 	bl	8004160 <prv_sizet_to_str>
#if LWPRINTF_CFG_SUPPORT_LONG_LONG
                } else if (p->m.flags.longlong == 2) {
                    prv_unsigned_longlong_int_to_str(p, (unsigned long long int)va_arg(arg, unsigned long long int));
#endif /* LWPRINTF_CFG_SUPPORT_LONG_LONG */
                }
                break;
 8005456:	e169      	b.n	800572c <prv_format+0x8d8>
                } else if (p->m.flags.umax_t) {
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	7f5b      	ldrb	r3, [r3, #29]
 800545c:	f003 0320 	and.w	r3, r3, #32
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00c      	beq.n	8005480 <prv_format+0x62c>
                    prv_umaxt_to_str(p, (uintmax_t)va_arg(arg, uintmax_t));
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	3307      	adds	r3, #7
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	f103 0208 	add.w	r2, r3, #8
 8005472:	603a      	str	r2, [r7, #0]
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fe fefb 	bl	8004274 <prv_umaxt_to_str>
                break;
 800547e:	e155      	b.n	800572c <prv_format+0x8d8>
                } else if (p->m.flags.longlong == 0 || p->m.base == 2) {
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	7f5b      	ldrb	r3, [r3, #29]
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <prv_format+0x644>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005494:	2b02      	cmp	r3, #2
 8005496:	d122      	bne.n	80054de <prv_format+0x68a>
                    switch (p->m.flags.char_short) {
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	7f5b      	ldrb	r3, [r3, #29]
 800549c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d008      	beq.n	80054b8 <prv_format+0x664>
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d10d      	bne.n	80054c6 <prv_format+0x672>
                            v = (unsigned int)((unsigned char)va_arg(arg, unsigned int));
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	1d1a      	adds	r2, r3, #4
 80054ae:	603a      	str	r2, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 80054b6:	e00c      	b.n	80054d2 <prv_format+0x67e>
                            v = (unsigned int)((unsigned short int)va_arg(arg, unsigned int));
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	1d1a      	adds	r2, r3, #4
 80054bc:	603a      	str	r2, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 80054c4:	e005      	b.n	80054d2 <prv_format+0x67e>
                            v = (unsigned int)((unsigned int)va_arg(arg, unsigned int));
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	1d1a      	adds	r2, r3, #4
 80054ca:	603a      	str	r2, [r7, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	633b      	str	r3, [r7, #48]	; 0x30
                            break;
 80054d0:	bf00      	nop
                    prv_unsigned_int_to_str(p, v);
 80054d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7fe fbd4 	bl	8003c82 <prv_unsigned_int_to_str>
                } else if (p->m.flags.longlong == 0 || p->m.base == 2) {
 80054da:	bf00      	nop
                break;
 80054dc:	e126      	b.n	800572c <prv_format+0x8d8>
                } else if (p->m.flags.longlong == 1) {
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	7f5b      	ldrb	r3, [r3, #29]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d108      	bne.n	80054fe <prv_format+0x6aa>
                    prv_unsigned_long_int_to_str(p, (unsigned long int)va_arg(arg, unsigned long int));
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	1d1a      	adds	r2, r3, #4
 80054f0:	603a      	str	r2, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4619      	mov	r1, r3
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f7fe fc4d 	bl	8003d96 <prv_unsigned_long_int_to_str>
                break;
 80054fc:	e116      	b.n	800572c <prv_format+0x8d8>
                } else if (p->m.flags.longlong == 2) {
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	7f5b      	ldrb	r3, [r3, #29]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	f040 810f 	bne.w	800572c <prv_format+0x8d8>
                    prv_unsigned_longlong_int_to_str(p, (unsigned long long int)va_arg(arg, unsigned long long int));
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	3307      	adds	r3, #7
 8005512:	f023 0307 	bic.w	r3, r3, #7
 8005516:	f103 0208 	add.w	r2, r3, #8
 800551a:	603a      	str	r2, [r7, #0]
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7fe fcc2 	bl	8003eaa <prv_unsigned_longlong_int_to_str>
                break;
 8005526:	e101      	b.n	800572c <prv_format+0x8d8>
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_INT */
#if LWPRINTF_CFG_SUPPORT_TYPE_STRING
            case 's': {
                const char* b = va_arg(arg, const char*);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	1d1a      	adds	r2, r3, #4
 800552c:	603a      	str	r2, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	61bb      	str	r3, [r7, #24]
                 * - If precision is given, max len is up to precision value
                 * - if user selects write to buffer, go up to buffer size (-1 actually, but handled by write function)
                 * - Otherwise use max available system length
                 */
                prv_out_str(p, b,
                            strnlen(b, p->m.flags.precision ? (size_t)p->m.precision
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	7f1b      	ldrb	r3, [r3, #28]
 8005536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553a:	b2db      	uxtb	r3, r3
                prv_out_str(p, b,
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <prv_format+0x6f2>
                            strnlen(b, p->m.flags.precision ? (size_t)p->m.precision
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	e008      	b.n	8005558 <prv_format+0x704>
                                                            : (p->buff != NULL ? p->buff_size : SIZE_MAX)));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <prv_format+0x700>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	e001      	b.n	8005558 <prv_format+0x704>
 8005554:	f04f 33ff 	mov.w	r3, #4294967295
                prv_out_str(p, b,
 8005558:	4619      	mov	r1, r3
 800555a:	69b8      	ldr	r0, [r7, #24]
 800555c:	f001 fee2 	bl	8007324 <strnlen>
 8005560:	4603      	mov	r3, r0
 8005562:	461a      	mov	r2, r3
 8005564:	69b9      	ldr	r1, [r7, #24]
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7fe fb73 	bl	8003c52 <prv_out_str>
                break;
 800556c:	e0e1      	b.n	8005732 <prv_format+0x8de>
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_STRING */
#if LWPRINTF_CFG_SUPPORT_TYPE_POINTER
            case 'p': {
                p->m.base = 16;                     /* Go to hex format */
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2210      	movs	r2, #16
 8005572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                p->m.flags.uc = 0;                  /* Uppercase characters */
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	7f53      	ldrb	r3, [r2, #29]
 800557a:	f36f 1386 	bfc	r3, #6, #1
 800557e:	7753      	strb	r3, [r2, #29]
                p->m.flags.zero = 1;                /* Zero padding */
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	7f13      	ldrb	r3, [r2, #28]
 8005584:	f043 0308 	orr.w	r3, r3, #8
 8005588:	7713      	strb	r3, [r2, #28]
                p->m.width = sizeof(uintptr_t) * 2; /* Number is in hex format and byte is represented with 2 letters */
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2208      	movs	r2, #8
 800558e:	625a      	str	r2, [r3, #36]	; 0x24

                prv_uintptr_to_str(p, (uintptr_t)va_arg(arg, uintptr_t));
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	1d1a      	adds	r2, r3, #4
 8005594:	603a      	str	r2, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4619      	mov	r1, r3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7fe fd56 	bl	800404c <prv_uintptr_to_str>
                break;
 80055a0:	e0c7      	b.n	8005732 <prv_format+0x8de>
            case 'E':
            case 'g':
            case 'G':
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_ENGINEERING */
                /* Double number in different format. Final output depends on type of format */
                prv_double_to_str(p, (double)va_arg(arg, double));
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	3307      	adds	r3, #7
 80055a6:	f023 0307 	bic.w	r3, r3, #7
 80055aa:	f103 0208 	add.w	r2, r3, #8
 80055ae:	603a      	str	r2, [r7, #0]
 80055b0:	ed93 7b00 	vldr	d7, [r3]
 80055b4:	eeb0 0a47 	vmov.f32	s0, s14
 80055b8:	eef0 0a67 	vmov.f32	s1, s15
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff f8df 	bl	8004780 <prv_double_to_str>
                break;
 80055c2:	e0b6      	b.n	8005732 <prv_format+0x8de>
 80055c4:	0800742c 	.word	0x0800742c
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_FLOAT */
            case 'n': {
                int* ptr = (void*)va_arg(arg, int*);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	1d1a      	adds	r2, r3, #4
 80055cc:	603a      	str	r2, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	617b      	str	r3, [r7, #20]
                *ptr = p->n; /* Write current length */
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	461a      	mov	r2, r3
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	601a      	str	r2, [r3, #0]

                break;
 80055dc:	e0a9      	b.n	8005732 <prv_format+0x8de>
            }
            case '%':
                p->out_fn(p, '%');
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	695b      	ldr	r3, [r3, #20]
 80055e2:	2125      	movs	r1, #37	; 0x25
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	4798      	blx	r3
                break;
 80055e8:	e0a3      	b.n	8005732 <prv_format+0x8de>
             * char arr[] = {0, 1, 2, 3, 255};
             * "%5K" would produce 00010203FF
             */
            case 'k':
            case 'K': {
                unsigned char* ptr =
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	1d1a      	adds	r2, r3, #4
 80055ee:	603a      	str	r2, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    (void*)va_arg(arg, unsigned char*); /* Get input parameter as unsigned char pointer */
                int len = p->m.width, full_width;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	613b      	str	r3, [r7, #16]
                uint8_t is_space = p->m.flags.space == 1;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	7f1b      	ldrb	r3, [r3, #28]
 80055fe:	f003 0304 	and.w	r3, r3, #4
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b00      	cmp	r3, #0
 8005606:	bf14      	ite	ne
 8005608:	2301      	movne	r3, #1
 800560a:	2300      	moveq	r3, #0
 800560c:	b2db      	uxtb	r3, r3
 800560e:	73fb      	strb	r3, [r7, #15]

                if (ptr == NULL || len == 0) {
 8005610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 808c 	beq.w	8005730 <prv_format+0x8dc>
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	f000 8088 	beq.w	8005730 <prv_format+0x8dc>
                    break;
                }

                p->m.flags.zero = 1;  /* Prepend with zeros if necessary */
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	7f13      	ldrb	r3, [r2, #28]
 8005624:	f043 0308 	orr.w	r3, r3, #8
 8005628:	7713      	strb	r3, [r2, #28]
                p->m.width = 0;       /* No width parameter */
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	625a      	str	r2, [r3, #36]	; 0x24
                p->m.base = 16;       /* Hex format */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2210      	movs	r2, #16
 8005634:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                p->m.flags.space = 0; /* Delete any flag for space */
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	7f13      	ldrb	r3, [r2, #28]
 800563c:	f36f 0382 	bfc	r3, #2, #1
 8005640:	7713      	strb	r3, [r2, #28]

                /* Full width of digits to print */
                full_width = len * (2 + (int)is_space);
 8005642:	7bfb      	ldrb	r3, [r7, #15]
 8005644:	1c9a      	adds	r2, r3, #2
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	fb02 f303 	mul.w	r3, r2, r3
 800564c:	62bb      	str	r3, [r7, #40]	; 0x28
                if (is_space && full_width > 0) {
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d005      	beq.n	8005660 <prv_format+0x80c>
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	2b00      	cmp	r3, #0
 8005658:	dd02      	ble.n	8005660 <prv_format+0x80c>
                    --full_width; /* Remove space after last number */
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	3b01      	subs	r3, #1
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
                }

                /* Output byte by byte w/o hex prefix */
                prv_out_str_before(p, full_width);
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7fe f986 	bl	8003976 <prv_out_str_before>
                for (int i = 0; i < len; ++i, ++ptr) {
 800566a:	2300      	movs	r3, #0
 800566c:	627b      	str	r3, [r7, #36]	; 0x24
 800566e:	e049      	b.n	8005704 <prv_format+0x8b0>
                    uint8_t d;

                    d = (*ptr >> 0x04) & 0x0F; /* Print MSB */
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	091b      	lsrs	r3, r3, #4
 8005676:	73bb      	strb	r3, [r7, #14]
                    p->out_fn(p, (char)(d) + (d >= 10 ? ((p->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	7bbb      	ldrb	r3, [r7, #14]
 800567e:	2b09      	cmp	r3, #9
 8005680:	d90a      	bls.n	8005698 <prv_format+0x844>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	7f5b      	ldrb	r3, [r3, #29]
 8005686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <prv_format+0x840>
 8005690:	2337      	movs	r3, #55	; 0x37
 8005692:	e002      	b.n	800569a <prv_format+0x846>
 8005694:	2357      	movs	r3, #87	; 0x57
 8005696:	e000      	b.n	800569a <prv_format+0x846>
 8005698:	2330      	movs	r3, #48	; 0x30
 800569a:	7bb9      	ldrb	r1, [r7, #14]
 800569c:	440b      	add	r3, r1
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	4619      	mov	r1, r3
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	4790      	blx	r2
                    d = *ptr & 0x0F; /* Print LSB */
 80056a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	73bb      	strb	r3, [r7, #14]
                    p->out_fn(p, (char)(d) + (d >= 10 ? ((p->m.flags.uc ? 'A' : 'a') - 10) : '0'));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695a      	ldr	r2, [r3, #20]
 80056b4:	7bbb      	ldrb	r3, [r7, #14]
 80056b6:	2b09      	cmp	r3, #9
 80056b8:	d90a      	bls.n	80056d0 <prv_format+0x87c>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	7f5b      	ldrb	r3, [r3, #29]
 80056be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <prv_format+0x878>
 80056c8:	2337      	movs	r3, #55	; 0x37
 80056ca:	e002      	b.n	80056d2 <prv_format+0x87e>
 80056cc:	2357      	movs	r3, #87	; 0x57
 80056ce:	e000      	b.n	80056d2 <prv_format+0x87e>
 80056d0:	2330      	movs	r3, #48	; 0x30
 80056d2:	7bb9      	ldrb	r1, [r7, #14]
 80056d4:	440b      	add	r3, r1
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4790      	blx	r2

                    if (is_space && i < (len - 1)) {
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <prv_format+0x8a4>
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ea:	429a      	cmp	r2, r3
 80056ec:	da04      	bge.n	80056f8 <prv_format+0x8a4>
                        p->out_fn(p, ' '); /* Generate space between numbers */
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	2120      	movs	r1, #32
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	4798      	blx	r3
                for (int i = 0; i < len; ++i, ++ptr) {
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	3301      	adds	r3, #1
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
 80056fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005700:	3301      	adds	r3, #1
 8005702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	429a      	cmp	r2, r3
 800570a:	dbb1      	blt.n	8005670 <prv_format+0x81c>
                    }
                }
                prv_out_str_after(p, full_width);
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7fe fa5e 	bl	8003bd2 <prv_out_str_after>
                break;
 8005716:	e00c      	b.n	8005732 <prv_format+0x8de>
            }
#endif /* LWPRINTF_CFG_SUPPORT_TYPE_BYTE_ARRAY */
            default:
                p->out_fn(p, *fmt);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	7812      	ldrb	r2, [r2, #0]
 8005720:	4611      	mov	r1, r2
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4798      	blx	r3
 8005726:	e004      	b.n	8005732 <prv_format+0x8de>
                break;
 8005728:	bf00      	nop
 800572a:	e002      	b.n	8005732 <prv_format+0x8de>
                break;
 800572c:	bf00      	nop
 800572e:	e000      	b.n	8005732 <prv_format+0x8de>
        }
        ++fmt;
 8005730:	bf00      	nop
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	3301      	adds	r3, #1
 8005736:	60bb      	str	r3, [r7, #8]
    while (fmt != NULL && *fmt != '\0') {
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d006      	beq.n	800574c <prv_format+0x8f8>
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	f47f ab93 	bne.w	8004e6e <prv_format+0x1a>
 8005748:	e000      	b.n	800574c <prv_format+0x8f8>
            break;
 800574a:	bf00      	nop
    }
    p->out_fn(p, '\0'); /* Output last zero number */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	2100      	movs	r1, #0
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
#if LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT
    if (IS_PRINT_MODE(p)) { /* Mutex only for print operation */
        lwprintf_sys_mutex_release(&p->lwobj->mutex);
    }
#endif /* LWPRINTF_CFG_OS && !LWPRINTF_CFG_OS_MANUAL_PROTECT */
    return 1;
 8005756:	2301      	movs	r3, #1
}
 8005758:	4618      	mov	r0, r3
 800575a:	3738      	adds	r7, #56	; 0x38
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <lwprintf_init_ex>:
 * \param[in,out]   lwobj: LwPRINTF working instance
 * \param[in]       out_fn: Output function used for print operation
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwprintf_init_ex(lwprintf_t* lwobj, lwprintf_output_fn out_fn) {
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
    LWPRINTF_GET_LWOBJ(lwobj)->out_fn = out_fn;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <lwprintf_init_ex+0x14>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	e000      	b.n	8005776 <lwprintf_init_ex+0x16>
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <lwprintf_init_ex+0x28>)
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	601a      	str	r2, [r3, #0]
    if (lwprintf_sys_mutex_isvalid(&LWPRINTF_GET_LWOBJ(lwobj)->mutex)
        || !lwprintf_sys_mutex_create(&LWPRINTF_GET_LWOBJ(lwobj)->mutex)) {
        return 0;
    }
#endif /* LWPRINTF_CFG_OS */
    return 1;
 800577a:	2301      	movs	r3, #1
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	20000304 	.word	0x20000304

0800578c <lwprintf_vprintf_ex>:
 *                      `va_list` is a special type defined in `<cstdarg>`.
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_vprintf_ex(lwprintf_t* const lwobj, const char* format, va_list arg) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b090      	sub	sp, #64	; 0x40
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
    lwprintf_int_t f = {
 8005798:	f107 0314 	add.w	r3, r7, #20
 800579c:	222c      	movs	r2, #44	; 0x2c
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fdaf 	bl	8007304 <memset>
        .lwobj = LWPRINTF_GET_LWOBJ(lwobj),
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <lwprintf_vprintf_ex+0x24>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	e000      	b.n	80057b2 <lwprintf_vprintf_ex+0x26>
 80057b0:	4b0b      	ldr	r3, [pc, #44]	; (80057e0 <lwprintf_vprintf_ex+0x54>)
    lwprintf_int_t f = {
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <lwprintf_vprintf_ex+0x58>)
 80057ba:	62bb      	str	r3, [r7, #40]	; 0x28
        .fmt = format,
        .buff = NULL,
        .buff_size = 0,
    };
    /* For direct print, output function must be set by user */
    if (f.lwobj->out_fn == NULL) {
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <lwprintf_vprintf_ex+0x3c>
        return 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	e006      	b.n	80057d6 <lwprintf_vprintf_ex+0x4a>
    }
    prv_format(&f, arg);
 80057c8:	f107 0314 	add.w	r3, r7, #20
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff fb40 	bl	8004e54 <prv_format>
    return f.n;
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3740      	adds	r7, #64	; 0x40
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20000304 	.word	0x20000304
 80057e4:	080038cd 	.word	0x080038cd

080057e8 <lwprintf_printf_ex>:
 * \param[in]       ...: Optional arguments for format string
 * \return          The number of characters that would have been written if `n` had been sufficiently large,
 *                      not counting the terminating null character.
 */
int
lwprintf_printf_ex(lwprintf_t* const lwobj, const char* format, ...) {
 80057e8:	b40e      	push	{r1, r2, r3}
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
    va_list va;
    int n;

    va_start(va, format);
 80057f2:	f107 0320 	add.w	r3, r7, #32
 80057f6:	60bb      	str	r3, [r7, #8]
    n = lwprintf_vprintf_ex(lwobj, format, va);
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	69f9      	ldr	r1, [r7, #28]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff ffc5 	bl	800578c <lwprintf_vprintf_ex>
 8005802:	60f8      	str	r0, [r7, #12]
    va_end(va);

    return n;
 8005804:	68fb      	ldr	r3, [r7, #12]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005810:	b003      	add	sp, #12
 8005812:	4770      	bx	lr

08005814 <lwrb_init>:
 * \param[in]       size: Size of `buffdata` in units of bytes
 *                      Maximum number of bytes buffer can hold is `size - 1`
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwrb_init(lwrb_t* buff, void* buffdata, size_t size) {
 8005814:	b480      	push	{r7}
 8005816:	b089      	sub	sp, #36	; 0x24
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
    if (buff == NULL || buffdata == NULL || size == 0) {
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d005      	beq.n	8005832 <lwrb_init+0x1e>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <lwrb_init+0x1e>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <lwrb_init+0x22>
        return 0;
 8005832:	2300      	movs	r3, #0
 8005834:	e019      	b.n	800586a <lwrb_init+0x56>
    }

    buff->evt_fn = NULL;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	611a      	str	r2, [r3, #16]
    buff->size = size;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	605a      	str	r2, [r3, #4]
    buff->buff = buffdata;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->w, 0);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	330c      	adds	r3, #12
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	601a      	str	r2, [r3, #0]
    LWRB_INIT(buff->r, 0);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3308      	adds	r3, #8
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	2300      	movs	r3, #0
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	601a      	str	r2, [r3, #0]
    return 1;
 8005868:	2301      	movs	r3, #1
}
 800586a:	4618      	mov	r0, r3
 800586c:	3724      	adds	r7, #36	; 0x24
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <lwrb_write>:
 * \return          Number of bytes written to buffer.
 *                      When returned value is less than `btw`, there was no enough memory available
 *                      to copy full data array
 */
size_t
lwrb_write(lwrb_t* buff, const void* data, size_t btw) {
 8005876:	b580      	push	{r7, lr}
 8005878:	b08c      	sub	sp, #48	; 0x30
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
    size_t tocopy, free, buff_w_ptr;
    const uint8_t* d = data;
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00d      	beq.n	80058a8 <lwrb_write+0x32>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d009      	beq.n	80058a8 <lwrb_write+0x32>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <lwrb_write+0x32>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <lwrb_write+0x32>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <lwrb_write+0x36>
        return 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	e060      	b.n	800596e <lwrb_write+0xf8>
    }

    /* Calculate maximum number of bytes available to write */
    free = lwrb_get_free(buff);
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f8e2 	bl	8005a76 <lwrb_get_free>
 80058b2:	6278      	str	r0, [r7, #36]	; 0x24
    btw = BUF_MIN(free, btw);
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	4293      	cmp	r3, r2
 80058ba:	bf28      	it	cs
 80058bc:	4613      	movcs	r3, r2
 80058be:	607b      	str	r3, [r7, #4]
    if (btw == 0) {
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <lwrb_write+0x54>
        return 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	e051      	b.n	800596e <lwrb_write+0xf8>
    }
    buff_w_ptr = LWRB_LOAD(buff->w, memory_order_acquire);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	330c      	adds	r3, #12
 80058ce:	623b      	str	r3, [r7, #32]
 80058d0:	6a3b      	ldr	r3, [r7, #32]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f3bf 8f5b 	dmb	ish
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Write data to linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_w_ptr, btw);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4293      	cmp	r3, r2
 80058ea:	bf28      	it	cs
 80058ec:	4613      	movcs	r3, r2
 80058ee:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(&buff->buff[buff_w_ptr], d, tocopy);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f6:	4413      	add	r3, r2
 80058f8:	69fa      	ldr	r2, [r7, #28]
 80058fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 fcf3 	bl	80072e8 <memcpy>
    buff_w_ptr += tocopy;
 8005902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	4413      	add	r3, r2
 8005908:	62fb      	str	r3, [r7, #44]	; 0x2c
    btw -= tocopy;
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	607b      	str	r3, [r7, #4]

    /* Step 2: Write data to beginning of buffer (overflow part) */
    if (btw > 0) {
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <lwrb_write+0xb8>
        BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4413      	add	r3, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	4619      	mov	r1, r3
 8005926:	f001 fcdf 	bl	80072e8 <memcpy>
        buff_w_ptr = btw;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_w_ptr >= buff->size) {
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005934:	429a      	cmp	r2, r3
 8005936:	d301      	bcc.n	800593c <lwrb_write+0xc6>
        buff_w_ptr = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no read operation can access intermediate data
     */
    LWRB_STORE(buff->w, buff_w_ptr, memory_order_release);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	330c      	adds	r3, #12
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f3bf 8f5b 	dmb	ish
 800594e:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d007      	beq.n	8005968 <lwrb_write+0xf2>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	69f9      	ldr	r1, [r7, #28]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	440a      	add	r2, r1
 8005962:	2101      	movs	r1, #1
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	4798      	blx	r3
    return tocopy + btw;
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4413      	add	r3, r2
}
 800596e:	4618      	mov	r0, r3
 8005970:	3730      	adds	r7, #48	; 0x30
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <lwrb_read>:
 * \param[out]      data: Pointer to output memory to copy buffer data to
 * \param[in]       btr: Number of bytes to read
 * \return          Number of bytes read and copied to data array
 */
size_t
lwrb_read(lwrb_t* buff, void* data, size_t btr) {
 8005976:	b580      	push	{r7, lr}
 8005978:	b08c      	sub	sp, #48	; 0x30
 800597a:	af00      	add	r7, sp, #0
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	607a      	str	r2, [r7, #4]
    size_t tocopy, full, buff_r_ptr;
    uint8_t* d = data;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28

    if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00d      	beq.n	80059a8 <lwrb_read+0x32>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <lwrb_read+0x32>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <lwrb_read+0x32>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <lwrb_read+0x32>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <lwrb_read+0x36>
        return 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	e060      	b.n	8005a6e <lwrb_read+0xf8>
    }

    /* Calculate maximum number of bytes available to read */
    full = lwrb_get_full(buff);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f8a3 	bl	8005af8 <lwrb_get_full>
 80059b2:	6278      	str	r0, [r7, #36]	; 0x24
    btr = BUF_MIN(full, btr);
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	4293      	cmp	r3, r2
 80059ba:	bf28      	it	cs
 80059bc:	4613      	movcs	r3, r2
 80059be:	607b      	str	r3, [r7, #4]
    if (btr == 0) {
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <lwrb_read+0x54>
        return 0;
 80059c6:	2300      	movs	r3, #0
 80059c8:	e051      	b.n	8005a6e <lwrb_read+0xf8>
    }
    buff_r_ptr = LWRB_LOAD(buff->r, memory_order_acquire);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3308      	adds	r3, #8
 80059ce:	623b      	str	r3, [r7, #32]
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f3bf 8f5b 	dmb	ish
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Step 1: Read data from linear part of buffer */
    tocopy = BUF_MIN(buff->size - buff_r_ptr, btr);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	4293      	cmp	r3, r2
 80059ea:	bf28      	it	cs
 80059ec:	4613      	movcs	r3, r2
 80059ee:	61fb      	str	r3, [r7, #28]
    BUF_MEMCPY(d, &buff->buff[buff_r_ptr], tocopy);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	4413      	add	r3, r2
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	4619      	mov	r1, r3
 80059fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059fe:	f001 fc73 	bl	80072e8 <memcpy>
    buff_r_ptr += tocopy;
 8005a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    btr -= tocopy;
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	607b      	str	r3, [r7, #4]

    /* Step 2: Read data from beginning of buffer (overflow part) */
    if (btr > 0) {
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <lwrb_read+0xb8>
        BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 8005a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	18d0      	adds	r0, r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	4619      	mov	r1, r3
 8005a26:	f001 fc5f 	bl	80072e8 <memcpy>
        buff_r_ptr = btr;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Step 3: Check end of buffer */
    if (buff_r_ptr >= buff->size) {
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d301      	bcc.n	8005a3c <lwrb_read+0xc6>
        buff_r_ptr = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Write final value to the actual running variable.
     * This is to ensure no write operation can access intermediate data
     */
    LWRB_STORE(buff->r, buff_r_ptr, memory_order_release);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	61bb      	str	r3, [r7, #24]
 8005a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	f3bf 8f5b 	dmb	ish
 8005a4e:	601a      	str	r2, [r3, #0]

    BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d007      	beq.n	8005a68 <lwrb_read+0xf2>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	69f9      	ldr	r1, [r7, #28]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	440a      	add	r2, r1
 8005a62:	2100      	movs	r1, #0
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	4798      	blx	r3
    return tocopy + btr;
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4413      	add	r3, r2
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3730      	adds	r7, #48	; 0x30
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <lwrb_get_free>:
 * \brief           Get available size in buffer for write operation
 * \param[in]       buff: Buffer handle
 * \return          Number of free bytes in memory
 */
size_t
lwrb_get_free(const lwrb_t* buff) {
 8005a76:	b480      	push	{r7}
 8005a78:	b08b      	sub	sp, #44	; 0x2c
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <lwrb_get_free+0x1e>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <lwrb_get_free+0x1e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d101      	bne.n	8005a98 <lwrb_get_free+0x22>
        return 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	e029      	b.n	8005aec <lwrb_get_free+0x76>
     * - buff->w pointer will not change by another process/interrupt because we are in write mode just now
     * - buff->r pointer may change by another process. If it gets changed after buff->r has been loaded to local variable,
     *    buffer will see "free size" less than it actually is. This is not a problem, application can
     *    always try again to write more data to remaining free memory that was read just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	623b      	str	r3, [r7, #32]
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3308      	adds	r3, #8
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	617b      	str	r3, [r7, #20]

    if (w == r) {
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d103      	bne.n	8005ac8 <lwrb_get_free+0x52>
        size = buff->size;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac6:	e00f      	b.n	8005ae8 <lwrb_get_free+0x72>
    } else if (r > w) {
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d904      	bls.n	8005ada <lwrb_get_free+0x64>
        size = r - w;
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad8:	e006      	b.n	8005ae8 <lwrb_get_free+0x72>
    } else {
        size = buff->size - (w - r);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	6979      	ldr	r1, [r7, #20]
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	1acb      	subs	r3, r1, r3
 8005ae4:	4413      	add	r3, r2
 8005ae6:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Buffer free size is always 1 less than actual size */
    return size - 1;
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aea:	3b01      	subs	r3, #1
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	372c      	adds	r7, #44	; 0x2c
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <lwrb_get_full>:
 * \brief           Get number of bytes currently available in buffer
 * \param[in]       buff: Buffer handle
 * \return          Number of bytes ready to be read
 */
size_t
lwrb_get_full(const lwrb_t* buff) {
 8005af8:	b480      	push	{r7}
 8005afa:	b08b      	sub	sp, #44	; 0x2c
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
    size_t size, w, r;

    if (!BUF_IS_VALID(buff)) {
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <lwrb_get_full+0x1e>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <lwrb_get_full+0x1e>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <lwrb_get_full+0x22>
        return 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e027      	b.n	8005b6a <lwrb_get_full+0x72>
     * - buff->r pointer will not change by another process/interrupt because we are in read mode just now
     * - buff->w pointer may change by another process. If it gets changed after buff->w has been loaded to local variable,
     *    buffer will see "full size" less than it really is. This is not a problem, application can
     *    always try again to read more data from remaining full memory that was written just during copy operation
     */
    w = LWRB_LOAD(buff->w, memory_order_relaxed);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	623b      	str	r3, [r7, #32]
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	613b      	str	r3, [r7, #16]
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	61fb      	str	r3, [r7, #28]
    r = LWRB_LOAD(buff->r, memory_order_relaxed);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	617b      	str	r3, [r7, #20]

    if (w == r) {
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d102      	bne.n	8005b48 <lwrb_get_full+0x50>
        size = 0;
 8005b42:	2300      	movs	r3, #0
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
 8005b46:	e00f      	b.n	8005b68 <lwrb_get_full+0x70>
    } else if (w > r) {
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d904      	bls.n	8005b5a <lwrb_get_full+0x62>
        size = w - r;
 8005b50:	69fa      	ldr	r2, [r7, #28]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
 8005b58:	e006      	b.n	8005b68 <lwrb_get_full+0x70>
    } else {
        size = buff->size - (r - w);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	69f9      	ldr	r1, [r7, #28]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	1acb      	subs	r3, r1, r3
 8005b64:	4413      	add	r3, r2
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
    }
    return size;
 8005b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	372c      	adds	r7, #44	; 0x2c
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <get_1>:
#else
#define NMBS_DEBUG_PRINT(...) (void) (0)
#endif


static uint8_t get_1(nmbs_t* nmbs) {
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
    uint8_t result = nmbs->msg.buf[nmbs->msg.buf_idx];
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005b84:	461a      	mov	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	5c9b      	ldrb	r3, [r3, r2]
 8005b8a:	73fb      	strb	r3, [r7, #15]
    nmbs->msg.buf_idx++;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005b92:	3301      	adds	r3, #1
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 8005b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <put_1>:


static void put_1(nmbs_t* nmbs, uint8_t data) {
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.buf[nmbs->msg.buf_idx] = data;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	78fa      	ldrb	r2, [r7, #3]
 8005bc2:	545a      	strb	r2, [r3, r1]
    nmbs->msg.buf_idx++;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005bca:	3301      	adds	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <discard_1>:


static void discard_1(nmbs_t* nmbs) {
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx++;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005bee:	3301      	adds	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <get_2>:


static uint16_t get_2(nmbs_t* nmbs) {
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
    uint16_t result =
            ((uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx]) << 8 | (uint16_t) nmbs->msg.buf[nmbs->msg.buf_idx + 1];
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005c12:	461a      	mov	r2, r3
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	5c9b      	ldrb	r3, [r3, r2]
 8005c18:	021b      	lsls	r3, r3, #8
 8005c1a:	b21a      	sxth	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005c22:	3301      	adds	r3, #1
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	5ccb      	ldrb	r3, [r1, r3]
 8005c28:	b21b      	sxth	r3, r3
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	b21b      	sxth	r3, r3
    uint16_t result =
 8005c2e:	81fb      	strh	r3, [r7, #14]
    nmbs->msg.buf_idx += 2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005c36:	3302      	adds	r3, #2
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
    return result;
 8005c40:	89fb      	ldrh	r3, [r7, #14]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <put_2>:


static void put_2(nmbs_t* nmbs, uint16_t data) {
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	460b      	mov	r3, r1
 8005c58:	807b      	strh	r3, [r7, #2]
    nmbs->msg.buf[nmbs->msg.buf_idx] = (uint8_t) ((data >> 8) & 0xFFU);
 8005c5a:	887b      	ldrh	r3, [r7, #2]
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	b299      	uxth	r1, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005c66:	461a      	mov	r2, r3
 8005c68:	b2c9      	uxtb	r1, r1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	5499      	strb	r1, [r3, r2]
    nmbs->msg.buf[nmbs->msg.buf_idx + 1] = (uint8_t) data;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005c74:	3301      	adds	r3, #1
 8005c76:	887a      	ldrh	r2, [r7, #2]
 8005c78:	b2d1      	uxtb	r1, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	54d1      	strb	r1, [r2, r3]
    nmbs->msg.buf_idx += 2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005c84:	3302      	adds	r3, #2
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <msg_buf_reset>:


static void msg_buf_reset(nmbs_t* nmbs) {
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
    nmbs->msg.buf_idx = 0;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <msg_state_reset>:


static void msg_state_reset(nmbs_t* nmbs) {
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
    msg_buf_reset(nmbs);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff ffeb 	bl	8005c9a <msg_buf_reset>
    nmbs->msg.unit_id = 0;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
    nmbs->msg.fc = 0;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    nmbs->msg.transaction_id = 0;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
    nmbs->msg.broadcast = false;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
    nmbs->msg.ignored = 0;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <nmbs_create>:
        nmbs->msg.broadcast = true;
}
#endif


int nmbs_create(nmbs_t* nmbs, const nmbs_platform_conf* platform_conf) {
 8005cf4:	b590      	push	{r4, r7, lr}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
    if (!nmbs)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <nmbs_create+0x16>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8005d04:	f04f 33ff 	mov.w	r3, #4294967295
 8005d08:	e034      	b.n	8005d74 <nmbs_create+0x80>

    memset(nmbs, 0, sizeof(nmbs_t));
 8005d0a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8005d0e:	2100      	movs	r1, #0
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f001 faf7 	bl	8007304 <memset>

    nmbs->byte_timeout_ms = -1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    nmbs->read_timeout_ms = -1;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f04f 32ff 	mov.w	r2, #4294967295
 8005d26:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134

    if (!platform_conf)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d102      	bne.n	8005d36 <nmbs_create+0x42>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8005d30:	f04f 33ff 	mov.w	r3, #4294967295
 8005d34:	e01e      	b.n	8005d74 <nmbs_create+0x80>

    if (platform_conf->transport != NMBS_TRANSPORT_RTU && platform_conf->transport != NMBS_TRANSPORT_TCP)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d006      	beq.n	8005d4c <nmbs_create+0x58>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d002      	beq.n	8005d4c <nmbs_create+0x58>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8005d46:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4a:	e013      	b.n	8005d74 <nmbs_create+0x80>

    if (!platform_conf->read || !platform_conf->write)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <nmbs_create+0x68>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d102      	bne.n	8005d62 <nmbs_create+0x6e>
        return NMBS_ERROR_INVALID_ARGUMENT;
 8005d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d60:	e008      	b.n	8005d74 <nmbs_create+0x80>

    nmbs->platform = *platform_conf;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005d6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    return NMBS_ERROR_NONE;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd90      	pop	{r4, r7, pc}

08005d7c <nmbs_set_read_timeout>:


void nmbs_set_read_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
    nmbs->read_timeout_ms = timeout_ms;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <nmbs_set_byte_timeout>:


void nmbs_set_byte_timeout(nmbs_t* nmbs, int32_t timeout_ms) {
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
    nmbs->byte_timeout_ms = timeout_ms;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <nmbs_crc_calc>:
void nmbs_set_platform_arg(nmbs_t* nmbs, void* arg) {
    nmbs->platform.arg = arg;
}


uint16_t nmbs_crc_calc(const uint8_t* data, uint32_t length) {
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
    uint16_t crc = 0xFFFF;
 8005dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005dc6:	82fb      	strh	r3, [r7, #22]
    for (uint32_t i = 0; i < length; i++) {
 8005dc8:	2300      	movs	r3, #0
 8005dca:	613b      	str	r3, [r7, #16]
 8005dcc:	e026      	b.n	8005e1c <nmbs_crc_calc+0x64>
        crc ^= (uint16_t) data[i];
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	8afb      	ldrh	r3, [r7, #22]
 8005dda:	4053      	eors	r3, r2
 8005ddc:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 8005dde:	2308      	movs	r3, #8
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	e015      	b.n	8005e10 <nmbs_crc_calc+0x58>
            if ((crc & 0x0001) != 0) {
 8005de4:	8afb      	ldrh	r3, [r7, #22]
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <nmbs_crc_calc+0x4c>
                crc >>= 1;
 8005dee:	8afb      	ldrh	r3, [r7, #22]
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 8005df4:	8afb      	ldrh	r3, [r7, #22]
 8005df6:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8005dfa:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	82fb      	strh	r3, [r7, #22]
 8005e02:	e002      	b.n	8005e0a <nmbs_crc_calc+0x52>
            }
            else
                crc >>= 1;
 8005e04:	8afb      	ldrh	r3, [r7, #22]
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	82fb      	strh	r3, [r7, #22]
        for (int j = 8; j != 0; j--) {
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e6      	bne.n	8005de4 <nmbs_crc_calc+0x2c>
    for (uint32_t i = 0; i < length; i++) {
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d3d4      	bcc.n	8005dce <nmbs_crc_calc+0x16>
        }
    }

    return (uint16_t) (crc << 8) | (uint16_t) (crc >> 8);
 8005e24:	8afb      	ldrh	r3, [r7, #22]
 8005e26:	ba5b      	rev16	r3, r3
 8005e28:	b29b      	uxth	r3, r3
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	371c      	adds	r7, #28
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <recv>:


static nmbs_error recv(nmbs_t* nmbs, uint16_t count) {
 8005e36:	b590      	push	{r4, r7, lr}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	807b      	strh	r3, [r7, #2]
    int32_t ret =
            nmbs->platform.read(nmbs->msg.buf + nmbs->msg.buf_idx, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 413c 	ldr.w	r4, [r3, #316]	; 0x13c
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	f8b2 2104 	ldrh.w	r2, [r2, #260]	; 0x104
 8005e50:	1898      	adds	r0, r3, r2
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8005e5e:	8879      	ldrh	r1, [r7, #2]
 8005e60:	47a0      	blx	r4
 8005e62:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8005e64:	887b      	ldrh	r3, [r7, #2]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d101      	bne.n	8005e70 <recv+0x3a>
        return NMBS_ERROR_NONE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e00e      	b.n	8005e8e <recv+0x58>

    if (ret < count) {
 8005e70:	887b      	ldrh	r3, [r7, #2]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	da08      	bge.n	8005e8a <recv+0x54>
        if (ret < 0)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	da02      	bge.n	8005e84 <recv+0x4e>
            return NMBS_ERROR_TRANSPORT;
 8005e7e:	f06f 0303 	mvn.w	r3, #3
 8005e82:	e004      	b.n	8005e8e <recv+0x58>

        return NMBS_ERROR_TIMEOUT;
 8005e84:	f06f 0302 	mvn.w	r3, #2
 8005e88:	e001      	b.n	8005e8e <recv+0x58>
    }

    return NMBS_ERROR_TRANSPORT;
 8005e8a:	f06f 0303 	mvn.w	r3, #3
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd90      	pop	{r4, r7, pc}

08005e96 <send>:


static nmbs_error send(nmbs_t* nmbs, uint16_t count) {
 8005e96:	b590      	push	{r4, r7, lr}
 8005e98:	b085      	sub	sp, #20
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	807b      	strh	r3, [r7, #2]
    int32_t ret = nmbs->platform.write(nmbs->msg.buf, count, nmbs->byte_timeout_ms, nmbs->platform.arg);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8005eb6:	8879      	ldrh	r1, [r7, #2]
 8005eb8:	47a0      	blx	r4
 8005eba:	60f8      	str	r0, [r7, #12]

    if (ret == count)
 8005ebc:	887b      	ldrh	r3, [r7, #2]
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d101      	bne.n	8005ec8 <send+0x32>
        return NMBS_ERROR_NONE;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e00e      	b.n	8005ee6 <send+0x50>

    if (ret < count) {
 8005ec8:	887b      	ldrh	r3, [r7, #2]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	da08      	bge.n	8005ee2 <send+0x4c>
        if (ret < 0)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	da02      	bge.n	8005edc <send+0x46>
            return NMBS_ERROR_TRANSPORT;
 8005ed6:	f06f 0303 	mvn.w	r3, #3
 8005eda:	e004      	b.n	8005ee6 <send+0x50>

        return NMBS_ERROR_TIMEOUT;
 8005edc:	f06f 0302 	mvn.w	r3, #2
 8005ee0:	e001      	b.n	8005ee6 <send+0x50>
    }

    return NMBS_ERROR_TRANSPORT;
 8005ee2:	f06f 0303 	mvn.w	r3, #3
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd90      	pop	{r4, r7, pc}

08005eee <recv_msg_footer>:


static nmbs_error recv_msg_footer(nmbs_t* nmbs) {
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d122      	bne.n	8005f46 <recv_msg_footer+0x58>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	f7ff ff54 	bl	8005db8 <nmbs_crc_calc>
 8005f10:	4603      	mov	r3, r0
 8005f12:	81fb      	strh	r3, [r7, #14]

        nmbs_error err = recv(nmbs, 2);
 8005f14:	2102      	movs	r1, #2
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff ff8d 	bl	8005e36 <recv>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 8005f20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <recv_msg_footer+0x40>
            return err;
 8005f28:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005f2c:	e00c      	b.n	8005f48 <recv_msg_footer+0x5a>

        uint16_t recv_crc = get_2(nmbs);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7ff fe68 	bl	8005c04 <get_2>
 8005f34:	4603      	mov	r3, r0
 8005f36:	817b      	strh	r3, [r7, #10]

        if (recv_crc != crc)
 8005f38:	897a      	ldrh	r2, [r7, #10]
 8005f3a:	89fb      	ldrh	r3, [r7, #14]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d002      	beq.n	8005f46 <recv_msg_footer+0x58>
            return NMBS_ERROR_CRC;
 8005f40:	f06f 0304 	mvn.w	r3, #4
 8005f44:	e000      	b.n	8005f48 <recv_msg_footer+0x5a>
    }

    return NMBS_ERROR_NONE;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <recv_msg_header>:


static nmbs_error recv_msg_header(nmbs_t* nmbs, bool* first_byte_received) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
    // We wait for the read timeout here, just for the first message byte
    int32_t old_byte_timeout = nmbs->byte_timeout_ms;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8005f60:	617b      	str	r3, [r7, #20]
    nmbs->byte_timeout_ms = nmbs->read_timeout_ms;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

    msg_state_reset(nmbs);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff fea1 	bl	8005cb6 <msg_state_reset>

    *first_byte_received = false;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2200      	movs	r2, #0
 8005f78:	701a      	strb	r2, [r3, #0]

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d131      	bne.n	8005fe8 <recv_msg_header+0x98>
        nmbs_error err = recv(nmbs, 1);
 8005f84:	2101      	movs	r1, #1
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff ff55 	bl	8005e36 <recv>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	737b      	strb	r3, [r7, #13]

        nmbs->byte_timeout_ms = old_byte_timeout;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (err != NMBS_ERROR_NONE)
 8005f98:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d002      	beq.n	8005fa6 <recv_msg_header+0x56>
            return err;
 8005fa0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005fa4:	e07b      	b.n	800609e <recv_msg_header+0x14e>

        *first_byte_received = true;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	701a      	strb	r2, [r3, #0]

        nmbs->msg.unit_id = get_1(nmbs);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7ff fde2 	bl	8005b76 <get_1>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106

        err = recv(nmbs, 1);
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7ff ff39 	bl	8005e36 <recv>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	737b      	strb	r3, [r7, #13]
        if (err != NMBS_ERROR_NONE)
 8005fc8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <recv_msg_header+0x86>
            return err;
 8005fd0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005fd4:	e063      	b.n	800609e <recv_msg_header+0x14e>

        nmbs->msg.fc = get_1(nmbs);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fdcd 	bl	8005b76 <get_1>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	461a      	mov	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
 8005fe6:	e059      	b.n	800609c <recv_msg_header+0x14c>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d154      	bne.n	800609c <recv_msg_header+0x14c>
        nmbs_error err = recv(nmbs, 1);
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7ff ff1e 	bl	8005e36 <recv>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	74fb      	strb	r3, [r7, #19]

        nmbs->byte_timeout_ms = old_byte_timeout;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (err != NMBS_ERROR_NONE)
 8006006:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <recv_msg_header+0xc4>
            return err;
 800600e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006012:	e044      	b.n	800609e <recv_msg_header+0x14e>

        *first_byte_received = true;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2201      	movs	r2, #1
 8006018:	701a      	strb	r2, [r3, #0]

        // Advance buf_idx
        discard_1(nmbs);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff fde0 	bl	8005be0 <discard_1>

        err = recv(nmbs, 7);
 8006020:	2107      	movs	r1, #7
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff ff07 	bl	8005e36 <recv>
 8006028:	4603      	mov	r3, r0
 800602a:	74fb      	strb	r3, [r7, #19]
        if (err != NMBS_ERROR_NONE)
 800602c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <recv_msg_header+0xea>
            return err;
 8006034:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006038:	e031      	b.n	800609e <recv_msg_header+0x14e>

        // Starting over
        msg_buf_reset(nmbs);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff fe2d 	bl	8005c9a <msg_buf_reset>

        nmbs->msg.transaction_id = get_2(nmbs);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff fddf 	bl	8005c04 <get_2>
 8006046:	4603      	mov	r3, r0
 8006048:	461a      	mov	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
        uint16_t protocol_id = get_2(nmbs);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff fdd7 	bl	8005c04 <get_2>
 8006056:	4603      	mov	r3, r0
 8006058:	823b      	strh	r3, [r7, #16]
        uint16_t length = get_2(nmbs);    // We should actually check the length of the request against this value
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff fdd2 	bl	8005c04 <get_2>
 8006060:	4603      	mov	r3, r0
 8006062:	81fb      	strh	r3, [r7, #14]
        nmbs->msg.unit_id = get_1(nmbs);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fd86 	bl	8005b76 <get_1>
 800606a:	4603      	mov	r3, r0
 800606c:	461a      	mov	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        nmbs->msg.fc = get_1(nmbs);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f7ff fd7e 	bl	8005b76 <get_1>
 800607a:	4603      	mov	r3, r0
 800607c:	461a      	mov	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107

        if (protocol_id != 0)
 8006084:	8a3b      	ldrh	r3, [r7, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <recv_msg_header+0x140>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 800608a:	f06f 0305 	mvn.w	r3, #5
 800608e:	e006      	b.n	800609e <recv_msg_header+0x14e>

        if (length > 255)
 8006090:	89fb      	ldrh	r3, [r7, #14]
 8006092:	2bff      	cmp	r3, #255	; 0xff
 8006094:	d902      	bls.n	800609c <recv_msg_header+0x14c>
            return NMBS_ERROR_INVALID_TCP_MBAP;
 8006096:	f06f 0305 	mvn.w	r3, #5
 800609a:	e000      	b.n	800609e <recv_msg_header+0x14e>
    }

    return NMBS_ERROR_NONE;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <put_msg_header>:


static void put_msg_header(nmbs_t* nmbs, uint16_t data_length) {
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b082      	sub	sp, #8
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	460b      	mov	r3, r1
 80060b0:	807b      	strh	r3, [r7, #2]
    msg_buf_reset(nmbs);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff fdf1 	bl	8005c9a <msg_buf_reset>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d107      	bne.n	80060d2 <put_msg_header+0x2c>
        put_1(nmbs, nmbs->msg.unit_id);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7ff fd6d 	bl	8005baa <put_1>
 80060d0:	e01d      	b.n	800610e <put_msg_header+0x68>
    }
    else if (nmbs->platform.transport == NMBS_TRANSPORT_TCP) {
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d118      	bne.n	800610e <put_msg_header+0x68>
        put_2(nmbs, nmbs->msg.transaction_id);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8b3 3108 	ldrh.w	r3, [r3, #264]	; 0x108
 80060e2:	4619      	mov	r1, r3
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f7ff fdb2 	bl	8005c4e <put_2>
        put_2(nmbs, 0);
 80060ea:	2100      	movs	r1, #0
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7ff fdae 	bl	8005c4e <put_2>
        put_2(nmbs, (uint16_t) (1 + 1 + data_length));
 80060f2:	887b      	ldrh	r3, [r7, #2]
 80060f4:	3302      	adds	r3, #2
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	4619      	mov	r1, r3
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7ff fda7 	bl	8005c4e <put_2>
        put_1(nmbs, nmbs->msg.unit_id);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff fd4e 	bl	8005baa <put_1>
    }

    put_1(nmbs, nmbs->msg.fc);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f7ff fd47 	bl	8005baa <put_1>
}
 800611c:	bf00      	nop
 800611e:	3708      	adds	r7, #8
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <send_msg>:


static nmbs_error send_msg(nmbs_t* nmbs) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("\n");

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 8006132:	2b01      	cmp	r3, #1
 8006134:	d10e      	bne.n	8006154 <send_msg+0x30>
        uint16_t crc = nmbs_crc_calc(nmbs->msg.buf, nmbs->msg.buf_idx);
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f7ff fe39 	bl	8005db8 <nmbs_crc_calc>
 8006146:	4603      	mov	r3, r0
 8006148:	81fb      	strh	r3, [r7, #14]
        put_2(nmbs, crc);
 800614a:	89fb      	ldrh	r3, [r7, #14]
 800614c:	4619      	mov	r1, r3
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7ff fd7d 	bl	8005c4e <put_2>
    }

    nmbs_error err = send(nmbs, nmbs->msg.buf_idx);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8b3 3104 	ldrh.w	r3, [r3, #260]	; 0x104
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff fe9a 	bl	8005e96 <send>
 8006162:	4603      	mov	r3, r0
 8006164:	737b      	strb	r3, [r7, #13]

    return err;
 8006166:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <recv_req_header>:


#ifndef NMBS_SERVER_DISABLED
static nmbs_error recv_req_header(nmbs_t* nmbs, bool* first_byte_received) {
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	6039      	str	r1, [r7, #0]
    nmbs_error err = recv_msg_header(nmbs, first_byte_received);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7ff fee6 	bl	8005f50 <recv_msg_header>
 8006184:	4603      	mov	r3, r0
 8006186:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8006188:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <recv_req_header+0x24>
        return err;
 8006190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006194:	e021      	b.n	80061da <recv_req_header+0x68>

    if (nmbs->platform.transport == NMBS_TRANSPORT_RTU) {
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3138 	ldrb.w	r3, [r3, #312]	; 0x138
 800619c:	2b01      	cmp	r3, #1
 800619e:	d11b      	bne.n	80061d8 <recv_req_header+0x66>
        // Check if request is for us
        if (nmbs->msg.unit_id == NMBS_BROADCAST_ADDRESS)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 3106 	ldrb.w	r3, [r3, #262]	; 0x106
 80061a6:	2200      	movs	r2, #0
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d104      	bne.n	80061b6 <recv_req_header+0x44>
            nmbs->msg.broadcast = true;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 210a 	strb.w	r2, [r3, #266]	; 0x10a
 80061b4:	e010      	b.n	80061d8 <recv_req_header+0x66>
        else if (nmbs->msg.unit_id != nmbs->address_rtu)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 2106 	ldrb.w	r2, [r3, #262]	; 0x106
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d004      	beq.n	80061d0 <recv_req_header+0x5e>
            nmbs->msg.ignored = true;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
 80061ce:	e003      	b.n	80061d8 <recv_req_header+0x66>
        else
            nmbs->msg.ignored = false;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    }

    return NMBS_ERROR_NONE;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <put_res_header>:


static void put_res_header(nmbs_t* nmbs, uint16_t data_length) {
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b082      	sub	sp, #8
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	460b      	mov	r3, r1
 80061ec:	807b      	strh	r3, [r7, #2]
    put_msg_header(nmbs, data_length);
 80061ee:	887b      	ldrh	r3, [r7, #2]
 80061f0:	4619      	mov	r1, r3
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff ff57 	bl	80060a6 <put_msg_header>
    NMBS_DEBUG_PRINT("NMBS res -> fc %d\t", nmbs->msg.fc);
}
 80061f8:	bf00      	nop
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <send_exception_msg>:


static nmbs_error send_exception_msg(nmbs_t* nmbs, uint8_t exception) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	70fb      	strb	r3, [r7, #3]
    nmbs->msg.fc += 0x80;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8006212:	3b80      	subs	r3, #128	; 0x80
 8006214:	b2da      	uxtb	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
    put_msg_header(nmbs, 1);
 800621c:	2101      	movs	r1, #1
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff ff41 	bl	80060a6 <put_msg_header>
    put_1(nmbs, exception);
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff fcbe 	bl	8005baa <put_1>

    NMBS_DEBUG_PRINT("NMBS res -> exception %d\n", exception);

    return send_msg(nmbs);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff ff78 	bl	8006124 <send_msg>
 8006234:	4603      	mov	r3, r0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <handle_read_discrete>:
#endif


#ifndef NMBS_SERVER_DISABLED
#if !defined(NMBS_SERVER_READ_COILS_DISABLED) || !defined(NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED)
static nmbs_error handle_read_discrete(nmbs_t* nmbs, nmbs_error (*callback)(uint16_t, uint16_t, nmbs_bitfield, void*)) {
 800623e:	b5b0      	push	{r4, r5, r7, lr}
 8006240:	b0c4      	sub	sp, #272	; 0x110
 8006242:	af00      	add	r7, sp, #0
 8006244:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006248:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800624c:	6018      	str	r0, [r3, #0]
 800624e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006252:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006256:	6019      	str	r1, [r3, #0]
    nmbs_error err = recv(nmbs, 4);
 8006258:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800625c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006260:	2104      	movs	r1, #4
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	f7ff fde7 	bl	8005e36 <recv>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 800626e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <handle_read_discrete+0x3e>
        return err;
 8006276:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800627a:	e109      	b.n	8006490 <handle_read_discrete+0x252>

    uint16_t address = get_2(nmbs);
 800627c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006280:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	f7ff fcbd 	bl	8005c04 <get_2>
 800628a:	4603      	mov	r3, r0
 800628c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8006290:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006294:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	f7ff fcb3 	bl	8005c04 <get_2>
 800629e:	4603      	mov	r3, r0
 80062a0:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 80062a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	f7ff fe1e 	bl	8005eee <recv_msg_footer>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80062b8:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <handle_read_discrete+0x88>
        return err;
 80062c0:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80062c4:	e0e4      	b.n	8006490 <handle_read_discrete+0x252>

    if (!nmbs->msg.ignored) {
 80062c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80062d4:	f083 0301 	eor.w	r3, r3, #1
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 80d7 	beq.w	800648e <handle_read_discrete+0x250>
        if (quantity < 1 || quantity > 2000)
 80062e0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d004      	beq.n	80062f2 <handle_read_discrete+0xb4>
 80062e8:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80062ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80062f0:	d909      	bls.n	8006306 <handle_read_discrete+0xc8>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80062f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80062fa:	2103      	movs	r1, #3
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	f7ff ff7f 	bl	8006200 <send_exception_msg>
 8006302:	4603      	mov	r3, r0
 8006304:	e0c4      	b.n	8006490 <handle_read_discrete+0x252>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8006306:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 800630a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800630e:	4413      	add	r3, r2
 8006310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006314:	d909      	bls.n	800632a <handle_read_discrete+0xec>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8006316:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800631a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800631e:	2102      	movs	r1, #2
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	f7ff ff6d 	bl	8006200 <send_exception_msg>
 8006326:	4603      	mov	r3, r0
 8006328:	e0b2      	b.n	8006490 <handle_read_discrete+0x252>

        if (callback) {
 800632a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800632e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 80a0 	beq.w	800647a <handle_read_discrete+0x23c>
            nmbs_bitfield bitfield = {0};
 800633a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800633e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	3304      	adds	r3, #4
 8006348:	22f6      	movs	r2, #246	; 0xf6
 800634a:	2100      	movs	r1, #0
 800634c:	4618      	mov	r0, r3
 800634e:	f000 ffd9 	bl	8007304 <memset>
            err = callback(address, quantity, bitfield, nmbs->platform.arg);
 8006352:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006356:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 8006360:	f107 0208 	add.w	r2, r7, #8
 8006364:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8006368:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 800636c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006370:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006374:	681c      	ldr	r4, [r3, #0]
 8006376:	462b      	mov	r3, r5
 8006378:	47a0      	blx	r4
 800637a:	4603      	mov	r3, r0
 800637c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8006380:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006384:	2b00      	cmp	r3, #0
 8006386:	d01d      	beq.n	80063c4 <handle_read_discrete+0x186>
                if (nmbs_error_is_exception(err))
 8006388:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 800638c:	2b00      	cmp	r3, #0
 800638e:	dd0f      	ble.n	80063b0 <handle_read_discrete+0x172>
 8006390:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006394:	2b04      	cmp	r3, #4
 8006396:	dc0b      	bgt.n	80063b0 <handle_read_discrete+0x172>
                    return send_exception_msg(nmbs, err);
 8006398:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 800639c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063a4:	4611      	mov	r1, r2
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	f7ff ff2a 	bl	8006200 <send_exception_msg>
 80063ac:	4603      	mov	r3, r0
 80063ae:	e06f      	b.n	8006490 <handle_read_discrete+0x252>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 80063b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063b8:	2104      	movs	r1, #4
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	f7ff ff20 	bl	8006200 <send_exception_msg>
 80063c0:	4603      	mov	r3, r0
 80063c2:	e065      	b.n	8006490 <handle_read_discrete+0x252>
            }

            if (!nmbs->msg.broadcast) {
 80063c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 80063d2:	f083 0301 	eor.w	r3, r3, #1
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d058      	beq.n	800648e <handle_read_discrete+0x250>
                uint8_t discrete_bytes = (quantity / 8) + 1;
 80063dc:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80063e0:	08db      	lsrs	r3, r3, #3
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	3301      	adds	r3, #1
 80063e8:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
                put_res_header(nmbs, 1 + discrete_bytes);
 80063ec:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	3301      	adds	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063fe:	4611      	mov	r1, r2
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	f7ff feee 	bl	80061e2 <put_res_header>

                put_1(nmbs, discrete_bytes);
 8006406:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 800640a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800640e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006412:	4611      	mov	r1, r2
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	f7ff fbc8 	bl	8005baa <put_1>

                NMBS_DEBUG_PRINT("b %d\t", discrete_bytes);

                NMBS_DEBUG_PRINT("coils ");
                for (int i = 0; i < discrete_bytes; i++) {
 800641a:	2300      	movs	r3, #0
 800641c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006420:	e014      	b.n	800644c <handle_read_discrete+0x20e>
                    put_1(nmbs, bitfield[i]);
 8006422:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006426:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 800642a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800642e:	4413      	add	r3, r2
 8006430:	781a      	ldrb	r2, [r3, #0]
 8006432:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006436:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800643a:	4611      	mov	r1, r2
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	f7ff fbb4 	bl	8005baa <put_1>
                for (int i = 0; i < discrete_bytes; i++) {
 8006442:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006446:	3301      	adds	r3, #1
 8006448:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800644c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8006450:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006454:	429a      	cmp	r2, r3
 8006456:	dbe4      	blt.n	8006422 <handle_read_discrete+0x1e4>
                    NMBS_DEBUG_PRINT("%d", bitfield[i]);
                }

                err = send_msg(nmbs);
 8006458:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800645c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	f7ff fe5f 	bl	8006124 <send_msg>
 8006466:	4603      	mov	r3, r0
 8006468:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 800646c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00c      	beq.n	800648e <handle_read_discrete+0x250>
                    return err;
 8006474:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006478:	e00a      	b.n	8006490 <handle_read_discrete+0x252>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 800647a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800647e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006482:	2101      	movs	r1, #1
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	f7ff febb 	bl	8006200 <send_exception_msg>
 800648a:	4603      	mov	r3, r0
 800648c:	e000      	b.n	8006490 <handle_read_discrete+0x252>
        }
    }

    return NMBS_ERROR_NONE;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006496:	46bd      	mov	sp, r7
 8006498:	bdb0      	pop	{r4, r5, r7, pc}

0800649a <handle_read_registers>:
#endif


#if !defined(NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED) || !defined(NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED)
static nmbs_error handle_read_registers(nmbs_t* nmbs, nmbs_error (*callback)(uint16_t, uint16_t, uint16_t*, void*)) {
 800649a:	b5b0      	push	{r4, r5, r7, lr}
 800649c:	b0c4      	sub	sp, #272	; 0x110
 800649e:	af00      	add	r7, sp, #0
 80064a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064a8:	6018      	str	r0, [r3, #0]
 80064aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80064b2:	6019      	str	r1, [r3, #0]
    nmbs_error err = recv(nmbs, 4);
 80064b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064bc:	2104      	movs	r1, #4
 80064be:	6818      	ldr	r0, [r3, #0]
 80064c0:	f7ff fcb9 	bl	8005e36 <recv>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80064ca:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <handle_read_registers+0x3e>
        return err;
 80064d2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80064d6:	e104      	b.n	80066e2 <handle_read_registers+0x248>

    uint16_t address = get_2(nmbs);
 80064d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	f7ff fb8f 	bl	8005c04 <get_2>
 80064e6:	4603      	mov	r3, r0
 80064e8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 80064ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064f4:	6818      	ldr	r0, [r3, #0]
 80064f6:	f7ff fb85 	bl	8005c04 <get_2>
 80064fa:	4603      	mov	r3, r0
 80064fc:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106

    NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

    err = recv_msg_footer(nmbs);
 8006500:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006504:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	f7ff fcf0 	bl	8005eee <recv_msg_footer>
 800650e:	4603      	mov	r3, r0
 8006510:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8006514:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <handle_read_registers+0x88>
        return err;
 800651c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006520:	e0df      	b.n	80066e2 <handle_read_registers+0x248>

    if (!nmbs->msg.ignored) {
 8006522:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006526:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8006530:	f083 0301 	eor.w	r3, r3, #1
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 80d2 	beq.w	80066e0 <handle_read_registers+0x246>
        if (quantity < 1 || quantity > 125)
 800653c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <handle_read_registers+0xb2>
 8006544:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8006548:	2b7d      	cmp	r3, #125	; 0x7d
 800654a:	d909      	bls.n	8006560 <handle_read_registers+0xc6>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 800654c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006550:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006554:	2103      	movs	r1, #3
 8006556:	6818      	ldr	r0, [r3, #0]
 8006558:	f7ff fe52 	bl	8006200 <send_exception_msg>
 800655c:	4603      	mov	r3, r0
 800655e:	e0c0      	b.n	80066e2 <handle_read_registers+0x248>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8006560:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8006564:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8006568:	4413      	add	r3, r2
 800656a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656e:	d909      	bls.n	8006584 <handle_read_registers+0xea>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8006570:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006574:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006578:	2102      	movs	r1, #2
 800657a:	6818      	ldr	r0, [r3, #0]
 800657c:	f7ff fe40 	bl	8006200 <send_exception_msg>
 8006580:	4603      	mov	r3, r0
 8006582:	e0ae      	b.n	80066e2 <handle_read_registers+0x248>

        if (callback) {
 8006584:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006588:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 809c 	beq.w	80066cc <handle_read_registers+0x232>
            uint16_t regs[125] = {0};
 8006594:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800659c:	4618      	mov	r0, r3
 800659e:	23fa      	movs	r3, #250	; 0xfa
 80065a0:	461a      	mov	r2, r3
 80065a2:	2100      	movs	r1, #0
 80065a4:	f000 feae 	bl	8007304 <memset>
            err = callback(address, quantity, regs, nmbs->platform.arg);
 80065a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 80065b6:	f107 0208 	add.w	r2, r7, #8
 80065ba:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 80065be:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 80065c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065c6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80065ca:	681c      	ldr	r4, [r3, #0]
 80065cc:	462b      	mov	r3, r5
 80065ce:	47a0      	blx	r4
 80065d0:	4603      	mov	r3, r0
 80065d2:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 80065d6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d01d      	beq.n	800661a <handle_read_registers+0x180>
                if (nmbs_error_is_exception(err))
 80065de:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	dd0f      	ble.n	8006606 <handle_read_registers+0x16c>
 80065e6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	dc0b      	bgt.n	8006606 <handle_read_registers+0x16c>
                    return send_exception_msg(nmbs, err);
 80065ee:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 80065f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065fa:	4611      	mov	r1, r2
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	f7ff fdff 	bl	8006200 <send_exception_msg>
 8006602:	4603      	mov	r3, r0
 8006604:	e06d      	b.n	80066e2 <handle_read_registers+0x248>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8006606:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800660a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800660e:	2104      	movs	r1, #4
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	f7ff fdf5 	bl	8006200 <send_exception_msg>
 8006616:	4603      	mov	r3, r0
 8006618:	e063      	b.n	80066e2 <handle_read_registers+0x248>
            }

            if (!nmbs->msg.broadcast) {
 800661a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800661e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8006628:	f083 0301 	eor.w	r3, r3, #1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d056      	beq.n	80066e0 <handle_read_registers+0x246>
                uint8_t regs_bytes = quantity * 2;
 8006632:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8006636:	b2db      	uxtb	r3, r3
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
                put_res_header(nmbs, 1 + regs_bytes);
 800663e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8006642:	b29b      	uxth	r3, r3
 8006644:	3301      	adds	r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800664c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006650:	4611      	mov	r1, r2
 8006652:	6818      	ldr	r0, [r3, #0]
 8006654:	f7ff fdc5 	bl	80061e2 <put_res_header>

                put_1(nmbs, regs_bytes);
 8006658:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 800665c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006660:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006664:	4611      	mov	r1, r2
 8006666:	6818      	ldr	r0, [r3, #0]
 8006668:	f7ff fa9f 	bl	8005baa <put_1>

                NMBS_DEBUG_PRINT("b %d\t", regs_bytes);

                NMBS_DEBUG_PRINT("regs ");
                for (int i = 0; i < quantity; i++) {
 800666c:	2300      	movs	r3, #0
 800666e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006672:	e014      	b.n	800669e <handle_read_registers+0x204>
                    put_2(nmbs, regs[i]);
 8006674:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800667c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006680:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006684:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006688:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800668c:	4611      	mov	r1, r2
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	f7ff fadd 	bl	8005c4e <put_2>
                for (int i = 0; i < quantity; i++) {
 8006694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006698:	3301      	adds	r3, #1
 800669a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800669e:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80066a2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80066a6:	429a      	cmp	r2, r3
 80066a8:	dbe4      	blt.n	8006674 <handle_read_registers+0x1da>
                    NMBS_DEBUG_PRINT("%d", regs[i]);
                }

                err = send_msg(nmbs);
 80066aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066b2:	6818      	ldr	r0, [r3, #0]
 80066b4:	f7ff fd36 	bl	8006124 <send_msg>
 80066b8:	4603      	mov	r3, r0
 80066ba:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 80066be:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00c      	beq.n	80066e0 <handle_read_registers+0x246>
                    return err;
 80066c6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80066ca:	e00a      	b.n	80066e2 <handle_read_registers+0x248>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 80066cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80066d4:	2101      	movs	r1, #1
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	f7ff fd92 	bl	8006200 <send_exception_msg>
 80066dc:	4603      	mov	r3, r0
 80066de:	e000      	b.n	80066e2 <handle_read_registers+0x248>
        }
    }

    return NMBS_ERROR_NONE;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bdb0      	pop	{r4, r5, r7, pc}

080066ec <handle_read_coils>:
#endif


#ifndef NMBS_SERVER_READ_COILS_DISABLED
static nmbs_error handle_read_coils(nmbs_t* nmbs) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
    return handle_read_discrete(nmbs, nmbs->callbacks.read_coils);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80066fa:	4619      	mov	r1, r3
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff fd9e 	bl	800623e <handle_read_discrete>
 8006702:	4603      	mov	r3, r0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3708      	adds	r7, #8
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}

0800670c <handle_read_discrete_inputs>:
#endif


#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
static nmbs_error handle_read_discrete_inputs(nmbs_t* nmbs) {
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
    return handle_read_discrete(nmbs, nmbs->callbacks.read_discrete_inputs);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7ff fd8e 	bl	800623e <handle_read_discrete>
 8006722:	4603      	mov	r3, r0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <handle_read_holding_registers>:
#endif


#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
static nmbs_error handle_read_holding_registers(nmbs_t* nmbs) {
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
    return handle_read_registers(nmbs, nmbs->callbacks.read_holding_registers);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff feac 	bl	800649a <handle_read_registers>
 8006742:	4603      	mov	r3, r0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <handle_read_input_registers>:
#endif


#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
static nmbs_error handle_read_input_registers(nmbs_t* nmbs) {
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
    return handle_read_registers(nmbs, nmbs->callbacks.read_input_registers);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff fe9c 	bl	800649a <handle_read_registers>
 8006762:	4603      	mov	r3, r0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <handle_write_single_coil>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
static nmbs_error handle_write_single_coil(nmbs_t* nmbs) {
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 4);
 8006774:	2104      	movs	r1, #4
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff fb5d 	bl	8005e36 <recv>
 800677c:	4603      	mov	r3, r0
 800677e:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 8006780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <handle_write_single_coil+0x22>
        return err;
 8006788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800678c:	e081      	b.n	8006892 <handle_write_single_coil+0x126>

    uint16_t address = get_2(nmbs);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff fa38 	bl	8005c04 <get_2>
 8006794:	4603      	mov	r3, r0
 8006796:	81bb      	strh	r3, [r7, #12]
    uint16_t value = get_2(nmbs);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7ff fa33 	bl	8005c04 <get_2>
 800679e:	4603      	mov	r3, r0
 80067a0:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

    err = recv_msg_footer(nmbs);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff fba3 	bl	8005eee <recv_msg_footer>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80067ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <handle_write_single_coil+0x4e>
        return err;
 80067b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b8:	e06b      	b.n	8006892 <handle_write_single_coil+0x126>

    if (!nmbs->msg.ignored) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80067c0:	f083 0301 	eor.w	r3, r3, #1
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d062      	beq.n	8006890 <handle_write_single_coil+0x124>
        if (nmbs->callbacks.write_single_coil) {
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d057      	beq.n	8006884 <handle_write_single_coil+0x118>
            if (value != 0 && value != 0xFF00)
 80067d4:	897b      	ldrh	r3, [r7, #10]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <handle_write_single_coil+0x82>
 80067da:	897b      	ldrh	r3, [r7, #10]
 80067dc:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80067e0:	d005      	beq.n	80067ee <handle_write_single_coil+0x82>
                return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 80067e2:	2103      	movs	r1, #3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff fd0b 	bl	8006200 <send_exception_msg>
 80067ea:	4603      	mov	r3, r0
 80067ec:	e051      	b.n	8006892 <handle_write_single_coil+0x126>

            err = nmbs->callbacks.write_single_coil(address, value == 0 ? false : true, nmbs->platform.arg);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80067f4:	897a      	ldrh	r2, [r7, #10]
 80067f6:	2a00      	cmp	r2, #0
 80067f8:	bf14      	ite	ne
 80067fa:	2201      	movne	r2, #1
 80067fc:	2200      	moveq	r2, #0
 80067fe:	b2d1      	uxtb	r1, r2
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 8006806:	89b8      	ldrh	r0, [r7, #12]
 8006808:	4798      	blx	r3
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
            if (err != NMBS_ERROR_NONE) {
 800680e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d014      	beq.n	8006840 <handle_write_single_coil+0xd4>
                if (nmbs_error_is_exception(err))
 8006816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800681a:	2b00      	cmp	r3, #0
 800681c:	dd0a      	ble.n	8006834 <handle_write_single_coil+0xc8>
 800681e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006822:	2b04      	cmp	r3, #4
 8006824:	dc06      	bgt.n	8006834 <handle_write_single_coil+0xc8>
                    return send_exception_msg(nmbs, err);
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fce8 	bl	8006200 <send_exception_msg>
 8006830:	4603      	mov	r3, r0
 8006832:	e02e      	b.n	8006892 <handle_write_single_coil+0x126>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8006834:	2104      	movs	r1, #4
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff fce2 	bl	8006200 <send_exception_msg>
 800683c:	4603      	mov	r3, r0
 800683e:	e028      	b.n	8006892 <handle_write_single_coil+0x126>
            }

            if (!nmbs->msg.broadcast) {
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8006846:	f083 0301 	eor.w	r3, r3, #1
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01f      	beq.n	8006890 <handle_write_single_coil+0x124>
                put_res_header(nmbs, 4);
 8006850:	2104      	movs	r1, #4
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff fcc5 	bl	80061e2 <put_res_header>

                put_2(nmbs, address);
 8006858:	89bb      	ldrh	r3, [r7, #12]
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff f9f6 	bl	8005c4e <put_2>
                put_2(nmbs, value);
 8006862:	897b      	ldrh	r3, [r7, #10]
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff f9f1 	bl	8005c4e <put_2>
                NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

                err = send_msg(nmbs);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7ff fc59 	bl	8006124 <send_msg>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]
                if (err != NMBS_ERROR_NONE)
 8006876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <handle_write_single_coil+0x124>
                    return err;
 800687e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006882:	e006      	b.n	8006892 <handle_write_single_coil+0x126>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8006884:	2101      	movs	r1, #1
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff fcba 	bl	8006200 <send_exception_msg>
 800688c:	4603      	mov	r3, r0
 800688e:	e000      	b.n	8006892 <handle_write_single_coil+0x126>
        }
    }

    return NMBS_ERROR_NONE;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <handle_write_single_register>:
#endif


#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
static nmbs_error handle_write_single_register(nmbs_t* nmbs) {
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
    nmbs_error err = recv(nmbs, 4);
 80068a2:	2104      	movs	r1, #4
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff fac6 	bl	8005e36 <recv>
 80068aa:	4603      	mov	r3, r0
 80068ac:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80068ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <handle_write_single_register+0x22>
        return err;
 80068b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068ba:	e06f      	b.n	800699c <handle_write_single_register+0x102>

    uint16_t address = get_2(nmbs);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7ff f9a1 	bl	8005c04 <get_2>
 80068c2:	4603      	mov	r3, r0
 80068c4:	81bb      	strh	r3, [r7, #12]
    uint16_t value = get_2(nmbs);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff f99c 	bl	8005c04 <get_2>
 80068cc:	4603      	mov	r3, r0
 80068ce:	817b      	strh	r3, [r7, #10]

    NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

    err = recv_msg_footer(nmbs);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f7ff fb0c 	bl	8005eee <recv_msg_footer>
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE)
 80068da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d002      	beq.n	80068e8 <handle_write_single_register+0x4e>
        return err;
 80068e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068e6:	e059      	b.n	800699c <handle_write_single_register+0x102>

    if (!nmbs->msg.ignored) {
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 80068ee:	f083 0301 	eor.w	r3, r3, #1
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d050      	beq.n	800699a <handle_write_single_register+0x100>
        if (nmbs->callbacks.write_single_register) {
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d045      	beq.n	800698e <handle_write_single_register+0xf4>
            err = nmbs->callbacks.write_single_register(address, value, nmbs->platform.arg);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 800690e:	8979      	ldrh	r1, [r7, #10]
 8006910:	89b8      	ldrh	r0, [r7, #12]
 8006912:	4798      	blx	r3
 8006914:	4603      	mov	r3, r0
 8006916:	73fb      	strb	r3, [r7, #15]
            if (err != NMBS_ERROR_NONE) {
 8006918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d014      	beq.n	800694a <handle_write_single_register+0xb0>
                if (nmbs_error_is_exception(err))
 8006920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006924:	2b00      	cmp	r3, #0
 8006926:	dd0a      	ble.n	800693e <handle_write_single_register+0xa4>
 8006928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800692c:	2b04      	cmp	r3, #4
 800692e:	dc06      	bgt.n	800693e <handle_write_single_register+0xa4>
                    return send_exception_msg(nmbs, err);
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff fc63 	bl	8006200 <send_exception_msg>
 800693a:	4603      	mov	r3, r0
 800693c:	e02e      	b.n	800699c <handle_write_single_register+0x102>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 800693e:	2104      	movs	r1, #4
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff fc5d 	bl	8006200 <send_exception_msg>
 8006946:	4603      	mov	r3, r0
 8006948:	e028      	b.n	800699c <handle_write_single_register+0x102>
            }

            if (!nmbs->msg.broadcast) {
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8006950:	f083 0301 	eor.w	r3, r3, #1
 8006954:	b2db      	uxtb	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d01f      	beq.n	800699a <handle_write_single_register+0x100>
                put_res_header(nmbs, 4);
 800695a:	2104      	movs	r1, #4
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff fc40 	bl	80061e2 <put_res_header>

                put_2(nmbs, address);
 8006962:	89bb      	ldrh	r3, [r7, #12]
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f7ff f971 	bl	8005c4e <put_2>
                put_2(nmbs, value);
 800696c:	897b      	ldrh	r3, [r7, #10]
 800696e:	4619      	mov	r1, r3
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff f96c 	bl	8005c4e <put_2>
                NMBS_DEBUG_PRINT("a %d\tvalue %d", address, value);

                err = send_msg(nmbs);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff fbd4 	bl	8006124 <send_msg>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]
                if (err != NMBS_ERROR_NONE)
 8006980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d008      	beq.n	800699a <handle_write_single_register+0x100>
                    return err;
 8006988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800698c:	e006      	b.n	800699c <handle_write_single_register+0x102>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 800698e:	2101      	movs	r1, #1
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff fc35 	bl	8006200 <send_exception_msg>
 8006996:	4603      	mov	r3, r0
 8006998:	e000      	b.n	800699c <handle_write_single_register+0x102>
        }
    }

    return NMBS_ERROR_NONE;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <handle_write_multiple_coils>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
static nmbs_error handle_write_multiple_coils(nmbs_t* nmbs) {
 80069a4:	b590      	push	{r4, r7, lr}
 80069a6:	b0c5      	sub	sp, #276	; 0x114
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80069b2:	6018      	str	r0, [r3, #0]
    nmbs_error err = recv(nmbs, 5);
 80069b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80069bc:	2105      	movs	r1, #5
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	f7ff fa39 	bl	8005e36 <recv>
 80069c4:	4603      	mov	r3, r0
 80069c6:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 80069ca:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <handle_write_multiple_coils+0x34>
        return err;
 80069d2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 80069d6:	e14a      	b.n	8006c6e <handle_write_multiple_coils+0x2ca>

    uint16_t address = get_2(nmbs);
 80069d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	f7ff f90f 	bl	8005c04 <get_2>
 80069e6:	4603      	mov	r3, r0
 80069e8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 80069ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80069f4:	6818      	ldr	r0, [r3, #0]
 80069f6:	f7ff f905 	bl	8005c04 <get_2>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    uint8_t coils_bytes = get_1(nmbs);
 8006a00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a04:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	f7ff f8b4 	bl	8005b76 <get_1>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\tcoils ", address, quantity, coils_bytes);

    err = recv(nmbs, coils_bytes);
 8006a14:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a22:	4611      	mov	r1, r2
 8006a24:	6818      	ldr	r0, [r3, #0]
 8006a26:	f7ff fa06 	bl	8005e36 <recv>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8006a30:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <handle_write_multiple_coils+0x9a>
        return err;
 8006a38:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006a3c:	e117      	b.n	8006c6e <handle_write_multiple_coils+0x2ca>

    nmbs_bitfield coils = {0};
 8006a3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a46:	2200      	movs	r2, #0
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	22f6      	movs	r2, #246	; 0xf6
 8006a4e:	2100      	movs	r1, #0
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fc57 	bl	8007304 <memset>
    for (int i = 0; i < coils_bytes; i++) {
 8006a56:	2300      	movs	r3, #0
 8006a58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006a5c:	e016      	b.n	8006a8c <handle_write_multiple_coils+0xe8>
        coils[i] = get_1(nmbs);
 8006a5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006a66:	6818      	ldr	r0, [r3, #0]
 8006a68:	f7ff f885 	bl	8005b76 <get_1>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	4619      	mov	r1, r3
 8006a70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a74:	f5a3 7284 	sub.w	r2, r3, #264	; 0x108
 8006a78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a7c:	4413      	add	r3, r2
 8006a7e:	460a      	mov	r2, r1
 8006a80:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < coils_bytes; i++) {
 8006a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a86:	3301      	adds	r3, #1
 8006a88:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006a8c:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8006a90:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006a94:	429a      	cmp	r2, r3
 8006a96:	dbe2      	blt.n	8006a5e <handle_write_multiple_coils+0xba>
        NMBS_DEBUG_PRINT("%d ", coils[i]);
    }

    err = recv_msg_footer(nmbs);
 8006a98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	f7ff fa24 	bl	8005eee <recv_msg_footer>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8006aac:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d002      	beq.n	8006aba <handle_write_multiple_coils+0x116>
        return err;
 8006ab4:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006ab8:	e0d9      	b.n	8006c6e <handle_write_multiple_coils+0x2ca>

    if (!nmbs->msg.ignored) {
 8006aba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006abe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8006ac8:	f083 0301 	eor.w	r3, r3, #1
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80cc 	beq.w	8006c6c <handle_write_multiple_coils+0x2c8>
        if (quantity < 1 || quantity > 0x07B0)
 8006ad4:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d004      	beq.n	8006ae6 <handle_write_multiple_coils+0x142>
 8006adc:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8006ae0:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8006ae4:	d909      	bls.n	8006afa <handle_write_multiple_coils+0x156>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8006ae6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006aea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006aee:	2103      	movs	r1, #3
 8006af0:	6818      	ldr	r0, [r3, #0]
 8006af2:	f7ff fb85 	bl	8006200 <send_exception_msg>
 8006af6:	4603      	mov	r3, r0
 8006af8:	e0b9      	b.n	8006c6e <handle_write_multiple_coils+0x2ca>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8006afa:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8006afe:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8006b02:	4413      	add	r3, r2
 8006b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b08:	d909      	bls.n	8006b1e <handle_write_multiple_coils+0x17a>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8006b0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b12:	2102      	movs	r1, #2
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	f7ff fb73 	bl	8006200 <send_exception_msg>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	e0a7      	b.n	8006c6e <handle_write_multiple_coils+0x2ca>

        if (coils_bytes == 0)
 8006b1e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <handle_write_multiple_coils+0x196>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8006b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b2e:	2103      	movs	r1, #3
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	f7ff fb65 	bl	8006200 <send_exception_msg>
 8006b36:	4603      	mov	r3, r0
 8006b38:	e099      	b.n	8006c6e <handle_write_multiple_coils+0x2ca>

        if ((quantity / 8) + 1 != coils_bytes)
 8006b3a:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8006b3e:	08db      	lsrs	r3, r3, #3
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d009      	beq.n	8006b60 <handle_write_multiple_coils+0x1bc>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8006b4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b54:	2103      	movs	r1, #3
 8006b56:	6818      	ldr	r0, [r3, #0]
 8006b58:	f7ff fb52 	bl	8006200 <send_exception_msg>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	e086      	b.n	8006c6e <handle_write_multiple_coils+0x2ca>

        if (nmbs->callbacks.write_multiple_coils) {
 8006b60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d072      	beq.n	8006c58 <handle_write_multiple_coils+0x2b4>
            err = nmbs->callbacks.write_multiple_coils(address, quantity, coils, nmbs->platform.arg);
 8006b72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f8d3 4124 	ldr.w	r4, [r3, #292]	; 0x124
 8006b80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b84:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006b8e:	f107 0208 	add.w	r2, r7, #8
 8006b92:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8006b96:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8006b9a:	47a0      	blx	r4
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8006ba2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01d      	beq.n	8006be6 <handle_write_multiple_coils+0x242>
                if (nmbs_error_is_exception(err))
 8006baa:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dd0f      	ble.n	8006bd2 <handle_write_multiple_coils+0x22e>
 8006bb2:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	dc0b      	bgt.n	8006bd2 <handle_write_multiple_coils+0x22e>
                    return send_exception_msg(nmbs, err);
 8006bba:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8006bbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bc2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	6818      	ldr	r0, [r3, #0]
 8006bca:	f7ff fb19 	bl	8006200 <send_exception_msg>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	e04d      	b.n	8006c6e <handle_write_multiple_coils+0x2ca>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8006bd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bda:	2104      	movs	r1, #4
 8006bdc:	6818      	ldr	r0, [r3, #0]
 8006bde:	f7ff fb0f 	bl	8006200 <send_exception_msg>
 8006be2:	4603      	mov	r3, r0
 8006be4:	e043      	b.n	8006c6e <handle_write_multiple_coils+0x2ca>
            }

            if (!nmbs->msg.broadcast) {
 8006be6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006bea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8006bf4:	f083 0301 	eor.w	r3, r3, #1
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d036      	beq.n	8006c6c <handle_write_multiple_coils+0x2c8>
                put_res_header(nmbs, 4);
 8006bfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c06:	2104      	movs	r1, #4
 8006c08:	6818      	ldr	r0, [r3, #0]
 8006c0a:	f7ff faea 	bl	80061e2 <put_res_header>

                put_2(nmbs, address);
 8006c0e:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8006c12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	f7ff f816 	bl	8005c4e <put_2>
                put_2(nmbs, quantity);
 8006c22:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8006c26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c2a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c2e:	4611      	mov	r1, r2
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	f7ff f80c 	bl	8005c4e <put_2>
                NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

                err = send_msg(nmbs);
 8006c36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c3a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c3e:	6818      	ldr	r0, [r3, #0]
 8006c40:	f7ff fa70 	bl	8006124 <send_msg>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 8006c4a:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00c      	beq.n	8006c6c <handle_write_multiple_coils+0x2c8>
                    return err;
 8006c52:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006c56:	e00a      	b.n	8006c6e <handle_write_multiple_coils+0x2ca>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8006c58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c60:	2101      	movs	r1, #1
 8006c62:	6818      	ldr	r0, [r3, #0]
 8006c64:	f7ff facc 	bl	8006200 <send_exception_msg>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	e000      	b.n	8006c6e <handle_write_multiple_coils+0x2ca>
        }
    }

    return NMBS_ERROR_NONE;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd90      	pop	{r4, r7, pc}

08006c78 <handle_write_multiple_registers>:
#endif


#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
static nmbs_error handle_write_multiple_registers(nmbs_t* nmbs) {
 8006c78:	b590      	push	{r4, r7, lr}
 8006c7a:	b0c5      	sub	sp, #276	; 0x114
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c82:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c86:	6018      	str	r0, [r3, #0]
    nmbs_error err = recv(nmbs, 5);
 8006c88:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006c90:	2105      	movs	r1, #5
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	f7ff f8cf 	bl	8005e36 <recv>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8006c9e:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d002      	beq.n	8006cac <handle_write_multiple_registers+0x34>
        return err;
 8006ca6:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006caa:	e13d      	b.n	8006f28 <handle_write_multiple_registers+0x2b0>

    uint16_t address = get_2(nmbs);
 8006cac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cb4:	6818      	ldr	r0, [r3, #0]
 8006cb6:	f7fe ffa5 	bl	8005c04 <get_2>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
    uint16_t quantity = get_2(nmbs);
 8006cc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cc4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	f7fe ff9b 	bl	8005c04 <get_2>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
    uint8_t registers_bytes = get_1(nmbs);
 8006cd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cd8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	f7fe ff4a 	bl	8005b76 <get_1>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

    NMBS_DEBUG_PRINT("a %d\tq %d\tb %d\tregs ", address, quantity, registers_bytes);

    err = recv(nmbs, registers_bytes);
 8006ce8:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cf2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	f7ff f89c 	bl	8005e36 <recv>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8006d04:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <handle_write_multiple_registers+0x9a>
        return err;
 8006d0c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006d10:	e10a      	b.n	8006f28 <handle_write_multiple_registers+0x2b0>

    uint16_t registers[0x007B];
    for (int i = 0; i < registers_bytes / 2; i++) {
 8006d12:	2300      	movs	r3, #0
 8006d14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006d18:	e015      	b.n	8006d46 <handle_write_multiple_registers+0xce>
        registers[i] = get_2(nmbs);
 8006d1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	f7fe ff6e 	bl	8005c04 <get_2>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d34:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006d38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < registers_bytes / 2; i++) {
 8006d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d40:	3301      	adds	r3, #1
 8006d42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006d46:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8006d4a:	085b      	lsrs	r3, r3, #1
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006d54:	4293      	cmp	r3, r2
 8006d56:	dbe0      	blt.n	8006d1a <handle_write_multiple_registers+0xa2>
        NMBS_DEBUG_PRINT("%d ", registers[i]);
    }

    err = recv_msg_footer(nmbs);
 8006d58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d5c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	f7ff f8c4 	bl	8005eee <recv_msg_footer>
 8006d66:	4603      	mov	r3, r0
 8006d68:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
    if (err != NMBS_ERROR_NONE)
 8006d6c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <handle_write_multiple_registers+0x102>
        return err;
 8006d74:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006d78:	e0d6      	b.n	8006f28 <handle_write_multiple_registers+0x2b0>

    if (!nmbs->msg.ignored) {
 8006d7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d7e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f893 310b 	ldrb.w	r3, [r3, #267]	; 0x10b
 8006d88:	f083 0301 	eor.w	r3, r3, #1
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 80c9 	beq.w	8006f26 <handle_write_multiple_registers+0x2ae>
        if (quantity < 1 || quantity > 0x007B)
 8006d94:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <handle_write_multiple_registers+0x12c>
 8006d9c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8006da0:	2b7b      	cmp	r3, #123	; 0x7b
 8006da2:	d909      	bls.n	8006db8 <handle_write_multiple_registers+0x140>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8006da4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006da8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dac:	2103      	movs	r1, #3
 8006dae:	6818      	ldr	r0, [r3, #0]
 8006db0:	f7ff fa26 	bl	8006200 <send_exception_msg>
 8006db4:	4603      	mov	r3, r0
 8006db6:	e0b7      	b.n	8006f28 <handle_write_multiple_registers+0x2b0>

        if ((uint32_t) address + (uint32_t) quantity > ((uint32_t) 0xFFFF) + 1)
 8006db8:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8006dbc:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc6:	d909      	bls.n	8006ddc <handle_write_multiple_registers+0x164>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_ADDRESS);
 8006dc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006dcc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dd0:	2102      	movs	r1, #2
 8006dd2:	6818      	ldr	r0, [r3, #0]
 8006dd4:	f7ff fa14 	bl	8006200 <send_exception_msg>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	e0a5      	b.n	8006f28 <handle_write_multiple_registers+0x2b0>

        if (registers_bytes == 0)
 8006ddc:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <handle_write_multiple_registers+0x180>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8006de4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006de8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006dec:	2103      	movs	r1, #3
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	f7ff fa06 	bl	8006200 <send_exception_msg>
 8006df4:	4603      	mov	r3, r0
 8006df6:	e097      	b.n	8006f28 <handle_write_multiple_registers+0x2b0>

        if (registers_bytes != quantity * 2)
 8006df8:	f897 2105 	ldrb.w	r2, [r7, #261]	; 0x105
 8006dfc:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d009      	beq.n	8006e1a <handle_write_multiple_registers+0x1a2>
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_DATA_VALUE);
 8006e06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e0e:	2103      	movs	r1, #3
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	f7ff f9f5 	bl	8006200 <send_exception_msg>
 8006e16:	4603      	mov	r3, r0
 8006e18:	e086      	b.n	8006f28 <handle_write_multiple_registers+0x2b0>

        if (nmbs->callbacks.write_multiple_registers) {
 8006e1a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d072      	beq.n	8006f12 <handle_write_multiple_registers+0x29a>
            err = nmbs->callbacks.write_multiple_registers(address, quantity, registers, nmbs->platform.arg);
 8006e2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 8006e3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8006e48:	f107 020c 	add.w	r2, r7, #12
 8006e4c:	f8b7 1106 	ldrh.w	r1, [r7, #262]	; 0x106
 8006e50:	f8b7 0108 	ldrh.w	r0, [r7, #264]	; 0x108
 8006e54:	47a0      	blx	r4
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
            if (err != NMBS_ERROR_NONE) {
 8006e5c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01d      	beq.n	8006ea0 <handle_write_multiple_registers+0x228>
                if (nmbs_error_is_exception(err))
 8006e64:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	dd0f      	ble.n	8006e8c <handle_write_multiple_registers+0x214>
 8006e6c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006e70:	2b04      	cmp	r3, #4
 8006e72:	dc0b      	bgt.n	8006e8c <handle_write_multiple_registers+0x214>
                    return send_exception_msg(nmbs, err);
 8006e74:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8006e78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e80:	4611      	mov	r1, r2
 8006e82:	6818      	ldr	r0, [r3, #0]
 8006e84:	f7ff f9bc 	bl	8006200 <send_exception_msg>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	e04d      	b.n	8006f28 <handle_write_multiple_registers+0x2b0>

                return send_exception_msg(nmbs, NMBS_EXCEPTION_SERVER_DEVICE_FAILURE);
 8006e8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006e94:	2104      	movs	r1, #4
 8006e96:	6818      	ldr	r0, [r3, #0]
 8006e98:	f7ff f9b2 	bl	8006200 <send_exception_msg>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	e043      	b.n	8006f28 <handle_write_multiple_registers+0x2b0>
            }

            if (!nmbs->msg.broadcast) {
 8006ea0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ea4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f893 310a 	ldrb.w	r3, [r3, #266]	; 0x10a
 8006eae:	f083 0301 	eor.w	r3, r3, #1
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d036      	beq.n	8006f26 <handle_write_multiple_registers+0x2ae>
                put_res_header(nmbs, 4);
 8006eb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ebc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ec0:	2104      	movs	r1, #4
 8006ec2:	6818      	ldr	r0, [r3, #0]
 8006ec4:	f7ff f98d 	bl	80061e2 <put_res_header>

                put_2(nmbs, address);
 8006ec8:	f8b7 2108 	ldrh.w	r2, [r7, #264]	; 0x108
 8006ecc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ed0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ed4:	4611      	mov	r1, r2
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	f7fe feb9 	bl	8005c4e <put_2>
                put_2(nmbs, quantity);
 8006edc:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8006ee0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ee4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ee8:	4611      	mov	r1, r2
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	f7fe feaf 	bl	8005c4e <put_2>
                NMBS_DEBUG_PRINT("a %d\tq %d", address, quantity);

                err = send_msg(nmbs);
 8006ef0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ef4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	f7ff f913 	bl	8006124 <send_msg>
 8006efe:	4603      	mov	r3, r0
 8006f00:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
                if (err != NMBS_ERROR_NONE)
 8006f04:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00c      	beq.n	8006f26 <handle_write_multiple_registers+0x2ae>
                    return err;
 8006f0c:	f997 310b 	ldrsb.w	r3, [r7, #267]	; 0x10b
 8006f10:	e00a      	b.n	8006f28 <handle_write_multiple_registers+0x2b0>
            }
        }
        else {
            return send_exception_msg(nmbs, NMBS_EXCEPTION_ILLEGAL_FUNCTION);
 8006f12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	f7ff f96f 	bl	8006200 <send_exception_msg>
 8006f22:	4603      	mov	r3, r0
 8006f24:	e000      	b.n	8006f28 <handle_write_multiple_registers+0x2b0>
        }
    }

    return NMBS_ERROR_NONE;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd90      	pop	{r4, r7, pc}
	...

08006f34 <handle_req_fc>:
#endif


static nmbs_error handle_req_fc(nmbs_t* nmbs) {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
    NMBS_DEBUG_PRINT("fc %d\t", nmbs->msg.fc);

    nmbs_error err;
    switch (nmbs->msg.fc) {
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3107 	ldrb.w	r3, [r3, #263]	; 0x107
 8006f42:	3b01      	subs	r3, #1
 8006f44:	2b0f      	cmp	r3, #15
 8006f46:	d853      	bhi.n	8006ff0 <handle_req_fc+0xbc>
 8006f48:	a201      	add	r2, pc, #4	; (adr r2, 8006f50 <handle_req_fc+0x1c>)
 8006f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4e:	bf00      	nop
 8006f50:	08006f91 	.word	0x08006f91
 8006f54:	08006f9d 	.word	0x08006f9d
 8006f58:	08006fa9 	.word	0x08006fa9
 8006f5c:	08006fb5 	.word	0x08006fb5
 8006f60:	08006fc1 	.word	0x08006fc1
 8006f64:	08006fcd 	.word	0x08006fcd
 8006f68:	08006ff1 	.word	0x08006ff1
 8006f6c:	08006ff1 	.word	0x08006ff1
 8006f70:	08006ff1 	.word	0x08006ff1
 8006f74:	08006ff1 	.word	0x08006ff1
 8006f78:	08006ff1 	.word	0x08006ff1
 8006f7c:	08006ff1 	.word	0x08006ff1
 8006f80:	08006ff1 	.word	0x08006ff1
 8006f84:	08006ff1 	.word	0x08006ff1
 8006f88:	08006fd9 	.word	0x08006fd9
 8006f8c:	08006fe5 	.word	0x08006fe5
#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 1:
            err = handle_read_coils(nmbs);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff fbab 	bl	80066ec <handle_read_coils>
 8006f96:	4603      	mov	r3, r0
 8006f98:	73fb      	strb	r3, [r7, #15]
            break;
 8006f9a:	e02b      	b.n	8006ff4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_READ_DISCRETE_INPUTS_DISABLED
        case 2:
            err = handle_read_discrete_inputs(nmbs);
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff fbb5 	bl	800670c <handle_read_discrete_inputs>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	73fb      	strb	r3, [r7, #15]
            break;
 8006fa6:	e025      	b.n	8006ff4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_READ_HOLDING_REGISTERS_DISABLED
        case 3:
            err = handle_read_holding_registers(nmbs);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff fbbf 	bl	800672c <handle_read_holding_registers>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	73fb      	strb	r3, [r7, #15]
            break;
 8006fb2:	e01f      	b.n	8006ff4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_READ_INPUT_REGISTERS_DISABLED
        case 4:
            err = handle_read_input_registers(nmbs);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f7ff fbc9 	bl	800674c <handle_read_input_registers>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	73fb      	strb	r3, [r7, #15]
            break;
 8006fbe:	e019      	b.n	8006ff4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_COIL_DISABLED
        case 5:
            err = handle_write_single_coil(nmbs);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f7ff fbd3 	bl	800676c <handle_write_single_coil>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	73fb      	strb	r3, [r7, #15]
            break;
 8006fca:	e013      	b.n	8006ff4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_WRITE_SINGLE_REGISTER_DISABLED
        case 6:
            err = handle_write_single_register(nmbs);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff fc64 	bl	800689a <handle_write_single_register>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	73fb      	strb	r3, [r7, #15]
            break;
 8006fd6:	e00d      	b.n	8006ff4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_COILS_DISABLED
        case 15:
            err = handle_write_multiple_coils(nmbs);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff fce3 	bl	80069a4 <handle_write_multiple_coils>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	73fb      	strb	r3, [r7, #15]
            break;
 8006fe2:	e007      	b.n	8006ff4 <handle_req_fc+0xc0>
#endif

#ifndef NMBS_SERVER_WRITE_MULTIPLE_REGISTERS_DISABLED
        case 16:
            err = handle_write_multiple_registers(nmbs);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff fe47 	bl	8006c78 <handle_write_multiple_registers>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73fb      	strb	r3, [r7, #15]
            break;
 8006fee:	e001      	b.n	8006ff4 <handle_req_fc+0xc0>
#endif

        default:
            err = NMBS_EXCEPTION_ILLEGAL_FUNCTION;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	73fb      	strb	r3, [r7, #15]
    }

    return err;
 8006ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <nmbs_server_create>:


nmbs_error nmbs_server_create(nmbs_t* nmbs, uint8_t address_rtu, const nmbs_platform_conf* platform_conf,
                              const nmbs_callbacks* callbacks) {
 8007000:	b5b0      	push	{r4, r5, r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	607a      	str	r2, [r7, #4]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	460b      	mov	r3, r1
 800700e:	72fb      	strb	r3, [r7, #11]
    if (platform_conf->transport == NMBS_TRANSPORT_RTU && address_rtu == 0)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d105      	bne.n	8007024 <nmbs_server_create+0x24>
 8007018:	7afb      	ldrb	r3, [r7, #11]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d102      	bne.n	8007024 <nmbs_server_create+0x24>
        return NMBS_ERROR_INVALID_ARGUMENT;
 800701e:	f04f 33ff 	mov.w	r3, #4294967295
 8007022:	e01c      	b.n	800705e <nmbs_server_create+0x5e>

    nmbs_error ret = nmbs_create(nmbs, platform_conf);
 8007024:	6879      	ldr	r1, [r7, #4]
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f7fe fe64 	bl	8005cf4 <nmbs_create>
 800702c:	4603      	mov	r3, r0
 800702e:	75fb      	strb	r3, [r7, #23]
    if (ret != NMBS_ERROR_NONE)
 8007030:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d002      	beq.n	800703e <nmbs_server_create+0x3e>
        return ret;
 8007038:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800703c:	e00f      	b.n	800705e <nmbs_server_create+0x5e>

    nmbs->address_rtu = address_rtu;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	7afa      	ldrb	r2, [r7, #11]
 8007042:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
    nmbs->callbacks = *callbacks;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 800704e:	4615      	mov	r5, r2
 8007050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007058:	682b      	ldr	r3, [r5, #0]
 800705a:	6023      	str	r3, [r4, #0]

    return NMBS_ERROR_NONE;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bdb0      	pop	{r4, r5, r7, pc}

08007066 <nmbs_server_poll>:


nmbs_error nmbs_server_poll(nmbs_t* nmbs) {
 8007066:	b580      	push	{r7, lr}
 8007068:	b084      	sub	sp, #16
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
    msg_state_reset(nmbs);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fe fe21 	bl	8005cb6 <msg_state_reset>

    bool first_byte_received = false;
 8007074:	2300      	movs	r3, #0
 8007076:	73bb      	strb	r3, [r7, #14]
    nmbs_error err = recv_req_header(nmbs, &first_byte_received);
 8007078:	f107 030e 	add.w	r3, r7, #14
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7ff f877 	bl	8006172 <recv_req_header>
 8007084:	4603      	mov	r3, r0
 8007086:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE) {
 8007088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00f      	beq.n	80070b0 <nmbs_server_poll+0x4a>
        if (!first_byte_received && err == NMBS_ERROR_TIMEOUT)
 8007090:	7bbb      	ldrb	r3, [r7, #14]
 8007092:	f083 0301 	eor.w	r3, r3, #1
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d006      	beq.n	80070aa <nmbs_server_poll+0x44>
 800709c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070a0:	f113 0f03 	cmn.w	r3, #3
 80070a4:	d101      	bne.n	80070aa <nmbs_server_poll+0x44>
            return NMBS_ERROR_NONE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	e018      	b.n	80070dc <nmbs_server_poll+0x76>

        return err;
 80070aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ae:	e015      	b.n	80070dc <nmbs_server_poll+0x76>

        printf("client_id %d\t", nmbs->msg.unit_id);
    }
#endif

    err = handle_req_fc(nmbs);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff ff3f 	bl	8006f34 <handle_req_fc>
 80070b6:	4603      	mov	r3, r0
 80070b8:	73fb      	strb	r3, [r7, #15]
    if (err != NMBS_ERROR_NONE) {
 80070ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <nmbs_server_poll+0x72>
        if (!nmbs_error_is_exception(err))
 80070c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	dd03      	ble.n	80070d2 <nmbs_server_poll+0x6c>
 80070ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	dd02      	ble.n	80070d8 <nmbs_server_poll+0x72>
            return err;
 80070d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070d6:	e001      	b.n	80070dc <nmbs_server_poll+0x76>
    }

    return err;
 80070d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <rbuart_init>:
 * @param bufferData: puntero para los datos del buffer circular
 * @param size: tamaño maximo del puntero de datos
 * @return RBUART_Result_t
 */
#if defined(USE_HAL_DRIVER)
RBUART_Result_t rbuart_init(rbuart_t *rb, UART_HandleTypeDef *UARTx, void* buffdata, size_t size){
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	603b      	str	r3, [r7, #0]
#else
RBUART_Result_t rbuart_init(rbuart_t *rb, USART_TypeDef *UARTx, void* buffdata, size_t size){
#endif

	rb->rbuart = UARTx;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	601a      	str	r2, [r3, #0]
	rb->size = size;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	619a      	str	r2, [r3, #24]
	if(lwrb_init(&rb->buff, buffdata, size) == 1){
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	3304      	adds	r3, #4
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	4618      	mov	r0, r3
 8007108:	f7fe fb84 	bl	8005814 <lwrb_init>
 800710c:	4603      	mov	r3, r0
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <rbuart_init+0x32>
		return RBUART_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	e000      	b.n	8007118 <rbuart_init+0x34>
	}
	return RBUART_ERROR;
 8007116:	2301      	movs	r3, #1
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <rbuart_tx_callback>:

/**
 * @brief callback para transmitir datos del del buffer circular
 * @param rb: puntero al buffer circular
 */
RBUART_Result_t rbuart_tx_callback(rbuart_t *rb){
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
	uint8_t data;
	size_t dataSize = lwrb_get_full(&rb->buff);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3304      	adds	r3, #4
 800712c:	4618      	mov	r0, r3
 800712e:	f7fe fce3 	bl	8005af8 <lwrb_get_full>
 8007132:	60f8      	str	r0, [r7, #12]
	if(dataSize == 0){
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d104      	bne.n	8007144 <rbuart_tx_callback+0x24>

#if !defined(USE_HAL_DRIVER)
		rb->rbuart->CR1 &=~ (USART_CR1_TXEIE);
#endif
		rb->txState = 0;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	775a      	strb	r2, [r3, #29]
		return RBUART_TXCPLT;
 8007140:	2302      	movs	r3, #2
 8007142:	e013      	b.n	800716c <rbuart_tx_callback+0x4c>
	}else{
#if defined(USE_HAL_DRIVER)
		lwrb_read(&rb->buff, &data, 1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3304      	adds	r3, #4
 8007148:	f107 010b 	add.w	r1, r7, #11
 800714c:	2201      	movs	r2, #1
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fc11 	bl	8005976 <lwrb_read>
		rb->txState = 1;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	775a      	strb	r2, [r3, #29]
		HAL_UART_Transmit_IT(rb->rbuart, &data, 1);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f107 010b 	add.w	r1, r7, #11
 8007162:	2201      	movs	r2, #1
 8007164:	4618      	mov	r0, r3
 8007166:	f7fb fc0c 	bl	8002982 <HAL_UART_Transmit_IT>
#else
		lwrb_read(rb, &data, 1);
		rb->rbuart->DR = data;
#endif
	}
	return RBUART_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <rbuart_rx_callback>:
/**
 * @brief callback para recibir datos a un buffer circular
 * @param rb: puntero al buffer circular
 */
RBUART_Result_t rbuart_rx_callback(rbuart_t *rb, uint8_t *pData, size_t size){
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]

	if(lwrb_get_free(&rb->buff) >= size){
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	3304      	adds	r3, #4
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe fc76 	bl	8005a76 <lwrb_get_free>
 800718a:	4602      	mov	r2, r0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4293      	cmp	r3, r2
 8007190:	d810      	bhi.n	80071b4 <rbuart_rx_callback+0x40>
		lwrb_write(&rb->buff, pData, size);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	3304      	adds	r3, #4
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	4618      	mov	r0, r3
 800719c:	f7fe fb6b 	bl	8005876 <lwrb_write>
		HAL_UART_Receive_IT(rb->rbuart, &rb->rawByte, 1);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6818      	ldr	r0, [r3, #0]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	331c      	adds	r3, #28
 80071a8:	2201      	movs	r2, #1
 80071aa:	4619      	mov	r1, r3
 80071ac:	f7fb fc2e 	bl	8002a0c <HAL_UART_Receive_IT>
		return RBUART_RXCPLT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e000      	b.n	80071b6 <rbuart_rx_callback+0x42>
	}
	return RBUART_ERROR;
 80071b4:	2301      	movs	r3, #1
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <rbuart_send>:
 * @brief funcion para enviar datos
 * @param rb: buffer utilizado para enviar datos
 * @param pData: puntero a los datos a enviar
 * @param size: tamaño de datos a enviar
 */
int32_t rbuart_send(rbuart_t *rb, uint8_t *pData, size_t size){
 80071be:	b580      	push	{r7, lr}
 80071c0:	b086      	sub	sp, #24
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	60b9      	str	r1, [r7, #8]
 80071c8:	607a      	str	r2, [r7, #4]
	uint8_t firstData;
	if(lwrb_get_free(&rb->buff) >= size){
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	3304      	adds	r3, #4
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe fc51 	bl	8005a76 <lwrb_get_free>
 80071d4:	4602      	mov	r2, r0
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4293      	cmp	r3, r2
 80071da:	d82a      	bhi.n	8007232 <rbuart_send+0x74>

		lwrb_write(&rb->buff, pData, size);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3304      	adds	r3, #4
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe fb46 	bl	8005876 <lwrb_write>
		if(rb->txState == 0){
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	7f5b      	ldrb	r3, [r3, #29]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d11d      	bne.n	800722e <rbuart_send+0x70>
			lwrb_read(&rb->buff, &firstData, 1);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	3304      	adds	r3, #4
 80071f6:	f107 0117 	add.w	r1, r7, #23
 80071fa:	2201      	movs	r2, #1
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7fe fbba 	bl	8005976 <lwrb_read>
			//se habilita la interrupcion para la transmisión
#if defined(USE_HAL_DRIVER)

			if(rb->rbuart->gState != HAL_UART_STATE_BUSY_TX || rb->rbuart->gState != HAL_UART_STATE_BUSY_TX_RX){
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b21      	cmp	r3, #33	; 0x21
 800720e:	d106      	bne.n	800721e <rbuart_send+0x60>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b23      	cmp	r3, #35	; 0x23
 800721c:	d007      	beq.n	800722e <rbuart_send+0x70>
				HAL_UART_Transmit_IT(rb->rbuart, &firstData, 1);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f107 0117 	add.w	r1, r7, #23
 8007226:	2201      	movs	r2, #1
 8007228:	4618      	mov	r0, r3
 800722a:	f7fb fbaa 	bl	8002982 <HAL_UART_Transmit_IT>
			}
#else
			rb->rbuart->CR1 |= USART_CR1_TXEIE;
#endif
		}
		return size;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	e000      	b.n	8007234 <rbuart_send+0x76>
	}
	return 0;
 8007232:	2300      	movs	r3, #0
}
 8007234:	4618      	mov	r0, r3
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <rbuart_start_receive>:

/**
 * @brief funcion que inicia la recepcion de datos por interrupcion en el buffer circular
 * @param rb: puntero al buffer circular
 */
RBUART_Result_t rbuart_start_receive(rbuart_t *rb){
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
#if defined(USE_HAL_DRIVER)
	HAL_UART_Receive_IT(rb->rbuart, &rb->rawByte, 1);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6818      	ldr	r0, [r3, #0]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	331c      	adds	r3, #28
 800724c:	2201      	movs	r2, #1
 800724e:	4619      	mov	r1, r3
 8007250:	f7fb fbdc 	bl	8002a0c <HAL_UART_Receive_IT>
#else
	rb->rbuart->CR1 |= USART_CR1_RXNEIE;
#endif
	return RBUART_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <rbuart_get_data>:
 * @brief obtener los datos recibidos por IT
 * @param rb: puntero al buffer circular
 * @param rxData: puntero donde se almacena los datos recibidos
 * @param size: cantidad de datos leidos
 */
size_t rbuart_get_data(rbuart_t *rb, uint8_t *rxData, size_t size){
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	60f8      	str	r0, [r7, #12]
 8007266:	60b9      	str	r1, [r7, #8]
 8007268:	607a      	str	r2, [r7, #4]
	return lwrb_read(&rb->buff, rxData, size);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3304      	adds	r3, #4
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	68b9      	ldr	r1, [r7, #8]
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fb7f 	bl	8005976 <lwrb_read>
 8007278:	4603      	mov	r3, r0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <rbuart_get_receiveSize>:

/**
 * @brief obtener la cantidad de datos almacenados en el buffer circular
 */
size_t rbuart_get_receiveSize(rbuart_t *rb){
 8007282:	b580      	push	{r7, lr}
 8007284:	b082      	sub	sp, #8
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
	return lwrb_get_full(&rb->buff);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3304      	adds	r3, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe fc32 	bl	8005af8 <lwrb_get_full>
 8007294:	4603      	mov	r3, r0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
	...

080072a0 <__libc_init_array>:
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	4d0d      	ldr	r5, [pc, #52]	; (80072d8 <__libc_init_array+0x38>)
 80072a4:	4c0d      	ldr	r4, [pc, #52]	; (80072dc <__libc_init_array+0x3c>)
 80072a6:	1b64      	subs	r4, r4, r5
 80072a8:	10a4      	asrs	r4, r4, #2
 80072aa:	2600      	movs	r6, #0
 80072ac:	42a6      	cmp	r6, r4
 80072ae:	d109      	bne.n	80072c4 <__libc_init_array+0x24>
 80072b0:	4d0b      	ldr	r5, [pc, #44]	; (80072e0 <__libc_init_array+0x40>)
 80072b2:	4c0c      	ldr	r4, [pc, #48]	; (80072e4 <__libc_init_array+0x44>)
 80072b4:	f000 f842 	bl	800733c <_init>
 80072b8:	1b64      	subs	r4, r4, r5
 80072ba:	10a4      	asrs	r4, r4, #2
 80072bc:	2600      	movs	r6, #0
 80072be:	42a6      	cmp	r6, r4
 80072c0:	d105      	bne.n	80072ce <__libc_init_array+0x2e>
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072c8:	4798      	blx	r3
 80072ca:	3601      	adds	r6, #1
 80072cc:	e7ee      	b.n	80072ac <__libc_init_array+0xc>
 80072ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d2:	4798      	blx	r3
 80072d4:	3601      	adds	r6, #1
 80072d6:	e7f2      	b.n	80072be <__libc_init_array+0x1e>
 80072d8:	080074e8 	.word	0x080074e8
 80072dc:	080074e8 	.word	0x080074e8
 80072e0:	080074e8 	.word	0x080074e8
 80072e4:	080074ec 	.word	0x080074ec

080072e8 <memcpy>:
 80072e8:	440a      	add	r2, r1
 80072ea:	4291      	cmp	r1, r2
 80072ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80072f0:	d100      	bne.n	80072f4 <memcpy+0xc>
 80072f2:	4770      	bx	lr
 80072f4:	b510      	push	{r4, lr}
 80072f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072fe:	4291      	cmp	r1, r2
 8007300:	d1f9      	bne.n	80072f6 <memcpy+0xe>
 8007302:	bd10      	pop	{r4, pc}

08007304 <memset>:
 8007304:	4402      	add	r2, r0
 8007306:	4603      	mov	r3, r0
 8007308:	4293      	cmp	r3, r2
 800730a:	d100      	bne.n	800730e <memset+0xa>
 800730c:	4770      	bx	lr
 800730e:	f803 1b01 	strb.w	r1, [r3], #1
 8007312:	e7f9      	b.n	8007308 <memset+0x4>

08007314 <strcpy>:
 8007314:	4603      	mov	r3, r0
 8007316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800731a:	f803 2b01 	strb.w	r2, [r3], #1
 800731e:	2a00      	cmp	r2, #0
 8007320:	d1f9      	bne.n	8007316 <strcpy+0x2>
 8007322:	4770      	bx	lr

08007324 <strnlen>:
 8007324:	b510      	push	{r4, lr}
 8007326:	4602      	mov	r2, r0
 8007328:	4401      	add	r1, r0
 800732a:	428a      	cmp	r2, r1
 800732c:	4613      	mov	r3, r2
 800732e:	d003      	beq.n	8007338 <strnlen+0x14>
 8007330:	781c      	ldrb	r4, [r3, #0]
 8007332:	3201      	adds	r2, #1
 8007334:	2c00      	cmp	r4, #0
 8007336:	d1f8      	bne.n	800732a <strnlen+0x6>
 8007338:	1a18      	subs	r0, r3, r0
 800733a:	bd10      	pop	{r4, pc}

0800733c <_init>:
 800733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733e:	bf00      	nop
 8007340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007342:	bc08      	pop	{r3}
 8007344:	469e      	mov	lr, r3
 8007346:	4770      	bx	lr

08007348 <_fini>:
 8007348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800734a:	bf00      	nop
 800734c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734e:	bc08      	pop	{r3}
 8007350:	469e      	mov	lr, r3
 8007352:	4770      	bx	lr
