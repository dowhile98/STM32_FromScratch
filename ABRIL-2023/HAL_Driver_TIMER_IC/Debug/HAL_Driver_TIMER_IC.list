
HAL_Driver_TIMER_IC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a1c  08003a1c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003a1c  08003a1c  00013a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a24  08003a24  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000f0  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108c7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f5  00000000  00000000  00030967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000908  00000000  00000000  00033060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001410  00000000  00000000  00033968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d8e  00000000  00000000  00034d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000110cc  00000000  00000000  00058b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d76f2  00000000  00000000  00069bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001412c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002410  00000000  00000000  00141314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000ac32  00000000  00000000  00143724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003948 	.word	0x08003948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003948 	.word	0x08003948

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b974 	b.w	8000bdc <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	4604      	mov	r4, r0
 8000914:	468e      	mov	lr, r1
 8000916:	2b00      	cmp	r3, #0
 8000918:	d14d      	bne.n	80009b6 <__udivmoddi4+0xaa>
 800091a:	428a      	cmp	r2, r1
 800091c:	4694      	mov	ip, r2
 800091e:	d969      	bls.n	80009f4 <__udivmoddi4+0xe8>
 8000920:	fab2 f282 	clz	r2, r2
 8000924:	b152      	cbz	r2, 800093c <__udivmoddi4+0x30>
 8000926:	fa01 f302 	lsl.w	r3, r1, r2
 800092a:	f1c2 0120 	rsb	r1, r2, #32
 800092e:	fa20 f101 	lsr.w	r1, r0, r1
 8000932:	fa0c fc02 	lsl.w	ip, ip, r2
 8000936:	ea41 0e03 	orr.w	lr, r1, r3
 800093a:	4094      	lsls	r4, r2
 800093c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000940:	0c21      	lsrs	r1, r4, #16
 8000942:	fbbe f6f8 	udiv	r6, lr, r8
 8000946:	fa1f f78c 	uxth.w	r7, ip
 800094a:	fb08 e316 	mls	r3, r8, r6, lr
 800094e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000952:	fb06 f107 	mul.w	r1, r6, r7
 8000956:	4299      	cmp	r1, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x64>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000962:	f080 811f 	bcs.w	8000ba4 <__udivmoddi4+0x298>
 8000966:	4299      	cmp	r1, r3
 8000968:	f240 811c 	bls.w	8000ba4 <__udivmoddi4+0x298>
 800096c:	3e02      	subs	r6, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a5b      	subs	r3, r3, r1
 8000972:	b2a4      	uxth	r4, r4
 8000974:	fbb3 f0f8 	udiv	r0, r3, r8
 8000978:	fb08 3310 	mls	r3, r8, r0, r3
 800097c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000980:	fb00 f707 	mul.w	r7, r0, r7
 8000984:	42a7      	cmp	r7, r4
 8000986:	d90a      	bls.n	800099e <__udivmoddi4+0x92>
 8000988:	eb1c 0404 	adds.w	r4, ip, r4
 800098c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000990:	f080 810a 	bcs.w	8000ba8 <__udivmoddi4+0x29c>
 8000994:	42a7      	cmp	r7, r4
 8000996:	f240 8107 	bls.w	8000ba8 <__udivmoddi4+0x29c>
 800099a:	4464      	add	r4, ip
 800099c:	3802      	subs	r0, #2
 800099e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009a2:	1be4      	subs	r4, r4, r7
 80009a4:	2600      	movs	r6, #0
 80009a6:	b11d      	cbz	r5, 80009b0 <__udivmoddi4+0xa4>
 80009a8:	40d4      	lsrs	r4, r2
 80009aa:	2300      	movs	r3, #0
 80009ac:	e9c5 4300 	strd	r4, r3, [r5]
 80009b0:	4631      	mov	r1, r6
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d909      	bls.n	80009ce <__udivmoddi4+0xc2>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	f000 80ef 	beq.w	8000b9e <__udivmoddi4+0x292>
 80009c0:	2600      	movs	r6, #0
 80009c2:	e9c5 0100 	strd	r0, r1, [r5]
 80009c6:	4630      	mov	r0, r6
 80009c8:	4631      	mov	r1, r6
 80009ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ce:	fab3 f683 	clz	r6, r3
 80009d2:	2e00      	cmp	r6, #0
 80009d4:	d14a      	bne.n	8000a6c <__udivmoddi4+0x160>
 80009d6:	428b      	cmp	r3, r1
 80009d8:	d302      	bcc.n	80009e0 <__udivmoddi4+0xd4>
 80009da:	4282      	cmp	r2, r0
 80009dc:	f200 80f9 	bhi.w	8000bd2 <__udivmoddi4+0x2c6>
 80009e0:	1a84      	subs	r4, r0, r2
 80009e2:	eb61 0303 	sbc.w	r3, r1, r3
 80009e6:	2001      	movs	r0, #1
 80009e8:	469e      	mov	lr, r3
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	d0e0      	beq.n	80009b0 <__udivmoddi4+0xa4>
 80009ee:	e9c5 4e00 	strd	r4, lr, [r5]
 80009f2:	e7dd      	b.n	80009b0 <__udivmoddi4+0xa4>
 80009f4:	b902      	cbnz	r2, 80009f8 <__udivmoddi4+0xec>
 80009f6:	deff      	udf	#255	; 0xff
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	2a00      	cmp	r2, #0
 80009fe:	f040 8092 	bne.w	8000b26 <__udivmoddi4+0x21a>
 8000a02:	eba1 010c 	sub.w	r1, r1, ip
 8000a06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a0a:	fa1f fe8c 	uxth.w	lr, ip
 8000a0e:	2601      	movs	r6, #1
 8000a10:	0c20      	lsrs	r0, r4, #16
 8000a12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a16:	fb07 1113 	mls	r1, r7, r3, r1
 8000a1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a1e:	fb0e f003 	mul.w	r0, lr, r3
 8000a22:	4288      	cmp	r0, r1
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x12c>
 8000a26:	eb1c 0101 	adds.w	r1, ip, r1
 8000a2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x12a>
 8000a30:	4288      	cmp	r0, r1
 8000a32:	f200 80cb 	bhi.w	8000bcc <__udivmoddi4+0x2c0>
 8000a36:	4643      	mov	r3, r8
 8000a38:	1a09      	subs	r1, r1, r0
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a40:	fb07 1110 	mls	r1, r7, r0, r1
 8000a44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a48:	fb0e fe00 	mul.w	lr, lr, r0
 8000a4c:	45a6      	cmp	lr, r4
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x156>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a58:	d202      	bcs.n	8000a60 <__udivmoddi4+0x154>
 8000a5a:	45a6      	cmp	lr, r4
 8000a5c:	f200 80bb 	bhi.w	8000bd6 <__udivmoddi4+0x2ca>
 8000a60:	4608      	mov	r0, r1
 8000a62:	eba4 040e 	sub.w	r4, r4, lr
 8000a66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a6a:	e79c      	b.n	80009a6 <__udivmoddi4+0x9a>
 8000a6c:	f1c6 0720 	rsb	r7, r6, #32
 8000a70:	40b3      	lsls	r3, r6
 8000a72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a82:	431c      	orrs	r4, r3
 8000a84:	40f9      	lsrs	r1, r7
 8000a86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a92:	0c20      	lsrs	r0, r4, #16
 8000a94:	fa1f fe8c 	uxth.w	lr, ip
 8000a98:	fb09 1118 	mls	r1, r9, r8, r1
 8000a9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000aa0:	fb08 f00e 	mul.w	r0, r8, lr
 8000aa4:	4288      	cmp	r0, r1
 8000aa6:	fa02 f206 	lsl.w	r2, r2, r6
 8000aaa:	d90b      	bls.n	8000ac4 <__udivmoddi4+0x1b8>
 8000aac:	eb1c 0101 	adds.w	r1, ip, r1
 8000ab0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ab4:	f080 8088 	bcs.w	8000bc8 <__udivmoddi4+0x2bc>
 8000ab8:	4288      	cmp	r0, r1
 8000aba:	f240 8085 	bls.w	8000bc8 <__udivmoddi4+0x2bc>
 8000abe:	f1a8 0802 	sub.w	r8, r8, #2
 8000ac2:	4461      	add	r1, ip
 8000ac4:	1a09      	subs	r1, r1, r0
 8000ac6:	b2a4      	uxth	r4, r4
 8000ac8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000acc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ad0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ad4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ad8:	458e      	cmp	lr, r1
 8000ada:	d908      	bls.n	8000aee <__udivmoddi4+0x1e2>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ae4:	d26c      	bcs.n	8000bc0 <__udivmoddi4+0x2b4>
 8000ae6:	458e      	cmp	lr, r1
 8000ae8:	d96a      	bls.n	8000bc0 <__udivmoddi4+0x2b4>
 8000aea:	3802      	subs	r0, #2
 8000aec:	4461      	add	r1, ip
 8000aee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000af2:	fba0 9402 	umull	r9, r4, r0, r2
 8000af6:	eba1 010e 	sub.w	r1, r1, lr
 8000afa:	42a1      	cmp	r1, r4
 8000afc:	46c8      	mov	r8, r9
 8000afe:	46a6      	mov	lr, r4
 8000b00:	d356      	bcc.n	8000bb0 <__udivmoddi4+0x2a4>
 8000b02:	d053      	beq.n	8000bac <__udivmoddi4+0x2a0>
 8000b04:	b15d      	cbz	r5, 8000b1e <__udivmoddi4+0x212>
 8000b06:	ebb3 0208 	subs.w	r2, r3, r8
 8000b0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b12:	fa22 f306 	lsr.w	r3, r2, r6
 8000b16:	40f1      	lsrs	r1, r6
 8000b18:	431f      	orrs	r7, r3
 8000b1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b1e:	2600      	movs	r6, #0
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	f1c2 0320 	rsb	r3, r2, #32
 8000b2a:	40d8      	lsrs	r0, r3
 8000b2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b30:	fa21 f303 	lsr.w	r3, r1, r3
 8000b34:	4091      	lsls	r1, r2
 8000b36:	4301      	orrs	r1, r0
 8000b38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3c:	fa1f fe8c 	uxth.w	lr, ip
 8000b40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b44:	fb07 3610 	mls	r6, r7, r0, r3
 8000b48:	0c0b      	lsrs	r3, r1, #16
 8000b4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b52:	429e      	cmp	r6, r3
 8000b54:	fa04 f402 	lsl.w	r4, r4, r2
 8000b58:	d908      	bls.n	8000b6c <__udivmoddi4+0x260>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b62:	d22f      	bcs.n	8000bc4 <__udivmoddi4+0x2b8>
 8000b64:	429e      	cmp	r6, r3
 8000b66:	d92d      	bls.n	8000bc4 <__udivmoddi4+0x2b8>
 8000b68:	3802      	subs	r0, #2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	1b9b      	subs	r3, r3, r6
 8000b6e:	b289      	uxth	r1, r1
 8000b70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b74:	fb07 3316 	mls	r3, r7, r6, r3
 8000b78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b80:	428b      	cmp	r3, r1
 8000b82:	d908      	bls.n	8000b96 <__udivmoddi4+0x28a>
 8000b84:	eb1c 0101 	adds.w	r1, ip, r1
 8000b88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b8c:	d216      	bcs.n	8000bbc <__udivmoddi4+0x2b0>
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d914      	bls.n	8000bbc <__udivmoddi4+0x2b0>
 8000b92:	3e02      	subs	r6, #2
 8000b94:	4461      	add	r1, ip
 8000b96:	1ac9      	subs	r1, r1, r3
 8000b98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b9c:	e738      	b.n	8000a10 <__udivmoddi4+0x104>
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e705      	b.n	80009b0 <__udivmoddi4+0xa4>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e3      	b.n	8000970 <__udivmoddi4+0x64>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6f8      	b.n	800099e <__udivmoddi4+0x92>
 8000bac:	454b      	cmp	r3, r9
 8000bae:	d2a9      	bcs.n	8000b04 <__udivmoddi4+0x1f8>
 8000bb0:	ebb9 0802 	subs.w	r8, r9, r2
 8000bb4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7a3      	b.n	8000b04 <__udivmoddi4+0x1f8>
 8000bbc:	4646      	mov	r6, r8
 8000bbe:	e7ea      	b.n	8000b96 <__udivmoddi4+0x28a>
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	e794      	b.n	8000aee <__udivmoddi4+0x1e2>
 8000bc4:	4640      	mov	r0, r8
 8000bc6:	e7d1      	b.n	8000b6c <__udivmoddi4+0x260>
 8000bc8:	46d0      	mov	r8, sl
 8000bca:	e77b      	b.n	8000ac4 <__udivmoddi4+0x1b8>
 8000bcc:	3b02      	subs	r3, #2
 8000bce:	4461      	add	r1, ip
 8000bd0:	e732      	b.n	8000a38 <__udivmoddi4+0x12c>
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	e709      	b.n	80009ea <__udivmoddi4+0xde>
 8000bd6:	4464      	add	r4, ip
 8000bd8:	3802      	subs	r0, #2
 8000bda:	e742      	b.n	8000a62 <__udivmoddi4+0x156>

08000bdc <__aeabi_idiv0>:
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000be0:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	2400      	movs	r4, #0
{
 8000be4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000bea:	e9cd 4405 	strd	r4, r4, [sp, #20]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_GPIO_Init+0x60>)
 8000bf0:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	9407      	str	r4, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bf6:	4813      	ldr	r0, [pc, #76]	; (8000c44 <MX_GPIO_Init+0x64>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	f042 0201 	orr.w	r2, r2, #1
 8000bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8000bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c00:	f002 0201 	and.w	r2, r2, #1
 8000c04:	9201      	str	r2, [sp, #4]
 8000c06:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c08:	9402      	str	r4, [sp, #8]
 8000c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c0c:	f042 0208 	orr.w	r2, r2, #8
 8000c10:	631a      	str	r2, [r3, #48]	; 0x30
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c1a:	4622      	mov	r2, r4
 8000c1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c20:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c22:	f000 fcbd 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_GPIO_Init+0x64>)
 8000c2e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f000 fb92 	bl	8001360 <HAL_GPIO_Init>

}
 8000c3c:	b008      	add	sp, #32
 8000c3e:	bd10      	pop	{r4, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020c00 	.word	0x40020c00

08000c48 <HAL_TIM2_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM2_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000c48:	7f03      	ldrb	r3, [r0, #28]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d000      	beq.n	8000c50 <HAL_TIM2_IC_CaptureCallback+0x8>
 8000c4e:	4770      	bx	lr
{
 8000c50:	b570      	push	{r4, r5, r6, lr}
		//todo
		capture[count] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000c52:	4d11      	ldr	r5, [pc, #68]	; (8000c98 <HAL_TIM2_IC_CaptureCallback+0x50>)
 8000c54:	2100      	movs	r1, #0
 8000c56:	782e      	ldrb	r6, [r5, #0]
 8000c58:	4604      	mov	r4, r0
 8000c5a:	f001 f995 	bl	8001f88 <HAL_TIM_ReadCapturedValue>
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <HAL_TIM2_IC_CaptureCallback+0x54>)
 8000c60:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
		//capture[count] = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1);
		//capture[count] = htim->Instance->CCR1; //TIM2->CCR1
		count += 1;
 8000c64:	782b      	ldrb	r3, [r5, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	b2db      	uxtb	r3, r3
		if(count > 1){
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d90c      	bls.n	8000c88 <HAL_TIM2_IC_CaptureCallback+0x40>
			count = 0;
			if(capture[0] < capture[1]){
 8000c6e:	e9d2 1300 	ldrd	r1, r3, [r2]
			count = 0;
 8000c72:	2200      	movs	r2, #0
			if(capture[0] < capture[1]){
 8000c74:	4299      	cmp	r1, r3
			count = 0;
 8000c76:	702a      	strb	r2, [r5, #0]
			if(capture[0] < capture[1]){
 8000c78:	d208      	bcs.n	8000c8c <HAL_TIM2_IC_CaptureCallback+0x44>
				diff = capture[1] - capture[0];
 8000c7a:	1a5b      	subs	r3, r3, r1
			}else{
				diff = __HAL_TIM_GET_AUTORELOAD(htim) - capture[0] + capture[1];
			}
			dataready = 1;
 8000c7c:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_TIM2_IC_CaptureCallback+0x58>)
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <HAL_TIM2_IC_CaptureCallback+0x5c>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	7011      	strb	r1, [r2, #0]
 8000c84:	6003      	str	r3, [r0, #0]
		}
		//

		//frecuencia
	}
}
 8000c86:	bd70      	pop	{r4, r5, r6, pc}
		count += 1;
 8000c88:	702b      	strb	r3, [r5, #0]
}
 8000c8a:	bd70      	pop	{r4, r5, r6, pc}
				diff = __HAL_TIM_GET_AUTORELOAD(htim) - capture[0] + capture[1];
 8000c8c:	6822      	ldr	r2, [r4, #0]
 8000c8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c90:	1a5b      	subs	r3, r3, r1
 8000c92:	4413      	add	r3, r2
 8000c94:	e7f2      	b.n	8000c7c <HAL_TIM2_IC_CaptureCallback+0x34>
 8000c96:	bf00      	nop
 8000c98:	2000008c 	.word	0x2000008c
 8000c9c:	2000008c 	.word	0x2000008c
 8000ca0:	2000008d 	.word	0x2000008d
 8000ca4:	20000090 	.word	0x20000090

08000ca8 <__io_putchar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ca8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cac:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 8000cb0:	07d1      	lsls	r1, r2, #31
 8000cb2:	d503      	bpl.n	8000cbc <__io_putchar+0x14>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cb4:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cb8:	07d2      	lsls	r2, r2, #31
 8000cba:	d401      	bmi.n	8000cc0 <__io_putchar+0x18>
}
 8000cbc:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 8000cbe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	d0fb      	beq.n	8000cbe <__io_putchar+0x16>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000cc6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cca:	b2c2      	uxtb	r2, r0
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	4770      	bx	lr

08000cd0 <SystemClock_Config>:
{
 8000cd0:	b510      	push	{r4, lr}
 8000cd2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd4:	222c      	movs	r2, #44	; 0x2c
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	a809      	add	r0, sp, #36	; 0x24
 8000cda:	f001 fe9f 	bl	8002a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cde:	2300      	movs	r3, #0
 8000ce0:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000ce4:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce8:	4919      	ldr	r1, [pc, #100]	; (8000d50 <SystemClock_Config+0x80>)
 8000cea:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf0:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <SystemClock_Config+0x84>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000cf6:	6408      	str	r0, [r1, #64]	; 0x40
 8000cf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000cfa:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000cfe:	9101      	str	r1, [sp, #4]
 8000d00:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d02:	9302      	str	r3, [sp, #8]
 8000d04:	6811      	ldr	r1, [r2, #0]
 8000d06:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000d0a:	6011      	str	r1, [r2, #0]
 8000d0c:	6812      	ldr	r2, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d0e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d10:	2002      	movs	r0, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d12:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000d16:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d18:	9008      	str	r0, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1a:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d1c:	2210      	movs	r2, #16
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d20:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d24:	9c02      	ldr	r4, [sp, #8]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d26:	f000 fc49 	bl	80015bc <HAL_RCC_OscConfig>
 8000d2a:	b108      	cbz	r0, 8000d30 <SystemClock_Config+0x60>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d30:	4601      	mov	r1, r0
 8000d32:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d34:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d36:	e9cd 3103 	strd	r3, r1, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	e9cd 1105 	strd	r1, r1, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3e:	9107      	str	r1, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d40:	f000 fe54 	bl	80019ec <HAL_RCC_ClockConfig>
 8000d44:	b108      	cbz	r0, 8000d4a <SystemClock_Config+0x7a>
 8000d46:	b672      	cpsid	i
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <SystemClock_Config+0x78>
}
 8000d4a:	b014      	add	sp, #80	; 0x50
 8000d4c:	bd10      	pop	{r4, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40007000 	.word	0x40007000

08000d58 <main>:
{
 8000d58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_Init();
 8000d5c:	f000 fa4a 	bl	80011f4 <HAL_Init>
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  SET_BIT(TIMx->CCER, Channels);
 8000d60:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8000e3c <main+0xe4>
 8000d64:	4f30      	ldr	r7, [pc, #192]	; (8000e28 <main+0xd0>)
 8000d66:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8000e40 <main+0xe8>
  SystemClock_Config();
 8000d6a:	f7ff ffb1 	bl	8000cd0 <SystemClock_Config>
  MX_GPIO_Init();
 8000d6e:	f7ff ff37 	bl	8000be0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d72:	f000 f8f3 	bl	8000f5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d76:	f000 f941 	bl	8000ffc <MX_TIM3_Init>
  HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, HAL_TIM2_IC_CaptureCallback);
 8000d7a:	4a2c      	ldr	r2, [pc, #176]	; (8000e2c <main+0xd4>)
 8000d7c:	482c      	ldr	r0, [pc, #176]	; (8000e30 <main+0xd8>)
 8000d7e:	2112      	movs	r1, #18
 8000d80:	f001 f91c 	bl	8001fbc <HAL_TIM_RegisterCallback>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000d84:	2100      	movs	r1, #0
 8000d86:	482a      	ldr	r0, [pc, #168]	; (8000e30 <main+0xd8>)
 8000d88:	f000 fee4 	bl	8001b54 <HAL_TIM_IC_Start_IT>
  uint32_t ticks = HAL_GetTick();
 8000d8c:	f000 fa58 	bl	8001240 <HAL_GetTick>
 8000d90:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	f8c8 3020 	str.w	r3, [r8, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000d9c:	f8d8 3000 	ldr.w	r3, [r8]
 8000da0:	f043 0301 	orr.w	r3, r3, #1
		  T = diff * (16.0 / (16E+3));
 8000da4:	f20f 0b78 	addw	fp, pc, #120	; 0x78
 8000da8:	e9db ab00 	ldrd	sl, fp, [fp]
  uint32_t ticks = HAL_GetTick();
 8000dac:	4605      	mov	r5, r0
 8000dae:	f8c8 3000 	str.w	r3, [r8]
  uint32_t duty  = 1000;
 8000db2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
}
 8000db6:	e023      	b.n	8000e00 <main+0xa8>
	  if(dataready){
 8000db8:	783b      	ldrb	r3, [r7, #0]
		  if(duty > 10000){
 8000dba:	f242 7110 	movw	r1, #10000	; 0x2710
		  dataready = 0;
 8000dbe:	2200      	movs	r2, #0
	  if(dataready){
 8000dc0:	b1db      	cbz	r3, 8000dfa <main+0xa2>
		  duty += 100;
 8000dc2:	3464      	adds	r4, #100	; 0x64
			  duty = 100;
 8000dc4:	428c      	cmp	r4, r1
 8000dc6:	bf88      	it	hi
 8000dc8:	2464      	movhi	r4, #100	; 0x64
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000dca:	f8c8 4034 	str.w	r4, [r8, #52]	; 0x34
		  T = diff * (16.0 / (16E+3));
 8000dce:	f8d9 6000 	ldr.w	r6, [r9]
		  dataready = 0;
 8000dd2:	703a      	strb	r2, [r7, #0]
		  T = diff * (16.0 / (16E+3));
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	f7ff fcb7 	bl	8000748 <__aeabi_ui2d>
 8000dda:	4652      	mov	r2, sl
 8000ddc:	465b      	mov	r3, fp
 8000dde:	f7ff fa47 	bl	8000270 <__aeabi_dmul>
 8000de2:	f7ff fd2b 	bl	800083c <__aeabi_d2f>
		  printf("diff: %lu ->%lu\r\n", diff, (uint32_t)T);
 8000de6:	ee07 0a90 	vmov	s15, r0
 8000dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dee:	4811      	ldr	r0, [pc, #68]	; (8000e34 <main+0xdc>)
 8000df0:	ee17 2a90 	vmov	r2, s15
 8000df4:	4631      	mov	r1, r6
 8000df6:	f001 fe19 	bl	8002a2c <iprintf>
	  HAL_Delay(10);
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	f000 fa26 	bl	800124c <HAL_Delay>
	  if((HAL_GetTick() - ticks)>=30){
 8000e00:	f000 fa1e 	bl	8001240 <HAL_GetTick>
 8000e04:	1b43      	subs	r3, r0, r5
 8000e06:	2b1d      	cmp	r3, #29
 8000e08:	d9d6      	bls.n	8000db8 <main+0x60>
		  ticks = HAL_GetTick();
 8000e0a:	f000 fa19 	bl	8001240 <HAL_GetTick>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
		  ticks = HAL_GetTick();
 8000e12:	4605      	mov	r5, r0
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <main+0xe0>)
 8000e16:	f000 fbc7 	bl	80015a8 <HAL_GPIO_TogglePin>
 8000e1a:	e7cd      	b.n	8000db8 <main+0x60>
 8000e1c:	f3af 8000 	nop.w
 8000e20:	d2f1a9fc 	.word	0xd2f1a9fc
 8000e24:	3f50624d 	.word	0x3f50624d
 8000e28:	2000008d 	.word	0x2000008d
 8000e2c:	08000c49 	.word	0x08000c49
 8000e30:	20000098 	.word	0x20000098
 8000e34:	08003960 	.word	0x08003960
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	40000400 	.word	0x40000400
 8000e40:	20000090 	.word	0x20000090

08000e44 <Error_Handler>:
 8000e44:	b672      	cpsid	i
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <Error_Handler+0x2>

08000e48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e48:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <HAL_MspInit+0x34>)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	9100      	str	r1, [sp, #0]
 8000e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e56:	645a      	str	r2, [r3, #68]	; 0x44
 8000e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e5a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e5e:	9200      	str	r2, [sp, #0]
 8000e60:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	9101      	str	r1, [sp, #4]
 8000e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	b002      	add	sp, #8
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800

08000e80 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler>
 8000e82:	bf00      	nop

08000e84 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <HardFault_Handler>
 8000e86:	bf00      	nop

08000e88 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <MemManage_Handler>
 8000e8a:	bf00      	nop

08000e8c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <BusFault_Handler>
 8000e8e:	bf00      	nop

08000e90 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler>
 8000e92:	bf00      	nop

08000e94 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <DebugMon_Handler>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <PendSV_Handler>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea0:	f000 b9c2 	b.w	8001228 <HAL_IncTick>

08000ea4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ea4:	4801      	ldr	r0, [pc, #4]	; (8000eac <TIM2_IRQHandler+0x8>)
 8000ea6:	f000 bf01 	b.w	8001cac <HAL_TIM_IRQHandler>
 8000eaa:	bf00      	nop
 8000eac:	20000098 	.word	0x20000098

08000eb0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	1e16      	subs	r6, r2, #0
 8000eb4:	dd07      	ble.n	8000ec6 <_read+0x16>
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8000eba:	f3af 8000 	nop.w
 8000ebe:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	42a5      	cmp	r5, r4
 8000ec4:	d1f9      	bne.n	8000eba <_read+0xa>
  }

  return len;
}
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	bd70      	pop	{r4, r5, r6, pc}
 8000eca:	bf00      	nop

08000ecc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ecc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	1e16      	subs	r6, r2, #0
 8000ed0:	dd07      	ble.n	8000ee2 <_write+0x16>
 8000ed2:	460c      	mov	r4, r1
 8000ed4:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8000ed6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000eda:	f7ff fee5 	bl	8000ca8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	42a5      	cmp	r5, r4
 8000ee0:	d1f9      	bne.n	8000ed6 <_write+0xa>
  }
  return len;
}
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	bd70      	pop	{r4, r5, r6, pc}
 8000ee6:	bf00      	nop

08000ee8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef4:	604b      	str	r3, [r1, #4]
  return 0;
}
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000efc:	2001      	movs	r0, #1
 8000efe:	4770      	bx	lr

08000f00 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000f00:	2000      	movs	r0, #0
 8000f02:	4770      	bx	lr

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f06:	4c0c      	ldr	r4, [pc, #48]	; (8000f38 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <_sbrk+0x38>)
 8000f0a:	490d      	ldr	r1, [pc, #52]	; (8000f40 <_sbrk+0x3c>)
  if (NULL == __sbrk_heap_end)
 8000f0c:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0e:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8000f10:	b12a      	cbz	r2, 8000f1e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4410      	add	r0, r2
 8000f14:	4288      	cmp	r0, r1
 8000f16:	d807      	bhi.n	8000f28 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000f18:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000f1e:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <_sbrk+0x40>)
 8000f20:	6022      	str	r2, [r4, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000f22:	4410      	add	r0, r2
 8000f24:	4288      	cmp	r0, r1
 8000f26:	d9f7      	bls.n	8000f18 <_sbrk+0x14>
    errno = ENOMEM;
 8000f28:	f001 fd4e 	bl	80029c8 <__errno>
 8000f2c:	230c      	movs	r3, #12
    return (void *)-1;
 8000f2e:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8000f32:	6003      	str	r3, [r0, #0]
}
 8000f34:	4610      	mov	r0, r2
 8000f36:	bd10      	pop	{r4, pc}
 8000f38:	20000094 	.word	0x20000094
 8000f3c:	20020000 	.word	0x20020000
 8000f40:	00000400 	.word	0x00000400
 8000f44:	20000160 	.word	0x20000160

08000f48 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4a03      	ldr	r2, [pc, #12]	; (8000f58 <SystemInit+0x10>)
 8000f4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000f4e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f52:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f5c:	b510      	push	{r4, lr}
  TIM_IC_InitTypeDef sConfigIC = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f5e:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <MX_TIM2_Init+0x9c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f60:	2300      	movs	r3, #0
{
 8000f62:	b08a      	sub	sp, #40	; 0x28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f64:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000f68:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	e9cd 3300 	strd	r3, r3, [sp]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f70:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8000f74:	e9cd 3308 	strd	r3, r3, [sp, #32]
  htim2.Init.Prescaler = 16 - 1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f78:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4294967295;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7a:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7c:	6183      	str	r3, [r0, #24]
  htim2.Init.Prescaler = 16 - 1;
 8000f7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f82:	230f      	movs	r3, #15
 8000f84:	e9c0 2300 	strd	r2, r3, [r0]
  htim2.Init.Period = 4294967295;
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8c:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f8e:	f001 f937 	bl	8002200 <HAL_TIM_Base_Init>
 8000f92:	bb08      	cbnz	r0, 8000fd8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f98:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <MX_TIM2_Init+0x9c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f9c:	a902      	add	r1, sp, #8
 8000f9e:	f000 ff43 	bl	8001e28 <HAL_TIM_ConfigClockSource>
 8000fa2:	bb30      	cbnz	r0, 8000ff2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000fa4:	4814      	ldr	r0, [pc, #80]	; (8000ff8 <MX_TIM2_Init+0x9c>)
 8000fa6:	f001 f995 	bl	80022d4 <HAL_TIM_IC_Init>
 8000faa:	b9f8      	cbnz	r0, 8000fec <MX_TIM2_Init+0x90>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fac:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fae:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <MX_TIM2_Init+0x9c>)
 8000fb0:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb6:	f001 facf 	bl	8002558 <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	b9a0      	cbnz	r0, 8000fe6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fbc:	2200      	movs	r2, #0
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fbe:	2401      	movs	r4, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
  sConfigIC.ICFilter = 4;
 8000fc0:	2304      	movs	r3, #4
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fc2:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <MX_TIM2_Init+0x9c>)
 8000fc4:	a906      	add	r1, sp, #24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fc6:	e9cd 2406 	strd	r2, r4, [sp, #24]
  sConfigIC.ICFilter = 4;
 8000fca:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fce:	f001 fa29 	bl	8002424 <HAL_TIM_IC_ConfigChannel>
 8000fd2:	b920      	cbnz	r0, 8000fde <MX_TIM2_Init+0x82>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fd4:	b00a      	add	sp, #40	; 0x28
 8000fd6:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000fd8:	f7ff ff34 	bl	8000e44 <Error_Handler>
 8000fdc:	e7da      	b.n	8000f94 <MX_TIM2_Init+0x38>
    Error_Handler();
 8000fde:	f7ff ff31 	bl	8000e44 <Error_Handler>
}
 8000fe2:	b00a      	add	sp, #40	; 0x28
 8000fe4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000fe6:	f7ff ff2d 	bl	8000e44 <Error_Handler>
 8000fea:	e7e7      	b.n	8000fbc <MX_TIM2_Init+0x60>
    Error_Handler();
 8000fec:	f7ff ff2a 	bl	8000e44 <Error_Handler>
 8000ff0:	e7dc      	b.n	8000fac <MX_TIM2_Init+0x50>
    Error_Handler();
 8000ff2:	f7ff ff27 	bl	8000e44 <Error_Handler>
 8000ff6:	e7d5      	b.n	8000fa4 <MX_TIM2_Init+0x48>
 8000ff8:	20000098 	.word	0x20000098

08000ffc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ffc:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ffe:	2400      	movs	r4, #0
{
 8001000:	b097      	sub	sp, #92	; 0x5c
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001002:	2520      	movs	r5, #32
 8001004:	462a      	mov	r2, r5
 8001006:	4621      	mov	r1, r4
 8001008:	a80e      	add	r0, sp, #56	; 0x38
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800100a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800100e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001012:	9407      	str	r4, [sp, #28]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001014:	f001 fd02 	bl	8002a1c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800101c:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8001020:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001024:	4e2b      	ldr	r6, [pc, #172]	; (80010d4 <MX_TIM3_Init+0xd8>)
 8001026:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6433      	str	r3, [r6, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800102e:	6c33      	ldr	r3, [r6, #64]	; 0x40
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 32 - LL_TIM_IC_FILTER_FDIV1_N2;
 8001030:	f8ad 500c 	strh.w	r5, [sp, #12]
 8001034:	f003 0302 	and.w	r3, r3, #2
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 10000 - LL_TIM_IC_FILTER_FDIV1_N2;
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001038:	4d27      	ldr	r5, [pc, #156]	; (80010d8 <MX_TIM3_Init+0xdc>)
 800103a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800103c:	9b02      	ldr	r3, [sp, #8]
  TIM_InitStruct.Autoreload = 10000 - LL_TIM_IC_FILTER_FDIV1_N2;
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <MX_TIM3_Init+0xe0>)
 8001040:	9305      	str	r3, [sp, #20]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001042:	a903      	add	r1, sp, #12
 8001044:	4628      	mov	r0, r5
 8001046:	f001 fb73 	bl	8002730 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800104a:	682b      	ldr	r3, [r5, #0]
 800104c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001050:	602b      	str	r3, [r5, #0]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001052:	68ab      	ldr	r3, [r5, #8]
 8001054:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001058:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800105c:	f023 0307 	bic.w	r3, r3, #7
 8001060:	60ab      	str	r3, [r5, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001062:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8001066:	f043 0308 	orr.w	r3, r3, #8
 800106a:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 800106e:	2370      	movs	r3, #112	; 0x70
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
  TIM_OC_InitStruct.CompareValue = 1000;
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001070:	aa0e      	add	r2, sp, #56	; 0x38
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM2;
 8001072:	930e      	str	r3, [sp, #56]	; 0x38
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001074:	2101      	movs	r1, #1
  TIM_OC_InitStruct.CompareValue = 1000;
 8001076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800107a:	4628      	mov	r0, r5
  TIM_OC_InitStruct.CompareValue = 1000;
 800107c:	9311      	str	r3, [sp, #68]	; 0x44
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800107e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001082:	9412      	str	r4, [sp, #72]	; 0x48
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001084:	f001 fbb0 	bl	80027e8 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001088:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800108c:	f023 0304 	bic.w	r3, r3, #4
 8001090:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001094:	686b      	ldr	r3, [r5, #4]
 8001096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800109a:	606b      	str	r3, [r5, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800109c:	68ab      	ldr	r3, [r5, #8]
 800109e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010a2:	60ab      	str	r3, [r5, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010a4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6333      	str	r3, [r6, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010ac:	6b33      	ldr	r3, [r6, #48]	; 0x30
  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80010ae:	2040      	movs	r0, #64	; 0x40
 80010b0:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80010b4:	2202      	movs	r2, #2
 80010b6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80010b8:	9008      	str	r0, [sp, #32]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	a908      	add	r1, sp, #32
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <MX_TIM3_Init+0xe4>)
  (void)tmpreg;
 80010be:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80010c0:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010c2:	e9cd 2409 	strd	r2, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010c6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f001 fa8b 	bl	80025e4 <LL_GPIO_Init>

}
 80010ce:	b017      	add	sp, #92	; 0x5c
 80010d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40000400 	.word	0x40000400
 80010dc:	fff02710 	.word	0xfff02710
 80010e0:	40020000 	.word	0x40020000

080010e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010e4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(tim_baseHandle->Instance==TIM2)
 80010e6:	6803      	ldr	r3, [r0, #0]
{
 80010e8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ea:	2400      	movs	r4, #0
  if(tim_baseHandle->Instance==TIM2)
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80010f4:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80010f8:	9407      	str	r4, [sp, #28]
  if(tim_baseHandle->Instance==TIM2)
 80010fa:	d001      	beq.n	8001100 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80010fc:	b009      	add	sp, #36	; 0x24
 80010fe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001100:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001104:	9401      	str	r4, [sp, #4]
 8001106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	4812      	ldr	r0, [pc, #72]	; (8001154 <HAL_TIM_Base_MspInit+0x70>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110a:	f042 0201 	orr.w	r2, r2, #1
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
 8001110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001112:	f002 0201 	and.w	r2, r2, #1
 8001116:	9201      	str	r2, [sp, #4]
 8001118:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	9402      	str	r4, [sp, #8]
 800111c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800111e:	f042 0201 	orr.w	r2, r2, #1
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800112c:	2220      	movs	r2, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001136:	2301      	movs	r3, #1
 8001138:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	9d02      	ldr	r5, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f000 f910 	bl	8001360 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001140:	4622      	mov	r2, r4
 8001142:	4621      	mov	r1, r4
 8001144:	201c      	movs	r0, #28
 8001146:	f000 f8a5 	bl	8001294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800114a:	201c      	movs	r0, #28
 800114c:	f000 f8e0 	bl	8001310 <HAL_NVIC_EnableIRQ>
}
 8001150:	b009      	add	sp, #36	; 0x24
 8001152:	bd30      	pop	{r4, r5, pc}
 8001154:	40020000 	.word	0x40020000

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001190 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800115e:	490e      	ldr	r1, [pc, #56]	; (8001198 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001174:	4c0b      	ldr	r4, [pc, #44]	; (80011a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001182:	f7ff fee1 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001186:	f001 fc25 	bl	80029d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fde5 	bl	8000d58 <main>
  bx  lr    
 800118e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001190:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800119c:	08003a2c 	.word	0x08003a2c
  ldr r2, =_sbss
 80011a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011a4:	20000160 	.word	0x20000160

080011a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC_IRQHandler>
	...

080011ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_InitTick+0x3c>)
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <HAL_InitTick+0x40>)
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
{
 80011b6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011bc:	fbb0 f0f2 	udiv	r0, r0, r2
 80011c0:	fbb3 f0f0 	udiv	r0, r3, r0
 80011c4:	f000 f8b2 	bl	800132c <HAL_SYSTICK_Config>
 80011c8:	b908      	cbnz	r0, 80011ce <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	2d0f      	cmp	r5, #15
 80011cc:	d901      	bls.n	80011d2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80011ce:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80011d0:	bd38      	pop	{r3, r4, r5, pc}
 80011d2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d4:	4602      	mov	r2, r0
 80011d6:	4629      	mov	r1, r5
 80011d8:	f04f 30ff 	mov.w	r0, #4294967295
 80011dc:	f000 f85a 	bl	8001294 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e0:	4b03      	ldr	r3, [pc, #12]	; (80011f0 <HAL_InitTick+0x44>)
 80011e2:	4620      	mov	r0, r4
 80011e4:	601d      	str	r5, [r3, #0]
}
 80011e6:	bd38      	pop	{r3, r4, r5, pc}
 80011e8:	20000004 	.word	0x20000004
 80011ec:	20000000 	.word	0x20000000
 80011f0:	20000008 	.word	0x20000008

080011f4 <HAL_Init>:
{
 80011f4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_Init+0x30>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011fe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001206:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800120e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f82d 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	200f      	movs	r0, #15
 8001218:	f7ff ffc8 	bl	80011ac <HAL_InitTick>
  HAL_MspInit();
 800121c:	f7ff fe14 	bl	8000e48 <HAL_MspInit>
}
 8001220:	2000      	movs	r0, #0
 8001222:	bd08      	pop	{r3, pc}
 8001224:	40023c00 	.word	0x40023c00

08001228 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001228:	4a03      	ldr	r2, [pc, #12]	; (8001238 <HAL_IncTick+0x10>)
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <HAL_IncTick+0x14>)
 800122c:	6811      	ldr	r1, [r2, #0]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	440b      	add	r3, r1
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	2000014c 	.word	0x2000014c
 800123c:	20000004 	.word	0x20000004

08001240 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001240:	4b01      	ldr	r3, [pc, #4]	; (8001248 <HAL_GetTick+0x8>)
 8001242:	6818      	ldr	r0, [r3, #0]
}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	2000014c 	.word	0x2000014c

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b538      	push	{r3, r4, r5, lr}
 800124e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff fff6 	bl	8001240 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001254:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001256:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001258:	d002      	beq.n	8001260 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <HAL_Delay+0x20>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	1b43      	subs	r3, r0, r5
 8001266:	42a3      	cmp	r3, r4
 8001268:	d3fa      	bcc.n	8001260 <HAL_Delay+0x14>
  {
  }
}
 800126a:	bd38      	pop	{r3, r4, r5, pc}
 800126c:	20000004 	.word	0x20000004

08001270 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4907      	ldr	r1, [pc, #28]	; (8001290 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001272:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001274:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001282:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800128a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_NVIC_SetPriority+0x74>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800129c:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129e:	f1c3 0e07 	rsb	lr, r3, #7
 80012a2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012aa:	bf28      	it	cs
 80012ac:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b0:	f1bc 0f06 	cmp.w	ip, #6
 80012b4:	d91b      	bls.n	80012ee <HAL_NVIC_SetPriority+0x5a>
 80012b6:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 3cff 	mov.w	ip, #4294967295
 80012bc:	fa0c fc03 	lsl.w	ip, ip, r3
 80012c0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 3cff 	mov.w	ip, #4294967295
 80012c8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80012cc:	ea21 010c 	bic.w	r1, r1, ip
 80012d0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80012d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80012d8:	db0c      	blt.n	80012f4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80012de:	0109      	lsls	r1, r1, #4
 80012e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80012e4:	b2c9      	uxtb	r1, r1
 80012e6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80012ee:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f0:	4613      	mov	r3, r2
 80012f2:	e7e7      	b.n	80012c4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_NVIC_SetPriority+0x78>)
 80012f6:	f000 000f 	and.w	r0, r0, #15
 80012fa:	0109      	lsls	r1, r1, #4
 80012fc:	4403      	add	r3, r0
 80012fe:	b2c9      	uxtb	r1, r1
 8001300:	7619      	strb	r1, [r3, #24]
 8001302:	f85d fb04 	ldr.w	pc, [sp], #4
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00
 800130c:	e000ecfc 	.word	0xe000ecfc

08001310 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001310:	2800      	cmp	r0, #0
 8001312:	db08      	blt.n	8001326 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001314:	0941      	lsrs	r1, r0, #5
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <HAL_NVIC_EnableIRQ+0x18>)
 8001318:	f000 001f 	and.w	r0, r0, #31
 800131c:	2301      	movs	r3, #1
 800131e:	fa03 f000 	lsl.w	r0, r3, r0
 8001322:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100

0800132c <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	3801      	subs	r0, #1
 800132e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001332:	d210      	bcs.n	8001356 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001334:	b410      	push	{r4}
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001336:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	4c08      	ldr	r4, [pc, #32]	; (800135c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001342:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001346:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001348:	2107      	movs	r1, #7
  return (0UL);                                                     /* Function successful */
 800134a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800134e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	6119      	str	r1, [r3, #16]
 8001354:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001356:	2001      	movs	r0, #1
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001364:	2200      	movs	r2, #0
 8001366:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001368:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8001598 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136c:	4e83      	ldr	r6, [pc, #524]	; (800157c <HAL_GPIO_Init+0x21c>)
{
 800136e:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001370:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001372:	4689      	mov	r9, r1
 8001374:	e005      	b.n	8001382 <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001376:	3301      	adds	r3, #1
 8001378:	2b10      	cmp	r3, #16
 800137a:	f102 0202 	add.w	r2, r2, #2
 800137e:	f000 8089 	beq.w	8001494 <HAL_GPIO_Init+0x134>
    ioposition = 0x01U << position;
 8001382:	2101      	movs	r1, #1
 8001384:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001386:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 800138a:	43a1      	bics	r1, r4
 800138c:	d1f3      	bne.n	8001376 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001392:	f00c 0103 	and.w	r1, ip, #3
 8001396:	1e4d      	subs	r5, r1, #1
 8001398:	2d01      	cmp	r5, #1
 800139a:	d97e      	bls.n	800149a <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139c:	2903      	cmp	r1, #3
 800139e:	f040 80be 	bne.w	800151e <HAL_GPIO_Init+0x1be>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a2:	4091      	lsls	r1, r2
 80013a4:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 80013a6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013a8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013aa:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ac:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 80013b0:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013b2:	d0e0      	beq.n	8001376 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b4:	2100      	movs	r1, #0
 80013b6:	9103      	str	r1, [sp, #12]
 80013b8:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 80013bc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80013c0:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 80013c4:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 80013c8:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80013cc:	9103      	str	r1, [sp, #12]
 80013ce:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80013d0:	f023 0103 	bic.w	r1, r3, #3
 80013d4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80013d8:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013dc:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80013e0:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e4:	00bf      	lsls	r7, r7, #2
 80013e6:	250f      	movs	r5, #15
 80013e8:	40bd      	lsls	r5, r7
 80013ea:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ee:	4d64      	ldr	r5, [pc, #400]	; (8001580 <HAL_GPIO_Init+0x220>)
 80013f0:	42a8      	cmp	r0, r5
 80013f2:	d024      	beq.n	800143e <HAL_GPIO_Init+0xde>
 80013f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013f8:	42a8      	cmp	r0, r5
 80013fa:	f000 8094 	beq.w	8001526 <HAL_GPIO_Init+0x1c6>
 80013fe:	4d61      	ldr	r5, [pc, #388]	; (8001584 <HAL_GPIO_Init+0x224>)
 8001400:	42a8      	cmp	r0, r5
 8001402:	f000 8097 	beq.w	8001534 <HAL_GPIO_Init+0x1d4>
 8001406:	4d60      	ldr	r5, [pc, #384]	; (8001588 <HAL_GPIO_Init+0x228>)
 8001408:	42a8      	cmp	r0, r5
 800140a:	f000 809a 	beq.w	8001542 <HAL_GPIO_Init+0x1e2>
 800140e:	4d5f      	ldr	r5, [pc, #380]	; (800158c <HAL_GPIO_Init+0x22c>)
 8001410:	42a8      	cmp	r0, r5
 8001412:	f000 809d 	beq.w	8001550 <HAL_GPIO_Init+0x1f0>
 8001416:	4d5e      	ldr	r5, [pc, #376]	; (8001590 <HAL_GPIO_Init+0x230>)
 8001418:	42a8      	cmp	r0, r5
 800141a:	f000 80a0 	beq.w	800155e <HAL_GPIO_Init+0x1fe>
 800141e:	4d5d      	ldr	r5, [pc, #372]	; (8001594 <HAL_GPIO_Init+0x234>)
 8001420:	42a8      	cmp	r0, r5
 8001422:	f000 80a3 	beq.w	800156c <HAL_GPIO_Init+0x20c>
 8001426:	f8df e174 	ldr.w	lr, [pc, #372]	; 800159c <HAL_GPIO_Init+0x23c>
 800142a:	4570      	cmp	r0, lr
 800142c:	bf0c      	ite	eq
 800142e:	f04f 0e07 	moveq.w	lr, #7
 8001432:	f04f 0e08 	movne.w	lr, #8
 8001436:	fa0e f707 	lsl.w	r7, lr, r7
 800143a:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800143e:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8001442:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001444:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001448:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800144c:	bf0c      	ite	eq
 800144e:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001450:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8001454:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8001456:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001458:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 800145c:	bf0c      	ite	eq
 800145e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001460:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8001464:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8001466:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001468:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800146c:	bf0c      	ite	eq
 800146e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001470:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8001474:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001476:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001478:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147c:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001480:	bf0c      	ite	eq
 8001482:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001484:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001488:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800148a:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148c:	f102 0202 	add.w	r2, r2, #2
 8001490:	f47f af77 	bne.w	8001382 <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8001494:	b005      	add	sp, #20
 8001496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149a:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800149e:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014a0:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014a4:	2503      	movs	r5, #3
 80014a6:	fa05 fe02 	lsl.w	lr, r5, r2
 80014aa:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ae:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 80014b2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80014b4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014b6:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ba:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014be:	f3cc 1700 	ubfx	r7, ip, #4, #1
 80014c2:	409f      	lsls	r7, r3
 80014c4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80014c8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80014ca:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014cc:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d0:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80014d4:	4097      	lsls	r7, r2
 80014d6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014da:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80014dc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014de:	fa01 f102 	lsl.w	r1, r1, r2
 80014e2:	f47f af60 	bne.w	80013a6 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 80014e6:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80014ea:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ee:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80014f2:	f8de 7020 	ldr.w	r7, [lr, #32]
 80014f6:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014fc:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001500:	fa07 f708 	lsl.w	r7, r7, r8
 8001504:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001506:	270f      	movs	r7, #15
 8001508:	fa07 f808 	lsl.w	r8, r7, r8
 800150c:	9f00      	ldr	r7, [sp, #0]
 800150e:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001512:	9f01      	ldr	r7, [sp, #4]
 8001514:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8001518:	f8ce 7020 	str.w	r7, [lr, #32]
 800151c:	e743      	b.n	80013a6 <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800151e:	2503      	movs	r5, #3
 8001520:	4095      	lsls	r5, r2
 8001522:	43ed      	mvns	r5, r5
 8001524:	e7d1      	b.n	80014ca <HAL_GPIO_Init+0x16a>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001526:	f04f 0e01 	mov.w	lr, #1
 800152a:	fa0e f707 	lsl.w	r7, lr, r7
 800152e:	ea48 0807 	orr.w	r8, r8, r7
 8001532:	e784      	b.n	800143e <HAL_GPIO_Init+0xde>
 8001534:	f04f 0e02 	mov.w	lr, #2
 8001538:	fa0e f707 	lsl.w	r7, lr, r7
 800153c:	ea48 0807 	orr.w	r8, r8, r7
 8001540:	e77d      	b.n	800143e <HAL_GPIO_Init+0xde>
 8001542:	f04f 0e03 	mov.w	lr, #3
 8001546:	fa0e f707 	lsl.w	r7, lr, r7
 800154a:	ea48 0807 	orr.w	r8, r8, r7
 800154e:	e776      	b.n	800143e <HAL_GPIO_Init+0xde>
 8001550:	f04f 0e04 	mov.w	lr, #4
 8001554:	fa0e f707 	lsl.w	r7, lr, r7
 8001558:	ea48 0807 	orr.w	r8, r8, r7
 800155c:	e76f      	b.n	800143e <HAL_GPIO_Init+0xde>
 800155e:	f04f 0e05 	mov.w	lr, #5
 8001562:	fa0e f707 	lsl.w	r7, lr, r7
 8001566:	ea48 0807 	orr.w	r8, r8, r7
 800156a:	e768      	b.n	800143e <HAL_GPIO_Init+0xde>
 800156c:	f04f 0e06 	mov.w	lr, #6
 8001570:	fa0e f707 	lsl.w	r7, lr, r7
 8001574:	ea48 0807 	orr.w	r8, r8, r7
 8001578:	e761      	b.n	800143e <HAL_GPIO_Init+0xde>
 800157a:	bf00      	nop
 800157c:	40013c00 	.word	0x40013c00
 8001580:	40020000 	.word	0x40020000
 8001584:	40020800 	.word	0x40020800
 8001588:	40020c00 	.word	0x40020c00
 800158c:	40021000 	.word	0x40021000
 8001590:	40021400 	.word	0x40021400
 8001594:	40021800 	.word	0x40021800
 8001598:	40023800 	.word	0x40023800
 800159c:	40021c00 	.word	0x40021c00

080015a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a0:	b902      	cbnz	r2, 80015a4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015a2:	0409      	lsls	r1, r1, #16
 80015a4:	6181      	str	r1, [r0, #24]
  }
}
 80015a6:	4770      	bx	lr

080015a8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015a8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015aa:	ea01 0203 	and.w	r2, r1, r3
 80015ae:	ea21 0103 	bic.w	r1, r1, r3
 80015b2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80015b6:	6181      	str	r1, [r0, #24]
}
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop

080015bc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015bc:	2800      	cmp	r0, #0
 80015be:	f000 81a2 	beq.w	8001906 <HAL_RCC_OscConfig+0x34a>
{
 80015c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c6:	6803      	ldr	r3, [r0, #0]
 80015c8:	07dd      	lsls	r5, r3, #31
{
 80015ca:	b082      	sub	sp, #8
 80015cc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ce:	d52f      	bpl.n	8001630 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015d0:	499e      	ldr	r1, [pc, #632]	; (800184c <HAL_RCC_OscConfig+0x290>)
 80015d2:	688a      	ldr	r2, [r1, #8]
 80015d4:	f002 020c 	and.w	r2, r2, #12
 80015d8:	2a04      	cmp	r2, #4
 80015da:	f000 80ed 	beq.w	80017b8 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015de:	688a      	ldr	r2, [r1, #8]
 80015e0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e4:	2a08      	cmp	r2, #8
 80015e6:	f000 80e3 	beq.w	80017b0 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ea:	6863      	ldr	r3, [r4, #4]
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f0:	f000 80ec 	beq.w	80017cc <HAL_RCC_OscConfig+0x210>
 80015f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015f8:	f000 8175 	beq.w	80018e6 <HAL_RCC_OscConfig+0x32a>
 80015fc:	4d93      	ldr	r5, [pc, #588]	; (800184c <HAL_RCC_OscConfig+0x290>)
 80015fe:	682a      	ldr	r2, [r5, #0]
 8001600:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001604:	602a      	str	r2, [r5, #0]
 8001606:	682a      	ldr	r2, [r5, #0]
 8001608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800160c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 80e1 	bne.w	80017d6 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fe14 	bl	8001240 <HAL_GetTick>
 8001618:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	e005      	b.n	8001628 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fe10 	bl	8001240 <HAL_GetTick>
 8001620:	1b80      	subs	r0, r0, r6
 8001622:	2864      	cmp	r0, #100	; 0x64
 8001624:	f200 8101 	bhi.w	800182a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001628:	682b      	ldr	r3, [r5, #0]
 800162a:	039b      	lsls	r3, r3, #14
 800162c:	d4f6      	bmi.n	800161c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162e:	6823      	ldr	r3, [r4, #0]
 8001630:	079f      	lsls	r7, r3, #30
 8001632:	d528      	bpl.n	8001686 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001634:	4a85      	ldr	r2, [pc, #532]	; (800184c <HAL_RCC_OscConfig+0x290>)
 8001636:	6891      	ldr	r1, [r2, #8]
 8001638:	f011 0f0c 	tst.w	r1, #12
 800163c:	f000 8090 	beq.w	8001760 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001640:	6891      	ldr	r1, [r2, #8]
 8001642:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001646:	2908      	cmp	r1, #8
 8001648:	f000 8086 	beq.w	8001758 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800164c:	68e3      	ldr	r3, [r4, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 810e 	beq.w	8001870 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001654:	4b7e      	ldr	r3, [pc, #504]	; (8001850 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	4e7d      	ldr	r6, [pc, #500]	; (800184c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800165c:	f7ff fdf0 	bl	8001240 <HAL_GetTick>
 8001660:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001662:	e005      	b.n	8001670 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001664:	f7ff fdec 	bl	8001240 <HAL_GetTick>
 8001668:	1b40      	subs	r0, r0, r5
 800166a:	2802      	cmp	r0, #2
 800166c:	f200 80dd 	bhi.w	800182a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001670:	6833      	ldr	r3, [r6, #0]
 8001672:	0798      	lsls	r0, r3, #30
 8001674:	d5f6      	bpl.n	8001664 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001676:	6833      	ldr	r3, [r6, #0]
 8001678:	6922      	ldr	r2, [r4, #16]
 800167a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800167e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001682:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001684:	6823      	ldr	r3, [r4, #0]
 8001686:	071a      	lsls	r2, r3, #28
 8001688:	d451      	bmi.n	800172e <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168a:	0758      	lsls	r0, r3, #29
 800168c:	d52f      	bpl.n	80016ee <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168e:	4a6f      	ldr	r2, [pc, #444]	; (800184c <HAL_RCC_OscConfig+0x290>)
 8001690:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001692:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001696:	d07f      	beq.n	8001798 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8001698:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169a:	4e6e      	ldr	r6, [pc, #440]	; (8001854 <HAL_RCC_OscConfig+0x298>)
 800169c:	6833      	ldr	r3, [r6, #0]
 800169e:	05d9      	lsls	r1, r3, #23
 80016a0:	f140 80b3 	bpl.w	800180a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a4:	68a3      	ldr	r3, [r4, #8]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	f000 80c3 	beq.w	8001832 <HAL_RCC_OscConfig+0x276>
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	f000 812c 	beq.w	800190a <HAL_RCC_OscConfig+0x34e>
 80016b2:	4e66      	ldr	r6, [pc, #408]	; (800184c <HAL_RCC_OscConfig+0x290>)
 80016b4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	6732      	str	r2, [r6, #112]	; 0x70
 80016bc:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80016be:	f022 0204 	bic.w	r2, r2, #4
 80016c2:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f040 80b9 	bne.w	800183c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ca:	f7ff fdb9 	bl	8001240 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016d2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d4:	e005      	b.n	80016e2 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016d6:	f7ff fdb3 	bl	8001240 <HAL_GetTick>
 80016da:	1bc0      	subs	r0, r0, r7
 80016dc:	4540      	cmp	r0, r8
 80016de:	f200 80a4 	bhi.w	800182a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80016e4:	0798      	lsls	r0, r3, #30
 80016e6:	d4f6      	bmi.n	80016d6 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016e8:	2d00      	cmp	r5, #0
 80016ea:	f040 8106 	bne.w	80018fa <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ee:	69a0      	ldr	r0, [r4, #24]
 80016f0:	b1c8      	cbz	r0, 8001726 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016f2:	4d56      	ldr	r5, [pc, #344]	; (800184c <HAL_RCC_OscConfig+0x290>)
 80016f4:	68ab      	ldr	r3, [r5, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	f000 80c9 	beq.w	8001892 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001700:	4b53      	ldr	r3, [pc, #332]	; (8001850 <HAL_RCC_OscConfig+0x294>)
 8001702:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001704:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001706:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001708:	f000 8109 	beq.w	800191e <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fd98 	bl	8001240 <HAL_GetTick>
 8001710:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	e005      	b.n	8001720 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fd94 	bl	8001240 <HAL_GetTick>
 8001718:	1b00      	subs	r0, r0, r4
 800171a:	2802      	cmp	r0, #2
 800171c:	f200 8085 	bhi.w	800182a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	019b      	lsls	r3, r3, #6
 8001724:	d4f6      	bmi.n	8001714 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001726:	2000      	movs	r0, #0
}
 8001728:	b002      	add	sp, #8
 800172a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800172e:	6963      	ldr	r3, [r4, #20]
 8001730:	b30b      	cbz	r3, 8001776 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8001732:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001734:	4e45      	ldr	r6, [pc, #276]	; (800184c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8001736:	2201      	movs	r2, #1
 8001738:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800173c:	f7ff fd80 	bl	8001240 <HAL_GetTick>
 8001740:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001742:	e004      	b.n	800174e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001744:	f7ff fd7c 	bl	8001240 <HAL_GetTick>
 8001748:	1b40      	subs	r0, r0, r5
 800174a:	2802      	cmp	r0, #2
 800174c:	d86d      	bhi.n	800182a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001750:	079b      	lsls	r3, r3, #30
 8001752:	d5f7      	bpl.n	8001744 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	e798      	b.n	800168a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001758:	6852      	ldr	r2, [r2, #4]
 800175a:	0256      	lsls	r6, r2, #9
 800175c:	f53f af76 	bmi.w	800164c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001760:	4a3a      	ldr	r2, [pc, #232]	; (800184c <HAL_RCC_OscConfig+0x290>)
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	0795      	lsls	r5, r2, #30
 8001766:	d544      	bpl.n	80017f2 <HAL_RCC_OscConfig+0x236>
 8001768:	68e2      	ldr	r2, [r4, #12]
 800176a:	2a01      	cmp	r2, #1
 800176c:	d041      	beq.n	80017f2 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 800176e:	2001      	movs	r0, #1
}
 8001770:	b002      	add	sp, #8
 8001772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001776:	4a36      	ldr	r2, [pc, #216]	; (8001850 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001778:	4e34      	ldr	r6, [pc, #208]	; (800184c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 800177a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800177e:	f7ff fd5f 	bl	8001240 <HAL_GetTick>
 8001782:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	e004      	b.n	8001790 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001786:	f7ff fd5b 	bl	8001240 <HAL_GetTick>
 800178a:	1b40      	subs	r0, r0, r5
 800178c:	2802      	cmp	r0, #2
 800178e:	d84c      	bhi.n	800182a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001790:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001792:	079f      	lsls	r7, r3, #30
 8001794:	d4f7      	bmi.n	8001786 <HAL_RCC_OscConfig+0x1ca>
 8001796:	e7dd      	b.n	8001754 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017ac:	2501      	movs	r5, #1
 80017ae:	e774      	b.n	800169a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b0:	684a      	ldr	r2, [r1, #4]
 80017b2:	0250      	lsls	r0, r2, #9
 80017b4:	f57f af19 	bpl.w	80015ea <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b8:	4a24      	ldr	r2, [pc, #144]	; (800184c <HAL_RCC_OscConfig+0x290>)
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	0391      	lsls	r1, r2, #14
 80017be:	f57f af37 	bpl.w	8001630 <HAL_RCC_OscConfig+0x74>
 80017c2:	6862      	ldr	r2, [r4, #4]
 80017c4:	2a00      	cmp	r2, #0
 80017c6:	f47f af33 	bne.w	8001630 <HAL_RCC_OscConfig+0x74>
 80017ca:	e7d0      	b.n	800176e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017cc:	4a1f      	ldr	r2, [pc, #124]	; (800184c <HAL_RCC_OscConfig+0x290>)
 80017ce:	6813      	ldr	r3, [r2, #0]
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80017d6:	f7ff fd33 	bl	8001240 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4e1c      	ldr	r6, [pc, #112]	; (800184c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80017dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	e004      	b.n	80017ea <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fd2e 	bl	8001240 <HAL_GetTick>
 80017e4:	1b40      	subs	r0, r0, r5
 80017e6:	2864      	cmp	r0, #100	; 0x64
 80017e8:	d81f      	bhi.n	800182a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	6833      	ldr	r3, [r6, #0]
 80017ec:	039a      	lsls	r2, r3, #14
 80017ee:	d5f7      	bpl.n	80017e0 <HAL_RCC_OscConfig+0x224>
 80017f0:	e71d      	b.n	800162e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	4916      	ldr	r1, [pc, #88]	; (800184c <HAL_RCC_OscConfig+0x290>)
 80017f4:	6920      	ldr	r0, [r4, #16]
 80017f6:	680a      	ldr	r2, [r1, #0]
 80017f8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80017fc:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001800:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001802:	071a      	lsls	r2, r3, #28
 8001804:	f57f af41 	bpl.w	800168a <HAL_RCC_OscConfig+0xce>
 8001808:	e791      	b.n	800172e <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800180a:	6833      	ldr	r3, [r6, #0]
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001812:	f7ff fd15 	bl	8001240 <HAL_GetTick>
 8001816:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	6833      	ldr	r3, [r6, #0]
 800181a:	05da      	lsls	r2, r3, #23
 800181c:	f53f af42 	bmi.w	80016a4 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001820:	f7ff fd0e 	bl	8001240 <HAL_GetTick>
 8001824:	1bc0      	subs	r0, r0, r7
 8001826:	2802      	cmp	r0, #2
 8001828:	d9f6      	bls.n	8001818 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800182a:	2003      	movs	r0, #3
}
 800182c:	b002      	add	sp, #8
 800182e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001832:	4a06      	ldr	r2, [pc, #24]	; (800184c <HAL_RCC_OscConfig+0x290>)
 8001834:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800183c:	f7ff fd00 	bl	8001240 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001840:	4f02      	ldr	r7, [pc, #8]	; (800184c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8001842:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001844:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001848:	e00b      	b.n	8001862 <HAL_RCC_OscConfig+0x2a6>
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	42470000 	.word	0x42470000
 8001854:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff fcf2 	bl	8001240 <HAL_GetTick>
 800185c:	1b80      	subs	r0, r0, r6
 800185e:	4540      	cmp	r0, r8
 8001860:	d8e3      	bhi.n	800182a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001864:	079b      	lsls	r3, r3, #30
 8001866:	d5f7      	bpl.n	8001858 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8001868:	2d00      	cmp	r5, #0
 800186a:	f43f af40 	beq.w	80016ee <HAL_RCC_OscConfig+0x132>
 800186e:	e044      	b.n	80018fa <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8001870:	4a42      	ldr	r2, [pc, #264]	; (800197c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	4e43      	ldr	r6, [pc, #268]	; (8001980 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8001874:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001876:	f7ff fce3 	bl	8001240 <HAL_GetTick>
 800187a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187c:	e004      	b.n	8001888 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800187e:	f7ff fcdf 	bl	8001240 <HAL_GetTick>
 8001882:	1b40      	subs	r0, r0, r5
 8001884:	2802      	cmp	r0, #2
 8001886:	d8d0      	bhi.n	800182a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001888:	6833      	ldr	r3, [r6, #0]
 800188a:	0799      	lsls	r1, r3, #30
 800188c:	d4f7      	bmi.n	800187e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	e6f9      	b.n	8001686 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001892:	2801      	cmp	r0, #1
 8001894:	f43f af48 	beq.w	8001728 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8001898:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018a0:	4291      	cmp	r1, r2
 80018a2:	f47f af64 	bne.w	800176e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a8:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ac:	4291      	cmp	r1, r2
 80018ae:	f47f af5e 	bne.w	800176e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80018b4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80018b8:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ba:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80018be:	f47f af56 	bne.w	800176e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018c4:	0852      	lsrs	r2, r2, #1
 80018c6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80018ca:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018cc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80018d0:	f47f af4d 	bne.w	800176e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018d6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018da:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 80018de:	bf14      	ite	ne
 80018e0:	2001      	movne	r0, #1
 80018e2:	2000      	moveq	r0, #0
 80018e4:	e720      	b.n	8001728 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e6:	4b26      	ldr	r3, [pc, #152]	; (8001980 <HAL_RCC_OscConfig+0x3c4>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018f6:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f8:	e76d      	b.n	80017d6 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fa:	4a21      	ldr	r2, [pc, #132]	; (8001980 <HAL_RCC_OscConfig+0x3c4>)
 80018fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001902:	6413      	str	r3, [r2, #64]	; 0x40
 8001904:	e6f3      	b.n	80016ee <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8001906:	2001      	movs	r0, #1
}
 8001908:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_RCC_OscConfig+0x3c4>)
 800190c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800190e:	f042 0204 	orr.w	r2, r2, #4
 8001912:	671a      	str	r2, [r3, #112]	; 0x70
 8001914:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800191c:	e78e      	b.n	800183c <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 800191e:	f7ff fc8f 	bl	8001240 <HAL_GetTick>
 8001922:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001924:	e005      	b.n	8001932 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001926:	f7ff fc8b 	bl	8001240 <HAL_GetTick>
 800192a:	1b80      	subs	r0, r0, r6
 800192c:	2802      	cmp	r0, #2
 800192e:	f63f af7c 	bhi.w	800182a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001932:	682b      	ldr	r3, [r5, #0]
 8001934:	0199      	lsls	r1, r3, #6
 8001936:	d4f6      	bmi.n	8001926 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001938:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800193c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800193e:	430b      	orrs	r3, r1
 8001940:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001944:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8001948:	0852      	lsrs	r2, r2, #1
 800194a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800194e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001950:	490a      	ldr	r1, [pc, #40]	; (800197c <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001952:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001956:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001958:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800195a:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800195c:	f7ff fc70 	bl	8001240 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001960:	4d07      	ldr	r5, [pc, #28]	; (8001980 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8001962:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001964:	e005      	b.n	8001972 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001966:	f7ff fc6b 	bl	8001240 <HAL_GetTick>
 800196a:	1b00      	subs	r0, r0, r4
 800196c:	2802      	cmp	r0, #2
 800196e:	f63f af5c 	bhi.w	800182a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001972:	682b      	ldr	r3, [r5, #0]
 8001974:	019a      	lsls	r2, r3, #6
 8001976:	d5f6      	bpl.n	8001966 <HAL_RCC_OscConfig+0x3aa>
 8001978:	e6d5      	b.n	8001726 <HAL_RCC_OscConfig+0x16a>
 800197a:	bf00      	nop
 800197c:	42470000 	.word	0x42470000
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001984:	4916      	ldr	r1, [pc, #88]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8001986:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001988:	688b      	ldr	r3, [r1, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d01b      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x46>
 8001992:	2b08      	cmp	r3, #8
 8001994:	d117      	bne.n	80019c6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001996:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001998:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800199c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a4:	d113      	bne.n	80019ce <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a6:	480f      	ldr	r0, [pc, #60]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x60>)
 80019a8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019ac:	fba1 0100 	umull	r0, r1, r1, r0
 80019b0:	f7fe ff94 	bl	80008dc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019bc:	3301      	adds	r3, #1
 80019be:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80019c0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019c4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80019c6:	4807      	ldr	r0, [pc, #28]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80019c8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ca:	4807      	ldr	r0, [pc, #28]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80019cc:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ce:	4806      	ldr	r0, [pc, #24]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x64>)
 80019d0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019d4:	2300      	movs	r3, #0
 80019d6:	fba1 0100 	umull	r0, r1, r1, r0
 80019da:	f7fe ff7f 	bl	80008dc <__aeabi_uldivmod>
 80019de:	e7e9      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x30>
 80019e0:	40023800 	.word	0x40023800
 80019e4:	00f42400 	.word	0x00f42400
 80019e8:	017d7840 	.word	0x017d7840

080019ec <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80019ec:	2800      	cmp	r0, #0
 80019ee:	f000 8087 	beq.w	8001b00 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f2:	4a48      	ldr	r2, [pc, #288]	; (8001b14 <HAL_RCC_ClockConfig+0x128>)
 80019f4:	6813      	ldr	r3, [r2, #0]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	428b      	cmp	r3, r1
{
 80019fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a00:	460d      	mov	r5, r1
 8001a02:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a04:	d209      	bcs.n	8001a1a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	b2cb      	uxtb	r3, r1
 8001a08:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	6813      	ldr	r3, [r2, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	428b      	cmp	r3, r1
 8001a12:	d002      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001a14:	2001      	movs	r0, #1
}
 8001a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	0798      	lsls	r0, r3, #30
 8001a1e:	d514      	bpl.n	8001a4a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	0759      	lsls	r1, r3, #29
 8001a22:	d504      	bpl.n	8001a2e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a24:	493c      	ldr	r1, [pc, #240]	; (8001b18 <HAL_RCC_ClockConfig+0x12c>)
 8001a26:	688a      	ldr	r2, [r1, #8]
 8001a28:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001a2c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2e:	071a      	lsls	r2, r3, #28
 8001a30:	d504      	bpl.n	8001a3c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a32:	4939      	ldr	r1, [pc, #228]	; (8001b18 <HAL_RCC_ClockConfig+0x12c>)
 8001a34:	688a      	ldr	r2, [r1, #8]
 8001a36:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001a3a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3c:	4936      	ldr	r1, [pc, #216]	; (8001b18 <HAL_RCC_ClockConfig+0x12c>)
 8001a3e:	68a0      	ldr	r0, [r4, #8]
 8001a40:	688a      	ldr	r2, [r1, #8]
 8001a42:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a46:	4302      	orrs	r2, r0
 8001a48:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4a:	07df      	lsls	r7, r3, #31
 8001a4c:	d521      	bpl.n	8001a92 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	6862      	ldr	r2, [r4, #4]
 8001a50:	2a01      	cmp	r2, #1
 8001a52:	d057      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a54:	1e93      	subs	r3, r2, #2
 8001a56:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a58:	4b2f      	ldr	r3, [pc, #188]	; (8001b18 <HAL_RCC_ClockConfig+0x12c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a5c:	d94d      	bls.n	8001afa <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5e:	0799      	lsls	r1, r3, #30
 8001a60:	d5d8      	bpl.n	8001a14 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a62:	4e2d      	ldr	r6, [pc, #180]	; (8001b18 <HAL_RCC_ClockConfig+0x12c>)
 8001a64:	68b3      	ldr	r3, [r6, #8]
 8001a66:	f023 0303 	bic.w	r3, r3, #3
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001a6e:	f7ff fbe7 	bl	8001240 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a72:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001a76:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a78:	e004      	b.n	8001a84 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7a:	f7ff fbe1 	bl	8001240 <HAL_GetTick>
 8001a7e:	1bc0      	subs	r0, r0, r7
 8001a80:	4540      	cmp	r0, r8
 8001a82:	d844      	bhi.n	8001b0e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a84:	68b3      	ldr	r3, [r6, #8]
 8001a86:	6862      	ldr	r2, [r4, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a90:	d1f3      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a92:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <HAL_RCC_ClockConfig+0x128>)
 8001a94:	6813      	ldr	r3, [r2, #0]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	42ab      	cmp	r3, r5
 8001a9c:	d906      	bls.n	8001aac <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	b2eb      	uxtb	r3, r5
 8001aa0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	6813      	ldr	r3, [r2, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	42ab      	cmp	r3, r5
 8001aaa:	d1b3      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	075a      	lsls	r2, r3, #29
 8001ab0:	d506      	bpl.n	8001ac0 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab2:	4919      	ldr	r1, [pc, #100]	; (8001b18 <HAL_RCC_ClockConfig+0x12c>)
 8001ab4:	68e0      	ldr	r0, [r4, #12]
 8001ab6:	688a      	ldr	r2, [r1, #8]
 8001ab8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001abc:	4302      	orrs	r2, r0
 8001abe:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac0:	071b      	lsls	r3, r3, #28
 8001ac2:	d507      	bpl.n	8001ad4 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ac4:	4a14      	ldr	r2, [pc, #80]	; (8001b18 <HAL_RCC_ClockConfig+0x12c>)
 8001ac6:	6921      	ldr	r1, [r4, #16]
 8001ac8:	6893      	ldr	r3, [r2, #8]
 8001aca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001ace:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001ad2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ad4:	f7ff ff56 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001ad8:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_RCC_ClockConfig+0x12c>)
 8001ada:	4c10      	ldr	r4, [pc, #64]	; (8001b1c <HAL_RCC_ClockConfig+0x130>)
 8001adc:	6892      	ldr	r2, [r2, #8]
 8001ade:	4910      	ldr	r1, [pc, #64]	; (8001b20 <HAL_RCC_ClockConfig+0x134>)
 8001ae0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8001ae8:	480e      	ldr	r0, [pc, #56]	; (8001b24 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aea:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8001aec:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aee:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8001af0:	f7ff fb5c 	bl	80011ac <HAL_InitTick>
  return HAL_OK;
 8001af4:	2000      	movs	r0, #0
}
 8001af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afa:	0198      	lsls	r0, r3, #6
 8001afc:	d4b1      	bmi.n	8001a62 <HAL_RCC_ClockConfig+0x76>
 8001afe:	e789      	b.n	8001a14 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001b00:	2001      	movs	r0, #1
}
 8001b02:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <HAL_RCC_ClockConfig+0x12c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	039e      	lsls	r6, r3, #14
 8001b0a:	d4aa      	bmi.n	8001a62 <HAL_RCC_ClockConfig+0x76>
 8001b0c:	e782      	b.n	8001a14 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8001b0e:	2003      	movs	r0, #3
 8001b10:	e781      	b.n	8001a16 <HAL_RCC_ClockConfig+0x2a>
 8001b12:	bf00      	nop
 8001b14:	40023c00 	.word	0x40023c00
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	08003974 	.word	0x08003974
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000008 	.word	0x20000008

08001b28 <HAL_TIM_IC_MspInit>:
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop

08001b2c <HAL_TIM_PeriodElapsedCallback>:
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop

08001b30 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop

08001b34 <HAL_TIM_OC_DelayElapsedCallback>:
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <HAL_TIM_IC_CaptureCallback>:
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop

08001b3c <HAL_TIM_IC_CaptureHalfCpltCallback>:
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop

08001b40 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop

08001b44 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop

08001b48 <HAL_TIM_TriggerCallback>:
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop

08001b4c <HAL_TIM_TriggerHalfCpltCallback>:
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <HAL_TIM_ErrorCallback>:
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop

08001b54 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b54:	4684      	mov	ip, r0
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001b56:	2900      	cmp	r1, #0
 8001b58:	d14e      	bne.n	8001bf8 <HAL_TIM_IC_Start_IT+0xa4>
 8001b5a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001b5e:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001b62:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001b64:	b2d3      	uxtb	r3, r2

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001b66:	2801      	cmp	r0, #1
 8001b68:	d102      	bne.n	8001b70 <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d002      	beq.n	8001b74 <HAL_TIM_IC_Start_IT+0x20>
    }
  }

  /* Return function status */
  return status;
}
 8001b6e:	4770      	bx	lr
  switch (Channel)
 8001b70:	2001      	movs	r0, #1
 8001b72:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b74:	2900      	cmp	r1, #0
 8001b76:	d14e      	bne.n	8001c16 <HAL_TIM_IC_Start_IT+0xc2>
 8001b78:	2202      	movs	r2, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001b7a:	f8dc 3000 	ldr.w	r3, [ip]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b7e:	f88c 203e 	strb.w	r2, [ip, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b82:	f88c 2042 	strb.w	r2, [ip, #66]	; 0x42
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	f042 0202 	orr.w	r2, r2, #2
 8001b8c:	60da      	str	r2, [r3, #12]
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001b8e:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001b90:	2201      	movs	r2, #1
 8001b92:	f001 011f 	and.w	r1, r1, #31
 8001b96:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 8001b9a:	ea20 0001 	bic.w	r0, r0, r1
 8001b9e:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001ba0:	6a18      	ldr	r0, [r3, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba2:	4a41      	ldr	r2, [pc, #260]	; (8001ca8 <HAL_TIM_IC_Start_IT+0x154>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001ba4:	4301      	orrs	r1, r0
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ba6:	4293      	cmp	r3, r2
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001ba8:	6219      	str	r1, [r3, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001baa:	d01a      	beq.n	8001be2 <HAL_TIM_IC_Start_IT+0x8e>
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb0:	d017      	beq.n	8001be2 <HAL_TIM_IC_Start_IT+0x8e>
 8001bb2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_TIM_IC_Start_IT+0x8e>
 8001bba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00f      	beq.n	8001be2 <HAL_TIM_IC_Start_IT+0x8e>
 8001bc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d00b      	beq.n	8001be2 <HAL_TIM_IC_Start_IT+0x8e>
 8001bca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d007      	beq.n	8001be2 <HAL_TIM_IC_Start_IT+0x8e>
 8001bd2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d003      	beq.n	8001be2 <HAL_TIM_IC_Start_IT+0x8e>
 8001bda:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d104      	bne.n	8001bec <HAL_TIM_IC_Start_IT+0x98>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be8:	2a06      	cmp	r2, #6
 8001bea:	d05b      	beq.n	8001ca4 <HAL_TIM_IC_Start_IT+0x150>
      __HAL_TIM_ENABLE(htim);
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f042 0201 	orr.w	r2, r2, #1
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	4770      	bx	lr
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001bf8:	2904      	cmp	r1, #4
 8001bfa:	d04c      	beq.n	8001c96 <HAL_TIM_IC_Start_IT+0x142>
 8001bfc:	2908      	cmp	r1, #8
 8001bfe:	bf0b      	itete	eq
 8001c00:	f890 3040 	ldrbeq.w	r3, [r0, #64]	; 0x40
 8001c04:	f890 3041 	ldrbne.w	r3, [r0, #65]	; 0x41
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001c08:	f890 2044 	ldrbeq.w	r2, [r0, #68]	; 0x44
 8001c0c:	f890 2045 	ldrbne.w	r2, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001c10:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001c12:	b2d3      	uxtb	r3, r2
 8001c14:	e7a7      	b.n	8001b66 <HAL_TIM_IC_Start_IT+0x12>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c16:	2904      	cmp	r1, #4
 8001c18:	d02a      	beq.n	8001c70 <HAL_TIM_IC_Start_IT+0x11c>
 8001c1a:	2908      	cmp	r1, #8
 8001c1c:	d01c      	beq.n	8001c58 <HAL_TIM_IC_Start_IT+0x104>
 8001c1e:	2202      	movs	r2, #2
  switch (Channel)
 8001c20:	1f0b      	subs	r3, r1, #4
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c22:	f88c 2041 	strb.w	r2, [ip, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c26:	f88c 2045 	strb.w	r2, [ip, #69]	; 0x45
  switch (Channel)
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d8a0      	bhi.n	8001b70 <HAL_TIM_IC_Start_IT+0x1c>
 8001c2e:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <HAL_TIM_IC_Start_IT+0xe0>)
 8001c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c34:	08001c7b 	.word	0x08001c7b
 8001c38:	08001b71 	.word	0x08001b71
 8001c3c:	08001b71 	.word	0x08001b71
 8001c40:	08001b71 	.word	0x08001b71
 8001c44:	08001c63 	.word	0x08001c63
 8001c48:	08001b71 	.word	0x08001b71
 8001c4c:	08001b71 	.word	0x08001b71
 8001c50:	08001b71 	.word	0x08001b71
 8001c54:	08001c89 	.word	0x08001c89
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c58:	2302      	movs	r3, #2
 8001c5a:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c5e:	f88c 3044 	strb.w	r3, [ip, #68]	; 0x44
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001c62:	f8dc 3000 	ldr.w	r3, [ip]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	f042 0208 	orr.w	r2, r2, #8
 8001c6c:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8001c6e:	e78e      	b.n	8001b8e <HAL_TIM_IC_Start_IT+0x3a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c70:	2302      	movs	r3, #2
 8001c72:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c76:	f88c 3043 	strb.w	r3, [ip, #67]	; 0x43
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001c7a:	f8dc 3000 	ldr.w	r3, [ip]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	f042 0204 	orr.w	r2, r2, #4
 8001c84:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8001c86:	e782      	b.n	8001b8e <HAL_TIM_IC_Start_IT+0x3a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001c88:	f8dc 3000 	ldr.w	r3, [ip]
 8001c8c:	68da      	ldr	r2, [r3, #12]
 8001c8e:	f042 0210 	orr.w	r2, r2, #16
 8001c92:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8001c94:	e77b      	b.n	8001b8e <HAL_TIM_IC_Start_IT+0x3a>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001c96:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001c9a:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001c9e:	b2d8      	uxtb	r0, r3
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001ca0:	b2d3      	uxtb	r3, r2
 8001ca2:	e760      	b.n	8001b66 <HAL_TIM_IC_Start_IT+0x12>
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	e762      	b.n	8001b6e <HAL_TIM_IC_Start_IT+0x1a>
 8001ca8:	40010000 	.word	0x40010000

08001cac <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cac:	6803      	ldr	r3, [r0, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	0791      	lsls	r1, r2, #30
{
 8001cb2:	b510      	push	{r4, lr}
 8001cb4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cb6:	d503      	bpl.n	8001cc0 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	0792      	lsls	r2, r2, #30
 8001cbc:	f100 808d 	bmi.w	8001dda <HAL_TIM_IRQHandler+0x12e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	0750      	lsls	r0, r2, #29
 8001cc4:	d502      	bpl.n	8001ccc <HAL_TIM_IRQHandler+0x20>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	0751      	lsls	r1, r2, #29
 8001cca:	d471      	bmi.n	8001db0 <HAL_TIM_IRQHandler+0x104>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	0712      	lsls	r2, r2, #28
 8001cd0:	d502      	bpl.n	8001cd8 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	0710      	lsls	r0, r2, #28
 8001cd6:	d457      	bmi.n	8001d88 <HAL_TIM_IRQHandler+0xdc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cd8:	691a      	ldr	r2, [r3, #16]
 8001cda:	06d2      	lsls	r2, r2, #27
 8001cdc:	d502      	bpl.n	8001ce4 <HAL_TIM_IRQHandler+0x38>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	06d0      	lsls	r0, r2, #27
 8001ce2:	d43c      	bmi.n	8001d5e <HAL_TIM_IRQHandler+0xb2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	07d1      	lsls	r1, r2, #31
 8001ce8:	d502      	bpl.n	8001cf0 <HAL_TIM_IRQHandler+0x44>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	07d2      	lsls	r2, r2, #31
 8001cee:	d42d      	bmi.n	8001d4c <HAL_TIM_IRQHandler+0xa0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cf0:	691a      	ldr	r2, [r3, #16]
 8001cf2:	0610      	lsls	r0, r2, #24
 8001cf4:	d502      	bpl.n	8001cfc <HAL_TIM_IRQHandler+0x50>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	0611      	lsls	r1, r2, #24
 8001cfa:	d41e      	bmi.n	8001d3a <HAL_TIM_IRQHandler+0x8e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	0652      	lsls	r2, r2, #25
 8001d00:	d502      	bpl.n	8001d08 <HAL_TIM_IRQHandler+0x5c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	0650      	lsls	r0, r2, #25
 8001d06:	d40f      	bmi.n	8001d28 <HAL_TIM_IRQHandler+0x7c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	0691      	lsls	r1, r2, #26
 8001d0c:	d50b      	bpl.n	8001d26 <HAL_TIM_IRQHandler+0x7a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	0692      	lsls	r2, r2, #26
 8001d12:	d508      	bpl.n	8001d26 <HAL_TIM_IRQHandler+0x7a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d14:	f06f 0120 	mvn.w	r1, #32
      htim->CommutationCallback(htim);
 8001d18:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d1c:	6119      	str	r1, [r3, #16]
      htim->CommutationCallback(htim);
 8001d1e:	4620      	mov	r0, r4
}
 8001d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      htim->CommutationCallback(htim);
 8001d24:	4710      	bx	r2
}
 8001d26:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d2c:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 8001d2e:	4620      	mov	r0, r4
 8001d30:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001d34:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d36:	6823      	ldr	r3, [r4, #0]
 8001d38:	e7e6      	b.n	8001d08 <HAL_TIM_IRQHandler+0x5c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d3e:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 8001d40:	4620      	mov	r0, r4
 8001d42:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8001d46:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d48:	6823      	ldr	r3, [r4, #0]
 8001d4a:	e7d7      	b.n	8001cfc <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d4c:	f06f 0201 	mvn.w	r2, #1
 8001d50:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 8001d52:	4620      	mov	r0, r4
 8001d54:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8001d58:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	e7c8      	b.n	8001cf0 <HAL_TIM_IRQHandler+0x44>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d5e:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d62:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d64:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d66:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001d6e:	d155      	bne.n	8001e1c <HAL_TIM_IRQHandler+0x170>
        htim->OC_DelayElapsedCallback(htim);
 8001d70:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001d74:	4620      	mov	r0, r4
 8001d76:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001d78:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d80:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d82:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d84:	7722      	strb	r2, [r4, #28]
 8001d86:	e7ad      	b.n	8001ce4 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d88:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d8e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d90:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	0799      	lsls	r1, r3, #30
 8001d96:	d13c      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x166>
        htim->OC_DelayElapsedCallback(htim);
 8001d98:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001da0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8001da4:	4620      	mov	r0, r4
 8001da6:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001daa:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dac:	7722      	strb	r2, [r4, #28]
 8001dae:	e793      	b.n	8001cd8 <HAL_TIM_IRQHandler+0x2c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001db0:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db4:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001db6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001db8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001dc0:	d122      	bne.n	8001e08 <HAL_TIM_IRQHandler+0x15c>
        htim->OC_DelayElapsedCallback(htim);
 8001dc2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001dca:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8001dce:	4620      	mov	r0, r4
 8001dd0:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dd4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	7722      	strb	r2, [r4, #28]
 8001dd8:	e778      	b.n	8001ccc <HAL_TIM_IRQHandler+0x20>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001dda:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dde:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001de0:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	079b      	lsls	r3, r3, #30
 8001de8:	d10a      	bne.n	8001e00 <HAL_TIM_IRQHandler+0x154>
          htim->OC_DelayElapsedCallback(htim);
 8001dea:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
 8001dee:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8001df0:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8001df4:	4620      	mov	r0, r4
 8001df6:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dfa:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfc:	7722      	strb	r2, [r4, #28]
 8001dfe:	e75f      	b.n	8001cc0 <HAL_TIM_IRQHandler+0x14>
          htim->IC_CaptureCallback(htim);
 8001e00:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8001e04:	4798      	blx	r3
 8001e06:	e7f7      	b.n	8001df8 <HAL_TIM_IRQHandler+0x14c>
        htim->IC_CaptureCallback(htim);
 8001e08:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	4798      	blx	r3
 8001e10:	e7df      	b.n	8001dd2 <HAL_TIM_IRQHandler+0x126>
        htim->IC_CaptureCallback(htim);
 8001e12:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001e16:	4620      	mov	r0, r4
 8001e18:	4798      	blx	r3
 8001e1a:	e7c5      	b.n	8001da8 <HAL_TIM_IRQHandler+0xfc>
        htim->IC_CaptureCallback(htim);
 8001e1c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001e20:	4620      	mov	r0, r4
 8001e22:	4798      	blx	r3
 8001e24:	e7ac      	b.n	8001d80 <HAL_TIM_IRQHandler+0xd4>
 8001e26:	bf00      	nop

08001e28 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001e28:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d075      	beq.n	8001f1c <HAL_TIM_ConfigClockSource+0xf4>
 8001e30:	4602      	mov	r2, r0
{
 8001e32:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8001e34:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8001e36:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001e38:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001e3c:	2001      	movs	r0, #1
 8001e3e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001e42:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e48:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001e4c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8001e4e:	680b      	ldr	r3, [r1, #0]
 8001e50:	2b60      	cmp	r3, #96	; 0x60
 8001e52:	d065      	beq.n	8001f20 <HAL_TIM_ConfigClockSource+0xf8>
 8001e54:	d824      	bhi.n	8001ea0 <HAL_TIM_ConfigClockSource+0x78>
 8001e56:	2b40      	cmp	r3, #64	; 0x40
 8001e58:	d07c      	beq.n	8001f54 <HAL_TIM_ConfigClockSource+0x12c>
 8001e5a:	d94b      	bls.n	8001ef4 <HAL_TIM_ConfigClockSource+0xcc>
 8001e5c:	2b50      	cmp	r3, #80	; 0x50
 8001e5e:	d117      	bne.n	8001e90 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e60:	6848      	ldr	r0, [r1, #4]
 8001e62:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e64:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e66:	6a23      	ldr	r3, [r4, #32]
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e6e:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e70:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8001e78:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e7a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001e7e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8001e80:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8001e82:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e88:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8001e8c:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8001e8e:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001e90:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8001e92:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e94:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001e98:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8001e9c:	bc30      	pop	{r4, r5}
 8001e9e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea4:	d038      	beq.n	8001f18 <HAL_TIM_ConfigClockSource+0xf0>
 8001ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001eaa:	d110      	bne.n	8001ece <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eac:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001eb0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eb2:	432b      	orrs	r3, r5
 8001eb4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001eb6:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001ebe:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001ec0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ec2:	68a3      	ldr	r3, [r4, #8]
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8001ec8:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eca:	60a3      	str	r3, [r4, #8]
      break;
 8001ecc:	e7e0      	b.n	8001e90 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8001ece:	2b70      	cmp	r3, #112	; 0x70
 8001ed0:	d1de      	bne.n	8001e90 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ed2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001ed6:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ed8:	432b      	orrs	r3, r5
 8001eda:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001edc:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ee0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001ee4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001ee6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001ee8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8001eee:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8001ef0:	60a3      	str	r3, [r4, #8]
      break;
 8001ef2:	e7cd      	b.n	8001e90 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d002      	beq.n	8001efe <HAL_TIM_ConfigClockSource+0xd6>
 8001ef8:	d90a      	bls.n	8001f10 <HAL_TIM_ConfigClockSource+0xe8>
 8001efa:	2b30      	cmp	r3, #48	; 0x30
 8001efc:	d1c8      	bne.n	8001e90 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8001efe:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f00:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f04:	430b      	orrs	r3, r1
 8001f06:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8001f0a:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8001f0c:	60a3      	str	r3, [r4, #8]
}
 8001f0e:	e7bf      	b.n	8001e90 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8001f10:	f033 0110 	bics.w	r1, r3, #16
 8001f14:	d1bc      	bne.n	8001e90 <HAL_TIM_ConfigClockSource+0x68>
 8001f16:	e7f2      	b.n	8001efe <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8001f18:	2000      	movs	r0, #0
 8001f1a:	e7b9      	b.n	8001e90 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8001f1c:	2002      	movs	r0, #2
}
 8001f1e:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f20:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f22:	68cb      	ldr	r3, [r1, #12]
 8001f24:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f26:	f020 0010 	bic.w	r0, r0, #16
 8001f2a:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f2c:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f2e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f32:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8001f36:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001f38:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f3e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8001f42:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8001f44:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f4a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8001f4e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8001f50:	60a3      	str	r3, [r4, #8]
}
 8001f52:	e79d      	b.n	8001e90 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f54:	6848      	ldr	r0, [r1, #4]
 8001f56:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f58:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f5a:	6a23      	ldr	r3, [r4, #32]
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f62:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f64:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8001f6c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f6e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001f72:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8001f74:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8001f76:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f7c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8001f80:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8001f82:	60a3      	str	r3, [r4, #8]
}
 8001f84:	e784      	b.n	8001e90 <HAL_TIM_ConfigClockSource+0x68>
 8001f86:	bf00      	nop

08001f88 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8001f88:	290c      	cmp	r1, #12
 8001f8a:	d808      	bhi.n	8001f9e <HAL_TIM_ReadCapturedValue+0x16>
 8001f8c:	e8df f001 	tbb	[pc, r1]
 8001f90:	07070712 	.word	0x07070712
 8001f94:	0707070f 	.word	0x0707070f
 8001f98:	0707070c 	.word	0x0707070c
 8001f9c:	09          	.byte	0x09
 8001f9d:	00          	.byte	0x00
 8001f9e:	2000      	movs	r0, #0
}
 8001fa0:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR4;
 8001fa2:	6803      	ldr	r3, [r0, #0]
 8001fa4:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8001fa6:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR3;
 8001fa8:	6803      	ldr	r3, [r0, #0]
 8001faa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
 8001fac:	4770      	bx	lr
      tmpreg =   htim->Instance->CCR2;
 8001fae:	6803      	ldr	r3, [r0, #0]
 8001fb0:	6b98      	ldr	r0, [r3, #56]	; 0x38
      break;
 8001fb2:	4770      	bx	lr
      tmpreg =  htim->Instance->CCR1;
 8001fb4:	6803      	ldr	r3, [r0, #0]
 8001fb6:	6b58      	ldr	r0, [r3, #52]	; 0x34
      break;
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop

08001fbc <HAL_TIM_RegisterCallback>:
  if (pCallback == NULL)
 8001fbc:	2a00      	cmp	r2, #0
 8001fbe:	d035      	beq.n	800202c <HAL_TIM_RegisterCallback+0x70>
  __HAL_LOCK(htim);
 8001fc0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d034      	beq.n	8002032 <HAL_TIM_RegisterCallback+0x76>
{
 8001fc8:	b410      	push	{r4}
  if (htim->State == HAL_TIM_STATE_READY)
 8001fca:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
 8001fce:	f1bc 0f01 	cmp.w	ip, #1
 8001fd2:	fa5f f38c 	uxtb.w	r3, ip
 8001fd6:	d00f      	beq.n	8001ff8 <HAL_TIM_RegisterCallback+0x3c>
  else if (htim->State == HAL_TIM_STATE_RESET)
 8001fd8:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8001fdc:	f004 03ff 	and.w	r3, r4, #255	; 0xff
 8001fe0:	b9e4      	cbnz	r4, 800201c <HAL_TIM_RegisterCallback+0x60>
    switch (CallbackID)
 8001fe2:	290d      	cmp	r1, #13
 8001fe4:	d81a      	bhi.n	800201c <HAL_TIM_RegisterCallback+0x60>
 8001fe6:	e8df f001 	tbb	[pc, r1]
 8001fea:	2a27      	.short	0x2a27
 8001fec:	32302e2c 	.word	0x32302e2c
 8001ff0:	3a383634 	.word	0x3a383634
 8001ff4:	42403e3c 	.word	0x42403e3c
    switch (CallbackID)
 8001ff8:	291a      	cmp	r1, #26
 8001ffa:	d810      	bhi.n	800201e <HAL_TIM_RegisterCallback+0x62>
 8001ffc:	e8df f001 	tbb	[pc, r1]
 8002000:	54514e1c 	.word	0x54514e1c
 8002004:	3f3c394b 	.word	0x3f3c394b
 8002008:	57484542 	.word	0x57484542
 800200c:	64605d5a 	.word	0x64605d5a
 8002010:	74706c68 	.word	0x74706c68
 8002014:	84807c78 	.word	0x84807c78
 8002018:	8c88      	.short	0x8c88
 800201a:	90          	.byte	0x90
 800201b:	00          	.byte	0x00
    switch (CallbackID)
 800201c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800201e:	2200      	movs	r2, #0
 8002020:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8002024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002028:	4618      	mov	r0, r3
 800202a:	4770      	bx	lr
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
}
 800202e:	4618      	mov	r0, r3
 8002030:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002032:	2302      	movs	r3, #2
}
 8002034:	4618      	mov	r0, r3
 8002036:	4770      	bx	lr
        htim->Base_MspInitCallback         = pCallback;
 8002038:	6482      	str	r2, [r0, #72]	; 0x48
  HAL_StatusTypeDef status = HAL_OK;
 800203a:	460b      	mov	r3, r1
        break;
 800203c:	e7ef      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->Base_MspDeInitCallback       = pCallback;
 800203e:	64c2      	str	r2, [r0, #76]	; 0x4c
        break;
 8002040:	e7ed      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->IC_MspInitCallback           = pCallback;
 8002042:	6502      	str	r2, [r0, #80]	; 0x50
        break;
 8002044:	e7eb      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->IC_MspDeInitCallback         = pCallback;
 8002046:	6542      	str	r2, [r0, #84]	; 0x54
        break;
 8002048:	e7e9      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->OC_MspInitCallback           = pCallback;
 800204a:	6582      	str	r2, [r0, #88]	; 0x58
        break;
 800204c:	e7e7      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->OC_MspDeInitCallback         = pCallback;
 800204e:	65c2      	str	r2, [r0, #92]	; 0x5c
        break;
 8002050:	e7e5      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->PWM_MspInitCallback          = pCallback;
 8002052:	6602      	str	r2, [r0, #96]	; 0x60
        break;
 8002054:	e7e3      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->PWM_MspDeInitCallback        = pCallback;
 8002056:	6642      	str	r2, [r0, #100]	; 0x64
        break;
 8002058:	e7e1      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->OnePulse_MspInitCallback     = pCallback;
 800205a:	6682      	str	r2, [r0, #104]	; 0x68
        break;
 800205c:	e7df      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800205e:	66c2      	str	r2, [r0, #108]	; 0x6c
        break;
 8002060:	e7dd      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->Encoder_MspInitCallback      = pCallback;
 8002062:	6702      	str	r2, [r0, #112]	; 0x70
        break;
 8002064:	e7db      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->Encoder_MspDeInitCallback    = pCallback;
 8002066:	6742      	str	r2, [r0, #116]	; 0x74
        break;
 8002068:	e7d9      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->HallSensor_MspInitCallback   = pCallback;
 800206a:	6782      	str	r2, [r0, #120]	; 0x78
        break;
 800206c:	e7d7      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->HallSensor_MspDeInitCallback = pCallback;
 800206e:	67c2      	str	r2, [r0, #124]	; 0x7c
        break;
 8002070:	e7d5      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->OC_MspDeInitCallback                 = pCallback;
 8002072:	65c2      	str	r2, [r0, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 8002074:	2300      	movs	r3, #0
        break;
 8002076:	e7d2      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->PWM_MspInitCallback                  = pCallback;
 8002078:	6602      	str	r2, [r0, #96]	; 0x60
  HAL_StatusTypeDef status = HAL_OK;
 800207a:	2300      	movs	r3, #0
        break;
 800207c:	e7cf      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->PWM_MspDeInitCallback                = pCallback;
 800207e:	6642      	str	r2, [r0, #100]	; 0x64
  HAL_StatusTypeDef status = HAL_OK;
 8002080:	2300      	movs	r3, #0
        break;
 8002082:	e7cc      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->OnePulse_MspInitCallback             = pCallback;
 8002084:	6682      	str	r2, [r0, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
        break;
 8002088:	e7c9      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800208a:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800208c:	2300      	movs	r3, #0
        break;
 800208e:	e7c6      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->Encoder_MspInitCallback              = pCallback;
 8002090:	6702      	str	r2, [r0, #112]	; 0x70
  HAL_StatusTypeDef status = HAL_OK;
 8002092:	2300      	movs	r3, #0
        break;
 8002094:	e7c3      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->OC_MspInitCallback                   = pCallback;
 8002096:	6582      	str	r2, [r0, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2300      	movs	r3, #0
        break;
 800209a:	e7c0      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->Base_MspDeInitCallback               = pCallback;
 800209c:	64c2      	str	r2, [r0, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 800209e:	2300      	movs	r3, #0
        break;
 80020a0:	e7bd      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->IC_MspInitCallback                   = pCallback;
 80020a2:	6502      	str	r2, [r0, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
        break;
 80020a6:	e7ba      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->IC_MspDeInitCallback                 = pCallback;
 80020a8:	6542      	str	r2, [r0, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
        break;
 80020ac:	e7b7      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->Encoder_MspDeInitCallback            = pCallback;
 80020ae:	6742      	str	r2, [r0, #116]	; 0x74
  HAL_StatusTypeDef status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
        break;
 80020b2:	e7b4      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->HallSensor_MspInitCallback           = pCallback;
 80020b4:	6782      	str	r2, [r0, #120]	; 0x78
  HAL_StatusTypeDef status = HAL_OK;
 80020b6:	2300      	movs	r3, #0
        break;
 80020b8:	e7b1      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80020ba:	67c2      	str	r2, [r0, #124]	; 0x7c
  HAL_StatusTypeDef status = HAL_OK;
 80020bc:	2300      	movs	r3, #0
        break;
 80020be:	e7ae      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->PeriodElapsedCallback                = pCallback;
 80020c0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  HAL_StatusTypeDef status = HAL_OK;
 80020c4:	2300      	movs	r3, #0
        break;
 80020c6:	e7aa      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80020c8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  HAL_StatusTypeDef status = HAL_OK;
 80020cc:	2300      	movs	r3, #0
        break;
 80020ce:	e7a6      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->TriggerCallback                      = pCallback;
 80020d0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  HAL_StatusTypeDef status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
        break;
 80020d6:	e7a2      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->TriggerHalfCpltCallback              = pCallback;
 80020d8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  HAL_StatusTypeDef status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
        break;
 80020de:	e79e      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->IC_CaptureCallback                   = pCallback;
 80020e0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;
 80020e4:	2300      	movs	r3, #0
        break;
 80020e6:	e79a      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80020e8:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
  HAL_StatusTypeDef status = HAL_OK;
 80020ec:	2300      	movs	r3, #0
        break;
 80020ee:	e796      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->OC_DelayElapsedCallback              = pCallback;
 80020f0:	f8c0 2098 	str.w	r2, [r0, #152]	; 0x98
  HAL_StatusTypeDef status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
        break;
 80020f6:	e792      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->PWM_PulseFinishedCallback            = pCallback;
 80020f8:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;
 80020fc:	2300      	movs	r3, #0
        break;
 80020fe:	e78e      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8002100:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 8002104:	2300      	movs	r3, #0
        break;
 8002106:	e78a      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->ErrorCallback                        = pCallback;
 8002108:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
  HAL_StatusTypeDef status = HAL_OK;
 800210c:	2300      	movs	r3, #0
        break;
 800210e:	e786      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->CommutationCallback                  = pCallback;
 8002110:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
  HAL_StatusTypeDef status = HAL_OK;
 8002114:	2300      	movs	r3, #0
        break;
 8002116:	e782      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->CommutationHalfCpltCallback          = pCallback;
 8002118:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
  HAL_StatusTypeDef status = HAL_OK;
 800211c:	2300      	movs	r3, #0
        break;
 800211e:	e77e      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>
        htim->BreakCallback                        = pCallback;
 8002120:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
  HAL_StatusTypeDef status = HAL_OK;
 8002124:	2300      	movs	r3, #0
        break;
 8002126:	e77a      	b.n	800201e <HAL_TIM_RegisterCallback+0x62>

08002128 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002128:	4a34      	ldr	r2, [pc, #208]	; (80021fc <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 800212a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800212c:	4290      	cmp	r0, r2
{
 800212e:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002130:	d04c      	beq.n	80021cc <TIM_Base_SetConfig+0xa4>
 8002132:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002136:	d034      	beq.n	80021a2 <TIM_Base_SetConfig+0x7a>
 8002138:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800213c:	4290      	cmp	r0, r2
 800213e:	d030      	beq.n	80021a2 <TIM_Base_SetConfig+0x7a>
 8002140:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002144:	4290      	cmp	r0, r2
 8002146:	d02c      	beq.n	80021a2 <TIM_Base_SetConfig+0x7a>
 8002148:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800214c:	4290      	cmp	r0, r2
 800214e:	d028      	beq.n	80021a2 <TIM_Base_SetConfig+0x7a>
 8002150:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002154:	4290      	cmp	r0, r2
 8002156:	d039      	beq.n	80021cc <TIM_Base_SetConfig+0xa4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002158:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800215c:	4290      	cmp	r0, r2
 800215e:	d024      	beq.n	80021aa <TIM_Base_SetConfig+0x82>
 8002160:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002164:	4290      	cmp	r0, r2
 8002166:	d020      	beq.n	80021aa <TIM_Base_SetConfig+0x82>
 8002168:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800216c:	4290      	cmp	r0, r2
 800216e:	d01c      	beq.n	80021aa <TIM_Base_SetConfig+0x82>
 8002170:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002174:	4290      	cmp	r0, r2
 8002176:	d018      	beq.n	80021aa <TIM_Base_SetConfig+0x82>
 8002178:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800217c:	4290      	cmp	r0, r2
 800217e:	d014      	beq.n	80021aa <TIM_Base_SetConfig+0x82>
 8002180:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002184:	4290      	cmp	r0, r2
 8002186:	d010      	beq.n	80021aa <TIM_Base_SetConfig+0x82>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002188:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800218a:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800218c:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800218e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002192:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002194:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 8002196:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002198:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800219a:	6282      	str	r2, [r0, #40]	; 0x28
}
 800219c:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800219e:	6143      	str	r3, [r0, #20]
}
 80021a0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80021a2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021a8:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021aa:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ac:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021b8:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ba:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80021bc:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 80021be:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 80021c0:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c2:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80021c4:	6282      	str	r2, [r0, #40]	; 0x28
}
 80021c6:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80021c8:	6143      	str	r3, [r0, #20]
}
 80021ca:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80021cc:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ce:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021d4:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021dc:	694a      	ldr	r2, [r1, #20]
 80021de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021e2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80021e4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e6:	688b      	ldr	r3, [r1, #8]
 80021e8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80021ea:	680b      	ldr	r3, [r1, #0]
 80021ec:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80021ee:	690b      	ldr	r3, [r1, #16]
 80021f0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80021f2:	2301      	movs	r3, #1
}
 80021f4:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80021f6:	6143      	str	r3, [r0, #20]
}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	40010000 	.word	0x40010000

08002200 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002200:	2800      	cmp	r0, #0
 8002202:	d046      	beq.n	8002292 <HAL_TIM_Base_Init+0x92>
{
 8002204:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002206:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800220a:	4604      	mov	r4, r0
 800220c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002210:	bb03      	cbnz	r3, 8002254 <HAL_TIM_Base_Init+0x54>
    if (htim->Base_MspInitCallback == NULL)
 8002212:	6c83      	ldr	r3, [r0, #72]	; 0x48
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8002214:	4821      	ldr	r0, [pc, #132]	; (800229c <HAL_TIM_Base_Init+0x9c>)
    htim->Lock = HAL_UNLOCKED;
 8002216:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800221a:	4a21      	ldr	r2, [pc, #132]	; (80022a0 <HAL_TIM_Base_Init+0xa0>)
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800221c:	4921      	ldr	r1, [pc, #132]	; (80022a4 <HAL_TIM_Base_Init+0xa4>)
 800221e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8002222:	e9c4 0221 	strd	r0, r2, [r4, #132]	; 0x84
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8002226:	4920      	ldr	r1, [pc, #128]	; (80022a8 <HAL_TIM_Base_Init+0xa8>)
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8002228:	4a20      	ldr	r2, [pc, #128]	; (80022ac <HAL_TIM_Base_Init+0xac>)
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800222a:	4821      	ldr	r0, [pc, #132]	; (80022b0 <HAL_TIM_Base_Init+0xb0>)
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800222c:	e9c4 1223 	strd	r1, r2, [r4, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8002230:	4a20      	ldr	r2, [pc, #128]	; (80022b4 <HAL_TIM_Base_Init+0xb4>)
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8002232:	4921      	ldr	r1, [pc, #132]	; (80022b8 <HAL_TIM_Base_Init+0xb8>)
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8002234:	e9c4 0225 	strd	r0, r2, [r4, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8002238:	4a20      	ldr	r2, [pc, #128]	; (80022bc <HAL_TIM_Base_Init+0xbc>)
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800223a:	4821      	ldr	r0, [pc, #132]	; (80022c0 <HAL_TIM_Base_Init+0xc0>)
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800223c:	e9c4 1227 	strd	r1, r2, [r4, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002240:	4a20      	ldr	r2, [pc, #128]	; (80022c4 <HAL_TIM_Base_Init+0xc4>)
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8002242:	4921      	ldr	r1, [pc, #132]	; (80022c8 <HAL_TIM_Base_Init+0xc8>)
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002244:	e9c4 0229 	strd	r0, r2, [r4, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8002248:	4a20      	ldr	r2, [pc, #128]	; (80022cc <HAL_TIM_Base_Init+0xcc>)
 800224a:	e9c4 122b 	strd	r1, r2, [r4, #172]	; 0xac
    if (htim->Base_MspInitCallback == NULL)
 800224e:	b313      	cbz	r3, 8002296 <HAL_TIM_Base_Init+0x96>
    htim->Base_MspInitCallback(htim);
 8002250:	4620      	mov	r0, r4
 8002252:	4798      	blx	r3
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002254:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8002256:	2302      	movs	r3, #2
 8002258:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800225c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002260:	f7ff ff62 	bl	8002128 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002264:	2301      	movs	r3, #1
 8002266:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800226e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002272:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002276:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800227e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002282:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002286:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800228a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800228e:	2000      	movs	r0, #0
}
 8002290:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002292:	2001      	movs	r0, #1
}
 8002294:	4770      	bx	lr
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_TIM_Base_Init+0xd0>)
 8002298:	64a3      	str	r3, [r4, #72]	; 0x48
 800229a:	e7d9      	b.n	8002250 <HAL_TIM_Base_Init+0x50>
 800229c:	08001b31 	.word	0x08001b31
 80022a0:	08001b49 	.word	0x08001b49
 80022a4:	08001b2d 	.word	0x08001b2d
 80022a8:	08001b4d 	.word	0x08001b4d
 80022ac:	08001b39 	.word	0x08001b39
 80022b0:	08001b3d 	.word	0x08001b3d
 80022b4:	08001b35 	.word	0x08001b35
 80022b8:	08001b41 	.word	0x08001b41
 80022bc:	08001b45 	.word	0x08001b45
 80022c0:	08001b51 	.word	0x08001b51
 80022c4:	080025d9 	.word	0x080025d9
 80022c8:	080025dd 	.word	0x080025dd
 80022cc:	080025e1 	.word	0x080025e1
 80022d0:	080010e5 	.word	0x080010e5

080022d4 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d046      	beq.n	8002366 <HAL_TIM_IC_Init+0x92>
{
 80022d8:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80022da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022de:	4604      	mov	r4, r0
 80022e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022e4:	bb03      	cbnz	r3, 8002328 <HAL_TIM_IC_Init+0x54>
    if (htim->IC_MspInitCallback == NULL)
 80022e6:	6d03      	ldr	r3, [r0, #80]	; 0x50
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80022e8:	4821      	ldr	r0, [pc, #132]	; (8002370 <HAL_TIM_IC_Init+0x9c>)
    htim->Lock = HAL_UNLOCKED;
 80022ea:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80022ee:	4a21      	ldr	r2, [pc, #132]	; (8002374 <HAL_TIM_IC_Init+0xa0>)
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80022f0:	4921      	ldr	r1, [pc, #132]	; (8002378 <HAL_TIM_IC_Init+0xa4>)
 80022f2:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80022f6:	e9c4 0221 	strd	r0, r2, [r4, #132]	; 0x84
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80022fa:	4920      	ldr	r1, [pc, #128]	; (800237c <HAL_TIM_IC_Init+0xa8>)
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80022fc:	4a20      	ldr	r2, [pc, #128]	; (8002380 <HAL_TIM_IC_Init+0xac>)
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80022fe:	4821      	ldr	r0, [pc, #132]	; (8002384 <HAL_TIM_IC_Init+0xb0>)
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8002300:	e9c4 1223 	strd	r1, r2, [r4, #140]	; 0x8c
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8002304:	4a20      	ldr	r2, [pc, #128]	; (8002388 <HAL_TIM_IC_Init+0xb4>)
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8002306:	4921      	ldr	r1, [pc, #132]	; (800238c <HAL_TIM_IC_Init+0xb8>)
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8002308:	e9c4 0225 	strd	r0, r2, [r4, #148]	; 0x94
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800230c:	4a20      	ldr	r2, [pc, #128]	; (8002390 <HAL_TIM_IC_Init+0xbc>)
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800230e:	4821      	ldr	r0, [pc, #132]	; (8002394 <HAL_TIM_IC_Init+0xc0>)
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8002310:	e9c4 1227 	strd	r1, r2, [r4, #156]	; 0x9c
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002314:	4a20      	ldr	r2, [pc, #128]	; (8002398 <HAL_TIM_IC_Init+0xc4>)
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8002316:	4921      	ldr	r1, [pc, #132]	; (800239c <HAL_TIM_IC_Init+0xc8>)
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002318:	e9c4 0229 	strd	r0, r2, [r4, #164]	; 0xa4
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800231c:	4a20      	ldr	r2, [pc, #128]	; (80023a0 <HAL_TIM_IC_Init+0xcc>)
 800231e:	e9c4 122b 	strd	r1, r2, [r4, #172]	; 0xac
    if (htim->IC_MspInitCallback == NULL)
 8002322:	b313      	cbz	r3, 800236a <HAL_TIM_IC_Init+0x96>
    htim->IC_MspInitCallback(htim);
 8002324:	4620      	mov	r0, r4
 8002326:	4798      	blx	r3
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002328:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800232a:	2302      	movs	r3, #2
 800232c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002330:	f851 0b04 	ldr.w	r0, [r1], #4
 8002334:	f7ff fef8 	bl	8002128 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002338:	2301      	movs	r3, #1
 800233a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002342:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002346:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800234a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800234e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002356:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800235a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800235e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002362:	2000      	movs	r0, #0
}
 8002364:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002366:	2001      	movs	r0, #1
}
 8002368:	4770      	bx	lr
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <HAL_TIM_IC_Init+0xd0>)
 800236c:	6523      	str	r3, [r4, #80]	; 0x50
 800236e:	e7d9      	b.n	8002324 <HAL_TIM_IC_Init+0x50>
 8002370:	08001b31 	.word	0x08001b31
 8002374:	08001b49 	.word	0x08001b49
 8002378:	08001b2d 	.word	0x08001b2d
 800237c:	08001b4d 	.word	0x08001b4d
 8002380:	08001b39 	.word	0x08001b39
 8002384:	08001b3d 	.word	0x08001b3d
 8002388:	08001b35 	.word	0x08001b35
 800238c:	08001b41 	.word	0x08001b41
 8002390:	08001b45 	.word	0x08001b45
 8002394:	08001b51 	.word	0x08001b51
 8002398:	080025d9 	.word	0x080025d9
 800239c:	080025dd 	.word	0x080025dd
 80023a0:	080025e1 	.word	0x080025e1
 80023a4:	08001b29 	.word	0x08001b29

080023a8 <TIM_TI1_SetConfig>:
{
 80023a8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023aa:	6a04      	ldr	r4, [r0, #32]
 80023ac:	f024 0401 	bic.w	r4, r4, #1
 80023b0:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80023b2:	4c1b      	ldr	r4, [pc, #108]	; (8002420 <TIM_TI1_SetConfig+0x78>)
  tmpccmr1 = TIMx->CCMR1;
 80023b4:	6985      	ldr	r5, [r0, #24]
  tmpccer = TIMx->CCER;
 80023b6:	6a06      	ldr	r6, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80023b8:	42a0      	cmp	r0, r4
 80023ba:	d01d      	beq.n	80023f8 <TIM_TI1_SetConfig+0x50>
 80023bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023c0:	d01a      	beq.n	80023f8 <TIM_TI1_SetConfig+0x50>
 80023c2:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80023c6:	42a0      	cmp	r0, r4
 80023c8:	d016      	beq.n	80023f8 <TIM_TI1_SetConfig+0x50>
 80023ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80023ce:	42a0      	cmp	r0, r4
 80023d0:	d012      	beq.n	80023f8 <TIM_TI1_SetConfig+0x50>
 80023d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80023d6:	42a0      	cmp	r0, r4
 80023d8:	d00e      	beq.n	80023f8 <TIM_TI1_SetConfig+0x50>
 80023da:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80023de:	42a0      	cmp	r0, r4
 80023e0:	d00a      	beq.n	80023f8 <TIM_TI1_SetConfig+0x50>
 80023e2:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80023e6:	42a0      	cmp	r0, r4
 80023e8:	d006      	beq.n	80023f8 <TIM_TI1_SetConfig+0x50>
 80023ea:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80023ee:	42a0      	cmp	r0, r4
 80023f0:	d002      	beq.n	80023f8 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80023f2:	f045 0201 	orr.w	r2, r5, #1
 80023f6:	e003      	b.n	8002400 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80023f8:	f025 0c03 	bic.w	ip, r5, #3
    tmpccmr1 |= TIM_ICSelection;
 80023fc:	ea4c 0202 	orr.w	r2, ip, r2
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002400:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002402:	f026 0c0a 	bic.w	ip, r6, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002406:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800240a:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800240c:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002410:	4313      	orrs	r3, r2
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002412:	ea41 010c 	orr.w	r1, r1, ip
  TIMx->CCMR1 = tmpccmr1;
 8002416:	6183      	str	r3, [r0, #24]
}
 8002418:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 800241a:	6201      	str	r1, [r0, #32]
}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40010000 	.word	0x40010000

08002424 <HAL_TIM_IC_ConfigChannel>:
{
 8002424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8002426:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800242a:	2b01      	cmp	r3, #1
 800242c:	d047      	beq.n	80024be <HAL_TIM_IC_ConfigChannel+0x9a>
 800242e:	4604      	mov	r4, r0
 8002430:	2001      	movs	r0, #1
 8002432:	460e      	mov	r6, r1
 8002434:	4615      	mov	r5, r2
 8002436:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800243a:	b14a      	cbz	r2, 8002450 <HAL_TIM_IC_ConfigChannel+0x2c>
  else if (Channel == TIM_CHANNEL_2)
 800243c:	2a04      	cmp	r2, #4
 800243e:	d018      	beq.n	8002472 <HAL_TIM_IC_ConfigChannel+0x4e>
  else if (Channel == TIM_CHANNEL_3)
 8002440:	2a08      	cmp	r2, #8
 8002442:	d03e      	beq.n	80024c2 <HAL_TIM_IC_ConfigChannel+0x9e>
  else if (Channel == TIM_CHANNEL_4)
 8002444:	2a0c      	cmp	r2, #12
 8002446:	d060      	beq.n	800250a <HAL_TIM_IC_ConfigChannel+0xe6>
  __HAL_UNLOCK(htim);
 8002448:	2300      	movs	r3, #0
 800244a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800244e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8002450:	68cb      	ldr	r3, [r1, #12]
 8002452:	6820      	ldr	r0, [r4, #0]
 8002454:	e9d1 1200 	ldrd	r1, r2, [r1]
 8002458:	f7ff ffa6 	bl	80023a8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800245c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800245e:	68b6      	ldr	r6, [r6, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002460:	6999      	ldr	r1, [r3, #24]
 8002462:	f021 010c 	bic.w	r1, r1, #12
 8002466:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002468:	699a      	ldr	r2, [r3, #24]
 800246a:	4332      	orrs	r2, r6
  HAL_StatusTypeDef status = HAL_OK;
 800246c:	4628      	mov	r0, r5
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800246e:	619a      	str	r2, [r3, #24]
 8002470:	e7ea      	b.n	8002448 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI2_SetConfig(htim->Instance,
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002476:	6a1d      	ldr	r5, [r3, #32]
 8002478:	f025 0510 	bic.w	r5, r5, #16
    TIM_TI2_SetConfig(htim->Instance,
 800247c:	e9d1 0700 	ldrd	r0, r7, [r1]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002480:	621d      	str	r5, [r3, #32]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002482:	688d      	ldr	r5, [r1, #8]
  tmpccmr1 = TIMx->CCMR1;
 8002484:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002486:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800248a:	0312      	lsls	r2, r2, #12
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800248c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002490:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002494:	b292      	uxth	r2, r2
 8002496:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8002498:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800249a:	619a      	str	r2, [r3, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800249c:	0100      	lsls	r0, r0, #4
 800249e:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024a2:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80024a6:	4301      	orrs	r1, r0
  TIMx->CCER = tmpccer;
 80024a8:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80024aa:	6999      	ldr	r1, [r3, #24]
 80024ac:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80024b0:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80024b2:	699a      	ldr	r2, [r3, #24]
 80024b4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 80024b8:	2000      	movs	r0, #0
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80024ba:	619a      	str	r2, [r3, #24]
 80024bc:	e7c4      	b.n	8002448 <HAL_TIM_IC_ConfigChannel+0x24>
  __HAL_LOCK(htim);
 80024be:	2002      	movs	r0, #2
}
 80024c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI3_SetConfig(htim->Instance,
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	68f2      	ldr	r2, [r6, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024c6:	6a1d      	ldr	r5, [r3, #32]
 80024c8:	f425 7580 	bic.w	r5, r5, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 80024cc:	e9d1 0100 	ldrd	r0, r1, [r1]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024d0:	621d      	str	r5, [r3, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80024d2:	68b5      	ldr	r5, [r6, #8]
  tmpccmr2 = TIMx->CCMR2;
 80024d4:	69de      	ldr	r6, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80024d6:	f026 0603 	bic.w	r6, r6, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80024da:	0112      	lsls	r2, r2, #4
  tmpccmr2 |= TIM_ICSelection;
 80024dc:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80024de:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 80024e6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 80024e8:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80024ea:	0200      	lsls	r0, r0, #8
 80024ec:	f400 6020 	and.w	r0, r0, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80024f0:	f421 6120 	bic.w	r1, r1, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80024f4:	4301      	orrs	r1, r0
  TIMx->CCER = tmpccer;
 80024f6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80024f8:	69d9      	ldr	r1, [r3, #28]
 80024fa:	f021 010c 	bic.w	r1, r1, #12
 80024fe:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002500:	69da      	ldr	r2, [r3, #28]
 8002502:	432a      	orrs	r2, r5
  HAL_StatusTypeDef status = HAL_OK;
 8002504:	2000      	movs	r0, #0
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002506:	61da      	str	r2, [r3, #28]
 8002508:	e79e      	b.n	8002448 <HAL_TIM_IC_ConfigChannel+0x24>
    TIM_TI4_SetConfig(htim->Instance,
 800250a:	6823      	ldr	r3, [r4, #0]
 800250c:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800250e:	6a1d      	ldr	r5, [r3, #32]
 8002510:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 8002514:	e9d1 0700 	ldrd	r0, r7, [r1]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002518:	621d      	str	r5, [r3, #32]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800251a:	688d      	ldr	r5, [r1, #8]
  tmpccmr2 = TIMx->CCMR2;
 800251c:	69d9      	ldr	r1, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800251e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002522:	0312      	lsls	r2, r2, #12
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002524:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002528:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800252c:	b292      	uxth	r2, r2
 800252e:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8002530:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 8002532:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002534:	0300      	lsls	r0, r0, #12
 8002536:	f400 4020 	and.w	r0, r0, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800253a:	f421 4120 	bic.w	r1, r1, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800253e:	4301      	orrs	r1, r0
  TIMx->CCER = tmpccer ;
 8002540:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002542:	69d9      	ldr	r1, [r3, #28]
 8002544:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8002548:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8002550:	2000      	movs	r0, #0
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002552:	61da      	str	r2, [r3, #28]
 8002554:	e778      	b.n	8002448 <HAL_TIM_IC_ConfigChannel+0x24>
 8002556:	bf00      	nop

08002558 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002558:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d037      	beq.n	80025d0 <HAL_TIMEx_MasterConfigSynchronization+0x78>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002560:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002562:	2202      	movs	r2, #2
{
 8002564:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002566:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800256a:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800256c:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800256e:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002570:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002574:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002576:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002578:	4a16      	ldr	r2, [pc, #88]	; (80025d4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d01a      	beq.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800257e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002582:	d017      	beq.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002584:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002588:	4293      	cmp	r3, r2
 800258a:	d013      	beq.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800258c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002590:	4293      	cmp	r3, r2
 8002592:	d00f      	beq.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8002594:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002598:	4293      	cmp	r3, r2
 800259a:	d00b      	beq.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 800259c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d007      	beq.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80025a4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d003      	beq.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 80025ac:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d104      	bne.n	80025be <HAL_TIMEx_MasterConfigSynchronization+0x66>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025b4:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ba:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025bc:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80025be:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80025c0:	2201      	movs	r2, #1
 80025c2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80025c6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80025ca:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80025cc:	4618      	mov	r0, r3
}
 80025ce:	4770      	bx	lr
  __HAL_LOCK(htim);
 80025d0:	2002      	movs	r0, #2
}
 80025d2:	4770      	bx	lr
 80025d4:	40010000 	.word	0x40010000

080025d8 <HAL_TIMEx_CommutCallback>:
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop

080025dc <HAL_TIMEx_CommutHalfCpltCallback>:
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop

080025e0 <HAL_TIMEx_BreakCallback>:
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop

080025e4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80025e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80025e8:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	fa94 f2a4 	rbit	r2, r4
 80025ee:	fab2 f282 	clz	r2, r2
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80025f2:	fa34 f302 	lsrs.w	r3, r4, r2
 80025f6:	d07e      	beq.n	80026f6 <LL_GPIO_Init+0x112>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80025f8:	f04f 0e01 	mov.w	lr, #1
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80025fc:	f04f 0c03 	mov.w	ip, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002600:	f04f 0a0f 	mov.w	sl, #15
 8002604:	e017      	b.n	8002636 <LL_GPIO_Init+0x52>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002606:	f8d0 8000 	ldr.w	r8, [r0]
 800260a:	fa93 f7a3 	rbit	r7, r3
 800260e:	fab7 f787 	clz	r7, r7
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	007f      	lsls	r7, r7, #1
 800261c:	fa0c f707 	lsl.w	r7, ip, r7
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	ea28 0707 	bic.w	r7, r8, r7
 8002626:	fa05 f303 	lsl.w	r3, r5, r3
 800262a:	433b      	orrs	r3, r7
 800262c:	6003      	str	r3, [r0, #0]
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 800262e:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002630:	fa34 f302 	lsrs.w	r3, r4, r2
 8002634:	d05f      	beq.n	80026f6 <LL_GPIO_Init+0x112>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002636:	fa0e f302 	lsl.w	r3, lr, r2
    if (currentpin)
 800263a:	4023      	ands	r3, r4
 800263c:	d0f7      	beq.n	800262e <LL_GPIO_Init+0x4a>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800263e:	684d      	ldr	r5, [r1, #4]
 8002640:	1e6f      	subs	r7, r5, #1
 8002642:	2f01      	cmp	r7, #1
 8002644:	d936      	bls.n	80026b4 <LL_GPIO_Init+0xd0>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002646:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800264a:	fa93 f7a3 	rbit	r7, r3
 800264e:	fab7 f787 	clz	r7, r7
 8002652:	fa93 f9a3 	rbit	r9, r3
 8002656:	690e      	ldr	r6, [r1, #16]
 8002658:	fab9 f989 	clz	r9, r9
 800265c:	007f      	lsls	r7, r7, #1
 800265e:	fa0c f707 	lsl.w	r7, ip, r7
 8002662:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8002666:	ea28 0707 	bic.w	r7, r8, r7
 800266a:	fa06 f909 	lsl.w	r9, r6, r9
 800266e:	ea47 0709 	orr.w	r7, r7, r9
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002672:	2d02      	cmp	r5, #2
 8002674:	60c7      	str	r7, [r0, #12]
 8002676:	d1c6      	bne.n	8002606 <LL_GPIO_Init+0x22>
 8002678:	fa93 f7a3 	rbit	r7, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800267c:	fab7 f787 	clz	r7, r7
 8002680:	2f07      	cmp	r7, #7
 8002682:	dc3b      	bgt.n	80026fc <LL_GPIO_Init+0x118>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002684:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8002688:	fa93 f7a3 	rbit	r7, r3
 800268c:	fab7 f787 	clz	r7, r7
 8002690:	fa93 f9a3 	rbit	r9, r3
 8002694:	694e      	ldr	r6, [r1, #20]
 8002696:	fab9 f989 	clz	r9, r9
 800269a:	00bf      	lsls	r7, r7, #2
 800269c:	fa0a f707 	lsl.w	r7, sl, r7
 80026a0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80026a4:	ea28 0707 	bic.w	r7, r8, r7
 80026a8:	fa06 f909 	lsl.w	r9, r6, r9
 80026ac:	ea47 0709 	orr.w	r7, r7, r9
 80026b0:	6207      	str	r7, [r0, #32]
}
 80026b2:	e7a8      	b.n	8002606 <LL_GPIO_Init+0x22>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80026b4:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80026b8:	fa93 f7a3 	rbit	r7, r3
 80026bc:	fab7 f787 	clz	r7, r7
 80026c0:	fa93 f9a3 	rbit	r9, r3
 80026c4:	688e      	ldr	r6, [r1, #8]
 80026c6:	fab9 f989 	clz	r9, r9
 80026ca:	007f      	lsls	r7, r7, #1
 80026cc:	fa0c f707 	lsl.w	r7, ip, r7
 80026d0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80026d4:	ea28 0707 	bic.w	r7, r8, r7
 80026d8:	fa06 f909 	lsl.w	r9, r6, r9
 80026dc:	ea47 0709 	orr.w	r7, r7, r9
 80026e0:	6087      	str	r7, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80026e2:	6847      	ldr	r7, [r0, #4]
 80026e4:	68ce      	ldr	r6, [r1, #12]
 80026e6:	ea27 0703 	bic.w	r7, r7, r3
 80026ea:	fb06 f803 	mul.w	r8, r6, r3
 80026ee:	ea47 0708 	orr.w	r7, r7, r8
 80026f2:	6047      	str	r7, [r0, #4]
}
 80026f4:	e7a7      	b.n	8002646 <LL_GPIO_Init+0x62>
  }

  return (SUCCESS);
}
 80026f6:	2000      	movs	r0, #0
 80026f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80026fc:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
 8002700:	0a1f      	lsrs	r7, r3, #8
 8002702:	fa97 f8a7 	rbit	r8, r7
 8002706:	fab8 f888 	clz	r8, r8
 800270a:	fa97 f7a7 	rbit	r7, r7
 800270e:	694e      	ldr	r6, [r1, #20]
 8002710:	fab7 f787 	clz	r7, r7
 8002714:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002718:	fa0a f808 	lsl.w	r8, sl, r8
 800271c:	00bf      	lsls	r7, r7, #2
 800271e:	ea29 0808 	bic.w	r8, r9, r8
 8002722:	fa06 f707 	lsl.w	r7, r6, r7
 8002726:	ea48 0707 	orr.w	r7, r8, r7
 800272a:	6247      	str	r7, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800272c:	e76b      	b.n	8002606 <LL_GPIO_Init+0x22>
 800272e:	bf00      	nop

08002730 <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002730:	4a2c      	ldr	r2, [pc, #176]	; (80027e4 <LL_TIM_Init+0xb4>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002732:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002734:	4290      	cmp	r0, r2
{
 8002736:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002738:	d044      	beq.n	80027c4 <LL_TIM_Init+0x94>
 800273a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800273e:	d033      	beq.n	80027a8 <LL_TIM_Init+0x78>
 8002740:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002744:	4290      	cmp	r0, r2
 8002746:	d02f      	beq.n	80027a8 <LL_TIM_Init+0x78>
 8002748:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800274c:	4290      	cmp	r0, r2
 800274e:	d02b      	beq.n	80027a8 <LL_TIM_Init+0x78>
 8002750:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002754:	4290      	cmp	r0, r2
 8002756:	d027      	beq.n	80027a8 <LL_TIM_Init+0x78>
 8002758:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800275c:	4290      	cmp	r0, r2
 800275e:	d031      	beq.n	80027c4 <LL_TIM_Init+0x94>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002760:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002764:	4290      	cmp	r0, r2
 8002766:	d023      	beq.n	80027b0 <LL_TIM_Init+0x80>
 8002768:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800276c:	4290      	cmp	r0, r2
 800276e:	d01f      	beq.n	80027b0 <LL_TIM_Init+0x80>
 8002770:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002774:	4290      	cmp	r0, r2
 8002776:	d01b      	beq.n	80027b0 <LL_TIM_Init+0x80>
 8002778:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800277c:	4290      	cmp	r0, r2
 800277e:	d017      	beq.n	80027b0 <LL_TIM_Init+0x80>
 8002780:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002784:	4290      	cmp	r0, r2
 8002786:	d013      	beq.n	80027b0 <LL_TIM_Init+0x80>
 8002788:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800278c:	4290      	cmp	r0, r2
 800278e:	d00f      	beq.n	80027b0 <LL_TIM_Init+0x80>

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002790:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002792:	880a      	ldrh	r2, [r1, #0]
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002794:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002796:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8002798:	6282      	str	r2, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800279a:	6943      	ldr	r3, [r0, #20]
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80027a2:	bc30      	pop	{r4, r5}
 80027a4:	2000      	movs	r0, #0
 80027a6:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80027a8:	684a      	ldr	r2, [r1, #4]
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80027b0:	68cd      	ldr	r5, [r1, #12]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80027b2:	688c      	ldr	r4, [r1, #8]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80027b4:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80027b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ba:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80027bc:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80027be:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80027c0:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c2:	e7ea      	b.n	800279a <LL_TIM_Init+0x6a>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80027c4:	684c      	ldr	r4, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80027c6:	68ca      	ldr	r2, [r1, #12]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80027c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027cc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80027ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d2:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80027d4:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80027d6:	688a      	ldr	r2, [r1, #8]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80027d8:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80027da:	62c2      	str	r2, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80027dc:	6283      	str	r3, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80027de:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80027e0:	6303      	str	r3, [r0, #48]	; 0x30
}
 80027e2:	e7da      	b.n	800279a <LL_TIM_Init+0x6a>
 80027e4:	40010000 	.word	0x40010000

080027e8 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 80027e8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 80027ec:	b430      	push	{r4, r5}
  switch (Channel)
 80027ee:	d07e      	beq.n	80028ee <LL_TIM_OC_Init+0x106>
 80027f0:	d82b      	bhi.n	800284a <LL_TIM_OC_Init+0x62>
 80027f2:	2901      	cmp	r1, #1
 80027f4:	d058      	beq.n	80028a8 <LL_TIM_OC_Init+0xc0>
 80027f6:	2910      	cmp	r1, #16
 80027f8:	d152      	bne.n	80028a0 <LL_TIM_OC_Init+0xb8>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80027fa:	6a03      	ldr	r3, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80027fc:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80027fe:	f023 0310 	bic.w	r3, r3, #16
 8002802:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002804:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002806:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002808:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800280a:	f023 0320 	bic.w	r3, r3, #32
 800280e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002812:	6815      	ldr	r5, [r2, #0]
 8002814:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8002818:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800281c:	6855      	ldr	r5, [r2, #4]
 800281e:	f023 0310 	bic.w	r3, r3, #16
 8002822:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002826:	4d67      	ldr	r5, [pc, #412]	; (80029c4 <LL_TIM_OC_Init+0x1dc>)
 8002828:	42a8      	cmp	r0, r5
 800282a:	f000 80af 	beq.w	800298c <LL_TIM_OC_Init+0x1a4>
 800282e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002832:	42a8      	cmp	r0, r5
 8002834:	f000 80aa 	beq.w	800298c <LL_TIM_OC_Init+0x1a4>

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002838:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800283a:	6041      	str	r1, [r0, #4]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800283c:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800283e:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002840:	6385      	str	r5, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002842:	6203      	str	r3, [r0, #32]
}
 8002844:	bc30      	pop	{r4, r5}
 8002846:	4610      	mov	r0, r2
 8002848:	4770      	bx	lr
  switch (Channel)
 800284a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800284e:	d127      	bne.n	80028a0 <LL_TIM_OC_Init+0xb8>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002850:	6a03      	ldr	r3, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002852:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002854:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002858:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800285a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800285c:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800285e:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002860:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002864:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002868:	6815      	ldr	r5, [r2, #0]
 800286a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800286e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002872:	6855      	ldr	r5, [r2, #4]
 8002874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002878:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287c:	4d51      	ldr	r5, [pc, #324]	; (80029c4 <LL_TIM_OC_Init+0x1dc>)
 800287e:	42a8      	cmp	r0, r5
 8002880:	f000 8099 	beq.w	80029b6 <LL_TIM_OC_Init+0x1ce>
 8002884:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002888:	42a8      	cmp	r0, r5
 800288a:	f000 8094 	beq.w	80029b6 <LL_TIM_OC_Init+0x1ce>

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800288e:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002890:	6044      	str	r4, [r0, #4]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002892:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002894:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002896:	6405      	str	r5, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002898:	6203      	str	r3, [r0, #32]
}
 800289a:	bc30      	pop	{r4, r5}
 800289c:	4610      	mov	r0, r2
 800289e:	4770      	bx	lr
  switch (Channel)
 80028a0:	2201      	movs	r2, #1
}
 80028a2:	4610      	mov	r0, r2
 80028a4:	bc30      	pop	{r4, r5}
 80028a6:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80028a8:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80028aa:	6915      	ldr	r5, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80028b2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80028b4:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80028b6:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80028b8:	f023 0302 	bic.w	r3, r3, #2
 80028bc:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80028be:	6815      	ldr	r5, [r2, #0]
 80028c0:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80028c4:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80028c6:	6855      	ldr	r5, [r2, #4]
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028ce:	4d3d      	ldr	r5, [pc, #244]	; (80029c4 <LL_TIM_OC_Init+0x1dc>)
 80028d0:	42a8      	cmp	r0, r5
 80028d2:	d047      	beq.n	8002964 <LL_TIM_OC_Init+0x17c>
 80028d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80028d8:	42a8      	cmp	r0, r5
 80028da:	d043      	beq.n	8002964 <LL_TIM_OC_Init+0x17c>
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80028dc:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80028de:	6041      	str	r1, [r0, #4]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80028e0:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80028e2:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80028e4:	6345      	str	r5, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80028e6:	6203      	str	r3, [r0, #32]
}
 80028e8:	bc30      	pop	{r4, r5}
 80028ea:	4610      	mov	r0, r2
 80028ec:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80028ee:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80028f0:	6855      	ldr	r5, [r2, #4]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80028f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f6:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80028f8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80028fa:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80028fc:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80028fe:	f024 0c73 	bic.w	ip, r4, #115	; 0x73
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002902:	6914      	ldr	r4, [r2, #16]
 8002904:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002908:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800290c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002910:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002914:	4d2b      	ldr	r5, [pc, #172]	; (80029c4 <LL_TIM_OC_Init+0x1dc>)
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002916:	6814      	ldr	r4, [r2, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002918:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800291a:	ea4c 0404 	orr.w	r4, ip, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800291e:	d00c      	beq.n	800293a <LL_TIM_OC_Init+0x152>
 8002920:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002924:	42a8      	cmp	r0, r5
 8002926:	d008      	beq.n	800293a <LL_TIM_OC_Init+0x152>
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002928:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800292a:	6041      	str	r1, [r0, #4]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800292c:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800292e:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002930:	63c5      	str	r5, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002932:	6203      	str	r3, [r0, #32]
}
 8002934:	bc30      	pop	{r4, r5}
 8002936:	4610      	mov	r0, r2
 8002938:	4770      	bx	lr
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800293a:	6955      	ldr	r5, [r2, #20]
 800293c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002940:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002944:	6995      	ldr	r5, [r2, #24]
 8002946:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 800294a:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800294e:	6895      	ldr	r5, [r2, #8]
 8002950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002954:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002958:	69d5      	ldr	r5, [r2, #28]
 800295a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800295e:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8002962:	e7e1      	b.n	8002928 <LL_TIM_OC_Init+0x140>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002964:	6955      	ldr	r5, [r2, #20]
 8002966:	f023 0308 	bic.w	r3, r3, #8
 800296a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800296e:	6995      	ldr	r5, [r2, #24]
 8002970:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002974:	4329      	orrs	r1, r5
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002976:	6895      	ldr	r5, [r2, #8]
 8002978:	f023 0304 	bic.w	r3, r3, #4
 800297c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002980:	69d5      	ldr	r5, [r2, #28]
 8002982:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8002986:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 800298a:	e7a7      	b.n	80028dc <LL_TIM_OC_Init+0xf4>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800298c:	6955      	ldr	r5, [r2, #20]
 800298e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002992:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002996:	6995      	ldr	r5, [r2, #24]
 8002998:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800299c:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80029a0:	6895      	ldr	r5, [r2, #8]
 80029a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a6:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80029aa:	69d5      	ldr	r5, [r2, #28]
 80029ac:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80029b0:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
 80029b4:	e740      	b.n	8002838 <LL_TIM_OC_Init+0x50>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80029b6:	6995      	ldr	r5, [r2, #24]
 80029b8:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 80029bc:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80029c0:	e765      	b.n	800288e <LL_TIM_OC_Init+0xa6>
 80029c2:	bf00      	nop
 80029c4:	40010000 	.word	0x40010000

080029c8 <__errno>:
 80029c8:	4b01      	ldr	r3, [pc, #4]	; (80029d0 <__errno+0x8>)
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	2000000c 	.word	0x2000000c

080029d4 <__libc_init_array>:
 80029d4:	b570      	push	{r4, r5, r6, lr}
 80029d6:	4d0d      	ldr	r5, [pc, #52]	; (8002a0c <__libc_init_array+0x38>)
 80029d8:	4c0d      	ldr	r4, [pc, #52]	; (8002a10 <__libc_init_array+0x3c>)
 80029da:	1b64      	subs	r4, r4, r5
 80029dc:	10a4      	asrs	r4, r4, #2
 80029de:	2600      	movs	r6, #0
 80029e0:	42a6      	cmp	r6, r4
 80029e2:	d109      	bne.n	80029f8 <__libc_init_array+0x24>
 80029e4:	4d0b      	ldr	r5, [pc, #44]	; (8002a14 <__libc_init_array+0x40>)
 80029e6:	4c0c      	ldr	r4, [pc, #48]	; (8002a18 <__libc_init_array+0x44>)
 80029e8:	f000 ffae 	bl	8003948 <_init>
 80029ec:	1b64      	subs	r4, r4, r5
 80029ee:	10a4      	asrs	r4, r4, #2
 80029f0:	2600      	movs	r6, #0
 80029f2:	42a6      	cmp	r6, r4
 80029f4:	d105      	bne.n	8002a02 <__libc_init_array+0x2e>
 80029f6:	bd70      	pop	{r4, r5, r6, pc}
 80029f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029fc:	4798      	blx	r3
 80029fe:	3601      	adds	r6, #1
 8002a00:	e7ee      	b.n	80029e0 <__libc_init_array+0xc>
 8002a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a06:	4798      	blx	r3
 8002a08:	3601      	adds	r6, #1
 8002a0a:	e7f2      	b.n	80029f2 <__libc_init_array+0x1e>
 8002a0c:	08003a24 	.word	0x08003a24
 8002a10:	08003a24 	.word	0x08003a24
 8002a14:	08003a24 	.word	0x08003a24
 8002a18:	08003a28 	.word	0x08003a28

08002a1c <memset>:
 8002a1c:	4402      	add	r2, r0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d100      	bne.n	8002a26 <memset+0xa>
 8002a24:	4770      	bx	lr
 8002a26:	f803 1b01 	strb.w	r1, [r3], #1
 8002a2a:	e7f9      	b.n	8002a20 <memset+0x4>

08002a2c <iprintf>:
 8002a2c:	b40f      	push	{r0, r1, r2, r3}
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <iprintf+0x2c>)
 8002a30:	b513      	push	{r0, r1, r4, lr}
 8002a32:	681c      	ldr	r4, [r3, #0]
 8002a34:	b124      	cbz	r4, 8002a40 <iprintf+0x14>
 8002a36:	69a3      	ldr	r3, [r4, #24]
 8002a38:	b913      	cbnz	r3, 8002a40 <iprintf+0x14>
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f000 f866 	bl	8002b0c <__sinit>
 8002a40:	ab05      	add	r3, sp, #20
 8002a42:	9a04      	ldr	r2, [sp, #16]
 8002a44:	68a1      	ldr	r1, [r4, #8]
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f000 f9bd 	bl	8002dc8 <_vfiprintf_r>
 8002a4e:	b002      	add	sp, #8
 8002a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a54:	b004      	add	sp, #16
 8002a56:	4770      	bx	lr
 8002a58:	2000000c 	.word	0x2000000c

08002a5c <std>:
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	b510      	push	{r4, lr}
 8002a60:	4604      	mov	r4, r0
 8002a62:	e9c0 3300 	strd	r3, r3, [r0]
 8002a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a6a:	6083      	str	r3, [r0, #8]
 8002a6c:	8181      	strh	r1, [r0, #12]
 8002a6e:	6643      	str	r3, [r0, #100]	; 0x64
 8002a70:	81c2      	strh	r2, [r0, #14]
 8002a72:	6183      	str	r3, [r0, #24]
 8002a74:	4619      	mov	r1, r3
 8002a76:	2208      	movs	r2, #8
 8002a78:	305c      	adds	r0, #92	; 0x5c
 8002a7a:	f7ff ffcf 	bl	8002a1c <memset>
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <std+0x38>)
 8002a80:	6263      	str	r3, [r4, #36]	; 0x24
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <std+0x3c>)
 8002a84:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <std+0x40>)
 8002a88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <std+0x44>)
 8002a8c:	6224      	str	r4, [r4, #32]
 8002a8e:	6323      	str	r3, [r4, #48]	; 0x30
 8002a90:	bd10      	pop	{r4, pc}
 8002a92:	bf00      	nop
 8002a94:	08003371 	.word	0x08003371
 8002a98:	08003393 	.word	0x08003393
 8002a9c:	080033cb 	.word	0x080033cb
 8002aa0:	080033ef 	.word	0x080033ef

08002aa4 <_cleanup_r>:
 8002aa4:	4901      	ldr	r1, [pc, #4]	; (8002aac <_cleanup_r+0x8>)
 8002aa6:	f000 b8af 	b.w	8002c08 <_fwalk_reent>
 8002aaa:	bf00      	nop
 8002aac:	080036c9 	.word	0x080036c9

08002ab0 <__sfmoreglue>:
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	2268      	movs	r2, #104	; 0x68
 8002ab4:	1e4d      	subs	r5, r1, #1
 8002ab6:	4355      	muls	r5, r2
 8002ab8:	460e      	mov	r6, r1
 8002aba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002abe:	f000 f8e5 	bl	8002c8c <_malloc_r>
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	b140      	cbz	r0, 8002ad8 <__sfmoreglue+0x28>
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	e9c0 1600 	strd	r1, r6, [r0]
 8002acc:	300c      	adds	r0, #12
 8002ace:	60a0      	str	r0, [r4, #8]
 8002ad0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ad4:	f7ff ffa2 	bl	8002a1c <memset>
 8002ad8:	4620      	mov	r0, r4
 8002ada:	bd70      	pop	{r4, r5, r6, pc}

08002adc <__sfp_lock_acquire>:
 8002adc:	4801      	ldr	r0, [pc, #4]	; (8002ae4 <__sfp_lock_acquire+0x8>)
 8002ade:	f000 b8b3 	b.w	8002c48 <__retarget_lock_acquire_recursive>
 8002ae2:	bf00      	nop
 8002ae4:	20000151 	.word	0x20000151

08002ae8 <__sfp_lock_release>:
 8002ae8:	4801      	ldr	r0, [pc, #4]	; (8002af0 <__sfp_lock_release+0x8>)
 8002aea:	f000 b8ae 	b.w	8002c4a <__retarget_lock_release_recursive>
 8002aee:	bf00      	nop
 8002af0:	20000151 	.word	0x20000151

08002af4 <__sinit_lock_acquire>:
 8002af4:	4801      	ldr	r0, [pc, #4]	; (8002afc <__sinit_lock_acquire+0x8>)
 8002af6:	f000 b8a7 	b.w	8002c48 <__retarget_lock_acquire_recursive>
 8002afa:	bf00      	nop
 8002afc:	20000152 	.word	0x20000152

08002b00 <__sinit_lock_release>:
 8002b00:	4801      	ldr	r0, [pc, #4]	; (8002b08 <__sinit_lock_release+0x8>)
 8002b02:	f000 b8a2 	b.w	8002c4a <__retarget_lock_release_recursive>
 8002b06:	bf00      	nop
 8002b08:	20000152 	.word	0x20000152

08002b0c <__sinit>:
 8002b0c:	b510      	push	{r4, lr}
 8002b0e:	4604      	mov	r4, r0
 8002b10:	f7ff fff0 	bl	8002af4 <__sinit_lock_acquire>
 8002b14:	69a3      	ldr	r3, [r4, #24]
 8002b16:	b11b      	cbz	r3, 8002b20 <__sinit+0x14>
 8002b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b1c:	f7ff bff0 	b.w	8002b00 <__sinit_lock_release>
 8002b20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b24:	6523      	str	r3, [r4, #80]	; 0x50
 8002b26:	4b13      	ldr	r3, [pc, #76]	; (8002b74 <__sinit+0x68>)
 8002b28:	4a13      	ldr	r2, [pc, #76]	; (8002b78 <__sinit+0x6c>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b2e:	42a3      	cmp	r3, r4
 8002b30:	bf04      	itt	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	61a3      	streq	r3, [r4, #24]
 8002b36:	4620      	mov	r0, r4
 8002b38:	f000 f820 	bl	8002b7c <__sfp>
 8002b3c:	6060      	str	r0, [r4, #4]
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f000 f81c 	bl	8002b7c <__sfp>
 8002b44:	60a0      	str	r0, [r4, #8]
 8002b46:	4620      	mov	r0, r4
 8002b48:	f000 f818 	bl	8002b7c <__sfp>
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	60e0      	str	r0, [r4, #12]
 8002b50:	2104      	movs	r1, #4
 8002b52:	6860      	ldr	r0, [r4, #4]
 8002b54:	f7ff ff82 	bl	8002a5c <std>
 8002b58:	68a0      	ldr	r0, [r4, #8]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	2109      	movs	r1, #9
 8002b5e:	f7ff ff7d 	bl	8002a5c <std>
 8002b62:	68e0      	ldr	r0, [r4, #12]
 8002b64:	2202      	movs	r2, #2
 8002b66:	2112      	movs	r1, #18
 8002b68:	f7ff ff78 	bl	8002a5c <std>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	61a3      	str	r3, [r4, #24]
 8002b70:	e7d2      	b.n	8002b18 <__sinit+0xc>
 8002b72:	bf00      	nop
 8002b74:	08003984 	.word	0x08003984
 8002b78:	08002aa5 	.word	0x08002aa5

08002b7c <__sfp>:
 8002b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7e:	4607      	mov	r7, r0
 8002b80:	f7ff ffac 	bl	8002adc <__sfp_lock_acquire>
 8002b84:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <__sfp+0x84>)
 8002b86:	681e      	ldr	r6, [r3, #0]
 8002b88:	69b3      	ldr	r3, [r6, #24]
 8002b8a:	b913      	cbnz	r3, 8002b92 <__sfp+0x16>
 8002b8c:	4630      	mov	r0, r6
 8002b8e:	f7ff ffbd 	bl	8002b0c <__sinit>
 8002b92:	3648      	adds	r6, #72	; 0x48
 8002b94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	d503      	bpl.n	8002ba4 <__sfp+0x28>
 8002b9c:	6833      	ldr	r3, [r6, #0]
 8002b9e:	b30b      	cbz	r3, 8002be4 <__sfp+0x68>
 8002ba0:	6836      	ldr	r6, [r6, #0]
 8002ba2:	e7f7      	b.n	8002b94 <__sfp+0x18>
 8002ba4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002ba8:	b9d5      	cbnz	r5, 8002be0 <__sfp+0x64>
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <__sfp+0x88>)
 8002bac:	60e3      	str	r3, [r4, #12]
 8002bae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002bb2:	6665      	str	r5, [r4, #100]	; 0x64
 8002bb4:	f000 f847 	bl	8002c46 <__retarget_lock_init_recursive>
 8002bb8:	f7ff ff96 	bl	8002ae8 <__sfp_lock_release>
 8002bbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002bc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002bc4:	6025      	str	r5, [r4, #0]
 8002bc6:	61a5      	str	r5, [r4, #24]
 8002bc8:	2208      	movs	r2, #8
 8002bca:	4629      	mov	r1, r5
 8002bcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002bd0:	f7ff ff24 	bl	8002a1c <memset>
 8002bd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002bd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002bdc:	4620      	mov	r0, r4
 8002bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002be0:	3468      	adds	r4, #104	; 0x68
 8002be2:	e7d9      	b.n	8002b98 <__sfp+0x1c>
 8002be4:	2104      	movs	r1, #4
 8002be6:	4638      	mov	r0, r7
 8002be8:	f7ff ff62 	bl	8002ab0 <__sfmoreglue>
 8002bec:	4604      	mov	r4, r0
 8002bee:	6030      	str	r0, [r6, #0]
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d1d5      	bne.n	8002ba0 <__sfp+0x24>
 8002bf4:	f7ff ff78 	bl	8002ae8 <__sfp_lock_release>
 8002bf8:	230c      	movs	r3, #12
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	e7ee      	b.n	8002bdc <__sfp+0x60>
 8002bfe:	bf00      	nop
 8002c00:	08003984 	.word	0x08003984
 8002c04:	ffff0001 	.word	0xffff0001

08002c08 <_fwalk_reent>:
 8002c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c0c:	4606      	mov	r6, r0
 8002c0e:	4688      	mov	r8, r1
 8002c10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c14:	2700      	movs	r7, #0
 8002c16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c1a:	f1b9 0901 	subs.w	r9, r9, #1
 8002c1e:	d505      	bpl.n	8002c2c <_fwalk_reent+0x24>
 8002c20:	6824      	ldr	r4, [r4, #0]
 8002c22:	2c00      	cmp	r4, #0
 8002c24:	d1f7      	bne.n	8002c16 <_fwalk_reent+0xe>
 8002c26:	4638      	mov	r0, r7
 8002c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c2c:	89ab      	ldrh	r3, [r5, #12]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d907      	bls.n	8002c42 <_fwalk_reent+0x3a>
 8002c32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c36:	3301      	adds	r3, #1
 8002c38:	d003      	beq.n	8002c42 <_fwalk_reent+0x3a>
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	4630      	mov	r0, r6
 8002c3e:	47c0      	blx	r8
 8002c40:	4307      	orrs	r7, r0
 8002c42:	3568      	adds	r5, #104	; 0x68
 8002c44:	e7e9      	b.n	8002c1a <_fwalk_reent+0x12>

08002c46 <__retarget_lock_init_recursive>:
 8002c46:	4770      	bx	lr

08002c48 <__retarget_lock_acquire_recursive>:
 8002c48:	4770      	bx	lr

08002c4a <__retarget_lock_release_recursive>:
 8002c4a:	4770      	bx	lr

08002c4c <sbrk_aligned>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	4e0e      	ldr	r6, [pc, #56]	; (8002c88 <sbrk_aligned+0x3c>)
 8002c50:	460c      	mov	r4, r1
 8002c52:	6831      	ldr	r1, [r6, #0]
 8002c54:	4605      	mov	r5, r0
 8002c56:	b911      	cbnz	r1, 8002c5e <sbrk_aligned+0x12>
 8002c58:	f000 fb7a 	bl	8003350 <_sbrk_r>
 8002c5c:	6030      	str	r0, [r6, #0]
 8002c5e:	4621      	mov	r1, r4
 8002c60:	4628      	mov	r0, r5
 8002c62:	f000 fb75 	bl	8003350 <_sbrk_r>
 8002c66:	1c43      	adds	r3, r0, #1
 8002c68:	d00a      	beq.n	8002c80 <sbrk_aligned+0x34>
 8002c6a:	1cc4      	adds	r4, r0, #3
 8002c6c:	f024 0403 	bic.w	r4, r4, #3
 8002c70:	42a0      	cmp	r0, r4
 8002c72:	d007      	beq.n	8002c84 <sbrk_aligned+0x38>
 8002c74:	1a21      	subs	r1, r4, r0
 8002c76:	4628      	mov	r0, r5
 8002c78:	f000 fb6a 	bl	8003350 <_sbrk_r>
 8002c7c:	3001      	adds	r0, #1
 8002c7e:	d101      	bne.n	8002c84 <sbrk_aligned+0x38>
 8002c80:	f04f 34ff 	mov.w	r4, #4294967295
 8002c84:	4620      	mov	r0, r4
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
 8002c88:	20000158 	.word	0x20000158

08002c8c <_malloc_r>:
 8002c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c90:	1ccd      	adds	r5, r1, #3
 8002c92:	f025 0503 	bic.w	r5, r5, #3
 8002c96:	3508      	adds	r5, #8
 8002c98:	2d0c      	cmp	r5, #12
 8002c9a:	bf38      	it	cc
 8002c9c:	250c      	movcc	r5, #12
 8002c9e:	2d00      	cmp	r5, #0
 8002ca0:	4607      	mov	r7, r0
 8002ca2:	db01      	blt.n	8002ca8 <_malloc_r+0x1c>
 8002ca4:	42a9      	cmp	r1, r5
 8002ca6:	d905      	bls.n	8002cb4 <_malloc_r+0x28>
 8002ca8:	230c      	movs	r3, #12
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	2600      	movs	r6, #0
 8002cae:	4630      	mov	r0, r6
 8002cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cb4:	4e2e      	ldr	r6, [pc, #184]	; (8002d70 <_malloc_r+0xe4>)
 8002cb6:	f000 fdbb 	bl	8003830 <__malloc_lock>
 8002cba:	6833      	ldr	r3, [r6, #0]
 8002cbc:	461c      	mov	r4, r3
 8002cbe:	bb34      	cbnz	r4, 8002d0e <_malloc_r+0x82>
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	4638      	mov	r0, r7
 8002cc4:	f7ff ffc2 	bl	8002c4c <sbrk_aligned>
 8002cc8:	1c43      	adds	r3, r0, #1
 8002cca:	4604      	mov	r4, r0
 8002ccc:	d14d      	bne.n	8002d6a <_malloc_r+0xde>
 8002cce:	6834      	ldr	r4, [r6, #0]
 8002cd0:	4626      	mov	r6, r4
 8002cd2:	2e00      	cmp	r6, #0
 8002cd4:	d140      	bne.n	8002d58 <_malloc_r+0xcc>
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	4631      	mov	r1, r6
 8002cda:	4638      	mov	r0, r7
 8002cdc:	eb04 0803 	add.w	r8, r4, r3
 8002ce0:	f000 fb36 	bl	8003350 <_sbrk_r>
 8002ce4:	4580      	cmp	r8, r0
 8002ce6:	d13a      	bne.n	8002d5e <_malloc_r+0xd2>
 8002ce8:	6821      	ldr	r1, [r4, #0]
 8002cea:	3503      	adds	r5, #3
 8002cec:	1a6d      	subs	r5, r5, r1
 8002cee:	f025 0503 	bic.w	r5, r5, #3
 8002cf2:	3508      	adds	r5, #8
 8002cf4:	2d0c      	cmp	r5, #12
 8002cf6:	bf38      	it	cc
 8002cf8:	250c      	movcc	r5, #12
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	f7ff ffa5 	bl	8002c4c <sbrk_aligned>
 8002d02:	3001      	adds	r0, #1
 8002d04:	d02b      	beq.n	8002d5e <_malloc_r+0xd2>
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	442b      	add	r3, r5
 8002d0a:	6023      	str	r3, [r4, #0]
 8002d0c:	e00e      	b.n	8002d2c <_malloc_r+0xa0>
 8002d0e:	6822      	ldr	r2, [r4, #0]
 8002d10:	1b52      	subs	r2, r2, r5
 8002d12:	d41e      	bmi.n	8002d52 <_malloc_r+0xc6>
 8002d14:	2a0b      	cmp	r2, #11
 8002d16:	d916      	bls.n	8002d46 <_malloc_r+0xba>
 8002d18:	1961      	adds	r1, r4, r5
 8002d1a:	42a3      	cmp	r3, r4
 8002d1c:	6025      	str	r5, [r4, #0]
 8002d1e:	bf18      	it	ne
 8002d20:	6059      	strne	r1, [r3, #4]
 8002d22:	6863      	ldr	r3, [r4, #4]
 8002d24:	bf08      	it	eq
 8002d26:	6031      	streq	r1, [r6, #0]
 8002d28:	5162      	str	r2, [r4, r5]
 8002d2a:	604b      	str	r3, [r1, #4]
 8002d2c:	4638      	mov	r0, r7
 8002d2e:	f104 060b 	add.w	r6, r4, #11
 8002d32:	f000 fd83 	bl	800383c <__malloc_unlock>
 8002d36:	f026 0607 	bic.w	r6, r6, #7
 8002d3a:	1d23      	adds	r3, r4, #4
 8002d3c:	1af2      	subs	r2, r6, r3
 8002d3e:	d0b6      	beq.n	8002cae <_malloc_r+0x22>
 8002d40:	1b9b      	subs	r3, r3, r6
 8002d42:	50a3      	str	r3, [r4, r2]
 8002d44:	e7b3      	b.n	8002cae <_malloc_r+0x22>
 8002d46:	6862      	ldr	r2, [r4, #4]
 8002d48:	42a3      	cmp	r3, r4
 8002d4a:	bf0c      	ite	eq
 8002d4c:	6032      	streq	r2, [r6, #0]
 8002d4e:	605a      	strne	r2, [r3, #4]
 8002d50:	e7ec      	b.n	8002d2c <_malloc_r+0xa0>
 8002d52:	4623      	mov	r3, r4
 8002d54:	6864      	ldr	r4, [r4, #4]
 8002d56:	e7b2      	b.n	8002cbe <_malloc_r+0x32>
 8002d58:	4634      	mov	r4, r6
 8002d5a:	6876      	ldr	r6, [r6, #4]
 8002d5c:	e7b9      	b.n	8002cd2 <_malloc_r+0x46>
 8002d5e:	230c      	movs	r3, #12
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	4638      	mov	r0, r7
 8002d64:	f000 fd6a 	bl	800383c <__malloc_unlock>
 8002d68:	e7a1      	b.n	8002cae <_malloc_r+0x22>
 8002d6a:	6025      	str	r5, [r4, #0]
 8002d6c:	e7de      	b.n	8002d2c <_malloc_r+0xa0>
 8002d6e:	bf00      	nop
 8002d70:	20000154 	.word	0x20000154

08002d74 <__sfputc_r>:
 8002d74:	6893      	ldr	r3, [r2, #8]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	b410      	push	{r4}
 8002d7c:	6093      	str	r3, [r2, #8]
 8002d7e:	da08      	bge.n	8002d92 <__sfputc_r+0x1e>
 8002d80:	6994      	ldr	r4, [r2, #24]
 8002d82:	42a3      	cmp	r3, r4
 8002d84:	db01      	blt.n	8002d8a <__sfputc_r+0x16>
 8002d86:	290a      	cmp	r1, #10
 8002d88:	d103      	bne.n	8002d92 <__sfputc_r+0x1e>
 8002d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d8e:	f000 bb33 	b.w	80033f8 <__swbuf_r>
 8002d92:	6813      	ldr	r3, [r2, #0]
 8002d94:	1c58      	adds	r0, r3, #1
 8002d96:	6010      	str	r0, [r2, #0]
 8002d98:	7019      	strb	r1, [r3, #0]
 8002d9a:	4608      	mov	r0, r1
 8002d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <__sfputs_r>:
 8002da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da4:	4606      	mov	r6, r0
 8002da6:	460f      	mov	r7, r1
 8002da8:	4614      	mov	r4, r2
 8002daa:	18d5      	adds	r5, r2, r3
 8002dac:	42ac      	cmp	r4, r5
 8002dae:	d101      	bne.n	8002db4 <__sfputs_r+0x12>
 8002db0:	2000      	movs	r0, #0
 8002db2:	e007      	b.n	8002dc4 <__sfputs_r+0x22>
 8002db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db8:	463a      	mov	r2, r7
 8002dba:	4630      	mov	r0, r6
 8002dbc:	f7ff ffda 	bl	8002d74 <__sfputc_r>
 8002dc0:	1c43      	adds	r3, r0, #1
 8002dc2:	d1f3      	bne.n	8002dac <__sfputs_r+0xa>
 8002dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002dc8 <_vfiprintf_r>:
 8002dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dcc:	460d      	mov	r5, r1
 8002dce:	b09d      	sub	sp, #116	; 0x74
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	4698      	mov	r8, r3
 8002dd4:	4606      	mov	r6, r0
 8002dd6:	b118      	cbz	r0, 8002de0 <_vfiprintf_r+0x18>
 8002dd8:	6983      	ldr	r3, [r0, #24]
 8002dda:	b90b      	cbnz	r3, 8002de0 <_vfiprintf_r+0x18>
 8002ddc:	f7ff fe96 	bl	8002b0c <__sinit>
 8002de0:	4b89      	ldr	r3, [pc, #548]	; (8003008 <_vfiprintf_r+0x240>)
 8002de2:	429d      	cmp	r5, r3
 8002de4:	d11b      	bne.n	8002e1e <_vfiprintf_r+0x56>
 8002de6:	6875      	ldr	r5, [r6, #4]
 8002de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002dea:	07d9      	lsls	r1, r3, #31
 8002dec:	d405      	bmi.n	8002dfa <_vfiprintf_r+0x32>
 8002dee:	89ab      	ldrh	r3, [r5, #12]
 8002df0:	059a      	lsls	r2, r3, #22
 8002df2:	d402      	bmi.n	8002dfa <_vfiprintf_r+0x32>
 8002df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002df6:	f7ff ff27 	bl	8002c48 <__retarget_lock_acquire_recursive>
 8002dfa:	89ab      	ldrh	r3, [r5, #12]
 8002dfc:	071b      	lsls	r3, r3, #28
 8002dfe:	d501      	bpl.n	8002e04 <_vfiprintf_r+0x3c>
 8002e00:	692b      	ldr	r3, [r5, #16]
 8002e02:	b9eb      	cbnz	r3, 8002e40 <_vfiprintf_r+0x78>
 8002e04:	4629      	mov	r1, r5
 8002e06:	4630      	mov	r0, r6
 8002e08:	f000 fb5a 	bl	80034c0 <__swsetup_r>
 8002e0c:	b1c0      	cbz	r0, 8002e40 <_vfiprintf_r+0x78>
 8002e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e10:	07dc      	lsls	r4, r3, #31
 8002e12:	d50e      	bpl.n	8002e32 <_vfiprintf_r+0x6a>
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295
 8002e18:	b01d      	add	sp, #116	; 0x74
 8002e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e1e:	4b7b      	ldr	r3, [pc, #492]	; (800300c <_vfiprintf_r+0x244>)
 8002e20:	429d      	cmp	r5, r3
 8002e22:	d101      	bne.n	8002e28 <_vfiprintf_r+0x60>
 8002e24:	68b5      	ldr	r5, [r6, #8]
 8002e26:	e7df      	b.n	8002de8 <_vfiprintf_r+0x20>
 8002e28:	4b79      	ldr	r3, [pc, #484]	; (8003010 <_vfiprintf_r+0x248>)
 8002e2a:	429d      	cmp	r5, r3
 8002e2c:	bf08      	it	eq
 8002e2e:	68f5      	ldreq	r5, [r6, #12]
 8002e30:	e7da      	b.n	8002de8 <_vfiprintf_r+0x20>
 8002e32:	89ab      	ldrh	r3, [r5, #12]
 8002e34:	0598      	lsls	r0, r3, #22
 8002e36:	d4ed      	bmi.n	8002e14 <_vfiprintf_r+0x4c>
 8002e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e3a:	f7ff ff06 	bl	8002c4a <__retarget_lock_release_recursive>
 8002e3e:	e7e9      	b.n	8002e14 <_vfiprintf_r+0x4c>
 8002e40:	2300      	movs	r3, #0
 8002e42:	9309      	str	r3, [sp, #36]	; 0x24
 8002e44:	2320      	movs	r3, #32
 8002e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002e4e:	2330      	movs	r3, #48	; 0x30
 8002e50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003014 <_vfiprintf_r+0x24c>
 8002e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e58:	f04f 0901 	mov.w	r9, #1
 8002e5c:	4623      	mov	r3, r4
 8002e5e:	469a      	mov	sl, r3
 8002e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e64:	b10a      	cbz	r2, 8002e6a <_vfiprintf_r+0xa2>
 8002e66:	2a25      	cmp	r2, #37	; 0x25
 8002e68:	d1f9      	bne.n	8002e5e <_vfiprintf_r+0x96>
 8002e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8002e6e:	d00b      	beq.n	8002e88 <_vfiprintf_r+0xc0>
 8002e70:	465b      	mov	r3, fp
 8002e72:	4622      	mov	r2, r4
 8002e74:	4629      	mov	r1, r5
 8002e76:	4630      	mov	r0, r6
 8002e78:	f7ff ff93 	bl	8002da2 <__sfputs_r>
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	f000 80aa 	beq.w	8002fd6 <_vfiprintf_r+0x20e>
 8002e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e84:	445a      	add	r2, fp
 8002e86:	9209      	str	r2, [sp, #36]	; 0x24
 8002e88:	f89a 3000 	ldrb.w	r3, [sl]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a2 	beq.w	8002fd6 <_vfiprintf_r+0x20e>
 8002e92:	2300      	movs	r3, #0
 8002e94:	f04f 32ff 	mov.w	r2, #4294967295
 8002e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e9c:	f10a 0a01 	add.w	sl, sl, #1
 8002ea0:	9304      	str	r3, [sp, #16]
 8002ea2:	9307      	str	r3, [sp, #28]
 8002ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8002eaa:	4654      	mov	r4, sl
 8002eac:	2205      	movs	r2, #5
 8002eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eb2:	4858      	ldr	r0, [pc, #352]	; (8003014 <_vfiprintf_r+0x24c>)
 8002eb4:	f7fd f98c 	bl	80001d0 <memchr>
 8002eb8:	9a04      	ldr	r2, [sp, #16]
 8002eba:	b9d8      	cbnz	r0, 8002ef4 <_vfiprintf_r+0x12c>
 8002ebc:	06d1      	lsls	r1, r2, #27
 8002ebe:	bf44      	itt	mi
 8002ec0:	2320      	movmi	r3, #32
 8002ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ec6:	0713      	lsls	r3, r2, #28
 8002ec8:	bf44      	itt	mi
 8002eca:	232b      	movmi	r3, #43	; 0x2b
 8002ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8002ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed6:	d015      	beq.n	8002f04 <_vfiprintf_r+0x13c>
 8002ed8:	9a07      	ldr	r2, [sp, #28]
 8002eda:	4654      	mov	r4, sl
 8002edc:	2000      	movs	r0, #0
 8002ede:	f04f 0c0a 	mov.w	ip, #10
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ee8:	3b30      	subs	r3, #48	; 0x30
 8002eea:	2b09      	cmp	r3, #9
 8002eec:	d94e      	bls.n	8002f8c <_vfiprintf_r+0x1c4>
 8002eee:	b1b0      	cbz	r0, 8002f1e <_vfiprintf_r+0x156>
 8002ef0:	9207      	str	r2, [sp, #28]
 8002ef2:	e014      	b.n	8002f1e <_vfiprintf_r+0x156>
 8002ef4:	eba0 0308 	sub.w	r3, r0, r8
 8002ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8002efc:	4313      	orrs	r3, r2
 8002efe:	9304      	str	r3, [sp, #16]
 8002f00:	46a2      	mov	sl, r4
 8002f02:	e7d2      	b.n	8002eaa <_vfiprintf_r+0xe2>
 8002f04:	9b03      	ldr	r3, [sp, #12]
 8002f06:	1d19      	adds	r1, r3, #4
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	9103      	str	r1, [sp, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bfbb      	ittet	lt
 8002f10:	425b      	neglt	r3, r3
 8002f12:	f042 0202 	orrlt.w	r2, r2, #2
 8002f16:	9307      	strge	r3, [sp, #28]
 8002f18:	9307      	strlt	r3, [sp, #28]
 8002f1a:	bfb8      	it	lt
 8002f1c:	9204      	strlt	r2, [sp, #16]
 8002f1e:	7823      	ldrb	r3, [r4, #0]
 8002f20:	2b2e      	cmp	r3, #46	; 0x2e
 8002f22:	d10c      	bne.n	8002f3e <_vfiprintf_r+0x176>
 8002f24:	7863      	ldrb	r3, [r4, #1]
 8002f26:	2b2a      	cmp	r3, #42	; 0x2a
 8002f28:	d135      	bne.n	8002f96 <_vfiprintf_r+0x1ce>
 8002f2a:	9b03      	ldr	r3, [sp, #12]
 8002f2c:	1d1a      	adds	r2, r3, #4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	9203      	str	r2, [sp, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	bfb8      	it	lt
 8002f36:	f04f 33ff 	movlt.w	r3, #4294967295
 8002f3a:	3402      	adds	r4, #2
 8002f3c:	9305      	str	r3, [sp, #20]
 8002f3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003024 <_vfiprintf_r+0x25c>
 8002f42:	7821      	ldrb	r1, [r4, #0]
 8002f44:	2203      	movs	r2, #3
 8002f46:	4650      	mov	r0, sl
 8002f48:	f7fd f942 	bl	80001d0 <memchr>
 8002f4c:	b140      	cbz	r0, 8002f60 <_vfiprintf_r+0x198>
 8002f4e:	2340      	movs	r3, #64	; 0x40
 8002f50:	eba0 000a 	sub.w	r0, r0, sl
 8002f54:	fa03 f000 	lsl.w	r0, r3, r0
 8002f58:	9b04      	ldr	r3, [sp, #16]
 8002f5a:	4303      	orrs	r3, r0
 8002f5c:	3401      	adds	r4, #1
 8002f5e:	9304      	str	r3, [sp, #16]
 8002f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f64:	482c      	ldr	r0, [pc, #176]	; (8003018 <_vfiprintf_r+0x250>)
 8002f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f6a:	2206      	movs	r2, #6
 8002f6c:	f7fd f930 	bl	80001d0 <memchr>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d03f      	beq.n	8002ff4 <_vfiprintf_r+0x22c>
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <_vfiprintf_r+0x254>)
 8002f76:	bb1b      	cbnz	r3, 8002fc0 <_vfiprintf_r+0x1f8>
 8002f78:	9b03      	ldr	r3, [sp, #12]
 8002f7a:	3307      	adds	r3, #7
 8002f7c:	f023 0307 	bic.w	r3, r3, #7
 8002f80:	3308      	adds	r3, #8
 8002f82:	9303      	str	r3, [sp, #12]
 8002f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f86:	443b      	add	r3, r7
 8002f88:	9309      	str	r3, [sp, #36]	; 0x24
 8002f8a:	e767      	b.n	8002e5c <_vfiprintf_r+0x94>
 8002f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f90:	460c      	mov	r4, r1
 8002f92:	2001      	movs	r0, #1
 8002f94:	e7a5      	b.n	8002ee2 <_vfiprintf_r+0x11a>
 8002f96:	2300      	movs	r3, #0
 8002f98:	3401      	adds	r4, #1
 8002f9a:	9305      	str	r3, [sp, #20]
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f04f 0c0a 	mov.w	ip, #10
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002fa8:	3a30      	subs	r2, #48	; 0x30
 8002faa:	2a09      	cmp	r2, #9
 8002fac:	d903      	bls.n	8002fb6 <_vfiprintf_r+0x1ee>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0c5      	beq.n	8002f3e <_vfiprintf_r+0x176>
 8002fb2:	9105      	str	r1, [sp, #20]
 8002fb4:	e7c3      	b.n	8002f3e <_vfiprintf_r+0x176>
 8002fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8002fba:	4604      	mov	r4, r0
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e7f0      	b.n	8002fa2 <_vfiprintf_r+0x1da>
 8002fc0:	ab03      	add	r3, sp, #12
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	462a      	mov	r2, r5
 8002fc6:	4b16      	ldr	r3, [pc, #88]	; (8003020 <_vfiprintf_r+0x258>)
 8002fc8:	a904      	add	r1, sp, #16
 8002fca:	4630      	mov	r0, r6
 8002fcc:	f3af 8000 	nop.w
 8002fd0:	4607      	mov	r7, r0
 8002fd2:	1c78      	adds	r0, r7, #1
 8002fd4:	d1d6      	bne.n	8002f84 <_vfiprintf_r+0x1bc>
 8002fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002fd8:	07d9      	lsls	r1, r3, #31
 8002fda:	d405      	bmi.n	8002fe8 <_vfiprintf_r+0x220>
 8002fdc:	89ab      	ldrh	r3, [r5, #12]
 8002fde:	059a      	lsls	r2, r3, #22
 8002fe0:	d402      	bmi.n	8002fe8 <_vfiprintf_r+0x220>
 8002fe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002fe4:	f7ff fe31 	bl	8002c4a <__retarget_lock_release_recursive>
 8002fe8:	89ab      	ldrh	r3, [r5, #12]
 8002fea:	065b      	lsls	r3, r3, #25
 8002fec:	f53f af12 	bmi.w	8002e14 <_vfiprintf_r+0x4c>
 8002ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ff2:	e711      	b.n	8002e18 <_vfiprintf_r+0x50>
 8002ff4:	ab03      	add	r3, sp, #12
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	462a      	mov	r2, r5
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <_vfiprintf_r+0x258>)
 8002ffc:	a904      	add	r1, sp, #16
 8002ffe:	4630      	mov	r0, r6
 8003000:	f000 f880 	bl	8003104 <_printf_i>
 8003004:	e7e4      	b.n	8002fd0 <_vfiprintf_r+0x208>
 8003006:	bf00      	nop
 8003008:	080039a8 	.word	0x080039a8
 800300c:	080039c8 	.word	0x080039c8
 8003010:	08003988 	.word	0x08003988
 8003014:	080039e8 	.word	0x080039e8
 8003018:	080039f2 	.word	0x080039f2
 800301c:	00000000 	.word	0x00000000
 8003020:	08002da3 	.word	0x08002da3
 8003024:	080039ee 	.word	0x080039ee

08003028 <_printf_common>:
 8003028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800302c:	4616      	mov	r6, r2
 800302e:	4699      	mov	r9, r3
 8003030:	688a      	ldr	r2, [r1, #8]
 8003032:	690b      	ldr	r3, [r1, #16]
 8003034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003038:	4293      	cmp	r3, r2
 800303a:	bfb8      	it	lt
 800303c:	4613      	movlt	r3, r2
 800303e:	6033      	str	r3, [r6, #0]
 8003040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003044:	4607      	mov	r7, r0
 8003046:	460c      	mov	r4, r1
 8003048:	b10a      	cbz	r2, 800304e <_printf_common+0x26>
 800304a:	3301      	adds	r3, #1
 800304c:	6033      	str	r3, [r6, #0]
 800304e:	6823      	ldr	r3, [r4, #0]
 8003050:	0699      	lsls	r1, r3, #26
 8003052:	bf42      	ittt	mi
 8003054:	6833      	ldrmi	r3, [r6, #0]
 8003056:	3302      	addmi	r3, #2
 8003058:	6033      	strmi	r3, [r6, #0]
 800305a:	6825      	ldr	r5, [r4, #0]
 800305c:	f015 0506 	ands.w	r5, r5, #6
 8003060:	d106      	bne.n	8003070 <_printf_common+0x48>
 8003062:	f104 0a19 	add.w	sl, r4, #25
 8003066:	68e3      	ldr	r3, [r4, #12]
 8003068:	6832      	ldr	r2, [r6, #0]
 800306a:	1a9b      	subs	r3, r3, r2
 800306c:	42ab      	cmp	r3, r5
 800306e:	dc26      	bgt.n	80030be <_printf_common+0x96>
 8003070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003074:	1e13      	subs	r3, r2, #0
 8003076:	6822      	ldr	r2, [r4, #0]
 8003078:	bf18      	it	ne
 800307a:	2301      	movne	r3, #1
 800307c:	0692      	lsls	r2, r2, #26
 800307e:	d42b      	bmi.n	80030d8 <_printf_common+0xb0>
 8003080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003084:	4649      	mov	r1, r9
 8003086:	4638      	mov	r0, r7
 8003088:	47c0      	blx	r8
 800308a:	3001      	adds	r0, #1
 800308c:	d01e      	beq.n	80030cc <_printf_common+0xa4>
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	68e5      	ldr	r5, [r4, #12]
 8003092:	6832      	ldr	r2, [r6, #0]
 8003094:	f003 0306 	and.w	r3, r3, #6
 8003098:	2b04      	cmp	r3, #4
 800309a:	bf08      	it	eq
 800309c:	1aad      	subeq	r5, r5, r2
 800309e:	68a3      	ldr	r3, [r4, #8]
 80030a0:	6922      	ldr	r2, [r4, #16]
 80030a2:	bf0c      	ite	eq
 80030a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030a8:	2500      	movne	r5, #0
 80030aa:	4293      	cmp	r3, r2
 80030ac:	bfc4      	itt	gt
 80030ae:	1a9b      	subgt	r3, r3, r2
 80030b0:	18ed      	addgt	r5, r5, r3
 80030b2:	2600      	movs	r6, #0
 80030b4:	341a      	adds	r4, #26
 80030b6:	42b5      	cmp	r5, r6
 80030b8:	d11a      	bne.n	80030f0 <_printf_common+0xc8>
 80030ba:	2000      	movs	r0, #0
 80030bc:	e008      	b.n	80030d0 <_printf_common+0xa8>
 80030be:	2301      	movs	r3, #1
 80030c0:	4652      	mov	r2, sl
 80030c2:	4649      	mov	r1, r9
 80030c4:	4638      	mov	r0, r7
 80030c6:	47c0      	blx	r8
 80030c8:	3001      	adds	r0, #1
 80030ca:	d103      	bne.n	80030d4 <_printf_common+0xac>
 80030cc:	f04f 30ff 	mov.w	r0, #4294967295
 80030d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d4:	3501      	adds	r5, #1
 80030d6:	e7c6      	b.n	8003066 <_printf_common+0x3e>
 80030d8:	18e1      	adds	r1, r4, r3
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	2030      	movs	r0, #48	; 0x30
 80030de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030e2:	4422      	add	r2, r4
 80030e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030ec:	3302      	adds	r3, #2
 80030ee:	e7c7      	b.n	8003080 <_printf_common+0x58>
 80030f0:	2301      	movs	r3, #1
 80030f2:	4622      	mov	r2, r4
 80030f4:	4649      	mov	r1, r9
 80030f6:	4638      	mov	r0, r7
 80030f8:	47c0      	blx	r8
 80030fa:	3001      	adds	r0, #1
 80030fc:	d0e6      	beq.n	80030cc <_printf_common+0xa4>
 80030fe:	3601      	adds	r6, #1
 8003100:	e7d9      	b.n	80030b6 <_printf_common+0x8e>
	...

08003104 <_printf_i>:
 8003104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003108:	7e0f      	ldrb	r7, [r1, #24]
 800310a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800310c:	2f78      	cmp	r7, #120	; 0x78
 800310e:	4691      	mov	r9, r2
 8003110:	4680      	mov	r8, r0
 8003112:	460c      	mov	r4, r1
 8003114:	469a      	mov	sl, r3
 8003116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800311a:	d807      	bhi.n	800312c <_printf_i+0x28>
 800311c:	2f62      	cmp	r7, #98	; 0x62
 800311e:	d80a      	bhi.n	8003136 <_printf_i+0x32>
 8003120:	2f00      	cmp	r7, #0
 8003122:	f000 80d8 	beq.w	80032d6 <_printf_i+0x1d2>
 8003126:	2f58      	cmp	r7, #88	; 0x58
 8003128:	f000 80a3 	beq.w	8003272 <_printf_i+0x16e>
 800312c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003134:	e03a      	b.n	80031ac <_printf_i+0xa8>
 8003136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800313a:	2b15      	cmp	r3, #21
 800313c:	d8f6      	bhi.n	800312c <_printf_i+0x28>
 800313e:	a101      	add	r1, pc, #4	; (adr r1, 8003144 <_printf_i+0x40>)
 8003140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003144:	0800319d 	.word	0x0800319d
 8003148:	080031b1 	.word	0x080031b1
 800314c:	0800312d 	.word	0x0800312d
 8003150:	0800312d 	.word	0x0800312d
 8003154:	0800312d 	.word	0x0800312d
 8003158:	0800312d 	.word	0x0800312d
 800315c:	080031b1 	.word	0x080031b1
 8003160:	0800312d 	.word	0x0800312d
 8003164:	0800312d 	.word	0x0800312d
 8003168:	0800312d 	.word	0x0800312d
 800316c:	0800312d 	.word	0x0800312d
 8003170:	080032bd 	.word	0x080032bd
 8003174:	080031e1 	.word	0x080031e1
 8003178:	0800329f 	.word	0x0800329f
 800317c:	0800312d 	.word	0x0800312d
 8003180:	0800312d 	.word	0x0800312d
 8003184:	080032df 	.word	0x080032df
 8003188:	0800312d 	.word	0x0800312d
 800318c:	080031e1 	.word	0x080031e1
 8003190:	0800312d 	.word	0x0800312d
 8003194:	0800312d 	.word	0x0800312d
 8003198:	080032a7 	.word	0x080032a7
 800319c:	682b      	ldr	r3, [r5, #0]
 800319e:	1d1a      	adds	r2, r3, #4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	602a      	str	r2, [r5, #0]
 80031a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0a3      	b.n	80032f8 <_printf_i+0x1f4>
 80031b0:	6820      	ldr	r0, [r4, #0]
 80031b2:	6829      	ldr	r1, [r5, #0]
 80031b4:	0606      	lsls	r6, r0, #24
 80031b6:	f101 0304 	add.w	r3, r1, #4
 80031ba:	d50a      	bpl.n	80031d2 <_printf_i+0xce>
 80031bc:	680e      	ldr	r6, [r1, #0]
 80031be:	602b      	str	r3, [r5, #0]
 80031c0:	2e00      	cmp	r6, #0
 80031c2:	da03      	bge.n	80031cc <_printf_i+0xc8>
 80031c4:	232d      	movs	r3, #45	; 0x2d
 80031c6:	4276      	negs	r6, r6
 80031c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031cc:	485e      	ldr	r0, [pc, #376]	; (8003348 <_printf_i+0x244>)
 80031ce:	230a      	movs	r3, #10
 80031d0:	e019      	b.n	8003206 <_printf_i+0x102>
 80031d2:	680e      	ldr	r6, [r1, #0]
 80031d4:	602b      	str	r3, [r5, #0]
 80031d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031da:	bf18      	it	ne
 80031dc:	b236      	sxthne	r6, r6
 80031de:	e7ef      	b.n	80031c0 <_printf_i+0xbc>
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	6820      	ldr	r0, [r4, #0]
 80031e4:	1d19      	adds	r1, r3, #4
 80031e6:	6029      	str	r1, [r5, #0]
 80031e8:	0601      	lsls	r1, r0, #24
 80031ea:	d501      	bpl.n	80031f0 <_printf_i+0xec>
 80031ec:	681e      	ldr	r6, [r3, #0]
 80031ee:	e002      	b.n	80031f6 <_printf_i+0xf2>
 80031f0:	0646      	lsls	r6, r0, #25
 80031f2:	d5fb      	bpl.n	80031ec <_printf_i+0xe8>
 80031f4:	881e      	ldrh	r6, [r3, #0]
 80031f6:	4854      	ldr	r0, [pc, #336]	; (8003348 <_printf_i+0x244>)
 80031f8:	2f6f      	cmp	r7, #111	; 0x6f
 80031fa:	bf0c      	ite	eq
 80031fc:	2308      	moveq	r3, #8
 80031fe:	230a      	movne	r3, #10
 8003200:	2100      	movs	r1, #0
 8003202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003206:	6865      	ldr	r5, [r4, #4]
 8003208:	60a5      	str	r5, [r4, #8]
 800320a:	2d00      	cmp	r5, #0
 800320c:	bfa2      	ittt	ge
 800320e:	6821      	ldrge	r1, [r4, #0]
 8003210:	f021 0104 	bicge.w	r1, r1, #4
 8003214:	6021      	strge	r1, [r4, #0]
 8003216:	b90e      	cbnz	r6, 800321c <_printf_i+0x118>
 8003218:	2d00      	cmp	r5, #0
 800321a:	d04d      	beq.n	80032b8 <_printf_i+0x1b4>
 800321c:	4615      	mov	r5, r2
 800321e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003222:	fb03 6711 	mls	r7, r3, r1, r6
 8003226:	5dc7      	ldrb	r7, [r0, r7]
 8003228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800322c:	4637      	mov	r7, r6
 800322e:	42bb      	cmp	r3, r7
 8003230:	460e      	mov	r6, r1
 8003232:	d9f4      	bls.n	800321e <_printf_i+0x11a>
 8003234:	2b08      	cmp	r3, #8
 8003236:	d10b      	bne.n	8003250 <_printf_i+0x14c>
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	07de      	lsls	r6, r3, #31
 800323c:	d508      	bpl.n	8003250 <_printf_i+0x14c>
 800323e:	6923      	ldr	r3, [r4, #16]
 8003240:	6861      	ldr	r1, [r4, #4]
 8003242:	4299      	cmp	r1, r3
 8003244:	bfde      	ittt	le
 8003246:	2330      	movle	r3, #48	; 0x30
 8003248:	f805 3c01 	strble.w	r3, [r5, #-1]
 800324c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003250:	1b52      	subs	r2, r2, r5
 8003252:	6122      	str	r2, [r4, #16]
 8003254:	f8cd a000 	str.w	sl, [sp]
 8003258:	464b      	mov	r3, r9
 800325a:	aa03      	add	r2, sp, #12
 800325c:	4621      	mov	r1, r4
 800325e:	4640      	mov	r0, r8
 8003260:	f7ff fee2 	bl	8003028 <_printf_common>
 8003264:	3001      	adds	r0, #1
 8003266:	d14c      	bne.n	8003302 <_printf_i+0x1fe>
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	b004      	add	sp, #16
 800326e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003272:	4835      	ldr	r0, [pc, #212]	; (8003348 <_printf_i+0x244>)
 8003274:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003278:	6829      	ldr	r1, [r5, #0]
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003280:	6029      	str	r1, [r5, #0]
 8003282:	061d      	lsls	r5, r3, #24
 8003284:	d514      	bpl.n	80032b0 <_printf_i+0x1ac>
 8003286:	07df      	lsls	r7, r3, #31
 8003288:	bf44      	itt	mi
 800328a:	f043 0320 	orrmi.w	r3, r3, #32
 800328e:	6023      	strmi	r3, [r4, #0]
 8003290:	b91e      	cbnz	r6, 800329a <_printf_i+0x196>
 8003292:	6823      	ldr	r3, [r4, #0]
 8003294:	f023 0320 	bic.w	r3, r3, #32
 8003298:	6023      	str	r3, [r4, #0]
 800329a:	2310      	movs	r3, #16
 800329c:	e7b0      	b.n	8003200 <_printf_i+0xfc>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	f043 0320 	orr.w	r3, r3, #32
 80032a4:	6023      	str	r3, [r4, #0]
 80032a6:	2378      	movs	r3, #120	; 0x78
 80032a8:	4828      	ldr	r0, [pc, #160]	; (800334c <_printf_i+0x248>)
 80032aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032ae:	e7e3      	b.n	8003278 <_printf_i+0x174>
 80032b0:	0659      	lsls	r1, r3, #25
 80032b2:	bf48      	it	mi
 80032b4:	b2b6      	uxthmi	r6, r6
 80032b6:	e7e6      	b.n	8003286 <_printf_i+0x182>
 80032b8:	4615      	mov	r5, r2
 80032ba:	e7bb      	b.n	8003234 <_printf_i+0x130>
 80032bc:	682b      	ldr	r3, [r5, #0]
 80032be:	6826      	ldr	r6, [r4, #0]
 80032c0:	6961      	ldr	r1, [r4, #20]
 80032c2:	1d18      	adds	r0, r3, #4
 80032c4:	6028      	str	r0, [r5, #0]
 80032c6:	0635      	lsls	r5, r6, #24
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	d501      	bpl.n	80032d0 <_printf_i+0x1cc>
 80032cc:	6019      	str	r1, [r3, #0]
 80032ce:	e002      	b.n	80032d6 <_printf_i+0x1d2>
 80032d0:	0670      	lsls	r0, r6, #25
 80032d2:	d5fb      	bpl.n	80032cc <_printf_i+0x1c8>
 80032d4:	8019      	strh	r1, [r3, #0]
 80032d6:	2300      	movs	r3, #0
 80032d8:	6123      	str	r3, [r4, #16]
 80032da:	4615      	mov	r5, r2
 80032dc:	e7ba      	b.n	8003254 <_printf_i+0x150>
 80032de:	682b      	ldr	r3, [r5, #0]
 80032e0:	1d1a      	adds	r2, r3, #4
 80032e2:	602a      	str	r2, [r5, #0]
 80032e4:	681d      	ldr	r5, [r3, #0]
 80032e6:	6862      	ldr	r2, [r4, #4]
 80032e8:	2100      	movs	r1, #0
 80032ea:	4628      	mov	r0, r5
 80032ec:	f7fc ff70 	bl	80001d0 <memchr>
 80032f0:	b108      	cbz	r0, 80032f6 <_printf_i+0x1f2>
 80032f2:	1b40      	subs	r0, r0, r5
 80032f4:	6060      	str	r0, [r4, #4]
 80032f6:	6863      	ldr	r3, [r4, #4]
 80032f8:	6123      	str	r3, [r4, #16]
 80032fa:	2300      	movs	r3, #0
 80032fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003300:	e7a8      	b.n	8003254 <_printf_i+0x150>
 8003302:	6923      	ldr	r3, [r4, #16]
 8003304:	462a      	mov	r2, r5
 8003306:	4649      	mov	r1, r9
 8003308:	4640      	mov	r0, r8
 800330a:	47d0      	blx	sl
 800330c:	3001      	adds	r0, #1
 800330e:	d0ab      	beq.n	8003268 <_printf_i+0x164>
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	079b      	lsls	r3, r3, #30
 8003314:	d413      	bmi.n	800333e <_printf_i+0x23a>
 8003316:	68e0      	ldr	r0, [r4, #12]
 8003318:	9b03      	ldr	r3, [sp, #12]
 800331a:	4298      	cmp	r0, r3
 800331c:	bfb8      	it	lt
 800331e:	4618      	movlt	r0, r3
 8003320:	e7a4      	b.n	800326c <_printf_i+0x168>
 8003322:	2301      	movs	r3, #1
 8003324:	4632      	mov	r2, r6
 8003326:	4649      	mov	r1, r9
 8003328:	4640      	mov	r0, r8
 800332a:	47d0      	blx	sl
 800332c:	3001      	adds	r0, #1
 800332e:	d09b      	beq.n	8003268 <_printf_i+0x164>
 8003330:	3501      	adds	r5, #1
 8003332:	68e3      	ldr	r3, [r4, #12]
 8003334:	9903      	ldr	r1, [sp, #12]
 8003336:	1a5b      	subs	r3, r3, r1
 8003338:	42ab      	cmp	r3, r5
 800333a:	dcf2      	bgt.n	8003322 <_printf_i+0x21e>
 800333c:	e7eb      	b.n	8003316 <_printf_i+0x212>
 800333e:	2500      	movs	r5, #0
 8003340:	f104 0619 	add.w	r6, r4, #25
 8003344:	e7f5      	b.n	8003332 <_printf_i+0x22e>
 8003346:	bf00      	nop
 8003348:	080039f9 	.word	0x080039f9
 800334c:	08003a0a 	.word	0x08003a0a

08003350 <_sbrk_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	4d06      	ldr	r5, [pc, #24]	; (800336c <_sbrk_r+0x1c>)
 8003354:	2300      	movs	r3, #0
 8003356:	4604      	mov	r4, r0
 8003358:	4608      	mov	r0, r1
 800335a:	602b      	str	r3, [r5, #0]
 800335c:	f7fd fdd2 	bl	8000f04 <_sbrk>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	d102      	bne.n	800336a <_sbrk_r+0x1a>
 8003364:	682b      	ldr	r3, [r5, #0]
 8003366:	b103      	cbz	r3, 800336a <_sbrk_r+0x1a>
 8003368:	6023      	str	r3, [r4, #0]
 800336a:	bd38      	pop	{r3, r4, r5, pc}
 800336c:	2000015c 	.word	0x2000015c

08003370 <__sread>:
 8003370:	b510      	push	{r4, lr}
 8003372:	460c      	mov	r4, r1
 8003374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003378:	f000 fab2 	bl	80038e0 <_read_r>
 800337c:	2800      	cmp	r0, #0
 800337e:	bfab      	itete	ge
 8003380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003382:	89a3      	ldrhlt	r3, [r4, #12]
 8003384:	181b      	addge	r3, r3, r0
 8003386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800338a:	bfac      	ite	ge
 800338c:	6563      	strge	r3, [r4, #84]	; 0x54
 800338e:	81a3      	strhlt	r3, [r4, #12]
 8003390:	bd10      	pop	{r4, pc}

08003392 <__swrite>:
 8003392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003396:	461f      	mov	r7, r3
 8003398:	898b      	ldrh	r3, [r1, #12]
 800339a:	05db      	lsls	r3, r3, #23
 800339c:	4605      	mov	r5, r0
 800339e:	460c      	mov	r4, r1
 80033a0:	4616      	mov	r6, r2
 80033a2:	d505      	bpl.n	80033b0 <__swrite+0x1e>
 80033a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a8:	2302      	movs	r3, #2
 80033aa:	2200      	movs	r2, #0
 80033ac:	f000 f9c8 	bl	8003740 <_lseek_r>
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033ba:	81a3      	strh	r3, [r4, #12]
 80033bc:	4632      	mov	r2, r6
 80033be:	463b      	mov	r3, r7
 80033c0:	4628      	mov	r0, r5
 80033c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033c6:	f000 b869 	b.w	800349c <_write_r>

080033ca <__sseek>:
 80033ca:	b510      	push	{r4, lr}
 80033cc:	460c      	mov	r4, r1
 80033ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033d2:	f000 f9b5 	bl	8003740 <_lseek_r>
 80033d6:	1c43      	adds	r3, r0, #1
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	bf15      	itete	ne
 80033dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80033de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033e6:	81a3      	strheq	r3, [r4, #12]
 80033e8:	bf18      	it	ne
 80033ea:	81a3      	strhne	r3, [r4, #12]
 80033ec:	bd10      	pop	{r4, pc}

080033ee <__sclose>:
 80033ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033f2:	f000 b8d3 	b.w	800359c <_close_r>
	...

080033f8 <__swbuf_r>:
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	460e      	mov	r6, r1
 80033fc:	4614      	mov	r4, r2
 80033fe:	4605      	mov	r5, r0
 8003400:	b118      	cbz	r0, 800340a <__swbuf_r+0x12>
 8003402:	6983      	ldr	r3, [r0, #24]
 8003404:	b90b      	cbnz	r3, 800340a <__swbuf_r+0x12>
 8003406:	f7ff fb81 	bl	8002b0c <__sinit>
 800340a:	4b21      	ldr	r3, [pc, #132]	; (8003490 <__swbuf_r+0x98>)
 800340c:	429c      	cmp	r4, r3
 800340e:	d12b      	bne.n	8003468 <__swbuf_r+0x70>
 8003410:	686c      	ldr	r4, [r5, #4]
 8003412:	69a3      	ldr	r3, [r4, #24]
 8003414:	60a3      	str	r3, [r4, #8]
 8003416:	89a3      	ldrh	r3, [r4, #12]
 8003418:	071a      	lsls	r2, r3, #28
 800341a:	d52f      	bpl.n	800347c <__swbuf_r+0x84>
 800341c:	6923      	ldr	r3, [r4, #16]
 800341e:	b36b      	cbz	r3, 800347c <__swbuf_r+0x84>
 8003420:	6923      	ldr	r3, [r4, #16]
 8003422:	6820      	ldr	r0, [r4, #0]
 8003424:	1ac0      	subs	r0, r0, r3
 8003426:	6963      	ldr	r3, [r4, #20]
 8003428:	b2f6      	uxtb	r6, r6
 800342a:	4283      	cmp	r3, r0
 800342c:	4637      	mov	r7, r6
 800342e:	dc04      	bgt.n	800343a <__swbuf_r+0x42>
 8003430:	4621      	mov	r1, r4
 8003432:	4628      	mov	r0, r5
 8003434:	f000 f948 	bl	80036c8 <_fflush_r>
 8003438:	bb30      	cbnz	r0, 8003488 <__swbuf_r+0x90>
 800343a:	68a3      	ldr	r3, [r4, #8]
 800343c:	3b01      	subs	r3, #1
 800343e:	60a3      	str	r3, [r4, #8]
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	6022      	str	r2, [r4, #0]
 8003446:	701e      	strb	r6, [r3, #0]
 8003448:	6963      	ldr	r3, [r4, #20]
 800344a:	3001      	adds	r0, #1
 800344c:	4283      	cmp	r3, r0
 800344e:	d004      	beq.n	800345a <__swbuf_r+0x62>
 8003450:	89a3      	ldrh	r3, [r4, #12]
 8003452:	07db      	lsls	r3, r3, #31
 8003454:	d506      	bpl.n	8003464 <__swbuf_r+0x6c>
 8003456:	2e0a      	cmp	r6, #10
 8003458:	d104      	bne.n	8003464 <__swbuf_r+0x6c>
 800345a:	4621      	mov	r1, r4
 800345c:	4628      	mov	r0, r5
 800345e:	f000 f933 	bl	80036c8 <_fflush_r>
 8003462:	b988      	cbnz	r0, 8003488 <__swbuf_r+0x90>
 8003464:	4638      	mov	r0, r7
 8003466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <__swbuf_r+0x9c>)
 800346a:	429c      	cmp	r4, r3
 800346c:	d101      	bne.n	8003472 <__swbuf_r+0x7a>
 800346e:	68ac      	ldr	r4, [r5, #8]
 8003470:	e7cf      	b.n	8003412 <__swbuf_r+0x1a>
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <__swbuf_r+0xa0>)
 8003474:	429c      	cmp	r4, r3
 8003476:	bf08      	it	eq
 8003478:	68ec      	ldreq	r4, [r5, #12]
 800347a:	e7ca      	b.n	8003412 <__swbuf_r+0x1a>
 800347c:	4621      	mov	r1, r4
 800347e:	4628      	mov	r0, r5
 8003480:	f000 f81e 	bl	80034c0 <__swsetup_r>
 8003484:	2800      	cmp	r0, #0
 8003486:	d0cb      	beq.n	8003420 <__swbuf_r+0x28>
 8003488:	f04f 37ff 	mov.w	r7, #4294967295
 800348c:	e7ea      	b.n	8003464 <__swbuf_r+0x6c>
 800348e:	bf00      	nop
 8003490:	080039a8 	.word	0x080039a8
 8003494:	080039c8 	.word	0x080039c8
 8003498:	08003988 	.word	0x08003988

0800349c <_write_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	4d07      	ldr	r5, [pc, #28]	; (80034bc <_write_r+0x20>)
 80034a0:	4604      	mov	r4, r0
 80034a2:	4608      	mov	r0, r1
 80034a4:	4611      	mov	r1, r2
 80034a6:	2200      	movs	r2, #0
 80034a8:	602a      	str	r2, [r5, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f7fd fd0e 	bl	8000ecc <_write>
 80034b0:	1c43      	adds	r3, r0, #1
 80034b2:	d102      	bne.n	80034ba <_write_r+0x1e>
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	b103      	cbz	r3, 80034ba <_write_r+0x1e>
 80034b8:	6023      	str	r3, [r4, #0]
 80034ba:	bd38      	pop	{r3, r4, r5, pc}
 80034bc:	2000015c 	.word	0x2000015c

080034c0 <__swsetup_r>:
 80034c0:	4b32      	ldr	r3, [pc, #200]	; (800358c <__swsetup_r+0xcc>)
 80034c2:	b570      	push	{r4, r5, r6, lr}
 80034c4:	681d      	ldr	r5, [r3, #0]
 80034c6:	4606      	mov	r6, r0
 80034c8:	460c      	mov	r4, r1
 80034ca:	b125      	cbz	r5, 80034d6 <__swsetup_r+0x16>
 80034cc:	69ab      	ldr	r3, [r5, #24]
 80034ce:	b913      	cbnz	r3, 80034d6 <__swsetup_r+0x16>
 80034d0:	4628      	mov	r0, r5
 80034d2:	f7ff fb1b 	bl	8002b0c <__sinit>
 80034d6:	4b2e      	ldr	r3, [pc, #184]	; (8003590 <__swsetup_r+0xd0>)
 80034d8:	429c      	cmp	r4, r3
 80034da:	d10f      	bne.n	80034fc <__swsetup_r+0x3c>
 80034dc:	686c      	ldr	r4, [r5, #4]
 80034de:	89a3      	ldrh	r3, [r4, #12]
 80034e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034e4:	0719      	lsls	r1, r3, #28
 80034e6:	d42c      	bmi.n	8003542 <__swsetup_r+0x82>
 80034e8:	06dd      	lsls	r5, r3, #27
 80034ea:	d411      	bmi.n	8003510 <__swsetup_r+0x50>
 80034ec:	2309      	movs	r3, #9
 80034ee:	6033      	str	r3, [r6, #0]
 80034f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80034f4:	81a3      	strh	r3, [r4, #12]
 80034f6:	f04f 30ff 	mov.w	r0, #4294967295
 80034fa:	e03e      	b.n	800357a <__swsetup_r+0xba>
 80034fc:	4b25      	ldr	r3, [pc, #148]	; (8003594 <__swsetup_r+0xd4>)
 80034fe:	429c      	cmp	r4, r3
 8003500:	d101      	bne.n	8003506 <__swsetup_r+0x46>
 8003502:	68ac      	ldr	r4, [r5, #8]
 8003504:	e7eb      	b.n	80034de <__swsetup_r+0x1e>
 8003506:	4b24      	ldr	r3, [pc, #144]	; (8003598 <__swsetup_r+0xd8>)
 8003508:	429c      	cmp	r4, r3
 800350a:	bf08      	it	eq
 800350c:	68ec      	ldreq	r4, [r5, #12]
 800350e:	e7e6      	b.n	80034de <__swsetup_r+0x1e>
 8003510:	0758      	lsls	r0, r3, #29
 8003512:	d512      	bpl.n	800353a <__swsetup_r+0x7a>
 8003514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003516:	b141      	cbz	r1, 800352a <__swsetup_r+0x6a>
 8003518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800351c:	4299      	cmp	r1, r3
 800351e:	d002      	beq.n	8003526 <__swsetup_r+0x66>
 8003520:	4630      	mov	r0, r6
 8003522:	f000 f991 	bl	8003848 <_free_r>
 8003526:	2300      	movs	r3, #0
 8003528:	6363      	str	r3, [r4, #52]	; 0x34
 800352a:	89a3      	ldrh	r3, [r4, #12]
 800352c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003530:	81a3      	strh	r3, [r4, #12]
 8003532:	2300      	movs	r3, #0
 8003534:	6063      	str	r3, [r4, #4]
 8003536:	6923      	ldr	r3, [r4, #16]
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	89a3      	ldrh	r3, [r4, #12]
 800353c:	f043 0308 	orr.w	r3, r3, #8
 8003540:	81a3      	strh	r3, [r4, #12]
 8003542:	6923      	ldr	r3, [r4, #16]
 8003544:	b94b      	cbnz	r3, 800355a <__swsetup_r+0x9a>
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800354c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003550:	d003      	beq.n	800355a <__swsetup_r+0x9a>
 8003552:	4621      	mov	r1, r4
 8003554:	4630      	mov	r0, r6
 8003556:	f000 f92b 	bl	80037b0 <__smakebuf_r>
 800355a:	89a0      	ldrh	r0, [r4, #12]
 800355c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003560:	f010 0301 	ands.w	r3, r0, #1
 8003564:	d00a      	beq.n	800357c <__swsetup_r+0xbc>
 8003566:	2300      	movs	r3, #0
 8003568:	60a3      	str	r3, [r4, #8]
 800356a:	6963      	ldr	r3, [r4, #20]
 800356c:	425b      	negs	r3, r3
 800356e:	61a3      	str	r3, [r4, #24]
 8003570:	6923      	ldr	r3, [r4, #16]
 8003572:	b943      	cbnz	r3, 8003586 <__swsetup_r+0xc6>
 8003574:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003578:	d1ba      	bne.n	80034f0 <__swsetup_r+0x30>
 800357a:	bd70      	pop	{r4, r5, r6, pc}
 800357c:	0781      	lsls	r1, r0, #30
 800357e:	bf58      	it	pl
 8003580:	6963      	ldrpl	r3, [r4, #20]
 8003582:	60a3      	str	r3, [r4, #8]
 8003584:	e7f4      	b.n	8003570 <__swsetup_r+0xb0>
 8003586:	2000      	movs	r0, #0
 8003588:	e7f7      	b.n	800357a <__swsetup_r+0xba>
 800358a:	bf00      	nop
 800358c:	2000000c 	.word	0x2000000c
 8003590:	080039a8 	.word	0x080039a8
 8003594:	080039c8 	.word	0x080039c8
 8003598:	08003988 	.word	0x08003988

0800359c <_close_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4d06      	ldr	r5, [pc, #24]	; (80035b8 <_close_r+0x1c>)
 80035a0:	2300      	movs	r3, #0
 80035a2:	4604      	mov	r4, r0
 80035a4:	4608      	mov	r0, r1
 80035a6:	602b      	str	r3, [r5, #0]
 80035a8:	f7fd fc9e 	bl	8000ee8 <_close>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d102      	bne.n	80035b6 <_close_r+0x1a>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	b103      	cbz	r3, 80035b6 <_close_r+0x1a>
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	2000015c 	.word	0x2000015c

080035bc <__sflush_r>:
 80035bc:	898a      	ldrh	r2, [r1, #12]
 80035be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035c2:	4605      	mov	r5, r0
 80035c4:	0710      	lsls	r0, r2, #28
 80035c6:	460c      	mov	r4, r1
 80035c8:	d458      	bmi.n	800367c <__sflush_r+0xc0>
 80035ca:	684b      	ldr	r3, [r1, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	dc05      	bgt.n	80035dc <__sflush_r+0x20>
 80035d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	dc02      	bgt.n	80035dc <__sflush_r+0x20>
 80035d6:	2000      	movs	r0, #0
 80035d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035de:	2e00      	cmp	r6, #0
 80035e0:	d0f9      	beq.n	80035d6 <__sflush_r+0x1a>
 80035e2:	2300      	movs	r3, #0
 80035e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035e8:	682f      	ldr	r7, [r5, #0]
 80035ea:	602b      	str	r3, [r5, #0]
 80035ec:	d032      	beq.n	8003654 <__sflush_r+0x98>
 80035ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	075a      	lsls	r2, r3, #29
 80035f4:	d505      	bpl.n	8003602 <__sflush_r+0x46>
 80035f6:	6863      	ldr	r3, [r4, #4]
 80035f8:	1ac0      	subs	r0, r0, r3
 80035fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035fc:	b10b      	cbz	r3, 8003602 <__sflush_r+0x46>
 80035fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003600:	1ac0      	subs	r0, r0, r3
 8003602:	2300      	movs	r3, #0
 8003604:	4602      	mov	r2, r0
 8003606:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003608:	6a21      	ldr	r1, [r4, #32]
 800360a:	4628      	mov	r0, r5
 800360c:	47b0      	blx	r6
 800360e:	1c43      	adds	r3, r0, #1
 8003610:	89a3      	ldrh	r3, [r4, #12]
 8003612:	d106      	bne.n	8003622 <__sflush_r+0x66>
 8003614:	6829      	ldr	r1, [r5, #0]
 8003616:	291d      	cmp	r1, #29
 8003618:	d82c      	bhi.n	8003674 <__sflush_r+0xb8>
 800361a:	4a2a      	ldr	r2, [pc, #168]	; (80036c4 <__sflush_r+0x108>)
 800361c:	40ca      	lsrs	r2, r1
 800361e:	07d6      	lsls	r6, r2, #31
 8003620:	d528      	bpl.n	8003674 <__sflush_r+0xb8>
 8003622:	2200      	movs	r2, #0
 8003624:	6062      	str	r2, [r4, #4]
 8003626:	04d9      	lsls	r1, r3, #19
 8003628:	6922      	ldr	r2, [r4, #16]
 800362a:	6022      	str	r2, [r4, #0]
 800362c:	d504      	bpl.n	8003638 <__sflush_r+0x7c>
 800362e:	1c42      	adds	r2, r0, #1
 8003630:	d101      	bne.n	8003636 <__sflush_r+0x7a>
 8003632:	682b      	ldr	r3, [r5, #0]
 8003634:	b903      	cbnz	r3, 8003638 <__sflush_r+0x7c>
 8003636:	6560      	str	r0, [r4, #84]	; 0x54
 8003638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800363a:	602f      	str	r7, [r5, #0]
 800363c:	2900      	cmp	r1, #0
 800363e:	d0ca      	beq.n	80035d6 <__sflush_r+0x1a>
 8003640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003644:	4299      	cmp	r1, r3
 8003646:	d002      	beq.n	800364e <__sflush_r+0x92>
 8003648:	4628      	mov	r0, r5
 800364a:	f000 f8fd 	bl	8003848 <_free_r>
 800364e:	2000      	movs	r0, #0
 8003650:	6360      	str	r0, [r4, #52]	; 0x34
 8003652:	e7c1      	b.n	80035d8 <__sflush_r+0x1c>
 8003654:	6a21      	ldr	r1, [r4, #32]
 8003656:	2301      	movs	r3, #1
 8003658:	4628      	mov	r0, r5
 800365a:	47b0      	blx	r6
 800365c:	1c41      	adds	r1, r0, #1
 800365e:	d1c7      	bne.n	80035f0 <__sflush_r+0x34>
 8003660:	682b      	ldr	r3, [r5, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0c4      	beq.n	80035f0 <__sflush_r+0x34>
 8003666:	2b1d      	cmp	r3, #29
 8003668:	d001      	beq.n	800366e <__sflush_r+0xb2>
 800366a:	2b16      	cmp	r3, #22
 800366c:	d101      	bne.n	8003672 <__sflush_r+0xb6>
 800366e:	602f      	str	r7, [r5, #0]
 8003670:	e7b1      	b.n	80035d6 <__sflush_r+0x1a>
 8003672:	89a3      	ldrh	r3, [r4, #12]
 8003674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003678:	81a3      	strh	r3, [r4, #12]
 800367a:	e7ad      	b.n	80035d8 <__sflush_r+0x1c>
 800367c:	690f      	ldr	r7, [r1, #16]
 800367e:	2f00      	cmp	r7, #0
 8003680:	d0a9      	beq.n	80035d6 <__sflush_r+0x1a>
 8003682:	0793      	lsls	r3, r2, #30
 8003684:	680e      	ldr	r6, [r1, #0]
 8003686:	bf08      	it	eq
 8003688:	694b      	ldreq	r3, [r1, #20]
 800368a:	600f      	str	r7, [r1, #0]
 800368c:	bf18      	it	ne
 800368e:	2300      	movne	r3, #0
 8003690:	eba6 0807 	sub.w	r8, r6, r7
 8003694:	608b      	str	r3, [r1, #8]
 8003696:	f1b8 0f00 	cmp.w	r8, #0
 800369a:	dd9c      	ble.n	80035d6 <__sflush_r+0x1a>
 800369c:	6a21      	ldr	r1, [r4, #32]
 800369e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036a0:	4643      	mov	r3, r8
 80036a2:	463a      	mov	r2, r7
 80036a4:	4628      	mov	r0, r5
 80036a6:	47b0      	blx	r6
 80036a8:	2800      	cmp	r0, #0
 80036aa:	dc06      	bgt.n	80036ba <__sflush_r+0xfe>
 80036ac:	89a3      	ldrh	r3, [r4, #12]
 80036ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	e78e      	b.n	80035d8 <__sflush_r+0x1c>
 80036ba:	4407      	add	r7, r0
 80036bc:	eba8 0800 	sub.w	r8, r8, r0
 80036c0:	e7e9      	b.n	8003696 <__sflush_r+0xda>
 80036c2:	bf00      	nop
 80036c4:	20400001 	.word	0x20400001

080036c8 <_fflush_r>:
 80036c8:	b538      	push	{r3, r4, r5, lr}
 80036ca:	690b      	ldr	r3, [r1, #16]
 80036cc:	4605      	mov	r5, r0
 80036ce:	460c      	mov	r4, r1
 80036d0:	b913      	cbnz	r3, 80036d8 <_fflush_r+0x10>
 80036d2:	2500      	movs	r5, #0
 80036d4:	4628      	mov	r0, r5
 80036d6:	bd38      	pop	{r3, r4, r5, pc}
 80036d8:	b118      	cbz	r0, 80036e2 <_fflush_r+0x1a>
 80036da:	6983      	ldr	r3, [r0, #24]
 80036dc:	b90b      	cbnz	r3, 80036e2 <_fflush_r+0x1a>
 80036de:	f7ff fa15 	bl	8002b0c <__sinit>
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <_fflush_r+0x6c>)
 80036e4:	429c      	cmp	r4, r3
 80036e6:	d11b      	bne.n	8003720 <_fflush_r+0x58>
 80036e8:	686c      	ldr	r4, [r5, #4]
 80036ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0ef      	beq.n	80036d2 <_fflush_r+0xa>
 80036f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036f4:	07d0      	lsls	r0, r2, #31
 80036f6:	d404      	bmi.n	8003702 <_fflush_r+0x3a>
 80036f8:	0599      	lsls	r1, r3, #22
 80036fa:	d402      	bmi.n	8003702 <_fflush_r+0x3a>
 80036fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036fe:	f7ff faa3 	bl	8002c48 <__retarget_lock_acquire_recursive>
 8003702:	4628      	mov	r0, r5
 8003704:	4621      	mov	r1, r4
 8003706:	f7ff ff59 	bl	80035bc <__sflush_r>
 800370a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800370c:	07da      	lsls	r2, r3, #31
 800370e:	4605      	mov	r5, r0
 8003710:	d4e0      	bmi.n	80036d4 <_fflush_r+0xc>
 8003712:	89a3      	ldrh	r3, [r4, #12]
 8003714:	059b      	lsls	r3, r3, #22
 8003716:	d4dd      	bmi.n	80036d4 <_fflush_r+0xc>
 8003718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800371a:	f7ff fa96 	bl	8002c4a <__retarget_lock_release_recursive>
 800371e:	e7d9      	b.n	80036d4 <_fflush_r+0xc>
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <_fflush_r+0x70>)
 8003722:	429c      	cmp	r4, r3
 8003724:	d101      	bne.n	800372a <_fflush_r+0x62>
 8003726:	68ac      	ldr	r4, [r5, #8]
 8003728:	e7df      	b.n	80036ea <_fflush_r+0x22>
 800372a:	4b04      	ldr	r3, [pc, #16]	; (800373c <_fflush_r+0x74>)
 800372c:	429c      	cmp	r4, r3
 800372e:	bf08      	it	eq
 8003730:	68ec      	ldreq	r4, [r5, #12]
 8003732:	e7da      	b.n	80036ea <_fflush_r+0x22>
 8003734:	080039a8 	.word	0x080039a8
 8003738:	080039c8 	.word	0x080039c8
 800373c:	08003988 	.word	0x08003988

08003740 <_lseek_r>:
 8003740:	b538      	push	{r3, r4, r5, lr}
 8003742:	4d07      	ldr	r5, [pc, #28]	; (8003760 <_lseek_r+0x20>)
 8003744:	4604      	mov	r4, r0
 8003746:	4608      	mov	r0, r1
 8003748:	4611      	mov	r1, r2
 800374a:	2200      	movs	r2, #0
 800374c:	602a      	str	r2, [r5, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	f7fd fbd6 	bl	8000f00 <_lseek>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d102      	bne.n	800375e <_lseek_r+0x1e>
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	b103      	cbz	r3, 800375e <_lseek_r+0x1e>
 800375c:	6023      	str	r3, [r4, #0]
 800375e:	bd38      	pop	{r3, r4, r5, pc}
 8003760:	2000015c 	.word	0x2000015c

08003764 <__swhatbuf_r>:
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	460e      	mov	r6, r1
 8003768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800376c:	2900      	cmp	r1, #0
 800376e:	b096      	sub	sp, #88	; 0x58
 8003770:	4614      	mov	r4, r2
 8003772:	461d      	mov	r5, r3
 8003774:	da08      	bge.n	8003788 <__swhatbuf_r+0x24>
 8003776:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	602a      	str	r2, [r5, #0]
 800377e:	061a      	lsls	r2, r3, #24
 8003780:	d410      	bmi.n	80037a4 <__swhatbuf_r+0x40>
 8003782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003786:	e00e      	b.n	80037a6 <__swhatbuf_r+0x42>
 8003788:	466a      	mov	r2, sp
 800378a:	f000 f8bb 	bl	8003904 <_fstat_r>
 800378e:	2800      	cmp	r0, #0
 8003790:	dbf1      	blt.n	8003776 <__swhatbuf_r+0x12>
 8003792:	9a01      	ldr	r2, [sp, #4]
 8003794:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003798:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800379c:	425a      	negs	r2, r3
 800379e:	415a      	adcs	r2, r3
 80037a0:	602a      	str	r2, [r5, #0]
 80037a2:	e7ee      	b.n	8003782 <__swhatbuf_r+0x1e>
 80037a4:	2340      	movs	r3, #64	; 0x40
 80037a6:	2000      	movs	r0, #0
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	b016      	add	sp, #88	; 0x58
 80037ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080037b0 <__smakebuf_r>:
 80037b0:	898b      	ldrh	r3, [r1, #12]
 80037b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037b4:	079d      	lsls	r5, r3, #30
 80037b6:	4606      	mov	r6, r0
 80037b8:	460c      	mov	r4, r1
 80037ba:	d507      	bpl.n	80037cc <__smakebuf_r+0x1c>
 80037bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037c0:	6023      	str	r3, [r4, #0]
 80037c2:	6123      	str	r3, [r4, #16]
 80037c4:	2301      	movs	r3, #1
 80037c6:	6163      	str	r3, [r4, #20]
 80037c8:	b002      	add	sp, #8
 80037ca:	bd70      	pop	{r4, r5, r6, pc}
 80037cc:	ab01      	add	r3, sp, #4
 80037ce:	466a      	mov	r2, sp
 80037d0:	f7ff ffc8 	bl	8003764 <__swhatbuf_r>
 80037d4:	9900      	ldr	r1, [sp, #0]
 80037d6:	4605      	mov	r5, r0
 80037d8:	4630      	mov	r0, r6
 80037da:	f7ff fa57 	bl	8002c8c <_malloc_r>
 80037de:	b948      	cbnz	r0, 80037f4 <__smakebuf_r+0x44>
 80037e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037e4:	059a      	lsls	r2, r3, #22
 80037e6:	d4ef      	bmi.n	80037c8 <__smakebuf_r+0x18>
 80037e8:	f023 0303 	bic.w	r3, r3, #3
 80037ec:	f043 0302 	orr.w	r3, r3, #2
 80037f0:	81a3      	strh	r3, [r4, #12]
 80037f2:	e7e3      	b.n	80037bc <__smakebuf_r+0xc>
 80037f4:	4b0d      	ldr	r3, [pc, #52]	; (800382c <__smakebuf_r+0x7c>)
 80037f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80037f8:	89a3      	ldrh	r3, [r4, #12]
 80037fa:	6020      	str	r0, [r4, #0]
 80037fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003800:	81a3      	strh	r3, [r4, #12]
 8003802:	9b00      	ldr	r3, [sp, #0]
 8003804:	6163      	str	r3, [r4, #20]
 8003806:	9b01      	ldr	r3, [sp, #4]
 8003808:	6120      	str	r0, [r4, #16]
 800380a:	b15b      	cbz	r3, 8003824 <__smakebuf_r+0x74>
 800380c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003810:	4630      	mov	r0, r6
 8003812:	f000 f889 	bl	8003928 <_isatty_r>
 8003816:	b128      	cbz	r0, 8003824 <__smakebuf_r+0x74>
 8003818:	89a3      	ldrh	r3, [r4, #12]
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	81a3      	strh	r3, [r4, #12]
 8003824:	89a0      	ldrh	r0, [r4, #12]
 8003826:	4305      	orrs	r5, r0
 8003828:	81a5      	strh	r5, [r4, #12]
 800382a:	e7cd      	b.n	80037c8 <__smakebuf_r+0x18>
 800382c:	08002aa5 	.word	0x08002aa5

08003830 <__malloc_lock>:
 8003830:	4801      	ldr	r0, [pc, #4]	; (8003838 <__malloc_lock+0x8>)
 8003832:	f7ff ba09 	b.w	8002c48 <__retarget_lock_acquire_recursive>
 8003836:	bf00      	nop
 8003838:	20000150 	.word	0x20000150

0800383c <__malloc_unlock>:
 800383c:	4801      	ldr	r0, [pc, #4]	; (8003844 <__malloc_unlock+0x8>)
 800383e:	f7ff ba04 	b.w	8002c4a <__retarget_lock_release_recursive>
 8003842:	bf00      	nop
 8003844:	20000150 	.word	0x20000150

08003848 <_free_r>:
 8003848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800384a:	2900      	cmp	r1, #0
 800384c:	d044      	beq.n	80038d8 <_free_r+0x90>
 800384e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003852:	9001      	str	r0, [sp, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f1a1 0404 	sub.w	r4, r1, #4
 800385a:	bfb8      	it	lt
 800385c:	18e4      	addlt	r4, r4, r3
 800385e:	f7ff ffe7 	bl	8003830 <__malloc_lock>
 8003862:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <_free_r+0x94>)
 8003864:	9801      	ldr	r0, [sp, #4]
 8003866:	6813      	ldr	r3, [r2, #0]
 8003868:	b933      	cbnz	r3, 8003878 <_free_r+0x30>
 800386a:	6063      	str	r3, [r4, #4]
 800386c:	6014      	str	r4, [r2, #0]
 800386e:	b003      	add	sp, #12
 8003870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003874:	f7ff bfe2 	b.w	800383c <__malloc_unlock>
 8003878:	42a3      	cmp	r3, r4
 800387a:	d908      	bls.n	800388e <_free_r+0x46>
 800387c:	6825      	ldr	r5, [r4, #0]
 800387e:	1961      	adds	r1, r4, r5
 8003880:	428b      	cmp	r3, r1
 8003882:	bf01      	itttt	eq
 8003884:	6819      	ldreq	r1, [r3, #0]
 8003886:	685b      	ldreq	r3, [r3, #4]
 8003888:	1949      	addeq	r1, r1, r5
 800388a:	6021      	streq	r1, [r4, #0]
 800388c:	e7ed      	b.n	800386a <_free_r+0x22>
 800388e:	461a      	mov	r2, r3
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	b10b      	cbz	r3, 8003898 <_free_r+0x50>
 8003894:	42a3      	cmp	r3, r4
 8003896:	d9fa      	bls.n	800388e <_free_r+0x46>
 8003898:	6811      	ldr	r1, [r2, #0]
 800389a:	1855      	adds	r5, r2, r1
 800389c:	42a5      	cmp	r5, r4
 800389e:	d10b      	bne.n	80038b8 <_free_r+0x70>
 80038a0:	6824      	ldr	r4, [r4, #0]
 80038a2:	4421      	add	r1, r4
 80038a4:	1854      	adds	r4, r2, r1
 80038a6:	42a3      	cmp	r3, r4
 80038a8:	6011      	str	r1, [r2, #0]
 80038aa:	d1e0      	bne.n	800386e <_free_r+0x26>
 80038ac:	681c      	ldr	r4, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	6053      	str	r3, [r2, #4]
 80038b2:	4421      	add	r1, r4
 80038b4:	6011      	str	r1, [r2, #0]
 80038b6:	e7da      	b.n	800386e <_free_r+0x26>
 80038b8:	d902      	bls.n	80038c0 <_free_r+0x78>
 80038ba:	230c      	movs	r3, #12
 80038bc:	6003      	str	r3, [r0, #0]
 80038be:	e7d6      	b.n	800386e <_free_r+0x26>
 80038c0:	6825      	ldr	r5, [r4, #0]
 80038c2:	1961      	adds	r1, r4, r5
 80038c4:	428b      	cmp	r3, r1
 80038c6:	bf04      	itt	eq
 80038c8:	6819      	ldreq	r1, [r3, #0]
 80038ca:	685b      	ldreq	r3, [r3, #4]
 80038cc:	6063      	str	r3, [r4, #4]
 80038ce:	bf04      	itt	eq
 80038d0:	1949      	addeq	r1, r1, r5
 80038d2:	6021      	streq	r1, [r4, #0]
 80038d4:	6054      	str	r4, [r2, #4]
 80038d6:	e7ca      	b.n	800386e <_free_r+0x26>
 80038d8:	b003      	add	sp, #12
 80038da:	bd30      	pop	{r4, r5, pc}
 80038dc:	20000154 	.word	0x20000154

080038e0 <_read_r>:
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4d07      	ldr	r5, [pc, #28]	; (8003900 <_read_r+0x20>)
 80038e4:	4604      	mov	r4, r0
 80038e6:	4608      	mov	r0, r1
 80038e8:	4611      	mov	r1, r2
 80038ea:	2200      	movs	r2, #0
 80038ec:	602a      	str	r2, [r5, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	f7fd fade 	bl	8000eb0 <_read>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	d102      	bne.n	80038fe <_read_r+0x1e>
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	b103      	cbz	r3, 80038fe <_read_r+0x1e>
 80038fc:	6023      	str	r3, [r4, #0]
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	2000015c 	.word	0x2000015c

08003904 <_fstat_r>:
 8003904:	b538      	push	{r3, r4, r5, lr}
 8003906:	4d07      	ldr	r5, [pc, #28]	; (8003924 <_fstat_r+0x20>)
 8003908:	2300      	movs	r3, #0
 800390a:	4604      	mov	r4, r0
 800390c:	4608      	mov	r0, r1
 800390e:	4611      	mov	r1, r2
 8003910:	602b      	str	r3, [r5, #0]
 8003912:	f7fd faed 	bl	8000ef0 <_fstat>
 8003916:	1c43      	adds	r3, r0, #1
 8003918:	d102      	bne.n	8003920 <_fstat_r+0x1c>
 800391a:	682b      	ldr	r3, [r5, #0]
 800391c:	b103      	cbz	r3, 8003920 <_fstat_r+0x1c>
 800391e:	6023      	str	r3, [r4, #0]
 8003920:	bd38      	pop	{r3, r4, r5, pc}
 8003922:	bf00      	nop
 8003924:	2000015c 	.word	0x2000015c

08003928 <_isatty_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4d06      	ldr	r5, [pc, #24]	; (8003944 <_isatty_r+0x1c>)
 800392c:	2300      	movs	r3, #0
 800392e:	4604      	mov	r4, r0
 8003930:	4608      	mov	r0, r1
 8003932:	602b      	str	r3, [r5, #0]
 8003934:	f7fd fae2 	bl	8000efc <_isatty>
 8003938:	1c43      	adds	r3, r0, #1
 800393a:	d102      	bne.n	8003942 <_isatty_r+0x1a>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	b103      	cbz	r3, 8003942 <_isatty_r+0x1a>
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	bd38      	pop	{r3, r4, r5, pc}
 8003944:	2000015c 	.word	0x2000015c

08003948 <_init>:
 8003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394a:	bf00      	nop
 800394c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394e:	bc08      	pop	{r3}
 8003950:	469e      	mov	lr, r3
 8003952:	4770      	bx	lr

08003954 <_fini>:
 8003954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003956:	bf00      	nop
 8003958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395a:	bc08      	pop	{r3}
 800395c:	469e      	mov	lr, r3
 800395e:	4770      	bx	lr
